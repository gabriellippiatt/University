package stops;

import java.util.*;

/**
 * Represents an entry in a routing table.
 *
 * <p>The table is able to redirect passengers from their current stop to the
 * next intermediate stop which they should go to in order to reach their final
 * destination.
 */
public class RoutingTable {
    // The initial stop
    private Stop initialStop;
    // the map used for the Routing Table
    // <destination,(Immediate Destination, Cost)>
    private Map<Stop,RoutingEntry> routingMap ;
    // the map used for the destination and its associated cost
    //                                                    <Destination,Cost>
    private Map<Stop, Integer> destinationCosts;
    // Stack of stops reachable from the stop in this table
    private Stack<Stop> traversalStack = new Stack<>();
    // Stack of stops reachable from the stop in this table
    private List<Stop> traversalList = new ArrayList<>();

    /**
     * Creates a new RoutingTable for the given stop.
     *
     * The routing table should be created with an entry for its initial stop
     * (i.e. a mapping from the stop to a RoutingEntry.RoutingEntry() for that
     * stop.
     *
     * @param initialStop The stop for which this table will handle routing.
     */
    public RoutingTable(Stop initialStop){
        this.initialStop = initialStop;
        routingMap = new HashMap<>();
        routingMap.put(initialStop, new RoutingEntry(initialStop,0));
    }

    /**
     * Adds the given stop as a neighbour of the stop stored in this table.
     *
     * A neighbouring stop should be added as a destination in this table, with
     * the cost to reach that destination simply being the Manhattan distance
     * between this table's stop and the given neighbour stop.
     *
     * If the given neighbour already exists in the table, it should be updated
     * (as defined in addOrUpdateEntry(Stop, int, Stop)).
     *
     * The 'intermediate'/'next' stop between this table's stop and the new
     * neighbour stop should simply be the neighbour stop itself.
     *
     * Once the new neighbour has been added as an entry, this table should be
     * synchronised with the rest of the network using the synchronise() method.
     *
     * @param neighbour The stop to be added as a neighbour.
     */
    public void addNeighbour(Stop neighbour){
        neighbour.addNeighbouringStop(initialStop);
        int neighbouringCost = this.initialStop.distanceTo(neighbour);
        routingMap.put(neighbour,new RoutingEntry(neighbour, neighbouringCost));
        if (routingMap.containsKey(neighbour)){
            routingMap.replace(neighbour, new RoutingEntry(neighbour,
                                                            neighbouringCost));
        }
        // SYNCHRONISE TODO
    }

    /**
     * If there is currently no entry for the destination in the table, a new
     * entry for the given destination should be added, with a RoutingEntry for
     * the given cost and next (intermediate) stop.
     *
     * If there is already an entry for the given destination, and the newCost
     * is lower than the current cost associated with the destination, then the
     * entry should be updated to have the given newCost and next (intermediate)
     * stop.
     *
     * If there is already an entry for the given destination, but the newCost
     * is greater than or equal to the current cost associated with the
     * destination, then the entry should remain unchanged.
     *
     * @param destination The destination stop to add/update the entry.
     * @param newCost The new cost to associate with the new/updated entry
     * @param intermediate The new intermediate/next stop to associate with the
     *                     new/updated entry
     * @return
     * True if a new entry was added, or an existing one was updated, or
     * false if the table remained unchanged.
     */
    public boolean addOrUpdateEntry(Stop destination, int newCost,
                                    Stop intermediate) {
        if (!routingMap.containsKey(destination)) {
            routingMap.put(destination, new RoutingEntry(intermediate, newCost));
            return true;
        } else {
            if (routingMap.get(destination).getCost() > newCost) {
                routingMap.replace(destination, routingMap.get(destination),
                        new RoutingEntry(intermediate, newCost));
                return true;
            } else {
                return false;
            }
        }
    }

    /**
     * Returns the cost associated with getting to the given stop.
     *
     * @param stop The stop to get the cost.
     * @return
     * The cost to the given stop, or Integer.MAX_VALUE if the stop is not
     * currently in this routing table.
     */
    public int costTo(Stop stop) {
        if (routingMap.containsKey(stop)) {
            return routingMap.get(stop).getCost();
        } else {
            return Integer.MAX_VALUE;
        }
    }

    /**
     * Maps each destination stop in this table to the cost associated with
     * getting to that destination.
     *
     * @return
     * A mapping from destination stops to the costs associated with getting
     * to those stops.
     */
    public Map<Stop,Integer> getCosts() {
        destinationCosts = new HashMap<>();
        for(Stop destination : routingMap.keySet()) {
            destinationCosts.put(destination,
                    routingMap.get(destination).getCost());
        }
        return destinationCosts;
    }

    /**
     * Return the stop for which this table will handle routing.
     * @return the stop for which this table will handle routing.
     */
    public Stop getStop() {
        return initialStop;
    }

    /**
     * Returns the next intermediate stop which passengers should be routed
     * to  in order to reach the given destination. If the given stop is null
     * or not in the table, then return null
     *
     * @param destination The destination which the passengers are being routed.
     * @return
     * The best stop to route the passengers to in order to reach the given destination.
     */
    public Stop nextStop(Stop destination) {
        if(destination != null || !routingMap.containsKey(destination)) {
            return routingMap.get(destination).getNext();
        } else {
            return null;
        }
    }

    /**
     * Synchronises this routing table with the other tables in the network.
     *
     * In each iteration, every stop in the network which is reachable by this
     * table's stop (as returned by traverseNetwork()) must be considered. For
     * each stop x in the network, each of its neighbours must be visited, and
     * the entries from x must be transferred to each neighbour (using the
     * transferEntries(Stop) method).
     *
     * If any of these transfers results in a change to the table that the
     * entries are being transferred, then the entire process must be repeated
     * again. These iterations should continue happening until no changes occur
     * to any of the tables in the network.
     *
     * This process is designed to handle changes which need to be propagated
     * throughout the entire network, which could take more than one iteration.
     */
    public void synchronise() { //TODO

    }

    /**
     * Updates the entries in the routing table of the given other stop, with
     * the entries from this routing table.
     * If this routing table has entries which the other stop's table doesn't,
     * then the entries should be added to the other table (as defined in
     * addOrUpdateEntry(Stop, int, Stop)) with the cost being updated to include
     * the distance.
     *
     * If this routing table has entries which the other stop's table does have,
     * and the new cost would be lower than that associated with its existing
     * entry, then its entry should be updated (as defined in
     * addOrUpdateEntry(Stop, int, Stop)).
     *
     * If this routing table has entries which the other stop's table does have,
     * but the new cost would be greater than or equal to that associated with
     * its existing entry, then its entry should remain unchanged.
     *
     * @param other The stop whose routing table this table's entries should be
     *              transferred.
     * @return
     * True if any new entries were added to the other stop's table, or if any
     * of its existing entries were updated, or false if the other stop's table
     * remains unchanged.
     *
     * Requirement: this.getStop().getNeighbours().contains(other) == true.
     */
    public boolean transferEntries(Stop other) { //TODO

        // transfer status
        boolean transferStatus = false;



        // get the destination cost map of this stop
        Map<Stop,Integer> thisCostMap = destinationCosts;

        List<Stop> thisDestinationList =
                new ArrayList<>(thisCostMap.keySet());


        // get the destination cost map of the other stop
        Map<Stop,Integer> otherCostMap = other.getRoutingTable().getCosts();

        List<Stop> otherDestinationList =
                new ArrayList<>(otherCostMap.keySet());


        for (Stop destination : thisDestinationList) {

            if (!otherDestinationList.contains(destination)) {

                other.getRoutingTable().addOrUpdateEntry(destination,
                        destinationCosts.get(destination)+
                                                otherCostMap.get(initialStop),
                        destination.getRoutingTable().initialStop);

                // add to other



                transferStatus = true;
            } else if (otherDestinationList.contains(destination)) {
                if (destinationCosts.get(destination) < otherCostMap.get(destination)) {

                    other.getRoutingTable().addOrUpdateEntry(destination,
                            destinationCosts.get(destination)+
                                                otherCostMap.get(initialStop),
                            destination.getRoutingTable().initialStop);

                    // update



                    transferStatus = true;
                } else {

                    // do nothing

                    transferStatus = false;
                }
            } else {
                transferStatus = false;
            }
        }
        return transferStatus;
    }

    /**
     * Performs a traversal of all the stops in the network, and returns a list
     * of every stop which is reachable from the stop stored in this table.
     *      1. Firstly create an empty list of Stops and an empty Stack of
     *      Stops. Push the RoutingTable's Stop on to the stack.
     *      2. While the stack is not empty,
     *          1. pop the top Stop (current) from the stack.
     *          2. For each of that stop's neighbours,
     *              1. if they are not in the list, add them to the stack.
     *          3. Then add the current Stop to the list.
     *      3. Return the list of seen stops.
     *
     * @return
     * All of the stops in the network which are reachable by the stop stored
     * in this table.
     */
    public java.util.List<Stop> traverseNetwork() {
        // the stop at the top of the stack
        Stop topStop;
        traversalStack.push(initialStop);
        while (!traversalStack.empty()) {
            topStop = traversalStack.pop();
            for(Stop neighbour : topStop.getNeighbours()) {
                if (!traversalList.contains(neighbour)) {
                    traversalStack.push(neighbour);
                }
            }
            traversalList.add(topStop);
        }
        return traversalList;
    }
}
