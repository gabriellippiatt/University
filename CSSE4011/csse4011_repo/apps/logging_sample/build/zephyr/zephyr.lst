
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	48 39 00 20 2d 62 00 00 a7 dd 00 00 01 62 00 00     H9. -b.......b..
  10:	01 62 00 00 01 62 00 00 01 62 00 00 00 00 00 00     .b...b...b......
	...
  2c:	d9 5a 00 00 01 62 00 00 00 00 00 00 8d 5a 00 00     .Z...b.......Z..
  3c:	01 62 00 00                                         .b..

00000040 <_irq_vector_table>:
  40:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  50:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  60:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  70:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  80:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  90:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  a0:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  b0:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  c0:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  d0:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  e0:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..
  f0:	55 5b 00 00 55 5b 00 00 55 5b 00 00 55 5b 00 00     U[..U[..U[..U[..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <__data_size+0x94>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <__data_size+0x6>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <__data_size+0x8c>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SHELL_HISTORY_BUFFER+0x1a>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SHELL_HISTORY_BUFFER+0x1a>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <__data_size+0x90>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <__data_size+0x2>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <__data_size+0x2>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <__data_size+0x84>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <__data_size+0x4e>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <__data_size+0x4e>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <__data_size+0x88>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <__data_size+0x7a>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <__data_size+0x7a>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <__data_size+0x4e>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <__data_size+0x7a>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SHELL_HISTORY_BUFFER+0x1a>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <__data_size+0x2>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <__data_size+0xa4>
     2dc:	b10e      	cbz	r6, 2e2 <__data_size+0x9e>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <__data_size+0xb2>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xce>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd2>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     3a2:	d106      	bne.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <z_log_msg2_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
     3dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     uint8_t level, const void *data,
					     size_t dlen, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
     3de:	ab0a      	add	r3, sp, #40	; 0x28
     3e0:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
     3e2:	9302      	str	r3, [sp, #8]
     3e4:	4b05      	ldr	r3, [pc, #20]	; (3fc <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x14>)
     3e6:	9301      	str	r3, [sp, #4]
     3e8:	2300      	movs	r3, #0
     3ea:	9300      	str	r3, [sp, #0]
     3ec:	2203      	movs	r2, #3
     3ee:	4618      	mov	r0, r3
     3f0:	f001 fc1a 	bl	1c28 <z_impl_z_log_msg2_runtime_vcreate>
	z_log_msg2_runtime_vcreate(domain_id, source, level,
				   data, dlen, fmt, ap);
	va_end(ap);
}
     3f4:	b007      	add	sp, #28
     3f6:	f85d fb04 	ldr.w	pc, [sp], #4
     3fa:	bf00      	nop
     3fc:	00010158 	.word	0x00010158

00000400 <main>:
/*
 * Sample app to init USB, and demonstrate shell functionality
 */
void
main(void)
{
     400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool led_is_on = true;
	int ret;

	/* Setup DTR */
	const struct device *shell_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_shell_uart));
	uint32_t dtr = 0;
     404:	2400      	movs	r4, #0
{
     406:	b08c      	sub	sp, #48	; 0x30
	
	if (usb_enable(NULL)) {		
     408:	4620      	mov	r0, r4
	uint32_t dtr = 0;
     40a:	9404      	str	r4, [sp, #16]
	if (usb_enable(NULL)) {		
     40c:	f004 f986 	bl	471c <usb_enable>
     410:	2800      	cmp	r0, #0
     412:	d159      	bne.n	4c8 <main+0xc8>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     414:	4c3d      	ldr	r4, [pc, #244]	; (50c <main+0x10c>)
	 * This is not necessary, however, can be useful from reading early data
	 *
	 * Remove the following while loop if DTR is not required!!
	 */
	
	while (!dtr) {
     416:	9b04      	ldr	r3, [sp, #16]
     418:	2b00      	cmp	r3, #0
     41a:	d067      	beq.n	4ec <main+0xec>
		uart_line_ctrl_get(shell_dev, UART_LINE_CTRL_DTR, &dtr);
		k_sleep(K_MSEC(100));
	} 

	LOG_DBG("DTR OK");
     41c:	4e3c      	ldr	r6, [pc, #240]	; (510 <main+0x110>)
     41e:	6833      	ldr	r3, [r6, #0]
     420:	075b      	lsls	r3, r3, #29
     422:	d50d      	bpl.n	440 <main+0x40>
     424:	4b3b      	ldr	r3, [pc, #236]	; (514 <main+0x114>)
     426:	930a      	str	r3, [sp, #40]	; 0x28
     428:	4b3b      	ldr	r3, [pc, #236]	; (518 <main+0x118>)
     42a:	930b      	str	r3, [sp, #44]	; 0x2c
     42c:	2303      	movs	r3, #3
     42e:	9305      	str	r3, [sp, #20]
     430:	9309      	str	r3, [sp, #36]	; 0x24
	z_impl_z_log_msg2_static_create(source, desc, package, data);
     432:	2300      	movs	r3, #0
     434:	aa09      	add	r2, sp, #36	; 0x24
     436:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
     43a:	4630      	mov	r0, r6
     43c:	f00c fa7f 	bl	c93e <z_impl_z_log_msg2_static_create>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     440:	4836      	ldr	r0, [pc, #216]	; (51c <main+0x11c>)
     442:	f009 fe57 	bl	a0f4 <z_impl_device_get_binding>

	/* DTR - OK, Continue */

	dev = device_get_binding(LED0);
	if (dev == NULL) {
     446:	4604      	mov	r4, r0
     448:	2800      	cmp	r0, #0
     44a:	d04c      	beq.n	4e6 <main+0xe6>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     44c:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     44e:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     450:	6813      	ldr	r3, [r2, #0]
     452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     456:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
     458:	680b      	ldr	r3, [r1, #0]
     45a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
     45e:	210c      	movs	r1, #12
     460:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
     462:	2800      	cmp	r0, #0
     464:	db3f      	blt.n	4e6 <main+0xe6>
		return;
	}

	while (1) {
		gpio_pin_set(dev, PIN, (int)led_is_on);
		LOG_INF("Led is currently: %s", led_is_on ? "On" : "Off");
     466:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 520 <main+0x120>
     46a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 524 <main+0x124>
     46e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 528 <main+0x128>
	bool led_is_on = true;
     472:	2501      	movs	r5, #1

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     474:	6923      	ldr	r3, [r4, #16]
     476:	681b      	ldr	r3, [r3, #0]
     478:	f085 0701 	eor.w	r7, r5, #1
     47c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		value = (value != 0) ? 0 : 1;
     480:	bf14      	ite	ne
     482:	b2fb      	uxtbne	r3, r7
     484:	462b      	moveq	r3, r5
	if (value != 0)	{
     486:	2b00      	cmp	r3, #0
     488:	d03d      	beq.n	506 <main+0x106>
	return api->port_set_bits_raw(port, pins);
     48a:	68a3      	ldr	r3, [r4, #8]
     48c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     48e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     492:	4620      	mov	r0, r4
     494:	4798      	blx	r3
		LOG_INF("Led is currently: %s", led_is_on ? "On" : "Off");
     496:	6833      	ldr	r3, [r6, #0]
     498:	f003 0307 	and.w	r3, r3, #7
     49c:	2b02      	cmp	r3, #2
     49e:	d90c      	bls.n	4ba <main+0xba>
     4a0:	2d00      	cmp	r5, #0
     4a2:	bf14      	ite	ne
     4a4:	4643      	movne	r3, r8
     4a6:	464b      	moveq	r3, r9
     4a8:	e9cd a301 	strd	sl, r3, [sp, #4]
     4ac:	2300      	movs	r3, #0
     4ae:	4918      	ldr	r1, [pc, #96]	; (510 <main+0x110>)
     4b0:	9300      	str	r3, [sp, #0]
     4b2:	2203      	movs	r2, #3
     4b4:	4618      	mov	r0, r3
     4b6:	f7ff ff91 	bl	3dc <z_log_msg2_runtime_create.constprop.0>
		led_is_on = !led_is_on;
     4ba:	b2fd      	uxtb	r5, r7
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4bc:	2100      	movs	r1, #0
     4be:	f44f 3020 	mov.w	r0, #163840	; 0x28000
     4c2:	f00a feab 	bl	b21c <z_impl_k_sleep>
	while (1) {
     4c6:	e7d5      	b.n	474 <main+0x74>
		LOG_ERR("USB Failed");
     4c8:	4811      	ldr	r0, [pc, #68]	; (510 <main+0x110>)
     4ca:	6803      	ldr	r3, [r0, #0]
     4cc:	075a      	lsls	r2, r3, #29
     4ce:	d00a      	beq.n	4e6 <main+0xe6>
     4d0:	4b16      	ldr	r3, [pc, #88]	; (52c <main+0x12c>)
     4d2:	930a      	str	r3, [sp, #40]	; 0x28
     4d4:	2302      	movs	r3, #2
     4d6:	9305      	str	r3, [sp, #20]
     4d8:	9309      	str	r3, [sp, #36]	; 0x24
     4da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     4de:	4623      	mov	r3, r4
     4e0:	aa09      	add	r2, sp, #36	; 0x24
     4e2:	f00c fa2c 	bl	c93e <z_impl_z_log_msg2_static_create>
		k_sleep(K_SECONDS(5));
	}
}
     4e6:	b00c      	add	sp, #48	; 0x30
     4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
     4ec:	68a3      	ldr	r3, [r4, #8]
     4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     4f0:	b11b      	cbz	r3, 4fa <main+0xfa>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
     4f2:	aa04      	add	r2, sp, #16
     4f4:	2104      	movs	r1, #4
     4f6:	4620      	mov	r0, r4
     4f8:	4798      	blx	r3
     4fa:	2100      	movs	r1, #0
     4fc:	f640 40cd 	movw	r0, #3277	; 0xccd
     500:	f00a fe8c 	bl	b21c <z_impl_k_sleep>
     504:	e787      	b.n	416 <main+0x16>
     506:	68a3      	ldr	r3, [r4, #8]
     508:	691b      	ldr	r3, [r3, #16]
     50a:	e7c0      	b.n	48e <main+0x8e>
     50c:	0000f4f0 	.word	0x0000f4f0
     510:	20000270 	.word	0x20000270
     514:	0001017f 	.word	0x0001017f
     518:	0001019f 	.word	0x0001019f
     51c:	0001018a 	.word	0x0001018a
     520:	0001016d 	.word	0x0001016d
     524:	00010170 	.word	0x00010170
     528:	00010158 	.word	0x00010158
     52c:	00010174 	.word	0x00010174

00000530 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	4605      	mov	r5, r0
     536:	b08b      	sub	sp, #44	; 0x2c
     538:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     53a:	f015 0303 	ands.w	r3, r5, #3
     53e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
     542:	9203      	str	r2, [sp, #12]
     544:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
     546:	9301      	str	r3, [sp, #4]
     548:	f040 81f5 	bne.w	936 <CONFIG_ISR_STACK_SIZE+0x136>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     54c:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     54e:	2d00      	cmp	r5, #0
     550:	f040 81f4 	bne.w	93c <CONFIG_ISR_STACK_SIZE+0x13c>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     554:	f001 0607 	and.w	r6, r1, #7
     558:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     55a:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     55e:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     562:	2704      	movs	r7, #4
	s = fmt--;
     564:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     566:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     56a:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
     56e:	4652      	mov	r2, sl
	size = sizeof(char *);
     570:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     572:	b105      	cbz	r5, 576 <cbvprintf_package+0x46>
				*(const char **)buf = s;
     574:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
     576:	9b03      	ldr	r3, [sp, #12]
     578:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
     57c:	4bce      	ldr	r3, [pc, #824]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     57e:	4298      	cmp	r0, r3
     580:	f0c0 812a 	bcc.w	7d8 <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
     584:	4bcd      	ldr	r3, [pc, #820]	; (8bc <CONFIG_ISR_STACK_SIZE+0xbc>)
     586:	4298      	cmp	r0, r3
     588:	f080 8126 	bcs.w	7d8 <cbvprintf_package+0x2a8>
     58c:	f1be 0f00 	cmp.w	lr, #0
     590:	f000 813c 	beq.w	80c <CONFIG_ISR_STACK_SIZE+0xc>
	return ((addr >= (const char *)RO_START) &&
     594:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     598:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
     59c:	f1be 0f00 	cmp.w	lr, #0
     5a0:	f000 811d 	beq.w	7de <cbvprintf_package+0x2ae>
     5a4:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
     5a8:	f0c0 8119 	bcc.w	7de <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     5ac:	f06f 0015 	mvn.w	r0, #21
     5b0:	e0f5      	b.n	79e <cbvprintf_package+0x26e>
		if (!parsing) {
     5b2:	b932      	cbnz	r2, 5c2 <cbvprintf_package+0x92>
			if (*fmt == '%') {
     5b4:	2b25      	cmp	r3, #37	; 0x25
     5b6:	f040 812c 	bne.w	812 <CONFIG_ISR_STACK_SIZE+0x12>
				parsing = true;
     5ba:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     5bc:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
     5be:	46b9      	mov	r9, r7
     5c0:	e127      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
		switch (*fmt) {
     5c2:	2b2b      	cmp	r3, #43	; 0x2b
     5c4:	d824      	bhi.n	610 <cbvprintf_package+0xe0>
     5c6:	2b1f      	cmp	r3, #31
     5c8:	d801      	bhi.n	5ce <cbvprintf_package+0x9e>
			parsing = false;
     5ca:	2200      	movs	r2, #0
     5cc:	e121      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
		switch (*fmt) {
     5ce:	f1a3 0020 	sub.w	r0, r3, #32
     5d2:	280b      	cmp	r0, #11
     5d4:	d8f9      	bhi.n	5ca <cbvprintf_package+0x9a>
     5d6:	f20f 0c08 	addw	ip, pc, #8
     5da:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
     5de:	bf00      	nop
     5e0:	00000813 	.word	0x00000813
     5e4:	000005cb 	.word	0x000005cb
     5e8:	000005cb 	.word	0x000005cb
     5ec:	00000813 	.word	0x00000813
     5f0:	000005cb 	.word	0x000005cb
     5f4:	000005cb 	.word	0x000005cb
     5f8:	000005cb 	.word	0x000005cb
     5fc:	000005cb 	.word	0x000005cb
     600:	000005cb 	.word	0x000005cb
     604:	000005cb 	.word	0x000005cb
     608:	000007b7 	.word	0x000007b7
     60c:	00000813 	.word	0x00000813
     610:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
     614:	fa5f fc80 	uxtb.w	ip, r0
     618:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     61c:	d8d5      	bhi.n	5ca <cbvprintf_package+0x9a>
     61e:	284d      	cmp	r0, #77	; 0x4d
     620:	d8d3      	bhi.n	5ca <cbvprintf_package+0x9a>
     622:	f20f 0c08 	addw	ip, pc, #8
     626:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
     62a:	bf00      	nop
     62c:	00000813 	.word	0x00000813
     630:	00000813 	.word	0x00000813
     634:	000005cb 	.word	0x000005cb
     638:	00000813 	.word	0x00000813
     63c:	00000813 	.word	0x00000813
     640:	00000813 	.word	0x00000813
     644:	00000813 	.word	0x00000813
     648:	00000813 	.word	0x00000813
     64c:	00000813 	.word	0x00000813
     650:	00000813 	.word	0x00000813
     654:	00000813 	.word	0x00000813
     658:	00000813 	.word	0x00000813
     65c:	00000813 	.word	0x00000813
     660:	000005cb 	.word	0x000005cb
     664:	000005cb 	.word	0x000005cb
     668:	000005cb 	.word	0x000005cb
     66c:	000005cb 	.word	0x000005cb
     670:	000005cb 	.word	0x000005cb
     674:	000005cb 	.word	0x000005cb
     678:	000005cb 	.word	0x000005cb
     67c:	0000077f 	.word	0x0000077f
     680:	000005cb 	.word	0x000005cb
     684:	000005cb 	.word	0x000005cb
     688:	000005cb 	.word	0x000005cb
     68c:	0000077f 	.word	0x0000077f
     690:	0000077f 	.word	0x0000077f
     694:	0000077f 	.word	0x0000077f
     698:	000005cb 	.word	0x000005cb
     69c:	000005cb 	.word	0x000005cb
     6a0:	000005cb 	.word	0x000005cb
     6a4:	000005cb 	.word	0x000005cb
     6a8:	00000813 	.word	0x00000813
     6ac:	000005cb 	.word	0x000005cb
     6b0:	000005cb 	.word	0x000005cb
     6b4:	000005cb 	.word	0x000005cb
     6b8:	000005cb 	.word	0x000005cb
     6bc:	000005cb 	.word	0x000005cb
     6c0:	000005cb 	.word	0x000005cb
     6c4:	000005cb 	.word	0x000005cb
     6c8:	000005cb 	.word	0x000005cb
     6cc:	000005cb 	.word	0x000005cb
     6d0:	000005cb 	.word	0x000005cb
     6d4:	000005cb 	.word	0x000005cb
     6d8:	00000765 	.word	0x00000765
     6dc:	000005cb 	.word	0x000005cb
     6e0:	000005cb 	.word	0x000005cb
     6e4:	000005cb 	.word	0x000005cb
     6e8:	000005cb 	.word	0x000005cb
     6ec:	000005cb 	.word	0x000005cb
     6f0:	000005cb 	.word	0x000005cb
     6f4:	000005cb 	.word	0x000005cb
     6f8:	000005cb 	.word	0x000005cb
     6fc:	0000077f 	.word	0x0000077f
     700:	000005cb 	.word	0x000005cb
     704:	00000765 	.word	0x00000765
     708:	00000765 	.word	0x00000765
     70c:	0000077f 	.word	0x0000077f
     710:	0000077f 	.word	0x0000077f
     714:	0000077f 	.word	0x0000077f
     718:	00000813 	.word	0x00000813
     71c:	00000765 	.word	0x00000765
     720:	000007ad 	.word	0x000007ad
     724:	000005cb 	.word	0x000005cb
     728:	00000813 	.word	0x00000813
     72c:	000005cb 	.word	0x000005cb
     730:	000007b1 	.word	0x000007b1
     734:	00000765 	.word	0x00000765
     738:	000007b1 	.word	0x000007b1
     73c:	000005cb 	.word	0x000005cb
     740:	000005cb 	.word	0x000005cb
     744:	000007b1 	.word	0x000007b1
     748:	000005bd 	.word	0x000005bd
     74c:	00000765 	.word	0x00000765
     750:	000005cb 	.word	0x000005cb
     754:	000005cb 	.word	0x000005cb
     758:	00000765 	.word	0x00000765
     75c:	000005cb 	.word	0x000005cb
     760:	000005bd 	.word	0x000005bd
			if (fmt[-1] == 'l') {
     764:	f811 2c01 	ldrb.w	r2, [r1, #-1]
     768:	2a6c      	cmp	r2, #108	; 0x6c
     76a:	d123      	bne.n	7b4 <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
     76c:	f811 2c02 	ldrb.w	r2, [r1, #-2]
     770:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
     772:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
     776:	d02d      	beq.n	7d4 <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
     778:	2704      	movs	r7, #4
					size = sizeof(long long);
     77a:	46b9      	mov	r9, r7
     77c:	e01b      	b.n	7b6 <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
     77e:	f108 0807 	add.w	r8, r8, #7
     782:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
     786:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     788:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
     78c:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     790:	b155      	cbz	r5, 7a8 <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
     792:	eb0e 0004 	add.w	r0, lr, r4
     796:	42b0      	cmp	r0, r6
     798:	d904      	bls.n	7a4 <cbvprintf_package+0x274>
					return -ENOSPC;
     79a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     79e:	b00b      	add	sp, #44	; 0x2c
     7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     7a4:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
     7a8:	3408      	adds	r4, #8
			parsing = false;
     7aa:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
     7ac:	2708      	movs	r7, #8
     7ae:	e706      	b.n	5be <cbvprintf_package+0x8e>
			parsing = false;
     7b0:	2200      	movs	r2, #0
     7b2:	e7e1      	b.n	778 <cbvprintf_package+0x248>
			parsing = false;
     7b4:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
     7b6:	3c01      	subs	r4, #1
     7b8:	443c      	add	r4, r7
     7ba:	4278      	negs	r0, r7
     7bc:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     7be:	b125      	cbz	r5, 7ca <cbvprintf_package+0x29a>
     7c0:	eba9 0005 	sub.w	r0, r9, r5
     7c4:	4420      	add	r0, r4
     7c6:	42b0      	cmp	r0, r6
     7c8:	d8e7      	bhi.n	79a <cbvprintf_package+0x26a>
		if (*fmt == 's') {
     7ca:	2b73      	cmp	r3, #115	; 0x73
     7cc:	d143      	bne.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
			s = va_arg(ap, char *);
     7ce:	f858 0b04 	ldr.w	r0, [r8], #4
     7d2:	e6ce      	b.n	572 <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
     7d4:	2708      	movs	r7, #8
     7d6:	e7d0      	b.n	77a <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
     7d8:	f04f 0c00 	mov.w	ip, #0
     7dc:	e6dc      	b.n	598 <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     7de:	9b00      	ldr	r3, [sp, #0]
     7e0:	2b0f      	cmp	r3, #15
     7e2:	f63f aee3 	bhi.w	5ac <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
     7e6:	b345      	cbz	r5, 83a <CONFIG_ISR_STACK_SIZE+0x3a>
					str_ptr_pos[s_idx] = s_ptr_idx;
     7e8:	f8dd e000 	ldr.w	lr, [sp]
     7ec:	a80a      	add	r0, sp, #40	; 0x28
     7ee:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
     7f2:	4470      	add	r0, lr
     7f4:	f1bc 0f00 	cmp.w	ip, #0
     7f8:	d019      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     7fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
     7fe:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
     802:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     806:	9b00      	ldr	r3, [sp, #0]
     808:	3301      	adds	r3, #1
     80a:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
     80c:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     80e:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
     812:	f811 3f01 	ldrb.w	r3, [r1, #1]!
     816:	2b00      	cmp	r3, #0
     818:	f47f aecb 	bne.w	5b2 <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
     81c:	1b60      	subs	r0, r4, r5
     81e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
     822:	f4bf aec3 	bcs.w	5ac <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
     826:	bb9d      	cbnz	r5, 890 <CONFIG_ISR_STACK_SIZE+0x90>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     828:	3e08      	subs	r6, #8
     82a:	4430      	add	r0, r6
     82c:	e7b7      	b.n	79e <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
     82e:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
     832:	9b02      	ldr	r3, [sp, #8]
     834:	3301      	adds	r3, #1
     836:	9302      	str	r3, [sp, #8]
     838:	e7e5      	b.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
				} else if (is_ro) {
     83a:	f1bc 0f00 	cmp.w	ip, #0
     83e:	d001      	beq.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
					len += 1;
     840:	3601      	adds	r6, #1
     842:	e7e0      	b.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
     844:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
     848:	f00d fbee 	bl	e028 <strlen>
     84c:	3602      	adds	r6, #2
     84e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
     852:	4406      	add	r6, r0
     854:	e7d7      	b.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
		} else if (size == sizeof(int)) {
     856:	f1b9 0f04 	cmp.w	r9, #4
     85a:	d108      	bne.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
			int v = va_arg(ap, int);
     85c:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
     860:	b115      	cbz	r5, 868 <CONFIG_ISR_STACK_SIZE+0x68>
			int v = va_arg(ap, int);
     862:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
     866:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     868:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     86a:	4680      	mov	r8, r0
     86c:	e7d1      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
		} else if (size == sizeof(long long)) {
     86e:	f1b9 0f08 	cmp.w	r9, #8
     872:	f47f ae9b 	bne.w	5ac <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
     876:	f108 0307 	add.w	r3, r8, #7
     87a:	f023 0307 	bic.w	r3, r3, #7
     87e:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
     882:	b11d      	cbz	r5, 88c <CONFIG_ISR_STACK_SIZE+0x8c>
			long long v = va_arg(ap, long long);
     884:	e9d3 bc00 	ldrd	fp, ip, [r3]
     888:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     88c:	3408      	adds	r4, #8
     88e:	e7c0      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
	buf0[1] = s_rw_cnt;
     890:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     892:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     894:	0880      	lsrs	r0, r0, #2
     896:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
     898:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
     89a:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     89e:	f1ba 0f00 	cmp.w	sl, #0
     8a2:	d005      	beq.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     8a4:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
     8a6:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
     8aa:	9a00      	ldr	r2, [sp, #0]
     8ac:	429a      	cmp	r2, r3
     8ae:	d107      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
		if (BUF_OFFSET + 1 + size > len) {
     8b0:	f1c5 0901 	rsb	r9, r5, #1
     8b4:	e039      	b.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
     8b6:	bf00      	nop
     8b8:	0000f418 	.word	0x0000f418
     8bc:	000121b4 	.word	0x000121b4
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     8c0:	f811 2b01 	ldrb.w	r2, [r1], #1
     8c4:	0617      	lsls	r7, r2, #24
     8c6:	d507      	bpl.n	8d8 <CONFIG_ISR_STACK_SIZE+0xd8>
			if (BUF_OFFSET + 1 > len) {
     8c8:	1827      	adds	r7, r4, r0
     8ca:	42b7      	cmp	r7, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     8cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     8d0:	f63f af63 	bhi.w	79a <cbvprintf_package+0x26a>
			*buf++ = pos;
     8d4:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
     8d8:	3301      	adds	r3, #1
     8da:	e7e6      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     8dc:	9b01      	ldr	r3, [sp, #4]
     8de:	aa06      	add	r2, sp, #24
     8e0:	f812 8003 	ldrb.w	r8, [r2, r3]
     8e4:	f1ba 0f00 	cmp.w	sl, #0
     8e8:	d002      	beq.n	8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
     8ea:	f018 0f80 	tst.w	r8, #128	; 0x80
     8ee:	d119      	bne.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     8f0:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     8f4:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     8f6:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     8fa:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
     8fe:	4608      	mov	r0, r1
     900:	9102      	str	r1, [sp, #8]
     902:	f00d fb91 	bl	e028 <strlen>
		if (BUF_OFFSET + 1 + size > len) {
     906:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
     90a:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     90c:	443a      	add	r2, r7
     90e:	42b2      	cmp	r2, r6
     910:	f63f af43 	bhi.w	79a <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
     914:	f804 8b01 	strb.w	r8, [r4], #1
		memcpy(buf, s, size);
     918:	9902      	ldr	r1, [sp, #8]
     91a:	4620      	mov	r0, r4
     91c:	463a      	mov	r2, r7
     91e:	f00d fbd9 	bl	e0d4 <memcpy>
		buf += size;
     922:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
     924:	9b01      	ldr	r3, [sp, #4]
     926:	3301      	adds	r3, #1
     928:	9301      	str	r3, [sp, #4]
     92a:	e9dd 2300 	ldrd	r2, r3, [sp]
     92e:	429a      	cmp	r2, r3
     930:	d1d4      	bne.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
	return BUF_OFFSET;
     932:	1b60      	subs	r0, r4, r5
     934:	e733      	b.n	79e <cbvprintf_package+0x26e>
		return -EFAULT;
     936:	f06f 000d 	mvn.w	r0, #13
     93a:	e730      	b.n	79e <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     93c:	2907      	cmp	r1, #7
     93e:	f63f ae0e 	bhi.w	55e <cbvprintf_package+0x2e>
     942:	e72a      	b.n	79a <cbvprintf_package+0x26a>

00000944 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     944:	4b01      	ldr	r3, [pc, #4]	; (94c <__printk_hook_install+0x8>)
     946:	6018      	str	r0, [r3, #0]
}
     948:	4770      	bx	lr
     94a:	bf00      	nop
     94c:	20000000 	.word	0x20000000

00000950 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     950:	b530      	push	{r4, r5, lr}
     952:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     954:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     958:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     95a:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     95c:	a901      	add	r1, sp, #4
     95e:	4805      	ldr	r0, [pc, #20]	; (974 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     960:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     962:	f000 f8e9 	bl	b38 <cbvprintf>

	if (ctx.count < ctx.max) {
     966:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     96a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     96c:	bfb8      	it	lt
     96e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     970:	b005      	add	sp, #20
     972:	bd30      	pop	{r4, r5, pc}
     974:	0000b993 	.word	0x0000b993

00000978 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     97c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     980:	f019 0808 	ands.w	r8, r9, #8
{
     984:	4604      	mov	r4, r0
     986:	4693      	mov	fp, r2
	if (processing) {
     988:	d00d      	beq.n	9a6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     98a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     98c:	bf0c      	ite	eq
     98e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     992:	f049 0920 	orrne.w	r9, r9, #32
     996:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     99a:	f38b 8811 	msr	BASEPRI, fp
     99e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     9a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9a6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     9aa:	2902      	cmp	r1, #2
     9ac:	d107      	bne.n	9be <process_event+0x46>
			evt = process_recheck(mgr);
     9ae:	4620      	mov	r0, r4
     9b0:	f00b f836 	bl	ba20 <process_recheck>
		if (evt == EVT_NOP) {
     9b4:	2800      	cmp	r0, #0
     9b6:	d0f0      	beq.n	99a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     9b8:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9ba:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     9bc:	d14e      	bne.n	a5c <process_event+0xe4>
			res = mgr->last_res;
     9be:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9c0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     9c2:	2f00      	cmp	r7, #0
     9c4:	da15      	bge.n	9f2 <process_event+0x7a>
		*clients = mgr->clients;
     9c6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9c8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     9cc:	e9c4 8800 	strd	r8, r8, [r4]
     9d0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     9d4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     9d6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     9d8:	8b21      	ldrh	r1, [r4, #24]
     9da:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     9de:	45ca      	cmp	sl, r9
     9e0:	d002      	beq.n	9e8 <process_event+0x70>
		if (do_monitors
     9e2:	68a3      	ldr	r3, [r4, #8]
     9e4:	2b00      	cmp	r3, #0
     9e6:	d15a      	bne.n	a9e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     9e8:	b90d      	cbnz	r5, 9ee <process_event+0x76>
		    || (transit != NULL)) {
     9ea:	2e00      	cmp	r6, #0
     9ec:	d071      	beq.n	ad2 <process_event+0x15a>
     9ee:	2300      	movs	r3, #0
     9f0:	e056      	b.n	aa0 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9f2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     9f6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     9f8:	2a01      	cmp	r2, #1
     9fa:	d81e      	bhi.n	a3a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9fc:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     a00:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     a02:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a04:	b289      	uxth	r1, r1
     a06:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     a0a:	d10a      	bne.n	a22 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     a0c:	b13d      	cbz	r5, a1e <process_event+0xa6>
     a0e:	8b63      	ldrh	r3, [r4, #26]
     a10:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     a12:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     a14:	3301      	adds	r3, #1
     a16:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     a18:	2a00      	cmp	r2, #0
     a1a:	d1fa      	bne.n	a12 <process_event+0x9a>
     a1c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a1e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     a22:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     a24:	4620      	mov	r0, r4
     a26:	f00a fffb 	bl	ba20 <process_recheck>
     a2a:	4606      	mov	r6, r0
     a2c:	2800      	cmp	r0, #0
     a2e:	d0d3      	beq.n	9d8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     a30:	8b23      	ldrh	r3, [r4, #24]
     a32:	f043 0320 	orr.w	r3, r3, #32
     a36:	8323      	strh	r3, [r4, #24]
     a38:	e7cd      	b.n	9d6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     a3a:	2b04      	cmp	r3, #4
     a3c:	d10c      	bne.n	a58 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a3e:	f021 0107 	bic.w	r1, r1, #7
     a42:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     a44:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     a46:	4620      	mov	r0, r4
     a48:	f00a ffea 	bl	ba20 <process_recheck>
     a4c:	4605      	mov	r5, r0
     a4e:	2800      	cmp	r0, #0
     a50:	d0c1      	beq.n	9d6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     a52:	f041 0120 	orr.w	r1, r1, #32
     a56:	8321      	strh	r1, [r4, #24]
     a58:	2500      	movs	r5, #0
     a5a:	e7bc      	b.n	9d6 <process_event+0x5e>
		} else if (evt == EVT_START) {
     a5c:	2803      	cmp	r0, #3
     a5e:	d109      	bne.n	a74 <process_event+0xfc>
			transit = mgr->transitions->start;
     a60:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a62:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     a66:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a68:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     a6c:	8323      	strh	r3, [r4, #24]
}
     a6e:	2500      	movs	r5, #0
		res = 0;
     a70:	462f      	mov	r7, r5
     a72:	e7b1      	b.n	9d8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     a74:	2804      	cmp	r0, #4
     a76:	d106      	bne.n	a86 <process_event+0x10e>
			transit = mgr->transitions->stop;
     a78:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a7a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     a7e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a80:	f043 0304 	orr.w	r3, r3, #4
     a84:	e7f2      	b.n	a6c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     a86:	2805      	cmp	r0, #5
     a88:	d106      	bne.n	a98 <process_event+0x120>
			transit = mgr->transitions->reset;
     a8a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a8c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     a90:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a92:	f043 0305 	orr.w	r3, r3, #5
     a96:	e7e9      	b.n	a6c <process_event+0xf4>
     a98:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     a9a:	462e      	mov	r6, r5
     a9c:	e7e8      	b.n	a70 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     a9e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     aa0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     aa4:	8321      	strh	r1, [r4, #24]
     aa6:	f38b 8811 	msr	BASEPRI, fp
     aaa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     aae:	b9fb      	cbnz	r3, af0 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     ab0:	bb85      	cbnz	r5, b14 <process_event+0x19c>
			if (transit != NULL) {
     ab2:	b116      	cbz	r6, aba <process_event+0x142>
				transit(mgr, transition_complete);
     ab4:	491f      	ldr	r1, [pc, #124]	; (b34 <process_event+0x1bc>)
     ab6:	4620      	mov	r0, r4
     ab8:	47b0      	blx	r6
	__asm__ volatile(
     aba:	f04f 0320 	mov.w	r3, #32
     abe:	f3ef 8b11 	mrs	fp, BASEPRI
     ac2:	f383 8812 	msr	BASEPRI_MAX, r3
     ac6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     aca:	8b23      	ldrh	r3, [r4, #24]
     acc:	f023 0308 	bic.w	r3, r3, #8
     ad0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     ad2:	8b23      	ldrh	r3, [r4, #24]
     ad4:	06da      	lsls	r2, r3, #27
     ad6:	d525      	bpl.n	b24 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     ad8:	f023 0310 	bic.w	r3, r3, #16
     adc:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     ade:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     ae0:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     ae4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     ae8:	2900      	cmp	r1, #0
     aea:	f47f af5e 	bne.w	9aa <process_event+0x32>
out:
     aee:	e754      	b.n	99a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     af0:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     af2:	2900      	cmp	r1, #0
     af4:	d0dc      	beq.n	ab0 <process_event+0x138>
	return node->next;
     af6:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     afa:	f8d1 b004 	ldr.w	fp, [r1, #4]
     afe:	463b      	mov	r3, r7
     b00:	4652      	mov	r2, sl
     b02:	4620      	mov	r0, r4
     b04:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     b06:	f1b9 0f00 	cmp.w	r9, #0
     b0a:	d0d1      	beq.n	ab0 <process_event+0x138>
     b0c:	4649      	mov	r1, r9
     b0e:	f8d9 9000 	ldr.w	r9, [r9]
     b12:	e7f2      	b.n	afa <process_event+0x182>
     b14:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     b16:	463b      	mov	r3, r7
     b18:	4652      	mov	r2, sl
     b1a:	4620      	mov	r0, r4
     b1c:	682d      	ldr	r5, [r5, #0]
     b1e:	f00a ff9b 	bl	ba58 <notify_one>
     b22:	e7c5      	b.n	ab0 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     b24:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     b28:	bf1e      	ittt	ne
     b2a:	f023 0320 	bicne.w	r3, r3, #32
     b2e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     b30:	2102      	movne	r1, #2
     b32:	e7d5      	b.n	ae0 <process_event+0x168>
     b34:	0000ba85 	.word	0x0000ba85

00000b38 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b3c:	b091      	sub	sp, #68	; 0x44
     b3e:	468b      	mov	fp, r1
     b40:	9002      	str	r0, [sp, #8]
     b42:	4692      	mov	sl, r2
     b44:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     b46:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     b48:	f89a 0000 	ldrb.w	r0, [sl]
     b4c:	b908      	cbnz	r0, b52 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     b4e:	4628      	mov	r0, r5
     b50:	e35f      	b.n	1212 <cbvprintf+0x6da>
		if (*fp != '%') {
     b52:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     b54:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     b58:	d007      	beq.n	b6a <cbvprintf+0x32>
			OUTC('%');
     b5a:	9b02      	ldr	r3, [sp, #8]
     b5c:	4659      	mov	r1, fp
     b5e:	4798      	blx	r3
     b60:	2800      	cmp	r0, #0
     b62:	f2c0 8356 	blt.w	1212 <cbvprintf+0x6da>
     b66:	3501      	adds	r5, #1
			break;
     b68:	e212      	b.n	f90 <cbvprintf+0x458>
		} state = {
     b6a:	2218      	movs	r2, #24
     b6c:	2100      	movs	r1, #0
     b6e:	a80a      	add	r0, sp, #40	; 0x28
     b70:	f00d fabb 	bl	e0ea <memset>
	if (*sp == '%') {
     b74:	f89a 3001 	ldrb.w	r3, [sl, #1]
     b78:	2b25      	cmp	r3, #37	; 0x25
     b7a:	d078      	beq.n	c6e <cbvprintf+0x136>
     b7c:	2200      	movs	r2, #0
     b7e:	4610      	mov	r0, r2
     b80:	4696      	mov	lr, r2
     b82:	4694      	mov	ip, r2
     b84:	4616      	mov	r6, r2
     b86:	4639      	mov	r1, r7
		switch (*sp) {
     b88:	f817 3b01 	ldrb.w	r3, [r7], #1
     b8c:	2b2b      	cmp	r3, #43	; 0x2b
     b8e:	f000 809d 	beq.w	ccc <cbvprintf+0x194>
     b92:	f200 8094 	bhi.w	cbe <cbvprintf+0x186>
     b96:	2b20      	cmp	r3, #32
     b98:	f000 809b 	beq.w	cd2 <cbvprintf+0x19a>
     b9c:	2b23      	cmp	r3, #35	; 0x23
     b9e:	f000 809b 	beq.w	cd8 <cbvprintf+0x1a0>
     ba2:	b12e      	cbz	r6, bb0 <cbvprintf+0x78>
     ba4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     ba8:	f046 0604 	orr.w	r6, r6, #4
     bac:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     bb0:	f1bc 0f00 	cmp.w	ip, #0
     bb4:	d005      	beq.n	bc2 <cbvprintf+0x8a>
     bb6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     bba:	f046 0608 	orr.w	r6, r6, #8
     bbe:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     bc2:	f1be 0f00 	cmp.w	lr, #0
     bc6:	d005      	beq.n	bd4 <cbvprintf+0x9c>
     bc8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     bcc:	f046 0610 	orr.w	r6, r6, #16
     bd0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     bd4:	b128      	cbz	r0, be2 <cbvprintf+0xaa>
     bd6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     bda:	f040 0020 	orr.w	r0, r0, #32
     bde:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     be2:	b12a      	cbz	r2, bf0 <cbvprintf+0xb8>
     be4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     bec:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     bf0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bf4:	f002 0044 	and.w	r0, r2, #68	; 0x44
     bf8:	2844      	cmp	r0, #68	; 0x44
     bfa:	d103      	bne.n	c04 <cbvprintf+0xcc>
		conv->flag_zero = false;
     bfc:	f36f 1286 	bfc	r2, #6, #1
     c00:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     c04:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     c08:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     c0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     c0e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     c12:	d17b      	bne.n	d0c <cbvprintf+0x1d4>
		conv->width_star = true;
     c14:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c18:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     c1c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     c1e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     c22:	781a      	ldrb	r2, [r3, #0]
     c24:	2a2e      	cmp	r2, #46	; 0x2e
     c26:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c2a:	bf0c      	ite	eq
     c2c:	2101      	moveq	r1, #1
     c2e:	2100      	movne	r1, #0
     c30:	f361 0241 	bfi	r2, r1, #1, #1
     c34:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     c38:	d174      	bne.n	d24 <cbvprintf+0x1ec>
	if (*sp == '*') {
     c3a:	785a      	ldrb	r2, [r3, #1]
     c3c:	2a2a      	cmp	r2, #42	; 0x2a
     c3e:	d06a      	beq.n	d16 <cbvprintf+0x1de>
	++sp;
     c40:	3301      	adds	r3, #1
	size_t val = 0;
     c42:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     c44:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     c46:	4618      	mov	r0, r3
     c48:	f810 2b01 	ldrb.w	r2, [r0], #1
     c4c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c50:	2f09      	cmp	r7, #9
     c52:	f240 808e 	bls.w	d72 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     c56:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     c5a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     c5c:	f3c2 0040 	ubfx	r0, r2, #1, #1
     c60:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     c64:	f361 0241 	bfi	r2, r1, #1, #1
     c68:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     c6c:	e05a      	b.n	d24 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     c6e:	f10a 0702 	add.w	r7, sl, #2
     c72:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     c76:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c7a:	07d9      	lsls	r1, r3, #31
     c7c:	f140 8149 	bpl.w	f12 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     c80:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     c84:	f1b9 0f00 	cmp.w	r9, #0
     c88:	da07      	bge.n	c9a <cbvprintf+0x162>
				conv->flag_dash = true;
     c8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     c8e:	f042 0204 	orr.w	r2, r2, #4
     c92:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     c96:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     c9a:	075a      	lsls	r2, r3, #29
     c9c:	f140 8142 	bpl.w	f24 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     ca0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     ca4:	f1b8 0f00 	cmp.w	r8, #0
     ca8:	f280 8141 	bge.w	f2e <cbvprintf+0x3f6>
				conv->prec_present = false;
     cac:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cb0:	f36f 0341 	bfc	r3, #1, #1
     cb4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     cb8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     cbc:	e137      	b.n	f2e <cbvprintf+0x3f6>
		switch (*sp) {
     cbe:	2b2d      	cmp	r3, #45	; 0x2d
     cc0:	d00c      	beq.n	cdc <cbvprintf+0x1a4>
     cc2:	2b30      	cmp	r3, #48	; 0x30
     cc4:	f47f af6d 	bne.w	ba2 <cbvprintf+0x6a>
			conv->flag_zero = true;
     cc8:	2201      	movs	r2, #1
	} while (loop);
     cca:	e75c      	b.n	b86 <cbvprintf+0x4e>
			conv->flag_plus = true;
     ccc:	f04f 0c01 	mov.w	ip, #1
     cd0:	e759      	b.n	b86 <cbvprintf+0x4e>
			conv->flag_space = true;
     cd2:	f04f 0e01 	mov.w	lr, #1
     cd6:	e756      	b.n	b86 <cbvprintf+0x4e>
			conv->flag_hash = true;
     cd8:	2001      	movs	r0, #1
     cda:	e754      	b.n	b86 <cbvprintf+0x4e>
		switch (*sp) {
     cdc:	2601      	movs	r6, #1
     cde:	e752      	b.n	b86 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     ce0:	fb0c 0202 	mla	r2, ip, r2, r0
     ce4:	3a30      	subs	r2, #48	; 0x30
     ce6:	4633      	mov	r3, r6
     ce8:	461e      	mov	r6, r3
     cea:	f816 0b01 	ldrb.w	r0, [r6], #1
     cee:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     cf2:	2f09      	cmp	r7, #9
     cf4:	d9f4      	bls.n	ce0 <cbvprintf+0x1a8>
	if (sp != wp) {
     cf6:	4299      	cmp	r1, r3
     cf8:	d093      	beq.n	c22 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     cfa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     cfe:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     d00:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     d02:	f362 0141 	bfi	r1, r2, #1, #1
     d06:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     d0a:	e78a      	b.n	c22 <cbvprintf+0xea>
     d0c:	460b      	mov	r3, r1
	size_t val = 0;
     d0e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     d10:	f04f 0c0a 	mov.w	ip, #10
     d14:	e7e8      	b.n	ce8 <cbvprintf+0x1b0>
		conv->prec_star = true;
     d16:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d1a:	f042 0204 	orr.w	r2, r2, #4
     d1e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     d22:	3302      	adds	r3, #2
	switch (*sp) {
     d24:	461f      	mov	r7, r3
     d26:	f817 2b01 	ldrb.w	r2, [r7], #1
     d2a:	2a6c      	cmp	r2, #108	; 0x6c
     d2c:	d041      	beq.n	db2 <cbvprintf+0x27a>
     d2e:	d825      	bhi.n	d7c <cbvprintf+0x244>
     d30:	2a68      	cmp	r2, #104	; 0x68
     d32:	d02b      	beq.n	d8c <cbvprintf+0x254>
     d34:	2a6a      	cmp	r2, #106	; 0x6a
     d36:	d046      	beq.n	dc6 <cbvprintf+0x28e>
     d38:	2a4c      	cmp	r2, #76	; 0x4c
     d3a:	d04c      	beq.n	dd6 <cbvprintf+0x29e>
     d3c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     d3e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     d42:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     d46:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     d4a:	2a78      	cmp	r2, #120	; 0x78
     d4c:	f200 80d9 	bhi.w	f02 <cbvprintf+0x3ca>
     d50:	2a57      	cmp	r2, #87	; 0x57
     d52:	d84d      	bhi.n	df0 <cbvprintf+0x2b8>
     d54:	2a41      	cmp	r2, #65	; 0x41
     d56:	d003      	beq.n	d60 <cbvprintf+0x228>
     d58:	3a45      	subs	r2, #69	; 0x45
     d5a:	2a02      	cmp	r2, #2
     d5c:	f200 80d1 	bhi.w	f02 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     d60:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d64:	2204      	movs	r2, #4
     d66:	f362 0302 	bfi	r3, r2, #0, #3
     d6a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     d6e:	2301      	movs	r3, #1
			break;
     d70:	e09e      	b.n	eb0 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     d72:	fb06 2101 	mla	r1, r6, r1, r2
     d76:	3930      	subs	r1, #48	; 0x30
     d78:	4603      	mov	r3, r0
     d7a:	e764      	b.n	c46 <cbvprintf+0x10e>
	switch (*sp) {
     d7c:	2a74      	cmp	r2, #116	; 0x74
     d7e:	d026      	beq.n	dce <cbvprintf+0x296>
     d80:	2a7a      	cmp	r2, #122	; 0x7a
     d82:	d1db      	bne.n	d3c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     d84:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d88:	2206      	movs	r2, #6
     d8a:	e00d      	b.n	da8 <cbvprintf+0x270>
		if (*++sp == 'h') {
     d8c:	785a      	ldrb	r2, [r3, #1]
     d8e:	2a68      	cmp	r2, #104	; 0x68
     d90:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d94:	d106      	bne.n	da4 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     d96:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d98:	f361 02c6 	bfi	r2, r1, #3, #4
     d9c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     da0:	1c9f      	adds	r7, r3, #2
     da2:	e7cc      	b.n	d3e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     da4:	4613      	mov	r3, r2
     da6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     da8:	f362 03c6 	bfi	r3, r2, #3, #4
     dac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     db0:	e7c5      	b.n	d3e <cbvprintf+0x206>
		if (*++sp == 'l') {
     db2:	785a      	ldrb	r2, [r3, #1]
     db4:	2a6c      	cmp	r2, #108	; 0x6c
     db6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     dba:	d101      	bne.n	dc0 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     dbc:	2104      	movs	r1, #4
     dbe:	e7eb      	b.n	d98 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     dc0:	4613      	mov	r3, r2
     dc2:	2203      	movs	r2, #3
     dc4:	e7f0      	b.n	da8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     dc6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     dca:	2205      	movs	r2, #5
     dcc:	e7ec      	b.n	da8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     dce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     dd2:	2207      	movs	r2, #7
     dd4:	e7e8      	b.n	da8 <cbvprintf+0x270>
		conv->unsupported = true;
     dd6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     dda:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     dde:	f023 0302 	bic.w	r3, r3, #2
     de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     de6:	f043 0302 	orr.w	r3, r3, #2
     dea:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     dee:	e7a6      	b.n	d3e <cbvprintf+0x206>
	switch (conv->specifier) {
     df0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     df4:	2920      	cmp	r1, #32
     df6:	f200 8084 	bhi.w	f02 <cbvprintf+0x3ca>
     dfa:	a001      	add	r0, pc, #4	; (adr r0, e00 <cbvprintf+0x2c8>)
     dfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     e00:	00000ec5 	.word	0x00000ec5
     e04:	00000f03 	.word	0x00000f03
     e08:	00000f03 	.word	0x00000f03
     e0c:	00000f03 	.word	0x00000f03
     e10:	00000f03 	.word	0x00000f03
     e14:	00000f03 	.word	0x00000f03
     e18:	00000f03 	.word	0x00000f03
     e1c:	00000f03 	.word	0x00000f03
     e20:	00000f03 	.word	0x00000f03
     e24:	00000d61 	.word	0x00000d61
     e28:	00000f03 	.word	0x00000f03
     e2c:	00000ec5 	.word	0x00000ec5
     e30:	00000e85 	.word	0x00000e85
     e34:	00000d61 	.word	0x00000d61
     e38:	00000d61 	.word	0x00000d61
     e3c:	00000d61 	.word	0x00000d61
     e40:	00000f03 	.word	0x00000f03
     e44:	00000e85 	.word	0x00000e85
     e48:	00000f03 	.word	0x00000f03
     e4c:	00000f03 	.word	0x00000f03
     e50:	00000f03 	.word	0x00000f03
     e54:	00000f03 	.word	0x00000f03
     e58:	00000ecd 	.word	0x00000ecd
     e5c:	00000ec5 	.word	0x00000ec5
     e60:	00000ee9 	.word	0x00000ee9
     e64:	00000f03 	.word	0x00000f03
     e68:	00000f03 	.word	0x00000f03
     e6c:	00000ee9 	.word	0x00000ee9
     e70:	00000f03 	.word	0x00000f03
     e74:	00000ec5 	.word	0x00000ec5
     e78:	00000f03 	.word	0x00000f03
     e7c:	00000f03 	.word	0x00000f03
     e80:	00000ec5 	.word	0x00000ec5
		conv->specifier_cat = SPECIFIER_SINT;
     e84:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e88:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     e8a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     e8e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e92:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     e94:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     e98:	bf02      	ittt	eq
     e9a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     e9e:	f041 0101 	orreq.w	r1, r1, #1
     ea2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     ea6:	2a63      	cmp	r2, #99	; 0x63
     ea8:	d131      	bne.n	f0e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     eaa:	3b00      	subs	r3, #0
     eac:	bf18      	it	ne
     eae:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     eb0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     eb4:	f3c2 0140 	ubfx	r1, r2, #1, #1
     eb8:	430b      	orrs	r3, r1
     eba:	f363 0241 	bfi	r2, r3, #1, #1
     ebe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     ec2:	e6d8      	b.n	c76 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     ec4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     ec8:	2002      	movs	r0, #2
     eca:	e7de      	b.n	e8a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     ecc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     ed0:	f003 0378 	and.w	r3, r3, #120	; 0x78
     ed4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     ed8:	2103      	movs	r1, #3
     eda:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     ede:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     ee0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     ee4:	4143      	adcs	r3, r0
     ee6:	e7e3      	b.n	eb0 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     ee8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     eec:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     eee:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     ef2:	f361 0202 	bfi	r2, r1, #0, #3
     ef6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     efa:	bf14      	ite	ne
     efc:	2301      	movne	r3, #1
     efe:	2300      	moveq	r3, #0
     f00:	e7d6      	b.n	eb0 <cbvprintf+0x378>
		conv->invalid = true;
     f02:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     f06:	f043 0301 	orr.w	r3, r3, #1
     f0a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     f0e:	2300      	movs	r3, #0
     f10:	e7ce      	b.n	eb0 <cbvprintf+0x378>
		} else if (conv->width_present) {
     f12:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     f16:	2a00      	cmp	r2, #0
			width = conv->width_value;
     f18:	bfb4      	ite	lt
     f1a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     f1e:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     f22:	e6ba      	b.n	c9a <cbvprintf+0x162>
		} else if (conv->prec_present) {
     f24:	079b      	lsls	r3, r3, #30
     f26:	f57f aec7 	bpl.w	cb8 <cbvprintf+0x180>
			precision = conv->prec_value;
     f2a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     f2e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     f32:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     f34:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     f38:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     f3c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     f40:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     f42:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     f46:	d138      	bne.n	fba <cbvprintf+0x482>
			switch (length_mod) {
     f48:	1ecb      	subs	r3, r1, #3
     f4a:	2b04      	cmp	r3, #4
     f4c:	d822      	bhi.n	f94 <cbvprintf+0x45c>
     f4e:	e8df f003 	tbb	[pc, r3]
     f52:	0903      	.short	0x0903
     f54:	2109      	.short	0x2109
     f56:	21          	.byte	0x21
     f57:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     f58:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     f5c:	17da      	asrs	r2, r3, #31
     f5e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     f62:	e006      	b.n	f72 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     f64:	3407      	adds	r4, #7
     f66:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     f6a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     f6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     f72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     f76:	f013 0603 	ands.w	r6, r3, #3
     f7a:	d056      	beq.n	102a <cbvprintf+0x4f2>
			OUTS(sp, fp);
     f7c:	9802      	ldr	r0, [sp, #8]
     f7e:	463b      	mov	r3, r7
     f80:	4652      	mov	r2, sl
     f82:	4659      	mov	r1, fp
     f84:	f00b f84e 	bl	c024 <outs>
     f88:	2800      	cmp	r0, #0
     f8a:	f2c0 8142 	blt.w	1212 <cbvprintf+0x6da>
     f8e:	4405      	add	r5, r0
			continue;
     f90:	46ba      	mov	sl, r7
     f92:	e5d9      	b.n	b48 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f94:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     f98:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f9a:	ea4f 72e3 	mov.w	r2, r3, asr #31
     f9e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     fa2:	d105      	bne.n	fb0 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
     fa4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     fa8:	930a      	str	r3, [sp, #40]	; 0x28
     faa:	2300      	movs	r3, #0
     fac:	930b      	str	r3, [sp, #44]	; 0x2c
     fae:	e7e0      	b.n	f72 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
     fb0:	2902      	cmp	r1, #2
     fb2:	d1de      	bne.n	f72 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
     fb4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     fb8:	e7d0      	b.n	f5c <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     fba:	2b02      	cmp	r3, #2
     fbc:	d123      	bne.n	1006 <cbvprintf+0x4ce>
			switch (length_mod) {
     fbe:	1ecb      	subs	r3, r1, #3
     fc0:	2b04      	cmp	r3, #4
     fc2:	d813      	bhi.n	fec <cbvprintf+0x4b4>
     fc4:	e8df f003 	tbb	[pc, r3]
     fc8:	120a0a03 	.word	0x120a0a03
     fcc:	12          	.byte	0x12
     fcd:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     fce:	6822      	ldr	r2, [r4, #0]
     fd0:	920a      	str	r2, [sp, #40]	; 0x28
     fd2:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     fd4:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     fd6:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     fd8:	4604      	mov	r4, r0
     fda:	e7ca      	b.n	f72 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
     fdc:	1de0      	adds	r0, r4, #7
     fde:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     fe2:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     fe6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     fea:	e7f5      	b.n	fd8 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
     fec:	f854 3b04 	ldr.w	r3, [r4], #4
     ff0:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ff2:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     ff4:	f04f 0300 	mov.w	r3, #0
     ff8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     ffa:	d0d3      	beq.n	fa4 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
     ffc:	2902      	cmp	r1, #2
     ffe:	d1b8      	bne.n	f72 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    1000:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1004:	e7d0      	b.n	fa8 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    1006:	2b04      	cmp	r3, #4
    1008:	d109      	bne.n	101e <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    100a:	1de3      	adds	r3, r4, #7
    100c:	f023 0307 	bic.w	r3, r3, #7
    1010:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1014:	e9d3 2300 	ldrd	r2, r3, [r3]
    1018:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    101c:	e7a9      	b.n	f72 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    101e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1020:	bf04      	itt	eq
    1022:	f854 3b04 	ldreq.w	r3, [r4], #4
    1026:	930a      	streq	r3, [sp, #40]	; 0x28
    1028:	e7a3      	b.n	f72 <cbvprintf+0x43a>
		switch (conv->specifier) {
    102a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    102e:	2878      	cmp	r0, #120	; 0x78
    1030:	d8ae      	bhi.n	f90 <cbvprintf+0x458>
    1032:	2862      	cmp	r0, #98	; 0x62
    1034:	d822      	bhi.n	107c <cbvprintf+0x544>
    1036:	2825      	cmp	r0, #37	; 0x25
    1038:	f43f ad8f 	beq.w	b5a <cbvprintf+0x22>
    103c:	2858      	cmp	r0, #88	; 0x58
    103e:	d1a7      	bne.n	f90 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1040:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1044:	9300      	str	r3, [sp, #0]
    1046:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    104a:	ab04      	add	r3, sp, #16
    104c:	aa0c      	add	r2, sp, #48	; 0x30
    104e:	f00a ffa3 	bl	bf98 <encode_uint>
    1052:	4682      	mov	sl, r0
			if (precision >= 0) {
    1054:	f1b8 0f00 	cmp.w	r8, #0
    1058:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    105c:	db0c      	blt.n	1078 <cbvprintf+0x540>
				conv->flag_zero = false;
    105e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1062:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1066:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    106a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    106c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1070:	d902      	bls.n	1078 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    1072:	eba8 0303 	sub.w	r3, r8, r3
    1076:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1078:	4680      	mov	r8, r0
    107a:	e03d      	b.n	10f8 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    107c:	3863      	subs	r0, #99	; 0x63
    107e:	2815      	cmp	r0, #21
    1080:	d886      	bhi.n	f90 <cbvprintf+0x458>
    1082:	a201      	add	r2, pc, #4	; (adr r2, 1088 <cbvprintf+0x550>)
    1084:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1088:	00001109 	.word	0x00001109
    108c:	0000116d 	.word	0x0000116d
    1090:	00000f91 	.word	0x00000f91
    1094:	00000f91 	.word	0x00000f91
    1098:	00000f91 	.word	0x00000f91
    109c:	00000f91 	.word	0x00000f91
    10a0:	0000116d 	.word	0x0000116d
    10a4:	00000f91 	.word	0x00000f91
    10a8:	00000f91 	.word	0x00000f91
    10ac:	00000f91 	.word	0x00000f91
    10b0:	00000f91 	.word	0x00000f91
    10b4:	000011c7 	.word	0x000011c7
    10b8:	00001195 	.word	0x00001195
    10bc:	00001199 	.word	0x00001199
    10c0:	00000f91 	.word	0x00000f91
    10c4:	00000f91 	.word	0x00000f91
    10c8:	000010e1 	.word	0x000010e1
    10cc:	00000f91 	.word	0x00000f91
    10d0:	00001195 	.word	0x00001195
    10d4:	00000f91 	.word	0x00000f91
    10d8:	00000f91 	.word	0x00000f91
    10dc:	00001195 	.word	0x00001195
			if (precision >= 0) {
    10e0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    10e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    10e8:	db0a      	blt.n	1100 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    10ea:	4641      	mov	r1, r8
    10ec:	4650      	mov	r0, sl
    10ee:	f00c ffa2 	bl	e036 <strnlen>
			bpe = bps + len;
    10f2:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    10f6:	2600      	movs	r6, #0
		if (bps == NULL) {
    10f8:	f1ba 0f00 	cmp.w	sl, #0
    10fc:	d10c      	bne.n	1118 <cbvprintf+0x5e0>
    10fe:	e747      	b.n	f90 <cbvprintf+0x458>
				len = strlen(bps);
    1100:	4650      	mov	r0, sl
    1102:	f00c ff91 	bl	e028 <strlen>
    1106:	e7f4      	b.n	10f2 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    110a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    110e:	2600      	movs	r6, #0
			bps = buf;
    1110:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1114:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1118:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    111c:	b106      	cbz	r6, 1120 <cbvprintf+0x5e8>
			nj_len += 1U;
    111e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1120:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1124:	06d0      	lsls	r0, r2, #27
    1126:	d568      	bpl.n	11fa <cbvprintf+0x6c2>
			nj_len += 2U;
    1128:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    112a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    112c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    112e:	bf48      	it	mi
    1130:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1132:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1134:	bf48      	it	mi
    1136:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1138:	f1b9 0f00 	cmp.w	r9, #0
    113c:	dd76      	ble.n	122c <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    113e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1142:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1146:	f3c2 0380 	ubfx	r3, r2, #2, #1
    114a:	9303      	str	r3, [sp, #12]
    114c:	0753      	lsls	r3, r2, #29
    114e:	d46d      	bmi.n	122c <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    1150:	0650      	lsls	r0, r2, #25
    1152:	d561      	bpl.n	1218 <cbvprintf+0x6e0>
					if (sign != 0) {
    1154:	b146      	cbz	r6, 1168 <cbvprintf+0x630>
						OUTC(sign);
    1156:	9b02      	ldr	r3, [sp, #8]
    1158:	4659      	mov	r1, fp
    115a:	4630      	mov	r0, r6
    115c:	4798      	blx	r3
    115e:	2800      	cmp	r0, #0
    1160:	db57      	blt.n	1212 <cbvprintf+0x6da>
						sign = 0;
    1162:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1164:	3501      	adds	r5, #1
						sign = 0;
    1166:	461e      	mov	r6, r3
					pad = '0';
    1168:	2330      	movs	r3, #48	; 0x30
    116a:	e056      	b.n	121a <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    116c:	071e      	lsls	r6, r3, #28
    116e:	d40f      	bmi.n	1190 <cbvprintf+0x658>
				sign = ' ';
    1170:	f013 0610 	ands.w	r6, r3, #16
    1174:	bf18      	it	ne
    1176:	2620      	movne	r6, #32
			sint = value->sint;
    1178:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    117c:	2b00      	cmp	r3, #0
    117e:	f6bf af5f 	bge.w	1040 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    1182:	4252      	negs	r2, r2
    1184:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1188:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    118c:	262d      	movs	r6, #45	; 0x2d
    118e:	e757      	b.n	1040 <cbvprintf+0x508>
				sign = '+';
    1190:	262b      	movs	r6, #43	; 0x2b
    1192:	e7f1      	b.n	1178 <cbvprintf+0x640>
		switch (conv->specifier) {
    1194:	2600      	movs	r6, #0
    1196:	e753      	b.n	1040 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    1198:	980a      	ldr	r0, [sp, #40]	; 0x28
    119a:	b340      	cbz	r0, 11ee <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    119c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    11a0:	9300      	str	r3, [sp, #0]
    11a2:	aa0c      	add	r2, sp, #48	; 0x30
    11a4:	ab04      	add	r3, sp, #16
    11a6:	2100      	movs	r1, #0
    11a8:	f00a fef6 	bl	bf98 <encode_uint>
				conv->altform_0c = true;
    11ac:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    11b0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    11b4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    11b8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    11bc:	4682      	mov	sl, r0
				conv->altform_0c = true;
    11be:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    11c2:	2600      	movs	r6, #0
				goto prec_int_pad0;
    11c4:	e746      	b.n	1054 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    11c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    11c8:	2907      	cmp	r1, #7
    11ca:	f63f aee1 	bhi.w	f90 <cbvprintf+0x458>
    11ce:	e8df f001 	tbb	[pc, r1]
    11d2:	040c      	.short	0x040c
    11d4:	08080c06 	.word	0x08080c06
    11d8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    11da:	701d      	strb	r5, [r3, #0]
		break;
    11dc:	e6d8      	b.n	f90 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    11de:	801d      	strh	r5, [r3, #0]
		break;
    11e0:	e6d6      	b.n	f90 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    11e2:	17ea      	asrs	r2, r5, #31
    11e4:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    11e8:	e6d2      	b.n	f90 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    11ea:	601d      	str	r5, [r3, #0]
		break;
    11ec:	e6d0      	b.n	f90 <cbvprintf+0x458>
			bps = "(nil)";
    11ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 12b8 <cbvprintf+0x780>
    11f2:	4606      	mov	r6, r0
			bpe = bps + 5;
    11f4:	f10a 0805 	add.w	r8, sl, #5
    11f8:	e78e      	b.n	1118 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    11fa:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    11fc:	bf48      	it	mi
    11fe:	3301      	addmi	r3, #1
    1200:	e793      	b.n	112a <cbvprintf+0x5f2>
					OUTC(pad);
    1202:	4618      	mov	r0, r3
    1204:	9303      	str	r3, [sp, #12]
    1206:	4659      	mov	r1, fp
    1208:	9b02      	ldr	r3, [sp, #8]
    120a:	4798      	blx	r3
    120c:	2800      	cmp	r0, #0
    120e:	9b03      	ldr	r3, [sp, #12]
    1210:	da04      	bge.n	121c <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    1212:	b011      	add	sp, #68	; 0x44
    1214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1218:	2320      	movs	r3, #32
    121a:	444d      	add	r5, r9
    121c:	464a      	mov	r2, r9
				while (width-- > 0) {
    121e:	2a00      	cmp	r2, #0
    1220:	eba5 0109 	sub.w	r1, r5, r9
    1224:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1228:	dceb      	bgt.n	1202 <cbvprintf+0x6ca>
    122a:	460d      	mov	r5, r1
		if (sign != 0) {
    122c:	b136      	cbz	r6, 123c <cbvprintf+0x704>
			OUTC(sign);
    122e:	9b02      	ldr	r3, [sp, #8]
    1230:	4659      	mov	r1, fp
    1232:	4630      	mov	r0, r6
    1234:	4798      	blx	r3
    1236:	2800      	cmp	r0, #0
    1238:	dbeb      	blt.n	1212 <cbvprintf+0x6da>
    123a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    123c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1240:	06d9      	lsls	r1, r3, #27
    1242:	d401      	bmi.n	1248 <cbvprintf+0x710>
    1244:	071a      	lsls	r2, r3, #28
    1246:	d506      	bpl.n	1256 <cbvprintf+0x71e>
				OUTC('0');
    1248:	9b02      	ldr	r3, [sp, #8]
    124a:	4659      	mov	r1, fp
    124c:	2030      	movs	r0, #48	; 0x30
    124e:	4798      	blx	r3
    1250:	2800      	cmp	r0, #0
    1252:	dbde      	blt.n	1212 <cbvprintf+0x6da>
    1254:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1256:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    125a:	06db      	lsls	r3, r3, #27
    125c:	d507      	bpl.n	126e <cbvprintf+0x736>
				OUTC(conv->specifier);
    125e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1262:	9b02      	ldr	r3, [sp, #8]
    1264:	4659      	mov	r1, fp
    1266:	4798      	blx	r3
    1268:	2800      	cmp	r0, #0
    126a:	dbd2      	blt.n	1212 <cbvprintf+0x6da>
    126c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    126e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1270:	442e      	add	r6, r5
    1272:	1b73      	subs	r3, r6, r5
    1274:	2b00      	cmp	r3, #0
    1276:	dc16      	bgt.n	12a6 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    1278:	9802      	ldr	r0, [sp, #8]
    127a:	4643      	mov	r3, r8
    127c:	4652      	mov	r2, sl
    127e:	4659      	mov	r1, fp
    1280:	f00a fed0 	bl	c024 <outs>
    1284:	2800      	cmp	r0, #0
    1286:	dbc4      	blt.n	1212 <cbvprintf+0x6da>
    1288:	4405      	add	r5, r0
		while (width > 0) {
    128a:	44a9      	add	r9, r5
    128c:	eba9 0305 	sub.w	r3, r9, r5
    1290:	2b00      	cmp	r3, #0
    1292:	f77f ae7d 	ble.w	f90 <cbvprintf+0x458>
			OUTC(' ');
    1296:	9b02      	ldr	r3, [sp, #8]
    1298:	4659      	mov	r1, fp
    129a:	2020      	movs	r0, #32
    129c:	4798      	blx	r3
    129e:	2800      	cmp	r0, #0
    12a0:	dbb7      	blt.n	1212 <cbvprintf+0x6da>
    12a2:	3501      	adds	r5, #1
			--width;
    12a4:	e7f2      	b.n	128c <cbvprintf+0x754>
				OUTC('0');
    12a6:	9b02      	ldr	r3, [sp, #8]
    12a8:	4659      	mov	r1, fp
    12aa:	2030      	movs	r0, #48	; 0x30
    12ac:	4798      	blx	r3
    12ae:	2800      	cmp	r0, #0
    12b0:	dbaf      	blt.n	1212 <cbvprintf+0x6da>
    12b2:	3501      	adds	r5, #1
    12b4:	e7dd      	b.n	1272 <cbvprintf+0x73a>
    12b6:	bf00      	nop
    12b8:	000101a4 	.word	0x000101a4

000012bc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    12bc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    12be:	4910      	ldr	r1, [pc, #64]	; (1300 <enable_logger+0x44>)
    12c0:	4810      	ldr	r0, [pc, #64]	; (1304 <enable_logger+0x48>)
{
    12c2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    12c4:	2200      	movs	r2, #0
    12c6:	f00d feb2 	bl	f02e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    12ca:	4d0f      	ldr	r5, [pc, #60]	; (1308 <enable_logger+0x4c>)
    12cc:	490f      	ldr	r1, [pc, #60]	; (130c <enable_logger+0x50>)
    12ce:	2200      	movs	r2, #0
    12d0:	2300      	movs	r3, #0
    12d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    12d6:	2400      	movs	r4, #0
    12d8:	230e      	movs	r3, #14
    12da:	e9cd 3403 	strd	r3, r4, [sp, #12]
    12de:	e9cd 4401 	strd	r4, r4, [sp, #4]
    12e2:	4b0b      	ldr	r3, [pc, #44]	; (1310 <enable_logger+0x54>)
    12e4:	9400      	str	r4, [sp, #0]
    12e6:	f44f 7240 	mov.w	r2, #768	; 0x300
    12ea:	4628      	mov	r0, r5
    12ec:	f009 f9c0 	bl	a670 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    12f0:	4908      	ldr	r1, [pc, #32]	; (1314 <enable_logger+0x58>)
    12f2:	4628      	mov	r0, r5
    12f4:	f009 f912 	bl	a51c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    12f8:	4620      	mov	r0, r4
    12fa:	b009      	add	sp, #36	; 0x24
    12fc:	bd30      	pop	{r4, r5, pc}
    12fe:	bf00      	nop
    1300:	00001319 	.word	0x00001319
    1304:	20000810 	.word	0x20000810
    1308:	20000848 	.word	0x20000848
    130c:	20002248 	.word	0x20002248
    1310:	0000156d 	.word	0x0000156d
    1314:	00010523 	.word	0x00010523

00001318 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1318:	4801      	ldr	r0, [pc, #4]	; (1320 <log_process_thread_timer_expiry_fn+0x8>)
    131a:	f009 bb3d 	b.w	a998 <z_impl_k_sem_give>
    131e:	bf00      	nop
    1320:	200002f8 	.word	0x200002f8

00001324 <log_init>:
{
    1324:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1326:	4b12      	ldr	r3, [pc, #72]	; (1370 <log_init+0x4c>)
    1328:	f3bf 8f5b 	dmb	ish
    132c:	e853 5f00 	ldrex	r5, [r3]
    1330:	1c6a      	adds	r2, r5, #1
    1332:	e843 2100 	strex	r1, r2, [r3]
    1336:	2900      	cmp	r1, #0
    1338:	d1f8      	bne.n	132c <log_init+0x8>
    133a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    133e:	b92d      	cbnz	r5, 134c <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1340:	4c0c      	ldr	r4, [pc, #48]	; (1374 <log_init+0x50>)
    1342:	4e0d      	ldr	r6, [pc, #52]	; (1378 <log_init+0x54>)
    1344:	1b36      	subs	r6, r6, r4
    1346:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    1348:	42b5      	cmp	r5, r6
    134a:	db00      	blt.n	134e <log_init+0x2a>
}
    134c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    134e:	7b23      	ldrb	r3, [r4, #12]
    1350:	b153      	cbz	r3, 1368 <log_init+0x44>
			if (backend->api->init != NULL) {
    1352:	6823      	ldr	r3, [r4, #0]
    1354:	699b      	ldr	r3, [r3, #24]
    1356:	b10b      	cbz	r3, 135c <log_init+0x38>
				backend->api->init(backend);
    1358:	4620      	mov	r0, r4
    135a:	4798      	blx	r3
			log_backend_enable(backend,
    135c:	6863      	ldr	r3, [r4, #4]
    135e:	2204      	movs	r2, #4
    1360:	6819      	ldr	r1, [r3, #0]
    1362:	4620      	mov	r0, r4
    1364:	f000 fa38 	bl	17d8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1368:	3501      	adds	r5, #1
    136a:	3410      	adds	r4, #16
    136c:	e7ec      	b.n	1348 <log_init+0x24>
    136e:	bf00      	nop
    1370:	20000ff0 	.word	0x20000ff0
    1374:	0000f730 	.word	0x0000f730
    1378:	0000f740 	.word	0x0000f740

0000137c <z_log_notify_backend_enabled>:
{
    137c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    137e:	4c04      	ldr	r4, [pc, #16]	; (1390 <z_log_notify_backend_enabled+0x14>)
    1380:	7823      	ldrb	r3, [r4, #0]
    1382:	b913      	cbnz	r3, 138a <z_log_notify_backend_enabled+0xe>
    1384:	4803      	ldr	r0, [pc, #12]	; (1394 <z_log_notify_backend_enabled+0x18>)
    1386:	f009 fb07 	bl	a998 <z_impl_k_sem_give>
	backend_attached = true;
    138a:	2301      	movs	r3, #1
    138c:	7023      	strb	r3, [r4, #0]
}
    138e:	bd10      	pop	{r4, pc}
    1390:	200021c8 	.word	0x200021c8
    1394:	200002f8 	.word	0x200002f8

00001398 <z_log_dropped>:
    1398:	4b0c      	ldr	r3, [pc, #48]	; (13cc <z_log_dropped+0x34>)
    139a:	f3bf 8f5b 	dmb	ish
    139e:	e853 2f00 	ldrex	r2, [r3]
    13a2:	3201      	adds	r2, #1
    13a4:	e843 2100 	strex	r1, r2, [r3]
    13a8:	2900      	cmp	r1, #0
    13aa:	d1f8      	bne.n	139e <z_log_dropped+0x6>
    13ac:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    13b0:	b158      	cbz	r0, 13ca <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    13b2:	f3bf 8f5b 	dmb	ish
    13b6:	4b06      	ldr	r3, [pc, #24]	; (13d0 <z_log_dropped+0x38>)
    13b8:	e853 2f00 	ldrex	r2, [r3]
    13bc:	3a01      	subs	r2, #1
    13be:	e843 2100 	strex	r1, r2, [r3]
    13c2:	2900      	cmp	r1, #0
    13c4:	d1f8      	bne.n	13b8 <z_log_dropped+0x20>
    13c6:	f3bf 8f5b 	dmb	ish
}
    13ca:	4770      	bx	lr
    13cc:	20000fec 	.word	0x20000fec
    13d0:	20000fe8 	.word	0x20000fe8

000013d4 <z_log_dropped_read_and_clear>:
}
    13d4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    13d6:	4b06      	ldr	r3, [pc, #24]	; (13f0 <z_log_dropped_read_and_clear+0x1c>)
    13d8:	f3bf 8f5b 	dmb	ish
    13dc:	4602      	mov	r2, r0
    13de:	e853 0f00 	ldrex	r0, [r3]
    13e2:	e843 2100 	strex	r1, r2, [r3]
    13e6:	2900      	cmp	r1, #0
    13e8:	d1f9      	bne.n	13de <z_log_dropped_read_and_clear+0xa>
    13ea:	f3bf 8f5b 	dmb	ish
    13ee:	4770      	bx	lr
    13f0:	20000fec 	.word	0x20000fec

000013f4 <dropped_notify>:
{
    13f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    13f6:	f7ff ffed 	bl	13d4 <z_log_dropped_read_and_clear>
    13fa:	4c0a      	ldr	r4, [pc, #40]	; (1424 <dropped_notify+0x30>)
    13fc:	4d0a      	ldr	r5, [pc, #40]	; (1428 <dropped_notify+0x34>)
    13fe:	1b2d      	subs	r5, r5, r4
    1400:	4607      	mov	r7, r0
    1402:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1404:	2600      	movs	r6, #0
    1406:	42ae      	cmp	r6, r5
    1408:	db00      	blt.n	140c <dropped_notify+0x18>
}
    140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    140c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    140e:	795b      	ldrb	r3, [r3, #5]
    1410:	b12b      	cbz	r3, 141e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    1412:	6823      	ldr	r3, [r4, #0]
    1414:	691b      	ldr	r3, [r3, #16]
    1416:	b113      	cbz	r3, 141e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    1418:	4639      	mov	r1, r7
    141a:	4620      	mov	r0, r4
    141c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    141e:	3601      	adds	r6, #1
    1420:	3410      	adds	r4, #16
    1422:	e7f0      	b.n	1406 <dropped_notify+0x12>
    1424:	0000f730 	.word	0x0000f730
    1428:	0000f740 	.word	0x0000f740

0000142c <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    142c:	4901      	ldr	r1, [pc, #4]	; (1434 <z_log_msg2_init+0x8>)
    142e:	4802      	ldr	r0, [pc, #8]	; (1438 <z_log_msg2_init+0xc>)
    1430:	f00a bf86 	b.w	c340 <mpsc_pbuf_init>
    1434:	0000f848 	.word	0x0000f848
    1438:	20000ff4 	.word	0x20000ff4

0000143c <log_core_init>:
	panic_mode = false;
    143c:	4a09      	ldr	r2, [pc, #36]	; (1464 <log_core_init+0x28>)
{
    143e:	b508      	push	{r3, lr}
	panic_mode = false;
    1440:	2300      	movs	r3, #0
    1442:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1444:	4a08      	ldr	r2, [pc, #32]	; (1468 <log_core_init+0x2c>)
    1446:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <log_core_init+0x30>)
    144a:	4a09      	ldr	r2, [pc, #36]	; (1470 <log_core_init+0x34>)
    144c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    144e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1452:	f000 fbd1 	bl	1bf8 <log_output_timestamp_freq_set>
		z_log_msg2_init();
    1456:	f7ff ffe9 	bl	142c <z_log_msg2_init>
}
    145a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
    145e:	f000 b925 	b.w	16ac <z_log_runtime_filters_init>
    1462:	bf00      	nop
    1464:	200021c9 	.word	0x200021c9
    1468:	20000fec 	.word	0x20000fec
    146c:	20000004 	.word	0x20000004
    1470:	0000c847 	.word	0x0000c847

00001474 <z_log_msg2_alloc>:
{
    1474:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    1476:	2200      	movs	r2, #0
    1478:	4801      	ldr	r0, [pc, #4]	; (1480 <z_log_msg2_alloc+0xc>)
    147a:	2300      	movs	r3, #0
    147c:	f00a bf7f 	b.w	c37e <mpsc_pbuf_alloc>
    1480:	20000ff4 	.word	0x20000ff4

00001484 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    1484:	4801      	ldr	r0, [pc, #4]	; (148c <z_log_msg2_claim+0x8>)
    1486:	f00b b80d 	b.w	c4a4 <mpsc_pbuf_claim>
    148a:	bf00      	nop
    148c:	20000ff4 	.word	0x20000ff4

00001490 <z_log_msg2_free>:
{
    1490:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1492:	4801      	ldr	r0, [pc, #4]	; (1498 <z_log_msg2_free+0x8>)
    1494:	f00b b852 	b.w	c53c <mpsc_pbuf_free>
    1498:	20000ff4 	.word	0x20000ff4

0000149c <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    149c:	4801      	ldr	r0, [pc, #4]	; (14a4 <z_log_msg2_pending+0x8>)
    149e:	f00b b881 	b.w	c5a4 <mpsc_pbuf_is_pending>
    14a2:	bf00      	nop
    14a4:	20000ff4 	.word	0x20000ff4

000014a8 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    14a8:	4b2a      	ldr	r3, [pc, #168]	; (1554 <z_impl_log_process+0xac>)
    14aa:	781b      	ldrb	r3, [r3, #0]
{
    14ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    14b0:	4606      	mov	r6, r0
	if (!backend_attached && !bypass) {
    14b2:	b90b      	cbnz	r3, 14b8 <z_impl_log_process+0x10>
    14b4:	2800      	cmp	r0, #0
    14b6:	d04b      	beq.n	1550 <z_impl_log_process+0xa8>
	msg = get_msg();
    14b8:	f00b f9d9 	bl	c86e <get_msg>
	if (msg.msg) {
    14bc:	4605      	mov	r5, r0
    14be:	b118      	cbz	r0, 14c8 <z_impl_log_process+0x20>
		if (!bypass) {
    14c0:	b16e      	cbz	r6, 14de <z_impl_log_process+0x36>
		z_log_msg2_free(msg.msg2);
    14c2:	4628      	mov	r0, r5
    14c4:	f7ff ffe4 	bl	1490 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    14c8:	b92e      	cbnz	r6, 14d6 <z_impl_log_process+0x2e>
	return dropped_cnt > 0;
    14ca:	4b23      	ldr	r3, [pc, #140]	; (1558 <z_impl_log_process+0xb0>)
	if (!bypass && z_log_dropped_pending()) {
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	2b00      	cmp	r3, #0
    14d0:	dd01      	ble.n	14d6 <z_impl_log_process+0x2e>
		dropped_notify();
    14d2:	f7ff ff8f 	bl	13f4 <dropped_notify>
}
    14d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return z_log_msg2_pending();
    14da:	f7ff bfdf 	b.w	149c <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    14de:	4b1f      	ldr	r3, [pc, #124]	; (155c <z_impl_log_process+0xb4>)
    14e0:	f3bf 8f5b 	dmb	ish
    14e4:	e853 2f00 	ldrex	r2, [r3]
    14e8:	3a01      	subs	r2, #1
    14ea:	e843 2100 	strex	r1, r2, [r3]
    14ee:	2900      	cmp	r1, #0
    14f0:	d1f8      	bne.n	14e4 <z_impl_log_process+0x3c>
    14f2:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    14f6:	4c1a      	ldr	r4, [pc, #104]	; (1560 <z_impl_log_process+0xb8>)
    14f8:	4f1a      	ldr	r7, [pc, #104]	; (1564 <z_impl_log_process+0xbc>)
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    14fa:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1568 <z_impl_log_process+0xc0>
    14fe:	1b3f      	subs	r7, r7, r4
    1500:	113f      	asrs	r7, r7, #4
    1502:	46b0      	mov	r8, r6
		for (int i = 0; i < log_backend_count_get(); i++) {
    1504:	45b8      	cmp	r8, r7
    1506:	dadc      	bge.n	14c2 <z_impl_log_process+0x1a>
	return backend->cb->active;
    1508:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    150a:	795b      	ldrb	r3, [r3, #5]
    150c:	b1cb      	cbz	r3, 1542 <z_impl_log_process+0x9a>

static inline bool z_log_item_is_msg(const union log_msg2_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
    150e:	7829      	ldrb	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_LOG2) && !z_log_item_is_msg(msg.msg2)) {
    1510:	074b      	lsls	r3, r1, #29
    1512:	d411      	bmi.n	1538 <z_impl_log_process+0x90>
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1514:	f8b5 9000 	ldrh.w	r9, [r5]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    1518:	686a      	ldr	r2, [r5, #4]
	return msg->hdr.desc.level;
    151a:	f3c9 1982 	ubfx	r9, r9, #6, #3
	return msg->hdr.desc.domain;
    151e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		source_id = source ? log_dynamic_source_id(source) : -1;
    1522:	b192      	cbz	r2, 154a <z_impl_log_process+0xa2>
    1524:	eba2 020a 	sub.w	r2, r2, sl
    1528:	f342 028f 	sbfx	r2, r2, #2, #16
	backend_level = log_filter_get(backend, domain_id,
    152c:	2301      	movs	r3, #1
    152e:	4620      	mov	r0, r4
    1530:	f000 f968 	bl	1804 <log_filter_get>
			if (log_backend_is_active(backend) &&
    1534:	4548      	cmp	r0, r9
    1536:	d304      	bcc.n	1542 <z_impl_log_process+0x9a>
	backend->api->process(backend, msg);
    1538:	6823      	ldr	r3, [r4, #0]
    153a:	4629      	mov	r1, r5
    153c:	681b      	ldr	r3, [r3, #0]
    153e:	4620      	mov	r0, r4
    1540:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1542:	f108 0801 	add.w	r8, r8, #1
    1546:	3410      	adds	r4, #16
    1548:	e7dc      	b.n	1504 <z_impl_log_process+0x5c>
		source_id = source ? log_dynamic_source_id(source) : -1;
    154a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    154e:	e7ed      	b.n	152c <z_impl_log_process+0x84>
}
    1550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1554:	200021c8 	.word	0x200021c8
    1558:	20000fec 	.word	0x20000fec
    155c:	20000fe8 	.word	0x20000fe8
    1560:	0000f730 	.word	0x0000f730
    1564:	0000f740 	.word	0x0000f740
    1568:	2000025c 	.word	0x2000025c

0000156c <log_process_thread_func>:
{
    156c:	b510      	push	{r4, lr}
	log_init();
    156e:	f7ff fed9 	bl	1324 <log_init>
	return z_impl_z_current_get();
    1572:	f009 fe6d 	bl	b250 <z_impl_z_current_get>
	proc_tid = process_tid;
    1576:	4b0c      	ldr	r3, [pc, #48]	; (15a8 <log_process_thread_func+0x3c>)
    1578:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    157a:	b130      	cbz	r0, 158a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    157c:	4b0b      	ldr	r3, [pc, #44]	; (15ac <log_process_thread_func+0x40>)
	    process_tid &&
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	2b09      	cmp	r3, #9
    1582:	dd02      	ble.n	158a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    1584:	480a      	ldr	r0, [pc, #40]	; (15b0 <log_process_thread_func+0x44>)
    1586:	f009 fa07 	bl	a998 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    158a:	4c09      	ldr	r4, [pc, #36]	; (15b0 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    158c:	2000      	movs	r0, #0
    158e:	f7ff ff8b 	bl	14a8 <z_impl_log_process>
		if (log_process(false) == false) {
    1592:	2800      	cmp	r0, #0
    1594:	d1fa      	bne.n	158c <log_process_thread_func+0x20>
    1596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    159a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    159e:	4620      	mov	r0, r4
    15a0:	f009 fa20 	bl	a9e4 <z_impl_k_sem_take>
    15a4:	e7f2      	b.n	158c <log_process_thread_func+0x20>
    15a6:	bf00      	nop
    15a8:	20001030 	.word	0x20001030
    15ac:	20000fe8 	.word	0x20000fe8
    15b0:	200002f8 	.word	0x200002f8

000015b4 <z_log_msg_post_finalize>:
{
    15b4:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    15b6:	4b1d      	ldr	r3, [pc, #116]	; (162c <z_log_msg_post_finalize+0x78>)
    15b8:	f3bf 8f5b 	dmb	ish
    15bc:	e853 2f00 	ldrex	r2, [r3]
    15c0:	1c51      	adds	r1, r2, #1
    15c2:	e843 1000 	strex	r0, r1, [r3]
    15c6:	2800      	cmp	r0, #0
    15c8:	d1f8      	bne.n	15bc <z_log_msg_post_finalize+0x8>
    15ca:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    15ce:	4b18      	ldr	r3, [pc, #96]	; (1630 <z_log_msg_post_finalize+0x7c>)
    15d0:	781b      	ldrb	r3, [r3, #0]
    15d2:	b183      	cbz	r3, 15f6 <z_log_msg_post_finalize+0x42>
    15d4:	f04f 0320 	mov.w	r3, #32
    15d8:	f3ef 8411 	mrs	r4, BASEPRI
    15dc:	f383 8812 	msr	BASEPRI_MAX, r3
    15e0:	f3bf 8f6f 	isb	sy
    15e4:	2000      	movs	r0, #0
    15e6:	f7ff ff5f 	bl	14a8 <z_impl_log_process>
	__asm__ volatile(
    15ea:	f384 8811 	msr	BASEPRI, r4
    15ee:	f3bf 8f6f 	isb	sy
}
    15f2:	b002      	add	sp, #8
    15f4:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    15f6:	4b0f      	ldr	r3, [pc, #60]	; (1634 <z_log_msg_post_finalize+0x80>)
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d0f9      	beq.n	15f2 <z_log_msg_post_finalize+0x3e>
    15fe:	b952      	cbnz	r2, 1616 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    1600:	2200      	movs	r2, #0
    1602:	2300      	movs	r3, #0
    1604:	e9cd 2300 	strd	r2, r3, [sp]
    1608:	480b      	ldr	r0, [pc, #44]	; (1638 <z_log_msg_post_finalize+0x84>)
    160a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    160e:	2300      	movs	r3, #0
    1610:	f00a f836 	bl	b680 <z_impl_k_timer_start>
    1614:	e7ed      	b.n	15f2 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1616:	2a0a      	cmp	r2, #10
    1618:	d1eb      	bne.n	15f2 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    161a:	4807      	ldr	r0, [pc, #28]	; (1638 <z_log_msg_post_finalize+0x84>)
    161c:	f00d fd13 	bl	f046 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1620:	4806      	ldr	r0, [pc, #24]	; (163c <z_log_msg_post_finalize+0x88>)
}
    1622:	b002      	add	sp, #8
    1624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1628:	f009 b9b6 	b.w	a998 <z_impl_k_sem_give>
    162c:	20000fe8 	.word	0x20000fe8
    1630:	200021c9 	.word	0x200021c9
    1634:	20001030 	.word	0x20001030
    1638:	20000810 	.word	0x20000810
    163c:	200002f8 	.word	0x200002f8

00001640 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1640:	4b06      	ldr	r3, [pc, #24]	; (165c <z_log_msg2_commit+0x1c>)
{
    1642:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1644:	681b      	ldr	r3, [r3, #0]
{
    1646:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1648:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    164a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    164c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    164e:	4804      	ldr	r0, [pc, #16]	; (1660 <z_log_msg2_commit+0x20>)
    1650:	f00a ff0b 	bl	c46a <mpsc_pbuf_commit>
}
    1654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1658:	f7ff bfac 	b.w	15b4 <z_log_msg_post_finalize>
    165c:	20000004 	.word	0x20000004
    1660:	20000ff4 	.word	0x20000ff4

00001664 <z_impl_log_panic>:
{
    1664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1666:	4f0e      	ldr	r7, [pc, #56]	; (16a0 <z_impl_log_panic+0x3c>)
    1668:	783d      	ldrb	r5, [r7, #0]
    166a:	b975      	cbnz	r5, 168a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    166c:	4c0d      	ldr	r4, [pc, #52]	; (16a4 <z_impl_log_panic+0x40>)
    166e:	4e0e      	ldr	r6, [pc, #56]	; (16a8 <z_impl_log_panic+0x44>)
	log_init();
    1670:	f7ff fe58 	bl	1324 <log_init>
    1674:	1b36      	subs	r6, r6, r4
    1676:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1678:	42b5      	cmp	r5, r6
    167a:	db07      	blt.n	168c <z_impl_log_panic+0x28>
    167c:	2000      	movs	r0, #0
    167e:	f7ff ff13 	bl	14a8 <z_impl_log_process>
		while (log_process(false) == true) {
    1682:	2800      	cmp	r0, #0
    1684:	d1fa      	bne.n	167c <z_impl_log_panic+0x18>
	panic_mode = true;
    1686:	2301      	movs	r3, #1
    1688:	703b      	strb	r3, [r7, #0]
}
    168a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    168c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    168e:	795b      	ldrb	r3, [r3, #5]
    1690:	b11b      	cbz	r3, 169a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    1692:	6823      	ldr	r3, [r4, #0]
    1694:	4620      	mov	r0, r4
    1696:	695b      	ldr	r3, [r3, #20]
    1698:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    169a:	3501      	adds	r5, #1
    169c:	3410      	adds	r4, #16
    169e:	e7eb      	b.n	1678 <z_impl_log_panic+0x14>
    16a0:	200021c9 	.word	0x200021c9
    16a4:	0000f730 	.word	0x0000f730
    16a8:	0000f740 	.word	0x0000f740

000016ac <z_log_runtime_filters_init>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    16ac:	480b      	ldr	r0, [pc, #44]	; (16dc <z_log_runtime_filters_init+0x30>)
    16ae:	4b0c      	ldr	r3, [pc, #48]	; (16e0 <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
    16b0:	b530      	push	{r4, r5, lr}
    16b2:	1a1b      	subs	r3, r3, r0
    16b4:	4c0b      	ldr	r4, [pc, #44]	; (16e4 <z_log_runtime_filters_init+0x38>)
    16b6:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    16b8:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
    16ba:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    16bc:	4299      	cmp	r1, r3
    16be:	d100      	bne.n	16c2 <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    16c0:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
    16c2:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    16c6:	6825      	ldr	r5, [r4, #0]
    16c8:	f002 0207 	and.w	r2, r2, #7
    16cc:	f025 0507 	bic.w	r5, r5, #7
    16d0:	432a      	orrs	r2, r5
    16d2:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    16d6:	3101      	adds	r1, #1
    16d8:	e7f0      	b.n	16bc <z_log_runtime_filters_init+0x10>
    16da:	bf00      	nop
    16dc:	0000f6b8 	.word	0x0000f6b8
    16e0:	0000f730 	.word	0x0000f730
    16e4:	2000025c 	.word	0x2000025c

000016e8 <log_source_name_get>:
    16e8:	4a04      	ldr	r2, [pc, #16]	; (16fc <log_source_name_get+0x14>)
    16ea:	4b05      	ldr	r3, [pc, #20]	; (1700 <log_source_name_get+0x18>)
    16ec:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    16ee:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    16f2:	bf34      	ite	cc
    16f4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    16f8:	2000      	movcs	r0, #0
}
    16fa:	4770      	bx	lr
    16fc:	0000f6b8 	.word	0x0000f6b8
    1700:	0000f730 	.word	0x0000f730

00001704 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    1704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1708:	4689      	mov	r9, r1
    170a:	4616      	mov	r6, r2
    170c:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		uint32_t new_aggr_filter;

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		if (backend == NULL) {
    170e:	4604      	mov	r4, r0
    1710:	b9b8      	cbnz	r0, 1742 <z_impl_log_filter_set+0x3e>
	return __log_backends_end - __log_backends_start;
    1712:	f8df a084 	ldr.w	sl, [pc, #132]	; 1798 <z_impl_log_filter_set+0x94>
    1716:	4f21      	ldr	r7, [pc, #132]	; (179c <z_impl_log_filter_set+0x98>)
    1718:	eba7 070a 	sub.w	r7, r7, sl
    171c:	113f      	asrs	r7, r7, #4
			struct log_backend const *iter_backend;
			uint32_t max = 0U;
    171e:	4605      	mov	r5, r0
			uint32_t current;

			for (int i = 0; i < log_backend_count_get(); i++) {
    1720:	42bc      	cmp	r4, r7
    1722:	db02      	blt.n	172a <z_impl_log_filter_set+0x26>
					    new_aggr_filter);
		}
	}

	return level;
}
    1724:	4628      	mov	r0, r5
    1726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    172a:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    172e:	4643      	mov	r3, r8
    1730:	4632      	mov	r2, r6
    1732:	4649      	mov	r1, r9
    1734:	f7ff ffe6 	bl	1704 <z_impl_log_filter_set>
				max = MAX(current, max);
    1738:	4285      	cmp	r5, r0
    173a:	bf38      	it	cc
    173c:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    173e:	3401      	adds	r4, #1
    1740:	e7ee      	b.n	1720 <z_impl_log_filter_set+0x1c>
	return __log_const_start[source_id].level;
    1742:	4b17      	ldr	r3, [pc, #92]	; (17a0 <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    1744:	4c17      	ldr	r4, [pc, #92]	; (17a4 <z_impl_log_filter_set+0xa0>)
	return __log_const_start[source_id].level;
    1746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3

		return LOG_FILTER_SLOT_GET(filters,
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
    174a:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    174c:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    174e:	791a      	ldrb	r2, [r3, #4]
    1750:	2307      	movs	r3, #7
    1752:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1756:	fa03 f102 	lsl.w	r1, r3, r2
			level = MIN(level, max);
    175a:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    175c:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
			level = MIN(level, max);
    1760:	bf28      	it	cs
    1762:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    1764:	ea23 0301 	bic.w	r3, r3, r1
    1768:	f005 0107 	and.w	r1, r5, #7
    176c:	fa01 f202 	lsl.w	r2, r1, r2
    1770:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    1772:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
    1774:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    1776:	fa23 f002 	lsr.w	r0, r3, r2
    177a:	f000 0007 	and.w	r0, r0, #7
    177e:	4281      	cmp	r1, r0
    1780:	f102 0203 	add.w	r2, r2, #3
    1784:	bf38      	it	cc
    1786:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    1788:	2a1e      	cmp	r2, #30
    178a:	d1f4      	bne.n	1776 <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
    178c:	f023 0307 	bic.w	r3, r3, #7
    1790:	430b      	orrs	r3, r1
    1792:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
	return level;
    1796:	e7c5      	b.n	1724 <z_impl_log_filter_set+0x20>
    1798:	0000f730 	.word	0x0000f730
    179c:	0000f740 	.word	0x0000f740
    17a0:	0000f6b8 	.word	0x0000f6b8
    17a4:	2000025c 	.word	0x2000025c

000017a8 <backend_filter_set>:
{
    17a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17aa:	4c09      	ldr	r4, [pc, #36]	; (17d0 <backend_filter_set+0x28>)
    17ac:	4b09      	ldr	r3, [pc, #36]	; (17d4 <backend_filter_set+0x2c>)
    17ae:	1ae4      	subs	r4, r4, r3
    17b0:	4606      	mov	r6, r0
    17b2:	460f      	mov	r7, r1
    17b4:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
    17b6:	2500      	movs	r5, #0
    17b8:	42a5      	cmp	r5, r4
    17ba:	d100      	bne.n	17be <backend_filter_set+0x16>
}
    17bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17be:	2100      	movs	r1, #0
    17c0:	b22a      	sxth	r2, r5
    17c2:	463b      	mov	r3, r7
    17c4:	4630      	mov	r0, r6
    17c6:	f7ff ff9d 	bl	1704 <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
    17ca:	3501      	adds	r5, #1
    17cc:	e7f4      	b.n	17b8 <backend_filter_set+0x10>
    17ce:	bf00      	nop
    17d0:	0000f730 	.word	0x0000f730
    17d4:	0000f6b8 	.word	0x0000f6b8

000017d8 <log_backend_enable>:
	id += backend - log_backend_get(0);
    17d8:	4b09      	ldr	r3, [pc, #36]	; (1800 <log_backend_enable+0x28>)
    17da:	1ac3      	subs	r3, r0, r3
{
    17dc:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    17de:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    17e0:	6846      	ldr	r6, [r0, #4]
{
    17e2:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
    17e4:	3301      	adds	r3, #1
{
    17e6:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
    17e8:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
    17ea:	4611      	mov	r1, r2
    17ec:	f7ff ffdc 	bl	17a8 <backend_filter_set>
	backend->cb->ctx = ctx;
    17f0:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
    17f2:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    17f4:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
    17f6:	715a      	strb	r2, [r3, #5]
}
    17f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    17fc:	f7ff bdbe 	b.w	137c <z_log_notify_backend_enabled>
    1800:	0000f730 	.word	0x0000f730

00001804 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    1804:	b163      	cbz	r3, 1820 <log_filter_get+0x1c>
		if (source_id < 0) {
    1806:	2a00      	cmp	r2, #0
    1808:	db0f      	blt.n	182a <log_filter_get+0x26>
	return backend->cb->id;
    180a:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    180c:	4908      	ldr	r1, [pc, #32]	; (1830 <log_filter_get+0x2c>)
    180e:	7918      	ldrb	r0, [r3, #4]
    1810:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1814:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    1818:	40d8      	lsrs	r0, r3
    181a:	f000 0007 	and.w	r0, r0, #7
    181e:	4770      	bx	lr
	return __log_const_start[source_id].level;
    1820:	4b04      	ldr	r3, [pc, #16]	; (1834 <log_filter_get+0x30>)
    1822:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
    1826:	7910      	ldrb	r0, [r2, #4]
    1828:	4770      	bx	lr
			return LOG_LEVEL_DBG;
    182a:	2004      	movs	r0, #4
}
    182c:	4770      	bx	lr
    182e:	bf00      	nop
    1830:	2000025c 	.word	0x2000025c
    1834:	0000f6b8 	.word	0x0000f6b8

00001838 <log_msg_mem_get_free>:
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    1838:	4b02      	ldr	r3, [pc, #8]	; (1844 <log_msg_mem_get_free+0xc>)
    183a:	6898      	ldr	r0, [r3, #8]
    183c:	699b      	ldr	r3, [r3, #24]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
    183e:	1ac0      	subs	r0, r0, r3
    1840:	4770      	bx	lr
    1842:	bf00      	nop
    1844:	20001034 	.word	0x20001034

00001848 <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
    1848:	4b01      	ldr	r3, [pc, #4]	; (1850 <log_msg_mem_get_used+0x8>)
    184a:	6998      	ldr	r0, [r3, #24]
    184c:	4770      	bx	lr
    184e:	bf00      	nop
    1850:	20001034 	.word	0x20001034

00001854 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1854:	b40e      	push	{r1, r2, r3}
    1856:	b503      	push	{r0, r1, lr}
    1858:	ab03      	add	r3, sp, #12
    185a:	4601      	mov	r1, r0
    185c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1860:	4804      	ldr	r0, [pc, #16]	; (1874 <print_formatted+0x20>)
	va_start(args, fmt);
    1862:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1864:	f7ff f968 	bl	b38 <cbvprintf>
	va_end(args);

	return length;
}
    1868:	b002      	add	sp, #8
    186a:	f85d eb04 	ldr.w	lr, [sp], #4
    186e:	b003      	add	sp, #12
    1870:	4770      	bx	lr
    1872:	bf00      	nop
    1874:	0000c8b9 	.word	0x0000c8b9

00001878 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    187c:	461d      	mov	r5, r3
    187e:	9b08      	ldr	r3, [sp, #32]
    1880:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1882:	06da      	lsls	r2, r3, #27
{
    1884:	4604      	mov	r4, r0
    1886:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1888:	d405      	bmi.n	1896 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    188a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    188c:	bf4c      	ite	mi
    188e:	492a      	ldrmi	r1, [pc, #168]	; (1938 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1890:	492a      	ldrpl	r1, [pc, #168]	; (193c <hexdump_line_print+0xc4>)
    1892:	f7ff ffdf 	bl	1854 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    1896:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1940 <hexdump_line_print+0xc8>
{
    189a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    189e:	45a8      	cmp	r8, r5
    18a0:	db2a      	blt.n	18f8 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    18a2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1944 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    18a6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1948 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    18aa:	f8df a094 	ldr.w	sl, [pc, #148]	; 1940 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    18ae:	2500      	movs	r5, #0
		if (i < length) {
    18b0:	42bd      	cmp	r5, r7
    18b2:	d22f      	bcs.n	1914 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    18b4:	5d72      	ldrb	r2, [r6, r5]
    18b6:	4649      	mov	r1, r9
    18b8:	4620      	mov	r0, r4
    18ba:	f7ff ffcb 	bl	1854 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    18be:	3501      	adds	r5, #1
    18c0:	2d10      	cmp	r5, #16
    18c2:	d120      	bne.n	1906 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    18c4:	4921      	ldr	r1, [pc, #132]	; (194c <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    18c6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1940 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    18ca:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1950 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    18ce:	4620      	mov	r0, r4
    18d0:	f7ff ffc0 	bl	1854 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    18d4:	2500      	movs	r5, #0
		if (i < length) {
    18d6:	42af      	cmp	r7, r5
    18d8:	d928      	bls.n	192c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    18da:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    18dc:	f1a2 0320 	sub.w	r3, r2, #32
    18e0:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    18e2:	bf28      	it	cs
    18e4:	222e      	movcs	r2, #46	; 0x2e
    18e6:	4649      	mov	r1, r9
    18e8:	4620      	mov	r0, r4
    18ea:	f7ff ffb3 	bl	1854 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    18ee:	3501      	adds	r5, #1
    18f0:	2d10      	cmp	r5, #16
    18f2:	d114      	bne.n	191e <hexdump_line_print+0xa6>
		}
	}
}
    18f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    18f8:	4649      	mov	r1, r9
    18fa:	4620      	mov	r0, r4
    18fc:	f7ff ffaa 	bl	1854 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1900:	f108 0801 	add.w	r8, r8, #1
    1904:	e7cb      	b.n	189e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1906:	076a      	lsls	r2, r5, #29
    1908:	d1d2      	bne.n	18b0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    190a:	4651      	mov	r1, sl
    190c:	4620      	mov	r0, r4
    190e:	f7ff ffa1 	bl	1854 <print_formatted>
    1912:	e7cd      	b.n	18b0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1914:	4641      	mov	r1, r8
    1916:	4620      	mov	r0, r4
    1918:	f7ff ff9c 	bl	1854 <print_formatted>
    191c:	e7cf      	b.n	18be <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    191e:	076b      	lsls	r3, r5, #29
    1920:	d1d9      	bne.n	18d6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1922:	4641      	mov	r1, r8
    1924:	4620      	mov	r0, r4
    1926:	f7ff ff95 	bl	1854 <print_formatted>
    192a:	e7d4      	b.n	18d6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    192c:	4641      	mov	r1, r8
    192e:	4620      	mov	r0, r4
    1930:	f7ff ff90 	bl	1854 <print_formatted>
    1934:	e7db      	b.n	18ee <hexdump_line_print+0x76>
    1936:	bf00      	nop
    1938:	000106d4 	.word	0x000106d4
    193c:	000102c0 	.word	0x000102c0
    1940:	000101b6 	.word	0x000101b6
    1944:	000101b4 	.word	0x000101b4
    1948:	000101ae 	.word	0x000101ae
    194c:	000101b8 	.word	0x000101b8
    1950:	00010d31 	.word	0x00010d31

00001954 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1958:	b087      	sub	sp, #28
    195a:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    195c:	f001 0301 	and.w	r3, r1, #1
{
    1960:	9205      	str	r2, [sp, #20]
    1962:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1966:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    196a:	9304      	str	r3, [sp, #16]
{
    196c:	4607      	mov	r7, r0
    196e:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1970:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1974:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1978:	f00a ff7d 	bl	c876 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    197c:	4602      	mov	r2, r0
    197e:	2800      	cmp	r0, #0
    1980:	d044      	beq.n	1a0c <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1982:	493a      	ldr	r1, [pc, #232]	; (1a6c <prefix_print+0x118>)
    1984:	4638      	mov	r0, r7
    1986:	f7ff ff65 	bl	1854 <print_formatted>
    198a:	4605      	mov	r5, r0
	}

	if (stamp) {
    198c:	f1bb 0f00 	cmp.w	fp, #0
    1990:	d008      	beq.n	19a4 <prefix_print+0x50>
	if (!format) {
    1992:	f018 0f44 	tst.w	r8, #68	; 0x44
    1996:	d13b      	bne.n	1a10 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1998:	4935      	ldr	r1, [pc, #212]	; (1a70 <prefix_print+0x11c>)
    199a:	4622      	mov	r2, r4
    199c:	4638      	mov	r0, r7
    199e:	f7ff ff59 	bl	1854 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    19a2:	4405      	add	r5, r0
	if (color) {
    19a4:	9b04      	ldr	r3, [sp, #16]
    19a6:	b153      	cbz	r3, 19be <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    19a8:	4b32      	ldr	r3, [pc, #200]	; (1a74 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    19aa:	4933      	ldr	r1, [pc, #204]	; (1a78 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    19ac:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    19b0:	4b32      	ldr	r3, [pc, #200]	; (1a7c <prefix_print+0x128>)
    19b2:	4638      	mov	r0, r7
    19b4:	2a00      	cmp	r2, #0
    19b6:	bf08      	it	eq
    19b8:	461a      	moveq	r2, r3
    19ba:	f7ff ff4b 	bl	1854 <print_formatted>
	if (level_on) {
    19be:	b13e      	cbz	r6, 19d0 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    19c0:	4b2f      	ldr	r3, [pc, #188]	; (1a80 <prefix_print+0x12c>)
    19c2:	4930      	ldr	r1, [pc, #192]	; (1a84 <prefix_print+0x130>)
    19c4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    19c8:	4638      	mov	r0, r7
    19ca:	f7ff ff43 	bl	1854 <print_formatted>
    19ce:	4606      	mov	r6, r0
	if (source_id >= 0) {
    19d0:	f1ba 0f00 	cmp.w	sl, #0
    19d4:	db16      	blt.n	1a04 <prefix_print+0xb0>
		total += print_formatted(output,
    19d6:	9b05      	ldr	r3, [sp, #20]
    19d8:	2b00      	cmp	r3, #0
    19da:	d045      	beq.n	1a68 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    19dc:	2301      	movs	r3, #1
    19de:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    19e2:	4b29      	ldr	r3, [pc, #164]	; (1a88 <prefix_print+0x134>)
    19e4:	4c29      	ldr	r4, [pc, #164]	; (1a8c <prefix_print+0x138>)
    19e6:	f019 0f10 	tst.w	r9, #16
    19ea:	bf18      	it	ne
    19ec:	461c      	movne	r4, r3
    19ee:	4651      	mov	r1, sl
    19f0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    19f4:	f7ff fe78 	bl	16e8 <log_source_name_get>
    19f8:	4621      	mov	r1, r4
    19fa:	4602      	mov	r2, r0
    19fc:	4638      	mov	r0, r7
    19fe:	f7ff ff29 	bl	1854 <print_formatted>
    1a02:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1a04:	1970      	adds	r0, r6, r5
    1a06:	b007      	add	sp, #28
    1a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1a0c:	4605      	mov	r5, r0
    1a0e:	e7bd      	b.n	198c <prefix_print+0x38>
	} else if (freq != 0U) {
    1a10:	4b1f      	ldr	r3, [pc, #124]	; (1a90 <prefix_print+0x13c>)
    1a12:	6818      	ldr	r0, [r3, #0]
    1a14:	2800      	cmp	r0, #0
    1a16:	d0c4      	beq.n	19a2 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1a18:	4b1e      	ldr	r3, [pc, #120]	; (1a94 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1a1a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1a1e:	681b      	ldr	r3, [r3, #0]
    1a20:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1a24:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1a28:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1a2c:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1a30:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1a34:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1a38:	fbb3 f2f1 	udiv	r2, r3, r1
    1a3c:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a40:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1a44:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a48:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    1a4c:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a50:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    1a54:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a56:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    1a5a:	490f      	ldr	r1, [pc, #60]	; (1a98 <prefix_print+0x144>)
    1a5c:	e9cd e001 	strd	lr, r0, [sp, #4]
    1a60:	4638      	mov	r0, r7
    1a62:	f7ff fef7 	bl	1854 <print_formatted>
    1a66:	e79c      	b.n	19a2 <prefix_print+0x4e>
		total += print_formatted(output,
    1a68:	4c08      	ldr	r4, [pc, #32]	; (1a8c <prefix_print+0x138>)
    1a6a:	e7c0      	b.n	19ee <prefix_print+0x9a>
    1a6c:	000101c8 	.word	0x000101c8
    1a70:	000101cc 	.word	0x000101cc
    1a74:	0000f85c 	.word	0x0000f85c
    1a78:	000107f3 	.word	0x000107f3
    1a7c:	000101ba 	.word	0x000101ba
    1a80:	0000f870 	.word	0x0000f870
    1a84:	000101f1 	.word	0x000101f1
    1a88:	000101c4 	.word	0x000101c4
    1a8c:	000101bf 	.word	0x000101bf
    1a90:	20001050 	.word	0x20001050
    1a94:	20001054 	.word	0x20001054
    1a98:	000101d5 	.word	0x000101d5

00001a9c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1a9c:	b538      	push	{r3, r4, r5, lr}
    1a9e:	460c      	mov	r4, r1
	if (color) {
    1aa0:	07e1      	lsls	r1, r4, #31
{
    1aa2:	4605      	mov	r5, r0
	if (color) {
    1aa4:	d503      	bpl.n	1aae <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1aa6:	4a08      	ldr	r2, [pc, #32]	; (1ac8 <postfix_print+0x2c>)
    1aa8:	4908      	ldr	r1, [pc, #32]	; (1acc <postfix_print+0x30>)
    1aaa:	f7ff fed3 	bl	1854 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1aae:	06e2      	lsls	r2, r4, #27
    1ab0:	d408      	bmi.n	1ac4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1ab2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1ab4:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1ab6:	bf4c      	ite	mi
    1ab8:	4905      	ldrmi	r1, [pc, #20]	; (1ad0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1aba:	4906      	ldrpl	r1, [pc, #24]	; (1ad4 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1ac0:	f7ff bec8 	b.w	1854 <print_formatted>
}
    1ac4:	bd38      	pop	{r3, r4, r5, pc}
    1ac6:	bf00      	nop
    1ac8:	000101ba 	.word	0x000101ba
    1acc:	000107f3 	.word	0x000107f3
    1ad0:	000106d4 	.word	0x000106d4
    1ad4:	000102c0 	.word	0x000102c0

00001ad8 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.desc.level;
    1adc:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    1ade:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1ae2:	4606      	mov	r6, r0
    1ae4:	460c      	mov	r4, r1
    1ae6:	4690      	mov	r8, r2
    1ae8:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1aec:	d04d      	beq.n	1b8a <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1aee:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    1af0:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1af2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1af6:	2b00      	cmp	r3, #0
    1af8:	d044      	beq.n	1b84 <log_output_msg2_process+0xac>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    1afa:	4925      	ldr	r1, [pc, #148]	; (1b90 <log_output_msg2_process+0xb8>)
    1afc:	1a5b      	subs	r3, r3, r1
    1afe:	f343 038f 	sbfx	r3, r3, #2, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1b02:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1b06:	f8cd 9000 	str.w	r9, [sp]
    1b0a:	68a3      	ldr	r3, [r4, #8]
    1b0c:	2200      	movs	r2, #0
    1b0e:	4641      	mov	r1, r8
    1b10:	4630      	mov	r0, r6
    1b12:	f7ff ff1f 	bl	1954 <prefix_print>
    1b16:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1b18:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1b1a:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1b1e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1b22:	b153      	cbz	r3, 1b3a <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1b24:	4f1b      	ldr	r7, [pc, #108]	; (1b94 <log_output_msg2_process+0xbc>)
    1b26:	481c      	ldr	r0, [pc, #112]	; (1b98 <log_output_msg2_process+0xc0>)
    1b28:	491c      	ldr	r1, [pc, #112]	; (1b9c <log_output_msg2_process+0xc4>)
    1b2a:	462b      	mov	r3, r5
    1b2c:	4632      	mov	r2, r6
    1b2e:	f1b9 0f00 	cmp.w	r9, #0
    1b32:	bf08      	it	eq
    1b34:	4638      	moveq	r0, r7
    1b36:	f009 fed2 	bl	b8de <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1b3a:	8867      	ldrh	r7, [r4, #2]
    1b3c:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1b40:	b197      	cbz	r7, 1b68 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1b42:	6823      	ldr	r3, [r4, #0]
    1b44:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1b48:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1b4a:	2f10      	cmp	r7, #16
    1b4c:	463c      	mov	r4, r7
    1b4e:	bf28      	it	cs
    1b50:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1b52:	4629      	mov	r1, r5
    1b54:	f8cd 8000 	str.w	r8, [sp]
    1b58:	4653      	mov	r3, sl
    1b5a:	4622      	mov	r2, r4
    1b5c:	4630      	mov	r0, r6
    1b5e:	f7ff fe8b 	bl	1878 <hexdump_line_print>
	} while (len);
    1b62:	1b3f      	subs	r7, r7, r4
		data += length;
    1b64:	4425      	add	r5, r4
	} while (len);
    1b66:	d1f0      	bne.n	1b4a <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1b68:	f1b9 0f00 	cmp.w	r9, #0
    1b6c:	d004      	beq.n	1b78 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1b6e:	464a      	mov	r2, r9
    1b70:	4641      	mov	r1, r8
    1b72:	4630      	mov	r0, r6
    1b74:	f7ff ff92 	bl	1a9c <postfix_print>
	}

	log_output_flush(output);
    1b78:	4630      	mov	r0, r6
}
    1b7a:	b004      	add	sp, #16
    1b7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1b80:	f00a be8d 	b.w	c89e <log_output_flush>
		int16_t source_id = source ?
    1b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1b88:	e7bb      	b.n	1b02 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1b8a:	46ca      	mov	sl, r9
    1b8c:	e7c4      	b.n	1b18 <log_output_msg2_process+0x40>
    1b8e:	bf00      	nop
    1b90:	2000025c 	.word	0x2000025c
    1b94:	0000c8ef 	.word	0x0000c8ef
    1b98:	0000c8b9 	.word	0x0000c8b9
    1b9c:	00000b39 	.word	0x00000b39

00001ba0 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1ba2:	f242 730f 	movw	r3, #9999	; 0x270f
    1ba6:	428b      	cmp	r3, r1
    1ba8:	bf28      	it	cs
    1baa:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1bac:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bae:	4a0f      	ldr	r2, [pc, #60]	; (1bec <log_output_dropped_process+0x4c>)
{
    1bb0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bb2:	2105      	movs	r1, #5
    1bb4:	4668      	mov	r0, sp
    1bb6:	f009 ff0c 	bl	b9d2 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1bba:	6863      	ldr	r3, [r4, #4]
    1bbc:	490c      	ldr	r1, [pc, #48]	; (1bf0 <log_output_dropped_process+0x50>)
    1bbe:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bc0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1bc2:	2204      	movs	r2, #4
    1bc4:	4628      	mov	r0, r5
    1bc6:	f00a fe5d 	bl	c884 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1bca:	6863      	ldr	r3, [r4, #4]
    1bcc:	4632      	mov	r2, r6
    1bce:	4669      	mov	r1, sp
    1bd0:	4628      	mov	r0, r5
    1bd2:	685b      	ldr	r3, [r3, #4]
    1bd4:	f00a fe56 	bl	c884 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1bd8:	6863      	ldr	r3, [r4, #4]
    1bda:	4906      	ldr	r1, [pc, #24]	; (1bf4 <log_output_dropped_process+0x54>)
    1bdc:	685b      	ldr	r3, [r3, #4]
    1bde:	2217      	movs	r2, #23
    1be0:	4628      	mov	r0, r5
    1be2:	f00a fe4f 	bl	c884 <buffer_write>
		     output->control_block->ctx);
}
    1be6:	b002      	add	sp, #8
    1be8:	bd70      	pop	{r4, r5, r6, pc}
    1bea:	bf00      	nop
    1bec:	00011b9a 	.word	0x00011b9a
    1bf0:	0001022f 	.word	0x0001022f
    1bf4:	00010217 	.word	0x00010217

00001bf8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1bf8:	4a08      	ldr	r2, [pc, #32]	; (1c1c <log_output_timestamp_freq_set+0x24>)
{
    1bfa:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1bfc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1bfe:	4c08      	ldr	r4, [pc, #32]	; (1c20 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1c00:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1c02:	2100      	movs	r1, #0
    1c04:	42a0      	cmp	r0, r4
    1c06:	d804      	bhi.n	1c12 <log_output_timestamp_freq_set+0x1a>
    1c08:	b101      	cbz	r1, 1c0c <log_output_timestamp_freq_set+0x14>
    1c0a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1c0c:	4b05      	ldr	r3, [pc, #20]	; (1c24 <log_output_timestamp_freq_set+0x2c>)
    1c0e:	6018      	str	r0, [r3, #0]
}
    1c10:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1c12:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1c14:	005b      	lsls	r3, r3, #1
    1c16:	2101      	movs	r1, #1
    1c18:	e7f4      	b.n	1c04 <log_output_timestamp_freq_set+0xc>
    1c1a:	bf00      	nop
    1c1c:	20001054 	.word	0x20001054
    1c20:	000f4240 	.word	0x000f4240
    1c24:	20001050 	.word	0x20001050

00001c28 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    1c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c2c:	b085      	sub	sp, #20
    1c2e:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    1c32:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    1c36:	4605      	mov	r5, r0
    1c38:	4688      	mov	r8, r1
    1c3a:	4614      	mov	r4, r2
    1c3c:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    1c3e:	f1bb 0f00 	cmp.w	fp, #0
    1c42:	d037      	beq.n	1cb4 <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    1c44:	2200      	movs	r2, #0
    1c46:	f8cd a000 	str.w	sl, [sp]
    1c4a:	465b      	mov	r3, fp
    1c4c:	210c      	movs	r1, #12
    1c4e:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    1c50:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    1c54:	f7fe fc6c 	bl	530 <cbvprintf_package>
    1c58:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    1c5a:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1c5e:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    1c62:	f005 0407 	and.w	r4, r5, #7
    1c66:	4d14      	ldr	r5, [pc, #80]	; (1cb8 <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    1c68:	4b14      	ldr	r3, [pc, #80]	; (1cbc <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    1c6a:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1c6c:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    1c6e:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    1c72:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1c76:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    1c7a:	432c      	orrs	r4, r5
    1c7c:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    1c80:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    1c82:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    1c84:	f7ff fbf6 	bl	1474 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    1c88:	4605      	mov	r5, r0
    1c8a:	b150      	cbz	r0, 1ca2 <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    1c8c:	f1bb 0f00 	cmp.w	fp, #0
    1c90:	d007      	beq.n	1ca2 <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    1c92:	f8cd a000 	str.w	sl, [sp]
    1c96:	465b      	mov	r3, fp
    1c98:	2200      	movs	r2, #0
    1c9a:	4639      	mov	r1, r7
    1c9c:	300c      	adds	r0, #12
    1c9e:	f7fe fc47 	bl	530 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    1ca2:	464b      	mov	r3, r9
    1ca4:	4622      	mov	r2, r4
    1ca6:	4641      	mov	r1, r8
    1ca8:	4628      	mov	r0, r5
}
    1caa:	b005      	add	sp, #20
    1cac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    1cb0:	f00a be2a 	b.w	c908 <z_log_msg2_finalize>
		plen = 0;
    1cb4:	465f      	mov	r7, fp
    1cb6:	e7d0      	b.n	1c5a <z_impl_z_log_msg2_runtime_vcreate+0x32>
    1cb8:	0007fe00 	.word	0x0007fe00
    1cbc:	7ff80000 	.word	0x7ff80000

00001cc0 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    1cc0:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    1cc2:	2804      	cmp	r0, #4
	entry->handler = NULL;
    1cc4:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    1cc6:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    1cc8:	bf98      	it	ls
    1cca:	4b04      	ldrls	r3, [pc, #16]	; (1cdc <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    1ccc:	4a04      	ldr	r2, [pc, #16]	; (1ce0 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    1cce:	bf98      	it	ls
    1cd0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    1cd4:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    1cd6:	600b      	str	r3, [r1, #0]
}
    1cd8:	4770      	bx	lr
    1cda:	bf00      	nop
    1cdc:	0000f8c4 	.word	0x0000f8c4
    1ce0:	0000f8a0 	.word	0x0000f8a0

00001ce4 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    1ce4:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    1ce6:	4a08      	ldr	r2, [pc, #32]	; (1d08 <backend_name_get+0x24>)
	entry->syntax  = NULL;
    1ce8:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    1cea:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    1cec:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    1cee:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
    1cf0:	4b06      	ldr	r3, [pc, #24]	; (1d0c <backend_name_get+0x28>)
    1cf2:	4a07      	ldr	r2, [pc, #28]	; (1d10 <backend_name_get+0x2c>)
    1cf4:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    1cf6:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    1cfa:	bf3e      	ittt	cc
    1cfc:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    1d00:	689b      	ldrcc	r3, [r3, #8]
    1d02:	600b      	strcc	r3, [r1, #0]
	}
}
    1d04:	4770      	bx	lr
    1d06:	bf00      	nop
    1d08:	0000fa18 	.word	0x0000fa18
    1d0c:	0000f730 	.word	0x0000f730
    1d10:	0000f740 	.word	0x0000f740

00001d14 <cmd_log_memory_slabs>:
{
    1d14:	b538      	push	{r3, r4, r5, lr}
    1d16:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
    1d18:	f7ff fd8e 	bl	1838 <log_msg_mem_get_free>
    1d1c:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
    1d1e:	f7ff fd93 	bl	1848 <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
    1d22:	4a09      	ldr	r2, [pc, #36]	; (1d48 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
    1d24:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
    1d26:	2108      	movs	r1, #8
    1d28:	4620      	mov	r0, r4
    1d2a:	f00a ffe9 	bl	cd00 <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
    1d2e:	462b      	mov	r3, r5
    1d30:	4620      	mov	r0, r4
    1d32:	4a06      	ldr	r2, [pc, #24]	; (1d4c <cmd_log_memory_slabs+0x38>)
    1d34:	2108      	movs	r1, #8
    1d36:	f00a ffe3 	bl	cd00 <shell_fprintf>
		shell_print(
    1d3a:	4620      	mov	r0, r4
    1d3c:	4a04      	ldr	r2, [pc, #16]	; (1d50 <cmd_log_memory_slabs+0x3c>)
    1d3e:	2108      	movs	r1, #8
    1d40:	f00a ffde 	bl	cd00 <shell_fprintf>
}
    1d44:	2000      	movs	r0, #0
    1d46:	bd38      	pop	{r3, r4, r5, pc}
    1d48:	00010234 	.word	0x00010234
    1d4c:	00010245 	.word	0x00010245
    1d50:	00010256 	.word	0x00010256

00001d54 <cmd_log_backends_list>:
{
    1d54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1d58:	4b11      	ldr	r3, [pc, #68]	; (1da0 <cmd_log_backends_list+0x4c>)
    1d5a:	4c12      	ldr	r4, [pc, #72]	; (1da4 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
    1d5c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1da8 <cmd_log_backends_list+0x54>
    1d60:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1dac <cmd_log_backends_list+0x58>
    1d64:	f8df a048 	ldr.w	sl, [pc, #72]	; 1db0 <cmd_log_backends_list+0x5c>
    1d68:	1b1b      	subs	r3, r3, r4
{
    1d6a:	4607      	mov	r7, r0
    1d6c:	111e      	asrs	r6, r3, #4
	for (int i = 0; i < backend_count; i++) {
    1d6e:	2500      	movs	r5, #0
    1d70:	42b5      	cmp	r5, r6
    1d72:	db03      	blt.n	1d7c <cmd_log_backends_list+0x28>
}
    1d74:	2000      	movs	r0, #0
    1d76:	b002      	add	sp, #8
    1d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
    1d7c:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    1d7e:	7959      	ldrb	r1, [r3, #5]
    1d80:	791b      	ldrb	r3, [r3, #4]
    1d82:	2900      	cmp	r1, #0
    1d84:	bf14      	ite	ne
    1d86:	4642      	movne	r2, r8
    1d88:	464a      	moveq	r2, r9
    1d8a:	e9cd 2300 	strd	r2, r3, [sp]
    1d8e:	2108      	movs	r1, #8
    1d90:	68a3      	ldr	r3, [r4, #8]
    1d92:	4652      	mov	r2, sl
    1d94:	4638      	mov	r0, r7
    1d96:	f00a ffb3 	bl	cd00 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    1d9a:	3501      	adds	r5, #1
    1d9c:	3410      	adds	r4, #16
    1d9e:	e7e7      	b.n	1d70 <cmd_log_backends_list+0x1c>
    1da0:	0000f740 	.word	0x0000f740
    1da4:	0000f730 	.word	0x0000f730
    1da8:	00011ce0 	.word	0x00011ce0
    1dac:	000112c5 	.word	0x000112c5
    1db0:	000102a2 	.word	0x000102a2

00001db4 <log_status>:
{
    1db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1db8:	4b24      	ldr	r3, [pc, #144]	; (1e4c <log_status+0x98>)
    1dba:	4c25      	ldr	r4, [pc, #148]	; (1e50 <log_status+0x9c>)
    1dbc:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
    1dbe:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    1dc0:	795b      	ldrb	r3, [r3, #5]
{
    1dc2:	b085      	sub	sp, #20
    1dc4:	4605      	mov	r5, r0
    1dc6:	460e      	mov	r6, r1
    1dc8:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
    1dca:	b91b      	cbnz	r3, 1dd4 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
    1dcc:	4a21      	ldr	r2, [pc, #132]	; (1e54 <log_status+0xa0>)
    1dce:	2103      	movs	r1, #3
    1dd0:	f00a ff96 	bl	cd00 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    1dd4:	4b20      	ldr	r3, [pc, #128]	; (1e58 <log_status+0xa4>)
    1dd6:	4a21      	ldr	r2, [pc, #132]	; (1e5c <log_status+0xa8>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1dd8:	f8df a084 	ldr.w	sl, [pc, #132]	; 1e60 <log_status+0xac>
    1ddc:	f8df b084 	ldr.w	fp, [pc, #132]	; 1e64 <log_status+0xb0>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    1de0:	2108      	movs	r1, #8
    1de2:	4628      	mov	r0, r5
    1de4:	f00a ff8c 	bl	cd00 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    1de8:	4a1f      	ldr	r2, [pc, #124]	; (1e68 <log_status+0xb4>)
    1dea:	2108      	movs	r1, #8
    1dec:	4628      	mov	r0, r5
    1dee:	f00a ff87 	bl	cd00 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    1df2:	f04f 0800 	mov.w	r8, #0
    1df6:	fa0f f788 	sxth.w	r7, r8
    1dfa:	42a7      	cmp	r7, r4
    1dfc:	f108 0801 	add.w	r8, r8, #1
    1e00:	d303      	bcc.n	1e0a <log_status+0x56>
}
    1e02:	2000      	movs	r0, #0
    1e04:	b005      	add	sp, #20
    1e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1e0a:	463a      	mov	r2, r7
    1e0c:	2301      	movs	r3, #1
    1e0e:	2100      	movs	r1, #0
    1e10:	4630      	mov	r0, r6
    1e12:	f7ff fcf7 	bl	1804 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1e16:	2300      	movs	r3, #0
    1e18:	463a      	mov	r2, r7
    1e1a:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1e1c:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1e1e:	4630      	mov	r0, r6
    1e20:	f7ff fcf0 	bl	1804 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1e24:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1e26:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1e28:	2000      	movs	r0, #0
    1e2a:	f7ff fc5d 	bl	16e8 <log_source_name_get>
    1e2e:	9a03      	ldr	r2, [sp, #12]
    1e30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    1e34:	9201      	str	r2, [sp, #4]
    1e36:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    1e3a:	9200      	str	r2, [sp, #0]
    1e3c:	4603      	mov	r3, r0
    1e3e:	465a      	mov	r2, fp
    1e40:	2108      	movs	r1, #8
    1e42:	4628      	mov	r0, r5
    1e44:	f00a ff5c 	bl	cd00 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    1e48:	e7d5      	b.n	1df6 <log_status+0x42>
    1e4a:	bf00      	nop
    1e4c:	0000f6b8 	.word	0x0000f6b8
    1e50:	0000f730 	.word	0x0000f730
    1e54:	000102c3 	.word	0x000102c3
    1e58:	000102d5 	.word	0x000102d5
    1e5c:	000102e1 	.word	0x000102e1
    1e60:	0000f8b0 	.word	0x0000f8b0
    1e64:	0001033c 	.word	0x0001033c
    1e68:	000102ff 	.word	0x000102ff

00001e6c <module_name_get>:
{
    1e6c:	b510      	push	{r4, lr}
	entry->handler = NULL;
    1e6e:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    1e70:	4a05      	ldr	r2, [pc, #20]	; (1e88 <module_name_get+0x1c>)
	entry->handler = NULL;
    1e72:	60cb      	str	r3, [r1, #12]
{
    1e74:	460c      	mov	r4, r1
	entry->help  = NULL;
    1e76:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    1e78:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    1e7a:	4601      	mov	r1, r0
    1e7c:	4618      	mov	r0, r3
    1e7e:	f7ff fc33 	bl	16e8 <log_source_name_get>
    1e82:	6020      	str	r0, [r4, #0]
}
    1e84:	bd10      	pop	{r4, pc}
    1e86:	bf00      	nop
    1e88:	0000f8a0 	.word	0x0000f8a0

00001e8c <shell_backend_cmd_execute>:
{
    1e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    1e90:	f852 ac04 	ldr.w	sl, [r2, #-4]
	return __log_backends_end - __log_backends_start;
    1e94:	4c18      	ldr	r4, [pc, #96]	; (1ef8 <shell_backend_cmd_execute+0x6c>)
{
    1e96:	b085      	sub	sp, #20
    1e98:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    1e9a:	4650      	mov	r0, sl
{
    1e9c:	4689      	mov	r9, r1
    1e9e:	4690      	mov	r8, r2
    1ea0:	9302      	str	r3, [sp, #8]
	size_t slen = strlen(name);
    1ea2:	f00c f8c1 	bl	e028 <strlen>
    1ea6:	4915      	ldr	r1, [pc, #84]	; (1efc <shell_backend_cmd_execute+0x70>)
    1ea8:	1b09      	subs	r1, r1, r4
    1eaa:	110b      	asrs	r3, r1, #4
    1eac:	4602      	mov	r2, r0
    1eae:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    1eb0:	2700      	movs	r7, #0
    1eb2:	46a3      	mov	fp, r4
    1eb4:	9b01      	ldr	r3, [sp, #4]
    1eb6:	429f      	cmp	r7, r3
    1eb8:	db08      	blt.n	1ecc <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
    1eba:	4a11      	ldr	r2, [pc, #68]	; (1f00 <shell_backend_cmd_execute+0x74>)
    1ebc:	4653      	mov	r3, sl
    1ebe:	2101      	movs	r1, #1
    1ec0:	4630      	mov	r0, r6
    1ec2:	f00a ff1d 	bl	cd00 <shell_fprintf>
		return -ENOEXEC;
    1ec6:	f06f 0507 	mvn.w	r5, #7
    1eca:	e00f      	b.n	1eec <shell_backend_cmd_execute+0x60>
		if (strncmp(name, backend->name, slen) == 0) {
    1ecc:	68a1      	ldr	r1, [r4, #8]
    1ece:	9203      	str	r2, [sp, #12]
    1ed0:	4650      	mov	r0, sl
    1ed2:	f00c f8c5 	bl	e060 <strncmp>
    1ed6:	3410      	adds	r4, #16
    1ed8:	9a03      	ldr	r2, [sp, #12]
    1eda:	4605      	mov	r5, r0
    1edc:	b950      	cbnz	r0, 1ef4 <shell_backend_cmd_execute+0x68>
		func(shell, backend, argc, argv);
    1ede:	9c02      	ldr	r4, [sp, #8]
    1ee0:	4643      	mov	r3, r8
    1ee2:	464a      	mov	r2, r9
    1ee4:	eb0b 1107 	add.w	r1, fp, r7, lsl #4
    1ee8:	4630      	mov	r0, r6
    1eea:	47a0      	blx	r4
}
    1eec:	4628      	mov	r0, r5
    1eee:	b005      	add	sp, #20
    1ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < log_backend_count_get(); i++) {
    1ef4:	3701      	adds	r7, #1
    1ef6:	e7dd      	b.n	1eb4 <shell_backend_cmd_execute+0x28>
    1ef8:	0000f730 	.word	0x0000f730
    1efc:	0000f740 	.word	0x0000f740
    1f00:	00010350 	.word	0x00010350

00001f04 <cmd_log_backend_status>:
{
    1f04:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    1f06:	4b02      	ldr	r3, [pc, #8]	; (1f10 <cmd_log_backend_status+0xc>)
    1f08:	f7ff ffc0 	bl	1e8c <shell_backend_cmd_execute>
}
    1f0c:	2000      	movs	r0, #0
    1f0e:	bd08      	pop	{r3, pc}
    1f10:	00001db5 	.word	0x00001db5

00001f14 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    1f14:	4b01      	ldr	r3, [pc, #4]	; (1f1c <cmd_log_backend_halt+0x8>)
    1f16:	f7ff bfb9 	b.w	1e8c <shell_backend_cmd_execute>
    1f1a:	bf00      	nop
    1f1c:	0000c97f 	.word	0x0000c97f

00001f20 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    1f20:	4b01      	ldr	r3, [pc, #4]	; (1f28 <cmd_log_backend_go+0x8>)
    1f22:	f7ff bfb3 	b.w	1e8c <shell_backend_cmd_execute>
    1f26:	bf00      	nop
    1f28:	0000c987 	.word	0x0000c987

00001f2c <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    1f2c:	4b01      	ldr	r3, [pc, #4]	; (1f34 <cmd_log_backend_enable+0x8>)
    1f2e:	f7ff bfad 	b.w	1e8c <shell_backend_cmd_execute>
    1f32:	bf00      	nop
    1f34:	00002035 	.word	0x00002035

00001f38 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    1f38:	4b01      	ldr	r3, [pc, #4]	; (1f40 <cmd_log_backend_disable+0x8>)
    1f3a:	f7ff bfa7 	b.w	1e8c <shell_backend_cmd_execute>
    1f3e:	bf00      	nop
    1f40:	0000c9d3 	.word	0x0000c9d3

00001f44 <shell_state_precheck>:
{
    1f44:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    1f46:	69c3      	ldr	r3, [r0, #28]
    1f48:	68db      	ldr	r3, [r3, #12]
    1f4a:	791c      	ldrb	r4, [r3, #4]
    1f4c:	b92c      	cbnz	r4, 1f5a <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    1f4e:	4a04      	ldr	r2, [pc, #16]	; (1f60 <shell_state_precheck+0x1c>)
    1f50:	2101      	movs	r1, #1
    1f52:	f00a fed5 	bl	cd00 <shell_fprintf>
    1f56:	4620      	mov	r0, r4
}
    1f58:	bd10      	pop	{r4, pc}
	return true;
    1f5a:	2001      	movs	r0, #1
    1f5c:	e7fc      	b.n	1f58 <shell_state_precheck+0x14>
    1f5e:	bf00      	nop
    1f60:	00010365 	.word	0x00010365

00001f64 <filters_set>:
{
    1f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f68:	4e2c      	ldr	r6, [pc, #176]	; (201c <filters_set+0xb8>)
    1f6a:	461f      	mov	r7, r3
    1f6c:	4b2c      	ldr	r3, [pc, #176]	; (2020 <filters_set+0xbc>)
    1f6e:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
    1f70:	1e15      	subs	r5, r2, #0
{
    1f72:	b085      	sub	sp, #20
    1f74:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
    1f78:	bf14      	ite	ne
    1f7a:	462b      	movne	r3, r5
    1f7c:	4633      	moveq	r3, r6
    1f7e:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
    1f80:	684b      	ldr	r3, [r1, #4]
    1f82:	795b      	ldrb	r3, [r3, #5]
{
    1f84:	4680      	mov	r8, r0
    1f86:	4689      	mov	r9, r1
	if (!backend->cb->active) {
    1f88:	b91b      	cbnz	r3, 1f92 <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
    1f8a:	4a26      	ldr	r2, [pc, #152]	; (2024 <filters_set+0xc0>)
    1f8c:	2103      	movs	r1, #3
    1f8e:	f00a feb7 	bl	cd00 <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
    1f92:	f8df a094 	ldr.w	sl, [pc, #148]	; 2028 <filters_set+0xc4>
	for (i = 0U; i < modules_cnt; i++) {
    1f96:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    1f98:	9b02      	ldr	r3, [sp, #8]
    1f9a:	429c      	cmp	r4, r3
    1f9c:	db02      	blt.n	1fa4 <filters_set+0x40>
}
    1f9e:	b005      	add	sp, #20
    1fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
    1fa4:	b3bd      	cbz	r5, 2016 <filters_set+0xb2>
    1fa6:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
    1faa:	2300      	movs	r3, #0
    1fac:	429e      	cmp	r6, r3
    1fae:	d107      	bne.n	1fc0 <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    1fb0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    1fb4:	4a1d      	ldr	r2, [pc, #116]	; (202c <filters_set+0xc8>)
    1fb6:	2101      	movs	r1, #1
    1fb8:	4640      	mov	r0, r8
    1fba:	f00a fea1 	bl	cd00 <shell_fprintf>
    1fbe:	e023      	b.n	2008 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    1fc0:	4619      	mov	r1, r3
    1fc2:	2000      	movs	r0, #0
    1fc4:	9303      	str	r3, [sp, #12]
    1fc6:	f7ff fb8f 	bl	16e8 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    1fca:	2240      	movs	r2, #64	; 0x40
    1fcc:	4659      	mov	r1, fp
    1fce:	f00c f847 	bl	e060 <strncmp>
    1fd2:	9b03      	ldr	r3, [sp, #12]
    1fd4:	b9d0      	cbnz	r0, 200c <filters_set+0xa8>
			return i;
    1fd6:	461a      	mov	r2, r3
    1fd8:	2100      	movs	r1, #0
    1fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1fdc:	b212      	sxth	r2, r2
    1fde:	4648      	mov	r0, r9
    1fe0:	f7ff fb90 	bl	1704 <z_impl_log_filter_set>
			if (set_lvl != level) {
    1fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1fe6:	4283      	cmp	r3, r0
    1fe8:	4683      	mov	fp, r0
    1fea:	d00d      	beq.n	2008 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
    1fec:	b985      	cbnz	r5, 2010 <filters_set+0xac>
					log_source_name_get(
    1fee:	4621      	mov	r1, r4
    1ff0:	4628      	mov	r0, r5
    1ff2:	f7ff fb79 	bl	16e8 <log_source_name_get>
    1ff6:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    1ff8:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    1ffc:	9200      	str	r2, [sp, #0]
    1ffe:	2103      	movs	r1, #3
    2000:	4a0b      	ldr	r2, [pc, #44]	; (2030 <filters_set+0xcc>)
    2002:	4640      	mov	r0, r8
    2004:	f00a fe7c 	bl	cd00 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    2008:	3401      	adds	r4, #1
    200a:	e7c5      	b.n	1f98 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
    200c:	3301      	adds	r3, #1
    200e:	e7cd      	b.n	1fac <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
    2010:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2014:	e7f0      	b.n	1ff8 <filters_set+0x94>
    2016:	4622      	mov	r2, r4
    2018:	e7de      	b.n	1fd8 <filters_set+0x74>
    201a:	bf00      	nop
    201c:	0000f730 	.word	0x0000f730
    2020:	0000f6b8 	.word	0x0000f6b8
    2024:	00010389 	.word	0x00010389
    2028:	0000f8b0 	.word	0x0000f8b0
    202c:	000103b4 	.word	0x000103b4
    2030:	0001039e 	.word	0x0001039e

00002034 <log_enable>:
{
    2034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
    2038:	f8d3 b004 	ldr.w	fp, [r3, #4]
    203c:	f8df a04c 	ldr.w	sl, [pc, #76]	; 208c <log_enable+0x58>
{
    2040:	4606      	mov	r6, r0
    2042:	4688      	mov	r8, r1
    2044:	4691      	mov	r9, r2
    2046:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    2048:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    204a:	f85a 1b04 	ldr.w	r1, [sl], #4
    204e:	2204      	movs	r2, #4
    2050:	4658      	mov	r0, fp
    2052:	f00c f805 	bl	e060 <strncmp>
    2056:	4604      	mov	r4, r0
    2058:	b170      	cbz	r0, 2078 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    205a:	3701      	adds	r7, #1
    205c:	2f05      	cmp	r7, #5
    205e:	d1f4      	bne.n	204a <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    2060:	686b      	ldr	r3, [r5, #4]
    2062:	4a0b      	ldr	r2, [pc, #44]	; (2090 <log_enable+0x5c>)
    2064:	2101      	movs	r1, #1
    2066:	4630      	mov	r0, r6
    2068:	f00a fe4a 	bl	cd00 <shell_fprintf>
    206c:	f06f 0407 	mvn.w	r4, #7
}
    2070:	4620      	mov	r0, r4
    2072:	b003      	add	sp, #12
    2074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    2078:	9700      	str	r7, [sp, #0]
    207a:	f105 0308 	add.w	r3, r5, #8
    207e:	f1a9 0202 	sub.w	r2, r9, #2
    2082:	4641      	mov	r1, r8
    2084:	4630      	mov	r0, r6
    2086:	f7ff ff6d 	bl	1f64 <filters_set>
	return 0;
    208a:	e7f1      	b.n	2070 <log_enable+0x3c>
    208c:	0000f8b0 	.word	0x0000f8b0
    2090:	000103ce 	.word	0x000103ce

00002094 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    2094:	b513      	push	{r0, r1, r4, lr}
    2096:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    2098:	f00c fd65 	bl	eb66 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    209c:	f3c0 2307 	ubfx	r3, r0, #8, #8
    20a0:	9301      	str	r3, [sp, #4]
    20a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
    20a6:	9300      	str	r3, [sp, #0]
    20a8:	4a04      	ldr	r2, [pc, #16]	; (20bc <cmd_kernel_version+0x28>)
    20aa:	0e03      	lsrs	r3, r0, #24
    20ac:	2108      	movs	r1, #8
    20ae:	4620      	mov	r0, r4
    20b0:	f00a fe26 	bl	cd00 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    20b4:	2000      	movs	r0, #0
    20b6:	b002      	add	sp, #8
    20b8:	bd10      	pop	{r4, pc}
    20ba:	bf00      	nop
    20bc:	00010589 	.word	0x00010589

000020c0 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    20c0:	b510      	push	{r4, lr}
    20c2:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    20c4:	f00c ff82 	bl	efcc <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    20c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    20cc:	fba0 2003 	umull	r2, r0, r0, r3
    20d0:	fb03 0301 	mla	r3, r3, r1, r0
    20d4:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    20d6:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    20da:	4620      	mov	r0, r4
    20dc:	4a02      	ldr	r2, [pc, #8]	; (20e8 <cmd_kernel_uptime+0x28>)
    20de:	2108      	movs	r1, #8
    20e0:	f00a fe0e 	bl	cd00 <shell_fprintf>
	return 0;
}
    20e4:	2000      	movs	r0, #0
    20e6:	bd10      	pop	{r4, pc}
    20e8:	000105a2 	.word	0x000105a2

000020ec <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    20ec:	b510      	push	{r4, lr}
    20ee:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    20f0:	f006 fa3c 	bl	856c <sys_clock_elapsed>
    20f4:	4a08      	ldr	r2, [pc, #32]	; (2118 <cmd_kernel_threads+0x2c>)
    20f6:	4603      	mov	r3, r0
    20f8:	2108      	movs	r1, #8
    20fa:	4620      	mov	r0, r4
    20fc:	f00a fe00 	bl	cd00 <shell_fprintf>
	shell_print(shell, "Threads:");
    2100:	4a06      	ldr	r2, [pc, #24]	; (211c <cmd_kernel_threads+0x30>)
    2102:	4620      	mov	r0, r4
    2104:	2108      	movs	r1, #8
    2106:	f00a fdfb 	bl	cd00 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    210a:	4805      	ldr	r0, [pc, #20]	; (2120 <cmd_kernel_threads+0x34>)
    210c:	4621      	mov	r1, r4
    210e:	f008 f9cd 	bl	a4ac <k_thread_foreach>
	return 0;
}
    2112:	2000      	movs	r0, #0
    2114:	bd10      	pop	{r4, pc}
    2116:	bf00      	nop
    2118:	000105b1 	.word	0x000105b1
    211c:	000105d0 	.word	0x000105d0
    2120:	00002181 	.word	0x00002181

00002124 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    2124:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    2126:	4601      	mov	r1, r0
{
    2128:	b087      	sub	sp, #28
    212a:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
    212c:	4811      	ldr	r0, [pc, #68]	; (2174 <cmd_kernel_stacks+0x50>)
    212e:	f008 f9bd 	bl	a4ac <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
    2132:	4a11      	ldr	r2, [pc, #68]	; (2178 <cmd_kernel_stacks+0x54>)
		unused = 0;
    2134:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
    2136:	f812 1b01 	ldrb.w	r1, [r2], #1
    213a:	29aa      	cmp	r1, #170	; 0xaa
    213c:	d103      	bne.n	2146 <cmd_kernel_stacks+0x22>
				unused++;
    213e:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    2140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2144:	d1f7      	bne.n	2136 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    2146:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    214a:	2264      	movs	r2, #100	; 0x64
    214c:	434a      	muls	r2, r1
    214e:	0ad2      	lsrs	r2, r2, #11
    2150:	9205      	str	r2, [sp, #20]
    2152:	2500      	movs	r5, #0
    2154:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2158:	e9cd 1203 	strd	r1, r2, [sp, #12]
    215c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    2160:	4620      	mov	r0, r4
    2162:	4b05      	ldr	r3, [pc, #20]	; (2178 <cmd_kernel_stacks+0x54>)
    2164:	4a05      	ldr	r2, [pc, #20]	; (217c <cmd_kernel_stacks+0x58>)
    2166:	9500      	str	r5, [sp, #0]
    2168:	2108      	movs	r1, #8
    216a:	f00a fdc9 	bl	cd00 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    216e:	4628      	mov	r0, r5
    2170:	b007      	add	sp, #28
    2172:	bd30      	pop	{r4, r5, pc}
    2174:	00002261 	.word	0x00002261
    2178:	20003a88 	.word	0x20003a88
    217c:	000105da 	.word	0x000105da

00002180 <shell_tdata_dump>:
{
    2180:	b5f0      	push	{r4, r5, r6, r7, lr}
    2182:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
    2184:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    2188:	4604      	mov	r4, r0
    218a:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    218c:	f00c fcd9 	bl	eb42 <k_thread_name_get>
    2190:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    2192:	f009 f85d 	bl	b250 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    2196:	4b23      	ldr	r3, [pc, #140]	; (2224 <shell_tdata_dump+0xa4>)
    2198:	4a23      	ldr	r2, [pc, #140]	; (2228 <shell_tdata_dump+0xa8>)
    219a:	2e00      	cmp	r6, #0
    219c:	bf08      	it	eq
    219e:	461e      	moveq	r6, r3
    21a0:	4b22      	ldr	r3, [pc, #136]	; (222c <shell_tdata_dump+0xac>)
    21a2:	e9cd 4600 	strd	r4, r6, [sp]
    21a6:	4284      	cmp	r4, r0
    21a8:	bf18      	it	ne
    21aa:	4613      	movne	r3, r2
    21ac:	2108      	movs	r1, #8
    21ae:	4628      	mov	r0, r5
    21b0:	4a1f      	ldr	r2, [pc, #124]	; (2230 <shell_tdata_dump+0xb0>)
    21b2:	f00a fda5 	bl	cd00 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    21b6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    21ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    21be:	f994 300e 	ldrsb.w	r3, [r4, #14]
    21c2:	4a1c      	ldr	r2, [pc, #112]	; (2234 <shell_tdata_dump+0xb4>)
    21c4:	9300      	str	r3, [sp, #0]
    21c6:	2108      	movs	r1, #8
    21c8:	7b23      	ldrb	r3, [r4, #12]
    21ca:	4628      	mov	r0, r5
    21cc:	f00a fd98 	bl	cd00 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
    21d0:	4620      	mov	r0, r4
    21d2:	f008 f9b3 	bl	a53c <k_thread_state_str>
    21d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    21d8:	9200      	str	r2, [sp, #0]
    21da:	4603      	mov	r3, r0
    21dc:	4a16      	ldr	r2, [pc, #88]	; (2238 <shell_tdata_dump+0xb8>)
    21de:	2108      	movs	r1, #8
    21e0:	4628      	mov	r0, r5
    21e2:	f00a fd8d 	bl	cd00 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    21e6:	a905      	add	r1, sp, #20
    21e8:	4620      	mov	r0, r4
    21ea:	f00c fcae 	bl	eb4a <z_impl_k_thread_stack_space_get>
	if (ret) {
    21ee:	4603      	mov	r3, r0
    21f0:	b130      	cbz	r0, 2200 <shell_tdata_dump+0x80>
		shell_print(shell,
    21f2:	4a12      	ldr	r2, [pc, #72]	; (223c <shell_tdata_dump+0xbc>)
    21f4:	2108      	movs	r1, #8
    21f6:	4628      	mov	r0, r5
    21f8:	f00a fd82 	bl	cd00 <shell_fprintf>
}
    21fc:	b007      	add	sp, #28
    21fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    2200:	9a05      	ldr	r2, [sp, #20]
    2202:	2364      	movs	r3, #100	; 0x64
    2204:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    2206:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    220a:	434b      	muls	r3, r1
		shell_print(shell,
    220c:	4a0c      	ldr	r2, [pc, #48]	; (2240 <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
    220e:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    2212:	2108      	movs	r1, #8
    2214:	e9cd 7302 	strd	r7, r3, [sp, #8]
    2218:	4628      	mov	r0, r5
    221a:	463b      	mov	r3, r7
    221c:	f00a fd70 	bl	cd00 <shell_fprintf>
}
    2220:	e7ec      	b.n	21fc <shell_tdata_dump+0x7c>
    2222:	bf00      	nop
    2224:	00010620 	.word	0x00010620
    2228:	000101b6 	.word	0x000101b6
    222c:	00011995 	.word	0x00011995
    2230:	00010623 	.word	0x00010623
    2234:	0001062f 	.word	0x0001062f
    2238:	0001065b 	.word	0x0001065b
    223c:	00010672 	.word	0x00010672
    2240:	0001069f 	.word	0x0001069f

00002244 <cmd_kernel_cycles>:
{
    2244:	b510      	push	{r4, lr}
    2246:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    2248:	f00c faaa 	bl	e7a0 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    224c:	4a03      	ldr	r2, [pc, #12]	; (225c <cmd_kernel_cycles+0x18>)
    224e:	4603      	mov	r3, r0
    2250:	2108      	movs	r1, #8
    2252:	4620      	mov	r0, r4
    2254:	f00a fd54 	bl	cd00 <shell_fprintf>
}
    2258:	2000      	movs	r0, #0
    225a:	bd10      	pop	{r4, pc}
    225c:	000106d6 	.word	0x000106d6

00002260 <shell_stack_dump>:
{
    2260:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
    2262:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    2266:	b089      	sub	sp, #36	; 0x24
    2268:	4604      	mov	r4, r0
    226a:	460d      	mov	r5, r1
    226c:	a907      	add	r1, sp, #28
    226e:	f00c fc6c 	bl	eb4a <z_impl_k_thread_stack_space_get>
	if (ret) {
    2272:	4603      	mov	r3, r0
    2274:	b130      	cbz	r0, 2284 <shell_stack_dump+0x24>
		shell_print(shell,
    2276:	4a10      	ldr	r2, [pc, #64]	; (22b8 <shell_stack_dump+0x58>)
    2278:	2108      	movs	r1, #8
    227a:	4628      	mov	r0, r5
    227c:	f00a fd40 	bl	cd00 <shell_fprintf>
}
    2280:	b009      	add	sp, #36	; 0x24
    2282:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    2284:	4620      	mov	r0, r4
    2286:	f00c fc5c 	bl	eb42 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    228a:	9907      	ldr	r1, [sp, #28]
	shell_print((const struct shell *)user_data,
    228c:	4a0b      	ldr	r2, [pc, #44]	; (22bc <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    228e:	1a77      	subs	r7, r6, r1
	shell_print((const struct shell *)user_data,
    2290:	2800      	cmp	r0, #0
    2292:	bf18      	it	ne
    2294:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
    2296:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
    2298:	e9cd 1702 	strd	r1, r7, [sp, #8]
    229c:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    22a0:	437b      	muls	r3, r7
	shell_print((const struct shell *)user_data,
    22a2:	4a07      	ldr	r2, [pc, #28]	; (22c0 <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
    22a4:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
    22a8:	2108      	movs	r1, #8
    22aa:	e9cd 6304 	strd	r6, r3, [sp, #16]
    22ae:	4628      	mov	r0, r5
    22b0:	4623      	mov	r3, r4
    22b2:	f00a fd25 	bl	cd00 <shell_fprintf>
    22b6:	e7e3      	b.n	2280 <shell_stack_dump+0x20>
    22b8:	00010672 	.word	0x00010672
    22bc:	00010620 	.word	0x00010620
    22c0:	000106ec 	.word	0x000106ec

000022c4 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    22c4:	4603      	mov	r3, r0
	const char *name = dev->name;
    22c6:	6800      	ldr	r0, [r0, #0]
{
    22c8:	b510      	push	{r4, lr}
    22ca:	460c      	mov	r4, r1
    22cc:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    22ce:	b108      	cbz	r0, 22d4 <get_device_name+0x10>
    22d0:	7802      	ldrb	r2, [r0, #0]
    22d2:	b922      	cbnz	r2, 22de <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    22d4:	4a02      	ldr	r2, [pc, #8]	; (22e0 <get_device_name+0x1c>)
    22d6:	4620      	mov	r0, r4
    22d8:	f004 f89e 	bl	6418 <snprintf>
		name = buf;
    22dc:	4620      	mov	r0, r4
	}

	return name;
}
    22de:	bd10      	pop	{r4, pc}
    22e0:	000107c3 	.word	0x000107c3

000022e4 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    22e4:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    22e6:	680c      	ldr	r4, [r1, #0]
    22e8:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    22ec:	f7ff ffea 	bl	22c4 <get_device_name>
    22f0:	4a03      	ldr	r2, [pc, #12]	; (2300 <cmd_device_list_visitor+0x1c>)
    22f2:	4603      	mov	r3, r0
    22f4:	2108      	movs	r1, #8
    22f6:	4620      	mov	r0, r4
    22f8:	f00a fd02 	bl	cd00 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    22fc:	2000      	movs	r0, #0
    22fe:	bd10      	pop	{r4, pc}
    2300:	000107c8 	.word	0x000107c8

00002304 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
    2304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2308:	b08a      	sub	sp, #40	; 0x28
    230a:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    230c:	a801      	add	r0, sp, #4
    230e:	f007 fee3 	bl	a0d8 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    2312:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    2314:	4a1b      	ldr	r2, [pc, #108]	; (2384 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    2316:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2388 <cmd_device_list+0x84>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    231a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 238c <cmd_device_list+0x88>
    231e:	f8df a070 	ldr.w	sl, [pc, #112]	; 2390 <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    2322:	2318      	movs	r3, #24
    2324:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    2328:	2108      	movs	r1, #8
    232a:	4628      	mov	r0, r5
    232c:	f00a fce8 	bl	cd00 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    2330:	9c01      	ldr	r4, [sp, #4]
    2332:	42b4      	cmp	r4, r6
    2334:	d303      	bcc.n	233e <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    2336:	2000      	movs	r0, #0
    2338:	b00a      	add	sp, #40	; 0x28
    233a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    233e:	af05      	add	r7, sp, #20
    2340:	4639      	mov	r1, r7
    2342:	2214      	movs	r2, #20
    2344:	4620      	mov	r0, r4
    2346:	f7ff ffbd 	bl	22c4 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    234a:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    234c:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    234e:	2108      	movs	r1, #8
    2350:	4628      	mov	r0, r5
    2352:	f00a fcd5 	bl	cd00 <shell_fprintf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2356:	4620      	mov	r0, r4
    2358:	f00c fb89 	bl	ea6e <z_device_is_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
    235c:	4a0d      	ldr	r2, [pc, #52]	; (2394 <cmd_device_list+0x90>)
    235e:	2800      	cmp	r0, #0
    2360:	bf14      	ite	ne
    2362:	464b      	movne	r3, r9
    2364:	4653      	moveq	r3, sl
    2366:	2108      	movs	r1, #8
    2368:	4628      	mov	r0, r5
    236a:	f00a fcc9 	bl	cd00 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    236e:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    2370:	4620      	mov	r0, r4
    2372:	4909      	ldr	r1, [pc, #36]	; (2398 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    2374:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    2376:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    2378:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    237c:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    237e:	f00c fb80 	bl	ea82 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    2382:	e7d6      	b.n	2332 <cmd_device_list+0x2e>
    2384:	000107e7 	.word	0x000107e7
    2388:	000107f1 	.word	0x000107f1
    238c:	000107d8 	.word	0x000107d8
    2390:	000107de 	.word	0x000107de
    2394:	000107f6 	.word	0x000107f6
    2398:	000022e5 	.word	0x000022e5

0000239c <device_get_config_level>:
{
    239c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    23a0:	4b11      	ldr	r3, [pc, #68]	; (23e8 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    23a2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 23ec <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    23a6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    23aa:	3101      	adds	r1, #1
{
    23ac:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    23ae:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    23b2:	4606      	mov	r6, r0
	bool devices = false;
    23b4:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    23b6:	45a0      	cmp	r8, r4
    23b8:	d803      	bhi.n	23c2 <device_get_config_level+0x26>
}
    23ba:	4638      	mov	r0, r7
    23bc:	b007      	add	sp, #28
    23be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    23c2:	4620      	mov	r0, r4
    23c4:	f00c fb53 	bl	ea6e <z_device_is_ready>
		if (device_is_ready(dev)) {
    23c8:	4605      	mov	r5, r0
    23ca:	b158      	cbz	r0, 23e4 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    23cc:	2214      	movs	r2, #20
    23ce:	a901      	add	r1, sp, #4
    23d0:	4620      	mov	r0, r4
    23d2:	f7ff ff77 	bl	22c4 <get_device_name>
    23d6:	464a      	mov	r2, r9
    23d8:	4603      	mov	r3, r0
    23da:	2108      	movs	r1, #8
    23dc:	4630      	mov	r0, r6
    23de:	f00a fc8f 	bl	cd00 <shell_fprintf>
			devices = true;
    23e2:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    23e4:	3418      	adds	r4, #24
    23e6:	e7e6      	b.n	23b6 <device_get_config_level+0x1a>
    23e8:	0000fad0 	.word	0x0000fad0
    23ec:	000107fd 	.word	0x000107fd

000023f0 <cmd_device_levels>:
{
    23f0:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    23f2:	2108      	movs	r1, #8
{
    23f4:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    23f6:	4a1e      	ldr	r2, [pc, #120]	; (2470 <cmd_device_levels+0x80>)
    23f8:	f00a fc82 	bl	cd00 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    23fc:	2100      	movs	r1, #0
    23fe:	4620      	mov	r0, r4
    2400:	f7ff ffcc 	bl	239c <device_get_config_level>
	if (ret == false) {
    2404:	b920      	cbnz	r0, 2410 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    2406:	4a1b      	ldr	r2, [pc, #108]	; (2474 <cmd_device_levels+0x84>)
    2408:	2108      	movs	r1, #8
    240a:	4620      	mov	r0, r4
    240c:	f00a fc78 	bl	cd00 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    2410:	2108      	movs	r1, #8
    2412:	4620      	mov	r0, r4
    2414:	4a18      	ldr	r2, [pc, #96]	; (2478 <cmd_device_levels+0x88>)
    2416:	f00a fc73 	bl	cd00 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    241a:	2101      	movs	r1, #1
    241c:	4620      	mov	r0, r4
    241e:	f7ff ffbd 	bl	239c <device_get_config_level>
	if (ret == false) {
    2422:	b920      	cbnz	r0, 242e <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    2424:	4a13      	ldr	r2, [pc, #76]	; (2474 <cmd_device_levels+0x84>)
    2426:	2108      	movs	r1, #8
    2428:	4620      	mov	r0, r4
    242a:	f00a fc69 	bl	cd00 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    242e:	2108      	movs	r1, #8
    2430:	4620      	mov	r0, r4
    2432:	4a12      	ldr	r2, [pc, #72]	; (247c <cmd_device_levels+0x8c>)
    2434:	f00a fc64 	bl	cd00 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    2438:	2102      	movs	r1, #2
    243a:	4620      	mov	r0, r4
    243c:	f7ff ffae 	bl	239c <device_get_config_level>
	if (ret == false) {
    2440:	b920      	cbnz	r0, 244c <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    2442:	4a0c      	ldr	r2, [pc, #48]	; (2474 <cmd_device_levels+0x84>)
    2444:	2108      	movs	r1, #8
    2446:	4620      	mov	r0, r4
    2448:	f00a fc5a 	bl	cd00 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    244c:	2108      	movs	r1, #8
    244e:	4620      	mov	r0, r4
    2450:	4a0b      	ldr	r2, [pc, #44]	; (2480 <cmd_device_levels+0x90>)
    2452:	f00a fc55 	bl	cd00 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    2456:	2103      	movs	r1, #3
    2458:	4620      	mov	r0, r4
    245a:	f7ff ff9f 	bl	239c <device_get_config_level>
	if (ret == false) {
    245e:	b920      	cbnz	r0, 246a <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    2460:	4a04      	ldr	r2, [pc, #16]	; (2474 <cmd_device_levels+0x84>)
    2462:	2108      	movs	r1, #8
    2464:	4620      	mov	r0, r4
    2466:	f00a fc4b 	bl	cd00 <shell_fprintf>
}
    246a:	2000      	movs	r0, #0
    246c:	bd10      	pop	{r4, pc}
    246e:	bf00      	nop
    2470:	00010803 	.word	0x00010803
    2474:	00010812 	.word	0x00010812
    2478:	0001081a 	.word	0x0001081a
    247c:	00010829 	.word	0x00010829
    2480:	00010837 	.word	0x00010837

00002484 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    2484:	1e8b      	subs	r3, r1, #2
    2486:	2b02      	cmp	r3, #2
{
    2488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    248c:	4607      	mov	r7, r0
    248e:	4688      	mov	r8, r1
    2490:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    2492:	d833      	bhi.n	24fc <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    2494:	6860      	ldr	r0, [r4, #4]
    2496:	2210      	movs	r2, #16
    2498:	2100      	movs	r1, #0
    249a:	f00b fd02 	bl	dea2 <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    249e:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    24a2:	4606      	mov	r6, r0
	if (argc < 3) {
    24a4:	d01e      	beq.n	24e4 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
    24a6:	68a0      	ldr	r0, [r4, #8]
    24a8:	220a      	movs	r2, #10
    24aa:	2100      	movs	r1, #0
    24ac:	f00b fcf9 	bl	dea2 <strtoul>
    24b0:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    24b2:	4a21      	ldr	r2, [pc, #132]	; (2538 <cmd_devmem+0xb4>)
    24b4:	462b      	mov	r3, r5
    24b6:	2108      	movs	r1, #8
    24b8:	4638      	mov	r0, r7
    24ba:	f00a fc21 	bl	cd00 <shell_fprintf>

	if (argc <= 3) {
    24be:	f1b8 0f04 	cmp.w	r8, #4
    24c2:	d01e      	beq.n	2502 <cmd_devmem+0x7e>
	switch (width) {
    24c4:	2d10      	cmp	r5, #16
    24c6:	d00f      	beq.n	24e8 <cmd_devmem+0x64>
    24c8:	2d20      	cmp	r5, #32
    24ca:	d010      	beq.n	24ee <cmd_devmem+0x6a>
    24cc:	2d08      	cmp	r5, #8
    24ce:	d110      	bne.n	24f2 <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    24d0:	7833      	ldrb	r3, [r6, #0]
    24d2:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    24d4:	4a19      	ldr	r2, [pc, #100]	; (253c <cmd_devmem+0xb8>)
    24d6:	2108      	movs	r1, #8
    24d8:	4638      	mov	r0, r7
    24da:	f00a fc11 	bl	cd00 <shell_fprintf>
	int err = 0;
    24de:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    24e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
    24e4:	2520      	movs	r5, #32
    24e6:	e7e4      	b.n	24b2 <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    24e8:	8833      	ldrh	r3, [r6, #0]
    24ea:	b29b      	uxth	r3, r3
	if (err == 0) {
    24ec:	e7f2      	b.n	24d4 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    24ee:	6833      	ldr	r3, [r6, #0]
    24f0:	e7f0      	b.n	24d4 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    24f2:	4a13      	ldr	r2, [pc, #76]	; (2540 <cmd_devmem+0xbc>)
    24f4:	2108      	movs	r1, #8
    24f6:	4638      	mov	r0, r7
    24f8:	f00a fc02 	bl	cd00 <shell_fprintf>
		return -EINVAL;
    24fc:	f06f 0015 	mvn.w	r0, #21
    2500:	e7ee      	b.n	24e0 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
    2502:	68e0      	ldr	r0, [r4, #12]
    2504:	2210      	movs	r2, #16
    2506:	2100      	movs	r1, #0
    2508:	f00b fccb 	bl	dea2 <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    250c:	4a0d      	ldr	r2, [pc, #52]	; (2544 <cmd_devmem+0xc0>)
    250e:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    2510:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    2512:	2108      	movs	r1, #8
    2514:	4638      	mov	r0, r7
    2516:	f00a fbf3 	bl	cd00 <shell_fprintf>
	switch (width) {
    251a:	2d10      	cmp	r5, #16
    251c:	d006      	beq.n	252c <cmd_devmem+0xa8>
    251e:	2d20      	cmp	r5, #32
    2520:	d007      	beq.n	2532 <cmd_devmem+0xae>
    2522:	2d08      	cmp	r5, #8
    2524:	d1e5      	bne.n	24f2 <cmd_devmem+0x6e>
		sys_write8(value, addr);
    2526:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    2528:	7034      	strb	r4, [r6, #0]
    252a:	e7d8      	b.n	24de <cmd_devmem+0x5a>
		sys_write16(value, addr);
    252c:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    252e:	8034      	strh	r4, [r6, #0]
    2530:	e7d5      	b.n	24de <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    2532:	6034      	str	r4, [r6, #0]
    2534:	e7d3      	b.n	24de <cmd_devmem+0x5a>
    2536:	bf00      	nop
    2538:	00010894 	.word	0x00010894
    253c:	000108bf 	.word	0x000108bf
    2540:	000108a9 	.word	0x000108a9
    2544:	000108d0 	.word	0x000108d0

00002548 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    2548:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    254a:	4e0e      	ldr	r6, [pc, #56]	; (2584 <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    254c:	4604      	mov	r4, r0
	if (bypass && in_use) {
    254e:	7833      	ldrb	r3, [r6, #0]
    2550:	460d      	mov	r5, r1
    2552:	b131      	cbz	r1, 2562 <set_bypass.isra.0+0x1a>
    2554:	b12b      	cbz	r3, 2562 <set_bypass.isra.0+0x1a>
}
    2556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    255a:	4a0b      	ldr	r2, [pc, #44]	; (2588 <set_bypass.isra.0+0x40>)
    255c:	2101      	movs	r1, #1
    255e:	f00a bbcf 	b.w	cd00 <shell_fprintf>
	in_use = !in_use;
    2562:	f083 0301 	eor.w	r3, r3, #1
    2566:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    2568:	b133      	cbz	r3, 2578 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    256a:	4a08      	ldr	r2, [pc, #32]	; (258c <set_bypass.isra.0+0x44>)
    256c:	2108      	movs	r1, #8
    256e:	4620      	mov	r0, r4
    2570:	f00a fbc6 	bl	cd00 <shell_fprintf>
		in_use = true;
    2574:	2301      	movs	r3, #1
    2576:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
    2578:	4629      	mov	r1, r5
    257a:	4620      	mov	r0, r4
}
    257c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    2580:	f00a bbcb 	b.w	cd1a <shell_set_bypass>
    2584:	200021cc 	.word	0x200021cc
    2588:	000108e4 	.word	0x000108e4
    258c:	0001091f 	.word	0x0001091f

00002590 <bypass_cb>:
{
    2590:	b570      	push	{r4, r5, r6, lr}
    2592:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    2594:	483c      	ldr	r0, [pc, #240]	; (2688 <bypass_cb+0xf8>)
    2596:	7803      	ldrb	r3, [r0, #0]
    2598:	2b18      	cmp	r3, #24
    259a:	d102      	bne.n	25a2 <bypass_cb+0x12>
    259c:	780b      	ldrb	r3, [r1, #0]
    259e:	2b11      	cmp	r3, #17
    25a0:	d031      	beq.n	2606 <bypass_cb+0x76>
    25a2:	3a01      	subs	r2, #1
    25a4:	460b      	mov	r3, r1
    25a6:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
    25a8:	429d      	cmp	r5, r3
    25aa:	d125      	bne.n	25f8 <bypass_cb+0x68>
	tail = recv[len - 1];
    25ac:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    25ae:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    25b0:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    25b2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    25b6:	2b09      	cmp	r3, #9
    25b8:	4c34      	ldr	r4, [pc, #208]	; (268c <bypass_cb+0xfc>)
    25ba:	d904      	bls.n	25c6 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
    25bc:	f022 0320 	bic.w	r3, r2, #32
    25c0:	3b41      	subs	r3, #65	; 0x41
    25c2:	2b05      	cmp	r3, #5
    25c4:	d804      	bhi.n	25d0 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    25c6:	6823      	ldr	r3, [r4, #0]
    25c8:	4931      	ldr	r1, [pc, #196]	; (2690 <bypass_cb+0x100>)
    25ca:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    25cc:	3301      	adds	r3, #1
    25ce:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    25d0:	6823      	ldr	r3, [r4, #0]
    25d2:	2b02      	cmp	r3, #2
    25d4:	d134      	bne.n	2640 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    25d6:	2210      	movs	r2, #16
    25d8:	482d      	ldr	r0, [pc, #180]	; (2690 <bypass_cb+0x100>)
    25da:	2100      	movs	r1, #0
    25dc:	f00b fc61 	bl	dea2 <strtoul>
		*bytes = byte;
    25e0:	4a2c      	ldr	r2, [pc, #176]	; (2694 <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    25e2:	6813      	ldr	r3, [r2, #0]
    25e4:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    25e8:	6013      	str	r3, [r2, #0]
		sum++;
    25ea:	4a2b      	ldr	r2, [pc, #172]	; (2698 <bypass_cb+0x108>)
    25ec:	6813      	ldr	r3, [r2, #0]
    25ee:	3301      	adds	r3, #1
    25f0:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    25f2:	2300      	movs	r3, #0
    25f4:	6023      	str	r3, [r4, #0]
    25f6:	e023      	b.n	2640 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    25f8:	f813 6b01 	ldrb.w	r6, [r3], #1
    25fc:	2e18      	cmp	r6, #24
    25fe:	d1d3      	bne.n	25a8 <bypass_cb+0x18>
    2600:	781e      	ldrb	r6, [r3, #0]
    2602:	2e11      	cmp	r6, #17
    2604:	d1d0      	bne.n	25a8 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    2606:	4d24      	ldr	r5, [pc, #144]	; (2698 <bypass_cb+0x108>)
    2608:	4a24      	ldr	r2, [pc, #144]	; (269c <bypass_cb+0x10c>)
    260a:	682b      	ldr	r3, [r5, #0]
    260c:	2108      	movs	r1, #8
    260e:	4620      	mov	r0, r4
    2610:	f00a fb76 	bl	cd00 <shell_fprintf>
		set_bypass(sh, NULL);
    2614:	4620      	mov	r0, r4
    2616:	2100      	movs	r1, #0
    2618:	f7ff ff96 	bl	2548 <set_bypass.isra.0>
		if (!littleendian) {
    261c:	4b20      	ldr	r3, [pc, #128]	; (26a0 <bypass_cb+0x110>)
    261e:	7818      	ldrb	r0, [r3, #0]
    2620:	b970      	cbnz	r0, 2640 <bypass_cb+0xb0>
    2622:	4a20      	ldr	r2, [pc, #128]	; (26a4 <bypass_cb+0x114>)
    2624:	682b      	ldr	r3, [r5, #0]
    2626:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    2628:	2b04      	cmp	r3, #4
    262a:	dc0a      	bgt.n	2642 <bypass_cb+0xb2>
    262c:	b108      	cbz	r0, 2632 <bypass_cb+0xa2>
    262e:	6011      	str	r1, [r2, #0]
    2630:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    2632:	f013 0103 	ands.w	r1, r3, #3
    2636:	d10b      	bne.n	2650 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    2638:	6812      	ldr	r2, [r2, #0]
    263a:	6813      	ldr	r3, [r2, #0]
    263c:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    263e:	6013      	str	r3, [r2, #0]
}
    2640:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    2642:	6808      	ldr	r0, [r1, #0]
    2644:	ba00      	rev	r0, r0
    2646:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    264a:	3b04      	subs	r3, #4
				data++;
    264c:	2001      	movs	r0, #1
    264e:	e7eb      	b.n	2628 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    2650:	425b      	negs	r3, r3
    2652:	f003 0303 	and.w	r3, r3, #3
    2656:	bf58      	it	pl
    2658:	4259      	negpl	r1, r3
    265a:	2902      	cmp	r1, #2
    265c:	d104      	bne.n	2668 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    265e:	6812      	ldr	r2, [r2, #0]
    2660:	8813      	ldrh	r3, [r2, #0]
    2662:	ba5b      	rev16	r3, r3
    2664:	b29b      	uxth	r3, r3
    2666:	e7ea      	b.n	263e <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    2668:	2903      	cmp	r1, #3
    266a:	d1e9      	bne.n	2640 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    266c:	6810      	ldr	r0, [r2, #0]
    266e:	6802      	ldr	r2, [r0, #0]
    2670:	0411      	lsls	r1, r2, #16
    2672:	f3c2 4307 	ubfx	r3, r2, #16, #8
    2676:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    267a:	430b      	orrs	r3, r1
    267c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    2680:	4313      	orrs	r3, r2
    2682:	6003      	str	r3, [r0, #0]
    2684:	e7dc      	b.n	2640 <bypass_cb+0xb0>
    2686:	bf00      	nop
    2688:	200021ce 	.word	0x200021ce
    268c:	2000105c 	.word	0x2000105c
    2690:	200021ca 	.word	0x200021ca
    2694:	20001058 	.word	0x20001058
    2698:	20001064 	.word	0x20001064
    269c:	00010949 	.word	0x00010949
    26a0:	200021cd 	.word	0x200021cd
    26a4:	20001060 	.word	0x20001060

000026a8 <cmd_load>:
{
    26a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26ac:	460d      	mov	r5, r1
	chunk_element = 0;
    26ae:	492d      	ldr	r1, [pc, #180]	; (2764 <cmd_load+0xbc>)
	littleendian = false;
    26b0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2768 <cmd_load+0xc0>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    26b4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 276c <cmd_load+0xc4>
			shell_print(sh, "Unknown option \"%s\"", arg);
    26b8:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 2770 <cmd_load+0xc8>
	littleendian = false;
    26bc:	2300      	movs	r3, #0
	chunk_element = 0;
    26be:	600b      	str	r3, [r1, #0]
	sum = 0;
    26c0:	492c      	ldr	r1, [pc, #176]	; (2774 <cmd_load+0xcc>)
	littleendian = false;
    26c2:	f888 3000 	strb.w	r3, [r8]
{
    26c6:	4606      	mov	r6, r0
	sum = 0;
    26c8:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    26ca:	4614      	mov	r4, r2
    26cc:	2d01      	cmp	r5, #1
    26ce:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    26d0:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
    26d4:	d921      	bls.n	271a <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    26d6:	4618      	mov	r0, r3
    26d8:	2202      	movs	r2, #2
    26da:	4649      	mov	r1, r9
    26dc:	9301      	str	r3, [sp, #4]
    26de:	f00b fcbf 	bl	e060 <strncmp>
    26e2:	9b01      	ldr	r3, [sp, #4]
    26e4:	b988      	cbnz	r0, 270a <cmd_load+0x62>
    26e6:	6822      	ldr	r2, [r4, #0]
    26e8:	7892      	ldrb	r2, [r2, #2]
    26ea:	3a00      	subs	r2, #0
    26ec:	bf18      	it	ne
    26ee:	2201      	movne	r2, #1
    26f0:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
    26f4:	4920      	ldr	r1, [pc, #128]	; (2778 <cmd_load+0xd0>)
    26f6:	2202      	movs	r2, #2
    26f8:	4650      	mov	r0, sl
    26fa:	f00b fcb1 	bl	e060 <strncmp>
    26fe:	b930      	cbnz	r0, 270e <cmd_load+0x66>
			littleendian = true;
    2700:	2301      	movs	r3, #1
    2702:	f888 3000 	strb.w	r3, [r8]
		argc--;
    2706:	3d01      	subs	r5, #1
    2708:	e7e0      	b.n	26cc <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    270a:	2200      	movs	r2, #0
    270c:	e7f0      	b.n	26f0 <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
    270e:	4649      	mov	r1, r9
    2710:	4650      	mov	r0, sl
    2712:	f00b fc99 	bl	e048 <strcmp>
    2716:	b9b0      	cbnz	r0, 2746 <cmd_load+0x9e>
			argv++;
    2718:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    271a:	2200      	movs	r2, #0
    271c:	4611      	mov	r1, r2
    271e:	6878      	ldr	r0, [r7, #4]
    2720:	f00b fb4b 	bl	ddba <strtol>
    2724:	4b15      	ldr	r3, [pc, #84]	; (277c <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    2726:	2200      	movs	r2, #0
    2728:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    272a:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    272c:	6878      	ldr	r0, [r7, #4]
    272e:	f00b fb44 	bl	ddba <strtol>
    2732:	4b13      	ldr	r3, [pc, #76]	; (2780 <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
    2734:	4913      	ldr	r1, [pc, #76]	; (2784 <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    2736:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    2738:	4630      	mov	r0, r6
    273a:	f7ff ff05 	bl	2548 <set_bypass.isra.0>
}
    273e:	2000      	movs	r0, #0
    2740:	b003      	add	sp, #12
    2742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    2746:	f89a 2000 	ldrb.w	r2, [sl]
    274a:	2a2d      	cmp	r2, #45	; 0x2d
    274c:	d1e5      	bne.n	271a <cmd_load+0x72>
    274e:	f89a 2001 	ldrb.w	r2, [sl, #1]
    2752:	2a00      	cmp	r2, #0
    2754:	d0e1      	beq.n	271a <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
    2756:	4653      	mov	r3, sl
    2758:	465a      	mov	r2, fp
    275a:	2108      	movs	r1, #8
    275c:	4630      	mov	r0, r6
    275e:	f00a facf 	bl	cd00 <shell_fprintf>
    2762:	e7d0      	b.n	2706 <cmd_load+0x5e>
    2764:	2000105c 	.word	0x2000105c
    2768:	200021cd 	.word	0x200021cd
    276c:	00010963 	.word	0x00010963
    2770:	00010969 	.word	0x00010969
    2774:	20001064 	.word	0x20001064
    2778:	00010966 	.word	0x00010966
    277c:	20001058 	.word	0x20001058
    2780:	20001060 	.word	0x20001060
    2784:	00002591 	.word	0x00002591

00002788 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    2788:	b507      	push	{r0, r1, r2, lr}
    278a:	480a      	ldr	r0, [pc, #40]	; (27b4 <enable_shell_uart+0x2c>)
    278c:	f00c f96f 	bl	ea6e <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    2790:	b160      	cbz	r0, 27ac <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    2792:	4a09      	ldr	r2, [pc, #36]	; (27b8 <enable_shell_uart+0x30>)
    2794:	4907      	ldr	r1, [pc, #28]	; (27b4 <enable_shell_uart+0x2c>)
    2796:	6812      	ldr	r2, [r2, #0]
    2798:	4808      	ldr	r0, [pc, #32]	; (27bc <enable_shell_uart+0x34>)
    279a:	2304      	movs	r3, #4
    279c:	9300      	str	r3, [sp, #0]
    279e:	2301      	movs	r3, #1
    27a0:	f000 fe0a 	bl	33b8 <shell_init>

	return 0;
    27a4:	2000      	movs	r0, #0
}
    27a6:	b003      	add	sp, #12
    27a8:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    27ac:	f06f 0012 	mvn.w	r0, #18
    27b0:	e7f9      	b.n	27a6 <enable_shell_uart+0x1e>
    27b2:	bf00      	nop
    27b4:	0000f4f0 	.word	0x0000f4f0
    27b8:	0000fb6c 	.word	0x0000fb6c
    27bc:	0000f740 	.word	0x0000f740

000027c0 <init>:
{
    27c0:	b570      	push	{r4, r5, r6, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    27c2:	6846      	ldr	r6, [r0, #4]
{
    27c4:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    27c6:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    27c8:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->context = context;
    27ca:	608b      	str	r3, [r1, #8]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
    27cc:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->handler = evt_handler;
    27ce:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
    27d2:	2208      	movs	r2, #8
	buf->tail = 0;
    27d4:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    27d8:	4629      	mov	r1, r5
    27da:	4410      	add	r0, r2
    27dc:	f00b fc85 	bl	e0ea <memset>
	ring_buf_reset(sh_uart->rx_ringbuf);
    27e0:	68f0      	ldr	r0, [r6, #12]
    27e2:	2208      	movs	r2, #8
	buf->tail = 0;
    27e4:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    27e8:	4629      	mov	r1, r5
    27ea:	4410      	add	r0, r2
    27ec:	f00b fc7d 	bl	e0ea <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
    27f0:	6833      	ldr	r3, [r6, #0]
    27f2:	60dd      	str	r5, [r3, #12]
	const struct uart_driver_api *api =
    27f4:	68a3      	ldr	r3, [r4, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    27f6:	b12b      	cbz	r3, 2804 <init+0x44>
    27f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    27fa:	b11b      	cbz	r3, 2804 <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
    27fc:	4905      	ldr	r1, [pc, #20]	; (2814 <init+0x54>)
    27fe:	4632      	mov	r2, r6
    2800:	4620      	mov	r0, r4
    2802:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    2804:	68a3      	ldr	r3, [r4, #8]
    2806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2808:	b10b      	cbz	r3, 280e <init+0x4e>
		api->irq_rx_enable(dev);
    280a:	4620      	mov	r0, r4
    280c:	4798      	blx	r3
}
    280e:	2000      	movs	r0, #0
    2810:	bd70      	pop	{r4, r5, r6, pc}
    2812:	bf00      	nop
    2814:	00002819 	.word	0x00002819

00002818 <uart_callback>:
{
    2818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    281c:	4604      	mov	r4, r0
    281e:	b088      	sub	sp, #32
    2820:	460e      	mov	r6, r1
	if (api->irq_update == NULL) {
    2822:	6883      	ldr	r3, [r0, #8]
    2824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2826:	b103      	cbz	r3, 282a <uart_callback+0x12>
	return api->irq_update(dev);
    2828:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    282a:	68a3      	ldr	r3, [r4, #8]
    282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    282e:	bb4b      	cbnz	r3, 2884 <uart_callback+0x6c>
			LOG_WRN("RX ring buffer full.");
    2830:	f8df 911c 	ldr.w	r9, [pc, #284]	; 2950 <uart_callback+0x138>
    2834:	f8df a11c 	ldr.w	sl, [pc, #284]	; 2954 <uart_callback+0x13c>
{
    2838:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    283c:	68f0      	ldr	r0, [r6, #12]
    283e:	4669      	mov	r1, sp
    2840:	6902      	ldr	r2, [r0, #16]
    2842:	f009 fc19 	bl	c078 <ring_buf_put_claim>
		if (len > 0) {
    2846:	4607      	mov	r7, r0
    2848:	2800      	cmp	r0, #0
    284a:	d043      	beq.n	28d4 <uart_callback+0xbc>
	if (api->fifo_read == NULL) {
    284c:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
    284e:	9900      	ldr	r1, [sp, #0]
    2850:	699b      	ldr	r3, [r3, #24]
    2852:	2b00      	cmp	r3, #0
    2854:	d03b      	beq.n	28ce <uart_callback+0xb6>
	return api->fifo_read(dev, rx_data, size);
    2856:	4602      	mov	r2, r0
    2858:	4620      	mov	r0, r4
    285a:	4798      	blx	r3
				new_data = true;
    285c:	1e05      	subs	r5, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    285e:	4629      	mov	r1, r5
    2860:	68f0      	ldr	r0, [r6, #12]
				new_data = true;
    2862:	bf18      	it	ne
    2864:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    2868:	f009 fc33 	bl	c0d2 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    286c:	b10d      	cbz	r5, 2872 <uart_callback+0x5a>
    286e:	42af      	cmp	r7, r5
    2870:	d0e4      	beq.n	283c <uart_callback+0x24>
	if (new_data) {
    2872:	f1b8 0f00 	cmp.w	r8, #0
    2876:	d009      	beq.n	288c <uart_callback+0x74>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    2878:	6833      	ldr	r3, [r6, #0]
    287a:	2000      	movs	r0, #0
    287c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    2880:	4790      	blx	r2
}
    2882:	e003      	b.n	288c <uart_callback+0x74>
	return api->irq_rx_ready(dev);
    2884:	4620      	mov	r0, r4
    2886:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    2888:	2800      	cmp	r0, #0
    288a:	d1d1      	bne.n	2830 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    288c:	68a3      	ldr	r3, [r4, #8]
    288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2890:	2b00      	cmp	r3, #0
    2892:	d13c      	bne.n	290e <uart_callback+0xf6>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    2894:	68b0      	ldr	r0, [r6, #8]
    2896:	a901      	add	r1, sp, #4
    2898:	6902      	ldr	r2, [r0, #16]
    289a:	f009 fc55 	bl	c148 <ring_buf_get_claim>
	if (len) {
    289e:	4605      	mov	r5, r0
    28a0:	2800      	cmp	r0, #0
    28a2:	d04f      	beq.n	2944 <uart_callback+0x12c>
	if (api->line_ctrl_get == NULL) {
    28a4:	68a3      	ldr	r3, [r4, #8]
    28a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    28a8:	2b00      	cmp	r3, #0
    28aa:	d037      	beq.n	291c <uart_callback+0x104>
	return api->line_ctrl_get(dev, ctrl, val);
    28ac:	aa02      	add	r2, sp, #8
    28ae:	2104      	movs	r1, #4
    28b0:	4620      	mov	r0, r4
    28b2:	4798      	blx	r3
			if (err == -ENOSYS || err == -ENOTSUP) {
    28b4:	f110 0f58 	cmn.w	r0, #88	; 0x58
    28b8:	d030      	beq.n	291c <uart_callback+0x104>
    28ba:	3086      	adds	r0, #134	; 0x86
    28bc:	d02e      	beq.n	291c <uart_callback+0x104>
			if (dtr) {
    28be:	9b02      	ldr	r3, [sp, #8]
    28c0:	bb63      	cbnz	r3, 291c <uart_callback+0x104>
	return z_impl_k_sleep(timeout);
    28c2:	2100      	movs	r1, #0
    28c4:	f640 40cd 	movw	r0, #3277	; 0xccd
    28c8:	f008 fca8 	bl	b21c <z_impl_k_sleep>
		while (true) {
    28cc:	e7ea      	b.n	28a4 <uart_callback+0x8c>
		return -ENOSYS;
    28ce:	f06f 0057 	mvn.w	r0, #87	; 0x57
    28d2:	e7c3      	b.n	285c <uart_callback+0x44>
			LOG_WRN("RX ring buffer full.");
    28d4:	f8d9 3000 	ldr.w	r3, [r9]
    28d8:	f013 0f06 	tst.w	r3, #6
    28dc:	d00b      	beq.n	28f6 <uart_callback+0xde>
    28de:	2302      	movs	r3, #2
    28e0:	f8cd a018 	str.w	sl, [sp, #24]
    28e4:	9301      	str	r3, [sp, #4]
    28e6:	9305      	str	r3, [sp, #20]
    28e8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    28ec:	4603      	mov	r3, r0
    28ee:	aa05      	add	r2, sp, #20
    28f0:	4648      	mov	r0, r9
    28f2:	f00a f824 	bl	c93e <z_impl_z_log_msg2_static_create>
	if (api->fifo_read == NULL) {
    28f6:	68a3      	ldr	r3, [r4, #8]
    28f8:	699b      	ldr	r3, [r3, #24]
    28fa:	b12b      	cbz	r3, 2908 <uart_callback+0xf0>
	return api->fifo_read(dev, rx_data, size);
    28fc:	2201      	movs	r2, #1
    28fe:	a902      	add	r1, sp, #8
    2900:	4620      	mov	r0, r4
    2902:	4798      	blx	r3
    2904:	4605      	mov	r5, r0
    2906:	e7b1      	b.n	286c <uart_callback+0x54>
		return -ENOSYS;
    2908:	f06f 0557 	mvn.w	r5, #87	; 0x57
    290c:	e7ae      	b.n	286c <uart_callback+0x54>
	return api->irq_tx_ready(dev);
    290e:	4620      	mov	r0, r4
    2910:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    2912:	2800      	cmp	r0, #0
    2914:	d1be      	bne.n	2894 <uart_callback+0x7c>
}
    2916:	b008      	add	sp, #32
    2918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (api->fifo_fill == NULL) {
    291c:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    291e:	9901      	ldr	r1, [sp, #4]
    2920:	695b      	ldr	r3, [r3, #20]
    2922:	b163      	cbz	r3, 293e <uart_callback+0x126>
	return api->fifo_fill(dev, tx_data, size);
    2924:	462a      	mov	r2, r5
    2926:	4620      	mov	r0, r4
    2928:	4798      	blx	r3
    292a:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    292c:	68b0      	ldr	r0, [r6, #8]
    292e:	f009 fc36 	bl	c19e <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    2932:	6833      	ldr	r3, [r6, #0]
    2934:	2001      	movs	r0, #1
    2936:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    293a:	4790      	blx	r2
}
    293c:	e7eb      	b.n	2916 <uart_callback+0xfe>
		return -ENOSYS;
    293e:	f06f 0157 	mvn.w	r1, #87	; 0x57
    2942:	e7f3      	b.n	292c <uart_callback+0x114>
		uart_irq_tx_disable(dev);
    2944:	4620      	mov	r0, r4
    2946:	f00a f888 	bl	ca5a <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    294a:	6833      	ldr	r3, [r6, #0]
    294c:	60dd      	str	r5, [r3, #12]
    294e:	e7f0      	b.n	2932 <uart_callback+0x11a>
    2950:	20000278 	.word	0x20000278
    2954:	00010a0b 	.word	0x00010a0b

00002958 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    2958:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    295a:	6881      	ldr	r1, [r0, #8]
{
    295c:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    295e:	3108      	adds	r1, #8
    2960:	f001 f852 	bl	3a08 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    2964:	68a1      	ldr	r1, [r4, #8]
    2966:	4a03      	ldr	r2, [pc, #12]	; (2974 <shell_internal_help_print+0x1c>)
    2968:	4620      	mov	r0, r4
    296a:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    296c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    2970:	f000 bff2 	b.w	3958 <z_shell_help_subcmd_print>
    2974:	00010a50 	.word	0x00010a50

00002978 <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    2978:	4901      	ldr	r1, [pc, #4]	; (2980 <z_cursor_next_line_move.isra.0+0x8>)
    297a:	f00a b904 	b.w	cb86 <z_shell_raw_fprintf>
    297e:	bf00      	nop
    2980:	000106d4 	.word	0x000106d4

00002984 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    2984:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2986:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    2988:	6880      	ldr	r0, [r0, #8]
    298a:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    298e:	075a      	lsls	r2, r3, #29
{
    2990:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    2992:	d505      	bpl.n	29a0 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    2994:	2100      	movs	r1, #0
    2996:	f00a f937 	bl	cc08 <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    299a:	68e0      	ldr	r0, [r4, #12]
    299c:	f00b f800 	bl	d9a0 <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    29a0:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    29a2:	68db      	ldr	r3, [r3, #12]
    29a4:	b96b      	cbnz	r3, 29c2 <history_handle+0x3e>
		if (up) {
    29a6:	2d00      	cmp	r5, #0
    29a8:	d037      	beq.n	2a1a <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    29aa:	68a0      	ldr	r0, [r4, #8]
    29ac:	3042      	adds	r0, #66	; 0x42
    29ae:	f00a f8e4 	bl	cb7a <z_shell_strlen>

			if (cmd_len) {
    29b2:	68a3      	ldr	r3, [r4, #8]
    29b4:	b398      	cbz	r0, 2a1e <history_handle+0x9a>
				strcpy(shell->ctx->temp_buff,
    29b6:	f103 0142 	add.w	r1, r3, #66	; 0x42
    29ba:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    29be:	f00b fb09 	bl	dfd4 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    29c2:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    29c4:	68e0      	ldr	r0, [r4, #12]
    29c6:	f10d 0306 	add.w	r3, sp, #6
    29ca:	3242      	adds	r2, #66	; 0x42
    29cc:	4629      	mov	r1, r5
    29ce:	f00a ffea 	bl	d9a6 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    29d2:	b958      	cbnz	r0, 29ec <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    29d4:	68a0      	ldr	r0, [r4, #8]
    29d6:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    29da:	3042      	adds	r0, #66	; 0x42
    29dc:	f00b fafa 	bl	dfd4 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    29e0:	68a0      	ldr	r0, [r4, #8]
    29e2:	3042      	adds	r0, #66	; 0x42
    29e4:	f00a f8c9 	bl	cb7a <z_shell_strlen>
    29e8:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    29ec:	4620      	mov	r0, r4
    29ee:	f00a fc65 	bl	d2bc <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    29f2:	68a3      	ldr	r3, [r4, #8]
    29f4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    29f8:	069b      	lsls	r3, r3, #26
    29fa:	d503      	bpl.n	2a04 <history_handle+0x80>
    29fc:	4909      	ldr	r1, [pc, #36]	; (2a24 <history_handle+0xa0>)
    29fe:	6960      	ldr	r0, [r4, #20]
    2a00:	f00a f8c1 	bl	cb86 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    2a04:	4620      	mov	r0, r4
    2a06:	f000 fe77 	bl	36f8 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    2a0a:	68a3      	ldr	r3, [r4, #8]
    2a0c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2a10:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    2a12:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    2a14:	4620      	mov	r0, r4
    2a16:	f00a fbbe 	bl	d196 <z_shell_op_cond_next_line>
}
    2a1a:	b003      	add	sp, #12
    2a1c:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    2a1e:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    2a22:	e7ce      	b.n	29c2 <history_handle+0x3e>
    2a24:	0000f7f0 	.word	0x0000f7f0

00002a28 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    2a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    2a2c:	2300      	movs	r3, #0
{
    2a2e:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    2a30:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    2a34:	6883      	ldr	r3, [r0, #8]
{
    2a36:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
    2a38:	3342      	adds	r3, #66	; 0x42
    2a3a:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    2a3c:	f00a fc44 	bl	d2c8 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    2a40:	4620      	mov	r0, r4
    2a42:	f00a fb94 	bl	d16e <z_shell_cursor_in_empty_line>
    2a46:	b910      	cbnz	r0, 2a4e <execute+0x26>
		z_cursor_next_line_move(shell);
    2a48:	6960      	ldr	r0, [r4, #20]
    2a4a:	f7ff ff95 	bl	2978 <z_cursor_next_line_move.isra.0>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    2a4e:	68a0      	ldr	r0, [r4, #8]
    2a50:	2214      	movs	r2, #20
    2a52:	2100      	movs	r1, #0
    2a54:	3008      	adds	r0, #8
    2a56:	f00b fb48 	bl	e0ea <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    2a5a:	4620      	mov	r0, r4
    2a5c:	f00a fb34 	bl	d0c8 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    2a60:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    2a62:	68e0      	ldr	r0, [r4, #12]
    2a64:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    2a66:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    2a68:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    2a6a:	f00a ffd3 	bl	da14 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    2a6e:	4620      	mov	r0, r4
    2a70:	f00b f856 	bl	db20 <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    2a74:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    2a78:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
    2a7a:	46b2      	mov	sl, r6
    2a7c:	af11      	add	r7, sp, #68	; 0x44
    2a7e:	9602      	str	r6, [sp, #8]
    2a80:	4635      	mov	r5, r6
    2a82:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    2a84:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    2a88:	2a01      	cmp	r2, #1
    2a8a:	f000 80d6 	beq.w	2c3a <execute+0x212>
    2a8e:	2b0b      	cmp	r3, #11
    2a90:	f240 80ae 	bls.w	2bf0 <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    2a94:	9b06      	ldr	r3, [sp, #24]
    2a96:	2b02      	cmp	r3, #2
    2a98:	f040 80ae 	bne.w	2bf8 <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    2a9c:	4b89      	ldr	r3, [pc, #548]	; (2cc4 <execute+0x29c>)
    2a9e:	4a8a      	ldr	r2, [pc, #552]	; (2cc8 <execute+0x2a0>)
    2aa0:	2101      	movs	r1, #1
    2aa2:	e014      	b.n	2ace <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    2aa4:	9a03      	ldr	r2, [sp, #12]
    2aa6:	2302      	movs	r3, #2
    2aa8:	4639      	mov	r1, r7
    2aaa:	a806      	add	r0, sp, #24
    2aac:	f00a f9a0 	bl	cdf0 <z_shell_make_argv>
		if (argc == 0) {
    2ab0:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    2ab2:	687a      	ldr	r2, [r7, #4]
    2ab4:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    2ab6:	4603      	mov	r3, r0
		if (argc == 0) {
    2ab8:	b929      	cbnz	r1, 2ac6 <execute+0x9e>
			return -ENOEXEC;
    2aba:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    2abe:	4628      	mov	r0, r5
    2ac0:	b01f      	add	sp, #124	; 0x7c
    2ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
    2ac6:	2901      	cmp	r1, #1
    2ac8:	d105      	bne.n	2ad6 <execute+0xae>
    2aca:	b120      	cbz	r0, 2ad6 <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
    2acc:	4a7f      	ldr	r2, [pc, #508]	; (2ccc <execute+0x2a4>)
    2ace:	4620      	mov	r0, r4
    2ad0:	f00a fca6 	bl	d420 <z_shell_fprintf>
    2ad4:	e7f1      	b.n	2aba <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2ad6:	9b05      	ldr	r3, [sp, #20]
    2ad8:	b34b      	cbz	r3, 2b2e <execute+0x106>
		    z_shell_help_request(argvp[0])) {
    2ada:	6838      	ldr	r0, [r7, #0]
    2adc:	f000 ffb8 	bl	3a50 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2ae0:	b198      	cbz	r0, 2b0a <execute+0xe2>
			if (help_entry.help) {
    2ae2:	b166      	cbz	r6, 2afe <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
    2ae4:	68a5      	ldr	r5, [r4, #8]
    2ae6:	960d      	str	r6, [sp, #52]	; 0x34
    2ae8:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    2aea:	ae0c      	add	r6, sp, #48	; 0x30
    2aec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2af0:	6833      	ldr	r3, [r6, #0]
    2af2:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    2af4:	4620      	mov	r0, r4
    2af6:	f7ff ff2f 	bl	2958 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    2afa:	2501      	movs	r5, #1
    2afc:	e7df      	b.n	2abe <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
    2afe:	4a74      	ldr	r2, [pc, #464]	; (2cd0 <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
    2b00:	2101      	movs	r1, #1
    2b02:	4620      	mov	r0, r4
    2b04:	f00a fc8c 	bl	d420 <z_shell_fprintf>
		return false;
    2b08:	e7d7      	b.n	2aba <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    2b0a:	9b05      	ldr	r3, [sp, #20]
    2b0c:	b17b      	cbz	r3, 2b2e <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
    2b0e:	683a      	ldr	r2, [r7, #0]
    2b10:	4629      	mov	r1, r5
    2b12:	4620      	mov	r0, r4
    2b14:	f001 f900 	bl	3d18 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    2b18:	2802      	cmp	r0, #2
    2b1a:	f000 808e 	beq.w	2c3a <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    2b1e:	2803      	cmp	r0, #3
    2b20:	d005      	beq.n	2b2e <execute+0x106>
				++cmd_lvl;
    2b22:	9b05      	ldr	r3, [sp, #20]
    2b24:	3301      	adds	r3, #1
    2b26:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    2b28:	2301      	movs	r3, #1
    2b2a:	9302      	str	r3, [sp, #8]
				continue;
    2b2c:	e7aa      	b.n	2a84 <execute+0x5c>
		if (has_last_handler == false) {
    2b2e:	f1ba 0f00 	cmp.w	sl, #0
    2b32:	d105      	bne.n	2b40 <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    2b34:	6839      	ldr	r1, [r7, #0]
    2b36:	aa07      	add	r2, sp, #28
    2b38:	4658      	mov	r0, fp
    2b3a:	f00a fa44 	bl	cfc6 <z_shell_find_cmd>
    2b3e:	4605      	mov	r5, r0
		argvp++;
    2b40:	3704      	adds	r7, #4
		args_left--;
    2b42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
    2b46:	2d00      	cmp	r5, #0
    2b48:	d040      	beq.n	2bcc <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    2b4a:	9a02      	ldr	r2, [sp, #8]
    2b4c:	68eb      	ldr	r3, [r5, #12]
    2b4e:	b142      	cbz	r2, 2b62 <execute+0x13a>
    2b50:	b313      	cbz	r3, 2b98 <execute+0x170>
		z_shell_op_cursor_end_move(shell);
    2b52:	4620      	mov	r0, r4
    2b54:	f00a fbb8 	bl	d2c8 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    2b58:	4620      	mov	r0, r4
    2b5a:	f00a fb1c 	bl	d196 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    2b5e:	4a5d      	ldr	r2, [pc, #372]	; (2cd4 <execute+0x2ac>)
    2b60:	e7ce      	b.n	2b00 <execute+0xd8>
	if (entry->handler) {
    2b62:	b1cb      	cbz	r3, 2b98 <execute+0x170>
		*active_cmd = *entry;
    2b64:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    2b66:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
    2b6a:	46ae      	mov	lr, r5
    2b6c:	f103 0c08 	add.w	ip, r3, #8
    2b70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2b74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2b78:	f8de 3000 	ldr.w	r3, [lr]
    2b7c:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    2b80:	68ab      	ldr	r3, [r5, #8]
    2b82:	b94b      	cbnz	r3, 2b98 <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    2b84:	7c6b      	ldrb	r3, [r5, #17]
    2b86:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    2b88:	bf01      	itttt	eq
    2b8a:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
    2b8e:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
    2b92:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
    2b96:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
    2b98:	f8d5 c004 	ldr.w	ip, [r5, #4]
    2b9c:	f1bc 0f00 	cmp.w	ip, #0
    2ba0:	d008      	beq.n	2bb4 <execute+0x18c>
		*help_entry = *entry;
    2ba2:	46ae      	mov	lr, r5
    2ba4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2ba8:	ae0c      	add	r6, sp, #48	; 0x30
    2baa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2bac:	f8de 3000 	ldr.w	r3, [lr]
    2bb0:	6033      	str	r3, [r6, #0]
    2bb2:	4666      	mov	r6, ip
    2bb4:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
    2bb6:	f1b8 0f00 	cmp.w	r8, #0
    2bba:	d103      	bne.n	2bc4 <execute+0x19c>
    2bbc:	9b06      	ldr	r3, [sp, #24]
    2bbe:	2b02      	cmp	r3, #2
    2bc0:	f47f af60 	bne.w	2a84 <execute+0x5c>
			cmd_lvl++;
    2bc4:	9b05      	ldr	r3, [sp, #20]
    2bc6:	3301      	adds	r3, #1
    2bc8:	9305      	str	r3, [sp, #20]
    2bca:	e75b      	b.n	2a84 <execute+0x5c>
			if (cmd_lvl == 0 &&
    2bcc:	9b05      	ldr	r3, [sp, #20]
    2bce:	b963      	cbnz	r3, 2bea <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    2bd0:	68a3      	ldr	r3, [r4, #8]
    2bd2:	69db      	ldr	r3, [r3, #28]
    2bd4:	b10b      	cbz	r3, 2bda <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
    2bd6:	68db      	ldr	r3, [r3, #12]
    2bd8:	b93b      	cbnz	r3, 2bea <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
    2bda:	4b3f      	ldr	r3, [pc, #252]	; (2cd8 <execute+0x2b0>)
    2bdc:	9300      	str	r3, [sp, #0]
    2bde:	4a3f      	ldr	r2, [pc, #252]	; (2cdc <execute+0x2b4>)
    2be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2be2:	2101      	movs	r1, #1
    2be4:	4620      	mov	r0, r4
    2be6:	f00a fc1b 	bl	d420 <z_shell_fprintf>
			has_last_handler = true;
    2bea:	f04f 0a01 	mov.w	sl, #1
    2bee:	e7e2      	b.n	2bb6 <execute+0x18e>
		&& args_left > 0) {
    2bf0:	f1b8 0f00 	cmp.w	r8, #0
    2bf4:	f47f af56 	bne.w	2aa4 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    2bf8:	9b02      	ldr	r3, [sp, #8]
    2bfa:	b14b      	cbz	r3, 2c10 <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
    2bfc:	4620      	mov	r0, r4
    2bfe:	f00a ffb0 	bl	db62 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
    2c02:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    2c04:	230c      	movs	r3, #12
    2c06:	3242      	adds	r2, #66	; 0x42
    2c08:	a911      	add	r1, sp, #68	; 0x44
    2c0a:	a805      	add	r0, sp, #20
    2c0c:	f00a f8f0 	bl	cdf0 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
    2c10:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    2c12:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
    2c14:	ab1e      	add	r3, sp, #120	; 0x78
    2c16:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2c1a:	2200      	movs	r2, #0
    2c1c:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
    2c20:	6943      	ldr	r3, [r0, #20]
    2c22:	b973      	cbnz	r3, 2c42 <execute+0x21a>
			if (help_entry->help == NULL) {
    2c24:	2e00      	cmp	r6, #0
    2c26:	f43f af48 	beq.w	2aba <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    2c2a:	68c3      	ldr	r3, [r0, #12]
    2c2c:	42b3      	cmp	r3, r6
    2c2e:	f43f af61 	beq.w	2af4 <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
    2c32:	960d      	str	r6, [sp, #52]	; 0x34
    2c34:	f100 0508 	add.w	r5, r0, #8
    2c38:	e757      	b.n	2aea <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    2c3a:	9b05      	ldr	r3, [sp, #20]
    2c3c:	2b0b      	cmp	r3, #11
    2c3e:	d9db      	bls.n	2bf8 <execute+0x1d0>
    2c40:	e728      	b.n	2a94 <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
    2c42:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    2c44:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
    2c48:	b1b3      	cbz	r3, 2c78 <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    2c4a:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    2c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2c50:	29ff      	cmp	r1, #255	; 0xff
    2c52:	bf18      	it	ne
    2c54:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    2c56:	429d      	cmp	r5, r3
    2c58:	d302      	bcc.n	2c60 <execute+0x238>
    2c5a:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    2c5c:	429d      	cmp	r5, r3
    2c5e:	d90b      	bls.n	2c78 <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
    2c60:	6883      	ldr	r3, [r0, #8]
    2c62:	4a1f      	ldr	r2, [pc, #124]	; (2ce0 <execute+0x2b8>)
    2c64:	2101      	movs	r1, #1
    2c66:	4620      	mov	r0, r4
    2c68:	f00a fbda 	bl	d420 <z_shell_fprintf>
			shell_internal_help_print(shell);
    2c6c:	4620      	mov	r0, r4
    2c6e:	f7ff fe73 	bl	2958 <shell_internal_help_print>
		return -EINVAL;
    2c72:	f06f 0515 	mvn.w	r5, #21
    2c76:	e722      	b.n	2abe <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    2c78:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2c7c:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2c80:	f009 ff47 	bl	cb12 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    2c84:	68a0      	ldr	r0, [r4, #8]
    2c86:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2c8a:	f009 ffd6 	bl	cc3a <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    2c8e:	68a3      	ldr	r3, [r4, #8]
    2c90:	aa11      	add	r2, sp, #68	; 0x44
    2c92:	4629      	mov	r1, r5
    2c94:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    2c98:	695b      	ldr	r3, [r3, #20]
    2c9a:	4620      	mov	r0, r4
    2c9c:	4798      	blx	r3
    2c9e:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    2ca0:	68a0      	ldr	r0, [r4, #8]
    2ca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2caa:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2cae:	f009 ff77 	bl	cba0 <k_mutex_lock.constprop.0.isra.0>
    2cb2:	68a0      	ldr	r0, [r4, #8]
    2cb4:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    2cb8:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2cbc:	f009 ff38 	bl	cb30 <atomic_and>
	return ret;
    2cc0:	e6fd      	b.n	2abe <execute+0x96>
    2cc2:	bf00      	nop
    2cc4:	00010ad3 	.word	0x00010ad3
    2cc8:	000107ff 	.word	0x000107ff
    2ccc:	00010a5e 	.word	0x00010a5e
    2cd0:	00010a72 	.word	0x00010a72
    2cd4:	00010a90 	.word	0x00010a90
    2cd8:	00010abf 	.word	0x00010abf
    2cdc:	00010d82 	.word	0x00010d82
    2ce0:	00010af7 	.word	0x00010af7

00002ce4 <state_set.constprop.0>:
	shell->ctx->state = state;
    2ce4:	6883      	ldr	r3, [r0, #8]
    2ce6:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
    2ce8:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    2cea:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    2cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    2cee:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    2cf0:	b9ba      	cbnz	r2, 2d22 <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    2cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    2cf6:	63da      	str	r2, [r3, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
    2cf8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    2cfc:	04db      	lsls	r3, r3, #19
    2cfe:	d50b      	bpl.n	2d18 <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    2d00:	2103      	movs	r1, #3
    2d02:	4b08      	ldr	r3, [pc, #32]	; (2d24 <state_set.constprop.0+0x40>)
    2d04:	4a08      	ldr	r2, [pc, #32]	; (2d28 <state_set.constprop.0+0x44>)
    2d06:	f00a fb8b 	bl	d420 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    2d0a:	68a0      	ldr	r0, [r4, #8]
    2d0c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    2d10:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2d14:	f009 ff0c 	bl	cb30 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    2d18:	4620      	mov	r0, r4
}
    2d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    2d1e:	f000 bdfd 	b.w	391c <z_shell_print_prompt_and_cmd>
}
    2d22:	bd10      	pop	{r4, pc}
    2d24:	00010b12 	.word	0x00010b12
    2d28:	000107f3 	.word	0x000107f3

00002d2c <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    2d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d30:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    2d32:	6880      	ldr	r0, [r0, #8]
    2d34:	b0ab      	sub	sp, #172	; 0xac
    2d36:	2101      	movs	r1, #1
    2d38:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2d3c:	f009 fee9 	bl	cb12 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    2d40:	68a3      	ldr	r3, [r4, #8]
    2d42:	791b      	ldrb	r3, [r3, #4]
    2d44:	2b02      	cmp	r3, #2
    2d46:	d117      	bne.n	2d78 <shell_process+0x4c>
	size_t count = 0;
    2d48:	2300      	movs	r3, #0
    2d4a:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    2d4c:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    2d4e:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    2d50:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    2d52:	6803      	ldr	r3, [r0, #0]
    2d54:	691d      	ldr	r5, [r3, #16]
    2d56:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
    2d58:	b1c6      	cbz	r6, 2d8c <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    2d5a:	2210      	movs	r2, #16
    2d5c:	a91d      	add	r1, sp, #116	; 0x74
    2d5e:	47a8      	blx	r5
			if (count) {
    2d60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2d62:	b14a      	cbz	r2, 2d78 <shell_process+0x4c>
				bypass(shell, buf, count);
    2d64:	a91d      	add	r1, sp, #116	; 0x74
    2d66:	4620      	mov	r0, r4
    2d68:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    2d6a:	68a3      	ldr	r3, [r4, #8]
    2d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d1ec      	bne.n	2d4c <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    2d72:	4620      	mov	r0, r4
    2d74:	f7ff ffb6 	bl	2ce4 <state_set.constprop.0>
    2d78:	68a0      	ldr	r0, [r4, #8]
    2d7a:	f06f 0101 	mvn.w	r1, #1
    2d7e:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    2d82:	b02b      	add	sp, #172	; 0xac
    2d84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d88:	f009 bed2 	b.w	cb30 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    2d8c:	2201      	movs	r2, #1
    2d8e:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    2d92:	47a8      	blx	r5
		if (count == 0) {
    2d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2d96:	2b00      	cmp	r3, #0
    2d98:	d0ee      	beq.n	2d78 <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2d9a:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    2d9e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
		switch (shell->ctx->receive_state) {
    2da2:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2da4:	2a00      	cmp	r2, #0
    2da6:	dbd1      	blt.n	2d4c <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    2da8:	7942      	ldrb	r2, [r0, #5]
    2daa:	2a03      	cmp	r2, #3
    2dac:	f200 82fd 	bhi.w	33aa <shell_process+0x67e>
    2db0:	e8df f012 	tbh	[pc, r2, lsl #1]
    2db4:	02750004 	.word	0x02750004
    2db8:	02fb0298 	.word	0x02fb0298
	if ((data != '\r') && (data != '\n')) {
    2dbc:	2b0d      	cmp	r3, #13
    2dbe:	d01a      	beq.n	2df6 <shell_process+0xca>
    2dc0:	2b0a      	cmp	r3, #10
    2dc2:	d018      	beq.n	2df6 <shell_process+0xca>
	sh->ctx->ctx.flags.last_nl = val;
    2dc4:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
    2dc8:	f36f 02ca 	bfc	r2, #3, #8
    2dcc:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
    2dd0:	2b09      	cmp	r3, #9
    2dd2:	d04c      	beq.n	2e6e <shell_process+0x142>
    2dd4:	d832      	bhi.n	2e3c <shell_process+0x110>
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d0b8      	beq.n	2d4c <shell_process+0x20>
    2dda:	2b08      	cmp	r3, #8
    2ddc:	f000 81c4 	beq.w	3168 <shell_process+0x43c>
    2de0:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
    2de4:	2a5e      	cmp	r2, #94	; 0x5e
    2de6:	f200 81cb 	bhi.w	3180 <shell_process+0x454>
					z_flag_history_exit_set(shell, true);
    2dea:	2101      	movs	r1, #1
    2dec:	f009 ff0c 	bl	cc08 <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    2df0:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    2df4:	e0e8      	b.n	2fc8 <shell_process+0x29c>
	return sh->ctx->ctx.flags.last_nl;
    2df6:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    2dfa:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    2dfe:	b12a      	cbz	r2, 2e0c <shell_process+0xe0>
    2e00:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    2e04:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    2e08:	4293      	cmp	r3, r2
    2e0a:	d1e1      	bne.n	2dd0 <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
    2e0c:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    2e10:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    2e12:	f363 02ca 	bfi	r2, r3, #3, #8
    2e16:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
    2e1a:	b959      	cbnz	r1, 2e34 <shell_process+0x108>
	z_flag_history_exit_set(shell, false);
    2e1c:	f009 fef4 	bl	cc08 <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    2e20:	68e0      	ldr	r0, [r4, #12]
    2e22:	f00a fdbd 	bl	d9a0 <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    2e26:	6960      	ldr	r0, [r4, #20]
    2e28:	f7ff fda6 	bl	2978 <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    2e2c:	4620      	mov	r0, r4
    2e2e:	f7ff ff59 	bl	2ce4 <state_set.constprop.0>
		break;
    2e32:	e78b      	b.n	2d4c <shell_process+0x20>
					(void)execute(shell);
    2e34:	4620      	mov	r0, r4
    2e36:	f7ff fdf7 	bl	2a28 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    2e3a:	e7f7      	b.n	2e2c <shell_process+0x100>
    2e3c:	2b1b      	cmp	r3, #27
    2e3e:	d013      	beq.n	2e68 <shell_process+0x13c>
    2e40:	2b7f      	cmp	r3, #127	; 0x7f
    2e42:	d1cd      	bne.n	2de0 <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
    2e44:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    2e48:	079a      	lsls	r2, r3, #30
    2e4a:	f57f af7f 	bpl.w	2d4c <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2e4e:	2101      	movs	r1, #1
    2e50:	f009 feda 	bl	cc08 <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    2e54:	68a3      	ldr	r3, [r4, #8]
    2e56:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    2e5a:	071b      	lsls	r3, r3, #28
    2e5c:	f100 818c 	bmi.w	3178 <shell_process+0x44c>
		z_shell_op_char_delete(shell);
    2e60:	4620      	mov	r0, r4
    2e62:	f00a fb1d 	bl	d4a0 <z_shell_op_char_delete>
		break;
    2e66:	e771      	b.n	2d4c <shell_process+0x20>
	shell->ctx->receive_state = state;
    2e68:	2301      	movs	r3, #1
    2e6a:	7143      	strb	r3, [r0, #5]
}
    2e6c:	e76e      	b.n	2d4c <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    2e6e:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    2e72:	079e      	lsls	r6, r3, #30
    2e74:	f57f af6a 	bpl.w	2d4c <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2e78:	2101      	movs	r1, #1
    2e7a:	f009 fec5 	bl	cc08 <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    2e7e:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    2e80:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    2e82:	2bff      	cmp	r3, #255	; 0xff
    2e84:	f43f af62 	beq.w	2d4c <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    2e88:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2e8a:	f100 0142 	add.w	r1, r0, #66	; 0x42
    2e8e:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    2e92:	f00b f91f 	bl	e0d4 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    2e96:	68a2      	ldr	r2, [r4, #8]
    2e98:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    2e9a:	4413      	add	r3, r2
    2e9c:	2500      	movs	r5, #0
    2e9e:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    2ea2:	a91d      	add	r1, sp, #116	; 0x74
    2ea4:	230c      	movs	r3, #12
    2ea6:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    2eaa:	a80d      	add	r0, sp, #52	; 0x34
    2eac:	f009 ffa0 	bl	cdf0 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    2eb0:	990d      	ldr	r1, [sp, #52]	; 0x34
    2eb2:	290c      	cmp	r1, #12
    2eb4:	f63f af4a 	bhi.w	2d4c <shell_process+0x20>
	(*argv)[*argc] = NULL;
    2eb8:	ab2a      	add	r3, sp, #168	; 0xa8
    2eba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2ebe:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
    2ec2:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    2ec4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
    2ec6:	4413      	add	r3, r2
    2ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    2ecc:	2b20      	cmp	r3, #32
    2ece:	f000 826e 	beq.w	33ae <shell_process+0x682>
    2ed2:	3b09      	subs	r3, #9
    2ed4:	2b04      	cmp	r3, #4
    2ed6:	f240 826a 	bls.w	33ae <shell_process+0x682>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    2eda:	2901      	cmp	r1, #1
    2edc:	d84f      	bhi.n	2f7e <shell_process+0x252>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    2ede:	2500      	movs	r5, #0
    2ee0:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ee4:	aa2a      	add	r2, sp, #168	; 0xa8
    2ee6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    2eea:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2eec:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2ef0:	4650      	mov	r0, sl
    2ef2:	f009 fe42 	bl	cb7a <z_shell_strlen>
	size_t first = 0;
    2ef6:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2ef8:	4681      	mov	r9, r0
	*longest = 0U;
    2efa:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
    2efc:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    2efe:	aa18      	add	r2, sp, #96	; 0x60
    2f00:	4639      	mov	r1, r7
    2f02:	4628      	mov	r0, r5
    2f04:	f000 fb94 	bl	3630 <z_shell_cmd_get>
    2f08:	4683      	mov	fp, r0
    2f0a:	2800      	cmp	r0, #0
    2f0c:	d144      	bne.n	2f98 <shell_process+0x26c>
	if (cnt == 1) {
    2f0e:	2e01      	cmp	r6, #1
    2f10:	d163      	bne.n	2fda <shell_process+0x2ae>
		autocomplete(shell, cmd, argv[arg_idx], first);
    2f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f14:	aa2a      	add	r2, sp, #168	; 0xa8
    2f16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    2f1a:	f853 0c34 	ldr.w	r0, [r3, #-52]
    2f1e:	f009 fe2c 	bl	cb7a <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2f22:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    2f24:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2f26:	3208      	adds	r2, #8
    2f28:	4641      	mov	r1, r8
    2f2a:	4628      	mov	r0, r5
    2f2c:	f000 fb80 	bl	3630 <z_shell_cmd_get>
    2f30:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    2f32:	6800      	ldr	r0, [r0, #0]
    2f34:	f009 fe21 	bl	cb7a <z_shell_strlen>
	if (cmd_len != arg_len) {
    2f38:	4286      	cmp	r6, r0
    2f3a:	d006      	beq.n	2f4a <shell_process+0x21e>
		z_shell_op_completion_insert(shell,
    2f3c:	6829      	ldr	r1, [r5, #0]
    2f3e:	1b82      	subs	r2, r0, r6
    2f40:	b292      	uxth	r2, r2
    2f42:	4431      	add	r1, r6
    2f44:	4620      	mov	r0, r4
    2f46:	f00a faa9 	bl	d49c <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    2f4a:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    2f4c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
    2f4e:	4403      	add	r3, r0
    2f50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    2f54:	2b20      	cmp	r3, #32
    2f56:	d03b      	beq.n	2fd0 <shell_process+0x2a4>
    2f58:	3b09      	subs	r3, #9
    2f5a:	2b04      	cmp	r3, #4
    2f5c:	d938      	bls.n	2fd0 <shell_process+0x2a4>
	return sh->ctx->cfg.flags.insert_mode == 1;
    2f5e:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    2f62:	07dd      	lsls	r5, r3, #31
    2f64:	d52f      	bpl.n	2fc6 <shell_process+0x29a>
			z_flag_insert_mode_set(shell, false);
    2f66:	2100      	movs	r1, #0
    2f68:	f009 fe58 	bl	cc1c <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    2f6c:	2120      	movs	r1, #32
    2f6e:	4620      	mov	r0, r4
    2f70:	f000 fca0 	bl	38b4 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    2f74:	68a0      	ldr	r0, [r4, #8]
    2f76:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    2f78:	f009 fe50 	bl	cc1c <z_flag_insert_mode_set.isra.0>
				break;
    2f7c:	e6e6      	b.n	2d4c <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    2f7e:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    2f80:	2000      	movs	r0, #0
    2f82:	ab0e      	add	r3, sp, #56	; 0x38
    2f84:	9300      	str	r3, [sp, #0]
    2f86:	9001      	str	r0, [sp, #4]
    2f88:	ab0c      	add	r3, sp, #48	; 0x30
    2f8a:	aa1d      	add	r2, sp, #116	; 0x74
    2f8c:	f00a f83b 	bl	d006 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    2f90:	4605      	mov	r5, r0
    2f92:	2800      	cmp	r0, #0
    2f94:	d1a5      	bne.n	2ee2 <shell_process+0x1b6>
    2f96:	e6d9      	b.n	2d4c <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    2f98:	f8db 0000 	ldr.w	r0, [fp]
    2f9c:	464a      	mov	r2, r9
    2f9e:	4651      	mov	r1, sl
    2fa0:	f00b f85e 	bl	e060 <strncmp>
		if (is_candidate) {
    2fa4:	b968      	cbnz	r0, 2fc2 <shell_process+0x296>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2fa6:	f8db 0000 	ldr.w	r0, [fp]
    2faa:	f00b f83d 	bl	e028 <strlen>
    2fae:	9b04      	ldr	r3, [sp, #16]
    2fb0:	4283      	cmp	r3, r0
    2fb2:	bf38      	it	cc
    2fb4:	4603      	movcc	r3, r0
    2fb6:	b29b      	uxth	r3, r3
				*first_idx = idx;
    2fb8:	2e00      	cmp	r6, #0
    2fba:	bf08      	it	eq
    2fbc:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2fbe:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    2fc0:	3601      	adds	r6, #1
		idx++;
    2fc2:	3701      	adds	r7, #1
    2fc4:	e79b      	b.n	2efe <shell_process+0x1d2>
			z_shell_op_char_insert(shell, ' ');
    2fc6:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    2fc8:	4620      	mov	r0, r4
    2fca:	f000 fc73 	bl	38b4 <z_shell_op_char_insert>
    2fce:	e6bd      	b.n	2d4c <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    2fd0:	2101      	movs	r1, #1
    2fd2:	4620      	mov	r0, r4
    2fd4:	f00a f912 	bl	d1fc <z_shell_op_cursor_move>
    2fd8:	e6b8      	b.n	2d4c <shell_process+0x20>
	} else if (cnt > 1) {
    2fda:	f67f aeb7 	bls.w	2d4c <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    2fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2fe0:	aa2a      	add	r2, sp, #168	; 0xa8
    2fe2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fe6:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
    2fea:	4650      	mov	r0, sl
    2fec:	f009 fdc5 	bl	cb7a <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2ff0:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    2ff2:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2ff4:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
    2ff8:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 32cc <shell_process+0x5a0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2ffc:	9605      	str	r6, [sp, #20]
    2ffe:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    3002:	68a2      	ldr	r2, [r4, #8]
    3004:	9903      	ldr	r1, [sp, #12]
    3006:	3208      	adds	r2, #8
    3008:	4628      	mov	r0, r5
    300a:	f000 fb11 	bl	3630 <z_shell_cmd_get>
		idx++;
    300e:	9b03      	ldr	r3, [sp, #12]
    3010:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    3012:	4607      	mov	r7, r0
		idx++;
    3014:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
    3016:	f1ba 0f00 	cmp.w	sl, #0
    301a:	d152      	bne.n	30c2 <shell_process+0x396>
		tab_item_print(shell, match->syntax, longest);
    301c:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
    301e:	2f00      	cmp	r7, #0
    3020:	d159      	bne.n	30d6 <shell_process+0x3aa>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3022:	68a2      	ldr	r2, [r4, #8]
    3024:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
    3026:	9b05      	ldr	r3, [sp, #20]
    3028:	3b01      	subs	r3, #1
    302a:	9305      	str	r3, [sp, #20]
    302c:	d1e9      	bne.n	3002 <shell_process+0x2d6>
	z_cursor_next_line_move(shell);
    302e:	6960      	ldr	r0, [r4, #20]
    3030:	f7ff fca2 	bl	2978 <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    3034:	4620      	mov	r0, r4
    3036:	f000 fc71 	bl	391c <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    303a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    303c:	aa2a      	add	r2, sp, #168	; 0xa8
    303e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    3042:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    3046:	f853 0c34 	ldr.w	r0, [r3, #-52]
    304a:	f009 fd96 	bl	cb7a <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    304e:	4641      	mov	r1, r8
    3050:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
    3052:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    3054:	4628      	mov	r0, r5
    3056:	f000 faeb 	bl	3630 <z_shell_cmd_get>
    305a:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    305c:	68a0      	ldr	r0, [r4, #8]
    305e:	f8d8 1000 	ldr.w	r1, [r8]
    3062:	22ff      	movs	r2, #255	; 0xff
    3064:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    3068:	f00a ffbe 	bl	dfe8 <strncpy>
	*str = match->syntax;
    306c:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
    3070:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    3074:	aa18      	add	r2, sp, #96	; 0x60
    3076:	4649      	mov	r1, r9
    3078:	4628      	mov	r0, r5
    307a:	f109 0b01 	add.w	fp, r9, #1
    307e:	f000 fad7 	bl	3630 <z_shell_cmd_get>
		if (match2 == NULL) {
    3082:	2800      	cmp	r0, #0
    3084:	d063      	beq.n	314e <shell_process+0x422>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    3086:	68a3      	ldr	r3, [r4, #8]
    3088:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    308a:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
    308e:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    3090:	f813 cb01 	ldrb.w	ip, [r3], #1
    3094:	5c81      	ldrb	r1, [r0, r2]
    3096:	4561      	cmp	r1, ip
    3098:	d105      	bne.n	30a6 <shell_process+0x37a>
    309a:	b121      	cbz	r1, 30a6 <shell_process+0x37a>
		common++;
    309c:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    309e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    30a2:	428a      	cmp	r2, r1
    30a4:	d1f4      	bne.n	3090 <shell_process+0x364>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    30a6:	b10f      	cbz	r7, 30ac <shell_process+0x380>
    30a8:	42ba      	cmp	r2, r7
    30aa:	db08      	blt.n	30be <shell_process+0x392>
			common = (curr_common < common) ? curr_common : common;
    30ac:	4542      	cmp	r2, r8
			--cnt;
    30ae:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    30b2:	bfa8      	it	ge
    30b4:	4642      	movge	r2, r8
	while (cnt > 1) {
    30b6:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    30b8:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
    30bc:	d047      	beq.n	314e <shell_process+0x422>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    30be:	46d9      	mov	r9, fp
    30c0:	e7d8      	b.n	3074 <shell_process+0x348>
		if (str && match->syntax &&
    30c2:	6800      	ldr	r0, [r0, #0]
    30c4:	2800      	cmp	r0, #0
    30c6:	d0a9      	beq.n	301c <shell_process+0x2f0>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    30c8:	9a06      	ldr	r2, [sp, #24]
    30ca:	4651      	mov	r1, sl
    30cc:	f00a ffc8 	bl	e060 <strncmp>
		if (str && match->syntax &&
    30d0:	2800      	cmp	r0, #0
    30d2:	d0a3      	beq.n	301c <shell_process+0x2f0>
    30d4:	e795      	b.n	3002 <shell_process+0x2d6>
	longest_option += z_shell_strlen(tab);
    30d6:	4658      	mov	r0, fp
    30d8:	f009 fd4f 	bl	cb7a <z_shell_strlen>
    30dc:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    30de:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    30e0:	18c2      	adds	r2, r0, r3
    30e2:	b292      	uxth	r2, r2
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    30e4:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    30e6:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    30e8:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    30ea:	9308      	str	r3, [sp, #32]
			- z_shell_strlen(tab)) / longest_option;
    30ec:	f009 fd45 	bl	cb7a <z_shell_strlen>
    30f0:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    30f2:	4638      	mov	r0, r7
    30f4:	f009 fd41 	bl	cb7a <z_shell_strlen>
    30f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    30fa:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    30fe:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3102:	68a0      	ldr	r0, [r4, #8]
    3104:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    3108:	1a59      	subs	r1, r3, r1
    310a:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    310e:	b292      	uxth	r2, r2
    3110:	fbbc f1f2 	udiv	r1, ip, r2
    3114:	fb02 c211 	mls	r2, r2, r1, ip
    3118:	f10c 0e01 	add.w	lr, ip, #1
    311c:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
    311e:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3122:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    3126:	b95a      	cbnz	r2, 3140 <shell_process+0x414>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    3128:	4a69      	ldr	r2, [pc, #420]	; (32d0 <shell_process+0x5a4>)
    312a:	9700      	str	r7, [sp, #0]
    312c:	465b      	mov	r3, fp
    312e:	2106      	movs	r1, #6
    3130:	4620      	mov	r0, r4
    3132:	f00a f975 	bl	d420 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    3136:	4649      	mov	r1, r9
    3138:	4620      	mov	r0, r4
    313a:	f000 fac7 	bl	36cc <z_shell_op_cursor_horiz_move>
    313e:	e772      	b.n	3026 <shell_process+0x2fa>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    3140:	4a64      	ldr	r2, [pc, #400]	; (32d4 <shell_process+0x5a8>)
    3142:	463b      	mov	r3, r7
    3144:	2106      	movs	r1, #6
    3146:	4620      	mov	r0, r4
    3148:	f00a f96a 	bl	d420 <z_shell_fprintf>
    314c:	e7f3      	b.n	3136 <shell_process+0x40a>
	if (common) {
    314e:	f1b8 0f00 	cmp.w	r8, #0
    3152:	f43f adfb 	beq.w	2d4c <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    3156:	eba8 0207 	sub.w	r2, r8, r7
    315a:	b292      	uxth	r2, r2
    315c:	eb0a 0107 	add.w	r1, sl, r7
    3160:	4620      	mov	r0, r4
    3162:	f00a f99b 	bl	d49c <z_shell_op_completion_insert>
    3166:	e5f1      	b.n	2d4c <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    3168:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    316c:	0799      	lsls	r1, r3, #30
    316e:	f57f aded 	bpl.w	2d4c <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    3172:	2101      	movs	r1, #1
    3174:	f009 fd48 	bl	cc08 <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    3178:	4620      	mov	r0, r4
    317a:	f00a f9ac 	bl	d4d6 <z_shell_op_char_backspace>
    317e:	e5e5      	b.n	2d4c <shell_process+0x20>
    3180:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    3184:	0797      	lsls	r7, r2, #30
    3186:	f57f ade1 	bpl.w	2d4c <shell_process+0x20>
	switch (data) {
    318a:	3b01      	subs	r3, #1
    318c:	2b16      	cmp	r3, #22
    318e:	f63f addd 	bhi.w	2d4c <shell_process+0x20>
    3192:	a201      	add	r2, pc, #4	; (adr r2, 3198 <shell_process+0x46c>)
    3194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3198:	00003381 	.word	0x00003381
    319c:	000031f5 	.word	0x000031f5
    31a0:	000031fd 	.word	0x000031fd
    31a4:	00002e61 	.word	0x00002e61
    31a8:	00003375 	.word	0x00003375
    31ac:	0000321b 	.word	0x0000321b
    31b0:	00002d4d 	.word	0x00002d4d
    31b4:	00002d4d 	.word	0x00002d4d
    31b8:	00002d4d 	.word	0x00002d4d
    31bc:	00002d4d 	.word	0x00002d4d
    31c0:	00003223 	.word	0x00003223
    31c4:	0000322b 	.word	0x0000322b
    31c8:	00002d4d 	.word	0x00002d4d
    31cc:	00003255 	.word	0x00003255
    31d0:	00002d4d 	.word	0x00002d4d
    31d4:	0000325f 	.word	0x0000325f
    31d8:	00002d4d 	.word	0x00002d4d
    31dc:	00002d4d 	.word	0x00002d4d
    31e0:	00002d4d 	.word	0x00002d4d
    31e4:	00002d4d 	.word	0x00002d4d
    31e8:	00003263 	.word	0x00003263
    31ec:	00002d4d 	.word	0x00002d4d
    31f0:	0000328f 	.word	0x0000328f
		z_shell_op_left_arrow(shell);
    31f4:	4620      	mov	r0, r4
    31f6:	f00a f86e 	bl	d2d6 <z_shell_op_left_arrow>
		break;
    31fa:	e5a7      	b.n	2d4c <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    31fc:	4620      	mov	r0, r4
    31fe:	f00a f863 	bl	d2c8 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    3202:	4620      	mov	r0, r4
    3204:	f009 ffb3 	bl	d16e <z_shell_cursor_in_empty_line>
    3208:	b910      	cbnz	r0, 3210 <shell_process+0x4e4>
			z_cursor_next_line_move(shell);
    320a:	6960      	ldr	r0, [r4, #20]
    320c:	f7ff fbb4 	bl	2978 <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    3210:	68a0      	ldr	r0, [r4, #8]
    3212:	2101      	movs	r1, #1
    3214:	f009 fcf8 	bl	cc08 <z_flag_history_exit_set.isra.0>
    3218:	e608      	b.n	2e2c <shell_process+0x100>
		z_shell_op_right_arrow(shell);
    321a:	4620      	mov	r0, r4
    321c:	f00a f863 	bl	d2e6 <z_shell_op_right_arrow>
		break;
    3220:	e594      	b.n	2d4c <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    3222:	4620      	mov	r0, r4
    3224:	f00a f868 	bl	d2f8 <z_shell_op_delete_from_cursor>
		break;
    3228:	e590      	b.n	2d4c <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    322a:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    322e:	069e      	lsls	r6, r3, #26
    3230:	d503      	bpl.n	323a <shell_process+0x50e>
    3232:	4929      	ldr	r1, [pc, #164]	; (32d8 <shell_process+0x5ac>)
    3234:	6960      	ldr	r0, [r4, #20]
    3236:	f009 fca6 	bl	cb86 <z_shell_raw_fprintf>
    323a:	68a3      	ldr	r3, [r4, #8]
    323c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3240:	069d      	lsls	r5, r3, #26
    3242:	d503      	bpl.n	324c <shell_process+0x520>
    3244:	4925      	ldr	r1, [pc, #148]	; (32dc <shell_process+0x5b0>)
    3246:	6960      	ldr	r0, [r4, #20]
    3248:	f009 fc9d 	bl	cb86 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    324c:	4620      	mov	r0, r4
    324e:	f000 fb65 	bl	391c <z_shell_print_prompt_and_cmd>
		break;
    3252:	e57b      	b.n	2d4c <shell_process+0x20>
		history_handle(shell, false);
    3254:	2100      	movs	r1, #0
		history_handle(shell, true);
    3256:	4620      	mov	r0, r4
    3258:	f7ff fb94 	bl	2984 <history_handle>
		break;
    325c:	e576      	b.n	2d4c <shell_process+0x20>
		history_handle(shell, true);
    325e:	2101      	movs	r1, #1
    3260:	e7f9      	b.n	3256 <shell_process+0x52a>
		z_shell_op_cursor_home_move(shell);
    3262:	4620      	mov	r0, r4
    3264:	f00a f82a 	bl	d2bc <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    3268:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    326a:	2300      	movs	r3, #0
    326c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    3270:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    3272:	2101      	movs	r1, #1
    3274:	f009 fcc8 	bl	cc08 <z_flag_history_exit_set.isra.0>
    3278:	68a3      	ldr	r3, [r4, #8]
    327a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    327e:	0698      	lsls	r0, r3, #26
    3280:	f57f ad64 	bpl.w	2d4c <shell_process+0x20>
    3284:	4916      	ldr	r1, [pc, #88]	; (32e0 <shell_process+0x5b4>)
    3286:	6960      	ldr	r0, [r4, #20]
    3288:	f009 fc7d 	bl	cb86 <z_shell_raw_fprintf>
    328c:	e55e      	b.n	2d4c <shell_process+0x20>
		z_shell_op_word_remove(shell);
    328e:	4620      	mov	r0, r4
    3290:	f000 fa78 	bl	3784 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    3294:	68a0      	ldr	r0, [r4, #8]
    3296:	2101      	movs	r1, #1
    3298:	f009 fcb6 	bl	cc08 <z_flag_history_exit_set.isra.0>
		break;
    329c:	e556      	b.n	2d4c <shell_process+0x20>
			if (data == '[') {
    329e:	2b5b      	cmp	r3, #91	; 0x5b
    32a0:	d101      	bne.n	32a6 <shell_process+0x57a>
	shell->ctx->receive_state = state;
    32a2:	2302      	movs	r3, #2
    32a4:	e5e1      	b.n	2e6a <shell_process+0x13e>
	return sh->ctx->cfg.flags.echo == 1;
    32a6:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    32aa:	0791      	lsls	r1, r2, #30
    32ac:	d506      	bpl.n	32bc <shell_process+0x590>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    32ae:	2b62      	cmp	r3, #98	; 0x62
    32b0:	d108      	bne.n	32c4 <shell_process+0x598>
		z_shell_op_cursor_word_move(shell, -1);
    32b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    32b6:	4620      	mov	r0, r4
    32b8:	f009 ffc4 	bl	d244 <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    32bc:	68a3      	ldr	r3, [r4, #8]
    32be:	2200      	movs	r2, #0
    32c0:	715a      	strb	r2, [r3, #5]
}
    32c2:	e543      	b.n	2d4c <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    32c4:	2b66      	cmp	r3, #102	; 0x66
    32c6:	d1f9      	bne.n	32bc <shell_process+0x590>
		z_shell_op_cursor_word_move(shell, 1);
    32c8:	2101      	movs	r1, #1
    32ca:	e7f4      	b.n	32b6 <shell_process+0x58a>
    32cc:	000101b5 	.word	0x000101b5
    32d0:	00010b56 	.word	0x00010b56
    32d4:	000107f3 	.word	0x000107f3
    32d8:	0000f7f5 	.word	0x0000f7f5
    32dc:	0000f7fa 	.word	0x0000f7fa
    32e0:	0000f7f0 	.word	0x0000f7f0
	shell->ctx->receive_state = state;
    32e4:	2200      	movs	r2, #0
    32e6:	7142      	strb	r2, [r0, #5]
    32e8:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    32ec:	0792      	lsls	r2, r2, #30
    32ee:	f57f ad2d 	bpl.w	2d4c <shell_process+0x20>
			switch (data) {
    32f2:	3b31      	subs	r3, #49	; 0x31
    32f4:	2b1b      	cmp	r3, #27
    32f6:	f63f ad29 	bhi.w	2d4c <shell_process+0x20>
    32fa:	a201      	add	r2, pc, #4	; (adr r2, 3300 <shell_process+0x5d4>)
    32fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3300:	0000337d 	.word	0x0000337d
    3304:	00003389 	.word	0x00003389
    3308:	0000339b 	.word	0x0000339b
    330c:	00003371 	.word	0x00003371
    3310:	00002d4d 	.word	0x00002d4d
    3314:	00002d4d 	.word	0x00002d4d
    3318:	00002d4d 	.word	0x00002d4d
    331c:	00002d4d 	.word	0x00002d4d
    3320:	00002d4d 	.word	0x00002d4d
    3324:	00002d4d 	.word	0x00002d4d
    3328:	00002d4d 	.word	0x00002d4d
    332c:	00002d4d 	.word	0x00002d4d
    3330:	00002d4d 	.word	0x00002d4d
    3334:	00002d4d 	.word	0x00002d4d
    3338:	00002d4d 	.word	0x00002d4d
    333c:	00002d4d 	.word	0x00002d4d
    3340:	0000325f 	.word	0x0000325f
    3344:	00003255 	.word	0x00003255
    3348:	0000321b 	.word	0x0000321b
    334c:	000031f5 	.word	0x000031f5
    3350:	00002d4d 	.word	0x00002d4d
    3354:	00003375 	.word	0x00003375
    3358:	00002d4d 	.word	0x00002d4d
    335c:	00003381 	.word	0x00003381
    3360:	00002d4d 	.word	0x00002d4d
    3364:	00002d4d 	.word	0x00002d4d
    3368:	00002d4d 	.word	0x00002d4d
    336c:	0000338d 	.word	0x0000338d
	shell->ctx->receive_state = state;
    3370:	2303      	movs	r3, #3
    3372:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
    3374:	4620      	mov	r0, r4
    3376:	f009 ffa7 	bl	d2c8 <z_shell_op_cursor_end_move>
		break;
    337a:	e4e7      	b.n	2d4c <shell_process+0x20>
	shell->ctx->receive_state = state;
    337c:	2303      	movs	r3, #3
    337e:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
    3380:	4620      	mov	r0, r4
    3382:	f009 ff9b 	bl	d2bc <z_shell_op_cursor_home_move>
		break;
    3386:	e4e1      	b.n	2d4c <shell_process+0x20>
	shell->ctx->receive_state = state;
    3388:	2303      	movs	r3, #3
    338a:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    338c:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    3390:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    3394:	f081 0101 	eor.w	r1, r1, #1
    3398:	e5ee      	b.n	2f78 <shell_process+0x24c>
	shell->ctx->receive_state = state;
    339a:	2303      	movs	r3, #3
    339c:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.echo == 1;
    339e:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    33a2:	079b      	lsls	r3, r3, #30
    33a4:	f57f acd2 	bpl.w	2d4c <shell_process+0x20>
    33a8:	e55a      	b.n	2e60 <shell_process+0x134>
	shell->ctx->receive_state = state;
    33aa:	2300      	movs	r3, #0
    33ac:	e55d      	b.n	2e6a <shell_process+0x13e>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    33ae:	2900      	cmp	r1, #0
    33b0:	f43f ad95 	beq.w	2ede <shell_process+0x1b2>
    33b4:	e5e4      	b.n	2f80 <shell_process+0x254>
    33b6:	bf00      	nop

000033b8 <shell_init>:
{
    33b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    33bc:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    33be:	6880      	ldr	r0, [r0, #8]
{
    33c0:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    33c2:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    33c6:	b089      	sub	sp, #36	; 0x24
    33c8:	4615      	mov	r5, r2
    33ca:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    33cc:	2900      	cmp	r1, #0
    33ce:	d161      	bne.n	3494 <shell_init+0xdc>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    33d0:	f44f 7244 	mov.w	r2, #784	; 0x310
    33d4:	f00a fe89 	bl	e0ea <memset>
	sh->ctx->prompt = sh->default_prompt;
    33d8:	68a3      	ldr	r3, [r4, #8]
    33da:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
    33dc:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
    33de:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    33e0:	f00a fb84 	bl	daec <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    33e4:	68a0      	ldr	r0, [r4, #8]
    33e6:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    33ea:	f00b fbce 	bl	eb8a <z_impl_k_mutex_init>
    33ee:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    33f2:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    33f6:	68a0      	ldr	r0, [r4, #8]
    33f8:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    33fa:	f00b ff8d 	bl	f318 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    33fe:	68a0      	ldr	r0, [r4, #8]
    3400:	2200      	movs	r2, #0
    3402:	1983      	adds	r3, r0, r6
    3404:	2101      	movs	r1, #1
    3406:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    3408:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    340a:	f00b ff68 	bl	f2de <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    340e:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    3412:	f109 0914 	add.w	r9, r9, #20
    3416:	d1ee      	bne.n	33f6 <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    3418:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    341a:	68a0      	ldr	r0, [r4, #8]
    341c:	2600      	movs	r6, #0
    341e:	2102      	movs	r1, #2
    3420:	601e      	str	r6, [r3, #0]
    3422:	f500 7019 	add.w	r0, r0, #612	; 0x264
    3426:	f009 fb74 	bl	cb12 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    342a:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
    342c:	4a1b      	ldr	r2, [pc, #108]	; (349c <shell_init+0xe4>)
    342e:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    3430:	6818      	ldr	r0, [r3, #0]
    3432:	f009 fba2 	bl	cb7a <z_shell_strlen>
    3436:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3438:	4a19      	ldr	r2, [pc, #100]	; (34a0 <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    343a:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
    343e:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
    3440:	f366 0582 	bfi	r5, r6, #2, #1
    3444:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3448:	6803      	ldr	r3, [r0, #0]
    344a:	4641      	mov	r1, r8
    344c:	681d      	ldr	r5, [r3, #0]
    344e:	4623      	mov	r3, r4
    3450:	47a8      	blx	r5
	if (ret == 0) {
    3452:	4605      	mov	r5, r0
    3454:	b9d0      	cbnz	r0, 348c <shell_init+0xd4>
	shell->ctx->state = state;
    3456:	68a3      	ldr	r3, [r4, #8]
    3458:	2201      	movs	r2, #1
    345a:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
    345c:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3460:	2200      	movs	r2, #0
    3462:	2300      	movs	r3, #0
    3464:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3468:	230e      	movs	r3, #14
    346a:	9303      	str	r3, [sp, #12]
    346c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    346e:	9504      	str	r5, [sp, #16]
    3470:	e9cd 7301 	strd	r7, r3, [sp, #4]
    3474:	9400      	str	r4, [sp, #0]
    3476:	4b0b      	ldr	r3, [pc, #44]	; (34a4 <shell_init+0xec>)
    3478:	f44f 6200 	mov.w	r2, #2048	; 0x800
    347c:	f007 f8f8 	bl	a670 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    3480:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    3482:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
    3484:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
    3488:	f007 f848 	bl	a51c <z_impl_k_thread_name_set>
}
    348c:	4628      	mov	r0, r5
    348e:	b009      	add	sp, #36	; 0x24
    3490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    3494:	f06f 0577 	mvn.w	r5, #119	; 0x77
    3498:	e7f8      	b.n	348c <shell_init+0xd4>
    349a:	bf00      	nop
    349c:	00500018 	.word	0x00500018
    34a0:	0000cba5 	.word	0x0000cba5
    34a4:	000034f5 	.word	0x000034f5

000034a8 <shell_start>:
{
    34a8:	b510      	push	{r4, lr}
    34aa:	4604      	mov	r4, r0
	return shell->ctx->state;
    34ac:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    34ae:	7903      	ldrb	r3, [r0, #4]
    34b0:	2b01      	cmp	r3, #1
    34b2:	d119      	bne.n	34e8 <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    34b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34bc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    34c0:	f009 fb6e 	bl	cba0 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    34c4:	2108      	movs	r1, #8
    34c6:	4620      	mov	r0, r4
    34c8:	f000 f91e 	bl	3708 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    34cc:	4908      	ldr	r1, [pc, #32]	; (34f0 <shell_start+0x48>)
    34ce:	6960      	ldr	r0, [r4, #20]
    34d0:	f009 fb59 	bl	cb86 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    34d4:	4620      	mov	r0, r4
    34d6:	f7ff fc05 	bl	2ce4 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    34da:	68a0      	ldr	r0, [r4, #8]
    34dc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    34e0:	f009 fbab 	bl	cc3a <k_mutex_unlock.isra.0>
	return 0;
    34e4:	2000      	movs	r0, #0
}
    34e6:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    34e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    34ec:	e7fb      	b.n	34e6 <shell_start+0x3e>
    34ee:	bf00      	nop
    34f0:	000106d3 	.word	0x000106d3

000034f4 <shell_thread>:
{
    34f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34f8:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    34fa:	6840      	ldr	r0, [r0, #4]
    34fc:	6803      	ldr	r3, [r0, #0]
{
    34fe:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    3500:	689b      	ldr	r3, [r3, #8]
    3502:	2100      	movs	r1, #0
{
    3504:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    3506:	4798      	blx	r3
	if (err != 0) {
    3508:	2800      	cmp	r0, #0
    350a:	d14c      	bne.n	35a6 <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    350c:	b126      	cbz	r6, 3518 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
    350e:	69e0      	ldr	r0, [r4, #28]
    3510:	462a      	mov	r2, r5
    3512:	4621      	mov	r1, r4
    3514:	f00a f8b3 	bl	d67e <z_shell_log_backend_enable>
	err = shell_start(shell);
    3518:	4620      	mov	r0, r4
    351a:	f7ff ffc5 	bl	34a8 <shell_start>
	if (err != 0) {
    351e:	2800      	cmp	r0, #0
    3520:	d141      	bne.n	35a6 <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    3522:	f8df 8088 	ldr.w	r8, [pc, #136]	; 35ac <shell_thread+0xb8>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    3526:	4f22      	ldr	r7, [pc, #136]	; (35b0 <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    3528:	4e22      	ldr	r6, [pc, #136]	; (35b4 <shell_thread+0xc0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    352a:	68a0      	ldr	r0, [r4, #8]
    352c:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    3530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3538:	2103      	movs	r1, #3
    353a:	f008 f8f3 	bl	b724 <z_impl_k_poll>
		if (err != 0) {
    353e:	4605      	mov	r5, r0
    3540:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    354a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    354e:	b175      	cbz	r5, 356e <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3550:	f009 fb26 	bl	cba0 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    3554:	4620      	mov	r0, r4
    3556:	462b      	mov	r3, r5
    3558:	4a17      	ldr	r2, [pc, #92]	; (35b8 <shell_thread+0xc4>)
    355a:	2101      	movs	r1, #1
    355c:	f009 ff60 	bl	d420 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    3560:	68a0      	ldr	r0, [r4, #8]
}
    3562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    3566:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    356a:	f009 bb66 	b.w	cc3a <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    356e:	f009 fb17 	bl	cba0 <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
    3572:	6860      	ldr	r0, [r4, #4]
    3574:	6803      	ldr	r3, [r0, #0]
    3576:	695b      	ldr	r3, [r3, #20]
    3578:	b103      	cbz	r3, 357c <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
    357a:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    357c:	4642      	mov	r2, r8
    357e:	4620      	mov	r0, r4
    3580:	2102      	movs	r1, #2
    3582:	f009 fae4 	bl	cb4e <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    3586:	463a      	mov	r2, r7
    3588:	4620      	mov	r0, r4
    358a:	2100      	movs	r1, #0
    358c:	f009 fadf 	bl	cb4e <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    3590:	4620      	mov	r0, r4
    3592:	4632      	mov	r2, r6
    3594:	2101      	movs	r1, #1
    3596:	f009 fada 	bl	cb4e <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    359a:	68a0      	ldr	r0, [r4, #8]
    359c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    35a0:	f009 fb4b 	bl	cc3a <k_mutex_unlock.isra.0>
    35a4:	e7c1      	b.n	352a <shell_thread+0x36>
}
    35a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35aa:	bf00      	nop
    35ac:	0000cbb9 	.word	0x0000cbb9
    35b0:	00002d2d 	.word	0x00002d2d
    35b4:	0000cc3f 	.word	0x0000cc3f
    35b8:	00010b5c 	.word	0x00010b5c

000035bc <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    35bc:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    35be:	4a0d      	ldr	r2, [pc, #52]	; (35f4 <cmd_help+0x38>)
{
    35c0:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    35c2:	2108      	movs	r1, #8
    35c4:	f009 fb9c 	bl	cd00 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    35c8:	4620      	mov	r0, r4
    35ca:	4a0b      	ldr	r2, [pc, #44]	; (35f8 <cmd_help+0x3c>)
    35cc:	2108      	movs	r1, #8
    35ce:	f009 fb97 	bl	cd00 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    35d2:	4620      	mov	r0, r4
    35d4:	4a09      	ldr	r2, [pc, #36]	; (35fc <cmd_help+0x40>)
    35d6:	2108      	movs	r1, #8
    35d8:	f009 fb92 	bl	cd00 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    35dc:	4620      	mov	r0, r4
    35de:	4a08      	ldr	r2, [pc, #32]	; (3600 <cmd_help+0x44>)
    35e0:	2108      	movs	r1, #8
    35e2:	f009 fb8d 	bl	cd00 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    35e6:	4620      	mov	r0, r4
    35e8:	4a06      	ldr	r2, [pc, #24]	; (3604 <cmd_help+0x48>)
    35ea:	2100      	movs	r1, #0
    35ec:	f000 f9b4 	bl	3958 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    35f0:	2000      	movs	r0, #0
    35f2:	bd10      	pop	{r4, pc}
    35f4:	00010b73 	.word	0x00010b73
    35f8:	00010bb1 	.word	0x00010bb1
    35fc:	00010c10 	.word	0x00010c10
    3600:	00010c64 	.word	0x00010c64
    3604:	00010cfe 	.word	0x00010cfe

00003608 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    3608:	b510      	push	{r4, lr}
    360a:	4604      	mov	r4, r0
    360c:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
    360e:	460a      	mov	r2, r1
    3610:	4601      	mov	r1, r0
    3612:	4806      	ldr	r0, [pc, #24]	; (362c <z_shell_fprintf_fmt+0x24>)
    3614:	f7fd fa90 	bl	b38 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
    3618:	6923      	ldr	r3, [r4, #16]
    361a:	791b      	ldrb	r3, [r3, #4]
    361c:	b123      	cbz	r3, 3628 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    361e:	4620      	mov	r0, r4
	}
}
    3620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    3624:	f009 bb7c 	b.w	cd20 <z_shell_fprintf_buffer_flush>
}
    3628:	bd10      	pop	{r4, pc}
    362a:	bf00      	nop
    362c:	0000cd39 	.word	0x0000cd39

00003630 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    3630:	b510      	push	{r4, lr}
    3632:	460b      	mov	r3, r1
    3634:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    3636:	b950      	cbnz	r0, 364e <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
    3638:	490e      	ldr	r1, [pc, #56]	; (3674 <z_shell_cmd_get+0x44>)
    363a:	4a0f      	ldr	r2, [pc, #60]	; (3678 <z_shell_cmd_get+0x48>)
    363c:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    363e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    3642:	d20f      	bcs.n	3664 <z_shell_cmd_get+0x34>
    3644:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    3648:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    364a:	4620      	mov	r0, r4
    364c:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    364e:	6881      	ldr	r1, [r0, #8]
    3650:	b141      	cbz	r1, 3664 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
    3652:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
    3654:	7809      	ldrb	r1, [r1, #0]
    3656:	b139      	cbz	r1, 3668 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    3658:	4618      	mov	r0, r3
    365a:	4621      	mov	r1, r4
    365c:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    365e:	6823      	ldr	r3, [r4, #0]
    3660:	2b00      	cmp	r3, #0
    3662:	d1f2      	bne.n	364a <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    3664:	2400      	movs	r4, #0
    3666:	e7f0      	b.n	364a <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    3668:	2014      	movs	r0, #20
    366a:	4343      	muls	r3, r0
    366c:	18d4      	adds	r4, r2, r3
    366e:	58d3      	ldr	r3, [r2, r3]
    3670:	e7f6      	b.n	3660 <z_shell_cmd_get+0x30>
    3672:	bf00      	nop
    3674:	0000f770 	.word	0x0000f770
    3678:	0000f7c8 	.word	0x0000f7c8

0000367c <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    367c:	6883      	ldr	r3, [r0, #8]
    367e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    3682:	069b      	lsls	r3, r3, #26
    3684:	d503      	bpl.n	368e <z_clear_eos+0x12>
    3686:	4902      	ldr	r1, [pc, #8]	; (3690 <z_clear_eos+0x14>)
    3688:	6940      	ldr	r0, [r0, #20]
    368a:	f009 bd4f 	b.w	d12c <z_shell_raw_fprintf>
}
    368e:	4770      	bx	lr
    3690:	0000f800 	.word	0x0000f800

00003694 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3694:	4901      	ldr	r1, [pc, #4]	; (369c <z_cursor_next_line_move.isra.0+0x8>)
    3696:	f009 bd49 	b.w	d12c <z_shell_raw_fprintf>
    369a:	bf00      	nop
    369c:	000106d4 	.word	0x000106d4

000036a0 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    36a0:	1e0a      	subs	r2, r1, #0
    36a2:	dc0d      	bgt.n	36c0 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    36a4:	d00e      	beq.n	36c4 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    36a6:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    36a8:	6881      	ldr	r1, [r0, #8]
    36aa:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    36ae:	0689      	lsls	r1, r1, #26
    36b0:	d508      	bpl.n	36c4 <z_shell_op_cursor_vert_move+0x24>
    36b2:	2a00      	cmp	r2, #0
    36b4:	4904      	ldr	r1, [pc, #16]	; (36c8 <z_shell_op_cursor_vert_move+0x28>)
    36b6:	6940      	ldr	r0, [r0, #20]
    36b8:	bfb8      	it	lt
    36ba:	4252      	neglt	r2, r2
    36bc:	f009 bd36 	b.w	d12c <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    36c0:	2341      	movs	r3, #65	; 0x41
    36c2:	e7f1      	b.n	36a8 <z_shell_op_cursor_vert_move+0x8>
}
    36c4:	4770      	bx	lr
    36c6:	bf00      	nop
    36c8:	00010d2d 	.word	0x00010d2d

000036cc <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    36cc:	1e0a      	subs	r2, r1, #0
    36ce:	dc0d      	bgt.n	36ec <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    36d0:	d00e      	beq.n	36f0 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    36d2:	2344      	movs	r3, #68	; 0x44
    36d4:	6881      	ldr	r1, [r0, #8]
    36d6:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    36da:	0689      	lsls	r1, r1, #26
    36dc:	d508      	bpl.n	36f0 <z_shell_op_cursor_horiz_move+0x24>
    36de:	2a00      	cmp	r2, #0
    36e0:	4904      	ldr	r1, [pc, #16]	; (36f4 <z_shell_op_cursor_horiz_move+0x28>)
    36e2:	6940      	ldr	r0, [r0, #20]
    36e4:	bfb8      	it	lt
    36e6:	4252      	neglt	r2, r2
    36e8:	f009 bd20 	b.w	d12c <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    36ec:	2343      	movs	r3, #67	; 0x43
    36ee:	e7f1      	b.n	36d4 <z_shell_op_cursor_horiz_move+0x8>
}
    36f0:	4770      	bx	lr
    36f2:	bf00      	nop
    36f4:	00010d2d 	.word	0x00010d2d

000036f8 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    36f8:	6882      	ldr	r2, [r0, #8]
    36fa:	4902      	ldr	r1, [pc, #8]	; (3704 <z_shell_print_cmd+0xc>)
    36fc:	6940      	ldr	r0, [r0, #20]
    36fe:	3242      	adds	r2, #66	; 0x42
    3700:	f009 bd14 	b.w	d12c <z_shell_raw_fprintf>
    3704:	000107f3 	.word	0x000107f3

00003708 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    3708:	2908      	cmp	r1, #8
{
    370a:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    370c:	d816      	bhi.n	373c <z_shell_vt100_color_set+0x34>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    370e:	6883      	ldr	r3, [r0, #8]
    3710:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    3714:	4291      	cmp	r1, r2
    3716:	d011      	beq.n	373c <z_shell_vt100_color_set+0x34>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;

	if (color != SHELL_NORMAL) {
    3718:	2a08      	cmp	r2, #8
	shell->ctx->vt100_ctx.col.col = color;
    371a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    371e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (color != SHELL_NORMAL) {
    3722:	d005      	beq.n	3730 <z_shell_vt100_color_set+0x28>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    3724:	0699      	lsls	r1, r3, #26
    3726:	d509      	bpl.n	373c <z_shell_vt100_color_set+0x34>
    3728:	4905      	ldr	r1, [pc, #20]	; (3740 <z_shell_vt100_color_set+0x38>)
    372a:	6940      	ldr	r0, [r0, #20]
    372c:	f009 bcfe 	b.w	d12c <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    3730:	069b      	lsls	r3, r3, #26
    3732:	d503      	bpl.n	373c <z_shell_vt100_color_set+0x34>
    3734:	4903      	ldr	r1, [pc, #12]	; (3744 <z_shell_vt100_color_set+0x3c>)
    3736:	6940      	ldr	r0, [r0, #20]
    3738:	f009 bcf8 	b.w	d12c <z_shell_raw_fprintf>
	}
}
    373c:	4770      	bx	lr
    373e:	bf00      	nop
    3740:	00010d34 	.word	0x00010d34
    3744:	0000f805 	.word	0x0000f805

00003748 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    3748:	b538      	push	{r3, r4, r5, lr}
    374a:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    374c:	7809      	ldrb	r1, [r1, #0]
{
    374e:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    3750:	f7ff ffda 	bl	3708 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    3754:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    3756:	2a07      	cmp	r2, #7
    3758:	d810      	bhi.n	377c <z_shell_vt100_colors_restore+0x34>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    375a:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    375c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    3760:	4291      	cmp	r1, r2
    3762:	d00b      	beq.n	377c <z_shell_vt100_colors_restore+0x34>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    3764:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    3768:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    376c:	069b      	lsls	r3, r3, #26
    376e:	d505      	bpl.n	377c <z_shell_vt100_colors_restore+0x34>
    3770:	6960      	ldr	r0, [r4, #20]
    3772:	4903      	ldr	r1, [pc, #12]	; (3780 <z_shell_vt100_colors_restore+0x38>)
}
    3774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    3778:	f009 bcd8 	b.w	d12c <z_shell_raw_fprintf>
}
    377c:	bd38      	pop	{r3, r4, r5, pc}
    377e:	bf00      	nop
    3780:	00010d3d 	.word	0x00010d3d

00003784 <z_shell_op_word_remove>:
{
    3784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3786:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    3788:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    378a:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    378c:	2a00      	cmp	r2, #0
    378e:	d04e      	beq.n	382e <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3790:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
    3792:	2800      	cmp	r0, #0
    3794:	d04b      	beq.n	382e <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3796:	3041      	adds	r0, #65	; 0x41
    3798:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    379a:	f103 0642 	add.w	r6, r3, #66	; 0x42
    379e:	4603      	mov	r3, r0
    37a0:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    37a2:	42b3      	cmp	r3, r6
    37a4:	b2a4      	uxth	r4, r4
    37a6:	4619      	mov	r1, r3
    37a8:	d30d      	bcc.n	37c6 <z_shell_op_word_remove+0x42>
    37aa:	f811 7901 	ldrb.w	r7, [r1], #-1
    37ae:	2f20      	cmp	r7, #32
    37b0:	d03b      	beq.n	382a <z_shell_op_word_remove+0xa6>
    37b2:	4619      	mov	r1, r3
    37b4:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    37b6:	7808      	ldrb	r0, [r1, #0]
    37b8:	2820      	cmp	r0, #32
    37ba:	d004      	beq.n	37c6 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
    37bc:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    37be:	429e      	cmp	r6, r3
		++chars_to_delete;
    37c0:	b2a4      	uxth	r4, r4
		--str;
    37c2:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    37c4:	d9f5      	bls.n	37b2 <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    37c6:	1c63      	adds	r3, r4, #1
    37c8:	1c4e      	adds	r6, r1, #1
    37ca:	1b12      	subs	r2, r2, r4
    37cc:	4419      	add	r1, r3
    37ce:	4630      	mov	r0, r6
    37d0:	f00a fc68 	bl	e0a4 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    37d4:	68a9      	ldr	r1, [r5, #8]
    37d6:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    37d8:	1b12      	subs	r2, r2, r4
    37da:	b292      	uxth	r2, r2
    37dc:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    37de:	440a      	add	r2, r1
    37e0:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
    37e2:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    37e4:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    37e8:	b209      	sxth	r1, r1
    37ea:	4628      	mov	r0, r5
    37ec:	f009 fd06 	bl	d1fc <z_shell_op_cursor_move>
    37f0:	68ab      	ldr	r3, [r5, #8]
    37f2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    37f6:	069a      	lsls	r2, r3, #26
    37f8:	d503      	bpl.n	3802 <z_shell_op_word_remove+0x7e>
    37fa:	490d      	ldr	r1, [pc, #52]	; (3830 <z_shell_op_word_remove+0xac>)
    37fc:	6968      	ldr	r0, [r5, #20]
    37fe:	f009 fc95 	bl	d12c <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    3802:	4633      	mov	r3, r6
    3804:	4a0b      	ldr	r2, [pc, #44]	; (3834 <z_shell_op_word_remove+0xb0>)
    3806:	2108      	movs	r1, #8
    3808:	4628      	mov	r0, r5
    380a:	f009 fe09 	bl	d420 <z_shell_fprintf>
	z_clear_eos(shell);
    380e:	4628      	mov	r0, r5
    3810:	f7ff ff34 	bl	367c <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3814:	68ab      	ldr	r3, [r5, #8]
    3816:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    381a:	069b      	lsls	r3, r3, #26
    381c:	d507      	bpl.n	382e <z_shell_op_word_remove+0xaa>
    381e:	6968      	ldr	r0, [r5, #20]
    3820:	4905      	ldr	r1, [pc, #20]	; (3838 <z_shell_op_word_remove+0xb4>)
}
    3822:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3826:	f009 bc81 	b.w	d12c <z_shell_raw_fprintf>
    382a:	460b      	mov	r3, r1
    382c:	e7b8      	b.n	37a0 <z_shell_op_word_remove+0x1c>
    382e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3830:	0000f80a 	.word	0x0000f80a
    3834:	000107f3 	.word	0x000107f3
    3838:	0000f80e 	.word	0x0000f80e

0000383c <reprint_from_cursor>:
{
    383c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3840:	4604      	mov	r4, r0
    3842:	460d      	mov	r5, r1
	if (data_removed) {
    3844:	4617      	mov	r7, r2
    3846:	b10a      	cbz	r2, 384c <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    3848:	f7ff ff18 	bl	367c <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    384c:	68a3      	ldr	r3, [r4, #8]
    384e:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3852:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(shell)) {
    3854:	0752      	lsls	r2, r2, #29
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3856:	f100 0042 	add.w	r0, r0, #66	; 0x42
    385a:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
    385c:	d51f      	bpl.n	389e <reprint_from_cursor+0x62>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    385e:	4618      	mov	r0, r3
    3860:	f00a fbe2 	bl	e028 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    3864:	f8df 8044 	ldr.w	r8, [pc, #68]	; 38ac <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3868:	4606      	mov	r6, r0
		while (len--) {
    386a:	b996      	cbnz	r6, 3892 <reprint_from_cursor+0x56>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    386c:	68a3      	ldr	r3, [r4, #8]
    386e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    3870:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    3872:	4620      	mov	r0, r4
    3874:	f009 fc67 	bl	d146 <full_line_cmd>
    3878:	b120      	cbz	r0, 3884 <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    387a:	b107      	cbz	r7, 387e <reprint_from_cursor+0x42>
    387c:	b115      	cbz	r5, 3884 <reprint_from_cursor+0x48>
			z_cursor_next_line_move(shell);
    387e:	6960      	ldr	r0, [r4, #20]
    3880:	f7ff ff08 	bl	3694 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    3884:	4269      	negs	r1, r5
    3886:	4620      	mov	r0, r4
    3888:	b209      	sxth	r1, r1
}
    388a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    388e:	f009 bcb5 	b.w	d1fc <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    3892:	6960      	ldr	r0, [r4, #20]
    3894:	4641      	mov	r1, r8
    3896:	f009 fc49 	bl	d12c <z_shell_raw_fprintf>
    389a:	3e01      	subs	r6, #1
    389c:	e7e5      	b.n	386a <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    389e:	4a04      	ldr	r2, [pc, #16]	; (38b0 <reprint_from_cursor+0x74>)
    38a0:	2108      	movs	r1, #8
    38a2:	4620      	mov	r0, r4
    38a4:	f009 fdbc 	bl	d420 <z_shell_fprintf>
    38a8:	e7e0      	b.n	386c <reprint_from_cursor+0x30>
    38aa:	bf00      	nop
    38ac:	00011995 	.word	0x00011995
    38b0:	000107f3 	.word	0x000107f3

000038b4 <z_shell_op_char_insert>:
{
    38b4:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    38b6:	6883      	ldr	r3, [r0, #8]
    38b8:	f88d 1007 	strb.w	r1, [sp, #7]
    38bc:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    38c0:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    38c2:	07d0      	lsls	r0, r2, #31
    38c4:	d521      	bpl.n	390a <z_shell_op_char_insert+0x56>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    38c6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    38c8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    38ca:	428a      	cmp	r2, r1
    38cc:	d01d      	beq.n	390a <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    38ce:	1c48      	adds	r0, r1, #1
    38d0:	4419      	add	r1, r3
		char_replace(shell, data);
    38d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    38d6:	87d8      	strh	r0, [r3, #62]	; 0x3e
    38d8:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    38dc:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    38e0:	0789      	lsls	r1, r1, #30
    38e2:	d510      	bpl.n	3906 <z_shell_op_char_insert+0x52>
	return sh->ctx->cfg.flags.obscure == 1;
    38e4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    38e8:	6960      	ldr	r0, [r4, #20]
    38ea:	490b      	ldr	r1, [pc, #44]	; (3918 <z_shell_op_char_insert+0x64>)
		data = '*';
    38ec:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    38f0:	bf18      	it	ne
    38f2:	222a      	movne	r2, #42	; 0x2a
    38f4:	f009 fc1a 	bl	d12c <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    38f8:	4620      	mov	r0, r4
    38fa:	f009 fc38 	bl	d16e <z_shell_cursor_in_empty_line>
    38fe:	b110      	cbz	r0, 3906 <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
    3900:	6960      	ldr	r0, [r4, #20]
    3902:	f7ff fec7 	bl	3694 <z_cursor_next_line_move.isra.0>
}
    3906:	b002      	add	sp, #8
    3908:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    390a:	2201      	movs	r2, #1
    390c:	f10d 0107 	add.w	r1, sp, #7
    3910:	4620      	mov	r0, r4
    3912:	f009 fd92 	bl	d43a <data_insert>
}
    3916:	e7f6      	b.n	3906 <z_shell_op_char_insert+0x52>
    3918:	00010d31 	.word	0x00010d31

0000391c <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    391c:	6883      	ldr	r3, [r0, #8]
    391e:	4a0a      	ldr	r2, [pc, #40]	; (3948 <z_shell_print_prompt_and_cmd+0x2c>)
    3920:	681b      	ldr	r3, [r3, #0]
{
    3922:	b510      	push	{r4, lr}
    3924:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    3926:	2102      	movs	r1, #2
    3928:	f009 fd7a 	bl	d420 <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    392c:	68a3      	ldr	r3, [r4, #8]
    392e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    3932:	079b      	lsls	r3, r3, #30
    3934:	d507      	bpl.n	3946 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    3936:	4620      	mov	r0, r4
    3938:	f7ff fede 	bl	36f8 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    393c:	4620      	mov	r0, r4
}
    393e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    3942:	f009 bc38 	b.w	d1b6 <z_shell_op_cursor_position_synchronize>
}
    3946:	bd10      	pop	{r4, pc}
    3948:	000107f3 	.word	0x000107f3

0000394c <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    394c:	4901      	ldr	r1, [pc, #4]	; (3954 <z_cursor_next_line_move.isra.0+0x8>)
    394e:	f009 bf1e 	b.w	d78e <z_shell_raw_fprintf>
    3952:	bf00      	nop
    3954:	000106d4 	.word	0x000106d4

00003958 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    3958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    395c:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    395e:	2100      	movs	r1, #0
{
    3960:	b08d      	sub	sp, #52	; 0x34
    3962:	4604      	mov	r4, r0
    3964:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    3966:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3968:	aa07      	add	r2, sp, #28
    396a:	4630      	mov	r0, r6
    396c:	f101 0801 	add.w	r8, r1, #1
    3970:	f7ff fe5e 	bl	3630 <z_shell_cmd_get>
    3974:	b9a0      	cbnz	r0, 39a0 <z_shell_help_subcmd_print+0x48>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    3976:	b185      	cbz	r5, 399a <z_shell_help_subcmd_print+0x42>
		return;
	}

	if (description != NULL) {
    3978:	b127      	cbz	r7, 3984 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    397a:	463a      	mov	r2, r7
    397c:	2108      	movs	r1, #8
    397e:	4620      	mov	r0, r4
    3980:	f009 fd4e 	bl	d420 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3984:	4f1e      	ldr	r7, [pc, #120]	; (3a00 <z_shell_help_subcmd_print+0xa8>)
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    3986:	f8df 907c 	ldr.w	r9, [pc, #124]	; 3a04 <z_shell_help_subcmd_print+0xac>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    398a:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    398c:	aa07      	add	r2, sp, #28
    398e:	4630      	mov	r0, r6
    3990:	f101 0801 	add.w	r8, r1, #1
    3994:	f7ff fe4c 	bl	3630 <z_shell_cmd_get>
    3998:	b960      	cbnz	r0, 39b4 <z_shell_help_subcmd_print+0x5c>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    399a:	b00d      	add	sp, #52	; 0x34
    399c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    39a0:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    39a2:	b110      	cbz	r0, 39aa <z_shell_help_subcmd_print+0x52>
    39a4:	f00a fb40 	bl	e028 <strlen>
    39a8:	b280      	uxth	r0, r0
    39aa:	4285      	cmp	r5, r0
    39ac:	bf38      	it	cc
    39ae:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    39b0:	4641      	mov	r1, r8
    39b2:	e7d9      	b.n	3968 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    39b4:	6803      	ldr	r3, [r0, #0]
    39b6:	f8d0 a004 	ldr.w	sl, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    39ba:	4811      	ldr	r0, [pc, #68]	; (3a00 <z_shell_help_subcmd_print+0xa8>)
		help_item_print(shell, entry->syntax, longest, entry->help);
    39bc:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    39be:	f00a fb33 	bl	e028 <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    39c2:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    39c4:	4683      	mov	fp, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    39c6:	b183      	cbz	r3, 39ea <z_shell_help_subcmd_print+0x92>
    39c8:	781a      	ldrb	r2, [r3, #0]
    39ca:	b172      	cbz	r2, 39ea <z_shell_help_subcmd_print+0x92>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    39cc:	e9cd 3701 	strd	r3, r7, [sp, #4]
    39d0:	9500      	str	r5, [sp, #0]
    39d2:	463b      	mov	r3, r7
    39d4:	464a      	mov	r2, r9
    39d6:	2108      	movs	r1, #8
    39d8:	4620      	mov	r0, r4
    39da:	f009 fd21 	bl	d420 <z_shell_fprintf>
	if (item_help == NULL) {
    39de:	f1ba 0f00 	cmp.w	sl, #0
    39e2:	d104      	bne.n	39ee <z_shell_help_subcmd_print+0x96>
		z_cursor_next_line_move(shell);
    39e4:	6960      	ldr	r0, [r4, #20]
    39e6:	f7ff ffb1 	bl	394c <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    39ea:	4641      	mov	r1, r8
    39ec:	e7ce      	b.n	398c <z_shell_help_subcmd_print+0x34>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    39ee:	1c6a      	adds	r2, r5, #1
    39f0:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    39f4:	b292      	uxth	r2, r2
    39f6:	4651      	mov	r1, sl
    39f8:	4620      	mov	r0, r4
    39fa:	f009 fed5 	bl	d7a8 <formatted_text_print.constprop.0>
    39fe:	e7f4      	b.n	39ea <z_shell_help_subcmd_print+0x92>
    3a00:	00010d5e 	.word	0x00010d5e
    3a04:	00010d46 	.word	0x00010d46

00003a08 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    3a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a0a:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3a0c:	6808      	ldr	r0, [r1, #0]
{
    3a0e:	460d      	mov	r5, r1
    3a10:	b1b8      	cbz	r0, 3a42 <z_shell_help_cmd_print+0x3a>
    3a12:	f00a fb09 	bl	e028 <strlen>
    3a16:	b284      	uxth	r4, r0
    3a18:	4f0b      	ldr	r7, [pc, #44]	; (3a48 <z_shell_help_cmd_print+0x40>)
    3a1a:	4638      	mov	r0, r7
    3a1c:	f00a fb04 	bl	e028 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    3a20:	682b      	ldr	r3, [r5, #0]
    3a22:	4a0a      	ldr	r2, [pc, #40]	; (3a4c <z_shell_help_cmd_print+0x44>)
    3a24:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3a26:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    3a28:	2108      	movs	r1, #8
    3a2a:	4630      	mov	r0, r6
    3a2c:	f009 fcf8 	bl	d420 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3a30:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    3a32:	6869      	ldr	r1, [r5, #4]
    3a34:	4622      	mov	r2, r4
    3a36:	4630      	mov	r0, r6
}
    3a38:	b003      	add	sp, #12
    3a3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    3a3e:	f009 beb3 	b.w	d7a8 <formatted_text_print.constprop.0>
    3a42:	4604      	mov	r4, r0
    3a44:	e7e8      	b.n	3a18 <z_shell_help_cmd_print+0x10>
    3a46:	bf00      	nop
    3a48:	00010d5a 	.word	0x00010d5a
    3a4c:	00010b57 	.word	0x00010b57

00003a50 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    3a50:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    3a52:	4907      	ldr	r1, [pc, #28]	; (3a70 <z_shell_help_request+0x20>)
{
    3a54:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    3a56:	f00a faf7 	bl	e048 <strcmp>
    3a5a:	b138      	cbz	r0, 3a6c <z_shell_help_request+0x1c>
    3a5c:	4905      	ldr	r1, [pc, #20]	; (3a74 <z_shell_help_request+0x24>)
    3a5e:	4620      	mov	r0, r4
    3a60:	f00a faf2 	bl	e048 <strcmp>
    3a64:	fab0 f080 	clz	r0, r0
    3a68:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    3a6a:	bd10      	pop	{r4, pc}
		return true;
    3a6c:	2001      	movs	r0, #1
    3a6e:	e7fc      	b.n	3a6a <z_shell_help_request+0x1a>
    3a70:	00010d50 	.word	0x00010d50
    3a74:	00010d53 	.word	0x00010d53

00003a78 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    3a78:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3a7a:	6883      	ldr	r3, [r0, #8]
    3a7c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    3a80:	069b      	lsls	r3, r3, #26
{
    3a82:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    3a84:	d503      	bpl.n	3a8e <cmd_resize_default+0x16>
    3a86:	4904      	ldr	r1, [pc, #16]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a88:	6940      	ldr	r0, [r0, #20]
    3a8a:	f009 ff04 	bl	d896 <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    3a8e:	68a3      	ldr	r3, [r4, #8]
    3a90:	4a02      	ldr	r2, [pc, #8]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a92:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    3a94:	2000      	movs	r0, #0
    3a96:	bd10      	pop	{r4, pc}
    3a98:	0000f812 	.word	0x0000f812
    3a9c:	00500018 	.word	0x00500018

00003aa0 <cmd_shell_stats_show>:
{
    3aa0:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    3aa2:	6983      	ldr	r3, [r0, #24]
    3aa4:	4a03      	ldr	r2, [pc, #12]	; (3ab4 <cmd_shell_stats_show+0x14>)
    3aa6:	681b      	ldr	r3, [r3, #0]
    3aa8:	2108      	movs	r1, #8
    3aaa:	f009 f929 	bl	cd00 <shell_fprintf>
}
    3aae:	2000      	movs	r0, #0
    3ab0:	bd08      	pop	{r3, pc}
    3ab2:	bf00      	nop
    3ab4:	00010d61 	.word	0x00010d61

00003ab8 <cmd_history>:
{
    3ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    3aba:	4e0f      	ldr	r6, [pc, #60]	; (3af8 <cmd_history+0x40>)
{
    3abc:	4604      	mov	r4, r0
    3abe:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    3ac0:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    3ac2:	68e0      	ldr	r0, [r4, #12]
    3ac4:	f10d 030e 	add.w	r3, sp, #14
    3ac8:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    3acc:	2101      	movs	r1, #1
    3ace:	f009 ff6a 	bl	d9a6 <z_shell_history_get>
		if (len) {
    3ad2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3ad6:	68a3      	ldr	r3, [r4, #8]
    3ad8:	b150      	cbz	r0, 3af0 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    3ada:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    3ade:	9300      	str	r3, [sp, #0]
    3ae0:	4632      	mov	r2, r6
    3ae2:	462b      	mov	r3, r5
    3ae4:	2108      	movs	r1, #8
    3ae6:	4620      	mov	r0, r4
    3ae8:	f009 f90a 	bl	cd00 <shell_fprintf>
	while (1) {
    3aec:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    3aee:	e7e7      	b.n	3ac0 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    3af0:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    3af4:	b004      	add	sp, #16
    3af6:	bd70      	pop	{r4, r5, r6, pc}
    3af8:	00010d71 	.word	0x00010d71

00003afc <cmd_echo>:
	if (argc == 2) {
    3afc:	2902      	cmp	r1, #2
{
    3afe:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    3b00:	d10d      	bne.n	3b1e <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    3b02:	6853      	ldr	r3, [r2, #4]
    3b04:	9301      	str	r3, [sp, #4]
    3b06:	4b0e      	ldr	r3, [pc, #56]	; (3b40 <cmd_echo+0x44>)
    3b08:	9300      	str	r3, [sp, #0]
    3b0a:	6813      	ldr	r3, [r2, #0]
    3b0c:	4a0d      	ldr	r2, [pc, #52]	; (3b44 <cmd_echo+0x48>)
    3b0e:	2101      	movs	r1, #1
    3b10:	f009 f8f6 	bl	cd00 <shell_fprintf>
    3b14:	f06f 0015 	mvn.w	r0, #21
}
    3b18:	b003      	add	sp, #12
    3b1a:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    3b1e:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    3b20:	4a09      	ldr	r2, [pc, #36]	; (3b48 <cmd_echo+0x4c>)
    3b22:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    3b26:	f013 0f02 	tst.w	r3, #2
    3b2a:	f04f 0108 	mov.w	r1, #8
    3b2e:	4b07      	ldr	r3, [pc, #28]	; (3b4c <cmd_echo+0x50>)
    3b30:	bf18      	it	ne
    3b32:	4613      	movne	r3, r2
    3b34:	4a06      	ldr	r2, [pc, #24]	; (3b50 <cmd_echo+0x54>)
    3b36:	f009 f8e3 	bl	cd00 <shell_fprintf>
	return 0;
    3b3a:	2000      	movs	r0, #0
    3b3c:	e7ec      	b.n	3b18 <cmd_echo+0x1c>
    3b3e:	bf00      	nop
    3b40:	00010d88 	.word	0x00010d88
    3b44:	00010d7f 	.word	0x00010d7f
    3b48:	000107b0 	.word	0x000107b0
    3b4c:	00010d7b 	.word	0x00010d7b
    3b50:	00010d9d 	.word	0x00010d9d

00003b54 <cmd_clear>:
{
    3b54:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3b56:	6883      	ldr	r3, [r0, #8]
    3b58:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3b5c:	069a      	lsls	r2, r3, #26
{
    3b5e:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3b60:	d503      	bpl.n	3b6a <cmd_clear+0x16>
    3b62:	4907      	ldr	r1, [pc, #28]	; (3b80 <cmd_clear+0x2c>)
    3b64:	6940      	ldr	r0, [r0, #20]
    3b66:	f009 fe96 	bl	d896 <z_shell_raw_fprintf>
    3b6a:	68a3      	ldr	r3, [r4, #8]
    3b6c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3b70:	069b      	lsls	r3, r3, #26
    3b72:	d503      	bpl.n	3b7c <cmd_clear+0x28>
    3b74:	4903      	ldr	r1, [pc, #12]	; (3b84 <cmd_clear+0x30>)
    3b76:	6960      	ldr	r0, [r4, #20]
    3b78:	f009 fe8d 	bl	d896 <z_shell_raw_fprintf>
}
    3b7c:	2000      	movs	r0, #0
    3b7e:	bd10      	pop	{r4, pc}
    3b80:	0000f819 	.word	0x0000f819
    3b84:	0000f81e 	.word	0x0000f81e

00003b88 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    3b88:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    3b8a:	2901      	cmp	r1, #1
{
    3b8c:	b085      	sub	sp, #20
    3b8e:	4604      	mov	r4, r0
	if (argc != 1) {
    3b90:	d00d      	beq.n	3bae <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    3b92:	6853      	ldr	r3, [r2, #4]
    3b94:	9301      	str	r3, [sp, #4]
    3b96:	4b59      	ldr	r3, [pc, #356]	; (3cfc <cmd_resize+0x174>)
    3b98:	9300      	str	r3, [sp, #0]
    3b9a:	6813      	ldr	r3, [r2, #0]
    3b9c:	4a58      	ldr	r2, [pc, #352]	; (3d00 <cmd_resize+0x178>)
    3b9e:	2101      	movs	r1, #1
    3ba0:	f009 f8ae 	bl	cd00 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    3ba4:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    3ba8:	4628      	mov	r0, r5
    3baa:	b005      	add	sp, #20
    3bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bae:	6883      	ldr	r3, [r0, #8]
    3bb0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    3bb4:	069a      	lsls	r2, r3, #26
    3bb6:	d503      	bpl.n	3bc0 <cmd_resize+0x38>
    3bb8:	4952      	ldr	r1, [pc, #328]	; (3d04 <cmd_resize+0x17c>)
    3bba:	6940      	ldr	r0, [r0, #20]
    3bbc:	f009 fe6b 	bl	d896 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    3bc0:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    3bc4:	4620      	mov	r0, r4
    3bc6:	f7ff fd6b 	bl	36a0 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    3bca:	21fa      	movs	r1, #250	; 0xfa
    3bcc:	4620      	mov	r0, r4
    3bce:	f7ff fd7d 	bl	36cc <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3bd2:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    3bd4:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
    3bda:	4629      	mov	r1, r5
    3bdc:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
    3be0:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3be4:	f00a fa81 	bl	e0ea <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    3be8:	4947      	ldr	r1, [pc, #284]	; (3d08 <cmd_resize+0x180>)
    3bea:	6960      	ldr	r0, [r4, #20]
    3bec:	f009 fe53 	bl	d896 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3bf0:	6960      	ldr	r0, [r4, #20]
    3bf2:	f009 f895 	bl	cd20 <z_shell_fprintf_buffer_flush>
    3bf6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    3bfa:	6860      	ldr	r0, [r4, #4]
    3bfc:	6803      	ldr	r3, [r0, #0]
    3bfe:	2201      	movs	r2, #1
    3c00:	691f      	ldr	r7, [r3, #16]
    3c02:	f10d 010b 	add.w	r1, sp, #11
    3c06:	ab03      	add	r3, sp, #12
    3c08:	47b8      	blx	r7
			if (cnt == 0) {
    3c0a:	9b03      	ldr	r3, [sp, #12]
    3c0c:	b953      	cbnz	r3, 3c24 <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
    3c0e:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    3c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3c14:	b2b6      	uxth	r6, r6
    3c16:	f00b f9db 	bl	efd0 <z_impl_k_busy_wait>
    3c1a:	2e00      	cmp	r6, #0
    3c1c:	d1ed      	bne.n	3bfa <cmd_resize+0x72>
		ret_val = -ENOTSUP;
    3c1e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    3c22:	e034      	b.n	3c8e <cmd_resize+0x106>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3c24:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    3c28:	68a1      	ldr	r1, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3c2a:	2b1b      	cmp	r3, #27
    3c2c:	d05a      	beq.n	3ce4 <cmd_resize+0x15c>
    3c2e:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    3c32:	2a1b      	cmp	r2, #27
    3c34:	d1e1      	bne.n	3bfa <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
    3c36:	2b52      	cmp	r3, #82	; 0x52
    3c38:	d154      	bne.n	3ce4 <cmd_resize+0x15c>
				shell->ctx->temp_buff[buff_idx] = '\0';
    3c3a:	440d      	add	r5, r1
    3c3c:	2300      	movs	r3, #0
    3c3e:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    3c42:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    3c46:	2a5b      	cmp	r2, #91	; 0x5b
    3c48:	d154      	bne.n	3cf4 <cmd_resize+0x16c>
    3c4a:	f501 75a2 	add.w	r5, r1, #324	; 0x144
	*y = 0U;
    3c4e:	461f      	mov	r7, r3
				buff_idx = 2U;
    3c50:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    3c52:	f815 0b01 	ldrb.w	r0, [r5], #1
    3c56:	4632      	mov	r2, r6
    3c58:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    3c5a:	f106 0601 	add.w	r6, r6, #1
    3c5e:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    3c60:	d12b      	bne.n	3cba <cmd_resize+0x132>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    3c62:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    3c66:	d0da      	beq.n	3c1e <cmd_resize+0x96>
    3c68:	f202 1243 	addw	r2, r2, #323	; 0x143
    3c6c:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
    3c70:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    3c72:	f812 5b01 	ldrb.w	r5, [r2], #1
    3c76:	bb55      	cbnz	r5, 3cce <cmd_resize+0x146>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    3c78:	2bfa      	cmp	r3, #250	; 0xfa
    3c7a:	bf28      	it	cs
    3c7c:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3c7e:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    3c80:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3c82:	463b      	mov	r3, r7
    3c84:	bf28      	it	cs
    3c86:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    3c88:	f881 5142 	strb.w	r5, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3c8c:	850b      	strh	r3, [r1, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3c8e:	68a3      	ldr	r3, [r4, #8]
    3c90:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    3c94:	069b      	lsls	r3, r3, #26
    3c96:	d503      	bpl.n	3ca0 <cmd_resize+0x118>
    3c98:	491c      	ldr	r1, [pc, #112]	; (3d0c <cmd_resize+0x184>)
    3c9a:	6960      	ldr	r0, [r4, #20]
    3c9c:	f009 fdfb 	bl	d896 <z_shell_raw_fprintf>
	if (err != 0) {
    3ca0:	2d00      	cmp	r5, #0
    3ca2:	d081      	beq.n	3ba8 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    3ca4:	68a3      	ldr	r3, [r4, #8]
    3ca6:	4a1a      	ldr	r2, [pc, #104]	; (3d10 <cmd_resize+0x188>)
    3ca8:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    3caa:	2103      	movs	r1, #3
    3cac:	4a19      	ldr	r2, [pc, #100]	; (3d14 <cmd_resize+0x18c>)
    3cae:	4620      	mov	r0, r4
    3cb0:	f009 f826 	bl	cd00 <shell_fprintf>
    3cb4:	f06f 0507 	mvn.w	r5, #7
    3cb8:	e776      	b.n	3ba8 <cmd_resize+0x20>
					*y = *y * 10U +
    3cba:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    3cbe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    3cc2:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    3cc4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    3cc8:	b29f      	uxth	r7, r3
					if (buff_idx >=
    3cca:	d1c2      	bne.n	3c52 <cmd_resize+0xca>
    3ccc:	e7a7      	b.n	3c1e <cmd_resize+0x96>
					*x = *x * 10U +
    3cce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    3cd2:	3601      	adds	r6, #1
					*x = *x * 10U +
    3cd4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    3cd8:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    3cda:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
    3cdc:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    3cde:	b2ab      	uxth	r3, r5
					if (buff_idx >=
    3ce0:	d9c7      	bls.n	3c72 <cmd_resize+0xea>
    3ce2:	e79c      	b.n	3c1e <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
    3ce4:	194a      	adds	r2, r1, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3ce6:	3501      	adds	r5, #1
    3ce8:	b2ad      	uxth	r5, r5
    3cea:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    3cec:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3cf0:	d983      	bls.n	3bfa <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
    3cf2:	2300      	movs	r3, #0
    3cf4:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
    3cf8:	e791      	b.n	3c1e <cmd_resize+0x96>
    3cfa:	bf00      	nop
    3cfc:	00010d88 	.word	0x00010d88
    3d00:	00010d7f 	.word	0x00010d7f
    3d04:	0000f824 	.word	0x0000f824
    3d08:	000111a6 	.word	0x000111a6
    3d0c:	0000f828 	.word	0x0000f828
    3d10:	00500018 	.word	0x00500018
    3d14:	00010dae 	.word	0x00010dae

00003d18 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    3d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d1c:	4607      	mov	r7, r0
    3d1e:	b089      	sub	sp, #36	; 0x24
    3d20:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    3d22:	4689      	mov	r9, r1
    3d24:	b921      	cbnz	r1, 3d30 <z_shell_wildcard_process+0x18>
		return ret_val;
    3d26:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    3d28:	4620      	mov	r0, r4
    3d2a:	b009      	add	sp, #36	; 0x24
    3d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    3d30:	4610      	mov	r0, r2
    3d32:	f009 fee1 	bl	daf8 <z_shell_has_wildcard>
    3d36:	2800      	cmp	r0, #0
    3d38:	d0f5      	beq.n	3d26 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    3d3a:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    3d3e:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    3d40:	2402      	movs	r4, #2
    3d42:	e024      	b.n	3d8e <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    3d44:	465c      	mov	r4, fp
    3d46:	e03c      	b.n	3dc2 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    3d48:	4629      	mov	r1, r5
    3d4a:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    3d4e:	f00a f921 	bl	df94 <strstr>
	if (!completion_addr) {
    3d52:	4606      	mov	r6, r0
    3d54:	2800      	cmp	r0, #0
    3d56:	d04c      	beq.n	3df2 <z_shell_wildcard_process+0xda>
    3d58:	f00a f966 	bl	e028 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    3d5c:	b282      	uxth	r2, r0
    3d5e:	1c60      	adds	r0, r4, #1
    3d60:	3201      	adds	r2, #1
    3d62:	4631      	mov	r1, r6
    3d64:	4430      	add	r0, r6
    3d66:	f00a f99d 	bl	e0a4 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    3d6a:	4622      	mov	r2, r4
    3d6c:	4659      	mov	r1, fp
    3d6e:	4630      	mov	r0, r6
    3d70:	f00a f9b0 	bl	e0d4 <memcpy>
	completion_addr[cmd_len] = ' ';
    3d74:	f04f 0320 	mov.w	r3, #32
    3d78:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    3d7a:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
    3d7e:	3001      	adds	r0, #1
    3d80:	4404      	add	r4, r0
    3d82:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    3d86:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    3d8a:	2400      	movs	r4, #0
    3d8c:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    3d8e:	1c4b      	adds	r3, r1, #1
    3d90:	aa03      	add	r2, sp, #12
    3d92:	4648      	mov	r0, r9
    3d94:	9301      	str	r3, [sp, #4]
    3d96:	f7ff fc4b 	bl	3630 <z_shell_cmd_get>
    3d9a:	4606      	mov	r6, r0
    3d9c:	b1e8      	cbz	r0, 3dda <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    3d9e:	6831      	ldr	r1, [r6, #0]
    3da0:	2200      	movs	r2, #0
    3da2:	4628      	mov	r0, r5
    3da4:	f008 fd3a 	bl	c81c <fnmatch>
    3da8:	2800      	cmp	r0, #0
    3daa:	d1ef      	bne.n	3d8c <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    3dac:	f8d6 b000 	ldr.w	fp, [r6]
    3db0:	f8d7 a008 	ldr.w	sl, [r7, #8]
    3db4:	f1bb 0f00 	cmp.w	fp, #0
    3db8:	d0c4      	beq.n	3d44 <z_shell_wildcard_process+0x2c>
    3dba:	4658      	mov	r0, fp
    3dbc:	f00a f934 	bl	e028 <strlen>
    3dc0:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    3dc2:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
    3dc6:	4422      	add	r2, r4
    3dc8:	2aff      	cmp	r2, #255	; 0xff
    3dca:	ddbd      	ble.n	3d48 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    3dcc:	4a0a      	ldr	r2, [pc, #40]	; (3df8 <z_shell_wildcard_process+0xe0>)
    3dce:	462b      	mov	r3, r5
    3dd0:	2103      	movs	r1, #3
    3dd2:	4638      	mov	r0, r7
    3dd4:	f009 fb24 	bl	d420 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    3dd8:	2401      	movs	r4, #1
	if (cnt > 0) {
    3dda:	f1b8 0f00 	cmp.w	r8, #0
    3dde:	d0a3      	beq.n	3d28 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    3de0:	68b8      	ldr	r0, [r7, #8]
    3de2:	462a      	mov	r2, r5
    3de4:	f100 0140 	add.w	r1, r0, #64	; 0x40
    3de8:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    3dec:	f009 f8c4 	bl	cf78 <z_shell_pattern_remove>
	return ret_val;
    3df0:	e79a      	b.n	3d28 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    3df2:	2402      	movs	r4, #2
    3df4:	e7f1      	b.n	3dda <z_shell_wildcard_process+0xc2>
    3df6:	bf00      	nop
    3df8:	000111ab 	.word	0x000111ab

00003dfc <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3dfc:	4b0c      	ldr	r3, [pc, #48]	; (3e30 <class_handler+0x34>)
{
    3dfe:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3e00:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e02:	4e0c      	ldr	r6, [pc, #48]	; (3e34 <class_handler+0x38>)
    3e04:	4b0c      	ldr	r3, [pc, #48]	; (3e38 <class_handler+0x3c>)
    3e06:	42b3      	cmp	r3, r6
    3e08:	d303      	bcc.n	3e12 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    3e0a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e0e:	bcf0      	pop	{r4, r5, r6, r7}
    3e10:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    3e12:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3e14:	42bd      	cmp	r5, r7
    3e16:	d309      	bcc.n	3e2c <class_handler+0x30>
		if (iface->class_handler &&
    3e18:	691c      	ldr	r4, [r3, #16]
    3e1a:	b13c      	cbz	r4, 3e2c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3e1c:	f895 c002 	ldrb.w	ip, [r5, #2]
    3e20:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    3e22:	45ac      	cmp	ip, r5
    3e24:	d102      	bne.n	3e2c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    3e26:	4623      	mov	r3, r4
}
    3e28:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    3e2a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e2c:	3324      	adds	r3, #36	; 0x24
    3e2e:	e7ea      	b.n	3e06 <class_handler+0xa>
    3e30:	200013e8 	.word	0x200013e8
    3e34:	2000040c 	.word	0x2000040c
    3e38:	200003e8 	.word	0x200003e8

00003e3c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e40:	4c13      	ldr	r4, [pc, #76]	; (3e90 <custom_handler+0x54>)
    3e42:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3e94 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3e46:	f8df 9050 	ldr.w	r9, [pc, #80]	; 3e98 <custom_handler+0x5c>
{
    3e4a:	4605      	mov	r5, r0
    3e4c:	460e      	mov	r6, r1
    3e4e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e50:	4544      	cmp	r4, r8
    3e52:	d303      	bcc.n	3e5c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    3e54:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    3e5c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3e5e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    3e62:	429a      	cmp	r2, r3
    3e64:	d312      	bcc.n	3e8c <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    3e66:	69a3      	ldr	r3, [r4, #24]
    3e68:	b183      	cbz	r3, 3e8c <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3e6a:	7890      	ldrb	r0, [r2, #2]
    3e6c:	7929      	ldrb	r1, [r5, #4]
    3e6e:	4288      	cmp	r0, r1
    3e70:	d105      	bne.n	3e7e <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    3e72:	463a      	mov	r2, r7
    3e74:	4631      	mov	r1, r6
    3e76:	4628      	mov	r0, r5
}
    3e78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    3e7c:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    3e7e:	7952      	ldrb	r2, [r2, #5]
    3e80:	2a01      	cmp	r2, #1
    3e82:	d103      	bne.n	3e8c <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    3e84:	463a      	mov	r2, r7
    3e86:	4631      	mov	r1, r6
    3e88:	4628      	mov	r0, r5
    3e8a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e8c:	3424      	adds	r4, #36	; 0x24
    3e8e:	e7df      	b.n	3e50 <custom_handler+0x14>
    3e90:	200003e8 	.word	0x200003e8
    3e94:	2000040c 	.word	0x2000040c
    3e98:	200013e8 	.word	0x200013e8

00003e9c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3ea0:	4c0b      	ldr	r4, [pc, #44]	; (3ed0 <vendor_handler+0x34>)
    3ea2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 3ed4 <vendor_handler+0x38>
{
    3ea6:	4605      	mov	r5, r0
    3ea8:	460e      	mov	r6, r1
    3eaa:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3eac:	4544      	cmp	r4, r8
    3eae:	d302      	bcc.n	3eb6 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    3eb0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3eb4:	e009      	b.n	3eca <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    3eb6:	6963      	ldr	r3, [r4, #20]
    3eb8:	b90b      	cbnz	r3, 3ebe <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3eba:	3424      	adds	r4, #36	; 0x24
    3ebc:	e7f6      	b.n	3eac <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    3ebe:	463a      	mov	r2, r7
    3ec0:	4631      	mov	r1, r6
    3ec2:	4628      	mov	r0, r5
    3ec4:	4798      	blx	r3
    3ec6:	2800      	cmp	r0, #0
    3ec8:	d1f7      	bne.n	3eba <vendor_handler+0x1e>
}
    3eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ece:	bf00      	nop
    3ed0:	200003e8 	.word	0x200003e8
    3ed4:	2000040c 	.word	0x2000040c

00003ed8 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    3ed8:	4802      	ldr	r0, [pc, #8]	; (3ee4 <usb_reset_alt_setting+0xc>)
    3eda:	2208      	movs	r2, #8
    3edc:	2100      	movs	r1, #0
    3ede:	f00a b904 	b.w	e0ea <memset>
    3ee2:	bf00      	nop
    3ee4:	200014a3 	.word	0x200014a3

00003ee8 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    3ee8:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3eea:	4b0b      	ldr	r3, [pc, #44]	; (3f18 <is_ep_valid.part.0+0x30>)
    3eec:	4c0b      	ldr	r4, [pc, #44]	; (3f1c <is_ep_valid.part.0+0x34>)
    3eee:	42a3      	cmp	r3, r4
    3ef0:	d301      	bcc.n	3ef6 <is_ep_valid.part.0+0xe>
	return false;
    3ef2:	2000      	movs	r0, #0
}
    3ef4:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    3ef6:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3ef8:	7f1e      	ldrb	r6, [r3, #28]
    3efa:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    3efc:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3efe:	b2d5      	uxtb	r5, r2
    3f00:	42ae      	cmp	r6, r5
    3f02:	d801      	bhi.n	3f08 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3f04:	3324      	adds	r3, #36	; 0x24
    3f06:	e7f2      	b.n	3eee <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    3f08:	3201      	adds	r2, #1
    3f0a:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    3f0e:	4285      	cmp	r5, r0
    3f10:	d1f5      	bne.n	3efe <is_ep_valid.part.0+0x16>
				return true;
    3f12:	2001      	movs	r0, #1
    3f14:	e7ee      	b.n	3ef4 <is_ep_valid.part.0+0xc>
    3f16:	bf00      	nop
    3f18:	200003e8 	.word	0x200003e8
    3f1c:	2000040c 	.word	0x2000040c

00003f20 <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    3f20:	4809      	ldr	r0, [pc, #36]	; (3f48 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    3f22:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    3f24:	7803      	ldrb	r3, [r0, #0]
    3f26:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    3f2a:	330a      	adds	r3, #10
    3f2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    3f30:	b13b      	cbz	r3, 3f42 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    3f32:	f100 0208 	add.w	r2, r0, #8
    3f36:	f100 0110 	add.w	r1, r0, #16
    3f3a:	4798      	blx	r3
    3f3c:	43c0      	mvns	r0, r0
    3f3e:	0fc0      	lsrs	r0, r0, #31
}
    3f40:	bd08      	pop	{r3, pc}
		return false;
    3f42:	4618      	mov	r0, r3
    3f44:	e7fc      	b.n	3f40 <usb_handle_request.constprop.0+0x20>
    3f46:	bf00      	nop
    3f48:	200013e8 	.word	0x200013e8

00003f4c <set_endpoint>:
{
    3f4c:	b500      	push	{lr}
    3f4e:	b08b      	sub	sp, #44	; 0x2c
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    3f50:	7883      	ldrb	r3, [r0, #2]
    3f52:	f88d 3008 	strb.w	r3, [sp, #8]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3f56:	7903      	ldrb	r3, [r0, #4]
    3f58:	7942      	ldrb	r2, [r0, #5]
    3f5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3f5e:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3f62:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    3f64:	a802      	add	r0, sp, #8
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3f66:	f003 0303 	and.w	r3, r3, #3
    3f6a:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = usb_dc_ep_configure(&ep_cfg);
    3f6e:	f002 ff7d 	bl	6e6c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    3f72:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3f76:	d12f      	bne.n	3fd8 <set_endpoint+0x8c>
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
    3f78:	4828      	ldr	r0, [pc, #160]	; (401c <CONFIG_USB_DEVICE_PID+0xb>)
    3f7a:	6803      	ldr	r3, [r0, #0]
    3f7c:	f013 0f06 	tst.w	r3, #6
    3f80:	d00c      	beq.n	3f9c <set_endpoint+0x50>
    3f82:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3f86:	4a26      	ldr	r2, [pc, #152]	; (4020 <CONFIG_USB_DEVICE_PID+0xf>)
    3f88:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3f8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    3f90:	2303      	movs	r3, #3
    3f92:	aa07      	add	r2, sp, #28
    3f94:	9301      	str	r3, [sp, #4]
    3f96:	9307      	str	r3, [sp, #28]
    3f98:	f009 fdf2 	bl	db80 <z_log_msg2_static_create.constprop.0>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    3f9c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3fa0:	f003 f814 	bl	6fcc <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    3fa4:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3fa8:	d12e      	bne.n	4008 <set_endpoint+0xbc>
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
    3faa:	481c      	ldr	r0, [pc, #112]	; (401c <CONFIG_USB_DEVICE_PID+0xb>)
    3fac:	6803      	ldr	r3, [r0, #0]
    3fae:	f013 0f06 	tst.w	r3, #6
    3fb2:	d00c      	beq.n	3fce <set_endpoint+0x82>
    3fb4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3fb8:	4a1a      	ldr	r2, [pc, #104]	; (4024 <CONFIG_USB_DEVICE_PID+0x13>)
    3fba:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3fbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
    3fc2:	2303      	movs	r3, #3
    3fc4:	aa07      	add	r2, sp, #28
    3fc6:	9301      	str	r3, [sp, #4]
    3fc8:	9307      	str	r3, [sp, #28]
    3fca:	f009 fdd9 	bl	db80 <z_log_msg2_static_create.constprop.0>
	usb_dev.configured = true;
    3fce:	4b16      	ldr	r3, [pc, #88]	; (4028 <CONFIG_USB_DEVICE_PID+0x17>)
    3fd0:	2001      	movs	r0, #1
    3fd2:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    3fd6:	e006      	b.n	3fe6 <set_endpoint+0x9a>
	} else if (ret) {
    3fd8:	2800      	cmp	r0, #0
    3fda:	d0df      	beq.n	3f9c <set_endpoint+0x50>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    3fdc:	480f      	ldr	r0, [pc, #60]	; (401c <CONFIG_USB_DEVICE_PID+0xb>)
    3fde:	6803      	ldr	r3, [r0, #0]
    3fe0:	075a      	lsls	r2, r3, #29
    3fe2:	d103      	bne.n	3fec <set_endpoint+0xa0>
		return false;
    3fe4:	2000      	movs	r0, #0
}
    3fe6:	b00b      	add	sp, #44	; 0x2c
    3fe8:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    3fec:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3ff0:	4a0e      	ldr	r2, [pc, #56]	; (402c <CONFIG_USB_DEVICE_PID+0x1b>)
    3ff2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    3ff6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3ffa:	2303      	movs	r3, #3
    3ffc:	aa07      	add	r2, sp, #28
    3ffe:	9301      	str	r3, [sp, #4]
    4000:	9307      	str	r3, [sp, #28]
    4002:	f009 fdbd 	bl	db80 <z_log_msg2_static_create.constprop.0>
    4006:	e7ed      	b.n	3fe4 <set_endpoint+0x98>
	} else if (ret) {
    4008:	2800      	cmp	r0, #0
    400a:	d0e0      	beq.n	3fce <set_endpoint+0x82>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    400c:	4803      	ldr	r0, [pc, #12]	; (401c <CONFIG_USB_DEVICE_PID+0xb>)
    400e:	6803      	ldr	r3, [r0, #0]
    4010:	075b      	lsls	r3, r3, #29
    4012:	d0e7      	beq.n	3fe4 <set_endpoint+0x98>
    4014:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4018:	4a05      	ldr	r2, [pc, #20]	; (4030 <CONFIG_USB_DEVICE_PID+0x1f>)
    401a:	e7ea      	b.n	3ff2 <set_endpoint+0xa6>
    401c:	2000028c 	.word	0x2000028c
    4020:	000111fd 	.word	0x000111fd
    4024:	00011244 	.word	0x00011244
    4028:	200013e8 	.word	0x200013e8
    402c:	00011220 	.word	0x00011220
    4030:	00011264 	.word	0x00011264

00004034 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    4034:	2804      	cmp	r0, #4
{
    4036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    403a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 40c4 <forward_status_cb+0x90>
    403e:	4604      	mov	r4, r0
    4040:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    4042:	d10e      	bne.n	4062 <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    4044:	f7ff ff48 	bl	3ed8 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    4048:	f8df 907c 	ldr.w	r9, [pc, #124]	; 40c8 <forward_status_cb+0x94>
    404c:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    4050:	b15b      	cbz	r3, 406a <forward_status_cb+0x36>
			usb_cancel_transfers();
    4052:	f000 ff4d 	bl	4ef0 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    4056:	2c04      	cmp	r4, #4
    4058:	d001      	beq.n	405e <forward_status_cb+0x2a>
    405a:	2c01      	cmp	r4, #1
    405c:	d105      	bne.n	406a <forward_status_cb+0x36>
    405e:	4d1b      	ldr	r5, [pc, #108]	; (40cc <forward_status_cb+0x98>)
    4060:	e016      	b.n	4090 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    4062:	2805      	cmp	r0, #5
    4064:	d0f0      	beq.n	4048 <forward_status_cb+0x14>
    4066:	2801      	cmp	r0, #1
    4068:	d0ee      	beq.n	4048 <forward_status_cb+0x14>
    406a:	4d18      	ldr	r5, [pc, #96]	; (40cc <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    406c:	4545      	cmp	r5, r8
    406e:	d31e      	bcc.n	40ae <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    4070:	4b15      	ldr	r3, [pc, #84]	; (40c8 <forward_status_cb+0x94>)
    4072:	6a1b      	ldr	r3, [r3, #32]
    4074:	b31b      	cbz	r3, 40be <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    4076:	4631      	mov	r1, r6
    4078:	4620      	mov	r0, r4
}
    407a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    407e:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    4080:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    4084:	2700      	movs	r7, #0
    4086:	7f2a      	ldrb	r2, [r5, #28]
    4088:	b2fb      	uxtb	r3, r7
    408a:	429a      	cmp	r2, r3
    408c:	d803      	bhi.n	4096 <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    408e:	3524      	adds	r5, #36	; 0x24
    4090:	4545      	cmp	r5, r8
    4092:	d3f5      	bcc.n	4080 <forward_status_cb+0x4c>
    4094:	e007      	b.n	40a6 <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    4096:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    409a:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    409c:	7918      	ldrb	r0, [r3, #4]
    409e:	f002 ffbf 	bl	7020 <usb_dc_ep_disable>
			if (ret < 0) {
    40a2:	2800      	cmp	r0, #0
    40a4:	daef      	bge.n	4086 <forward_status_cb+0x52>
				usb_dev.configured = false;
    40a6:	2300      	movs	r3, #0
    40a8:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    40ac:	e7dd      	b.n	406a <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    40ae:	68eb      	ldr	r3, [r5, #12]
    40b0:	b11b      	cbz	r3, 40ba <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    40b2:	4632      	mov	r2, r6
    40b4:	4621      	mov	r1, r4
    40b6:	4628      	mov	r0, r5
    40b8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    40ba:	3524      	adds	r5, #36	; 0x24
    40bc:	e7d6      	b.n	406c <forward_status_cb+0x38>
}
    40be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    40c2:	bf00      	nop
    40c4:	2000040c 	.word	0x2000040c
    40c8:	200013e8 	.word	0x200013e8
    40cc:	200003e8 	.word	0x200003e8

000040d0 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    40d0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    40d2:	b2c4      	uxtb	r4, r0
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    40d4:	b088      	sub	sp, #32
	if (USB_EP_GET_IDX(ep) == 0) {
    40d6:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    40d8:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    40da:	f88d 4003 	strb.w	r4, [sp, #3]
	if (USB_EP_GET_IDX(ep) == 0) {
    40de:	d007      	beq.n	40f0 <usb_halt_endpoint_req.isra.0+0x20>
    40e0:	4620      	mov	r0, r4
    40e2:	f7ff ff01 	bl	3ee8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    40e6:	b318      	cbz	r0, 4130 <usb_halt_endpoint_req.isra.0+0x60>
	return (usb_dev.configuration != 0);
    40e8:	4b1f      	ldr	r3, [pc, #124]	; (4168 <usb_halt_endpoint_req.isra.0+0x98>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    40ea:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    40ee:	b1f8      	cbz	r0, 4130 <usb_halt_endpoint_req.isra.0+0x60>
			LOG_INF("Set halt ep 0x%02x", ep);
    40f0:	481e      	ldr	r0, [pc, #120]	; (416c <usb_halt_endpoint_req.isra.0+0x9c>)
    40f2:	4e1d      	ldr	r6, [pc, #116]	; (4168 <usb_halt_endpoint_req.isra.0+0x98>)
    40f4:	6803      	ldr	r3, [r0, #0]
    40f6:	f003 0307 	and.w	r3, r3, #7
		if (halt) {
    40fa:	b1dd      	cbz	r5, 4134 <usb_halt_endpoint_req.isra.0+0x64>
			LOG_INF("Set halt ep 0x%02x", ep);
    40fc:	2b02      	cmp	r3, #2
    40fe:	d90a      	bls.n	4116 <usb_halt_endpoint_req.isra.0+0x46>
    4100:	4b1b      	ldr	r3, [pc, #108]	; (4170 <usb_halt_endpoint_req.isra.0+0xa0>)
    4102:	aa05      	add	r2, sp, #20
    4104:	e9cd 3406 	strd	r3, r4, [sp, #24]
    4108:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    410c:	2303      	movs	r3, #3
    410e:	9301      	str	r3, [sp, #4]
    4110:	9305      	str	r3, [sp, #20]
    4112:	f009 fd35 	bl	db80 <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_set_stall(ep);
    4116:	f89d 0003 	ldrb.w	r0, [sp, #3]
    411a:	f002 fedf 	bl	6edc <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    411e:	69f3      	ldr	r3, [r6, #28]
    4120:	b90b      	cbnz	r3, 4126 <usb_halt_endpoint_req.isra.0+0x56>
		return true;
    4122:	2001      	movs	r0, #1
    4124:	e004      	b.n	4130 <usb_halt_endpoint_req.isra.0+0x60>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    4126:	2008      	movs	r0, #8
    4128:	f10d 0103 	add.w	r1, sp, #3
    412c:	4798      	blx	r3
		return true;
    412e:	4628      	mov	r0, r5
}
    4130:	b008      	add	sp, #32
    4132:	bd70      	pop	{r4, r5, r6, pc}
			LOG_INF("Clear halt ep 0x%02x", ep);
    4134:	2b02      	cmp	r3, #2
    4136:	d90a      	bls.n	414e <usb_halt_endpoint_req.isra.0+0x7e>
    4138:	4b0e      	ldr	r3, [pc, #56]	; (4174 <usb_halt_endpoint_req.isra.0+0xa4>)
    413a:	aa05      	add	r2, sp, #20
    413c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    4140:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    4144:	2303      	movs	r3, #3
    4146:	9301      	str	r3, [sp, #4]
    4148:	9305      	str	r3, [sp, #20]
    414a:	f009 fd19 	bl	db80 <z_log_msg2_static_create.constprop.0>
			usb_dc_ep_clear_stall(ep);
    414e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4152:	f002 feff 	bl	6f54 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    4156:	69f3      	ldr	r3, [r6, #28]
    4158:	2b00      	cmp	r3, #0
    415a:	d0e2      	beq.n	4122 <usb_halt_endpoint_req.isra.0+0x52>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    415c:	f10d 0103 	add.w	r1, sp, #3
    4160:	2009      	movs	r0, #9
    4162:	4798      	blx	r3
    4164:	e7dd      	b.n	4122 <usb_halt_endpoint_req.isra.0+0x52>
    4166:	bf00      	nop
    4168:	200013e8 	.word	0x200013e8
    416c:	2000028c 	.word	0x2000028c
    4170:	00011285 	.word	0x00011285
    4174:	00011298 	.word	0x00011298

00004178 <usb_handle_standard_request>:
{
    4178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    417c:	4ea1      	ldr	r6, [pc, #644]	; (4404 <usb_handle_standard_request+0x28c>)
    417e:	69b3      	ldr	r3, [r6, #24]
{
    4180:	b08b      	sub	sp, #44	; 0x2c
    4182:	4605      	mov	r5, r0
    4184:	460f      	mov	r7, r1
    4186:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    4188:	b963      	cbnz	r3, 41a4 <usb_handle_standard_request+0x2c>
	switch (setup->RequestType.recipient) {
    418a:	7828      	ldrb	r0, [r5, #0]
    418c:	f000 001f 	and.w	r0, r0, #31
    4190:	2801      	cmp	r0, #1
    4192:	f000 80a6 	beq.w	42e2 <usb_handle_standard_request+0x16a>
    4196:	2802      	cmp	r0, #2
    4198:	f000 813e 	beq.w	4418 <usb_handle_standard_request+0x2a0>
    419c:	b138      	cbz	r0, 41ae <usb_handle_standard_request+0x36>
		switch (setup->bRequest) {
    419e:	f06f 0015 	mvn.w	r0, #21
    41a2:	e094      	b.n	42ce <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    41a4:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    41a6:	2800      	cmp	r0, #0
    41a8:	d1ef      	bne.n	418a <usb_handle_standard_request+0x12>
	int rc = 0;
    41aa:	2000      	movs	r0, #0
    41ac:	e08f      	b.n	42ce <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
    41ae:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    41b2:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    41b4:	2a00      	cmp	r2, #0
    41b6:	da31      	bge.n	421c <usb_handle_standard_request+0xa4>
		switch (setup->bRequest) {
    41b8:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    41ba:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    41be:	d010      	beq.n	41e2 <usb_handle_standard_request+0x6a>
    41c0:	2b08      	cmp	r3, #8
    41c2:	d025      	beq.n	4210 <usb_handle_standard_request+0x98>
    41c4:	2b00      	cmp	r3, #0
    41c6:	d1ea      	bne.n	419e <usb_handle_standard_request+0x26>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    41c8:	2101      	movs	r1, #1
	data[1] = 0U;
    41ca:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    41cc:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    41ce:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    41d2:	2900      	cmp	r1, #0
    41d4:	bf18      	it	ne
    41d6:	2302      	movne	r3, #2
    41d8:	f043 0301 	orr.w	r3, r3, #1
    41dc:	7013      	strb	r3, [r2, #0]
		*len = 2;
    41de:	2302      	movs	r3, #2
    41e0:	e01a      	b.n	4218 <usb_handle_standard_request+0xa0>
			return usb_get_descriptor(setup, len, data_buf);
    41e2:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    41e4:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    41e6:	1f11      	subs	r1, r2, #4
    41e8:	2901      	cmp	r1, #1
    41ea:	d9d8      	bls.n	419e <usb_handle_standard_request+0x26>
    41ec:	2a07      	cmp	r2, #7
    41ee:	d8d6      	bhi.n	419e <usb_handle_standard_request+0x26>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    41f0:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    41f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    41f4:	781c      	ldrb	r4, [r3, #0]
    41f6:	2c00      	cmp	r4, #0
    41f8:	d0d1      	beq.n	419e <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == type) {
    41fa:	785d      	ldrb	r5, [r3, #1]
    41fc:	4295      	cmp	r5, r2
    41fe:	d103      	bne.n	4208 <usb_handle_standard_request+0x90>
			if (cur_index == index) {
    4200:	4281      	cmp	r1, r0
    4202:	f000 813e 	beq.w	4482 <usb_handle_standard_request+0x30a>
			cur_index++;
    4206:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    4208:	4423      	add	r3, r4
    420a:	e7f3      	b.n	41f4 <usb_handle_standard_request+0x7c>
			*len = p[DESC_bLength];
    420c:	781b      	ldrb	r3, [r3, #0]
    420e:	e13e      	b.n	448e <usb_handle_standard_request+0x316>
			data[0] = usb_dev.configuration;
    4210:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    4214:	7013      	strb	r3, [r2, #0]
			*len = 1;
    4216:	2301      	movs	r3, #1
		*len = 2;
    4218:	603b      	str	r3, [r7, #0]
		return true;
    421a:	e058      	b.n	42ce <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
    421c:	3b01      	subs	r3, #1
    421e:	2b08      	cmp	r3, #8
    4220:	d8bd      	bhi.n	419e <usb_handle_standard_request+0x26>
    4222:	a201      	add	r2, pc, #4	; (adr r2, 4228 <usb_handle_standard_request+0xb0>)
    4224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4228:	000042c1 	.word	0x000042c1
    422c:	0000419f 	.word	0x0000419f
    4230:	000042d5 	.word	0x000042d5
    4234:	0000419f 	.word	0x0000419f
    4238:	0000424d 	.word	0x0000424d
    423c:	0000419f 	.word	0x0000419f
    4240:	0000419f 	.word	0x0000419f
    4244:	0000419f 	.word	0x0000419f
    4248:	00004259 	.word	0x00004259
			return !usb_dc_set_address(setup->wValue);
    424c:	78a8      	ldrb	r0, [r5, #2]
    424e:	f002 fdbb 	bl	6dc8 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    4252:	2800      	cmp	r0, #0
    4254:	d0a9      	beq.n	41aa <usb_handle_standard_request+0x32>
    4256:	e7a2      	b.n	419e <usb_handle_standard_request+0x26>
	if (setup->wValue == 0U) {
    4258:	886c      	ldrh	r4, [r5, #2]
    425a:	b144      	cbz	r4, 426e <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
    425c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    4260:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    4262:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    4264:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    4266:	783c      	ldrb	r4, [r7, #0]
    4268:	b96c      	cbnz	r4, 4286 <usb_handle_standard_request+0x10e>
	if (found) {
    426a:	2800      	cmp	r0, #0
    426c:	d097      	beq.n	419e <usb_handle_standard_request+0x26>
		usb_reset_alt_setting();
    426e:	f7ff fe33 	bl	3ed8 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    4272:	886b      	ldrh	r3, [r5, #2]
    4274:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    4278:	69f3      	ldr	r3, [r6, #28]
    427a:	2b00      	cmp	r3, #0
    427c:	d095      	beq.n	41aa <usb_handle_standard_request+0x32>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    427e:	4962      	ldr	r1, [pc, #392]	; (4408 <usb_handle_standard_request+0x290>)
    4280:	2003      	movs	r0, #3
    4282:	4798      	blx	r3
    4284:	e791      	b.n	41aa <usb_handle_standard_request+0x32>
		switch (p[DESC_bDescriptorType]) {
    4286:	787b      	ldrb	r3, [r7, #1]
    4288:	2b04      	cmp	r3, #4
    428a:	d00c      	beq.n	42a6 <usb_handle_standard_request+0x12e>
    428c:	2b05      	cmp	r3, #5
    428e:	d00d      	beq.n	42ac <usb_handle_standard_request+0x134>
    4290:	2b02      	cmp	r3, #2
    4292:	d105      	bne.n	42a0 <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
    4294:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    4298:	886a      	ldrh	r2, [r5, #2]
				found = true;
    429a:	4542      	cmp	r2, r8
    429c:	bf08      	it	eq
    429e:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    42a0:	783b      	ldrb	r3, [r7, #0]
    42a2:	441f      	add	r7, r3
    42a4:	e7df      	b.n	4266 <usb_handle_standard_request+0xee>
			cur_alt_setting =
    42a6:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    42aa:	e7f9      	b.n	42a0 <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
    42ac:	886b      	ldrh	r3, [r5, #2]
    42ae:	4543      	cmp	r3, r8
    42b0:	d1f6      	bne.n	42a0 <usb_handle_standard_request+0x128>
    42b2:	f1b9 0f00 	cmp.w	r9, #0
    42b6:	d1f3      	bne.n	42a0 <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    42b8:	4638      	mov	r0, r7
    42ba:	f7ff fe47 	bl	3f4c <set_endpoint>
			break;
    42be:	e7ef      	b.n	42a0 <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    42c0:	886b      	ldrh	r3, [r5, #2]
    42c2:	2b01      	cmp	r3, #1
    42c4:	f47f af6b 	bne.w	419e <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = false;
    42c8:	2000      	movs	r0, #0
    42ca:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    42ce:	b00b      	add	sp, #44	; 0x2c
    42d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    42d4:	886b      	ldrh	r3, [r5, #2]
    42d6:	2b01      	cmp	r3, #1
    42d8:	f47f af61 	bne.w	419e <usb_handle_standard_request+0x26>
					usb_dev.remote_wakeup = true;
    42dc:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    42e0:	e763      	b.n	41aa <usb_handle_standard_request+0x32>
	if (!is_device_configured() ||
    42e2:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    42e6:	2b00      	cmp	r3, #0
    42e8:	f43f af59 	beq.w	419e <usb_handle_standard_request+0x26>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    42ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    42ee:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    42f2:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    42f4:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    42f6:	781a      	ldrb	r2, [r3, #0]
    42f8:	2a00      	cmp	r2, #0
    42fa:	f43f af50 	beq.w	419e <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    42fe:	7859      	ldrb	r1, [r3, #1]
    4300:	2902      	cmp	r1, #2
    4302:	d104      	bne.n	430e <usb_handle_standard_request+0x196>
			if (interface < cfg_descr->bNumInterfaces) {
    4304:	f893 e004 	ldrb.w	lr, [r3, #4]
    4308:	4586      	cmp	lr, r0
    430a:	f200 80c2 	bhi.w	4492 <usb_handle_standard_request+0x31a>
		p += p[DESC_bLength];
    430e:	4413      	add	r3, r2
    4310:	e7f1      	b.n	42f6 <usb_handle_standard_request+0x17e>
			data[0] = 0U;
    4312:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    4314:	7050      	strb	r0, [r2, #1]
			*len = 2;
    4316:	6039      	str	r1, [r7, #0]
			return true;
    4318:	e7d9      	b.n	42ce <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
    431a:	440c      	add	r4, r1
    431c:	e0c7      	b.n	44ae <usb_handle_standard_request+0x336>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    431e:	280b      	cmp	r0, #11
    4320:	f47f af3d 	bne.w	419e <usb_handle_standard_request+0x26>
	bool ret = false;
    4324:	2200      	movs	r2, #0
	uint8_t cur_iface = 0xFF;
    4326:	f04f 09ff 	mov.w	r9, #255	; 0xff
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    432a:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 440c <usb_handle_standard_request+0x294>
	uint8_t cur_alt_setting = 0xFF;
    432e:	464f      	mov	r7, r9
	const uint8_t *if_desc = NULL;
    4330:	4690      	mov	r8, r2
    4332:	e006      	b.n	4342 <usb_handle_standard_request+0x1ca>
		switch (p[DESC_bDescriptorType]) {
    4334:	7861      	ldrb	r1, [r4, #1]
    4336:	2904      	cmp	r1, #4
    4338:	d011      	beq.n	435e <usb_handle_standard_request+0x1e6>
    433a:	2905      	cmp	r1, #5
    433c:	d023      	beq.n	4386 <usb_handle_standard_request+0x20e>
		p += p[DESC_bLength];
    433e:	7821      	ldrb	r1, [r4, #0]
    4340:	440c      	add	r4, r1
	while (p[DESC_bLength] != 0U) {
    4342:	7821      	ldrb	r1, [r4, #0]
    4344:	2900      	cmp	r1, #0
    4346:	d1f5      	bne.n	4334 <usb_handle_standard_request+0x1bc>
	if (usb_dev.status_callback) {
    4348:	69f3      	ldr	r3, [r6, #28]
    434a:	b123      	cbz	r3, 4356 <usb_handle_standard_request+0x1de>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    434c:	4641      	mov	r1, r8
    434e:	2007      	movs	r0, #7
    4350:	9201      	str	r2, [sp, #4]
    4352:	4798      	blx	r3
    4354:	9a01      	ldr	r2, [sp, #4]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    4356:	2a00      	cmp	r2, #0
    4358:	f47f af27 	bne.w	41aa <usb_handle_standard_request+0x32>
    435c:	e71f      	b.n	419e <usb_handle_standard_request+0x26>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    435e:	f894 9002 	ldrb.w	r9, [r4, #2]
			if (cur_iface == setup->wIndex &&
    4362:	88a8      	ldrh	r0, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    4364:	78e7      	ldrb	r7, [r4, #3]
			if (cur_iface == setup->wIndex &&
    4366:	4581      	cmp	r9, r0
    4368:	4649      	mov	r1, r9
    436a:	d1e8      	bne.n	433e <usb_handle_standard_request+0x1c6>
			    cur_alt_setting == setup->wValue) {
    436c:	f8b5 c002 	ldrh.w	ip, [r5, #2]
			if (cur_iface == setup->wIndex &&
    4370:	4567      	cmp	r7, ip
    4372:	b2b8      	uxth	r0, r7
    4374:	d1e3      	bne.n	433e <usb_handle_standard_request+0x1c6>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    4376:	2907      	cmp	r1, #7
    4378:	d842      	bhi.n	4400 <usb_handle_standard_request+0x288>
		usb_dev.alt_setting[iface] = alt_setting;
    437a:	4431      	add	r1, r6
		return true;
    437c:	46a0      	mov	r8, r4
				ret = usb_set_alt_setting(setup->wIndex,
    437e:	f881 00bb 	strb.w	r0, [r1, #187]	; 0xbb
	return true;
    4382:	2201      	movs	r2, #1
    4384:	e7db      	b.n	433e <usb_handle_standard_request+0x1c6>
			if (cur_iface == setup->wIndex) {
    4386:	88a9      	ldrh	r1, [r5, #4]
    4388:	4549      	cmp	r1, r9
    438a:	d1d8      	bne.n	433e <usb_handle_standard_request+0x1c6>
	if (cur_alt_setting != alt_setting) {
    438c:	78aa      	ldrb	r2, [r5, #2]
    438e:	42ba      	cmp	r2, r7
    4390:	d031      	beq.n	43f6 <usb_handle_standard_request+0x27e>
		ret = reset_endpoint(ep_desc);
    4392:	f894 b002 	ldrb.w	fp, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    4396:	4658      	mov	r0, fp
    4398:	f000 fd8c 	bl	4eb4 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    439c:	4658      	mov	r0, fp
    439e:	f002 fe3f 	bl	7020 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    43a2:	f110 0f78 	cmn.w	r0, #120	; 0x78
    43a6:	d111      	bne.n	43cc <usb_handle_standard_request+0x254>
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
    43a8:	f8da 2000 	ldr.w	r2, [sl]
    43ac:	f012 0f06 	tst.w	r2, #6
    43b0:	d0e7      	beq.n	4382 <usb_handle_standard_request+0x20a>
    43b2:	2203      	movs	r2, #3
    43b4:	4b16      	ldr	r3, [pc, #88]	; (4410 <usb_handle_standard_request+0x298>)
    43b6:	9203      	str	r2, [sp, #12]
    43b8:	9207      	str	r2, [sp, #28]
    43ba:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    43be:	aa07      	add	r2, sp, #28
    43c0:	4650      	mov	r0, sl
    43c2:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    43c6:	f009 fbdb 	bl	db80 <z_log_msg2_static_create.constprop.0>
    43ca:	e7da      	b.n	4382 <usb_handle_standard_request+0x20a>
	} else if (ret) {
    43cc:	2800      	cmp	r0, #0
    43ce:	d0d8      	beq.n	4382 <usb_handle_standard_request+0x20a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    43d0:	f8da 2000 	ldr.w	r2, [sl]
    43d4:	f012 0207 	ands.w	r2, r2, #7
    43d8:	d0b1      	beq.n	433e <usb_handle_standard_request+0x1c6>
    43da:	2203      	movs	r2, #3
    43dc:	4b0d      	ldr	r3, [pc, #52]	; (4414 <usb_handle_standard_request+0x29c>)
    43de:	9203      	str	r2, [sp, #12]
    43e0:	9207      	str	r2, [sp, #28]
    43e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    43e6:	aa07      	add	r2, sp, #28
    43e8:	4650      	mov	r0, sl
    43ea:	e9cd 3b08 	strd	r3, fp, [sp, #32]
    43ee:	f009 fbc7 	bl	db80 <z_log_msg2_static_create.constprop.0>
	return false;
    43f2:	2200      	movs	r2, #0
    43f4:	e7a3      	b.n	433e <usb_handle_standard_request+0x1c6>
		ret = set_endpoint(ep_desc);
    43f6:	4620      	mov	r0, r4
    43f8:	f7ff fda8 	bl	3f4c <set_endpoint>
    43fc:	4602      	mov	r2, r0
    43fe:	e79e      	b.n	433e <usb_handle_standard_request+0x1c6>
    4400:	46a0      	mov	r8, r4
    4402:	e7f6      	b.n	43f2 <usb_handle_standard_request+0x27a>
    4404:	200013e8 	.word	0x200013e8
    4408:	200014a2 	.word	0x200014a2
    440c:	2000028c 	.word	0x2000028c
    4410:	000112ad 	.word	0x000112ad
    4414:	000112ce 	.word	0x000112ce
	if (usb_reqtype_is_to_host(setup)) {
    4418:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    441c:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    441e:	2a00      	cmp	r2, #0
    4420:	da19      	bge.n	4456 <usb_handle_standard_request+0x2de>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    4422:	2b00      	cmp	r3, #0
    4424:	f47f aebb 	bne.w	419e <usb_handle_standard_request+0x26>
	uint8_t ep = setup->wIndex;
    4428:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    442a:	0663      	lsls	r3, r4, #25
    442c:	d00a      	beq.n	4444 <usb_handle_standard_request+0x2cc>
    442e:	4620      	mov	r0, r4
    4430:	f7ff fd5a 	bl	3ee8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    4434:	2800      	cmp	r0, #0
    4436:	f43f aeb2 	beq.w	419e <usb_handle_standard_request+0x26>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    443a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    443e:	2b00      	cmp	r3, #0
    4440:	f43f aead 	beq.w	419e <usb_handle_standard_request+0x26>
    4444:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    4448:	4620      	mov	r0, r4
    444a:	4629      	mov	r1, r5
    444c:	f002 fda2 	bl	6f94 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    4450:	2000      	movs	r0, #0
    4452:	7068      	strb	r0, [r5, #1]
    4454:	e6c3      	b.n	41de <usb_handle_standard_request+0x66>
		switch (setup->bRequest) {
    4456:	2b01      	cmp	r3, #1
    4458:	d008      	beq.n	446c <usb_handle_standard_request+0x2f4>
    445a:	2b03      	cmp	r3, #3
    445c:	f47f ae9f 	bne.w	419e <usb_handle_standard_request+0x26>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    4460:	886b      	ldrh	r3, [r5, #2]
    4462:	2b00      	cmp	r3, #0
    4464:	f47f ae9b 	bne.w	419e <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    4468:	2101      	movs	r1, #1
    446a:	e003      	b.n	4474 <usb_handle_standard_request+0x2fc>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    446c:	8869      	ldrh	r1, [r5, #2]
    446e:	2900      	cmp	r1, #0
    4470:	f47f ae95 	bne.w	419e <usb_handle_standard_request+0x26>
				return usb_halt_endpoint_req(setup, true);
    4474:	88a8      	ldrh	r0, [r5, #4]
    4476:	f7ff fe2b 	bl	40d0 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    447a:	2800      	cmp	r0, #0
    447c:	f47f ae95 	bne.w	41aa <usb_handle_standard_request+0x32>
    4480:	e68d      	b.n	419e <usb_handle_standard_request+0x26>
		if (type == USB_DESC_CONFIGURATION) {
    4482:	2a02      	cmp	r2, #2
		*data = p;
    4484:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    4488:	f47f aec0 	bne.w	420c <usb_handle_standard_request+0x94>
			*len = (p[CONF_DESC_wTotalLength]) |
    448c:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    448e:	603b      	str	r3, [r7, #0]
    4490:	e68b      	b.n	41aa <usb_handle_standard_request+0x32>
	if (usb_reqtype_is_to_host(setup)) {
    4492:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    4496:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4498:	2b00      	cmp	r3, #0
    449a:	f6bf af40 	bge.w	431e <usb_handle_standard_request+0x1a6>
    449e:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    44a2:	2800      	cmp	r0, #0
    44a4:	f43f af35 	beq.w	4312 <usb_handle_standard_request+0x19a>
    44a8:	280a      	cmp	r0, #10
    44aa:	f47f ae78 	bne.w	419e <usb_handle_standard_request+0x26>
	while (p[DESC_bLength] != 0U) {
    44ae:	7821      	ldrb	r1, [r4, #0]
    44b0:	2900      	cmp	r1, #0
    44b2:	f43f ae74 	beq.w	419e <usb_handle_standard_request+0x26>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    44b6:	7863      	ldrb	r3, [r4, #1]
    44b8:	2b04      	cmp	r3, #4
    44ba:	f47f af2e 	bne.w	431a <usb_handle_standard_request+0x1a2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    44be:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    44c0:	459c      	cmp	ip, r3
    44c2:	f47f af2a 	bne.w	431a <usb_handle_standard_request+0x1a2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    44c6:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    44c8:	bf96      	itet	ls
    44ca:	199b      	addls	r3, r3, r6
	return 0;
    44cc:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    44ce:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    44d2:	7013      	strb	r3, [r2, #0]
				*len = 1;
    44d4:	2301      	movs	r3, #1
    44d6:	e7da      	b.n	448e <usb_handle_standard_request+0x316>

000044d8 <usb_write>:
{
    44d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    44dc:	f8df a058 	ldr.w	sl, [pc, #88]	; 4538 <usb_write+0x60>
{
    44e0:	b089      	sub	sp, #36	; 0x24
    44e2:	4605      	mov	r5, r0
    44e4:	460f      	mov	r7, r1
    44e6:	4690      	mov	r8, r2
    44e8:	4699      	mov	r9, r3
    44ea:	2604      	movs	r6, #4
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    44ec:	f04f 0b03 	mov.w	fp, #3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    44f0:	464b      	mov	r3, r9
    44f2:	4642      	mov	r2, r8
    44f4:	4639      	mov	r1, r7
    44f6:	4628      	mov	r0, r5
    44f8:	f002 fdb8 	bl	706c <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    44fc:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    4500:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    4502:	d115      	bne.n	4530 <usb_write+0x58>
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
    4504:	f8da 3000 	ldr.w	r3, [sl]
    4508:	f013 0f06 	tst.w	r3, #6
    450c:	d00c      	beq.n	4528 <usb_write+0x50>
    450e:	4b0b      	ldr	r3, [pc, #44]	; (453c <usb_write+0x64>)
    4510:	f8cd b004 	str.w	fp, [sp, #4]
    4514:	aa05      	add	r2, sp, #20
    4516:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    451a:	4650      	mov	r0, sl
    451c:	e9cd 3506 	strd	r3, r5, [sp, #24]
    4520:	f8cd b014 	str.w	fp, [sp, #20]
    4524:	f009 fb2c 	bl	db80 <z_log_msg2_static_create.constprop.0>
	z_impl_k_yield();
    4528:	f006 fdf0 	bl	b10c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    452c:	3e01      	subs	r6, #1
    452e:	d1df      	bne.n	44f0 <usb_write+0x18>
}
    4530:	4620      	mov	r0, r4
    4532:	b009      	add	sp, #36	; 0x24
    4534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4538:	2000028c 	.word	0x2000028c
    453c:	000112f0 	.word	0x000112f0

00004540 <usb_data_to_host>:
{
    4540:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    4542:	4c13      	ldr	r4, [pc, #76]	; (4590 <usb_data_to_host+0x50>)
    4544:	7d23      	ldrb	r3, [r4, #20]
    4546:	b9cb      	cbnz	r3, 457c <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    4548:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    454a:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    454c:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    454e:	ab01      	add	r3, sp, #4
    4550:	2080      	movs	r0, #128	; 0x80
    4552:	f7ff ffc1 	bl	44d8 <usb_write>
		usb_dev.data_buf += chunk;
    4556:	9a01      	ldr	r2, [sp, #4]
    4558:	68a3      	ldr	r3, [r4, #8]
    455a:	4413      	add	r3, r2
    455c:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    455e:	68e3      	ldr	r3, [r4, #12]
    4560:	1a9b      	subs	r3, r3, r2
    4562:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    4564:	b943      	cbnz	r3, 4578 <usb_data_to_host+0x38>
    4566:	b13a      	cbz	r2, 4578 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    4568:	6923      	ldr	r3, [r4, #16]
    456a:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    456c:	429a      	cmp	r2, r3
    456e:	dd03      	ble.n	4578 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    4570:	069b      	lsls	r3, r3, #26
    4572:	d101      	bne.n	4578 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    4574:	2301      	movs	r3, #1
    4576:	7523      	strb	r3, [r4, #20]
}
    4578:	b002      	add	sp, #8
    457a:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    457c:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    457e:	461a      	mov	r2, r3
    4580:	4619      	mov	r1, r3
    4582:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    4584:	7523      	strb	r3, [r4, #20]
}
    4586:	b002      	add	sp, #8
    4588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    458c:	f002 bd6e 	b.w	706c <usb_dc_ep_write>
    4590:	200013e8 	.word	0x200013e8

00004594 <usb_handle_control_transfer>:
{
    4594:	b530      	push	{r4, r5, lr}
    4596:	b08b      	sub	sp, #44	; 0x2c
	uint32_t chunk = 0U;
    4598:	2300      	movs	r3, #0
{
    459a:	4602      	mov	r2, r0
    459c:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    459e:	9300      	str	r3, [sp, #0]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    45a0:	2800      	cmp	r0, #0
    45a2:	d16d      	bne.n	4680 <usb_handle_control_transfer+0xec>
    45a4:	2900      	cmp	r1, #0
    45a6:	d14a      	bne.n	463e <usb_handle_control_transfer+0xaa>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    45a8:	2208      	movs	r2, #8
    45aa:	460b      	mov	r3, r1
    45ac:	eb0d 0102 	add.w	r1, sp, r2
    45b0:	f009 fe01 	bl	e1b6 <usb_dc_ep_read>
    45b4:	2800      	cmp	r0, #0
    45b6:	da04      	bge.n	45c2 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    45b8:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    45ba:	f002 fc8f 	bl	6edc <usb_dc_ep_set_stall>
}
    45be:	b00b      	add	sp, #44	; 0x2c
    45c0:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    45c2:	4c34      	ldr	r4, [pc, #208]	; (4694 <usb_handle_control_transfer+0x100>)
		setup->bRequest = setup_raw.bRequest;
    45c4:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    45c8:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    45cc:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    45ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    45d2:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    45d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    45d8:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    45da:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    45dc:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    45e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    45e4:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    45e6:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    45e8:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    45ec:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    45ee:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    45f0:	d418      	bmi.n	4624 <usb_handle_control_transfer+0x90>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    45f2:	2b80      	cmp	r3, #128	; 0x80
    45f4:	d912      	bls.n	461c <usb_handle_control_transfer+0x88>
				LOG_ERR("Request buffer too small");
    45f6:	4828      	ldr	r0, [pc, #160]	; (4698 <usb_handle_control_transfer+0x104>)
    45f8:	6803      	ldr	r3, [r0, #0]
    45fa:	075b      	lsls	r3, r3, #29
    45fc:	d009      	beq.n	4612 <usb_handle_control_transfer+0x7e>
    45fe:	4b27      	ldr	r3, [pc, #156]	; (469c <usb_handle_control_transfer+0x108>)
    4600:	9308      	str	r3, [sp, #32]
    4602:	aa07      	add	r2, sp, #28
    4604:	2302      	movs	r3, #2
    4606:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    460a:	9301      	str	r3, [sp, #4]
    460c:	9307      	str	r3, [sp, #28]
    460e:	f009 fab7 	bl	db80 <z_log_msg2_static_create.constprop.0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4612:	2080      	movs	r0, #128	; 0x80
    4614:	f002 fc62 	bl	6edc <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    4618:	2000      	movs	r0, #0
    461a:	e7ce      	b.n	45ba <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    461c:	b113      	cbz	r3, 4624 <usb_handle_control_transfer+0x90>
				usb_dev.data_buf_residue = setup->wLength;
    461e:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    4622:	e7cc      	b.n	45be <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    4624:	f7ff fc7c 	bl	3f20 <usb_handle_request.constprop.0>
    4628:	2800      	cmp	r0, #0
    462a:	d0c5      	beq.n	45b8 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    462c:	88e2      	ldrh	r2, [r4, #6]
    462e:	6923      	ldr	r3, [r4, #16]
    4630:	429a      	cmp	r2, r3
    4632:	bfd4      	ite	le
    4634:	60e2      	strle	r2, [r4, #12]
    4636:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    4638:	f7ff ff82 	bl	4540 <usb_data_to_host>
    463c:	e7bf      	b.n	45be <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    463e:	4c15      	ldr	r4, [pc, #84]	; (4694 <usb_handle_control_transfer+0x100>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4640:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    4644:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4646:	466b      	mov	r3, sp
		if (usb_dev.data_buf_residue <= 0) {
    4648:	dc04      	bgt.n	4654 <usb_handle_control_transfer+0xc0>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    464a:	f009 fdb4 	bl	e1b6 <usb_dc_ep_read>
    464e:	2800      	cmp	r0, #0
    4650:	dab5      	bge.n	45be <usb_handle_control_transfer+0x2a>
    4652:	e7b1      	b.n	45b8 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4654:	462a      	mov	r2, r5
    4656:	f009 fdae 	bl	e1b6 <usb_dc_ep_read>
    465a:	2800      	cmp	r0, #0
    465c:	dbd9      	blt.n	4612 <usb_handle_control_transfer+0x7e>
		usb_dev.data_buf += chunk;
    465e:	9900      	ldr	r1, [sp, #0]
    4660:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    4662:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    4664:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    4666:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    4668:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    466a:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    466c:	2b00      	cmp	r3, #0
    466e:	d1a6      	bne.n	45be <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    4670:	f104 0338 	add.w	r3, r4, #56	; 0x38
    4674:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    4676:	f7ff fc53 	bl	3f20 <usb_handle_request.constprop.0>
    467a:	2800      	cmp	r0, #0
    467c:	d1dc      	bne.n	4638 <usb_handle_control_transfer+0xa4>
    467e:	e79b      	b.n	45b8 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    4680:	2880      	cmp	r0, #128	; 0x80
    4682:	d19c      	bne.n	45be <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    4684:	4b03      	ldr	r3, [pc, #12]	; (4694 <usb_handle_control_transfer+0x100>)
    4686:	68da      	ldr	r2, [r3, #12]
    4688:	2a00      	cmp	r2, #0
    468a:	d1d5      	bne.n	4638 <usb_handle_control_transfer+0xa4>
    468c:	7d1b      	ldrb	r3, [r3, #20]
    468e:	2b00      	cmp	r3, #0
    4690:	d1d2      	bne.n	4638 <usb_handle_control_transfer+0xa4>
    4692:	e794      	b.n	45be <usb_handle_control_transfer+0x2a>
    4694:	200013e8 	.word	0x200013e8
    4698:	2000028c 	.word	0x2000028c
    469c:	00011317 	.word	0x00011317

000046a0 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    46a0:	4b05      	ldr	r3, [pc, #20]	; (46b8 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    46a2:	4a06      	ldr	r2, [pc, #24]	; (46bc <usb_set_config+0x1c>)
    46a4:	629a      	str	r2, [r3, #40]	; 0x28
    46a6:	4a06      	ldr	r2, [pc, #24]	; (46c0 <usb_set_config+0x20>)
    46a8:	62da      	str	r2, [r3, #44]	; 0x2c
    46aa:	4a06      	ldr	r2, [pc, #24]	; (46c4 <usb_set_config+0x24>)
    46ac:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    46ae:	4a06      	ldr	r2, [pc, #24]	; (46c8 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    46b0:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    46b2:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    46b4:	2000      	movs	r0, #0
    46b6:	4770      	bx	lr
    46b8:	200013e8 	.word	0x200013e8
    46bc:	00004179 	.word	0x00004179
    46c0:	00003dfd 	.word	0x00003dfd
    46c4:	00003e9d 	.word	0x00003e9d
    46c8:	00003e3d 	.word	0x00003e3d

000046cc <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    46cc:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    46ce:	4b10      	ldr	r3, [pc, #64]	; (4710 <usb_device_init+0x44>)
    46d0:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
{
    46d4:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    46d6:	b9c4      	cbnz	r4, 470a <usb_device_init+0x3e>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    46d8:	f000 fa12 	bl	4b00 <usb_get_device_descriptor>
	if (!device_descriptor) {
    46dc:	b980      	cbnz	r0, 4700 <usb_device_init+0x34>
		LOG_ERR("Failed to configure USB device stack");
    46de:	480d      	ldr	r0, [pc, #52]	; (4714 <usb_device_init+0x48>)
    46e0:	6803      	ldr	r3, [r0, #0]
    46e2:	075b      	lsls	r3, r3, #29
    46e4:	d009      	beq.n	46fa <usb_device_init+0x2e>
    46e6:	4b0c      	ldr	r3, [pc, #48]	; (4718 <usb_device_init+0x4c>)
    46e8:	9306      	str	r3, [sp, #24]
    46ea:	aa05      	add	r2, sp, #20
    46ec:	2302      	movs	r3, #2
    46ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    46f2:	9301      	str	r3, [sp, #4]
    46f4:	9305      	str	r3, [sp, #20]
    46f6:	f009 fa43 	bl	db80 <z_log_msg2_static_create.constprop.0>
    46fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    46fe:	e002      	b.n	4706 <usb_device_init+0x3a>
		return -1;
	}

	usb_set_config(device_descriptor);
    4700:	f7ff ffce 	bl	46a0 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    4704:	4620      	mov	r0, r4
}
    4706:	b008      	add	sp, #32
    4708:	bd10      	pop	{r4, pc}
		return -EALREADY;
    470a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    470e:	e7fa      	b.n	4706 <usb_device_init+0x3a>
    4710:	200013e8 	.word	0x200013e8
    4714:	2000028c 	.word	0x2000028c
    4718:	00011330 	.word	0x00011330

0000471c <usb_enable>:
{
    471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4720:	4604      	mov	r4, r0
    4722:	b088      	sub	sp, #32
	if (usb_dev.enabled == true) {
    4724:	4d3c      	ldr	r5, [pc, #240]	; (4818 <usb_enable+0xfc>)
	return z_impl_k_mutex_lock(mutex, timeout);
    4726:	483d      	ldr	r0, [pc, #244]	; (481c <usb_enable+0x100>)
    4728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    472c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4730:	f006 f842 	bl	a7b8 <z_impl_k_mutex_lock>
    4734:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    4738:	b18e      	cbz	r6, 475e <usb_enable+0x42>
		LOG_WRN("USB device support already enabled");
    473a:	4839      	ldr	r0, [pc, #228]	; (4820 <usb_enable+0x104>)
    473c:	6803      	ldr	r3, [r0, #0]
    473e:	f013 0f06 	tst.w	r3, #6
    4742:	d009      	beq.n	4758 <usb_enable+0x3c>
    4744:	4b37      	ldr	r3, [pc, #220]	; (4824 <usb_enable+0x108>)
    4746:	9306      	str	r3, [sp, #24]
    4748:	aa05      	add	r2, sp, #20
    474a:	2302      	movs	r3, #2
    474c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4750:	9301      	str	r3, [sp, #4]
    4752:	9305      	str	r3, [sp, #20]
    4754:	f009 fa14 	bl	db80 <z_log_msg2_static_create.constprop.0>
		ret = -EALREADY;
    4758:	f06f 0477 	mvn.w	r4, #119	; 0x77
    475c:	e03f      	b.n	47de <usb_enable+0xc2>
	usb_dev.status_callback = cb;
    475e:	4832      	ldr	r0, [pc, #200]	; (4828 <usb_enable+0x10c>)
	usb_dev.user_status_callback = status_cb;
    4760:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    4762:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    4764:	f002 fdea 	bl	733c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    4768:	f002 faf0 	bl	6d4c <usb_dc_attach>
	if (ret < 0) {
    476c:	1e04      	subs	r4, r0, #0
    476e:	db36      	blt.n	47de <usb_enable+0xc2>
	ret = usb_transfer_init();
    4770:	f000 fbe6 	bl	4f40 <usb_transfer_init>
	if (ret < 0) {
    4774:	1e04      	subs	r4, r0, #0
    4776:	db32      	blt.n	47de <usb_enable+0xc2>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    4778:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    477a:	a802      	add	r0, sp, #8
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    477c:	f8ad 300a 	strh.w	r3, [sp, #10]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    4780:	f88d 600c 	strb.w	r6, [sp, #12]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    4784:	f88d 6008 	strb.w	r6, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4788:	f002 fb70 	bl	6e6c <usb_dc_ep_configure>
	if (ret < 0) {
    478c:	1e04      	subs	r4, r0, #0
    478e:	db26      	blt.n	47de <usb_enable+0xc2>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    4790:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    4792:	a802      	add	r0, sp, #8
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    4794:	f88d 7008 	strb.w	r7, [sp, #8]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4798:	f002 fb68 	bl	6e6c <usb_dc_ep_configure>
	if (ret < 0) {
    479c:	1e04      	subs	r4, r0, #0
    479e:	db1e      	blt.n	47de <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    47a0:	4922      	ldr	r1, [pc, #136]	; (482c <usb_enable+0x110>)
    47a2:	4630      	mov	r0, r6
    47a4:	f002 fdb6 	bl	7314 <usb_dc_ep_set_callback>
	if (ret < 0) {
    47a8:	1e04      	subs	r4, r0, #0
    47aa:	db18      	blt.n	47de <usb_enable+0xc2>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    47ac:	491f      	ldr	r1, [pc, #124]	; (482c <usb_enable+0x110>)
    47ae:	4638      	mov	r0, r7
    47b0:	f002 fdb0 	bl	7314 <usb_dc_ep_set_callback>
	if (ret < 0) {
    47b4:	1e04      	subs	r4, r0, #0
    47b6:	db12      	blt.n	47de <usb_enable+0xc2>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    47b8:	4c1d      	ldr	r4, [pc, #116]	; (4830 <usb_enable+0x114>)
    47ba:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4834 <usb_enable+0x118>
    47be:	4544      	cmp	r4, r8
    47c0:	d314      	bcc.n	47ec <usb_enable+0xd0>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    47c2:	2000      	movs	r0, #0
    47c4:	f002 fc02 	bl	6fcc <usb_dc_ep_enable>
	if (ret < 0) {
    47c8:	1e04      	subs	r4, r0, #0
    47ca:	db08      	blt.n	47de <usb_enable+0xc2>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    47cc:	2080      	movs	r0, #128	; 0x80
    47ce:	f002 fbfd 	bl	6fcc <usb_dc_ep_enable>
	if (ret < 0) {
    47d2:	1e04      	subs	r4, r0, #0
    47d4:	db03      	blt.n	47de <usb_enable+0xc2>
	usb_dev.enabled = true;
    47d6:	2301      	movs	r3, #1
    47d8:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    47dc:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    47de:	480f      	ldr	r0, [pc, #60]	; (481c <usb_enable+0x100>)
    47e0:	f006 f862 	bl	a8a8 <z_impl_k_mutex_unlock>
}
    47e4:	4620      	mov	r0, r4
    47e6:	b008      	add	sp, #32
    47e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    47ec:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    47ee:	2600      	movs	r6, #0
    47f0:	7f22      	ldrb	r2, [r4, #28]
    47f2:	b2f3      	uxtb	r3, r6
    47f4:	429a      	cmp	r2, r3
    47f6:	d801      	bhi.n	47fc <usb_enable+0xe0>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    47f8:	3424      	adds	r4, #36	; 0x24
    47fa:	e7e0      	b.n	47be <usb_enable+0xa2>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    47fc:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    4800:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    4804:	7910      	ldrb	r0, [r2, #4]
    4806:	f002 fd85 	bl	7314 <usb_dc_ep_set_callback>
    480a:	3601      	adds	r6, #1
    480c:	2800      	cmp	r0, #0
    480e:	d0ef      	beq.n	47f0 <usb_enable+0xd4>
    4810:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4814:	e7e3      	b.n	47de <usb_enable+0xc2>
    4816:	bf00      	nop
    4818:	200013e8 	.word	0x200013e8
    481c:	200002b4 	.word	0x200002b4
    4820:	2000028c 	.word	0x2000028c
    4824:	00011355 	.word	0x00011355
    4828:	00004035 	.word	0x00004035
    482c:	00004595 	.word	0x00004595
    4830:	200003e8 	.word	0x200003e8
    4834:	2000040c 	.word	0x2000040c

00004838 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    4838:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    483a:	4b1f      	ldr	r3, [pc, #124]	; (48b8 <usb_update_sn_string_descriptor+0x80>)
{
    483c:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    483e:	aa05      	add	r2, sp, #20
    4840:	f103 0510 	add.w	r5, r3, #16
    4844:	6818      	ldr	r0, [r3, #0]
    4846:	6859      	ldr	r1, [r3, #4]
    4848:	4614      	mov	r4, r2
    484a:	c403      	stmia	r4!, {r0, r1}
    484c:	3308      	adds	r3, #8
    484e:	42ab      	cmp	r3, r5
    4850:	4622      	mov	r2, r4
    4852:	d1f7      	bne.n	4844 <usb_update_sn_string_descriptor+0xc>
    4854:	781b      	ldrb	r3, [r3, #0]
    4856:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    4858:	2210      	movs	r2, #16
    485a:	2100      	movs	r1, #0
    485c:	a801      	add	r0, sp, #4
    485e:	f009 fc44 	bl	e0ea <memset>
	memset(sn, 0, sizeof(sn));
    4862:	2212      	movs	r2, #18
    4864:	2100      	movs	r1, #0
    4866:	4815      	ldr	r0, [pc, #84]	; (48bc <usb_update_sn_string_descriptor+0x84>)
    4868:	f009 fc3f 	bl	e0ea <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    486c:	2110      	movs	r1, #16
    486e:	a801      	add	r0, sp, #4
    4870:	f009 fd93 	bl	e39a <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    4874:	2800      	cmp	r0, #0
    4876:	dd1b      	ble.n	48b0 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    4878:	2808      	cmp	r0, #8
    487a:	bfb8      	it	lt
    487c:	2008      	movlt	r0, #8
    487e:	3808      	subs	r0, #8
    4880:	ab01      	add	r3, sp, #4
    4882:	4a0e      	ldr	r2, [pc, #56]	; (48bc <usb_update_sn_string_descriptor+0x84>)
    4884:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    4886:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    4888:	f810 3b01 	ldrb.w	r3, [r0], #1
    488c:	ac0a      	add	r4, sp, #40	; 0x28
    488e:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    4892:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    4896:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    489a:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    489c:	ac0a      	add	r4, sp, #40	; 0x28
    489e:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    48a0:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    48a2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    48a6:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    48a8:	2908      	cmp	r1, #8
    48aa:	f102 0202 	add.w	r2, r2, #2
    48ae:	d1eb      	bne.n	4888 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    48b0:	4802      	ldr	r0, [pc, #8]	; (48bc <usb_update_sn_string_descriptor+0x84>)
    48b2:	b00b      	add	sp, #44	; 0x2c
    48b4:	bd30      	pop	{r4, r5, pc}
    48b6:	bf00      	nop
    48b8:	00011383 	.word	0x00011383
    48bc:	200021ed 	.word	0x200021ed

000048c0 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    48c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48c4:	4604      	mov	r4, r0
    48c6:	b08b      	sub	sp, #44	; 0x2c
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    48c8:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    48ca:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    48ce:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    48d0:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    48d2:	4637      	mov	r7, r6

	while (head->bLength != 0U) {
    48d4:	7820      	ldrb	r0, [r4, #0]
    48d6:	b920      	cbnz	r0, 48e2 <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    48d8:	4b7f      	ldr	r3, [pc, #508]	; (4ad8 <usb_fix_descriptor+0x218>)
    48da:	3402      	adds	r4, #2
    48dc:	429c      	cmp	r4, r3
    48de:	d039      	beq.n	4954 <usb_fix_descriptor+0x94>
    48e0:	e7f2      	b.n	48c8 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    48e2:	7863      	ldrb	r3, [r4, #1]
    48e4:	2b05      	cmp	r3, #5
    48e6:	d805      	bhi.n	48f4 <usb_fix_descriptor+0x34>
    48e8:	e8df f003 	tbb	[pc, r3]
    48ec:	a30304a3 	.word	0xa30304a3
    48f0:	2c07      	.short	0x2c07
    48f2:	4627      	mov	r7, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    48f4:	7823      	ldrb	r3, [r4, #0]
    48f6:	441c      	add	r4, r3
    48f8:	e7ec      	b.n	48d4 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    48fa:	78e3      	ldrb	r3, [r4, #3]
    48fc:	2b00      	cmp	r3, #0
    48fe:	d1f9      	bne.n	48f4 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    4900:	78a3      	ldrb	r3, [r4, #2]
    4902:	b1e3      	cbz	r3, 493e <usb_fix_descriptor+0x7e>
			numof_ifaces++;
    4904:	f10a 0a01 	add.w	sl, sl, #1
    4908:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    490c:	e7f2      	b.n	48f4 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    490e:	686a      	ldr	r2, [r5, #4]
    4910:	4294      	cmp	r4, r2
    4912:	f000 80d9 	beq.w	4ac8 <usb_fix_descriptor+0x208>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4916:	3524      	adds	r5, #36	; 0x24
    4918:	429d      	cmp	r5, r3
    491a:	d3f8      	bcc.n	490e <usb_fix_descriptor+0x4e>
					LOG_ERR("There is no usb_cfg_data "
    491c:	486f      	ldr	r0, [pc, #444]	; (4adc <usb_fix_descriptor+0x21c>)
    491e:	6803      	ldr	r3, [r0, #0]
    4920:	075b      	lsls	r3, r3, #29
    4922:	d015      	beq.n	4950 <usb_fix_descriptor+0x90>
    4924:	4b6e      	ldr	r3, [pc, #440]	; (4ae0 <usb_fix_descriptor+0x220>)
    4926:	e9cd 3408 	strd	r3, r4, [sp, #32]
    492a:	2303      	movs	r3, #3
    492c:	9303      	str	r3, [sp, #12]
    492e:	9307      	str	r3, [sp, #28]
    4930:	2300      	movs	r3, #0
    4932:	aa07      	add	r2, sp, #28
    4934:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4938:	f008 f801 	bl	c93e <z_impl_z_log_msg2_static_create>
    493c:	e008      	b.n	4950 <usb_fix_descriptor+0x90>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    493e:	4d69      	ldr	r5, [pc, #420]	; (4ae4 <usb_fix_descriptor+0x224>)
    4940:	4b69      	ldr	r3, [pc, #420]	; (4ae8 <usb_fix_descriptor+0x228>)
    4942:	e7e9      	b.n	4918 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    4944:	2d00      	cmp	r5, #0
    4946:	d171      	bne.n	4a2c <usb_fix_descriptor+0x16c>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    4948:	4864      	ldr	r0, [pc, #400]	; (4adc <usb_fix_descriptor+0x21c>)
    494a:	6803      	ldr	r3, [r0, #0]
    494c:	075d      	lsls	r5, r3, #29
    494e:	d104      	bne.n	495a <usb_fix_descriptor+0x9a>
				return -1;
    4950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    4954:	b00b      	add	sp, #44	; 0x2c
    4956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    495a:	4b64      	ldr	r3, [pc, #400]	; (4aec <usb_fix_descriptor+0x22c>)
				LOG_ERR("Failed to validate endpoints");
    495c:	9308      	str	r3, [sp, #32]
    495e:	2302      	movs	r3, #2
    4960:	9303      	str	r3, [sp, #12]
    4962:	9307      	str	r3, [sp, #28]
    4964:	2300      	movs	r3, #0
    4966:	aa07      	add	r2, sp, #28
    4968:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    496c:	e7e4      	b.n	4938 <usb_fix_descriptor+0x78>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    496e:	6a2a      	ldr	r2, [r5, #32]
    4970:	f894 c002 	ldrb.w	ip, [r4, #2]
    4974:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    4978:	7910      	ldrb	r0, [r2, #4]
    497a:	4584      	cmp	ip, r0
    497c:	d009      	beq.n	4992 <usb_fix_descriptor+0xd2>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    497e:	3301      	adds	r3, #1
    4980:	7f2a      	ldrb	r2, [r5, #28]
    4982:	4293      	cmp	r3, r2
    4984:	d3f3      	bcc.n	496e <usb_fix_descriptor+0xae>
				LOG_ERR("Failed to validate endpoints");
    4986:	4855      	ldr	r0, [pc, #340]	; (4adc <usb_fix_descriptor+0x21c>)
    4988:	6803      	ldr	r3, [r0, #0]
    498a:	075c      	lsls	r4, r3, #29
    498c:	d0e0      	beq.n	4950 <usb_fix_descriptor+0x90>
    498e:	4b58      	ldr	r3, [pc, #352]	; (4af0 <usb_fix_descriptor+0x230>)
    4990:	e7e4      	b.n	495c <usb_fix_descriptor+0x9c>
    4992:	f04f 0801 	mov.w	r8, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    4996:	78e0      	ldrb	r0, [r4, #3]
    4998:	f000 0003 	and.w	r0, r0, #3
    499c:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    49a0:	7920      	ldrb	r0, [r4, #4]
    49a2:	f894 c005 	ldrb.w	ip, [r4, #5]
    49a6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    49aa:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    49ae:	f994 0002 	ldrsb.w	r0, [r4, #2]
    49b2:	2800      	cmp	r0, #0
    49b4:	fa5f f988 	uxtb.w	r9, r8
    49b8:	da2a      	bge.n	4a10 <usb_fix_descriptor+0x150>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    49ba:	f108 0010 	add.w	r0, r8, #16
    49be:	fa01 f000 	lsl.w	r0, r1, r0
    49c2:	ea10 0f0b 	tst.w	r0, fp
    49c6:	d12b      	bne.n	4a20 <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    49c8:	f069 007f 	orn	r0, r9, #127	; 0x7f
    49cc:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    49d0:	a804      	add	r0, sp, #16
    49d2:	e9cd 3200 	strd	r3, r2, [sp]
    49d6:	f002 fa09 	bl	6dec <usb_dc_ep_check_cap>
    49da:	e9dd 3200 	ldrd	r3, r2, [sp]
    49de:	2101      	movs	r1, #1
    49e0:	b9f0      	cbnz	r0, 4a20 <usb_fix_descriptor+0x160>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    49e2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    49e6:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    49e8:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    49ec:	bf1c      	itt	ne
    49ee:	f109 0910 	addne.w	r9, r9, #16
    49f2:	fa5f f989 	uxtbne.w	r9, r9
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    49f6:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    49f8:	bf18      	it	ne
    49fa:	fa01 f909 	lslne.w	r9, r1, r9
    49fe:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
    4a00:	bf0a      	itet	eq
    4a02:	fa01 f308 	lsleq.w	r3, r1, r8
					*requested_ep |= (1U << (idx + 16U));
    4a06:	ea4b 0b09 	orrne.w	fp, fp, r9
					*requested_ep |= (1U << idx);
    4a0a:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    4a0e:	e771      	b.n	48f4 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    4a10:	fa01 f008 	lsl.w	r0, r1, r8
    4a14:	ea10 0f0b 	tst.w	r0, fp
    4a18:	d102      	bne.n	4a20 <usb_fix_descriptor+0x160>
				ep_cfg.ep_addr = idx;
    4a1a:	f88d 9010 	strb.w	r9, [sp, #16]
    4a1e:	e7d7      	b.n	49d0 <usb_fix_descriptor+0x110>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    4a20:	f108 0801 	add.w	r8, r8, #1
    4a24:	f1b8 0f10 	cmp.w	r8, #16
    4a28:	d1b5      	bne.n	4996 <usb_fix_descriptor+0xd6>
    4a2a:	e7a8      	b.n	497e <usb_fix_descriptor+0xbe>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    4a2c:	2300      	movs	r3, #0
    4a2e:	2101      	movs	r1, #1
    4a30:	e7a6      	b.n	4980 <usb_fix_descriptor+0xc0>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    4a32:	2e03      	cmp	r6, #3
    4a34:	d12d      	bne.n	4a92 <usb_fix_descriptor+0x1d2>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    4a36:	f7ff feff 	bl	4838 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    4a3a:	4680      	mov	r8, r0
    4a3c:	b1b8      	cbz	r0, 4a6e <usb_fix_descriptor+0x1ae>
	runtime_sn_len = strlen(runtime_sn);
    4a3e:	f009 faf3 	bl	e028 <strlen>
	if (!runtime_sn_len) {
    4a42:	4681      	mov	r9, r0
    4a44:	b198      	cbz	r0, 4a6e <usb_fix_descriptor+0x1ae>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    4a46:	482b      	ldr	r0, [pc, #172]	; (4af4 <usb_fix_descriptor+0x234>)
    4a48:	f009 faee 	bl	e028 <strlen>
	if (runtime_sn_len != default_sn_len) {
    4a4c:	4581      	cmp	r9, r0
    4a4e:	d01a      	beq.n	4a86 <usb_fix_descriptor+0x1c6>
		LOG_ERR("the new SN descriptor doesn't have the same "
    4a50:	4822      	ldr	r0, [pc, #136]	; (4adc <usb_fix_descriptor+0x21c>)
    4a52:	6803      	ldr	r3, [r0, #0]
    4a54:	0759      	lsls	r1, r3, #29
    4a56:	d00a      	beq.n	4a6e <usb_fix_descriptor+0x1ae>
    4a58:	4b27      	ldr	r3, [pc, #156]	; (4af8 <usb_fix_descriptor+0x238>)
    4a5a:	9308      	str	r3, [sp, #32]
    4a5c:	2302      	movs	r3, #2
    4a5e:	9303      	str	r3, [sp, #12]
    4a60:	9307      	str	r3, [sp, #28]
    4a62:	2300      	movs	r3, #0
    4a64:	aa07      	add	r2, sp, #28
    4a66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4a6a:	f007 ff68 	bl	c93e <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    4a6e:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    4a70:	f06f 0102 	mvn.w	r1, #2
    4a74:	18e2      	adds	r2, r4, r3
    4a76:	1b09      	subs	r1, r1, r4
    4a78:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    4a7c:	42d1      	cmn	r1, r2
    4a7e:	d512      	bpl.n	4aa6 <usb_fix_descriptor+0x1e6>
			str_descr_idx += 1U;
    4a80:	3601      	adds	r6, #1
    4a82:	b2f6      	uxtb	r6, r6
			break;
    4a84:	e736      	b.n	48f4 <usb_fix_descriptor+0x34>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    4a86:	464a      	mov	r2, r9
    4a88:	4641      	mov	r1, r8
    4a8a:	1ca0      	adds	r0, r4, #2
    4a8c:	f009 fb22 	bl	e0d4 <memcpy>
    4a90:	e7ed      	b.n	4a6e <usb_fix_descriptor+0x1ae>
			if (str_descr_idx) {
    4a92:	2e00      	cmp	r6, #0
    4a94:	d1eb      	bne.n	4a6e <usb_fix_descriptor+0x1ae>
				if (!cfg_descr) {
    4a96:	b97f      	cbnz	r7, 4ab8 <usb_fix_descriptor+0x1f8>
					LOG_ERR("Incomplete device descriptor");
    4a98:	4810      	ldr	r0, [pc, #64]	; (4adc <usb_fix_descriptor+0x21c>)
    4a9a:	6803      	ldr	r3, [r0, #0]
    4a9c:	075a      	lsls	r2, r3, #29
    4a9e:	f43f af57 	beq.w	4950 <usb_fix_descriptor+0x90>
    4aa2:	4b16      	ldr	r3, [pc, #88]	; (4afc <usb_fix_descriptor+0x23c>)
    4aa4:	e75a      	b.n	495c <usb_fix_descriptor+0x9c>
		buf[i] = 0U;
    4aa6:	f04f 0000 	mov.w	r0, #0
    4aaa:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    4aae:	f813 0901 	ldrb.w	r0, [r3], #-1
    4ab2:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    4ab6:	e7e1      	b.n	4a7c <usb_fix_descriptor+0x1bc>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    4ab8:	1be3      	subs	r3, r4, r7
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    4aba:	70bb      	strb	r3, [r7, #2]
	dst[1] = val >> 8;
    4abc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4ac0:	70fb      	strb	r3, [r7, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    4ac2:	f887 a004 	strb.w	sl, [r7, #4]
    4ac6:	e7db      	b.n	4a80 <usb_fix_descriptor+0x1c0>
				if (cfg_data->interface_config) {
    4ac8:	68ab      	ldr	r3, [r5, #8]
    4aca:	2b00      	cmp	r3, #0
    4acc:	f43f af1a 	beq.w	4904 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    4ad0:	4651      	mov	r1, sl
    4ad2:	4620      	mov	r0, r4
    4ad4:	4798      	blx	r3
    4ad6:	e715      	b.n	4904 <usb_fix_descriptor+0x44>
    4ad8:	200003e7 	.word	0x200003e7
    4adc:	20000288 	.word	0x20000288
    4ae0:	00011394 	.word	0x00011394
    4ae4:	200003e8 	.word	0x200003e8
    4ae8:	2000040c 	.word	0x2000040c
    4aec:	000113b4 	.word	0x000113b4
    4af0:	000113f5 	.word	0x000113f5
    4af4:	00011383 	.word	0x00011383
    4af8:	00011412 	.word	0x00011412
    4afc:	0001145d 	.word	0x0001145d

00004b00 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    4b00:	b500      	push	{lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    4b02:	480e      	ldr	r0, [pc, #56]	; (4b3c <usb_get_device_descriptor+0x3c>)
{
    4b04:	b089      	sub	sp, #36	; 0x24
	if (usb_fix_descriptor(__usb_descriptor_start)) {
    4b06:	f7ff fedb 	bl	48c0 <usb_fix_descriptor>
    4b0a:	b198      	cbz	r0, 4b34 <usb_get_device_descriptor+0x34>
		LOG_ERR("Failed to fixup USB descriptor");
    4b0c:	480c      	ldr	r0, [pc, #48]	; (4b40 <usb_get_device_descriptor+0x40>)
    4b0e:	6803      	ldr	r3, [r0, #0]
    4b10:	f013 0307 	ands.w	r3, r3, #7
    4b14:	d010      	beq.n	4b38 <usb_get_device_descriptor+0x38>
    4b16:	4b0b      	ldr	r3, [pc, #44]	; (4b44 <usb_get_device_descriptor+0x44>)
    4b18:	9306      	str	r3, [sp, #24]
    4b1a:	2302      	movs	r3, #2
    4b1c:	9301      	str	r3, [sp, #4]
    4b1e:	9305      	str	r3, [sp, #20]
    4b20:	2300      	movs	r3, #0
    4b22:	aa05      	add	r2, sp, #20
    4b24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b28:	f007 ff09 	bl	c93e <z_impl_z_log_msg2_static_create>
		return NULL;
    4b2c:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    4b2e:	b009      	add	sp, #36	; 0x24
    4b30:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    4b34:	4801      	ldr	r0, [pc, #4]	; (4b3c <usb_get_device_descriptor+0x3c>)
    4b36:	e7fa      	b.n	4b2e <usb_get_device_descriptor+0x2e>
		return NULL;
    4b38:	4618      	mov	r0, r3
    4b3a:	e7f8      	b.n	4b2e <usb_get_device_descriptor+0x2e>
    4b3c:	20000328 	.word	0x20000328
    4b40:	20000288 	.word	0x20000288
    4b44:	0001147a 	.word	0x0001147a

00004b48 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    4b48:	b510      	push	{r4, lr}
    4b4a:	4b09      	ldr	r3, [pc, #36]	; (4b70 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4b4c:	2100      	movs	r1, #0
    4b4e:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    4b50:	781c      	ldrb	r4, [r3, #0]
    4b52:	4284      	cmp	r4, r0
    4b54:	d105      	bne.n	4b62 <usb_ep_get_transfer+0x1a>
    4b56:	685c      	ldr	r4, [r3, #4]
    4b58:	b11c      	cbz	r4, 4b62 <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
    4b5a:	2048      	movs	r0, #72	; 0x48
    4b5c:	fb00 2001 	mla	r0, r0, r1, r2
		}
	}

	return NULL;
}
    4b60:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4b62:	3101      	adds	r1, #1
    4b64:	2904      	cmp	r1, #4
    4b66:	f103 0348 	add.w	r3, r3, #72	; 0x48
    4b6a:	d1f1      	bne.n	4b50 <usb_ep_get_transfer+0x8>
	return NULL;
    4b6c:	2000      	movs	r0, #0
    4b6e:	e7f7      	b.n	4b60 <usb_ep_get_transfer+0x18>
    4b70:	200014ac 	.word	0x200014ac

00004b74 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    4b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b78:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    4b7a:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
    4b7e:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
    4b82:	3310      	adds	r3, #16
{
    4b84:	af00      	add	r7, sp, #0
    4b86:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    4b88:	d111      	bne.n	4bae <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    4b8a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    4b8c:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
    4b90:	f013 0602 	ands.w	r6, r3, #2
    4b94:	d053      	beq.n	4c3e <usb_transfer_work+0xca>
		if (!trans->bsize) {
    4b96:	bb0a      	cbnz	r2, 4bdc <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    4b98:	f013 0304 	ands.w	r3, r3, #4
    4b9c:	d104      	bne.n	4ba8 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    4b9e:	461a      	mov	r2, r3
    4ba0:	4619      	mov	r1, r3
    4ba2:	4628      	mov	r0, r5
    4ba4:	f7ff fc98 	bl	44d8 <usb_write>
			}
			trans->status = 0;
    4ba8:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    4baa:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4bae:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4bb2:	3310      	adds	r3, #16
    4bb4:	d00e      	beq.n	4bd4 <usb_transfer_work+0x60>
    4bb6:	f854 6c20 	ldr.w	r6, [r4, #-32]
    4bba:	b15e      	cbz	r6, 4bd4 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4bbc:	f854 8c24 	ldr.w	r8, [r4, #-36]
		void *priv = trans->priv;
    4bc0:	f854 9c1c 	ldr.w	r9, [r4, #-28]

		if (k_is_in_isr()) {
    4bc4:	f009 ffb7 	bl	eb36 <k_is_in_isr>
    4bc8:	2800      	cmp	r0, #0
    4bca:	d07b      	beq.n	4cc4 <usb_transfer_work+0x150>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4bcc:	4845      	ldr	r0, [pc, #276]	; (4ce4 <usb_transfer_work+0x170>)
    4bce:	4621      	mov	r1, r4
    4bd0:	f00a f889 	bl	ece6 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    4bd4:	370c      	adds	r7, #12
    4bd6:	46bd      	mov	sp, r7
    4bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    4bdc:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    4be0:	463b      	mov	r3, r7
    4be2:	4628      	mov	r0, r5
    4be4:	f7ff fc78 	bl	44d8 <usb_write>
		if (ret) {
    4be8:	4603      	mov	r3, r0
    4bea:	b1b8      	cbz	r0, 4c1c <usb_transfer_work+0xa8>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4bec:	483e      	ldr	r0, [pc, #248]	; (4ce8 <usb_transfer_work+0x174>)
    4bee:	6802      	ldr	r2, [r0, #0]
    4bf0:	0751      	lsls	r1, r2, #29
    4bf2:	d010      	beq.n	4c16 <usb_transfer_work+0xa2>
    4bf4:	493d      	ldr	r1, [pc, #244]	; (4cec <usb_transfer_work+0x178>)
    4bf6:	466e      	mov	r6, sp
    4bf8:	b088      	sub	sp, #32
    4bfa:	466a      	mov	r2, sp
    4bfc:	e9c2 1304 	strd	r1, r3, [r2, #16]
    4c00:	2304      	movs	r3, #4
    4c02:	6195      	str	r5, [r2, #24]
    4c04:	607b      	str	r3, [r7, #4]
    4c06:	f842 3f0c 	str.w	r3, [r2, #12]!
    4c0a:	2300      	movs	r3, #0
    4c0c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4c10:	f007 fe95 	bl	c93e <z_impl_z_log_msg2_static_create>
    4c14:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    4c16:	f06f 0315 	mvn.w	r3, #21
    4c1a:	e7c6      	b.n	4baa <usb_transfer_work+0x36>
		trans->buffer += bytes;
    4c1c:	683a      	ldr	r2, [r7, #0]
    4c1e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    4c22:	4413      	add	r3, r2
    4c24:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    4c28:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4c2c:	1a9b      	subs	r3, r3, r2
    4c2e:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    4c32:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4c36:	4413      	add	r3, r2
    4c38:	f844 3c24 	str.w	r3, [r4, #-36]
    4c3c:	e7b7      	b.n	4bae <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    4c3e:	f850 1c2c 	ldr.w	r1, [r0, #-44]
    4c42:	463b      	mov	r3, r7
    4c44:	4628      	mov	r0, r5
    4c46:	f002 faab 	bl	71a0 <usb_dc_ep_read_wait>
		if (ret) {
    4c4a:	4603      	mov	r3, r0
    4c4c:	b1a8      	cbz	r0, 4c7a <usb_transfer_work+0x106>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4c4e:	4826      	ldr	r0, [pc, #152]	; (4ce8 <usb_transfer_work+0x174>)
    4c50:	6802      	ldr	r2, [r0, #0]
    4c52:	0752      	lsls	r2, r2, #29
    4c54:	d0df      	beq.n	4c16 <usb_transfer_work+0xa2>
    4c56:	4925      	ldr	r1, [pc, #148]	; (4cec <usb_transfer_work+0x178>)
    4c58:	46e8      	mov	r8, sp
    4c5a:	b088      	sub	sp, #32
    4c5c:	466a      	mov	r2, sp
    4c5e:	e9c2 1304 	strd	r1, r3, [r2, #16]
    4c62:	2304      	movs	r3, #4
    4c64:	6195      	str	r5, [r2, #24]
    4c66:	607b      	str	r3, [r7, #4]
    4c68:	f842 3f0c 	str.w	r3, [r2, #12]!
    4c6c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4c70:	4633      	mov	r3, r6
    4c72:	f007 fe64 	bl	c93e <z_impl_z_log_msg2_static_create>
    4c76:	46c5      	mov	sp, r8
    4c78:	e7cd      	b.n	4c16 <usb_transfer_work+0xa2>
		trans->buffer += bytes;
    4c7a:	683e      	ldr	r6, [r7, #0]
    4c7c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    4c80:	4433      	add	r3, r6
    4c82:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
    4c86:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4c8a:	1b9b      	subs	r3, r3, r6
    4c8c:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
    4c90:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4c94:	4433      	add	r3, r6
    4c96:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    4c9a:	2e00      	cmp	r6, #0
    4c9c:	d084      	beq.n	4ba8 <usb_transfer_work+0x34>
    4c9e:	4628      	mov	r0, r5
    4ca0:	f002 fb52 	bl	7348 <usb_dc_ep_mps>
    4ca4:	fbb6 f3f0 	udiv	r3, r6, r0
    4ca8:	fb03 6610 	mls	r6, r3, r0, r6
    4cac:	2e00      	cmp	r6, #0
    4cae:	f47f af7b 	bne.w	4ba8 <usb_transfer_work+0x34>
    4cb2:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	f43f af76 	beq.w	4ba8 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    4cbc:	4628      	mov	r0, r5
    4cbe:	f002 fad1 	bl	7264 <usb_dc_ep_read_continue>
    4cc2:	e774      	b.n	4bae <usb_transfer_work+0x3a>
		trans->cb = NULL;
    4cc4:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
    4cc8:	f1a4 0018 	sub.w	r0, r4, #24
    4ccc:	f005 fe64 	bl	a998 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    4cd0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4cd4:	338c      	adds	r3, #140	; 0x8c
    4cd6:	f43f af7d 	beq.w	4bd4 <usb_transfer_work+0x60>
			cb(ep, tsize, priv);
    4cda:	464a      	mov	r2, r9
    4cdc:	4641      	mov	r1, r8
    4cde:	4628      	mov	r0, r5
    4ce0:	47b0      	blx	r6
    4ce2:	e777      	b.n	4bd4 <usb_transfer_work+0x60>
    4ce4:	20000bb8 	.word	0x20000bb8
    4ce8:	20000294 	.word	0x20000294
    4cec:	000114a8 	.word	0x000114a8

00004cf0 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    4cf0:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4cf2:	1e4b      	subs	r3, r1, #1
    4cf4:	2b01      	cmp	r3, #1
{
    4cf6:	b088      	sub	sp, #32
    4cf8:	4606      	mov	r6, r0
    4cfa:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4cfc:	d81c      	bhi.n	4d38 <usb_transfer_ep_callback+0x48>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    4cfe:	f7ff ff23 	bl	4b48 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    4d02:	4604      	mov	r4, r0
    4d04:	b9d0      	cbnz	r0, 4d3c <usb_transfer_ep_callback+0x4c>
		if (status == USB_DC_EP_DATA_OUT) {
    4d06:	2d01      	cmp	r5, #1
    4d08:	d116      	bne.n	4d38 <usb_transfer_ep_callback+0x48>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    4d0a:	466b      	mov	r3, sp
    4d0c:	2201      	movs	r2, #1
    4d0e:	a902      	add	r1, sp, #8
    4d10:	4630      	mov	r0, r6
    4d12:	f002 fa45 	bl	71a0 <usb_dc_ep_read_wait>
			} while (bytes);
    4d16:	9b00      	ldr	r3, [sp, #0]
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d1f6      	bne.n	4d0a <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    4d1c:	4811      	ldr	r0, [pc, #68]	; (4d64 <usb_transfer_ep_callback+0x74>)
    4d1e:	6802      	ldr	r2, [r0, #0]
    4d20:	0752      	lsls	r2, r2, #29
    4d22:	d009      	beq.n	4d38 <usb_transfer_ep_callback+0x48>
    4d24:	4a10      	ldr	r2, [pc, #64]	; (4d68 <usb_transfer_ep_callback+0x78>)
    4d26:	9206      	str	r2, [sp, #24]
    4d28:	2202      	movs	r2, #2
    4d2a:	9201      	str	r2, [sp, #4]
    4d2c:	9205      	str	r2, [sp, #20]
    4d2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4d32:	aa05      	add	r2, sp, #20
    4d34:	f007 fe03 	bl	c93e <z_impl_z_log_msg2_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    4d38:	b008      	add	sp, #32
    4d3a:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4d3c:	f009 fefb 	bl	eb36 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4d40:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4d44:	b108      	cbz	r0, 4d4a <usb_transfer_ep_callback+0x5a>
    4d46:	2d01      	cmp	r5, #1
    4d48:	d105      	bne.n	4d56 <usb_transfer_ep_callback+0x66>
		usb_transfer_work(&trans->work);
    4d4a:	4608      	mov	r0, r1
}
    4d4c:	b008      	add	sp, #32
    4d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    4d52:	f7ff bf0f 	b.w	4b74 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4d56:	4805      	ldr	r0, [pc, #20]	; (4d6c <usb_transfer_ep_callback+0x7c>)
}
    4d58:	b008      	add	sp, #32
    4d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4d5e:	f009 bfc2 	b.w	ece6 <k_work_submit_to_queue>
    4d62:	bf00      	nop
    4d64:	20000294 	.word	0x20000294
    4d68:	000114c5 	.word	0x000114c5
    4d6c:	20000bb8 	.word	0x20000bb8

00004d70 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    4d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d74:	b08b      	sub	sp, #44	; 0x2c
    4d76:	4605      	mov	r5, r0
    4d78:	9100      	str	r1, [sp, #0]
    4d7a:	4616      	mov	r6, r2
    4d7c:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    4d7e:	f008 ff32 	bl	dbe6 <usb_transfer_is_busy>
    4d82:	4604      	mov	r4, r0
    4d84:	2800      	cmp	r0, #0
    4d86:	f040 8086 	bne.w	4e96 <usb_transfer+0x126>
	__asm__ volatile(
    4d8a:	f04f 0320 	mov.w	r3, #32
    4d8e:	f3ef 8211 	mrs	r2, BASEPRI
    4d92:	f383 8812 	msr	BASEPRI_MAX, r3
    4d96:	f3bf 8f6f 	isb	sy
    4d9a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 4e9c <usb_transfer+0x12c>
    4d9e:	9201      	str	r2, [sp, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4da0:	f04f 0a48 	mov.w	sl, #72	; 0x48
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    4da4:	fb0a f704 	mul.w	r7, sl, r4
	return z_impl_k_sem_take(sem, timeout);
    4da8:	2300      	movs	r3, #0
    4daa:	2200      	movs	r2, #0
    4dac:	4648      	mov	r0, r9
    4dae:	f005 fe19 	bl	a9e4 <z_impl_k_sem_take>
    4db2:	4603      	mov	r3, r0
    4db4:	bb18      	cbnz	r0, 4dfe <usb_transfer+0x8e>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    4db6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 4ea0 <usb_transfer+0x130>
    4dba:	eb0a 0b07 	add.w	fp, sl, r7
    4dbe:	f8db 4004 	ldr.w	r4, [fp, #4]
    4dc2:	f114 0f10 	cmn.w	r4, #16
    4dc6:	d131      	bne.n	4e2c <usb_transfer+0xbc>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    4dc8:	4836      	ldr	r0, [pc, #216]	; (4ea4 <usb_transfer+0x134>)
    4dca:	6802      	ldr	r2, [r0, #0]
    4dcc:	0752      	lsls	r2, r2, #29
    4dce:	d00a      	beq.n	4de6 <usb_transfer+0x76>
    4dd0:	4a35      	ldr	r2, [pc, #212]	; (4ea8 <usb_transfer+0x138>)
    4dd2:	e9cd 2508 	strd	r2, r5, [sp, #32]
    4dd6:	2203      	movs	r2, #3
    4dd8:	9203      	str	r2, [sp, #12]
    4dda:	9207      	str	r2, [sp, #28]
    4ddc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4de0:	aa07      	add	r2, sp, #28
    4de2:	f007 fdac 	bl	c93e <z_impl_z_log_msg2_static_create>
	z_impl_k_sem_give(sem);
    4de6:	4648      	mov	r0, r9
    4de8:	f005 fdd6 	bl	a998 <z_impl_k_sem_give>
	__asm__ volatile(
    4dec:	9b01      	ldr	r3, [sp, #4]
    4dee:	f383 8811 	msr	BASEPRI, r3
    4df2:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    4df6:	4620      	mov	r0, r4
    4df8:	b00b      	add	sp, #44	; 0x2c
    4dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4dfe:	3401      	adds	r4, #1
    4e00:	2c04      	cmp	r4, #4
    4e02:	f109 0948 	add.w	r9, r9, #72	; 0x48
    4e06:	d1cd      	bne.n	4da4 <usb_transfer+0x34>
		LOG_ERR("No transfer slot available");
    4e08:	4826      	ldr	r0, [pc, #152]	; (4ea4 <usb_transfer+0x134>)
    4e0a:	6803      	ldr	r3, [r0, #0]
    4e0c:	075b      	lsls	r3, r3, #29
    4e0e:	d00a      	beq.n	4e26 <usb_transfer+0xb6>
    4e10:	4b26      	ldr	r3, [pc, #152]	; (4eac <usb_transfer+0x13c>)
    4e12:	9308      	str	r3, [sp, #32]
    4e14:	2302      	movs	r3, #2
    4e16:	9303      	str	r3, [sp, #12]
    4e18:	9307      	str	r3, [sp, #28]
    4e1a:	2300      	movs	r3, #0
    4e1c:	aa07      	add	r2, sp, #28
    4e1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4e22:	f007 fd8c 	bl	c93e <z_impl_z_log_msg2_static_create>
		ret = -ENOMEM;
    4e26:	f06f 040b 	mvn.w	r4, #11
    4e2a:	e7df      	b.n	4dec <usb_transfer+0x7c>
	trans->cb = cb;
    4e2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
	trans->buffer = data;
    4e2e:	9a00      	ldr	r2, [sp, #0]
	trans->cb = cb;
    4e30:	f8cb 3014 	str.w	r3, [fp, #20]
	trans->priv = cb_data;
    4e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4e36:	f8cb 3018 	str.w	r3, [fp, #24]
	trans->status = -EBUSY;
    4e3a:	f06f 030f 	mvn.w	r3, #15
	trans->tsize = 0;
    4e3e:	f8cb 0010 	str.w	r0, [fp, #16]
	trans->bsize = dlen;
    4e42:	e9cb 2602 	strd	r2, r6, [fp, #8]
	trans->ep = ep;
    4e46:	f80a 5007 	strb.w	r5, [sl, r7]
	trans->flags = flags;
    4e4a:	f8cb 8044 	str.w	r8, [fp, #68]	; 0x44
	trans->status = -EBUSY;
    4e4e:	f8cb 3004 	str.w	r3, [fp, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    4e52:	4628      	mov	r0, r5
    4e54:	f002 fa78 	bl	7348 <usb_dc_ep_mps>
    4e58:	b168      	cbz	r0, 4e76 <usb_transfer+0x106>
    4e5a:	4628      	mov	r0, r5
    4e5c:	f002 fa74 	bl	7348 <usb_dc_ep_mps>
    4e60:	fbb6 f3f0 	udiv	r3, r6, r0
    4e64:	fb03 6610 	mls	r6, r3, r0, r6
    4e68:	b12e      	cbz	r6, 4e76 <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
    4e6a:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    4e6e:	f043 0304 	orr.w	r3, r3, #4
    4e72:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	if (flags & USB_TRANS_WRITE) {
    4e76:	f018 0f02 	tst.w	r8, #2
    4e7a:	d007      	beq.n	4e8c <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4e7c:	3734      	adds	r7, #52	; 0x34
    4e7e:	480c      	ldr	r0, [pc, #48]	; (4eb0 <usb_transfer+0x140>)
    4e80:	eb0a 0107 	add.w	r1, sl, r7
    4e84:	f009 ff2f 	bl	ece6 <k_work_submit_to_queue>
	int i, key, ret = 0;
    4e88:	2400      	movs	r4, #0
    4e8a:	e7af      	b.n	4dec <usb_transfer+0x7c>
		ret = usb_dc_ep_read_continue(ep);
    4e8c:	4628      	mov	r0, r5
    4e8e:	f002 f9e9 	bl	7264 <usb_dc_ep_read_continue>
    4e92:	4604      	mov	r4, r0
    4e94:	e7aa      	b.n	4dec <usb_transfer+0x7c>
		return -EBUSY;
    4e96:	f06f 040f 	mvn.w	r4, #15
    4e9a:	e7ac      	b.n	4df6 <usb_transfer+0x86>
    4e9c:	200014c8 	.word	0x200014c8
    4ea0:	200014ac 	.word	0x200014ac
    4ea4:	20000294 	.word	0x20000294
    4ea8:	000114fa 	.word	0x000114fa
    4eac:	000114df 	.word	0x000114df
    4eb0:	20000bb8 	.word	0x20000bb8

00004eb4 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    4eb4:	b510      	push	{r4, lr}
	__asm__ volatile(
    4eb6:	f04f 0320 	mov.w	r3, #32
    4eba:	f3ef 8411 	mrs	r4, BASEPRI
    4ebe:	f383 8812 	msr	BASEPRI_MAX, r3
    4ec2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    4ec6:	f7ff fe3f 	bl	4b48 <usb_ep_get_transfer>
	if (!trans) {
    4eca:	b150      	cbz	r0, 4ee2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    4ecc:	6843      	ldr	r3, [r0, #4]
    4ece:	3310      	adds	r3, #16
    4ed0:	d107      	bne.n	4ee2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    4ed2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    4ed6:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4ed8:	f100 0134 	add.w	r1, r0, #52	; 0x34
    4edc:	4803      	ldr	r0, [pc, #12]	; (4eec <usb_cancel_transfer+0x38>)
    4ede:	f009 ff02 	bl	ece6 <k_work_submit_to_queue>
	__asm__ volatile(
    4ee2:	f384 8811 	msr	BASEPRI, r4
    4ee6:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    4eea:	bd10      	pop	{r4, pc}
    4eec:	20000bb8 	.word	0x20000bb8

00004ef0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    4ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ef4:	4c10      	ldr	r4, [pc, #64]	; (4f38 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4ef6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4f3c <usb_cancel_transfers+0x4c>
{
    4efa:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    4efc:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    4f00:	f04f 0320 	mov.w	r3, #32
    4f04:	f3ef 8611 	mrs	r6, BASEPRI
    4f08:	f383 8812 	msr	BASEPRI_MAX, r3
    4f0c:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    4f10:	6863      	ldr	r3, [r4, #4]
    4f12:	3310      	adds	r3, #16
    4f14:	d105      	bne.n	4f22 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4f16:	f104 0134 	add.w	r1, r4, #52	; 0x34
    4f1a:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    4f1c:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4f1e:	f009 fee2 	bl	ece6 <k_work_submit_to_queue>
	__asm__ volatile(
    4f22:	f386 8811 	msr	BASEPRI, r6
    4f26:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4f2a:	3d01      	subs	r5, #1
    4f2c:	f104 0448 	add.w	r4, r4, #72	; 0x48
    4f30:	d1e6      	bne.n	4f00 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    4f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f36:	bf00      	nop
    4f38:	200014ac 	.word	0x200014ac
    4f3c:	20000bb8 	.word	0x20000bb8

00004f40 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    4f40:	b570      	push	{r4, r5, r6, lr}
    4f42:	4c0a      	ldr	r4, [pc, #40]	; (4f6c <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4f44:	4e0a      	ldr	r6, [pc, #40]	; (4f70 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4f46:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4f48:	4631      	mov	r1, r6
    4f4a:	4620      	mov	r0, r4
    4f4c:	f009 fec2 	bl	ecd4 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4f50:	2201      	movs	r2, #1
    4f52:	f1a4 0018 	sub.w	r0, r4, #24
    4f56:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4f58:	3501      	adds	r5, #1
    4f5a:	f009 fe99 	bl	ec90 <z_impl_k_sem_init>
    4f5e:	2d04      	cmp	r5, #4
    4f60:	f104 0448 	add.w	r4, r4, #72	; 0x48
    4f64:	d1f0      	bne.n	4f48 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    4f66:	2000      	movs	r0, #0
    4f68:	bd70      	pop	{r4, r5, r6, pc}
    4f6a:	bf00      	nop
    4f6c:	200014e0 	.word	0x200014e0
    4f70:	00004b75 	.word	0x00004b75

00004f74 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4f74:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    4f76:	2301      	movs	r3, #1
    4f78:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    4f7c:	680b      	ldr	r3, [r1, #0]
    4f7e:	b133      	cbz	r3, 4f8e <cdc_acm_irq_rx_enable+0x1a>
    4f80:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    4f84:	b11b      	cbz	r3, 4f8e <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4f86:	4802      	ldr	r0, [pc, #8]	; (4f90 <cdc_acm_irq_rx_enable+0x1c>)
    4f88:	3108      	adds	r1, #8
    4f8a:	f009 beac 	b.w	ece6 <k_work_submit_to_queue>
	}
}
    4f8e:	4770      	bx	lr
    4f90:	20000bb8 	.word	0x20000bb8

00004f94 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4f94:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    4f96:	2301      	movs	r3, #1
    4f98:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    4f9c:	680b      	ldr	r3, [r1, #0]
    4f9e:	b133      	cbz	r3, 4fae <cdc_acm_irq_tx_enable+0x1a>
    4fa0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    4fa4:	b11b      	cbz	r3, 4fae <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4fa6:	4802      	ldr	r0, [pc, #8]	; (4fb0 <cdc_acm_irq_tx_enable+0x1c>)
    4fa8:	3108      	adds	r1, #8
    4faa:	f009 be9c 	b.w	ece6 <k_work_submit_to_queue>
}
    4fae:	4770      	bx	lr
    4fb0:	20000bb8 	.word	0x20000bb8

00004fb4 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4fb4:	4a0b      	ldr	r2, [pc, #44]	; (4fe4 <cdc_acm_reset_port+0x30>)
{
    4fb6:	4603      	mov	r3, r0
	dev_data->configured = false;
    4fb8:	2100      	movs	r1, #0
    4fba:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    4fbe:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4fc0:	6810      	ldr	r0, [r2, #0]
    4fc2:	6758      	str	r0, [r3, #116]	; 0x74
    4fc4:	8890      	ldrh	r0, [r2, #4]
    4fc6:	7992      	ldrb	r2, [r2, #6]
    4fc8:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    4fcc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    4fd0:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    4fd4:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    4fd8:	2240      	movs	r2, #64	; 0x40
    4fda:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    4fde:	f009 b884 	b.w	e0ea <memset>
    4fe2:	bf00      	nop
    4fe4:	0000f82c 	.word	0x0000f82c

00004fe8 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    4fe8:	2301      	movs	r3, #1
    4fea:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4fee:	6813      	ldr	r3, [r2, #0]
{
    4ff0:	b510      	push	{r4, lr}
    4ff2:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4ff4:	b13b      	cbz	r3, 5006 <cdc_acm_write_cb+0x1e>
    4ff6:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    4ffa:	b123      	cbz	r3, 5006 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4ffc:	4808      	ldr	r0, [pc, #32]	; (5020 <cdc_acm_write_cb+0x38>)
    4ffe:	f102 0108 	add.w	r1, r2, #8
    5002:	f009 fe70 	bl	ece6 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    5006:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5008:	f007 f825 	bl	c056 <ring_buf_is_empty>
    500c:	b930      	cbnz	r0, 501c <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    500e:	f104 0118 	add.w	r1, r4, #24
    5012:	4803      	ldr	r0, [pc, #12]	; (5020 <cdc_acm_write_cb+0x38>)
}
    5014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    5018:	f009 be65 	b.w	ece6 <k_work_submit_to_queue>
}
    501c:	bd10      	pop	{r4, pc}
    501e:	bf00      	nop
    5020:	20000bb8 	.word	0x20000bb8

00005024 <tx_work_handler>:
{
    5024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    5026:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    5028:	685b      	ldr	r3, [r3, #4]
    502a:	6a1b      	ldr	r3, [r3, #32]
    502c:	7d1e      	ldrb	r6, [r3, #20]
{
    502e:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    5030:	4630      	mov	r0, r6
    5032:	f008 fdd8 	bl	dbe6 <usb_transfer_is_busy>
    5036:	b9d0      	cbnz	r0, 506e <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    5038:	6da8      	ldr	r0, [r5, #88]	; 0x58
    503a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    503e:	a903      	add	r1, sp, #12
    5040:	f007 f882 	bl	c148 <ring_buf_get_claim>
	if (!len) {
    5044:	4604      	mov	r4, r0
    5046:	b190      	cbz	r0, 506e <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    5048:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    504a:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    504e:	bf08      	it	eq
    5050:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    5054:	9301      	str	r3, [sp, #4]
    5056:	4b07      	ldr	r3, [pc, #28]	; (5074 <tx_work_handler+0x50>)
    5058:	9903      	ldr	r1, [sp, #12]
    505a:	9300      	str	r3, [sp, #0]
    505c:	4622      	mov	r2, r4
    505e:	2302      	movs	r3, #2
    5060:	4630      	mov	r0, r6
    5062:	f7ff fe85 	bl	4d70 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    5066:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5068:	4621      	mov	r1, r4
    506a:	f007 f898 	bl	c19e <ring_buf_get_finish>
}
    506e:	b004      	add	sp, #16
    5070:	bd70      	pop	{r4, r5, r6, pc}
    5072:	bf00      	nop
    5074:	00004fe9 	.word	0x00004fe9

00005078 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    5078:	b530      	push	{r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    507a:	6904      	ldr	r4, [r0, #16]
{
    507c:	b08b      	sub	sp, #44	; 0x2c

	if (!dev_data->configured || dev_data->suspended) {
    507e:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
{
    5082:	f88d 1007 	strb.w	r1, [sp, #7]
	if (!dev_data->configured || dev_data->suspended) {
    5086:	b113      	cbz	r3, 508e <cdc_acm_poll_out+0x16>
    5088:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    508c:	b18b      	cbz	r3, 50b2 <cdc_acm_poll_out+0x3a>
		LOG_INF("USB device not ready, drop data");
    508e:	4826      	ldr	r0, [pc, #152]	; (5128 <cdc_acm_poll_out+0xb0>)
    5090:	6803      	ldr	r3, [r0, #0]
    5092:	f003 0307 	and.w	r3, r3, #7
    5096:	2b02      	cmp	r3, #2
    5098:	d909      	bls.n	50ae <cdc_acm_poll_out+0x36>
    509a:	4b24      	ldr	r3, [pc, #144]	; (512c <cdc_acm_poll_out+0xb4>)
    509c:	9308      	str	r3, [sp, #32]
    509e:	2302      	movs	r3, #2
    50a0:	9303      	str	r3, [sp, #12]
    50a2:	9307      	str	r3, [sp, #28]
    50a4:	aa07      	add	r2, sp, #28
    50a6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
		LOG_INF("Ring buffer full, drain buffer");
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
			LOG_ERR("Failed to drain buffer");
    50aa:	f008 fe0f 	bl	dccc <z_log_msg2_static_create.constprop.0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    50ae:	b00b      	add	sp, #44	; 0x2c
    50b0:	bd30      	pop	{r4, r5, pc}
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    50b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    50b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    50b8:	2201      	movs	r2, #1
    50ba:	f10d 0107 	add.w	r1, sp, #7
    50be:	f007 f824 	bl	c10a <ring_buf_put>
    50c2:	bb58      	cbnz	r0, 511c <cdc_acm_poll_out+0xa4>
		LOG_INF("Ring buffer full, drain buffer");
    50c4:	4d18      	ldr	r5, [pc, #96]	; (5128 <cdc_acm_poll_out+0xb0>)
    50c6:	682b      	ldr	r3, [r5, #0]
    50c8:	f003 0307 	and.w	r3, r3, #7
    50cc:	2b02      	cmp	r3, #2
    50ce:	d90a      	bls.n	50e6 <cdc_acm_poll_out+0x6e>
    50d0:	4b17      	ldr	r3, [pc, #92]	; (5130 <cdc_acm_poll_out+0xb8>)
    50d2:	9308      	str	r3, [sp, #32]
    50d4:	aa07      	add	r2, sp, #28
    50d6:	2302      	movs	r3, #2
    50d8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    50dc:	4628      	mov	r0, r5
    50de:	9303      	str	r3, [sp, #12]
    50e0:	9307      	str	r3, [sp, #28]
    50e2:	f008 fdf3 	bl	dccc <z_log_msg2_static_create.constprop.0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    50e6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    50e8:	2201      	movs	r2, #1
    50ea:	2100      	movs	r1, #0
    50ec:	f007 f875 	bl	c1da <ring_buf_get>
    50f0:	b960      	cbnz	r0, 510c <cdc_acm_poll_out+0x94>
			LOG_ERR("Failed to drain buffer");
    50f2:	682b      	ldr	r3, [r5, #0]
    50f4:	075b      	lsls	r3, r3, #29
    50f6:	d0da      	beq.n	50ae <cdc_acm_poll_out+0x36>
    50f8:	4b0e      	ldr	r3, [pc, #56]	; (5134 <cdc_acm_poll_out+0xbc>)
    50fa:	9308      	str	r3, [sp, #32]
    50fc:	2302      	movs	r3, #2
    50fe:	480a      	ldr	r0, [pc, #40]	; (5128 <cdc_acm_poll_out+0xb0>)
    5100:	9303      	str	r3, [sp, #12]
    5102:	9307      	str	r3, [sp, #28]
    5104:	aa07      	add	r2, sp, #28
    5106:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    510a:	e7ce      	b.n	50aa <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    510c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    510e:	2201      	movs	r2, #1
    5110:	f10d 0107 	add.w	r1, sp, #7
    5114:	f006 fff9 	bl	c10a <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    5118:	2800      	cmp	r0, #0
    511a:	d0ea      	beq.n	50f2 <cdc_acm_poll_out+0x7a>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    511c:	f104 0118 	add.w	r1, r4, #24
    5120:	4805      	ldr	r0, [pc, #20]	; (5138 <cdc_acm_poll_out+0xc0>)
    5122:	f009 fde0 	bl	ece6 <k_work_submit_to_queue>
    5126:	e7c2      	b.n	50ae <cdc_acm_poll_out+0x36>
    5128:	20000284 	.word	0x20000284
    512c:	00011530 	.word	0x00011530
    5130:	00011550 	.word	0x00011550
    5134:	0001156f 	.word	0x0001156f
    5138:	20000bb8 	.word	0x20000bb8

0000513c <cdc_acm_read_cb>:
{
    513c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (size <= 0) {
    513e:	1e0d      	subs	r5, r1, #0
{
    5140:	b08b      	sub	sp, #44	; 0x2c
    5142:	4606      	mov	r6, r0
    5144:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    5146:	f102 072c 	add.w	r7, r2, #44	; 0x2c
	if (size <= 0) {
    514a:	dd24      	ble.n	5196 <cdc_acm_read_cb+0x5a>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    514c:	462a      	mov	r2, r5
    514e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    5150:	4639      	mov	r1, r7
    5152:	f006 ffda 	bl	c10a <ring_buf_put>
	if (wrote < size) {
    5156:	4285      	cmp	r5, r0
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    5158:	4602      	mov	r2, r0
	if (wrote < size) {
    515a:	d90f      	bls.n	517c <cdc_acm_read_cb+0x40>
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    515c:	4813      	ldr	r0, [pc, #76]	; (51ac <cdc_acm_read_cb+0x70>)
    515e:	6803      	ldr	r3, [r0, #0]
    5160:	075b      	lsls	r3, r3, #29
    5162:	d00b      	beq.n	517c <cdc_acm_read_cb+0x40>
    5164:	4b12      	ldr	r3, [pc, #72]	; (51b0 <cdc_acm_read_cb+0x74>)
    5166:	9308      	str	r3, [sp, #32]
    5168:	1aad      	subs	r5, r5, r2
    516a:	2303      	movs	r3, #3
    516c:	aa07      	add	r2, sp, #28
    516e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5172:	9509      	str	r5, [sp, #36]	; 0x24
    5174:	9303      	str	r3, [sp, #12]
    5176:	9307      	str	r3, [sp, #28]
    5178:	f008 fda8 	bl	dccc <z_log_msg2_static_create.constprop.0>
	dev_data->rx_ready = true;
    517c:	2301      	movs	r3, #1
    517e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    5182:	6823      	ldr	r3, [r4, #0]
    5184:	b13b      	cbz	r3, 5196 <cdc_acm_read_cb+0x5a>
    5186:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    518a:	b123      	cbz	r3, 5196 <cdc_acm_read_cb+0x5a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    518c:	4809      	ldr	r0, [pc, #36]	; (51b4 <cdc_acm_read_cb+0x78>)
    518e:	f104 0108 	add.w	r1, r4, #8
    5192:	f009 fda8 	bl	ece6 <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    5196:	4b08      	ldr	r3, [pc, #32]	; (51b8 <cdc_acm_read_cb+0x7c>)
    5198:	9300      	str	r3, [sp, #0]
    519a:	9401      	str	r4, [sp, #4]
    519c:	2301      	movs	r3, #1
    519e:	2240      	movs	r2, #64	; 0x40
    51a0:	4639      	mov	r1, r7
    51a2:	4630      	mov	r0, r6
    51a4:	f7ff fde4 	bl	4d70 <usb_transfer>
}
    51a8:	b00b      	add	sp, #44	; 0x2c
    51aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51ac:	20000284 	.word	0x20000284
    51b0:	00011586 	.word	0x00011586
    51b4:	20000bb8 	.word	0x20000bb8
    51b8:	0000513d 	.word	0x0000513d

000051bc <cdc_acm_dev_status_cb>:
{
    51bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    51be:	4605      	mov	r5, r0
    51c0:	b089      	sub	sp, #36	; 0x24
    51c2:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    51c4:	4601      	mov	r1, r0
    51c6:	485f      	ldr	r0, [pc, #380]	; (5344 <cdc_acm_dev_status_cb+0x188>)
    51c8:	f008 fcdd 	bl	db86 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    51cc:	4604      	mov	r4, r0
    51ce:	b988      	cbnz	r0, 51f4 <cdc_acm_dev_status_cb+0x38>
		LOG_WRN("Device data not found for cfg %p", cfg);
    51d0:	485d      	ldr	r0, [pc, #372]	; (5348 <cdc_acm_dev_status_cb+0x18c>)
    51d2:	6803      	ldr	r3, [r0, #0]
    51d4:	f013 0f06 	tst.w	r3, #6
    51d8:	d00a      	beq.n	51f0 <cdc_acm_dev_status_cb+0x34>
    51da:	4b5c      	ldr	r3, [pc, #368]	; (534c <cdc_acm_dev_status_cb+0x190>)
    51dc:	aa05      	add	r2, sp, #20
    51de:	e9cd 3506 	strd	r3, r5, [sp, #24]
    51e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    51e6:	2303      	movs	r3, #3
    51e8:	9301      	str	r3, [sp, #4]
    51ea:	9305      	str	r3, [sp, #20]
    51ec:	f008 fd6e 	bl	dccc <z_log_msg2_static_create.constprop.0>
}
    51f0:	b009      	add	sp, #36	; 0x24
    51f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    51f4:	4605      	mov	r5, r0
	switch (status) {
    51f6:	1e71      	subs	r1, r6, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    51f8:	f855 3980 	ldr.w	r3, [r5], #-128
    51fc:	685f      	ldr	r7, [r3, #4]
	switch (status) {
    51fe:	2905      	cmp	r1, #5
    5200:	d8f6      	bhi.n	51f0 <cdc_acm_dev_status_cb+0x34>
    5202:	a301      	add	r3, pc, #4	; (adr r3, 5208 <cdc_acm_dev_status_cb+0x4c>)
    5204:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    5208:	000052a5 	.word	0x000052a5
    520c:	000051f1 	.word	0x000051f1
    5210:	00005221 	.word	0x00005221
    5214:	00005285 	.word	0x00005285
    5218:	000052b1 	.word	0x000052b1
    521c:	000052d9 	.word	0x000052d9
		LOG_INF("Device configured");
    5220:	4849      	ldr	r0, [pc, #292]	; (5348 <cdc_acm_dev_status_cb+0x18c>)
    5222:	6803      	ldr	r3, [r0, #0]
    5224:	f003 0307 	and.w	r3, r3, #7
    5228:	2b02      	cmp	r3, #2
    522a:	d909      	bls.n	5240 <cdc_acm_dev_status_cb+0x84>
    522c:	4b48      	ldr	r3, [pc, #288]	; (5350 <cdc_acm_dev_status_cb+0x194>)
    522e:	9306      	str	r3, [sp, #24]
    5230:	aa05      	add	r2, sp, #20
    5232:	2302      	movs	r3, #2
    5234:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5238:	9301      	str	r3, [sp, #4]
    523a:	9305      	str	r3, [sp, #20]
    523c:	f008 fd46 	bl	dccc <z_log_msg2_static_create.constprop.0>
		if (!dev_data->configured) {
    5240:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    5244:	b939      	cbnz	r1, 5256 <cdc_acm_dev_status_cb+0x9a>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    5246:	6a3b      	ldr	r3, [r7, #32]
    5248:	462a      	mov	r2, r5
    524a:	7b18      	ldrb	r0, [r3, #12]
    524c:	f7ff ff76 	bl	513c <cdc_acm_read_cb>
			dev_data->configured = true;
    5250:	2301      	movs	r3, #1
    5252:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    5256:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    525a:	2b00      	cmp	r3, #0
    525c:	d1c8      	bne.n	51f0 <cdc_acm_dev_status_cb+0x34>
			dev_data->tx_ready = true;
    525e:	2301      	movs	r3, #1
    5260:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    5264:	f854 3c80 	ldr.w	r3, [r4, #-128]
    5268:	2b00      	cmp	r3, #0
    526a:	d0c1      	beq.n	51f0 <cdc_acm_dev_status_cb+0x34>
    526c:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    5270:	2b00      	cmp	r3, #0
    5272:	d0bd      	beq.n	51f0 <cdc_acm_dev_status_cb+0x34>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5274:	4837      	ldr	r0, [pc, #220]	; (5354 <cdc_acm_dev_status_cb+0x198>)
    5276:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
}
    527a:	b009      	add	sp, #36	; 0x24
    527c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5280:	f009 bd31 	b.w	ece6 <k_work_submit_to_queue>
		LOG_INF("Device disconnected");
    5284:	4830      	ldr	r0, [pc, #192]	; (5348 <cdc_acm_dev_status_cb+0x18c>)
    5286:	6803      	ldr	r3, [r0, #0]
    5288:	f003 0307 	and.w	r3, r3, #7
    528c:	2b02      	cmp	r3, #2
    528e:	d909      	bls.n	52a4 <cdc_acm_dev_status_cb+0xe8>
    5290:	4b31      	ldr	r3, [pc, #196]	; (5358 <cdc_acm_dev_status_cb+0x19c>)
    5292:	9306      	str	r3, [sp, #24]
    5294:	aa05      	add	r2, sp, #20
    5296:	2302      	movs	r3, #2
    5298:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    529c:	9301      	str	r3, [sp, #4]
    529e:	9305      	str	r3, [sp, #20]
    52a0:	f008 fd14 	bl	dccc <z_log_msg2_static_create.constprop.0>
		cdc_acm_reset_port(dev_data);
    52a4:	4628      	mov	r0, r5
}
    52a6:	b009      	add	sp, #36	; 0x24
    52a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cdc_acm_reset_port(dev_data);
    52ac:	f7ff be82 	b.w	4fb4 <cdc_acm_reset_port>
		LOG_INF("Device suspended");
    52b0:	4825      	ldr	r0, [pc, #148]	; (5348 <cdc_acm_dev_status_cb+0x18c>)
    52b2:	6803      	ldr	r3, [r0, #0]
    52b4:	f003 0307 	and.w	r3, r3, #7
    52b8:	2b02      	cmp	r3, #2
    52ba:	d909      	bls.n	52d0 <cdc_acm_dev_status_cb+0x114>
    52bc:	4b27      	ldr	r3, [pc, #156]	; (535c <cdc_acm_dev_status_cb+0x1a0>)
    52be:	9306      	str	r3, [sp, #24]
    52c0:	aa05      	add	r2, sp, #20
    52c2:	2302      	movs	r3, #2
    52c4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    52c8:	9301      	str	r3, [sp, #4]
    52ca:	9305      	str	r3, [sp, #20]
    52cc:	f008 fcfe 	bl	dccc <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    52d0:	2301      	movs	r3, #1
    52d2:	f804 3c01 	strb.w	r3, [r4, #-1]
		break;
    52d6:	e78b      	b.n	51f0 <cdc_acm_dev_status_cb+0x34>
		LOG_INF("Device resumed");
    52d8:	4e1b      	ldr	r6, [pc, #108]	; (5348 <cdc_acm_dev_status_cb+0x18c>)
    52da:	6833      	ldr	r3, [r6, #0]
    52dc:	f003 0307 	and.w	r3, r3, #7
    52e0:	2b02      	cmp	r3, #2
    52e2:	d90a      	bls.n	52fa <cdc_acm_dev_status_cb+0x13e>
    52e4:	4b1e      	ldr	r3, [pc, #120]	; (5360 <cdc_acm_dev_status_cb+0x1a4>)
    52e6:	9306      	str	r3, [sp, #24]
    52e8:	aa05      	add	r2, sp, #20
    52ea:	2302      	movs	r3, #2
    52ec:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    52f0:	4630      	mov	r0, r6
    52f2:	9301      	str	r3, [sp, #4]
    52f4:	9305      	str	r3, [sp, #20]
    52f6:	f008 fce9 	bl	dccc <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    52fa:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    52fe:	2b00      	cmp	r3, #0
    5300:	f43f af76 	beq.w	51f0 <cdc_acm_dev_status_cb+0x34>
			LOG_INF("from suspend");
    5304:	6833      	ldr	r3, [r6, #0]
    5306:	f003 0307 	and.w	r3, r3, #7
    530a:	2b02      	cmp	r3, #2
    530c:	d90a      	bls.n	5324 <cdc_acm_dev_status_cb+0x168>
    530e:	4b15      	ldr	r3, [pc, #84]	; (5364 <cdc_acm_dev_status_cb+0x1a8>)
    5310:	9306      	str	r3, [sp, #24]
    5312:	480d      	ldr	r0, [pc, #52]	; (5348 <cdc_acm_dev_status_cb+0x18c>)
    5314:	2302      	movs	r3, #2
    5316:	aa05      	add	r2, sp, #20
    5318:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    531c:	9301      	str	r3, [sp, #4]
    531e:	9305      	str	r3, [sp, #20]
    5320:	f008 fcd4 	bl	dccc <z_log_msg2_static_create.constprop.0>
			if (dev_data->configured) {
    5324:	f814 3c02 	ldrb.w	r3, [r4, #-2]
			dev_data->suspended = false;
    5328:	2100      	movs	r1, #0
    532a:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    532e:	2b00      	cmp	r3, #0
    5330:	f43f af5e 	beq.w	51f0 <cdc_acm_dev_status_cb+0x34>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    5334:	6a3b      	ldr	r3, [r7, #32]
    5336:	7b18      	ldrb	r0, [r3, #12]
    5338:	462a      	mov	r2, r5
}
    533a:	b009      	add	sp, #36	; 0x24
    533c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    5340:	f7ff befc 	b.w	513c <cdc_acm_read_cb>
    5344:	200015cc 	.word	0x200015cc
    5348:	20000284 	.word	0x20000284
    534c:	000115a7 	.word	0x000115a7
    5350:	000115c8 	.word	0x000115c8
    5354:	20000bb8 	.word	0x20000bb8
    5358:	000115da 	.word	0x000115da
    535c:	000115ee 	.word	0x000115ee
    5360:	000115ff 	.word	0x000115ff
    5364:	0001160e 	.word	0x0001160e

00005368 <cdc_acm_fifo_fill>:
{
    5368:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    536a:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    536c:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
{
    5370:	b088      	sub	sp, #32
    5372:	4615      	mov	r5, r2
	if (!dev_data->configured || dev_data->suspended) {
    5374:	b113      	cbz	r3, 537c <cdc_acm_fifo_fill+0x14>
    5376:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    537a:	b193      	cbz	r3, 53a2 <cdc_acm_fifo_fill+0x3a>
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    537c:	4819      	ldr	r0, [pc, #100]	; (53e4 <cdc_acm_fifo_fill+0x7c>)
    537e:	6804      	ldr	r4, [r0, #0]
    5380:	f014 0406 	ands.w	r4, r4, #6
    5384:	d02b      	beq.n	53de <cdc_acm_fifo_fill+0x76>
    5386:	4b18      	ldr	r3, [pc, #96]	; (53e8 <cdc_acm_fifo_fill+0x80>)
    5388:	aa05      	add	r2, sp, #20
    538a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    538e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    5392:	2303      	movs	r3, #3
    5394:	9301      	str	r3, [sp, #4]
    5396:	9305      	str	r3, [sp, #20]
    5398:	f008 fc98 	bl	dccc <z_log_msg2_static_create.constprop.0>
		return 0;
    539c:	2000      	movs	r0, #0
}
    539e:	b008      	add	sp, #32
    53a0:	bd70      	pop	{r4, r5, r6, pc}
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    53a2:	6f30      	ldr	r0, [r6, #112]	; 0x70
	dev_data->tx_ready = false;
    53a4:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    53a8:	f006 feaf 	bl	c10a <ring_buf_put>
	if (wrote < len) {
    53ac:	42a8      	cmp	r0, r5
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    53ae:	4604      	mov	r4, r0
	if (wrote < len) {
    53b0:	d210      	bcs.n	53d4 <cdc_acm_fifo_fill+0x6c>
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    53b2:	480c      	ldr	r0, [pc, #48]	; (53e4 <cdc_acm_fifo_fill+0x7c>)
    53b4:	6803      	ldr	r3, [r0, #0]
    53b6:	f013 0f06 	tst.w	r3, #6
    53ba:	d00b      	beq.n	53d4 <cdc_acm_fifo_fill+0x6c>
    53bc:	4b0b      	ldr	r3, [pc, #44]	; (53ec <cdc_acm_fifo_fill+0x84>)
    53be:	9306      	str	r3, [sp, #24]
    53c0:	1b2d      	subs	r5, r5, r4
    53c2:	2303      	movs	r3, #3
    53c4:	aa05      	add	r2, sp, #20
    53c6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    53ca:	9507      	str	r5, [sp, #28]
    53cc:	9301      	str	r3, [sp, #4]
    53ce:	9305      	str	r3, [sp, #20]
    53d0:	f008 fc7c 	bl	dccc <z_log_msg2_static_create.constprop.0>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    53d4:	4806      	ldr	r0, [pc, #24]	; (53f0 <cdc_acm_fifo_fill+0x88>)
    53d6:	f106 0118 	add.w	r1, r6, #24
    53da:	f009 fc84 	bl	ece6 <k_work_submit_to_queue>
		return 0;
    53de:	4620      	mov	r0, r4
    53e0:	e7dd      	b.n	539e <cdc_acm_fifo_fill+0x36>
    53e2:	bf00      	nop
    53e4:	20000284 	.word	0x20000284
    53e8:	0001161b 	.word	0x0001161b
    53ec:	00011586 	.word	0x00011586
    53f0:	20000bb8 	.word	0x20000bb8

000053f4 <cdc_acm_int_in>:
{
    53f4:	b510      	push	{r4, lr}
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    53f6:	4601      	mov	r1, r0
{
    53f8:	b088      	sub	sp, #32
    53fa:	4604      	mov	r4, r0
	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    53fc:	480c      	ldr	r0, [pc, #48]	; (5430 <cdc_acm_int_in+0x3c>)
    53fe:	f008 fbdc 	bl	dbba <usb_get_dev_data_by_ep>
	if (common == NULL) {
    5402:	b988      	cbnz	r0, 5428 <cdc_acm_int_in+0x34>
		LOG_WRN("Device data not found for endpoint %u", ep);
    5404:	480b      	ldr	r0, [pc, #44]	; (5434 <cdc_acm_int_in+0x40>)
    5406:	6803      	ldr	r3, [r0, #0]
    5408:	f013 0f06 	tst.w	r3, #6
    540c:	d00a      	beq.n	5424 <cdc_acm_int_in+0x30>
    540e:	4b0a      	ldr	r3, [pc, #40]	; (5438 <cdc_acm_int_in+0x44>)
    5410:	aa05      	add	r2, sp, #20
    5412:	e9cd 3406 	strd	r3, r4, [sp, #24]
    5416:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    541a:	2303      	movs	r3, #3
    541c:	9301      	str	r3, [sp, #4]
    541e:	9305      	str	r3, [sp, #20]
    5420:	f008 fc54 	bl	dccc <z_log_msg2_static_create.constprop.0>
}
    5424:	b008      	add	sp, #32
    5426:	bd10      	pop	{r4, pc}
	dev_data->notification_sent = 1U;
    5428:	2301      	movs	r3, #1
    542a:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
    542e:	e7f9      	b.n	5424 <cdc_acm_int_in+0x30>
    5430:	200015cc 	.word	0x200015cc
    5434:	20000284 	.word	0x20000284
    5438:	0001164d 	.word	0x0001164d

0000543c <cdc_acm_class_handle_req>:
{
    543c:	b570      	push	{r4, r5, r6, lr}
    543e:	4604      	mov	r4, r0
    5440:	b088      	sub	sp, #32
    5442:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    5444:	7901      	ldrb	r1, [r0, #4]
    5446:	481c      	ldr	r0, [pc, #112]	; (54b8 <cdc_acm_class_handle_req+0x7c>)
{
    5448:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    544a:	f008 fba8 	bl	db9e <usb_get_dev_data_by_iface>
	if (common == NULL) {
    544e:	b998      	cbnz	r0, 5478 <cdc_acm_class_handle_req+0x3c>
		LOG_WRN("Device data not found for interface %u",
    5450:	481a      	ldr	r0, [pc, #104]	; (54bc <cdc_acm_class_handle_req+0x80>)
    5452:	6803      	ldr	r3, [r0, #0]
    5454:	f013 0f06 	tst.w	r3, #6
    5458:	d00b      	beq.n	5472 <cdc_acm_class_handle_req+0x36>
    545a:	88a3      	ldrh	r3, [r4, #4]
    545c:	4a18      	ldr	r2, [pc, #96]	; (54c0 <cdc_acm_class_handle_req+0x84>)
    545e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    5462:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5466:	2303      	movs	r3, #3
    5468:	aa05      	add	r2, sp, #20
    546a:	9301      	str	r3, [sp, #4]
    546c:	9305      	str	r3, [sp, #20]
    546e:	f008 fc2d 	bl	dccc <z_log_msg2_static_create.constprop.0>
		return -ENODEV;
    5472:	f06f 0012 	mvn.w	r0, #18
    5476:	e011      	b.n	549c <cdc_acm_class_handle_req+0x60>
	if (usb_reqtype_is_to_device(setup)) {
    5478:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    547c:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    547e:	2a00      	cmp	r2, #0
    5480:	db12      	blt.n	54a8 <cdc_acm_class_handle_req+0x6c>
		switch (setup->bRequest) {
    5482:	2b20      	cmp	r3, #32
    5484:	d004      	beq.n	5490 <cdc_acm_class_handle_req+0x54>
    5486:	2b22      	cmp	r3, #34	; 0x22
    5488:	d00a      	beq.n	54a0 <cdc_acm_class_handle_req+0x64>
	return -ENOTSUP;
    548a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    548e:	e005      	b.n	549c <cdc_acm_class_handle_req+0x60>
			memcpy(&dev_data->line_coding, *data,
    5490:	6829      	ldr	r1, [r5, #0]
    5492:	2207      	movs	r2, #7
    5494:	380c      	subs	r0, #12
    5496:	f008 fe1d 	bl	e0d4 <memcpy>
			return 0;
    549a:	2000      	movs	r0, #0
}
    549c:	b008      	add	sp, #32
    549e:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    54a0:	8863      	ldrh	r3, [r4, #2]
    54a2:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    54a6:	e7f8      	b.n	549a <cdc_acm_class_handle_req+0x5e>
		if (setup->bRequest == GET_LINE_CODING) {
    54a8:	2b21      	cmp	r3, #33	; 0x21
    54aa:	d1ee      	bne.n	548a <cdc_acm_class_handle_req+0x4e>
			*data = (uint8_t *)(&dev_data->line_coding);
    54ac:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    54ae:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    54b0:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    54b2:	6033      	str	r3, [r6, #0]
    54b4:	e7f1      	b.n	549a <cdc_acm_class_handle_req+0x5e>
    54b6:	bf00      	nop
    54b8:	200015cc 	.word	0x200015cc
    54bc:	20000284 	.word	0x20000284
    54c0:	00011673 	.word	0x00011673

000054c4 <cdc_acm_init>:
{
    54c4:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    54c6:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    54c8:	2300      	movs	r3, #0
    54ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    54ce:	4b0c      	ldr	r3, [pc, #48]	; (5500 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    54d0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    54d4:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    54d6:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    54da:	b969      	cbnz	r1, 54f8 <cdc_acm_init+0x34>
	list->head = node;
    54dc:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    54e0:	f104 0008 	add.w	r0, r4, #8
    54e4:	4907      	ldr	r1, [pc, #28]	; (5504 <cdc_acm_init+0x40>)
    54e6:	f009 fbf5 	bl	ecd4 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    54ea:	f104 0018 	add.w	r0, r4, #24
    54ee:	4906      	ldr	r1, [pc, #24]	; (5508 <cdc_acm_init+0x44>)
    54f0:	f009 fbf0 	bl	ecd4 <k_work_init>
}
    54f4:	2000      	movs	r0, #0
    54f6:	bd10      	pop	{r4, pc}
	parent->next = child;
    54f8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    54fa:	605a      	str	r2, [r3, #4]
}
    54fc:	e7f0      	b.n	54e0 <cdc_acm_init+0x1c>
    54fe:	bf00      	nop
    5500:	200015cc 	.word	0x200015cc
    5504:	0000dc11 	.word	0x0000dc11
    5508:	00005025 	.word	0x00005025

0000550c <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    550c:	b530      	push	{r4, r5, lr}
    550e:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    5510:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    5512:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    5514:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    5518:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    551a:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    551c:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    5520:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    5522:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    5526:	2002      	movs	r0, #2
    5528:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    552c:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    552e:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    5532:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    5536:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    5538:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    553c:	220a      	movs	r2, #10
    553e:	a901      	add	r1, sp, #4
    5540:	f7fe ffca 	bl	44d8 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    5544:	4c05      	ldr	r4, [pc, #20]	; (555c <cdc_acm_send_notification.isra.0+0x50>)
    5546:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    554a:	b923      	cbnz	r3, 5556 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    554c:	2001      	movs	r0, #1
    554e:	f009 fd3f 	bl	efd0 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    5552:	3c01      	subs	r4, #1
    5554:	d1f7      	bne.n	5546 <cdc_acm_send_notification.isra.0+0x3a>
}
    5556:	b005      	add	sp, #20
    5558:	bd30      	pop	{r4, r5, pc}
    555a:	bf00      	nop
    555c:	000186a1 	.word	0x000186a1

00005560 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    5560:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    5562:	4d09      	ldr	r5, [pc, #36]	; (5588 <z_usb_work_q_init+0x28>)
    5564:	4909      	ldr	r1, [pc, #36]	; (558c <z_usb_work_q_init+0x2c>)
    5566:	2400      	movs	r4, #0
    5568:	9400      	str	r4, [sp, #0]
    556a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    556e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5572:	4628      	mov	r0, r5
    5574:	f005 fb44 	bl	ac00 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    5578:	4905      	ldr	r1, [pc, #20]	; (5590 <z_usb_work_q_init+0x30>)
    557a:	4628      	mov	r0, r5
    557c:	f004 ffce 	bl	a51c <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    5580:	4620      	mov	r0, r4
    5582:	b003      	add	sp, #12
    5584:	bd30      	pop	{r4, r5, pc}
    5586:	bf00      	nop
    5588:	20000bb8 	.word	0x20000bb8
    558c:	20002d48 	.word	0x20002d48
    5590:	000116b0 	.word	0x000116b0

00005594 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    5594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5598:	4605      	mov	r5, r0
	__asm__ volatile(
    559a:	f04f 0320 	mov.w	r3, #32
    559e:	f3ef 8611 	mrs	r6, BASEPRI
    55a2:	f383 8812 	msr	BASEPRI_MAX, r3
    55a6:	f3bf 8f6f 	isb	sy
	return list->head;
    55aa:	4b0e      	ldr	r3, [pc, #56]	; (55e4 <pm_state_notify+0x50>)
    55ac:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    55ae:	b19c      	cbz	r4, 55d8 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    55b0:	4f0d      	ldr	r7, [pc, #52]	; (55e8 <pm_state_notify+0x54>)
    55b2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 55ec <pm_state_notify+0x58>
    55b6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    55ba:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    55be:	2d00      	cmp	r5, #0
    55c0:	bf08      	it	eq
    55c2:	4613      	moveq	r3, r2
		if (callback) {
    55c4:	b12b      	cbz	r3, 55d2 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    55c6:	f898 2014 	ldrb.w	r2, [r8, #20]
    55ca:	fb09 f202 	mul.w	r2, r9, r2
    55ce:	5cb8      	ldrb	r0, [r7, r2]
    55d0:	4798      	blx	r3
	return node->next;
    55d2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    55d4:	2c00      	cmp	r4, #0
    55d6:	d1f0      	bne.n	55ba <pm_state_notify+0x26>
	__asm__ volatile(
    55d8:	f386 8811 	msr	BASEPRI, r6
    55dc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    55e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    55e4:	200015d4 	.word	0x200015d4
    55e8:	200015dc 	.word	0x200015dc
    55ec:	20002184 	.word	0x20002184

000055f0 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    55f0:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    55f2:	2301      	movs	r3, #1
    55f4:	f000 001f 	and.w	r0, r0, #31
    55f8:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    55fc:	4b07      	ldr	r3, [pc, #28]	; (561c <atomic_clear_bit.constprop.0+0x2c>)
    55fe:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5602:	43c0      	mvns	r0, r0
    5604:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5608:	e853 2f00 	ldrex	r2, [r3]
    560c:	4002      	ands	r2, r0
    560e:	e843 2100 	strex	r1, r2, [r3]
    5612:	2900      	cmp	r1, #0
    5614:	d1f8      	bne.n	5608 <atomic_clear_bit.constprop.0+0x18>
    5616:	f3bf 8f5b 	dmb	ish
}
    561a:	4770      	bx	lr
    561c:	200015e8 	.word	0x200015e8

00005620 <pm_system_resume>:

void pm_system_resume(void)
{
    5620:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    5622:	4b1d      	ldr	r3, [pc, #116]	; (5698 <pm_system_resume+0x78>)
    5624:	7d1c      	ldrb	r4, [r3, #20]
    5626:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    562a:	f004 031f 	and.w	r3, r4, #31
    562e:	2201      	movs	r2, #1
    5630:	409a      	lsls	r2, r3
    5632:	4b1a      	ldr	r3, [pc, #104]	; (569c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5634:	0961      	lsrs	r1, r4, #5
{
    5636:	b085      	sub	sp, #20
    5638:	43d0      	mvns	r0, r2
    563a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    563e:	e853 1f00 	ldrex	r1, [r3]
    5642:	ea01 0500 	and.w	r5, r1, r0
    5646:	e843 5c00 	strex	ip, r5, [r3]
    564a:	f1bc 0f00 	cmp.w	ip, #0
    564e:	d1f6      	bne.n	563e <pm_system_resume+0x1e>
    5650:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    5654:	4211      	tst	r1, r2
    5656:	d017      	beq.n	5688 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    5658:	4d11      	ldr	r5, [pc, #68]	; (56a0 <pm_system_resume+0x80>)
    565a:	220c      	movs	r2, #12
    565c:	fb02 5204 	mla	r2, r2, r4, r5
    5660:	ca07      	ldmia	r2, {r0, r1, r2}
    5662:	ab01      	add	r3, sp, #4
    5664:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    5668:	4a0e      	ldr	r2, [pc, #56]	; (56a4 <pm_system_resume+0x84>)
    566a:	b17a      	cbz	r2, 568c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    566c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5670:	f008 fd67 	bl	e142 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    5674:	2000      	movs	r0, #0
    5676:	f7ff ff8d 	bl	5594 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    567a:	230c      	movs	r3, #12
    567c:	435c      	muls	r4, r3
    567e:	192a      	adds	r2, r5, r4
    5680:	2300      	movs	r3, #0
    5682:	512b      	str	r3, [r5, r4]
    5684:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    5688:	b005      	add	sp, #20
    568a:	bd30      	pop	{r4, r5, pc}
    568c:	f382 8811 	msr	BASEPRI, r2
    5690:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5694:	e7ee      	b.n	5674 <pm_system_resume+0x54>
    5696:	bf00      	nop
    5698:	20002184 	.word	0x20002184
    569c:	200015ec 	.word	0x200015ec
    56a0:	200015dc 	.word	0x200015dc
    56a4:	0000e143 	.word	0x0000e143

000056a8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    56a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    56ac:	4b35      	ldr	r3, [pc, #212]	; (5784 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    56ae:	4a36      	ldr	r2, [pc, #216]	; (5788 <pm_system_suspend+0xe0>)
    56b0:	7d1c      	ldrb	r4, [r3, #20]
    56b2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    56b6:	0963      	lsrs	r3, r4, #5
    56b8:	ea4f 0983 	mov.w	r9, r3, lsl #2
    56bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    56c0:	4d32      	ldr	r5, [pc, #200]	; (578c <pm_system_suspend+0xe4>)
    56c2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    56c6:	f004 081f 	and.w	r8, r4, #31
    56ca:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    56ce:	f013 0f01 	tst.w	r3, #1
{
    56d2:	b085      	sub	sp, #20
    56d4:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    56d6:	d10a      	bne.n	56ee <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    56d8:	4601      	mov	r1, r0
    56da:	4620      	mov	r0, r4
    56dc:	f000 f876 	bl	57cc <pm_policy_next_state>
		if (info != NULL) {
    56e0:	b128      	cbz	r0, 56ee <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    56e2:	c807      	ldmia	r0, {r0, r1, r2}
    56e4:	230c      	movs	r3, #12
    56e6:	fb03 5304 	mla	r3, r3, r4, r5
    56ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    56ee:	230c      	movs	r3, #12
    56f0:	4363      	muls	r3, r4
    56f2:	18ea      	adds	r2, r5, r3
    56f4:	5cee      	ldrb	r6, [r5, r3]
    56f6:	b936      	cbnz	r6, 5706 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    56f8:	4620      	mov	r0, r4
    56fa:	f7ff ff79 	bl	55f0 <atomic_clear_bit.constprop.0>
		ret = false;
    56fe:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    5700:	b005      	add	sp, #20
    5702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    5706:	1c7b      	adds	r3, r7, #1
    5708:	d00f      	beq.n	572a <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    570a:	f8d2 c008 	ldr.w	ip, [r2, #8]
    570e:	4820      	ldr	r0, [pc, #128]	; (5790 <pm_system_suspend+0xe8>)
    5710:	4a20      	ldr	r2, [pc, #128]	; (5794 <pm_system_suspend+0xec>)
    5712:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5716:	2100      	movs	r1, #0
    5718:	2300      	movs	r3, #0
    571a:	fbec 0106 	umlal	r0, r1, ip, r6
    571e:	f7fa fcef 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    5722:	2101      	movs	r1, #1
    5724:	1a38      	subs	r0, r7, r0
    5726:	f009 fc33 	bl	ef90 <z_set_timeout_expiry>
	k_sched_lock();
    572a:	f005 faf9 	bl	ad20 <k_sched_lock>
	pm_state_notify(true);
    572e:	2001      	movs	r0, #1
    5730:	f7ff ff30 	bl	5594 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5734:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5738:	2301      	movs	r3, #1
    573a:	fa03 f808 	lsl.w	r8, r3, r8
    573e:	4b16      	ldr	r3, [pc, #88]	; (5798 <pm_system_suspend+0xf0>)
    5740:	4499      	add	r9, r3
    5742:	e859 3f00 	ldrex	r3, [r9]
    5746:	ea43 0308 	orr.w	r3, r3, r8
    574a:	e849 3200 	strex	r2, r3, [r9]
    574e:	2a00      	cmp	r2, #0
    5750:	d1f7      	bne.n	5742 <pm_system_suspend+0x9a>
    5752:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    5756:	230c      	movs	r3, #12
    5758:	fb03 5504 	mla	r5, r3, r4, r5
    575c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    5760:	ab01      	add	r3, sp, #4
    5762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    5766:	4a0d      	ldr	r2, [pc, #52]	; (579c <pm_system_suspend+0xf4>)
    5768:	b11a      	cbz	r2, 5772 <pm_system_suspend+0xca>
		pm_power_state_set(info);
    576a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    576e:	f008 fcd5 	bl	e11c <pm_power_state_set>
	pm_system_resume();
    5772:	f7ff ff55 	bl	5620 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    5776:	4620      	mov	r0, r4
    5778:	f7ff ff3a 	bl	55f0 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    577c:	f005 fc9e 	bl	b0bc <k_sched_unlock>
	bool ret = true;
    5780:	2001      	movs	r0, #1
    5782:	e7bd      	b.n	5700 <pm_system_suspend+0x58>
    5784:	20002184 	.word	0x20002184
    5788:	200015e8 	.word	0x200015e8
    578c:	200015dc 	.word	0x200015dc
    5790:	000f423f 	.word	0x000f423f
    5794:	000f4240 	.word	0x000f4240
    5798:	200015ec 	.word	0x200015ec
    579c:	0000e11d 	.word	0x0000e11d

000057a0 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    57a0:	4b05      	ldr	r3, [pc, #20]	; (57b8 <pm_constraint_get+0x18>)
    57a2:	f3bf 8f5b 	dmb	ish
    57a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    57aa:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    57ae:	fab0 f080 	clz	r0, r0
    57b2:	0940      	lsrs	r0, r0, #5
    57b4:	4770      	bx	lr
    57b6:	bf00      	nop
    57b8:	200015f0 	.word	0x200015f0

000057bc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    57bc:	b908      	cbnz	r0, 57c2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    57be:	4b02      	ldr	r3, [pc, #8]	; (57c8 <pm_state_cpu_get_all+0xc>)
    57c0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    57c2:	2000      	movs	r0, #0
    57c4:	4770      	bx	lr
    57c6:	bf00      	nop
    57c8:	0000fe6c 	.word	0x0000fe6c

000057cc <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    57cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57d0:	b085      	sub	sp, #20
    57d2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    57d4:	a903      	add	r1, sp, #12
    57d6:	f7ff fff1 	bl	57bc <pm_state_cpu_get_all>
    57da:	f8df a074 	ldr.w	sl, [pc, #116]	; 5850 <pm_policy_next_state+0x84>
    57de:	f8df 8074 	ldr.w	r8, [pc, #116]	; 5854 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    57e2:	1e44      	subs	r4, r0, #1
    57e4:	b224      	sxth	r4, r4
    57e6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    57ea:	f04f 0900 	mov.w	r9, #0
    57ee:	1c63      	adds	r3, r4, #1
    57f0:	d104      	bne.n	57fc <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    57f2:	2500      	movs	r5, #0
}
    57f4:	4628      	mov	r0, r5
    57f6:	b005      	add	sp, #20
    57f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    57fc:	9a03      	ldr	r2, [sp, #12]
    57fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    5802:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    5806:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    580a:	f7ff ffc9 	bl	57a0 <pm_constraint_get>
    580e:	b1e0      	cbz	r0, 584a <pm_policy_next_state+0x7e>
    5810:	6868      	ldr	r0, [r5, #4]
    5812:	f04f 0b00 	mov.w	fp, #0
    5816:	46d4      	mov	ip, sl
    5818:	4659      	mov	r1, fp
    581a:	fbe0 c107 	umlal	ip, r1, r0, r7
    581e:	4642      	mov	r2, r8
    5820:	464b      	mov	r3, r9
    5822:	4660      	mov	r0, ip
    5824:	f7fa fc6c 	bl	100 <__aeabi_uldivmod>
    5828:	9001      	str	r0, [sp, #4]
    582a:	68a8      	ldr	r0, [r5, #8]
    582c:	46d4      	mov	ip, sl
    582e:	4659      	mov	r1, fp
    5830:	fbe0 c107 	umlal	ip, r1, r0, r7
    5834:	4642      	mov	r2, r8
    5836:	464b      	mov	r3, r9
    5838:	4660      	mov	r0, ip
    583a:	f7fa fc61 	bl	100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    583e:	1c72      	adds	r2, r6, #1
    5840:	d0d8      	beq.n	57f4 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    5842:	9b01      	ldr	r3, [sp, #4]
    5844:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    5846:	42b0      	cmp	r0, r6
    5848:	d9d4      	bls.n	57f4 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    584a:	3c01      	subs	r4, #1
    584c:	b224      	sxth	r4, r4
    584e:	e7ce      	b.n	57ee <pm_policy_next_state+0x22>
    5850:	000f423f 	.word	0x000f423f
    5854:	000f4240 	.word	0x000f4240

00005858 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5858:	4901      	ldr	r1, [pc, #4]	; (5860 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    585a:	2210      	movs	r2, #16
	str	r2, [r1]
    585c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    585e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5860:	e000ed10 	.word	0xe000ed10

00005864 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5864:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5866:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5868:	f380 8811 	msr	BASEPRI, r0
	isb
    586c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5870:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5874:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5876:	b662      	cpsie	i
	isb
    5878:	f3bf 8f6f 	isb	sy

	bx	lr
    587c:	4770      	bx	lr
    587e:	bf00      	nop

00005880 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5880:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    5882:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5884:	f381 8811 	msr	BASEPRI, r1

	wfe
    5888:	bf20      	wfe

	msr	BASEPRI, r0
    588a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    588e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5890:	4770      	bx	lr
    5892:	bf00      	nop

00005894 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5898:	b089      	sub	sp, #36	; 0x24
    589a:	4680      	mov	r8, r0
    589c:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    589e:	460c      	mov	r4, r1
    58a0:	2900      	cmp	r1, #0
    58a2:	d053      	beq.n	594c <z_arm_fatal_error+0xb8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    58a4:	4d2d      	ldr	r5, [pc, #180]	; (595c <z_arm_fatal_error+0xc8>)
    58a6:	682b      	ldr	r3, [r5, #0]
    58a8:	0758      	lsls	r0, r3, #29
    58aa:	d04f      	beq.n	594c <z_arm_fatal_error+0xb8>
    58ac:	e9d1 0100 	ldrd	r0, r1, [r1]
    58b0:	4e2b      	ldr	r6, [pc, #172]	; (5960 <z_arm_fatal_error+0xcc>)
    58b2:	68a3      	ldr	r3, [r4, #8]
    58b4:	46e9      	mov	r9, sp
    58b6:	b088      	sub	sp, #32
    58b8:	466a      	mov	r2, sp
    58ba:	e9c2 6004 	strd	r6, r0, [r2, #16]
    58be:	2605      	movs	r6, #5
    58c0:	e9c2 1306 	strd	r1, r3, [r2, #24]
    58c4:	60be      	str	r6, [r7, #8]
    58c6:	f842 6f0c 	str.w	r6, [r2, #12]!
    58ca:	2300      	movs	r3, #0
    58cc:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    58d0:	4628      	mov	r0, r5
    58d2:	f007 f834 	bl	c93e <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    58d6:	682b      	ldr	r3, [r5, #0]
    58d8:	0759      	lsls	r1, r3, #29
    58da:	46cd      	mov	sp, r9
    58dc:	d036      	beq.n	594c <z_arm_fatal_error+0xb8>
    58de:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    58e2:	4b20      	ldr	r3, [pc, #128]	; (5964 <z_arm_fatal_error+0xd0>)
    58e4:	60be      	str	r6, [r7, #8]
    58e6:	b088      	sub	sp, #32
    58e8:	466a      	mov	r2, sp
    58ea:	e9c2 3004 	strd	r3, r0, [r2, #16]
    58ee:	6963      	ldr	r3, [r4, #20]
    58f0:	6191      	str	r1, [r2, #24]
    58f2:	61d3      	str	r3, [r2, #28]
    58f4:	f842 6f0c 	str.w	r6, [r2, #12]!
    58f8:	2300      	movs	r3, #0
    58fa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    58fe:	4628      	mov	r0, r5
    5900:	f007 f81d 	bl	c93e <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5904:	682b      	ldr	r3, [r5, #0]
    5906:	075a      	lsls	r2, r3, #29
    5908:	46cd      	mov	sp, r9
    590a:	d01f      	beq.n	594c <z_arm_fatal_error+0xb8>
    590c:	69e3      	ldr	r3, [r4, #28]
    590e:	4a16      	ldr	r2, [pc, #88]	; (5968 <z_arm_fatal_error+0xd4>)
    5910:	2603      	movs	r6, #3
    5912:	e9c7 2306 	strd	r2, r3, [r7, #24]
    5916:	607e      	str	r6, [r7, #4]
    5918:	617e      	str	r6, [r7, #20]
    591a:	2300      	movs	r3, #0
    591c:	f107 0214 	add.w	r2, r7, #20
    5920:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5924:	4628      	mov	r0, r5
    5926:	f007 f80a 	bl	c93e <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    592a:	682b      	ldr	r3, [r5, #0]
    592c:	075b      	lsls	r3, r3, #29
    592e:	d00d      	beq.n	594c <z_arm_fatal_error+0xb8>
    5930:	69a3      	ldr	r3, [r4, #24]
    5932:	4a0e      	ldr	r2, [pc, #56]	; (596c <z_arm_fatal_error+0xd8>)
    5934:	607e      	str	r6, [r7, #4]
    5936:	e9c7 2306 	strd	r2, r3, [r7, #24]
    593a:	617e      	str	r6, [r7, #20]
    593c:	2300      	movs	r3, #0
    593e:	f107 0214 	add.w	r2, r7, #20
    5942:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5946:	4628      	mov	r0, r5
    5948:	f006 fff9 	bl	c93e <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    594c:	4621      	mov	r1, r4
    594e:	4640      	mov	r0, r8
    5950:	f004 fc1c 	bl	a18c <z_fatal_error>
}
    5954:	3724      	adds	r7, #36	; 0x24
    5956:	46bd      	mov	sp, r7
    5958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    595c:	20000268 	.word	0x20000268
    5960:	000116bc 	.word	0x000116bc
    5964:	000116eb 	.word	0x000116eb
    5968:	0001171a 	.word	0x0001171a
    596c:	00011729 	.word	0x00011729

00005970 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5970:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5972:	2b00      	cmp	r3, #0
    5974:	db08      	blt.n	5988 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5976:	2201      	movs	r2, #1
    5978:	f000 001f 	and.w	r0, r0, #31
    597c:	fa02 f000 	lsl.w	r0, r2, r0
    5980:	095b      	lsrs	r3, r3, #5
    5982:	4a02      	ldr	r2, [pc, #8]	; (598c <arch_irq_enable+0x1c>)
    5984:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5988:	4770      	bx	lr
    598a:	bf00      	nop
    598c:	e000e100 	.word	0xe000e100

00005990 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5990:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5992:	2b00      	cmp	r3, #0
    5994:	db0d      	blt.n	59b2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5996:	2201      	movs	r2, #1
    5998:	095b      	lsrs	r3, r3, #5
    599a:	f000 001f 	and.w	r0, r0, #31
    599e:	fa02 f000 	lsl.w	r0, r2, r0
    59a2:	3320      	adds	r3, #32
    59a4:	4a03      	ldr	r2, [pc, #12]	; (59b4 <arch_irq_disable+0x24>)
    59a6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    59aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    59ae:	f3bf 8f6f 	isb	sy
}
    59b2:	4770      	bx	lr
    59b4:	e000e100 	.word	0xe000e100

000059b8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    59b8:	4b05      	ldr	r3, [pc, #20]	; (59d0 <arch_irq_is_enabled+0x18>)
    59ba:	0942      	lsrs	r2, r0, #5
    59bc:	f000 001f 	and.w	r0, r0, #31
    59c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    59c4:	2301      	movs	r3, #1
    59c6:	fa03 f000 	lsl.w	r0, r3, r0
}
    59ca:	4010      	ands	r0, r2
    59cc:	4770      	bx	lr
    59ce:	bf00      	nop
    59d0:	e000e100 	.word	0xe000e100

000059d4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    59d4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    59d6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59d8:	bfa8      	it	ge
    59da:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    59de:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59e2:	bfb8      	it	lt
    59e4:	4b06      	ldrlt	r3, [pc, #24]	; (5a00 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59e6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    59ea:	bfac      	ite	ge
    59ec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59f0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59f4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59f6:	bfb4      	ite	lt
    59f8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59fa:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    59fe:	4770      	bx	lr
    5a00:	e000ed14 	.word	0xe000ed14

00005a04 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5a04:	bf30      	wfi
    b z_SysNmiOnReset
    5a06:	f7ff bffd 	b.w	5a04 <z_SysNmiOnReset>
    5a0a:	bf00      	nop

00005a0c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5a0c:	4a0f      	ldr	r2, [pc, #60]	; (5a4c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    5a0e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5a10:	4b0f      	ldr	r3, [pc, #60]	; (5a50 <z_arm_prep_c+0x44>)
    5a12:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5a16:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5a18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5a1c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5a20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5a24:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5a2c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    5a30:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    5a34:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    5a38:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5a3c:	f004 fc66 	bl	a30c <z_bss_zero>
	z_data_copy();
    5a40:	f005 fc84 	bl	b34c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5a44:	f000 fbe6 	bl	6214 <z_arm_interrupt_init>
	z_cstart();
    5a48:	f004 fc6a 	bl	a320 <z_cstart>
    5a4c:	00000000 	.word	0x00000000
    5a50:	e000ed00 	.word	0xe000ed00

00005a54 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5a54:	4a0a      	ldr	r2, [pc, #40]	; (5a80 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    5a56:	490b      	ldr	r1, [pc, #44]	; (5a84 <arch_swap+0x30>)
	_current->arch.basepri = key;
    5a58:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    5a5a:	6809      	ldr	r1, [r1, #0]
    5a5c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5a60:	4909      	ldr	r1, [pc, #36]	; (5a88 <arch_swap+0x34>)
	_current->arch.basepri = key;
    5a62:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5a66:	684b      	ldr	r3, [r1, #4]
    5a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5a6c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    5a6e:	2300      	movs	r3, #0
    5a70:	f383 8811 	msr	BASEPRI, r3
    5a74:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5a78:	6893      	ldr	r3, [r2, #8]
}
    5a7a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    5a7e:	4770      	bx	lr
    5a80:	20002184 	.word	0x20002184
    5a84:	0001011c 	.word	0x0001011c
    5a88:	e000ed00 	.word	0xe000ed00

00005a8c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5a8c:	4910      	ldr	r1, [pc, #64]	; (5ad0 <z_arm_pendsv+0x44>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5a8e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5a90:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5a94:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5a96:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5a9a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5a9e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5aa0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5aa4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5aa8:	4f0a      	ldr	r7, [pc, #40]	; (5ad4 <z_arm_pendsv+0x48>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5aaa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5aae:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5ab0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5ab2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5ab4:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    5ab8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5aba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5abe:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5ac2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5ac6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5aca:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5ace:	4770      	bx	lr
    ldr r1, =_kernel
    5ad0:	20002184 	.word	0x20002184
    ldr v4, =_SCS_ICSR
    5ad4:	e000ed04 	.word	0xe000ed04

00005ad8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5ad8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5adc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5ade:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5ae2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5ae6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5ae8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5aec:	2902      	cmp	r1, #2
    beq _oops
    5aee:	d0ff      	beq.n	5af0 <_oops>

00005af0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5af0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5af2:	f008 f950 	bl	dd96 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5af6:	bd01      	pop	{r0, pc}

00005af8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    5af8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5afc:	9b00      	ldr	r3, [sp, #0]
    5afe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    5b02:	490a      	ldr	r1, [pc, #40]	; (5b2c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    5b04:	9b01      	ldr	r3, [sp, #4]
    5b06:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5b0a:	9b02      	ldr	r3, [sp, #8]
    5b0c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    5b10:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5b18:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    5b1c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    5b20:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5b22:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    5b24:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5b26:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5b2a:	4770      	bx	lr
    5b2c:	0000bbf9 	.word	0x0000bbf9

00005b30 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5b30:	4b07      	ldr	r3, [pc, #28]	; (5b50 <arch_switch_to_main_thread+0x20>)
    5b32:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5b34:	4610      	mov	r0, r2
    5b36:	f381 8809 	msr	PSP, r1
    5b3a:	2100      	movs	r1, #0
    5b3c:	b663      	cpsie	if
    5b3e:	f381 8811 	msr	BASEPRI, r1
    5b42:	f3bf 8f6f 	isb	sy
    5b46:	2200      	movs	r2, #0
    5b48:	2300      	movs	r3, #0
    5b4a:	f006 f855 	bl	bbf8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5b4e:	bf00      	nop
    5b50:	20002184 	.word	0x20002184

00005b54 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5b54:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5b56:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5b58:	4a0b      	ldr	r2, [pc, #44]	; (5b88 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5b5a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5b5c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5b5e:	bf1e      	ittt	ne
	movne	r1, #0
    5b60:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5b62:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5b64:	f009 f802 	blne	eb6c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5b68:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5b6a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5b6e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5b72:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5b76:	4905      	ldr	r1, [pc, #20]	; (5b8c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5b78:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5b7a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5b7c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5b7e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5b82:	4903      	ldr	r1, [pc, #12]	; (5b90 <_isr_wrapper+0x3c>)
	bx r1
    5b84:	4708      	bx	r1
    5b86:	0000      	.short	0x0000
	ldr r2, =_kernel
    5b88:	20002184 	.word	0x20002184
	ldr r1, =_sw_isr_table
    5b8c:	0000f538 	.word	0x0000f538
	ldr r1, =z_arm_int_exit
    5b90:	00005b95 	.word	0x00005b95

00005b94 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5b94:	4b04      	ldr	r3, [pc, #16]	; (5ba8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5b96:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5b98:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    5b9a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5b9c:	d003      	beq.n	5ba6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    5b9e:	4903      	ldr	r1, [pc, #12]	; (5bac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5ba4:	600a      	str	r2, [r1, #0]

00005ba6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5ba6:	4770      	bx	lr
	ldr r3, =_kernel
    5ba8:	20002184 	.word	0x20002184
	ldr r1, =_SCS_ICSR
    5bac:	e000ed04 	.word	0xe000ed04

00005bb0 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5bb0:	b570      	push	{r4, r5, r6, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    5bb2:	4c49      	ldr	r4, [pc, #292]	; (5cd8 <mem_manage_fault.constprop.0+0x128>)
    5bb4:	6823      	ldr	r3, [r4, #0]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5bb6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    5bb8:	0759      	lsls	r1, r3, #29
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5bba:	b088      	sub	sp, #32
    5bbc:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    5bbe:	d00a      	beq.n	5bd6 <mem_manage_fault.constprop.0+0x26>
    5bc0:	4b46      	ldr	r3, [pc, #280]	; (5cdc <mem_manage_fault.constprop.0+0x12c>)
    5bc2:	9306      	str	r3, [sp, #24]
    5bc4:	aa05      	add	r2, sp, #20
    5bc6:	2302      	movs	r3, #2
    5bc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5bcc:	4620      	mov	r0, r4
    5bce:	9301      	str	r3, [sp, #4]
    5bd0:	9305      	str	r3, [sp, #20]
    5bd2:	f008 f8ef 	bl	ddb4 <z_log_msg2_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5bd6:	4b42      	ldr	r3, [pc, #264]	; (5ce0 <mem_manage_fault.constprop.0+0x130>)
    5bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bda:	06da      	lsls	r2, r3, #27
    5bdc:	d50d      	bpl.n	5bfa <mem_manage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5bde:	6823      	ldr	r3, [r4, #0]
    5be0:	075b      	lsls	r3, r3, #29
    5be2:	d00a      	beq.n	5bfa <mem_manage_fault.constprop.0+0x4a>
    5be4:	4b3f      	ldr	r3, [pc, #252]	; (5ce4 <mem_manage_fault.constprop.0+0x134>)
    5be6:	9306      	str	r3, [sp, #24]
    5be8:	483b      	ldr	r0, [pc, #236]	; (5cd8 <mem_manage_fault.constprop.0+0x128>)
    5bea:	2302      	movs	r3, #2
    5bec:	aa05      	add	r2, sp, #20
    5bee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5bf2:	9301      	str	r3, [sp, #4]
    5bf4:	9305      	str	r3, [sp, #20]
    5bf6:	f008 f8dd 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5bfa:	4b39      	ldr	r3, [pc, #228]	; (5ce0 <mem_manage_fault.constprop.0+0x130>)
    5bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bfe:	0718      	lsls	r0, r3, #28
    5c00:	d50d      	bpl.n	5c1e <mem_manage_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Unstacking error");
    5c02:	6823      	ldr	r3, [r4, #0]
    5c04:	0759      	lsls	r1, r3, #29
    5c06:	d00a      	beq.n	5c1e <mem_manage_fault.constprop.0+0x6e>
    5c08:	4b37      	ldr	r3, [pc, #220]	; (5ce8 <mem_manage_fault.constprop.0+0x138>)
    5c0a:	9306      	str	r3, [sp, #24]
    5c0c:	4832      	ldr	r0, [pc, #200]	; (5cd8 <mem_manage_fault.constprop.0+0x128>)
    5c0e:	2302      	movs	r3, #2
    5c10:	aa05      	add	r2, sp, #20
    5c12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5c16:	9301      	str	r3, [sp, #4]
    5c18:	9305      	str	r3, [sp, #20]
    5c1a:	f008 f8cb 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5c1e:	4b30      	ldr	r3, [pc, #192]	; (5ce0 <mem_manage_fault.constprop.0+0x130>)
    5c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c22:	079a      	lsls	r2, r3, #30
    5c24:	d527      	bpl.n	5c76 <mem_manage_fault.constprop.0+0xc6>
		PR_FAULT_INFO("  Data Access Violation");
    5c26:	6823      	ldr	r3, [r4, #0]
    5c28:	075b      	lsls	r3, r3, #29
    5c2a:	d00a      	beq.n	5c42 <mem_manage_fault.constprop.0+0x92>
    5c2c:	4b2f      	ldr	r3, [pc, #188]	; (5cec <mem_manage_fault.constprop.0+0x13c>)
    5c2e:	9306      	str	r3, [sp, #24]
    5c30:	4829      	ldr	r0, [pc, #164]	; (5cd8 <mem_manage_fault.constprop.0+0x128>)
    5c32:	2302      	movs	r3, #2
    5c34:	aa05      	add	r2, sp, #20
    5c36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5c3a:	9301      	str	r3, [sp, #4]
    5c3c:	9305      	str	r3, [sp, #20]
    5c3e:	f008 f8b9 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    5c42:	4b27      	ldr	r3, [pc, #156]	; (5ce0 <mem_manage_fault.constprop.0+0x130>)
    5c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c48:	0618      	lsls	r0, r3, #24
    5c4a:	d514      	bpl.n	5c76 <mem_manage_fault.constprop.0+0xc6>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5c4c:	6823      	ldr	r3, [r4, #0]
    5c4e:	0759      	lsls	r1, r3, #29
    5c50:	d00b      	beq.n	5c6a <mem_manage_fault.constprop.0+0xba>
    5c52:	4b27      	ldr	r3, [pc, #156]	; (5cf0 <mem_manage_fault.constprop.0+0x140>)
    5c54:	4820      	ldr	r0, [pc, #128]	; (5cd8 <mem_manage_fault.constprop.0+0x128>)
    5c56:	e9cd 3206 	strd	r3, r2, [sp, #24]
    5c5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5c5e:	2303      	movs	r3, #3
    5c60:	aa05      	add	r2, sp, #20
    5c62:	9301      	str	r3, [sp, #4]
    5c64:	9305      	str	r3, [sp, #20]
    5c66:	f008 f8a5 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    5c6a:	b126      	cbz	r6, 5c76 <mem_manage_fault.constprop.0+0xc6>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5c6c:	4a1c      	ldr	r2, [pc, #112]	; (5ce0 <mem_manage_fault.constprop.0+0x130>)
    5c6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5c74:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5c76:	4b1a      	ldr	r3, [pc, #104]	; (5ce0 <mem_manage_fault.constprop.0+0x130>)
    5c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c7a:	07db      	lsls	r3, r3, #31
    5c7c:	d50d      	bpl.n	5c9a <mem_manage_fault.constprop.0+0xea>
		PR_FAULT_INFO("  Instruction Access Violation");
    5c7e:	6823      	ldr	r3, [r4, #0]
    5c80:	075e      	lsls	r6, r3, #29
    5c82:	d00a      	beq.n	5c9a <mem_manage_fault.constprop.0+0xea>
    5c84:	4b1b      	ldr	r3, [pc, #108]	; (5cf4 <mem_manage_fault.constprop.0+0x144>)
    5c86:	9306      	str	r3, [sp, #24]
    5c88:	4813      	ldr	r0, [pc, #76]	; (5cd8 <mem_manage_fault.constprop.0+0x128>)
    5c8a:	2302      	movs	r3, #2
    5c8c:	aa05      	add	r2, sp, #20
    5c8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5c92:	9301      	str	r3, [sp, #4]
    5c94:	9305      	str	r3, [sp, #20]
    5c96:	f008 f88d 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5c9a:	4b11      	ldr	r3, [pc, #68]	; (5ce0 <mem_manage_fault.constprop.0+0x130>)
    5c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c9e:	0698      	lsls	r0, r3, #26
    5ca0:	d50d      	bpl.n	5cbe <mem_manage_fault.constprop.0+0x10e>
		PR_FAULT_INFO(
    5ca2:	6823      	ldr	r3, [r4, #0]
    5ca4:	0759      	lsls	r1, r3, #29
    5ca6:	d00a      	beq.n	5cbe <mem_manage_fault.constprop.0+0x10e>
    5ca8:	4b13      	ldr	r3, [pc, #76]	; (5cf8 <mem_manage_fault.constprop.0+0x148>)
    5caa:	9306      	str	r3, [sp, #24]
    5cac:	480a      	ldr	r0, [pc, #40]	; (5cd8 <mem_manage_fault.constprop.0+0x128>)
    5cae:	2302      	movs	r3, #2
    5cb0:	aa05      	add	r2, sp, #20
    5cb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5cb6:	9301      	str	r3, [sp, #4]
    5cb8:	9305      	str	r3, [sp, #20]
    5cba:	f008 f87b 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5cbe:	4b08      	ldr	r3, [pc, #32]	; (5ce0 <mem_manage_fault.constprop.0+0x130>)
    5cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5cc2:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5cc4:	bf58      	it	pl
    5cc6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    5cca:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5ccc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    5cd0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5cd2:	7028      	strb	r0, [r5, #0]

	return reason;
}
    5cd4:	b008      	add	sp, #32
    5cd6:	bd70      	pop	{r4, r5, r6, pc}
    5cd8:	20000268 	.word	0x20000268
    5cdc:	00011757 	.word	0x00011757
    5ce0:	e000ed00 	.word	0xe000ed00
    5ce4:	0001176d 	.word	0x0001176d
    5ce8:	000117a0 	.word	0x000117a0
    5cec:	000117b3 	.word	0x000117b3
    5cf0:	000117cb 	.word	0x000117cb
    5cf4:	000117e1 	.word	0x000117e1
    5cf8:	00011800 	.word	0x00011800

00005cfc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5cfc:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    5cfe:	4c4b      	ldr	r4, [pc, #300]	; (5e2c <bus_fault.constprop.0+0x130>)
    5d00:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5d02:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    5d04:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    5d06:	b088      	sub	sp, #32
    5d08:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    5d0a:	d00a      	beq.n	5d22 <bus_fault.constprop.0+0x26>
    5d0c:	4b48      	ldr	r3, [pc, #288]	; (5e30 <bus_fault.constprop.0+0x134>)
    5d0e:	9306      	str	r3, [sp, #24]
    5d10:	aa05      	add	r2, sp, #20
    5d12:	2302      	movs	r3, #2
    5d14:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d18:	4620      	mov	r0, r4
    5d1a:	9301      	str	r3, [sp, #4]
    5d1c:	9305      	str	r3, [sp, #20]
    5d1e:	f008 f849 	bl	ddb4 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5d22:	4b44      	ldr	r3, [pc, #272]	; (5e34 <bus_fault.constprop.0+0x138>)
    5d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d26:	04da      	lsls	r2, r3, #19
    5d28:	d50d      	bpl.n	5d46 <bus_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  Stacking error");
    5d2a:	6823      	ldr	r3, [r4, #0]
    5d2c:	075b      	lsls	r3, r3, #29
    5d2e:	d00a      	beq.n	5d46 <bus_fault.constprop.0+0x4a>
    5d30:	4b41      	ldr	r3, [pc, #260]	; (5e38 <bus_fault.constprop.0+0x13c>)
    5d32:	9306      	str	r3, [sp, #24]
    5d34:	483d      	ldr	r0, [pc, #244]	; (5e2c <bus_fault.constprop.0+0x130>)
    5d36:	2302      	movs	r3, #2
    5d38:	aa05      	add	r2, sp, #20
    5d3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d3e:	9301      	str	r3, [sp, #4]
    5d40:	9305      	str	r3, [sp, #20]
    5d42:	f008 f837 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5d46:	4b3b      	ldr	r3, [pc, #236]	; (5e34 <bus_fault.constprop.0+0x138>)
    5d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d4a:	0518      	lsls	r0, r3, #20
    5d4c:	d50d      	bpl.n	5d6a <bus_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Unstacking error");
    5d4e:	6823      	ldr	r3, [r4, #0]
    5d50:	0759      	lsls	r1, r3, #29
    5d52:	d00a      	beq.n	5d6a <bus_fault.constprop.0+0x6e>
    5d54:	4b39      	ldr	r3, [pc, #228]	; (5e3c <bus_fault.constprop.0+0x140>)
    5d56:	9306      	str	r3, [sp, #24]
    5d58:	4834      	ldr	r0, [pc, #208]	; (5e2c <bus_fault.constprop.0+0x130>)
    5d5a:	2302      	movs	r3, #2
    5d5c:	aa05      	add	r2, sp, #20
    5d5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d62:	9301      	str	r3, [sp, #4]
    5d64:	9305      	str	r3, [sp, #20]
    5d66:	f008 f825 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5d6a:	4b32      	ldr	r3, [pc, #200]	; (5e34 <bus_fault.constprop.0+0x138>)
    5d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d6e:	059a      	lsls	r2, r3, #22
    5d70:	d527      	bpl.n	5dc2 <bus_fault.constprop.0+0xc6>
		PR_FAULT_INFO("  Precise data bus error");
    5d72:	6823      	ldr	r3, [r4, #0]
    5d74:	075b      	lsls	r3, r3, #29
    5d76:	d00a      	beq.n	5d8e <bus_fault.constprop.0+0x92>
    5d78:	4b31      	ldr	r3, [pc, #196]	; (5e40 <bus_fault.constprop.0+0x144>)
    5d7a:	9306      	str	r3, [sp, #24]
    5d7c:	482b      	ldr	r0, [pc, #172]	; (5e2c <bus_fault.constprop.0+0x130>)
    5d7e:	2302      	movs	r3, #2
    5d80:	aa05      	add	r2, sp, #20
    5d82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d86:	9301      	str	r3, [sp, #4]
    5d88:	9305      	str	r3, [sp, #20]
    5d8a:	f008 f813 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    5d8e:	4b29      	ldr	r3, [pc, #164]	; (5e34 <bus_fault.constprop.0+0x138>)
    5d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d94:	0418      	lsls	r0, r3, #16
    5d96:	d514      	bpl.n	5dc2 <bus_fault.constprop.0+0xc6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5d98:	6823      	ldr	r3, [r4, #0]
    5d9a:	0759      	lsls	r1, r3, #29
    5d9c:	d00b      	beq.n	5db6 <bus_fault.constprop.0+0xba>
    5d9e:	4b29      	ldr	r3, [pc, #164]	; (5e44 <bus_fault.constprop.0+0x148>)
    5da0:	4822      	ldr	r0, [pc, #136]	; (5e2c <bus_fault.constprop.0+0x130>)
    5da2:	e9cd 3206 	strd	r3, r2, [sp, #24]
    5da6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5daa:	2303      	movs	r3, #3
    5dac:	aa05      	add	r2, sp, #20
    5dae:	9301      	str	r3, [sp, #4]
    5db0:	9305      	str	r3, [sp, #20]
    5db2:	f007 ffff 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    5db6:	b126      	cbz	r6, 5dc2 <bus_fault.constprop.0+0xc6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5db8:	4a1e      	ldr	r2, [pc, #120]	; (5e34 <bus_fault.constprop.0+0x138>)
    5dba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5dbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5dc0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5dc2:	4b1c      	ldr	r3, [pc, #112]	; (5e34 <bus_fault.constprop.0+0x138>)
    5dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5dc6:	055b      	lsls	r3, r3, #21
    5dc8:	d50d      	bpl.n	5de6 <bus_fault.constprop.0+0xea>
		PR_FAULT_INFO("  Imprecise data bus error");
    5dca:	6823      	ldr	r3, [r4, #0]
    5dcc:	075e      	lsls	r6, r3, #29
    5dce:	d00a      	beq.n	5de6 <bus_fault.constprop.0+0xea>
    5dd0:	4b1d      	ldr	r3, [pc, #116]	; (5e48 <bus_fault.constprop.0+0x14c>)
    5dd2:	9306      	str	r3, [sp, #24]
    5dd4:	4815      	ldr	r0, [pc, #84]	; (5e2c <bus_fault.constprop.0+0x130>)
    5dd6:	2302      	movs	r3, #2
    5dd8:	aa05      	add	r2, sp, #20
    5dda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5dde:	9301      	str	r3, [sp, #4]
    5de0:	9305      	str	r3, [sp, #20]
    5de2:	f007 ffe7 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5de6:	4b13      	ldr	r3, [pc, #76]	; (5e34 <bus_fault.constprop.0+0x138>)
    5de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5dea:	05d0      	lsls	r0, r2, #23
    5dec:	d516      	bpl.n	5e1c <bus_fault.constprop.0+0x120>
		PR_FAULT_INFO("  Instruction bus error");
    5dee:	6823      	ldr	r3, [r4, #0]
    5df0:	0759      	lsls	r1, r3, #29
    5df2:	d00a      	beq.n	5e0a <bus_fault.constprop.0+0x10e>
    5df4:	4b15      	ldr	r3, [pc, #84]	; (5e4c <bus_fault.constprop.0+0x150>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5df6:	9306      	str	r3, [sp, #24]
    5df8:	480c      	ldr	r0, [pc, #48]	; (5e2c <bus_fault.constprop.0+0x130>)
    5dfa:	2302      	movs	r3, #2
    5dfc:	aa05      	add	r2, sp, #20
    5dfe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e02:	9301      	str	r3, [sp, #4]
    5e04:	9305      	str	r3, [sp, #20]
    5e06:	f007 ffd5 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5e0a:	4a0a      	ldr	r2, [pc, #40]	; (5e34 <bus_fault.constprop.0+0x138>)
    5e0c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    5e0e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5e10:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5e14:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5e16:	7028      	strb	r0, [r5, #0]

	return reason;
}
    5e18:	b008      	add	sp, #32
    5e1a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e1e:	049a      	lsls	r2, r3, #18
    5e20:	d5f3      	bpl.n	5e0a <bus_fault.constprop.0+0x10e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5e22:	6823      	ldr	r3, [r4, #0]
    5e24:	075b      	lsls	r3, r3, #29
    5e26:	d0f0      	beq.n	5e0a <bus_fault.constprop.0+0x10e>
    5e28:	4b09      	ldr	r3, [pc, #36]	; (5e50 <bus_fault.constprop.0+0x154>)
    5e2a:	e7e4      	b.n	5df6 <bus_fault.constprop.0+0xfa>
    5e2c:	20000268 	.word	0x20000268
    5e30:	0001182f 	.word	0x0001182f
    5e34:	e000ed00 	.word	0xe000ed00
    5e38:	00011845 	.word	0x00011845
    5e3c:	000117a0 	.word	0x000117a0
    5e40:	00011856 	.word	0x00011856
    5e44:	0001186f 	.word	0x0001186f
    5e48:	00011884 	.word	0x00011884
    5e4c:	0001189f 	.word	0x0001189f
    5e50:	00011800 	.word	0x00011800

00005e54 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    5e54:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    5e56:	4c43      	ldr	r4, [pc, #268]	; (5f64 <usage_fault.constprop.0+0x110>)
    5e58:	6823      	ldr	r3, [r4, #0]
    5e5a:	075b      	lsls	r3, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
    5e5c:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** USAGE FAULT *****");
    5e5e:	d00a      	beq.n	5e76 <usage_fault.constprop.0+0x22>
    5e60:	4b41      	ldr	r3, [pc, #260]	; (5f68 <usage_fault.constprop.0+0x114>)
    5e62:	9306      	str	r3, [sp, #24]
    5e64:	aa05      	add	r2, sp, #20
    5e66:	2302      	movs	r3, #2
    5e68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e6c:	4620      	mov	r0, r4
    5e6e:	9301      	str	r3, [sp, #4]
    5e70:	9305      	str	r3, [sp, #20]
    5e72:	f007 ff9f 	bl	ddb4 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5e76:	4b3d      	ldr	r3, [pc, #244]	; (5f6c <usage_fault.constprop.0+0x118>)
    5e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e7a:	0198      	lsls	r0, r3, #6
    5e7c:	d50d      	bpl.n	5e9a <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
    5e7e:	6823      	ldr	r3, [r4, #0]
    5e80:	0759      	lsls	r1, r3, #29
    5e82:	d00a      	beq.n	5e9a <usage_fault.constprop.0+0x46>
    5e84:	4b3a      	ldr	r3, [pc, #232]	; (5f70 <usage_fault.constprop.0+0x11c>)
    5e86:	9306      	str	r3, [sp, #24]
    5e88:	4836      	ldr	r0, [pc, #216]	; (5f64 <usage_fault.constprop.0+0x110>)
    5e8a:	2302      	movs	r3, #2
    5e8c:	aa05      	add	r2, sp, #20
    5e8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e92:	9301      	str	r3, [sp, #4]
    5e94:	9305      	str	r3, [sp, #20]
    5e96:	f007 ff8d 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5e9a:	4b34      	ldr	r3, [pc, #208]	; (5f6c <usage_fault.constprop.0+0x118>)
    5e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e9e:	01da      	lsls	r2, r3, #7
    5ea0:	d50d      	bpl.n	5ebe <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Unaligned memory access");
    5ea2:	6823      	ldr	r3, [r4, #0]
    5ea4:	075b      	lsls	r3, r3, #29
    5ea6:	d00a      	beq.n	5ebe <usage_fault.constprop.0+0x6a>
    5ea8:	4b32      	ldr	r3, [pc, #200]	; (5f74 <usage_fault.constprop.0+0x120>)
    5eaa:	9306      	str	r3, [sp, #24]
    5eac:	482d      	ldr	r0, [pc, #180]	; (5f64 <usage_fault.constprop.0+0x110>)
    5eae:	2302      	movs	r3, #2
    5eb0:	aa05      	add	r2, sp, #20
    5eb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5eb6:	9301      	str	r3, [sp, #4]
    5eb8:	9305      	str	r3, [sp, #20]
    5eba:	f007 ff7b 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5ebe:	4b2b      	ldr	r3, [pc, #172]	; (5f6c <usage_fault.constprop.0+0x118>)
    5ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ec2:	0318      	lsls	r0, r3, #12
    5ec4:	d50d      	bpl.n	5ee2 <usage_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  No coprocessor instructions");
    5ec6:	6823      	ldr	r3, [r4, #0]
    5ec8:	0759      	lsls	r1, r3, #29
    5eca:	d00a      	beq.n	5ee2 <usage_fault.constprop.0+0x8e>
    5ecc:	4b2a      	ldr	r3, [pc, #168]	; (5f78 <usage_fault.constprop.0+0x124>)
    5ece:	9306      	str	r3, [sp, #24]
    5ed0:	4824      	ldr	r0, [pc, #144]	; (5f64 <usage_fault.constprop.0+0x110>)
    5ed2:	2302      	movs	r3, #2
    5ed4:	aa05      	add	r2, sp, #20
    5ed6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5eda:	9301      	str	r3, [sp, #4]
    5edc:	9305      	str	r3, [sp, #20]
    5ede:	f007 ff69 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5ee2:	4b22      	ldr	r3, [pc, #136]	; (5f6c <usage_fault.constprop.0+0x118>)
    5ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ee6:	035a      	lsls	r2, r3, #13
    5ee8:	d50d      	bpl.n	5f06 <usage_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5eea:	6823      	ldr	r3, [r4, #0]
    5eec:	075b      	lsls	r3, r3, #29
    5eee:	d00a      	beq.n	5f06 <usage_fault.constprop.0+0xb2>
    5ef0:	4b22      	ldr	r3, [pc, #136]	; (5f7c <usage_fault.constprop.0+0x128>)
    5ef2:	9306      	str	r3, [sp, #24]
    5ef4:	481b      	ldr	r0, [pc, #108]	; (5f64 <usage_fault.constprop.0+0x110>)
    5ef6:	2302      	movs	r3, #2
    5ef8:	aa05      	add	r2, sp, #20
    5efa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5efe:	9301      	str	r3, [sp, #4]
    5f00:	9305      	str	r3, [sp, #20]
    5f02:	f007 ff57 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5f06:	4b19      	ldr	r3, [pc, #100]	; (5f6c <usage_fault.constprop.0+0x118>)
    5f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f0a:	0398      	lsls	r0, r3, #14
    5f0c:	d50d      	bpl.n	5f2a <usage_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5f0e:	6823      	ldr	r3, [r4, #0]
    5f10:	0759      	lsls	r1, r3, #29
    5f12:	d00a      	beq.n	5f2a <usage_fault.constprop.0+0xd6>
    5f14:	4b1a      	ldr	r3, [pc, #104]	; (5f80 <usage_fault.constprop.0+0x12c>)
    5f16:	9306      	str	r3, [sp, #24]
    5f18:	4812      	ldr	r0, [pc, #72]	; (5f64 <usage_fault.constprop.0+0x110>)
    5f1a:	2302      	movs	r3, #2
    5f1c:	aa05      	add	r2, sp, #20
    5f1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5f22:	9301      	str	r3, [sp, #4]
    5f24:	9305      	str	r3, [sp, #20]
    5f26:	f007 ff45 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5f2a:	4b10      	ldr	r3, [pc, #64]	; (5f6c <usage_fault.constprop.0+0x118>)
    5f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f2e:	03da      	lsls	r2, r3, #15
    5f30:	d50d      	bpl.n	5f4e <usage_fault.constprop.0+0xfa>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5f32:	6823      	ldr	r3, [r4, #0]
    5f34:	075b      	lsls	r3, r3, #29
    5f36:	d00a      	beq.n	5f4e <usage_fault.constprop.0+0xfa>
    5f38:	4b12      	ldr	r3, [pc, #72]	; (5f84 <usage_fault.constprop.0+0x130>)
    5f3a:	9306      	str	r3, [sp, #24]
    5f3c:	4809      	ldr	r0, [pc, #36]	; (5f64 <usage_fault.constprop.0+0x110>)
    5f3e:	2302      	movs	r3, #2
    5f40:	aa05      	add	r2, sp, #20
    5f42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5f46:	9301      	str	r3, [sp, #4]
    5f48:	9305      	str	r3, [sp, #20]
    5f4a:	f007 ff33 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5f4e:	4a07      	ldr	r2, [pc, #28]	; (5f6c <usage_fault.constprop.0+0x118>)
    5f50:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5f52:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5f56:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    5f5a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5f5c:	6293      	str	r3, [r2, #40]	; 0x28
}
    5f5e:	b008      	add	sp, #32
    5f60:	bd10      	pop	{r4, pc}
    5f62:	bf00      	nop
    5f64:	20000268 	.word	0x20000268
    5f68:	000118b7 	.word	0x000118b7
    5f6c:	e000ed00 	.word	0xe000ed00
    5f70:	000118cf 	.word	0x000118cf
    5f74:	000118e2 	.word	0x000118e2
    5f78:	000118fc 	.word	0x000118fc
    5f7c:	0001191a 	.word	0x0001191a
    5f80:	0001193f 	.word	0x0001193f
    5f84:	00011959 	.word	0x00011959

00005f88 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5f88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    5f8a:	ab0a      	add	r3, sp, #40	; 0x28
    5f8c:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    5f8e:	9302      	str	r3, [sp, #8]
    5f90:	4b05      	ldr	r3, [pc, #20]	; (5fa8 <z_log_msg2_runtime_create.constprop.0+0x20>)
    5f92:	9301      	str	r3, [sp, #4]
    5f94:	2300      	movs	r3, #0
    5f96:	9300      	str	r3, [sp, #0]
    5f98:	2201      	movs	r2, #1
    5f9a:	4618      	mov	r0, r3
    5f9c:	f7fb fe44 	bl	1c28 <z_impl_z_log_msg2_runtime_vcreate>
}
    5fa0:	b007      	add	sp, #28
    5fa2:	f85d fb04 	ldr.w	pc, [sp], #4
    5fa6:	bf00      	nop
    5fa8:	00011984 	.word	0x00011984

00005fac <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5fb0:	4b83      	ldr	r3, [pc, #524]	; (61c0 <z_arm_fault+0x214>)
    5fb2:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    5fb6:	b08e      	sub	sp, #56	; 0x38
    5fb8:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5fba:	f3c8 0408 	ubfx	r4, r8, #0, #9
    5fbe:	2500      	movs	r5, #0
    5fc0:	f385 8811 	msr	BASEPRI, r5
    5fc4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5fc8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    5fcc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    5fd0:	d112      	bne.n	5ff8 <z_arm_fault+0x4c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    5fd2:	f002 030c 	and.w	r3, r2, #12
    5fd6:	2b08      	cmp	r3, #8
    5fd8:	d111      	bne.n	5ffe <z_arm_fault+0x52>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5fda:	487a      	ldr	r0, [pc, #488]	; (61c4 <z_arm_fault+0x218>)
    5fdc:	6803      	ldr	r3, [r0, #0]
    5fde:	f013 0607 	ands.w	r6, r3, #7
    5fe2:	d00a      	beq.n	5ffa <z_arm_fault+0x4e>
    5fe4:	4b78      	ldr	r3, [pc, #480]	; (61c8 <z_arm_fault+0x21c>)
    5fe6:	930a      	str	r3, [sp, #40]	; 0x28
    5fe8:	aa09      	add	r2, sp, #36	; 0x24
    5fea:	2302      	movs	r3, #2
    5fec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ff0:	9305      	str	r3, [sp, #20]
    5ff2:	9309      	str	r3, [sp, #36]	; 0x24
    5ff4:	f007 fede 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	*nested_exc = false;
    5ff8:	462e      	mov	r6, r5
		return NULL;
    5ffa:	4637      	mov	r7, r6
    5ffc:	e004      	b.n	6008 <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5ffe:	0711      	lsls	r1, r2, #28
	*nested_exc = false;
    6000:	bf4e      	itee	mi
    6002:	462e      	movmi	r6, r5
			ptr_esf = (z_arch_esf_t *)msp;
    6004:	4607      	movpl	r7, r0
			*nested_exc = true;
    6006:	2601      	movpl	r6, #1
	*recoverable = false;
    6008:	2300      	movs	r3, #0
    600a:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (fault) {
    600e:	1ee3      	subs	r3, r4, #3
    6010:	2b09      	cmp	r3, #9
    6012:	f200 80b7 	bhi.w	6184 <z_arm_fault+0x1d8>
    6016:	e8df f003 	tbb	[pc, r3]
    601a:	9f05      	.short	0x9f05
    601c:	b5b59ca3 	.word	0xb5b59ca3
    6020:	a7b5b5b5 	.word	0xa7b5b5b5
	PR_FAULT_INFO("***** HARD FAULT *****");
    6024:	4d67      	ldr	r5, [pc, #412]	; (61c4 <z_arm_fault+0x218>)
    6026:	682b      	ldr	r3, [r5, #0]
    6028:	075a      	lsls	r2, r3, #29
    602a:	d00a      	beq.n	6042 <z_arm_fault+0x96>
    602c:	4b67      	ldr	r3, [pc, #412]	; (61cc <z_arm_fault+0x220>)
    602e:	930a      	str	r3, [sp, #40]	; 0x28
    6030:	aa09      	add	r2, sp, #36	; 0x24
    6032:	2302      	movs	r3, #2
    6034:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6038:	4628      	mov	r0, r5
    603a:	9305      	str	r3, [sp, #20]
    603c:	9309      	str	r3, [sp, #36]	; 0x24
    603e:	f007 feb9 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6042:	4a5f      	ldr	r2, [pc, #380]	; (61c0 <z_arm_fault+0x214>)
    6044:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	*recoverable = false;
    6046:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    604a:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    604e:	f88d 8013 	strb.w	r8, [sp, #19]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6052:	d010      	beq.n	6076 <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    6054:	682b      	ldr	r3, [r5, #0]
    6056:	075b      	lsls	r3, r3, #29
    6058:	d101      	bne.n	605e <z_arm_fault+0xb2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    605a:	2400      	movs	r4, #0
    605c:	e01c      	b.n	6098 <z_arm_fault+0xec>
		PR_EXC("  Bus fault on vector table read");
    605e:	4b5c      	ldr	r3, [pc, #368]	; (61d0 <z_arm_fault+0x224>)
    6060:	930a      	str	r3, [sp, #40]	; 0x28
    6062:	4858      	ldr	r0, [pc, #352]	; (61c4 <z_arm_fault+0x218>)
    6064:	2302      	movs	r3, #2
    6066:	9305      	str	r3, [sp, #20]
    6068:	9309      	str	r3, [sp, #36]	; 0x24
    606a:	aa09      	add	r2, sp, #36	; 0x24
    606c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	PR_FAULT_INFO(
    6070:	f007 fea0 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
    6074:	e7f1      	b.n	605a <z_arm_fault+0xae>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    6076:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6078:	2b00      	cmp	r3, #0
    607a:	da28      	bge.n	60ce <z_arm_fault+0x122>
		PR_EXC("  Debug event");
    607c:	682b      	ldr	r3, [r5, #0]
    607e:	075d      	lsls	r5, r3, #29
    6080:	d0eb      	beq.n	605a <z_arm_fault+0xae>
    6082:	4b54      	ldr	r3, [pc, #336]	; (61d4 <z_arm_fault+0x228>)
    6084:	930a      	str	r3, [sp, #40]	; 0x28
    6086:	484f      	ldr	r0, [pc, #316]	; (61c4 <z_arm_fault+0x218>)
    6088:	2302      	movs	r3, #2
    608a:	aa09      	add	r2, sp, #36	; 0x24
    608c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6090:	9305      	str	r3, [sp, #20]
    6092:	9309      	str	r3, [sp, #36]	; 0x24
    6094:	f007 fe8e 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6098:	f89d 3013 	ldrb.w	r3, [sp, #19]
    609c:	b9a3      	cbnz	r3, 60c8 <z_arm_fault+0x11c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    609e:	2220      	movs	r2, #32
    60a0:	4639      	mov	r1, r7
    60a2:	a806      	add	r0, sp, #24
    60a4:	f008 f816 	bl	e0d4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    60a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    60aa:	2e00      	cmp	r6, #0
    60ac:	f000 8082 	beq.w	61b4 <z_arm_fault+0x208>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    60b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    60b4:	b922      	cbnz	r2, 60c0 <z_arm_fault+0x114>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    60b6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    60ba:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    60be:	930d      	str	r3, [sp, #52]	; 0x34
	}

	z_arm_fatal_error(reason, &esf_copy);
    60c0:	a906      	add	r1, sp, #24
    60c2:	4620      	mov	r0, r4
    60c4:	f7ff fbe6 	bl	5894 <z_arm_fatal_error>
}
    60c8:	b00e      	add	sp, #56	; 0x38
    60ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    60ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    60d0:	005c      	lsls	r4, r3, #1
    60d2:	d5c2      	bpl.n	605a <z_arm_fault+0xae>
		PR_EXC("  Fault escalation (see below)");
    60d4:	682b      	ldr	r3, [r5, #0]
    60d6:	0758      	lsls	r0, r3, #29
    60d8:	d00a      	beq.n	60f0 <z_arm_fault+0x144>
    60da:	4b3f      	ldr	r3, [pc, #252]	; (61d8 <z_arm_fault+0x22c>)
    60dc:	930a      	str	r3, [sp, #40]	; 0x28
    60de:	4839      	ldr	r0, [pc, #228]	; (61c4 <z_arm_fault+0x218>)
    60e0:	2302      	movs	r3, #2
    60e2:	aa09      	add	r2, sp, #36	; 0x24
    60e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    60e8:	9305      	str	r3, [sp, #20]
    60ea:	9309      	str	r3, [sp, #36]	; 0x24
    60ec:	f007 fe62 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    60f0:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    60f2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    60f6:	f64d 7302 	movw	r3, #57090	; 0xdf02
    60fa:	429a      	cmp	r2, r3
    60fc:	d00a      	beq.n	6114 <z_arm_fault+0x168>
		} else if (SCB_MMFSR != 0) {
    60fe:	4b30      	ldr	r3, [pc, #192]	; (61c0 <z_arm_fault+0x214>)
    6100:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    6104:	b1c2      	cbz	r2, 6138 <z_arm_fault+0x18c>
			reason = mem_manage_fault(esf, 1, recoverable);
    6106:	f10d 0113 	add.w	r1, sp, #19
    610a:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    610c:	f7ff fd50 	bl	5bb0 <mem_manage_fault.constprop.0>
    6110:	4604      	mov	r4, r0
		break;
    6112:	e7c1      	b.n	6098 <z_arm_fault+0xec>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    6114:	682b      	ldr	r3, [r5, #0]
    6116:	0759      	lsls	r1, r3, #29
    6118:	d00c      	beq.n	6134 <z_arm_fault+0x188>
    611a:	683b      	ldr	r3, [r7, #0]
    611c:	4a2f      	ldr	r2, [pc, #188]	; (61dc <z_arm_fault+0x230>)
    611e:	4829      	ldr	r0, [pc, #164]	; (61c4 <z_arm_fault+0x218>)
    6120:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    6124:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6128:	2303      	movs	r3, #3
    612a:	aa09      	add	r2, sp, #36	; 0x24
    612c:	9305      	str	r3, [sp, #20]
    612e:	9309      	str	r3, [sp, #36]	; 0x24
    6130:	f007 fe40 	bl	ddb4 <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
    6134:	683c      	ldr	r4, [r7, #0]
    6136:	e7af      	b.n	6098 <z_arm_fault+0xec>
		} else if (SCB_BFSR != 0) {
    6138:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    613c:	b12a      	cbz	r2, 614a <z_arm_fault+0x19e>
			reason = bus_fault(esf, 1, recoverable);
    613e:	f10d 0113 	add.w	r1, sp, #19
    6142:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6144:	f7ff fdda 	bl	5cfc <bus_fault.constprop.0>
    6148:	e7e2      	b.n	6110 <z_arm_fault+0x164>
		} else if (SCB_UFSR != 0) {
    614a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    614c:	b29b      	uxth	r3, r3
    614e:	2b00      	cmp	r3, #0
    6150:	d083      	beq.n	605a <z_arm_fault+0xae>
		reason = usage_fault(esf);
    6152:	f7ff fe7f 	bl	5e54 <usage_fault.constprop.0>
    6156:	e7db      	b.n	6110 <z_arm_fault+0x164>
		reason = mem_manage_fault(esf, 0, recoverable);
    6158:	f10d 0113 	add.w	r1, sp, #19
    615c:	2000      	movs	r0, #0
    615e:	e7d5      	b.n	610c <z_arm_fault+0x160>
		reason = bus_fault(esf, 0, recoverable);
    6160:	f10d 0113 	add.w	r1, sp, #19
    6164:	2000      	movs	r0, #0
    6166:	e7ed      	b.n	6144 <z_arm_fault+0x198>
	PR_FAULT_INFO(
    6168:	4816      	ldr	r0, [pc, #88]	; (61c4 <z_arm_fault+0x218>)
    616a:	6803      	ldr	r3, [r0, #0]
    616c:	075a      	lsls	r2, r3, #29
    616e:	f43f af74 	beq.w	605a <z_arm_fault+0xae>
    6172:	4b1b      	ldr	r3, [pc, #108]	; (61e0 <z_arm_fault+0x234>)
    6174:	930a      	str	r3, [sp, #40]	; 0x28
    6176:	2302      	movs	r3, #2
    6178:	9305      	str	r3, [sp, #20]
    617a:	9309      	str	r3, [sp, #36]	; 0x24
    617c:	aa09      	add	r2, sp, #36	; 0x24
    617e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6182:	e775      	b.n	6070 <z_arm_fault+0xc4>
	PR_FAULT_INFO("***** %s %d) *****",
    6184:	490f      	ldr	r1, [pc, #60]	; (61c4 <z_arm_fault+0x218>)
    6186:	680b      	ldr	r3, [r1, #0]
    6188:	075b      	lsls	r3, r3, #29
    618a:	f43f af66 	beq.w	605a <z_arm_fault+0xae>
    618e:	4a15      	ldr	r2, [pc, #84]	; (61e4 <z_arm_fault+0x238>)
    6190:	4b15      	ldr	r3, [pc, #84]	; (61e8 <z_arm_fault+0x23c>)
    6192:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    6196:	bf18      	it	ne
    6198:	4613      	movne	r3, r2
    619a:	3c10      	subs	r4, #16
    619c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    61a0:	2400      	movs	r4, #0
    61a2:	4b12      	ldr	r3, [pc, #72]	; (61ec <z_arm_fault+0x240>)
    61a4:	9301      	str	r3, [sp, #4]
    61a6:	9400      	str	r4, [sp, #0]
    61a8:	4623      	mov	r3, r4
    61aa:	2201      	movs	r2, #1
    61ac:	4620      	mov	r0, r4
    61ae:	f7ff feeb 	bl	5f88 <z_log_msg2_runtime_create.constprop.0>
    61b2:	e771      	b.n	6098 <z_arm_fault+0xec>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    61b4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    61b8:	f023 0301 	bic.w	r3, r3, #1
    61bc:	e77f      	b.n	60be <z_arm_fault+0x112>
    61be:	bf00      	nop
    61c0:	e000ed00 	.word	0xe000ed00
    61c4:	20000268 	.word	0x20000268
    61c8:	000119c5 	.word	0x000119c5
    61cc:	000119f0 	.word	0x000119f0
    61d0:	00011a07 	.word	0x00011a07
    61d4:	00011a28 	.word	0x00011a28
    61d8:	00011a36 	.word	0x00011a36
    61dc:	00011a55 	.word	0x00011a55
    61e0:	00011a71 	.word	0x00011a71
    61e4:	000119ac 	.word	0x000119ac
    61e8:	00011997 	.word	0x00011997
    61ec:	00011984 	.word	0x00011984

000061f0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    61f0:	4a02      	ldr	r2, [pc, #8]	; (61fc <z_arm_fault_init+0xc>)
    61f2:	6953      	ldr	r3, [r2, #20]
    61f4:	f043 0310 	orr.w	r3, r3, #16
    61f8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    61fa:	4770      	bx	lr
    61fc:	e000ed00 	.word	0xe000ed00

00006200 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6200:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6204:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6208:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    620a:	4672      	mov	r2, lr
	bl z_arm_fault
    620c:	f7ff fece 	bl	5fac <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6210:	bd01      	pop	{r0, pc}
    6212:	bf00      	nop

00006214 <z_arm_interrupt_init>:
    6214:	4804      	ldr	r0, [pc, #16]	; (6228 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6216:	2300      	movs	r3, #0
    6218:	2120      	movs	r1, #32
    621a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    621c:	3301      	adds	r3, #1
    621e:	2b30      	cmp	r3, #48	; 0x30
    6220:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6224:	d1f9      	bne.n	621a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6226:	4770      	bx	lr
    6228:	e000e100 	.word	0xe000e100

0000622c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    622c:	f009 f8ee 	bl	f40c <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6230:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6232:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    6236:	480b      	ldr	r0, [pc, #44]	; (6264 <__start+0x38>)
    ldr r1, =0xaa
    6238:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    623c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    6240:	f007 ff53 	bl	e0ea <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6244:	4807      	ldr	r0, [pc, #28]	; (6264 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6246:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    624a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    624c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6250:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6254:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6256:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6258:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    625c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6260:	f7ff fbd4 	bl	5a0c <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    6264:	20003a88 	.word	0x20003a88

00006268 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6268:	4b06      	ldr	r3, [pc, #24]	; (6284 <z_impl_k_thread_abort+0x1c>)
    626a:	689b      	ldr	r3, [r3, #8]
    626c:	4283      	cmp	r3, r0
    626e:	d107      	bne.n	6280 <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6270:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6274:	b123      	cbz	r3, 6280 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6276:	4a04      	ldr	r2, [pc, #16]	; (6288 <z_impl_k_thread_abort+0x20>)
    6278:	6853      	ldr	r3, [r2, #4]
    627a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    627e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    6280:	f004 bffc 	b.w	b27c <z_thread_abort>
    6284:	20002184 	.word	0x20002184
    6288:	e000ed00 	.word	0xe000ed00

0000628c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    628c:	4b02      	ldr	r3, [pc, #8]	; (6298 <z_arm_configure_static_mpu_regions+0xc>)
    628e:	4a03      	ldr	r2, [pc, #12]	; (629c <z_arm_configure_static_mpu_regions+0x10>)
    6290:	4803      	ldr	r0, [pc, #12]	; (62a0 <z_arm_configure_static_mpu_regions+0x14>)
    6292:	2101      	movs	r1, #1
    6294:	f000 b880 	b.w	6398 <arm_core_mpu_configure_static_mpu_regions>
    6298:	20040000 	.word	0x20040000
    629c:	20000000 	.word	0x20000000
    62a0:	0000fe6c 	.word	0x0000fe6c

000062a4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    62a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    62a6:	4f2d      	ldr	r7, [pc, #180]	; (635c <mpu_configure_regions+0xb8>)
    62a8:	b089      	sub	sp, #36	; 0x24
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    62aa:	2600      	movs	r6, #0
    62ac:	428e      	cmp	r6, r1
    62ae:	db02      	blt.n	62b6 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    62b0:	4610      	mov	r0, r2
    62b2:	b009      	add	sp, #36	; 0x24
    62b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    62b6:	6844      	ldr	r4, [r0, #4]
    62b8:	2c00      	cmp	r4, #0
    62ba:	d04c      	beq.n	6356 <mpu_configure_regions+0xb2>
		if (do_sanity_check &&
    62bc:	b1db      	cbz	r3, 62f6 <mpu_configure_regions+0x52>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    62be:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    62c2:	ea14 0f0c 	tst.w	r4, ip
    62c6:	d010      	beq.n	62ea <mpu_configure_regions+0x46>
			LOG_ERR("Partition %u: sanity check failed.", i);
    62c8:	4825      	ldr	r0, [pc, #148]	; (6360 <mpu_configure_regions+0xbc>)
    62ca:	6803      	ldr	r3, [r0, #0]
    62cc:	075a      	lsls	r2, r3, #29
    62ce:	d029      	beq.n	6324 <mpu_configure_regions+0x80>
    62d0:	4b24      	ldr	r3, [pc, #144]	; (6364 <mpu_configure_regions+0xc0>)
    62d2:	e9cd 3606 	strd	r3, r6, [sp, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    62d6:	2303      	movs	r3, #3
    62d8:	9301      	str	r3, [sp, #4]
    62da:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    62dc:	2300      	movs	r3, #0
    62de:	aa05      	add	r2, sp, #20
    62e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    62e4:	f006 fb2b 	bl	c93e <z_impl_z_log_msg2_static_create>
		if (reg_index == -EINVAL) {
    62e8:	e01c      	b.n	6324 <mpu_configure_regions+0x80>
		&&
    62ea:	2c1f      	cmp	r4, #31
    62ec:	d9ec      	bls.n	62c8 <mpu_configure_regions+0x24>
		((part->start & (part->size - 1U)) == 0U);
    62ee:	6805      	ldr	r5, [r0, #0]
		&&
    62f0:	ea1c 0f05 	tst.w	ip, r5
    62f4:	d1e8      	bne.n	62c8 <mpu_configure_regions+0x24>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    62f6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    62f8:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    62fa:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    62fe:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    6300:	d913      	bls.n	632a <mpu_configure_regions+0x86>
	if (size > (1UL << 31)) {
    6302:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6306:	d812      	bhi.n	632e <mpu_configure_regions+0x8a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6308:	3c01      	subs	r4, #1
    630a:	fab4 f484 	clz	r4, r4
    630e:	f1c4 041f 	rsb	r4, r4, #31
    6312:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    6314:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6316:	ea4c 0404 	orr.w	r4, ip, r4
    631a:	d90e      	bls.n	633a <mpu_configure_regions+0x96>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    631c:	4810      	ldr	r0, [pc, #64]	; (6360 <mpu_configure_regions+0xbc>)
    631e:	6803      	ldr	r3, [r0, #0]
    6320:	075b      	lsls	r3, r3, #29
    6322:	d106      	bne.n	6332 <mpu_configure_regions+0x8e>
			return -EINVAL;
    6324:	f06f 0215 	mvn.w	r2, #21
    6328:	e7c2      	b.n	62b0 <mpu_configure_regions+0xc>
		return REGION_32B;
    632a:	2408      	movs	r4, #8
    632c:	e7f2      	b.n	6314 <mpu_configure_regions+0x70>
		return REGION_4G;
    632e:	243e      	movs	r4, #62	; 0x3e
    6330:	e7f0      	b.n	6314 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6332:	4b0d      	ldr	r3, [pc, #52]	; (6368 <mpu_configure_regions+0xc4>)
    6334:	e9cd 3206 	strd	r3, r2, [sp, #24]
    6338:	e7cd      	b.n	62d6 <mpu_configure_regions+0x32>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    633a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    633e:	4315      	orrs	r5, r2
    6340:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6344:	f044 0401 	orr.w	r4, r4, #1
    6348:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    634c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    6350:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6352:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    6356:	3601      	adds	r6, #1
    6358:	300c      	adds	r0, #12
    635a:	e7a7      	b.n	62ac <mpu_configure_regions+0x8>
    635c:	e000ed00 	.word	0xe000ed00
    6360:	20000264 	.word	0x20000264
    6364:	00011a99 	.word	0x00011a99
    6368:	00011abc 	.word	0x00011abc

0000636c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    636c:	4b04      	ldr	r3, [pc, #16]	; (6380 <arm_core_mpu_enable+0x14>)
    636e:	2205      	movs	r2, #5
    6370:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6374:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6378:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    637c:	4770      	bx	lr
    637e:	bf00      	nop
    6380:	e000ed00 	.word	0xe000ed00

00006384 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6384:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6388:	4b02      	ldr	r3, [pc, #8]	; (6394 <arm_core_mpu_disable+0x10>)
    638a:	2200      	movs	r2, #0
    638c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6390:	4770      	bx	lr
    6392:	bf00      	nop
    6394:	e000ed00 	.word	0xe000ed00

00006398 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6398:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    639a:	4c03      	ldr	r4, [pc, #12]	; (63a8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    639c:	2301      	movs	r3, #1
    639e:	7822      	ldrb	r2, [r4, #0]
    63a0:	f7ff ff80 	bl	62a4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    63a4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    63a6:	bd10      	pop	{r4, pc}
    63a8:	200021ff 	.word	0x200021ff

000063ac <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    63ac:	4914      	ldr	r1, [pc, #80]	; (6400 <z_arm_mpu_init+0x54>)
    63ae:	6808      	ldr	r0, [r1, #0]
    63b0:	2808      	cmp	r0, #8
{
    63b2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    63b4:	d821      	bhi.n	63fa <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    63b6:	f7ff ffe5 	bl	6384 <arm_core_mpu_disable>
    63ba:	4c12      	ldr	r4, [pc, #72]	; (6404 <z_arm_mpu_init+0x58>)
    63bc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    63be:	2200      	movs	r2, #0
    63c0:	4290      	cmp	r0, r2
    63c2:	f101 010c 	add.w	r1, r1, #12
    63c6:	d105      	bne.n	63d4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    63c8:	4b0f      	ldr	r3, [pc, #60]	; (6408 <z_arm_mpu_init+0x5c>)
    63ca:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    63cc:	f7ff ffce 	bl	636c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    63d0:	2000      	movs	r0, #0
}
    63d2:	bd10      	pop	{r4, pc}
    63d4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    63d8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    63dc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    63e0:	4313      	orrs	r3, r2
    63e2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    63e6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    63ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
    63ee:	f043 0301 	orr.w	r3, r3, #1
    63f2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    63f6:	3201      	adds	r2, #1
    63f8:	e7e2      	b.n	63c0 <z_arm_mpu_init+0x14>
		return -1;
    63fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    63fe:	e7e8      	b.n	63d2 <z_arm_mpu_init+0x26>
    6400:	0000fe78 	.word	0x0000fe78
    6404:	e000ed00 	.word	0xe000ed00
    6408:	200021ff 	.word	0x200021ff

0000640c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    640c:	4b01      	ldr	r3, [pc, #4]	; (6414 <__stdout_hook_install+0x8>)
    640e:	6018      	str	r0, [r3, #0]
}
    6410:	4770      	bx	lr
    6412:	bf00      	nop
    6414:	20000154 	.word	0x20000154

00006418 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    6418:	b40c      	push	{r2, r3}
    641a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    641c:	b909      	cbnz	r1, 6422 <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    641e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    6422:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    6426:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    6428:	9a06      	ldr	r2, [sp, #24]
    642a:	4806      	ldr	r0, [pc, #24]	; (6444 <snprintf+0x2c>)
	va_start(vargs, format);
    642c:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    642e:	a902      	add	r1, sp, #8
    6430:	f7fa fb82 	bl	b38 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    6434:	9b02      	ldr	r3, [sp, #8]
    6436:	2200      	movs	r2, #0
    6438:	701a      	strb	r2, [r3, #0]
	return r;
}
    643a:	b005      	add	sp, #20
    643c:	f85d eb04 	ldr.w	lr, [sp], #4
    6440:	b002      	add	sp, #8
    6442:	4770      	bx	lr
    6444:	0000e103 	.word	0x0000e103

00006448 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    6448:	f04f 0320 	mov.w	r3, #32
    644c:	f3ef 8211 	mrs	r2, BASEPRI
    6450:	f383 8812 	msr	BASEPRI_MAX, r3
    6454:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6458:	4906      	ldr	r1, [pc, #24]	; (6474 <nordicsemi_nrf52_init+0x2c>)
    645a:	2301      	movs	r3, #1
    645c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6460:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6464:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    6468:	f382 8811 	msr	BASEPRI, r2
    646c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6470:	2000      	movs	r0, #0
    6472:	4770      	bx	lr
    6474:	4001e000 	.word	0x4001e000

00006478 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6478:	b120      	cbz	r0, 6484 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    647a:	4b03      	ldr	r3, [pc, #12]	; (6488 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    647c:	0180      	lsls	r0, r0, #6
    647e:	f043 0301 	orr.w	r3, r3, #1
    6482:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6484:	4770      	bx	lr
    6486:	bf00      	nop
    6488:	0000f840 	.word	0x0000f840

0000648c <board_particle_argon_init>:
			      ? GPIO_OUTPUT_INACTIVE
			      : GPIO_OUTPUT_ACTIVE));
}

static int board_particle_argon_init(const struct device *dev)
{
    648c:	b538      	push	{r3, r4, r5, lr}
    648e:	480c      	ldr	r0, [pc, #48]	; (64c0 <board_particle_argon_init+0x34>)
    6490:	f003 fe30 	bl	a0f4 <z_impl_device_get_binding>
	if (!ufl_gpio_dev) {
    6494:	4605      	mov	r5, r0
    6496:	b180      	cbz	r0, 64ba <board_particle_argon_init+0x2e>
    6498:	4809      	ldr	r0, [pc, #36]	; (64c0 <board_particle_argon_init+0x34>)
    649a:	f003 fe2b 	bl	a0f4 <z_impl_device_get_binding>
	if (!pcb_gpio_dev) {
    649e:	4604      	mov	r4, r0
    64a0:	b158      	cbz	r0, 64ba <board_particle_argon_init+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    64a2:	f241 6201 	movw	r2, #5633	; 0x1601
    64a6:	2119      	movs	r1, #25
    64a8:	4628      	mov	r0, r5
    64aa:	f007 fe55 	bl	e158 <z_impl_gpio_pin_configure.isra.0>
    64ae:	f641 2201 	movw	r2, #6657	; 0x1a01
    64b2:	2102      	movs	r1, #2
    64b4:	4620      	mov	r0, r4
    64b6:	f007 fe4f 	bl	e158 <z_impl_gpio_pin_configure.isra.0>
	 * antenna.
	 */
	external_antenna(false);

	return 0;
}
    64ba:	2000      	movs	r0, #0
    64bc:	bd38      	pop	{r3, r4, r5, pc}
    64be:	bf00      	nop
    64c0:	00011af5 	.word	0x00011af5

000064c4 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    64c4:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    64c8:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    64ca:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    64cc:	d004      	beq.n	64d8 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    64ce:	f010 0f78 	tst.w	r0, #120	; 0x78
    64d2:	d001      	beq.n	64d8 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    64d4:	2000      	movs	r0, #0
    64d6:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    64d8:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    64da:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    64de:	f000 0008 	and.w	r0, r0, #8
    64e2:	da05      	bge.n	64f0 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    64e4:	b958      	cbnz	r0, 64fe <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    64e6:	4808      	ldr	r0, [pc, #32]	; (6508 <endpoint_ctx+0x44>)
    64e8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    64ec:	304c      	adds	r0, #76	; 0x4c
    64ee:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    64f0:	b938      	cbnz	r0, 6502 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    64f2:	4805      	ldr	r0, [pc, #20]	; (6508 <endpoint_ctx+0x44>)
    64f4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    64f8:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    64fc:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    64fe:	4803      	ldr	r0, [pc, #12]	; (650c <endpoint_ctx+0x48>)
    6500:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    6502:	4803      	ldr	r0, [pc, #12]	; (6510 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    6504:	4770      	bx	lr
    6506:	bf00      	nop
    6508:	20001c0c 	.word	0x20001c0c
    650c:	20001d58 	.word	0x20001d58
    6510:	20001e78 	.word	0x20001e78

00006514 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    6514:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    6516:	4801      	ldr	r0, [pc, #4]	; (651c <usbd_evt_put+0x8>)
    6518:	f008 bbaf 	b.w	ec7a <k_queue_append>
    651c:	20000310 	.word	0x20000310

00006520 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6520:	4901      	ldr	r1, [pc, #4]	; (6528 <usbd_work_schedule+0x8>)
    6522:	4802      	ldr	r0, [pc, #8]	; (652c <usbd_work_schedule+0xc>)
    6524:	f008 bbdf 	b.w	ece6 <k_work_submit_to_queue>
    6528:	20001c34 	.word	0x20001c34
    652c:	20000c90 	.word	0x20000c90

00006530 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    6530:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    6532:	480b      	ldr	r0, [pc, #44]	; (6560 <usb_init+0x30>)
    6534:	f002 fd5e 	bl	8ff4 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    6538:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    653a:	480a      	ldr	r0, [pc, #40]	; (6564 <usb_init+0x34>)
    653c:	f002 fda0 	bl	9080 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    6540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6544:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6548:	4907      	ldr	r1, [pc, #28]	; (6568 <usb_init+0x38>)
    654a:	4808      	ldr	r0, [pc, #32]	; (656c <usb_init+0x3c>)
    654c:	9400      	str	r4, [sp, #0]
    654e:	f004 fb57 	bl	ac00 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    6552:	4907      	ldr	r1, [pc, #28]	; (6570 <usb_init+0x40>)
    6554:	4807      	ldr	r0, [pc, #28]	; (6574 <usb_init+0x44>)
    6556:	f008 fbbd 	bl	ecd4 <k_work_init>

	return 0;
}
    655a:	4620      	mov	r0, r4
    655c:	b002      	add	sp, #8
    655e:	bd10      	pop	{r4, pc}
    6560:	00011d0d 	.word	0x00011d0d
    6564:	0000fe98 	.word	0x0000fe98
    6568:	20003148 	.word	0x20003148
    656c:	20000c90 	.word	0x20000c90
    6570:	00006999 	.word	0x00006999
    6574:	20001c34 	.word	0x20001c34

00006578 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    6578:	4802      	ldr	r0, [pc, #8]	; (6584 <usbd_evt_get+0xc>)
    657a:	2200      	movs	r2, #0
    657c:	2300      	movs	r3, #0
    657e:	f004 b9d7 	b.w	a930 <z_impl_k_queue_get>
    6582:	bf00      	nop
    6584:	20000310 	.word	0x20000310

00006588 <usbd_evt_flush>:
{
    6588:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    658a:	4c05      	ldr	r4, [pc, #20]	; (65a0 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    658c:	f7ff fff4 	bl	6578 <usbd_evt_get>
		if (ev) {
    6590:	b120      	cbz	r0, 659c <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6592:	1d01      	adds	r1, r0, #4
    6594:	4620      	mov	r0, r4
    6596:	f008 faa4 	bl	eae2 <k_mem_slab_free>
	} while (ev != NULL);
    659a:	e7f7      	b.n	658c <usbd_evt_flush+0x4>
}
    659c:	bd10      	pop	{r4, pc}
    659e:	bf00      	nop
    65a0:	20000298 	.word	0x20000298

000065a4 <usbd_evt_alloc>:
{
    65a4:	b510      	push	{r4, lr}
    65a6:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
    65a8:	481e      	ldr	r0, [pc, #120]	; (6624 <usbd_evt_alloc+0x80>)
    65aa:	2200      	movs	r2, #0
    65ac:	2300      	movs	r3, #0
    65ae:	4669      	mov	r1, sp
    65b0:	f003 ff4e 	bl	a450 <k_mem_slab_alloc>
    65b4:	2800      	cmp	r0, #0
    65b6:	d030      	beq.n	661a <usbd_evt_alloc+0x76>
		LOG_ERR("USBD event allocation failed!");
    65b8:	4c1b      	ldr	r4, [pc, #108]	; (6628 <usbd_evt_alloc+0x84>)
    65ba:	6823      	ldr	r3, [r4, #0]
    65bc:	075a      	lsls	r2, r3, #29
    65be:	d00a      	beq.n	65d6 <usbd_evt_alloc+0x32>
    65c0:	4b1a      	ldr	r3, [pc, #104]	; (662c <usbd_evt_alloc+0x88>)
    65c2:	9306      	str	r3, [sp, #24]
    65c4:	aa05      	add	r2, sp, #20
    65c6:	2302      	movs	r3, #2
    65c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65cc:	4620      	mov	r0, r4
    65ce:	9301      	str	r3, [sp, #4]
    65d0:	9305      	str	r3, [sp, #20]
    65d2:	f007 fde9 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
    65d6:	f7ff ffd7 	bl	6588 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    65da:	4812      	ldr	r0, [pc, #72]	; (6624 <usbd_evt_alloc+0x80>)
    65dc:	2200      	movs	r2, #0
    65de:	2300      	movs	r3, #0
    65e0:	4669      	mov	r1, sp
    65e2:	f003 ff35 	bl	a450 <k_mem_slab_alloc>
    65e6:	b178      	cbz	r0, 6608 <usbd_evt_alloc+0x64>
			LOG_ERR("USBD event memory corrupted");
    65e8:	6823      	ldr	r3, [r4, #0]
    65ea:	075b      	lsls	r3, r3, #29
    65ec:	d00a      	beq.n	6604 <usbd_evt_alloc+0x60>
    65ee:	4b10      	ldr	r3, [pc, #64]	; (6630 <usbd_evt_alloc+0x8c>)
    65f0:	9306      	str	r3, [sp, #24]
    65f2:	480d      	ldr	r0, [pc, #52]	; (6628 <usbd_evt_alloc+0x84>)
    65f4:	2302      	movs	r3, #2
    65f6:	aa05      	add	r2, sp, #20
    65f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65fc:	9301      	str	r3, [sp, #4]
    65fe:	9305      	str	r3, [sp, #20]
    6600:	f007 fdd2 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
			return NULL;
    6604:	2000      	movs	r0, #0
    6606:	e00a      	b.n	661e <usbd_evt_alloc+0x7a>
		ev = (struct usbd_event *)block.data;
    6608:	9800      	ldr	r0, [sp, #0]
		ev->evt_type = USBD_EVT_REINIT;
    660a:	2304      	movs	r3, #4
		ev->block = block;
    660c:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    660e:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    6610:	f7ff ff80 	bl	6514 <usbd_evt_put>
		usbd_work_schedule();
    6614:	f7ff ff84 	bl	6520 <usbd_work_schedule>
		return NULL;
    6618:	e7f4      	b.n	6604 <usbd_evt_alloc+0x60>
	ev = (struct usbd_event *)block.data;
    661a:	9800      	ldr	r0, [sp, #0]
	ev->block = block;
    661c:	6040      	str	r0, [r0, #4]
}
    661e:	b008      	add	sp, #32
    6620:	bd10      	pop	{r4, pc}
    6622:	bf00      	nop
    6624:	20000298 	.word	0x20000298
    6628:	20000290 	.word	0x20000290
    662c:	00011afc 	.word	0x00011afc
    6630:	00011b1a 	.word	0x00011b1a

00006634 <usbd_event_transfer_data>:
{
    6634:	b5f0      	push	{r4, r5, r6, r7, lr}
    6636:	b083      	sub	sp, #12
		endpoint_ctx(p_event->data.eptransfer.ep);
    6638:	7881      	ldrb	r1, [r0, #2]
{
    663a:	4606      	mov	r6, r0
    663c:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    663e:	4608      	mov	r0, r1
    6640:	f7ff ff40 	bl	64c4 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    6644:	060a      	lsls	r2, r1, #24
		switch (p_event->data.eptransfer.status) {
    6646:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    6648:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    664a:	d528      	bpl.n	669e <usbd_event_transfer_data+0x6a>
		switch (p_event->data.eptransfer.status) {
    664c:	b1b4      	cbz	r4, 667c <usbd_event_transfer_data+0x48>
    664e:	2c03      	cmp	r4, #3
    6650:	d022      	beq.n	6698 <usbd_event_transfer_data+0x64>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    6652:	482d      	ldr	r0, [pc, #180]	; (6708 <usbd_event_transfer_data+0xd4>)
    6654:	6803      	ldr	r3, [r0, #0]
    6656:	075b      	lsls	r3, r3, #29
    6658:	d01e      	beq.n	6698 <usbd_event_transfer_data+0x64>
    665a:	4b2c      	ldr	r3, [pc, #176]	; (670c <usbd_event_transfer_data+0xd8>)
    665c:	466d      	mov	r5, sp
    665e:	b088      	sub	sp, #32
    6660:	466a      	mov	r2, sp
    6662:	e9c2 3404 	strd	r3, r4, [r2, #16]
    6666:	2304      	movs	r3, #4
    6668:	6191      	str	r1, [r2, #24]
    666a:	607b      	str	r3, [r7, #4]
    666c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    6670:	f842 3f0c 	str.w	r3, [r2, #12]!
    6674:	f007 fd98 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
    6678:	46ad      	mov	sp, r5
    667a:	e00d      	b.n	6698 <usbd_event_transfer_data+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    667c:	f7ff ff92 	bl	65a4 <usbd_evt_alloc>
			if (!ev) {
    6680:	4603      	mov	r3, r0
    6682:	b148      	cbz	r0, 6698 <usbd_event_transfer_data+0x64>
			ev->evt_type = USBD_EVT_EP;
    6684:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    6686:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    6688:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    668a:	2203      	movs	r2, #3
    668c:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    668e:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    6690:	f7ff ff40 	bl	6514 <usbd_evt_put>
			usbd_work_schedule();
    6694:	f7ff ff44 	bl	6520 <usbd_work_schedule>
}
    6698:	370c      	adds	r7, #12
    669a:	46bd      	mov	sp, r7
    669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
    669e:	b154      	cbz	r4, 66b6 <usbd_event_transfer_data+0x82>
    66a0:	2c01      	cmp	r4, #1
    66a2:	d1d6      	bne.n	6652 <usbd_event_transfer_data+0x1e>
			struct usbd_event *ev = usbd_evt_alloc();
    66a4:	f7ff ff7e 	bl	65a4 <usbd_evt_alloc>
			if (!ev) {
    66a8:	4603      	mov	r3, r0
    66aa:	2800      	cmp	r0, #0
    66ac:	d0f4      	beq.n	6698 <usbd_event_transfer_data+0x64>
			ep_ctx->read_pending = true;
    66ae:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    66b0:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    66b2:	7304      	strb	r4, [r0, #12]
    66b4:	e7eb      	b.n	668e <usbd_event_transfer_data+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
    66b6:	f7ff ff75 	bl	65a4 <usbd_evt_alloc>
			if (!ev) {
    66ba:	2800      	cmp	r0, #0
    66bc:	d0ec      	beq.n	6698 <usbd_event_transfer_data+0x64>
				p_event->data.eptransfer.ep);
    66be:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    66c0:	4b13      	ldr	r3, [pc, #76]	; (6710 <usbd_event_transfer_data+0xdc>)
    66c2:	f012 0f80 	tst.w	r2, #128	; 0x80
    66c6:	f002 0108 	and.w	r1, r2, #8
    66ca:	d011      	beq.n	66f0 <usbd_event_transfer_data+0xbc>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    66cc:	b141      	cbz	r1, 66e0 <usbd_event_transfer_data+0xac>
        {
            ret = p_reg->ISOIN.AMOUNT;
    66ce:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    66d2:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    66d4:	2301      	movs	r3, #1
    66d6:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    66d8:	2302      	movs	r3, #2
    66da:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    66dc:	6085      	str	r5, [r0, #8]
			usbd_evt_put(ev);
    66de:	e7d7      	b.n	6690 <usbd_event_transfer_data+0x5c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    66e0:	f002 020f 	and.w	r2, r2, #15
    66e4:	2114      	movs	r1, #20
    66e6:	fb01 3302 	mla	r3, r1, r2, r3
    66ea:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    66ee:	e7f0      	b.n	66d2 <usbd_event_transfer_data+0x9e>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    66f0:	b111      	cbz	r1, 66f8 <usbd_event_transfer_data+0xc4>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    66f2:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    66f6:	e7ec      	b.n	66d2 <usbd_event_transfer_data+0x9e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    66f8:	f002 020f 	and.w	r2, r2, #15
    66fc:	2114      	movs	r1, #20
    66fe:	fb01 3302 	mla	r3, r1, r2, r3
    6702:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    6706:	e7e4      	b.n	66d2 <usbd_event_transfer_data+0x9e>
    6708:	20000290 	.word	0x20000290
    670c:	00011b36 	.word	0x00011b36
    6710:	40027000 	.word	0x40027000

00006714 <usb_dc_power_event_handler>:
{
    6714:	b510      	push	{r4, lr}
    6716:	2802      	cmp	r0, #2
    6718:	b088      	sub	sp, #32
    671a:	4603      	mov	r3, r0
    671c:	d812      	bhi.n	6744 <usb_dc_power_event_handler+0x30>
    671e:	4a12      	ldr	r2, [pc, #72]	; (6768 <usb_dc_power_event_handler+0x54>)
    6720:	5c14      	ldrb	r4, [r2, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    6722:	f7ff ff3f 	bl	65a4 <usbd_evt_alloc>
	if (!ev) {
    6726:	b1e0      	cbz	r0, 6762 <usb_dc_power_event_handler+0x4e>
	ev->evt_type = USBD_EVT_POWER;
    6728:	2200      	movs	r2, #0
    672a:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    672c:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    672e:	f7ff fef1 	bl	6514 <usbd_evt_put>
	if (usbd_ctx.attached) {
    6732:	4b0e      	ldr	r3, [pc, #56]	; (676c <usb_dc_power_event_handler+0x58>)
    6734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6738:	b19b      	cbz	r3, 6762 <usb_dc_power_event_handler+0x4e>
}
    673a:	b008      	add	sp, #32
    673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    6740:	f7ff beee 	b.w	6520 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
    6744:	480a      	ldr	r0, [pc, #40]	; (6770 <usb_dc_power_event_handler+0x5c>)
    6746:	6802      	ldr	r2, [r0, #0]
    6748:	0752      	lsls	r2, r2, #29
    674a:	d00a      	beq.n	6762 <usb_dc_power_event_handler+0x4e>
    674c:	4a09      	ldr	r2, [pc, #36]	; (6774 <usb_dc_power_event_handler+0x60>)
    674e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (event) {
    6752:	e9cd 2306 	strd	r2, r3, [sp, #24]
		LOG_ERR("Unknown USB power event %d", event);
    6756:	2303      	movs	r3, #3
    6758:	aa05      	add	r2, sp, #20
    675a:	9301      	str	r3, [sp, #4]
    675c:	9305      	str	r3, [sp, #20]
    675e:	f007 fd23 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
}
    6762:	b008      	add	sp, #32
    6764:	bd10      	pop	{r4, pc}
    6766:	bf00      	nop
    6768:	00011d0a 	.word	0x00011d0a
    676c:	20001c0c 	.word	0x20001c0c
    6770:	20000290 	.word	0x20000290
    6774:	00011b62 	.word	0x00011b62

00006778 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    6778:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    677a:	490f      	ldr	r1, [pc, #60]	; (67b8 <hfxo_stop.constprop.0.isra.0+0x40>)
    677c:	f3bf 8f5b 	dmb	ish
    6780:	f101 0320 	add.w	r3, r1, #32
    6784:	2200      	movs	r2, #0
    6786:	e853 0f00 	ldrex	r0, [r3]
    678a:	2801      	cmp	r0, #1
    678c:	d103      	bne.n	6796 <hfxo_stop.constprop.0.isra.0+0x1e>
    678e:	e843 2400 	strex	r4, r2, [r3]
    6792:	2c00      	cmp	r4, #0
    6794:	d1f7      	bne.n	6786 <hfxo_stop.constprop.0.isra.0+0xe>
    6796:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    679a:	d10b      	bne.n	67b4 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    679c:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    679e:	310c      	adds	r1, #12
    67a0:	4620      	mov	r0, r4
    67a2:	f005 fa0d 	bl	bbc0 <onoff_cancel>

	if (rv == -EALREADY) {
    67a6:	3078      	adds	r0, #120	; 0x78
    67a8:	d104      	bne.n	67b4 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
    67aa:	4620      	mov	r0, r4
}
    67ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67b0:	f005 b9e1 	b.w	bb76 <onoff_release>
    67b4:	bd10      	pop	{r4, pc}
    67b6:	bf00      	nop
    67b8:	20001c0c 	.word	0x20001c0c

000067bc <usbd_event_handler>:
{
    67bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    67be:	b08d      	sub	sp, #52	; 0x34
    67c0:	4606      	mov	r6, r0
    67c2:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    67c4:	2214      	movs	r2, #20
    67c6:	2100      	movs	r1, #0
    67c8:	1d38      	adds	r0, r7, #4
    67ca:	f007 fc8e 	bl	e0ea <memset>
	switch (p_event->type) {
    67ce:	7833      	ldrb	r3, [r6, #0]
    67d0:	3b01      	subs	r3, #1
    67d2:	2b05      	cmp	r3, #5
    67d4:	d820      	bhi.n	6818 <usbd_event_handler+0x5c>
    67d6:	e8df f003 	tbb	[pc, r3]
    67da:	039e      	.short	0x039e
    67dc:	158f1313 	.word	0x158f1313
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    67e0:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    67e2:	733b      	strb	r3, [r7, #12]
		evt.evt_type = USBD_EVT_POWER;
    67e4:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    67e6:	f7ff fedd 	bl	65a4 <usbd_evt_alloc>
		if (!ev) {
    67ea:	4603      	mov	r3, r0
    67ec:	b1a0      	cbz	r0, 6818 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    67ee:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    67f0:	f100 0208 	add.w	r2, r0, #8
    67f4:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    67f8:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    67fc:	4618      	mov	r0, r3
    67fe:	e034      	b.n	686a <usbd_event_handler+0xae>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    6800:	2304      	movs	r3, #4
    6802:	e7ee      	b.n	67e2 <usbd_event_handler+0x26>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    6804:	78b1      	ldrb	r1, [r6, #2]
    6806:	4608      	mov	r0, r1
    6808:	f7ff fe5c 	bl	64c4 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    680c:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    680e:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    6810:	b12b      	cbz	r3, 681e <usbd_event_handler+0x62>
    6812:	3b01      	subs	r3, #1
    6814:	2b02      	cmp	r3, #2
    6816:	d96b      	bls.n	68f0 <usbd_event_handler+0x134>
}
    6818:	3734      	adds	r7, #52	; 0x34
    681a:	46bd      	mov	sp, r7
    681c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    681e:	0608      	lsls	r0, r1, #24
		switch (p_event->data.eptransfer.status) {
    6820:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    6822:	d527      	bpl.n	6874 <usbd_event_handler+0xb8>
		switch (p_event->data.eptransfer.status) {
    6824:	b1b4      	cbz	r4, 6854 <usbd_event_handler+0x98>
    6826:	2c03      	cmp	r4, #3
    6828:	d0f6      	beq.n	6818 <usbd_event_handler+0x5c>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    682a:	483c      	ldr	r0, [pc, #240]	; (691c <usbd_event_handler+0x160>)
    682c:	6803      	ldr	r3, [r0, #0]
    682e:	075b      	lsls	r3, r3, #29
    6830:	d0f2      	beq.n	6818 <usbd_event_handler+0x5c>
    6832:	4b3b      	ldr	r3, [pc, #236]	; (6920 <usbd_event_handler+0x164>)
    6834:	466d      	mov	r5, sp
    6836:	b088      	sub	sp, #32
    6838:	466a      	mov	r2, sp
    683a:	e9c2 3404 	strd	r3, r4, [r2, #16]
    683e:	2304      	movs	r3, #4
    6840:	6191      	str	r1, [r2, #24]
    6842:	61bb      	str	r3, [r7, #24]
    6844:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    6848:	f842 3f0c 	str.w	r3, [r2, #12]!
    684c:	f007 fcac 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
    6850:	46ad      	mov	sp, r5
    6852:	e7e1      	b.n	6818 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    6854:	f7ff fea6 	bl	65a4 <usbd_evt_alloc>
			if (!ev) {
    6858:	4603      	mov	r3, r0
    685a:	2800      	cmp	r0, #0
    685c:	d0dc      	beq.n	6818 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    685e:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    6860:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    6862:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    6864:	2203      	movs	r2, #3
    6866:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6868:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    686a:	f7ff fe53 	bl	6514 <usbd_evt_put>
		usbd_work_schedule();
    686e:	f7ff fe57 	bl	6520 <usbd_work_schedule>
    6872:	e7d1      	b.n	6818 <usbd_event_handler+0x5c>
		switch (p_event->data.eptransfer.status) {
    6874:	b154      	cbz	r4, 688c <usbd_event_handler+0xd0>
    6876:	2c01      	cmp	r4, #1
    6878:	d1d7      	bne.n	682a <usbd_event_handler+0x6e>
			struct usbd_event *ev = usbd_evt_alloc();
    687a:	f7ff fe93 	bl	65a4 <usbd_evt_alloc>
			if (!ev) {
    687e:	4603      	mov	r3, r0
    6880:	2800      	cmp	r0, #0
    6882:	d0c9      	beq.n	6818 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    6884:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    6886:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6888:	7304      	strb	r4, [r0, #12]
    688a:	e7ed      	b.n	6868 <usbd_event_handler+0xac>
			struct usbd_event *ev = usbd_evt_alloc();
    688c:	f7ff fe8a 	bl	65a4 <usbd_evt_alloc>
			if (!ev) {
    6890:	4604      	mov	r4, r0
    6892:	2800      	cmp	r0, #0
    6894:	d0c0      	beq.n	6818 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    6896:	2301      	movs	r3, #1
    6898:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    689a:	2302      	movs	r3, #2
    689c:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    689e:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    68a0:	f105 010c 	add.w	r1, r5, #12
    68a4:	78b0      	ldrb	r0, [r6, #2]
    68a6:	f008 f8b3 	bl	ea10 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    68aa:	4603      	mov	r3, r0
    68ac:	b178      	cbz	r0, 68ce <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
    68ae:	481b      	ldr	r0, [pc, #108]	; (691c <usbd_event_handler+0x160>)
    68b0:	6802      	ldr	r2, [r0, #0]
    68b2:	0752      	lsls	r2, r2, #29
    68b4:	d00b      	beq.n	68ce <usbd_event_handler+0x112>
    68b6:	4a1b      	ldr	r2, [pc, #108]	; (6924 <usbd_event_handler+0x168>)
    68b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    68bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    68c0:	2303      	movs	r3, #3
    68c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
    68c6:	603b      	str	r3, [r7, #0]
    68c8:	627b      	str	r3, [r7, #36]	; 0x24
    68ca:	f007 fc6d 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    68ce:	4a16      	ldr	r2, [pc, #88]	; (6928 <usbd_event_handler+0x16c>)
    68d0:	68e9      	ldr	r1, [r5, #12]
    68d2:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    68d6:	428b      	cmp	r3, r1
    68d8:	d906      	bls.n	68e8 <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    68da:	1a5b      	subs	r3, r3, r1
    68dc:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    68e0:	f003 f92e 	bl	9b40 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    68e4:	4620      	mov	r0, r4
    68e6:	e7c0      	b.n	686a <usbd_event_handler+0xae>
				ctx->ctrl_read_len = 0U;
    68e8:	2300      	movs	r3, #0
    68ea:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    68ee:	e7f9      	b.n	68e4 <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
    68f0:	4630      	mov	r0, r6
    68f2:	f7ff fe9f 	bl	6634 <usbd_event_transfer_data>
	if (put_evt) {
    68f6:	e78f      	b.n	6818 <usbd_event_handler+0x5c>
		nrfx_usbd_setup_get(&drv_setup);
    68f8:	f107 0018 	add.w	r0, r7, #24
    68fc:	f003 f8fa 	bl	9af4 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    6900:	7e7b      	ldrb	r3, [r7, #25]
    6902:	2b05      	cmp	r3, #5
    6904:	d103      	bne.n	690e <usbd_event_handler+0x152>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    6906:	7e3b      	ldrb	r3, [r7, #24]
    6908:	f013 0f60 	tst.w	r3, #96	; 0x60
    690c:	d084      	beq.n	6818 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    690e:	4b07      	ldr	r3, [pc, #28]	; (692c <usbd_event_handler+0x170>)
    6910:	60fb      	str	r3, [r7, #12]
			evt.evt_type = USBD_EVT_EP;
    6912:	2401      	movs	r4, #1
    6914:	e767      	b.n	67e6 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    6916:	2402      	movs	r4, #2
    6918:	e765      	b.n	67e6 <usbd_event_handler+0x2a>
    691a:	bf00      	nop
    691c:	20000290 	.word	0x20000290
    6920:	00011b36 	.word	0x00011b36
    6924:	00011b7d 	.word	0x00011b7d
    6928:	20001c0c 	.word	0x20001c0c
    692c:	20001d78 	.word	0x20001d78

00006930 <eps_ctx_init>:
{
    6930:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6932:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    6934:	f064 007f 	orn	r0, r4, #127	; 0x7f
    6938:	b2c0      	uxtb	r0, r0
    693a:	f7ff fdc3 	bl	64c4 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    693e:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    6940:	f007 fc1f 	bl	e182 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6944:	2c08      	cmp	r4, #8
    6946:	d1f5      	bne.n	6934 <eps_ctx_init+0x4>
    6948:	4d0f      	ldr	r5, [pc, #60]	; (6988 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    694a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    694c:	b2e0      	uxtb	r0, r4
    694e:	f7ff fdb9 	bl	64c4 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    6952:	6903      	ldr	r3, [r0, #16]
    6954:	b903      	cbnz	r3, 6958 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    6956:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6958:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    695a:	f007 fc12 	bl	e182 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    695e:	2c08      	cmp	r4, #8
    6960:	f105 0540 	add.w	r5, r5, #64	; 0x40
    6964:	d1f2      	bne.n	694c <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    6966:	4c09      	ldr	r4, [pc, #36]	; (698c <eps_ctx_init+0x5c>)
    6968:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    696c:	f007 fc09 	bl	e182 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    6970:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    6974:	b913      	cbnz	r3, 697c <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    6976:	4b06      	ldr	r3, [pc, #24]	; (6990 <eps_ctx_init+0x60>)
    6978:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    697c:	4805      	ldr	r0, [pc, #20]	; (6994 <eps_ctx_init+0x64>)
    697e:	f007 fc00 	bl	e182 <ep_ctx_reset>
}
    6982:	2000      	movs	r0, #0
    6984:	bd38      	pop	{r3, r4, r5, pc}
    6986:	bf00      	nop
    6988:	20001a0c 	.word	0x20001a0c
    698c:	20001c0c 	.word	0x20001c0c
    6990:	2000160c 	.word	0x2000160c
    6994:	20001e78 	.word	0x20001e78

00006998 <usbd_work_handler>:
{
    6998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    699c:	4ca3      	ldr	r4, [pc, #652]	; (6c2c <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    699e:	f8df 8290 	ldr.w	r8, [pc, #656]	; 6c30 <usbd_work_handler+0x298>
{
    69a2:	b08b      	sub	sp, #44	; 0x2c
    69a4:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    69a6:	f7ff fde7 	bl	6578 <usbd_evt_get>
    69aa:	4606      	mov	r6, r0
    69ac:	b910      	cbnz	r0, 69b4 <usbd_work_handler+0x1c>
}
    69ae:	b00b      	add	sp, #44	; 0x2c
    69b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    69b4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    69b8:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    69ba:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    69be:	b93a      	cbnz	r2, 69d0 <usbd_work_handler+0x38>
    69c0:	2b00      	cmp	r3, #0
    69c2:	f000 80ae 	beq.w	6b22 <usbd_work_handler+0x18a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    69c6:	4649      	mov	r1, r9
    69c8:	4640      	mov	r0, r8
    69ca:	f008 f88a 	bl	eae2 <k_mem_slab_free>
}
    69ce:	e7ea      	b.n	69a6 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    69d0:	2b04      	cmp	r3, #4
    69d2:	f200 819d 	bhi.w	6d10 <usbd_work_handler+0x378>
    69d6:	e8df f013 	tbh	[pc, r3, lsl #1]
    69da:	00a4      	.short	0x00a4
    69dc:	013d0005 	.word	0x013d0005
    69e0:	017d0153 	.word	0x017d0153
			if (!ctx->attached) {
    69e4:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    69e8:	b983      	cbnz	r3, 6a0c <usbd_work_handler+0x74>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    69ea:	4892      	ldr	r0, [pc, #584]	; (6c34 <usbd_work_handler+0x29c>)
    69ec:	6803      	ldr	r3, [r0, #0]
    69ee:	075b      	lsls	r3, r3, #29
    69f0:	d00c      	beq.n	6a0c <usbd_work_handler+0x74>
    69f2:	4b91      	ldr	r3, [pc, #580]	; (6c38 <usbd_work_handler+0x2a0>)
    69f4:	9308      	str	r3, [sp, #32]
    69f6:	68b3      	ldr	r3, [r6, #8]
    69f8:	7a5b      	ldrb	r3, [r3, #9]
    69fa:	9309      	str	r3, [sp, #36]	; 0x24
    69fc:	aa07      	add	r2, sp, #28
    69fe:	2303      	movs	r3, #3
    6a00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6a04:	9301      	str	r3, [sp, #4]
    6a06:	9307      	str	r3, [sp, #28]
    6a08:	f007 fbce 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
	switch (ep_evt->evt_type) {
    6a0c:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    6a0e:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    6a10:	2b03      	cmp	r3, #3
    6a12:	d8d8      	bhi.n	69c6 <usbd_work_handler+0x2e>
    6a14:	e8df f003 	tbb	[pc, r3]
    6a18:	726d3d02 	.word	0x726d3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    6a1c:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    6a1e:	2208      	movs	r2, #8
    6a20:	2100      	movs	r1, #0
    6a22:	4630      	mov	r0, r6
    6a24:	f007 fb61 	bl	e0ea <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    6a28:	4b84      	ldr	r3, [pc, #528]	; (6c3c <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    6a2a:	4885      	ldr	r0, [pc, #532]	; (6c40 <usbd_work_handler+0x2a8>)
    6a2c:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    6a30:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    6a32:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    6a36:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    6a38:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    6a3c:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    6a40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    6a44:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    6a46:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    6a4a:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    6a4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    6a52:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    6a54:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    6a58:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    6a5c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    6a60:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    6a62:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    6a64:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    6a66:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    6a68:	f007 fb34 	bl	e0d4 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    6a6c:	682b      	ldr	r3, [r5, #0]
    6a6e:	7a68      	ldrb	r0, [r5, #9]
    6a70:	2100      	movs	r1, #0
    6a72:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    6a74:	f996 3000 	ldrsb.w	r3, [r6]
    6a78:	2b00      	cmp	r3, #0
    6a7a:	db06      	blt.n	6a8a <usbd_work_handler+0xf2>
    6a7c:	88f3      	ldrh	r3, [r6, #6]
    6a7e:	b123      	cbz	r3, 6a8a <usbd_work_handler+0xf2>
		ctx->ctrl_read_len = usbd_setup->wLength;
    6a80:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    6a84:	f003 f85c 	bl	9b40 <nrfx_usbd_setup_data_clear>
    6a88:	e79d      	b.n	69c6 <usbd_work_handler+0x2e>
		ctx->ctrl_read_len = 0U;
    6a8a:	2300      	movs	r3, #0
    6a8c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    6a90:	e799      	b.n	69c6 <usbd_work_handler+0x2e>
	if (!ep_ctx->read_pending) {
    6a92:	7f6b      	ldrb	r3, [r5, #29]
    6a94:	2b00      	cmp	r3, #0
    6a96:	d096      	beq.n	69c6 <usbd_work_handler+0x2e>
	if (!ep_ctx->read_complete) {
    6a98:	7f2b      	ldrb	r3, [r5, #28]
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d093      	beq.n	69c6 <usbd_work_handler+0x2e>
	ep_ctx->read_pending = false;
    6a9e:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6aa4:	4867      	ldr	r0, [pc, #412]	; (6c44 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    6aa6:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
    6aac:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6aae:	f007 fb7e 	bl	e1ae <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    6ab2:	696b      	ldr	r3, [r5, #20]
    6ab4:	9301      	str	r3, [sp, #4]
    6ab6:	686b      	ldr	r3, [r5, #4]
    6ab8:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    6abc:	a901      	add	r1, sp, #4
    6abe:	7a68      	ldrb	r0, [r5, #9]
    6ac0:	f002 fe48 	bl	9754 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    6ac4:	4a60      	ldr	r2, [pc, #384]	; (6c48 <usbd_work_handler+0x2b0>)
    6ac6:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    6ac8:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
    6aca:	d00e      	beq.n	6aea <usbd_work_handler+0x152>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    6acc:	4859      	ldr	r0, [pc, #356]	; (6c34 <usbd_work_handler+0x29c>)
    6ace:	6802      	ldr	r2, [r0, #0]
    6ad0:	0756      	lsls	r6, r2, #29
    6ad2:	d00a      	beq.n	6aea <usbd_work_handler+0x152>
    6ad4:	4a5d      	ldr	r2, [pc, #372]	; (6c4c <usbd_work_handler+0x2b4>)
    6ad6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6ada:	e9cd 2308 	strd	r2, r3, [sp, #32]
    6ade:	2303      	movs	r3, #3
    6ae0:	aa07      	add	r2, sp, #28
    6ae2:	9300      	str	r3, [sp, #0]
    6ae4:	9307      	str	r3, [sp, #28]
    6ae6:	f007 fb5f 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
	k_mutex_unlock(&ctx->drv_lock);
    6aea:	4856      	ldr	r0, [pc, #344]	; (6c44 <usbd_work_handler+0x2ac>)
    6aec:	f007 fb61 	bl	e1b2 <k_mutex_unlock.isra.0>
    6af0:	e769      	b.n	69c6 <usbd_work_handler+0x2e>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6af2:	682b      	ldr	r3, [r5, #0]
    6af4:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6af6:	7a68      	ldrb	r0, [r5, #9]
    6af8:	4798      	blx	r3
		break;
    6afa:	e764      	b.n	69c6 <usbd_work_handler+0x2e>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    6afc:	7aab      	ldrb	r3, [r5, #10]
    6afe:	b96b      	cbnz	r3, 6b1c <usbd_work_handler+0x184>
    6b00:	7feb      	ldrb	r3, [r5, #31]
    6b02:	b95b      	cbnz	r3, 6b1c <usbd_work_handler+0x184>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6b04:	484f      	ldr	r0, [pc, #316]	; (6c44 <usbd_work_handler+0x2ac>)
    6b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b0e:	f007 fb4e 	bl	e1ae <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    6b12:	f003 f845 	bl	9ba0 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    6b16:	484b      	ldr	r0, [pc, #300]	; (6c44 <usbd_work_handler+0x2ac>)
    6b18:	f007 fb4b 	bl	e1b2 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    6b1c:	682b      	ldr	r3, [r5, #0]
    6b1e:	2102      	movs	r1, #2
    6b20:	e7e9      	b.n	6af6 <usbd_work_handler+0x15e>
	switch (pwr_evt->state) {
    6b22:	7a33      	ldrb	r3, [r6, #8]
    6b24:	2b04      	cmp	r3, #4
    6b26:	f63f af4e 	bhi.w	69c6 <usbd_work_handler+0x2e>
    6b2a:	e8df f003 	tbb	[pc, r3]
    6b2e:	035b      	.short	0x035b
    6b30:	6925      	.short	0x6925
    6b32:	75          	.byte	0x75
    6b33:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    6b34:	f002 fdbe 	bl	96b4 <nrfx_usbd_is_enabled>
    6b38:	4605      	mov	r5, r0
    6b3a:	2800      	cmp	r0, #0
    6b3c:	f47f af43 	bne.w	69c6 <usbd_work_handler+0x2e>
			nrfx_usbd_enable();
    6b40:	f002 fcfc 	bl	953c <nrfx_usbd_enable>
    6b44:	f3bf 8f5b 	dmb	ish
    6b48:	4941      	ldr	r1, [pc, #260]	; (6c50 <usbd_work_handler+0x2b8>)
    6b4a:	2301      	movs	r3, #1
    6b4c:	e851 2f00 	ldrex	r2, [r1]
    6b50:	2a00      	cmp	r2, #0
    6b52:	d103      	bne.n	6b5c <usbd_work_handler+0x1c4>
    6b54:	e841 3000 	strex	r0, r3, [r1]
    6b58:	2800      	cmp	r0, #0
    6b5a:	d1f7      	bne.n	6b4c <usbd_work_handler+0x1b4>
    6b5c:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    6b60:	f47f af31 	bne.w	69c6 <usbd_work_handler+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6b64:	f841 5c10 	str.w	r5, [r1, #-16]
    6b68:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    6b6c:	69e0      	ldr	r0, [r4, #28]
    6b6e:	6163      	str	r3, [r4, #20]
    6b70:	3914      	subs	r1, #20
    6b72:	f004 ffb7 	bl	bae4 <onoff_request>
    6b76:	e726      	b.n	69c6 <usbd_work_handler+0x2e>
	switch (pwr_evt->state) {
    6b78:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    6b7a:	f065 007f 	orn	r0, r5, #127	; 0x7f
    6b7e:	b2c0      	uxtb	r0, r0
    6b80:	f7ff fca0 	bl	64c4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    6b84:	7a03      	ldrb	r3, [r0, #8]
    6b86:	b113      	cbz	r3, 6b8e <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6b88:	7a40      	ldrb	r0, [r0, #9]
    6b8a:	f003 f9f5 	bl	9f78 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    6b8e:	3501      	adds	r5, #1
    6b90:	2d08      	cmp	r5, #8
    6b92:	d1f2      	bne.n	6b7a <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    6b94:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    6b98:	b11b      	cbz	r3, 6ba2 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6b9a:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    6b9e:	f003 f9eb 	bl	9f78 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    6ba2:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    6ba4:	b2e8      	uxtb	r0, r5
    6ba6:	f7ff fc8d 	bl	64c4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    6baa:	7a03      	ldrb	r3, [r0, #8]
    6bac:	b113      	cbz	r3, 6bb4 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6bae:	7a40      	ldrb	r0, [r0, #9]
    6bb0:	f003 f9e2 	bl	9f78 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    6bb4:	3501      	adds	r5, #1
    6bb6:	2d08      	cmp	r5, #8
    6bb8:	d1f4      	bne.n	6ba4 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    6bba:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    6bbe:	b11b      	cbz	r3, 6bc8 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6bc0:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    6bc4:	f003 f9d8 	bl	9f78 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    6bc8:	2001      	movs	r0, #1
    6bca:	f002 fd55 	bl	9678 <nrfx_usbd_start>
		ctx->ready = true;
    6bce:	2301      	movs	r3, #1
    6bd0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    6bd4:	6823      	ldr	r3, [r4, #0]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	f43f aef5 	beq.w	69c6 <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    6bdc:	2100      	movs	r1, #0
    6bde:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    6be0:	4798      	blx	r3
    6be2:	e6f0      	b.n	69c6 <usbd_work_handler+0x2e>
		ctx->ready = false;
    6be4:	2500      	movs	r5, #0
    6be6:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    6bea:	f003 f951 	bl	9e90 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    6bee:	f7ff fdc3 	bl	6778 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    6bf2:	6823      	ldr	r3, [r4, #0]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	f43f aee6 	beq.w	69c6 <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    6bfa:	4629      	mov	r1, r5
    6bfc:	2004      	movs	r0, #4
    6bfe:	e7ef      	b.n	6be0 <usbd_work_handler+0x248>
		if (dev_ready()) {
    6c00:	2a00      	cmp	r2, #0
    6c02:	f43f aee0 	beq.w	69c6 <usbd_work_handler+0x2e>
			nrfx_usbd_suspend();
    6c06:	f003 f95b 	bl	9ec0 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    6c0a:	6823      	ldr	r3, [r4, #0]
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	f43f aeda 	beq.w	69c6 <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    6c12:	2100      	movs	r1, #0
    6c14:	2005      	movs	r0, #5
    6c16:	e7e3      	b.n	6be0 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    6c18:	6823      	ldr	r3, [r4, #0]
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	f43f aed3 	beq.w	69c6 <usbd_work_handler+0x2e>
    6c20:	2a00      	cmp	r2, #0
    6c22:	f43f aed0 	beq.w	69c6 <usbd_work_handler+0x2e>
			ctx->status_cb(USB_DC_RESUME, NULL);
    6c26:	2100      	movs	r1, #0
    6c28:	2006      	movs	r0, #6
    6c2a:	e7d9      	b.n	6be0 <usbd_work_handler+0x248>
    6c2c:	20001c0c 	.word	0x20001c0c
    6c30:	20000298 	.word	0x20000298
    6c34:	20000290 	.word	0x20000290
    6c38:	00011b9d 	.word	0x00011b9d
    6c3c:	40027000 	.word	0x40027000
    6c40:	20001c10 	.word	0x20001c10
    6c44:	20001c44 	.word	0x20001c44
    6c48:	0bad0000 	.word	0x0bad0000
    6c4c:	00011bc3 	.word	0x00011bc3
    6c50:	20001c2c 	.word	0x20001c2c
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6c54:	f107 0510 	add.w	r5, r7, #16
    6c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c60:	4628      	mov	r0, r5
    6c62:	f007 faa4 	bl	e1ae <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    6c66:	f7ff fe63 	bl	6930 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    6c6a:	4628      	mov	r0, r5
    6c6c:	f007 faa1 	bl	e1b2 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    6c70:	f857 3c28 	ldr.w	r3, [r7, #-40]
    6c74:	2b00      	cmp	r3, #0
    6c76:	f43f aea6 	beq.w	69c6 <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_RESET, NULL);
    6c7a:	2100      	movs	r1, #0
    6c7c:	2001      	movs	r0, #1
    6c7e:	e7af      	b.n	6be0 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    6c80:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    6c84:	b1ab      	cbz	r3, 6cb2 <usbd_work_handler+0x31a>
		ep_ctx->read_pending = true;
    6c86:	2501      	movs	r5, #1
    6c88:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    6c8c:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    6c90:	f7ff fc88 	bl	65a4 <usbd_evt_alloc>
		if (!ev) {
    6c94:	b9a8      	cbnz	r0, 6cc2 <usbd_work_handler+0x32a>
			LOG_ERR("Failed to alloc evt");
    6c96:	4827      	ldr	r0, [pc, #156]	; (6d34 <usbd_work_handler+0x39c>)
    6c98:	6803      	ldr	r3, [r0, #0]
    6c9a:	075d      	lsls	r5, r3, #29
    6c9c:	d009      	beq.n	6cb2 <usbd_work_handler+0x31a>
    6c9e:	4b26      	ldr	r3, [pc, #152]	; (6d38 <usbd_work_handler+0x3a0>)
    6ca0:	9308      	str	r3, [sp, #32]
    6ca2:	aa07      	add	r2, sp, #28
    6ca4:	2302      	movs	r3, #2
    6ca6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6caa:	9301      	str	r3, [sp, #4]
    6cac:	9307      	str	r3, [sp, #28]
    6cae:	f007 fa7b 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
    6cb2:	f857 3c28 	ldr.w	r3, [r7, #-40]
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	f43f ae85 	beq.w	69c6 <usbd_work_handler+0x2e>
				ctx->status_cb(USB_DC_SOF, NULL);
    6cbc:	2100      	movs	r1, #0
    6cbe:	200a      	movs	r0, #10
    6cc0:	e78e      	b.n	6be0 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    6cc2:	4a1e      	ldr	r2, [pc, #120]	; (6d3c <usbd_work_handler+0x3a4>)
		ev->evt_type = USBD_EVT_EP;
    6cc4:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6cc6:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    6cc8:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    6cca:	f7ff fc23 	bl	6514 <usbd_evt_put>
		usbd_work_schedule();
    6cce:	f7ff fc27 	bl	6520 <usbd_work_schedule>
    6cd2:	e7ee      	b.n	6cb2 <usbd_work_handler+0x31a>
				LOG_ERR("USBD event queue full!");
    6cd4:	4817      	ldr	r0, [pc, #92]	; (6d34 <usbd_work_handler+0x39c>)
    6cd6:	6803      	ldr	r3, [r0, #0]
    6cd8:	0759      	lsls	r1, r3, #29
    6cda:	d009      	beq.n	6cf0 <usbd_work_handler+0x358>
    6cdc:	4b18      	ldr	r3, [pc, #96]	; (6d40 <usbd_work_handler+0x3a8>)
    6cde:	9308      	str	r3, [sp, #32]
    6ce0:	aa07      	add	r2, sp, #28
    6ce2:	2302      	movs	r3, #2
    6ce4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6ce8:	9301      	str	r3, [sp, #4]
    6cea:	9307      	str	r3, [sp, #28]
    6cec:	f007 fa5c 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    6cf0:	f007 fdfb 	bl	e8ea <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    6cf4:	f003 f8cc 	bl	9e90 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    6cf8:	f002 fc16 	bl	9528 <nrfx_usbd_uninit>
	usbd_evt_flush();
    6cfc:	f7ff fc44 	bl	6588 <usbd_evt_flush>
	ret = eps_ctx_init();
    6d00:	f7ff fe16 	bl	6930 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    6d04:	f007 fdea 	bl	e8dc <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    6d08:	480e      	ldr	r0, [pc, #56]	; (6d44 <usbd_work_handler+0x3ac>)
    6d0a:	f002 fcdd 	bl	96c8 <nrfx_usbd_init>
}
    6d0e:	e65a      	b.n	69c6 <usbd_work_handler+0x2e>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    6d10:	4808      	ldr	r0, [pc, #32]	; (6d34 <usbd_work_handler+0x39c>)
    6d12:	6802      	ldr	r2, [r0, #0]
    6d14:	0752      	lsls	r2, r2, #29
    6d16:	f43f ae56 	beq.w	69c6 <usbd_work_handler+0x2e>
    6d1a:	4a0b      	ldr	r2, [pc, #44]	; (6d48 <usbd_work_handler+0x3b0>)
    6d1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		switch (ev->evt_type) {
    6d20:	e9cd 2308 	strd	r2, r3, [sp, #32]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    6d24:	2303      	movs	r3, #3
    6d26:	aa07      	add	r2, sp, #28
    6d28:	9301      	str	r3, [sp, #4]
    6d2a:	9307      	str	r3, [sp, #28]
    6d2c:	f007 fa3c 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
    6d30:	e649      	b.n	69c6 <usbd_work_handler+0x2e>
    6d32:	bf00      	nop
    6d34:	20000290 	.word	0x20000290
    6d38:	00011be9 	.word	0x00011be9
    6d3c:	20001e78 	.word	0x20001e78
    6d40:	00011bfd 	.word	0x00011bfd
    6d44:	000067bd 	.word	0x000067bd
    6d48:	00011c14 	.word	0x00011c14

00006d4c <usb_dc_attach>:
{
    6d4c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    6d4e:	4d1a      	ldr	r5, [pc, #104]	; (6db8 <usb_dc_attach+0x6c>)
    6d50:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    6d54:	bb5c      	cbnz	r4, 6dae <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    6d56:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6d5a:	f007 ff16 	bl	eb8a <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    6d5e:	4620      	mov	r0, r4
    6d60:	f000 fca4 	bl	76ac <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6d64:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    6d66:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6d68:	2101      	movs	r1, #1
    6d6a:	2027      	movs	r0, #39	; 0x27
    6d6c:	f7fe fe32 	bl	59d4 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    6d70:	4812      	ldr	r0, [pc, #72]	; (6dbc <usb_dc_attach+0x70>)
    6d72:	f002 fca9 	bl	96c8 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    6d76:	4b12      	ldr	r3, [pc, #72]	; (6dc0 <usb_dc_attach+0x74>)
    6d78:	4298      	cmp	r0, r3
    6d7a:	d11a      	bne.n	6db2 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    6d7c:	f007 fdae 	bl	e8dc <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    6d80:	f7ff fdd6 	bl	6930 <eps_ctx_init>
	if (ret == 0) {
    6d84:	4604      	mov	r4, r0
    6d86:	b910      	cbnz	r0, 6d8e <usb_dc_attach+0x42>
		ctx->attached = true;
    6d88:	2301      	movs	r3, #1
    6d8a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    6d8e:	4b0d      	ldr	r3, [pc, #52]	; (6dc4 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    6d90:	681b      	ldr	r3, [r3, #0]
    6d92:	b10b      	cbz	r3, 6d98 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    6d94:	f7ff fbc4 	bl	6520 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    6d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d9c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    6da0:	07db      	lsls	r3, r3, #31
    6da2:	d502      	bpl.n	6daa <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    6da4:	2000      	movs	r0, #0
    6da6:	f7ff fcb5 	bl	6714 <usb_dc_power_event_handler>
}
    6daa:	4620      	mov	r0, r4
    6dac:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    6dae:	2400      	movs	r4, #0
    6db0:	e7fb      	b.n	6daa <usb_dc_attach+0x5e>
		return -EIO;
    6db2:	f06f 0404 	mvn.w	r4, #4
    6db6:	e7f8      	b.n	6daa <usb_dc_attach+0x5e>
    6db8:	20001c0c 	.word	0x20001c0c
    6dbc:	000067bd 	.word	0x000067bd
    6dc0:	0bad0000 	.word	0x0bad0000
    6dc4:	20000310 	.word	0x20000310

00006dc8 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    6dc8:	4b07      	ldr	r3, [pc, #28]	; (6de8 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    6dca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    6dce:	b13a      	cbz	r2, 6de0 <usb_dc_set_address+0x18>
    6dd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	bf0c      	ite	eq
    6dd8:	f06f 0012 	mvneq.w	r0, #18
    6ddc:	2000      	movne	r0, #0
    6dde:	4770      	bx	lr
		return -ENODEV;
    6de0:	f06f 0012 	mvn.w	r0, #18
}
    6de4:	4770      	bx	lr
    6de6:	bf00      	nop
    6de8:	20001c0c 	.word	0x20001c0c

00006dec <usb_dc_ep_check_cap>:
{
    6dec:	b500      	push	{lr}
    6dee:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    6df0:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    6df2:	791b      	ldrb	r3, [r3, #4]
{
    6df4:	b089      	sub	sp, #36	; 0x24
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    6df6:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    6dfa:	b98b      	cbnz	r3, 6e20 <usb_dc_ep_check_cap+0x34>
    6dfc:	b358      	cbz	r0, 6e56 <usb_dc_ep_check_cap+0x6a>
		LOG_ERR("invalid endpoint configuration");
    6dfe:	4817      	ldr	r0, [pc, #92]	; (6e5c <usb_dc_ep_check_cap+0x70>)
    6e00:	6803      	ldr	r3, [r0, #0]
    6e02:	0759      	lsls	r1, r3, #29
    6e04:	d009      	beq.n	6e1a <usb_dc_ep_check_cap+0x2e>
    6e06:	4b16      	ldr	r3, [pc, #88]	; (6e60 <usb_dc_ep_check_cap+0x74>)
		LOG_ERR("invalid endpoint index/address");
    6e08:	9306      	str	r3, [sp, #24]
    6e0a:	2302      	movs	r3, #2
    6e0c:	9301      	str	r3, [sp, #4]
    6e0e:	9305      	str	r3, [sp, #20]
    6e10:	aa05      	add	r2, sp, #20
    6e12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e16:	f007 f9c7 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
		return -1;
    6e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6e1e:	e01a      	b.n	6e56 <usb_dc_ep_check_cap+0x6a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    6e20:	2808      	cmp	r0, #8
    6e22:	d905      	bls.n	6e30 <usb_dc_ep_check_cap+0x44>
		LOG_ERR("invalid endpoint index/address");
    6e24:	480d      	ldr	r0, [pc, #52]	; (6e5c <usb_dc_ep_check_cap+0x70>)
    6e26:	6803      	ldr	r3, [r0, #0]
    6e28:	075a      	lsls	r2, r3, #29
    6e2a:	d0f6      	beq.n	6e1a <usb_dc_ep_check_cap+0x2e>
    6e2c:	4b0d      	ldr	r3, [pc, #52]	; (6e64 <usb_dc_ep_check_cap+0x78>)
    6e2e:	e7eb      	b.n	6e08 <usb_dc_ep_check_cap+0x1c>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6e30:	2b01      	cmp	r3, #1
    6e32:	d10f      	bne.n	6e54 <usb_dc_ep_check_cap+0x68>
    6e34:	0713      	lsls	r3, r2, #28
    6e36:	d40d      	bmi.n	6e54 <usb_dc_ep_check_cap+0x68>
		LOG_WRN("invalid endpoint type");
    6e38:	4808      	ldr	r0, [pc, #32]	; (6e5c <usb_dc_ep_check_cap+0x70>)
    6e3a:	6803      	ldr	r3, [r0, #0]
    6e3c:	f013 0f06 	tst.w	r3, #6
    6e40:	d0eb      	beq.n	6e1a <usb_dc_ep_check_cap+0x2e>
    6e42:	4b09      	ldr	r3, [pc, #36]	; (6e68 <usb_dc_ep_check_cap+0x7c>)
    6e44:	9306      	str	r3, [sp, #24]
    6e46:	2302      	movs	r3, #2
    6e48:	9301      	str	r3, [sp, #4]
    6e4a:	9305      	str	r3, [sp, #20]
    6e4c:	aa05      	add	r2, sp, #20
    6e4e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    6e52:	e7e0      	b.n	6e16 <usb_dc_ep_check_cap+0x2a>
	return 0;
    6e54:	2000      	movs	r0, #0
}
    6e56:	b009      	add	sp, #36	; 0x24
    6e58:	f85d fb04 	ldr.w	pc, [sp], #4
    6e5c:	20000290 	.word	0x20000290
    6e60:	00011c2b 	.word	0x00011c2b
    6e64:	00011c4a 	.word	0x00011c4a
    6e68:	00011c69 	.word	0x00011c69

00006e6c <usb_dc_ep_configure>:
{
    6e6c:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    6e6e:	4b18      	ldr	r3, [pc, #96]	; (6ed0 <usb_dc_ep_configure+0x64>)
	if (!dev_attached()) {
    6e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    6e74:	b088      	sub	sp, #32
    6e76:	4601      	mov	r1, r0
	if (!dev_attached()) {
    6e78:	b333      	cbz	r3, 6ec8 <usb_dc_ep_configure+0x5c>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    6e7a:	7804      	ldrb	r4, [r0, #0]
    6e7c:	4620      	mov	r0, r4
    6e7e:	f7ff fb21 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    6e82:	b918      	cbnz	r0, 6e8c <usb_dc_ep_configure+0x20>
			return -EINVAL;
    6e84:	f06f 0015 	mvn.w	r0, #21
}
    6e88:	b008      	add	sp, #32
    6e8a:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    6e8c:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    6e8e:	790b      	ldrb	r3, [r1, #4]
    6e90:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6e92:	8849      	ldrh	r1, [r1, #2]
    6e94:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    6e96:	0722      	lsls	r2, r4, #28
    6e98:	d411      	bmi.n	6ebe <usb_dc_ep_configure+0x52>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6e9a:	1e4b      	subs	r3, r1, #1
    6e9c:	420b      	tst	r3, r1
    6e9e:	d00e      	beq.n	6ebe <usb_dc_ep_configure+0x52>
			LOG_ERR("EP max packet size must be a power of 2");
    6ea0:	480c      	ldr	r0, [pc, #48]	; (6ed4 <usb_dc_ep_configure+0x68>)
    6ea2:	6803      	ldr	r3, [r0, #0]
    6ea4:	075b      	lsls	r3, r3, #29
    6ea6:	d0ed      	beq.n	6e84 <usb_dc_ep_configure+0x18>
    6ea8:	4b0b      	ldr	r3, [pc, #44]	; (6ed8 <usb_dc_ep_configure+0x6c>)
    6eaa:	9306      	str	r3, [sp, #24]
    6eac:	aa05      	add	r2, sp, #20
    6eae:	2302      	movs	r3, #2
    6eb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6eb4:	9301      	str	r3, [sp, #4]
    6eb6:	9305      	str	r3, [sp, #20]
    6eb8:	f007 f976 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
    6ebc:	e7e2      	b.n	6e84 <usb_dc_ep_configure+0x18>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6ebe:	4620      	mov	r0, r4
    6ec0:	f007 fda1 	bl	ea06 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    6ec4:	2000      	movs	r0, #0
    6ec6:	e7df      	b.n	6e88 <usb_dc_ep_configure+0x1c>
		return -ENODEV;
    6ec8:	f06f 0012 	mvn.w	r0, #18
    6ecc:	e7dc      	b.n	6e88 <usb_dc_ep_configure+0x1c>
    6ece:	bf00      	nop
    6ed0:	20001c0c 	.word	0x20001c0c
    6ed4:	20000290 	.word	0x20000290
    6ed8:	00011c7f 	.word	0x00011c7f

00006edc <usb_dc_ep_set_stall>:
{
    6edc:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    6ede:	4b1a      	ldr	r3, [pc, #104]	; (6f48 <usb_dc_ep_set_stall+0x6c>)
	if (!dev_attached() || !dev_ready()) {
    6ee0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6ee4:	b088      	sub	sp, #32
    6ee6:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    6ee8:	b35a      	cbz	r2, 6f42 <usb_dc_ep_set_stall+0x66>
    6eea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6eee:	b343      	cbz	r3, 6f42 <usb_dc_ep_set_stall+0x66>
	ep_ctx = endpoint_ctx(ep);
    6ef0:	f7ff fae8 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    6ef4:	4604      	mov	r4, r0
    6ef6:	b308      	cbz	r0, 6f3c <usb_dc_ep_set_stall+0x60>
	switch (ep_ctx->cfg.type) {
    6ef8:	7a83      	ldrb	r3, [r0, #10]
    6efa:	2b01      	cmp	r3, #1
    6efc:	d010      	beq.n	6f20 <usb_dc_ep_set_stall+0x44>
    6efe:	d908      	bls.n	6f12 <usb_dc_ep_set_stall+0x36>
    6f00:	3b02      	subs	r3, #2
    6f02:	2b01      	cmp	r3, #1
    6f04:	d908      	bls.n	6f18 <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    6f06:	6963      	ldr	r3, [r4, #20]
    6f08:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    6f0a:	2000      	movs	r0, #0
    6f0c:	60e0      	str	r0, [r4, #12]
}
    6f0e:	b008      	add	sp, #32
    6f10:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    6f12:	f002 fe4d 	bl	9bb0 <nrfx_usbd_setup_stall>
		break;
    6f16:	e7f6      	b.n	6f06 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    6f18:	4608      	mov	r0, r1
    6f1a:	f002 fdbd 	bl	9a98 <nrfx_usbd_ep_stall>
		break;
    6f1e:	e7f2      	b.n	6f06 <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
    6f20:	480a      	ldr	r0, [pc, #40]	; (6f4c <usb_dc_ep_set_stall+0x70>)
    6f22:	6803      	ldr	r3, [r0, #0]
    6f24:	075b      	lsls	r3, r3, #29
    6f26:	d009      	beq.n	6f3c <usb_dc_ep_set_stall+0x60>
    6f28:	4b09      	ldr	r3, [pc, #36]	; (6f50 <usb_dc_ep_set_stall+0x74>)
    6f2a:	9306      	str	r3, [sp, #24]
    6f2c:	aa05      	add	r2, sp, #20
    6f2e:	2302      	movs	r3, #2
    6f30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f34:	9301      	str	r3, [sp, #4]
    6f36:	9305      	str	r3, [sp, #20]
    6f38:	f007 f936 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    6f3c:	f06f 0015 	mvn.w	r0, #21
    6f40:	e7e5      	b.n	6f0e <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    6f42:	f06f 0012 	mvn.w	r0, #18
    6f46:	e7e2      	b.n	6f0e <usb_dc_ep_set_stall+0x32>
    6f48:	20001c0c 	.word	0x20001c0c
    6f4c:	20000290 	.word	0x20000290
    6f50:	00011ca7 	.word	0x00011ca7

00006f54 <usb_dc_ep_clear_stall>:
{
    6f54:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6f56:	4b0e      	ldr	r3, [pc, #56]	; (6f90 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    6f58:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6f5c:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    6f5e:	b182      	cbz	r2, 6f82 <usb_dc_ep_clear_stall+0x2e>
    6f60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6f64:	b16b      	cbz	r3, 6f82 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    6f66:	f7ff faad 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    6f6a:	b168      	cbz	r0, 6f88 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    6f6c:	f015 0408 	ands.w	r4, r5, #8
    6f70:	d10a      	bne.n	6f88 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6f72:	4628      	mov	r0, r5
    6f74:	f002 fdb2 	bl	9adc <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6f78:	4628      	mov	r0, r5
    6f7a:	f003 f84f 	bl	a01c <nrfx_usbd_ep_stall_clear>
	return 0;
    6f7e:	4620      	mov	r0, r4
}
    6f80:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6f82:	f06f 0012 	mvn.w	r0, #18
    6f86:	e7fb      	b.n	6f80 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    6f88:	f06f 0015 	mvn.w	r0, #21
    6f8c:	e7f8      	b.n	6f80 <usb_dc_ep_clear_stall+0x2c>
    6f8e:	bf00      	nop
    6f90:	20001c0c 	.word	0x20001c0c

00006f94 <usb_dc_ep_is_stalled>:
{
    6f94:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6f96:	4b0c      	ldr	r3, [pc, #48]	; (6fc8 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    6f98:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6f9c:	4605      	mov	r5, r0
    6f9e:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    6fa0:	b162      	cbz	r2, 6fbc <usb_dc_ep_is_stalled+0x28>
    6fa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6fa6:	b14b      	cbz	r3, 6fbc <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    6fa8:	f7ff fa8c 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    6fac:	b148      	cbz	r0, 6fc2 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    6fae:	b141      	cbz	r1, 6fc2 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    6fb0:	4628      	mov	r0, r5
    6fb2:	f002 fd79 	bl	9aa8 <nrfx_usbd_ep_stall_check>
    6fb6:	7020      	strb	r0, [r4, #0]
	return 0;
    6fb8:	2000      	movs	r0, #0
}
    6fba:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6fbc:	f06f 0012 	mvn.w	r0, #18
    6fc0:	e7fb      	b.n	6fba <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    6fc2:	f06f 0015 	mvn.w	r0, #21
    6fc6:	e7f8      	b.n	6fba <usb_dc_ep_is_stalled+0x26>
    6fc8:	20001c0c 	.word	0x20001c0c

00006fcc <usb_dc_ep_enable>:
{
    6fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    6fce:	4f13      	ldr	r7, [pc, #76]	; (701c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    6fd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
    6fd4:	4604      	mov	r4, r0
	if (!dev_attached()) {
    6fd6:	b1bb      	cbz	r3, 7008 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    6fd8:	f7ff fa74 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    6fdc:	4605      	mov	r5, r0
    6fde:	b1b0      	cbz	r0, 700e <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    6fe0:	0723      	lsls	r3, r4, #28
    6fe2:	d405      	bmi.n	6ff0 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6fe4:	4620      	mov	r0, r4
    6fe6:	f002 fd79 	bl	9adc <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6fea:	4620      	mov	r0, r4
    6fec:	f003 f816 	bl	a01c <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    6ff0:	7a2e      	ldrb	r6, [r5, #8]
    6ff2:	b97e      	cbnz	r6, 7014 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    6ff4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    6ff8:	2301      	movs	r3, #1
    6ffa:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    6ffc:	b118      	cbz	r0, 7006 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    6ffe:	4620      	mov	r0, r4
    7000:	f002 ffba 	bl	9f78 <nrfx_usbd_ep_enable>
	return 0;
    7004:	4630      	mov	r0, r6
}
    7006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    7008:	f06f 0012 	mvn.w	r0, #18
    700c:	e7fb      	b.n	7006 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    700e:	f06f 0015 	mvn.w	r0, #21
    7012:	e7f8      	b.n	7006 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    7014:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7018:	e7f5      	b.n	7006 <usb_dc_ep_enable+0x3a>
    701a:	bf00      	nop
    701c:	20001c0c 	.word	0x20001c0c

00007020 <usb_dc_ep_disable>:
{
    7020:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    7022:	4b11      	ldr	r3, [pc, #68]	; (7068 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    7024:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    7028:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    702a:	b19a      	cbz	r2, 7054 <usb_dc_ep_disable+0x34>
    702c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7030:	b183      	cbz	r3, 7054 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    7032:	f7ff fa47 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    7036:	4605      	mov	r5, r0
    7038:	b178      	cbz	r0, 705a <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    703a:	7a03      	ldrb	r3, [r0, #8]
    703c:	b183      	cbz	r3, 7060 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    703e:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
    7040:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    7042:	f002 ff6d 	bl	9f20 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    7046:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    7048:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    704a:	f007 f89a 	bl	e182 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    704e:	722c      	strb	r4, [r5, #8]
	return 0;
    7050:	4620      	mov	r0, r4
}
    7052:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    7054:	f06f 0012 	mvn.w	r0, #18
    7058:	e7fb      	b.n	7052 <usb_dc_ep_disable+0x32>
		return -EINVAL;
    705a:	f06f 0015 	mvn.w	r0, #21
    705e:	e7f8      	b.n	7052 <usb_dc_ep_disable+0x32>
		return -EALREADY;
    7060:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7064:	e7f5      	b.n	7052 <usb_dc_ep_disable+0x32>
    7066:	bf00      	nop
    7068:	20001c0c 	.word	0x20001c0c

0000706c <usb_dc_ep_write>:
{
    706c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    7070:	f8df 8114 	ldr.w	r8, [pc, #276]	; 7188 <usb_dc_ep_write+0x11c>
{
    7074:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    7076:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    707a:	b08b      	sub	sp, #44	; 0x2c
    707c:	4607      	mov	r7, r0
    707e:	4689      	mov	r9, r1
    7080:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
    7082:	2b00      	cmp	r3, #0
    7084:	d07d      	beq.n	7182 <usb_dc_ep_write+0x116>
    7086:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    708a:	2b00      	cmp	r3, #0
    708c:	d079      	beq.n	7182 <usb_dc_ep_write+0x116>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    708e:	0605      	lsls	r5, r0, #24
    7090:	d514      	bpl.n	70bc <usb_dc_ep_write+0x50>
	ep_ctx = endpoint_ctx(ep);
    7092:	f7ff fa17 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    7096:	4605      	mov	r5, r0
    7098:	b180      	cbz	r0, 70bc <usb_dc_ep_write+0x50>
	if (!ep_ctx->cfg.en) {
    709a:	7a03      	ldrb	r3, [r0, #8]
    709c:	b98b      	cbnz	r3, 70c2 <usb_dc_ep_write+0x56>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    709e:	483b      	ldr	r0, [pc, #236]	; (718c <usb_dc_ep_write+0x120>)
    70a0:	6803      	ldr	r3, [r0, #0]
    70a2:	0759      	lsls	r1, r3, #29
    70a4:	d00a      	beq.n	70bc <usb_dc_ep_write+0x50>
    70a6:	4b3a      	ldr	r3, [pc, #232]	; (7190 <usb_dc_ep_write+0x124>)
    70a8:	aa07      	add	r2, sp, #28
    70aa:	e9cd 3708 	strd	r3, r7, [sp, #32]
    70ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    70b2:	2303      	movs	r3, #3
    70b4:	9301      	str	r3, [sp, #4]
    70b6:	9307      	str	r3, [sp, #28]
    70b8:	f007 f876 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    70bc:	f06f 0415 	mvn.w	r4, #21
    70c0:	e00f      	b.n	70e2 <usb_dc_ep_write+0x76>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    70c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    70c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    70ca:	f108 0038 	add.w	r0, r8, #56	; 0x38
    70ce:	f007 f86e 	bl	e1ae <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    70d2:	7fab      	ldrb	r3, [r5, #30]
    70d4:	b14b      	cbz	r3, 70ea <usb_dc_ep_write+0x7e>
		k_mutex_unlock(&ctx->drv_lock);
    70d6:	f108 0038 	add.w	r0, r8, #56	; 0x38
    70da:	f007 f86a 	bl	e1b2 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    70de:	f06f 040a 	mvn.w	r4, #10
}
    70e2:	4620      	mov	r0, r4
    70e4:	b00b      	add	sp, #44	; 0x2c
    70e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    70ea:	b916      	cbnz	r6, 70f2 <usb_dc_ep_write+0x86>
    70ec:	7feb      	ldrb	r3, [r5, #31]
    70ee:	b103      	cbz	r3, 70f2 <usb_dc_ep_write+0x86>
		ep_ctx->trans_zlp = false;
    70f0:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    70f2:	7aab      	ldrb	r3, [r5, #10]
    70f4:	b9bb      	cbnz	r3, 7126 <usb_dc_ep_write+0xba>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    70f6:	b15e      	cbz	r6, 7110 <usb_dc_ep_write+0xa4>
    70f8:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    70fc:	429e      	cmp	r6, r3
    70fe:	d207      	bcs.n	7110 <usb_dc_ep_write+0xa4>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    7100:	686a      	ldr	r2, [r5, #4]
    7102:	fbb6 f3f2 	udiv	r3, r6, r2
    7106:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    710a:	b90b      	cbnz	r3, 7110 <usb_dc_ep_write+0xa4>
			ep_ctx->trans_zlp = true;
    710c:	2301      	movs	r3, #1
    710e:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    7110:	f002 fd56 	bl	9bc0 <nrfx_usbd_last_setup_dir_get>
    7114:	4287      	cmp	r7, r0
    7116:	d006      	beq.n	7126 <usb_dc_ep_write+0xba>
		nrfx_usbd_setup_clear();
    7118:	f002 fd42 	bl	9ba0 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    711c:	481d      	ldr	r0, [pc, #116]	; (7194 <usb_dc_ep_write+0x128>)
    711e:	f007 f848 	bl	e1b2 <k_mutex_unlock.isra.0>
		return 0;
    7122:	2400      	movs	r4, #0
    7124:	e7dd      	b.n	70e2 <usb_dc_ep_write+0x76>
	ep_ctx->write_in_progress = true;
    7126:	2301      	movs	r3, #1
    7128:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    712a:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    712e:	a901      	add	r1, sp, #4
    7130:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    7132:	e9cd 9601 	strd	r9, r6, [sp, #4]
    7136:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    713a:	f002 fb0b 	bl	9754 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    713e:	4a16      	ldr	r2, [pc, #88]	; (7198 <usb_dc_ep_write+0x12c>)
    7140:	4290      	cmp	r0, r2
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    7142:	4603      	mov	r3, r0
	if (err != NRFX_SUCCESS) {
    7144:	d016      	beq.n	7174 <usb_dc_ep_write+0x108>
		ep_ctx->write_in_progress = false;
    7146:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
    714a:	b10c      	cbz	r4, 7150 <usb_dc_ep_write+0xe4>
			*ret_bytes = 0;
    714c:	f8c4 8000 	str.w	r8, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    7150:	480e      	ldr	r0, [pc, #56]	; (718c <usb_dc_ep_write+0x120>)
    7152:	6802      	ldr	r2, [r0, #0]
    7154:	0752      	lsls	r2, r2, #29
    7156:	d00a      	beq.n	716e <usb_dc_ep_write+0x102>
    7158:	4a10      	ldr	r2, [pc, #64]	; (719c <usb_dc_ep_write+0x130>)
    715a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    715e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    7162:	2303      	movs	r3, #3
    7164:	aa07      	add	r2, sp, #28
    7166:	9300      	str	r3, [sp, #0]
    7168:	9307      	str	r3, [sp, #28]
    716a:	f007 f81d 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
		result = -EIO;
    716e:	f06f 0404 	mvn.w	r4, #4
    7172:	e002      	b.n	717a <usb_dc_ep_write+0x10e>
		if (ret_bytes) {
    7174:	b10c      	cbz	r4, 717a <usb_dc_ep_write+0x10e>
			*ret_bytes = data_len;
    7176:	6026      	str	r6, [r4, #0]
	int result = 0;
    7178:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
    717a:	4806      	ldr	r0, [pc, #24]	; (7194 <usb_dc_ep_write+0x128>)
    717c:	f007 f819 	bl	e1b2 <k_mutex_unlock.isra.0>
	return result;
    7180:	e7af      	b.n	70e2 <usb_dc_ep_write+0x76>
		return -ENODEV;
    7182:	f06f 0412 	mvn.w	r4, #18
    7186:	e7ac      	b.n	70e2 <usb_dc_ep_write+0x76>
    7188:	20001c0c 	.word	0x20001c0c
    718c:	20000290 	.word	0x20000290
    7190:	00011cc9 	.word	0x00011cc9
    7194:	20001c44 	.word	0x20001c44
    7198:	0bad0000 	.word	0x0bad0000
    719c:	00011ce8 	.word	0x00011ce8

000071a0 <usb_dc_ep_read_wait>:
{
    71a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71a4:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    71a6:	4b2b      	ldr	r3, [pc, #172]	; (7254 <usb_dc_ep_read_wait+0xb4>)
{
    71a8:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    71aa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    71ae:	b088      	sub	sp, #32
    71b0:	4680      	mov	r8, r0
    71b2:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    71b4:	2a00      	cmp	r2, #0
    71b6:	d049      	beq.n	724c <usb_dc_ep_read_wait+0xac>
    71b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    71bc:	2b00      	cmp	r3, #0
    71be:	d045      	beq.n	724c <usb_dc_ep_read_wait+0xac>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    71c0:	f010 0f80 	tst.w	r0, #128	; 0x80
    71c4:	d117      	bne.n	71f6 <usb_dc_ep_read_wait+0x56>
	if (!data && max_data_len) {
    71c6:	b901      	cbnz	r1, 71ca <usb_dc_ep_read_wait+0x2a>
    71c8:	b9af      	cbnz	r7, 71f6 <usb_dc_ep_read_wait+0x56>
	ep_ctx = endpoint_ctx(ep);
    71ca:	4640      	mov	r0, r8
    71cc:	f7ff f97a 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    71d0:	4604      	mov	r4, r0
    71d2:	b180      	cbz	r0, 71f6 <usb_dc_ep_read_wait+0x56>
	if (!ep_ctx->cfg.en) {
    71d4:	7a03      	ldrb	r3, [r0, #8]
    71d6:	b98b      	cbnz	r3, 71fc <usb_dc_ep_read_wait+0x5c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    71d8:	481f      	ldr	r0, [pc, #124]	; (7258 <usb_dc_ep_read_wait+0xb8>)
    71da:	6803      	ldr	r3, [r0, #0]
    71dc:	075b      	lsls	r3, r3, #29
    71de:	d00a      	beq.n	71f6 <usb_dc_ep_read_wait+0x56>
    71e0:	4b1e      	ldr	r3, [pc, #120]	; (725c <usb_dc_ep_read_wait+0xbc>)
    71e2:	aa05      	add	r2, sp, #20
    71e4:	e9cd 3806 	strd	r3, r8, [sp, #24]
    71e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    71ec:	2303      	movs	r3, #3
    71ee:	9301      	str	r3, [sp, #4]
    71f0:	9305      	str	r3, [sp, #20]
    71f2:	f006 ffd9 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    71f6:	f06f 0015 	mvn.w	r0, #21
    71fa:	e013      	b.n	7224 <usb_dc_ep_read_wait+0x84>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    71fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7200:	4817      	ldr	r0, [pc, #92]	; (7260 <usb_dc_ep_read_wait+0xc0>)
    7202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7206:	f006 ffd2 	bl	e1ae <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    720a:	68e3      	ldr	r3, [r4, #12]
    720c:	42bb      	cmp	r3, r7
    720e:	4698      	mov	r8, r3
    7210:	bf28      	it	cs
    7212:	46b8      	movcs	r8, r7
	if (!data && !max_data_len) {
    7214:	b94e      	cbnz	r6, 722a <usb_dc_ep_read_wait+0x8a>
    7216:	b947      	cbnz	r7, 722a <usb_dc_ep_read_wait+0x8a>
		if (read_bytes) {
    7218:	b105      	cbz	r5, 721c <usb_dc_ep_read_wait+0x7c>
			*read_bytes = ep_ctx->buf.len;
    721a:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    721c:	4810      	ldr	r0, [pc, #64]	; (7260 <usb_dc_ep_read_wait+0xc0>)
    721e:	f006 ffc8 	bl	e1b2 <k_mutex_unlock.isra.0>
		return 0;
    7222:	2000      	movs	r0, #0
}
    7224:	b008      	add	sp, #32
    7226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    722a:	69a1      	ldr	r1, [r4, #24]
    722c:	4642      	mov	r2, r8
    722e:	4630      	mov	r0, r6
    7230:	f006 ff50 	bl	e0d4 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    7234:	69a3      	ldr	r3, [r4, #24]
    7236:	4443      	add	r3, r8
    7238:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    723a:	68e3      	ldr	r3, [r4, #12]
    723c:	eba3 0308 	sub.w	r3, r3, r8
    7240:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    7242:	2d00      	cmp	r5, #0
    7244:	d0ea      	beq.n	721c <usb_dc_ep_read_wait+0x7c>
		*read_bytes = bytes_to_copy;
    7246:	f8c5 8000 	str.w	r8, [r5]
    724a:	e7e7      	b.n	721c <usb_dc_ep_read_wait+0x7c>
		return -ENODEV;
    724c:	f06f 0012 	mvn.w	r0, #18
    7250:	e7e8      	b.n	7224 <usb_dc_ep_read_wait+0x84>
    7252:	bf00      	nop
    7254:	20001c0c 	.word	0x20001c0c
    7258:	20000290 	.word	0x20000290
    725c:	00011cc9 	.word	0x00011cc9
    7260:	20001c44 	.word	0x20001c44

00007264 <usb_dc_ep_read_continue>:
{
    7264:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    7266:	4d27      	ldr	r5, [pc, #156]	; (7304 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    7268:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    726c:	b088      	sub	sp, #32
    726e:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    7270:	2b00      	cmp	r3, #0
    7272:	d044      	beq.n	72fe <usb_dc_ep_read_continue+0x9a>
    7274:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    7278:	2b00      	cmp	r3, #0
    727a:	d040      	beq.n	72fe <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    727c:	0602      	lsls	r2, r0, #24
    727e:	d414      	bmi.n	72aa <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    7280:	f7ff f920 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    7284:	4604      	mov	r4, r0
    7286:	b180      	cbz	r0, 72aa <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    7288:	7a03      	ldrb	r3, [r0, #8]
    728a:	b98b      	cbnz	r3, 72b0 <usb_dc_ep_read_continue+0x4c>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    728c:	481e      	ldr	r0, [pc, #120]	; (7308 <usb_dc_ep_read_continue+0xa4>)
    728e:	6803      	ldr	r3, [r0, #0]
    7290:	075b      	lsls	r3, r3, #29
    7292:	d00a      	beq.n	72aa <usb_dc_ep_read_continue+0x46>
    7294:	4b1d      	ldr	r3, [pc, #116]	; (730c <usb_dc_ep_read_continue+0xa8>)
    7296:	aa05      	add	r2, sp, #20
    7298:	e9cd 3106 	strd	r3, r1, [sp, #24]
    729c:	2303      	movs	r3, #3
    729e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    72a2:	9301      	str	r3, [sp, #4]
    72a4:	9305      	str	r3, [sp, #20]
    72a6:	f006 ff7f 	bl	e1a8 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    72aa:	f06f 0015 	mvn.w	r0, #21
    72ae:	e018      	b.n	72e2 <usb_dc_ep_read_continue+0x7e>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    72b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    72b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    72b8:	f105 0038 	add.w	r0, r5, #56	; 0x38
    72bc:	f006 ff77 	bl	e1ae <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    72c0:	68e3      	ldr	r3, [r4, #12]
    72c2:	b9bb      	cbnz	r3, 72f4 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    72c4:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    72c6:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    72c8:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    72ca:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    72cc:	7f63      	ldrb	r3, [r4, #29]
    72ce:	b18b      	cbz	r3, 72f4 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    72d0:	f7ff f968 	bl	65a4 <usbd_evt_alloc>
			if (!ev) {
    72d4:	b938      	cbnz	r0, 72e6 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    72d6:	f105 0038 	add.w	r0, r5, #56	; 0x38
    72da:	f006 ff6a 	bl	e1b2 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    72de:	f06f 000b 	mvn.w	r0, #11
}
    72e2:	b008      	add	sp, #32
    72e4:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    72e6:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    72e8:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    72ea:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    72ec:	f7ff f912 	bl	6514 <usbd_evt_put>
			usbd_work_schedule();
    72f0:	f7ff f916 	bl	6520 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    72f4:	4806      	ldr	r0, [pc, #24]	; (7310 <usb_dc_ep_read_continue+0xac>)
    72f6:	f006 ff5c 	bl	e1b2 <k_mutex_unlock.isra.0>
	return 0;
    72fa:	2000      	movs	r0, #0
    72fc:	e7f1      	b.n	72e2 <usb_dc_ep_read_continue+0x7e>
		return -ENODEV;
    72fe:	f06f 0012 	mvn.w	r0, #18
    7302:	e7ee      	b.n	72e2 <usb_dc_ep_read_continue+0x7e>
    7304:	20001c0c 	.word	0x20001c0c
    7308:	20000290 	.word	0x20000290
    730c:	00011cc9 	.word	0x00011cc9
    7310:	20001c44 	.word	0x20001c44

00007314 <usb_dc_ep_set_callback>:
{
    7314:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    7316:	4b08      	ldr	r3, [pc, #32]	; (7338 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    7318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    731c:	b12b      	cbz	r3, 732a <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
    731e:	f7ff f8d1 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    7322:	b128      	cbz	r0, 7330 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
    7324:	6001      	str	r1, [r0, #0]
	return 0;
    7326:	2000      	movs	r0, #0
}
    7328:	bd08      	pop	{r3, pc}
		return -ENODEV;
    732a:	f06f 0012 	mvn.w	r0, #18
    732e:	e7fb      	b.n	7328 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    7330:	f06f 0015 	mvn.w	r0, #21
    7334:	e7f8      	b.n	7328 <usb_dc_ep_set_callback+0x14>
    7336:	bf00      	nop
    7338:	20001c0c 	.word	0x20001c0c

0000733c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    733c:	4b01      	ldr	r3, [pc, #4]	; (7344 <usb_dc_set_status_callback+0x8>)
    733e:	6018      	str	r0, [r3, #0]
}
    7340:	4770      	bx	lr
    7342:	bf00      	nop
    7344:	20001c0c 	.word	0x20001c0c

00007348 <usb_dc_ep_mps>:
{
    7348:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    734a:	4b07      	ldr	r3, [pc, #28]	; (7368 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    734c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    7350:	b123      	cbz	r3, 735c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    7352:	f7ff f8b7 	bl	64c4 <endpoint_ctx>
	if (!ep_ctx) {
    7356:	b120      	cbz	r0, 7362 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    7358:	6840      	ldr	r0, [r0, #4]
}
    735a:	bd08      	pop	{r3, pc}
		return -ENODEV;
    735c:	f06f 0012 	mvn.w	r0, #18
    7360:	e7fb      	b.n	735a <usb_dc_ep_mps+0x12>
		return -EINVAL;
    7362:	f06f 0015 	mvn.w	r0, #21
    7366:	e7f8      	b.n	735a <usb_dc_ep_mps+0x12>
    7368:	20001c0c 	.word	0x20001c0c

0000736c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    736c:	4b08      	ldr	r3, [pc, #32]	; (7390 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    736e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    7370:	1ac3      	subs	r3, r0, r3
{
    7372:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7374:	4907      	ldr	r1, [pc, #28]	; (7394 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    7376:	109b      	asrs	r3, r3, #2
{
    7378:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    737a:	4359      	muls	r1, r3
    737c:	4806      	ldr	r0, [pc, #24]	; (7398 <onoff_stop+0x2c>)
    737e:	2240      	movs	r2, #64	; 0x40
    7380:	f006 ff44 	bl	e20c <stop>
	notify(mgr, res);
    7384:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7386:	4601      	mov	r1, r0
	notify(mgr, res);
    7388:	4620      	mov	r0, r4
}
    738a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    738e:	4718      	bx	r3
    7390:	20001eac 	.word	0x20001eac
    7394:	b6db6db7 	.word	0xb6db6db7
    7398:	0000f4a8 	.word	0x0000f4a8

0000739c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    739c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    739e:	4c0c      	ldr	r4, [pc, #48]	; (73d0 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    73a0:	4a0c      	ldr	r2, [pc, #48]	; (73d4 <onoff_start+0x38>)
    73a2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    73a4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    73a6:	9300      	str	r3, [sp, #0]
{
    73a8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    73aa:	460b      	mov	r3, r1
    73ac:	490a      	ldr	r1, [pc, #40]	; (73d8 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    73ae:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    73b0:	4361      	muls	r1, r4
{
    73b2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    73b4:	4809      	ldr	r0, [pc, #36]	; (73dc <onoff_start+0x40>)
    73b6:	f006 ff56 	bl	e266 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    73ba:	1e01      	subs	r1, r0, #0
    73bc:	da05      	bge.n	73ca <onoff_start+0x2e>
		notify(mgr, err);
    73be:	4630      	mov	r0, r6
    73c0:	462b      	mov	r3, r5
	}
}
    73c2:	b002      	add	sp, #8
    73c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    73c8:	4718      	bx	r3
}
    73ca:	b002      	add	sp, #8
    73cc:	bd70      	pop	{r4, r5, r6, pc}
    73ce:	bf00      	nop
    73d0:	20001eac 	.word	0x20001eac
    73d4:	0000e2d5 	.word	0x0000e2d5
    73d8:	b6db6db7 	.word	0xb6db6db7
    73dc:	0000f4a8 	.word	0x0000f4a8

000073e0 <hfclk_start>:
{
    73e0:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    73e2:	f007 fdf3 	bl	efcc <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    73e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    73ea:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
    73ee:	4c07      	ldr	r4, [pc, #28]	; (740c <hfclk_start+0x2c>)
    73f0:	fb02 3101 	mla	r1, r2, r1, r3
    73f4:	0bc0      	lsrs	r0, r0, #15
    73f6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    73fa:	0bc9      	lsrs	r1, r1, #15
    73fc:	e9c4 0100 	strd	r0, r1, [r4]
}
    7400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    7404:	2001      	movs	r0, #1
    7406:	f007 b9db 	b.w	e7c0 <nrfx_clock_start>
    740a:	bf00      	nop
    740c:	20000d68 	.word	0x20000d68

00007410 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7410:	2200      	movs	r2, #0
{
    7412:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7414:	2101      	movs	r1, #1
{
    7416:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7418:	4610      	mov	r0, r2
    741a:	f7fe fadb 	bl	59d4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    741e:	2000      	movs	r0, #0
    7420:	f7fe faa6 	bl	5970 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7424:	480f      	ldr	r0, [pc, #60]	; (7464 <clk_init+0x54>)
    7426:	f001 f9f7 	bl	8818 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    742a:	4b0f      	ldr	r3, [pc, #60]	; (7468 <clk_init+0x58>)
    742c:	4298      	cmp	r0, r3
    742e:	d115      	bne.n	745c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    7430:	f001 fa02 	bl	8838 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    7434:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    7436:	490d      	ldr	r1, [pc, #52]	; (746c <clk_init+0x5c>)
    7438:	4630      	mov	r0, r6
    743a:	f004 fb40 	bl	babe <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    743e:	2800      	cmp	r0, #0
    7440:	db0b      	blt.n	745a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    7442:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    7444:	4909      	ldr	r1, [pc, #36]	; (746c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7446:	2501      	movs	r5, #1
    7448:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    744a:	f104 001c 	add.w	r0, r4, #28
    744e:	f004 fb36 	bl	babe <onoff_manager_init>
		if (err < 0) {
    7452:	2800      	cmp	r0, #0
    7454:	db01      	blt.n	745a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7456:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    7458:	2000      	movs	r0, #0
}
    745a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    745c:	f06f 0004 	mvn.w	r0, #4
    7460:	e7fb      	b.n	745a <clk_init+0x4a>
    7462:	bf00      	nop
    7464:	000074a5 	.word	0x000074a5
    7468:	0bad0000 	.word	0x0bad0000
    746c:	0000ff10 	.word	0x0000ff10

00007470 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    7470:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    7472:	230c      	movs	r3, #12
    7474:	4809      	ldr	r0, [pc, #36]	; (749c <clkstarted_handle.constprop.0+0x2c>)
    7476:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    7478:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    747a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    747c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    7480:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    7482:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    7484:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    7486:	4418      	add	r0, r3
    7488:	f006 fead 	bl	e1e6 <set_on_state>
	if (callback) {
    748c:	b12d      	cbz	r5, 749a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    748e:	4632      	mov	r2, r6
    7490:	462b      	mov	r3, r5
    7492:	4803      	ldr	r0, [pc, #12]	; (74a0 <clkstarted_handle.constprop.0+0x30>)
}
    7494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    7498:	4718      	bx	r3
}
    749a:	bd70      	pop	{r4, r5, r6, pc}
    749c:	20001eac 	.word	0x20001eac
    74a0:	0000f4a8 	.word	0x0000f4a8

000074a4 <clock_event_handler>:
	switch (event) {
    74a4:	b110      	cbz	r0, 74ac <clock_event_handler+0x8>
    74a6:	2801      	cmp	r0, #1
    74a8:	d004      	beq.n	74b4 <clock_event_handler+0x10>
    74aa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    74ac:	4b03      	ldr	r3, [pc, #12]	; (74bc <clock_event_handler+0x18>)
    74ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    74b0:	075b      	lsls	r3, r3, #29
    74b2:	d101      	bne.n	74b8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    74b4:	f7ff bfdc 	b.w	7470 <clkstarted_handle.constprop.0>
}
    74b8:	4770      	bx	lr
    74ba:	bf00      	nop
    74bc:	20001eac 	.word	0x20001eac

000074c0 <generic_hfclk_start>:
{
    74c0:	b508      	push	{r3, lr}
	__asm__ volatile(
    74c2:	f04f 0320 	mov.w	r3, #32
    74c6:	f3ef 8111 	mrs	r1, BASEPRI
    74ca:	f383 8812 	msr	BASEPRI_MAX, r3
    74ce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    74d2:	4a11      	ldr	r2, [pc, #68]	; (7518 <generic_hfclk_start+0x58>)
    74d4:	6813      	ldr	r3, [r2, #0]
    74d6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    74da:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    74de:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    74e0:	d00c      	beq.n	74fc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    74e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    74e6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    74ea:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    74ee:	f013 0301 	ands.w	r3, r3, #1
    74f2:	d003      	beq.n	74fc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    74f4:	4809      	ldr	r0, [pc, #36]	; (751c <generic_hfclk_start+0x5c>)
    74f6:	f006 fe76 	bl	e1e6 <set_on_state>
			already_started = true;
    74fa:	2301      	movs	r3, #1
	__asm__ volatile(
    74fc:	f381 8811 	msr	BASEPRI, r1
    7500:	f3bf 8f6f 	isb	sy
	if (already_started) {
    7504:	b123      	cbz	r3, 7510 <generic_hfclk_start+0x50>
}
    7506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    750a:	2000      	movs	r0, #0
    750c:	f7ff bfb0 	b.w	7470 <clkstarted_handle.constprop.0>
}
    7510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
    7514:	f7ff bf64 	b.w	73e0 <hfclk_start>
    7518:	20001efc 	.word	0x20001efc
    751c:	20001eec 	.word	0x20001eec

00007520 <api_blocking_start>:
{
    7520:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7522:	2200      	movs	r2, #0
    7524:	2301      	movs	r3, #1
    7526:	e9cd 2302 	strd	r2, r3, [sp, #8]
    752a:	ab04      	add	r3, sp, #16
    752c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7530:	4a09      	ldr	r2, [pc, #36]	; (7558 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7532:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7536:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7538:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    753c:	f006 fec3 	bl	e2c6 <api_start>
	if (err < 0) {
    7540:	2800      	cmp	r0, #0
    7542:	db05      	blt.n	7550 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    7544:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7548:	2300      	movs	r3, #0
    754a:	4668      	mov	r0, sp
    754c:	f003 fa4a 	bl	a9e4 <z_impl_k_sem_take>
}
    7550:	b007      	add	sp, #28
    7552:	f85d fb04 	ldr.w	pc, [sp], #4
    7556:	bf00      	nop
    7558:	0000e2f3 	.word	0x0000e2f3

0000755c <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
    755c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7560:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    7564:	4605      	mov	r5, r0
    7566:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
    756a:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
    756e:	f04f 0320 	mov.w	r3, #32
    7572:	f3ef 8711 	mrs	r7, BASEPRI
    7576:	f383 8812 	msr	BASEPRI_MAX, r3
    757a:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
    757e:	f007 fd25 	bl	efcc <z_impl_k_uptime_ticks>
    7582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7586:	fba0 4003 	umull	r4, r0, r0, r3
    758a:	fb03 0001 	mla	r0, r3, r1, r0
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    758e:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7592:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
    7596:	4b25      	ldr	r3, [pc, #148]	; (762c <cmd_status+0xd0>)
    7598:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
    759c:	4b24      	ldr	r3, [pc, #144]	; (7630 <cmd_status+0xd4>)
    759e:	0be4      	lsrs	r4, r4, #15
    75a0:	f8d3 a000 	ldr.w	sl, [r3]
    75a4:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
	__asm__ volatile(
    75a8:	f387 8811 	msr	BASEPRI, r7
    75ac:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
    75b0:	4a20      	ldr	r2, [pc, #128]	; (7634 <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
    75b2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 7638 <cmd_status+0xdc>
    75b6:	4f21      	ldr	r7, [pc, #132]	; (763c <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
    75b8:	4628      	mov	r0, r5
    75ba:	2108      	movs	r1, #8
    75bc:	f005 fba0 	bl	cd00 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    75c0:	f019 0f01 	tst.w	r9, #1
    75c4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 7640 <cmd_status+0xe4>
    75c8:	4a1e      	ldr	r2, [pc, #120]	; (7644 <cmd_status+0xe8>)
    75ca:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    75ce:	9300      	str	r3, [sp, #0]
    75d0:	4628      	mov	r0, r5
    75d2:	bf14      	ite	ne
    75d4:	4643      	movne	r3, r8
    75d6:	463b      	moveq	r3, r7
    75d8:	2108      	movs	r1, #8
    75da:	f005 fb91 	bl	cd00 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    75de:	eba4 030b 	sub.w	r3, r4, fp
    75e2:	9300      	str	r3, [sp, #0]
    75e4:	4628      	mov	r0, r5
    75e6:	465b      	mov	r3, fp
    75e8:	4a17      	ldr	r2, [pc, #92]	; (7648 <cmd_status+0xec>)
    75ea:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    75ec:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    75f0:	f005 fb86 	bl	cd00 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    75f4:	4653      	mov	r3, sl
    75f6:	4628      	mov	r0, r5
    75f8:	4a14      	ldr	r2, [pc, #80]	; (764c <cmd_status+0xf0>)
    75fa:	9400      	str	r4, [sp, #0]
    75fc:	2108      	movs	r1, #8
    75fe:	f005 fb7f 	bl	cd00 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
    7602:	4628      	mov	r0, r5
    7604:	4a12      	ldr	r2, [pc, #72]	; (7650 <cmd_status+0xf4>)
    7606:	2108      	movs	r1, #8
    7608:	f005 fb7a 	bl	cd00 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    760c:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
    7610:	9300      	str	r3, [sp, #0]
    7612:	4628      	mov	r0, r5
    7614:	4a0b      	ldr	r2, [pc, #44]	; (7644 <cmd_status+0xe8>)
    7616:	2e00      	cmp	r6, #0
    7618:	bf14      	ite	ne
    761a:	4643      	movne	r3, r8
    761c:	463b      	moveq	r3, r7
    761e:	2108      	movs	r1, #8
    7620:	f005 fb6e 	bl	cd00 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
    7624:	2000      	movs	r0, #0
    7626:	b003      	add	sp, #12
    7628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    762c:	20000d68 	.word	0x20000d68
    7630:	20000d70 	.word	0x20000d70
    7634:	00011d13 	.word	0x00011d13
    7638:	000106d5 	.word	0x000106d5
    763c:	00011d0e 	.word	0x00011d0e
    7640:	20001eac 	.word	0x20001eac
    7644:	00011d1e 	.word	0x00011d1e
    7648:	00011d38 	.word	0x00011d38
    764c:	00011d5a 	.word	0x00011d5a
    7650:	00011d7b 	.word	0x00011d7b

00007654 <hfclk_stop>:
{
    7654:	b510      	push	{r4, lr}
    7656:	f007 fcb9 	bl	efcc <z_impl_k_uptime_ticks>
    765a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    765e:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
    7662:	4c07      	ldr	r4, [pc, #28]	; (7680 <hfclk_stop+0x2c>)
    7664:	fb02 3101 	mla	r1, r2, r1, r3
    7668:	0bc0      	lsrs	r0, r0, #15
    766a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    766e:	0bc9      	lsrs	r1, r1, #15
    7670:	e9c4 0100 	strd	r0, r1, [r4]
}
    7674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    7678:	2001      	movs	r0, #1
    767a:	f001 b8eb 	b.w	8854 <nrfx_clock_stop>
    767e:	bf00      	nop
    7680:	20000d70 	.word	0x20000d70

00007684 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7684:	4b08      	ldr	r3, [pc, #32]	; (76a8 <generic_hfclk_stop+0x24>)
    7686:	f3bf 8f5b 	dmb	ish
    768a:	e853 2f00 	ldrex	r2, [r3]
    768e:	f022 0102 	bic.w	r1, r2, #2
    7692:	e843 1000 	strex	r0, r1, [r3]
    7696:	2800      	cmp	r0, #0
    7698:	d1f7      	bne.n	768a <generic_hfclk_stop+0x6>
    769a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    769e:	07d3      	lsls	r3, r2, #31
    76a0:	d401      	bmi.n	76a6 <generic_hfclk_stop+0x22>
	hfclk_stop();
    76a2:	f7ff bfd7 	b.w	7654 <hfclk_stop>
}
    76a6:	4770      	bx	lr
    76a8:	20001efc 	.word	0x20001efc

000076ac <z_nrf_clock_control_get_onoff>:
}
    76ac:	4a02      	ldr	r2, [pc, #8]	; (76b8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    76ae:	b2c3      	uxtb	r3, r0
}
    76b0:	201c      	movs	r0, #28
    76b2:	fb03 2000 	mla	r0, r3, r0, r2
    76b6:	4770      	bx	lr
    76b8:	20001eac 	.word	0x20001eac

000076bc <z_nrf_clock_control_lf_on>:
{
    76bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    76c0:	4939      	ldr	r1, [pc, #228]	; (77a8 <z_nrf_clock_control_lf_on+0xec>)
    76c2:	f3bf 8f5b 	dmb	ish
    76c6:	4607      	mov	r7, r0
    76c8:	2201      	movs	r2, #1
    76ca:	e851 3f00 	ldrex	r3, [r1]
    76ce:	e841 2000 	strex	r0, r2, [r1]
    76d2:	2800      	cmp	r0, #0
    76d4:	d1f9      	bne.n	76ca <z_nrf_clock_control_lf_on+0xe>
    76d6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    76da:	b933      	cbnz	r3, 76ea <z_nrf_clock_control_lf_on+0x2e>
    76dc:	4933      	ldr	r1, [pc, #204]	; (77ac <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    76de:	4834      	ldr	r0, [pc, #208]	; (77b0 <z_nrf_clock_control_lf_on+0xf4>)
    76e0:	604b      	str	r3, [r1, #4]
    76e2:	60cb      	str	r3, [r1, #12]
    76e4:	608a      	str	r2, [r1, #8]
    76e6:	f004 f9fd 	bl	bae4 <onoff_request>
	switch (start_mode) {
    76ea:	1e7b      	subs	r3, r7, #1
    76ec:	2b01      	cmp	r3, #1
    76ee:	d82f      	bhi.n	7750 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    76f0:	2f01      	cmp	r7, #1
    76f2:	d107      	bne.n	7704 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    76f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76f8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    76fc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7700:	2b01      	cmp	r3, #1
    7702:	d025      	beq.n	7750 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7704:	f007 fa17 	bl	eb36 <k_is_in_isr>
    7708:	4604      	mov	r4, r0
    770a:	b918      	cbnz	r0, 7714 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    770c:	4b29      	ldr	r3, [pc, #164]	; (77b4 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    770e:	781b      	ldrb	r3, [r3, #0]
    7710:	2b00      	cmp	r3, #0
    7712:	d141      	bne.n	7798 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    7714:	f04f 0320 	mov.w	r3, #32
    7718:	f3ef 8611 	mrs	r6, BASEPRI
    771c:	f383 8812 	msr	BASEPRI_MAX, r3
    7720:	f3bf 8f6f 	isb	sy
    7724:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7726:	f8df 8090 	ldr.w	r8, [pc, #144]	; 77b8 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    772a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    772e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7732:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    7736:	03d2      	lsls	r2, r2, #15
    7738:	d50c      	bpl.n	7754 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    773a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    773e:	2b01      	cmp	r3, #1
    7740:	d001      	beq.n	7746 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    7742:	2f01      	cmp	r7, #1
    7744:	d106      	bne.n	7754 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    7746:	b30c      	cbz	r4, 778c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    7748:	f386 8811 	msr	BASEPRI, r6
    774c:	f3bf 8f6f 	isb	sy
}
    7750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    7754:	b1ac      	cbz	r4, 7782 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    7756:	4630      	mov	r0, r6
    7758:	f7fe f892 	bl	5880 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    775c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    7760:	2b00      	cmp	r3, #0
    7762:	d1e4      	bne.n	772e <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7764:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    7768:	2a00      	cmp	r2, #0
    776a:	d0e0      	beq.n	772e <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    776c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    7770:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    7774:	2301      	movs	r3, #1
    7776:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    777a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    777e:	60ab      	str	r3, [r5, #8]
}
    7780:	e7d5      	b.n	772e <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    7782:	2100      	movs	r1, #0
    7784:	2021      	movs	r0, #33	; 0x21
    7786:	f003 fd49 	bl	b21c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    778a:	e7e7      	b.n	775c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    778c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7790:	2202      	movs	r2, #2
    7792:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7796:	e7db      	b.n	7750 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    7798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    779c:	2202      	movs	r2, #2
    779e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    77a2:	4606      	mov	r6, r0
}
    77a4:	e7bf      	b.n	7726 <z_nrf_clock_control_lf_on+0x6a>
    77a6:	bf00      	nop
    77a8:	20001f00 	.word	0x20001f00
    77ac:	20001e9c 	.word	0x20001e9c
    77b0:	20001ec8 	.word	0x20001ec8
    77b4:	20002246 	.word	0x20002246
    77b8:	e000e100 	.word	0xe000e100

000077bc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    77bc:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    77be:	4b08      	ldr	r3, [pc, #32]	; (77e0 <uart_console_init+0x24>)
    77c0:	4808      	ldr	r0, [pc, #32]	; (77e4 <uart_console_init+0x28>)
    77c2:	6018      	str	r0, [r3, #0]
    77c4:	f007 f953 	bl	ea6e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    77c8:	b138      	cbz	r0, 77da <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    77ca:	4807      	ldr	r0, [pc, #28]	; (77e8 <uart_console_init+0x2c>)
    77cc:	f7fe fe1e 	bl	640c <__stdout_hook_install>
	__printk_hook_install(console_out);
    77d0:	4805      	ldr	r0, [pc, #20]	; (77e8 <uart_console_init+0x2c>)
    77d2:	f7f9 f8b7 	bl	944 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    77d6:	2000      	movs	r0, #0
}
    77d8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    77da:	f06f 0012 	mvn.w	r0, #18
    77de:	e7fb      	b.n	77d8 <uart_console_init+0x1c>
    77e0:	20001f04 	.word	0x20001f04
    77e4:	0000f520 	.word	0x0000f520
    77e8:	000077ed 	.word	0x000077ed

000077ec <console_out>:
	if ('\n' == c) {
    77ec:	280a      	cmp	r0, #10
{
    77ee:	b538      	push	{r3, r4, r5, lr}
    77f0:	4d07      	ldr	r5, [pc, #28]	; (7810 <console_out+0x24>)
    77f2:	4604      	mov	r4, r0
	if ('\n' == c) {
    77f4:	d104      	bne.n	7800 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    77f6:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    77f8:	6883      	ldr	r3, [r0, #8]
    77fa:	210d      	movs	r1, #13
    77fc:	685b      	ldr	r3, [r3, #4]
    77fe:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    7800:	6828      	ldr	r0, [r5, #0]
    7802:	6883      	ldr	r3, [r0, #8]
    7804:	b2e1      	uxtb	r1, r4
    7806:	685b      	ldr	r3, [r3, #4]
    7808:	4798      	blx	r3
}
    780a:	4620      	mov	r0, r4
    780c:	bd38      	pop	{r3, r4, r5, pc}
    780e:	bf00      	nop
    7810:	20001f04 	.word	0x20001f04

00007814 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    7814:	b530      	push	{r4, r5, lr}
	return port->config;
    7816:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7818:	7b04      	ldrb	r4, [r0, #12]
    781a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    781e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7822:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    7826:	b085      	sub	sp, #20
    7828:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    782c:	d104      	bne.n	7838 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    782e:	4628      	mov	r0, r5
    7830:	f001 fabe 	bl	8db0 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    7834:	2000      	movs	r0, #0
    7836:	e032      	b.n	789e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    7838:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    783c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    7840:	d12f      	bne.n	78a2 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    7842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    7846:	bf0c      	ite	eq
    7848:	2304      	moveq	r3, #4
    784a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    784c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    7850:	6883      	ldr	r3, [r0, #8]
    7852:	fa23 f101 	lsr.w	r1, r3, r1
    7856:	07c9      	lsls	r1, r1, #31
    7858:	d42f      	bmi.n	78ba <gpio_nrfx_pin_interrupt_configure+0xa6>
    785a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    785e:	d12c      	bne.n	78ba <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    7860:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    7862:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    7864:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    7868:	4a1c      	ldr	r2, [pc, #112]	; (78dc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    786a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    786e:	bf18      	it	ne
    7870:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    7878:	07db      	lsls	r3, r3, #31
    787a:	d41e      	bmi.n	78ba <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    787c:	f10d 0407 	add.w	r4, sp, #7
    7880:	4621      	mov	r1, r4
    7882:	4628      	mov	r0, r5
    7884:	f001 f9f8 	bl	8c78 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    7888:	4b15      	ldr	r3, [pc, #84]	; (78e0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    788a:	4298      	cmp	r0, r3
    788c:	d114      	bne.n	78b8 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    788e:	4620      	mov	r0, r4
    7890:	f001 fa40 	bl	8d14 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    7894:	4b13      	ldr	r3, [pc, #76]	; (78e4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    7896:	4298      	cmp	r0, r3
    7898:	d00e      	beq.n	78b8 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    789a:	f06f 000b 	mvn.w	r0, #11
}
    789e:	b005      	add	sp, #20
    78a0:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    78a2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    78a6:	d005      	beq.n	78b4 <gpio_nrfx_pin_interrupt_configure+0xa0>
    78a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    78ac:	bf0c      	ite	eq
    78ae:	2302      	moveq	r3, #2
    78b0:	2301      	movne	r3, #1
    78b2:	e7cb      	b.n	784c <gpio_nrfx_pin_interrupt_configure+0x38>
    78b4:	2303      	movs	r3, #3
    78b6:	e7c9      	b.n	784c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    78b8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    78ba:	2300      	movs	r3, #0
    78bc:	4619      	mov	r1, r3
    78be:	aa02      	add	r2, sp, #8
    78c0:	4628      	mov	r0, r5
    78c2:	f001 f8b3 	bl	8a2c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    78c6:	4b07      	ldr	r3, [pc, #28]	; (78e4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    78c8:	4298      	cmp	r0, r3
    78ca:	d104      	bne.n	78d6 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    78cc:	2101      	movs	r1, #1
    78ce:	4628      	mov	r0, r5
    78d0:	f001 fa26 	bl	8d20 <nrfx_gpiote_trigger_enable>
    78d4:	e7ae      	b.n	7834 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    78d6:	f06f 0004 	mvn.w	r0, #4
    78da:	e7e0      	b.n	789e <gpio_nrfx_pin_interrupt_configure+0x8a>
    78dc:	50000300 	.word	0x50000300
    78e0:	0bad0004 	.word	0x0bad0004
    78e4:	0bad0000 	.word	0x0bad0000

000078e8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    78e8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    78ea:	f001 fa03 	bl	8cf4 <nrfx_gpiote_is_init>
    78ee:	4604      	mov	r4, r0
    78f0:	b968      	cbnz	r0, 790e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    78f2:	f001 f9d7 	bl	8ca4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    78f6:	4b08      	ldr	r3, [pc, #32]	; (7918 <gpio_nrfx_init+0x30>)
    78f8:	4298      	cmp	r0, r3
    78fa:	d10a      	bne.n	7912 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    78fc:	4807      	ldr	r0, [pc, #28]	; (791c <gpio_nrfx_init+0x34>)
    78fe:	4621      	mov	r1, r4
    7900:	f001 f9b4 	bl	8c6c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    7904:	4622      	mov	r2, r4
    7906:	2105      	movs	r1, #5
    7908:	2006      	movs	r0, #6
    790a:	f7fe f863 	bl	59d4 <z_arm_irq_priority_set>
		return 0;
    790e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    7910:	bd10      	pop	{r4, pc}
		return -EIO;
    7912:	f06f 0004 	mvn.w	r0, #4
    7916:	e7fb      	b.n	7910 <gpio_nrfx_init+0x28>
    7918:	0bad0000 	.word	0x0bad0000
    791c:	00007921 	.word	0x00007921

00007920 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7920:	0942      	lsrs	r2, r0, #5
{
    7922:	b570      	push	{r4, r5, r6, lr}
    7924:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7926:	d002      	beq.n	792e <nrfx_gpio_handler+0xe>
    7928:	2a01      	cmp	r2, #1
    792a:	d015      	beq.n	7958 <nrfx_gpio_handler+0x38>
}
    792c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    792e:	4e0b      	ldr	r6, [pc, #44]	; (795c <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    7930:	6932      	ldr	r2, [r6, #16]
    7932:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7934:	2900      	cmp	r1, #0
    7936:	d0f9      	beq.n	792c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    7938:	f003 031f 	and.w	r3, r3, #31
    793c:	2501      	movs	r5, #1
    793e:	680c      	ldr	r4, [r1, #0]
    7940:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    7942:	688a      	ldr	r2, [r1, #8]
    7944:	402a      	ands	r2, r5
    7946:	d002      	beq.n	794e <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7948:	684b      	ldr	r3, [r1, #4]
    794a:	4630      	mov	r0, r6
    794c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    794e:	2c00      	cmp	r4, #0
    7950:	d0ec      	beq.n	792c <nrfx_gpio_handler+0xc>
    7952:	4621      	mov	r1, r4
    7954:	6824      	ldr	r4, [r4, #0]
    7956:	e7f4      	b.n	7942 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7958:	4e01      	ldr	r6, [pc, #4]	; (7960 <nrfx_gpio_handler+0x40>)
    795a:	e7e9      	b.n	7930 <nrfx_gpio_handler+0x10>
    795c:	0000f4c0 	.word	0x0000f4c0
    7960:	0000f4d8 	.word	0x0000f4d8

00007964 <gpio_nrfx_pin_configure>:
{
    7964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    7968:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    796a:	7b3b      	ldrb	r3, [r7, #12]
    796c:	f001 051f 	and.w	r5, r1, #31
{
    7970:	b085      	sub	sp, #20
    7972:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7974:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    7978:	4614      	mov	r4, r2
    797a:	b9ca      	cbnz	r2, 79b0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    797c:	a902      	add	r1, sp, #8
    797e:	4628      	mov	r0, r5
    7980:	f001 f97a 	bl	8c78 <nrfx_gpiote_channel_get>
    7984:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    7986:	4628      	mov	r0, r5
    7988:	f001 fa3a 	bl	8e00 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    798c:	4b48      	ldr	r3, [pc, #288]	; (7ab0 <gpio_nrfx_pin_configure+0x14c>)
    798e:	4298      	cmp	r0, r3
    7990:	d004      	beq.n	799c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    7992:	f06f 0004 	mvn.w	r0, #4
}
    7996:	b005      	add	sp, #20
    7998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    799c:	4284      	cmp	r4, r0
    799e:	d105      	bne.n	79ac <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    79a0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    79a4:	f001 f9b0 	bl	8d08 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    79a8:	42a0      	cmp	r0, r4
    79aa:	d1f2      	bne.n	7992 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    79ac:	2000      	movs	r0, #0
    79ae:	e7f2      	b.n	7996 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    79b0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    79b4:	f10d 0103 	add.w	r1, sp, #3
    79b8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    79ba:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    79be:	f001 f95b 	bl	8c78 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    79c2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    79c4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    79c6:	aa02      	add	r2, sp, #8
    79c8:	4649      	mov	r1, r9
    79ca:	4628      	mov	r0, r5
    79cc:	f001 f82e 	bl	8a2c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    79d0:	4b37      	ldr	r3, [pc, #220]	; (7ab0 <gpio_nrfx_pin_configure+0x14c>)
    79d2:	4298      	cmp	r0, r3
    79d4:	d002      	beq.n	79dc <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    79d6:	f06f 0015 	mvn.w	r0, #21
    79da:	e7dc      	b.n	7996 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    79dc:	4580      	cmp	r8, r0
    79de:	d103      	bne.n	79e8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    79e0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    79e4:	f001 f990 	bl	8d08 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    79e8:	05a3      	lsls	r3, r4, #22
    79ea:	d54e      	bpl.n	7a8a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    79ec:	4b31      	ldr	r3, [pc, #196]	; (7ab4 <gpio_nrfx_pin_configure+0x150>)
    79ee:	4a32      	ldr	r2, [pc, #200]	; (7ab8 <gpio_nrfx_pin_configure+0x154>)
    79f0:	4023      	ands	r3, r4
    79f2:	4293      	cmp	r3, r2
    79f4:	d03a      	beq.n	7a6c <gpio_nrfx_pin_configure+0x108>
    79f6:	d80c      	bhi.n	7a12 <gpio_nrfx_pin_configure+0xae>
    79f8:	2b06      	cmp	r3, #6
    79fa:	d014      	beq.n	7a26 <gpio_nrfx_pin_configure+0xc2>
    79fc:	d804      	bhi.n	7a08 <gpio_nrfx_pin_configure+0xa4>
    79fe:	b193      	cbz	r3, 7a26 <gpio_nrfx_pin_configure+0xc2>
    7a00:	2b02      	cmp	r3, #2
    7a02:	d1e8      	bne.n	79d6 <gpio_nrfx_pin_configure+0x72>
    7a04:	2304      	movs	r3, #4
    7a06:	e00e      	b.n	7a26 <gpio_nrfx_pin_configure+0xc2>
    7a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7a0c:	d1e3      	bne.n	79d6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    7a0e:	2301      	movs	r3, #1
    7a10:	e009      	b.n	7a26 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7a12:	4a2a      	ldr	r2, [pc, #168]	; (7abc <gpio_nrfx_pin_configure+0x158>)
    7a14:	4293      	cmp	r3, r2
    7a16:	d02b      	beq.n	7a70 <gpio_nrfx_pin_configure+0x10c>
    7a18:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    7a1c:	d02a      	beq.n	7a74 <gpio_nrfx_pin_configure+0x110>
    7a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    7a22:	d1d8      	bne.n	79d6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    7a24:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    7a26:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    7a2a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    7a2e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    7a32:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    7a34:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    7a38:	bf54      	ite	pl
    7a3a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    7a3e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7a40:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    7a42:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7a46:	d517      	bpl.n	7a78 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	2101      	movs	r1, #1
    7a4c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    7a50:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    7a54:	2200      	movs	r2, #0
    7a56:	a901      	add	r1, sp, #4
    7a58:	4628      	mov	r0, r5
    7a5a:	f001 f895 	bl	8b88 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7a5e:	4b14      	ldr	r3, [pc, #80]	; (7ab0 <gpio_nrfx_pin_configure+0x14c>)
    7a60:	4298      	cmp	r0, r3
    7a62:	bf14      	ite	ne
    7a64:	f06f 0015 	mvnne.w	r0, #21
    7a68:	2000      	moveq	r0, #0
    7a6a:	e794      	b.n	7996 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    7a6c:	2307      	movs	r3, #7
    7a6e:	e7da      	b.n	7a26 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    7a70:	2305      	movs	r3, #5
    7a72:	e7d8      	b.n	7a26 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    7a74:	2303      	movs	r3, #3
    7a76:	e7d6      	b.n	7a26 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    7a78:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    7a7a:	bf41      	itttt	mi
    7a7c:	687b      	ldrmi	r3, [r7, #4]
    7a7e:	2101      	movmi	r1, #1
    7a80:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    7a84:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    7a88:	e7e4      	b.n	7a54 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    7a8a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7a8c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    7a90:	bf54      	ite	pl
    7a92:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    7a96:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7a98:	461a      	mov	r2, r3
    7a9a:	a901      	add	r1, sp, #4
    7a9c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    7a9e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7aa2:	f000 ffc3 	bl	8a2c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7aa6:	4b02      	ldr	r3, [pc, #8]	; (7ab0 <gpio_nrfx_pin_configure+0x14c>)
    7aa8:	4298      	cmp	r0, r3
    7aaa:	f43f af7f 	beq.w	79ac <gpio_nrfx_pin_configure+0x48>
    7aae:	e792      	b.n	79d6 <gpio_nrfx_pin_configure+0x72>
    7ab0:	0bad0000 	.word	0x0bad0000
    7ab4:	00f00006 	.word	0x00f00006
    7ab8:	00100006 	.word	0x00100006
    7abc:	00400002 	.word	0x00400002

00007ac0 <print_all_reset_causes>:
		return "unknown";
	}
}

static void print_all_reset_causes(const struct shell *sh, uint32_t cause)
{
    7ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
		if (cause & cause_mask) {
			shell_print(sh, "- %s",
    7ac4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 7b74 <print_all_reset_causes+0xb4>
		return "security";
    7ac8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 7b78 <print_all_reset_causes+0xb8>
		return "parity error";
    7acc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 7b7c <print_all_reset_causes+0xbc>
{
    7ad0:	4607      	mov	r7, r0
    7ad2:	460d      	mov	r5, r1
    7ad4:	2620      	movs	r6, #32
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
    7ad6:	2401      	movs	r4, #1
		if (cause & cause_mask) {
    7ad8:	ea15 0204 	ands.w	r2, r5, r4
    7adc:	d013      	beq.n	7b06 <print_all_reset_causes+0x46>
	switch (cause) {
    7ade:	2a40      	cmp	r2, #64	; 0x40
    7ae0:	d03c      	beq.n	7b5c <print_all_reset_causes+0x9c>
    7ae2:	d81e      	bhi.n	7b22 <print_all_reset_causes+0x62>
    7ae4:	2a08      	cmp	r2, #8
    7ae6:	d814      	bhi.n	7b12 <print_all_reset_causes+0x52>
    7ae8:	3a01      	subs	r2, #1
    7aea:	2a07      	cmp	r2, #7
    7aec:	d834      	bhi.n	7b58 <print_all_reset_causes+0x98>
    7aee:	e8df f002 	tbb	[pc, r2]
    7af2:	0437      	.short	0x0437
    7af4:	33332f33 	.word	0x33332f33
    7af8:	3133      	.short	0x3133
    7afa:	4b21      	ldr	r3, [pc, #132]	; (7b80 <print_all_reset_causes+0xc0>)
			shell_print(sh, "- %s",
    7afc:	4652      	mov	r2, sl
    7afe:	2108      	movs	r1, #8
    7b00:	4638      	mov	r0, r7
    7b02:	f005 f8fd 	bl	cd00 <shell_fprintf>
	for (uint32_t cause_mask = 1; cause_mask; cause_mask <<= 1) {
    7b06:	3e01      	subs	r6, #1
    7b08:	ea4f 0444 	mov.w	r4, r4, lsl #1
    7b0c:	d1e4      	bne.n	7ad8 <print_all_reset_causes+0x18>
				    cause_to_string(cause & cause_mask));
		}
	}
}
    7b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (cause) {
    7b12:	2a10      	cmp	r2, #16
    7b14:	d026      	beq.n	7b64 <print_all_reset_causes+0xa4>
		return "debug";
    7b16:	4b1b      	ldr	r3, [pc, #108]	; (7b84 <print_all_reset_causes+0xc4>)
    7b18:	491b      	ldr	r1, [pc, #108]	; (7b88 <print_all_reset_causes+0xc8>)
    7b1a:	2a20      	cmp	r2, #32
    7b1c:	bf08      	it	eq
    7b1e:	460b      	moveq	r3, r1
    7b20:	e7ec      	b.n	7afc <print_all_reset_causes+0x3c>
	switch (cause) {
    7b22:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    7b26:	d01f      	beq.n	7b68 <print_all_reset_causes+0xa8>
    7b28:	d808      	bhi.n	7b3c <print_all_reset_causes+0x7c>
    7b2a:	2a80      	cmp	r2, #128	; 0x80
    7b2c:	d01e      	beq.n	7b6c <print_all_reset_causes+0xac>
		return "CPU lockup";
    7b2e:	4b15      	ldr	r3, [pc, #84]	; (7b84 <print_all_reset_causes+0xc4>)
    7b30:	4916      	ldr	r1, [pc, #88]	; (7b8c <print_all_reset_causes+0xcc>)
    7b32:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    7b36:	bf08      	it	eq
    7b38:	460b      	moveq	r3, r1
    7b3a:	e7df      	b.n	7afc <print_all_reset_causes+0x3c>
	switch (cause) {
    7b3c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    7b40:	d016      	beq.n	7b70 <print_all_reset_causes+0xb0>
		return "clock";
    7b42:	4b10      	ldr	r3, [pc, #64]	; (7b84 <print_all_reset_causes+0xc4>)
    7b44:	4912      	ldr	r1, [pc, #72]	; (7b90 <print_all_reset_causes+0xd0>)
    7b46:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    7b4a:	bf08      	it	eq
    7b4c:	460b      	moveq	r3, r1
    7b4e:	e7d5      	b.n	7afc <print_all_reset_causes+0x3c>
		return "brownout";
    7b50:	4b10      	ldr	r3, [pc, #64]	; (7b94 <print_all_reset_causes+0xd4>)
    7b52:	e7d3      	b.n	7afc <print_all_reset_causes+0x3c>
		return "power-on reset";
    7b54:	4b10      	ldr	r3, [pc, #64]	; (7b98 <print_all_reset_causes+0xd8>)
    7b56:	e7d1      	b.n	7afc <print_all_reset_causes+0x3c>
		return "unknown";
    7b58:	4b0a      	ldr	r3, [pc, #40]	; (7b84 <print_all_reset_causes+0xc4>)
    7b5a:	e7cf      	b.n	7afc <print_all_reset_causes+0x3c>
		return "security";
    7b5c:	4643      	mov	r3, r8
    7b5e:	e7cd      	b.n	7afc <print_all_reset_causes+0x3c>
		return "pin";
    7b60:	4b0e      	ldr	r3, [pc, #56]	; (7b9c <print_all_reset_causes+0xdc>)
    7b62:	e7cb      	b.n	7afc <print_all_reset_causes+0x3c>
		return "watchdog";
    7b64:	4b0e      	ldr	r3, [pc, #56]	; (7ba0 <print_all_reset_causes+0xe0>)
    7b66:	e7c9      	b.n	7afc <print_all_reset_causes+0x3c>
		return "parity error";
    7b68:	464b      	mov	r3, r9
    7b6a:	e7c7      	b.n	7afc <print_all_reset_causes+0x3c>
		return "low power wake-up";
    7b6c:	4b0d      	ldr	r3, [pc, #52]	; (7ba4 <print_all_reset_causes+0xe4>)
    7b6e:	e7c5      	b.n	7afc <print_all_reset_causes+0x3c>
		return "PLL error";
    7b70:	4b0d      	ldr	r3, [pc, #52]	; (7ba8 <print_all_reset_causes+0xe8>)
    7b72:	e7c3      	b.n	7afc <print_all_reset_causes+0x3c>
    7b74:	000107fd 	.word	0x000107fd
    7b78:	00011dff 	.word	0x00011dff
    7b7c:	00011e08 	.word	0x00011e08
    7b80:	00011ded 	.word	0x00011ded
    7b84:	00011dc9 	.word	0x00011dc9
    7b88:	00011e27 	.word	0x00011e27
    7b8c:	00011e2d 	.word	0x00011e2d
    7b90:	00011e42 	.word	0x00011e42
    7b94:	00011dd5 	.word	0x00011dd5
    7b98:	00011dde 	.word	0x00011dde
    7b9c:	00011dd1 	.word	0x00011dd1
    7ba0:	00011df6 	.word	0x00011df6
    7ba4:	00011e15 	.word	0x00011e15
    7ba8:	00011e38 	.word	0x00011e38

00007bac <cmd_supported_reset_cause>:
	return 0;
}

static int cmd_supported_reset_cause(const struct shell *sh, size_t argc,
				     char **argv)
{
    7bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7bae:	4605      	mov	r5, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&supported, K_SYSCALL_HWINFO_GET_SUPPORTED_RESET_CAUSE);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_supported_reset_cause(supported);
    7bb0:	a801      	add	r0, sp, #4
    7bb2:	f006 fc4e 	bl	e452 <z_impl_hwinfo_get_supported_reset_cause>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	res = hwinfo_get_supported_reset_cause(&cause);
	if (res == -ENOTSUP) {
    7bb6:	f110 0f86 	cmn.w	r0, #134	; 0x86
    7bba:	4604      	mov	r4, r0
    7bbc:	d111      	bne.n	7be2 <cmd_supported_reset_cause+0x36>
		shell_error(sh, "Not supported by hardware");
    7bbe:	4a11      	ldr	r2, [pc, #68]	; (7c04 <cmd_supported_reset_cause+0x58>)
    7bc0:	2101      	movs	r1, #1
    7bc2:	4628      	mov	r0, r5
    7bc4:	f005 f89c 	bl	cd00 <shell_fprintf>
	} else if (res != 0) {
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
		return res;
	}

	if (cause != 0) {
    7bc8:	9c01      	ldr	r4, [sp, #4]
    7bca:	b1ac      	cbz	r4, 7bf8 <cmd_supported_reset_cause+0x4c>
		shell_print(sh, "supported reset causes:");
    7bcc:	4a0e      	ldr	r2, [pc, #56]	; (7c08 <cmd_supported_reset_cause+0x5c>)
    7bce:	2108      	movs	r1, #8
    7bd0:	4628      	mov	r0, r5
    7bd2:	f005 f895 	bl	cd00 <shell_fprintf>
		print_all_reset_causes(sh, cause);
    7bd6:	9901      	ldr	r1, [sp, #4]
    7bd8:	4628      	mov	r0, r5
    7bda:	f7ff ff71 	bl	7ac0 <print_all_reset_causes>
	} else {
		shell_print(sh, "No causes supporte");
	}

	return 0;
    7bde:	2400      	movs	r4, #0
    7be0:	e007      	b.n	7bf2 <cmd_supported_reset_cause+0x46>
	} else if (res != 0) {
    7be2:	2800      	cmp	r0, #0
    7be4:	d0f0      	beq.n	7bc8 <cmd_supported_reset_cause+0x1c>
		shell_error(sh, "Could not get the supported reset causes [%d]", res);
    7be6:	4603      	mov	r3, r0
    7be8:	4a08      	ldr	r2, [pc, #32]	; (7c0c <cmd_supported_reset_cause+0x60>)
    7bea:	2101      	movs	r1, #1
    7bec:	4628      	mov	r0, r5
    7bee:	f005 f887 	bl	cd00 <shell_fprintf>
}
    7bf2:	4620      	mov	r0, r4
    7bf4:	b003      	add	sp, #12
    7bf6:	bd30      	pop	{r4, r5, pc}
		shell_print(sh, "No causes supporte");
    7bf8:	4a05      	ldr	r2, [pc, #20]	; (7c10 <cmd_supported_reset_cause+0x64>)
    7bfa:	2108      	movs	r1, #8
    7bfc:	4628      	mov	r0, r5
    7bfe:	f005 f87f 	bl	cd00 <shell_fprintf>
    7c02:	e7f6      	b.n	7bf2 <cmd_supported_reset_cause+0x46>
    7c04:	00011e48 	.word	0x00011e48
    7c08:	00011e92 	.word	0x00011e92
    7c0c:	00011e63 	.word	0x00011e63
    7c10:	00011eab 	.word	0x00011eab

00007c14 <cmd_show_reset_cause>:
{
    7c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7c16:	4604      	mov	r4, r0
	return z_impl_hwinfo_get_reset_cause(cause);
    7c18:	a801      	add	r0, sp, #4
    7c1a:	f006 fbf5 	bl	e408 <z_impl_hwinfo_get_reset_cause>
	if (res == -ENOTSUP) {
    7c1e:	f110 0f86 	cmn.w	r0, #134	; 0x86
    7c22:	4605      	mov	r5, r0
    7c24:	d105      	bne.n	7c32 <cmd_show_reset_cause+0x1e>
		shell_error(sh, "Not supported by hardware");
    7c26:	4a0f      	ldr	r2, [pc, #60]	; (7c64 <cmd_show_reset_cause+0x50>)
    7c28:	2101      	movs	r1, #1
		shell_print(sh, "No reset cause set");
    7c2a:	4620      	mov	r0, r4
    7c2c:	f005 f868 	bl	cd00 <shell_fprintf>
    7c30:	e006      	b.n	7c40 <cmd_show_reset_cause+0x2c>
	} else if (res != 0) {
    7c32:	b140      	cbz	r0, 7c46 <cmd_show_reset_cause+0x32>
		shell_error(sh, "Error reading the cause [%d]", res);
    7c34:	4603      	mov	r3, r0
    7c36:	4a0c      	ldr	r2, [pc, #48]	; (7c68 <cmd_show_reset_cause+0x54>)
    7c38:	2101      	movs	r1, #1
    7c3a:	4620      	mov	r0, r4
    7c3c:	f005 f860 	bl	cd00 <shell_fprintf>
}
    7c40:	4628      	mov	r0, r5
    7c42:	b003      	add	sp, #12
    7c44:	bd30      	pop	{r4, r5, pc}
	if (cause != 0) {
    7c46:	9b01      	ldr	r3, [sp, #4]
    7c48:	b14b      	cbz	r3, 7c5e <cmd_show_reset_cause+0x4a>
		shell_print(sh, "reset caused by:");
    7c4a:	4620      	mov	r0, r4
    7c4c:	4a07      	ldr	r2, [pc, #28]	; (7c6c <cmd_show_reset_cause+0x58>)
    7c4e:	2108      	movs	r1, #8
    7c50:	f005 f856 	bl	cd00 <shell_fprintf>
		print_all_reset_causes(sh, cause);
    7c54:	9901      	ldr	r1, [sp, #4]
    7c56:	4620      	mov	r0, r4
    7c58:	f7ff ff32 	bl	7ac0 <print_all_reset_causes>
    7c5c:	e7f0      	b.n	7c40 <cmd_show_reset_cause+0x2c>
		shell_print(sh, "No reset cause set");
    7c5e:	4a04      	ldr	r2, [pc, #16]	; (7c70 <cmd_show_reset_cause+0x5c>)
    7c60:	2108      	movs	r1, #8
    7c62:	e7e2      	b.n	7c2a <cmd_show_reset_cause+0x16>
    7c64:	00011e48 	.word	0x00011e48
    7c68:	00011ebf 	.word	0x00011ebf
    7c6c:	00011edd 	.word	0x00011edd
    7c70:	00011eef 	.word	0x00011eef

00007c74 <cmd_clear_reset_cause>:
{
    7c74:	b538      	push	{r3, r4, r5, lr}
    7c76:	4605      	mov	r5, r0
	return z_impl_hwinfo_clear_reset_cause();
    7c78:	f006 fbe3 	bl	e442 <z_impl_hwinfo_clear_reset_cause>
	if (res == -ENOTSUP) {
    7c7c:	f110 0f86 	cmn.w	r0, #134	; 0x86
    7c80:	4604      	mov	r4, r0
    7c82:	d107      	bne.n	7c94 <cmd_clear_reset_cause+0x20>
		shell_error(sh, "Not supported by hardware");
    7c84:	4a08      	ldr	r2, [pc, #32]	; (7ca8 <cmd_clear_reset_cause+0x34>)
    7c86:	2101      	movs	r1, #1
    7c88:	4628      	mov	r0, r5
    7c8a:	f005 f839 	bl	cd00 <shell_fprintf>
    7c8e:	2400      	movs	r4, #0
}
    7c90:	4620      	mov	r0, r4
    7c92:	bd38      	pop	{r3, r4, r5, pc}
	} else if (res != 0) {
    7c94:	2800      	cmp	r0, #0
    7c96:	d0fb      	beq.n	7c90 <cmd_clear_reset_cause+0x1c>
		shell_error(sh, "Error clearing the reset causes [%d]", res);
    7c98:	4603      	mov	r3, r0
    7c9a:	4a04      	ldr	r2, [pc, #16]	; (7cac <cmd_clear_reset_cause+0x38>)
    7c9c:	2101      	movs	r1, #1
    7c9e:	4628      	mov	r0, r5
    7ca0:	f005 f82e 	bl	cd00 <shell_fprintf>
		return res;
    7ca4:	e7f4      	b.n	7c90 <cmd_clear_reset_cause+0x1c>
    7ca6:	bf00      	nop
    7ca8:	00011e48 	.word	0x00011e48
    7cac:	00011f03 	.word	0x00011f03

00007cb0 <cmd_get_device_id>:
{
    7cb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7cb4:	4605      	mov	r5, r0
	return z_impl_hwinfo_get_device_id(buffer, length);
    7cb6:	2110      	movs	r1, #16
    7cb8:	4668      	mov	r0, sp
    7cba:	f006 fb6e 	bl	e39a <z_impl_hwinfo_get_device_id>
	if (length == -ENOTSUP) {
    7cbe:	f110 0f86 	cmn.w	r0, #134	; 0x86
    7cc2:	4604      	mov	r4, r0
    7cc4:	d108      	bne.n	7cd8 <cmd_get_device_id+0x28>
		shell_error(sh, "Not supported by hardware");
    7cc6:	4a19      	ldr	r2, [pc, #100]	; (7d2c <cmd_get_device_id+0x7c>)
    7cc8:	2101      	movs	r1, #1
    7cca:	4628      	mov	r0, r5
    7ccc:	f005 f818 	bl	cd00 <shell_fprintf>
}
    7cd0:	4620      	mov	r0, r4
    7cd2:	b004      	add	sp, #16
    7cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (length < 0) {
    7cd8:	2800      	cmp	r0, #0
		shell_error(sh, "Error: %zd", length);
    7cda:	4603      	mov	r3, r0
	} else if (length < 0) {
    7cdc:	da05      	bge.n	7cea <cmd_get_device_id+0x3a>
		shell_error(sh, "Error: %zd", length);
    7cde:	4a14      	ldr	r2, [pc, #80]	; (7d30 <cmd_get_device_id+0x80>)
    7ce0:	2101      	movs	r1, #1
    7ce2:	4628      	mov	r0, r5
    7ce4:	f005 f80c 	bl	cd00 <shell_fprintf>
		return length;
    7ce8:	e7f2      	b.n	7cd0 <cmd_get_device_id+0x20>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
    7cea:	4a12      	ldr	r2, [pc, #72]	; (7d34 <cmd_get_device_id+0x84>)
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
    7cec:	f8df 8048 	ldr.w	r8, [pc, #72]	; 7d38 <cmd_get_device_id+0x88>
	shell_fprintf(sh, SHELL_NORMAL, "Length: %zd\n", length);
    7cf0:	2108      	movs	r1, #8
    7cf2:	4628      	mov	r0, r5
    7cf4:	f005 f804 	bl	cd00 <shell_fprintf>
	shell_fprintf(sh, SHELL_NORMAL, "ID: 0x");
    7cf8:	4a10      	ldr	r2, [pc, #64]	; (7d3c <cmd_get_device_id+0x8c>)
    7cfa:	2108      	movs	r1, #8
    7cfc:	4628      	mov	r0, r5
    7cfe:	f004 ffff 	bl	cd00 <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    7d02:	466e      	mov	r6, sp
    7d04:	2700      	movs	r7, #0
    7d06:	42a7      	cmp	r7, r4
    7d08:	d106      	bne.n	7d18 <cmd_get_device_id+0x68>
	shell_fprintf(sh, SHELL_NORMAL, "\n");
    7d0a:	4a0d      	ldr	r2, [pc, #52]	; (7d40 <cmd_get_device_id+0x90>)
    7d0c:	2108      	movs	r1, #8
    7d0e:	4628      	mov	r0, r5
    7d10:	f004 fff6 	bl	cd00 <shell_fprintf>
	return 0;
    7d14:	2400      	movs	r4, #0
    7d16:	e7db      	b.n	7cd0 <cmd_get_device_id+0x20>
		shell_fprintf(sh, SHELL_NORMAL, "%02x", dev_id[i]);
    7d18:	f816 3b01 	ldrb.w	r3, [r6], #1
    7d1c:	4642      	mov	r2, r8
    7d1e:	2108      	movs	r1, #8
    7d20:	4628      	mov	r0, r5
    7d22:	f004 ffed 	bl	cd00 <shell_fprintf>
	for (i = 0 ; i < length ; i++) {
    7d26:	3701      	adds	r7, #1
    7d28:	e7ed      	b.n	7d06 <cmd_get_device_id+0x56>
    7d2a:	bf00      	nop
    7d2c:	00011e48 	.word	0x00011e48
    7d30:	00011f29 	.word	0x00011f29
    7d34:	00011f35 	.word	0x00011f35
    7d38:	00011be4 	.word	0x00011be4
    7d3c:	00011f42 	.word	0x00011f42
    7d40:	000106d4 	.word	0x000106d4

00007d44 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7d44:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    7d46:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7d4a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    7d4c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    7d4e:	6002      	str	r2, [r0, #0]
}
    7d50:	4802      	ldr	r0, [pc, #8]	; (7d5c <nrf_gpio_pin_port_decode+0x18>)
    7d52:	bf18      	it	ne
    7d54:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    7d58:	4770      	bx	lr
    7d5a:	bf00      	nop
    7d5c:	50000300 	.word	0x50000300

00007d60 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    7d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    7d62:	794b      	ldrb	r3, [r1, #5]
    7d64:	2b01      	cmp	r3, #1
    7d66:	d026      	beq.n	7db6 <uarte_nrfx_configure+0x56>
    7d68:	2b03      	cmp	r3, #3
    7d6a:	d121      	bne.n	7db0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    7d6c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    7d6e:	798b      	ldrb	r3, [r1, #6]
    7d70:	2b03      	cmp	r3, #3
    7d72:	d11d      	bne.n	7db0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    7d74:	79cc      	ldrb	r4, [r1, #7]
    7d76:	b10c      	cbz	r4, 7d7c <uarte_nrfx_configure+0x1c>
    7d78:	2c01      	cmp	r4, #1
    7d7a:	d119      	bne.n	7db0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    7d7c:	790a      	ldrb	r2, [r1, #4]
    7d7e:	b112      	cbz	r2, 7d86 <uarte_nrfx_configure+0x26>
    7d80:	2a02      	cmp	r2, #2
    7d82:	d115      	bne.n	7db0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    7d84:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    7d86:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    7d88:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    7d8a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    7d8e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    7d90:	d065      	beq.n	7e5e <uarte_nrfx_configure+0xfe>
    7d92:	d82d      	bhi.n	7df0 <uarte_nrfx_configure+0x90>
    7d94:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    7d98:	d064      	beq.n	7e64 <uarte_nrfx_configure+0x104>
    7d9a:	d816      	bhi.n	7dca <uarte_nrfx_configure+0x6a>
    7d9c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    7da0:	d062      	beq.n	7e68 <uarte_nrfx_configure+0x108>
    7da2:	d80a      	bhi.n	7dba <uarte_nrfx_configure+0x5a>
    7da4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    7da8:	d061      	beq.n	7e6e <uarte_nrfx_configure+0x10e>
    7daa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    7dae:	d061      	beq.n	7e74 <uarte_nrfx_configure+0x114>
    7db0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7db4:	e052      	b.n	7e5c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    7db6:	2600      	movs	r6, #0
    7db8:	e7d9      	b.n	7d6e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    7dba:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    7dbe:	d05c      	beq.n	7e7a <uarte_nrfx_configure+0x11a>
    7dc0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    7dc4:	d1f4      	bne.n	7db0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    7dc6:	4b37      	ldr	r3, [pc, #220]	; (7ea4 <uarte_nrfx_configure+0x144>)
    7dc8:	e03c      	b.n	7e44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7dca:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    7dce:	d057      	beq.n	7e80 <uarte_nrfx_configure+0x120>
    7dd0:	d807      	bhi.n	7de2 <uarte_nrfx_configure+0x82>
    7dd2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    7dd6:	d055      	beq.n	7e84 <uarte_nrfx_configure+0x124>
    7dd8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    7ddc:	d1e8      	bne.n	7db0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    7dde:	4b32      	ldr	r3, [pc, #200]	; (7ea8 <uarte_nrfx_configure+0x148>)
    7de0:	e030      	b.n	7e44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7de2:	f647 2712 	movw	r7, #31250	; 0x7a12
    7de6:	42bb      	cmp	r3, r7
    7de8:	d1e2      	bne.n	7db0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    7dea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7dee:	e029      	b.n	7e44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7df0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    7df4:	d048      	beq.n	7e88 <uarte_nrfx_configure+0x128>
    7df6:	d813      	bhi.n	7e20 <uarte_nrfx_configure+0xc0>
    7df8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    7dfc:	d047      	beq.n	7e8e <uarte_nrfx_configure+0x12e>
    7dfe:	d809      	bhi.n	7e14 <uarte_nrfx_configure+0xb4>
    7e00:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    7e04:	42bb      	cmp	r3, r7
    7e06:	d044      	beq.n	7e92 <uarte_nrfx_configure+0x132>
    7e08:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    7e0c:	d1d0      	bne.n	7db0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    7e0e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    7e12:	e017      	b.n	7e44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7e14:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    7e18:	d1ca      	bne.n	7db0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    7e1a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    7e1e:	e011      	b.n	7e44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7e20:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    7e24:	d038      	beq.n	7e98 <uarte_nrfx_configure+0x138>
    7e26:	d808      	bhi.n	7e3a <uarte_nrfx_configure+0xda>
    7e28:	4f20      	ldr	r7, [pc, #128]	; (7eac <uarte_nrfx_configure+0x14c>)
    7e2a:	42bb      	cmp	r3, r7
    7e2c:	d037      	beq.n	7e9e <uarte_nrfx_configure+0x13e>
    7e2e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    7e32:	d1bd      	bne.n	7db0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    7e34:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    7e38:	e004      	b.n	7e44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7e3a:	4f1d      	ldr	r7, [pc, #116]	; (7eb0 <uarte_nrfx_configure+0x150>)
    7e3c:	42bb      	cmp	r3, r7
    7e3e:	d1b7      	bne.n	7db0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    7e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    7e44:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    7e46:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    7e4a:	1d03      	adds	r3, r0, #4
    7e4c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    7e4e:	4334      	orrs	r4, r6
    7e50:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    7e52:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    7e56:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    7e5a:	2000      	movs	r0, #0
}
    7e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    7e5e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    7e62:	e7ef      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    7e64:	4b13      	ldr	r3, [pc, #76]	; (7eb4 <uarte_nrfx_configure+0x154>)
    7e66:	e7ed      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    7e68:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7e6c:	e7ea      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    7e6e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    7e72:	e7e7      	b.n	7e44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7e74:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    7e78:	e7e4      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    7e7a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    7e7e:	e7e1      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    7e80:	4b0d      	ldr	r3, [pc, #52]	; (7eb8 <uarte_nrfx_configure+0x158>)
    7e82:	e7df      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    7e84:	4b0d      	ldr	r3, [pc, #52]	; (7ebc <uarte_nrfx_configure+0x15c>)
    7e86:	e7dd      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    7e88:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    7e8c:	e7da      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    7e8e:	4b0c      	ldr	r3, [pc, #48]	; (7ec0 <uarte_nrfx_configure+0x160>)
    7e90:	e7d8      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    7e92:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7e96:	e7d5      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    7e98:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    7e9c:	e7d2      	b.n	7e44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    7e9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7ea2:	e7cf      	b.n	7e44 <uarte_nrfx_configure+0xe4>
    7ea4:	0013b000 	.word	0x0013b000
    7ea8:	004ea000 	.word	0x004ea000
    7eac:	0003d090 	.word	0x0003d090
    7eb0:	000f4240 	.word	0x000f4240
    7eb4:	00275000 	.word	0x00275000
    7eb8:	0075c000 	.word	0x0075c000
    7ebc:	003af000 	.word	0x003af000
    7ec0:	013a9000 	.word	0x013a9000

00007ec4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    7ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    7ec6:	6906      	ldr	r6, [r0, #16]
{
    7ec8:	4605      	mov	r5, r0
    7eca:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7ecc:	f006 fe33 	bl	eb36 <k_is_in_isr>
    7ed0:	b910      	cbnz	r0, 7ed8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    7ed2:	4b20      	ldr	r3, [pc, #128]	; (7f54 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    7ed4:	781b      	ldrb	r3, [r3, #0]
    7ed6:	b983      	cbnz	r3, 7efa <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    7ed8:	f04f 0320 	mov.w	r3, #32
    7edc:	f3ef 8411 	mrs	r4, BASEPRI
    7ee0:	f383 8812 	msr	BASEPRI_MAX, r3
    7ee4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    7ee8:	6868      	ldr	r0, [r5, #4]
    7eea:	f006 fb8d 	bl	e608 <is_tx_ready.isra.0>
    7eee:	bb28      	cbnz	r0, 7f3c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    7ef0:	f384 8811 	msr	BASEPRI, r4
    7ef4:	f3bf 8f6f 	isb	sy
}
    7ef8:	e7ee      	b.n	7ed8 <uarte_nrfx_poll_out+0x14>
{
    7efa:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    7efc:	6868      	ldr	r0, [r5, #4]
    7efe:	f006 fb83 	bl	e608 <is_tx_ready.isra.0>
    7f02:	b970      	cbnz	r0, 7f22 <uarte_nrfx_poll_out+0x5e>
    7f04:	2001      	movs	r0, #1
    7f06:	f006 fc59 	bl	e7bc <nrfx_busy_wait>
    7f0a:	3c01      	subs	r4, #1
    7f0c:	d1f6      	bne.n	7efc <uarte_nrfx_poll_out+0x38>
    7f0e:	2100      	movs	r1, #0
    7f10:	2021      	movs	r0, #33	; 0x21
    7f12:	f003 f983 	bl	b21c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7f16:	e7f0      	b.n	7efa <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    7f18:	f384 8811 	msr	BASEPRI, r4
    7f1c:	f3bf 8f6f 	isb	sy
}
    7f20:	e7f5      	b.n	7f0e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    7f22:	f04f 0320 	mov.w	r3, #32
    7f26:	f3ef 8411 	mrs	r4, BASEPRI
    7f2a:	f383 8812 	msr	BASEPRI_MAX, r3
    7f2e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    7f32:	6868      	ldr	r0, [r5, #4]
    7f34:	f006 fb68 	bl	e608 <is_tx_ready.isra.0>
    7f38:	2800      	cmp	r0, #0
    7f3a:	d0ed      	beq.n	7f18 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    7f3c:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    7f3e:	2201      	movs	r2, #1
	data->char_out = c;
    7f40:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    7f44:	6868      	ldr	r0, [r5, #4]
    7f46:	f006 fb44 	bl	e5d2 <tx_start.isra.0>
	__asm__ volatile(
    7f4a:	f384 8811 	msr	BASEPRI, r4
    7f4e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    7f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f54:	20002246 	.word	0x20002246

00007f58 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    7f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
    7f5c:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    7f60:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    7f62:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7f66:	2300      	movs	r3, #0
    7f68:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    7f6c:	6030      	str	r0, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    7f6e:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7f70:	68eb      	ldr	r3, [r5, #12]
    7f72:	1c5a      	adds	r2, r3, #1
static int uarte_instance_init(const struct device *dev,
    7f74:	b088      	sub	sp, #32
    7f76:	4607      	mov	r7, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7f78:	d013      	beq.n	7fa2 <uarte_instance_init.constprop.0+0x4a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7f7a:	a802      	add	r0, sp, #8
    7f7c:	9302      	str	r3, [sp, #8]
    7f7e:	f7ff fee1 	bl	7d44 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7f82:	9a02      	ldr	r2, [sp, #8]
    7f84:	2301      	movs	r3, #1
    7f86:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7f88:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    7f8c:	68eb      	ldr	r3, [r5, #12]
    7f8e:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7f90:	a802      	add	r0, sp, #8
    7f92:	f7ff fed7 	bl	7d44 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7f96:	9b02      	ldr	r3, [sp, #8]
    7f98:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7f9c:	2203      	movs	r2, #3
    7f9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7fa2:	6928      	ldr	r0, [r5, #16]
    7fa4:	1c43      	adds	r3, r0, #1
    7fa6:	d006      	beq.n	7fb6 <uarte_instance_init.constprop.0+0x5e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    7fa8:	7f2b      	ldrb	r3, [r5, #28]
    7faa:	2b00      	cmp	r3, #0
    7fac:	bf14      	ite	ne
    7fae:	2103      	movne	r1, #3
    7fb0:	2100      	moveq	r1, #0
    7fb2:	f006 fb00 	bl	e5b6 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7fb6:	696b      	ldr	r3, [r5, #20]
    7fb8:	1c5a      	adds	r2, r3, #1
    7fba:	d013      	beq.n	7fe4 <uarte_instance_init.constprop.0+0x8c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7fbc:	a802      	add	r0, sp, #8
    7fbe:	9302      	str	r3, [sp, #8]
    7fc0:	f7ff fec0 	bl	7d44 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7fc4:	9a02      	ldr	r2, [sp, #8]
    7fc6:	2301      	movs	r3, #1
    7fc8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7fca:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    7fce:	696b      	ldr	r3, [r5, #20]
    7fd0:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7fd2:	a802      	add	r0, sp, #8
    7fd4:	f7ff feb6 	bl	7d44 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7fd8:	9b02      	ldr	r3, [sp, #8]
    7fda:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7fde:	2203      	movs	r2, #3
    7fe0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    7fe4:	69a8      	ldr	r0, [r5, #24]
    7fe6:	1c43      	adds	r3, r0, #1
    7fe8:	d006      	beq.n	7ff8 <uarte_instance_init.constprop.0+0xa0>
			nrf_gpio_cfg_input(cfg->cts_pin,
    7fea:	7f6b      	ldrb	r3, [r5, #29]
    7fec:	2b00      	cmp	r3, #0
    7fee:	bf14      	ite	ne
    7ff0:	2103      	movne	r1, #3
    7ff2:	2100      	moveq	r1, #0
    7ff4:	f006 fadf 	bl	e5b6 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    7ff8:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    7ffc:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    7ffe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    8002:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    8006:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    800a:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
    800c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    8010:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    8014:	1d31      	adds	r1, r6, #4
    8016:	f7ff fea3 	bl	7d60 <uarte_nrfx_configure>
	if (err) {
    801a:	4605      	mov	r5, r0
    801c:	2800      	cmp	r0, #0
    801e:	d158      	bne.n	80d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd2>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    8020:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    8024:	0798      	lsls	r0, r3, #30
    8026:	d52b      	bpl.n	8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    8028:	f106 0016 	add.w	r0, r6, #22
    802c:	f001 f882 	bl	9134 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    8030:	4b2a      	ldr	r3, [pc, #168]	; (80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>)
    8032:	4298      	cmp	r0, r3
    8034:	d011      	beq.n	805a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a>
		LOG_ERR("Failed to allocate PPI Channel");
    8036:	482a      	ldr	r0, [pc, #168]	; (80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>)
    8038:	6803      	ldr	r3, [r0, #0]
    803a:	0759      	lsls	r1, r3, #29
    803c:	d00a      	beq.n	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
    803e:	4b29      	ldr	r3, [pc, #164]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    8040:	9306      	str	r3, [sp, #24]
    8042:	2302      	movs	r3, #2
    8044:	9301      	str	r3, [sp, #4]
    8046:	9305      	str	r3, [sp, #20]
    8048:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    804c:	462b      	mov	r3, r5
    804e:	aa05      	add	r2, sp, #20
    8050:	f004 fc75 	bl	c93e <z_impl_z_log_msg2_static_create>
		return -EIO;
    8054:	f06f 0504 	mvn.w	r5, #4
    8058:	e03b      	b.n	80d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd2>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    805a:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    805c:	00c3      	lsls	r3, r0, #3
    805e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8062:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    8066:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    806a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    806e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8072:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    8076:	4a1c      	ldr	r2, [pc, #112]	; (80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    8078:	2301      	movs	r3, #1
    807a:	4083      	lsls	r3, r0
    807c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8080:	2308      	movs	r3, #8
    8082:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    8086:	f898 3008 	ldrb.w	r3, [r8, #8]
    808a:	b95b      	cbnz	r3, 80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    808c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    8090:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8094:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8098:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    809c:	2301      	movs	r3, #1
    809e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80a2:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    80a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    80a8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    80aa:	bf5c      	itt	pl
    80ac:	f44f 7280 	movpl.w	r2, #256	; 0x100
    80b0:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    80b4:	06db      	lsls	r3, r3, #27
    80b6:	bf44      	itt	mi
    80b8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    80bc:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    80c0:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    80c2:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    80c4:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    80c8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80cc:	2301      	movs	r3, #1
    80ce:	60a3      	str	r3, [r4, #8]
    80d0:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    80d2:	4628      	mov	r0, r5
    80d4:	b008      	add	sp, #32
    80d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80da:	bf00      	nop
    80dc:	0bad0000 	.word	0x0bad0000
    80e0:	20000280 	.word	0x20000280
    80e4:	00012008 	.word	0x00012008
    80e8:	4001f000 	.word	0x4001f000

000080ec <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    80ec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    80ee:	2301      	movs	r3, #1
    80f0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    80f2:	4a11      	ldr	r2, [pc, #68]	; (8138 <compare_int_lock+0x4c>)
    80f4:	f3bf 8f5b 	dmb	ish
    80f8:	43dc      	mvns	r4, r3
    80fa:	e852 1f00 	ldrex	r1, [r2]
    80fe:	ea01 0c04 	and.w	ip, r1, r4
    8102:	e842 ce00 	strex	lr, ip, [r2]
    8106:	f1be 0f00 	cmp.w	lr, #0
    810a:	d1f6      	bne.n	80fa <compare_int_lock+0xe>
    810c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8110:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8114:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    8118:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    811c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    8120:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    8124:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8128:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    812c:	420b      	tst	r3, r1
}
    812e:	bf14      	ite	ne
    8130:	2001      	movne	r0, #1
    8132:	2000      	moveq	r0, #0
    8134:	bd10      	pop	{r4, pc}
    8136:	bf00      	nop
    8138:	20001f24 	.word	0x20001f24

0000813c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    813c:	4919      	ldr	r1, [pc, #100]	; (81a4 <sys_clock_timeout_handler+0x68>)
{
    813e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8140:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    8142:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8146:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    8148:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    814c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8150:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    8152:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    8156:	d222      	bcs.n	819e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    8158:	4b13      	ldr	r3, [pc, #76]	; (81a8 <sys_clock_timeout_handler+0x6c>)
    815a:	681b      	ldr	r3, [r3, #0]
    815c:	0a1a      	lsrs	r2, r3, #8
    815e:	061b      	lsls	r3, r3, #24
    8160:	195e      	adds	r6, r3, r5
    8162:	4b12      	ldr	r3, [pc, #72]	; (81ac <sys_clock_timeout_handler+0x70>)
    8164:	f142 0700 	adc.w	r7, r2, #0
    8168:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    816c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    816e:	f003 f9cb 	bl	b508 <sys_clock_announce>
    return p_reg->CC[ch];
    8172:	00a3      	lsls	r3, r4, #2
    8174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8178:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    817c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    8180:	42aa      	cmp	r2, r5
    8182:	d10b      	bne.n	819c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    8184:	b91e      	cbnz	r6, 818e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    8186:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    818a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    818e:	4b08      	ldr	r3, [pc, #32]	; (81b0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8190:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    8194:	fa00 f404 	lsl.w	r4, r0, r4
    8198:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    819c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    819e:	2600      	movs	r6, #0
    81a0:	e7e5      	b.n	816e <sys_clock_timeout_handler+0x32>
    81a2:	bf00      	nop
    81a4:	20000d90 	.word	0x20000d90
    81a8:	20001f28 	.word	0x20001f28
    81ac:	20000d78 	.word	0x20000d78
    81b0:	40011000 	.word	0x40011000

000081b4 <compare_int_unlock>:
	if (key) {
    81b4:	b319      	cbz	r1, 81fe <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    81b6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    81ba:	2301      	movs	r3, #1
    81bc:	4a10      	ldr	r2, [pc, #64]	; (8200 <compare_int_unlock+0x4c>)
    81be:	4083      	lsls	r3, r0
    81c0:	e852 1f00 	ldrex	r1, [r2]
    81c4:	4319      	orrs	r1, r3
    81c6:	e842 1c00 	strex	ip, r1, [r2]
    81ca:	f1bc 0f00 	cmp.w	ip, #0
    81ce:	d1f7      	bne.n	81c0 <compare_int_unlock+0xc>
    81d0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    81d4:	4a0b      	ldr	r2, [pc, #44]	; (8204 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    81d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    81da:	4083      	lsls	r3, r0
    81dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    81e0:	4b09      	ldr	r3, [pc, #36]	; (8208 <compare_int_unlock+0x54>)
    81e2:	f3bf 8f5b 	dmb	ish
    81e6:	681b      	ldr	r3, [r3, #0]
    81e8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    81ec:	fa23 f000 	lsr.w	r0, r3, r0
    81f0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    81f2:	bf42      	ittt	mi
    81f4:	4b05      	ldrmi	r3, [pc, #20]	; (820c <compare_int_unlock+0x58>)
    81f6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    81fa:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    81fe:	4770      	bx	lr
    8200:	20001f24 	.word	0x20001f24
    8204:	40011000 	.word	0x40011000
    8208:	20001f20 	.word	0x20001f20
    820c:	e000e100 	.word	0xe000e100

00008210 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    8210:	4b0d      	ldr	r3, [pc, #52]	; (8248 <z_nrf_rtc_timer_read+0x38>)
    8212:	6818      	ldr	r0, [r3, #0]
    8214:	0a01      	lsrs	r1, r0, #8
    8216:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    8218:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    821c:	4b0b      	ldr	r3, [pc, #44]	; (824c <z_nrf_rtc_timer_read+0x3c>)
    821e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    8222:	1818      	adds	r0, r3, r0
    8224:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    8228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    822c:	d20a      	bcs.n	8244 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    822e:	4b08      	ldr	r3, [pc, #32]	; (8250 <z_nrf_rtc_timer_read+0x40>)
    8230:	e9d3 2300 	ldrd	r2, r3, [r3]
    8234:	4290      	cmp	r0, r2
    8236:	eb71 0303 	sbcs.w	r3, r1, r3
    823a:	d203      	bcs.n	8244 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    823c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    8240:	f141 0100 	adc.w	r1, r1, #0
}
    8244:	4770      	bx	lr
    8246:	bf00      	nop
    8248:	20001f28 	.word	0x20001f28
    824c:	40011000 	.word	0x40011000
    8250:	20000d78 	.word	0x20000d78

00008254 <compare_set>:
{
    8254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8258:	b085      	sub	sp, #20
    825a:	4616      	mov	r6, r2
    825c:	4698      	mov	r8, r3
    825e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    8260:	f7ff ff44 	bl	80ec <compare_int_lock>
    8264:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    8266:	f7ff ffd3 	bl	8210 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    826a:	42b0      	cmp	r0, r6
    826c:	eb71 0308 	sbcs.w	r3, r1, r8
    8270:	d278      	bcs.n	8364 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    8272:	4b46      	ldr	r3, [pc, #280]	; (838c <compare_set+0x138>)
    8274:	1a30      	subs	r0, r6, r0
    8276:	eb68 0101 	sbc.w	r1, r8, r1
    827a:	4298      	cmp	r0, r3
    827c:	f171 0300 	sbcs.w	r3, r1, #0
    8280:	f080 8081 	bcs.w	8386 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    8284:	4b42      	ldr	r3, [pc, #264]	; (8390 <compare_set+0x13c>)
    8286:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    828a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    828e:	45d8      	cmp	r8, fp
    8290:	bf08      	it	eq
    8292:	4556      	cmpeq	r6, sl
    8294:	d051      	beq.n	833a <compare_set+0xe6>
    8296:	ea4f 0985 	mov.w	r9, r5, lsl #2
    829a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    829e:	f105 0750 	add.w	r7, r5, #80	; 0x50
    82a2:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    82a6:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    82a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    82ac:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    82b0:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    82b2:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    82b6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    82ba:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    82bc:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    82c0:	4b34      	ldr	r3, [pc, #208]	; (8394 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    82c2:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    82c6:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    82c8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    82cc:	1a40      	subs	r0, r0, r1
    82ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    82d2:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    82d6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    82d8:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    82dc:	d107      	bne.n	82ee <compare_set+0x9a>
    82de:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    82e2:	2013      	movs	r0, #19
    82e4:	f006 fe74 	bl	efd0 <z_impl_k_busy_wait>
    82e8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    82ec:	4b29      	ldr	r3, [pc, #164]	; (8394 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    82ee:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    82f2:	eba4 000c 	sub.w	r0, r4, ip
    82f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    82fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    82fe:	bf88      	it	hi
    8300:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8302:	2000      	movs	r0, #0
    8304:	6038      	str	r0, [r7, #0]
    8306:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    8308:	9801      	ldr	r0, [sp, #4]
    830a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    830e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    8312:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    8316:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    831a:	4281      	cmp	r1, r0
    831c:	d006      	beq.n	832c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    831e:	1a20      	subs	r0, r4, r0
    8320:	3802      	subs	r0, #2
    8322:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    8326:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    832a:	d819      	bhi.n	8360 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    832c:	1aa4      	subs	r4, r4, r2
    832e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    8332:	eb14 0a06 	adds.w	sl, r4, r6
    8336:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    833a:	4915      	ldr	r1, [pc, #84]	; (8390 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    833c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    833e:	012b      	lsls	r3, r5, #4
    8340:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    8344:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    8348:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    834a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    834c:	6053      	str	r3, [r2, #4]
	return ret;
    834e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    8350:	4628      	mov	r0, r5
    8352:	9900      	ldr	r1, [sp, #0]
    8354:	f7ff ff2e 	bl	81b4 <compare_int_unlock>
}
    8358:	4620      	mov	r0, r4
    835a:	b005      	add	sp, #20
    835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8360:	4620      	mov	r0, r4
    8362:	e7b1      	b.n	82c8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    8364:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8366:	4a0c      	ldr	r2, [pc, #48]	; (8398 <compare_set+0x144>)
    8368:	f3bf 8f5b 	dmb	ish
    836c:	40ab      	lsls	r3, r5
    836e:	e852 1f00 	ldrex	r1, [r2]
    8372:	4319      	orrs	r1, r3
    8374:	e842 1000 	strex	r0, r1, [r2]
    8378:	2800      	cmp	r0, #0
    837a:	d1f8      	bne.n	836e <compare_set+0x11a>
    837c:	f3bf 8f5b 	dmb	ish
    8380:	46b2      	mov	sl, r6
    8382:	46c3      	mov	fp, r8
    8384:	e7d9      	b.n	833a <compare_set+0xe6>
			return -EINVAL;
    8386:	f06f 0415 	mvn.w	r4, #21
    838a:	e7e1      	b.n	8350 <compare_set+0xfc>
    838c:	01000001 	.word	0x01000001
    8390:	20000d80 	.word	0x20000d80
    8394:	40011000 	.word	0x40011000
    8398:	20001f20 	.word	0x20001f20

0000839c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    839c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    839e:	4b19      	ldr	r3, [pc, #100]	; (8404 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    83a0:	4d19      	ldr	r5, [pc, #100]	; (8408 <sys_clock_driver_init+0x6c>)
    83a2:	2400      	movs	r4, #0
    83a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    83a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    83ac:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    83b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    83b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    83b8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    83bc:	4b13      	ldr	r3, [pc, #76]	; (840c <sys_clock_driver_init+0x70>)
    83be:	2602      	movs	r6, #2
    83c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    83c4:	2101      	movs	r1, #1
    83c6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    83ca:	2011      	movs	r0, #17
    83cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    83d0:	4622      	mov	r2, r4
    83d2:	f7fd faff 	bl	59d4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    83d6:	2011      	movs	r0, #17
    83d8:	f7fd faca 	bl	5970 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    83dc:	4a0c      	ldr	r2, [pc, #48]	; (8410 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    83de:	2301      	movs	r3, #1
    83e0:	60ab      	str	r3, [r5, #8]
    83e2:	602b      	str	r3, [r5, #0]
    83e4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    83e6:	4b0b      	ldr	r3, [pc, #44]	; (8414 <sys_clock_driver_init+0x78>)
    83e8:	4a0b      	ldr	r2, [pc, #44]	; (8418 <sys_clock_driver_init+0x7c>)
    83ea:	9300      	str	r3, [sp, #0]
    83ec:	9401      	str	r4, [sp, #4]
    83ee:	2300      	movs	r3, #0
    83f0:	4620      	mov	r0, r4
    83f2:	f7ff ff2f 	bl	8254 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    83f6:	4630      	mov	r0, r6
    83f8:	f7ff f960 	bl	76bc <z_nrf_clock_control_lf_on>

	return 0;
}
    83fc:	4620      	mov	r0, r4
    83fe:	b002      	add	sp, #8
    8400:	bd70      	pop	{r4, r5, r6, pc}
    8402:	bf00      	nop
    8404:	20000d80 	.word	0x20000d80
    8408:	40011000 	.word	0x40011000
    840c:	e000e100 	.word	0xe000e100
    8410:	20001f24 	.word	0x20001f24
    8414:	0000813d 	.word	0x0000813d
    8418:	007fffff 	.word	0x007fffff

0000841c <rtc_nrf_isr>:
{
    841c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    8420:	4c35      	ldr	r4, [pc, #212]	; (84f8 <rtc_nrf_isr+0xdc>)
    8422:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    8426:	079a      	lsls	r2, r3, #30
    8428:	d50b      	bpl.n	8442 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    842a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    842e:	b143      	cbz	r3, 8442 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    8430:	4a32      	ldr	r2, [pc, #200]	; (84fc <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8432:	2300      	movs	r3, #0
    8434:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    8438:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    843c:	6813      	ldr	r3, [r2, #0]
    843e:	3301      	adds	r3, #1
    8440:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    8442:	f04f 0320 	mov.w	r3, #32
    8446:	f3ef 8211 	mrs	r2, BASEPRI
    844a:	f383 8812 	msr	BASEPRI_MAX, r3
    844e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    8452:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    8456:	03db      	lsls	r3, r3, #15
    8458:	d512      	bpl.n	8480 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    845a:	f3bf 8f5b 	dmb	ish
    845e:	4b28      	ldr	r3, [pc, #160]	; (8500 <rtc_nrf_isr+0xe4>)
    8460:	e853 1f00 	ldrex	r1, [r3]
    8464:	f021 0001 	bic.w	r0, r1, #1
    8468:	e843 0600 	strex	r6, r0, [r3]
    846c:	2e00      	cmp	r6, #0
    846e:	d1f7      	bne.n	8460 <rtc_nrf_isr+0x44>
    8470:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8474:	2900      	cmp	r1, #0
    8476:	d136      	bne.n	84e6 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8478:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    847c:	2b00      	cmp	r3, #0
    847e:	d132      	bne.n	84e6 <rtc_nrf_isr+0xca>
{
    8480:	2300      	movs	r3, #0
	__asm__ volatile(
    8482:	f382 8811 	msr	BASEPRI, r2
    8486:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    848a:	b34b      	cbz	r3, 84e0 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    848c:	f7ff fec0 	bl	8210 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    8490:	f04f 0320 	mov.w	r3, #32
    8494:	f3ef 8c11 	mrs	ip, BASEPRI
    8498:	f383 8812 	msr	BASEPRI_MAX, r3
    849c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    84a0:	4b18      	ldr	r3, [pc, #96]	; (8504 <rtc_nrf_isr+0xe8>)
    84a2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    84a6:	42b0      	cmp	r0, r6
    84a8:	eb71 0207 	sbcs.w	r2, r1, r7
    84ac:	f04f 0200 	mov.w	r2, #0
    84b0:	d320      	bcc.n	84f4 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    84b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    84b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    84ba:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    84be:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    84c2:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    84c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    84c8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    84cc:	f38c 8811 	msr	BASEPRI, ip
    84d0:	f3bf 8f6f 	isb	sy
		if (handler) {
    84d4:	b121      	cbz	r1, 84e0 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    84d6:	9500      	str	r5, [sp, #0]
    84d8:	4632      	mov	r2, r6
    84da:	463b      	mov	r3, r7
    84dc:	2000      	movs	r0, #0
    84de:	4788      	blx	r1
}
    84e0:	b003      	add	sp, #12
    84e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    84e6:	2300      	movs	r3, #0
    84e8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    84ec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    84f0:	2301      	movs	r3, #1
}
    84f2:	e7c6      	b.n	8482 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    84f4:	4611      	mov	r1, r2
    84f6:	e7e9      	b.n	84cc <rtc_nrf_isr+0xb0>
    84f8:	40011000 	.word	0x40011000
    84fc:	20001f28 	.word	0x20001f28
    8500:	20001f20 	.word	0x20001f20
    8504:	20000d80 	.word	0x20000d80

00008508 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    8508:	1c43      	adds	r3, r0, #1
{
    850a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    850c:	d021      	beq.n	8552 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    850e:	2801      	cmp	r0, #1
    8510:	dd21      	ble.n	8556 <sys_clock_set_timeout+0x4e>
    8512:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8516:	da20      	bge.n	855a <sys_clock_set_timeout+0x52>
    8518:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    851a:	f7ff fe79 	bl	8210 <z_nrf_rtc_timer_read>
    851e:	4b10      	ldr	r3, [pc, #64]	; (8560 <sys_clock_set_timeout+0x58>)
    8520:	e9d3 1300 	ldrd	r1, r3, [r3]
    8524:	1a40      	subs	r0, r0, r1
		ticks = 0;
    8526:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    852a:	bf28      	it	cs
    852c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    852e:	3001      	adds	r0, #1
    8530:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    8532:	480c      	ldr	r0, [pc, #48]	; (8564 <sys_clock_set_timeout+0x5c>)
    8534:	4282      	cmp	r2, r0
    8536:	bf28      	it	cs
    8538:	4602      	movcs	r2, r0
    853a:	1852      	adds	r2, r2, r1
    853c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    8540:	4909      	ldr	r1, [pc, #36]	; (8568 <sys_clock_set_timeout+0x60>)
    8542:	9001      	str	r0, [sp, #4]
    8544:	9100      	str	r1, [sp, #0]
    8546:	f143 0300 	adc.w	r3, r3, #0
    854a:	f7ff fe83 	bl	8254 <compare_set>
}
    854e:	b002      	add	sp, #8
    8550:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    8552:	4804      	ldr	r0, [pc, #16]	; (8564 <sys_clock_set_timeout+0x5c>)
    8554:	e7e0      	b.n	8518 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    8556:	2400      	movs	r4, #0
    8558:	e7df      	b.n	851a <sys_clock_set_timeout+0x12>
    855a:	4c02      	ldr	r4, [pc, #8]	; (8564 <sys_clock_set_timeout+0x5c>)
    855c:	e7dd      	b.n	851a <sys_clock_set_timeout+0x12>
    855e:	bf00      	nop
    8560:	20000d90 	.word	0x20000d90
    8564:	007fffff 	.word	0x007fffff
    8568:	0000813d 	.word	0x0000813d

0000856c <sys_clock_elapsed>:
{
    856c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    856e:	f7ff fe4f 	bl	8210 <z_nrf_rtc_timer_read>
    8572:	4b02      	ldr	r3, [pc, #8]	; (857c <sys_clock_elapsed+0x10>)
    8574:	681b      	ldr	r3, [r3, #0]
}
    8576:	1ac0      	subs	r0, r0, r3
    8578:	bd08      	pop	{r3, pc}
    857a:	bf00      	nop
    857c:	20000d90 	.word	0x20000d90

00008580 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    8584:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8588:	2a08      	cmp	r2, #8
    858a:	d106      	bne.n	859a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    858c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    8590:	2b05      	cmp	r3, #5
    8592:	d802      	bhi.n	859a <nrf52_errata_103+0x1a>
    8594:	4a02      	ldr	r2, [pc, #8]	; (85a0 <nrf52_errata_103+0x20>)
    8596:	5cd0      	ldrb	r0, [r2, r3]
    8598:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    859a:	2000      	movs	r0, #0
    #endif
}
    859c:	4770      	bx	lr
    859e:	bf00      	nop
    85a0:	0001204b 	.word	0x0001204b

000085a4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a4:	4a02      	ldr	r2, [pc, #8]	; (85b0 <nvmc_wait+0xc>)
    85a6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    85aa:	2b00      	cmp	r3, #0
    85ac:	d0fb      	beq.n	85a6 <nvmc_wait+0x2>
}
    85ae:	4770      	bx	lr
    85b0:	4001e000 	.word	0x4001e000

000085b4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    85b4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    85b6:	f006 f8f7 	bl	e7a8 <nrf52_errata_136>
    85ba:	b140      	cbz	r0, 85ce <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    85bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    85c0:	2200      	movs	r2, #0
    85c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    85c6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    85ca:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    85ce:	f006 f8eb 	bl	e7a8 <nrf52_errata_136>
    85d2:	2800      	cmp	r0, #0
    85d4:	d046      	beq.n	8664 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    85d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    85da:	4b60      	ldr	r3, [pc, #384]	; (875c <SystemInit+0x1a8>)
    85dc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    85e0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    85e4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    85e8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    85ec:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    85f0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    85f4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    85f8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    85fc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    8600:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8604:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8608:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    860c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    8610:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8614:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8618:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    861c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    8620:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8624:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8628:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    862c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8630:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8634:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8638:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    863c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8640:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8644:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8648:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    864c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8650:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8654:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8658:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    865c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8660:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    8664:	f7ff ff8c 	bl	8580 <nrf52_errata_103>
    8668:	b118      	cbz	r0, 8672 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    866a:	4b3d      	ldr	r3, [pc, #244]	; (8760 <SystemInit+0x1ac>)
    866c:	4a3d      	ldr	r2, [pc, #244]	; (8764 <SystemInit+0x1b0>)
    866e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    8672:	f7ff ff85 	bl	8580 <nrf52_errata_103>
    8676:	b118      	cbz	r0, 8680 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    8678:	4b3b      	ldr	r3, [pc, #236]	; (8768 <SystemInit+0x1b4>)
    867a:	22fb      	movs	r2, #251	; 0xfb
    867c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    8680:	f7ff ff7e 	bl	8580 <nrf52_errata_103>
    8684:	b170      	cbz	r0, 86a4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    8686:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    868a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    868e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    8692:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8696:	f022 020f 	bic.w	r2, r2, #15
    869a:	f003 030f 	and.w	r3, r3, #15
    869e:	4313      	orrs	r3, r2
    86a0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    86a4:	f7ff ff6c 	bl	8580 <nrf52_errata_103>
    86a8:	b120      	cbz	r0, 86b4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    86aa:	4b30      	ldr	r3, [pc, #192]	; (876c <SystemInit+0x1b8>)
    86ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    86b0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    86b4:	f006 f878 	bl	e7a8 <nrf52_errata_136>
    86b8:	b148      	cbz	r0, 86ce <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    86ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    86be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    86c2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    86c4:	bf44      	itt	mi
    86c6:	f06f 0201 	mvnmi.w	r2, #1
    86ca:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    86ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    86d2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    86d6:	2a08      	cmp	r2, #8
    86d8:	d10e      	bne.n	86f8 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    86da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    86de:	2b05      	cmp	r3, #5
    86e0:	d802      	bhi.n	86e8 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    86e2:	4a23      	ldr	r2, [pc, #140]	; (8770 <SystemInit+0x1bc>)
    86e4:	5cd3      	ldrb	r3, [r2, r3]
    86e6:	b13b      	cbz	r3, 86f8 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    86e8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    86ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    86f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    86f4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    86f8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    86fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    8700:	2a00      	cmp	r2, #0
    8702:	db03      	blt.n	870c <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8704:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8708:	2b00      	cmp	r3, #0
    870a:	da22      	bge.n	8752 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    870c:	4919      	ldr	r1, [pc, #100]	; (8774 <SystemInit+0x1c0>)
    870e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8710:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8714:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8718:	2412      	movs	r4, #18
    nvmc_wait();
    871a:	f7ff ff43 	bl	85a4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    871e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    8722:	f7ff ff3f 	bl	85a4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    8726:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    872a:	f7ff ff3b 	bl	85a4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    872e:	2300      	movs	r3, #0
    8730:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    8734:	f7ff ff36 	bl	85a4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    8738:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    873c:	490e      	ldr	r1, [pc, #56]	; (8778 <SystemInit+0x1c4>)
    873e:	4b0f      	ldr	r3, [pc, #60]	; (877c <SystemInit+0x1c8>)
    8740:	68ca      	ldr	r2, [r1, #12]
    8742:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8746:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8748:	60cb      	str	r3, [r1, #12]
    874a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    874e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8750:	e7fd      	b.n	874e <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8752:	4b0b      	ldr	r3, [pc, #44]	; (8780 <SystemInit+0x1cc>)
    8754:	4a0b      	ldr	r2, [pc, #44]	; (8784 <SystemInit+0x1d0>)
    8756:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    8758:	bd10      	pop	{r4, pc}
    875a:	bf00      	nop
    875c:	4000c000 	.word	0x4000c000
    8760:	40005000 	.word	0x40005000
    8764:	00038148 	.word	0x00038148
    8768:	4000f000 	.word	0x4000f000
    876c:	40029000 	.word	0x40029000
    8770:	00012045 	.word	0x00012045
    8774:	4001e000 	.word	0x4001e000
    8778:	e000ed00 	.word	0xe000ed00
    877c:	05fa0004 	.word	0x05fa0004
    8780:	200001b0 	.word	0x200001b0
    8784:	03d09000 	.word	0x03d09000

00008788 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    8788:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    878a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    878c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    878e:	fab2 f382 	clz	r3, r2
    8792:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    8796:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    8798:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    879a:	d014      	beq.n	87c6 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    879c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    87a0:	fa05 f303 	lsl.w	r3, r5, r3
    87a4:	ea22 0303 	bic.w	r3, r2, r3
    87a8:	e850 6f00 	ldrex	r6, [r0]
    87ac:	4296      	cmp	r6, r2
    87ae:	d104      	bne.n	87ba <nrfx_flag32_alloc+0x32>
    87b0:	e840 3c00 	strex	ip, r3, [r0]
    87b4:	f1bc 0f00 	cmp.w	ip, #0
    87b8:	d1f6      	bne.n	87a8 <nrfx_flag32_alloc+0x20>
    87ba:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    87be:	d1e5      	bne.n	878c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    87c0:	4802      	ldr	r0, [pc, #8]	; (87cc <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    87c2:	700c      	strb	r4, [r1, #0]
}
    87c4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    87c6:	4802      	ldr	r0, [pc, #8]	; (87d0 <nrfx_flag32_alloc+0x48>)
    87c8:	e7fc      	b.n	87c4 <nrfx_flag32_alloc+0x3c>
    87ca:	bf00      	nop
    87cc:	0bad0000 	.word	0x0bad0000
    87d0:	0bad0002 	.word	0x0bad0002

000087d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    87d4:	6803      	ldr	r3, [r0, #0]
    87d6:	40cb      	lsrs	r3, r1
    87d8:	07db      	lsls	r3, r3, #31
{
    87da:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    87dc:	d415      	bmi.n	880a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    87de:	2301      	movs	r3, #1
    87e0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    87e4:	6803      	ldr	r3, [r0, #0]
    87e6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    87ea:	ea41 0203 	orr.w	r2, r1, r3
    87ee:	e850 4f00 	ldrex	r4, [r0]
    87f2:	429c      	cmp	r4, r3
    87f4:	d104      	bne.n	8800 <nrfx_flag32_free+0x2c>
    87f6:	e840 2c00 	strex	ip, r2, [r0]
    87fa:	f1bc 0f00 	cmp.w	ip, #0
    87fe:	d1f6      	bne.n	87ee <nrfx_flag32_free+0x1a>
    8800:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8804:	d1ee      	bne.n	87e4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    8806:	4802      	ldr	r0, [pc, #8]	; (8810 <nrfx_flag32_free+0x3c>)
}
    8808:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    880a:	4802      	ldr	r0, [pc, #8]	; (8814 <nrfx_flag32_free+0x40>)
    880c:	e7fc      	b.n	8808 <nrfx_flag32_free+0x34>
    880e:	bf00      	nop
    8810:	0bad0000 	.word	0x0bad0000
    8814:	0bad0004 	.word	0x0bad0004

00008818 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8818:	4b04      	ldr	r3, [pc, #16]	; (882c <nrfx_clock_init+0x14>)
    881a:	791a      	ldrb	r2, [r3, #4]
    881c:	b922      	cbnz	r2, 8828 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    881e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    8820:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    8822:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8824:	4802      	ldr	r0, [pc, #8]	; (8830 <nrfx_clock_init+0x18>)
    8826:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8828:	4802      	ldr	r0, [pc, #8]	; (8834 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    882a:	4770      	bx	lr
    882c:	20001f2c 	.word	0x20001f2c
    8830:	0bad0000 	.word	0x0bad0000
    8834:	0bad000c 	.word	0x0bad000c

00008838 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8838:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    883a:	2000      	movs	r0, #0
    883c:	f7fd f8bc 	bl	59b8 <arch_irq_is_enabled>
    8840:	b908      	cbnz	r0, 8846 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8842:	f7fd f895 	bl	5970 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    8846:	4b02      	ldr	r3, [pc, #8]	; (8850 <nrfx_clock_enable+0x18>)
    8848:	2201      	movs	r2, #1
    884a:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    884c:	bd08      	pop	{r3, pc}
    884e:	bf00      	nop
    8850:	20002240 	.word	0x20002240

00008854 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    8854:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    8856:	b110      	cbz	r0, 885e <nrfx_clock_stop+0xa>
    8858:	2801      	cmp	r0, #1
    885a:	d017      	beq.n	888c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    885c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    885e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    8862:	2302      	movs	r3, #2
    8864:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8868:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    886c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8870:	2301      	movs	r3, #1
    8872:	60e3      	str	r3, [r4, #12]
    8874:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8878:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    887c:	03db      	lsls	r3, r3, #15
    887e:	d5ed      	bpl.n	885c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    8880:	2001      	movs	r0, #1
    8882:	f005 ff9b 	bl	e7bc <nrfx_busy_wait>
    8886:	3d01      	subs	r5, #1
    8888:	d1f6      	bne.n	8878 <nrfx_clock_stop+0x24>
    888a:	e7e7      	b.n	885c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    888c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8890:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    8892:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8896:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    889a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    889e:	6060      	str	r0, [r4, #4]
    88a0:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    88a4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    88a8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    88ac:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    88ae:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    88b2:	d505      	bpl.n	88c0 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    88b4:	b123      	cbz	r3, 88c0 <nrfx_clock_stop+0x6c>
    88b6:	2001      	movs	r0, #1
    88b8:	f005 ff80 	bl	e7bc <nrfx_busy_wait>
    88bc:	3d01      	subs	r5, #1
    88be:	d1f1      	bne.n	88a4 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    88c0:	4b01      	ldr	r3, [pc, #4]	; (88c8 <nrfx_clock_stop+0x74>)
    88c2:	2200      	movs	r2, #0
    88c4:	715a      	strb	r2, [r3, #5]
    88c6:	e7c9      	b.n	885c <nrfx_clock_stop+0x8>
    88c8:	20001f2c 	.word	0x20001f2c

000088cc <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    88cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    88d0:	b510      	push	{r4, lr}
    88d2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    88d6:	b16a      	cbz	r2, 88f4 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88d8:	2200      	movs	r2, #0
    88da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    88de:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    88e2:	2201      	movs	r2, #1
    88e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    88e8:	4b11      	ldr	r3, [pc, #68]	; (8930 <nrfx_clock_irq_handler+0x64>)
    88ea:	7958      	ldrb	r0, [r3, #5]
    88ec:	b910      	cbnz	r0, 88f4 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    88ee:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    88f0:	681b      	ldr	r3, [r3, #0]
    88f2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    88f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    88fc:	b172      	cbz	r2, 891c <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88fe:	2200      	movs	r2, #0
    8900:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8904:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8908:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    890c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    8910:	0792      	lsls	r2, r2, #30
    8912:	d104      	bne.n	891e <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8914:	2201      	movs	r2, #1
    8916:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    891a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    891c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    891e:	2202      	movs	r2, #2
    8920:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8924:	4b02      	ldr	r3, [pc, #8]	; (8930 <nrfx_clock_irq_handler+0x64>)
}
    8926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    892a:	681b      	ldr	r3, [r3, #0]
    892c:	2001      	movs	r0, #1
    892e:	4718      	bx	r3
    8930:	20001f2c 	.word	0x20001f2c

00008934 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    8934:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    8936:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    893a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    893c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    893e:	6002      	str	r2, [r0, #0]
}
    8940:	4802      	ldr	r0, [pc, #8]	; (894c <nrf_gpio_pin_port_decode+0x18>)
    8942:	bf18      	it	ne
    8944:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    8948:	4770      	bx	lr
    894a:	bf00      	nop
    894c:	50000300 	.word	0x50000300

00008950 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    8950:	4b03      	ldr	r3, [pc, #12]	; (8960 <pin_in_use_by_te+0x10>)
    8952:	3008      	adds	r0, #8
    8954:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8958:	f3c0 1040 	ubfx	r0, r0, #5, #1
    895c:	4770      	bx	lr
    895e:	bf00      	nop
    8960:	200001b4 	.word	0x200001b4

00008964 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    8964:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8966:	f100 0308 	add.w	r3, r0, #8
    896a:	4c0c      	ldr	r4, [pc, #48]	; (899c <call_handler+0x38>)
    896c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    8970:	05da      	lsls	r2, r3, #23
{
    8972:	4605      	mov	r5, r0
    8974:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8976:	d507      	bpl.n	8988 <call_handler+0x24>
    8978:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    897c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    8980:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    8984:	6852      	ldr	r2, [r2, #4]
    8986:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    8988:	68a3      	ldr	r3, [r4, #8]
    898a:	b12b      	cbz	r3, 8998 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    898c:	68e2      	ldr	r2, [r4, #12]
    898e:	4631      	mov	r1, r6
    8990:	4628      	mov	r0, r5
    }
}
    8992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8996:	4718      	bx	r3
}
    8998:	bd70      	pop	{r4, r5, r6, pc}
    899a:	bf00      	nop
    899c:	200001b4 	.word	0x200001b4

000089a0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    89a0:	4a12      	ldr	r2, [pc, #72]	; (89ec <release_handler+0x4c>)
    89a2:	3008      	adds	r0, #8
{
    89a4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    89a6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    89aa:	05d9      	lsls	r1, r3, #23
    89ac:	d51b      	bpl.n	89e6 <release_handler+0x46>
    89ae:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    89b2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    89b6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    89ba:	f102 0410 	add.w	r4, r2, #16
    89be:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    89c0:	f834 3b02 	ldrh.w	r3, [r4], #2
    89c4:	f413 7f80 	tst.w	r3, #256	; 0x100
    89c8:	d003      	beq.n	89d2 <release_handler+0x32>
    89ca:	f3c3 2343 	ubfx	r3, r3, #9, #4
    89ce:	4299      	cmp	r1, r3
    89d0:	d009      	beq.n	89e6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    89d2:	3001      	adds	r0, #1
    89d4:	2830      	cmp	r0, #48	; 0x30
    89d6:	d1f3      	bne.n	89c0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    89d8:	2300      	movs	r3, #0
    89da:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    89de:	4804      	ldr	r0, [pc, #16]	; (89f0 <release_handler+0x50>)
}
    89e0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    89e2:	f7ff bef7 	b.w	87d4 <nrfx_flag32_free>
}
    89e6:	bc10      	pop	{r4}
    89e8:	4770      	bx	lr
    89ea:	bf00      	nop
    89ec:	200001b4 	.word	0x200001b4
    89f0:	20000228 	.word	0x20000228

000089f4 <pin_handler_trigger_uninit>:
{
    89f4:	b538      	push	{r3, r4, r5, lr}
    89f6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    89f8:	f7ff ffaa 	bl	8950 <pin_in_use_by_te>
    89fc:	4c09      	ldr	r4, [pc, #36]	; (8a24 <pin_handler_trigger_uninit+0x30>)
    89fe:	f102 0508 	add.w	r5, r2, #8
    8a02:	b140      	cbz	r0, 8a16 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8a04:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    8a08:	4907      	ldr	r1, [pc, #28]	; (8a28 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    8a0a:	0b5b      	lsrs	r3, r3, #13
    8a0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    8a10:	2000      	movs	r0, #0
    8a12:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    8a16:	4610      	mov	r0, r2
    8a18:	f7ff ffc2 	bl	89a0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    8a1c:	2300      	movs	r3, #0
    8a1e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    8a22:	bd38      	pop	{r3, r4, r5, pc}
    8a24:	200001b4 	.word	0x200001b4
    8a28:	40006000 	.word	0x40006000

00008a2c <nrfx_gpiote_input_configure>:
{
    8a2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8a30:	4604      	mov	r4, r0
    8a32:	4617      	mov	r7, r2
    8a34:	461d      	mov	r5, r3
    if (p_input_config)
    8a36:	b321      	cbz	r1, 8a82 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8a38:	4e4e      	ldr	r6, [pc, #312]	; (8b74 <nrfx_gpiote_input_configure+0x148>)
    8a3a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    8a3e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    8a42:	079b      	lsls	r3, r3, #30
    8a44:	d506      	bpl.n	8a54 <nrfx_gpiote_input_configure+0x28>
    8a46:	f7ff ff83 	bl	8950 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    8a4a:	b118      	cbz	r0, 8a54 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    8a4c:	484a      	ldr	r0, [pc, #296]	; (8b78 <nrfx_gpiote_input_configure+0x14c>)
}
    8a4e:	b004      	add	sp, #16
    8a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8a54:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    8a56:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8a5a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    8a5e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    8a62:	f10d 020f 	add.w	r2, sp, #15
    8a66:	460b      	mov	r3, r1
    8a68:	4620      	mov	r0, r4
    8a6a:	f10d 010e 	add.w	r1, sp, #14
    8a6e:	f005 fed3 	bl	e818 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    8a72:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    8a76:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    8a7a:	f043 0301 	orr.w	r3, r3, #1
    8a7e:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    8a82:	b197      	cbz	r7, 8aaa <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8a84:	4b3b      	ldr	r3, [pc, #236]	; (8b74 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    8a86:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    8a88:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8a8a:	f104 0008 	add.w	r0, r4, #8
    8a8e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    8a92:	078f      	lsls	r7, r1, #30
    8a94:	d50c      	bpl.n	8ab0 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    8a96:	2a00      	cmp	r2, #0
    8a98:	d1d8      	bne.n	8a4c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    8a9a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    8a9e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    8aa2:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    8aa6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    8aaa:	bbcd      	cbnz	r5, 8b20 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    8aac:	4833      	ldr	r0, [pc, #204]	; (8b7c <nrfx_gpiote_input_configure+0x150>)
    8aae:	e7ce      	b.n	8a4e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    8ab0:	f021 0120 	bic.w	r1, r1, #32
    8ab4:	04c9      	lsls	r1, r1, #19
    8ab6:	0cc9      	lsrs	r1, r1, #19
    8ab8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    8abc:	2a00      	cmp	r2, #0
    8abe:	d0ec      	beq.n	8a9a <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    8ac0:	2e03      	cmp	r6, #3
    8ac2:	d8c3      	bhi.n	8a4c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    8ac4:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    8ac6:	b92e      	cbnz	r6, 8ad4 <nrfx_gpiote_input_configure+0xa8>
    8ac8:	4a2d      	ldr	r2, [pc, #180]	; (8b80 <nrfx_gpiote_input_configure+0x154>)
    8aca:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    8ace:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    8ad2:	e7e2      	b.n	8a9a <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8ad4:	00ba      	lsls	r2, r7, #2
    8ad6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8ada:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8ade:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    8ae2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    8ae6:	f02c 0c03 	bic.w	ip, ip, #3
    8aea:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8aee:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    8af2:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    8af6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    8afa:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8afe:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    8b02:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    8b06:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    8b0a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    8b0e:	ea4c 0c0e 	orr.w	ip, ip, lr
    8b12:	f041 0120 	orr.w	r1, r1, #32
    8b16:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    8b1a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    8b1e:	e7bc      	b.n	8a9a <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    8b20:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    8b24:	4620      	mov	r0, r4
    8b26:	f7ff ff3b 	bl	89a0 <release_handler>
    if (!handler)
    8b2a:	2e00      	cmp	r6, #0
    8b2c:	d0be      	beq.n	8aac <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8b2e:	4d11      	ldr	r5, [pc, #68]	; (8b74 <nrfx_gpiote_input_configure+0x148>)
    8b30:	682b      	ldr	r3, [r5, #0]
    8b32:	429e      	cmp	r6, r3
    8b34:	d104      	bne.n	8b40 <nrfx_gpiote_input_configure+0x114>
    8b36:	686b      	ldr	r3, [r5, #4]
    8b38:	429f      	cmp	r7, r3
    8b3a:	d101      	bne.n	8b40 <nrfx_gpiote_input_configure+0x114>
    8b3c:	2200      	movs	r2, #0
    8b3e:	e00a      	b.n	8b56 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    8b40:	4810      	ldr	r0, [pc, #64]	; (8b84 <nrfx_gpiote_input_configure+0x158>)
    8b42:	f10d 010f 	add.w	r1, sp, #15
    8b46:	f7ff fe1f 	bl	8788 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    8b4a:	4b0c      	ldr	r3, [pc, #48]	; (8b7c <nrfx_gpiote_input_configure+0x150>)
    8b4c:	4298      	cmp	r0, r3
    8b4e:	f47f af7e 	bne.w	8a4e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    8b52:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    8b56:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    8b5a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8b5e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    8b60:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8b62:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    8b66:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    8b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8b6e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    8b72:	e79b      	b.n	8aac <nrfx_gpiote_input_configure+0x80>
    8b74:	200001b4 	.word	0x200001b4
    8b78:	0bad0004 	.word	0x0bad0004
    8b7c:	0bad0000 	.word	0x0bad0000
    8b80:	40006000 	.word	0x40006000
    8b84:	20000228 	.word	0x20000228

00008b88 <nrfx_gpiote_output_configure>:
{
    8b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b8a:	4604      	mov	r4, r0
    8b8c:	b085      	sub	sp, #20
    8b8e:	4615      	mov	r5, r2
    if (p_config)
    8b90:	b319      	cbz	r1, 8bda <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8b92:	4e33      	ldr	r6, [pc, #204]	; (8c60 <nrfx_gpiote_output_configure+0xd8>)
    8b94:	f100 0708 	add.w	r7, r0, #8
    8b98:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    8b9c:	0793      	lsls	r3, r2, #30
    8b9e:	d403      	bmi.n	8ba8 <nrfx_gpiote_output_configure+0x20>
    8ba0:	f7ff fed6 	bl	8950 <pin_in_use_by_te>
    8ba4:	2800      	cmp	r0, #0
    8ba6:	d158      	bne.n	8c5a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    8ba8:	f012 0f1c 	tst.w	r2, #28
    8bac:	d002      	beq.n	8bb4 <nrfx_gpiote_output_configure+0x2c>
    8bae:	784b      	ldrb	r3, [r1, #1]
    8bb0:	2b01      	cmp	r3, #1
    8bb2:	d052      	beq.n	8c5a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    8bb4:	2301      	movs	r3, #1
    8bb6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    8bba:	2300      	movs	r3, #0
    8bbc:	e9cd 1300 	strd	r1, r3, [sp]
    8bc0:	1c4a      	adds	r2, r1, #1
    8bc2:	1c8b      	adds	r3, r1, #2
    8bc4:	4620      	mov	r0, r4
    8bc6:	f10d 010f 	add.w	r1, sp, #15
    8bca:	f005 fe25 	bl	e818 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    8bce:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    8bd2:	f043 0303 	orr.w	r3, r3, #3
    8bd6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    8bda:	b915      	cbnz	r5, 8be2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    8bdc:	4821      	ldr	r0, [pc, #132]	; (8c64 <nrfx_gpiote_output_configure+0xdc>)
}
    8bde:	b005      	add	sp, #20
    8be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8be2:	4e1f      	ldr	r6, [pc, #124]	; (8c60 <nrfx_gpiote_output_configure+0xd8>)
    8be4:	f104 0708 	add.w	r7, r4, #8
    8be8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    8bec:	0783      	lsls	r3, r0, #30
    8bee:	d534      	bpl.n	8c5a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    8bf0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    8bf4:	4661      	mov	r1, ip
    8bf6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    8bf8:	f020 0020 	bic.w	r0, r0, #32
    8bfc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    8c00:	04c0      	lsls	r0, r0, #19
    8c02:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    8c06:	0cc0      	lsrs	r0, r0, #19
    8c08:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8c0c:	2300      	movs	r3, #0
    8c0e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    8c12:	786a      	ldrb	r2, [r5, #1]
    8c14:	2a00      	cmp	r2, #0
    8c16:	d0e1      	beq.n	8bdc <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    8c18:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    8c1c:	78ad      	ldrb	r5, [r5, #2]
    8c1e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    8c22:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8c26:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8c2a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    8c2e:	0223      	lsls	r3, r4, #8
    8c30:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    8c34:	0412      	lsls	r2, r2, #16
    8c36:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8c3a:	ea43 030e 	orr.w	r3, r3, lr
    8c3e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8c40:	052a      	lsls	r2, r5, #20
    8c42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8c46:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8c4a:	4313      	orrs	r3, r2
    8c4c:	f040 0020 	orr.w	r0, r0, #32
    8c50:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8c54:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    8c58:	e7c0      	b.n	8bdc <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    8c5a:	4803      	ldr	r0, [pc, #12]	; (8c68 <nrfx_gpiote_output_configure+0xe0>)
    8c5c:	e7bf      	b.n	8bde <nrfx_gpiote_output_configure+0x56>
    8c5e:	bf00      	nop
    8c60:	200001b4 	.word	0x200001b4
    8c64:	0bad0000 	.word	0x0bad0000
    8c68:	0bad0004 	.word	0x0bad0004

00008c6c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    8c6c:	4b01      	ldr	r3, [pc, #4]	; (8c74 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    8c6e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    8c72:	4770      	bx	lr
    8c74:	200001b4 	.word	0x200001b4

00008c78 <nrfx_gpiote_channel_get>:
{
    8c78:	b508      	push	{r3, lr}
    8c7a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    8c7c:	f7ff fe68 	bl	8950 <pin_in_use_by_te>
    8c80:	b138      	cbz	r0, 8c92 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8c82:	4b05      	ldr	r3, [pc, #20]	; (8c98 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    8c84:	4805      	ldr	r0, [pc, #20]	; (8c9c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8c86:	3208      	adds	r2, #8
    8c88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    8c8c:	0b5b      	lsrs	r3, r3, #13
    8c8e:	700b      	strb	r3, [r1, #0]
}
    8c90:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8c92:	4803      	ldr	r0, [pc, #12]	; (8ca0 <nrfx_gpiote_channel_get+0x28>)
    8c94:	e7fc      	b.n	8c90 <nrfx_gpiote_channel_get+0x18>
    8c96:	bf00      	nop
    8c98:	200001b4 	.word	0x200001b4
    8c9c:	0bad0000 	.word	0x0bad0000
    8ca0:	0bad0004 	.word	0x0bad0004

00008ca4 <nrfx_gpiote_init>:
{
    8ca4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8ca6:	4c0f      	ldr	r4, [pc, #60]	; (8ce4 <nrfx_gpiote_init+0x40>)
    8ca8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    8cac:	b9bd      	cbnz	r5, 8cde <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    8cae:	2260      	movs	r2, #96	; 0x60
    8cb0:	4629      	mov	r1, r5
    8cb2:	f104 0010 	add.w	r0, r4, #16
    8cb6:	f005 fa18 	bl	e0ea <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    8cba:	2006      	movs	r0, #6
    8cbc:	f7fc fe58 	bl	5970 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8cc0:	4b09      	ldr	r3, [pc, #36]	; (8ce8 <nrfx_gpiote_init+0x44>)
    return err_code;
    8cc2:	480a      	ldr	r0, [pc, #40]	; (8cec <nrfx_gpiote_init+0x48>)
    8cc4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    8cc8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    8ccc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8cd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    8cd4:	2301      	movs	r3, #1
    8cd6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    8cda:	6763      	str	r3, [r4, #116]	; 0x74
}
    8cdc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    8cde:	4804      	ldr	r0, [pc, #16]	; (8cf0 <nrfx_gpiote_init+0x4c>)
    8ce0:	e7fc      	b.n	8cdc <nrfx_gpiote_init+0x38>
    8ce2:	bf00      	nop
    8ce4:	200001b4 	.word	0x200001b4
    8ce8:	40006000 	.word	0x40006000
    8cec:	0bad0000 	.word	0x0bad0000
    8cf0:	0bad0005 	.word	0x0bad0005

00008cf4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    8cf4:	4b03      	ldr	r3, [pc, #12]	; (8d04 <nrfx_gpiote_is_init+0x10>)
    8cf6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    8cfa:	3800      	subs	r0, #0
    8cfc:	bf18      	it	ne
    8cfe:	2001      	movne	r0, #1
    8d00:	4770      	bx	lr
    8d02:	bf00      	nop
    8d04:	200001b4 	.word	0x200001b4

00008d08 <nrfx_gpiote_channel_free>:
{
    8d08:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    8d0a:	4801      	ldr	r0, [pc, #4]	; (8d10 <nrfx_gpiote_channel_free+0x8>)
    8d0c:	f7ff bd62 	b.w	87d4 <nrfx_flag32_free>
    8d10:	20000224 	.word	0x20000224

00008d14 <nrfx_gpiote_channel_alloc>:
{
    8d14:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    8d16:	4801      	ldr	r0, [pc, #4]	; (8d1c <nrfx_gpiote_channel_alloc+0x8>)
    8d18:	f7ff bd36 	b.w	8788 <nrfx_flag32_alloc>
    8d1c:	20000224 	.word	0x20000224

00008d20 <nrfx_gpiote_trigger_enable>:
{
    8d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8d22:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8d24:	f7ff fe14 	bl	8950 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8d28:	f104 0208 	add.w	r2, r4, #8
    8d2c:	4b1e      	ldr	r3, [pc, #120]	; (8da8 <nrfx_gpiote_trigger_enable+0x88>)
    8d2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8d32:	b1e8      	cbz	r0, 8d70 <nrfx_gpiote_trigger_enable+0x50>
    8d34:	f013 0502 	ands.w	r5, r3, #2
    8d38:	d11a      	bne.n	8d70 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8d3a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8d3c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    8d3e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    8d42:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    8d46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8d4a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8d4e:	6005      	str	r5, [r0, #0]
    8d50:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    8d52:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8d56:	f040 0001 	orr.w	r0, r0, #1
    8d5a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    8d5e:	b129      	cbz	r1, 8d6c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    8d60:	2201      	movs	r2, #1
    8d62:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    8d66:	4a11      	ldr	r2, [pc, #68]	; (8dac <nrfx_gpiote_trigger_enable+0x8c>)
    8d68:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    8d6c:	b003      	add	sp, #12
    8d6e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8d70:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    8d74:	2b04      	cmp	r3, #4
    8d76:	d012      	beq.n	8d9e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    8d78:	2b05      	cmp	r3, #5
    8d7a:	d012      	beq.n	8da2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8d7c:	a801      	add	r0, sp, #4
    8d7e:	9401      	str	r4, [sp, #4]
    8d80:	f7ff fdd8 	bl	8934 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    8d84:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    8d86:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    8d8a:	40d9      	lsrs	r1, r3
    8d8c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8d90:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    8d92:	4620      	mov	r0, r4
}
    8d94:	b003      	add	sp, #12
    8d96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    8d9a:	f005 bd84 	b.w	e8a6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    8d9e:	2103      	movs	r1, #3
    8da0:	e7f7      	b.n	8d92 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    8da2:	2102      	movs	r1, #2
    8da4:	e7f5      	b.n	8d92 <nrfx_gpiote_trigger_enable+0x72>
    8da6:	bf00      	nop
    8da8:	200001b4 	.word	0x200001b4
    8dac:	40006000 	.word	0x40006000

00008db0 <nrfx_gpiote_trigger_disable>:
{
    8db0:	b508      	push	{r3, lr}
    8db2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8db4:	f7ff fdcc 	bl	8950 <pin_in_use_by_te>
    8db8:	b1c0      	cbz	r0, 8dec <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8dba:	f102 0108 	add.w	r1, r2, #8
    8dbe:	4b0e      	ldr	r3, [pc, #56]	; (8df8 <nrfx_gpiote_trigger_disable+0x48>)
    8dc0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8dc4:	0799      	lsls	r1, r3, #30
    8dc6:	d411      	bmi.n	8dec <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8dc8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    8dca:	2201      	movs	r2, #1
    8dcc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    8dce:	009b      	lsls	r3, r3, #2
    8dd0:	490a      	ldr	r1, [pc, #40]	; (8dfc <nrfx_gpiote_trigger_disable+0x4c>)
    8dd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8dd6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8dda:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8dde:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    8de2:	f022 0203 	bic.w	r2, r2, #3
    8de6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    8dea:	bd08      	pop	{r3, pc}
    8dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    8df0:	2100      	movs	r1, #0
    8df2:	4610      	mov	r0, r2
    8df4:	f005 bd57 	b.w	e8a6 <nrf_gpio_cfg_sense_set>
    8df8:	200001b4 	.word	0x200001b4
    8dfc:	40006000 	.word	0x40006000

00008e00 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    8e00:	4b0e      	ldr	r3, [pc, #56]	; (8e3c <nrfx_gpiote_pin_uninit+0x3c>)
    8e02:	f100 0208 	add.w	r2, r0, #8
{
    8e06:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    8e08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    8e0c:	07db      	lsls	r3, r3, #31
{
    8e0e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    8e10:	d511      	bpl.n	8e36 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    8e12:	f7ff ffcd 	bl	8db0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    8e16:	4620      	mov	r0, r4
    8e18:	f7ff fdec 	bl	89f4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8e1c:	a801      	add	r0, sp, #4
    8e1e:	9401      	str	r4, [sp, #4]
    8e20:	f7ff fd88 	bl	8934 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8e24:	9b01      	ldr	r3, [sp, #4]
    8e26:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8e2a:	2202      	movs	r2, #2
    8e2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    8e30:	4803      	ldr	r0, [pc, #12]	; (8e40 <nrfx_gpiote_pin_uninit+0x40>)
}
    8e32:	b002      	add	sp, #8
    8e34:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8e36:	4803      	ldr	r0, [pc, #12]	; (8e44 <nrfx_gpiote_pin_uninit+0x44>)
    8e38:	e7fb      	b.n	8e32 <nrfx_gpiote_pin_uninit+0x32>
    8e3a:	bf00      	nop
    8e3c:	200001b4 	.word	0x200001b4
    8e40:	0bad0000 	.word	0x0bad0000
    8e44:	0bad0004 	.word	0x0bad0004

00008e48 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    8e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e4c:	4b64      	ldr	r3, [pc, #400]	; (8fe0 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    8e4e:	4865      	ldr	r0, [pc, #404]	; (8fe4 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8e50:	4965      	ldr	r1, [pc, #404]	; (8fe8 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    8e52:	2600      	movs	r6, #0
{
    8e54:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    8e56:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8e58:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e5a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    8e5c:	b135      	cbz	r5, 8e6c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    8e5e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    8e62:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8e64:	bf1e      	ittt	ne
    8e66:	601c      	strne	r4, [r3, #0]
    8e68:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    8e6a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8e6c:	3304      	adds	r3, #4
    8e6e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    8e70:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8e74:	d1f1      	bne.n	8e5a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e76:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8fe4 <nrfx_gpiote_irq_handler+0x19c>
    8e7a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    8e7e:	2b00      	cmp	r3, #0
    8e80:	f000 8091 	beq.w	8fa6 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    8e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8e88:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    8e8c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    8e8e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    8e92:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    8e96:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    8e98:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8e9c:	2700      	movs	r7, #0
            while (latch[i])
    8e9e:	f10d 0910 	add.w	r9, sp, #16
    8ea2:	017b      	lsls	r3, r7, #5
    8ea4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    8ea6:	f04f 0a01 	mov.w	sl, #1
    8eaa:	e049      	b.n	8f40 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    8eac:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8eae:	4a4f      	ldr	r2, [pc, #316]	; (8fec <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    8eb0:	fa94 f4a4 	rbit	r4, r4
    8eb4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    8eb8:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8eba:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    8ebe:	08e0      	lsrs	r0, r4, #3
    8ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    8ec4:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    8ec6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    8eca:	fa0a fc02 	lsl.w	ip, sl, r2
    8ece:	f819 2000 	ldrb.w	r2, [r9, r0]
    8ed2:	ea22 020c 	bic.w	r2, r2, ip
    8ed6:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8eda:	a803      	add	r0, sp, #12
    8edc:	f3c3 0582 	ubfx	r5, r3, #2, #3
    8ee0:	0899      	lsrs	r1, r3, #2
    8ee2:	f7ff fd27 	bl	8934 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8ee6:	9a03      	ldr	r2, [sp, #12]
    8ee8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    8eec:	074b      	lsls	r3, r1, #29
    8eee:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8ef2:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    8ef4:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    8ef8:	d529      	bpl.n	8f4e <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    8efa:	4620      	mov	r0, r4
    8efc:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8efe:	b2d5      	uxtb	r5, r2
    8f00:	f7ff fd30 	bl	8964 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8f04:	a803      	add	r0, sp, #12
    8f06:	9403      	str	r4, [sp, #12]
    8f08:	f7ff fd14 	bl	8934 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8f0c:	9b03      	ldr	r3, [sp, #12]
    8f0e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8f12:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    8f16:	f3c3 4301 	ubfx	r3, r3, #16, #2
    8f1a:	429d      	cmp	r5, r3
    8f1c:	d107      	bne.n	8f2e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    8f1e:	2100      	movs	r1, #0
    8f20:	4620      	mov	r0, r4
    8f22:	f005 fcc0 	bl	e8a6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    8f26:	4629      	mov	r1, r5
    8f28:	4620      	mov	r0, r4
    8f2a:	f005 fcbc 	bl	e8a6 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8f2e:	a803      	add	r0, sp, #12
    8f30:	9403      	str	r4, [sp, #12]
    8f32:	f7ff fcff 	bl	8934 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    8f36:	9b03      	ldr	r3, [sp, #12]
    8f38:	fa0a f303 	lsl.w	r3, sl, r3
    8f3c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    8f40:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    8f44:	2c00      	cmp	r4, #0
    8f46:	d1b1      	bne.n	8eac <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8f48:	b9cf      	cbnz	r7, 8f7e <nrfx_gpiote_irq_handler+0x136>
    8f4a:	2701      	movs	r7, #1
    8f4c:	e7a9      	b.n	8ea2 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8f4e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    8f50:	bf0c      	ite	eq
    8f52:	2103      	moveq	r1, #3
    8f54:	2102      	movne	r1, #2
    8f56:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8f58:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    8f5a:	f005 fca4 	bl	e8a6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8f5e:	2d03      	cmp	r5, #3
    8f60:	d004      	beq.n	8f6c <nrfx_gpiote_irq_handler+0x124>
    8f62:	9a01      	ldr	r2, [sp, #4]
    8f64:	2a02      	cmp	r2, #2
    8f66:	d106      	bne.n	8f76 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    8f68:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    8f6a:	d1e0      	bne.n	8f2e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    8f6c:	4659      	mov	r1, fp
    8f6e:	4620      	mov	r0, r4
    8f70:	f7ff fcf8 	bl	8964 <call_handler>
    8f74:	e7db      	b.n	8f2e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    8f76:	2a03      	cmp	r2, #3
    8f78:	d1d9      	bne.n	8f2e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    8f7a:	2d02      	cmp	r5, #2
    8f7c:	e7f5      	b.n	8f6a <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8f7e:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    8f82:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    8f86:	491a      	ldr	r1, [pc, #104]	; (8ff0 <nrfx_gpiote_irq_handler+0x1a8>)
    8f88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8f8c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    8f90:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    8f92:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    8f96:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    8f9a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    8f9c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    8fa0:	4313      	orrs	r3, r2
    8fa2:	f47f af7b 	bne.w	8e9c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    8fa6:	2401      	movs	r4, #1
    while (mask)
    8fa8:	b916      	cbnz	r6, 8fb0 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    8faa:	b007      	add	sp, #28
    8fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    8fb0:	fa96 f3a6 	rbit	r3, r6
    8fb4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    8fb8:	fa04 f203 	lsl.w	r2, r4, r3
    8fbc:	009b      	lsls	r3, r3, #2
    8fbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8fc2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8fc6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8fca:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    8fce:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    8fd2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    8fd6:	f3c1 4101 	ubfx	r1, r1, #16, #2
    8fda:	f7ff fcc3 	bl	8964 <call_handler>
    8fde:	e7e3      	b.n	8fa8 <nrfx_gpiote_irq_handler+0x160>
    8fe0:	40006100 	.word	0x40006100
    8fe4:	40006000 	.word	0x40006000
    8fe8:	40006120 	.word	0x40006120
    8fec:	200001b4 	.word	0x200001b4
    8ff0:	50000300 	.word	0x50000300

00008ff4 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8ff4:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    8ff6:	4c18      	ldr	r4, [pc, #96]	; (9058 <nrfx_power_init+0x64>)
    8ff8:	7823      	ldrb	r3, [r4, #0]
    8ffa:	bb53      	cbnz	r3, 9052 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    8ffc:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    8ffe:	0791      	lsls	r1, r2, #30
    9000:	f3c2 0340 	ubfx	r3, r2, #1, #1
    9004:	d511      	bpl.n	902a <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9006:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    900a:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
    900e:	2908      	cmp	r1, #8
    9010:	d11d      	bne.n	904e <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9012:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    9016:	2b05      	cmp	r3, #5
    9018:	d819      	bhi.n	904e <nrfx_power_init+0x5a>
    901a:	4910      	ldr	r1, [pc, #64]	; (905c <nrfx_power_init+0x68>)
    901c:	5cc9      	ldrb	r1, [r1, r3]
    901e:	2301      	movs	r3, #1
    9020:	b119      	cbz	r1, 902a <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    9022:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9026:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    902a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    902e:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    9032:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9036:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    9038:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
    903c:	f7fc fcbc 	bl	59b8 <arch_irq_is_enabled>
    9040:	b908      	cbnz	r0, 9046 <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    9042:	f7fc fc95 	bl	5970 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    9046:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    9048:	4805      	ldr	r0, [pc, #20]	; (9060 <nrfx_power_init+0x6c>)
    m_initialized = true;
    904a:	7023      	strb	r3, [r4, #0]
}
    904c:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    904e:	2301      	movs	r3, #1
    9050:	e7eb      	b.n	902a <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    9052:	4804      	ldr	r0, [pc, #16]	; (9064 <nrfx_power_init+0x70>)
    9054:	e7fa      	b.n	904c <nrfx_power_init+0x58>
    9056:	bf00      	nop
    9058:	20002241 	.word	0x20002241
    905c:	00012051 	.word	0x00012051
    9060:	0bad0000 	.word	0x0bad0000
    9064:	0bad000c 	.word	0x0bad000c

00009068 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    9068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    906c:	f44f 7260 	mov.w	r2, #896	; 0x380
    9070:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    9074:	4b01      	ldr	r3, [pc, #4]	; (907c <nrfx_power_usbevt_uninit+0x14>)
    9076:	2200      	movs	r2, #0
    9078:	601a      	str	r2, [r3, #0]
}
    907a:	4770      	bx	lr
    907c:	20001f3c 	.word	0x20001f3c

00009080 <nrfx_power_usbevt_init>:
{
    9080:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    9082:	f7ff fff1 	bl	9068 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    9086:	6803      	ldr	r3, [r0, #0]
    9088:	b10b      	cbz	r3, 908e <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    908a:	4a01      	ldr	r2, [pc, #4]	; (9090 <nrfx_power_usbevt_init+0x10>)
    908c:	6013      	str	r3, [r2, #0]
}
    908e:	bd08      	pop	{r3, pc}
    9090:	20001f3c 	.word	0x20001f3c

00009094 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    9094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    9098:	b510      	push	{r4, lr}
    909a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    909e:	0762      	lsls	r2, r4, #29
    90a0:	d507      	bpl.n	90b2 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    90a2:	f44f 7084 	mov.w	r0, #264	; 0x108
    90a6:	f005 fc0d 	bl	e8c4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    90aa:	b110      	cbz	r0, 90b2 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    90ac:	4b1e      	ldr	r3, [pc, #120]	; (9128 <nrfx_power_irq_handler+0x94>)
    90ae:	681b      	ldr	r3, [r3, #0]
    90b0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    90b2:	06a3      	lsls	r3, r4, #26
    90b4:	d508      	bpl.n	90c8 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    90b6:	f44f 708a 	mov.w	r0, #276	; 0x114
    90ba:	f005 fc03 	bl	e8c4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    90be:	b118      	cbz	r0, 90c8 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    90c0:	4b1a      	ldr	r3, [pc, #104]	; (912c <nrfx_power_irq_handler+0x98>)
    90c2:	2000      	movs	r0, #0
    90c4:	681b      	ldr	r3, [r3, #0]
    90c6:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    90c8:	0660      	lsls	r0, r4, #25
    90ca:	d508      	bpl.n	90de <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    90cc:	f44f 708c 	mov.w	r0, #280	; 0x118
    90d0:	f005 fbf8 	bl	e8c4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    90d4:	b118      	cbz	r0, 90de <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    90d6:	4b15      	ldr	r3, [pc, #84]	; (912c <nrfx_power_irq_handler+0x98>)
    90d8:	2001      	movs	r0, #1
    90da:	681b      	ldr	r3, [r3, #0]
    90dc:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    90de:	0621      	lsls	r1, r4, #24
    90e0:	d508      	bpl.n	90f4 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    90e2:	f44f 708e 	mov.w	r0, #284	; 0x11c
    90e6:	f005 fbed 	bl	e8c4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    90ea:	b118      	cbz	r0, 90f4 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    90ec:	4b10      	ldr	r3, [pc, #64]	; (9130 <nrfx_power_irq_handler+0x9c>)
    90ee:	2000      	movs	r0, #0
    90f0:	681b      	ldr	r3, [r3, #0]
    90f2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    90f4:	05e2      	lsls	r2, r4, #23
    90f6:	d508      	bpl.n	910a <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    90f8:	f44f 7090 	mov.w	r0, #288	; 0x120
    90fc:	f005 fbe2 	bl	e8c4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    9100:	b118      	cbz	r0, 910a <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    9102:	4b0b      	ldr	r3, [pc, #44]	; (9130 <nrfx_power_irq_handler+0x9c>)
    9104:	2001      	movs	r0, #1
    9106:	681b      	ldr	r3, [r3, #0]
    9108:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    910a:	05a3      	lsls	r3, r4, #22
    910c:	d50a      	bpl.n	9124 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    910e:	f44f 7092 	mov.w	r0, #292	; 0x124
    9112:	f005 fbd7 	bl	e8c4 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    9116:	b128      	cbz	r0, 9124 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    9118:	4b05      	ldr	r3, [pc, #20]	; (9130 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    911a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    911e:	681b      	ldr	r3, [r3, #0]
    9120:	2002      	movs	r0, #2
    9122:	4718      	bx	r3
}
    9124:	bd10      	pop	{r4, pc}
    9126:	bf00      	nop
    9128:	20001f34 	.word	0x20001f34
    912c:	20001f38 	.word	0x20001f38
    9130:	20001f3c 	.word	0x20001f3c

00009134 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    9134:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    9136:	4801      	ldr	r0, [pc, #4]	; (913c <nrfx_ppi_channel_alloc+0x8>)
    9138:	f7ff bb26 	b.w	8788 <nrfx_flag32_alloc>
    913c:	20000230 	.word	0x20000230

00009140 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9140:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9144:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    9148:	2a08      	cmp	r2, #8
    914a:	d106      	bne.n	915a <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    914c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    9150:	2b05      	cmp	r3, #5
    9152:	d804      	bhi.n	915e <nrf52_errata_187+0x1e>
    9154:	4a03      	ldr	r2, [pc, #12]	; (9164 <nrf52_errata_187+0x24>)
    9156:	5cd0      	ldrb	r0, [r2, r3]
    9158:	4770      	bx	lr
        return false;
    915a:	2000      	movs	r0, #0
    915c:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    915e:	2001      	movs	r0, #1
}
    9160:	4770      	bx	lr
    9162:	bf00      	nop
    9164:	00012057 	.word	0x00012057

00009168 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9168:	4b05      	ldr	r3, [pc, #20]	; (9180 <ep_state_access+0x18>)
    916a:	f010 0f80 	tst.w	r0, #128	; 0x80
    916e:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    9172:	bf08      	it	eq
    9174:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    9176:	f000 000f 	and.w	r0, r0, #15
}
    917a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    917e:	4770      	bx	lr
    9180:	200020b0 	.word	0x200020b0

00009184 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
    9184:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    9186:	f005 fbbe 	bl	e906 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    918a:	b118      	cbz	r0, 9194 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    918c:	4b03      	ldr	r3, [pc, #12]	; (919c <usbd_dma_pending_clear+0x18>)
    918e:	2200      	movs	r2, #0
    9190:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
    9194:	4b02      	ldr	r3, [pc, #8]	; (91a0 <usbd_dma_pending_clear+0x1c>)
    9196:	2200      	movs	r2, #0
    9198:	701a      	strb	r2, [r3, #0]
}
    919a:	bd08      	pop	{r3, pc}
    919c:	40027000 	.word	0x40027000
    91a0:	20002243 	.word	0x20002243

000091a4 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    91a4:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    91a6:	4a09      	ldr	r2, [pc, #36]	; (91cc <ev_usbreset_handler+0x28>)
    91a8:	2300      	movs	r3, #0
    91aa:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    91ac:	4a08      	ldr	r2, [pc, #32]	; (91d0 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    91ae:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    91b2:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    91b4:	f88d 3007 	strb.w	r3, [sp, #7]
    91b8:	2301      	movs	r3, #1
    91ba:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    91be:	4b05      	ldr	r3, [pc, #20]	; (91d4 <ev_usbreset_handler+0x30>)
    91c0:	a801      	add	r0, sp, #4
    91c2:	681b      	ldr	r3, [r3, #0]
    91c4:	4798      	blx	r3
}
    91c6:	b003      	add	sp, #12
    91c8:	f85d fb04 	ldr.w	pc, [sp], #4
    91cc:	20002242 	.word	0x20002242
    91d0:	20002245 	.word	0x20002245
    91d4:	20002140 	.word	0x20002140

000091d8 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    91d8:	4b21      	ldr	r3, [pc, #132]	; (9260 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    91da:	b513      	push	{r0, r1, r4, lr}
    91dc:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    91e0:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    91e4:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    91e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    91ea:	d50e      	bpl.n	920a <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    91ec:	4b1d      	ldr	r3, [pc, #116]	; (9264 <ev_usbevent_handler+0x8c>)
    91ee:	2201      	movs	r2, #1
    91f0:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    91f2:	2300      	movs	r3, #0
    91f4:	f8ad 3005 	strh.w	r3, [sp, #5]
    91f8:	f88d 3007 	strb.w	r3, [sp, #7]
    91fc:	2302      	movs	r3, #2
    91fe:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    9202:	4b19      	ldr	r3, [pc, #100]	; (9268 <ev_usbevent_handler+0x90>)
    9204:	a801      	add	r0, sp, #4
    9206:	681b      	ldr	r3, [r3, #0]
    9208:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    920a:	05a2      	lsls	r2, r4, #22
    920c:	d50d      	bpl.n	922a <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    920e:	4a15      	ldr	r2, [pc, #84]	; (9264 <ev_usbevent_handler+0x8c>)
    9210:	2300      	movs	r3, #0
    9212:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    9214:	f8ad 3005 	strh.w	r3, [sp, #5]
    9218:	f88d 3007 	strb.w	r3, [sp, #7]
    921c:	2303      	movs	r3, #3
    921e:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    9222:	4b11      	ldr	r3, [pc, #68]	; (9268 <ev_usbevent_handler+0x90>)
    9224:	a801      	add	r0, sp, #4
    9226:	681b      	ldr	r3, [r3, #0]
    9228:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    922a:	0563      	lsls	r3, r4, #21
    922c:	d515      	bpl.n	925a <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    922e:	4a0d      	ldr	r2, [pc, #52]	; (9264 <ev_usbevent_handler+0x8c>)
    9230:	7813      	ldrb	r3, [r2, #0]
    9232:	b193      	cbz	r3, 925a <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    9234:	2300      	movs	r3, #0
    9236:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    9238:	4a09      	ldr	r2, [pc, #36]	; (9260 <ev_usbevent_handler+0x88>)
    923a:	2101      	movs	r1, #1
    923c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9240:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9242:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    9244:	f8ad 3005 	strh.w	r3, [sp, #5]
    9248:	f88d 3007 	strb.w	r3, [sp, #7]
    924c:	2304      	movs	r3, #4
    924e:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    9252:	4b05      	ldr	r3, [pc, #20]	; (9268 <ev_usbevent_handler+0x90>)
    9254:	a801      	add	r0, sp, #4
    9256:	681b      	ldr	r3, [r3, #0]
    9258:	4798      	blx	r3
        }
    }
}
    925a:	b002      	add	sp, #8
    925c:	bd10      	pop	{r4, pc}
    925e:	bf00      	nop
    9260:	40027000 	.word	0x40027000
    9264:	20002242 	.word	0x20002242
    9268:	20002140 	.word	0x20002140

0000926c <usbd_errata_187_211_begin>:
	__asm__ volatile(
    926c:	f04f 0320 	mov.w	r3, #32
    9270:	f3ef 8011 	mrs	r0, BASEPRI
    9274:	f383 8812 	msr	BASEPRI_MAX, r3
    9278:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    927c:	4b0a      	ldr	r3, [pc, #40]	; (92a8 <usbd_errata_187_211_begin+0x3c>)
    927e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9282:	2203      	movs	r2, #3
    9284:	b961      	cbnz	r1, 92a0 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9286:	f249 3175 	movw	r1, #37749	; 0x9375
    928a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    928e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9292:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9296:	f380 8811 	msr	BASEPRI, r0
    929a:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    929e:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    92a0:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    92a4:	e7f7      	b.n	9296 <usbd_errata_187_211_begin+0x2a>
    92a6:	bf00      	nop
    92a8:	4006e000 	.word	0x4006e000

000092ac <usbd_errata_187_211_end>:
	__asm__ volatile(
    92ac:	f04f 0320 	mov.w	r3, #32
    92b0:	f3ef 8011 	mrs	r0, BASEPRI
    92b4:	f383 8812 	msr	BASEPRI_MAX, r3
    92b8:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    92bc:	4b0a      	ldr	r3, [pc, #40]	; (92e8 <usbd_errata_187_211_end+0x3c>)
    92be:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    92c2:	b961      	cbnz	r1, 92de <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    92c4:	f249 3275 	movw	r2, #37749	; 0x9375
    92c8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    92cc:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    92d0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    92d4:	f380 8811 	msr	BASEPRI, r0
    92d8:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    92dc:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    92de:	2200      	movs	r2, #0
    92e0:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    92e4:	e7f6      	b.n	92d4 <usbd_errata_187_211_end+0x28>
    92e6:	bf00      	nop
    92e8:	4006e000 	.word	0x4006e000

000092ec <nrfx_usbd_feeder_flash>:
{
    92ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    92ee:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    92f0:	4f0b      	ldr	r7, [pc, #44]	; (9320 <nrfx_usbd_feeder_flash+0x34>)
    92f2:	4295      	cmp	r5, r2
    92f4:	bf28      	it	cs
    92f6:	4615      	movcs	r5, r2
{
    92f8:	460c      	mov	r4, r1
    92fa:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    92fc:	462a      	mov	r2, r5
    92fe:	6809      	ldr	r1, [r1, #0]
    9300:	4638      	mov	r0, r7
    9302:	f004 fee7 	bl	e0d4 <memcpy>
    p_transfer->size -= tx_size;
    9306:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    9308:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    930a:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    930c:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    9310:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    9312:	6060      	str	r0, [r4, #4]
}
    9314:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    9316:	6022      	str	r2, [r4, #0]
}
    9318:	bf18      	it	ne
    931a:	2001      	movne	r0, #1
    931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    931e:	bf00      	nop
    9320:	20002144 	.word	0x20002144

00009324 <nrfx_usbd_feeder_flash_zlp>:
{
    9324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    9326:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    9328:	4294      	cmp	r4, r2
    932a:	bf28      	it	cs
    932c:	4614      	movcs	r4, r2
{
    932e:	4606      	mov	r6, r0
    9330:	460d      	mov	r5, r1
    if (tx_size != 0)
    9332:	b18c      	cbz	r4, 9358 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    9334:	4f09      	ldr	r7, [pc, #36]	; (935c <nrfx_usbd_feeder_flash_zlp+0x38>)
    9336:	6809      	ldr	r1, [r1, #0]
    9338:	4622      	mov	r2, r4
    933a:	4638      	mov	r0, r7
    933c:	f004 feca 	bl	e0d4 <memcpy>
        p_next->p_data.tx = p_buffer;
    9340:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    9342:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    9344:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    9346:	1b1b      	subs	r3, r3, r4
    9348:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    934a:	682b      	ldr	r3, [r5, #0]
}
    934c:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    934e:	4423      	add	r3, r4
    9350:	602b      	str	r3, [r5, #0]
}
    9352:	bf18      	it	ne
    9354:	2001      	movne	r0, #1
    9356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    9358:	6004      	str	r4, [r0, #0]
    935a:	e7f2      	b.n	9342 <nrfx_usbd_feeder_flash_zlp+0x1e>
    935c:	20002144 	.word	0x20002144

00009360 <ev_sof_handler>:
{
    9360:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    9362:	2300      	movs	r3, #0
    9364:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    9368:	4b0b      	ldr	r3, [pc, #44]	; (9398 <ev_sof_handler+0x38>)
    936a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    936e:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    9372:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    9376:	4a09      	ldr	r2, [pc, #36]	; (939c <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    9378:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    937a:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    937c:	bf0c      	ite	eq
    937e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    9382:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    9386:	430b      	orrs	r3, r1
    9388:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    938a:	4b05      	ldr	r3, [pc, #20]	; (93a0 <ev_sof_handler+0x40>)
    938c:	a801      	add	r0, sp, #4
    938e:	681b      	ldr	r3, [r3, #0]
    9390:	4798      	blx	r3
}
    9392:	b003      	add	sp, #12
    9394:	f85d fb04 	ldr.w	pc, [sp], #4
    9398:	40027000 	.word	0x40027000
    939c:	2000201c 	.word	0x2000201c
    93a0:	20002140 	.word	0x20002140

000093a4 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    93a4:	4b06      	ldr	r3, [pc, #24]	; (93c0 <atomic_and.constprop.0.isra.0+0x1c>)
    93a6:	f3bf 8f5b 	dmb	ish
    93aa:	e853 2f00 	ldrex	r2, [r3]
    93ae:	4002      	ands	r2, r0
    93b0:	e843 2100 	strex	r1, r2, [r3]
    93b4:	2900      	cmp	r1, #0
    93b6:	d1f8      	bne.n	93aa <atomic_and.constprop.0.isra.0+0x6>
    93b8:	f3bf 8f5b 	dmb	ish
}
    93bc:	4770      	bx	lr
    93be:	bf00      	nop
    93c0:	20001fac 	.word	0x20001fac

000093c4 <nrf_usbd_ep0in_dma_handler>:
{
    93c4:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    93c6:	f7ff fedd 	bl	9184 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    93ca:	4b08      	ldr	r3, [pc, #32]	; (93ec <nrf_usbd_ep0in_dma_handler+0x28>)
    93cc:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    93d0:	2a03      	cmp	r2, #3
    93d2:	d105      	bne.n	93e0 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    93d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    93d8:	f06f 0001 	mvn.w	r0, #1
    93dc:	f7ff bfe2 	b.w	93a4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    93e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    93e4:	2b00      	cmp	r3, #0
    93e6:	d0f5      	beq.n	93d4 <nrf_usbd_ep0in_dma_handler+0x10>
}
    93e8:	bd08      	pop	{r3, pc}
    93ea:	bf00      	nop
    93ec:	20002020 	.word	0x20002020

000093f0 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    93f0:	2201      	movs	r2, #1
{
    93f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    93f4:	fa02 f501 	lsl.w	r5, r2, r1
    93f8:	491c      	ldr	r1, [pc, #112]	; (946c <usbd_ep_data_handler+0x7c>)
    93fa:	4e1d      	ldr	r6, [pc, #116]	; (9470 <usbd_ep_data_handler+0x80>)
    93fc:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    93fe:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    9402:	ea43 0305 	orr.w	r3, r3, r5
{
    9406:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    9408:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    940a:	d024      	beq.n	9456 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    940c:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9410:	4b18      	ldr	r3, [pc, #96]	; (9474 <usbd_ep_data_handler+0x84>)
    9412:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9416:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    941a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    941e:	681a      	ldr	r2, [r3, #0]
    if (ret)
    9420:	b132      	cbz	r2, 9430 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9422:	2200      	movs	r2, #0
    9424:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    9426:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    9428:	681b      	ldr	r3, [r3, #0]
    942a:	d011      	beq.n	9450 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    942c:	f005 fabb 	bl	e9a6 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9430:	6831      	ldr	r1, [r6, #0]
    9432:	4029      	ands	r1, r5
    9434:	d10a      	bne.n	944c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9436:	2306      	movs	r3, #6
    9438:	f88d 3004 	strb.w	r3, [sp, #4]
    943c:	f88d 4006 	strb.w	r4, [sp, #6]
    9440:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    9444:	4b0c      	ldr	r3, [pc, #48]	; (9478 <usbd_ep_data_handler+0x88>)
    9446:	a801      	add	r0, sp, #4
    9448:	681b      	ldr	r3, [r3, #0]
    944a:	4798      	blx	r3
}
    944c:	b002      	add	sp, #8
    944e:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    9450:	f7ff ffb8 	bl	93c4 <nrf_usbd_ep0in_dma_handler>
    9454:	e7ec      	b.n	9430 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9456:	6833      	ldr	r3, [r6, #0]
    9458:	421d      	tst	r5, r3
    945a:	d1f7      	bne.n	944c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    945c:	2306      	movs	r3, #6
    945e:	f88d 3004 	strb.w	r3, [sp, #4]
    9462:	f88d 0006 	strb.w	r0, [sp, #6]
    9466:	f88d 2007 	strb.w	r2, [sp, #7]
    946a:	e7eb      	b.n	9444 <usbd_ep_data_handler+0x54>
    946c:	2000201c 	.word	0x2000201c
    9470:	20001fac 	.word	0x20001fac
    9474:	00010134 	.word	0x00010134
    9478:	20002140 	.word	0x20002140

0000947c <ev_setup_data_handler>:
{
    947c:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    947e:	4b05      	ldr	r3, [pc, #20]	; (9494 <ev_setup_data_handler+0x18>)
    9480:	781a      	ldrb	r2, [r3, #0]
    9482:	4610      	mov	r0, r2
    9484:	f005 fa85 	bl	e992 <ep2bit>
}
    9488:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    948c:	4601      	mov	r1, r0
    948e:	4610      	mov	r0, r2
    9490:	f7ff bfae 	b.w	93f0 <usbd_ep_data_handler>
    9494:	20002245 	.word	0x20002245

00009498 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    9498:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    949a:	f7ff fe73 	bl	9184 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    949e:	4b0c      	ldr	r3, [pc, #48]	; (94d0 <ev_dma_epout8_handler+0x38>)
    94a0:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    94a4:	2a03      	cmp	r2, #3
    94a6:	d010      	beq.n	94ca <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    94a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    94ac:	b96b      	cbnz	r3, 94ca <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    94ae:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    94b2:	f7ff ff77 	bl	93a4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    94b6:	2306      	movs	r3, #6
    94b8:	f88d 3004 	strb.w	r3, [sp, #4]
    94bc:	2308      	movs	r3, #8
    94be:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    94c2:	4b04      	ldr	r3, [pc, #16]	; (94d4 <ev_dma_epout8_handler+0x3c>)
    94c4:	a801      	add	r0, sp, #4
    94c6:	681b      	ldr	r3, [r3, #0]
    94c8:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    94ca:	b003      	add	sp, #12
    94cc:	f85d fb04 	ldr.w	pc, [sp], #4
    94d0:	20002020 	.word	0x20002020
    94d4:	20002140 	.word	0x20002140

000094d8 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    94d8:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    94da:	f7ff fe53 	bl	9184 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    94de:	4b10      	ldr	r3, [pc, #64]	; (9520 <ev_dma_epin8_handler+0x48>)
    94e0:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    94e4:	2a03      	cmp	r2, #3
    94e6:	d106      	bne.n	94f6 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    94e8:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    94ec:	b003      	add	sp, #12
    94ee:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    94f2:	f7ff bf57 	b.w	93a4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    94f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    94fa:	b96b      	cbnz	r3, 9518 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    94fc:	f46f 7080 	mvn.w	r0, #256	; 0x100
    9500:	f7ff ff50 	bl	93a4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9504:	2306      	movs	r3, #6
    9506:	f88d 3004 	strb.w	r3, [sp, #4]
    950a:	2388      	movs	r3, #136	; 0x88
    950c:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    9510:	4b04      	ldr	r3, [pc, #16]	; (9524 <ev_dma_epin8_handler+0x4c>)
    9512:	a801      	add	r0, sp, #4
    9514:	681b      	ldr	r3, [r3, #0]
    9516:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9518:	b003      	add	sp, #12
    951a:	f85d fb04 	ldr.w	pc, [sp], #4
    951e:	bf00      	nop
    9520:	20002020 	.word	0x20002020
    9524:	20002140 	.word	0x20002140

00009528 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    9528:	4a02      	ldr	r2, [pc, #8]	; (9534 <nrfx_usbd_uninit+0xc>)
    952a:	2300      	movs	r3, #0
    952c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    952e:	4a02      	ldr	r2, [pc, #8]	; (9538 <nrfx_usbd_uninit+0x10>)
    9530:	7013      	strb	r3, [r2, #0]
    return;
}
    9532:	4770      	bx	lr
    9534:	20002140 	.word	0x20002140
    9538:	20002244 	.word	0x20002244

0000953c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    953c:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    953e:	4b48      	ldr	r3, [pc, #288]	; (9660 <nrfx_usbd_enable+0x124>)
    9540:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9544:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    9548:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    954c:	f7ff fdf8 	bl	9140 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    9550:	b108      	cbz	r0, 9556 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    9552:	f7ff fe8b 	bl	926c <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    9556:	f005 f9d6 	bl	e906 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    955a:	b1c8      	cbz	r0, 9590 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
    955c:	f04f 0320 	mov.w	r3, #32
    9560:	f3ef 8011 	mrs	r0, BASEPRI
    9564:	f383 8812 	msr	BASEPRI_MAX, r3
    9568:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    956c:	4b3d      	ldr	r3, [pc, #244]	; (9664 <nrfx_usbd_enable+0x128>)
    956e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9572:	22c0      	movs	r2, #192	; 0xc0
    9574:	2900      	cmp	r1, #0
    9576:	d16a      	bne.n	964e <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9578:	f249 3175 	movw	r1, #37749	; 0x9375
    957c:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    9580:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9584:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9588:	f380 8811 	msr	BASEPRI, r0
    958c:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    9590:	4b33      	ldr	r3, [pc, #204]	; (9660 <nrfx_usbd_enable+0x124>)
    9592:	2201      	movs	r2, #1
    9594:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9598:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    959c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    95a0:	0512      	lsls	r2, r2, #20
    95a2:	d5fb      	bpl.n	959c <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
    95a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    95a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    95ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    95b0:	f005 f9a9 	bl	e906 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    95b4:	b1c0      	cbz	r0, 95e8 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
    95b6:	f04f 0320 	mov.w	r3, #32
    95ba:	f3ef 8011 	mrs	r0, BASEPRI
    95be:	f383 8812 	msr	BASEPRI_MAX, r3
    95c2:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    95c6:	4b27      	ldr	r3, [pc, #156]	; (9664 <nrfx_usbd_enable+0x128>)
    95c8:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    95cc:	2900      	cmp	r1, #0
    95ce:	d141      	bne.n	9654 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    95d0:	f249 3275 	movw	r2, #37749	; 0x9375
    95d4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    95d8:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    95dc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    95e0:	f380 8811 	msr	BASEPRI, r0
    95e4:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    95e8:	f7ff fdaa 	bl	9140 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    95ec:	b130      	cbz	r0, 95fc <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
    95ee:	f7ff fe5d 	bl	92ac <usbd_errata_187_211_end>
    95f2:	f7ff fda5 	bl	9140 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    95f6:	b108      	cbz	r0, 95fc <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
    95f8:	f7ff fe38 	bl	926c <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    95fc:	f005 f983 	bl	e906 <nrf52_errata_166>
    9600:	4b17      	ldr	r3, [pc, #92]	; (9660 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
    9602:	b150      	cbz	r0, 961a <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    9604:	f240 72e3 	movw	r2, #2019	; 0x7e3
    9608:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    960c:	2240      	movs	r2, #64	; 0x40
    960e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    9612:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    9616:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    961a:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    961c:	2280      	movs	r2, #128	; 0x80
    961e:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    9622:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9626:	4b10      	ldr	r3, [pc, #64]	; (9668 <nrfx_usbd_enable+0x12c>)
    9628:	f240 12ff 	movw	r2, #511	; 0x1ff
    962c:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    962e:	4b0f      	ldr	r3, [pc, #60]	; (966c <nrfx_usbd_enable+0x130>)
    9630:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    9632:	f7ff fda7 	bl	9184 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    9636:	4b0e      	ldr	r3, [pc, #56]	; (9670 <nrfx_usbd_enable+0x134>)
    9638:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    963a:	4b0e      	ldr	r3, [pc, #56]	; (9674 <nrfx_usbd_enable+0x138>)
    963c:	2202      	movs	r2, #2
    963e:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    9640:	f7ff fd7e 	bl	9140 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    9644:	b150      	cbz	r0, 965c <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    9646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    964a:	f7ff be2f 	b.w	92ac <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    964e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    9652:	e799      	b.n	9588 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9654:	2200      	movs	r2, #0
    9656:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    965a:	e7c1      	b.n	95e0 <nrfx_usbd_enable+0xa4>
}
    965c:	bd08      	pop	{r3, pc}
    965e:	bf00      	nop
    9660:	40027000 	.word	0x40027000
    9664:	4006e000 	.word	0x4006e000
    9668:	2000201c 	.word	0x2000201c
    966c:	20001fac 	.word	0x20001fac
    9670:	20002245 	.word	0x20002245
    9674:	20002244 	.word	0x20002244

00009678 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    9678:	4b0a      	ldr	r3, [pc, #40]	; (96a4 <nrfx_usbd_start+0x2c>)
    967a:	2200      	movs	r2, #0
{
    967c:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    967e:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    9680:	4a09      	ldr	r2, [pc, #36]	; (96a8 <nrfx_usbd_start+0x30>)
    9682:	4b0a      	ldr	r3, [pc, #40]	; (96ac <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    9684:	4c0a      	ldr	r4, [pc, #40]	; (96b0 <nrfx_usbd_start+0x38>)
    9686:	2800      	cmp	r0, #0
    9688:	bf18      	it	ne
    968a:	4613      	movne	r3, r2
    968c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    9690:	2027      	movs	r0, #39	; 0x27
    9692:	f7fc f96d 	bl	5970 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    9696:	2301      	movs	r3, #1
    9698:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    969c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    96a0:	bd10      	pop	{r4, pc}
    96a2:	bf00      	nop
    96a4:	20002242 	.word	0x20002242
    96a8:	01e01407 	.word	0x01e01407
    96ac:	01c01407 	.word	0x01c01407
    96b0:	40027000 	.word	0x40027000

000096b4 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    96b4:	4b03      	ldr	r3, [pc, #12]	; (96c4 <nrfx_usbd_is_enabled+0x10>)
    96b6:	7818      	ldrb	r0, [r3, #0]
}
    96b8:	2801      	cmp	r0, #1
    96ba:	bf94      	ite	ls
    96bc:	2000      	movls	r0, #0
    96be:	2001      	movhi	r0, #1
    96c0:	4770      	bx	lr
    96c2:	bf00      	nop
    96c4:	20002244 	.word	0x20002244

000096c8 <nrfx_usbd_init>:
{
    96c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    96cc:	4b1d      	ldr	r3, [pc, #116]	; (9744 <nrfx_usbd_init+0x7c>)
    96ce:	781c      	ldrb	r4, [r3, #0]
    96d0:	2c00      	cmp	r4, #0
    96d2:	d135      	bne.n	9740 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    96d4:	4a1c      	ldr	r2, [pc, #112]	; (9748 <nrfx_usbd_init+0x80>)
    96d6:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    96d8:	2201      	movs	r2, #1
    96da:	701a      	strb	r2, [r3, #0]
    96dc:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    96de:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    96e2:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    96e4:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    96e8:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    96ec:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    96ee:	bf14      	ite	ne
    96f0:	4641      	movne	r1, r8
    96f2:	2140      	moveq	r1, #64	; 0x40
    96f4:	4630      	mov	r0, r6
    96f6:	f005 f986 	bl	ea06 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    96fa:	4630      	mov	r0, r6
    96fc:	f7ff fd34 	bl	9168 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9700:	3501      	adds	r5, #1
    9702:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    9704:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    9706:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    9708:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    970a:	d1eb      	bne.n	96e4 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    970c:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    970e:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9710:	f240 16ff 	movw	r6, #511	; 0x1ff
    9714:	4620      	mov	r0, r4
    9716:	f005 f976 	bl	ea06 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    971a:	4620      	mov	r0, r4
    971c:	f7ff fd24 	bl	9168 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    9720:	3401      	adds	r4, #1
    9722:	b2e4      	uxtb	r4, r4
    9724:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    9726:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    9728:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    972a:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    972c:	d102      	bne.n	9734 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    972e:	4807      	ldr	r0, [pc, #28]	; (974c <nrfx_usbd_init+0x84>)
}
    9730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9734:	f014 0f08 	tst.w	r4, #8
    9738:	bf14      	ite	ne
    973a:	4631      	movne	r1, r6
    973c:	2140      	moveq	r1, #64	; 0x40
    973e:	e7e9      	b.n	9714 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    9740:	4803      	ldr	r0, [pc, #12]	; (9750 <nrfx_usbd_init+0x88>)
    9742:	e7f5      	b.n	9730 <nrfx_usbd_init+0x68>
    9744:	20002244 	.word	0x20002244
    9748:	20002140 	.word	0x20002140
    974c:	0bad0000 	.word	0x0bad0000
    9750:	0bad0005 	.word	0x0bad0005

00009754 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    9754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9758:	4605      	mov	r5, r0
	__asm__ volatile(
    975a:	f04f 0320 	mov.w	r3, #32
    975e:	f3ef 8811 	mrs	r8, BASEPRI
    9762:	f383 8812 	msr	BASEPRI_MAX, r3
    9766:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    976a:	f010 040f 	ands.w	r4, r0, #15
    976e:	d103      	bne.n	9778 <nrfx_usbd_ep_transfer+0x24>
    9770:	4b27      	ldr	r3, [pc, #156]	; (9810 <nrfx_usbd_ep_transfer+0xbc>)
    9772:	781b      	ldrb	r3, [r3, #0]
    9774:	4283      	cmp	r3, r0
    9776:	d146      	bne.n	9806 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9778:	4b26      	ldr	r3, [pc, #152]	; (9814 <nrfx_usbd_ep_transfer+0xc0>)
    977a:	4f27      	ldr	r7, [pc, #156]	; (9818 <nrfx_usbd_ep_transfer+0xc4>)
    977c:	681a      	ldr	r2, [r3, #0]
    977e:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    9780:	4628      	mov	r0, r5
    9782:	f005 f906 	bl	e992 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9786:	43d2      	mvns	r2, r2
    9788:	b292      	uxth	r2, r2
    978a:	f04f 0901 	mov.w	r9, #1
    978e:	4332      	orrs	r2, r6
    9790:	fa09 f900 	lsl.w	r9, r9, r0
    9794:	ea12 0f09 	tst.w	r2, r9
    9798:	d137      	bne.n	980a <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    979a:	4628      	mov	r0, r5
    979c:	f7ff fce4 	bl	9168 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    97a0:	220c      	movs	r2, #12
    97a2:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    97a4:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    97a6:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    97a8:	d529      	bpl.n	97fe <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    97aa:	4a1c      	ldr	r2, [pc, #112]	; (981c <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    97ac:	6808      	ldr	r0, [r1, #0]
    97ae:	4414      	add	r4, r2
    97b0:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    97b4:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    97b6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    97ba:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    97be:	d119      	bne.n	97f4 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    97c0:	b9b2      	cbnz	r2, 97f0 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    97c2:	4a17      	ldr	r2, [pc, #92]	; (9820 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    97c4:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    97c6:	c907      	ldmia	r1, {r0, r1, r2}
    97c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    97cc:	2200      	movs	r2, #0
    97ce:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    97d0:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    97d2:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    97d4:	4b13      	ldr	r3, [pc, #76]	; (9824 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    97d6:	4814      	ldr	r0, [pc, #80]	; (9828 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    97d8:	ea46 0609 	orr.w	r6, r6, r9
    97dc:	2280      	movs	r2, #128	; 0x80
    97de:	603e      	str	r6, [r7, #0]
    97e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    97e4:	f388 8811 	msr	BASEPRI, r8
    97e8:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    97ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    97f0:	4a0e      	ldr	r2, [pc, #56]	; (982c <nrfx_usbd_ep_transfer+0xd8>)
    97f2:	e7e7      	b.n	97c4 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    97f4:	b90a      	cbnz	r2, 97fa <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    97f6:	4a0e      	ldr	r2, [pc, #56]	; (9830 <nrfx_usbd_ep_transfer+0xdc>)
    97f8:	e7e4      	b.n	97c4 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    97fa:	4a0e      	ldr	r2, [pc, #56]	; (9834 <nrfx_usbd_ep_transfer+0xe0>)
    97fc:	e7e2      	b.n	97c4 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    97fe:	4a0e      	ldr	r2, [pc, #56]	; (9838 <nrfx_usbd_ep_transfer+0xe4>)
    9800:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    9802:	4a0e      	ldr	r2, [pc, #56]	; (983c <nrfx_usbd_ep_transfer+0xe8>)
    9804:	e7de      	b.n	97c4 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    9806:	480e      	ldr	r0, [pc, #56]	; (9840 <nrfx_usbd_ep_transfer+0xec>)
    9808:	e7ec      	b.n	97e4 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
    980a:	480e      	ldr	r0, [pc, #56]	; (9844 <nrfx_usbd_ep_transfer+0xf0>)
    980c:	e7ea      	b.n	97e4 <nrfx_usbd_ep_transfer+0x90>
    980e:	bf00      	nop
    9810:	20002245 	.word	0x20002245
    9814:	2000201c 	.word	0x2000201c
    9818:	20001fac 	.word	0x20001fac
    981c:	20001fb0 	.word	0x20001fb0
    9820:	0000e947 	.word	0x0000e947
    9824:	e000e100 	.word	0xe000e100
    9828:	0bad0000 	.word	0x0bad0000
    982c:	0000e969 	.word	0x0000e969
    9830:	000092ed 	.word	0x000092ed
    9834:	00009325 	.word	0x00009325
    9838:	20001f40 	.word	0x20001f40
    983c:	0000e919 	.word	0x0000e919
    9840:	0bad000a 	.word	0x0bad000a
    9844:	0bad000b 	.word	0x0bad000b

00009848 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9848:	f010 0f08 	tst.w	r0, #8
    984c:	4b07      	ldr	r3, [pc, #28]	; (986c <nrfx_usbd_epout_size_get+0x24>)
    984e:	d006      	beq.n	985e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    9850:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    9854:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    9858:	bf18      	it	ne
    985a:	2000      	movne	r0, #0
    985c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    985e:	f000 000f 	and.w	r0, r0, #15
    9862:	f500 7094 	add.w	r0, r0, #296	; 0x128
    9866:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    986a:	4770      	bx	lr
    986c:	40027000 	.word	0x40027000

00009870 <usbd_dmareq_process>:
{
    9870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    9874:	f8df 815c 	ldr.w	r8, [pc, #348]	; 99d4 <usbd_dmareq_process+0x164>
    9878:	f898 3000 	ldrb.w	r3, [r8]
{
    987c:	b085      	sub	sp, #20
    if (!m_dma_pending)
    987e:	2b00      	cmp	r3, #0
    9880:	d16b      	bne.n	995a <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    9882:	f8df 9154 	ldr.w	r9, [pc, #340]	; 99d8 <usbd_dmareq_process+0x168>
    9886:	4e55      	ldr	r6, [pc, #340]	; (99dc <usbd_dmareq_process+0x16c>)
    9888:	f8d9 1000 	ldr.w	r1, [r9]
    988c:	6833      	ldr	r3, [r6, #0]
    988e:	4019      	ands	r1, r3
    9890:	d063      	beq.n	995a <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    9892:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    9896:	bf14      	ite	ne
    9898:	fa93 f1a3 	rbitne	r1, r3
    989c:	fa91 f1a1 	rbiteq	r1, r1
    98a0:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    98a4:	290f      	cmp	r1, #15
    98a6:	bf8a      	itet	hi
    98a8:	f1a1 0410 	subhi.w	r4, r1, #16
    98ac:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    98b0:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    98b2:	4620      	mov	r0, r4
    98b4:	f7ff fc58 	bl	9168 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    98b8:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    98bc:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    98c0:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    98c4:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    98c8:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    98ca:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    98ce:	da47      	bge.n	9960 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
    98d0:	6803      	ldr	r3, [r0, #0]
    98d2:	8982      	ldrh	r2, [r0, #12]
    98d4:	6841      	ldr	r1, [r0, #4]
    98d6:	a802      	add	r0, sp, #8
    98d8:	4798      	blx	r3
                if (!continue_transfer)
    98da:	b900      	cbnz	r0, 98de <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    98dc:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    98de:	f005 f812 	bl	e906 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    98e2:	b118      	cbz	r0, 98ec <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    98e4:	4b3e      	ldr	r3, [pc, #248]	; (99e0 <usbd_dmareq_process+0x170>)
    98e6:	2282      	movs	r2, #130	; 0x82
    98e8:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    98ec:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    98ee:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    98f0:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    98f2:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    98f6:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    98f8:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    98fc:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    98fe:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    9902:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    9904:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    9906:	f004 0008 	and.w	r0, r4, #8
    990a:	9902      	ldr	r1, [sp, #8]
    990c:	4b34      	ldr	r3, [pc, #208]	; (99e0 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    990e:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9912:	da4f      	bge.n	99b4 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
    9914:	2800      	cmp	r0, #0
    9916:	d045      	beq.n	99a4 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
    9918:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    991c:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    9920:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9922:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    992a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    992e:	2201      	movs	r2, #1
    9930:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9932:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9934:	4a2b      	ldr	r2, [pc, #172]	; (99e4 <usbd_dmareq_process+0x174>)
    9936:	4b2c      	ldr	r3, [pc, #176]	; (99e8 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9938:	4929      	ldr	r1, [pc, #164]	; (99e0 <usbd_dmareq_process+0x170>)
    993a:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    993e:	bf38      	it	cc
    9940:	4613      	movcc	r3, r2
    9942:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9946:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    994a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    994e:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    9950:	b91a      	cbnz	r2, 995a <usbd_dmareq_process+0xea>
    9952:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    9956:	2a00      	cmp	r2, #0
    9958:	d0f9      	beq.n	994e <usbd_dmareq_process+0xde>
}
    995a:	b005      	add	sp, #20
    995c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9960:	4620      	mov	r0, r4
    9962:	f7ff ff71 	bl	9848 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    9966:	89aa      	ldrh	r2, [r5, #12]
    9968:	6869      	ldr	r1, [r5, #4]
    996a:	f8d5 c000 	ldr.w	ip, [r5]
    996e:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9970:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    9972:	a802      	add	r0, sp, #8
    9974:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    9976:	9a02      	ldr	r2, [sp, #8]
    9978:	2a00      	cmp	r2, #0
    997a:	d0ae      	beq.n	98da <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    997c:	9a03      	ldr	r2, [sp, #12]
    997e:	4297      	cmp	r7, r2
    9980:	d9ab      	bls.n	98da <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    9982:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9984:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    9986:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9988:	f7ff fd0c 	bl	93a4 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    998c:	2306      	movs	r3, #6
    998e:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    9992:	4b16      	ldr	r3, [pc, #88]	; (99ec <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9994:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    9998:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    999a:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    999e:	a801      	add	r0, sp, #4
    99a0:	4798      	blx	r3
                    continue;
    99a2:	e771      	b.n	9888 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    99a4:	2014      	movs	r0, #20
    99a6:	fb00 3304 	mla	r3, r0, r4, r3
    99aa:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    99ae:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    99b2:	e7b5      	b.n	9920 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
    99b4:	b128      	cbz	r0, 99c2 <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
    99b6:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    99ba:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    99be:	2328      	movs	r3, #40	; 0x28
    99c0:	e7af      	b.n	9922 <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
    99c2:	2014      	movs	r0, #20
    99c4:	fb00 3304 	mla	r3, r0, r4, r3
    99c8:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    99cc:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    99d0:	e7f5      	b.n	99be <usbd_dmareq_process+0x14e>
    99d2:	bf00      	nop
    99d4:	20002243 	.word	0x20002243
    99d8:	20001fac 	.word	0x20001fac
    99dc:	2000201c 	.word	0x2000201c
    99e0:	40027000 	.word	0x40027000
    99e4:	00010146 	.word	0x00010146
    99e8:	00010134 	.word	0x00010134
    99ec:	20002140 	.word	0x20002140

000099f0 <ev_epdata_handler>:
{
    99f0:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    99f2:	4b0f      	ldr	r3, [pc, #60]	; (9a30 <ev_epdata_handler+0x40>)
    99f4:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    99f8:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    99fc:	2501      	movs	r5, #1
    while (dataepstatus)
    99fe:	b91c      	cbnz	r4, 9a08 <ev_epdata_handler+0x18>
}
    9a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    9a04:	f7ff bf34 	b.w	9870 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9a08:	fa94 f3a4 	rbit	r3, r4
    9a0c:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9a10:	2b0f      	cmp	r3, #15
    9a12:	bfc8      	it	gt
    9a14:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9a18:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9a1a:	bfd4      	ite	le
    9a1c:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    9a20:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    9a22:	fa05 f303 	lsl.w	r3, r5, r3
    9a26:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    9a2a:	f7ff fce1 	bl	93f0 <usbd_ep_data_handler>
    9a2e:	e7e6      	b.n	99fe <ev_epdata_handler+0xe>
    9a30:	40027000 	.word	0x40027000

00009a34 <nrf_usbd_epout_dma_handler>:
{
    9a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9a36:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
    9a38:	f7ff fba4 	bl	9184 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9a3c:	4620      	mov	r0, r4
    9a3e:	f7ff fb93 	bl	9168 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9a42:	7b83      	ldrb	r3, [r0, #14]
    9a44:	2b03      	cmp	r3, #3
    9a46:	d10d      	bne.n	9a64 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9a48:	4620      	mov	r0, r4
    9a4a:	f004 ffa2 	bl	e992 <ep2bit>
    9a4e:	2301      	movs	r3, #1
    9a50:	fa03 f000 	lsl.w	r0, r3, r0
    9a54:	43c0      	mvns	r0, r0
    9a56:	f7ff fca5 	bl	93a4 <atomic_and.constprop.0.isra.0>
}
    9a5a:	b003      	add	sp, #12
    9a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    9a60:	f7ff bf06 	b.w	9870 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    9a64:	6805      	ldr	r5, [r0, #0]
    9a66:	2d00      	cmp	r5, #0
    9a68:	d1f7      	bne.n	9a5a <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9a6a:	4620      	mov	r0, r4
    9a6c:	f004 ff91 	bl	e992 <ep2bit>
    9a70:	2301      	movs	r3, #1
    9a72:	fa03 f000 	lsl.w	r0, r3, r0
    9a76:	43c0      	mvns	r0, r0
    9a78:	f7ff fc94 	bl	93a4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9a7c:	2306      	movs	r3, #6
    9a7e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9a82:	4b04      	ldr	r3, [pc, #16]	; (9a94 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9a84:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    9a88:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9a8a:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    9a8e:	a801      	add	r0, sp, #4
    9a90:	4798      	blx	r3
    9a92:	e7e2      	b.n	9a5a <nrf_usbd_epout_dma_handler+0x26>
    9a94:	20002140 	.word	0x20002140

00009a98 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    9a98:	4b02      	ldr	r3, [pc, #8]	; (9aa4 <nrfx_usbd_ep_stall+0xc>)
    9a9a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9a9e:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    9aa2:	4770      	bx	lr
    9aa4:	40027000 	.word	0x40027000

00009aa8 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9aa8:	0702      	lsls	r2, r0, #28
    9aaa:	d413      	bmi.n	9ad4 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    9aac:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9ab0:	f010 0f80 	tst.w	r0, #128	; 0x80
    9ab4:	4a08      	ldr	r2, [pc, #32]	; (9ad8 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    9ab6:	bf0b      	itete	eq
    9ab8:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    9abc:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    9ac0:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    9ac4:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    9ac8:	bf08      	it	eq
    9aca:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    9acc:	1e43      	subs	r3, r0, #1
    9ace:	4258      	negs	r0, r3
    9ad0:	4158      	adcs	r0, r3
    9ad2:	4770      	bx	lr
        return false;
    9ad4:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    9ad6:	4770      	bx	lr
    9ad8:	40027000 	.word	0x40027000

00009adc <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    9adc:	4b04      	ldr	r3, [pc, #16]	; (9af0 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    9ade:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    9ae2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9ae6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    9aea:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    9aee:	4770      	bx	lr
    9af0:	40027000 	.word	0x40027000

00009af4 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    9af4:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9af6:	2208      	movs	r2, #8
    9af8:	2100      	movs	r1, #0
{
    9afa:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9afc:	f004 faf5 	bl	e0ea <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9b00:	4b0e      	ldr	r3, [pc, #56]	; (9b3c <nrfx_usbd_setup_get+0x48>)
    9b02:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    9b06:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    9b08:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    9b0c:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    9b0e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    9b12:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    9b16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    9b1a:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    9b1c:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    9b20:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    9b24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    9b28:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    9b2a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    9b2e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    9b32:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    9b36:	80e3      	strh	r3, [r4, #6]
}
    9b38:	bd10      	pop	{r4, pc}
    9b3a:	bf00      	nop
    9b3c:	40027000 	.word	0x40027000

00009b40 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9b40:	4b02      	ldr	r3, [pc, #8]	; (9b4c <nrfx_usbd_setup_data_clear+0xc>)
    9b42:	2201      	movs	r2, #1
    9b44:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    9b48:	4770      	bx	lr
    9b4a:	bf00      	nop
    9b4c:	40027000 	.word	0x40027000

00009b50 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9b50:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    9b52:	f7ff fb17 	bl	9184 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9b56:	4b10      	ldr	r3, [pc, #64]	; (9b98 <ev_dma_epout0_handler+0x48>)
    9b58:	7b9a      	ldrb	r2, [r3, #14]
    9b5a:	2a03      	cmp	r2, #3
    9b5c:	d106      	bne.n	9b6c <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b5e:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9b62:	b002      	add	sp, #8
    9b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b68:	f7ff bc1c 	b.w	93a4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    9b6c:	681c      	ldr	r4, [r3, #0]
    9b6e:	b974      	cbnz	r4, 9b8e <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9b70:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    9b74:	f7ff fc16 	bl	93a4 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9b78:	2306      	movs	r3, #6
    9b7a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9b7e:	4b07      	ldr	r3, [pc, #28]	; (9b9c <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9b80:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    9b84:	681b      	ldr	r3, [r3, #0]
    9b86:	a801      	add	r0, sp, #4
    9b88:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9b8a:	b002      	add	sp, #8
    9b8c:	bd10      	pop	{r4, pc}
    9b8e:	b002      	add	sp, #8
    9b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    9b94:	f7ff bfd4 	b.w	9b40 <nrfx_usbd_setup_data_clear>
    9b98:	20002020 	.word	0x20002020
    9b9c:	20002140 	.word	0x20002140

00009ba0 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9ba0:	4b02      	ldr	r3, [pc, #8]	; (9bac <nrfx_usbd_setup_clear+0xc>)
    9ba2:	2201      	movs	r2, #1
    9ba4:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    9ba8:	4770      	bx	lr
    9baa:	bf00      	nop
    9bac:	40027000 	.word	0x40027000

00009bb0 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9bb0:	4b02      	ldr	r3, [pc, #8]	; (9bbc <nrfx_usbd_setup_stall+0xc>)
    9bb2:	2201      	movs	r2, #1
    9bb4:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    9bb8:	4770      	bx	lr
    9bba:	bf00      	nop
    9bbc:	40027000 	.word	0x40027000

00009bc0 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    9bc0:	4b01      	ldr	r3, [pc, #4]	; (9bc8 <nrfx_usbd_last_setup_dir_get+0x8>)
    9bc2:	7818      	ldrb	r0, [r3, #0]
    9bc4:	4770      	bx	lr
    9bc6:	bf00      	nop
    9bc8:	20002245 	.word	0x20002245

00009bcc <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    9bcc:	b510      	push	{r4, lr}
    9bce:	4602      	mov	r2, r0
	__asm__ volatile(
    9bd0:	f04f 0320 	mov.w	r3, #32
    9bd4:	f3ef 8411 	mrs	r4, BASEPRI
    9bd8:	f383 8812 	msr	BASEPRI_MAX, r3
    9bdc:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    9be0:	f004 fed7 	bl	e992 <ep2bit>
    9be4:	490d      	ldr	r1, [pc, #52]	; (9c1c <nrfx_usbd_transfer_out_drop+0x50>)
    9be6:	2301      	movs	r3, #1
    9be8:	fa03 f000 	lsl.w	r0, r3, r0
    9bec:	680b      	ldr	r3, [r1, #0]
    9bee:	ea23 0300 	bic.w	r3, r3, r0
    9bf2:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    9bf4:	f012 0108 	ands.w	r1, r2, #8
    9bf8:	d10a      	bne.n	9c10 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    9bfa:	f002 030f 	and.w	r3, r2, #15
    9bfe:	009b      	lsls	r3, r3, #2
    9c00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9c04:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    9c08:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9c0c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    9c10:	f384 8811 	msr	BASEPRI, r4
    9c14:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9c18:	bd10      	pop	{r4, pc}
    9c1a:	bf00      	nop
    9c1c:	2000201c 	.word	0x2000201c

00009c20 <usbd_ep_abort>:
{
    9c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9c22:	4601      	mov	r1, r0
	__asm__ volatile(
    9c24:	f04f 0320 	mov.w	r3, #32
    9c28:	f3ef 8511 	mrs	r5, BASEPRI
    9c2c:	f383 8812 	msr	BASEPRI_MAX, r3
    9c30:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9c34:	f7ff fa98 	bl	9168 <ep_state_access>
    9c38:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9c3a:	4608      	mov	r0, r1
    9c3c:	f004 fea9 	bl	e992 <ep2bit>
    9c40:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    9c42:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9c46:	fa02 f200 	lsl.w	r2, r2, r0
    9c4a:	482e      	ldr	r0, [pc, #184]	; (9d04 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    9c4c:	d118      	bne.n	9c80 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9c4e:	6803      	ldr	r3, [r0, #0]
    9c50:	ea32 0403 	bics.w	r4, r2, r3
    9c54:	d00a      	beq.n	9c6c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    9c56:	4608      	mov	r0, r1
    9c58:	f7ff ffb8 	bl	9bcc <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    9c5c:	2303      	movs	r3, #3
    9c5e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    9c60:	f385 8811 	msr	BASEPRI, r5
    9c64:	f3bf 8f6f 	isb	sy
}
    9c68:	b003      	add	sp, #12
    9c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9c6c:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    9c70:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9c72:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9c74:	4b24      	ldr	r3, [pc, #144]	; (9d08 <usbd_ep_abort+0xe8>)
    9c76:	6818      	ldr	r0, [r3, #0]
    9c78:	ea20 0002 	bic.w	r0, r0, r2
    9c7c:	6018      	str	r0, [r3, #0]
    9c7e:	e7ed      	b.n	9c5c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9c80:	070b      	lsls	r3, r1, #28
    9c82:	d415      	bmi.n	9cb0 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    9c84:	2980      	cmp	r1, #128	; 0x80
    9c86:	4b21      	ldr	r3, [pc, #132]	; (9d0c <usbd_ep_abort+0xec>)
    9c88:	d02f      	beq.n	9cea <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    9c8a:	f001 040f 	and.w	r4, r1, #15
    9c8e:	f204 34da 	addw	r4, r4, #986	; 0x3da
    9c92:	0064      	lsls	r4, r4, #1
    9c94:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9c98:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9c9c:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9ca0:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9ca2:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9ca6:	433c      	orrs	r4, r7
    9ca8:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9cac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9cb0:	4f15      	ldr	r7, [pc, #84]	; (9d08 <usbd_ep_abort+0xe8>)
    9cb2:	6804      	ldr	r4, [r0, #0]
    9cb4:	683b      	ldr	r3, [r7, #0]
    9cb6:	ea64 0c03 	orn	ip, r4, r3
    9cba:	ea1c 0f02 	tst.w	ip, r2
    9cbe:	d0cf      	beq.n	9c60 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9cc0:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9cc2:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9cc6:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    9cc8:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9cca:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    9ccc:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9cce:	2303      	movs	r3, #3
    9cd0:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9cd2:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9cd6:	4b0e      	ldr	r3, [pc, #56]	; (9d10 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9cd8:	f88d 1006 	strb.w	r1, [sp, #6]
    9cdc:	2206      	movs	r2, #6
            m_event_handler(&evt);
    9cde:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9ce0:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    9ce4:	a801      	add	r0, sp, #4
    9ce6:	4798      	blx	r3
    9ce8:	e7ba      	b.n	9c60 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9cea:	f240 74b4 	movw	r4, #1972	; 0x7b4
    9cee:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9cf2:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9cf6:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9cfa:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9cfc:	f044 0404 	orr.w	r4, r4, #4
    9d00:	e7d1      	b.n	9ca6 <usbd_ep_abort+0x86>
    9d02:	bf00      	nop
    9d04:	20001fac 	.word	0x20001fac
    9d08:	2000201c 	.word	0x2000201c
    9d0c:	40027000 	.word	0x40027000
    9d10:	20002140 	.word	0x20002140

00009d14 <ev_setup_handler>:
{
    9d14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9d16:	4b17      	ldr	r3, [pc, #92]	; (9d74 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9d18:	4c17      	ldr	r4, [pc, #92]	; (9d78 <ev_setup_handler+0x64>)
    9d1a:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    9d1e:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    9d20:	4e16      	ldr	r6, [pc, #88]	; (9d7c <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9d22:	43da      	mvns	r2, r3
    9d24:	4b16      	ldr	r3, [pc, #88]	; (9d80 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    9d26:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9d28:	681b      	ldr	r3, [r3, #0]
    9d2a:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    9d2c:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9d2e:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    9d30:	f004 fe2f 	bl	e992 <ep2bit>
    9d34:	2301      	movs	r3, #1
    9d36:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9d38:	4213      	tst	r3, r2
    9d3a:	d002      	beq.n	9d42 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    9d3c:	4608      	mov	r0, r1
    9d3e:	f7ff ff6f 	bl	9c20 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    9d42:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    9d46:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    9d4a:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    9d4c:	f7ff fb2a 	bl	93a4 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    9d50:	6823      	ldr	r3, [r4, #0]
    9d52:	f043 0301 	orr.w	r3, r3, #1
    9d56:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    9d58:	2300      	movs	r3, #0
    9d5a:	f8ad 3005 	strh.w	r3, [sp, #5]
    9d5e:	f88d 3007 	strb.w	r3, [sp, #7]
    9d62:	2305      	movs	r3, #5
    9d64:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    9d68:	4b06      	ldr	r3, [pc, #24]	; (9d84 <ev_setup_handler+0x70>)
    9d6a:	a801      	add	r0, sp, #4
    9d6c:	681b      	ldr	r3, [r3, #0]
    9d6e:	4798      	blx	r3
}
    9d70:	b002      	add	sp, #8
    9d72:	bd70      	pop	{r4, r5, r6, pc}
    9d74:	40027000 	.word	0x40027000
    9d78:	2000201c 	.word	0x2000201c
    9d7c:	20002245 	.word	0x20002245
    9d80:	20001fac 	.word	0x20001fac
    9d84:	20002140 	.word	0x20002140

00009d88 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    9d88:	4b1b      	ldr	r3, [pc, #108]	; (9df8 <nrfx_usbd_irq_handler+0x70>)
    9d8a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    9d8e:	2300      	movs	r3, #0
{
    9d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
    9d94:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9d96:	461d      	mov	r5, r3
    while (to_process)
    9d98:	b970      	cbnz	r0, 9db8 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    9d9a:	4f18      	ldr	r7, [pc, #96]	; (9dfc <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    9d9c:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    9da0:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    9da4:	f04f 0801 	mov.w	r8, #1
    while (active)
    9da8:	b9bc      	cbnz	r4, 9dda <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    9daa:	f7ff fd61 	bl	9870 <usbd_dmareq_process>
    if (setup_active)
    9dae:	b306      	cbz	r6, 9df2 <nrfx_usbd_irq_handler+0x6a>
}
    9db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    9db4:	f7ff bfae 	b.w	9d14 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    9db8:	fa90 f2a0 	rbit	r2, r0
    9dbc:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9dc0:	490f      	ldr	r1, [pc, #60]	; (9e00 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    9dc2:	0096      	lsls	r6, r2, #2
    9dc4:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    9dc6:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9dca:	680e      	ldr	r6, [r1, #0]
    if (ret)
    9dcc:	b116      	cbz	r6, 9dd4 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9dce:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    9dd0:	6809      	ldr	r1, [r1, #0]
    9dd2:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    9dd4:	ea20 0002 	bic.w	r0, r0, r2
    9dd8:	e7de      	b.n	9d98 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    9dda:	fa94 f5a4 	rbit	r5, r4
    9dde:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    9de2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    9de6:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    9dea:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    9dec:	ea24 0405 	bic.w	r4, r4, r5
    9df0:	e7da      	b.n	9da8 <nrfx_usbd_irq_handler+0x20>
}
    9df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9df6:	bf00      	nop
    9df8:	40027000 	.word	0x40027000
    9dfc:	000100a4 	.word	0x000100a4
    9e00:	40027100 	.word	0x40027100

00009e04 <usbd_ep_abort_all>:
{
    9e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    9e06:	4e11      	ldr	r6, [pc, #68]	; (9e4c <usbd_ep_abort_all+0x48>)
    9e08:	4b11      	ldr	r3, [pc, #68]	; (9e50 <usbd_ep_abort_all+0x4c>)
    9e0a:	6834      	ldr	r4, [r6, #0]
    9e0c:	681b      	ldr	r3, [r3, #0]
    9e0e:	0c24      	lsrs	r4, r4, #16
    9e10:	0424      	lsls	r4, r4, #16
    9e12:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    9e14:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    9e16:	b91c      	cbnz	r4, 9e20 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9e18:	f240 13ff 	movw	r3, #511	; 0x1ff
    9e1c:	6033      	str	r3, [r6, #0]
}
    9e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    9e20:	fa94 f5a4 	rbit	r5, r4
    9e24:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9e28:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    9e2a:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9e2c:	bfc6      	itte	gt
    9e2e:	f1a5 0010 	subgt.w	r0, r5, #16
    9e32:	b2c0      	uxtbgt	r0, r0
    9e34:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    9e38:	0703      	lsls	r3, r0, #28
    9e3a:	d401      	bmi.n	9e40 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    9e3c:	f7ff fef0 	bl	9c20 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    9e40:	fa07 f505 	lsl.w	r5, r7, r5
    9e44:	ea24 0405 	bic.w	r4, r4, r5
    9e48:	e7e5      	b.n	9e16 <usbd_ep_abort_all+0x12>
    9e4a:	bf00      	nop
    9e4c:	2000201c 	.word	0x2000201c
    9e50:	20001fac 	.word	0x20001fac

00009e54 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9e54:	4b0c      	ldr	r3, [pc, #48]	; (9e88 <nrfx_usbd_stop+0x34>)
    9e56:	2280      	movs	r2, #128	; 0x80
{
    9e58:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    9e5a:	2027      	movs	r0, #39	; 0x27
    9e5c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    9e60:	f7fb fdaa 	bl	59b8 <arch_irq_is_enabled>
    9e64:	b170      	cbz	r0, 9e84 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    9e66:	4c09      	ldr	r4, [pc, #36]	; (9e8c <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    9e68:	f7ff ffcc 	bl	9e04 <usbd_ep_abort_all>
    9e6c:	2300      	movs	r3, #0
    9e6e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    9e72:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    9e74:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    9e78:	f7fb fd8a 	bl	5990 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    9e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9e80:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    9e84:	bd10      	pop	{r4, pc}
    9e86:	bf00      	nop
    9e88:	e000e100 	.word	0xe000e100
    9e8c:	40027000 	.word	0x40027000

00009e90 <nrfx_usbd_disable>:
{
    9e90:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    9e92:	f7ff ffdf 	bl	9e54 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    9e96:	4b08      	ldr	r3, [pc, #32]	; (9eb8 <nrfx_usbd_disable+0x28>)
    9e98:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    9e9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9ea0:	2200      	movs	r2, #0
    9ea2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9ea6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    9eaa:	f7ff f96b 	bl	9184 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9eae:	4b03      	ldr	r3, [pc, #12]	; (9ebc <nrfx_usbd_disable+0x2c>)
    9eb0:	2201      	movs	r2, #1
    9eb2:	701a      	strb	r2, [r3, #0]
}
    9eb4:	bd08      	pop	{r3, pc}
    9eb6:	bf00      	nop
    9eb8:	40027000 	.word	0x40027000
    9ebc:	20002244 	.word	0x20002244

00009ec0 <nrfx_usbd_suspend>:
{
    9ec0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9ec2:	f04f 0320 	mov.w	r3, #32
    9ec6:	f3ef 8511 	mrs	r5, BASEPRI
    9eca:	f383 8812 	msr	BASEPRI_MAX, r3
    9ece:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    9ed2:	4b11      	ldr	r3, [pc, #68]	; (9f18 <nrfx_usbd_suspend+0x58>)
    9ed4:	781b      	ldrb	r3, [r3, #0]
    9ed6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    9eda:	b933      	cbnz	r3, 9eea <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    9edc:	2400      	movs	r4, #0
	__asm__ volatile(
    9ede:	f385 8811 	msr	BASEPRI, r5
    9ee2:	f3bf 8f6f 	isb	sy
}
    9ee6:	4620      	mov	r0, r4
    9ee8:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    9eea:	f7ff ff8b 	bl	9e04 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    9eee:	4b0b      	ldr	r3, [pc, #44]	; (9f1c <nrfx_usbd_suspend+0x5c>)
    9ef0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    9ef4:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    9ef8:	d1f0      	bne.n	9edc <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    9efa:	2101      	movs	r1, #1
    9efc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9f00:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    9f04:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9f08:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    9f0a:	bf42      	ittt	mi
    9f0c:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9f10:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    9f14:	4614      	movmi	r4, r2
}
    9f16:	e7e2      	b.n	9ede <nrfx_usbd_suspend+0x1e>
    9f18:	20002242 	.word	0x20002242
    9f1c:	40027000 	.word	0x40027000

00009f20 <nrfx_usbd_ep_disable>:
{
    9f20:	b510      	push	{r4, lr}
    9f22:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    9f24:	f7ff fe7c 	bl	9c20 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9f28:	4a10      	ldr	r2, [pc, #64]	; (9f6c <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    9f2a:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9f2e:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    9f32:	f04f 0301 	mov.w	r3, #1
    9f36:	bf14      	ite	ne
    9f38:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    9f3c:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    9f40:	fa03 f300 	lsl.w	r3, r3, r0
    9f44:	ea6f 0303 	mvn.w	r3, r3
    9f48:	bf15      	itete	ne
    9f4a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    9f4c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    9f4e:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    9f52:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9f56:	bf14      	ite	ne
    9f58:	4b05      	ldrne	r3, [pc, #20]	; (9f70 <nrfx_usbd_ep_disable+0x50>)
    9f5a:	4b06      	ldreq	r3, [pc, #24]	; (9f74 <nrfx_usbd_ep_disable+0x54>)
    9f5c:	5c1a      	ldrb	r2, [r3, r0]
    9f5e:	2301      	movs	r3, #1
    9f60:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    9f62:	4a02      	ldr	r2, [pc, #8]	; (9f6c <nrfx_usbd_ep_disable+0x4c>)
    9f64:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    9f68:	bd10      	pop	{r4, pc}
    9f6a:	bf00      	nop
    9f6c:	40027000 	.word	0x40027000
    9f70:	0001205d 	.word	0x0001205d
    9f74:	00012066 	.word	0x00012066

00009f78 <nrfx_usbd_ep_enable>:
{
    9f78:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9f7a:	b243      	sxtb	r3, r0
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	4b23      	ldr	r3, [pc, #140]	; (a00c <nrfx_usbd_ep_enable+0x94>)
    9f80:	4a23      	ldr	r2, [pc, #140]	; (a010 <nrfx_usbd_ep_enable+0x98>)
    9f82:	bfa8      	it	ge
    9f84:	461a      	movge	r2, r3
    9f86:	f000 030f 	and.w	r3, r0, #15
    9f8a:	f04f 0401 	mov.w	r4, #1
    9f8e:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    9f90:	4a20      	ldr	r2, [pc, #128]	; (a014 <nrfx_usbd_ep_enable+0x9c>)
    9f92:	fa04 f101 	lsl.w	r1, r4, r1
{
    9f96:	4605      	mov	r5, r0
    9f98:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    9f9c:	da0c      	bge.n	9fb8 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    9f9e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    9fa2:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    9fa4:	07c8      	lsls	r0, r1, #31
    9fa6:	d406      	bmi.n	9fb6 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    9fa8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    9fac:	fa04 f303 	lsl.w	r3, r4, r3
    9fb0:	4303      	orrs	r3, r0
    9fb2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    9fb6:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    9fb8:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    9fbc:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    9fbe:	07c9      	lsls	r1, r1, #31
    9fc0:	d4f9      	bmi.n	9fb6 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    9fc2:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    9fc6:	fa04 f103 	lsl.w	r1, r4, r3
    9fca:	4331      	orrs	r1, r6
    9fcc:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    9fd0:	2b00      	cmp	r3, #0
    9fd2:	d0f0      	beq.n	9fb6 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    9fd4:	0703      	lsls	r3, r0, #28
    9fd6:	d4ee      	bmi.n	9fb6 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    9fd8:	f04f 0320 	mov.w	r3, #32
    9fdc:	f3ef 8611 	mrs	r6, BASEPRI
    9fe0:	f383 8812 	msr	BASEPRI_MAX, r3
    9fe4:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    9fe8:	f7ff fdf0 	bl	9bcc <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9fec:	4628      	mov	r0, r5
    9fee:	f004 fcd0 	bl	e992 <ep2bit>
    9ff2:	4a09      	ldr	r2, [pc, #36]	; (a018 <nrfx_usbd_ep_enable+0xa0>)
    9ff4:	6813      	ldr	r3, [r2, #0]
    9ff6:	fa04 f000 	lsl.w	r0, r4, r0
    9ffa:	ea23 0000 	bic.w	r0, r3, r0
    9ffe:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    a000:	f386 8811 	msr	BASEPRI, r6
    a004:	f3bf 8f6f 	isb	sy
}
    a008:	e7d5      	b.n	9fb6 <nrfx_usbd_ep_enable+0x3e>
    a00a:	bf00      	nop
    a00c:	00012066 	.word	0x00012066
    a010:	0001205d 	.word	0x0001205d
    a014:	40027000 	.word	0x40027000
    a018:	20001fac 	.word	0x20001fac

0000a01c <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a01c:	0603      	lsls	r3, r0, #24
{
    a01e:	b510      	push	{r4, lr}
    a020:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a022:	d405      	bmi.n	a030 <nrfx_usbd_ep_stall_clear+0x14>
    a024:	f7ff fd40 	bl	9aa8 <nrfx_usbd_ep_stall_check>
    a028:	b110      	cbz	r0, a030 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    a02a:	4620      	mov	r0, r4
    a02c:	f7ff fdce 	bl	9bcc <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    a030:	4b01      	ldr	r3, [pc, #4]	; (a038 <nrfx_usbd_ep_stall_clear+0x1c>)
    a032:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    a036:	bd10      	pop	{r4, pc}
    a038:	40027000 	.word	0x40027000

0000a03c <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
    a03c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
    a040:	f8df a048 	ldr.w	sl, [pc, #72]	; a08c <device_visitor+0x50>
    a044:	4d12      	ldr	r5, [pc, #72]	; (a090 <device_visitor+0x54>)
    a046:	469b      	mov	fp, r3
    a048:	eba5 050a 	sub.w	r5, r5, sl
    a04c:	4b11      	ldr	r3, [pc, #68]	; (a094 <device_visitor+0x58>)
    a04e:	10ed      	asrs	r5, r5, #3
    a050:	4680      	mov	r8, r0
    a052:	460f      	mov	r7, r1
    a054:	4691      	mov	r9, r2
    a056:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
    a058:	2600      	movs	r6, #0
    a05a:	42be      	cmp	r6, r7
    a05c:	d102      	bne.n	a064 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
    a05e:	4630      	mov	r0, r6
}
    a060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
    a064:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
    a068:	2c00      	cmp	r4, #0
    a06a:	dd0d      	ble.n	a088 <device_visitor+0x4c>
    a06c:	42a5      	cmp	r5, r4
    a06e:	d30b      	bcc.n	a088 <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
    a070:	3c01      	subs	r4, #1
    a072:	b224      	sxth	r4, r4
    a074:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a078:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
    a07c:	4659      	mov	r1, fp
    a07e:	47c8      	blx	r9
		if (rc < 0) {
    a080:	2800      	cmp	r0, #0
    a082:	dbed      	blt.n	a060 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
    a084:	3601      	adds	r6, #1
    a086:	e7e8      	b.n	a05a <device_visitor+0x1e>
	const struct device *dev = NULL;
    a088:	2000      	movs	r0, #0
    a08a:	e7f7      	b.n	a07c <device_visitor+0x40>
    a08c:	0000f4a8 	.word	0x0000f4a8
    a090:	0000f538 	.word	0x0000f538
    a094:	aaaaaaab 	.word	0xaaaaaaab

0000a098 <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a098:	4b0e      	ldr	r3, [pc, #56]	; (a0d4 <z_sys_init_run_level+0x3c>)
{
    a09a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a09c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a0a0:	3001      	adds	r0, #1
    a0a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    a0a6:	42a6      	cmp	r6, r4
    a0a8:	d800      	bhi.n	a0ac <z_sys_init_run_level+0x14>
}
    a0aa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    a0ac:	e9d4 3500 	ldrd	r3, r5, [r4]
    a0b0:	4628      	mov	r0, r5
    a0b2:	4798      	blx	r3
		if (dev != NULL) {
    a0b4:	b165      	cbz	r5, a0d0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    a0b6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    a0b8:	b130      	cbz	r0, a0c8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    a0ba:	2800      	cmp	r0, #0
    a0bc:	bfb8      	it	lt
    a0be:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    a0c0:	28ff      	cmp	r0, #255	; 0xff
    a0c2:	bfa8      	it	ge
    a0c4:	20ff      	movge	r0, #255	; 0xff
    a0c6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    a0c8:	785a      	ldrb	r2, [r3, #1]
    a0ca:	f042 0201 	orr.w	r2, r2, #1
    a0ce:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a0d0:	3408      	adds	r4, #8
    a0d2:	e7e8      	b.n	a0a6 <z_sys_init_run_level+0xe>
    a0d4:	00010108 	.word	0x00010108

0000a0d8 <z_device_get_all_static>:
	*devices = __device_start;
    a0d8:	4a03      	ldr	r2, [pc, #12]	; (a0e8 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    a0da:	4b04      	ldr	r3, [pc, #16]	; (a0ec <z_device_get_all_static+0x14>)
	*devices = __device_start;
    a0dc:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    a0de:	1a9b      	subs	r3, r3, r2
}
    a0e0:	4803      	ldr	r0, [pc, #12]	; (a0f0 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    a0e2:	10db      	asrs	r3, r3, #3
}
    a0e4:	4358      	muls	r0, r3
    a0e6:	4770      	bx	lr
    a0e8:	0000f4a8 	.word	0x0000f4a8
    a0ec:	0000f538 	.word	0x0000f538
    a0f0:	aaaaaaab 	.word	0xaaaaaaab

0000a0f4 <z_impl_device_get_binding>:
{
    a0f4:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
    a0f6:	4605      	mov	r5, r0
    a0f8:	b910      	cbnz	r0, a100 <z_impl_device_get_binding+0xc>
		return NULL;
    a0fa:	2400      	movs	r4, #0
}
    a0fc:	4620      	mov	r0, r4
    a0fe:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    a100:	7803      	ldrb	r3, [r0, #0]
    a102:	2b00      	cmp	r3, #0
    a104:	d0f9      	beq.n	a0fa <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    a106:	4c0e      	ldr	r4, [pc, #56]	; (a140 <z_impl_device_get_binding+0x4c>)
    a108:	4e0e      	ldr	r6, [pc, #56]	; (a144 <z_impl_device_get_binding+0x50>)
    a10a:	42b4      	cmp	r4, r6
    a10c:	d108      	bne.n	a120 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    a10e:	4c0c      	ldr	r4, [pc, #48]	; (a140 <z_impl_device_get_binding+0x4c>)
    a110:	42b4      	cmp	r4, r6
    a112:	d0f2      	beq.n	a0fa <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a114:	4620      	mov	r0, r4
    a116:	f004 fcaa 	bl	ea6e <z_device_is_ready>
    a11a:	b950      	cbnz	r0, a132 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    a11c:	3418      	adds	r4, #24
    a11e:	e7f7      	b.n	a110 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    a120:	4620      	mov	r0, r4
    a122:	f004 fca4 	bl	ea6e <z_device_is_ready>
    a126:	b110      	cbz	r0, a12e <z_impl_device_get_binding+0x3a>
    a128:	6823      	ldr	r3, [r4, #0]
    a12a:	42ab      	cmp	r3, r5
    a12c:	d0e6      	beq.n	a0fc <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    a12e:	3418      	adds	r4, #24
    a130:	e7eb      	b.n	a10a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a132:	6821      	ldr	r1, [r4, #0]
    a134:	4628      	mov	r0, r5
    a136:	f003 ff87 	bl	e048 <strcmp>
    a13a:	2800      	cmp	r0, #0
    a13c:	d1ee      	bne.n	a11c <z_impl_device_get_binding+0x28>
    a13e:	e7dd      	b.n	a0fc <z_impl_device_get_binding+0x8>
    a140:	0000f4a8 	.word	0x0000f4a8
    a144:	0000f538 	.word	0x0000f538

0000a148 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    a148:	4b01      	ldr	r3, [pc, #4]	; (a150 <z_impl_z_errno+0x8>)
    a14a:	6898      	ldr	r0, [r3, #8]
}
    a14c:	3098      	adds	r0, #152	; 0x98
    a14e:	4770      	bx	lr
    a150:	20002184 	.word	0x20002184

0000a154 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    a154:	b510      	push	{r4, lr}
    a156:	4604      	mov	r4, r0
    a158:	b088      	sub	sp, #32
	z_impl_log_panic();
    a15a:	f7f7 fa83 	bl	1664 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    a15e:	4809      	ldr	r0, [pc, #36]	; (a184 <k_sys_fatal_error_handler+0x30>)
    a160:	6803      	ldr	r3, [r0, #0]
    a162:	075b      	lsls	r3, r3, #29
    a164:	d00a      	beq.n	a17c <k_sys_fatal_error_handler+0x28>
    a166:	4b08      	ldr	r3, [pc, #32]	; (a188 <k_sys_fatal_error_handler+0x34>)
    a168:	9306      	str	r3, [sp, #24]
    a16a:	2302      	movs	r3, #2
    a16c:	9301      	str	r3, [sp, #4]
    a16e:	9305      	str	r3, [sp, #20]
    a170:	2300      	movs	r3, #0
    a172:	aa05      	add	r2, sp, #20
    a174:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a178:	f002 fbe1 	bl	c93e <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
    a17c:	4620      	mov	r0, r4
    a17e:	f004 fca7 	bl	ead0 <arch_system_halt>
    a182:	bf00      	nop
    a184:	20000268 	.word	0x20000268
    a188:	0001206f 	.word	0x0001206f

0000a18c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a190:	4605      	mov	r5, r0
    a192:	b08e      	sub	sp, #56	; 0x38
    a194:	460e      	mov	r6, r1
	__asm__ volatile(
    a196:	f04f 0320 	mov.w	r3, #32
    a19a:	f3ef 8811 	mrs	r8, BASEPRI
    a19e:	f383 8812 	msr	BASEPRI_MAX, r3
    a1a2:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a1a6:	4f2b      	ldr	r7, [pc, #172]	; (a254 <z_fatal_error+0xc8>)
	return z_impl_z_current_get();
    a1a8:	f001 f852 	bl	b250 <z_impl_z_current_get>
    a1ac:	683b      	ldr	r3, [r7, #0]
    a1ae:	0759      	lsls	r1, r3, #29
    a1b0:	4604      	mov	r4, r0
    a1b2:	d04c      	beq.n	a24e <z_fatal_error+0xc2>
	switch (reason) {
    a1b4:	2d04      	cmp	r5, #4
    a1b6:	bf96      	itet	ls
    a1b8:	4b27      	ldrls	r3, [pc, #156]	; (a258 <z_fatal_error+0xcc>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a1ba:	4a28      	ldrhi	r2, [pc, #160]	; (a25c <z_fatal_error+0xd0>)
	return 0;
    a1bc:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a1c0:	4924      	ldr	r1, [pc, #144]	; (a254 <z_fatal_error+0xc8>)
    a1c2:	9502      	str	r5, [sp, #8]
    a1c4:	2300      	movs	r3, #0
    a1c6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    a1ca:	4a25      	ldr	r2, [pc, #148]	; (a260 <z_fatal_error+0xd4>)
    a1cc:	4618      	mov	r0, r3
    a1ce:	e9cd 3200 	strd	r3, r2, [sp]
    a1d2:	2201      	movs	r2, #1
    a1d4:	f004 fc6d 	bl	eab2 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a1d8:	b196      	cbz	r6, a200 <z_fatal_error+0x74>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a1da:	69f3      	ldr	r3, [r6, #28]
    a1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a1e0:	b173      	cbz	r3, a200 <z_fatal_error+0x74>
		LOG_ERR("Fault during interrupt handling\n");
    a1e2:	683b      	ldr	r3, [r7, #0]
    a1e4:	075a      	lsls	r2, r3, #29
    a1e6:	d01b      	beq.n	a220 <z_fatal_error+0x94>
    a1e8:	4b1e      	ldr	r3, [pc, #120]	; (a264 <z_fatal_error+0xd8>)
    a1ea:	930c      	str	r3, [sp, #48]	; 0x30
    a1ec:	2302      	movs	r3, #2
    a1ee:	9307      	str	r3, [sp, #28]
    a1f0:	930b      	str	r3, [sp, #44]	; 0x2c
    a1f2:	4818      	ldr	r0, [pc, #96]	; (a254 <z_fatal_error+0xc8>)
    a1f4:	2300      	movs	r3, #0
    a1f6:	aa0b      	add	r2, sp, #44	; 0x2c
    a1f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a1fc:	f002 fb9f 	bl	c93e <z_impl_z_log_msg2_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a200:	683b      	ldr	r3, [r7, #0]
    a202:	075b      	lsls	r3, r3, #29
    a204:	d00c      	beq.n	a220 <z_fatal_error+0x94>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a206:	b9cc      	cbnz	r4, a23c <z_fatal_error+0xb0>
		thread_name = "unknown";
    a208:	4817      	ldr	r0, [pc, #92]	; (a268 <z_fatal_error+0xdc>)
	LOG_ERR("Current thread: %p (%s)", thread,
    a20a:	4b18      	ldr	r3, [pc, #96]	; (a26c <z_fatal_error+0xe0>)
    a20c:	9301      	str	r3, [sp, #4]
    a20e:	2300      	movs	r3, #0
    a210:	e9cd 4002 	strd	r4, r0, [sp, #8]
    a214:	490f      	ldr	r1, [pc, #60]	; (a254 <z_fatal_error+0xc8>)
    a216:	9300      	str	r3, [sp, #0]
    a218:	2201      	movs	r2, #1
    a21a:	4618      	mov	r0, r3
    a21c:	f004 fc49 	bl	eab2 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a220:	4631      	mov	r1, r6
    a222:	4628      	mov	r0, r5
    a224:	f7ff ff96 	bl	a154 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a228:	f388 8811 	msr	BASEPRI, r8
    a22c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a230:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a232:	b00e      	add	sp, #56	; 0x38
    a234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a238:	f7fc b816 	b.w	6268 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a23c:	4620      	mov	r0, r4
    a23e:	f004 fc80 	bl	eb42 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a242:	2800      	cmp	r0, #0
    a244:	d0e0      	beq.n	a208 <z_fatal_error+0x7c>
    a246:	7803      	ldrb	r3, [r0, #0]
    a248:	2b00      	cmp	r3, #0
    a24a:	d0dd      	beq.n	a208 <z_fatal_error+0x7c>
    a24c:	e7dd      	b.n	a20a <z_fatal_error+0x7e>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a24e:	2e00      	cmp	r6, #0
    a250:	d1c3      	bne.n	a1da <z_fatal_error+0x4e>
    a252:	e7e5      	b.n	a220 <z_fatal_error+0x94>
    a254:	20000268 	.word	0x20000268
    a258:	00010120 	.word	0x00010120
    a25c:	0001207e 	.word	0x0001207e
    a260:	0001208c 	.word	0x0001208c
    a264:	000120b4 	.word	0x000120b4
    a268:	00011dc9 	.word	0x00011dc9
    a26c:	000120d5 	.word	0x000120d5

0000a270 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    a270:	b570      	push	{r4, r5, r6, lr}
    a272:	b088      	sub	sp, #32
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    a274:	ae06      	add	r6, sp, #24
{
    a276:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
    a278:	4603      	mov	r3, r0
    a27a:	4a12      	ldr	r2, [pc, #72]	; (a2c4 <init_idle_thread+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    a27c:	4d12      	ldr	r5, [pc, #72]	; (a2c8 <init_idle_thread+0x58>)
	snprintk(tname, 8, "idle %02d", i);
    a27e:	2108      	movs	r1, #8
    a280:	4630      	mov	r0, r6
    a282:	f001 fba6 	bl	b9d2 <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
    a286:	23b8      	movs	r3, #184	; 0xb8
    a288:	fb03 5504 	mla	r5, r3, r4, r5
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    a28c:	2201      	movs	r2, #1
    a28e:	230f      	movs	r3, #15
    a290:	e9cd 3203 	strd	r3, r2, [sp, #12]
    a294:	2300      	movs	r3, #0
    a296:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a29a:	4b0c      	ldr	r3, [pc, #48]	; (a2cc <init_idle_thread+0x5c>)
	z_setup_new_thread(thread, stack,
    a29c:	490c      	ldr	r1, [pc, #48]	; (a2d0 <init_idle_thread+0x60>)
    a29e:	9605      	str	r6, [sp, #20]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a2a0:	2218      	movs	r2, #24
    a2a2:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
    a2a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a2aa:	9300      	str	r3, [sp, #0]
    a2ac:	fb02 1104 	mla	r1, r2, r4, r1
    a2b0:	4b08      	ldr	r3, [pc, #32]	; (a2d4 <init_idle_thread+0x64>)
    a2b2:	4628      	mov	r0, r5
    a2b4:	f000 f97c 	bl	a5b0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a2b8:	7b6b      	ldrb	r3, [r5, #13]
    a2ba:	f023 0304 	bic.w	r3, r3, #4
    a2be:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    a2c0:	b008      	add	sp, #32
    a2c2:	bd70      	pop	{r4, r5, r6, pc}
    a2c4:	00012137 	.word	0x00012137
    a2c8:	20000d98 	.word	0x20000d98
    a2cc:	20002184 	.word	0x20002184
    a2d0:	20003948 	.word	0x20003948
    a2d4:	0000a781 	.word	0x0000a781

0000a2d8 <bg_thread_main>:
{
    a2d8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a2da:	4b0a      	ldr	r3, [pc, #40]	; (a304 <bg_thread_main+0x2c>)
    a2dc:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a2de:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    a2e0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a2e2:	f7ff fed9 	bl	a098 <z_sys_init_run_level>
	boot_banner();
    a2e6:	f001 fac1 	bl	b86c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a2ea:	2003      	movs	r0, #3
    a2ec:	f7ff fed4 	bl	a098 <z_sys_init_run_level>
	z_init_static_threads();
    a2f0:	f000 f9ea 	bl	a6c8 <z_init_static_threads>
	main();
    a2f4:	f7f6 f884 	bl	400 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a2f8:	4a03      	ldr	r2, [pc, #12]	; (a308 <bg_thread_main+0x30>)
    a2fa:	7b13      	ldrb	r3, [r2, #12]
    a2fc:	f023 0301 	bic.w	r3, r3, #1
    a300:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a302:	bd08      	pop	{r3, pc}
    a304:	20002246 	.word	0x20002246
    a308:	20000e50 	.word	0x20000e50

0000a30c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    a30c:	4802      	ldr	r0, [pc, #8]	; (a318 <z_bss_zero+0xc>)
    a30e:	4a03      	ldr	r2, [pc, #12]	; (a31c <z_bss_zero+0x10>)
    a310:	2100      	movs	r1, #0
    a312:	1a12      	subs	r2, r2, r0
    a314:	f003 bee9 	b.w	e0ea <memset>
    a318:	20000410 	.word	0x20000410
    a31c:	20002248 	.word	0x20002248

0000a320 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    a320:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a322:	f8df 80c8 	ldr.w	r8, [pc, #200]	; a3ec <z_cstart+0xcc>
    a326:	b0b4      	sub	sp, #208	; 0xd0
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a328:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a32c:	4d30      	ldr	r5, [pc, #192]	; (a3f0 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    a32e:	4e31      	ldr	r6, [pc, #196]	; (a3f4 <z_cstart+0xd4>)
    a330:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a332:	f8df 90c4 	ldr.w	r9, [pc, #196]	; a3f8 <z_cstart+0xd8>
    a336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a33a:	2400      	movs	r4, #0
    a33c:	616b      	str	r3, [r5, #20]
    a33e:	23e0      	movs	r3, #224	; 0xe0
    a340:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    a344:	77ec      	strb	r4, [r5, #31]
    a346:	762c      	strb	r4, [r5, #24]
    a348:	766c      	strb	r4, [r5, #25]
    a34a:	76ac      	strb	r4, [r5, #26]
    a34c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a350:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a352:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a356:	626b      	str	r3, [r5, #36]	; 0x24
    a358:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a35c:	f7fb ff48 	bl	61f0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a360:	f7fb fa7a 	bl	5858 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a368:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a36a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a36c:	f7fc f81e 	bl	63ac <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a370:	f7fb ff8c 	bl	628c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    a374:	f7f7 f862 	bl	143c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    a378:	f240 1301 	movw	r3, #257	; 0x101
    a37c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    a380:	ab06      	add	r3, sp, #24
    a382:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    a384:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
    a388:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a38a:	f004 fb6f 	bl	ea6c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a38e:	4620      	mov	r0, r4
    a390:	f7ff fe82 	bl	a098 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a394:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    a396:	4d19      	ldr	r5, [pc, #100]	; (a3fc <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a398:	f7ff fe7e 	bl	a098 <z_sys_init_run_level>
	z_sched_init();
    a39c:	f000 feaa 	bl	b0f4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a3a0:	4b17      	ldr	r3, [pc, #92]	; (a400 <z_cstart+0xe0>)
    a3a2:	9305      	str	r3, [sp, #20]
    a3a4:	2301      	movs	r3, #1
    a3a6:	4917      	ldr	r1, [pc, #92]	; (a404 <z_cstart+0xe4>)
    a3a8:	9400      	str	r4, [sp, #0]
    a3aa:	e9cd 4303 	strd	r4, r3, [sp, #12]
    a3ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a3b2:	464b      	mov	r3, r9
    a3b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a3b8:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    a3ba:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a3bc:	f000 f8f8 	bl	a5b0 <z_setup_new_thread>
    a3c0:	7b6a      	ldrb	r2, [r5, #13]
    a3c2:	4607      	mov	r7, r0
    a3c4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    a3c8:	4628      	mov	r0, r5
    a3ca:	736a      	strb	r2, [r5, #13]
    a3cc:	f004 fd03 	bl	edd6 <z_ready_thread>
		init_idle_thread(i);
    a3d0:	4620      	mov	r0, r4
    a3d2:	f7ff ff4d 	bl	a270 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    a3d6:	4b0c      	ldr	r3, [pc, #48]	; (a408 <z_cstart+0xe8>)
    a3d8:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a3da:	464a      	mov	r2, r9
    a3dc:	4639      	mov	r1, r7
    a3de:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    a3e0:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    a3e2:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a3e6:	f7fb fba3 	bl	5b30 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a3ea:	bf00      	nop
    a3ec:	20004288 	.word	0x20004288
    a3f0:	e000ed00 	.word	0xe000ed00
    a3f4:	20002184 	.word	0x20002184
    a3f8:	0000a2d9 	.word	0x0000a2d9
    a3fc:	20000e50 	.word	0x20000e50
    a400:	00012141 	.word	0x00012141
    a404:	20003548 	.word	0x20003548
    a408:	20000d98 	.word	0x20000d98

0000a40c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    a40c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a40e:	4b0e      	ldr	r3, [pc, #56]	; (a448 <init_mem_slab_module+0x3c>)
    a410:	4c0e      	ldr	r4, [pc, #56]	; (a44c <init_mem_slab_module+0x40>)
    a412:	42a3      	cmp	r3, r4
    a414:	d301      	bcc.n	a41a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    a416:	2000      	movs	r0, #0
	return rc;
}
    a418:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a41a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    a41e:	ea41 0200 	orr.w	r2, r1, r0
    a422:	f012 0203 	ands.w	r2, r2, #3
    a426:	d10b      	bne.n	a440 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    a428:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    a42a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a42c:	42aa      	cmp	r2, r5
    a42e:	d101      	bne.n	a434 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a430:	331c      	adds	r3, #28
    a432:	e7ee      	b.n	a412 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    a434:	695e      	ldr	r6, [r3, #20]
    a436:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    a438:	3201      	adds	r2, #1
		slab->free_list = p;
    a43a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    a43c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    a43e:	e7f5      	b.n	a42c <init_mem_slab_module+0x20>
	return rc;
    a440:	f06f 0015 	mvn.w	r0, #21
    a444:	e7e8      	b.n	a418 <init_mem_slab_module+0xc>
    a446:	bf00      	nop
    a448:	20000298 	.word	0x20000298
    a44c:	200002b4 	.word	0x200002b4

0000a450 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a450:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a452:	460c      	mov	r4, r1
	__asm__ volatile(
    a454:	f04f 0520 	mov.w	r5, #32
    a458:	f3ef 8111 	mrs	r1, BASEPRI
    a45c:	f385 8812 	msr	BASEPRI_MAX, r5
    a460:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a464:	6945      	ldr	r5, [r0, #20]
    a466:	b15d      	cbz	r5, a480 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    a468:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a46a:	682b      	ldr	r3, [r5, #0]
    a46c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a46e:	6983      	ldr	r3, [r0, #24]
    a470:	3301      	adds	r3, #1
    a472:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a474:	2000      	movs	r0, #0
	__asm__ volatile(
    a476:	f381 8811 	msr	BASEPRI, r1
    a47a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    a47e:	e011      	b.n	a4a4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a480:	ea52 0c03 	orrs.w	ip, r2, r3
    a484:	d103      	bne.n	a48e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    a486:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    a488:	f06f 000b 	mvn.w	r0, #11
    a48c:	e7f3      	b.n	a476 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a48e:	e9cd 2300 	strd	r2, r3, [sp]
    a492:	4602      	mov	r2, r0
    a494:	3008      	adds	r0, #8
    a496:	f000 fd83 	bl	afa0 <z_pend_curr>
		if (result == 0) {
    a49a:	b918      	cbnz	r0, a4a4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    a49c:	4b02      	ldr	r3, [pc, #8]	; (a4a8 <k_mem_slab_alloc+0x58>)
    a49e:	689b      	ldr	r3, [r3, #8]
    a4a0:	695b      	ldr	r3, [r3, #20]
    a4a2:	6023      	str	r3, [r4, #0]
}
    a4a4:	b003      	add	sp, #12
    a4a6:	bd30      	pop	{r4, r5, pc}
    a4a8:	20002184 	.word	0x20002184

0000a4ac <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4ae:	4605      	mov	r5, r0
    a4b0:	460e      	mov	r6, r1
	__asm__ volatile(
    a4b2:	f04f 0320 	mov.w	r3, #32
    a4b6:	f3ef 8711 	mrs	r7, BASEPRI
    a4ba:	f383 8812 	msr	BASEPRI_MAX, r3
    a4be:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    a4c2:	4b06      	ldr	r3, [pc, #24]	; (a4dc <k_thread_foreach+0x30>)
    a4c4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    a4c6:	b924      	cbnz	r4, a4d2 <k_thread_foreach+0x26>
	__asm__ volatile(
    a4c8:	f387 8811 	msr	BASEPRI, r7
    a4cc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    a4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
    a4d2:	4620      	mov	r0, r4
    a4d4:	4631      	mov	r1, r6
    a4d6:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    a4d8:	6f64      	ldr	r4, [r4, #116]	; 0x74
    a4da:	e7f4      	b.n	a4c6 <k_thread_foreach+0x1a>
    a4dc:	20002184 	.word	0x20002184

0000a4e0 <z_thread_monitor_exit>:
	__asm__ volatile(
    a4e0:	f04f 0320 	mov.w	r3, #32
    a4e4:	f3ef 8111 	mrs	r1, BASEPRI
    a4e8:	f383 8812 	msr	BASEPRI_MAX, r3
    a4ec:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    a4f0:	4a09      	ldr	r2, [pc, #36]	; (a518 <z_thread_monitor_exit+0x38>)
    a4f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    a4f4:	4283      	cmp	r3, r0
    a4f6:	d107      	bne.n	a508 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    a4f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    a4fa:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    a4fc:	f381 8811 	msr	BASEPRI, r1
    a500:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    a504:	4770      	bx	lr
    a506:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    a508:	2b00      	cmp	r3, #0
    a50a:	d0f7      	beq.n	a4fc <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    a50c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    a50e:	4282      	cmp	r2, r0
    a510:	d1f9      	bne.n	a506 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    a512:	6f42      	ldr	r2, [r0, #116]	; 0x74
    a514:	675a      	str	r2, [r3, #116]	; 0x74
    a516:	e7f1      	b.n	a4fc <z_thread_monitor_exit+0x1c>
    a518:	20002184 	.word	0x20002184

0000a51c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    a51c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    a51e:	4604      	mov	r4, r0
    a520:	b908      	cbnz	r0, a526 <z_impl_k_thread_name_set+0xa>
		thread = _current;
    a522:	4b05      	ldr	r3, [pc, #20]	; (a538 <z_impl_k_thread_name_set+0x1c>)
    a524:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    a526:	2220      	movs	r2, #32
    a528:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a52c:	f003 fd5c 	bl	dfe8 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a530:	2000      	movs	r0, #0
    a532:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    a536:	bd10      	pop	{r4, pc}
    a538:	20002184 	.word	0x20002184

0000a53c <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
    a53c:	7b43      	ldrb	r3, [r0, #13]
    a53e:	2b10      	cmp	r3, #16
    a540:	d80e      	bhi.n	a560 <k_thread_state_str+0x24>
    a542:	2b10      	cmp	r3, #16
    a544:	d81c      	bhi.n	a580 <k_thread_state_str+0x44>
    a546:	e8df f003 	tbb	[pc, r3]
    a54a:	091d      	.short	0x091d
    a54c:	1b151b13 	.word	0x1b151b13
    a550:	1b171b1b 	.word	0x1b171b1b
    a554:	1b1b1b1b 	.word	0x1b1b1b1b
    a558:	1b1b      	.short	0x1b1b
    a55a:	19          	.byte	0x19
    a55b:	00          	.byte	0x00
    a55c:	480b      	ldr	r0, [pc, #44]	; (a58c <k_thread_state_str+0x50>)
    a55e:	4770      	bx	lr
    a560:	2b20      	cmp	r3, #32
    a562:	d011      	beq.n	a588 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
    a564:	4a0a      	ldr	r2, [pc, #40]	; (a590 <k_thread_state_str+0x54>)
    a566:	480b      	ldr	r0, [pc, #44]	; (a594 <k_thread_state_str+0x58>)
    a568:	2b80      	cmp	r3, #128	; 0x80
    a56a:	bf08      	it	eq
    a56c:	4610      	moveq	r0, r2
    a56e:	4770      	bx	lr
		return "pending";
    a570:	4809      	ldr	r0, [pc, #36]	; (a598 <k_thread_state_str+0x5c>)
    a572:	4770      	bx	lr
		return "prestart";
    a574:	4809      	ldr	r0, [pc, #36]	; (a59c <k_thread_state_str+0x60>)
    a576:	4770      	bx	lr
		return "dead";
    a578:	4809      	ldr	r0, [pc, #36]	; (a5a0 <k_thread_state_str+0x64>)
    a57a:	4770      	bx	lr
		return "suspended";
    a57c:	4809      	ldr	r0, [pc, #36]	; (a5a4 <k_thread_state_str+0x68>)
    a57e:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
    a580:	4804      	ldr	r0, [pc, #16]	; (a594 <k_thread_state_str+0x58>)
    a582:	4770      	bx	lr
		return "";
    a584:	4808      	ldr	r0, [pc, #32]	; (a5a8 <k_thread_state_str+0x6c>)
    a586:	4770      	bx	lr
		return "aborting";
    a588:	4808      	ldr	r0, [pc, #32]	; (a5ac <k_thread_state_str+0x70>)
}
    a58a:	4770      	bx	lr
    a58c:	0001215f 	.word	0x0001215f
    a590:	0001216e 	.word	0x0001216e
    a594:	00011dc9 	.word	0x00011dc9
    a598:	00012149 	.word	0x00012149
    a59c:	00012151 	.word	0x00012151
    a5a0:	0001215a 	.word	0x0001215a
    a5a4:	000115f5 	.word	0x000115f5
    a5a8:	000106d5 	.word	0x000106d5
    a5ac:	00012165 	.word	0x00012165

0000a5b0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5b4:	b085      	sub	sp, #20
    a5b6:	460e      	mov	r6, r1
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a5b8:	f100 0158 	add.w	r1, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    a5bc:	e9c0 1116 	strd	r1, r1, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    a5c0:	9912      	ldr	r1, [sp, #72]	; 0x48
    a5c2:	7301      	strb	r1, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a5c4:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    a5c6:	2104      	movs	r1, #4
	thread_base->pended_on = NULL;
    a5c8:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a5ca:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    a5ce:	7341      	strb	r1, [r0, #13]

	thread_base->prio = priority;
    a5d0:	9911      	ldr	r1, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
    a5d2:	6085      	str	r5, [r0, #8]
{
    a5d4:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    a5d6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
    a5da:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    a5dc:	73c5      	strb	r5, [r0, #15]
	memset(stack_buf_start, 0xaa, stack_buf_size);
    a5de:	4652      	mov	r2, sl
    a5e0:	21aa      	movs	r1, #170	; 0xaa
    a5e2:	4630      	mov	r0, r6
{
    a5e4:	4699      	mov	r9, r3
    a5e6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    a5ea:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
    a5ec:	f003 fd7d 	bl	e0ea <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a5f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a5f2:	9302      	str	r3, [sp, #8]
    a5f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->stack_info.delta = delta;
    a5f6:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	stack_ptr = (char *)stack + stack_obj_size;
    a5fa:	eb06 080a 	add.w	r8, r6, sl
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a5fe:	e9cd b300 	strd	fp, r3, [sp]
	new_thread->stack_info.size = stack_buf_size;
    a602:	e9c4 6a27 	strd	r6, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a606:	464b      	mov	r3, r9
    a608:	4642      	mov	r2, r8
    a60a:	4631      	mov	r1, r6
    a60c:	4620      	mov	r0, r4
    a60e:	f7fb fa73 	bl	5af8 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
    a612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a614:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    a616:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    a618:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter1 = p1;
    a61a:	e9c4 9b19 	strd	r9, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
    a61e:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    a620:	f04f 0220 	mov.w	r2, #32
    a624:	f3ef 8311 	mrs	r3, BASEPRI
    a628:	f382 8812 	msr	BASEPRI_MAX, r2
    a62c:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    a630:	4e0e      	ldr	r6, [pc, #56]	; (a66c <z_setup_new_thread+0xbc>)
    a632:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    a634:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    a636:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
    a638:	f383 8811 	msr	BASEPRI, r3
    a63c:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    a640:	b18f      	cbz	r7, a666 <z_setup_new_thread+0xb6>
		strncpy(new_thread->name, name,
    a642:	221f      	movs	r2, #31
    a644:	4639      	mov	r1, r7
    a646:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a64a:	f003 fccd 	bl	dfe8 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a64e:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
    a652:	68b3      	ldr	r3, [r6, #8]
    a654:	b10b      	cbz	r3, a65a <z_setup_new_thread+0xaa>
	new_thread->resource_pool = _current->resource_pool;
    a656:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
    a65a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    a65e:	4640      	mov	r0, r8
    a660:	b005      	add	sp, #20
    a662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    a666:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    a66a:	e7f2      	b.n	a652 <z_setup_new_thread+0xa2>
    a66c:	20002184 	.word	0x20002184

0000a670 <z_impl_k_thread_create>:
{
    a670:	b5f0      	push	{r4, r5, r6, r7, lr}
    a672:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a674:	2700      	movs	r7, #0
    a676:	9705      	str	r7, [sp, #20]
    a678:	9f10      	ldr	r7, [sp, #64]	; 0x40
    a67a:	9704      	str	r7, [sp, #16]
    a67c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    a67e:	9703      	str	r7, [sp, #12]
    a680:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    a682:	9702      	str	r7, [sp, #8]
{
    a684:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a688:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    a68a:	9701      	str	r7, [sp, #4]
    a68c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    a68e:	9700      	str	r7, [sp, #0]
{
    a690:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a692:	f7ff ff8d 	bl	a5b0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a696:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    a69a:	bf08      	it	eq
    a69c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    a6a0:	d005      	beq.n	a6ae <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a6a2:	ea55 0306 	orrs.w	r3, r5, r6
    a6a6:	d105      	bne.n	a6b4 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    a6a8:	4620      	mov	r0, r4
    a6aa:	f000 fc1d 	bl	aee8 <z_sched_start>
}
    a6ae:	4620      	mov	r0, r4
    a6b0:	b007      	add	sp, #28
    a6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a6b4:	4903      	ldr	r1, [pc, #12]	; (a6c4 <z_impl_k_thread_create+0x54>)
    a6b6:	4632      	mov	r2, r6
    a6b8:	462b      	mov	r3, r5
    a6ba:	f104 0018 	add.w	r0, r4, #24
    a6be:	f000 fea9 	bl	b414 <z_add_timeout>
    a6c2:	e7f4      	b.n	a6ae <z_impl_k_thread_create+0x3e>
    a6c4:	0000edf7 	.word	0x0000edf7

0000a6c8 <z_init_static_threads>:
{
    a6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a6cc:	4c29      	ldr	r4, [pc, #164]	; (a774 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    a6ce:	4d2a      	ldr	r5, [pc, #168]	; (a778 <z_init_static_threads+0xb0>)
{
    a6d0:	b087      	sub	sp, #28
    a6d2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    a6d4:	42ae      	cmp	r6, r5
    a6d6:	f104 0430 	add.w	r4, r4, #48	; 0x30
    a6da:	d30f      	bcc.n	a6fc <z_init_static_threads+0x34>
	k_sched_lock();
    a6dc:	f000 fb20 	bl	ad20 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    a6e0:	4c24      	ldr	r4, [pc, #144]	; (a774 <z_init_static_threads+0xac>)
    a6e2:	f8df 9098 	ldr.w	r9, [pc, #152]	; a77c <z_init_static_threads+0xb4>
    a6e6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a6ea:	f240 37e7 	movw	r7, #999	; 0x3e7
    a6ee:	42ac      	cmp	r4, r5
    a6f0:	d320      	bcc.n	a734 <z_init_static_threads+0x6c>
}
    a6f2:	b007      	add	sp, #28
    a6f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    a6f8:	f000 bce0 	b.w	b0bc <k_sched_unlock>
		z_setup_new_thread(
    a6fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a700:	9305      	str	r3, [sp, #20]
    a702:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a706:	9304      	str	r3, [sp, #16]
    a708:	f854 3c14 	ldr.w	r3, [r4, #-20]
    a70c:	9303      	str	r3, [sp, #12]
    a70e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    a712:	9302      	str	r3, [sp, #8]
    a714:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    a718:	9301      	str	r3, [sp, #4]
    a71a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    a71e:	9300      	str	r3, [sp, #0]
    a720:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    a724:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    a728:	f7ff ff42 	bl	a5b0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a72c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    a730:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    a732:	e7ce      	b.n	a6d2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    a734:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a736:	1c5a      	adds	r2, r3, #1
    a738:	d00d      	beq.n	a756 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    a73a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a73e:	2100      	movs	r1, #0
    a740:	4638      	mov	r0, r7
    a742:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a746:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    a74a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a74e:	d104      	bne.n	a75a <z_init_static_threads+0x92>
	z_sched_start(thread);
    a750:	4640      	mov	r0, r8
    a752:	f000 fbc9 	bl	aee8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a756:	3430      	adds	r4, #48	; 0x30
    a758:	e7c9      	b.n	a6ee <z_init_static_threads+0x26>
    a75a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a75e:	2300      	movs	r3, #0
    a760:	f7f5 fcce 	bl	100 <__aeabi_uldivmod>
    a764:	4602      	mov	r2, r0
    a766:	460b      	mov	r3, r1
    a768:	f108 0018 	add.w	r0, r8, #24
    a76c:	4649      	mov	r1, r9
    a76e:	f000 fe51 	bl	b414 <z_add_timeout>
    a772:	e7f0      	b.n	a756 <z_init_static_threads+0x8e>
    a774:	20000298 	.word	0x20000298
    a778:	20000298 	.word	0x20000298
    a77c:	0000edf7 	.word	0x0000edf7

0000a780 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a780:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    a782:	4c0b      	ldr	r4, [pc, #44]	; (a7b0 <idle+0x30>)
	return !z_sys_post_kernel;
    a784:	4d0b      	ldr	r5, [pc, #44]	; (a7b4 <idle+0x34>)
	__asm__ volatile(
    a786:	f04f 0220 	mov.w	r2, #32
    a78a:	f3ef 8311 	mrs	r3, BASEPRI
    a78e:	f382 8812 	msr	BASEPRI_MAX, r2
    a792:	f3bf 8f6f 	isb	sy
    a796:	f004 fbeb 	bl	ef70 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    a79a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    a79c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    a79e:	b913      	cbnz	r3, a7a6 <idle+0x26>
	arch_cpu_idle();
    a7a0:	f7fb f860 	bl	5864 <arch_cpu_idle>
}
    a7a4:	e7ef      	b.n	a786 <idle+0x6>
    a7a6:	f7fa ff7f 	bl	56a8 <pm_system_suspend>
    a7aa:	2800      	cmp	r0, #0
    a7ac:	d1eb      	bne.n	a786 <idle+0x6>
    a7ae:	e7f7      	b.n	a7a0 <idle+0x20>
    a7b0:	20002184 	.word	0x20002184
    a7b4:	20002246 	.word	0x20002246

0000a7b8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a7b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a7bc:	4604      	mov	r4, r0
    a7be:	4617      	mov	r7, r2
    a7c0:	461e      	mov	r6, r3
    a7c2:	f04f 0320 	mov.w	r3, #32
    a7c6:	f3ef 8811 	mrs	r8, BASEPRI
    a7ca:	f383 8812 	msr	BASEPRI_MAX, r3
    a7ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a7d2:	68c3      	ldr	r3, [r0, #12]
    a7d4:	4a32      	ldr	r2, [pc, #200]	; (a8a0 <z_impl_k_mutex_lock+0xe8>)
    a7d6:	b16b      	cbz	r3, a7f4 <z_impl_k_mutex_lock+0x3c>
    a7d8:	6880      	ldr	r0, [r0, #8]
    a7da:	6891      	ldr	r1, [r2, #8]
    a7dc:	4288      	cmp	r0, r1
    a7de:	d019      	beq.n	a814 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a7e0:	ea57 0306 	orrs.w	r3, r7, r6
    a7e4:	d118      	bne.n	a818 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    a7e6:	f388 8811 	msr	BASEPRI, r8
    a7ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    a7ee:	f06f 000f 	mvn.w	r0, #15
    a7f2:	e00c      	b.n	a80e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    a7f4:	6891      	ldr	r1, [r2, #8]
    a7f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a7fa:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    a7fc:	3301      	adds	r3, #1
    a7fe:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    a800:	6893      	ldr	r3, [r2, #8]
    a802:	60a3      	str	r3, [r4, #8]
    a804:	f388 8811 	msr	BASEPRI, r8
    a808:	f3bf 8f6f 	isb	sy
		return 0;
    a80c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    a80e:	b002      	add	sp, #8
    a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    a814:	6921      	ldr	r1, [r4, #16]
    a816:	e7f0      	b.n	a7fa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    a818:	f991 100e 	ldrsb.w	r1, [r1, #14]
    a81c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    a820:	4299      	cmp	r1, r3
    a822:	bfa8      	it	ge
    a824:	4619      	movge	r1, r3
    a826:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    a82a:	4291      	cmp	r1, r2
    a82c:	bfb8      	it	lt
    a82e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    a830:	428b      	cmp	r3, r1
    a832:	dd2e      	ble.n	a892 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    a834:	f004 f9a1 	bl	eb7a <adjust_owner_prio.isra.0>
    a838:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    a83a:	e9cd 7600 	strd	r7, r6, [sp]
    a83e:	4819      	ldr	r0, [pc, #100]	; (a8a4 <z_impl_k_mutex_lock+0xec>)
    a840:	4622      	mov	r2, r4
    a842:	4641      	mov	r1, r8
    a844:	f000 fbac 	bl	afa0 <z_pend_curr>
	if (got_mutex == 0) {
    a848:	2800      	cmp	r0, #0
    a84a:	d0e0      	beq.n	a80e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    a84c:	f04f 0320 	mov.w	r3, #32
    a850:	f3ef 8611 	mrs	r6, BASEPRI
    a854:	f383 8812 	msr	BASEPRI_MAX, r3
    a858:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a85c:	6823      	ldr	r3, [r4, #0]
    a85e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a860:	429c      	cmp	r4, r3
    a862:	d00a      	beq.n	a87a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a864:	b14b      	cbz	r3, a87a <z_impl_k_mutex_lock+0xc2>
    a866:	f993 300e 	ldrsb.w	r3, [r3, #14]
    a86a:	4299      	cmp	r1, r3
    a86c:	bfa8      	it	ge
    a86e:	4619      	movge	r1, r3
    a870:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    a874:	4299      	cmp	r1, r3
    a876:	bfb8      	it	lt
    a878:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a87a:	68a0      	ldr	r0, [r4, #8]
    a87c:	f004 f97d 	bl	eb7a <adjust_owner_prio.isra.0>
    a880:	b900      	cbnz	r0, a884 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    a882:	b145      	cbz	r5, a896 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    a884:	4807      	ldr	r0, [pc, #28]	; (a8a4 <z_impl_k_mutex_lock+0xec>)
    a886:	4631      	mov	r1, r6
    a888:	f000 fa38 	bl	acfc <z_reschedule>
	return -EAGAIN;
    a88c:	f06f 000a 	mvn.w	r0, #10
    a890:	e7bd      	b.n	a80e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    a892:	2500      	movs	r5, #0
    a894:	e7d1      	b.n	a83a <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    a896:	f386 8811 	msr	BASEPRI, r6
    a89a:	f3bf 8f6f 	isb	sy
    a89e:	e7f5      	b.n	a88c <z_impl_k_mutex_lock+0xd4>
    a8a0:	20002184 	.word	0x20002184
    a8a4:	20002247 	.word	0x20002247

0000a8a8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    a8a8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    a8aa:	6883      	ldr	r3, [r0, #8]
{
    a8ac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d033      	beq.n	a91a <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a8b2:	4a1d      	ldr	r2, [pc, #116]	; (a928 <z_impl_k_mutex_unlock+0x80>)
    a8b4:	6892      	ldr	r2, [r2, #8]
    a8b6:	4293      	cmp	r3, r2
    a8b8:	d132      	bne.n	a920 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    a8ba:	7bda      	ldrb	r2, [r3, #15]
    a8bc:	3a01      	subs	r2, #1
    a8be:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    a8c0:	68c3      	ldr	r3, [r0, #12]
    a8c2:	2b01      	cmp	r3, #1
    a8c4:	d905      	bls.n	a8d2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    a8c6:	3b01      	subs	r3, #1
    a8c8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    a8ca:	f000 fbf7 	bl	b0bc <k_sched_unlock>

	return 0;
    a8ce:	2000      	movs	r0, #0
}
    a8d0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a8d2:	f04f 0320 	mov.w	r3, #32
    a8d6:	f3ef 8511 	mrs	r5, BASEPRI
    a8da:	f383 8812 	msr	BASEPRI_MAX, r3
    a8de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a8e2:	6901      	ldr	r1, [r0, #16]
    a8e4:	6880      	ldr	r0, [r0, #8]
    a8e6:	f004 f948 	bl	eb7a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    a8ea:	4620      	mov	r0, r4
    a8ec:	f004 fae4 	bl	eeb8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    a8f0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    a8f2:	b160      	cbz	r0, a90e <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
    a8f4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    a8f8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a8fa:	2200      	movs	r2, #0
    a8fc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    a900:	f004 fa69 	bl	edd6 <z_ready_thread>
		z_reschedule(&lock, key);
    a904:	4809      	ldr	r0, [pc, #36]	; (a92c <z_impl_k_mutex_unlock+0x84>)
    a906:	4629      	mov	r1, r5
    a908:	f000 f9f8 	bl	acfc <z_reschedule>
    a90c:	e7dd      	b.n	a8ca <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    a90e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a910:	f385 8811 	msr	BASEPRI, r5
    a914:	f3bf 8f6f 	isb	sy
    a918:	e7d7      	b.n	a8ca <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    a91a:	f06f 0015 	mvn.w	r0, #21
    a91e:	e7d7      	b.n	a8d0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    a920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a924:	e7d4      	b.n	a8d0 <z_impl_k_mutex_unlock+0x28>
    a926:	bf00      	nop
    a928:	20002184 	.word	0x20002184
    a92c:	20002247 	.word	0x20002247

0000a930 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    a930:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a932:	4611      	mov	r1, r2
	__asm__ volatile(
    a934:	f04f 0220 	mov.w	r2, #32
    a938:	f3ef 8511 	mrs	r5, BASEPRI
    a93c:	f382 8812 	msr	BASEPRI_MAX, r2
    a940:	f3bf 8f6f 	isb	sy
    a944:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    a946:	b19c      	cbz	r4, a970 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a948:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    a94a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a94c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    a950:	4294      	cmp	r4, r2
	list->head = node;
    a952:	6003      	str	r3, [r0, #0]
	list->tail = node;
    a954:	bf08      	it	eq
    a956:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    a958:	2101      	movs	r1, #1
    a95a:	4620      	mov	r0, r4
    a95c:	f004 f981 	bl	ec62 <z_queue_node_peek>
    a960:	4604      	mov	r4, r0
	__asm__ volatile(
    a962:	f385 8811 	msr	BASEPRI, r5
    a966:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    a96a:	4620      	mov	r0, r4
    a96c:	b003      	add	sp, #12
    a96e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a970:	ea51 0203 	orrs.w	r2, r1, r3
    a974:	d0f5      	beq.n	a962 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    a976:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    a97a:	e9cd 1300 	strd	r1, r3, [sp]
    a97e:	4610      	mov	r0, r2
    a980:	4629      	mov	r1, r5
    a982:	f000 fb0d 	bl	afa0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    a986:	2800      	cmp	r0, #0
    a988:	d1ef      	bne.n	a96a <z_impl_k_queue_get+0x3a>
    a98a:	4b02      	ldr	r3, [pc, #8]	; (a994 <z_impl_k_queue_get+0x64>)
    a98c:	689b      	ldr	r3, [r3, #8]
    a98e:	695c      	ldr	r4, [r3, #20]
    a990:	e7eb      	b.n	a96a <z_impl_k_queue_get+0x3a>
    a992:	bf00      	nop
    a994:	20002184 	.word	0x20002184

0000a998 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    a998:	b538      	push	{r3, r4, r5, lr}
    a99a:	4604      	mov	r4, r0
	__asm__ volatile(
    a99c:	f04f 0320 	mov.w	r3, #32
    a9a0:	f3ef 8511 	mrs	r5, BASEPRI
    a9a4:	f383 8812 	msr	BASEPRI_MAX, r3
    a9a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    a9ac:	f004 fa84 	bl	eeb8 <z_unpend_first_thread>

	if (thread != NULL) {
    a9b0:	b150      	cbz	r0, a9c8 <z_impl_k_sem_give+0x30>
    a9b2:	2200      	movs	r2, #0
    a9b4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    a9b8:	f004 fa0d 	bl	edd6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    a9bc:	4629      	mov	r1, r5
    a9be:	4808      	ldr	r0, [pc, #32]	; (a9e0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    a9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    a9c4:	f000 b99a 	b.w	acfc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a9c8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    a9cc:	429a      	cmp	r2, r3
    a9ce:	bf18      	it	ne
    a9d0:	3301      	addne	r3, #1
    a9d2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    a9d4:	2102      	movs	r1, #2
    a9d6:	f104 0010 	add.w	r0, r4, #16
    a9da:	f004 fc8f 	bl	f2fc <z_handle_obj_poll_events>
}
    a9de:	e7ed      	b.n	a9bc <z_impl_k_sem_give+0x24>
    a9e0:	20002247 	.word	0x20002247

0000a9e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    a9e4:	b513      	push	{r0, r1, r4, lr}
    a9e6:	f04f 0420 	mov.w	r4, #32
    a9ea:	f3ef 8111 	mrs	r1, BASEPRI
    a9ee:	f384 8812 	msr	BASEPRI_MAX, r4
    a9f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    a9f6:	6884      	ldr	r4, [r0, #8]
    a9f8:	b144      	cbz	r4, aa0c <z_impl_k_sem_take+0x28>
		sem->count--;
    a9fa:	3c01      	subs	r4, #1
    a9fc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    a9fe:	f381 8811 	msr	BASEPRI, r1
    aa02:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    aa06:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    aa08:	b002      	add	sp, #8
    aa0a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    aa0c:	ea52 0403 	orrs.w	r4, r2, r3
    aa10:	d106      	bne.n	aa20 <z_impl_k_sem_take+0x3c>
    aa12:	f381 8811 	msr	BASEPRI, r1
    aa16:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    aa1a:	f06f 000f 	mvn.w	r0, #15
    aa1e:	e7f3      	b.n	aa08 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    aa20:	e9cd 2300 	strd	r2, r3, [sp]
    aa24:	4602      	mov	r2, r0
    aa26:	4802      	ldr	r0, [pc, #8]	; (aa30 <z_impl_k_sem_take+0x4c>)
    aa28:	f000 faba 	bl	afa0 <z_pend_curr>
	return ret;
    aa2c:	e7ec      	b.n	aa08 <z_impl_k_sem_take+0x24>
    aa2e:	bf00      	nop
    aa30:	20002247 	.word	0x20002247

0000aa34 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    aa38:	4e47      	ldr	r6, [pc, #284]	; (ab58 <work_queue_main+0x124>)
    aa3a:	b085      	sub	sp, #20
    aa3c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    aa3e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    aa42:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    aa46:	f04f 0320 	mov.w	r3, #32
    aa4a:	f3ef 8711 	mrs	r7, BASEPRI
    aa4e:	f383 8812 	msr	BASEPRI_MAX, r3
    aa52:	f3bf 8f6f 	isb	sy
    aa56:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    aa5a:	b98d      	cbnz	r5, aa80 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    aa5c:	2102      	movs	r1, #2
    aa5e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    aa62:	f004 f925 	bl	ecb0 <flag_test_and_clear>
    aa66:	2800      	cmp	r0, #0
    aa68:	d135      	bne.n	aad6 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    aa6a:	2300      	movs	r3, #0
    aa6c:	e9cd 8900 	strd	r8, r9, [sp]
    aa70:	9302      	str	r3, [sp, #8]
    aa72:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    aa76:	4639      	mov	r1, r7
    aa78:	4838      	ldr	r0, [pc, #224]	; (ab5c <work_queue_main+0x128>)
    aa7a:	f000 fc55 	bl	b328 <z_sched_wait>
			continue;
    aa7e:	e7e2      	b.n	aa46 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aa80:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
    aa84:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    aa86:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aa8a:	4295      	cmp	r5, r2
    aa8c:	d101      	bne.n	aa92 <work_queue_main+0x5e>
	list->tail = node;
    aa8e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
    aa92:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    aa96:	f043 0302 	orr.w	r3, r3, #2
    aa9a:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    aa9e:	68eb      	ldr	r3, [r5, #12]
    aaa0:	f023 0304 	bic.w	r3, r3, #4
    aaa4:	f043 0301 	orr.w	r3, r3, #1
    aaa8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    aaaa:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    aaac:	f387 8811 	msr	BASEPRI, r7
    aab0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    aab4:	4628      	mov	r0, r5
    aab6:	4798      	blx	r3
	__asm__ volatile(
    aab8:	f04f 0320 	mov.w	r3, #32
    aabc:	f3ef 8b11 	mrs	fp, BASEPRI
    aac0:	f383 8812 	msr	BASEPRI_MAX, r3
    aac4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    aac8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    aaca:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    aacc:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    aad0:	d40b      	bmi.n	aaea <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    aad2:	60ea      	str	r2, [r5, #12]
    aad4:	e00e      	b.n	aaf4 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    aad6:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    aada:	2200      	movs	r2, #0
    aadc:	2101      	movs	r1, #1
    aade:	4628      	mov	r0, r5
    aae0:	f004 fa12 	bl	ef08 <z_sched_wake>
    aae4:	2800      	cmp	r0, #0
    aae6:	d1f8      	bne.n	aada <work_queue_main+0xa6>
    aae8:	e7bf      	b.n	aa6a <work_queue_main+0x36>
	return list->head;
    aaea:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    aaec:	f023 0303 	bic.w	r3, r3, #3
    aaf0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    aaf2:	b970      	cbnz	r0, ab12 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    aaf4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    aaf8:	f023 0302 	bic.w	r3, r3, #2
    aafc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
    ab00:	f38b 8811 	msr	BASEPRI, fp
    ab04:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    ab08:	05d8      	lsls	r0, r3, #23
    ab0a:	d49c      	bmi.n	aa46 <work_queue_main+0x12>
	z_impl_k_yield();
    ab0c:	f000 fafe 	bl	b10c <z_impl_k_yield>
}
    ab10:	e799      	b.n	aa46 <work_queue_main+0x12>
	return node->next;
    ab12:	2700      	movs	r7, #0
    ab14:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    ab18:	463b      	mov	r3, r7
		if (wc->work == work) {
    ab1a:	6842      	ldr	r2, [r0, #4]
    ab1c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    ab1e:	4601      	mov	r1, r0
		if (wc->work == work) {
    ab20:	d10c      	bne.n	ab3c <work_queue_main+0x108>
	return node->next;
    ab22:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    ab24:	b997      	cbnz	r7, ab4c <work_queue_main+0x118>
    ab26:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    ab28:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    ab2a:	4282      	cmp	r2, r0
    ab2c:	d100      	bne.n	ab30 <work_queue_main+0xfc>
	list->tail = node;
    ab2e:	6071      	str	r1, [r6, #4]
	parent->next = child;
    ab30:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    ab34:	f7ff ff30 	bl	a998 <z_impl_k_sem_give>
}
    ab38:	4639      	mov	r1, r7
    ab3a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ab3c:	f1ba 0f00 	cmp.w	sl, #0
    ab40:	d0d8      	beq.n	aaf4 <work_queue_main+0xc0>
	return node->next;
    ab42:	4650      	mov	r0, sl
    ab44:	460f      	mov	r7, r1
    ab46:	f8da a000 	ldr.w	sl, [sl]
    ab4a:	e7e6      	b.n	ab1a <work_queue_main+0xe6>
	return list->tail;
    ab4c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    ab4e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    ab50:	4290      	cmp	r0, r2
	list->tail = node;
    ab52:	bf08      	it	eq
    ab54:	6077      	streq	r7, [r6, #4]
}
    ab56:	e7eb      	b.n	ab30 <work_queue_main+0xfc>
    ab58:	200021b0 	.word	0x200021b0
    ab5c:	20002247 	.word	0x20002247

0000ab60 <submit_to_queue_locked>:
{
    ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    ab62:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ab64:	079a      	lsls	r2, r3, #30
{
    ab66:	4604      	mov	r4, r0
    ab68:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ab6a:	f3c3 0540 	ubfx	r5, r3, #1, #1
    ab6e:	d41f      	bmi.n	abb0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    ab70:	075f      	lsls	r7, r3, #29
    ab72:	d41f      	bmi.n	abb4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    ab74:	680a      	ldr	r2, [r1, #0]
    ab76:	b90a      	cbnz	r2, ab7c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    ab78:	6882      	ldr	r2, [r0, #8]
    ab7a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    ab7c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    ab7e:	bf44      	itt	mi
    ab80:	68a3      	ldrmi	r3, [r4, #8]
    ab82:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    ab84:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    ab86:	bf4c      	ite	mi
    ab88:	2502      	movmi	r5, #2
		ret = 1;
    ab8a:	2501      	movpl	r5, #1
	if (queue == NULL) {
    ab8c:	b37f      	cbz	r7, abee <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    ab8e:	4b1b      	ldr	r3, [pc, #108]	; (abfc <submit_to_queue_locked+0x9c>)
    ab90:	689b      	ldr	r3, [r3, #8]
    ab92:	42bb      	cmp	r3, r7
    ab94:	d111      	bne.n	abba <submit_to_queue_locked+0x5a>
    ab96:	f003 ffce 	bl	eb36 <k_is_in_isr>
    ab9a:	f080 0001 	eor.w	r0, r0, #1
    ab9e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    aba0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    aba4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    aba6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    abaa:	d523      	bpl.n	abf4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    abac:	b13a      	cbz	r2, abbe <submit_to_queue_locked+0x5e>
    abae:	b940      	cbnz	r0, abc2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    abb0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    abb4:	2300      	movs	r3, #0
    abb6:	6033      	str	r3, [r6, #0]
	return ret;
    abb8:	e013      	b.n	abe2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    abba:	2000      	movs	r0, #0
    abbc:	e7f0      	b.n	aba0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    abbe:	071b      	lsls	r3, r3, #28
    abc0:	d4f6      	bmi.n	abb0 <submit_to_queue_locked+0x50>
	parent->next = child;
    abc2:	2300      	movs	r3, #0
    abc4:	6023      	str	r3, [r4, #0]
	return list->tail;
    abc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    abca:	b963      	cbnz	r3, abe6 <submit_to_queue_locked+0x86>
	list->head = node;
    abcc:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    abd0:	4638      	mov	r0, r7
    abd2:	f004 f878 	bl	ecc6 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    abd6:	68e3      	ldr	r3, [r4, #12]
    abd8:	f043 0304 	orr.w	r3, r3, #4
    abdc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    abde:	6833      	ldr	r3, [r6, #0]
    abe0:	60a3      	str	r3, [r4, #8]
}
    abe2:	4628      	mov	r0, r5
    abe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    abe6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    abe8:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
    abec:	e7f0      	b.n	abd0 <submit_to_queue_locked+0x70>
		return -EINVAL;
    abee:	f06f 0515 	mvn.w	r5, #21
    abf2:	e7df      	b.n	abb4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    abf4:	f06f 0512 	mvn.w	r5, #18
    abf8:	e7dc      	b.n	abb4 <submit_to_queue_locked+0x54>
    abfa:	bf00      	nop
    abfc:	20002184 	.word	0x20002184

0000ac00 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    ac00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac02:	b089      	sub	sp, #36	; 0x24
    ac04:	4604      	mov	r4, r0
	list->head = NULL;
    ac06:	2000      	movs	r0, #0
	list->tail = NULL;
    ac08:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
    ac0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ac0e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    ac12:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    ac16:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    ac1a:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    ac1e:	b31d      	cbz	r5, ac68 <k_work_queue_start+0x68>
    ac20:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    ac22:	2800      	cmp	r0, #0
    ac24:	f240 1001 	movw	r0, #257	; 0x101
    ac28:	bf08      	it	eq
    ac2a:	2001      	moveq	r0, #1
	*flagp = flags;
    ac2c:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ac30:	2000      	movs	r0, #0
    ac32:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    ac36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    ac3a:	e9cd 3003 	strd	r3, r0, [sp, #12]
    ac3e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    ac42:	e9cd 6706 	strd	r6, r7, [sp, #24]
    ac46:	4b09      	ldr	r3, [pc, #36]	; (ac6c <k_work_queue_start+0x6c>)
    ac48:	9400      	str	r4, [sp, #0]
    ac4a:	4620      	mov	r0, r4
    ac4c:	f7ff fd10 	bl	a670 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    ac50:	b125      	cbz	r5, ac5c <k_work_queue_start+0x5c>
    ac52:	6829      	ldr	r1, [r5, #0]
    ac54:	b111      	cbz	r1, ac5c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    ac56:	4620      	mov	r0, r4
    ac58:	f7ff fc60 	bl	a51c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    ac5c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    ac5e:	b009      	add	sp, #36	; 0x24
    ac60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ac64:	f003 bf6f 	b.w	eb46 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    ac68:	2001      	movs	r0, #1
    ac6a:	e7df      	b.n	ac2c <k_work_queue_start+0x2c>
    ac6c:	0000aa35 	.word	0x0000aa35

0000ac70 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    ac70:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    ac72:	4c08      	ldr	r4, [pc, #32]	; (ac94 <z_reset_time_slice+0x24>)
    ac74:	6823      	ldr	r3, [r4, #0]
    ac76:	b15b      	cbz	r3, ac90 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    ac78:	f7fd fc78 	bl	856c <sys_clock_elapsed>
    ac7c:	4603      	mov	r3, r0
    ac7e:	6820      	ldr	r0, [r4, #0]
    ac80:	4a05      	ldr	r2, [pc, #20]	; (ac98 <z_reset_time_slice+0x28>)
    ac82:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    ac84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    ac88:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    ac8a:	2100      	movs	r1, #0
    ac8c:	f004 b980 	b.w	ef90 <z_set_timeout_expiry>
}
    ac90:	bd10      	pop	{r4, pc}
    ac92:	bf00      	nop
    ac94:	200021c0 	.word	0x200021c0
    ac98:	20002184 	.word	0x20002184

0000ac9c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac9e:	4604      	mov	r4, r0
    aca0:	460d      	mov	r5, r1
	__asm__ volatile(
    aca2:	f04f 0320 	mov.w	r3, #32
    aca6:	f3ef 8611 	mrs	r6, BASEPRI
    acaa:	f383 8812 	msr	BASEPRI_MAX, r3
    acae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    acb2:	4b0f      	ldr	r3, [pc, #60]	; (acf0 <k_sched_time_slice_set+0x54>)
    acb4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    acb6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    acba:	f240 30e7 	movw	r0, #999	; 0x3e7
    acbe:	6119      	str	r1, [r3, #16]
    acc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    acc4:	2300      	movs	r3, #0
    acc6:	fbe4 0107 	umlal	r0, r1, r4, r7
    acca:	f7f5 fa19 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    acce:	2c00      	cmp	r4, #0
    acd0:	4b08      	ldr	r3, [pc, #32]	; (acf4 <k_sched_time_slice_set+0x58>)
    acd2:	dc09      	bgt.n	ace8 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    acd4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    acd6:	4b08      	ldr	r3, [pc, #32]	; (acf8 <k_sched_time_slice_set+0x5c>)
    acd8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    acda:	f7ff ffc9 	bl	ac70 <z_reset_time_slice>
	__asm__ volatile(
    acde:	f386 8811 	msr	BASEPRI, r6
    ace2:	f3bf 8f6f 	isb	sy
	}
}
    ace6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    ace8:	2802      	cmp	r0, #2
    acea:	bfb8      	it	lt
    acec:	2002      	movlt	r0, #2
    acee:	e7f1      	b.n	acd4 <k_sched_time_slice_set+0x38>
    acf0:	20002184 	.word	0x20002184
    acf4:	200021c0 	.word	0x200021c0
    acf8:	200021bc 	.word	0x200021bc

0000acfc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    acfc:	b949      	cbnz	r1, ad12 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    acfe:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    ad02:	b930      	cbnz	r0, ad12 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    ad04:	4b05      	ldr	r3, [pc, #20]	; (ad1c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    ad06:	69da      	ldr	r2, [r3, #28]
    ad08:	689b      	ldr	r3, [r3, #8]
    ad0a:	429a      	cmp	r2, r3
    ad0c:	d001      	beq.n	ad12 <z_reschedule+0x16>
	ret = arch_swap(key);
    ad0e:	f7fa bea1 	b.w	5a54 <arch_swap>
    ad12:	f381 8811 	msr	BASEPRI, r1
    ad16:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    ad1a:	4770      	bx	lr
    ad1c:	20002184 	.word	0x20002184

0000ad20 <k_sched_lock>:
	__asm__ volatile(
    ad20:	f04f 0320 	mov.w	r3, #32
    ad24:	f3ef 8111 	mrs	r1, BASEPRI
    ad28:	f383 8812 	msr	BASEPRI_MAX, r3
    ad2c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    ad30:	4b04      	ldr	r3, [pc, #16]	; (ad44 <k_sched_lock+0x24>)
    ad32:	689a      	ldr	r2, [r3, #8]
    ad34:	7bd3      	ldrb	r3, [r2, #15]
    ad36:	3b01      	subs	r3, #1
    ad38:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    ad3a:	f381 8811 	msr	BASEPRI, r1
    ad3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    ad42:	4770      	bx	lr
    ad44:	20002184 	.word	0x20002184

0000ad48 <update_cache>:
{
    ad48:	b538      	push	{r3, r4, r5, lr}
    ad4a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    ad4c:	480c      	ldr	r0, [pc, #48]	; (ad80 <update_cache+0x38>)
    ad4e:	4d0d      	ldr	r5, [pc, #52]	; (ad84 <update_cache+0x3c>)
    ad50:	f004 f83b 	bl	edca <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ad54:	4604      	mov	r4, r0
    ad56:	b900      	cbnz	r0, ad5a <update_cache+0x12>
    ad58:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    ad5a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    ad5c:	b94a      	cbnz	r2, ad72 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    ad5e:	7b5a      	ldrb	r2, [r3, #13]
    ad60:	06d2      	lsls	r2, r2, #27
    ad62:	d106      	bne.n	ad72 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ad64:	69a2      	ldr	r2, [r4, #24]
    ad66:	b922      	cbnz	r2, ad72 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    ad68:	89da      	ldrh	r2, [r3, #14]
    ad6a:	2a7f      	cmp	r2, #127	; 0x7f
    ad6c:	d901      	bls.n	ad72 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    ad6e:	61eb      	str	r3, [r5, #28]
}
    ad70:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    ad72:	429c      	cmp	r4, r3
    ad74:	d001      	beq.n	ad7a <update_cache+0x32>
			z_reset_time_slice();
    ad76:	f7ff ff7b 	bl	ac70 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    ad7a:	61ec      	str	r4, [r5, #28]
}
    ad7c:	e7f8      	b.n	ad70 <update_cache+0x28>
    ad7e:	bf00      	nop
    ad80:	200021a4 	.word	0x200021a4
    ad84:	20002184 	.word	0x20002184

0000ad88 <move_thread_to_end_of_prio_q>:
{
    ad88:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    ad8a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    ad8e:	7b43      	ldrb	r3, [r0, #13]
    ad90:	2a00      	cmp	r2, #0
{
    ad92:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    ad94:	da04      	bge.n	ada0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ad96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ad9a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    ad9c:	f003 ffc0 	bl	ed20 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    ada0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    ada2:	4a15      	ldr	r2, [pc, #84]	; (adf8 <move_thread_to_end_of_prio_q+0x70>)
    ada4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ada8:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    adaa:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    adae:	f102 0520 	add.w	r5, r2, #32
    adb2:	42ab      	cmp	r3, r5
    adb4:	d01b      	beq.n	adee <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    adb6:	b1d3      	cbz	r3, adee <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    adb8:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    adbc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    adc0:	4286      	cmp	r6, r0
    adc2:	d00f      	beq.n	ade4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    adc4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    adc6:	2800      	cmp	r0, #0
    adc8:	dd0c      	ble.n	ade4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    adca:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    adcc:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    add0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    add2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    add4:	6890      	ldr	r0, [r2, #8]
    add6:	1a43      	subs	r3, r0, r1
    add8:	4258      	negs	r0, r3
}
    adda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    adde:	4158      	adcs	r0, r3
    ade0:	f7ff bfb2 	b.w	ad48 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ade4:	42a3      	cmp	r3, r4
    ade6:	d002      	beq.n	adee <move_thread_to_end_of_prio_q+0x66>
    ade8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    adea:	2b00      	cmp	r3, #0
    adec:	d1e6      	bne.n	adbc <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    adee:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    adf2:	6021      	str	r1, [r4, #0]
	list->tail = node;
    adf4:	6251      	str	r1, [r2, #36]	; 0x24
}
    adf6:	e7ed      	b.n	add4 <move_thread_to_end_of_prio_q+0x4c>
    adf8:	20002184 	.word	0x20002184

0000adfc <z_time_slice>:
{
    adfc:	b538      	push	{r3, r4, r5, lr}
    adfe:	4601      	mov	r1, r0
	__asm__ volatile(
    ae00:	f04f 0320 	mov.w	r3, #32
    ae04:	f3ef 8411 	mrs	r4, BASEPRI
    ae08:	f383 8812 	msr	BASEPRI_MAX, r3
    ae0c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    ae10:	4b15      	ldr	r3, [pc, #84]	; (ae68 <z_time_slice+0x6c>)
    ae12:	4a16      	ldr	r2, [pc, #88]	; (ae6c <z_time_slice+0x70>)
    ae14:	6898      	ldr	r0, [r3, #8]
    ae16:	6815      	ldr	r5, [r2, #0]
    ae18:	42a8      	cmp	r0, r5
    ae1a:	d106      	bne.n	ae2a <z_time_slice+0x2e>
			z_reset_time_slice();
    ae1c:	f7ff ff28 	bl	ac70 <z_reset_time_slice>
	__asm__ volatile(
    ae20:	f384 8811 	msr	BASEPRI, r4
    ae24:	f3bf 8f6f 	isb	sy
}
    ae28:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    ae2a:	2500      	movs	r5, #0
    ae2c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    ae2e:	4a10      	ldr	r2, [pc, #64]	; (ae70 <z_time_slice+0x74>)
    ae30:	6812      	ldr	r2, [r2, #0]
    ae32:	b1ba      	cbz	r2, ae64 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    ae34:	89c2      	ldrh	r2, [r0, #14]
    ae36:	2a7f      	cmp	r2, #127	; 0x7f
    ae38:	d814      	bhi.n	ae64 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    ae3a:	7b42      	ldrb	r2, [r0, #13]
    ae3c:	06d2      	lsls	r2, r2, #27
    ae3e:	d111      	bne.n	ae64 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ae40:	4a0c      	ldr	r2, [pc, #48]	; (ae74 <z_time_slice+0x78>)
    ae42:	f990 500e 	ldrsb.w	r5, [r0, #14]
    ae46:	6812      	ldr	r2, [r2, #0]
    ae48:	4295      	cmp	r5, r2
    ae4a:	db0b      	blt.n	ae64 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    ae4c:	4a0a      	ldr	r2, [pc, #40]	; (ae78 <z_time_slice+0x7c>)
    ae4e:	4290      	cmp	r0, r2
    ae50:	d008      	beq.n	ae64 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    ae52:	691a      	ldr	r2, [r3, #16]
    ae54:	428a      	cmp	r2, r1
    ae56:	dc02      	bgt.n	ae5e <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    ae58:	f7ff ff96 	bl	ad88 <move_thread_to_end_of_prio_q>
    ae5c:	e7de      	b.n	ae1c <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    ae5e:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    ae60:	611a      	str	r2, [r3, #16]
    ae62:	e7dd      	b.n	ae20 <z_time_slice+0x24>
    ae64:	2200      	movs	r2, #0
    ae66:	e7fb      	b.n	ae60 <z_time_slice+0x64>
    ae68:	20002184 	.word	0x20002184
    ae6c:	200021b8 	.word	0x200021b8
    ae70:	200021c0 	.word	0x200021c0
    ae74:	200021bc 	.word	0x200021bc
    ae78:	20000d98 	.word	0x20000d98

0000ae7c <ready_thread>:
{
    ae7c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    ae7e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    ae82:	7b43      	ldrb	r3, [r0, #13]
    ae84:	2a00      	cmp	r2, #0
    ae86:	db2a      	blt.n	aede <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ae88:	06da      	lsls	r2, r3, #27
    ae8a:	d128      	bne.n	aede <ready_thread+0x62>
    ae8c:	6982      	ldr	r2, [r0, #24]
    ae8e:	bb32      	cbnz	r2, aede <ready_thread+0x62>
	return list->head == list;
    ae90:	4a14      	ldr	r2, [pc, #80]	; (aee4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    ae92:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ae96:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    ae98:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ae9c:	f102 0520 	add.w	r5, r2, #32
    aea0:	42ab      	cmp	r3, r5
    aea2:	d017      	beq.n	aed4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aea4:	b1b3      	cbz	r3, aed4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    aea6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    aeaa:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    aeae:	428e      	cmp	r6, r1
    aeb0:	d00b      	beq.n	aeca <ready_thread+0x4e>
		return b2 - b1;
    aeb2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    aeb4:	2900      	cmp	r1, #0
    aeb6:	dd08      	ble.n	aeca <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    aeb8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    aeba:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    aebe:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    aec0:	6058      	str	r0, [r3, #4]
}
    aec2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    aec4:	2000      	movs	r0, #0
    aec6:	f7ff bf3f 	b.w	ad48 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    aeca:	42a3      	cmp	r3, r4
    aecc:	d002      	beq.n	aed4 <ready_thread+0x58>
    aece:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aed0:	2b00      	cmp	r3, #0
    aed2:	d1ea      	bne.n	aeaa <ready_thread+0x2e>
	node->prev = tail;
    aed4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    aed8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    aeda:	6250      	str	r0, [r2, #36]	; 0x24
}
    aedc:	e7f1      	b.n	aec2 <ready_thread+0x46>
}
    aede:	bc70      	pop	{r4, r5, r6}
    aee0:	4770      	bx	lr
    aee2:	bf00      	nop
    aee4:	20002184 	.word	0x20002184

0000aee8 <z_sched_start>:
{
    aee8:	b510      	push	{r4, lr}
	__asm__ volatile(
    aeea:	f04f 0220 	mov.w	r2, #32
    aeee:	f3ef 8411 	mrs	r4, BASEPRI
    aef2:	f382 8812 	msr	BASEPRI_MAX, r2
    aef6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    aefa:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    aefc:	0751      	lsls	r1, r2, #29
    aefe:	d404      	bmi.n	af0a <z_sched_start+0x22>
	__asm__ volatile(
    af00:	f384 8811 	msr	BASEPRI, r4
    af04:	f3bf 8f6f 	isb	sy
}
    af08:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    af0a:	f022 0204 	bic.w	r2, r2, #4
    af0e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    af10:	f7ff ffb4 	bl	ae7c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    af14:	4621      	mov	r1, r4
    af16:	4802      	ldr	r0, [pc, #8]	; (af20 <z_sched_start+0x38>)
}
    af18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    af1c:	f7ff beee 	b.w	acfc <z_reschedule>
    af20:	20002247 	.word	0x20002247

0000af24 <unready_thread>:
{
    af24:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    af26:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    af2a:	7b43      	ldrb	r3, [r0, #13]
    af2c:	2a00      	cmp	r2, #0
{
    af2e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    af30:	da04      	bge.n	af3c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    af32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    af36:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    af38:	f003 fef2 	bl	ed20 <sys_dlist_remove>
	update_cache(thread == _current);
    af3c:	4b04      	ldr	r3, [pc, #16]	; (af50 <unready_thread+0x2c>)
    af3e:	6898      	ldr	r0, [r3, #8]
    af40:	1a43      	subs	r3, r0, r1
    af42:	4258      	negs	r0, r3
    af44:	4158      	adcs	r0, r3
}
    af46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    af4a:	f7ff befd 	b.w	ad48 <update_cache>
    af4e:	bf00      	nop
    af50:	20002184 	.word	0x20002184

0000af54 <pend>:
{
    af54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af58:	4606      	mov	r6, r0
    af5a:	4615      	mov	r5, r2
    af5c:	461c      	mov	r4, r3
	__asm__ volatile(
    af5e:	f04f 0320 	mov.w	r3, #32
    af62:	f3ef 8711 	mrs	r7, BASEPRI
    af66:	f383 8812 	msr	BASEPRI_MAX, r3
    af6a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    af6e:	f003 ff64 	bl	ee3a <add_to_waitq_locked>
	__asm__ volatile(
    af72:	f387 8811 	msr	BASEPRI, r7
    af76:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    af7a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    af7e:	bf08      	it	eq
    af80:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    af84:	d008      	beq.n	af98 <pend+0x44>
    af86:	462a      	mov	r2, r5
    af88:	4623      	mov	r3, r4
    af8a:	f106 0018 	add.w	r0, r6, #24
    af8e:	4903      	ldr	r1, [pc, #12]	; (af9c <pend+0x48>)
}
    af90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    af94:	f000 ba3e 	b.w	b414 <z_add_timeout>
    af98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af9c:	0000edf7 	.word	0x0000edf7

0000afa0 <z_pend_curr>:
{
    afa0:	b510      	push	{r4, lr}
	pending_current = _current;
    afa2:	4b07      	ldr	r3, [pc, #28]	; (afc0 <z_pend_curr+0x20>)
    afa4:	6898      	ldr	r0, [r3, #8]
    afa6:	4b07      	ldr	r3, [pc, #28]	; (afc4 <z_pend_curr+0x24>)
{
    afa8:	460c      	mov	r4, r1
	pending_current = _current;
    afaa:	6018      	str	r0, [r3, #0]
{
    afac:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    afae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    afb2:	f7ff ffcf 	bl	af54 <pend>
    afb6:	4620      	mov	r0, r4
}
    afb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afbc:	f7fa bd4a 	b.w	5a54 <arch_swap>
    afc0:	20002184 	.word	0x20002184
    afc4:	200021b8 	.word	0x200021b8

0000afc8 <z_set_prio>:
{
    afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afca:	4604      	mov	r4, r0
	__asm__ volatile(
    afcc:	f04f 0320 	mov.w	r3, #32
    afd0:	f3ef 8611 	mrs	r6, BASEPRI
    afd4:	f383 8812 	msr	BASEPRI_MAX, r3
    afd8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    afdc:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    afde:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    afe0:	b249      	sxtb	r1, r1
    afe2:	d133      	bne.n	b04c <z_set_prio+0x84>
		if (need_sched) {
    afe4:	6982      	ldr	r2, [r0, #24]
    afe6:	bb8a      	cbnz	r2, b04c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    afe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    afec:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    afee:	f003 fe97 	bl	ed20 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    aff2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    aff4:	4a17      	ldr	r2, [pc, #92]	; (b054 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    aff6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    aff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    affc:	7343      	strb	r3, [r0, #13]
    affe:	4610      	mov	r0, r2
    b000:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b004:	4283      	cmp	r3, r0
    b006:	d01b      	beq.n	b040 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b008:	b1d3      	cbz	r3, b040 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    b00a:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    b00c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    b010:	42a9      	cmp	r1, r5
    b012:	d010      	beq.n	b036 <z_set_prio+0x6e>
		return b2 - b1;
    b014:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    b016:	2d00      	cmp	r5, #0
    b018:	dd0d      	ble.n	b036 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    b01a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b01c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    b020:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b022:	605c      	str	r4, [r3, #4]
			update_cache(1);
    b024:	2001      	movs	r0, #1
    b026:	f7ff fe8f 	bl	ad48 <update_cache>
    b02a:	2001      	movs	r0, #1
	__asm__ volatile(
    b02c:	f386 8811 	msr	BASEPRI, r6
    b030:	f3bf 8f6f 	isb	sy
}
    b034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    b036:	42bb      	cmp	r3, r7
    b038:	d002      	beq.n	b040 <z_set_prio+0x78>
    b03a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b03c:	2b00      	cmp	r3, #0
    b03e:	d1e5      	bne.n	b00c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    b040:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    b042:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    b046:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b048:	6254      	str	r4, [r2, #36]	; 0x24
}
    b04a:	e7eb      	b.n	b024 <z_set_prio+0x5c>
			thread->base.prio = prio;
    b04c:	73a1      	strb	r1, [r4, #14]
    b04e:	2000      	movs	r0, #0
    b050:	e7ec      	b.n	b02c <z_set_prio+0x64>
    b052:	bf00      	nop
    b054:	20002184 	.word	0x20002184

0000b058 <z_impl_k_thread_suspend>:
{
    b058:	b570      	push	{r4, r5, r6, lr}
    b05a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    b05c:	3018      	adds	r0, #24
    b05e:	f003 ff71 	bl	ef44 <z_abort_timeout>
	__asm__ volatile(
    b062:	f04f 0320 	mov.w	r3, #32
    b066:	f3ef 8611 	mrs	r6, BASEPRI
    b06a:	f383 8812 	msr	BASEPRI_MAX, r3
    b06e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    b072:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    b076:	7b63      	ldrb	r3, [r4, #13]
    b078:	2a00      	cmp	r2, #0
    b07a:	da05      	bge.n	b088 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b080:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b082:	4620      	mov	r0, r4
    b084:	f003 fe4c 	bl	ed20 <sys_dlist_remove>
		update_cache(thread == _current);
    b088:	4d0b      	ldr	r5, [pc, #44]	; (b0b8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b08a:	7b63      	ldrb	r3, [r4, #13]
    b08c:	68a8      	ldr	r0, [r5, #8]
    b08e:	f043 0310 	orr.w	r3, r3, #16
    b092:	7363      	strb	r3, [r4, #13]
    b094:	1b03      	subs	r3, r0, r4
    b096:	4258      	negs	r0, r3
    b098:	4158      	adcs	r0, r3
    b09a:	f7ff fe55 	bl	ad48 <update_cache>
	__asm__ volatile(
    b09e:	f386 8811 	msr	BASEPRI, r6
    b0a2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    b0a6:	68ab      	ldr	r3, [r5, #8]
    b0a8:	42a3      	cmp	r3, r4
    b0aa:	d103      	bne.n	b0b4 <z_impl_k_thread_suspend+0x5c>
}
    b0ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    b0b0:	f003 be81 	b.w	edb6 <z_reschedule_unlocked>
}
    b0b4:	bd70      	pop	{r4, r5, r6, pc}
    b0b6:	bf00      	nop
    b0b8:	20002184 	.word	0x20002184

0000b0bc <k_sched_unlock>:
{
    b0bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    b0be:	f04f 0320 	mov.w	r3, #32
    b0c2:	f3ef 8411 	mrs	r4, BASEPRI
    b0c6:	f383 8812 	msr	BASEPRI_MAX, r3
    b0ca:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    b0ce:	4b08      	ldr	r3, [pc, #32]	; (b0f0 <k_sched_unlock+0x34>)
    b0d0:	689a      	ldr	r2, [r3, #8]
    b0d2:	7bd3      	ldrb	r3, [r2, #15]
    b0d4:	3301      	adds	r3, #1
    b0d6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b0d8:	2000      	movs	r0, #0
    b0da:	f7ff fe35 	bl	ad48 <update_cache>
	__asm__ volatile(
    b0de:	f384 8811 	msr	BASEPRI, r4
    b0e2:	f3bf 8f6f 	isb	sy
}
    b0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    b0ea:	f003 be64 	b.w	edb6 <z_reschedule_unlocked>
    b0ee:	bf00      	nop
    b0f0:	20002184 	.word	0x20002184

0000b0f4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    b0f4:	4b04      	ldr	r3, [pc, #16]	; (b108 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    b0f6:	2100      	movs	r1, #0
    b0f8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    b0fc:	e9c3 2208 	strd	r2, r2, [r3, #32]
    b100:	4608      	mov	r0, r1
    b102:	f7ff bdcb 	b.w	ac9c <k_sched_time_slice_set>
    b106:	bf00      	nop
    b108:	20002184 	.word	0x20002184

0000b10c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    b10e:	f04f 0320 	mov.w	r3, #32
    b112:	f3ef 8511 	mrs	r5, BASEPRI
    b116:	f383 8812 	msr	BASEPRI_MAX, r3
    b11a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    b11e:	491a      	ldr	r1, [pc, #104]	; (b188 <z_impl_k_yield+0x7c>)
    b120:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b122:	7b43      	ldrb	r3, [r0, #13]
    b124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b128:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b12a:	f003 fdf9 	bl	ed20 <sys_dlist_remove>
	}
	queue_thread(_current);
    b12e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b130:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    b132:	4608      	mov	r0, r1
    b134:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b138:	735a      	strb	r2, [r3, #13]
    b13a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b13e:	4282      	cmp	r2, r0
    b140:	d01c      	beq.n	b17c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b142:	b1da      	cbz	r2, b17c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    b144:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    b146:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    b14a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    b14e:	42a6      	cmp	r6, r4
    b150:	d00f      	beq.n	b172 <z_impl_k_yield+0x66>
		return b2 - b1;
    b152:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    b154:	2c00      	cmp	r4, #0
    b156:	dd0c      	ble.n	b172 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    b158:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    b15a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    b15e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    b160:	6053      	str	r3, [r2, #4]
	update_cache(1);
    b162:	2001      	movs	r0, #1
    b164:	f7ff fdf0 	bl	ad48 <update_cache>
    b168:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    b16a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b16e:	f7fa bc71 	b.w	5a54 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    b172:	42ba      	cmp	r2, r7
    b174:	d002      	beq.n	b17c <z_impl_k_yield+0x70>
    b176:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b178:	2a00      	cmp	r2, #0
    b17a:	d1e6      	bne.n	b14a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    b17c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    b17e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    b182:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b184:	624b      	str	r3, [r1, #36]	; 0x24
}
    b186:	e7ec      	b.n	b162 <z_impl_k_yield+0x56>
    b188:	20002184 	.word	0x20002184

0000b18c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    b18c:	ea50 0301 	orrs.w	r3, r0, r1
{
    b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b194:	4605      	mov	r5, r0
    b196:	460e      	mov	r6, r1
	if (ticks == 0) {
    b198:	d103      	bne.n	b1a2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    b19a:	f7ff ffb7 	bl	b10c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    b19e:	2000      	movs	r0, #0
    b1a0:	e033      	b.n	b20a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    b1a2:	f06f 0401 	mvn.w	r4, #1
    b1a6:	1a24      	subs	r4, r4, r0
    b1a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b1ac:	eb63 0301 	sbc.w	r3, r3, r1
    b1b0:	2c01      	cmp	r4, #1
    b1b2:	f173 0300 	sbcs.w	r3, r3, #0
    b1b6:	da02      	bge.n	b1be <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b1b8:	f003 ff04 	bl	efc4 <sys_clock_tick_get_32>
    b1bc:	1944      	adds	r4, r0, r5
    b1be:	f04f 0320 	mov.w	r3, #32
    b1c2:	f3ef 8811 	mrs	r8, BASEPRI
    b1c6:	f383 8812 	msr	BASEPRI_MAX, r3
    b1ca:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    b1ce:	4f10      	ldr	r7, [pc, #64]	; (b210 <z_tick_sleep+0x84>)
    b1d0:	4b10      	ldr	r3, [pc, #64]	; (b214 <z_tick_sleep+0x88>)
    b1d2:	68b8      	ldr	r0, [r7, #8]
    b1d4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    b1d6:	f7ff fea5 	bl	af24 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b1da:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b1dc:	490e      	ldr	r1, [pc, #56]	; (b218 <z_tick_sleep+0x8c>)
    b1de:	462a      	mov	r2, r5
    b1e0:	4633      	mov	r3, r6
    b1e2:	3018      	adds	r0, #24
    b1e4:	f000 f916 	bl	b414 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b1e8:	68ba      	ldr	r2, [r7, #8]
    b1ea:	7b53      	ldrb	r3, [r2, #13]
    b1ec:	f043 0310 	orr.w	r3, r3, #16
    b1f0:	7353      	strb	r3, [r2, #13]
    b1f2:	4640      	mov	r0, r8
    b1f4:	f7fa fc2e 	bl	5a54 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b1f8:	f003 fee4 	bl	efc4 <sys_clock_tick_get_32>
    b1fc:	1a20      	subs	r0, r4, r0
    b1fe:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    b202:	2801      	cmp	r0, #1
    b204:	f173 0300 	sbcs.w	r3, r3, #0
    b208:	dbc9      	blt.n	b19e <z_tick_sleep+0x12>
}
    b20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b20e:	bf00      	nop
    b210:	20002184 	.word	0x20002184
    b214:	200021b8 	.word	0x200021b8
    b218:	0000edf7 	.word	0x0000edf7

0000b21c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b21c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    b220:	bf08      	it	eq
    b222:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    b226:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b228:	d106      	bne.n	b238 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    b22a:	4b08      	ldr	r3, [pc, #32]	; (b24c <z_impl_k_sleep+0x30>)
    b22c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b22e:	f7ff ff13 	bl	b058 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    b232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    b236:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    b238:	f7ff ffa8 	bl	b18c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    b23c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b240:	fb80 0303 	smull	r0, r3, r0, r3
    b244:	0bc0      	lsrs	r0, r0, #15
    b246:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    b24a:	e7f4      	b.n	b236 <z_impl_k_sleep+0x1a>
    b24c:	20002184 	.word	0x20002184

0000b250 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    b250:	4b01      	ldr	r3, [pc, #4]	; (b258 <z_impl_z_current_get+0x8>)
    b252:	6898      	ldr	r0, [r3, #8]
    b254:	4770      	bx	lr
    b256:	bf00      	nop
    b258:	20002184 	.word	0x20002184

0000b25c <z_impl_k_is_preempt_thread>:
    b25c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    b260:	b93b      	cbnz	r3, b272 <z_impl_k_is_preempt_thread+0x16>
    b262:	4b05      	ldr	r3, [pc, #20]	; (b278 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b264:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    b266:	89d8      	ldrh	r0, [r3, #14]
    b268:	287f      	cmp	r0, #127	; 0x7f
    b26a:	bf8c      	ite	hi
    b26c:	2000      	movhi	r0, #0
    b26e:	2001      	movls	r0, #1
    b270:	4770      	bx	lr
    b272:	2000      	movs	r0, #0
}
    b274:	4770      	bx	lr
    b276:	bf00      	nop
    b278:	20002184 	.word	0x20002184

0000b27c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    b27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b280:	4604      	mov	r4, r0
    b282:	f04f 0320 	mov.w	r3, #32
    b286:	f3ef 8611 	mrs	r6, BASEPRI
    b28a:	f383 8812 	msr	BASEPRI_MAX, r3
    b28e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b292:	7b43      	ldrb	r3, [r0, #13]
    b294:	071a      	lsls	r2, r3, #28
    b296:	d505      	bpl.n	b2a4 <z_thread_abort+0x28>
	__asm__ volatile(
    b298:	f386 8811 	msr	BASEPRI, r6
    b29c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b2a4:	f023 0220 	bic.w	r2, r3, #32
    b2a8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    b2ac:	09d2      	lsrs	r2, r2, #7
    b2ae:	d123      	bne.n	b2f8 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b2b0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    b2b2:	68a3      	ldr	r3, [r4, #8]
    b2b4:	b113      	cbz	r3, b2bc <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    b2b6:	4620      	mov	r0, r4
    b2b8:	f003 fd3a 	bl	ed30 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    b2bc:	f104 0018 	add.w	r0, r4, #24
    b2c0:	f003 fe40 	bl	ef44 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b2c4:	f104 0758 	add.w	r7, r4, #88	; 0x58
    b2c8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    b2cc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b2ce:	42bd      	cmp	r5, r7
    b2d0:	d000      	beq.n	b2d4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b2d2:	b9cd      	cbnz	r5, b308 <z_thread_abort+0x8c>
		update_cache(1);
    b2d4:	2001      	movs	r0, #1
    b2d6:	f7ff fd37 	bl	ad48 <update_cache>
		z_thread_monitor_exit(thread);
    b2da:	4620      	mov	r0, r4
    b2dc:	f7ff f900 	bl	a4e0 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    b2e0:	4b10      	ldr	r3, [pc, #64]	; (b324 <z_thread_abort+0xa8>)
    b2e2:	689b      	ldr	r3, [r3, #8]
    b2e4:	42a3      	cmp	r3, r4
    b2e6:	d1d7      	bne.n	b298 <z_thread_abort+0x1c>
    b2e8:	f3ef 8305 	mrs	r3, IPSR
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d1d3      	bne.n	b298 <z_thread_abort+0x1c>
    b2f0:	4630      	mov	r0, r6
    b2f2:	f7fa fbaf 	bl	5a54 <arch_swap>
	return ret;
    b2f6:	e7cf      	b.n	b298 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b2f8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    b2fc:	f043 0308 	orr.w	r3, r3, #8
    b300:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b302:	f003 fd0d 	bl	ed20 <sys_dlist_remove>
}
    b306:	e7d4      	b.n	b2b2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    b308:	4628      	mov	r0, r5
    b30a:	f003 fd11 	bl	ed30 <unpend_thread_no_timeout>
    b30e:	f105 0018 	add.w	r0, r5, #24
    b312:	f003 fe17 	bl	ef44 <z_abort_timeout>
    b316:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
    b31a:	4628      	mov	r0, r5
    b31c:	f7ff fdae 	bl	ae7c <ready_thread>
    b320:	e7d4      	b.n	b2cc <z_thread_abort+0x50>
    b322:	bf00      	nop
    b324:	20002184 	.word	0x20002184

0000b328 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b328:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b32a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    b32e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b330:	e9cd 6700 	strd	r6, r7, [sp]
    b334:	f7ff fe34 	bl	afa0 <z_pend_curr>

	if (data != NULL) {
    b338:	b11c      	cbz	r4, b342 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    b33a:	4b03      	ldr	r3, [pc, #12]	; (b348 <z_sched_wait+0x20>)
    b33c:	689b      	ldr	r3, [r3, #8]
    b33e:	695b      	ldr	r3, [r3, #20]
    b340:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b342:	b002      	add	sp, #8
    b344:	bdd0      	pop	{r4, r6, r7, pc}
    b346:	bf00      	nop
    b348:	20002184 	.word	0x20002184

0000b34c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    b34c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    b34e:	4806      	ldr	r0, [pc, #24]	; (b368 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    b350:	4a06      	ldr	r2, [pc, #24]	; (b36c <z_data_copy+0x20>)
    b352:	4907      	ldr	r1, [pc, #28]	; (b370 <z_data_copy+0x24>)
    b354:	1a12      	subs	r2, r2, r0
    b356:	f002 febd 	bl	e0d4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b35a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b35e:	4a05      	ldr	r2, [pc, #20]	; (b374 <z_data_copy+0x28>)
    b360:	4905      	ldr	r1, [pc, #20]	; (b378 <z_data_copy+0x2c>)
    b362:	4806      	ldr	r0, [pc, #24]	; (b37c <z_data_copy+0x30>)
    b364:	f002 beb6 	b.w	e0d4 <memcpy>
    b368:	20000000 	.word	0x20000000
    b36c:	2000040c 	.word	0x2000040c
    b370:	000121b4 	.word	0x000121b4
    b374:	00000000 	.word	0x00000000
    b378:	000121b4 	.word	0x000121b4
    b37c:	20000000 	.word	0x20000000

0000b380 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b380:	4b03      	ldr	r3, [pc, #12]	; (b390 <elapsed+0x10>)
    b382:	681b      	ldr	r3, [r3, #0]
    b384:	b90b      	cbnz	r3, b38a <elapsed+0xa>
    b386:	f7fd b8f1 	b.w	856c <sys_clock_elapsed>
}
    b38a:	2000      	movs	r0, #0
    b38c:	4770      	bx	lr
    b38e:	bf00      	nop
    b390:	200021c4 	.word	0x200021c4

0000b394 <next_timeout>:
	return list->head == list;
    b394:	4b10      	ldr	r3, [pc, #64]	; (b3d8 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    b396:	b510      	push	{r4, lr}
    b398:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b39a:	429c      	cmp	r4, r3
    b39c:	bf08      	it	eq
    b39e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    b3a0:	f7ff ffee 	bl	b380 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    b3a4:	b1a4      	cbz	r4, b3d0 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    b3a6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    b3aa:	1a1b      	subs	r3, r3, r0
    b3ac:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    b3b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b3b4:	f170 0200 	sbcs.w	r2, r0, #0
    b3b8:	da0a      	bge.n	b3d0 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    b3ba:	2800      	cmp	r0, #0
    b3bc:	bfac      	ite	ge
    b3be:	4618      	movge	r0, r3
    b3c0:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b3c2:	4b06      	ldr	r3, [pc, #24]	; (b3dc <next_timeout+0x48>)
    b3c4:	691b      	ldr	r3, [r3, #16]
    b3c6:	b113      	cbz	r3, b3ce <next_timeout+0x3a>
    b3c8:	4298      	cmp	r0, r3
    b3ca:	bfa8      	it	ge
    b3cc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    b3ce:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    b3d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b3d4:	e7f5      	b.n	b3c2 <next_timeout+0x2e>
    b3d6:	bf00      	nop
    b3d8:	20000234 	.word	0x20000234
    b3dc:	20002184 	.word	0x20002184

0000b3e0 <remove_timeout>:
{
    b3e0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    b3e2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b3e4:	b168      	cbz	r0, b402 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    b3e6:	4a0a      	ldr	r2, [pc, #40]	; (b410 <remove_timeout+0x30>)
    b3e8:	6852      	ldr	r2, [r2, #4]
    b3ea:	4290      	cmp	r0, r2
    b3ec:	d009      	beq.n	b402 <remove_timeout+0x22>
	if (next(t) != NULL) {
    b3ee:	b143      	cbz	r3, b402 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    b3f0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    b3f4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    b3f8:	1912      	adds	r2, r2, r4
    b3fa:	eb41 0105 	adc.w	r1, r1, r5
    b3fe:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    b402:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    b404:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b406:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b408:	2300      	movs	r3, #0
	node->prev = NULL;
    b40a:	e9c0 3300 	strd	r3, r3, [r0]
}
    b40e:	bd30      	pop	{r4, r5, pc}
    b410:	20000234 	.word	0x20000234

0000b414 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b418:	bf08      	it	eq
    b41a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    b41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b420:	4604      	mov	r4, r0
    b422:	461f      	mov	r7, r3
    b424:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b426:	d067      	beq.n	b4f8 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b428:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    b42a:	f04f 0320 	mov.w	r3, #32
    b42e:	f3ef 8611 	mrs	r6, BASEPRI
    b432:	f383 8812 	msr	BASEPRI_MAX, r3
    b436:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b43a:	f06f 0201 	mvn.w	r2, #1
    b43e:	1b53      	subs	r3, r2, r5
    b440:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    b444:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b448:	2b00      	cmp	r3, #0
    b44a:	db1b      	blt.n	b484 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b44c:	4b2b      	ldr	r3, [pc, #172]	; (b4fc <z_add_timeout+0xe8>)
    b44e:	e9d3 1300 	ldrd	r1, r3, [r3]
    b452:	1a52      	subs	r2, r2, r1
    b454:	eb6c 0303 	sbc.w	r3, ip, r3
    b458:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    b45a:	eb63 0307 	sbc.w	r3, r3, r7
    b45e:	2d01      	cmp	r5, #1
    b460:	f173 0200 	sbcs.w	r2, r3, #0
    b464:	bfbc      	itt	lt
    b466:	2501      	movlt	r5, #1
    b468:	2300      	movlt	r3, #0
    b46a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    b46e:	4824      	ldr	r0, [pc, #144]	; (b500 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    b470:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b474:	4283      	cmp	r3, r0
    b476:	d118      	bne.n	b4aa <z_add_timeout+0x96>
	node->prev = tail;
    b478:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    b47c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    b480:	6044      	str	r4, [r0, #4]
}
    b482:	e026      	b.n	b4d2 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b484:	f7ff ff7c 	bl	b380 <elapsed>
    b488:	3501      	adds	r5, #1
    b48a:	f147 0700 	adc.w	r7, r7, #0
    b48e:	182d      	adds	r5, r5, r0
    b490:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    b494:	e9c4 5704 	strd	r5, r7, [r4, #16]
    b498:	e7e9      	b.n	b46e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    b49a:	1a52      	subs	r2, r2, r1
    b49c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    b4a0:	459c      	cmp	ip, r3
    b4a2:	e9c4 2504 	strd	r2, r5, [r4, #16]
    b4a6:	d0e7      	beq.n	b478 <z_add_timeout+0x64>
    b4a8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    b4aa:	2b00      	cmp	r3, #0
    b4ac:	d0e4      	beq.n	b478 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    b4ae:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    b4b2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    b4b6:	428a      	cmp	r2, r1
    b4b8:	eb75 0e07 	sbcs.w	lr, r5, r7
    b4bc:	daed      	bge.n	b49a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    b4be:	1a8a      	subs	r2, r1, r2
    b4c0:	eb67 0505 	sbc.w	r5, r7, r5
    b4c4:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    b4c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b4ca:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    b4ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b4d0:	605c      	str	r4, [r3, #4]
	return list->head == list;
    b4d2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b4d4:	4283      	cmp	r3, r0
    b4d6:	d00b      	beq.n	b4f0 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b4d8:	429c      	cmp	r4, r3
    b4da:	d109      	bne.n	b4f0 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b4dc:	f7ff ff5a 	bl	b394 <next_timeout>

			if (next_time == 0 ||
    b4e0:	b118      	cbz	r0, b4ea <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    b4e2:	4b08      	ldr	r3, [pc, #32]	; (b504 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    b4e4:	691b      	ldr	r3, [r3, #16]
    b4e6:	4283      	cmp	r3, r0
    b4e8:	d002      	beq.n	b4f0 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    b4ea:	2100      	movs	r1, #0
    b4ec:	f7fd f80c 	bl	8508 <sys_clock_set_timeout>
	__asm__ volatile(
    b4f0:	f386 8811 	msr	BASEPRI, r6
    b4f4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b4fa:	bf00      	nop
    b4fc:	20000f08 	.word	0x20000f08
    b500:	20000234 	.word	0x20000234
    b504:	20002184 	.word	0x20002184

0000b508 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    b508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b50c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b50e:	f7ff fc75 	bl	adfc <z_time_slice>
	__asm__ volatile(
    b512:	f04f 0320 	mov.w	r3, #32
    b516:	f3ef 8411 	mrs	r4, BASEPRI
    b51a:	f383 8812 	msr	BASEPRI_MAX, r3
    b51e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    b522:	4e24      	ldr	r6, [pc, #144]	; (b5b4 <sys_clock_announce+0xac>)
	return list->head == list;
    b524:	f8df 8090 	ldr.w	r8, [pc, #144]	; b5b8 <sys_clock_announce+0xb0>
    b528:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    b52a:	4d24      	ldr	r5, [pc, #144]	; (b5bc <sys_clock_announce+0xb4>)
    b52c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    b530:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b532:	4540      	cmp	r0, r8
		curr_tick += dt;
    b534:	e9d5 1e00 	ldrd	r1, lr, [r5]
    b538:	ea4f 77e2 	mov.w	r7, r2, asr #31
    b53c:	d00b      	beq.n	b556 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    b53e:	b150      	cbz	r0, b556 <sys_clock_announce+0x4e>
    b540:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    b544:	429a      	cmp	r2, r3
    b546:	eb77 090c 	sbcs.w	r9, r7, ip
    b54a:	da16      	bge.n	b57a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    b54c:	1a9b      	subs	r3, r3, r2
    b54e:	eb6c 0c07 	sbc.w	ip, ip, r7
    b552:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    b556:	1852      	adds	r2, r2, r1
    b558:	eb4e 0707 	adc.w	r7, lr, r7
    b55c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    b560:	2500      	movs	r5, #0
    b562:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    b564:	f7ff ff16 	bl	b394 <next_timeout>
    b568:	4629      	mov	r1, r5
    b56a:	f7fc ffcd 	bl	8508 <sys_clock_set_timeout>
	__asm__ volatile(
    b56e:	f384 8811 	msr	BASEPRI, r4
    b572:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    b57a:	1859      	adds	r1, r3, r1
    b57c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    b580:	1ad3      	subs	r3, r2, r3
    b582:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    b584:	2200      	movs	r2, #0
    b586:	2300      	movs	r3, #0
    b588:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    b58c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    b590:	f7ff ff26 	bl	b3e0 <remove_timeout>
    b594:	f384 8811 	msr	BASEPRI, r4
    b598:	f3bf 8f6f 	isb	sy
		t->fn(t);
    b59c:	6883      	ldr	r3, [r0, #8]
    b59e:	4798      	blx	r3
	__asm__ volatile(
    b5a0:	f04f 0320 	mov.w	r3, #32
    b5a4:	f3ef 8411 	mrs	r4, BASEPRI
    b5a8:	f383 8812 	msr	BASEPRI_MAX, r3
    b5ac:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    b5b0:	e7bc      	b.n	b52c <sys_clock_announce+0x24>
    b5b2:	bf00      	nop
    b5b4:	200021c4 	.word	0x200021c4
    b5b8:	20000234 	.word	0x20000234
    b5bc:	20000f08 	.word	0x20000f08

0000b5c0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b5c0:	b510      	push	{r4, lr}
    b5c2:	f04f 0320 	mov.w	r3, #32
    b5c6:	f3ef 8411 	mrs	r4, BASEPRI
    b5ca:	f383 8812 	msr	BASEPRI_MAX, r3
    b5ce:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    b5d2:	f7fc ffcb 	bl	856c <sys_clock_elapsed>
    b5d6:	4a05      	ldr	r2, [pc, #20]	; (b5ec <sys_clock_tick_get+0x2c>)
    b5d8:	e9d2 3100 	ldrd	r3, r1, [r2]
    b5dc:	18c0      	adds	r0, r0, r3
    b5de:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    b5e2:	f384 8811 	msr	BASEPRI, r4
    b5e6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    b5ea:	bd10      	pop	{r4, pc}
    b5ec:	20000f08 	.word	0x20000f08

0000b5f0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b5f0:	b570      	push	{r4, r5, r6, lr}
    b5f2:	4604      	mov	r4, r0
	__asm__ volatile(
    b5f4:	f04f 0320 	mov.w	r3, #32
    b5f8:	f3ef 8511 	mrs	r5, BASEPRI
    b5fc:	f383 8812 	msr	BASEPRI_MAX, r3
    b600:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b604:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    b608:	3301      	adds	r3, #1
    b60a:	f142 0200 	adc.w	r2, r2, #0
    b60e:	2b02      	cmp	r3, #2
    b610:	f172 0300 	sbcs.w	r3, r2, #0
    b614:	d304      	bcc.n	b620 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b616:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    b61a:	4918      	ldr	r1, [pc, #96]	; (b67c <z_timer_expiration_handler+0x8c>)
    b61c:	f7ff fefa 	bl	b414 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b620:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b622:	3301      	adds	r3, #1
    b624:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b626:	6a23      	ldr	r3, [r4, #32]
    b628:	b173      	cbz	r3, b648 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    b62a:	f385 8811 	msr	BASEPRI, r5
    b62e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    b632:	6a23      	ldr	r3, [r4, #32]
    b634:	4620      	mov	r0, r4
    b636:	4798      	blx	r3
	__asm__ volatile(
    b638:	f04f 0320 	mov.w	r3, #32
    b63c:	f3ef 8511 	mrs	r5, BASEPRI
    b640:	f383 8812 	msr	BASEPRI_MAX, r3
    b644:	f3bf 8f6f 	isb	sy
	return list->head == list;
    b648:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b64c:	42a6      	cmp	r6, r4
    b64e:	d000      	beq.n	b652 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b650:	b926      	cbnz	r6, b65c <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    b652:	f385 8811 	msr	BASEPRI, r5
    b656:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    b65a:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    b65c:	4630      	mov	r0, r6
    b65e:	f003 fb7a 	bl	ed56 <z_unpend_thread_no_timeout>
    b662:	2300      	movs	r3, #0
    b664:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
    b668:	f385 8811 	msr	BASEPRI, r5
    b66c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    b670:	4630      	mov	r0, r6
}
    b672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    b676:	f003 bbae 	b.w	edd6 <z_ready_thread>
    b67a:	bf00      	nop
    b67c:	0000b5f1 	.word	0x0000b5f1

0000b680 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b684:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b68a:	bf08      	it	eq
    b68c:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    b690:	4606      	mov	r6, r0
    b692:	461c      	mov	r4, r3
    b694:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    b698:	4689      	mov	r9, r1
    b69a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b69c:	d03e      	beq.n	b71c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b69e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    b6a2:	bf08      	it	eq
    b6a4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b6a8:	4615      	mov	r5, r2
    b6aa:	4607      	mov	r7, r0
    b6ac:	d014      	beq.n	b6d8 <z_impl_k_timer_start+0x58>
    b6ae:	ea50 0302 	orrs.w	r3, r0, r2
    b6b2:	d011      	beq.n	b6d8 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    b6b4:	f06f 0301 	mvn.w	r3, #1
    b6b8:	1a9b      	subs	r3, r3, r2
    b6ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b6be:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b6c2:	2b00      	cmp	r3, #0
    b6c4:	da08      	bge.n	b6d8 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    b6c6:	2a02      	cmp	r2, #2
    b6c8:	f170 0300 	sbcs.w	r3, r0, #0
    b6cc:	bfbc      	itt	lt
    b6ce:	2502      	movlt	r5, #2
    b6d0:	2700      	movlt	r7, #0
    b6d2:	3d01      	subs	r5, #1
    b6d4:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b6d8:	f06f 0301 	mvn.w	r3, #1
    b6dc:	1a5b      	subs	r3, r3, r1
    b6de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b6e2:	eb63 0304 	sbc.w	r3, r3, r4
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	da09      	bge.n	b6fe <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b6ea:	2901      	cmp	r1, #1
    b6ec:	f174 0300 	sbcs.w	r3, r4, #0
    b6f0:	bfbc      	itt	lt
    b6f2:	2101      	movlt	r1, #1
    b6f4:	2400      	movlt	r4, #0
    b6f6:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    b6fa:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    b6fe:	4630      	mov	r0, r6
    b700:	f003 fc20 	bl	ef44 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    b704:	2300      	movs	r3, #0
    b706:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    b708:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b70c:	464a      	mov	r2, r9
    b70e:	4643      	mov	r3, r8
    b710:	4630      	mov	r0, r6
    b712:	4903      	ldr	r1, [pc, #12]	; (b720 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    b714:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b718:	f7ff be7c 	b.w	b414 <z_add_timeout>
}
    b71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b720:	0000b5f1 	.word	0x0000b5f1

0000b724 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    b724:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    b728:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    b72a:	4b29      	ldr	r3, [pc, #164]	; (b7d0 <z_impl_k_poll+0xac>)
    b72c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
    b72e:	2301      	movs	r3, #1
    b730:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
    b734:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    b738:	ea52 0305 	orrs.w	r3, r2, r5
{
    b73c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    b73e:	bf0c      	ite	eq
    b740:	2301      	moveq	r3, #1
    b742:	2300      	movne	r3, #0
    b744:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
    b748:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    b74a:	f003 fcc8 	bl	f0de <register_events>
    b74e:	4681      	mov	r9, r0
	__asm__ volatile(
    b750:	f04f 0320 	mov.w	r3, #32
    b754:	f3ef 8a11 	mrs	sl, BASEPRI
    b758:	f383 8812 	msr	BASEPRI_MAX, r3
    b75c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    b760:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
    b764:	b964      	cbnz	r4, b780 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    b766:	4601      	mov	r1, r0
    b768:	4652      	mov	r2, sl
    b76a:	4640      	mov	r0, r8
    b76c:	f003 fd88 	bl	f280 <clear_event_registrations>
	__asm__ volatile(
    b770:	f38a 8811 	msr	BASEPRI, sl
    b774:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    b778:	4620      	mov	r0, r4
    b77a:	b002      	add	sp, #8
    b77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    b780:	2300      	movs	r3, #0
    b782:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b786:	ea56 0305 	orrs.w	r3, r6, r5
    b78a:	d106      	bne.n	b79a <z_impl_k_poll+0x76>
    b78c:	f38a 8811 	msr	BASEPRI, sl
    b790:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    b794:	f06f 040a 	mvn.w	r4, #10
    b798:	e7ee      	b.n	b778 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    b79a:	e9cd 6500 	strd	r6, r5, [sp]
    b79e:	4a0d      	ldr	r2, [pc, #52]	; (b7d4 <z_impl_k_poll+0xb0>)
    b7a0:	480d      	ldr	r0, [pc, #52]	; (b7d8 <z_impl_k_poll+0xb4>)
    b7a2:	4651      	mov	r1, sl
    b7a4:	f7ff fbfc 	bl	afa0 <z_pend_curr>
    b7a8:	4604      	mov	r4, r0
	__asm__ volatile(
    b7aa:	f04f 0320 	mov.w	r3, #32
    b7ae:	f3ef 8511 	mrs	r5, BASEPRI
    b7b2:	f383 8812 	msr	BASEPRI_MAX, r3
    b7b6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    b7ba:	462a      	mov	r2, r5
    b7bc:	4649      	mov	r1, r9
    b7be:	4640      	mov	r0, r8
    b7c0:	f003 fd5e 	bl	f280 <clear_event_registrations>
	__asm__ volatile(
    b7c4:	f385 8811 	msr	BASEPRI, r5
    b7c8:	f3bf 8f6f 	isb	sy
	return swap_rc;
    b7cc:	e7d4      	b.n	b778 <z_impl_k_poll+0x54>
    b7ce:	bf00      	nop
    b7d0:	20002184 	.word	0x20002184
    b7d4:	2000023c 	.word	0x2000023c
    b7d8:	20002247 	.word	0x20002247

0000b7dc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    b7dc:	b538      	push	{r3, r4, r5, lr}
    b7de:	4603      	mov	r3, r0
	__asm__ volatile(
    b7e0:	f04f 0220 	mov.w	r2, #32
    b7e4:	f3ef 8511 	mrs	r5, BASEPRI
    b7e8:	f382 8812 	msr	BASEPRI_MAX, r2
    b7ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    b7f0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    b7f2:	2101      	movs	r1, #1
    b7f4:	6081      	str	r1, [r0, #8]
	return list->head == list;
    b7f6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    b7f8:	4283      	cmp	r3, r0
    b7fa:	d106      	bne.n	b80a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    b7fc:	f385 8811 	msr	BASEPRI, r5
    b800:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    b804:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    b806:	4620      	mov	r0, r4
    b808:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    b80a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    b80e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b810:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b812:	2300      	movs	r3, #0
	node->prev = NULL;
    b814:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    b818:	f003 fcd8 	bl	f1cc <signal_poll_event>
	z_reschedule(&lock, key);
    b81c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    b81e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    b820:	4801      	ldr	r0, [pc, #4]	; (b828 <z_impl_k_poll_signal_raise+0x4c>)
    b822:	f7ff fa6b 	bl	acfc <z_reschedule>
	return rc;
    b826:	e7ee      	b.n	b806 <z_impl_k_poll_signal_raise+0x2a>
    b828:	20002247 	.word	0x20002247

0000b82c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    b82c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b82e:	4606      	mov	r6, r0
    b830:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    b832:	f003 f980 	bl	eb36 <k_is_in_isr>
    b836:	b980      	cbnz	r0, b85a <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    b838:	4b0b      	ldr	r3, [pc, #44]	; (b868 <z_thread_aligned_alloc+0x3c>)
    b83a:	689b      	ldr	r3, [r3, #8]
    b83c:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
    b840:	b17c      	cbz	r4, b862 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    b842:	1d2a      	adds	r2, r5, #4
    b844:	d209      	bcs.n	b85a <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    b846:	2000      	movs	r0, #0
    b848:	2100      	movs	r1, #0
    b84a:	e9cd 0100 	strd	r0, r1, [sp]
    b84e:	f046 0104 	orr.w	r1, r6, #4
    b852:	4620      	mov	r0, r4
    b854:	f003 fd7c 	bl	f350 <k_heap_aligned_alloc>
	if (mem == NULL) {
    b858:	b908      	cbnz	r0, b85e <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    b85a:	2400      	movs	r4, #0
	}

	return ret;
    b85c:	e001      	b.n	b862 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
    b85e:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    b860:	1d04      	adds	r4, r0, #4
}
    b862:	4620      	mov	r0, r4
    b864:	b002      	add	sp, #8
    b866:	bd70      	pop	{r4, r5, r6, pc}
    b868:	20002184 	.word	0x20002184

0000b86c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b86c:	4a02      	ldr	r2, [pc, #8]	; (b878 <boot_banner+0xc>)
    b86e:	4903      	ldr	r1, [pc, #12]	; (b87c <boot_banner+0x10>)
    b870:	4803      	ldr	r0, [pc, #12]	; (b880 <boot_banner+0x14>)
    b872:	f000 b8a1 	b.w	b9b8 <printk>
    b876:	bf00      	nop
    b878:	000106d5 	.word	0x000106d5
    b87c:	00012175 	.word	0x00012175
    b880:	00012183 	.word	0x00012183

0000b884 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b884:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b886:	4c06      	ldr	r4, [pc, #24]	; (b8a0 <statics_init+0x1c>)
    b888:	4d06      	ldr	r5, [pc, #24]	; (b8a4 <statics_init+0x20>)
    b88a:	42ac      	cmp	r4, r5
    b88c:	d301      	bcc.n	b892 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    b88e:	2000      	movs	r0, #0
    b890:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b892:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    b896:	4620      	mov	r0, r4
    b898:	f003 fd52 	bl	f340 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b89c:	3414      	adds	r4, #20
    b89e:	e7f4      	b.n	b88a <statics_init+0x6>
    b8a0:	200002b4 	.word	0x200002b4
    b8a4:	200002b4 	.word	0x200002b4

0000b8a8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    b8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    b8aa:	4b09      	ldr	r3, [pc, #36]	; (b8d0 <k_sys_work_q_init+0x28>)
    b8ac:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b8ae:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    b8b0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    b8b2:	9300      	str	r3, [sp, #0]
    b8b4:	4907      	ldr	r1, [pc, #28]	; (b8d4 <k_sys_work_q_init+0x2c>)
    b8b6:	4808      	ldr	r0, [pc, #32]	; (b8d8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    b8b8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    b8bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b8c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b8c4:	f7ff f99c 	bl	ac00 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b8c8:	4620      	mov	r0, r4
    b8ca:	b004      	add	sp, #16
    b8cc:	bd10      	pop	{r4, pc}
    b8ce:	bf00      	nop
    b8d0:	000121aa 	.word	0x000121aa
    b8d4:	20004288 	.word	0x20004288
    b8d8:	20000f10 	.word	0x20000f10

0000b8dc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    b8dc:	4770      	bx	lr

0000b8de <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    b8de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8e2:	4607      	mov	r7, r0
    b8e4:	460e      	mov	r6, r1
    b8e6:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
    b8e8:	461d      	mov	r5, r3
    b8ea:	b1fb      	cbz	r3, b92c <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
    b8ec:	7818      	ldrb	r0, [r3, #0]
    b8ee:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    b8f0:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
    b8f4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    b8f8:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    b8fa:	f04f 0900 	mov.w	r9, #0
    b8fe:	45d1      	cmp	r9, sl
    b900:	d308      	bcc.n	b914 <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
    b902:	686a      	ldr	r2, [r5, #4]
    b904:	f105 0308 	add.w	r3, r5, #8
    b908:	4641      	mov	r1, r8
    b90a:	4638      	mov	r0, r7
    b90c:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    b90e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    b912:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    b914:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    b918:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    b91c:	4620      	mov	r0, r4
    b91e:	f002 fb83 	bl	e028 <strlen>
    b922:	3001      	adds	r0, #1
    b924:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    b926:	f109 0901 	add.w	r9, r9, #1
    b92a:	e7e8      	b.n	b8fe <cbpprintf_external+0x20>
}
    b92c:	f06f 0015 	mvn.w	r0, #21
    b930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000b934 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    b934:	4603      	mov	r3, r0
    b936:	b140      	cbz	r0, b94a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b938:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b93a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    b93e:	2a02      	cmp	r2, #2
    b940:	d006      	beq.n	b950 <sys_notify_validate+0x1c>
    b942:	2a03      	cmp	r2, #3
    b944:	d004      	beq.n	b950 <sys_notify_validate+0x1c>
    b946:	2a01      	cmp	r2, #1
    b948:	d005      	beq.n	b956 <sys_notify_validate+0x22>
		return -EINVAL;
    b94a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    b94e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    b950:	681a      	ldr	r2, [r3, #0]
    b952:	2a00      	cmp	r2, #0
    b954:	d0f9      	beq.n	b94a <sys_notify_validate+0x16>
		notify->result = 0;
    b956:	2000      	movs	r0, #0
    b958:	6098      	str	r0, [r3, #8]
    b95a:	4770      	bx	lr

0000b95c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b95c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b95e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    b962:	2a02      	cmp	r2, #2
{
    b964:	b510      	push	{r4, lr}
    b966:	4603      	mov	r3, r0
	notify->result = res;
    b968:	6081      	str	r1, [r0, #8]
	switch (method) {
    b96a:	d00a      	beq.n	b982 <sys_notify_finalize+0x26>
    b96c:	2a03      	cmp	r2, #3
    b96e:	d10b      	bne.n	b988 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    b970:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    b972:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    b974:	2200      	movs	r2, #0
    b976:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    b978:	b108      	cbz	r0, b97e <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    b97a:	f7ff ff2f 	bl	b7dc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    b97e:	4620      	mov	r0, r4
    b980:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    b982:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    b984:	2400      	movs	r4, #0
		break;
    b986:	e7f5      	b.n	b974 <sys_notify_finalize+0x18>
	switch (method) {
    b988:	2400      	movs	r4, #0
    b98a:	4620      	mov	r0, r4
    b98c:	e7f2      	b.n	b974 <sys_notify_finalize+0x18>

0000b98e <arch_printk_char_out>:
}
    b98e:	2000      	movs	r0, #0
    b990:	4770      	bx	lr

0000b992 <str_out>:
{
    b992:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    b994:	688a      	ldr	r2, [r1, #8]
    b996:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    b998:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    b99a:	b114      	cbz	r4, b9a2 <str_out+0x10>
    b99c:	684b      	ldr	r3, [r1, #4]
    b99e:	4293      	cmp	r3, r2
    b9a0:	dc01      	bgt.n	b9a6 <str_out+0x14>
		ctx->count++;
    b9a2:	608d      	str	r5, [r1, #8]
}
    b9a4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    b9a6:	3b01      	subs	r3, #1
    b9a8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    b9aa:	bf08      	it	eq
    b9ac:	2200      	moveq	r2, #0
    b9ae:	608d      	str	r5, [r1, #8]
    b9b0:	bf0c      	ite	eq
    b9b2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    b9b4:	54a0      	strbne	r0, [r4, r2]
    b9b6:	e7f5      	b.n	b9a4 <str_out+0x12>

0000b9b8 <printk>:
{
    b9b8:	b40f      	push	{r0, r1, r2, r3}
    b9ba:	b507      	push	{r0, r1, r2, lr}
    b9bc:	a904      	add	r1, sp, #16
    b9be:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    b9c2:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    b9c4:	f000 ff43 	bl	c84e <z_log_vprintk>
}
    b9c8:	b003      	add	sp, #12
    b9ca:	f85d eb04 	ldr.w	lr, [sp], #4
    b9ce:	b004      	add	sp, #16
    b9d0:	4770      	bx	lr

0000b9d2 <snprintk>:
{
    b9d2:	b40c      	push	{r2, r3}
    b9d4:	b507      	push	{r0, r1, r2, lr}
    b9d6:	ab04      	add	r3, sp, #16
    b9d8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    b9dc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    b9de:	f7f4 ffb7 	bl	950 <vsnprintk>
}
    b9e2:	b003      	add	sp, #12
    b9e4:	f85d eb04 	ldr.w	lr, [sp], #4
    b9e8:	b002      	add	sp, #8
    b9ea:	4770      	bx	lr

0000b9ec <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b9ec:	b510      	push	{r4, lr}
    b9ee:	4603      	mov	r3, r0
	return list->head;
    b9f0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b9f2:	2200      	movs	r2, #0
    b9f4:	b158      	cbz	r0, ba0e <sys_slist_find_and_remove+0x22>
    b9f6:	4288      	cmp	r0, r1
    b9f8:	d10f      	bne.n	ba1a <sys_slist_find_and_remove+0x2e>
	return node->next;
    b9fa:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    b9fc:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    b9fe:	b93a      	cbnz	r2, ba10 <sys_slist_find_and_remove+0x24>
    ba00:	42a1      	cmp	r1, r4
	list->head = node;
    ba02:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    ba04:	d100      	bne.n	ba08 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    ba06:	6058      	str	r0, [r3, #4]
	parent->next = child;
    ba08:	2300      	movs	r3, #0
    ba0a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ba0c:	2001      	movs	r0, #1
    ba0e:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    ba10:	42a1      	cmp	r1, r4
	parent->next = child;
    ba12:	6010      	str	r0, [r2, #0]
	list->tail = node;
    ba14:	bf08      	it	eq
    ba16:	605a      	streq	r2, [r3, #4]
}
    ba18:	e7f6      	b.n	ba08 <sys_slist_find_and_remove+0x1c>
	return node->next;
    ba1a:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ba1c:	6800      	ldr	r0, [r0, #0]
    ba1e:	e7e9      	b.n	b9f4 <sys_slist_find_and_remove+0x8>

0000ba20 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ba20:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    ba22:	f013 0307 	ands.w	r3, r3, #7
    ba26:	d105      	bne.n	ba34 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    ba28:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	bf0c      	ite	eq
    ba2e:	2000      	moveq	r0, #0
    ba30:	2003      	movne	r0, #3
    ba32:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    ba34:	2b02      	cmp	r3, #2
    ba36:	d105      	bne.n	ba44 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    ba38:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	bf14      	ite	ne
    ba3e:	2000      	movne	r0, #0
    ba40:	2004      	moveq	r0, #4
    ba42:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    ba44:	2b01      	cmp	r3, #1
    ba46:	d105      	bne.n	ba54 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    ba48:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	bf0c      	ite	eq
    ba4e:	2000      	moveq	r0, #0
    ba50:	2005      	movne	r0, #5
    ba52:	4770      	bx	lr
	int evt = EVT_NOP;
    ba54:	2000      	movs	r0, #0
}
    ba56:	4770      	bx	lr

0000ba58 <notify_one>:
{
    ba58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba5c:	460d      	mov	r5, r1
    ba5e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ba60:	4619      	mov	r1, r3
    ba62:	1d28      	adds	r0, r5, #4
{
    ba64:	4690      	mov	r8, r2
    ba66:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ba68:	f7ff ff78 	bl	b95c <sys_notify_finalize>
	if (cb) {
    ba6c:	4604      	mov	r4, r0
    ba6e:	b138      	cbz	r0, ba80 <notify_one+0x28>
		cb(mgr, cli, state, res);
    ba70:	4633      	mov	r3, r6
    ba72:	4642      	mov	r2, r8
    ba74:	4629      	mov	r1, r5
    ba76:	4638      	mov	r0, r7
    ba78:	46a4      	mov	ip, r4
}
    ba7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    ba7e:	4760      	bx	ip
}
    ba80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ba84 <transition_complete>:
{
    ba84:	b410      	push	{r4}
	__asm__ volatile(
    ba86:	f04f 0420 	mov.w	r4, #32
    ba8a:	f3ef 8211 	mrs	r2, BASEPRI
    ba8e:	f384 8812 	msr	BASEPRI_MAX, r4
    ba92:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    ba96:	6141      	str	r1, [r0, #20]
}
    ba98:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    ba9a:	2101      	movs	r1, #1
    ba9c:	f7f4 bf6c 	b.w	978 <process_event>

0000baa0 <validate_args>:
{
    baa0:	b510      	push	{r4, lr}
    baa2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    baa4:	b140      	cbz	r0, bab8 <validate_args+0x18>
    baa6:	b139      	cbz	r1, bab8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    baa8:	1d08      	adds	r0, r1, #4
    baaa:	f7ff ff43 	bl	b934 <sys_notify_validate>
	if ((rv == 0)
    baae:	b928      	cbnz	r0, babc <validate_args+0x1c>
	    && ((cli->notify.flags
    bab0:	68a3      	ldr	r3, [r4, #8]
    bab2:	f033 0303 	bics.w	r3, r3, #3
    bab6:	d001      	beq.n	babc <validate_args+0x1c>
		rv = -EINVAL;
    bab8:	f06f 0015 	mvn.w	r0, #21
}
    babc:	bd10      	pop	{r4, pc}

0000babe <onoff_manager_init>:
{
    babe:	b538      	push	{r3, r4, r5, lr}
    bac0:	460c      	mov	r4, r1
	if ((mgr == NULL)
    bac2:	4605      	mov	r5, r0
    bac4:	b158      	cbz	r0, bade <onoff_manager_init+0x20>
	    || (transitions == NULL)
    bac6:	b151      	cbz	r1, bade <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    bac8:	680b      	ldr	r3, [r1, #0]
    baca:	b143      	cbz	r3, bade <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    bacc:	684b      	ldr	r3, [r1, #4]
    bace:	b133      	cbz	r3, bade <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    bad0:	221c      	movs	r2, #28
    bad2:	2100      	movs	r1, #0
    bad4:	f002 fb09 	bl	e0ea <memset>
    bad8:	612c      	str	r4, [r5, #16]
	return 0;
    bada:	2000      	movs	r0, #0
}
    badc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bade:	f06f 0015 	mvn.w	r0, #21
    bae2:	e7fb      	b.n	badc <onoff_manager_init+0x1e>

0000bae4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    bae4:	b570      	push	{r4, r5, r6, lr}
    bae6:	4604      	mov	r4, r0
    bae8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    baea:	f7ff ffd9 	bl	baa0 <validate_args>

	if (rv < 0) {
    baee:	1e05      	subs	r5, r0, #0
    baf0:	db31      	blt.n	bb56 <onoff_request+0x72>
    baf2:	f04f 0320 	mov.w	r3, #32
    baf6:	f3ef 8111 	mrs	r1, BASEPRI
    bafa:	f383 8812 	msr	BASEPRI_MAX, r3
    bafe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    bb02:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bb04:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    bb06:	f64f 75ff 	movw	r5, #65535	; 0xffff
    bb0a:	42ab      	cmp	r3, r5
    bb0c:	f000 0207 	and.w	r2, r0, #7
    bb10:	d02e      	beq.n	bb70 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    bb12:	2a02      	cmp	r2, #2
    bb14:	d10e      	bne.n	bb34 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    bb16:	3301      	adds	r3, #1
    bb18:	8363      	strh	r3, [r4, #26]
	rv = state;
    bb1a:	4615      	mov	r5, r2
		notify = true;
    bb1c:	2301      	movs	r3, #1
	__asm__ volatile(
    bb1e:	f381 8811 	msr	BASEPRI, r1
    bb22:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    bb26:	b1b3      	cbz	r3, bb56 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    bb28:	2300      	movs	r3, #0
    bb2a:	4631      	mov	r1, r6
    bb2c:	4620      	mov	r0, r4
    bb2e:	f7ff ff93 	bl	ba58 <notify_one>
    bb32:	e010      	b.n	bb56 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    bb34:	0783      	lsls	r3, r0, #30
    bb36:	d001      	beq.n	bb3c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    bb38:	2a06      	cmp	r2, #6
    bb3a:	d10e      	bne.n	bb5a <onoff_request+0x76>
	parent->next = child;
    bb3c:	2300      	movs	r3, #0
    bb3e:	6033      	str	r3, [r6, #0]
	return list->tail;
    bb40:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    bb42:	b993      	cbnz	r3, bb6a <onoff_request+0x86>
	list->head = node;
    bb44:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    bb48:	4615      	mov	r5, r2
    bb4a:	b962      	cbnz	r2, bb66 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    bb4c:	460a      	mov	r2, r1
    bb4e:	4620      	mov	r0, r4
    bb50:	2102      	movs	r1, #2
    bb52:	f7f4 ff11 	bl	978 <process_event>
		}
	}

	return rv;
}
    bb56:	4628      	mov	r0, r5
    bb58:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    bb5a:	2a05      	cmp	r2, #5
    bb5c:	bf0c      	ite	eq
    bb5e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    bb62:	f06f 0504 	mvnne.w	r5, #4
    bb66:	2300      	movs	r3, #0
    bb68:	e7d9      	b.n	bb1e <onoff_request+0x3a>
	parent->next = child;
    bb6a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    bb6c:	6066      	str	r6, [r4, #4]
}
    bb6e:	e7eb      	b.n	bb48 <onoff_request+0x64>
		rv = -EAGAIN;
    bb70:	f06f 050a 	mvn.w	r5, #10
    bb74:	e7f7      	b.n	bb66 <onoff_request+0x82>

0000bb76 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    bb76:	b510      	push	{r4, lr}
	__asm__ volatile(
    bb78:	f04f 0320 	mov.w	r3, #32
    bb7c:	f3ef 8211 	mrs	r2, BASEPRI
    bb80:	f383 8812 	msr	BASEPRI_MAX, r3
    bb84:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bb88:	8b04      	ldrh	r4, [r0, #24]
    bb8a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    bb8e:	2c02      	cmp	r4, #2
    bb90:	d00a      	beq.n	bba8 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    bb92:	2c01      	cmp	r4, #1
    bb94:	bf0c      	ite	eq
    bb96:	f06f 0004 	mvneq.w	r0, #4
    bb9a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    bb9e:	f382 8811 	msr	BASEPRI, r2
    bba2:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    bba6:	e008      	b.n	bbba <onoff_release+0x44>
	mgr->refs -= 1U;
    bba8:	8b43      	ldrh	r3, [r0, #26]
    bbaa:	3b01      	subs	r3, #1
    bbac:	b29b      	uxth	r3, r3
    bbae:	8343      	strh	r3, [r0, #26]
	if (stop) {
    bbb0:	b923      	cbnz	r3, bbbc <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    bbb2:	4621      	mov	r1, r4
    bbb4:	f7f4 fee0 	bl	978 <process_event>
	int rv = state;
    bbb8:	4620      	mov	r0, r4
}
    bbba:	bd10      	pop	{r4, pc}
	int rv = state;
    bbbc:	4620      	mov	r0, r4
    bbbe:	e7ee      	b.n	bb9e <onoff_release+0x28>

0000bbc0 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    bbc0:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    bbc2:	b1b0      	cbz	r0, bbf2 <onoff_cancel+0x32>
    bbc4:	b1a9      	cbz	r1, bbf2 <onoff_cancel+0x32>
	__asm__ volatile(
    bbc6:	f04f 0220 	mov.w	r2, #32
    bbca:	f3ef 8511 	mrs	r5, BASEPRI
    bbce:	f382 8812 	msr	BASEPRI_MAX, r2
    bbd2:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bbd6:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    bbd8:	f7ff ff08 	bl	b9ec <sys_slist_find_and_remove>
    bbdc:	b130      	cbz	r0, bbec <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    bbde:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    bbe2:	f385 8811 	msr	BASEPRI, r5
    bbe6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    bbea:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    bbec:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bbf0:	e7f7      	b.n	bbe2 <onoff_cancel+0x22>
		return -EINVAL;
    bbf2:	f06f 0015 	mvn.w	r0, #21
    bbf6:	e7f8      	b.n	bbea <onoff_cancel+0x2a>

0000bbf8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    bbf8:	4604      	mov	r4, r0
    bbfa:	b508      	push	{r3, lr}
    bbfc:	4608      	mov	r0, r1
    bbfe:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    bc00:	461a      	mov	r2, r3
    bc02:	47a0      	blx	r4
	return z_impl_z_current_get();
    bc04:	f7ff fb24 	bl	b250 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    bc08:	f7fa fb2e 	bl	6268 <z_impl_k_thread_abort>

0000bc0c <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    bc0c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    bc10:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    bc12:	0840      	lsrs	r0, r0, #1
    bc14:	4770      	bx	lr

0000bc16 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    bc16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc18:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    bc1a:	f7ff fff7 	bl	bc0c <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    bc1e:	fab0 f080 	clz	r0, r0
    bc22:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    bc26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    bc2a:	00ca      	lsls	r2, r1, #3
    bc2c:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    bc30:	1d17      	adds	r7, r2, #4
{
    bc32:	460c      	mov	r4, r1
    bc34:	3206      	adds	r2, #6
    bc36:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    bc38:	b956      	cbnz	r6, bc50 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    bc3a:	2101      	movs	r1, #1
    bc3c:	fa01 f000 	lsl.w	r0, r1, r0
    bc40:	68d9      	ldr	r1, [r3, #12]
    bc42:	4301      	orrs	r1, r0
    bc44:	60d9      	str	r1, [r3, #12]
		b->next = c;
    bc46:	f8cc 4010 	str.w	r4, [ip, #16]
    bc4a:	53dd      	strh	r5, [r3, r7]
    bc4c:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    bc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    bc50:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    bc52:	3104      	adds	r1, #4
    bc54:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    bc56:	53d8      	strh	r0, [r3, r7]
    bc58:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    bc5c:	529e      	strh	r6, [r3, r2]
    bc5e:	80c5      	strh	r5, [r0, #6]
    bc60:	525d      	strh	r5, [r3, r1]
    bc62:	e7f4      	b.n	bc4e <free_list_add+0x38>

0000bc64 <free_list_remove_bidx>:
{
    bc64:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    bc66:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    bc6a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    bc6c:	4299      	cmp	r1, r3
    bc6e:	f102 0104 	add.w	r1, r2, #4
    bc72:	d10a      	bne.n	bc8a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    bc74:	2301      	movs	r3, #1
    bc76:	fa03 f202 	lsl.w	r2, r3, r2
    bc7a:	68c3      	ldr	r3, [r0, #12]
    bc7c:	ea23 0302 	bic.w	r3, r3, r2
    bc80:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    bc82:	2300      	movs	r3, #0
    bc84:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    bc88:	bd10      	pop	{r4, pc}
    bc8a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    bc8c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    bc90:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    bc94:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    bc98:	80cb      	strh	r3, [r1, #6]
    bc9a:	8082      	strh	r2, [r0, #4]
}
    bc9c:	e7f4      	b.n	bc88 <free_list_remove_bidx+0x24>

0000bc9e <free_list_remove>:
{
    bc9e:	b508      	push	{r3, lr}
    bca0:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    bca2:	f7ff ffb3 	bl	bc0c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    bca6:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    bcaa:	f1c2 021f 	rsb	r2, r2, #31
    bcae:	4618      	mov	r0, r3
}
    bcb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    bcb4:	f7ff bfd6 	b.w	bc64 <free_list_remove_bidx>

0000bcb8 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    bcb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bcbc:	fab1 f581 	clz	r5, r1
    bcc0:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    bcc4:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    bcc8:	4603      	mov	r3, r0
	if (b->next) {
    bcca:	693a      	ldr	r2, [r7, #16]
{
    bccc:	460e      	mov	r6, r1
	if (b->next) {
    bcce:	b1c2      	cbz	r2, bd02 <alloc_chunk+0x4a>
    bcd0:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    bcd4:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    bcd6:	4618      	mov	r0, r3
    bcd8:	4621      	mov	r1, r4
    bcda:	f7ff ff97 	bl	bc0c <chunk_size>
    bcde:	42b0      	cmp	r0, r6
    bce0:	d306      	bcc.n	bcf0 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    bce2:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    bce4:	4618      	mov	r0, r3
    bce6:	f7ff ffbd 	bl	bc64 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    bcea:	4620      	mov	r0, r4
    bcec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    bcf0:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
    bcf4:	f1b8 0801 	subs.w	r8, r8, #1
    bcf8:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
    bcfa:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    bcfc:	d001      	beq.n	bd02 <alloc_chunk+0x4a>
    bcfe:	4282      	cmp	r2, r0
    bd00:	d1e8      	bne.n	bcd4 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    bd02:	f1c5 0220 	rsb	r2, r5, #32
    bd06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    bd0a:	4094      	lsls	r4, r2
    bd0c:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    bd0e:	4014      	ands	r4, r2
    bd10:	d0eb      	beq.n	bcea <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    bd12:	fa94 f2a4 	rbit	r2, r4
    bd16:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    bd1a:	1d11      	adds	r1, r2, #4
    bd1c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    bd20:	4621      	mov	r1, r4
    bd22:	e7df      	b.n	bce4 <alloc_chunk+0x2c>

0000bd24 <merge_chunks>:
{
    bd24:	b538      	push	{r3, r4, r5, lr}
    bd26:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    bd28:	f7ff ff70 	bl	bc0c <chunk_size>
{
    bd2c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    bd2e:	4604      	mov	r4, r0
    bd30:	4611      	mov	r1, r2
    bd32:	4618      	mov	r0, r3
    bd34:	f7ff ff6a 	bl	bc0c <chunk_size>
		((uint16_t *)cmem)[f] = val;
    bd38:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    bd3c:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bd3e:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    bd40:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    bd42:	4618      	mov	r0, r3
    bd44:	f7ff ff62 	bl	bc0c <chunk_size>
	void *cmem = &buf[c];
    bd48:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    bd4a:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    bd4e:	bd38      	pop	{r3, r4, r5, pc}

0000bd50 <split_chunks>:
{
    bd50:	b538      	push	{r3, r4, r5, lr}
    bd52:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    bd54:	f7ff ff5a 	bl	bc0c <chunk_size>
{
    bd58:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    bd5a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    bd5c:	1a51      	subs	r1, r2, r1
    bd5e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    bd62:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bd64:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    bd66:	8060      	strh	r0, [r4, #2]
    bd68:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bd6c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    bd6e:	8044      	strh	r4, [r0, #2]
    bd70:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    bd74:	4618      	mov	r0, r3
    bd76:	4611      	mov	r1, r2
    bd78:	f7ff ff48 	bl	bc0c <chunk_size>
	void *cmem = &buf[c];
    bd7c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    bd7e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    bd82:	bd38      	pop	{r3, r4, r5, pc}

0000bd84 <free_chunk>:
{
    bd84:	b538      	push	{r3, r4, r5, lr}
    bd86:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    bd88:	f7ff ff40 	bl	bc0c <chunk_size>
    bd8c:	460c      	mov	r4, r1
    bd8e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    bd90:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    bd94:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    bd96:	07da      	lsls	r2, r3, #31
    bd98:	d40a      	bmi.n	bdb0 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    bd9a:	4628      	mov	r0, r5
    bd9c:	f7ff ff7f 	bl	bc9e <free_list_remove>
	return c + chunk_size(h, c);
    bda0:	4621      	mov	r1, r4
    bda2:	4628      	mov	r0, r5
    bda4:	f7ff ff32 	bl	bc0c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    bda8:	1822      	adds	r2, r4, r0
    bdaa:	4628      	mov	r0, r5
    bdac:	f7ff ffba 	bl	bd24 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    bdb0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    bdb4:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    bdb6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    bdba:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    bdbc:	07db      	lsls	r3, r3, #31
    bdbe:	d40c      	bmi.n	bdda <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    bdc0:	4628      	mov	r0, r5
    bdc2:	f7ff ff6c 	bl	bc9e <free_list_remove>
		return ((uint16_t *)cmem)[f];
    bdc6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    bdca:	4622      	mov	r2, r4
    bdcc:	1a61      	subs	r1, r4, r1
    bdce:	4628      	mov	r0, r5
    bdd0:	f7ff ffa8 	bl	bd24 <merge_chunks>
    bdd4:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    bdd8:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    bdda:	4621      	mov	r1, r4
    bddc:	4628      	mov	r0, r5
}
    bdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    bde2:	f7ff bf18 	b.w	bc16 <free_list_add>

0000bde6 <sys_heap_free>:
	if (mem == NULL) {
    bde6:	b161      	cbz	r1, be02 <sys_heap_free+0x1c>
    bde8:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bdea:	3904      	subs	r1, #4
    bdec:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    bdee:	f021 0307 	bic.w	r3, r1, #7
    bdf2:	4403      	add	r3, r0
	free_chunk(h, c);
    bdf4:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    bdf6:	885a      	ldrh	r2, [r3, #2]
    bdf8:	f022 0201 	bic.w	r2, r2, #1
    bdfc:	805a      	strh	r2, [r3, #2]
    bdfe:	f7ff bfc1 	b.w	bd84 <free_chunk>
}
    be02:	4770      	bx	lr

0000be04 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    be04:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    be06:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    be08:	b909      	cbnz	r1, be0e <sys_heap_alloc+0xa>
		return NULL;
    be0a:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    be0c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    be0e:	68ab      	ldr	r3, [r5, #8]
    be10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    be14:	d9f9      	bls.n	be0a <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    be16:	310b      	adds	r1, #11
    be18:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    be1a:	4621      	mov	r1, r4
    be1c:	4628      	mov	r0, r5
    be1e:	f7ff ff4b 	bl	bcb8 <alloc_chunk>
	if (c == 0U) {
    be22:	4606      	mov	r6, r0
    be24:	2800      	cmp	r0, #0
    be26:	d0f0      	beq.n	be0a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    be28:	4601      	mov	r1, r0
    be2a:	4628      	mov	r0, r5
    be2c:	f7ff feee 	bl	bc0c <chunk_size>
    be30:	42a0      	cmp	r0, r4
    be32:	d907      	bls.n	be44 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    be34:	1932      	adds	r2, r6, r4
    be36:	4628      	mov	r0, r5
    be38:	f7ff ff8a 	bl	bd50 <split_chunks>
		free_list_add(h, c + chunk_sz);
    be3c:	4611      	mov	r1, r2
    be3e:	4628      	mov	r0, r5
    be40:	f7ff fee9 	bl	bc16 <free_list_add>
	void *cmem = &buf[c];
    be44:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    be48:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    be4a:	8853      	ldrh	r3, [r2, #2]
    be4c:	f043 0301 	orr.w	r3, r3, #1
    be50:	8053      	strh	r3, [r2, #2]
    be52:	3004      	adds	r0, #4
	return mem;
    be54:	e7da      	b.n	be0c <sys_heap_alloc+0x8>

0000be56 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    be56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    be5a:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    be5c:	424a      	negs	r2, r1
    be5e:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    be62:	ea31 0202 	bics.w	r2, r1, r2
{
    be66:	4603      	mov	r3, r0
	if (align != rew) {
    be68:	d00a      	beq.n	be80 <sys_heap_aligned_alloc+0x2a>
		return false;
    be6a:	2f04      	cmp	r7, #4
    be6c:	463a      	mov	r2, r7
    be6e:	46b9      	mov	r9, r7
    be70:	bf28      	it	cs
    be72:	2204      	movcs	r2, #4
		align -= rew;
    be74:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    be76:	b974      	cbnz	r4, be96 <sys_heap_aligned_alloc+0x40>
		return NULL;
    be78:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    be7a:	4628      	mov	r0, r5
    be7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    be80:	2904      	cmp	r1, #4
    be82:	d804      	bhi.n	be8e <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    be84:	4621      	mov	r1, r4
}
    be86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    be8a:	f7ff bfbb 	b.w	be04 <sys_heap_alloc>
		rew = 0;
    be8e:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    be92:	2204      	movs	r2, #4
    be94:	e7ef      	b.n	be76 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    be96:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    be98:	68b3      	ldr	r3, [r6, #8]
    be9a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    be9e:	d9eb      	bls.n	be78 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bea0:	f104 010b 	add.w	r1, r4, #11
    bea4:	4439      	add	r1, r7
    bea6:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    bea8:	08c9      	lsrs	r1, r1, #3
    beaa:	4630      	mov	r0, r6
    beac:	f7ff ff04 	bl	bcb8 <alloc_chunk>
	if (c0 == 0) {
    beb0:	4680      	mov	r8, r0
    beb2:	2800      	cmp	r0, #0
    beb4:	d0e0      	beq.n	be78 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    beb6:	f109 0504 	add.w	r5, r9, #4
    beba:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    bebe:	1e7b      	subs	r3, r7, #1
    bec0:	4435      	add	r5, r6
    bec2:	441d      	add	r5, r3
    bec4:	427f      	negs	r7, r7
    bec6:	403d      	ands	r5, r7
    bec8:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    becc:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bece:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bed0:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bed2:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bed4:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    bed8:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    beda:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bede:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    bee2:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    bee6:	d208      	bcs.n	befa <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    bee8:	4601      	mov	r1, r0
    beea:	463a      	mov	r2, r7
    beec:	4630      	mov	r0, r6
    beee:	f7ff ff2f 	bl	bd50 <split_chunks>
		free_list_add(h, c0);
    bef2:	4641      	mov	r1, r8
    bef4:	4630      	mov	r0, r6
    bef6:	f7ff fe8e 	bl	bc16 <free_list_add>
	return c + chunk_size(h, c);
    befa:	4639      	mov	r1, r7
    befc:	4630      	mov	r0, r6
    befe:	f7ff fe85 	bl	bc0c <chunk_size>
    bf02:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    bf04:	4284      	cmp	r4, r0
    bf06:	d207      	bcs.n	bf18 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    bf08:	4630      	mov	r0, r6
    bf0a:	4622      	mov	r2, r4
    bf0c:	f7ff ff20 	bl	bd50 <split_chunks>
		free_list_add(h, c_end);
    bf10:	4621      	mov	r1, r4
    bf12:	4630      	mov	r0, r6
    bf14:	f7ff fe7f 	bl	bc16 <free_list_add>
	void *cmem = &buf[c];
    bf18:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bf1c:	8873      	ldrh	r3, [r6, #2]
    bf1e:	f043 0301 	orr.w	r3, r3, #1
    bf22:	8073      	strh	r3, [r6, #2]
    bf24:	e7a9      	b.n	be7a <sys_heap_aligned_alloc+0x24>

0000bf26 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    bf26:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    bf28:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    bf2a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    bf2c:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    bf30:	f021 0107 	bic.w	r1, r1, #7
{
    bf34:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    bf36:	1acd      	subs	r5, r1, r3
    bf38:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    bf3a:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    bf3c:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    bf40:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    bf44:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bf46:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    bf48:	2600      	movs	r6, #0
    bf4a:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    bf4c:	f1c0 0020 	rsb	r0, r0, #32
    bf50:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    bf54:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    bf56:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    bf58:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    bf5c:	4284      	cmp	r4, r0
    bf5e:	d118      	bne.n	bf92 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bf60:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bf62:	f040 0001 	orr.w	r0, r0, #1
    bf66:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    bf68:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    bf6c:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bf6e:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    bf70:	801e      	strh	r6, [r3, #0]
    bf72:	8067      	strh	r7, [r4, #2]
    bf74:	195c      	adds	r4, r3, r5
    bf76:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    bf7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    bf7e:	8066      	strh	r6, [r4, #2]
    bf80:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bf82:	8850      	ldrh	r0, [r2, #2]
    bf84:	f040 0001 	orr.w	r0, r0, #1
    bf88:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    bf8a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    bf8c:	4618      	mov	r0, r3
    bf8e:	f7ff be42 	b.w	bc16 <free_list_add>
		h->buckets[i].next = 0;
    bf92:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    bf96:	e7e1      	b.n	bf5c <sys_heap_init+0x36>

0000bf98 <encode_uint>:
{
    bf98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf9c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    bf9e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    bfa0:	2b6f      	cmp	r3, #111	; 0x6f
{
    bfa2:	4680      	mov	r8, r0
    bfa4:	460f      	mov	r7, r1
    bfa6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    bfa8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    bfac:	d029      	beq.n	c002 <encode_uint+0x6a>
    bfae:	d824      	bhi.n	bffa <encode_uint+0x62>
		return 16;
    bfb0:	2b58      	cmp	r3, #88	; 0x58
    bfb2:	bf14      	ite	ne
    bfb4:	260a      	movne	r6, #10
    bfb6:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    bfb8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    bfbc:	4632      	mov	r2, r6
    bfbe:	2300      	movs	r3, #0
    bfc0:	4640      	mov	r0, r8
    bfc2:	4639      	mov	r1, r7
    bfc4:	f7f4 f89c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bfc8:	2a09      	cmp	r2, #9
    bfca:	b2d4      	uxtb	r4, r2
    bfcc:	d81e      	bhi.n	c00c <encode_uint+0x74>
    bfce:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    bfd0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bfd2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    bfd4:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bfd8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    bfdc:	d301      	bcc.n	bfe2 <encode_uint+0x4a>
    bfde:	45d1      	cmp	r9, sl
    bfe0:	d811      	bhi.n	c006 <encode_uint+0x6e>
	if (conv->flag_hash) {
    bfe2:	782b      	ldrb	r3, [r5, #0]
    bfe4:	069b      	lsls	r3, r3, #26
    bfe6:	d505      	bpl.n	bff4 <encode_uint+0x5c>
		if (radix == 8) {
    bfe8:	2e08      	cmp	r6, #8
    bfea:	d115      	bne.n	c018 <encode_uint+0x80>
			conv->altform_0 = true;
    bfec:	78ab      	ldrb	r3, [r5, #2]
    bfee:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    bff2:	70ab      	strb	r3, [r5, #2]
}
    bff4:	4648      	mov	r0, r9
    bff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    bffa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    bffe:	2b70      	cmp	r3, #112	; 0x70
    c000:	e7d7      	b.n	bfb2 <encode_uint+0x1a>
	switch (specifier) {
    c002:	2608      	movs	r6, #8
    c004:	e7d8      	b.n	bfb8 <encode_uint+0x20>
		value /= radix;
    c006:	4680      	mov	r8, r0
    c008:	460f      	mov	r7, r1
    c00a:	e7d7      	b.n	bfbc <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c00c:	f1bb 0f19 	cmp.w	fp, #25
    c010:	bf94      	ite	ls
    c012:	3437      	addls	r4, #55	; 0x37
    c014:	3457      	addhi	r4, #87	; 0x57
    c016:	e7db      	b.n	bfd0 <encode_uint+0x38>
		} else if (radix == 16) {
    c018:	2e10      	cmp	r6, #16
    c01a:	d1eb      	bne.n	bff4 <encode_uint+0x5c>
			conv->altform_0c = true;
    c01c:	78ab      	ldrb	r3, [r5, #2]
    c01e:	f043 0310 	orr.w	r3, r3, #16
    c022:	e7e6      	b.n	bff2 <encode_uint+0x5a>

0000c024 <outs>:
{
    c024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c028:	4607      	mov	r7, r0
    c02a:	4688      	mov	r8, r1
    c02c:	4615      	mov	r5, r2
    c02e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c030:	4614      	mov	r4, r2
    c032:	42b4      	cmp	r4, r6
    c034:	eba4 0005 	sub.w	r0, r4, r5
    c038:	d302      	bcc.n	c040 <outs+0x1c>
    c03a:	b93e      	cbnz	r6, c04c <outs+0x28>
    c03c:	7823      	ldrb	r3, [r4, #0]
    c03e:	b12b      	cbz	r3, c04c <outs+0x28>
		int rc = out((int)*sp++, ctx);
    c040:	f814 0b01 	ldrb.w	r0, [r4], #1
    c044:	4641      	mov	r1, r8
    c046:	47b8      	blx	r7
		if (rc < 0) {
    c048:	2800      	cmp	r0, #0
    c04a:	daf2      	bge.n	c032 <outs+0xe>
}
    c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c050 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    c050:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    c054:	4770      	bx	lr

0000c056 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
    c056:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
    c058:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
    c05c:	42ac      	cmp	r4, r5
    c05e:	d207      	bcs.n	c070 <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
    c060:	6906      	ldr	r6, [r0, #16]
    c062:	f7ff fff5 	bl	c050 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    c066:	fbb0 f0f6 	udiv	r0, r0, r6
    c06a:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
    c06c:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    c070:	1b63      	subs	r3, r4, r5
    c072:	4258      	negs	r0, r3
    c074:	4158      	adcs	r0, r3
    c076:	bd70      	pop	{r4, r5, r6, pc}

0000c078 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
    c07c:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
    c07e:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
    c082:	454c      	cmp	r4, r9
{
    c084:	4605      	mov	r5, r0
    c086:	460e      	mov	r6, r1
    c088:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
    c08a:	d907      	bls.n	c09c <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    c08c:	6907      	ldr	r7, [r0, #16]
    c08e:	f7ff ffdf 	bl	c050 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    c092:	fbb0 f0f7 	udiv	r0, r0, r7
    c096:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    c098:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c09c:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    c09e:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c0a0:	692f      	ldr	r7, [r5, #16]
    c0a2:	b18b      	cbz	r3, c0c8 <ring_buf_put_claim+0x50>
    c0a4:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
    c0a6:	443c      	add	r4, r7
    c0a8:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    c0ac:	4540      	cmp	r0, r8
    c0ae:	bf28      	it	cs
    c0b0:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
    c0b2:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    c0b4:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
    c0b6:	42b8      	cmp	r0, r7
    c0b8:	bf28      	it	cs
    c0ba:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    c0bc:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    c0be:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    c0c0:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
    c0c2:	60a9      	str	r1, [r5, #8]

	return allocated;
}
    c0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c0c8:	fbb1 f3f7 	udiv	r3, r1, r7
    c0cc:	fb07 1313 	mls	r3, r7, r3, r1
    c0d0:	e7e9      	b.n	c0a6 <ring_buf_put_claim+0x2e>

0000c0d2 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    c0d2:	b570      	push	{r4, r5, r6, lr}
    c0d4:	4605      	mov	r5, r0
    c0d6:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    c0d8:	f7ff ffba 	bl	c050 <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    c0dc:	686e      	ldr	r6, [r5, #4]
    c0de:	692a      	ldr	r2, [r5, #16]
    c0e0:	682b      	ldr	r3, [r5, #0]
    c0e2:	1931      	adds	r1, r6, r4
    c0e4:	4413      	add	r3, r2
    c0e6:	4299      	cmp	r1, r3
    c0e8:	d80c      	bhi.n	c104 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    c0ea:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
    c0ec:	bf83      	ittte	hi
    c0ee:	fbb0 f3f2 	udivhi	r3, r0, r2
    c0f2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    c0f6:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    c0f8:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
    c0fa:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    c0fc:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
    c100:	2000      	movs	r0, #0
}
    c102:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c104:	f06f 0015 	mvn.w	r0, #21
    c108:	e7fb      	b.n	c102 <ring_buf_put_finish+0x30>

0000c10a <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    c10a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c10e:	4680      	mov	r8, r0
    c110:	460e      	mov	r6, r1
    c112:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c114:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c116:	462a      	mov	r2, r5
    c118:	a901      	add	r1, sp, #4
    c11a:	4640      	mov	r0, r8
    c11c:	f7ff ffac 	bl	c078 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    c120:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c122:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    c124:	4602      	mov	r2, r0
    c126:	9801      	ldr	r0, [sp, #4]
    c128:	f001 ffd4 	bl	e0d4 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    c12c:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    c12e:	4427      	add	r7, r4
		data += partial_size;
    c130:	4426      	add	r6, r4
	} while (size && partial_size);
    c132:	d001      	beq.n	c138 <ring_buf_put+0x2e>
    c134:	2c00      	cmp	r4, #0
    c136:	d1ee      	bne.n	c116 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    c138:	4639      	mov	r1, r7
    c13a:	4640      	mov	r0, r8
    c13c:	f7ff ffc9 	bl	c0d2 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c140:	4638      	mov	r0, r7
    c142:	b002      	add	sp, #8
    c144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c148 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c14c:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    c14e:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    c150:	42b3      	cmp	r3, r6
{
    c152:	4604      	mov	r4, r0
    c154:	460f      	mov	r7, r1
    c156:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    c158:	d907      	bls.n	c16a <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    c15a:	6905      	ldr	r5, [r0, #16]
    c15c:	f7ff ff78 	bl	c050 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    c160:	fbb0 f1f5 	udiv	r1, r0, r5
    c164:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
    c166:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c16a:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    c16c:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c16e:	6923      	ldr	r3, [r4, #16]
    c170:	b185      	cbz	r5, c194 <ring_buf_get_claim+0x4c>
    c172:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    c174:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    c176:	4540      	cmp	r0, r8
    c178:	bf28      	it	cs
    c17a:	4640      	movcs	r0, r8
    c17c:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
    c17e:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    c180:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
    c182:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    c184:	bf28      	it	cs
    c186:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
    c188:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
    c18a:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    c18c:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    c18e:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c194:	fbb1 f5f3 	udiv	r5, r1, r3
    c198:	fb03 1515 	mls	r5, r3, r5, r1
    c19c:	e7ea      	b.n	c174 <ring_buf_get_claim+0x2c>

0000c19e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    c19e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    c1a0:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c1a2:	68c3      	ldr	r3, [r0, #12]
    c1a4:	42b3      	cmp	r3, r6
{
    c1a6:	4605      	mov	r5, r0
    c1a8:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    c1aa:	d914      	bls.n	c1d6 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    c1ac:	6907      	ldr	r7, [r0, #16]
    c1ae:	f7ff ff4f 	bl	c050 <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    c1b2:	fbb0 f1f7 	udiv	r1, r0, r7
    c1b6:	3901      	subs	r1, #1
    c1b8:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
    c1bc:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    c1be:	6829      	ldr	r1, [r5, #0]
    c1c0:	4421      	add	r1, r4
    c1c2:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    c1c4:	bf9f      	itttt	ls
    c1c6:	1ac9      	subls	r1, r1, r3
    c1c8:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    c1ca:	60e9      	strls	r1, [r5, #12]

	return 0;
    c1cc:	2000      	movls	r0, #0
		return -EINVAL;
    c1ce:	bf88      	it	hi
    c1d0:	f06f 0015 	mvnhi.w	r0, #21
}
    c1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    c1d6:	2300      	movs	r3, #0
    c1d8:	e7f1      	b.n	c1be <ring_buf_get_finish+0x20>

0000c1da <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    c1da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c1de:	4680      	mov	r8, r0
    c1e0:	460d      	mov	r5, r1
    c1e2:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c1e4:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    c1e6:	4632      	mov	r2, r6
    c1e8:	a901      	add	r1, sp, #4
    c1ea:	4640      	mov	r0, r8
    c1ec:	f7ff ffac 	bl	c148 <ring_buf_get_claim>
    c1f0:	4604      	mov	r4, r0
		if (data) {
    c1f2:	b12d      	cbz	r5, c200 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    c1f4:	4602      	mov	r2, r0
    c1f6:	9901      	ldr	r1, [sp, #4]
    c1f8:	4628      	mov	r0, r5
    c1fa:	f001 ff6b 	bl	e0d4 <memcpy>
			data += partial_size;
    c1fe:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    c200:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    c202:	4427      	add	r7, r4
	} while (size && partial_size);
    c204:	d001      	beq.n	c20a <ring_buf_get+0x30>
    c206:	2c00      	cmp	r4, #0
    c208:	d1ed      	bne.n	c1e6 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    c20a:	4639      	mov	r1, r7
    c20c:	4640      	mov	r0, r8
    c20e:	f7ff ffc6 	bl	c19e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c212:	4638      	mov	r0, r7
    c214:	b002      	add	sp, #8
    c216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c21a <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    c21a:	4602      	mov	r2, r0
    c21c:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    c21e:	68c0      	ldr	r0, [r0, #12]
    c220:	6814      	ldr	r4, [r2, #0]
    c222:	42a0      	cmp	r0, r4
    c224:	d904      	bls.n	c230 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    c226:	3801      	subs	r0, #1
    c228:	1b00      	subs	r0, r0, r4
    c22a:	6008      	str	r0, [r1, #0]

		return false;
    c22c:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    c22e:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    c230:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    c232:	b918      	cbnz	r0, c23c <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    c234:	3b01      	subs	r3, #1
    c236:	1b1b      	subs	r3, r3, r4
    c238:	600b      	str	r3, [r1, #0]
		return false;
    c23a:	e7f8      	b.n	c22e <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    c23c:	1b1b      	subs	r3, r3, r4
    c23e:	600b      	str	r3, [r1, #0]
	return true;
    c240:	2001      	movs	r0, #1
    c242:	e7f4      	b.n	c22e <free_space+0x14>

0000c244 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    c244:	b510      	push	{r4, lr}
    c246:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    c248:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    c24a:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    c24c:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    c24e:	07d2      	lsls	r2, r2, #31
    c250:	d502      	bpl.n	c258 <idx_inc+0x14>
		return i & (buffer->size - 1);
    c252:	3b01      	subs	r3, #1
    c254:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    c256:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    c258:	4298      	cmp	r0, r3
    c25a:	bf28      	it	cs
    c25c:	1ac0      	subcs	r0, r0, r3
    c25e:	e7fa      	b.n	c256 <idx_inc+0x12>

0000c260 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    c260:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    c262:	69c2      	ldr	r2, [r0, #28]
{
    c264:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    c266:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    c268:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    c26a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    c26e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c272:	462a      	mov	r2, r5
    c274:	6801      	ldr	r1, [r0, #0]
{
    c276:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c278:	f7ff ffe4 	bl	c244 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c27c:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c27e:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c280:	462a      	mov	r2, r5
    c282:	4620      	mov	r0, r4
    c284:	f7ff ffde 	bl	c244 <idx_inc>
    c288:	6060      	str	r0, [r4, #4]
}
    c28a:	bd38      	pop	{r3, r4, r5, pc}

0000c28c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    c28c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    c290:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    c294:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    c298:	461f      	mov	r7, r3
	*user_packet = false;
    c29a:	2300      	movs	r3, #0
    c29c:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    c29e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    c2a2:	f003 0303 	and.w	r3, r3, #3
    c2a6:	2b02      	cmp	r3, #2
{
    c2a8:	4604      	mov	r4, r0
    c2aa:	468b      	mov	fp, r1
    c2ac:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    c2ae:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    c2b2:	d103      	bne.n	c2bc <drop_item_locked+0x30>
		return item->skip.len;
    c2b4:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    c2b8:	08ad      	lsrs	r5, r5, #2
    c2ba:	d12e      	bne.n	c31a <drop_item_locked+0x8e>
    c2bc:	69a3      	ldr	r3, [r4, #24]
    c2be:	4630      	mov	r0, r6
    c2c0:	4798      	blx	r3
    c2c2:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    c2c4:	f1b8 0f00 	cmp.w	r8, #0
    c2c8:	d036      	beq.n	c338 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    c2ca:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    c2ce:	079b      	lsls	r3, r3, #30
    c2d0:	d52f      	bpl.n	c332 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    c2d2:	f10b 0101 	add.w	r1, fp, #1
    c2d6:	4620      	mov	r0, r4
    c2d8:	f7ff ffc2 	bl	c260 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    c2dc:	6861      	ldr	r1, [r4, #4]
    c2de:	462a      	mov	r2, r5
    c2e0:	4620      	mov	r0, r4
    c2e2:	f7ff ffaf 	bl	c244 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    c2e6:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    c2e8:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    c2ea:	462a      	mov	r2, r5
    c2ec:	4620      	mov	r0, r4
    c2ee:	f7ff ffa9 	bl	c244 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    c2f2:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    c2f4:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    c2f6:	68e1      	ldr	r1, [r4, #12]
    c2f8:	4620      	mov	r0, r4
    c2fa:	f7ff ffa3 	bl	c244 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    c2fe:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    c300:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    c304:	f002 0203 	and.w	r2, r2, #3
    c308:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    c30a:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    c30e:	d10c      	bne.n	c32a <drop_item_locked+0x9e>
		return item->skip.len;
    c310:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    c314:	089b      	lsrs	r3, r3, #2
    c316:	d008      	beq.n	c32a <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    c318:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    c31a:	68e1      	ldr	r1, [r4, #12]
    c31c:	462a      	mov	r2, r5
    c31e:	4620      	mov	r0, r4
    c320:	f7ff ff90 	bl	c244 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    c324:	e9c4 0002 	strd	r0, r0, [r4, #8]
    c328:	e007      	b.n	c33a <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    c32a:	69a3      	ldr	r3, [r4, #24]
    c32c:	4630      	mov	r0, r6
    c32e:	4798      	blx	r3
    c330:	4405      	add	r5, r0
			*user_packet = true;
    c332:	2301      	movs	r3, #1
    c334:	703b      	strb	r3, [r7, #0]
    c336:	e7f0      	b.n	c31a <drop_item_locked+0x8e>
		item = NULL;
    c338:	4646      	mov	r6, r8
	}

	return item;
}
    c33a:	4630      	mov	r0, r6
    c33c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c340 <mpsc_pbuf_init>:
{
    c340:	b538      	push	{r3, r4, r5, lr}
    c342:	460d      	mov	r5, r1
    c344:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    c346:	221c      	movs	r2, #28
    c348:	2100      	movs	r1, #0
    c34a:	f001 fece 	bl	e0ea <memset>
	buffer->get_wlen = cfg->get_wlen;
    c34e:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
    c350:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
    c352:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    c354:	68ab      	ldr	r3, [r5, #8]
    c356:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    c358:	682b      	ldr	r3, [r5, #0]
    c35a:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    c35c:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    c35e:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    c360:	b122      	cbz	r2, c36c <mpsc_pbuf_init+0x2c>
    c362:	1e51      	subs	r1, r2, #1
    c364:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    c366:	bf08      	it	eq
    c368:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    c36c:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    c36e:	2201      	movs	r2, #1
    c370:	f104 0024 	add.w	r0, r4, #36	; 0x24
    c374:	2100      	movs	r1, #0
}
    c376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c37a:	f002 bc89 	b.w	ec90 <z_impl_k_sem_init>

0000c37e <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    c37e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c382:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    c384:	6a03      	ldr	r3, [r0, #32]
    c386:	3b01      	subs	r3, #1
    c388:	428b      	cmp	r3, r1
{
    c38a:	b085      	sub	sp, #20
    c38c:	4604      	mov	r4, r0
    c38e:	460f      	mov	r7, r1
    c390:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    c392:	d364      	bcc.n	c45e <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    c394:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    c396:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    c398:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
    c39c:	f04f 0320 	mov.w	r3, #32
    c3a0:	f3ef 8611 	mrs	r6, BASEPRI
    c3a4:	f383 8812 	msr	BASEPRI_MAX, r3
    c3a8:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    c3ac:	a903      	add	r1, sp, #12
    c3ae:	4620      	mov	r0, r4
    c3b0:	f7ff ff33 	bl	c21a <free_space>
		if (free_wlen >= wlen) {
    c3b4:	9903      	ldr	r1, [sp, #12]
    c3b6:	42b9      	cmp	r1, r7
    c3b8:	d321      	bcc.n	c3fe <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    c3ba:	6821      	ldr	r1, [r4, #0]
			item =
    c3bc:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    c3be:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    c3c2:	f022 0203 	bic.w	r2, r2, #3
    c3c6:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    c3ca:	4620      	mov	r0, r4
    c3cc:	463a      	mov	r2, r7
			item =
    c3ce:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    c3d2:	f7ff ff37 	bl	c244 <idx_inc>
		cont = false;
    c3d6:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    c3d8:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    c3da:	f386 8811 	msr	BASEPRI, r6
    c3de:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    c3e2:	2b00      	cmp	r3, #0
    c3e4:	d03d      	beq.n	c462 <mpsc_pbuf_alloc+0xe4>
    c3e6:	2d00      	cmp	r5, #0
    c3e8:	d0d8      	beq.n	c39c <mpsc_pbuf_alloc+0x1e>
    c3ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c3ee:	2b00      	cmp	r3, #0
    c3f0:	d0d4      	beq.n	c39c <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    c3f2:	4629      	mov	r1, r5
    c3f4:	6963      	ldr	r3, [r4, #20]
    c3f6:	4620      	mov	r0, r4
    c3f8:	4798      	blx	r3
			dropped_item = NULL;
    c3fa:	2500      	movs	r5, #0
    c3fc:	e7ce      	b.n	c39c <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    c3fe:	b128      	cbz	r0, c40c <mpsc_pbuf_alloc+0x8e>
    c400:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    c402:	4620      	mov	r0, r4
    c404:	f7ff ff2c 	bl	c260 <add_skip_item>
			cont = true;
    c408:	9b01      	ldr	r3, [sp, #4]
    c40a:	e7e6      	b.n	c3da <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    c40c:	ea58 0309 	orrs.w	r3, r8, r9
    c410:	d017      	beq.n	c442 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    c412:	f002 fb90 	bl	eb36 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    c416:	b9a0      	cbnz	r0, c442 <mpsc_pbuf_alloc+0xc4>
    c418:	f386 8811 	msr	BASEPRI, r6
    c41c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    c420:	4642      	mov	r2, r8
    c422:	464b      	mov	r3, r9
    c424:	4658      	mov	r0, fp
    c426:	f7fe fadd 	bl	a9e4 <z_impl_k_sem_take>
	__asm__ volatile(
    c42a:	f04f 0320 	mov.w	r3, #32
    c42e:	f3ef 8611 	mrs	r6, BASEPRI
    c432:	f383 8812 	msr	BASEPRI_MAX, r3
    c436:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    c43a:	fab0 f380 	clz	r3, r0
    c43e:	095b      	lsrs	r3, r3, #5
    c440:	e7cb      	b.n	c3da <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    c442:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    c444:	9903      	ldr	r1, [sp, #12]
    c446:	f10d 030b 	add.w	r3, sp, #11
    c44a:	f3c2 0240 	ubfx	r2, r2, #1, #1
    c44e:	4620      	mov	r0, r4
    c450:	f7ff ff1c 	bl	c28c <drop_item_locked>
			cont = dropped_item != NULL;
    c454:	1e03      	subs	r3, r0, #0
    c456:	4605      	mov	r5, r0
    c458:	bf18      	it	ne
    c45a:	2301      	movne	r3, #1
    c45c:	e7bd      	b.n	c3da <mpsc_pbuf_alloc+0x5c>
		return NULL;
    c45e:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    c462:	4650      	mov	r0, sl
    c464:	b005      	add	sp, #20
    c466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c46a <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    c46a:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    c46c:	6983      	ldr	r3, [r0, #24]
{
    c46e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    c470:	4608      	mov	r0, r1
{
    c472:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    c474:	4798      	blx	r3
    c476:	4602      	mov	r2, r0
    c478:	f04f 0320 	mov.w	r3, #32
    c47c:	f3ef 8611 	mrs	r6, BASEPRI
    c480:	f383 8812 	msr	BASEPRI_MAX, r3
    c484:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    c488:	782b      	ldrb	r3, [r5, #0]
    c48a:	f043 0301 	orr.w	r3, r3, #1
    c48e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c490:	6861      	ldr	r1, [r4, #4]
    c492:	4620      	mov	r0, r4
    c494:	f7ff fed6 	bl	c244 <idx_inc>
    c498:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
    c49a:	f386 8811 	msr	BASEPRI, r6
    c49e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    c4a2:	bd70      	pop	{r4, r5, r6, pc}

0000c4a4 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    c4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4a8:	4604      	mov	r4, r0
	__asm__ volatile(
    c4aa:	f04f 0320 	mov.w	r3, #32
    c4ae:	f3ef 8611 	mrs	r6, BASEPRI
    c4b2:	f383 8812 	msr	BASEPRI_MAX, r3
    c4b6:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    c4ba:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    c4be:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    c4c0:	bf88      	it	hi
    c4c2:	6a23      	ldrhi	r3, [r4, #32]
    c4c4:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    c4c6:	b1f3      	cbz	r3, c506 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    c4c8:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    c4ca:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    c4ce:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    c4d2:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    c4d6:	d016      	beq.n	c506 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    c4d8:	2b02      	cmp	r3, #2
    c4da:	d103      	bne.n	c4e4 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    c4dc:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    c4e0:	08ad      	lsrs	r5, r5, #2
    c4e2:	d115      	bne.n	c510 <mpsc_pbuf_claim+0x6c>
    c4e4:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    c4e6:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    c4e8:	d50f      	bpl.n	c50a <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    c4ea:	f042 0202 	orr.w	r2, r2, #2
    c4ee:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    c4f2:	4640      	mov	r0, r8
    c4f4:	4798      	blx	r3
    c4f6:	4639      	mov	r1, r7
    c4f8:	4602      	mov	r2, r0
    c4fa:	4620      	mov	r0, r4
    c4fc:	f7ff fea2 	bl	c244 <idx_inc>
		cont = false;
    c500:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    c502:	60a0      	str	r0, [r4, #8]
    c504:	e011      	b.n	c52a <mpsc_pbuf_claim+0x86>
			item = NULL;
    c506:	4698      	mov	r8, r3
    c508:	e00f      	b.n	c52a <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    c50a:	4640      	mov	r0, r8
    c50c:	4798      	blx	r3
    c50e:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    c510:	68a1      	ldr	r1, [r4, #8]
    c512:	462a      	mov	r2, r5
    c514:	4620      	mov	r0, r4
    c516:	f7ff fe95 	bl	c244 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    c51a:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    c51c:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    c51e:	462a      	mov	r2, r5
    c520:	4620      	mov	r0, r4
    c522:	f7ff fe8f 	bl	c244 <idx_inc>
				cont = true;
    c526:	2301      	movs	r3, #1
				buffer->rd_idx =
    c528:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    c52a:	f386 8811 	msr	BASEPRI, r6
    c52e:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    c532:	2b00      	cmp	r3, #0
    c534:	d1b9      	bne.n	c4aa <mpsc_pbuf_claim+0x6>

	return item;
}
    c536:	4640      	mov	r0, r8
    c538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c53c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    c53c:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    c53e:	6983      	ldr	r3, [r0, #24]
{
    c540:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    c542:	4608      	mov	r0, r1
{
    c544:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    c546:	4798      	blx	r3
    c548:	4602      	mov	r2, r0
	__asm__ volatile(
    c54a:	f04f 0320 	mov.w	r3, #32
    c54e:	f3ef 8611 	mrs	r6, BASEPRI
    c552:	f383 8812 	msr	BASEPRI_MAX, r3
    c556:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    c55a:	782b      	ldrb	r3, [r5, #0]
    c55c:	f36f 0300 	bfc	r3, #0, #1
    c560:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    c562:	6923      	ldr	r3, [r4, #16]
    c564:	079b      	lsls	r3, r3, #30
    c566:	d505      	bpl.n	c574 <CONFIG_USB_DEVICE_VID+0x21>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    c568:	68e1      	ldr	r1, [r4, #12]
    c56a:	69e3      	ldr	r3, [r4, #28]
    c56c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    c570:	429d      	cmp	r5, r3
    c572:	d112      	bne.n	c59a <CONFIG_USB_DEVICE_VID+0x47>
		witem->hdr.busy = 0;
    c574:	782b      	ldrb	r3, [r5, #0]
    c576:	f36f 0341 	bfc	r3, #1, #1
    c57a:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    c57c:	68e1      	ldr	r1, [r4, #12]
    c57e:	4620      	mov	r0, r4
    c580:	f7ff fe60 	bl	c244 <idx_inc>
    c584:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    c586:	f386 8811 	msr	BASEPRI, r6
    c58a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    c58e:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    c592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c596:	f7fe b9ff 	b.w	a998 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    c59a:	682b      	ldr	r3, [r5, #0]
    c59c:	f360 039f 	bfi	r3, r0, #2, #30
    c5a0:	602b      	str	r3, [r5, #0]
    c5a2:	e7f0      	b.n	c586 <CONFIG_USB_DEVICE_VID+0x33>

0000c5a4 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    c5a4:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    c5a8:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    c5aa:	bf8a      	itet	hi
    c5ac:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    c5ae:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    c5b0:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    c5b2:	1e18      	subs	r0, r3, #0
    c5b4:	bf18      	it	ne
    c5b6:	2001      	movne	r0, #1
    c5b8:	4770      	bx	lr

0000c5ba <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    c5ba:	070b      	lsls	r3, r1, #28
    c5bc:	d504      	bpl.n	c5c8 <foldcase+0xe>
    c5be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    c5c2:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
    c5c4:	bf98      	it	ls
    c5c6:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
    c5c8:	4770      	bx	lr

0000c5ca <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    c5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5ce:	b087      	sub	sp, #28
    c5d0:	468a      	mov	sl, r1
    c5d2:	4614      	mov	r4, r2
    c5d4:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    c5d6:	4605      	mov	r5, r0
    c5d8:	b918      	cbnz	r0, c5e2 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    c5da:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    c5dc:	b007      	add	sp, #28
    c5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    c5e2:	2900      	cmp	r1, #0
    c5e4:	d0f9      	beq.n	c5da <fnmatchx+0x10>
    if (recursion-- == 0)
    c5e6:	9b02      	ldr	r3, [sp, #8]
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	f000 8113 	beq.w	c814 <fnmatchx+0x24a>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    c5ee:	f004 0304 	and.w	r3, r4, #4
    c5f2:	460a      	mov	r2, r1
    c5f4:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
    c5f6:	46a9      	mov	r9, r5
    c5f8:	4621      	mov	r1, r4
    c5fa:	f819 0b01 	ldrb.w	r0, [r9], #1
    c5fe:	f7ff ffdc 	bl	c5ba <foldcase>
    c602:	4603      	mov	r3, r0
    c604:	b2c0      	uxtb	r0, r0
    c606:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    c608:	7817      	ldrb	r7, [r2, #0]
    c60a:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
    c60c:	d025      	beq.n	c65a <fnmatchx+0x90>
    c60e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    c612:	d10b      	bne.n	c62c <fnmatchx+0x62>
    c614:	b1c8      	cbz	r0, c64a <fnmatchx+0x80>
    c616:	282a      	cmp	r0, #42	; 0x2a
    c618:	d036      	beq.n	c688 <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
    c61a:	4621      	mov	r1, r4
    c61c:	4638      	mov	r0, r7
    c61e:	f7ff ffcc 	bl	c5ba <foldcase>
    c622:	4286      	cmp	r6, r0
    c624:	f102 0201 	add.w	r2, r2, #1
    c628:	d01e      	beq.n	c668 <fnmatchx+0x9e>
    c62a:	e7d6      	b.n	c5da <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    c62c:	285b      	cmp	r0, #91	; 0x5b
    c62e:	d07b      	beq.n	c728 <fnmatchx+0x15e>
    c630:	285c      	cmp	r0, #92	; 0x5c
    c632:	d1f2      	bne.n	c61a <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
    c634:	07e0      	lsls	r0, r4, #31
    c636:	d4f0      	bmi.n	c61a <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    c638:	7868      	ldrb	r0, [r5, #1]
    c63a:	f7ff ffbe 	bl	c5ba <foldcase>
    c63e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c642:	bf18      	it	ne
    c644:	f105 0902 	addne.w	r9, r5, #2
    c648:	e7e7      	b.n	c61a <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    c64a:	06e3      	lsls	r3, r4, #27
    c64c:	d501      	bpl.n	c652 <fnmatchx+0x88>
    c64e:	2f2f      	cmp	r7, #47	; 0x2f
    c650:	d0c4      	beq.n	c5dc <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    c652:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
    c654:	bf18      	it	ne
    c656:	2001      	movne	r0, #1
    c658:	e7c0      	b.n	c5dc <fnmatchx+0x12>
            if (*string == EOS)
    c65a:	2f00      	cmp	r7, #0
    c65c:	d0bd      	beq.n	c5da <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    c65e:	2f2f      	cmp	r7, #47	; 0x2f
    c660:	d104      	bne.n	c66c <fnmatchx+0xa2>
    c662:	07a6      	lsls	r6, r4, #30
    c664:	d4b9      	bmi.n	c5da <fnmatchx+0x10>
            ++string;
    c666:	3201      	adds	r2, #1
            break;
    c668:	464d      	mov	r5, r9
    c66a:	e7c4      	b.n	c5f6 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    c66c:	2f2e      	cmp	r7, #46	; 0x2e
    c66e:	d1fa      	bne.n	c666 <fnmatchx+0x9c>
    c670:	9b04      	ldr	r3, [sp, #16]
    c672:	2b00      	cmp	r3, #0
    c674:	d0f7      	beq.n	c666 <fnmatchx+0x9c>
    c676:	4552      	cmp	r2, sl
    c678:	d0af      	beq.n	c5da <fnmatchx+0x10>
                (string == stringstart ||
    c67a:	07a5      	lsls	r5, r4, #30
    c67c:	d5f3      	bpl.n	c666 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    c67e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c682:	2b2f      	cmp	r3, #47	; 0x2f
    c684:	d1ef      	bne.n	c666 <fnmatchx+0x9c>
    c686:	e7a8      	b.n	c5da <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    c688:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    c68a:	f7ff ff96 	bl	c5ba <foldcase>
    c68e:	b2c1      	uxtb	r1, r0
            while (c == '*')
    c690:	292a      	cmp	r1, #42	; 0x2a
    c692:	d018      	beq.n	c6c6 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    c694:	2f2e      	cmp	r7, #46	; 0x2e
    c696:	d109      	bne.n	c6ac <fnmatchx+0xe2>
    c698:	9b04      	ldr	r3, [sp, #16]
    c69a:	b13b      	cbz	r3, c6ac <fnmatchx+0xe2>
    c69c:	4552      	cmp	r2, sl
    c69e:	d09c      	beq.n	c5da <fnmatchx+0x10>
                (string == stringstart ||
    c6a0:	07a0      	lsls	r0, r4, #30
    c6a2:	d503      	bpl.n	c6ac <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    c6a4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    c6a8:	2b2f      	cmp	r3, #47	; 0x2f
    c6aa:	d096      	beq.n	c5da <fnmatchx+0x10>
            if (c == EOS) {
    c6ac:	b979      	cbnz	r1, c6ce <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
    c6ae:	f014 0002 	ands.w	r0, r4, #2
    c6b2:	d093      	beq.n	c5dc <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    c6b4:	06e3      	lsls	r3, r4, #27
    c6b6:	f100 80af 	bmi.w	c818 <fnmatchx+0x24e>
                        strchr(string, '/') == NULL ?
    c6ba:	212f      	movs	r1, #47	; 0x2f
    c6bc:	4610      	mov	r0, r2
    c6be:	f001 fca5 	bl	e00c <strchr>
                        0 : FNM_NOMATCH;
    c6c2:	3800      	subs	r0, #0
    c6c4:	e7c6      	b.n	c654 <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
    c6c6:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    c6ca:	4621      	mov	r1, r4
    c6cc:	e7dd      	b.n	c68a <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    c6ce:	292f      	cmp	r1, #47	; 0x2f
    c6d0:	d021      	beq.n	c716 <fnmatchx+0x14c>
    if (recursion-- == 0)
    c6d2:	9b02      	ldr	r3, [sp, #8]
    c6d4:	4616      	mov	r6, r2
    c6d6:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
    c6d8:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
    c6dc:	f004 0a02 	and.w	sl, r4, #2
    c6e0:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    c6e2:	4621      	mov	r1, r4
    c6e4:	f89b 0000 	ldrb.w	r0, [fp]
    c6e8:	f7ff ff67 	bl	c5ba <foldcase>
    c6ec:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    c6f0:	f106 0601 	add.w	r6, r6, #1
    c6f4:	f43f af71 	beq.w	c5da <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    c6f8:	463b      	mov	r3, r7
    c6fa:	4642      	mov	r2, r8
    c6fc:	4659      	mov	r1, fp
    c6fe:	4648      	mov	r0, r9
    c700:	f7ff ff63 	bl	c5ca <fnmatchx>
    c704:	2801      	cmp	r0, #1
    c706:	f47f af69 	bne.w	c5dc <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    c70a:	2d2f      	cmp	r5, #47	; 0x2f
    c70c:	d1e8      	bne.n	c6e0 <fnmatchx+0x116>
    c70e:	f1ba 0f00 	cmp.w	sl, #0
    c712:	d0e5      	beq.n	c6e0 <fnmatchx+0x116>
    c714:	e761      	b.n	c5da <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    c716:	07a7      	lsls	r7, r4, #30
    c718:	d5db      	bpl.n	c6d2 <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
    c71a:	4610      	mov	r0, r2
    c71c:	f001 fc76 	bl	e00c <strchr>
    c720:	4602      	mov	r2, r0
    c722:	2800      	cmp	r0, #0
    c724:	d1a0      	bne.n	c668 <fnmatchx+0x9e>
    c726:	e758      	b.n	c5da <fnmatchx+0x10>
            if (*string == EOS)
    c728:	2f00      	cmp	r7, #0
    c72a:	f43f af56 	beq.w	c5da <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    c72e:	2f2f      	cmp	r7, #47	; 0x2f
    c730:	d102      	bne.n	c738 <fnmatchx+0x16e>
    c732:	07a6      	lsls	r6, r4, #30
    c734:	f53f af51 	bmi.w	c5da <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    c738:	4621      	mov	r1, r4
    c73a:	4638      	mov	r0, r7
    c73c:	f7ff ff3d 	bl	c5ba <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    c740:	786b      	ldrb	r3, [r5, #1]
            if ((r = rangematch(pattern,
    c742:	9000      	str	r0, [sp, #0]
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    c744:	2b21      	cmp	r3, #33	; 0x21
    c746:	d001      	beq.n	c74c <fnmatchx+0x182>
    c748:	2b5e      	cmp	r3, #94	; 0x5e
    c74a:	d123      	bne.n	c794 <fnmatchx+0x1ca>
        ++pattern;
    c74c:	3502      	adds	r5, #2
    c74e:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    c750:	9301      	str	r3, [sp, #4]
    need = 1;
    c752:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    c754:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    c758:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    c75c:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    c75e:	462e      	mov	r6, r5
    c760:	4621      	mov	r1, r4
    c762:	f816 0b01 	ldrb.w	r0, [r6], #1
    c766:	9305      	str	r3, [sp, #20]
    c768:	f7ff ff27 	bl	c5ba <foldcase>
    c76c:	fa5f f880 	uxtb.w	r8, r0
    c770:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    c774:	9b05      	ldr	r3, [sp, #20]
    c776:	d110      	bne.n	c79a <fnmatchx+0x1d0>
    c778:	bb0b      	cbnz	r3, c7be <fnmatchx+0x1f4>
    return ok == negate ? NULL : pattern;
    c77a:	9b01      	ldr	r3, [sp, #4]
    c77c:	455b      	cmp	r3, fp
    c77e:	f43f af2c 	beq.w	c5da <fnmatchx+0x10>
            if (r == (void *)-1) {
    c782:	1c73      	adds	r3, r6, #1
    c784:	d103      	bne.n	c78e <fnmatchx+0x1c4>
                if (*string != '[')
    c786:	2f5b      	cmp	r7, #91	; 0x5b
    c788:	f47f af27 	bne.w	c5da <fnmatchx+0x10>
    c78c:	464e      	mov	r6, r9
            ++string;
    c78e:	3201      	adds	r2, #1
            break;
    c790:	46b1      	mov	r9, r6
    c792:	e769      	b.n	c668 <fnmatchx+0x9e>
    c794:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    c796:	2300      	movs	r3, #0
    c798:	e7da      	b.n	c750 <fnmatchx+0x186>
        if (c == '/')
    c79a:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
    c79e:	d0f2      	beq.n	c786 <fnmatchx+0x1bc>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    c7a0:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
    c7a4:	d107      	bne.n	c7b6 <fnmatchx+0x1ec>
    c7a6:	9b03      	ldr	r3, [sp, #12]
    c7a8:	b94b      	cbnz	r3, c7be <fnmatchx+0x1f4>
            c = FOLDCASE(*pattern++, flags);
    c7aa:	7868      	ldrb	r0, [r5, #1]
    c7ac:	f7ff ff05 	bl	c5ba <foldcase>
    c7b0:	1cae      	adds	r6, r5, #2
    c7b2:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
    c7b6:	f1b8 0f00 	cmp.w	r8, #0
    c7ba:	f43f af0e 	beq.w	c5da <fnmatchx+0x10>
        if (*pattern == '-' 
    c7be:	7833      	ldrb	r3, [r6, #0]
    c7c0:	2b2d      	cmp	r3, #45	; 0x2d
    c7c2:	d120      	bne.n	c806 <fnmatchx+0x23c>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    c7c4:	7870      	ldrb	r0, [r6, #1]
    c7c6:	4621      	mov	r1, r4
    c7c8:	f7ff fef7 	bl	c5ba <foldcase>
    c7cc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    c7d0:	d019      	beq.n	c806 <fnmatchx+0x23c>
    c7d2:	285d      	cmp	r0, #93	; 0x5d
    c7d4:	d017      	beq.n	c806 <fnmatchx+0x23c>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    c7d6:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    c7d8:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    c7dc:	d10a      	bne.n	c7f4 <fnmatchx+0x22a>
    c7de:	9b03      	ldr	r3, [sp, #12]
    c7e0:	b943      	cbnz	r3, c7f4 <fnmatchx+0x22a>
                c2 = FOLDCASE(*pattern++, flags);
    c7e2:	78b0      	ldrb	r0, [r6, #2]
    c7e4:	f7ff fee9 	bl	c5ba <foldcase>
            if (c2 == EOS)
    c7e8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
    c7ec:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
    c7f0:	f43f aef3 	beq.w	c5da <fnmatchx+0x10>
            if (c <= test && test <= c2)
    c7f4:	9b00      	ldr	r3, [sp, #0]
    c7f6:	4543      	cmp	r3, r8
    c7f8:	db03      	blt.n	c802 <fnmatchx+0x238>
                ok = 1;
    c7fa:	4283      	cmp	r3, r0
    c7fc:	bfd8      	it	le
    c7fe:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
    c802:	2300      	movs	r3, #0
    c804:	e7ab      	b.n	c75e <fnmatchx+0x194>
        } else if (c == test)
    c806:	9b00      	ldr	r3, [sp, #0]
    c808:	4635      	mov	r5, r6
    c80a:	4543      	cmp	r3, r8
    c80c:	bf08      	it	eq
    c80e:	f04f 0b01 	moveq.w	fp, #1
    c812:	e7f6      	b.n	c802 <fnmatchx+0x238>
        return FNM_NORES;
    c814:	2003      	movs	r0, #3
    c816:	e6e1      	b.n	c5dc <fnmatchx+0x12>
                return 0;
    c818:	4608      	mov	r0, r1
    c81a:	e6df      	b.n	c5dc <fnmatchx+0x12>

0000c81c <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    c81c:	2340      	movs	r3, #64	; 0x40
    c81e:	f7ff bed4 	b.w	c5ca <fnmatchx>

0000c822 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c822:	4770      	bx	lr

0000c824 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    c824:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    c826:	075b      	lsls	r3, r3, #29
    c828:	d40b      	bmi.n	c842 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    c82a:	6803      	ldr	r3, [r0, #0]
    c82c:	8840      	ldrh	r0, [r0, #2]
    c82e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    c832:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    c836:	4418      	add	r0, r3
    c838:	3013      	adds	r0, #19
    c83a:	f020 0007 	bic.w	r0, r0, #7
    c83e:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    c840:	4770      	bx	lr
	return 0;
    c842:	2000      	movs	r0, #0
}
    c844:	4770      	bx	lr

0000c846 <default_get_timestamp>:
    c846:	f001 bfab 	b.w	e7a0 <sys_clock_cycle_get_32>

0000c84a <dummy_timestamp>:
    c84a:	2000      	movs	r0, #0
    c84c:	4770      	bx	lr

0000c84e <z_log_vprintk>:
{
    c84e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    c850:	2300      	movs	r3, #0
    c852:	e9cd 0101 	strd	r0, r1, [sp, #4]
    c856:	9300      	str	r3, [sp, #0]
    c858:	461a      	mov	r2, r3
    c85a:	4619      	mov	r1, r3
    c85c:	4618      	mov	r0, r3
    c85e:	f7f5 f9e3 	bl	1c28 <z_impl_z_log_msg2_runtime_vcreate>
}
    c862:	b005      	add	sp, #20
    c864:	f85d fb04 	ldr.w	pc, [sp], #4

0000c868 <notify_drop>:
	z_log_dropped(true);
    c868:	2001      	movs	r0, #1
    c86a:	f7f4 bd95 	b.w	1398 <z_log_dropped>

0000c86e <get_msg>:
{
    c86e:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    c870:	f7f4 fe08 	bl	1484 <z_log_msg2_claim>
}
    c874:	bd08      	pop	{r3, pc}

0000c876 <z_log_get_tag>:
}
    c876:	2000      	movs	r0, #0
    c878:	4770      	bx	lr

0000c87a <log_backend_disable>:
	backend->cb->active = false;
    c87a:	6843      	ldr	r3, [r0, #4]
    c87c:	2100      	movs	r1, #0
    c87e:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
    c880:	f7f4 bf92 	b.w	17a8 <backend_filter_set>

0000c884 <buffer_write>:
{
    c884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c886:	4606      	mov	r6, r0
    c888:	460d      	mov	r5, r1
    c88a:	4614      	mov	r4, r2
    c88c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    c88e:	4621      	mov	r1, r4
    c890:	4628      	mov	r0, r5
    c892:	463a      	mov	r2, r7
    c894:	47b0      	blx	r6
	} while (len != 0);
    c896:	1a24      	subs	r4, r4, r0
		buf += processed;
    c898:	4405      	add	r5, r0
	} while (len != 0);
    c89a:	d1f8      	bne.n	c88e <buffer_write+0xa>
}
    c89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c89e <log_output_flush>:
		     output->control_block->offset,
    c89e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    c8a0:	6881      	ldr	r1, [r0, #8]
{
    c8a2:	b510      	push	{r4, lr}
    c8a4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    c8a6:	e9d2 2300 	ldrd	r2, r3, [r2]
    c8aa:	6800      	ldr	r0, [r0, #0]
    c8ac:	f7ff ffea 	bl	c884 <buffer_write>
	output->control_block->offset = 0;
    c8b0:	6863      	ldr	r3, [r4, #4]
    c8b2:	2200      	movs	r2, #0
    c8b4:	601a      	str	r2, [r3, #0]
}
    c8b6:	bd10      	pop	{r4, pc}

0000c8b8 <out_func>:
{
    c8b8:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    c8ba:	684b      	ldr	r3, [r1, #4]
    c8bc:	681a      	ldr	r2, [r3, #0]
    c8be:	68cb      	ldr	r3, [r1, #12]
    c8c0:	429a      	cmp	r2, r3
{
    c8c2:	4605      	mov	r5, r0
    c8c4:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    c8c6:	d102      	bne.n	c8ce <out_func+0x16>
		log_output_flush(out_ctx);
    c8c8:	4608      	mov	r0, r1
    c8ca:	f7ff ffe8 	bl	c89e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c8ce:	6863      	ldr	r3, [r4, #4]
    c8d0:	f3bf 8f5b 	dmb	ish
    c8d4:	e853 2f00 	ldrex	r2, [r3]
    c8d8:	1c51      	adds	r1, r2, #1
    c8da:	e843 1000 	strex	r0, r1, [r3]
    c8de:	2800      	cmp	r0, #0
    c8e0:	d1f8      	bne.n	c8d4 <out_func+0x1c>
    c8e2:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    c8e6:	68a3      	ldr	r3, [r4, #8]
    c8e8:	549d      	strb	r5, [r3, r2]
}
    c8ea:	2000      	movs	r0, #0
    c8ec:	bd38      	pop	{r3, r4, r5, pc}

0000c8ee <cr_out_func>:
{
    c8ee:	b538      	push	{r3, r4, r5, lr}
    c8f0:	4605      	mov	r5, r0
    c8f2:	460c      	mov	r4, r1
	out_func(c, ctx);
    c8f4:	f7ff ffe0 	bl	c8b8 <out_func>
	if (c == '\n') {
    c8f8:	2d0a      	cmp	r5, #10
    c8fa:	d103      	bne.n	c904 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    c8fc:	4621      	mov	r1, r4
    c8fe:	200d      	movs	r0, #13
    c900:	f7ff ffda 	bl	c8b8 <out_func>
}
    c904:	2000      	movs	r0, #0
    c906:	bd38      	pop	{r3, r4, r5, pc}

0000c908 <z_log_msg2_finalize>:
{
    c908:	b570      	push	{r4, r5, r6, lr}
    c90a:	460e      	mov	r6, r1
    c90c:	4615      	mov	r5, r2
    c90e:	4619      	mov	r1, r3
	if (!msg) {
    c910:	4604      	mov	r4, r0
    c912:	b918      	cbnz	r0, c91c <z_log_msg2_finalize+0x14>
}
    c914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    c918:	f7f4 bd3e 	b.w	1398 <z_log_dropped>
	if (data) {
    c91c:	b143      	cbz	r3, c930 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    c91e:	f100 030c 	add.w	r3, r0, #12
    c922:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    c926:	4418      	add	r0, r3
    c928:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    c92c:	f001 fbd2 	bl	e0d4 <memcpy>
	msg->hdr.source = source;
    c930:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    c934:	4620      	mov	r0, r4
}
    c936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    c93a:	f7f4 be81 	b.w	1640 <z_log_msg2_commit>

0000c93e <z_impl_z_log_msg2_static_create>:
{
    c93e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    c942:	f3c1 2949 	ubfx	r9, r1, #9, #10
    c946:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    c94a:	444c      	add	r4, r9
    c94c:	3413      	adds	r4, #19
    c94e:	f024 0407 	bic.w	r4, r4, #7
    c952:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
    c954:	08a0      	lsrs	r0, r4, #2
{
    c956:	460d      	mov	r5, r1
    c958:	4690      	mov	r8, r2
    c95a:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
    c95c:	f7f4 fd8a 	bl	1474 <z_log_msg2_alloc>
	if (msg) {
    c960:	4604      	mov	r4, r0
    c962:	b120      	cbz	r0, c96e <z_impl_z_log_msg2_static_create+0x30>
		memcpy(msg->data, package, desc.package_len);
    c964:	464a      	mov	r2, r9
    c966:	4641      	mov	r1, r8
    c968:	300c      	adds	r0, #12
    c96a:	f001 fbb3 	bl	e0d4 <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
    c96e:	463b      	mov	r3, r7
    c970:	462a      	mov	r2, r5
    c972:	4631      	mov	r1, r6
    c974:	4620      	mov	r0, r4
}
    c976:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    c97a:	f7ff bfc5 	b.w	c908 <z_log_msg2_finalize>

0000c97e <log_halt>:
    c97e:	684b      	ldr	r3, [r1, #4]
    c980:	2000      	movs	r0, #0
    c982:	7158      	strb	r0, [r3, #5]
}
    c984:	4770      	bx	lr

0000c986 <log_go>:
	backend->cb->active = true;
    c986:	684b      	ldr	r3, [r1, #4]
    c988:	2201      	movs	r2, #1
    c98a:	715a      	strb	r2, [r3, #5]
}
    c98c:	2000      	movs	r0, #0
    c98e:	4770      	bx	lr

0000c990 <cmd_log_self_status>:
{
    c990:	b570      	push	{r4, r5, r6, lr}
    c992:	4604      	mov	r4, r0
    c994:	460d      	mov	r5, r1
    c996:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    c998:	f7f5 fad4 	bl	1f44 <shell_state_precheck>
    c99c:	b130      	cbz	r0, c9ac <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
    c99e:	69e1      	ldr	r1, [r4, #28]
    c9a0:	4633      	mov	r3, r6
    c9a2:	6809      	ldr	r1, [r1, #0]
    c9a4:	462a      	mov	r2, r5
    c9a6:	4620      	mov	r0, r4
    c9a8:	f7f5 fa04 	bl	1db4 <log_status>
}
    c9ac:	2000      	movs	r0, #0
    c9ae:	bd70      	pop	{r4, r5, r6, pc}

0000c9b0 <cmd_log_self_enable>:
{
    c9b0:	b570      	push	{r4, r5, r6, lr}
    c9b2:	4604      	mov	r4, r0
    c9b4:	460d      	mov	r5, r1
    c9b6:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    c9b8:	f7f5 fac4 	bl	1f44 <shell_state_precheck>
    c9bc:	b140      	cbz	r0, c9d0 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    c9be:	69e1      	ldr	r1, [r4, #28]
    c9c0:	4633      	mov	r3, r6
    c9c2:	462a      	mov	r2, r5
    c9c4:	4620      	mov	r0, r4
    c9c6:	6809      	ldr	r1, [r1, #0]
}
    c9c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    c9cc:	f7f5 bb32 	b.w	2034 <log_enable>
}
    c9d0:	bd70      	pop	{r4, r5, r6, pc}

0000c9d2 <log_disable>:
{
    c9d2:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
    c9d4:	2400      	movs	r4, #0
    c9d6:	9400      	str	r4, [sp, #0]
    c9d8:	3304      	adds	r3, #4
    c9da:	3a01      	subs	r2, #1
    c9dc:	f7f5 fac2 	bl	1f64 <filters_set>
}
    c9e0:	4620      	mov	r0, r4
    c9e2:	b002      	add	sp, #8
    c9e4:	bd10      	pop	{r4, pc}

0000c9e6 <cmd_log_self_disable>:
{
    c9e6:	b570      	push	{r4, r5, r6, lr}
    c9e8:	4604      	mov	r4, r0
    c9ea:	460d      	mov	r5, r1
    c9ec:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    c9ee:	f7f5 faa9 	bl	1f44 <shell_state_precheck>
    c9f2:	b140      	cbz	r0, ca06 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    c9f4:	69e1      	ldr	r1, [r4, #28]
    c9f6:	4633      	mov	r3, r6
    c9f8:	462a      	mov	r2, r5
    c9fa:	4620      	mov	r0, r4
    c9fc:	6809      	ldr	r1, [r1, #0]
}
    c9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    ca02:	f7ff bfe6 	b.w	c9d2 <log_disable>
}
    ca06:	bd70      	pop	{r4, r5, r6, pc}

0000ca08 <cmd_log_self_go>:
{
    ca08:	b510      	push	{r4, lr}
    ca0a:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    ca0c:	f7f5 fa9a 	bl	1f44 <shell_state_precheck>
    ca10:	b120      	cbz	r0, ca1c <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
    ca12:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
    ca14:	681b      	ldr	r3, [r3, #0]
    ca16:	685b      	ldr	r3, [r3, #4]
    ca18:	2201      	movs	r2, #1
    ca1a:	715a      	strb	r2, [r3, #5]
}
    ca1c:	2000      	movs	r0, #0
    ca1e:	bd10      	pop	{r4, pc}

0000ca20 <cmd_log_self_halt>:
{
    ca20:	b510      	push	{r4, lr}
    ca22:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    ca24:	f7f5 fa8e 	bl	1f44 <shell_state_precheck>
    ca28:	b120      	cbz	r0, ca34 <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
    ca2a:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
    ca2c:	681b      	ldr	r3, [r3, #0]
    ca2e:	685b      	ldr	r3, [r3, #4]
    ca30:	2200      	movs	r2, #0
    ca32:	715a      	strb	r2, [r3, #5]
}
    ca34:	2000      	movs	r0, #0
    ca36:	bd10      	pop	{r4, pc}

0000ca38 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    ca38:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    ca3a:	075b      	lsls	r3, r3, #29
    ca3c:	d40b      	bmi.n	ca56 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    ca3e:	6803      	ldr	r3, [r0, #0]
    ca40:	8840      	ldrh	r0, [r0, #2]
    ca42:	f3c3 2349 	ubfx	r3, r3, #9, #10
    ca46:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    ca4a:	4418      	add	r0, r3
    ca4c:	3013      	adds	r0, #19
    ca4e:	f020 0007 	bic.w	r0, r0, #7
    ca52:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    ca54:	4770      	bx	lr
	return 0;
    ca56:	2000      	movs	r0, #0
}
    ca58:	4770      	bx	lr

0000ca5a <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    ca5a:	6883      	ldr	r3, [r0, #8]
    ca5c:	6a1b      	ldr	r3, [r3, #32]
    ca5e:	b103      	cbz	r3, ca62 <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    ca60:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
    ca62:	4770      	bx	lr

0000ca64 <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
    ca64:	6843      	ldr	r3, [r0, #4]
    ca66:	681b      	ldr	r3, [r3, #0]
{
    ca68:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
    ca6a:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
    ca6c:	4620      	mov	r0, r4
    ca6e:	f7ff fff4 	bl	ca5a <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
    ca72:	68a3      	ldr	r3, [r4, #8]
    ca74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ca76:	b10b      	cbz	r3, ca7c <uninit+0x18>
		api->irq_rx_disable(dev);
    ca78:	4620      	mov	r0, r4
    ca7a:	4798      	blx	r3
}
    ca7c:	2000      	movs	r0, #0
    ca7e:	bd10      	pop	{r4, pc}

0000ca80 <enable>:
{
    ca80:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    ca82:	6843      	ldr	r3, [r0, #4]
    ca84:	681b      	ldr	r3, [r3, #0]
    ca86:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
    ca88:	b111      	cbz	r1, ca90 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
    ca8a:	6818      	ldr	r0, [r3, #0]
    ca8c:	f7ff ffe5 	bl	ca5a <uart_irq_tx_disable>
}
    ca90:	2000      	movs	r0, #0
    ca92:	bd08      	pop	{r3, pc}

0000ca94 <read>:
{
    ca94:	b510      	push	{r4, lr}
    ca96:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    ca98:	6843      	ldr	r3, [r0, #4]
    ca9a:	68d8      	ldr	r0, [r3, #12]
    ca9c:	f7ff fb9d 	bl	c1da <ring_buf_get>
    caa0:	6020      	str	r0, [r4, #0]
}
    caa2:	2000      	movs	r0, #0
    caa4:	bd10      	pop	{r4, pc}

0000caa6 <write>:
{
    caa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    caaa:	6845      	ldr	r5, [r0, #4]
{
    caac:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    caae:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    cab0:	7c1b      	ldrb	r3, [r3, #16]
{
    cab2:	460c      	mov	r4, r1
    cab4:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    cab6:	b153      	cbz	r3, cace <write+0x28>
    cab8:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    cabc:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    cabe:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
    cac0:	d120      	bne.n	cb04 <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    cac2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
    cac6:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    cac8:	2001      	movs	r0, #1
    caca:	4790      	blx	r2
    cacc:	e017      	b.n	cafe <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    cace:	68a8      	ldr	r0, [r5, #8]
    cad0:	f7ff fb1b 	bl	c10a <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cad4:	682b      	ldr	r3, [r5, #0]
    cad6:	6030      	str	r0, [r6, #0]
    cad8:	330c      	adds	r3, #12
    cada:	2101      	movs	r1, #1
    cadc:	f3bf 8f5b 	dmb	ish
    cae0:	e853 2f00 	ldrex	r2, [r3]
    cae4:	e843 1000 	strex	r0, r1, [r3]
    cae8:	2800      	cmp	r0, #0
    caea:	d1f9      	bne.n	cae0 <write+0x3a>
    caec:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    caf0:	b92a      	cbnz	r2, cafe <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    caf2:	682b      	ldr	r3, [r5, #0]
    caf4:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
    caf6:	6883      	ldr	r3, [r0, #8]
    caf8:	69db      	ldr	r3, [r3, #28]
    cafa:	b103      	cbz	r3, cafe <write+0x58>
		api->irq_tx_enable(dev);
    cafc:	4798      	blx	r3
}
    cafe:	2000      	movs	r0, #0
    cb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    cb04:	6818      	ldr	r0, [r3, #0]
    cb06:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    cb0a:	6883      	ldr	r3, [r0, #8]
    cb0c:	685b      	ldr	r3, [r3, #4]
    cb0e:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    cb10:	e7d4      	b.n	cabc <write+0x16>

0000cb12 <atomic_or>:
{
    cb12:	4603      	mov	r3, r0
}
    cb14:	f3bf 8f5b 	dmb	ish
    cb18:	e853 0f00 	ldrex	r0, [r3]
    cb1c:	ea40 0201 	orr.w	r2, r0, r1
    cb20:	e843 2c00 	strex	ip, r2, [r3]
    cb24:	f1bc 0f00 	cmp.w	ip, #0
    cb28:	d1f6      	bne.n	cb18 <atomic_or+0x6>
    cb2a:	f3bf 8f5b 	dmb	ish
    cb2e:	4770      	bx	lr

0000cb30 <atomic_and>:
{
    cb30:	4603      	mov	r3, r0
}
    cb32:	f3bf 8f5b 	dmb	ish
    cb36:	e853 0f00 	ldrex	r0, [r3]
    cb3a:	ea00 0201 	and.w	r2, r0, r1
    cb3e:	e843 2c00 	strex	ip, r2, [r3]
    cb42:	f1bc 0f00 	cmp.w	ip, #0
    cb46:	d1f6      	bne.n	cb36 <atomic_and+0x6>
    cb48:	f3bf 8f5b 	dmb	ish
    cb4c:	4770      	bx	lr

0000cb4e <shell_signal_handle>:
{
    cb4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    cb50:	6885      	ldr	r5, [r0, #8]
    cb52:	0109      	lsls	r1, r1, #4
    cb54:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
    cb58:	4604      	mov	r4, r0
    cb5a:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    cb5c:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
    cb5e:	aa01      	add	r2, sp, #4
    cb60:	4669      	mov	r1, sp
    cb62:	4628      	mov	r0, r5
    cb64:	f002 fbe0 	bl	f328 <z_impl_k_poll_signal_check>
	if (set) {
    cb68:	9b00      	ldr	r3, [sp, #0]
    cb6a:	b123      	cbz	r3, cb76 <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
    cb6c:	4628      	mov	r0, r5
    cb6e:	f002 fbd8 	bl	f322 <z_impl_k_poll_signal_reset>
		handler(shell);
    cb72:	4620      	mov	r0, r4
    cb74:	47b0      	blx	r6
}
    cb76:	b002      	add	sp, #8
    cb78:	bd70      	pop	{r4, r5, r6, pc}

0000cb7a <z_shell_strlen>:
{
    cb7a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    cb7c:	b110      	cbz	r0, cb84 <z_shell_strlen+0xa>
    cb7e:	f001 fa53 	bl	e028 <strlen>
    cb82:	b280      	uxth	r0, r0
}
    cb84:	bd08      	pop	{r3, pc}

0000cb86 <z_shell_raw_fprintf>:
{
    cb86:	b40e      	push	{r1, r2, r3}
    cb88:	b503      	push	{r0, r1, lr}
    cb8a:	aa03      	add	r2, sp, #12
    cb8c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    cb90:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    cb92:	f7f6 fd39 	bl	3608 <z_shell_fprintf_fmt>
}
    cb96:	b002      	add	sp, #8
    cb98:	f85d eb04 	ldr.w	lr, [sp], #4
    cb9c:	b003      	add	sp, #12
    cb9e:	4770      	bx	lr

0000cba0 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    cba0:	f7fd be0a 	b.w	a7b8 <z_impl_k_mutex_lock>

0000cba4 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    cba4:	688b      	ldr	r3, [r1, #8]
    cba6:	b920      	cbnz	r0, cbb2 <transport_evt_handler+0xe>
    cba8:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
    cbac:	2100      	movs	r1, #0
    cbae:	f7fe be15 	b.w	b7dc <z_impl_k_poll_signal_raise>
    cbb2:	f503 7026 	add.w	r0, r3, #664	; 0x298
    cbb6:	e7f9      	b.n	cbac <transport_evt_handler+0x8>

0000cbb8 <kill_handler>:
{
    cbb8:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
    cbba:	6883      	ldr	r3, [r0, #8]
    cbbc:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
    cbc0:	07db      	lsls	r3, r3, #31
{
    cbc2:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
    cbc4:	d41d      	bmi.n	cc02 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
    cbc6:	69c0      	ldr	r0, [r0, #28]
    cbc8:	f000 fd6f 	bl	d6aa <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
    cbcc:	6860      	ldr	r0, [r4, #4]
    cbce:	6803      	ldr	r3, [r0, #0]
    cbd0:	685b      	ldr	r3, [r3, #4]
    cbd2:	4798      	blx	r3
	if (err != 0) {
    cbd4:	4605      	mov	r5, r0
    cbd6:	b920      	cbnz	r0, cbe2 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
    cbd8:	68e0      	ldr	r0, [r4, #12]
    cbda:	f000 ff0f 	bl	d9fc <z_shell_history_purge>
	shell->ctx->state = state;
    cbde:	68a3      	ldr	r3, [r4, #8]
    cbe0:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
    cbe2:	68a3      	ldr	r3, [r4, #8]
    cbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    cbe6:	b113      	cbz	r3, cbee <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
    cbe8:	4629      	mov	r1, r5
    cbea:	4620      	mov	r0, r4
    cbec:	4798      	blx	r3
	shell->ctx->tid = NULL;
    cbee:	68a3      	ldr	r3, [r4, #8]
    cbf0:	2200      	movs	r2, #0
    cbf2:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
    cbf6:	f7fe fb2b 	bl	b250 <z_impl_z_current_get>
}
    cbfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
    cbfe:	f7f9 bb33 	b.w	6268 <z_impl_k_thread_abort>
		return -EBUSY;
    cc02:	f06f 050f 	mvn.w	r5, #15
    cc06:	e7ec      	b.n	cbe2 <kill_handler+0x2a>

0000cc08 <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
    cc08:	f500 7019 	add.w	r0, r0, #612	; 0x264
    cc0c:	b111      	cbz	r1, cc14 <z_flag_history_exit_set.isra.0+0xc>
    cc0e:	2104      	movs	r1, #4
    cc10:	f7ff bf7f 	b.w	cb12 <atomic_or>
    cc14:	f06f 0104 	mvn.w	r1, #4
    cc18:	f7ff bf8a 	b.w	cb30 <atomic_and>

0000cc1c <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
    cc1c:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    cc1e:	f500 7018 	add.w	r0, r0, #608	; 0x260
    cc22:	b129      	cbz	r1, cc30 <z_flag_insert_mode_set.isra.0+0x14>
    cc24:	2101      	movs	r1, #1
    cc26:	f7ff ff74 	bl	cb12 <atomic_or>
}
    cc2a:	f000 0001 	and.w	r0, r0, #1
    cc2e:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    cc30:	f06f 0101 	mvn.w	r1, #1
    cc34:	f7ff ff7c 	bl	cb30 <atomic_and>
    cc38:	e7f7      	b.n	cc2a <z_flag_insert_mode_set.isra.0+0xe>

0000cc3a <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    cc3a:	f7fd be35 	b.w	a8a8 <z_impl_k_mutex_unlock>

0000cc3e <shell_log_process>:
{
    cc3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
    cc40:	2300      	movs	r3, #0
{
    cc42:	4604      	mov	r4, r0
	int signaled = 0;
    cc44:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
    cc46:	4620      	mov	r0, r4
    cc48:	f000 fb5f 	bl	d30a <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
    cc4c:	69e0      	ldr	r0, [r4, #28]
    cc4e:	f000 fd6d 	bl	d72c <z_shell_log_backend_process>
    cc52:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
    cc54:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
    cc56:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
    cc58:	f7f6 fe60 	bl	391c <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
    cc5c:	68a3      	ldr	r3, [r4, #8]
    cc5e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
    cc60:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
    cc64:	b123      	cbz	r3, cc70 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
    cc66:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
    cc6a:	2100      	movs	r1, #0
    cc6c:	f7fe fad6 	bl	b21c <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
    cc70:	aa01      	add	r2, sp, #4
    cc72:	4669      	mov	r1, sp
    cc74:	4630      	mov	r0, r6
    cc76:	f002 fb57 	bl	f328 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
    cc7a:	b115      	cbz	r5, cc82 <shell_log_process+0x44>
    cc7c:	9b00      	ldr	r3, [sp, #0]
    cc7e:	2b00      	cmp	r3, #0
    cc80:	d0e1      	beq.n	cc46 <shell_log_process+0x8>
}
    cc82:	b002      	add	sp, #8
    cc84:	bd70      	pop	{r4, r5, r6, pc}

0000cc86 <shell_vfprintf>:
{
    cc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc88:	4604      	mov	r4, r0
	return shell->ctx->state;
    cc8a:	6880      	ldr	r0, [r0, #8]
{
    cc8c:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    cc8e:	7903      	ldrb	r3, [r0, #4]
    cc90:	2b02      	cmp	r3, #2
{
    cc92:	460d      	mov	r5, r1
    cc94:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    cc96:	d007      	beq.n	cca8 <shell_vfprintf+0x22>
}
    cc98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    cc9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    cca0:	f500 7019 	add.w	r0, r0, #612	; 0x264
    cca4:	f7ff bf35 	b.w	cb12 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    cca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ccac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ccb0:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    ccb4:	f7ff ff74 	bl	cba0 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    ccb8:	68a3      	ldr	r3, [r4, #8]
    ccba:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    ccbe:	0511      	lsls	r1, r2, #20
    ccc0:	d404      	bmi.n	cccc <shell_vfprintf+0x46>
    ccc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ccc4:	b913      	cbnz	r3, cccc <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
    ccc6:	4620      	mov	r0, r4
    ccc8:	f000 fb1f 	bl	d30a <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
    cccc:	463b      	mov	r3, r7
    ccce:	4632      	mov	r2, r6
    ccd0:	4629      	mov	r1, r5
    ccd2:	4620      	mov	r0, r4
    ccd4:	f000 fb7a 	bl	d3cc <z_shell_vfprintf>
    ccd8:	68a3      	ldr	r3, [r4, #8]
    ccda:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    ccde:	0512      	lsls	r2, r2, #20
    cce0:	d404      	bmi.n	ccec <shell_vfprintf+0x66>
    cce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cce4:	b913      	cbnz	r3, ccec <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
    cce6:	4620      	mov	r0, r4
    cce8:	f7f6 fe18 	bl	391c <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    ccec:	6960      	ldr	r0, [r4, #20]
    ccee:	f000 f817 	bl	cd20 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    ccf2:	68a0      	ldr	r0, [r4, #8]
}
    ccf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
    ccf8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    ccfc:	f7ff bf9d 	b.w	cc3a <k_mutex_unlock.isra.0>

0000cd00 <shell_fprintf>:
{
    cd00:	b40c      	push	{r2, r3}
    cd02:	b507      	push	{r0, r1, r2, lr}
    cd04:	ab04      	add	r3, sp, #16
    cd06:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    cd0a:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
    cd0c:	f7ff ffbb 	bl	cc86 <shell_vfprintf>
}
    cd10:	b003      	add	sp, #12
    cd12:	f85d eb04 	ldr.w	lr, [sp], #4
    cd16:	b002      	add	sp, #8
    cd18:	4770      	bx	lr

0000cd1a <shell_set_bypass>:
	sh->ctx->bypass = bypass;
    cd1a:	6883      	ldr	r3, [r0, #8]
    cd1c:	6399      	str	r1, [r3, #56]	; 0x38
}
    cd1e:	4770      	bx	lr

0000cd20 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    cd20:	6902      	ldr	r2, [r0, #16]
    cd22:	6883      	ldr	r3, [r0, #8]
    cd24:	6812      	ldr	r2, [r2, #0]
    cd26:	6801      	ldr	r1, [r0, #0]
{
    cd28:	b510      	push	{r4, lr}
    cd2a:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    cd2c:	68c0      	ldr	r0, [r0, #12]
    cd2e:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    cd30:	6923      	ldr	r3, [r4, #16]
    cd32:	2200      	movs	r2, #0
    cd34:	601a      	str	r2, [r3, #0]
}
    cd36:	bd10      	pop	{r4, pc}

0000cd38 <out_func>:
{
    cd38:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    cd3a:	68cb      	ldr	r3, [r1, #12]
    cd3c:	7c1b      	ldrb	r3, [r3, #16]
    cd3e:	2b02      	cmp	r3, #2
{
    cd40:	4605      	mov	r5, r0
    cd42:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    cd44:	d104      	bne.n	cd50 <out_func+0x18>
    cd46:	280a      	cmp	r0, #10
    cd48:	d102      	bne.n	cd50 <out_func+0x18>
		(void)out_func('\r', ctx);
    cd4a:	200d      	movs	r0, #13
    cd4c:	f7ff fff4 	bl	cd38 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
    cd50:	6923      	ldr	r3, [r4, #16]
    cd52:	6822      	ldr	r2, [r4, #0]
    cd54:	681b      	ldr	r3, [r3, #0]
    cd56:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    cd58:	6922      	ldr	r2, [r4, #16]
    cd5a:	6813      	ldr	r3, [r2, #0]
    cd5c:	3301      	adds	r3, #1
    cd5e:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    cd60:	6862      	ldr	r2, [r4, #4]
    cd62:	4293      	cmp	r3, r2
    cd64:	d102      	bne.n	cd6c <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    cd66:	4620      	mov	r0, r4
    cd68:	f7ff ffda 	bl	cd20 <z_shell_fprintf_buffer_flush>
}
    cd6c:	2000      	movs	r0, #0
    cd6e:	bd38      	pop	{r3, r4, r5, pc}

0000cd70 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    cd70:	2820      	cmp	r0, #32
    cd72:	d005      	beq.n	cd80 <isspace+0x10>
    cd74:	3809      	subs	r0, #9
    cd76:	2804      	cmp	r0, #4
    cd78:	bf8c      	ite	hi
    cd7a:	2000      	movhi	r0, #0
    cd7c:	2001      	movls	r0, #1
    cd7e:	4770      	bx	lr
    cd80:	2001      	movs	r0, #1
}
    cd82:	4770      	bx	lr

0000cd84 <z_shell_strlen>:
{
    cd84:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    cd86:	b110      	cbz	r0, cd8e <z_shell_strlen+0xa>
    cd88:	f001 f94e 	bl	e028 <strlen>
    cd8c:	b280      	uxth	r0, r0
}
    cd8e:	bd08      	pop	{r3, pc}

0000cd90 <z_column_span_with_buffer_offsets_get>:
{
    cd90:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    cd92:	7b03      	ldrb	r3, [r0, #12]
    cd94:	8940      	ldrh	r0, [r0, #10]
    cd96:	441a      	add	r2, r3
    cd98:	4419      	add	r1, r3
    cd9a:	fbb2 f4f0 	udiv	r4, r2, r0
    cd9e:	fbb1 f3f0 	udiv	r3, r1, r0
    cda2:	fb00 2214 	mls	r2, r0, r4, r2
    cda6:	fb00 1013 	mls	r0, r0, r3, r1
}
    cdaa:	1a10      	subs	r0, r2, r0
    cdac:	bd10      	pop	{r4, pc}

0000cdae <z_row_span_with_buffer_offsets_get>:
{
    cdae:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    cdb0:	7b04      	ldrb	r4, [r0, #12]
    cdb2:	8943      	ldrh	r3, [r0, #10]
    cdb4:	4421      	add	r1, r4
    cdb6:	1910      	adds	r0, r2, r4
    cdb8:	fbb1 f1f3 	udiv	r1, r1, r3
    cdbc:	fbb0 f0f3 	udiv	r0, r0, r3
}
    cdc0:	1a40      	subs	r0, r0, r1
    cdc2:	bd10      	pop	{r4, pc}

0000cdc4 <z_shell_multiline_data_calc>:
{
    cdc4:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    cdc6:	7b05      	ldrb	r5, [r0, #12]
    cdc8:	8943      	ldrh	r3, [r0, #10]
    cdca:	4429      	add	r1, r5
    cdcc:	fbb1 f4f3 	udiv	r4, r1, r3
    cdd0:	fb03 1114 	mls	r1, r3, r4, r1
    cdd4:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    cdd6:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    cdd8:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    cdda:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    cddc:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    cde0:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    cde4:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    cde6:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    cde8:	1c4c      	adds	r4, r1, #1
    cdea:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    cdec:	8042      	strh	r2, [r0, #2]
}
    cdee:	bd30      	pop	{r4, r5, pc}

0000cdf0 <z_shell_make_argv>:
{
    cdf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
    cdf4:	2500      	movs	r5, #0
{
    cdf6:	4606      	mov	r6, r0
    cdf8:	460f      	mov	r7, r1
    cdfa:	4614      	mov	r4, r2
    cdfc:	4698      	mov	r8, r3
	*argc = 0;
    cdfe:	6005      	str	r5, [r0, #0]
		c = *cmd;
    ce00:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    ce02:	2800      	cmp	r0, #0
    ce04:	f000 80b5 	beq.w	cf72 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
    ce08:	f7ff ffb2 	bl	cd70 <isspace>
    ce0c:	b118      	cbz	r0, ce16 <z_shell_make_argv+0x26>
			*cmd++ = '\0';
    ce0e:	2300      	movs	r3, #0
    ce10:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
    ce14:	e7f4      	b.n	ce00 <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
    ce16:	6832      	ldr	r2, [r6, #0]
    ce18:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
    ce1a:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
    ce1c:	6033      	str	r3, [r6, #0]
    ce1e:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
    ce22:	f000 80a6 	beq.w	cf72 <z_shell_make_argv+0x182>
	char quote = 0;
    ce26:	4605      	mov	r5, r0
		c = *cmd;
    ce28:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
    ce2c:	f1b9 0f00 	cmp.w	r9, #0
    ce30:	d0e6      	beq.n	ce00 <z_shell_make_argv+0x10>
		if (!quote) {
    ce32:	2d00      	cmp	r5, #0
    ce34:	f040 8089 	bne.w	cf4a <z_shell_make_argv+0x15a>
			switch (c) {
    ce38:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    ce3c:	d006      	beq.n	ce4c <z_shell_make_argv+0x5c>
    ce3e:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    ce42:	f000 808a 	beq.w	cf5a <z_shell_make_argv+0x16a>
    ce46:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
    ce4a:	d176      	bne.n	cf3a <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
    ce4c:	4620      	mov	r0, r4
    ce4e:	f7ff ff99 	bl	cd84 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    ce52:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
    ce54:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    ce56:	4620      	mov	r0, r4
    ce58:	f001 f924 	bl	e0a4 <memmove>
				continue;
    ce5c:	464d      	mov	r5, r9
    ce5e:	e7e3      	b.n	ce28 <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
    ce60:	4620      	mov	r0, r4
    ce62:	f7ff ff8f 	bl	cd84 <z_shell_strlen>
    ce66:	1c61      	adds	r1, r4, #1
    ce68:	4602      	mov	r2, r0
    ce6a:	4620      	mov	r0, r4
    ce6c:	f001 f91a 	bl	e0a4 <memmove>
			quote = 0;
    ce70:	2500      	movs	r5, #0
			continue;
    ce72:	e7d9      	b.n	ce28 <z_shell_make_argv+0x38>
			if (t == '0') {
    ce74:	2930      	cmp	r1, #48	; 0x30
    ce76:	d126      	bne.n	cec6 <z_shell_make_argv+0xd6>
    ce78:	2302      	movs	r3, #2
				uint8_t v = 0U;
    ce7a:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    ce7e:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
    ce80:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    ce84:	b2d2      	uxtb	r2, r2
    ce86:	2a07      	cmp	r2, #7
    ce88:	fa5f f983 	uxtb.w	r9, r3
    ce8c:	d818      	bhi.n	cec0 <z_shell_make_argv+0xd0>
				for (i = 2U; i < (2 + 3); i++) {
    ce8e:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
    ce90:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
    ce94:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    ce96:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
    ce9a:	d1f0      	bne.n	ce7e <z_shell_make_argv+0x8e>
    ce9c:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
    ce9e:	4620      	mov	r0, r4
    cea0:	f7ff ff70 	bl	cd84 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    cea4:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    cea8:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
    ceaa:	f1a9 0902 	sub.w	r9, r9, #2
					memmove(cmd, cmd + (i - 1),
    ceae:	eba0 0209 	sub.w	r2, r0, r9
    ceb2:	4659      	mov	r1, fp
    ceb4:	4620      	mov	r0, r4
    ceb6:	f001 f8f5 	bl	e0a4 <memmove>
					*cmd++ = v;
    ceba:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
    cebe:	e7b3      	b.n	ce28 <z_shell_make_argv+0x38>
				if (i > 2) {
    cec0:	f1b9 0f02 	cmp.w	r9, #2
    cec4:	d1eb      	bne.n	ce9e <z_shell_make_argv+0xae>
			if (t == 'x') {
    cec6:	2978      	cmp	r1, #120	; 0x78
    cec8:	d13d      	bne.n	cf46 <z_shell_make_argv+0x156>
    ceca:	2102      	movs	r1, #2
				uint8_t v = 0U;
    cecc:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
    ced0:	5c62      	ldrb	r2, [r4, r1]
					if (t >= '0' && t <= '9') {
    ced2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    ced6:	b2db      	uxtb	r3, r3
    ced8:	2b09      	cmp	r3, #9
    ceda:	b2c8      	uxtb	r0, r1
    cedc:	d81a      	bhi.n	cf14 <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
    cede:	ea43 1209 	orr.w	r2, r3, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
    cee2:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
    cee4:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
    cee8:	d112      	bne.n	cf10 <z_shell_make_argv+0x120>
    ceea:	f04f 0a04 	mov.w	sl, #4
						z_shell_strlen(cmd) - (i - 2));
    ceee:	4620      	mov	r0, r4
    cef0:	f7ff ff48 	bl	cd84 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    cef4:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    cef8:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
    cefa:	f1aa 0a02 	sub.w	sl, sl, #2
					memmove(cmd, cmd + (i - 1),
    cefe:	eba0 020a 	sub.w	r2, r0, sl
    cf02:	4659      	mov	r1, fp
    cf04:	4620      	mov	r0, r4
    cf06:	f001 f8cd 	bl	e0a4 <memmove>
					*cmd++ = v;
    cf0a:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
    cf0e:	e78b      	b.n	ce28 <z_shell_make_argv+0x38>
    cf10:	2103      	movs	r1, #3
    cf12:	e7dd      	b.n	ced0 <z_shell_make_argv+0xe0>
					} else if ((t >= 'a') &&
    cf14:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    cf18:	2b05      	cmp	r3, #5
    cf1a:	d803      	bhi.n	cf24 <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
    cf1c:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    cf1e:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
    cf22:	e7de      	b.n	cee2 <z_shell_make_argv+0xf2>
					} else if ((t >= 'A') && (t <= 'F')) {
    cf24:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    cf28:	2b05      	cmp	r3, #5
    cf2a:	d801      	bhi.n	cf30 <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
    cf2c:	3a37      	subs	r2, #55	; 0x37
    cf2e:	e7f6      	b.n	cf1e <z_shell_make_argv+0x12e>
				if (i > 2) {
    cf30:	2802      	cmp	r0, #2
    cf32:	d008      	beq.n	cf46 <z_shell_make_argv+0x156>
    cf34:	f04f 0a03 	mov.w	sl, #3
    cf38:	e7d9      	b.n	ceee <z_shell_make_argv+0xfe>
		if (!quote && isspace((int) c)) {
    cf3a:	4648      	mov	r0, r9
    cf3c:	f7ff ff18 	bl	cd70 <isspace>
    cf40:	2800      	cmp	r0, #0
    cf42:	f47f af5d 	bne.w	ce00 <z_shell_make_argv+0x10>
		cmd += 1;
    cf46:	3401      	adds	r4, #1
    cf48:	e76e      	b.n	ce28 <z_shell_make_argv+0x38>
		if (quote == c) {
    cf4a:	45a9      	cmp	r9, r5
    cf4c:	d088      	beq.n	ce60 <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
    cf4e:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    cf52:	d1f8      	bne.n	cf46 <z_shell_make_argv+0x156>
			char t = *(cmd + 1);
    cf54:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
    cf56:	428d      	cmp	r5, r1
    cf58:	d18c      	bne.n	ce74 <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
    cf5a:	4620      	mov	r0, r4
    cf5c:	f7ff ff12 	bl	cd84 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    cf60:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
    cf64:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    cf66:	4649      	mov	r1, r9
    cf68:	4620      	mov	r0, r4
    cf6a:	f001 f89b 	bl	e0a4 <memmove>
				cmd += 1;
    cf6e:	464c      	mov	r4, r9
				continue;
    cf70:	e75a      	b.n	ce28 <z_shell_make_argv+0x38>
}
    cf72:	4628      	mov	r0, r5
    cf74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cf78 <z_shell_pattern_remove>:
{
    cf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf7a:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    cf7c:	4611      	mov	r1, r2
{
    cf7e:	4615      	mov	r5, r2
    cf80:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    cf82:	f001 f807 	bl	df94 <strstr>
    cf86:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
    cf88:	4628      	mov	r0, r5
    cf8a:	f7ff fefb 	bl	cd84 <z_shell_strlen>
    cf8e:	4605      	mov	r5, r0
	if (!pattern_addr) {
    cf90:	b1c4      	cbz	r4, cfc4 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    cf92:	42a7      	cmp	r7, r4
    cf94:	d207      	bcs.n	cfa6 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    cf96:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    cf9a:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    cf9c:	bf02      	ittt	eq
    cf9e:	3501      	addeq	r5, #1
    cfa0:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    cfa2:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    cfa6:	4620      	mov	r0, r4
    cfa8:	f7ff feec 	bl	cd84 <z_shell_strlen>
	*buff_len -= pattern_len;
    cfac:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    cfae:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
    cfb0:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    cfb2:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
    cfb4:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    cfb6:	1961      	adds	r1, r4, r5
    cfb8:	4620      	mov	r0, r4
    cfba:	b292      	uxth	r2, r2
}
    cfbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    cfc0:	f001 b870 	b.w	e0a4 <memmove>
}
    cfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cfc6 <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
    cfc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfca:	4688      	mov	r8, r1
    cfcc:	b086      	sub	sp, #24
    cfce:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
    cfd0:	4604      	mov	r4, r0
    cfd2:	b128      	cbz	r0, cfe0 <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
    cfd4:	4601      	mov	r1, r0
    cfd6:	2214      	movs	r2, #20
    cfd8:	a801      	add	r0, sp, #4
    cfda:	f001 f87b 	bl	e0d4 <memcpy>
		parent = &parent_cpy;
    cfde:	ac01      	add	r4, sp, #4
    cfe0:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
    cfe2:	4631      	mov	r1, r6
    cfe4:	463a      	mov	r2, r7
    cfe6:	4620      	mov	r0, r4
    cfe8:	f7f6 fb22 	bl	3630 <z_shell_cmd_get>
    cfec:	3601      	adds	r6, #1
    cfee:	4605      	mov	r5, r0
    cff0:	b128      	cbz	r0, cffe <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
    cff2:	6829      	ldr	r1, [r5, #0]
    cff4:	4640      	mov	r0, r8
    cff6:	f001 f827 	bl	e048 <strcmp>
    cffa:	2800      	cmp	r0, #0
    cffc:	d1f1      	bne.n	cfe2 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
    cffe:	4628      	mov	r0, r5
    d000:	b006      	add	sp, #24
    d002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d006 <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
    d006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d00a:	461c      	mov	r4, r3
    d00c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d010:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    d014:	2300      	movs	r3, #0
{
    d016:	460f      	mov	r7, r1
    d018:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    d01a:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
    d01c:	6823      	ldr	r3, [r4, #0]
    d01e:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
    d020:	4605      	mov	r5, r0
	while (*match_arg < argc) {
    d022:	d21b      	bcs.n	d05c <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
    d024:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    d028:	f000 fd66 	bl	daf8 <z_shell_has_wildcard>
    d02c:	6823      	ldr	r3, [r4, #0]
    d02e:	4682      	mov	sl, r0
    d030:	b118      	cbz	r0, d03a <z_shell_get_last_command+0x34>
				(*match_arg)++;
    d032:	3301      	adds	r3, #1
    d034:	6023      	str	r3, [r4, #0]
				continue;
    d036:	4628      	mov	r0, r5
    d038:	e7f0      	b.n	d01c <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
    d03a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    d03e:	4642      	mov	r2, r8
    d040:	4628      	mov	r0, r5
    d042:	f7ff ffc0 	bl	cfc6 <z_shell_find_cmd>
		if (entry) {
    d046:	b148      	cbz	r0, d05c <z_shell_get_last_command+0x56>
			(*match_arg)++;
    d048:	6823      	ldr	r3, [r4, #0]
    d04a:	1c5a      	adds	r2, r3, #1
    d04c:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
    d04e:	f1b9 0f00 	cmp.w	r9, #0
    d052:	d0e3      	beq.n	d01c <z_shell_get_last_command+0x16>
    d054:	4580      	cmp	r8, r0
    d056:	d1e1      	bne.n	d01c <z_shell_get_last_command+0x16>
			(*match_arg)--;
    d058:	6023      	str	r3, [r4, #0]
			return NULL;
    d05a:	4655      	mov	r5, sl
		}
	}

	return entry;
}
    d05c:	4628      	mov	r0, r5
    d05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d062 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
    d062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d066:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
    d068:	f7ff fe8c 	bl	cd84 <z_shell_strlen>
    d06c:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
    d06e:	bb47      	cbnz	r7, d0c2 <z_shell_spaces_trim+0x60>

				break;
			}
		}
	}
}
    d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
    d074:	b14c      	cbz	r4, d08a <z_shell_spaces_trim+0x28>
						len - j + 1);
    d076:	b292      	uxth	r2, r2
    d078:	1ab2      	subs	r2, r6, r2
					memmove(&str[i + 1],
    d07a:	1c58      	adds	r0, r3, #1
    d07c:	3201      	adds	r2, #1
    d07e:	4438      	add	r0, r7
    d080:	f001 f810 	bl	e0a4 <memmove>
					len -= shift;
    d084:	1b36      	subs	r6, r6, r4
    d086:	b2b6      	uxth	r6, r6
					shift = 0U;
    d088:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
    d08a:	1e73      	subs	r3, r6, #1
    d08c:	429d      	cmp	r5, r3
    d08e:	daef      	bge.n	d070 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    d090:	5d78      	ldrb	r0, [r7, r5]
    d092:	f7ff fe6d 	bl	cd70 <isspace>
    d096:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
    d098:	3501      	adds	r5, #1
    d09a:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
    d09c:	2800      	cmp	r0, #0
    d09e:	d0f4      	beq.n	d08a <z_shell_spaces_trim+0x28>
    d0a0:	462a      	mov	r2, r5
			for (uint16_t j = i + 1; j < len; j++) {
    d0a2:	b291      	uxth	r1, r2
    d0a4:	428e      	cmp	r6, r1
    d0a6:	d9f0      	bls.n	d08a <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
    d0a8:	5cb8      	ldrb	r0, [r7, r2]
    d0aa:	f7ff fe61 	bl	cd70 <isspace>
    d0ae:	18b9      	adds	r1, r7, r2
    d0b0:	f102 0c01 	add.w	ip, r2, #1
    d0b4:	4680      	mov	r8, r0
    d0b6:	2800      	cmp	r0, #0
    d0b8:	d0dc      	beq.n	d074 <z_shell_spaces_trim+0x12>
					shift++;
    d0ba:	3401      	adds	r4, #1
    d0bc:	b2a4      	uxth	r4, r4
    d0be:	4662      	mov	r2, ip
    d0c0:	e7ef      	b.n	d0a2 <z_shell_spaces_trim+0x40>
	for (uint16_t i = 0; i < len - 1; i++) {
    d0c2:	2500      	movs	r5, #0
	uint16_t shift = 0U;
    d0c4:	462c      	mov	r4, r5
    d0c6:	e7e0      	b.n	d08a <z_shell_spaces_trim+0x28>

0000d0c8 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
    d0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    d0ca:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    d0cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
    d0d0:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
    d0d2:	b953      	cbnz	r3, d0ea <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    d0d4:	68ab      	ldr	r3, [r5, #8]
    d0d6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    d0d8:	87da      	strh	r2, [r3, #62]	; 0x3e
}
    d0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
    d0dc:	3a01      	subs	r2, #1
    d0de:	b292      	uxth	r2, r2
    d0e0:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
    d0e2:	b922      	cbnz	r2, d0ee <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
    d0e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
    d0e8:	e7f4      	b.n	d0d4 <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    d0ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
    d0ee:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    d0f0:	18b3      	adds	r3, r6, r2
    d0f2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    d0f6:	f7ff fe3b 	bl	cd70 <isspace>
    d0fa:	4603      	mov	r3, r0
    d0fc:	2800      	cmp	r0, #0
    d0fe:	d1ed      	bne.n	d0dc <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
    d100:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
    d102:	b29f      	uxth	r7, r3
    d104:	fa16 f183 	uxtah	r1, r6, r3
    d108:	5df0      	ldrb	r0, [r6, r7]
    d10a:	f7ff fe31 	bl	cd70 <isspace>
    d10e:	3301      	adds	r3, #1
    d110:	2800      	cmp	r0, #0
    d112:	d1f6      	bne.n	d102 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
    d114:	2f00      	cmp	r7, #0
    d116:	d0dd      	beq.n	d0d4 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    d118:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    d11a:	3301      	adds	r3, #1
    d11c:	1bda      	subs	r2, r3, r7
    d11e:	4630      	mov	r0, r6
    d120:	f000 ffc0 	bl	e0a4 <memmove>
		*buff_len = *buff_len - i;
    d124:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    d126:	1bdb      	subs	r3, r3, r7
    d128:	87a3      	strh	r3, [r4, #60]	; 0x3c
    d12a:	e7d3      	b.n	d0d4 <z_shell_cmd_trim+0xc>

0000d12c <z_shell_raw_fprintf>:
{
    d12c:	b40e      	push	{r1, r2, r3}
    d12e:	b503      	push	{r0, r1, lr}
    d130:	aa03      	add	r2, sp, #12
    d132:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    d136:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    d138:	f7f6 fa66 	bl	3608 <z_shell_fprintf_fmt>
}
    d13c:	b002      	add	sp, #8
    d13e:	f85d eb04 	ldr.w	lr, [sp], #4
    d142:	b003      	add	sp, #12
    d144:	4770      	bx	lr

0000d146 <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    d146:	6882      	ldr	r2, [r0, #8]
{
    d148:	b538      	push	{r3, r4, r5, lr}
    d14a:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    d14c:	6810      	ldr	r0, [r2, #0]
    d14e:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
    d150:	b110      	cbz	r0, d158 <full_line_cmd+0x12>
    d152:	f000 ff69 	bl	e028 <strlen>
    d156:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    d158:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    d15a:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    d15c:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    d15e:	fbb3 f2f0 	udiv	r2, r3, r0
    d162:	fb00 3012 	mls	r0, r0, r2, r3
}
    d166:	fab0 f080 	clz	r0, r0
    d16a:	0940      	lsrs	r0, r0, #5
    d16c:	bd38      	pop	{r3, r4, r5, pc}

0000d16e <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    d16e:	6882      	ldr	r2, [r0, #8]
{
    d170:	b538      	push	{r3, r4, r5, lr}
    d172:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    d174:	6810      	ldr	r0, [r2, #0]
    d176:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
    d178:	b110      	cbz	r0, d180 <z_shell_cursor_in_empty_line+0x12>
    d17a:	f000 ff55 	bl	e028 <strlen>
    d17e:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    d180:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    d182:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    d184:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    d186:	fbb3 f2f0 	udiv	r2, r3, r0
    d18a:	fb00 3012 	mls	r0, r0, r2, r3
}
    d18e:	fab0 f080 	clz	r0, r0
    d192:	0940      	lsrs	r0, r0, #5
    d194:	bd38      	pop	{r3, r4, r5, pc}

0000d196 <z_shell_op_cond_next_line>:
{
    d196:	b510      	push	{r4, lr}
    d198:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    d19a:	f7ff ffe8 	bl	d16e <z_shell_cursor_in_empty_line>
    d19e:	b120      	cbz	r0, d1aa <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
    d1a0:	6960      	ldr	r0, [r4, #20]
}
    d1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
    d1a6:	f7f6 ba75 	b.w	3694 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    d1aa:	4620      	mov	r0, r4
    d1ac:	f7ff ffcb 	bl	d146 <full_line_cmd>
    d1b0:	2800      	cmp	r0, #0
    d1b2:	d1f5      	bne.n	d1a0 <z_shell_op_cond_next_line+0xa>
}
    d1b4:	bd10      	pop	{r4, pc}

0000d1b6 <z_shell_op_cursor_position_synchronize>:
{
    d1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    d1b8:	6884      	ldr	r4, [r0, #8]
{
    d1ba:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    d1bc:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    d1be:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    d1c0:	f104 0020 	add.w	r0, r4, #32
    d1c4:	f7ff fdfe 	bl	cdc4 <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
    d1c8:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
    d1ca:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    d1cc:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    d1ce:	f7ff ffba 	bl	d146 <full_line_cmd>
    d1d2:	b110      	cbz	r0, d1da <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
    d1d4:	6968      	ldr	r0, [r5, #20]
    d1d6:	f7f6 fa5d 	bl	3694 <z_cursor_next_line_move.isra.0>
	if (last_line) {
    d1da:	42b7      	cmp	r7, r6
    d1dc:	d107      	bne.n	d1ee <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    d1de:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    d1e0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    d1e2:	4628      	mov	r0, r5
    d1e4:	1ac9      	subs	r1, r1, r3
}
    d1e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    d1ea:	f7f6 ba6f 	b.w	36cc <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    d1ee:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    d1f0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    d1f2:	4628      	mov	r0, r5
    d1f4:	1ac9      	subs	r1, r1, r3
    d1f6:	f7f6 fa53 	bl	36a0 <z_shell_op_cursor_vert_move>
    d1fa:	e7f0      	b.n	d1de <z_shell_op_cursor_position_synchronize+0x28>

0000d1fc <z_shell_op_cursor_move>:
{
    d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1fe:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    d200:	6880      	ldr	r0, [r0, #8]
{
    d202:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    d204:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    d206:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    d208:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    d20a:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    d20c:	f7ff fdda 	bl	cdc4 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
    d210:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    d212:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
    d214:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d216:	462a      	mov	r2, r5
    d218:	3020      	adds	r0, #32
    d21a:	f7ff fdc8 	bl	cdae <z_row_span_with_buffer_offsets_get>
    d21e:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
    d220:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
    d222:	462a      	mov	r2, r5
    d224:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d226:	3020      	adds	r0, #32
    d228:	f7ff fdb2 	bl	cd90 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
    d22c:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
    d22e:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
    d230:	4620      	mov	r0, r4
    d232:	f7f6 fa35 	bl	36a0 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
    d236:	4631      	mov	r1, r6
    d238:	4620      	mov	r0, r4
    d23a:	f7f6 fa47 	bl	36cc <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    d23e:	68a3      	ldr	r3, [r4, #8]
    d240:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
    d242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d244 <z_shell_op_cursor_word_move>:
{
    d244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
    d248:	1e0c      	subs	r4, r1, #0
{
    d24a:	4606      	mov	r6, r0
	if (val < 0) {
    d24c:	da34      	bge.n	d2b8 <z_shell_op_cursor_word_move+0x74>
		val = -val;
    d24e:	4264      	negs	r4, r4
    d250:	b224      	sxth	r4, r4
		sign = -1;
    d252:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    d256:	b2a4      	uxth	r4, r4
    d258:	b2af      	uxth	r7, r5
    d25a:	e025      	b.n	d2a8 <z_shell_op_cursor_word_move+0x64>
		shift = shift_calc(shell->ctx->cmd_buff,
    d25c:	68b3      	ldr	r3, [r6, #8]
    d25e:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
    d262:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
    d266:	f103 0842 	add.w	r8, r3, #66	; 0x42
	bool found = false;
    d26a:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
    d26c:	4673      	mov	r3, lr
		idx = pos + ret * sign;
    d26e:	eba3 010e 	sub.w	r1, r3, lr
    d272:	b289      	uxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
    d274:	b90b      	cbnz	r3, d27a <z_shell_op_cursor_word_move+0x36>
    d276:	1c6a      	adds	r2, r5, #1
    d278:	d010      	beq.n	d29c <z_shell_op_cursor_word_move+0x58>
    d27a:	4599      	cmp	r9, r3
    d27c:	d101      	bne.n	d282 <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
    d27e:	2d01      	cmp	r5, #1
    d280:	d00c      	beq.n	d29c <z_shell_op_cursor_word_move+0x58>
		if (isalnum((int)str[idx]) != 0) {
    d282:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    d286:	f042 0c20 	orr.w	ip, r2, #32
    d28a:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
    d28e:	f1bc 0f19 	cmp.w	ip, #25
    d292:	d90d      	bls.n	d2b0 <z_shell_op_cursor_word_move+0x6c>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    d294:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    d296:	2a09      	cmp	r2, #9
    d298:	d90a      	bls.n	d2b0 <z_shell_op_cursor_word_move+0x6c>
			if (found) {
    d29a:	b150      	cbz	r0, d2b2 <z_shell_op_cursor_word_move+0x6e>
		z_shell_op_cursor_move(shell, sign * shift);
    d29c:	b209      	sxth	r1, r1
    d29e:	4630      	mov	r0, r6
    d2a0:	f7ff ffac 	bl	d1fc <z_shell_op_cursor_move>
    d2a4:	3c01      	subs	r4, #1
    d2a6:	b2a4      	uxth	r4, r4
	while (val--) {
    d2a8:	2c00      	cmp	r4, #0
    d2aa:	d1d7      	bne.n	d25c <z_shell_op_cursor_word_move+0x18>
}
    d2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
    d2b0:	2001      	movs	r0, #1
	while (1) {
    d2b2:	443b      	add	r3, r7
    d2b4:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
    d2b6:	e7da      	b.n	d26e <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
    d2b8:	2501      	movs	r5, #1
    d2ba:	e7cc      	b.n	d256 <z_shell_op_cursor_word_move+0x12>

0000d2bc <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    d2bc:	6883      	ldr	r3, [r0, #8]
    d2be:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
    d2c0:	4249      	negs	r1, r1
    d2c2:	b209      	sxth	r1, r1
    d2c4:	f7ff bf9a 	b.w	d1fc <z_shell_op_cursor_move>

0000d2c8 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    d2c8:	6883      	ldr	r3, [r0, #8]
    d2ca:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
    d2cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    d2ce:	1ac9      	subs	r1, r1, r3
    d2d0:	b209      	sxth	r1, r1
    d2d2:	f7ff bf93 	b.w	d1fc <z_shell_op_cursor_move>

0000d2d6 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    d2d6:	6883      	ldr	r3, [r0, #8]
    d2d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    d2da:	b11b      	cbz	r3, d2e4 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
    d2dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d2e0:	f7ff bf8c 	b.w	d1fc <z_shell_op_cursor_move>
}
    d2e4:	4770      	bx	lr

0000d2e6 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    d2e6:	6883      	ldr	r3, [r0, #8]
    d2e8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    d2ea:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    d2ec:	429a      	cmp	r2, r3
    d2ee:	d202      	bcs.n	d2f6 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
    d2f0:	2101      	movs	r1, #1
    d2f2:	f7ff bf83 	b.w	d1fc <z_shell_op_cursor_move>
}
    d2f6:	4770      	bx	lr

0000d2f8 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    d2f8:	6883      	ldr	r3, [r0, #8]
    d2fa:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    d2fc:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    d2fe:	4413      	add	r3, r2
    d300:	2200      	movs	r2, #0
    d302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
    d306:	f7f6 b9b9 	b.w	367c <z_clear_eos>

0000d30a <z_shell_cmd_line_erase>:
{
    d30a:	b510      	push	{r4, lr}
    d30c:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    d30e:	6880      	ldr	r0, [r0, #8]
    d310:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    d312:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d314:	3020      	adds	r0, #32
    d316:	f7ff fd55 	bl	cdc4 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    d31a:	68a3      	ldr	r3, [r4, #8]
    d31c:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
    d31e:	4620      	mov	r0, r4
    d320:	f1c1 0101 	rsb	r1, r1, #1
    d324:	f7f6 f9d2 	bl	36cc <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    d328:	68a3      	ldr	r3, [r4, #8]
    d32a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    d32c:	4620      	mov	r0, r4
    d32e:	3901      	subs	r1, #1
    d330:	f7f6 f9b6 	bl	36a0 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
    d334:	4620      	mov	r0, r4
}
    d336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
    d33a:	f7f6 b99f 	b.w	367c <z_clear_eos>

0000d33e <z_shell_write>:
{
    d33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d342:	4605      	mov	r5, r0
    d344:	b086      	sub	sp, #24
    d346:	460f      	mov	r7, r1
    d348:	4614      	mov	r4, r2
	size_t offset = 0;
    d34a:	2600      	movs	r6, #0
	while (length) {
    d34c:	b914      	cbnz	r4, d354 <z_shell_write+0x16>
}
    d34e:	b006      	add	sp, #24
    d350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    d354:	6868      	ldr	r0, [r5, #4]
    d356:	6803      	ldr	r3, [r0, #0]
    d358:	4622      	mov	r2, r4
    d35a:	f8d3 800c 	ldr.w	r8, [r3, #12]
    d35e:	19b9      	adds	r1, r7, r6
    d360:	466b      	mov	r3, sp
    d362:	47c0      	blx	r8
		offset += tmp_cnt;
    d364:	9a00      	ldr	r2, [sp, #0]
    d366:	4416      	add	r6, r2
		length -= tmp_cnt;
    d368:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
    d36a:	2a00      	cmp	r2, #0
    d36c:	d1ee      	bne.n	d34c <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    d36e:	68ab      	ldr	r3, [r5, #8]
    d370:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
    d372:	2903      	cmp	r1, #3
    d374:	d0ea      	beq.n	d34c <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    d376:	2902      	cmp	r1, #2
    d378:	d813      	bhi.n	d3a2 <z_shell_write+0x64>
		k_poll_event_init(&event,
    d37a:	f503 7326 	add.w	r3, r3, #664	; 0x298
    d37e:	2101      	movs	r1, #1
    d380:	a801      	add	r0, sp, #4
    d382:	f001 ffac 	bl	f2de <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
    d386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d38a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d38e:	2101      	movs	r1, #1
    d390:	a801      	add	r0, sp, #4
    d392:	f7fe f9c7 	bl	b724 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
    d396:	68a8      	ldr	r0, [r5, #8]
    d398:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
    d39c:	f001 ffc1 	bl	f322 <z_impl_k_poll_signal_reset>
    d3a0:	e7d4      	b.n	d34c <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
    d3a2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
    d3a6:	0792      	lsls	r2, r2, #30
    d3a8:	d5fb      	bpl.n	d3a2 <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d3aa:	f3bf 8f5b 	dmb	ish
    d3ae:	f503 7319 	add.w	r3, r3, #612	; 0x264
    d3b2:	e853 2f00 	ldrex	r2, [r3]
    d3b6:	f022 0202 	bic.w	r2, r2, #2
    d3ba:	e843 2100 	strex	r1, r2, [r3]
    d3be:	2900      	cmp	r1, #0
    d3c0:	d1f7      	bne.n	d3b2 <z_shell_write+0x74>
    d3c2:	f3bf 8f5b 	dmb	ish
	return ret;
    d3c6:	e7c1      	b.n	d34c <z_shell_write+0xe>

0000d3c8 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
    d3c8:	f7ff bfb9 	b.w	d33e <z_shell_write>

0000d3cc <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
    d3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d3ce:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
    d3d0:	6881      	ldr	r1, [r0, #8]
    d3d2:	461e      	mov	r6, r3
    d3d4:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    d3d8:	06db      	lsls	r3, r3, #27
{
    d3da:	4604      	mov	r4, r0
    d3dc:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    d3de:	d517      	bpl.n	d410 <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
    d3e0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    d3e4:	42bb      	cmp	r3, r7
    d3e6:	d013      	beq.n	d410 <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    d3e8:	2202      	movs	r2, #2
    d3ea:	312e      	adds	r1, #46	; 0x2e
    d3ec:	a801      	add	r0, sp, #4
    d3ee:	f000 fe71 	bl	e0d4 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
    d3f2:	4639      	mov	r1, r7
    d3f4:	4620      	mov	r0, r4
    d3f6:	f7f6 f987 	bl	3708 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    d3fa:	6960      	ldr	r0, [r4, #20]
    d3fc:	4632      	mov	r2, r6
    d3fe:	4629      	mov	r1, r5
    d400:	f7f6 f902 	bl	3608 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
    d404:	a901      	add	r1, sp, #4
    d406:	4620      	mov	r0, r4
    d408:	f7f6 f99e 	bl	3748 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    d40c:	b003      	add	sp, #12
    d40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    d410:	6960      	ldr	r0, [r4, #20]
    d412:	4632      	mov	r2, r6
    d414:	4629      	mov	r1, r5
}
    d416:	b003      	add	sp, #12
    d418:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    d41c:	f7f6 b8f4 	b.w	3608 <z_shell_fprintf_fmt>

0000d420 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
    d420:	b40c      	push	{r2, r3}
    d422:	b507      	push	{r0, r1, r2, lr}
    d424:	ab04      	add	r3, sp, #16
    d426:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
    d42a:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
    d42c:	f7ff ffce 	bl	d3cc <z_shell_vfprintf>
	va_end(args);
}
    d430:	b003      	add	sp, #12
    d432:	f85d eb04 	ldr.w	lr, [sp], #4
    d436:	b002      	add	sp, #8
    d438:	4770      	bx	lr

0000d43a <data_insert>:
{
    d43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d43e:	6886      	ldr	r6, [r0, #8]
    d440:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    d442:	18ab      	adds	r3, r5, r2
    d444:	2bff      	cmp	r3, #255	; 0xff
{
    d446:	4607      	mov	r7, r0
    d448:	4688      	mov	r8, r1
    d44a:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    d44c:	dc1e      	bgt.n	d48c <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d44e:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
    d450:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    d452:	3342      	adds	r3, #66	; 0x42
    d454:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d456:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
    d458:	462a      	mov	r2, r5
    d45a:	4631      	mov	r1, r6
    d45c:	1930      	adds	r0, r6, r4
    d45e:	f000 fe21 	bl	e0a4 <memmove>
	memcpy(curr_pos, data, len);
    d462:	4622      	mov	r2, r4
    d464:	4641      	mov	r1, r8
    d466:	4630      	mov	r0, r6
    d468:	f000 fe34 	bl	e0d4 <memcpy>
	shell->ctx->cmd_buff_len += len;
    d46c:	68b9      	ldr	r1, [r7, #8]
    d46e:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
    d470:	4423      	add	r3, r4
    d472:	b29b      	uxth	r3, r3
    d474:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    d476:	440b      	add	r3, r1
    d478:	2200      	movs	r2, #0
    d47a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    d47e:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    d482:	079b      	lsls	r3, r3, #30
    d484:	d404      	bmi.n	d490 <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
    d486:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
    d488:	4414      	add	r4, r2
    d48a:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
    d48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    d490:	4629      	mov	r1, r5
    d492:	4638      	mov	r0, r7
}
    d494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    d498:	f7f6 b9d0 	b.w	383c <reprint_from_cursor>

0000d49c <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    d49c:	f7ff bfcd 	b.w	d43a <data_insert>

0000d4a0 <z_shell_op_char_delete>:
{
    d4a0:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d4a2:	6883      	ldr	r3, [r0, #8]
{
    d4a4:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    d4a6:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
    d4a8:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    d4aa:	1a24      	subs	r4, r4, r0
    d4ac:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    d4ae:	b18c      	cbz	r4, d4d4 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    d4b0:	3042      	adds	r0, #66	; 0x42
    d4b2:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
    d4b4:	4622      	mov	r2, r4
    d4b6:	1c41      	adds	r1, r0, #1
    d4b8:	f000 fdf4 	bl	e0a4 <memmove>
	--shell->ctx->cmd_buff_len;
    d4bc:	68aa      	ldr	r2, [r5, #8]
    d4be:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    d4c0:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    d4c2:	3b01      	subs	r3, #1
    d4c4:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    d4c6:	4628      	mov	r0, r5
    d4c8:	2201      	movs	r2, #1
}
    d4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    d4ce:	b289      	uxth	r1, r1
    d4d0:	f7f6 b9b4 	b.w	383c <reprint_from_cursor>
}
    d4d4:	bd38      	pop	{r3, r4, r5, pc}

0000d4d6 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    d4d6:	6883      	ldr	r3, [r0, #8]
    d4d8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    d4da:	b510      	push	{r4, lr}
    d4dc:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    d4de:	b152      	cbz	r2, d4f6 <z_shell_op_char_backspace+0x20>
    d4e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    d4e2:	b143      	cbz	r3, d4f6 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
    d4e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d4e8:	f7ff fe88 	bl	d1fc <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
    d4ec:	4620      	mov	r0, r4
}
    d4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
    d4f2:	f7ff bfd5 	b.w	d4a0 <z_shell_op_char_delete>
}
    d4f6:	bd10      	pop	{r4, pc}

0000d4f8 <process_msg2_from_buffer>:
		irq_unlock(key);
	}
}

static bool process_msg2_from_buffer(const struct shell *shell)
{
    d4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = shell->log_backend;
    d4fa:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    d4fc:	699e      	ldr	r6, [r3, #24]
	const struct log_output *log_output = log_backend->log_output;
    d4fe:	689f      	ldr	r7, [r3, #8]
	return sh->ctx->cfg.flags.use_colors == 1;
    d500:	6883      	ldr	r3, [r0, #8]
	union log_msg2_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);

	msg = (union log_msg2_generic *)mpsc_pbuf_claim(mpsc_buffer);
    d502:	4630      	mov	r0, r6
    d504:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
    d508:	f7fe ffcc 	bl	c4a4 <mpsc_pbuf_claim>
    d50c:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
    d510:	4604      	mov	r4, r0
    d512:	b160      	cbz	r0, d52e <process_msg2_from_buffer+0x36>
		flags |= LOG_OUTPUT_FLAG_COLORS;
    d514:	2d00      	cmp	r5, #0
	log_output_msg2_process(log_output, &msg->log, flags);
    d516:	4601      	mov	r1, r0
    d518:	bf0c      	ite	eq
    d51a:	220e      	moveq	r2, #14
    d51c:	220f      	movne	r2, #15
    d51e:	4638      	mov	r0, r7
    d520:	f7f4 fada 	bl	1ad8 <log_output_msg2_process>
		return false;
	}

	process_log_msg2(shell, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
    d524:	4630      	mov	r0, r6
    d526:	4621      	mov	r1, r4
    d528:	f7ff f808 	bl	c53c <mpsc_pbuf_free>

	return true;
    d52c:	2001      	movs	r0, #1
}
    d52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d530 <log2_process>:

static void log2_process(const struct log_backend *const backend,
		    union log_msg2_generic *msg)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d530:	6843      	ldr	r3, [r0, #4]
{
    d532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d536:	681e      	ldr	r6, [r3, #0]
    d538:	68b2      	ldr	r2, [r6, #8]
	const struct shell_log_backend *log_backend = shell->log_backend;
    d53a:	69f3      	ldr	r3, [r6, #28]
    d53c:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);
	struct k_poll_signal *signal;

	switch (shell->log_backend->control_block->state) {
    d540:	68da      	ldr	r2, [r3, #12]
    d542:	7912      	ldrb	r2, [r2, #4]
    d544:	2a01      	cmp	r2, #1
{
    d546:	460d      	mov	r5, r1
    d548:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (shell->log_backend->control_block->state) {
    d54c:	d003      	beq.n	d556 <log2_process+0x26>
    d54e:	2a03      	cmp	r2, #3
    d550:	d042      	beq.n	d5d8 <log2_process+0xa8>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
    d552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    d556:	699f      	ldr	r7, [r3, #24]
			copy_to_pbuffer(mpsc_buffer, msg,
    d558:	6918      	ldr	r0, [r3, #16]
	return msg->generic.type == Z_LOG_MSG2_LOG;
    d55a:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
    d55c:	0759      	lsls	r1, r3, #29
    d55e:	d439      	bmi.n	d5d4 <log2_process+0xa4>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d560:	682b      	ldr	r3, [r5, #0]
    d562:	f3c3 2449 	ubfx	r4, r3, #9, #10
    d566:	886b      	ldrh	r3, [r5, #2]
    d568:	f3c3 03cb 	ubfx	r3, r3, #3, #12
    d56c:	441c      	add	r4, r3
    d56e:	3413      	adds	r4, #19
    d570:	f024 0407 	bic.w	r4, r4, #7
    d574:	08a4      	lsrs	r4, r4, #2
    d576:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    d57a:	f240 3ce7 	movw	ip, #999	; 0x3e7
    d57e:	2100      	movs	r1, #0
    d580:	fbe0 c10e 	umlal	ip, r1, r0, lr
    d584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d588:	2300      	movs	r3, #0
    d58a:	4660      	mov	r0, ip
    d58c:	f7f2 fdb8 	bl	100 <__aeabi_uldivmod>
    d590:	4602      	mov	r2, r0
    d592:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
    d594:	4638      	mov	r0, r7
    d596:	4621      	mov	r1, r4
    d598:	f7fe fef1 	bl	c37e <mpsc_pbuf_alloc>
	if (!dst) {
    d59c:	4680      	mov	r8, r0
    d59e:	b188      	cbz	r0, d5c4 <log2_process+0x94>
	dst->hdr.data = msg->buf.hdr.data;
    d5a0:	4629      	mov	r1, r5
    d5a2:	6802      	ldr	r2, [r0, #0]
    d5a4:	f851 3b04 	ldr.w	r3, [r1], #4
    d5a8:	f3c3 039d 	ubfx	r3, r3, #2, #30
    d5ac:	f363 029f 	bfi	r2, r3, #2, #30
    d5b0:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
    d5b4:	1e62      	subs	r2, r4, #1
    d5b6:	0092      	lsls	r2, r2, #2
    d5b8:	f000 fd8c 	bl	e0d4 <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
    d5bc:	4641      	mov	r1, r8
    d5be:	4638      	mov	r0, r7
    d5c0:	f7fe ff53 	bl	c46a <mpsc_pbuf_commit>
				signal =
    d5c4:	68b0      	ldr	r0, [r6, #8]
    d5c6:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
    d5ca:	2100      	movs	r1, #0
}
    d5cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d5d0:	f7fe b904 	b.w	b7dc <z_impl_k_poll_signal_raise>
	return 0;
    d5d4:	2400      	movs	r4, #0
    d5d6:	e7ce      	b.n	d576 <log2_process+0x46>
		z_shell_cmd_line_erase(shell);
    d5d8:	4630      	mov	r0, r6
	const struct log_output *log_output = log_backend->log_output;
    d5da:	689f      	ldr	r7, [r3, #8]
		z_shell_cmd_line_erase(shell);
    d5dc:	f7ff fe95 	bl	d30a <z_shell_cmd_line_erase>
		flags |= LOG_OUTPUT_FLAG_COLORS;
    d5e0:	2c00      	cmp	r4, #0
    d5e2:	bf0c      	ite	eq
    d5e4:	f04f 080e 	moveq.w	r8, #14
    d5e8:	f04f 080f 	movne.w	r8, #15
	__asm__ volatile(
    d5ec:	f04f 0320 	mov.w	r3, #32
    d5f0:	f3ef 8411 	mrs	r4, BASEPRI
    d5f4:	f383 8812 	msr	BASEPRI_MAX, r3
    d5f8:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    d5fc:	68b3      	ldr	r3, [r6, #8]
    d5fe:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
    d602:	051a      	lsls	r2, r3, #20
    d604:	d402      	bmi.n	d60c <log2_process+0xdc>
			z_shell_cmd_line_erase(shell);
    d606:	4630      	mov	r0, r6
    d608:	f7ff fe7f 	bl	d30a <z_shell_cmd_line_erase>
	log_output_msg2_process(log_output, &msg->log, flags);
    d60c:	4642      	mov	r2, r8
    d60e:	4629      	mov	r1, r5
    d610:	4638      	mov	r0, r7
    d612:	f7f4 fa61 	bl	1ad8 <log_output_msg2_process>
    d616:	68b3      	ldr	r3, [r6, #8]
    d618:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
    d61c:	051b      	lsls	r3, r3, #20
    d61e:	d402      	bmi.n	d626 <log2_process+0xf6>
			z_shell_print_prompt_and_cmd(shell);
    d620:	4630      	mov	r0, r6
    d622:	f7f6 f97b 	bl	391c <z_shell_print_prompt_and_cmd>
	__asm__ volatile(
    d626:	f384 8811 	msr	BASEPRI, r4
    d62a:	f3bf 8f6f 	isb	sy
}
    d62e:	e790      	b.n	d552 <log2_process+0x22>

0000d630 <dropped>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d630:	6843      	ldr	r3, [r0, #4]
    d632:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d634:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
    d638:	f3bf 8f5b 	dmb	ish
    d63c:	e853 0f00 	ldrex	r0, [r3]
    d640:	4408      	add	r0, r1
    d642:	e843 0c00 	strex	ip, r0, [r3]
    d646:	f1bc 0f00 	cmp.w	ip, #0
    d64a:	d1f7      	bne.n	d63c <dropped+0xc>
    d64c:	f3bf 8f5b 	dmb	ish
    d650:	68d3      	ldr	r3, [r2, #12]
    d652:	f3bf 8f5b 	dmb	ish
    d656:	e853 2f00 	ldrex	r2, [r3]
    d65a:	440a      	add	r2, r1
    d65c:	e843 2000 	strex	r0, r2, [r3]
    d660:	2800      	cmp	r0, #0
    d662:	d1f8      	bne.n	d656 <dropped+0x26>
    d664:	f3bf 8f5b 	dmb	ish
}
    d668:	4770      	bx	lr

0000d66a <z_shell_log_backend_output_func>:
{
    d66a:	b510      	push	{r4, lr}
    d66c:	4613      	mov	r3, r2
    d66e:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
    d670:	460a      	mov	r2, r1
    d672:	4601      	mov	r1, r0
    d674:	4618      	mov	r0, r3
    d676:	f7ff fea7 	bl	d3c8 <z_shell_print_stream>
}
    d67a:	4620      	mov	r0, r4
    d67c:	bd10      	pop	{r4, pc}

0000d67e <z_shell_log_backend_enable>:
{
    d67e:	b570      	push	{r4, r5, r6, lr}
    d680:	4604      	mov	r4, r0
    d682:	460d      	mov	r5, r1
    d684:	4616      	mov	r6, r2
		mpsc_pbuf_init(backend->mpsc_buffer,
    d686:	e9d0 1005 	ldrd	r1, r0, [r0, #20]
    d68a:	f7fe fe59 	bl	c340 <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
    d68e:	4632      	mov	r2, r6
    d690:	6820      	ldr	r0, [r4, #0]
    d692:	4629      	mov	r1, r5
    d694:	f7f4 f8a0 	bl	17d8 <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
    d698:	68a3      	ldr	r3, [r4, #8]
    d69a:	685b      	ldr	r3, [r3, #4]
    d69c:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
    d69e:	68e3      	ldr	r3, [r4, #12]
    d6a0:	2200      	movs	r2, #0
    d6a2:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
    d6a4:	2201      	movs	r2, #1
    d6a6:	711a      	strb	r2, [r3, #4]
}
    d6a8:	bd70      	pop	{r4, r5, r6, pc}

0000d6aa <z_shell_log_backend_disable>:
{
    d6aa:	b510      	push	{r4, lr}
    d6ac:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
    d6ae:	6800      	ldr	r0, [r0, #0]
    d6b0:	f7ff f8e3 	bl	c87a <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
    d6b4:	68e3      	ldr	r3, [r4, #12]
    d6b6:	2202      	movs	r2, #2
    d6b8:	711a      	strb	r2, [r3, #4]
}
    d6ba:	bd10      	pop	{r4, pc}

0000d6bc <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d6bc:	6843      	ldr	r3, [r0, #4]
{
    d6be:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    d6c0:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
    d6c2:	6860      	ldr	r0, [r4, #4]
    d6c4:	6803      	ldr	r3, [r0, #0]
    d6c6:	2101      	movs	r1, #1
    d6c8:	689b      	ldr	r3, [r3, #8]
    d6ca:	4798      	blx	r3
	if (err == 0) {
    d6cc:	bb48      	cbnz	r0, d722 <panic+0x66>
		shell->log_backend->control_block->state =
    d6ce:	69e3      	ldr	r3, [r4, #28]
    d6d0:	68db      	ldr	r3, [r3, #12]
    d6d2:	2203      	movs	r2, #3
    d6d4:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d6d6:	68a3      	ldr	r3, [r4, #8]
    d6d8:	f3bf 8f5b 	dmb	ish
    d6dc:	f503 7319 	add.w	r3, r3, #612	; 0x264
    d6e0:	e853 2f00 	ldrex	r2, [r3]
    d6e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    d6e8:	e843 2100 	strex	r1, r2, [r3]
    d6ec:	2900      	cmp	r1, #0
    d6ee:	d1f7      	bne.n	d6e0 <panic+0x24>
    d6f0:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    d6f4:	68a0      	ldr	r0, [r4, #8]
    d6f6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    d6f8:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d6fa:	3020      	adds	r0, #32
    d6fc:	f7ff fb62 	bl	cdc4 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
    d700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d704:	4620      	mov	r0, r4
    d706:	f7f5 ffcb 	bl	36a0 <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
    d70a:	68a3      	ldr	r3, [r4, #8]
    d70c:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
    d70e:	4620      	mov	r0, r4
    d710:	4249      	negs	r1, r1
    d712:	f7f5 ffdb 	bl	36cc <z_shell_op_cursor_horiz_move>
			while (process_msg2_from_buffer(shell)) {
    d716:	4620      	mov	r0, r4
    d718:	f7ff feee 	bl	d4f8 <process_msg2_from_buffer>
    d71c:	2800      	cmp	r0, #0
    d71e:	d1fa      	bne.n	d716 <panic+0x5a>
}
    d720:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
    d722:	69e0      	ldr	r0, [r4, #28]
}
    d724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
    d728:	f7ff bfbf 	b.w	d6aa <z_shell_log_backend_disable>

0000d72c <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
    d72c:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
    d72e:	685b      	ldr	r3, [r3, #4]
{
    d730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
    d732:	681c      	ldr	r4, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
    d734:	68a3      	ldr	r3, [r4, #8]
    d736:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d73a:	68c3      	ldr	r3, [r0, #12]
    d73c:	f3bf 8f5b 	dmb	ish
{
    d740:	4605      	mov	r5, r0
    d742:	f3c6 1600 	ubfx	r6, r6, #4, #1
    d746:	2200      	movs	r2, #0
    d748:	e853 7f00 	ldrex	r7, [r3]
    d74c:	e843 2100 	strex	r1, r2, [r3]
    d750:	2900      	cmp	r1, #0
    d752:	d1f9      	bne.n	d748 <z_shell_log_backend_process+0x1c>
    d754:	f3bf 8f5b 	dmb	ish
	if (dropped) {
    d758:	b19f      	cbz	r7, d782 <z_shell_log_backend_process+0x56>
		if (colors) {
    d75a:	b14e      	cbz	r6, d770 <z_shell_log_backend_process+0x44>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    d75c:	68a1      	ldr	r1, [r4, #8]
    d75e:	2202      	movs	r2, #2
    d760:	312e      	adds	r1, #46	; 0x2e
    d762:	a801      	add	r0, sp, #4
    d764:	f000 fcb6 	bl	e0d4 <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
    d768:	2101      	movs	r1, #1
    d76a:	4620      	mov	r0, r4
    d76c:	f7f5 ffcc 	bl	3708 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
    d770:	68a8      	ldr	r0, [r5, #8]
    d772:	4639      	mov	r1, r7
    d774:	f7f4 fa14 	bl	1ba0 <log_output_dropped_process>
		if (colors) {
    d778:	b11e      	cbz	r6, d782 <z_shell_log_backend_process+0x56>
			z_shell_vt100_colors_restore(shell, &col);
    d77a:	a901      	add	r1, sp, #4
    d77c:	4620      	mov	r0, r4
    d77e:	f7f5 ffe3 	bl	3748 <z_shell_vt100_colors_restore>
		return process_msg2_from_buffer(shell);
    d782:	4620      	mov	r0, r4
}
    d784:	b003      	add	sp, #12
    d786:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return process_msg2_from_buffer(shell);
    d78a:	f7ff beb5 	b.w	d4f8 <process_msg2_from_buffer>

0000d78e <z_shell_raw_fprintf>:
{
    d78e:	b40e      	push	{r1, r2, r3}
    d790:	b503      	push	{r0, r1, lr}
    d792:	aa03      	add	r2, sp, #12
    d794:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    d798:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    d79a:	f7f5 ff35 	bl	3608 <z_shell_fprintf_fmt>
}
    d79e:	b002      	add	sp, #8
    d7a0:	f85d eb04 	ldr.w	lr, [sp], #4
    d7a4:	b003      	add	sp, #12
    d7a6:	4770      	bx	lr

0000d7a8 <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *shell, const char *str,
    d7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7ac:	4604      	mov	r4, r0
    d7ae:	4690      	mov	r8, r2
	if (str == NULL) {
    d7b0:	460e      	mov	r6, r1
    d7b2:	2900      	cmp	r1, #0
    d7b4:	d069      	beq.n	d88a <formatted_text_print.constprop.0+0xe2>
    d7b6:	2500      	movs	r5, #0
	while (isspace((int) *(str + offset))) {
    d7b8:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    d7ba:	2b20      	cmp	r3, #32
    d7bc:	d023      	beq.n	d806 <formatted_text_print.constprop.0+0x5e>
    d7be:	3b09      	subs	r3, #9
    d7c0:	2b04      	cmp	r3, #4
    d7c2:	d920      	bls.n	d806 <formatted_text_print.constprop.0+0x5e>
    d7c4:	4630      	mov	r0, r6
    d7c6:	f000 fc2f 	bl	e028 <strlen>
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    d7ca:	68a3      	ldr	r3, [r4, #8]
    d7cc:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
    d7ce:	b280      	uxth	r0, r0
    d7d0:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    d7d2:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    d7d6:	4298      	cmp	r0, r3
    d7d8:	eb06 0905 	add.w	r9, r6, r5
    d7dc:	d915      	bls.n	d80a <formatted_text_print.constprop.0+0x62>
    d7de:	4648      	mov	r0, r9
		size_t idx = 0;
    d7e0:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx)))) {
    d7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
    d7e6:	2a20      	cmp	r2, #32
    d7e8:	d006      	beq.n	d7f8 <formatted_text_print.constprop.0+0x50>
    d7ea:	f1a2 0c09 	sub.w	ip, r2, #9
    d7ee:	f1bc 0f04 	cmp.w	ip, #4
    d7f2:	d802      	bhi.n	d7fa <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
    d7f4:	2a0a      	cmp	r2, #10
    d7f6:	d02f      	beq.n	d858 <formatted_text_print.constprop.0+0xb0>
    d7f8:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
    d7fa:	eb08 0207 	add.w	r2, r8, r7
    d7fe:	4291      	cmp	r1, r2
    d800:	d929      	bls.n	d856 <formatted_text_print.constprop.0+0xae>
			++idx;
    d802:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
    d804:	e7ed      	b.n	d7e2 <formatted_text_print.constprop.0+0x3a>
		++offset;
    d806:	3501      	adds	r5, #1
    d808:	e7d6      	b.n	d7b8 <formatted_text_print.constprop.0+0x10>
    d80a:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
    d80c:	2700      	movs	r7, #0
    d80e:	42b8      	cmp	r0, r7
    d810:	d016      	beq.n	d840 <formatted_text_print.constprop.0+0x98>
				if (*(str + offset + idx) == '\n') {
    d812:	f813 2b01 	ldrb.w	r2, [r3], #1
    d816:	2a0a      	cmp	r2, #10
    d818:	eb05 0a07 	add.w	sl, r5, r7
    d81c:	d119      	bne.n	d852 <formatted_text_print.constprop.0+0xaa>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    d81e:	6960      	ldr	r0, [r4, #20]
    d820:	f7ff fa7e 	bl	cd20 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
    d824:	4649      	mov	r1, r9
    d826:	463a      	mov	r2, r7
    d828:	4620      	mov	r0, r4
    d82a:	f7ff fd88 	bl	d33e <z_shell_write>
					z_cursor_next_line_move(shell);
    d82e:	6960      	ldr	r0, [r4, #20]
    d830:	f7f6 f88c 	bl	394c <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
    d834:	4641      	mov	r1, r8
    d836:	4620      	mov	r0, r4
					offset += idx + 1;
    d838:	f10a 0501 	add.w	r5, sl, #1
					z_shell_op_cursor_horiz_move(shell,
    d83c:	f7f5 ff46 	bl	36cc <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    d840:	6960      	ldr	r0, [r4, #20]
    d842:	1971      	adds	r1, r6, r5
    d844:	f7ff ffa3 	bl	d78e <z_shell_raw_fprintf>
	z_cursor_next_line_move(shell);
    d848:	6960      	ldr	r0, [r4, #20]
}
    d84a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
    d84e:	f7f6 b87d 	b.w	394c <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
    d852:	3701      	adds	r7, #1
    d854:	e7db      	b.n	d80e <formatted_text_print.constprop.0+0x66>
    d856:	461f      	mov	r7, r3
    d858:	6960      	ldr	r0, [r4, #20]
    d85a:	f7ff fa61 	bl	cd20 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
    d85e:	463a      	mov	r2, r7
    d860:	4649      	mov	r1, r9
    d862:	4620      	mov	r0, r4
    d864:	f7ff fd6b 	bl	d33e <z_shell_write>
		offset += length;
    d868:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
    d86a:	5d73      	ldrb	r3, [r6, r5]
    d86c:	2b20      	cmp	r3, #32
    d86e:	d00a      	beq.n	d886 <formatted_text_print.constprop.0+0xde>
    d870:	3b09      	subs	r3, #9
    d872:	2b04      	cmp	r3, #4
    d874:	d907      	bls.n	d886 <formatted_text_print.constprop.0+0xde>
		z_cursor_next_line_move(shell);
    d876:	6960      	ldr	r0, [r4, #20]
    d878:	f7f6 f868 	bl	394c <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
    d87c:	4641      	mov	r1, r8
    d87e:	4620      	mov	r0, r4
    d880:	f7f5 ff24 	bl	36cc <z_shell_op_cursor_horiz_move>
	while (true) {
    d884:	e79e      	b.n	d7c4 <formatted_text_print.constprop.0+0x1c>
			++offset;
    d886:	3501      	adds	r5, #1
    d888:	e7ef      	b.n	d86a <formatted_text_print.constprop.0+0xc2>
}
    d88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d88e <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    d88e:	6983      	ldr	r3, [r0, #24]
    d890:	2000      	movs	r0, #0
    d892:	6018      	str	r0, [r3, #0]
}
    d894:	4770      	bx	lr

0000d896 <z_shell_raw_fprintf>:
{
    d896:	b40e      	push	{r1, r2, r3}
    d898:	b503      	push	{r0, r1, lr}
    d89a:	aa03      	add	r2, sp, #12
    d89c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    d8a0:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    d8a2:	f7f5 feb1 	bl	3608 <z_shell_fprintf_fmt>
}
    d8a6:	b002      	add	sp, #8
    d8a8:	f85d eb04 	ldr.w	lr, [sp], #4
    d8ac:	b003      	add	sp, #12
    d8ae:	4770      	bx	lr

0000d8b0 <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d8b0:	6883      	ldr	r3, [r0, #8]
    d8b2:	f3bf 8f5b 	dmb	ish
    d8b6:	f503 7318 	add.w	r3, r3, #608	; 0x260
    d8ba:	e853 2f00 	ldrex	r2, [r3]
    d8be:	f022 0208 	bic.w	r2, r2, #8
    d8c2:	e843 2100 	strex	r1, r2, [r3]
    d8c6:	2900      	cmp	r1, #0
    d8c8:	d1f7      	bne.n	d8ba <cmd_bacskpace_mode_backspace+0xa>
    d8ca:	f3bf 8f5b 	dmb	ish
}
    d8ce:	2000      	movs	r0, #0
    d8d0:	4770      	bx	lr

0000d8d2 <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d8d2:	6883      	ldr	r3, [r0, #8]
    d8d4:	f3bf 8f5b 	dmb	ish
    d8d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
    d8dc:	e853 2f00 	ldrex	r2, [r3]
    d8e0:	f042 0208 	orr.w	r2, r2, #8
    d8e4:	e843 2100 	strex	r1, r2, [r3]
    d8e8:	2900      	cmp	r1, #0
    d8ea:	d1f7      	bne.n	d8dc <cmd_bacskpace_mode_delete+0xa>
    d8ec:	f3bf 8f5b 	dmb	ish
}
    d8f0:	2000      	movs	r0, #0
    d8f2:	4770      	bx	lr

0000d8f4 <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d8f4:	6883      	ldr	r3, [r0, #8]
    d8f6:	f3bf 8f5b 	dmb	ish
    d8fa:	f503 7318 	add.w	r3, r3, #608	; 0x260
    d8fe:	e853 2f00 	ldrex	r2, [r3]
    d902:	f022 0202 	bic.w	r2, r2, #2
    d906:	e843 2100 	strex	r1, r2, [r3]
    d90a:	2900      	cmp	r1, #0
    d90c:	d1f7      	bne.n	d8fe <cmd_echo_off+0xa>
    d90e:	f3bf 8f5b 	dmb	ish
}
    d912:	2000      	movs	r0, #0
    d914:	4770      	bx	lr

0000d916 <cmd_colors_off>:
    d916:	6883      	ldr	r3, [r0, #8]
    d918:	f3bf 8f5b 	dmb	ish
    d91c:	f503 7318 	add.w	r3, r3, #608	; 0x260
    d920:	e853 2f00 	ldrex	r2, [r3]
    d924:	f022 0210 	bic.w	r2, r2, #16
    d928:	e843 2100 	strex	r1, r2, [r3]
    d92c:	2900      	cmp	r1, #0
    d92e:	d1f7      	bne.n	d920 <cmd_colors_off+0xa>
    d930:	f3bf 8f5b 	dmb	ish
}
    d934:	2000      	movs	r0, #0
    d936:	4770      	bx	lr

0000d938 <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d938:	6883      	ldr	r3, [r0, #8]
    d93a:	f3bf 8f5b 	dmb	ish
    d93e:	f503 7318 	add.w	r3, r3, #608	; 0x260
    d942:	e853 2f00 	ldrex	r2, [r3]
    d946:	f042 0210 	orr.w	r2, r2, #16
    d94a:	e843 2100 	strex	r1, r2, [r3]
    d94e:	2900      	cmp	r1, #0
    d950:	d1f7      	bne.n	d942 <cmd_colors_on+0xa>
    d952:	f3bf 8f5b 	dmb	ish
}
    d956:	2000      	movs	r0, #0
    d958:	4770      	bx	lr

0000d95a <cmd_echo_on>:
    d95a:	6883      	ldr	r3, [r0, #8]
    d95c:	f3bf 8f5b 	dmb	ish
    d960:	f503 7318 	add.w	r3, r3, #608	; 0x260
    d964:	e853 2f00 	ldrex	r2, [r3]
    d968:	f042 0202 	orr.w	r2, r2, #2
    d96c:	e843 2100 	strex	r1, r2, [r3]
    d970:	2900      	cmp	r1, #0
    d972:	d1f7      	bne.n	d964 <cmd_echo_on+0xa>
    d974:	f3bf 8f5b 	dmb	ish
}
    d978:	2000      	movs	r0, #0
    d97a:	4770      	bx	lr

0000d97c <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    d97c:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    d97e:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
    d980:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
    d982:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
    d986:	600a      	str	r2, [r1, #0]
	next->prev = prev;
    d988:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    d98a:	2200      	movs	r2, #0
	node->prev = NULL;
    d98c:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
    d990:	8919      	ldrh	r1, [r3, #8]
    d992:	895b      	ldrh	r3, [r3, #10]
    d994:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
    d996:	310c      	adds	r1, #12
    d998:	f7fe fc01 	bl	c19e <ring_buf_get_finish>

	return true;
}
    d99c:	2001      	movs	r0, #1
    d99e:	bd08      	pop	{r3, pc}

0000d9a0 <z_shell_history_mode_exit>:
	history->current = NULL;
    d9a0:	2300      	movs	r3, #0
    d9a2:	60c3      	str	r3, [r0, #12]
}
    d9a4:	4770      	bx	lr

0000d9a6 <z_shell_history_get>:
{
    d9a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9a8:	461f      	mov	r7, r3
	return list->head == list;
    d9aa:	4603      	mov	r3, r0
    d9ac:	4616      	mov	r6, r2
    d9ae:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    d9b2:	429c      	cmp	r4, r3
    d9b4:	d102      	bne.n	d9bc <z_shell_history_get+0x16>
		*len = 0U;
    d9b6:	2000      	movs	r0, #0
    d9b8:	8038      	strh	r0, [r7, #0]
}
    d9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
    d9bc:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
    d9be:	b9b1      	cbnz	r1, d9ee <z_shell_history_get+0x48>
		if (history->current == NULL) {
    d9c0:	2d00      	cmp	r5, #0
    d9c2:	d0f8      	beq.n	d9b6 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    d9c4:	42ac      	cmp	r4, r5
    d9c6:	d102      	bne.n	d9ce <z_shell_history_get+0x28>
	history->current = l_item;
    d9c8:	2300      	movs	r3, #0
    d9ca:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    d9cc:	e7f3      	b.n	d9b6 <z_shell_history_get+0x10>
    d9ce:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
    d9d0:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    d9d2:	2c00      	cmp	r4, #0
    d9d4:	d0ef      	beq.n	d9b6 <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    d9d6:	8922      	ldrh	r2, [r4, #8]
    d9d8:	f104 010c 	add.w	r1, r4, #12
    d9dc:	4630      	mov	r0, r6
    d9de:	f000 fb79 	bl	e0d4 <memcpy>
		*len = h_item->len;
    d9e2:	8923      	ldrh	r3, [r4, #8]
    d9e4:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
    d9e6:	2200      	movs	r2, #0
    d9e8:	54f2      	strb	r2, [r6, r3]
		return true;
    d9ea:	2001      	movs	r0, #1
    d9ec:	e7e5      	b.n	d9ba <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    d9ee:	2d00      	cmp	r5, #0
    d9f0:	d0ee      	beq.n	d9d0 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    d9f2:	6883      	ldr	r3, [r0, #8]
    d9f4:	42ab      	cmp	r3, r5
    d9f6:	d0e7      	beq.n	d9c8 <z_shell_history_get+0x22>
    d9f8:	682c      	ldr	r4, [r5, #0]
    d9fa:	e7e9      	b.n	d9d0 <z_shell_history_get+0x2a>

0000d9fc <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
    d9fc:	b538      	push	{r3, r4, r5, lr}
    d9fe:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    da00:	1d05      	adds	r5, r0, #4
    da02:	6863      	ldr	r3, [r4, #4]
    da04:	42ab      	cmp	r3, r5
    da06:	d004      	beq.n	da12 <z_shell_history_purge+0x16>
    da08:	4620      	mov	r0, r4
    da0a:	f7ff ffb7 	bl	d97c <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
    da0e:	2800      	cmp	r0, #0
    da10:	d1f7      	bne.n	da02 <z_shell_history_purge+0x6>
	}
}
    da12:	bd38      	pop	{r3, r4, r5, pc}

0000da14 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
    da14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
    da18:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
    da1a:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    da1e:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    da22:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    da24:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
    da28:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    da2a:	429d      	cmp	r5, r3
{
    da2c:	4604      	mov	r4, r0
    da2e:	468a      	mov	sl, r1
    da30:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    da32:	d841      	bhi.n	dab8 <z_shell_history_put+0xa4>
	history->current = NULL;
    da34:	2300      	movs	r3, #0
    da36:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
    da38:	2a00      	cmp	r2, #0
    da3a:	d03d      	beq.n	dab8 <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    da3c:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
    da40:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    da42:	4581      	cmp	r9, r0
    da44:	d12d      	bne.n	daa2 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    da46:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
    da48:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
    da4c:	6820      	ldr	r0, [r4, #0]
    da4e:	462a      	mov	r2, r5
    da50:	a901      	add	r1, sp, #4
    da52:	f7fe fb11 	bl	c078 <ring_buf_put_claim>
		if (claim_len < total_len) {
    da56:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    da58:	4606      	mov	r6, r0
		if (claim_len < total_len) {
    da5a:	d930      	bls.n	dabe <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
    da5c:	6820      	ldr	r0, [r4, #0]
    da5e:	462a      	mov	r2, r5
    da60:	a901      	add	r1, sp, #4
    da62:	f7fe fb09 	bl	c078 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    da66:	4285      	cmp	r5, r0
    da68:	d12a      	bne.n	dac0 <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
    da6a:	4631      	mov	r1, r6
    da6c:	6820      	ldr	r0, [r4, #0]
    da6e:	f7fe fb30 	bl	c0d2 <ring_buf_put_finish>
				padding += claim_len;
    da72:	44b0      	add	r8, r6
    da74:	fa1f f888 	uxth.w	r8, r8
    da78:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
    da7a:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    da7c:	4651      	mov	r1, sl
	item->len = len;
    da7e:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
    da80:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
    da84:	463a      	mov	r2, r7
    da86:	f105 000c 	add.w	r0, r5, #12
    da8a:	f000 fb23 	bl	e0d4 <memcpy>
	sys_dnode_t *const head = list->head;
    da8e:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    da90:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
    da92:	e9c5 3900 	strd	r3, r9, [r5]
    da96:	4631      	mov	r1, r6
	head->prev = node;
    da98:	605d      	str	r5, [r3, #4]
	list->head = node;
    da9a:	6065      	str	r5, [r4, #4]
    da9c:	f7fe fb19 	bl	c0d2 <ring_buf_put_finish>
			break;
    daa0:	e00a      	b.n	dab8 <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    daa2:	9001      	str	r0, [sp, #4]
	if (l_item &&
    daa4:	2800      	cmp	r0, #0
    daa6:	d0cf      	beq.n	da48 <z_shell_history_put+0x34>
	   (h_item->len == len) &&
    daa8:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
    daaa:	4293      	cmp	r3, r2
    daac:	d1cc      	bne.n	da48 <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
    daae:	300c      	adds	r0, #12
    dab0:	f000 fae7 	bl	e082 <memcmp>
	   (h_item->len == len) &&
    dab4:	2800      	cmp	r0, #0
    dab6:	d1c7      	bne.n	da48 <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
    dab8:	b003      	add	sp, #12
    daba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
    dabe:	d0dc      	beq.n	da7a <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
    dac0:	6820      	ldr	r0, [r4, #0]
    dac2:	2100      	movs	r1, #0
    dac4:	f7fe fb05 	bl	c0d2 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    dac8:	6863      	ldr	r3, [r4, #4]
    daca:	4599      	cmp	r9, r3
    dacc:	d108      	bne.n	dae0 <z_shell_history_put+0xcc>
			ring_buf_reset(history->ring_buf);
    dace:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    dad0:	2208      	movs	r2, #8
	buf->tail = 0;
    dad2:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    dad6:	2100      	movs	r1, #0
    dad8:	4410      	add	r0, r2
    dada:	f000 fb06 	bl	e0ea <memset>
}
    dade:	e7b5      	b.n	da4c <z_shell_history_put+0x38>
    dae0:	4620      	mov	r0, r4
    dae2:	f7ff ff4b 	bl	d97c <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
    dae6:	2800      	cmp	r0, #0
    dae8:	d1b0      	bne.n	da4c <z_shell_history_put+0x38>
    daea:	e7f0      	b.n	dace <z_shell_history_put+0xba>

0000daec <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    daec:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    daee:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    daf2:	2300      	movs	r3, #0
    daf4:	60c3      	str	r3, [r0, #12]
}
    daf6:	4770      	bx	lr

0000daf8 <z_shell_has_wildcard>:
{
    daf8:	b510      	push	{r4, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    dafa:	4604      	mov	r4, r0
    dafc:	b908      	cbnz	r0, db02 <z_shell_has_wildcard+0xa>
	return false;
    dafe:	2000      	movs	r0, #0
}
    db00:	bd10      	pop	{r4, pc}
    db02:	f000 fa91 	bl	e028 <strlen>
	for (size_t i = 0; i < str_len; i++) {
    db06:	2300      	movs	r3, #0
    db08:	b280      	uxth	r0, r0
    db0a:	4283      	cmp	r3, r0
    db0c:	d2f7      	bcs.n	dafe <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
    db0e:	5ce2      	ldrb	r2, [r4, r3]
    db10:	2a3f      	cmp	r2, #63	; 0x3f
    db12:	d003      	beq.n	db1c <z_shell_has_wildcard+0x24>
    db14:	2a2a      	cmp	r2, #42	; 0x2a
    db16:	d001      	beq.n	db1c <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
    db18:	3301      	adds	r3, #1
    db1a:	e7f6      	b.n	db0a <z_shell_has_wildcard+0x12>
			return true;
    db1c:	2001      	movs	r0, #1
    db1e:	e7ef      	b.n	db00 <z_shell_has_wildcard+0x8>

0000db20 <z_shell_wildcard_prepare>:
{
    db20:	b510      	push	{r4, lr}
    db22:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    db24:	6880      	ldr	r0, [r0, #8]
    db26:	f44f 7280 	mov.w	r2, #256	; 0x100
    db2a:	2100      	movs	r1, #0
    db2c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    db30:	f000 fadb 	bl	e0ea <memset>
	memcpy(shell->ctx->temp_buff,
    db34:	68a0      	ldr	r0, [r4, #8]
    db36:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    db38:	f100 0142 	add.w	r1, r0, #66	; 0x42
    db3c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    db40:	f000 fac8 	bl	e0d4 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
    db44:	68a0      	ldr	r0, [r4, #8]
    db46:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    db4a:	f7ff fa8a 	bl	d062 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
    db4e:	68a0      	ldr	r0, [r4, #8]
    db50:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    db54:	f000 fa68 	bl	e028 <strlen>
    db58:	68a3      	ldr	r3, [r4, #8]
    db5a:	3001      	adds	r0, #1
    db5c:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
    db60:	bd10      	pop	{r4, pc}

0000db62 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
    db62:	b510      	push	{r4, lr}
    db64:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    db66:	6880      	ldr	r0, [r0, #8]
    db68:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
    db6c:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    db70:	3042      	adds	r0, #66	; 0x42
    db72:	f000 faaf 	bl	e0d4 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    db76:	68a3      	ldr	r3, [r4, #8]
    db78:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    db7c:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    db7e:	bd10      	pop	{r4, pc}

0000db80 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    db80:	2300      	movs	r3, #0
    db82:	f7fe bedc 	b.w	c93e <z_impl_z_log_msg2_static_create>

0000db86 <usb_get_dev_data_by_cfg>:
	return list->head;
    db86:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    db88:	b140      	cbz	r0, db9c <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    db8a:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    db8e:	685b      	ldr	r3, [r3, #4]
    db90:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    db92:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    db96:	d001      	beq.n	db9c <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    db98:	6840      	ldr	r0, [r0, #4]
    db9a:	e7f5      	b.n	db88 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    db9c:	4770      	bx	lr

0000db9e <usb_get_dev_data_by_iface>:
	return list->head;
    db9e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dba0:	b150      	cbz	r0, dbb8 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    dba2:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    dba6:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    dba8:	685b      	ldr	r3, [r3, #4]
    dbaa:	789b      	ldrb	r3, [r3, #2]
    dbac:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dbae:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    dbb2:	d001      	beq.n	dbb8 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    dbb4:	6840      	ldr	r0, [r0, #4]
    dbb6:	e7f3      	b.n	dba0 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    dbb8:	4770      	bx	lr

0000dbba <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    dbba:	b530      	push	{r4, r5, lr}
	return list->head;
    dbbc:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dbbe:	b188      	cbz	r0, dbe4 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    dbc0:	f850 3c04 	ldr.w	r3, [r0, #-4]
    dbc4:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    dbc6:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    dbc8:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    dbca:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    dbcc:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    dbce:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    dbd0:	b2dc      	uxtb	r4, r3
    dbd2:	42a5      	cmp	r5, r4
    dbd4:	d801      	bhi.n	dbda <usb_get_dev_data_by_ep+0x20>
	return node->next;
    dbd6:	6840      	ldr	r0, [r0, #4]
    dbd8:	e7f1      	b.n	dbbe <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    dbda:	3301      	adds	r3, #1
    dbdc:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    dbe0:	428c      	cmp	r4, r1
    dbe2:	d1f5      	bne.n	dbd0 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    dbe4:	bd30      	pop	{r4, r5, pc}

0000dbe6 <usb_transfer_is_busy>:
{
    dbe6:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    dbe8:	f7f6 ffae 	bl	4b48 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    dbec:	b128      	cbz	r0, dbfa <usb_transfer_is_busy+0x14>
    dbee:	6840      	ldr	r0, [r0, #4]
    dbf0:	f110 0f10 	cmn.w	r0, #16
    dbf4:	bf14      	ite	ne
    dbf6:	2000      	movne	r0, #0
    dbf8:	2001      	moveq	r0, #1
}
    dbfa:	bd08      	pop	{r3, pc}

0000dbfc <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    dbfc:	1c4b      	adds	r3, r1, #1
    dbfe:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    dc00:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    dc02:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    dc04:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    dc08:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    dc0a:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    dc0e:	4770      	bx	lr

0000dc10 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    dc10:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    dc14:	6f80      	ldr	r0, [r0, #120]	; 0x78
    dc16:	4718      	bx	r3

0000dc18 <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    dc18:	6903      	ldr	r3, [r0, #16]
    dc1a:	2200      	movs	r2, #0
    dc1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    dc20:	4770      	bx	lr

0000dc22 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dc22:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    dc24:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    dc28:	b108      	cbz	r0, dc2e <cdc_acm_irq_tx_ready+0xc>
		return 1;
    dc2a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    dc2e:	4770      	bx	lr

0000dc30 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    dc30:	6903      	ldr	r3, [r0, #16]
    dc32:	2200      	movs	r2, #0
    dc34:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    dc38:	4770      	bx	lr

0000dc3a <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    dc3a:	6903      	ldr	r3, [r0, #16]
}
    dc3c:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    dc40:	4770      	bx	lr

0000dc42 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dc42:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    dc44:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    dc48:	b112      	cbz	r2, dc50 <cdc_acm_irq_is_pending+0xe>
    dc4a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    dc4e:	b92a      	cbnz	r2, dc5c <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    dc50:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    dc54:	b118      	cbz	r0, dc5e <cdc_acm_irq_is_pending+0x1c>
		return 0;
    dc56:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    dc5a:	4770      	bx	lr
		return 1;
    dc5c:	2001      	movs	r0, #1
}
    dc5e:	4770      	bx	lr

0000dc60 <cdc_acm_irq_update>:
}
    dc60:	2001      	movs	r0, #1
    dc62:	4770      	bx	lr

0000dc64 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dc64:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    dc66:	e9c3 1200 	strd	r1, r2, [r3]
}
    dc6a:	4770      	bx	lr

0000dc6c <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    dc6c:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dc6e:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    dc70:	d007      	beq.n	dc82 <cdc_acm_line_ctrl_get+0x16>
    dc72:	2904      	cmp	r1, #4
    dc74:	d00a      	beq.n	dc8c <cdc_acm_line_ctrl_get+0x20>
    dc76:	2901      	cmp	r1, #1
    dc78:	d10d      	bne.n	dc96 <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    dc7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
    dc7c:	6013      	str	r3, [r2, #0]
		return 0;
    dc7e:	2000      	movs	r0, #0
    dc80:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    dc82:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    dc86:	f3c3 0340 	ubfx	r3, r3, #1, #1
    dc8a:	e7f7      	b.n	dc7c <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    dc8c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    dc90:	f003 0301 	and.w	r3, r3, #1
    dc94:	e7f2      	b.n	dc7c <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
    dc96:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    dc9a:	4770      	bx	lr

0000dc9c <cdc_acm_fifo_read>:
{
    dc9c:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dc9e:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    dca0:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    dca2:	f7fe fa9a 	bl	c1da <ring_buf_get>
    dca6:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    dca8:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    dcaa:	f7fe f9d4 	bl	c056 <ring_buf_is_empty>
    dcae:	b110      	cbz	r0, dcb6 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    dcb0:	2300      	movs	r3, #0
    dcb2:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    dcb6:	4620      	mov	r0, r4
    dcb8:	bd38      	pop	{r3, r4, r5, pc}

0000dcba <cdc_acm_poll_in>:
{
    dcba:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    dcbc:	2201      	movs	r2, #1
    dcbe:	f7ff ffed 	bl	dc9c <cdc_acm_fifo_read>
}
    dcc2:	3801      	subs	r0, #1
    dcc4:	bf18      	it	ne
    dcc6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    dcca:	bd08      	pop	{r3, pc}

0000dccc <z_log_msg2_static_create.constprop.0>:
    dccc:	2300      	movs	r3, #0
    dcce:	f7fe be36 	b.w	c93e <z_impl_z_log_msg2_static_create>

0000dcd2 <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
    dcd2:	2940      	cmp	r1, #64	; 0x40
{
    dcd4:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    dcd6:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    dcd8:	d042      	beq.n	dd60 <cdc_acm_line_ctrl_set+0x8e>
    dcda:	d813      	bhi.n	dd04 <cdc_acm_line_ctrl_set+0x32>
    dcdc:	2910      	cmp	r1, #16
    dcde:	d032      	beq.n	dd46 <cdc_acm_line_ctrl_set+0x74>
    dce0:	d806      	bhi.n	dcf0 <cdc_acm_line_ctrl_set+0x1e>
    dce2:	2901      	cmp	r1, #1
    dce4:	d01e      	beq.n	dd24 <cdc_acm_line_ctrl_set+0x52>
    dce6:	2908      	cmp	r1, #8
    dce8:	d01f      	beq.n	dd2a <cdc_acm_line_ctrl_set+0x58>
    dcea:	f06f 0012 	mvn.w	r0, #18
}
    dcee:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    dcf0:	2920      	cmp	r1, #32
    dcf2:	d1fa      	bne.n	dcea <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    dcf4:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    dcf8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    dcfc:	b342      	cbz	r2, dd50 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    dcfe:	f041 0104 	orr.w	r1, r1, #4
    dd02:	e025      	b.n	dd50 <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
    dd04:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    dd08:	d033      	beq.n	dd72 <cdc_acm_line_ctrl_set+0xa0>
    dd0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    dd0e:	d039      	beq.n	dd84 <cdc_acm_line_ctrl_set+0xb2>
    dd10:	2980      	cmp	r1, #128	; 0x80
    dd12:	d1ea      	bne.n	dcea <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    dd14:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    dd18:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    dd1c:	b1c2      	cbz	r2, dd50 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    dd1e:	f041 0110 	orr.w	r1, r1, #16
    dd22:	e015      	b.n	dd50 <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    dd24:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
    dd26:	2000      	movs	r0, #0
    dd28:	e7e1      	b.n	dcee <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    dd2a:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    dd2e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    dd32:	b92a      	cbnz	r2, dd40 <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    dd34:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    dd38:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
    dd3a:	f7f7 fbe7 	bl	550c <cdc_acm_send_notification.isra.0>
    dd3e:	e7f2      	b.n	dd26 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    dd40:	f041 0101 	orr.w	r1, r1, #1
    dd44:	e7f6      	b.n	dd34 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    dd46:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    dd4a:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    dd4e:	b922      	cbnz	r2, dd5a <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    dd50:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    dd54:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    dd58:	e7ef      	b.n	dd3a <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    dd5a:	f041 0102 	orr.w	r1, r1, #2
    dd5e:	e7f7      	b.n	dd50 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    dd60:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    dd64:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    dd68:	2a00      	cmp	r2, #0
    dd6a:	d0f1      	beq.n	dd50 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    dd6c:	f041 0108 	orr.w	r1, r1, #8
    dd70:	e7ee      	b.n	dd50 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    dd72:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    dd76:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    dd7a:	2a00      	cmp	r2, #0
    dd7c:	d0e8      	beq.n	dd50 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    dd7e:	f041 0120 	orr.w	r1, r1, #32
    dd82:	e7e5      	b.n	dd50 <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    dd84:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    dd88:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    dd8c:	2a00      	cmp	r2, #0
    dd8e:	d0df      	beq.n	dd50 <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    dd90:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    dd94:	e7dc      	b.n	dd50 <cdc_acm_line_ctrl_set+0x7e>

0000dd96 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    dd96:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    dd98:	6800      	ldr	r0, [r0, #0]
    dd9a:	f7f7 bd7b 	b.w	5894 <z_arm_fatal_error>

0000dd9e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    dd9e:	2100      	movs	r1, #0
    dda0:	2001      	movs	r0, #1
    dda2:	f7f7 bd77 	b.w	5894 <z_arm_fatal_error>

0000dda6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    dda6:	b508      	push	{r3, lr}
	handler();
    dda8:	f7f7 fe2c 	bl	5a04 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    ddac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    ddb0:	f7f7 bef0 	b.w	5b94 <z_arm_exc_exit>

0000ddb4 <z_log_msg2_static_create.constprop.0>:
    ddb4:	2300      	movs	r3, #0
    ddb6:	f7fe bdc2 	b.w	c93e <z_impl_z_log_msg2_static_create>

0000ddba <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    ddba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ddbe:	4684      	mov	ip, r0
    ddc0:	4688      	mov	r8, r1
	register const char *s = nptr;
    ddc2:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    ddc4:	4621      	mov	r1, r4
    ddc6:	f814 3b01 	ldrb.w	r3, [r4], #1
    ddca:	2b20      	cmp	r3, #32
    ddcc:	d0fa      	beq.n	ddc4 <strtol+0xa>
    ddce:	f1a3 0009 	sub.w	r0, r3, #9
    ddd2:	2804      	cmp	r0, #4
    ddd4:	d9f6      	bls.n	ddc4 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
    ddd6:	2b2d      	cmp	r3, #45	; 0x2d
    ddd8:	d12d      	bne.n	de36 <strtol+0x7c>
		neg = 1;
		c = *s++;
    ddda:	784b      	ldrb	r3, [r1, #1]
    dddc:	1c8c      	adds	r4, r1, #2
		neg = 1;
    ddde:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    dde0:	2a00      	cmp	r2, #0
    dde2:	d05a      	beq.n	de9a <strtol+0xe0>
    dde4:	2a10      	cmp	r2, #16
    dde6:	d109      	bne.n	ddfc <strtol+0x42>
    dde8:	2b30      	cmp	r3, #48	; 0x30
    ddea:	d107      	bne.n	ddfc <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    ddec:	7823      	ldrb	r3, [r4, #0]
    ddee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ddf2:	2b58      	cmp	r3, #88	; 0x58
    ddf4:	d14c      	bne.n	de90 <strtol+0xd6>
		c = s[1];
    ddf6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    ddf8:	2210      	movs	r2, #16
		s += 2;
    ddfa:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    ddfc:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    de00:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    de02:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
    de04:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
    de08:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    de0a:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    de0e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    de12:	2d09      	cmp	r5, #9
    de14:	d815      	bhi.n	de42 <strtol+0x88>
			c -= '0';
    de16:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    de18:	429a      	cmp	r2, r3
    de1a:	dd22      	ble.n	de62 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    de1c:	1c75      	adds	r5, r6, #1
    de1e:	d007      	beq.n	de30 <strtol+0x76>
    de20:	4570      	cmp	r0, lr
    de22:	d81b      	bhi.n	de5c <strtol+0xa2>
    de24:	d101      	bne.n	de2a <strtol+0x70>
    de26:	454b      	cmp	r3, r9
    de28:	dc18      	bgt.n	de5c <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    de2a:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    de2e:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    de30:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    de34:	e7eb      	b.n	de0e <strtol+0x54>
	} else if (c == '+') {
    de36:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    de38:	bf04      	itt	eq
    de3a:	784b      	ldrbeq	r3, [r1, #1]
    de3c:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    de3e:	2100      	movs	r1, #0
    de40:	e7ce      	b.n	dde0 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    de42:	f043 0520 	orr.w	r5, r3, #32
    de46:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    de48:	2d19      	cmp	r5, #25
    de4a:	d80a      	bhi.n	de62 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    de4c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    de50:	2d1a      	cmp	r5, #26
    de52:	bf34      	ite	cc
    de54:	2537      	movcc	r5, #55	; 0x37
    de56:	2557      	movcs	r5, #87	; 0x57
    de58:	1b5b      	subs	r3, r3, r5
    de5a:	e7dd      	b.n	de18 <strtol+0x5e>
			any = -1;
    de5c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    de60:	e7e6      	b.n	de30 <strtol+0x76>
		}
	}

	if (any < 0) {
    de62:	1c73      	adds	r3, r6, #1
    de64:	d109      	bne.n	de7a <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    de66:	f7fc f96f 	bl	a148 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    de6a:	2322      	movs	r3, #34	; 0x22
    de6c:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    de6e:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
    de70:	f1b8 0f00 	cmp.w	r8, #0
    de74:	d107      	bne.n	de86 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    de76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
    de7a:	b101      	cbz	r1, de7e <strtol+0xc4>
		acc = -acc;
    de7c:	4240      	negs	r0, r0
	if (endptr != NULL) {
    de7e:	f1b8 0f00 	cmp.w	r8, #0
    de82:	d0f8      	beq.n	de76 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
    de84:	b10e      	cbz	r6, de8a <strtol+0xd0>
    de86:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    de8a:	f8c8 c000 	str.w	ip, [r8]
	return acc;
    de8e:	e7f2      	b.n	de76 <strtol+0xbc>
	if (base == 0) {
    de90:	2330      	movs	r3, #48	; 0x30
    de92:	2a00      	cmp	r2, #0
    de94:	d1b2      	bne.n	ddfc <strtol+0x42>
		base = c == '0' ? 8 : 10;
    de96:	2208      	movs	r2, #8
    de98:	e7b0      	b.n	ddfc <strtol+0x42>
	if ((base == 0 || base == 16) &&
    de9a:	2b30      	cmp	r3, #48	; 0x30
    de9c:	d0a6      	beq.n	ddec <strtol+0x32>
		base = c == '0' ? 8 : 10;
    de9e:	220a      	movs	r2, #10
    dea0:	e7ac      	b.n	ddfc <strtol+0x42>

0000dea2 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
    dea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dea6:	4607      	mov	r7, r0
    dea8:	4688      	mov	r8, r1
	register const char *s = nptr;
    deaa:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
    deac:	4621      	mov	r1, r4
    deae:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    deb2:	2b20      	cmp	r3, #32
    deb4:	d0fa      	beq.n	deac <strtoul+0xa>
    deb6:	f1a3 0009 	sub.w	r0, r3, #9
    deba:	2804      	cmp	r0, #4
    debc:	d9f6      	bls.n	deac <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
    debe:	2b2d      	cmp	r3, #45	; 0x2d
    dec0:	d12f      	bne.n	df22 <strtoul+0x80>
		neg = 1;
		c = *s++;
    dec2:	784b      	ldrb	r3, [r1, #1]
    dec4:	1c8c      	adds	r4, r1, #2
		neg = 1;
    dec6:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    deca:	2a00      	cmp	r2, #0
    decc:	d05e      	beq.n	df8c <strtoul+0xea>
    dece:	2a10      	cmp	r2, #16
    ded0:	d109      	bne.n	dee6 <strtoul+0x44>
    ded2:	2b30      	cmp	r3, #48	; 0x30
    ded4:	d107      	bne.n	dee6 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    ded6:	7823      	ldrb	r3, [r4, #0]
    ded8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    dedc:	2b58      	cmp	r3, #88	; 0x58
    dede:	d150      	bne.n	df82 <strtoul+0xe0>
		c = s[1];
    dee0:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    dee2:	2210      	movs	r2, #16
		s += 2;
    dee4:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    dee6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    deea:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    deec:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
    def0:	fb02 fe01 	mul.w	lr, r2, r1
    def4:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
    def8:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    defa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    defe:	2d09      	cmp	r5, #9
    df00:	d816      	bhi.n	df30 <strtoul+0x8e>
			c -= '0';
    df02:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    df04:	429a      	cmp	r2, r3
    df06:	dd23      	ble.n	df50 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    df08:	2e00      	cmp	r6, #0
    df0a:	db1e      	blt.n	df4a <strtoul+0xa8>
    df0c:	4288      	cmp	r0, r1
    df0e:	d81c      	bhi.n	df4a <strtoul+0xa8>
    df10:	d101      	bne.n	df16 <strtoul+0x74>
    df12:	4573      	cmp	r3, lr
    df14:	dc19      	bgt.n	df4a <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    df16:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    df1a:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    df1c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    df20:	e7eb      	b.n	defa <strtoul+0x58>
	} else if (c == '+') {
    df22:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    df24:	bf04      	itt	eq
    df26:	784b      	ldrbeq	r3, [r1, #1]
    df28:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    df2a:	f04f 0c00 	mov.w	ip, #0
    df2e:	e7cc      	b.n	deca <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    df30:	f043 0520 	orr.w	r5, r3, #32
    df34:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    df36:	2d19      	cmp	r5, #25
    df38:	d80a      	bhi.n	df50 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    df3a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    df3e:	2d1a      	cmp	r5, #26
    df40:	bf34      	ite	cc
    df42:	2537      	movcc	r5, #55	; 0x37
    df44:	2557      	movcs	r5, #87	; 0x57
    df46:	1b5b      	subs	r3, r3, r5
    df48:	e7dc      	b.n	df04 <strtoul+0x62>
			any = -1;
    df4a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    df4e:	e7e5      	b.n	df1c <strtoul+0x7a>
		}
	}
	if (any < 0) {
    df50:	2e00      	cmp	r6, #0
    df52:	da0a      	bge.n	df6a <strtoul+0xc8>
    df54:	f7fc f8f8 	bl	a148 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
    df58:	2322      	movs	r3, #34	; 0x22
    df5a:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
    df5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
    df60:	f1b8 0f00 	cmp.w	r8, #0
    df64:	d109      	bne.n	df7a <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    df66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
    df6a:	f1bc 0f00 	cmp.w	ip, #0
    df6e:	d000      	beq.n	df72 <strtoul+0xd0>
		acc = -acc;
    df70:	4240      	negs	r0, r0
	if (endptr != NULL) {
    df72:	f1b8 0f00 	cmp.w	r8, #0
    df76:	d0f6      	beq.n	df66 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
    df78:	b106      	cbz	r6, df7c <strtoul+0xda>
    df7a:	1e67      	subs	r7, r4, #1
    df7c:	f8c8 7000 	str.w	r7, [r8]
	return acc;
    df80:	e7f1      	b.n	df66 <strtoul+0xc4>
	if (base == 0) {
    df82:	2330      	movs	r3, #48	; 0x30
    df84:	2a00      	cmp	r2, #0
    df86:	d1ae      	bne.n	dee6 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
    df88:	2208      	movs	r2, #8
    df8a:	e7ac      	b.n	dee6 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
    df8c:	2b30      	cmp	r3, #48	; 0x30
    df8e:	d0a2      	beq.n	ded6 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
    df90:	220a      	movs	r2, #10
    df92:	e7a8      	b.n	dee6 <strtoul+0x44>

0000df94 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    df94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    df98:	f891 8000 	ldrb.w	r8, [r1]
{
    df9c:	4605      	mov	r5, r0
	if (c != 0) {
    df9e:	f1b8 0f00 	cmp.w	r8, #0
    dfa2:	d010      	beq.n	dfc6 <strstr+0x32>
	c = *find++;
    dfa4:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    dfa6:	4620      	mov	r0, r4
    dfa8:	f000 f83e 	bl	e028 <strlen>
    dfac:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
    dfae:	462e      	mov	r6, r5
    dfb0:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
    dfb4:	b163      	cbz	r3, dfd0 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
    dfb6:	4598      	cmp	r8, r3
    dfb8:	d108      	bne.n	dfcc <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
    dfba:	463a      	mov	r2, r7
    dfbc:	4621      	mov	r1, r4
    dfbe:	4630      	mov	r0, r6
    dfc0:	f000 f84e 	bl	e060 <strncmp>
    dfc4:	b910      	cbnz	r0, dfcc <strstr+0x38>
	s--;
	}
	return (char *)s;
}
    dfc6:	4628      	mov	r0, r5
    dfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    dfcc:	4635      	mov	r5, r6
    dfce:	e7ee      	b.n	dfae <strstr+0x1a>
					return NULL;
    dfd0:	461d      	mov	r5, r3
    dfd2:	e7f8      	b.n	dfc6 <strstr+0x32>

0000dfd4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    dfd4:	3901      	subs	r1, #1
    dfd6:	4603      	mov	r3, r0
    dfd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    dfdc:	b90a      	cbnz	r2, dfe2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    dfde:	701a      	strb	r2, [r3, #0]

	return dest;
}
    dfe0:	4770      	bx	lr
		*d = *s;
    dfe2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    dfe6:	e7f7      	b.n	dfd8 <strcpy+0x4>

0000dfe8 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
    dfe8:	b570      	push	{r4, r5, r6, lr}
    dfea:	4605      	mov	r5, r0
    dfec:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    dfee:	b142      	cbz	r2, e002 <strncpy+0x1a>
    dff0:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
    dff4:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
    dff6:	b92c      	cbnz	r4, e004 <strncpy+0x1c>
    dff8:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
    dffa:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
    dffe:	429a      	cmp	r2, r3
    e000:	d1fb      	bne.n	dffa <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
    e002:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    e004:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
    e008:	4632      	mov	r2, r6
    e00a:	e7ef      	b.n	dfec <strncpy+0x4>

0000e00c <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    e00c:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    e00e:	4603      	mov	r3, r0
    e010:	781a      	ldrb	r2, [r3, #0]
    e012:	428a      	cmp	r2, r1
    e014:	4618      	mov	r0, r3
    e016:	f103 0301 	add.w	r3, r3, #1
    e01a:	d004      	beq.n	e026 <strchr+0x1a>
    e01c:	2a00      	cmp	r2, #0
    e01e:	d1f7      	bne.n	e010 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    e020:	2900      	cmp	r1, #0
    e022:	bf18      	it	ne
    e024:	2000      	movne	r0, #0
}
    e026:	4770      	bx	lr

0000e028 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    e028:	4603      	mov	r3, r0
	size_t n = 0;
    e02a:	2000      	movs	r0, #0

	while (*s != '\0') {
    e02c:	5c1a      	ldrb	r2, [r3, r0]
    e02e:	b902      	cbnz	r2, e032 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    e030:	4770      	bx	lr
		n++;
    e032:	3001      	adds	r0, #1
    e034:	e7fa      	b.n	e02c <strlen+0x4>

0000e036 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    e036:	4603      	mov	r3, r0
	size_t n = 0;
    e038:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    e03a:	5c1a      	ldrb	r2, [r3, r0]
    e03c:	b10a      	cbz	r2, e042 <strnlen+0xc>
    e03e:	4288      	cmp	r0, r1
    e040:	d100      	bne.n	e044 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    e042:	4770      	bx	lr
		n++;
    e044:	3001      	adds	r0, #1
    e046:	e7f8      	b.n	e03a <strnlen+0x4>

0000e048 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    e048:	1e43      	subs	r3, r0, #1
    e04a:	3901      	subs	r1, #1
    e04c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e050:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    e054:	4282      	cmp	r2, r0
    e056:	d101      	bne.n	e05c <strcmp+0x14>
    e058:	2a00      	cmp	r2, #0
    e05a:	d1f7      	bne.n	e04c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    e05c:	1a10      	subs	r0, r2, r0
    e05e:	4770      	bx	lr

0000e060 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    e060:	b510      	push	{r4, lr}
    e062:	3901      	subs	r1, #1
    e064:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    e066:	4282      	cmp	r2, r0
    e068:	d009      	beq.n	e07e <strncmp+0x1e>
    e06a:	7803      	ldrb	r3, [r0, #0]
    e06c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    e070:	42a3      	cmp	r3, r4
    e072:	d100      	bne.n	e076 <strncmp+0x16>
    e074:	b90b      	cbnz	r3, e07a <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    e076:	1b18      	subs	r0, r3, r4
    e078:	e002      	b.n	e080 <strncmp+0x20>
		s1++;
    e07a:	3001      	adds	r0, #1
		n--;
    e07c:	e7f3      	b.n	e066 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
    e07e:	2000      	movs	r0, #0
}
    e080:	bd10      	pop	{r4, pc}

0000e082 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    e082:	b510      	push	{r4, lr}
    e084:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    e086:	b15a      	cbz	r2, e0a0 <memcmp+0x1e>
    e088:	3901      	subs	r1, #1
    e08a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    e08c:	f813 0b01 	ldrb.w	r0, [r3], #1
    e090:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    e094:	42a3      	cmp	r3, r4
    e096:	d001      	beq.n	e09c <memcmp+0x1a>
    e098:	4290      	cmp	r0, r2
    e09a:	d0f7      	beq.n	e08c <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    e09c:	1a80      	subs	r0, r0, r2
}
    e09e:	bd10      	pop	{r4, pc}
		return 0;
    e0a0:	4610      	mov	r0, r2
    e0a2:	e7fc      	b.n	e09e <memcmp+0x1c>

0000e0a4 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    e0a4:	1a43      	subs	r3, r0, r1
    e0a6:	4293      	cmp	r3, r2
{
    e0a8:	b510      	push	{r4, lr}
    e0aa:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    e0ae:	d308      	bcc.n	e0c2 <memmove+0x1e>
    e0b0:	3901      	subs	r1, #1
	char *dest = d;
    e0b2:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    e0b4:	429a      	cmp	r2, r3
    e0b6:	d007      	beq.n	e0c8 <memmove+0x24>
			*dest = *src;
    e0b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    e0bc:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    e0c0:	e7f8      	b.n	e0b4 <memmove+0x10>
    e0c2:	440a      	add	r2, r1
		while (n > 0) {
    e0c4:	428a      	cmp	r2, r1
    e0c6:	d100      	bne.n	e0ca <memmove+0x26>
		}
	}

	return d;
}
    e0c8:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    e0ca:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    e0ce:	f803 4d01 	strb.w	r4, [r3, #-1]!
    e0d2:	e7f7      	b.n	e0c4 <memmove+0x20>

0000e0d4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    e0d4:	b510      	push	{r4, lr}
    e0d6:	1e43      	subs	r3, r0, #1
    e0d8:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    e0da:	4291      	cmp	r1, r2
    e0dc:	d100      	bne.n	e0e0 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    e0de:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    e0e0:	f811 4b01 	ldrb.w	r4, [r1], #1
    e0e4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    e0e8:	e7f7      	b.n	e0da <memcpy+0x6>

0000e0ea <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    e0ea:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    e0ec:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    e0ee:	4603      	mov	r3, r0
	while (n > 0) {
    e0f0:	4293      	cmp	r3, r2
    e0f2:	d100      	bne.n	e0f6 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    e0f4:	4770      	bx	lr
		*(d_byte++) = c_byte;
    e0f6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    e0fa:	e7f9      	b.n	e0f0 <memset+0x6>

0000e0fc <_stdout_hook_default>:
}
    e0fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e100:	4770      	bx	lr

0000e102 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    e102:	684b      	ldr	r3, [r1, #4]
    e104:	2b01      	cmp	r3, #1
    e106:	dd07      	ble.n	e118 <sprintf_out+0x16>
		*(p->ptr) = c;
    e108:	680b      	ldr	r3, [r1, #0]
    e10a:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    e10c:	680b      	ldr	r3, [r1, #0]
    e10e:	3301      	adds	r3, #1
    e110:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    e112:	684b      	ldr	r3, [r1, #4]
    e114:	3b01      	subs	r3, #1
    e116:	604b      	str	r3, [r1, #4]
}
    e118:	2000      	movs	r0, #0
    e11a:	4770      	bx	lr

0000e11c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    e11c:	b084      	sub	sp, #16
    e11e:	ab04      	add	r3, sp, #16
    e120:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    e124:	f89d 3004 	ldrb.w	r3, [sp, #4]
    e128:	2b06      	cmp	r3, #6
    e12a:	d108      	bne.n	e13e <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    e12c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e130:	2201      	movs	r2, #1
    e132:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    e136:	f3bf 8f4f 	dsb	sy
        __WFE();
    e13a:	bf20      	wfe
    while (true)
    e13c:	e7fd      	b.n	e13a <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    e13e:	b004      	add	sp, #16
    e140:	4770      	bx	lr

0000e142 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    e142:	b084      	sub	sp, #16
    e144:	ab04      	add	r3, sp, #16
    e146:	e903 0007 	stmdb	r3, {r0, r1, r2}
    e14a:	2300      	movs	r3, #0
    e14c:	f383 8811 	msr	BASEPRI, r3
    e150:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    e154:	b004      	add	sp, #16
    e156:	4770      	bx	lr

0000e158 <z_impl_gpio_pin_configure.isra.0>:
static inline int z_impl_gpio_pin_configure(const struct device *port,
    e158:	b4f0      	push	{r4, r5, r6, r7}
    e15a:	4613      	mov	r3, r2
	struct gpio_driver_data *data =
    e15c:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
    e15e:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e160:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    e162:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    e164:	bf48      	it	mi
    e166:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e16a:	2501      	movs	r5, #1
    e16c:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    e16e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    e172:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e174:	bf4c      	ite	mi
    e176:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    e178:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
    e17a:	683b      	ldr	r3, [r7, #0]
    e17c:	6034      	str	r4, [r6, #0]
}
    e17e:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    e180:	4718      	bx	r3

0000e182 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    e182:	6903      	ldr	r3, [r0, #16]
{
    e184:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    e186:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    e18a:	2300      	movs	r3, #0
    e18c:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    e18e:	7f83      	ldrb	r3, [r0, #30]
{
    e190:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    e192:	b113      	cbz	r3, e19a <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    e194:	7a40      	ldrb	r0, [r0, #9]
    e196:	f000 fc67 	bl	ea68 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    e19a:	2301      	movs	r3, #1
    e19c:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    e19e:	2300      	movs	r3, #0
    e1a0:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    e1a2:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    e1a4:	77a3      	strb	r3, [r4, #30]
}
    e1a6:	bd10      	pop	{r4, pc}

0000e1a8 <z_log_msg2_static_create.constprop.0>:
    e1a8:	2300      	movs	r3, #0
    e1aa:	f7fe bbc8 	b.w	c93e <z_impl_z_log_msg2_static_create>

0000e1ae <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    e1ae:	f7fc bb03 	b.w	a7b8 <z_impl_k_mutex_lock>

0000e1b2 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    e1b2:	f7fc bb79 	b.w	a8a8 <z_impl_k_mutex_unlock>

0000e1b6 <usb_dc_ep_read>:
{
    e1b6:	b570      	push	{r4, r5, r6, lr}
    e1b8:	4604      	mov	r4, r0
    e1ba:	460e      	mov	r6, r1
    e1bc:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    e1be:	f7f8 ffef 	bl	71a0 <usb_dc_ep_read_wait>
	if (ret) {
    e1c2:	b930      	cbnz	r0, e1d2 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    e1c4:	b906      	cbnz	r6, e1c8 <usb_dc_ep_read+0x12>
    e1c6:	b125      	cbz	r5, e1d2 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    e1c8:	4620      	mov	r0, r4
}
    e1ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    e1ce:	f7f9 b849 	b.w	7264 <usb_dc_ep_read_continue>
}
    e1d2:	bd70      	pop	{r4, r5, r6, pc}

0000e1d4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e1d4:	6903      	ldr	r3, [r0, #16]
    e1d6:	b2c9      	uxtb	r1, r1
    e1d8:	220c      	movs	r2, #12
    e1da:	fb01 3302 	mla	r3, r1, r2, r3
    e1de:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    e1e0:	f000 0007 	and.w	r0, r0, #7
    e1e4:	4770      	bx	lr

0000e1e6 <set_on_state>:
	__asm__ volatile(
    e1e6:	f04f 0320 	mov.w	r3, #32
    e1ea:	f3ef 8211 	mrs	r2, BASEPRI
    e1ee:	f383 8812 	msr	BASEPRI_MAX, r3
    e1f2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    e1f6:	6803      	ldr	r3, [r0, #0]
    e1f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e1fc:	f043 0302 	orr.w	r3, r3, #2
    e200:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    e202:	f382 8811 	msr	BASEPRI, r2
    e206:	f3bf 8f6f 	isb	sy
}
    e20a:	4770      	bx	lr

0000e20c <stop>:
{
    e20c:	4603      	mov	r3, r0
    e20e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    e210:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    e212:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    e214:	f04f 0420 	mov.w	r4, #32
    e218:	f3ef 8611 	mrs	r6, BASEPRI
    e21c:	f384 8812 	msr	BASEPRI_MAX, r4
    e220:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e224:	250c      	movs	r5, #12
    e226:	fb05 0401 	mla	r4, r5, r1, r0
    e22a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e22c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    e230:	d001      	beq.n	e236 <stop+0x2a>
    e232:	42a2      	cmp	r2, r4
    e234:	d111      	bne.n	e25a <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e236:	fb05 0001 	mla	r0, r5, r1, r0
    e23a:	2201      	movs	r2, #1
    e23c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    e23e:	2000      	movs	r0, #0
	__asm__ volatile(
    e240:	f386 8811 	msr	BASEPRI, r6
    e244:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    e248:	b930      	cbnz	r0, e258 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    e24a:	685b      	ldr	r3, [r3, #4]
    e24c:	220c      	movs	r2, #12
    e24e:	fb02 3101 	mla	r1, r2, r1, r3
    e252:	684b      	ldr	r3, [r1, #4]
    e254:	4798      	blx	r3
	return 0;
    e256:	2000      	movs	r0, #0
}
    e258:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    e25a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e25e:	e7ef      	b.n	e240 <stop+0x34>

0000e260 <api_stop>:
	return stop(dev, subsys, CTX_API);
    e260:	2280      	movs	r2, #128	; 0x80
    e262:	f7ff bfd3 	b.w	e20c <stop>

0000e266 <async_start>:
{
    e266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e268:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    e26a:	6904      	ldr	r4, [r0, #16]
{
    e26c:	4605      	mov	r5, r0
    e26e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    e270:	f04f 0020 	mov.w	r0, #32
    e274:	f3ef 8c11 	mrs	ip, BASEPRI
    e278:	f380 8812 	msr	BASEPRI_MAX, r0
    e27c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e280:	260c      	movs	r6, #12
    e282:	fb06 4601 	mla	r6, r6, r1, r4
    e286:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    e288:	f000 0e07 	and.w	lr, r0, #7
    e28c:	f1be 0f01 	cmp.w	lr, #1
    e290:	d110      	bne.n	e2b4 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    e292:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    e294:	2600      	movs	r6, #0
	__asm__ volatile(
    e296:	f38c 8811 	msr	BASEPRI, ip
    e29a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    e29e:	b93e      	cbnz	r6, e2b0 <async_start+0x4a>
	subdata->cb = cb;
    e2a0:	200c      	movs	r0, #12
    e2a2:	4341      	muls	r1, r0
    e2a4:	440c      	add	r4, r1
	subdata->user_data = user_data;
    e2a6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    e2aa:	686b      	ldr	r3, [r5, #4]
    e2ac:	585b      	ldr	r3, [r3, r1]
    e2ae:	4798      	blx	r3
}
    e2b0:	4630      	mov	r0, r6
    e2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    e2b4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    e2b8:	4287      	cmp	r7, r0
    e2ba:	bf14      	ite	ne
    e2bc:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    e2c0:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    e2c4:	e7e7      	b.n	e296 <async_start+0x30>

0000e2c6 <api_start>:
{
    e2c6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    e2c8:	2480      	movs	r4, #128	; 0x80
    e2ca:	9400      	str	r4, [sp, #0]
    e2cc:	f7ff ffcb 	bl	e266 <async_start>
}
    e2d0:	b002      	add	sp, #8
    e2d2:	bd10      	pop	{r4, pc}

0000e2d4 <onoff_started_callback>:
	return &data->mgr[type];
    e2d4:	6900      	ldr	r0, [r0, #16]
{
    e2d6:	b410      	push	{r4}
	return &data->mgr[type];
    e2d8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    e2da:	241c      	movs	r4, #28
    e2dc:	fb03 0004 	mla	r0, r3, r4, r0
    e2e0:	2100      	movs	r1, #0
}
    e2e2:	bc10      	pop	{r4}
	notify(mgr, 0);
    e2e4:	4710      	bx	r2

0000e2e6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    e2e6:	2000      	movs	r0, #0
    e2e8:	f000 ba6a 	b.w	e7c0 <nrfx_clock_start>

0000e2ec <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    e2ec:	2000      	movs	r0, #0
    e2ee:	f7fa bab1 	b.w	8854 <nrfx_clock_stop>

0000e2f2 <blocking_start_callback>:
{
    e2f2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    e2f4:	f7fc bb50 	b.w	a998 <z_impl_k_sem_give>

0000e2f8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e2f8:	6843      	ldr	r3, [r0, #4]
    e2fa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    e2fc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    e300:	600b      	str	r3, [r1, #0]
}
    e302:	2000      	movs	r0, #0
    e304:	4770      	bx	lr

0000e306 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e306:	6843      	ldr	r3, [r0, #4]
    e308:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    e30a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    e30e:	4042      	eors	r2, r0
    e310:	400a      	ands	r2, r1
    e312:	4042      	eors	r2, r0
    p_reg->OUT = value;
    e314:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    e318:	2000      	movs	r0, #0
    e31a:	4770      	bx	lr

0000e31c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e31c:	6843      	ldr	r3, [r0, #4]
    e31e:	685b      	ldr	r3, [r3, #4]
}
    e320:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    e322:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    e326:	4770      	bx	lr

0000e328 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e328:	6843      	ldr	r3, [r0, #4]
    e32a:	685b      	ldr	r3, [r3, #4]
}
    e32c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    e32e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    e332:	4770      	bx	lr

0000e334 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e334:	6843      	ldr	r3, [r0, #4]
    e336:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    e338:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    e33c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    e33e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    e342:	2000      	movs	r0, #0
    e344:	4770      	bx	lr

0000e346 <gpio_nrfx_manage_callback>:
	return port->data;
    e346:	6903      	ldr	r3, [r0, #16]
	return list->head;
    e348:	6858      	ldr	r0, [r3, #4]
{
    e34a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    e34c:	b158      	cbz	r0, e366 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e34e:	2400      	movs	r4, #0
    e350:	4281      	cmp	r1, r0
    e352:	d112      	bne.n	e37a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    e354:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    e356:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    e358:	b954      	cbnz	r4, e370 <gpio_nrfx_manage_callback+0x2a>
    e35a:	428d      	cmp	r5, r1
	list->head = node;
    e35c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    e35e:	d100      	bne.n	e362 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    e360:	6098      	str	r0, [r3, #8]
	parent->next = child;
    e362:	2000      	movs	r0, #0
    e364:	6008      	str	r0, [r1, #0]
	if (set) {
    e366:	b96a      	cbnz	r2, e384 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    e368:	2000      	movs	r0, #0
}
    e36a:	bd30      	pop	{r4, r5, pc}
    e36c:	4628      	mov	r0, r5
    e36e:	e7ef      	b.n	e350 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    e370:	428d      	cmp	r5, r1
	parent->next = child;
    e372:	6020      	str	r0, [r4, #0]
	list->tail = node;
    e374:	bf08      	it	eq
    e376:	609c      	streq	r4, [r3, #8]
}
    e378:	e7f3      	b.n	e362 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    e37a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e37c:	4604      	mov	r4, r0
    e37e:	2d00      	cmp	r5, #0
    e380:	d1f4      	bne.n	e36c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    e382:	b13a      	cbz	r2, e394 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    e384:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    e386:	685a      	ldr	r2, [r3, #4]
    e388:	600a      	str	r2, [r1, #0]
	list->head = node;
    e38a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    e38c:	2800      	cmp	r0, #0
    e38e:	d1eb      	bne.n	e368 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    e390:	6099      	str	r1, [r3, #8]
}
    e392:	e7ea      	b.n	e36a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    e394:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    e398:	e7e7      	b.n	e36a <gpio_nrfx_manage_callback+0x24>

0000e39a <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    e39a:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    e39c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    e3a0:	2908      	cmp	r1, #8
    e3a2:	6e66      	ldr	r6, [r4, #100]	; 0x64
    e3a4:	6e65      	ldr	r5, [r4, #100]	; 0x64
    e3a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e3a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    e3aa:	ea4f 2515 	mov.w	r5, r5, lsr #8
    e3ae:	ea4f 6303 	mov.w	r3, r3, lsl #24
    e3b2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    e3b6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    e3ba:	ea4f 2202 	mov.w	r2, r2, lsl #8
    e3be:	ea43 0305 	orr.w	r3, r3, r5
    e3c2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    e3c6:	ea43 0302 	orr.w	r3, r3, r2
    e3ca:	9300      	str	r3, [sp, #0]
    e3cc:	6e26      	ldr	r6, [r4, #96]	; 0x60
    e3ce:	6e25      	ldr	r5, [r4, #96]	; 0x60
    e3d0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    e3d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    e3d4:	ea4f 2415 	mov.w	r4, r5, lsr #8
    e3d8:	ea4f 6303 	mov.w	r3, r3, lsl #24
    e3dc:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    e3e0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
    e3e4:	ea43 0304 	orr.w	r3, r3, r4
    e3e8:	ea4f 2402 	mov.w	r4, r2, lsl #8
    e3ec:	bf28      	it	cs
    e3ee:	2108      	movcs	r1, #8
    e3f0:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    e3f4:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    e3f6:	460a      	mov	r2, r1
    e3f8:	460c      	mov	r4, r1
    e3fa:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    e3fc:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    e3fe:	f7ff fe69 	bl	e0d4 <memcpy>

	return length;
}
    e402:	4620      	mov	r0, r4
    e404:	b002      	add	sp, #8
    e406:	bd70      	pop	{r4, r5, r6, pc}

0000e408 <z_impl_hwinfo_get_reset_cause>:
    return p_reg->RESETREAS;
    e408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e40c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
{
	uint32_t flags = 0;

	uint32_t reason = nrfx_reset_reason_get();

	if (reason & NRFX_RESET_REASON_RESETPIN_MASK) {
    e410:	f002 0301 	and.w	r3, r2, #1
		flags |= RESET_PIN;
	}
	if (reason & NRFX_RESET_REASON_DOG_MASK) {
    e414:	0791      	lsls	r1, r2, #30
		flags |= RESET_WATCHDOG;
    e416:	bf48      	it	mi
    e418:	f043 0310 	orrmi.w	r3, r3, #16
	}
	if (reason & NRFX_RESET_REASON_LOCKUP_MASK) {
    e41c:	0711      	lsls	r1, r2, #28
		flags |= RESET_CPU_LOCKUP;
    e41e:	bf48      	it	mi
    e420:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
	}
	if (reason & NRFX_RESET_REASON_OFF_MASK) {
    e424:	03d1      	lsls	r1, r2, #15
		flags |= RESET_LOW_POWER_WAKE;
    e426:	bf48      	it	mi
    e428:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
	}
	if (reason & NRFX_RESET_REASON_DIF_MASK) {
    e42c:	0351      	lsls	r1, r2, #13
		flags |= RESET_DEBUG;
    e42e:	bf48      	it	mi
    e430:	f043 0320 	orrmi.w	r3, r3, #32
		flags |= RESET_DEBUG;
	}
#endif

#else
	if (reason & NRFX_RESET_REASON_SREQ_MASK) {
    e434:	0752      	lsls	r2, r2, #29
		flags |= RESET_SOFTWARE;
    e436:	bf48      	it	mi
    e438:	f043 0302 	orrmi.w	r3, r3, #2
	}
#endif

	*cause = flags;
    e43c:	6003      	str	r3, [r0, #0]

	return 0;
}
    e43e:	2000      	movs	r0, #0
    e440:	4770      	bx	lr

0000e442 <z_impl_hwinfo_clear_reset_cause>:
    p_reg->RESETREAS = mask;
    e442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e44a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	uint32_t reason = -1;

	nrfx_reset_reason_clear(reason);

	return 0;
}
    e44e:	2000      	movs	r0, #0
    e450:	4770      	bx	lr

0000e452 <z_impl_hwinfo_get_supported_reset_cause>:

int z_impl_hwinfo_get_supported_reset_cause(uint32_t *supported)
{
	*supported = (RESET_PIN
    e452:	f240 13b3 	movw	r3, #435	; 0x1b3
    e456:	6003      	str	r3, [r0, #0]
		      | RESET_CPU_LOCKUP
		      | RESET_LOW_POWER_WAKE
		      | RESET_DEBUG);

	return 0;
}
    e458:	2000      	movs	r0, #0
    e45a:	4770      	bx	lr

0000e45c <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    e45c:	6902      	ldr	r2, [r0, #16]
{
    e45e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    e460:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    e464:	e883 0003 	stmia.w	r3, {r0, r1}
}
    e468:	2000      	movs	r0, #0
    e46a:	4770      	bx	lr

0000e46c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    e46c:	6843      	ldr	r3, [r0, #4]
    e46e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    e470:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    e474:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    e478:	4770      	bx	lr

0000e47a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    e47a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    e47c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    e47e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e480:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e484:	b148      	cbz	r0, e49a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    e486:	7d52      	ldrb	r2, [r2, #21]
    e488:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e48a:	2000      	movs	r0, #0
    e48c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    e490:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e494:	2201      	movs	r2, #1
    e496:	601a      	str	r2, [r3, #0]
	return 0;
    e498:	4770      	bx	lr
		return -1;
    e49a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e49e:	4770      	bx	lr

0000e4a0 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e4a0:	2a00      	cmp	r2, #0
{
    e4a2:	b510      	push	{r4, lr}
    e4a4:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e4a6:	dd0f      	ble.n	e4c8 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    e4a8:	6843      	ldr	r3, [r0, #4]
    e4aa:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e4ac:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    e4b0:	b148      	cbz	r0, e4c6 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
    e4b2:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e4b4:	2000      	movs	r0, #0
    e4b6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    e4ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    e4be:	7d52      	ldrb	r2, [r2, #21]
    e4c0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e4c2:	2001      	movs	r0, #1
    e4c4:	6018      	str	r0, [r3, #0]
}
    e4c6:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    e4c8:	2000      	movs	r0, #0
    e4ca:	e7fc      	b.n	e4c6 <uarte_nrfx_fifo_read+0x26>

0000e4cc <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    e4cc:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    e4ce:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    e4d0:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    e4d2:	f04f 0020 	mov.w	r0, #32
    e4d6:	f3ef 8311 	mrs	r3, BASEPRI
    e4da:	f380 8812 	msr	BASEPRI_MAX, r0
    e4de:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    e4e2:	68c9      	ldr	r1, [r1, #12]
    e4e4:	2000      	movs	r0, #0
    e4e6:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    e4e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    e4ec:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    e4f0:	f383 8811 	msr	BASEPRI, r3
    e4f4:	f3bf 8f6f 	isb	sy
}
    e4f8:	4770      	bx	lr

0000e4fa <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    e4fa:	6903      	ldr	r3, [r0, #16]
    e4fc:	68db      	ldr	r3, [r3, #12]
    e4fe:	2201      	movs	r2, #1
    e500:	739a      	strb	r2, [r3, #14]
}
    e502:	4770      	bx	lr

0000e504 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    e504:	6903      	ldr	r3, [r0, #16]
    e506:	68db      	ldr	r3, [r3, #12]
    e508:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    e50a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    e50e:	b962      	cbnz	r2, e52a <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    e510:	6842      	ldr	r2, [r0, #4]
    e512:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e514:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    e518:	b140      	cbz	r0, e52c <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    e51a:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    e51e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    e522:	d003      	beq.n	e52c <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    e524:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    e526:	2001      	movs	r0, #1
    e528:	4770      	bx	lr
    e52a:	2000      	movs	r0, #0
}
    e52c:	4770      	bx	lr

0000e52e <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    e52e:	6843      	ldr	r3, [r0, #4]
    e530:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e532:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    e536:	3800      	subs	r0, #0
    e538:	bf18      	it	ne
    e53a:	2001      	movne	r0, #1
    e53c:	4770      	bx	lr

0000e53e <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    e53e:	6843      	ldr	r3, [r0, #4]
    e540:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    e542:	2210      	movs	r2, #16
    e544:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e548:	4770      	bx	lr

0000e54a <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    e54a:	6843      	ldr	r3, [r0, #4]
    e54c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e54e:	2210      	movs	r2, #16
    e550:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e554:	4770      	bx	lr

0000e556 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    e556:	6843      	ldr	r3, [r0, #4]
    e558:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    e55a:	f44f 7200 	mov.w	r2, #512	; 0x200
    e55e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e562:	4770      	bx	lr

0000e564 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    e564:	6843      	ldr	r3, [r0, #4]
    e566:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e568:	f44f 7200 	mov.w	r2, #512	; 0x200
    e56c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e570:	4770      	bx	lr

0000e572 <uarte_nrfx_irq_update>:
}
    e572:	2001      	movs	r0, #1
    e574:	4770      	bx	lr

0000e576 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    e576:	6903      	ldr	r3, [r0, #16]
    e578:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    e57a:	e9c3 1200 	strd	r1, r2, [r3]
}
    e57e:	4770      	bx	lr

0000e580 <uarte_nrfx_irq_is_pending>:
{
    e580:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    e582:	6843      	ldr	r3, [r0, #4]
    e584:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    e586:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    e58a:	025b      	lsls	r3, r3, #9
{
    e58c:	4604      	mov	r4, r0
		||
    e58e:	d405      	bmi.n	e59c <uarte_nrfx_irq_is_pending+0x1c>
    e590:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    e594:	f010 0010 	ands.w	r0, r0, #16
    e598:	d106      	bne.n	e5a8 <uarte_nrfx_irq_is_pending+0x28>
}
    e59a:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    e59c:	f7ff ffb2 	bl	e504 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    e5a0:	2800      	cmp	r0, #0
    e5a2:	d0f5      	beq.n	e590 <uarte_nrfx_irq_is_pending+0x10>
		||
    e5a4:	2001      	movs	r0, #1
    e5a6:	e7f8      	b.n	e59a <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    e5a8:	4620      	mov	r0, r4
    e5aa:	f7ff ffc0 	bl	e52e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    e5ae:	3800      	subs	r0, #0
    e5b0:	bf18      	it	ne
    e5b2:	2001      	movne	r0, #1
    e5b4:	e7f1      	b.n	e59a <uarte_nrfx_irq_is_pending+0x1a>

0000e5b6 <nrf_gpio_cfg_input>:
{
    e5b6:	b507      	push	{r0, r1, r2, lr}
    e5b8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e5ba:	a801      	add	r0, sp, #4
    e5bc:	f7f9 fbc2 	bl	7d44 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e5c6:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    e5c8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    e5cc:	b003      	add	sp, #12
    e5ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000e5d2 <tx_start.isra.0>:
	return config->uarte_regs;
    e5d2:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e5d4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e5d8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5dc:	2200      	movs	r2, #0
    e5de:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e5e2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    e5e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    e5ea:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e5ee:	6842      	ldr	r2, [r0, #4]
    e5f0:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    e5f2:	bf41      	itttt	mi
    e5f4:	2208      	movmi	r2, #8
    e5f6:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    e5fa:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    e5fe:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e602:	2201      	movs	r2, #1
    e604:	609a      	str	r2, [r3, #8]
}
    e606:	4770      	bx	lr

0000e608 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    e608:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    e60a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e60c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    e610:	b940      	cbnz	r0, e624 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    e612:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    e614:	079b      	lsls	r3, r3, #30
    e616:	d406      	bmi.n	e626 <is_tx_ready.isra.0+0x1e>
    e618:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    e61c:	3800      	subs	r0, #0
    e61e:	bf18      	it	ne
    e620:	2001      	movne	r0, #1
    e622:	4770      	bx	lr
    e624:	2001      	movs	r0, #1
}
    e626:	4770      	bx	lr

0000e628 <uarte_nrfx_fifo_fill>:
{
    e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    e62a:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    e62c:	68f3      	ldr	r3, [r6, #12]
    e62e:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    e630:	f3bf 8f5b 	dmb	ish
    e634:	4294      	cmp	r4, r2
    e636:	bfa8      	it	ge
    e638:	4614      	movge	r4, r2
{
    e63a:	4605      	mov	r5, r0
    e63c:	3310      	adds	r3, #16
    e63e:	2201      	movs	r2, #1
    e640:	e853 0f00 	ldrex	r0, [r3]
    e644:	2800      	cmp	r0, #0
    e646:	d103      	bne.n	e650 <uarte_nrfx_fifo_fill+0x28>
    e648:	e843 2700 	strex	r7, r2, [r3]
    e64c:	2f00      	cmp	r7, #0
    e64e:	d1f7      	bne.n	e640 <uarte_nrfx_fifo_fill+0x18>
    e650:	f3bf 8f5b 	dmb	ish
    e654:	bf0c      	ite	eq
    e656:	4613      	moveq	r3, r2
    e658:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    e65a:	d01d      	beq.n	e698 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    e65c:	461c      	mov	r4, r3
}
    e65e:	4620      	mov	r0, r4
    e660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    e662:	68f2      	ldr	r2, [r6, #12]
    e664:	5cc8      	ldrb	r0, [r1, r3]
    e666:	6892      	ldr	r2, [r2, #8]
    e668:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    e66a:	3301      	adds	r3, #1
    e66c:	42a3      	cmp	r3, r4
    e66e:	dbf8      	blt.n	e662 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    e670:	f04f 0320 	mov.w	r3, #32
    e674:	f3ef 8711 	mrs	r7, BASEPRI
    e678:	f383 8812 	msr	BASEPRI_MAX, r3
    e67c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    e680:	6868      	ldr	r0, [r5, #4]
    e682:	f7ff ffc1 	bl	e608 <is_tx_ready.isra.0>
    e686:	68f3      	ldr	r3, [r6, #12]
    e688:	b940      	cbnz	r0, e69c <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    e68a:	6118      	str	r0, [r3, #16]
		len = 0;
    e68c:	4604      	mov	r4, r0
	__asm__ volatile(
    e68e:	f387 8811 	msr	BASEPRI, r7
    e692:	f3bf 8f6f 	isb	sy
	return len;
    e696:	e7e2      	b.n	e65e <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    e698:	2300      	movs	r3, #0
    e69a:	e7e7      	b.n	e66c <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    e69c:	6899      	ldr	r1, [r3, #8]
    e69e:	6868      	ldr	r0, [r5, #4]
    e6a0:	4622      	mov	r2, r4
    e6a2:	f7ff ff96 	bl	e5d2 <tx_start.isra.0>
    e6a6:	e7f2      	b.n	e68e <uarte_nrfx_fifo_fill+0x66>

0000e6a8 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    e6a8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    e6aa:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    e6ac:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    e6b0:	05c9      	lsls	r1, r1, #23
{
    e6b2:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    e6b4:	d518      	bpl.n	e6e8 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e6b6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    e6ba:	b1a9      	cbz	r1, e6e8 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    e6bc:	f04f 0420 	mov.w	r4, #32
    e6c0:	f3ef 8111 	mrs	r1, BASEPRI
    e6c4:	f384 8812 	msr	BASEPRI_MAX, r4
    e6c8:	f3bf 8f6f 	isb	sy
    e6cc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    e6d0:	b134      	cbz	r4, e6e0 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e6d2:	2400      	movs	r4, #0
    e6d4:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    e6d8:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e6dc:	2401      	movs	r4, #1
    e6de:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    e6e0:	f381 8811 	msr	BASEPRI, r1
    e6e4:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e6e8:	6852      	ldr	r2, [r2, #4]
    e6ea:	06d2      	lsls	r2, r2, #27
    e6ec:	d51a      	bpl.n	e724 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    e6ee:	f04f 0220 	mov.w	r2, #32
    e6f2:	f3ef 8111 	mrs	r1, BASEPRI
    e6f6:	f382 8812 	msr	BASEPRI_MAX, r2
    e6fa:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e6fe:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e702:	b112      	cbz	r2, e70a <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e704:	2200      	movs	r2, #0
    e706:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    e70a:	6902      	ldr	r2, [r0, #16]
    e70c:	68d2      	ldr	r2, [r2, #12]
    e70e:	b10a      	cbz	r2, e714 <uarte_nrfx_isr_int+0x6c>
    e710:	6912      	ldr	r2, [r2, #16]
    e712:	b91a      	cbnz	r2, e71c <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    e714:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    e718:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    e71c:	f381 8811 	msr	BASEPRI, r1
    e720:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    e724:	6902      	ldr	r2, [r0, #16]
    e726:	68d2      	ldr	r2, [r2, #12]
    e728:	b15a      	cbz	r2, e742 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e72a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    e72e:	b151      	cbz	r1, e746 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
    e730:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    e732:	2100      	movs	r1, #0
    e734:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    e736:	b134      	cbz	r4, e746 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
    e738:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    e73c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    e740:	7391      	strb	r1, [r2, #14]
}
    e742:	bc10      	pop	{r4}
    e744:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e746:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    e74a:	b121      	cbz	r1, e756 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e74c:	2100      	movs	r1, #0
    e74e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    e752:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    e756:	6813      	ldr	r3, [r2, #0]
    e758:	2b00      	cmp	r3, #0
    e75a:	d0f2      	beq.n	e742 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    e75c:	6851      	ldr	r1, [r2, #4]
}
    e75e:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    e760:	4718      	bx	r3

0000e762 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    e762:	b510      	push	{r4, lr}
    e764:	2200      	movs	r2, #0
    e766:	4604      	mov	r4, r0
    e768:	2101      	movs	r1, #1
    e76a:	2028      	movs	r0, #40	; 0x28
    e76c:	f7f7 f932 	bl	59d4 <z_arm_irq_priority_set>
    e770:	2028      	movs	r0, #40	; 0x28
    e772:	f7f7 f8fd 	bl	5970 <arch_irq_enable>
    e776:	4620      	mov	r0, r4
    e778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e77c:	f7f9 bbec 	b.w	7f58 <uarte_instance_init.constprop.0>

0000e780 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    e780:	b510      	push	{r4, lr}
    e782:	2200      	movs	r2, #0
    e784:	4604      	mov	r4, r0
    e786:	2101      	movs	r1, #1
    e788:	2002      	movs	r0, #2
    e78a:	f7f7 f923 	bl	59d4 <z_arm_irq_priority_set>
    e78e:	2002      	movs	r0, #2
    e790:	f7f7 f8ee 	bl	5970 <arch_irq_enable>
    e794:	4620      	mov	r0, r4
    e796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e79a:	f7f9 bbdd 	b.w	7f58 <uarte_instance_init.constprop.0>

0000e79e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    e79e:	4770      	bx	lr

0000e7a0 <sys_clock_cycle_get_32>:
{
    e7a0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    e7a2:	f7f9 fd35 	bl	8210 <z_nrf_rtc_timer_read>
}
    e7a6:	bd08      	pop	{r3, pc}

0000e7a8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    e7a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    e7ac:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    e7b0:	f1a0 0308 	sub.w	r3, r0, #8
    e7b4:	4258      	negs	r0, r3
    e7b6:	4158      	adcs	r0, r3
    e7b8:	4770      	bx	lr

0000e7ba <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    e7ba:	4700      	bx	r0

0000e7bc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    e7bc:	f000 bc08 	b.w	efd0 <z_impl_k_busy_wait>

0000e7c0 <nrfx_clock_start>:
    switch (domain)
    e7c0:	b110      	cbz	r0, e7c8 <nrfx_clock_start+0x8>
    e7c2:	2801      	cmp	r0, #1
    e7c4:	d01d      	beq.n	e802 <nrfx_clock_start+0x42>
    e7c6:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e7c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e7cc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e7d0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    e7d4:	03c9      	lsls	r1, r1, #15
    e7d6:	d512      	bpl.n	e7fe <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    e7d8:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    e7dc:	2a01      	cmp	r2, #1
    e7de:	d10e      	bne.n	e7fe <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    e7e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e7e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e7e8:	2200      	movs	r2, #0
    e7ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e7ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    e7f2:	2202      	movs	r2, #2
    e7f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e7f8:	2201      	movs	r2, #1
    e7fa:	609a      	str	r2, [r3, #8]
}
    e7fc:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    e7fe:	2200      	movs	r2, #0
    e800:	e7ee      	b.n	e7e0 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e806:	2200      	movs	r2, #0
    e808:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    e80c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    e810:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e814:	6018      	str	r0, [r3, #0]
}
    e816:	4770      	bx	lr

0000e818 <nrf_gpio_reconfigure>:
{
    e818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e81a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e81c:	a801      	add	r0, sp, #4
{
    e81e:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    e822:	4617      	mov	r7, r2
    e824:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    e826:	f7fa f885 	bl	8934 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    e82a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    e82c:	2f00      	cmp	r7, #0
    e82e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e832:	bf14      	ite	ne
    e834:	2302      	movne	r3, #2
    e836:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    e838:	2900      	cmp	r1, #0
    e83a:	bf18      	it	ne
    e83c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    e840:	2d00      	cmp	r5, #0
    e842:	bf14      	ite	ne
    e844:	f04f 0c0c 	movne.w	ip, #12
    e848:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    e84c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    e84e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    e852:	bf14      	ite	ne
    e854:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    e858:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    e85c:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    e85e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    e862:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    e866:	bf14      	ite	ne
    e868:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    e86c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    e870:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    e874:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    e878:	b101      	cbz	r1, e87c <nrf_gpio_reconfigure+0x64>
    e87a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    e87c:	b10f      	cbz	r7, e882 <nrf_gpio_reconfigure+0x6a>
    e87e:	783f      	ldrb	r7, [r7, #0]
    e880:	007f      	lsls	r7, r7, #1
    e882:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    e884:	b10d      	cbz	r5, e88a <nrf_gpio_reconfigure+0x72>
    e886:	782d      	ldrb	r5, [r5, #0]
    e888:	00ad      	lsls	r5, r5, #2
    e88a:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    e88c:	b10c      	cbz	r4, e892 <nrf_gpio_reconfigure+0x7a>
    e88e:	7822      	ldrb	r2, [r4, #0]
    e890:	0214      	lsls	r4, r2, #8
    e892:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    e894:	b10e      	cbz	r6, e89a <nrf_gpio_reconfigure+0x82>
    e896:	7836      	ldrb	r6, [r6, #0]
    e898:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    e89a:	432c      	orrs	r4, r5
    e89c:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    e89e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    e8a2:	b003      	add	sp, #12
    e8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e8a6 <nrf_gpio_cfg_sense_set>:
{
    e8a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    e8a8:	f10d 030f 	add.w	r3, sp, #15
    e8ac:	9301      	str	r3, [sp, #4]
    e8ae:	2300      	movs	r3, #0
{
    e8b0:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    e8b4:	9300      	str	r3, [sp, #0]
    e8b6:	461a      	mov	r2, r3
    e8b8:	4619      	mov	r1, r3
    e8ba:	f7ff ffad 	bl	e818 <nrf_gpio_reconfigure>
}
    e8be:	b005      	add	sp, #20
    e8c0:	f85d fb04 	ldr.w	pc, [sp], #4

0000e8c4 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e8c4:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    e8c8:	681a      	ldr	r2, [r3, #0]
    e8ca:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e8cc:	bf1f      	itttt	ne
    e8ce:	2200      	movne	r2, #0
    e8d0:	601a      	strne	r2, [r3, #0]
    e8d2:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e8d4:	2001      	movne	r0, #1
    e8d6:	bf08      	it	eq
    e8d8:	2000      	moveq	r0, #0
}
    e8da:	4770      	bx	lr

0000e8dc <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    e8dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e8e0:	f44f 7260 	mov.w	r2, #896	; 0x380
    e8e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e8e8:	4770      	bx	lr

0000e8ea <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    e8ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e8ee:	f44f 7260 	mov.w	r2, #896	; 0x380
    e8f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e8f6:	4770      	bx	lr

0000e8f8 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    e8f8:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    e8fa:	f7fa fbcb 	bl	9094 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    e8fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    e902:	f7f9 bfe3 	b.w	88cc <nrfx_clock_irq_handler>

0000e906 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    e906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    e90a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    e90e:	f1a0 0308 	sub.w	r3, r0, #8
    e912:	4258      	negs	r0, r3
    e914:	4158      	adcs	r0, r3
    e916:	4770      	bx	lr

0000e918 <nrfx_usbd_consumer>:
{
    e918:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    e91a:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    e91c:	680d      	ldr	r5, [r1, #0]
    e91e:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    e920:	bf97      	itett	ls
    e922:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    e926:	2100      	movhi	r1, #0
        size -= data_size;
    e928:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    e92a:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    e92c:	bf8e      	itee	hi
    e92e:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    e932:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    e934:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    e936:	429a      	cmp	r2, r3
    e938:	d103      	bne.n	e942 <nrfx_usbd_consumer+0x2a>
    e93a:	1e20      	subs	r0, r4, #0
    e93c:	bf18      	it	ne
    e93e:	2001      	movne	r0, #1
}
    e940:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    e942:	2000      	movs	r0, #0
    e944:	e7fc      	b.n	e940 <nrfx_usbd_consumer+0x28>

0000e946 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    e946:	684b      	ldr	r3, [r1, #4]
{
    e948:	b510      	push	{r4, lr}
    e94a:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    e94c:	680c      	ldr	r4, [r1, #0]
    e94e:	bf28      	it	cs
    e950:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    e952:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    e956:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    e958:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    e95a:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    e95c:	441a      	add	r2, r3
}
    e95e:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    e960:	600a      	str	r2, [r1, #0]
}
    e962:	bf18      	it	ne
    e964:	2001      	movne	r0, #1
    e966:	bd10      	pop	{r4, pc}

0000e968 <nrfx_usbd_feeder_ram_zlp>:
{
    e968:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    e96a:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    e96c:	680b      	ldr	r3, [r1, #0]
    e96e:	42a2      	cmp	r2, r4
    e970:	bf28      	it	cs
    e972:	4622      	movcs	r2, r4
    e974:	2a00      	cmp	r2, #0
    e976:	bf14      	ite	ne
    e978:	461d      	movne	r5, r3
    e97a:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    e97c:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    e980:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    e984:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    e986:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    e988:	600a      	str	r2, [r1, #0]
}
    e98a:	bf14      	ite	ne
    e98c:	2001      	movne	r0, #1
    e98e:	2000      	moveq	r0, #0
    e990:	bd30      	pop	{r4, r5, pc}

0000e992 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    e992:	f010 0f80 	tst.w	r0, #128	; 0x80
    e996:	bf14      	ite	ne
    e998:	2300      	movne	r3, #0
    e99a:	2310      	moveq	r3, #16
    e99c:	f000 000f 	and.w	r0, r0, #15
}
    e9a0:	4418      	add	r0, r3
    e9a2:	4770      	bx	lr

0000e9a4 <ev_started_handler>:
}
    e9a4:	4770      	bx	lr

0000e9a6 <nrf_usbd_epin_dma_handler>:
{
    e9a6:	b508      	push	{r3, lr}
    e9a8:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
    e9aa:	f7fa fbeb 	bl	9184 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    e9ae:	4608      	mov	r0, r1
    e9b0:	f7fa fbda 	bl	9168 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    e9b4:	7b83      	ldrb	r3, [r0, #14]
    e9b6:	2b03      	cmp	r3, #3
    e9b8:	d10a      	bne.n	e9d0 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    e9ba:	4608      	mov	r0, r1
    e9bc:	f7ff ffe9 	bl	e992 <ep2bit>
    e9c0:	2301      	movs	r3, #1
    e9c2:	fa03 f000 	lsl.w	r0, r3, r0
    e9c6:	43c0      	mvns	r0, r0
}
    e9c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    e9cc:	f7fa bcea 	b.w	93a4 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    e9d0:	6803      	ldr	r3, [r0, #0]
    e9d2:	2b00      	cmp	r3, #0
    e9d4:	d0f1      	beq.n	e9ba <nrf_usbd_epin_dma_handler+0x14>
}
    e9d6:	bd08      	pop	{r3, pc}

0000e9d8 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    e9d8:	2087      	movs	r0, #135	; 0x87
    e9da:	f7ff bfe4 	b.w	e9a6 <nrf_usbd_epin_dma_handler>

0000e9de <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    e9de:	2086      	movs	r0, #134	; 0x86
    e9e0:	f7ff bfe1 	b.w	e9a6 <nrf_usbd_epin_dma_handler>

0000e9e4 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    e9e4:	2085      	movs	r0, #133	; 0x85
    e9e6:	f7ff bfde 	b.w	e9a6 <nrf_usbd_epin_dma_handler>

0000e9ea <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    e9ea:	2084      	movs	r0, #132	; 0x84
    e9ec:	f7ff bfdb 	b.w	e9a6 <nrf_usbd_epin_dma_handler>

0000e9f0 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    e9f0:	2083      	movs	r0, #131	; 0x83
    e9f2:	f7ff bfd8 	b.w	e9a6 <nrf_usbd_epin_dma_handler>

0000e9f6 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    e9f6:	2082      	movs	r0, #130	; 0x82
    e9f8:	f7ff bfd5 	b.w	e9a6 <nrf_usbd_epin_dma_handler>

0000e9fc <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    e9fc:	2081      	movs	r0, #129	; 0x81
    e9fe:	f7ff bfd2 	b.w	e9a6 <nrf_usbd_epin_dma_handler>

0000ea02 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    ea02:	f7fa bcdf 	b.w	93c4 <nrf_usbd_ep0in_dma_handler>

0000ea06 <nrfx_usbd_ep_max_packet_size_set>:
{
    ea06:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    ea08:	f7fa fbae 	bl	9168 <ep_state_access>
    p_state->max_packet_size = size;
    ea0c:	8181      	strh	r1, [r0, #12]
}
    ea0e:	bd08      	pop	{r3, pc}

0000ea10 <nrfx_usbd_ep_status_get>:
{
    ea10:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    ea12:	f7fa fba9 	bl	9168 <ep_state_access>
	__asm__ volatile(
    ea16:	f04f 0220 	mov.w	r2, #32
    ea1a:	f3ef 8311 	mrs	r3, BASEPRI
    ea1e:	f382 8812 	msr	BASEPRI_MAX, r2
    ea22:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    ea26:	6882      	ldr	r2, [r0, #8]
    ea28:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    ea2a:	6802      	ldr	r2, [r0, #0]
    ea2c:	b92a      	cbnz	r2, ea3a <nrfx_usbd_ep_status_get+0x2a>
    ea2e:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    ea30:	f383 8811 	msr	BASEPRI, r3
    ea34:	f3bf 8f6f 	isb	sy
}
    ea38:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    ea3a:	2004      	movs	r0, #4
    ea3c:	e7f8      	b.n	ea30 <nrfx_usbd_ep_status_get+0x20>

0000ea3e <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    ea3e:	2007      	movs	r0, #7
    ea40:	f7fa bff8 	b.w	9a34 <nrf_usbd_epout_dma_handler>

0000ea44 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    ea44:	2006      	movs	r0, #6
    ea46:	f7fa bff5 	b.w	9a34 <nrf_usbd_epout_dma_handler>

0000ea4a <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    ea4a:	2005      	movs	r0, #5
    ea4c:	f7fa bff2 	b.w	9a34 <nrf_usbd_epout_dma_handler>

0000ea50 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    ea50:	2004      	movs	r0, #4
    ea52:	f7fa bfef 	b.w	9a34 <nrf_usbd_epout_dma_handler>

0000ea56 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    ea56:	2003      	movs	r0, #3
    ea58:	f7fa bfec 	b.w	9a34 <nrf_usbd_epout_dma_handler>

0000ea5c <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    ea5c:	2002      	movs	r0, #2
    ea5e:	f7fa bfe9 	b.w	9a34 <nrf_usbd_epout_dma_handler>

0000ea62 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    ea62:	2001      	movs	r0, #1
    ea64:	f7fa bfe6 	b.w	9a34 <nrf_usbd_epout_dma_handler>

0000ea68 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    ea68:	f7fb b8da 	b.w	9c20 <usbd_ep_abort>

0000ea6c <z_device_state_init>:
}
    ea6c:	4770      	bx	lr

0000ea6e <z_device_is_ready>:
	if (dev == NULL) {
    ea6e:	b138      	cbz	r0, ea80 <z_device_is_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
    ea70:	68c3      	ldr	r3, [r0, #12]
    ea72:	8818      	ldrh	r0, [r3, #0]
    ea74:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ea78:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    ea7c:	4258      	negs	r0, r3
    ea7e:	4158      	adcs	r0, r3
}
    ea80:	4770      	bx	lr

0000ea82 <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
    ea82:	6940      	ldr	r0, [r0, #20]
{
    ea84:	b470      	push	{r4, r5, r6}
    ea86:	4613      	mov	r3, r2
    ea88:	460d      	mov	r5, r1
	if (rv != NULL) {
    ea8a:	b960      	cbnz	r0, eaa6 <device_required_foreach+0x24>
	size_t handle_count = 0;
    ea8c:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
    ea8e:	462a      	mov	r2, r5
}
    ea90:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
    ea92:	f7fb bad3 	b.w	a03c <device_visitor>
			++i;
    ea96:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    ea98:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
    ea9c:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    ea9e:	b2a4      	uxth	r4, r4
    eaa0:	4294      	cmp	r4, r2
    eaa2:	d9f8      	bls.n	ea96 <device_required_foreach+0x14>
    eaa4:	e7f3      	b.n	ea8e <device_required_foreach+0xc>
		size_t i = 0;
    eaa6:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    eaa8:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    eaac:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    eab0:	e7f2      	b.n	ea98 <device_required_foreach+0x16>

0000eab2 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    eab2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    eab4:	ab0a      	add	r3, sp, #40	; 0x28
    eab6:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    eab8:	9302      	str	r3, [sp, #8]
    eaba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eabc:	9301      	str	r3, [sp, #4]
    eabe:	2300      	movs	r3, #0
    eac0:	9300      	str	r3, [sp, #0]
    eac2:	2201      	movs	r2, #1
    eac4:	4618      	mov	r0, r3
    eac6:	f7f3 f8af 	bl	1c28 <z_impl_z_log_msg2_runtime_vcreate>
}
    eaca:	b007      	add	sp, #28
    eacc:	f85d fb04 	ldr.w	pc, [sp], #4

0000ead0 <arch_system_halt>:
	__asm__ volatile(
    ead0:	f04f 0220 	mov.w	r2, #32
    ead4:	f3ef 8311 	mrs	r3, BASEPRI
    ead8:	f382 8812 	msr	BASEPRI_MAX, r2
    eadc:	f3bf 8f6f 	isb	sy
	for (;;) {
    eae0:	e7fe      	b.n	eae0 <arch_system_halt+0x10>

0000eae2 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    eae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eae4:	4604      	mov	r4, r0
    eae6:	460d      	mov	r5, r1
    eae8:	f04f 0320 	mov.w	r3, #32
    eaec:	f3ef 8611 	mrs	r6, BASEPRI
    eaf0:	f383 8812 	msr	BASEPRI_MAX, r3
    eaf4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    eaf8:	6947      	ldr	r7, [r0, #20]
    eafa:	b97f      	cbnz	r7, eb1c <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    eafc:	f000 f9dc 	bl	eeb8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    eb00:	b160      	cbz	r0, eb1c <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    eb02:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    eb04:	6142      	str	r2, [r0, #20]
    eb06:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
			z_ready_thread(pending_thread);
    eb0a:	f000 f964 	bl	edd6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    eb0e:	4631      	mov	r1, r6
    eb10:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    eb14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    eb18:	f7fc b8f0 	b.w	acfc <z_reschedule>
	**(char ***) mem = slab->free_list;
    eb1c:	682b      	ldr	r3, [r5, #0]
    eb1e:	6962      	ldr	r2, [r4, #20]
    eb20:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    eb22:	682b      	ldr	r3, [r5, #0]
    eb24:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    eb26:	69a3      	ldr	r3, [r4, #24]
    eb28:	3b01      	subs	r3, #1
    eb2a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    eb2c:	f386 8811 	msr	BASEPRI, r6
    eb30:	f3bf 8f6f 	isb	sy
}
    eb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000eb36 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    eb36:	f3ef 8005 	mrs	r0, IPSR
}
    eb3a:	3800      	subs	r0, #0
    eb3c:	bf18      	it	ne
    eb3e:	2001      	movne	r0, #1
    eb40:	4770      	bx	lr

0000eb42 <k_thread_name_get>:
}
    eb42:	3078      	adds	r0, #120	; 0x78
    eb44:	4770      	bx	lr

0000eb46 <z_impl_k_thread_start>:
	z_sched_start(thread);
    eb46:	f7fc b9cf 	b.w	aee8 <z_sched_start>

0000eb4a <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
    eb4a:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
    eb4c:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
    eb50:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
    eb52:	4293      	cmp	r3, r2
    eb54:	d102      	bne.n	eb5c <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
    eb56:	600b      	str	r3, [r1, #0]

	return 0;
}
    eb58:	2000      	movs	r0, #0
    eb5a:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
    eb5c:	5ce0      	ldrb	r0, [r4, r3]
    eb5e:	28aa      	cmp	r0, #170	; 0xaa
    eb60:	d1f9      	bne.n	eb56 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
    eb62:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
    eb64:	e7f5      	b.n	eb52 <z_impl_k_thread_stack_space_get+0x8>

0000eb66 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    eb66:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
    eb6a:	4770      	bx	lr

0000eb6c <z_pm_save_idle_exit>:
{
    eb6c:	b508      	push	{r3, lr}
	pm_system_resume();
    eb6e:	f7f6 fd57 	bl	5620 <pm_system_resume>
}
    eb72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    eb76:	f7ff be12 	b.w	e79e <sys_clock_idle_exit>

0000eb7a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    eb7a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    eb7e:	428b      	cmp	r3, r1
    eb80:	d001      	beq.n	eb86 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    eb82:	f7fc ba21 	b.w	afc8 <z_set_prio>
}
    eb86:	2000      	movs	r0, #0
    eb88:	4770      	bx	lr

0000eb8a <z_impl_k_mutex_init>:
{
    eb8a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    eb8c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    eb8e:	e9c3 0002 	strd	r0, r0, [r3, #8]
    eb92:	e9c3 3300 	strd	r3, r3, [r3]
}
    eb96:	4770      	bx	lr

0000eb98 <queue_insert>:
{
    eb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eb9c:	4699      	mov	r9, r3
    eb9e:	4604      	mov	r4, r0
    eba0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    eba4:	460d      	mov	r5, r1
    eba6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    eba8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    ebac:	f04f 0220 	mov.w	r2, #32
    ebb0:	f3ef 8711 	mrs	r7, BASEPRI
    ebb4:	f382 8812 	msr	BASEPRI_MAX, r2
    ebb8:	f3bf 8f6f 	isb	sy
	if (is_append) {
    ebbc:	b103      	cbz	r3, ebc0 <queue_insert+0x28>
	return list->tail;
    ebbe:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    ebc0:	4630      	mov	r0, r6
    ebc2:	f000 f979 	bl	eeb8 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    ebc6:	b160      	cbz	r0, ebe2 <queue_insert+0x4a>
    ebc8:	2400      	movs	r4, #0
    ebca:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    ebce:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    ebd2:	f000 f900 	bl	edd6 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    ebd6:	4630      	mov	r0, r6
    ebd8:	4639      	mov	r1, r7
    ebda:	f7fc f88f 	bl	acfc <z_reschedule>
	return 0;
    ebde:	2000      	movs	r0, #0
    ebe0:	e00c      	b.n	ebfc <queue_insert+0x64>
	if (alloc) {
    ebe2:	f1b9 0f00 	cmp.w	r9, #0
    ebe6:	d01b      	beq.n	ec20 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    ebe8:	2108      	movs	r1, #8
    ebea:	f7fc fe1f 	bl	b82c <z_thread_aligned_alloc>
		if (anode == NULL) {
    ebee:	b938      	cbnz	r0, ec00 <queue_insert+0x68>
	__asm__ volatile(
    ebf0:	f387 8811 	msr	BASEPRI, r7
    ebf4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    ebf8:	f06f 000b 	mvn.w	r0, #11
}
    ebfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    ec00:	2301      	movs	r3, #1
		anode->data = data;
    ec02:	f8c0 8004 	str.w	r8, [r0, #4]
    ec06:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ec08:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    ec0a:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    ec0e:	b95d      	cbnz	r5, ec28 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    ec10:	6823      	ldr	r3, [r4, #0]
    ec12:	4313      	orrs	r3, r2
    ec14:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    ec16:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    ec18:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    ec1a:	b973      	cbnz	r3, ec3a <queue_insert+0xa2>
	list->tail = node;
    ec1c:	6060      	str	r0, [r4, #4]
}
    ec1e:	e00c      	b.n	ec3a <queue_insert+0xa2>
	node->next_and_flags = flags;
    ec20:	f8c8 9000 	str.w	r9, [r8]
}
    ec24:	4640      	mov	r0, r8
    ec26:	e7ef      	b.n	ec08 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ec28:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    ec2a:	f033 0303 	bics.w	r3, r3, #3
    ec2e:	d110      	bne.n	ec52 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
    ec30:	6002      	str	r2, [r0, #0]
	return list->tail;
    ec32:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    ec34:	b93a      	cbnz	r2, ec46 <queue_insert+0xae>
	list->head = node;
    ec36:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    ec3a:	2104      	movs	r1, #4
    ec3c:	f104 0010 	add.w	r0, r4, #16
    ec40:	f000 fb5c 	bl	f2fc <z_handle_obj_poll_events>
    ec44:	e7c7      	b.n	ebd6 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ec46:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    ec48:	f003 0303 	and.w	r3, r3, #3
    ec4c:	4303      	orrs	r3, r0
    ec4e:	6013      	str	r3, [r2, #0]
    ec50:	e7e4      	b.n	ec1c <queue_insert+0x84>
    ec52:	4313      	orrs	r3, r2
    ec54:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ec56:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    ec58:	f003 0303 	and.w	r3, r3, #3
    ec5c:	4303      	orrs	r3, r0
    ec5e:	602b      	str	r3, [r5, #0]
}
    ec60:	e7eb      	b.n	ec3a <queue_insert+0xa2>

0000ec62 <z_queue_node_peek>:
{
    ec62:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    ec64:	4604      	mov	r4, r0
    ec66:	b130      	cbz	r0, ec76 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    ec68:	6802      	ldr	r2, [r0, #0]
    ec6a:	0793      	lsls	r3, r2, #30
    ec6c:	d003      	beq.n	ec76 <z_queue_node_peek+0x14>
		ret = anode->data;
    ec6e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    ec70:	b109      	cbz	r1, ec76 <z_queue_node_peek+0x14>
			k_free(anode);
    ec72:	f000 fb5e 	bl	f332 <k_free>
}
    ec76:	4620      	mov	r0, r4
    ec78:	bd10      	pop	{r4, pc}

0000ec7a <k_queue_append>:
{
    ec7a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    ec7c:	2301      	movs	r3, #1
    ec7e:	9300      	str	r3, [sp, #0]
    ec80:	2300      	movs	r3, #0
{
    ec82:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    ec84:	4619      	mov	r1, r3
    ec86:	f7ff ff87 	bl	eb98 <queue_insert>
}
    ec8a:	b003      	add	sp, #12
    ec8c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ec90 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    ec90:	b15a      	cbz	r2, ecaa <z_impl_k_sem_init+0x1a>
    ec92:	428a      	cmp	r2, r1
    ec94:	d309      	bcc.n	ecaa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    ec96:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    ec9a:	e9c0 1202 	strd	r1, r2, [r0, #8]
    ec9e:	e9c0 0000 	strd	r0, r0, [r0]
    eca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    eca6:	2000      	movs	r0, #0
    eca8:	4770      	bx	lr
		return -EINVAL;
    ecaa:	f06f 0015 	mvn.w	r0, #21
}
    ecae:	4770      	bx	lr

0000ecb0 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    ecb0:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    ecb2:	2301      	movs	r3, #1
    ecb4:	408b      	lsls	r3, r1
    ecb6:	ea22 0303 	bic.w	r3, r2, r3
    ecba:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    ecbc:	fa22 f001 	lsr.w	r0, r2, r1
}
    ecc0:	f000 0001 	and.w	r0, r0, #1
    ecc4:	4770      	bx	lr

0000ecc6 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    ecc6:	b120      	cbz	r0, ecd2 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    ecc8:	2200      	movs	r2, #0
    ecca:	4611      	mov	r1, r2
    eccc:	30c0      	adds	r0, #192	; 0xc0
    ecce:	f000 b91b 	b.w	ef08 <z_sched_wake>
}
    ecd2:	4770      	bx	lr

0000ecd4 <k_work_init>:
{
    ecd4:	b538      	push	{r3, r4, r5, lr}
    ecd6:	4604      	mov	r4, r0
    ecd8:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ecda:	2210      	movs	r2, #16
    ecdc:	2100      	movs	r1, #0
    ecde:	f7ff fa04 	bl	e0ea <memset>
    ece2:	6065      	str	r5, [r4, #4]
}
    ece4:	bd38      	pop	{r3, r4, r5, pc}

0000ece6 <k_work_submit_to_queue>:
{
    ece6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ece8:	9001      	str	r0, [sp, #4]
    ecea:	4608      	mov	r0, r1
	__asm__ volatile(
    ecec:	f04f 0320 	mov.w	r3, #32
    ecf0:	f3ef 8511 	mrs	r5, BASEPRI
    ecf4:	f383 8812 	msr	BASEPRI_MAX, r3
    ecf8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    ecfc:	a901      	add	r1, sp, #4
    ecfe:	f7fb ff2f 	bl	ab60 <submit_to_queue_locked>
    ed02:	4604      	mov	r4, r0
	__asm__ volatile(
    ed04:	f385 8811 	msr	BASEPRI, r5
    ed08:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    ed0c:	2800      	cmp	r0, #0
    ed0e:	dd04      	ble.n	ed1a <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    ed10:	f7fc faa4 	bl	b25c <z_impl_k_is_preempt_thread>
    ed14:	b108      	cbz	r0, ed1a <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    ed16:	f7fc f9f9 	bl	b10c <z_impl_k_yield>
}
    ed1a:	4620      	mov	r0, r4
    ed1c:	b003      	add	sp, #12
    ed1e:	bd30      	pop	{r4, r5, pc}

0000ed20 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    ed20:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    ed24:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ed26:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ed28:	2300      	movs	r3, #0
	node->prev = NULL;
    ed2a:	e9c0 3300 	strd	r3, r3, [r0]
}
    ed2e:	4770      	bx	lr

0000ed30 <unpend_thread_no_timeout>:
{
    ed30:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    ed32:	f7ff fff5 	bl	ed20 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ed36:	7b43      	ldrb	r3, [r0, #13]
    ed38:	f023 0302 	bic.w	r3, r3, #2
    ed3c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    ed3e:	2300      	movs	r3, #0
    ed40:	6083      	str	r3, [r0, #8]
}
    ed42:	bd08      	pop	{r3, pc}

0000ed44 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    ed44:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    ed48:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    ed4c:	4283      	cmp	r3, r0
		return b2 - b1;
    ed4e:	bf14      	ite	ne
    ed50:	1ac0      	subne	r0, r0, r3
	return 0;
    ed52:	2000      	moveq	r0, #0
}
    ed54:	4770      	bx	lr

0000ed56 <z_unpend_thread_no_timeout>:
{
    ed56:	b508      	push	{r3, lr}
	__asm__ volatile(
    ed58:	f04f 0320 	mov.w	r3, #32
    ed5c:	f3ef 8111 	mrs	r1, BASEPRI
    ed60:	f383 8812 	msr	BASEPRI_MAX, r3
    ed64:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    ed68:	f7ff ffe2 	bl	ed30 <unpend_thread_no_timeout>
	__asm__ volatile(
    ed6c:	f381 8811 	msr	BASEPRI, r1
    ed70:	f3bf 8f6f 	isb	sy
}
    ed74:	bd08      	pop	{r3, pc}

0000ed76 <z_unpend_thread>:
{
    ed76:	b510      	push	{r4, lr}
	__asm__ volatile(
    ed78:	f04f 0320 	mov.w	r3, #32
    ed7c:	f3ef 8411 	mrs	r4, BASEPRI
    ed80:	f383 8812 	msr	BASEPRI_MAX, r3
    ed84:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    ed88:	f7ff ffd2 	bl	ed30 <unpend_thread_no_timeout>
	__asm__ volatile(
    ed8c:	f384 8811 	msr	BASEPRI, r4
    ed90:	f3bf 8f6f 	isb	sy
}
    ed94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed98:	3018      	adds	r0, #24
    ed9a:	f000 b8d3 	b.w	ef44 <z_abort_timeout>

0000ed9e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ed9e:	4603      	mov	r3, r0
    eda0:	b920      	cbnz	r0, edac <z_reschedule_irqlock+0xe>
    eda2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    eda6:	b90a      	cbnz	r2, edac <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    eda8:	f7f6 be54 	b.w	5a54 <arch_swap>
    edac:	f383 8811 	msr	BASEPRI, r3
    edb0:	f3bf 8f6f 	isb	sy
}
    edb4:	4770      	bx	lr

0000edb6 <z_reschedule_unlocked>:
	__asm__ volatile(
    edb6:	f04f 0320 	mov.w	r3, #32
    edba:	f3ef 8011 	mrs	r0, BASEPRI
    edbe:	f383 8812 	msr	BASEPRI_MAX, r3
    edc2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    edc6:	f7ff bfea 	b.w	ed9e <z_reschedule_irqlock>

0000edca <z_priq_dumb_best>:
{
    edca:	4603      	mov	r3, r0
	return list->head == list;
    edcc:	6800      	ldr	r0, [r0, #0]
}
    edce:	4283      	cmp	r3, r0
    edd0:	bf08      	it	eq
    edd2:	2000      	moveq	r0, #0
    edd4:	4770      	bx	lr

0000edd6 <z_ready_thread>:
{
    edd6:	b510      	push	{r4, lr}
    edd8:	f04f 0320 	mov.w	r3, #32
    eddc:	f3ef 8411 	mrs	r4, BASEPRI
    ede0:	f383 8812 	msr	BASEPRI_MAX, r3
    ede4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    ede8:	f7fc f848 	bl	ae7c <ready_thread>
	__asm__ volatile(
    edec:	f384 8811 	msr	BASEPRI, r4
    edf0:	f3bf 8f6f 	isb	sy
}
    edf4:	bd10      	pop	{r4, pc}

0000edf6 <z_thread_timeout>:
{
    edf6:	b510      	push	{r4, lr}
    edf8:	4601      	mov	r1, r0
	__asm__ volatile(
    edfa:	f04f 0320 	mov.w	r3, #32
    edfe:	f3ef 8411 	mrs	r4, BASEPRI
    ee02:	f383 8812 	msr	BASEPRI_MAX, r3
    ee06:	f3bf 8f6f 	isb	sy
		if (!killed) {
    ee0a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    ee0e:	f013 0f28 	tst.w	r3, #40	; 0x28
    ee12:	d10d      	bne.n	ee30 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    ee14:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    ee18:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    ee1a:	b10b      	cbz	r3, ee20 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    ee1c:	f7ff ff88 	bl	ed30 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    ee20:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    ee24:	f023 0314 	bic.w	r3, r3, #20
    ee28:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    ee2c:	f7fc f826 	bl	ae7c <ready_thread>
	__asm__ volatile(
    ee30:	f384 8811 	msr	BASEPRI, r4
    ee34:	f3bf 8f6f 	isb	sy
}
    ee38:	bd10      	pop	{r4, pc}

0000ee3a <add_to_waitq_locked>:
{
    ee3a:	b538      	push	{r3, r4, r5, lr}
    ee3c:	4604      	mov	r4, r0
    ee3e:	460d      	mov	r5, r1
	unready_thread(thread);
    ee40:	f7fc f870 	bl	af24 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    ee44:	7b63      	ldrb	r3, [r4, #13]
    ee46:	f043 0302 	orr.w	r3, r3, #2
    ee4a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    ee4c:	b195      	cbz	r5, ee74 <add_to_waitq_locked+0x3a>
    ee4e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    ee50:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ee52:	429d      	cmp	r5, r3
    ee54:	d015      	beq.n	ee82 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ee56:	b1a3      	cbz	r3, ee82 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    ee58:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    ee5c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    ee60:	4291      	cmp	r1, r2
    ee62:	d008      	beq.n	ee76 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    ee64:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    ee66:	2a00      	cmp	r2, #0
    ee68:	dd05      	ble.n	ee76 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    ee6a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ee6c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    ee70:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    ee72:	605c      	str	r4, [r3, #4]
}
    ee74:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    ee76:	686a      	ldr	r2, [r5, #4]
    ee78:	4293      	cmp	r3, r2
    ee7a:	d002      	beq.n	ee82 <add_to_waitq_locked+0x48>
    ee7c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ee7e:	2b00      	cmp	r3, #0
    ee80:	d1ec      	bne.n	ee5c <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    ee82:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    ee84:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    ee88:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ee8a:	606c      	str	r4, [r5, #4]
}
    ee8c:	e7f2      	b.n	ee74 <add_to_waitq_locked+0x3a>

0000ee8e <z_unpend1_no_timeout>:
{
    ee8e:	b510      	push	{r4, lr}
	__asm__ volatile(
    ee90:	f04f 0320 	mov.w	r3, #32
    ee94:	f3ef 8411 	mrs	r4, BASEPRI
    ee98:	f383 8812 	msr	BASEPRI_MAX, r3
    ee9c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    eea0:	f7ff ff93 	bl	edca <z_priq_dumb_best>
		if (thread != NULL) {
    eea4:	4601      	mov	r1, r0
    eea6:	b108      	cbz	r0, eeac <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    eea8:	f7ff ff42 	bl	ed30 <unpend_thread_no_timeout>
	__asm__ volatile(
    eeac:	f384 8811 	msr	BASEPRI, r4
    eeb0:	f3bf 8f6f 	isb	sy
}
    eeb4:	4608      	mov	r0, r1
    eeb6:	bd10      	pop	{r4, pc}

0000eeb8 <z_unpend_first_thread>:
{
    eeb8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    eeba:	f04f 0320 	mov.w	r3, #32
    eebe:	f3ef 8511 	mrs	r5, BASEPRI
    eec2:	f383 8812 	msr	BASEPRI_MAX, r3
    eec6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    eeca:	f7ff ff7e 	bl	edca <z_priq_dumb_best>
		if (thread != NULL) {
    eece:	4604      	mov	r4, r0
    eed0:	b120      	cbz	r0, eedc <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    eed2:	f7ff ff2d 	bl	ed30 <unpend_thread_no_timeout>
    eed6:	3018      	adds	r0, #24
    eed8:	f000 f834 	bl	ef44 <z_abort_timeout>
	__asm__ volatile(
    eedc:	f385 8811 	msr	BASEPRI, r5
    eee0:	f3bf 8f6f 	isb	sy
}
    eee4:	4620      	mov	r0, r4
    eee6:	bd38      	pop	{r3, r4, r5, pc}

0000eee8 <z_unpend_all>:
{
    eee8:	b538      	push	{r3, r4, r5, lr}
    eeea:	4605      	mov	r5, r0
	int need_sched = 0;
    eeec:	2000      	movs	r0, #0
	return list->head == list;
    eeee:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eef0:	42a5      	cmp	r5, r4
    eef2:	d000      	beq.n	eef6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    eef4:	b904      	cbnz	r4, eef8 <z_unpend_all+0x10>
}
    eef6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    eef8:	4620      	mov	r0, r4
    eefa:	f7ff ff3c 	bl	ed76 <z_unpend_thread>
		z_ready_thread(thread);
    eefe:	4620      	mov	r0, r4
    ef00:	f7ff ff69 	bl	edd6 <z_ready_thread>
		need_sched = 1;
    ef04:	2001      	movs	r0, #1
    ef06:	e7f2      	b.n	eeee <z_unpend_all+0x6>

0000ef08 <z_sched_wake>:
{
    ef08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    ef0a:	f04f 0320 	mov.w	r3, #32
    ef0e:	f3ef 8511 	mrs	r5, BASEPRI
    ef12:	f383 8812 	msr	BASEPRI_MAX, r3
    ef16:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    ef1a:	f7ff ff56 	bl	edca <z_priq_dumb_best>
		if (thread != NULL) {
    ef1e:	4604      	mov	r4, r0
    ef20:	b158      	cbz	r0, ef3a <z_sched_wake+0x32>
    ef22:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
    ef26:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    ef28:	f7ff ff02 	bl	ed30 <unpend_thread_no_timeout>
    ef2c:	3018      	adds	r0, #24
    ef2e:	f000 f809 	bl	ef44 <z_abort_timeout>
			ready_thread(thread);
    ef32:	4620      	mov	r0, r4
    ef34:	f7fb ffa2 	bl	ae7c <ready_thread>
			ret = true;
    ef38:	2001      	movs	r0, #1
	__asm__ volatile(
    ef3a:	f385 8811 	msr	BASEPRI, r5
    ef3e:	f3bf 8f6f 	isb	sy
}
    ef42:	bd38      	pop	{r3, r4, r5, pc}

0000ef44 <z_abort_timeout>:
{
    ef44:	b510      	push	{r4, lr}
	__asm__ volatile(
    ef46:	f04f 0220 	mov.w	r2, #32
    ef4a:	f3ef 8411 	mrs	r4, BASEPRI
    ef4e:	f382 8812 	msr	BASEPRI_MAX, r2
    ef52:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    ef56:	6803      	ldr	r3, [r0, #0]
    ef58:	b13b      	cbz	r3, ef6a <z_abort_timeout+0x26>
			remove_timeout(to);
    ef5a:	f7fc fa41 	bl	b3e0 <remove_timeout>
			ret = 0;
    ef5e:	2000      	movs	r0, #0
	__asm__ volatile(
    ef60:	f384 8811 	msr	BASEPRI, r4
    ef64:	f3bf 8f6f 	isb	sy
}
    ef68:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    ef6a:	f06f 0015 	mvn.w	r0, #21
    ef6e:	e7f7      	b.n	ef60 <z_abort_timeout+0x1c>

0000ef70 <z_get_next_timeout_expiry>:
{
    ef70:	b510      	push	{r4, lr}
	__asm__ volatile(
    ef72:	f04f 0320 	mov.w	r3, #32
    ef76:	f3ef 8411 	mrs	r4, BASEPRI
    ef7a:	f383 8812 	msr	BASEPRI_MAX, r3
    ef7e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    ef82:	f7fc fa07 	bl	b394 <next_timeout>
	__asm__ volatile(
    ef86:	f384 8811 	msr	BASEPRI, r4
    ef8a:	f3bf 8f6f 	isb	sy
}
    ef8e:	bd10      	pop	{r4, pc}

0000ef90 <z_set_timeout_expiry>:
{
    ef90:	b570      	push	{r4, r5, r6, lr}
    ef92:	4604      	mov	r4, r0
    ef94:	460d      	mov	r5, r1
	__asm__ volatile(
    ef96:	f04f 0320 	mov.w	r3, #32
    ef9a:	f3ef 8611 	mrs	r6, BASEPRI
    ef9e:	f383 8812 	msr	BASEPRI_MAX, r3
    efa2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    efa6:	f7fc f9f5 	bl	b394 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    efaa:	2801      	cmp	r0, #1
    efac:	dd05      	ble.n	efba <z_set_timeout_expiry+0x2a>
    efae:	42a0      	cmp	r0, r4
    efb0:	db03      	blt.n	efba <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    efb2:	4629      	mov	r1, r5
    efb4:	4620      	mov	r0, r4
    efb6:	f7f9 faa7 	bl	8508 <sys_clock_set_timeout>
	__asm__ volatile(
    efba:	f386 8811 	msr	BASEPRI, r6
    efbe:	f3bf 8f6f 	isb	sy
}
    efc2:	bd70      	pop	{r4, r5, r6, pc}

0000efc4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    efc4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    efc6:	f7fc fafb 	bl	b5c0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    efca:	bd08      	pop	{r3, pc}

0000efcc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    efcc:	f7fc baf8 	b.w	b5c0 <sys_clock_tick_get>

0000efd0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    efd0:	b108      	cbz	r0, efd6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    efd2:	f7f7 ba51 	b.w	6478 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    efd6:	4770      	bx	lr

0000efd8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    efd8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    efdc:	bf08      	it	eq
    efde:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    efe2:	b538      	push	{r3, r4, r5, lr}
    efe4:	4605      	mov	r5, r0
    efe6:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    efe8:	d01d      	beq.n	f026 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    efea:	ea51 0300 	orrs.w	r3, r1, r0
    efee:	d103      	bne.n	eff8 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    eff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    eff4:	f7fc bae4 	b.w	b5c0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    eff8:	f06f 0301 	mvn.w	r3, #1
    effc:	1a18      	subs	r0, r3, r0
    effe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f002:	eb63 0101 	sbc.w	r1, r3, r1
    f006:	2900      	cmp	r1, #0
    f008:	da0c      	bge.n	f024 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    f00a:	f7fc fad9 	bl	b5c0 <sys_clock_tick_get>
    f00e:	2d01      	cmp	r5, #1
    f010:	4622      	mov	r2, r4
    f012:	f174 0400 	sbcs.w	r4, r4, #0
    f016:	462b      	mov	r3, r5
    f018:	bfbc      	itt	lt
    f01a:	2301      	movlt	r3, #1
    f01c:	2200      	movlt	r2, #0
    f01e:	1818      	adds	r0, r3, r0
    f020:	eb41 0102 	adc.w	r1, r1, r2
}
    f024:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    f026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f02a:	4601      	mov	r1, r0
    f02c:	e7fa      	b.n	f024 <sys_clock_timeout_end_calc+0x4c>

0000f02e <k_timer_init>:
	timer->status = 0U;
    f02e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    f030:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    f034:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    f038:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    f03c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    f040:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    f042:	6343      	str	r3, [r0, #52]	; 0x34
}
    f044:	4770      	bx	lr

0000f046 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    f046:	b510      	push	{r4, lr}
    f048:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    f04a:	f7ff ff7b 	bl	ef44 <z_abort_timeout>

	if (inactive) {
    f04e:	b9b0      	cbnz	r0, f07e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    f050:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f052:	b10b      	cbz	r3, f058 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    f054:	4620      	mov	r0, r4
    f056:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    f058:	f104 0018 	add.w	r0, r4, #24
    f05c:	f7ff ff17 	bl	ee8e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    f060:	b168      	cbz	r0, f07e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    f062:	f7ff feb8 	bl	edd6 <z_ready_thread>
	__asm__ volatile(
    f066:	f04f 0320 	mov.w	r3, #32
    f06a:	f3ef 8011 	mrs	r0, BASEPRI
    f06e:	f383 8812 	msr	BASEPRI_MAX, r3
    f072:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    f076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    f07a:	f7ff be90 	b.w	ed9e <z_reschedule_irqlock>
    f07e:	bd10      	pop	{r4, pc}

0000f080 <add_event>:
{
    f080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f082:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    f084:	e9d0 1300 	ldrd	r1, r3, [r0]
    f088:	4288      	cmp	r0, r1
    f08a:	4604      	mov	r4, r0
    f08c:	d00d      	beq.n	f0aa <add_event+0x2a>
	if ((pending == NULL) ||
    f08e:	b163      	cbz	r3, f0aa <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    f090:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    f092:	b100      	cbz	r0, f096 <add_event+0x16>
    f094:	3860      	subs	r0, #96	; 0x60
    f096:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    f09a:	4639      	mov	r1, r7
    f09c:	f7ff fe52 	bl	ed44 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    f0a0:	2800      	cmp	r0, #0
    f0a2:	dc02      	bgt.n	f0aa <add_event+0x2a>
	return list->head == list;
    f0a4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f0a6:	42b4      	cmp	r4, r6
    f0a8:	d109      	bne.n	f0be <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
    f0aa:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    f0ac:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    f0b0:	601d      	str	r5, [r3, #0]
	list->tail = node;
    f0b2:	6065      	str	r5, [r4, #4]
}
    f0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    f0b6:	6863      	ldr	r3, [r4, #4]
    f0b8:	42b3      	cmp	r3, r6
    f0ba:	d0f6      	beq.n	f0aa <add_event+0x2a>
    f0bc:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    f0be:	2e00      	cmp	r6, #0
    f0c0:	d0f3      	beq.n	f0aa <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
    f0c2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    f0c4:	b101      	cbz	r1, f0c8 <add_event+0x48>
    f0c6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    f0c8:	4638      	mov	r0, r7
    f0ca:	f7ff fe3b 	bl	ed44 <z_sched_prio_cmp>
    f0ce:	2800      	cmp	r0, #0
    f0d0:	ddf1      	ble.n	f0b6 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
    f0d2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    f0d4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    f0d8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    f0da:	6075      	str	r5, [r6, #4]
			return;
    f0dc:	e7ea      	b.n	f0b4 <add_event+0x34>

0000f0de <register_events>:
{
    f0de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    f0e2:	2500      	movs	r5, #0
{
    f0e4:	468b      	mov	fp, r1
    f0e6:	4614      	mov	r4, r2
    f0e8:	461f      	mov	r7, r3
    f0ea:	4682      	mov	sl, r0
	int events_registered = 0;
    f0ec:	462e      	mov	r6, r5
	event->poller = NULL;
    f0ee:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    f0f0:	455d      	cmp	r5, fp
    f0f2:	db02      	blt.n	f0fa <register_events+0x1c>
}
    f0f4:	4630      	mov	r0, r6
    f0f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0fa:	f04f 0320 	mov.w	r3, #32
    f0fe:	f3ef 8911 	mrs	r9, BASEPRI
    f102:	f383 8812 	msr	BASEPRI_MAX, r3
    f106:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    f10a:	f89a 300d 	ldrb.w	r3, [sl, #13]
    f10e:	f003 031f 	and.w	r3, r3, #31
    f112:	3b01      	subs	r3, #1
    f114:	2b07      	cmp	r3, #7
    f116:	d80f      	bhi.n	f138 <register_events+0x5a>
    f118:	e8df f003 	tbb	[pc, r3]
    f11c:	0a0e041e 	.word	0x0a0e041e
    f120:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
    f124:	f8da 3010 	ldr.w	r3, [sl, #16]
    f128:	689b      	ldr	r3, [r3, #8]
    f12a:	b12b      	cbz	r3, f138 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    f12c:	2302      	movs	r3, #2
    f12e:	e020      	b.n	f172 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    f130:	f8da 3010 	ldr.w	r3, [sl, #16]
    f134:	681b      	ldr	r3, [r3, #0]
    f136:	bb8b      	cbnz	r3, f19c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    f138:	bb47      	cbnz	r7, f18c <register_events+0xae>
    f13a:	7823      	ldrb	r3, [r4, #0]
    f13c:	b333      	cbz	r3, f18c <register_events+0xae>
	switch (event->type) {
    f13e:	f89a 300d 	ldrb.w	r3, [sl, #13]
    f142:	f003 031f 	and.w	r3, r3, #31
    f146:	3b01      	subs	r3, #1
    f148:	2b07      	cmp	r3, #7
    f14a:	d830      	bhi.n	f1ae <register_events+0xd0>
    f14c:	e8df f003 	tbb	[pc, r3]
    f150:	282f2833 	.word	0x282f2833
    f154:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
    f158:	f8da 3010 	ldr.w	r3, [sl, #16]
    f15c:	689b      	ldr	r3, [r3, #8]
    f15e:	2b00      	cmp	r3, #0
    f160:	d0ea      	beq.n	f138 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    f162:	2301      	movs	r3, #1
    f164:	e005      	b.n	f172 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    f166:	f8da 3010 	ldr.w	r3, [sl, #16]
    f16a:	6a1b      	ldr	r3, [r3, #32]
    f16c:	2b00      	cmp	r3, #0
    f16e:	d0e3      	beq.n	f138 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    f170:	2310      	movs	r3, #16
	event->state |= state;
    f172:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    f176:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    f17a:	f3c2 3145 	ubfx	r1, r2, #13, #6
    f17e:	430b      	orrs	r3, r1
    f180:	f363 3252 	bfi	r2, r3, #13, #6
    f184:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    f188:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    f18c:	f389 8811 	msr	BASEPRI, r9
    f190:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    f194:	3501      	adds	r5, #1
    f196:	f10a 0a14 	add.w	sl, sl, #20
    f19a:	e7a9      	b.n	f0f0 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    f19c:	2304      	movs	r3, #4
    f19e:	e7e8      	b.n	f172 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    f1a0:	f8da 0010 	ldr.w	r0, [sl, #16]
    f1a4:	4622      	mov	r2, r4
    f1a6:	4651      	mov	r1, sl
    f1a8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    f1aa:	f7ff ff69 	bl	f080 <add_event>
	event->poller = poller;
    f1ae:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    f1b2:	3601      	adds	r6, #1
    f1b4:	e7ea      	b.n	f18c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    f1b6:	f8da 0010 	ldr.w	r0, [sl, #16]
    f1ba:	4622      	mov	r2, r4
    f1bc:	4651      	mov	r1, sl
    f1be:	e7f4      	b.n	f1aa <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    f1c0:	f8da 0010 	ldr.w	r0, [sl, #16]
    f1c4:	4622      	mov	r2, r4
    f1c6:	4651      	mov	r1, sl
    f1c8:	3024      	adds	r0, #36	; 0x24
    f1ca:	e7ee      	b.n	f1aa <register_events+0xcc>

0000f1cc <signal_poll_event>:
{
    f1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    f1d0:	6884      	ldr	r4, [r0, #8]
{
    f1d2:	4605      	mov	r5, r0
    f1d4:	460e      	mov	r6, r1
	if (poller != NULL) {
    f1d6:	b144      	cbz	r4, f1ea <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    f1d8:	7863      	ldrb	r3, [r4, #1]
    f1da:	2b01      	cmp	r3, #1
    f1dc:	d136      	bne.n	f24c <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
    f1de:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    f1e2:	f013 0302 	ands.w	r3, r3, #2
    f1e6:	d10a      	bne.n	f1fe <signal_poll_event+0x32>
		poller->is_polling = false;
    f1e8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    f1ea:	68eb      	ldr	r3, [r5, #12]
    f1ec:	f3c3 3145 	ubfx	r1, r3, #13, #6
    f1f0:	430e      	orrs	r6, r1
	event->poller = NULL;
    f1f2:	2000      	movs	r0, #0
	event->state |= state;
    f1f4:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    f1f8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    f1fa:	60eb      	str	r3, [r5, #12]
	return retcode;
    f1fc:	e00b      	b.n	f216 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
    f1fe:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    f202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f206:	bf08      	it	eq
    f208:	f112 0f02 	cmneq.w	r2, #2
    f20c:	d105      	bne.n	f21a <signal_poll_event+0x4e>
		poller->is_polling = false;
    f20e:	2300      	movs	r3, #0
    f210:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    f212:	f06f 000a 	mvn.w	r0, #10
}
    f216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    f21a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    f21e:	4640      	mov	r0, r8
    f220:	f7ff fda9 	bl	ed76 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    f224:	2e08      	cmp	r6, #8
    f226:	bf0c      	ite	eq
    f228:	f06f 0303 	mvneq.w	r3, #3
    f22c:	2300      	movne	r3, #0
    f22e:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f230:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    f234:	06db      	lsls	r3, r3, #27
    f236:	d102      	bne.n	f23e <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
    f238:	f854 7c48 	ldr.w	r7, [r4, #-72]
    f23c:	b10f      	cbz	r7, f242 <signal_poll_event+0x76>
		poller->is_polling = false;
    f23e:	2300      	movs	r3, #0
    f240:	e7d2      	b.n	f1e8 <signal_poll_event+0x1c>
	z_ready_thread(thread);
    f242:	4640      	mov	r0, r8
    f244:	f7ff fdc7 	bl	edd6 <z_ready_thread>
		poller->is_polling = false;
    f248:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    f24a:	e7ce      	b.n	f1ea <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    f24c:	2b02      	cmp	r3, #2
    f24e:	d1f6      	bne.n	f23e <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    f250:	7823      	ldrb	r3, [r4, #0]
    f252:	2b00      	cmp	r3, #0
    f254:	d0c9      	beq.n	f1ea <signal_poll_event+0x1e>
    f256:	f854 7c04 	ldr.w	r7, [r4, #-4]
    f25a:	2f00      	cmp	r7, #0
    f25c:	d0f4      	beq.n	f248 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    f25e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    f262:	f1a4 0914 	sub.w	r9, r4, #20
    f266:	f104 0014 	add.w	r0, r4, #20
    f26a:	f7ff fe6b 	bl	ef44 <z_abort_timeout>
		twork->poll_result = 0;
    f26e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    f272:	4649      	mov	r1, r9
    f274:	4638      	mov	r0, r7
    f276:	f7ff fd36 	bl	ece6 <k_work_submit_to_queue>
		poller->is_polling = false;
    f27a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    f27e:	e7b4      	b.n	f1ea <signal_poll_event+0x1e>

0000f280 <clear_event_registrations>:
	while (num_events--) {
    f280:	2314      	movs	r3, #20
{
    f282:	b5f0      	push	{r4, r5, r6, r7, lr}
    f284:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    f288:	2400      	movs	r4, #0
    f28a:	2601      	movs	r6, #1
	while (num_events--) {
    f28c:	b901      	cbnz	r1, f290 <clear_event_registrations+0x10>
}
    f28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
    f290:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
    f294:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
    f298:	f003 031f 	and.w	r3, r3, #31
    f29c:	2b08      	cmp	r3, #8
    f29e:	f1a0 0714 	sub.w	r7, r0, #20
    f2a2:	d80d      	bhi.n	f2c0 <clear_event_registrations+0x40>
    f2a4:	fa06 f303 	lsl.w	r3, r6, r3
    f2a8:	f413 7f8b 	tst.w	r3, #278	; 0x116
    f2ac:	d008      	beq.n	f2c0 <clear_event_registrations+0x40>
	return node->next != NULL;
    f2ae:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    f2b2:	b12b      	cbz	r3, f2c0 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
    f2b4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
    f2b8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    f2ba:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    f2bc:	e940 4405 	strd	r4, r4, [r0, #-20]
    f2c0:	f382 8811 	msr	BASEPRI, r2
    f2c4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    f2c8:	f04f 0320 	mov.w	r3, #32
    f2cc:	f3ef 8211 	mrs	r2, BASEPRI
    f2d0:	f383 8812 	msr	BASEPRI_MAX, r3
    f2d4:	f3bf 8f6f 	isb	sy
    f2d8:	3901      	subs	r1, #1
    f2da:	4638      	mov	r0, r7
    f2dc:	e7d6      	b.n	f28c <clear_event_registrations+0xc>

0000f2de <k_poll_event_init>:
{
    f2de:	b510      	push	{r4, lr}
	event->type = type;
    f2e0:	04d2      	lsls	r2, r2, #19
    f2e2:	0209      	lsls	r1, r1, #8
    f2e4:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
    f2e8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    f2ec:	430a      	orrs	r2, r1
    f2ee:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    f2f0:	2400      	movs	r4, #0
	event->type = type;
    f2f2:	430a      	orrs	r2, r1
	event->obj = obj;
    f2f4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
    f2f8:	6084      	str	r4, [r0, #8]
}
    f2fa:	bd10      	pop	{r4, pc}

0000f2fc <z_handle_obj_poll_events>:
{
    f2fc:	4603      	mov	r3, r0
	return list->head == list;
    f2fe:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    f300:	4283      	cmp	r3, r0
    f302:	d008      	beq.n	f316 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    f304:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    f308:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f30a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f30c:	2300      	movs	r3, #0
	node->prev = NULL;
    f30e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    f312:	f7ff bf5b 	b.w	f1cc <signal_poll_event>
}
    f316:	4770      	bx	lr

0000f318 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
    f318:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    f31a:	e9c0 0000 	strd	r0, r0, [r0]
    f31e:	6083      	str	r3, [r0, #8]
}
    f320:	4770      	bx	lr

0000f322 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
    f322:	2300      	movs	r3, #0
    f324:	6083      	str	r3, [r0, #8]
}
    f326:	4770      	bx	lr

0000f328 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
    f328:	6883      	ldr	r3, [r0, #8]
    f32a:	600b      	str	r3, [r1, #0]
	*result = sig->result;
    f32c:	68c3      	ldr	r3, [r0, #12]
    f32e:	6013      	str	r3, [r2, #0]
}
    f330:	4770      	bx	lr

0000f332 <k_free>:
	if (ptr != NULL) {
    f332:	b120      	cbz	r0, f33e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    f334:	1f01      	subs	r1, r0, #4
    f336:	f850 0c04 	ldr.w	r0, [r0, #-4]
    f33a:	f000 b84a 	b.w	f3d2 <k_heap_free>
}
    f33e:	4770      	bx	lr

0000f340 <k_heap_init>:
{
    f340:	b410      	push	{r4}
    f342:	f100 040c 	add.w	r4, r0, #12
    f346:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    f34a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    f34c:	f7fc bdeb 	b.w	bf26 <sys_heap_init>

0000f350 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    f350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f354:	b085      	sub	sp, #20
    f356:	4606      	mov	r6, r0
    f358:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f35a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    f35e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f360:	f7ff fe3a 	bl	efd8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f364:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f368:	4605      	mov	r5, r0
    f36a:	460f      	mov	r7, r1
    f36c:	f04f 0320 	mov.w	r3, #32
    f370:	f3ef 8411 	mrs	r4, BASEPRI
    f374:	f383 8812 	msr	BASEPRI_MAX, r3
    f378:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f37c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    f380:	464a      	mov	r2, r9
    f382:	4641      	mov	r1, r8
    f384:	4630      	mov	r0, r6
    f386:	f7fc fd66 	bl	be56 <sys_heap_aligned_alloc>
    f38a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    f38c:	f7fc f918 	bl	b5c0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    f390:	9b03      	ldr	r3, [sp, #12]
    f392:	b13b      	cbz	r3, f3a4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    f394:	f384 8811 	msr	BASEPRI, r4
    f398:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    f39c:	4618      	mov	r0, r3
    f39e:	b005      	add	sp, #20
    f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    f3a4:	1a28      	subs	r0, r5, r0
    f3a6:	eb67 0101 	sbc.w	r1, r7, r1
    f3aa:	2801      	cmp	r0, #1
    f3ac:	f171 0200 	sbcs.w	r2, r1, #0
    f3b0:	dbf0      	blt.n	f394 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f3b2:	e9cd 0100 	strd	r0, r1, [sp]
    f3b6:	465a      	mov	r2, fp
    f3b8:	4621      	mov	r1, r4
    f3ba:	4650      	mov	r0, sl
    f3bc:	f7fb fdf0 	bl	afa0 <z_pend_curr>
	__asm__ volatile(
    f3c0:	f04f 0320 	mov.w	r3, #32
    f3c4:	f3ef 8411 	mrs	r4, BASEPRI
    f3c8:	f383 8812 	msr	BASEPRI_MAX, r3
    f3cc:	f3bf 8f6f 	isb	sy
    f3d0:	e7d6      	b.n	f380 <k_heap_aligned_alloc+0x30>

0000f3d2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    f3d2:	b538      	push	{r3, r4, r5, lr}
    f3d4:	4604      	mov	r4, r0
    f3d6:	f04f 0320 	mov.w	r3, #32
    f3da:	f3ef 8511 	mrs	r5, BASEPRI
    f3de:	f383 8812 	msr	BASEPRI_MAX, r3
    f3e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    f3e6:	f7fc fcfe 	bl	bde6 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    f3ea:	f104 000c 	add.w	r0, r4, #12
    f3ee:	f7ff fd7b 	bl	eee8 <z_unpend_all>
    f3f2:	b130      	cbz	r0, f402 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    f3f4:	4629      	mov	r1, r5
    f3f6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    f3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    f3fe:	f7fb bc7d 	b.w	acfc <z_reschedule>
	__asm__ volatile(
    f402:	f385 8811 	msr	BASEPRI, r5
    f406:	f3bf 8f6f 	isb	sy
}
    f40a:	bd38      	pop	{r3, r4, r5, pc}

0000f40c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    f40c:	f7f9 b8d2 	b.w	85b4 <SystemInit>
