
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	e0 36 00 20 e1 4b 00 00 ed b4 00 00 b5 4b 00 00     .6. .K.......K..
  10:	b5 4b 00 00 b5 4b 00 00 b5 4b 00 00 00 00 00 00     .K...K...K......
	...
  2c:	21 44 00 00 b5 4b 00 00 00 00 00 00 c9 43 00 00     !D...K.......C..
  3c:	b5 4b 00 00                                         .K..

00000040 <_irq_vector_table>:
  40:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
  50:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
  60:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
  70:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
  80:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
  90:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
  a0:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
  b0:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
  c0:	d5 44 00 00 d5 44 00 00 d5 44 00 00 d5 44 00 00     .D...D...D...D..
  d0:	d5 44 00 00 d5 44 00 00 d5 44 00 00                 .D...D...D..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	4607      	mov	r7, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e09      	ldr	r6, [sp, #36]	; 0x24
     11c:	4615      	mov	r5, r2
     11e:	463c      	mov	r4, r7
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80c6 	bne.w	2b4 <__data_size+0x88>
     128:	4282      	cmp	r2, r0
     12a:	fab2 f782 	clz	r7, r2
     12e:	d946      	bls.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     130:	b14f      	cbz	r7, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c7 0e20 	rsb	lr, r7, #32
     136:	fa24 fe0e 	lsr.w	lr, r4, lr
     13a:	fa00 f307 	lsl.w	r3, r0, r7
     13e:	40bd      	lsls	r5, r7
     140:	ea4e 0c03 	orr.w	ip, lr, r3
     144:	40bc      	lsls	r4, r7
     146:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14a:	fa1f fe85 	uxth.w	lr, r5
     14e:	fbbc f9f8 	udiv	r9, ip, r8
     152:	0c22      	lsrs	r2, r4, #16
     154:	fb08 c319 	mls	r3, r8, r9, ip
     158:	fb09 fa0e 	mul.w	sl, r9, lr
     15c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     160:	459a      	cmp	sl, r3
     162:	d928      	bls.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     164:	18eb      	adds	r3, r5, r3
     166:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     16a:	d204      	bcs.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     16c:	459a      	cmp	sl, r3
     16e:	d902      	bls.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     170:	f1a9 0002 	sub.w	r0, r9, #2
     174:	442b      	add	r3, r5
     176:	eba3 030a 	sub.w	r3, r3, sl
     17a:	b2a4      	uxth	r4, r4
     17c:	fbb3 f2f8 	udiv	r2, r3, r8
     180:	fb08 3312 	mls	r3, r8, r2, r3
     184:	fb02 fe0e 	mul.w	lr, r2, lr
     188:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18c:	45a6      	cmp	lr, r4
     18e:	d914      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     190:	192c      	adds	r4, r5, r4
     192:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     196:	d203      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     198:	45a6      	cmp	lr, r4
     19a:	d901      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19c:	1e93      	subs	r3, r2, #2
     19e:	442c      	add	r4, r5
     1a0:	eba4 040e 	sub.w	r4, r4, lr
     1a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     1aa:	40fc      	lsrs	r4, r7
     1ac:	2300      	movs	r3, #0
     1ae:	6034      	str	r4, [r6, #0]
     1b0:	6073      	str	r3, [r6, #4]
     1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1b6:	4648      	mov	r0, r9
     1b8:	e7dd      	b.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     1ba:	4613      	mov	r3, r2
     1bc:	e7f0      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1be:	b902      	cbnz	r2, 1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     1c0:	deff      	udf	#255	; 0xff
     1c2:	bb87      	cbnz	r7, 226 <CONFIG_FLASH_SIZE+0x26>
     1c4:	1a83      	subs	r3, r0, r2
     1c6:	2101      	movs	r1, #1
     1c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1cc:	b2aa      	uxth	r2, r5
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c20      	lsrs	r0, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	fb0c f802 	mul.w	r8, ip, r2
     1dc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e0:	4598      	cmp	r8, r3
     1e2:	d963      	bls.n	2ac <__data_size+0x80>
     1e4:	18eb      	adds	r3, r5, r3
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1ea:	d204      	bcs.n	1f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x89>
     1ec:	4598      	cmp	r8, r3
     1ee:	d902      	bls.n	1f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x89>
     1f0:	f1ac 0002 	sub.w	r0, ip, #2
     1f4:	442b      	add	r3, r5
     1f6:	eba3 0308 	sub.w	r3, r3, r8
     1fa:	b2a4      	uxth	r4, r4
     1fc:	fbb3 fcfe 	udiv	ip, r3, lr
     200:	fb0e 331c 	mls	r3, lr, ip, r3
     204:	fb0c f202 	mul.w	r2, ip, r2
     208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     20c:	42a2      	cmp	r2, r4
     20e:	d94f      	bls.n	2b0 <__data_size+0x84>
     210:	192c      	adds	r4, r5, r4
     212:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     216:	d204      	bcs.n	222 <CONFIG_FLASH_SIZE+0x22>
     218:	42a2      	cmp	r2, r4
     21a:	d902      	bls.n	222 <CONFIG_FLASH_SIZE+0x22>
     21c:	f1ac 0302 	sub.w	r3, ip, #2
     220:	442c      	add	r4, r5
     222:	1aa4      	subs	r4, r4, r2
     224:	e7be      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     226:	f1c7 0c20 	rsb	ip, r7, #32
     22a:	fa20 f80c 	lsr.w	r8, r0, ip
     22e:	fa00 f307 	lsl.w	r3, r0, r7
     232:	fa24 fc0c 	lsr.w	ip, r4, ip
     236:	40bd      	lsls	r5, r7
     238:	ea4c 0203 	orr.w	r2, ip, r3
     23c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     240:	b2ab      	uxth	r3, r5
     242:	fbb8 fcfe 	udiv	ip, r8, lr
     246:	0c11      	lsrs	r1, r2, #16
     248:	fb0e 801c 	mls	r0, lr, ip, r8
     24c:	fb0c f903 	mul.w	r9, ip, r3
     250:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     254:	4581      	cmp	r9, r0
     256:	fa04 f407 	lsl.w	r4, r4, r7
     25a:	d923      	bls.n	2a4 <__data_size+0x78>
     25c:	1828      	adds	r0, r5, r0
     25e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     262:	d204      	bcs.n	26e <__data_size+0x42>
     264:	4581      	cmp	r9, r0
     266:	d902      	bls.n	26e <__data_size+0x42>
     268:	f1ac 0102 	sub.w	r1, ip, #2
     26c:	4428      	add	r0, r5
     26e:	eba0 0009 	sub.w	r0, r0, r9
     272:	b292      	uxth	r2, r2
     274:	fbb0 fcfe 	udiv	ip, r0, lr
     278:	fb0e 001c 	mls	r0, lr, ip, r0
     27c:	fb0c f803 	mul.w	r8, ip, r3
     280:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     284:	4598      	cmp	r8, r3
     286:	d90f      	bls.n	2a8 <__data_size+0x7c>
     288:	18eb      	adds	r3, r5, r3
     28a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     28e:	d204      	bcs.n	29a <__data_size+0x6e>
     290:	4598      	cmp	r8, r3
     292:	d902      	bls.n	29a <__data_size+0x6e>
     294:	f1ac 0202 	sub.w	r2, ip, #2
     298:	442b      	add	r3, r5
     29a:	eba3 0308 	sub.w	r3, r3, r8
     29e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a2:	e791      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     2a4:	4661      	mov	r1, ip
     2a6:	e7e2      	b.n	26e <__data_size+0x42>
     2a8:	4662      	mov	r2, ip
     2aa:	e7f6      	b.n	29a <__data_size+0x6e>
     2ac:	4660      	mov	r0, ip
     2ae:	e7a2      	b.n	1f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x89>
     2b0:	4663      	mov	r3, ip
     2b2:	e7b6      	b.n	222 <CONFIG_FLASH_SIZE+0x22>
     2b4:	4283      	cmp	r3, r0
     2b6:	d905      	bls.n	2c4 <__data_size+0x98>
     2b8:	b10e      	cbz	r6, 2be <__data_size+0x92>
     2ba:	e9c6 7000 	strd	r7, r0, [r6]
     2be:	2100      	movs	r1, #0
     2c0:	4608      	mov	r0, r1
     2c2:	e776      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     2c4:	fab3 f183 	clz	r1, r3
     2c8:	b981      	cbnz	r1, 2ec <__data_size+0xc0>
     2ca:	4283      	cmp	r3, r0
     2cc:	d301      	bcc.n	2d2 <__data_size+0xa6>
     2ce:	42ba      	cmp	r2, r7
     2d0:	d80a      	bhi.n	2e8 <__data_size+0xbc>
     2d2:	1abc      	subs	r4, r7, r2
     2d4:	eb60 0303 	sbc.w	r3, r0, r3
     2d8:	2001      	movs	r0, #1
     2da:	469c      	mov	ip, r3
     2dc:	2e00      	cmp	r6, #0
     2de:	d068      	beq.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     2e0:	e9c6 4c00 	strd	r4, ip, [r6]
     2e4:	2100      	movs	r1, #0
     2e6:	e764      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     2e8:	4608      	mov	r0, r1
     2ea:	e7f7      	b.n	2dc <__data_size+0xb0>
     2ec:	f1c1 0c20 	rsb	ip, r1, #32
     2f0:	408b      	lsls	r3, r1
     2f2:	fa22 f40c 	lsr.w	r4, r2, ip
     2f6:	431c      	orrs	r4, r3
     2f8:	fa02 f501 	lsl.w	r5, r2, r1
     2fc:	fa00 f301 	lsl.w	r3, r0, r1
     300:	fa27 f20c 	lsr.w	r2, r7, ip
     304:	fa20 fb0c 	lsr.w	fp, r0, ip
     308:	ea4f 4914 	mov.w	r9, r4, lsr #16
     30c:	4313      	orrs	r3, r2
     30e:	fbbb f8f9 	udiv	r8, fp, r9
     312:	fa1f fe84 	uxth.w	lr, r4
     316:	fb09 bb18 	mls	fp, r9, r8, fp
     31a:	0c1a      	lsrs	r2, r3, #16
     31c:	fb08 fa0e 	mul.w	sl, r8, lr
     320:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     324:	4592      	cmp	sl, r2
     326:	fa07 f701 	lsl.w	r7, r7, r1
     32a:	d93e      	bls.n	3aa <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xaa>
     32c:	18a2      	adds	r2, r4, r2
     32e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     332:	d204      	bcs.n	33e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3e>
     334:	4592      	cmp	sl, r2
     336:	d902      	bls.n	33e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3e>
     338:	f1a8 0002 	sub.w	r0, r8, #2
     33c:	4422      	add	r2, r4
     33e:	eba2 020a 	sub.w	r2, r2, sl
     342:	b29b      	uxth	r3, r3
     344:	fbb2 f8f9 	udiv	r8, r2, r9
     348:	fb09 2218 	mls	r2, r9, r8, r2
     34c:	fb08 fe0e 	mul.w	lr, r8, lr
     350:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     354:	4596      	cmp	lr, r2
     356:	d92a      	bls.n	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     358:	18a2      	adds	r2, r4, r2
     35a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     35e:	d204      	bcs.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     360:	4596      	cmp	lr, r2
     362:	d902      	bls.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     364:	f1a8 0302 	sub.w	r3, r8, #2
     368:	4422      	add	r2, r4
     36a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     36e:	fba0 9305 	umull	r9, r3, r0, r5
     372:	eba2 020e 	sub.w	r2, r2, lr
     376:	429a      	cmp	r2, r3
     378:	46ce      	mov	lr, r9
     37a:	4698      	mov	r8, r3
     37c:	d302      	bcc.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     37e:	d106      	bne.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     380:	454f      	cmp	r7, r9
     382:	d204      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     384:	ebb9 0e05 	subs.w	lr, r9, r5
     388:	eb63 0804 	sbc.w	r8, r3, r4
     38c:	3801      	subs	r0, #1
     38e:	b186      	cbz	r6, 3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     390:	ebb7 030e 	subs.w	r3, r7, lr
     394:	eb62 0708 	sbc.w	r7, r2, r8
     398:	fa07 fc0c 	lsl.w	ip, r7, ip
     39c:	40cb      	lsrs	r3, r1
     39e:	ea4c 0303 	orr.w	r3, ip, r3
     3a2:	40cf      	lsrs	r7, r1
     3a4:	e9c6 3700 	strd	r3, r7, [r6]
     3a8:	e79c      	b.n	2e4 <__data_size+0xb8>
     3aa:	4640      	mov	r0, r8
     3ac:	e7c7      	b.n	33e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3e>
     3ae:	4643      	mov	r3, r8
     3b0:	e7db      	b.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     3b2:	4631      	mov	r1, r6
     3b4:	e6fd      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
	...

000003b8 <cmd_led_ctrl_off>:

/* Command Handler for toggling led0 off, note that it assumes
 * the pin has been preconfigured */
static int cmd_led_ctrl_off(const struct shell *shell, size_t argc,
                        char **argv)
{
     3b8:	b510      	push	{r4, lr}
     3ba:	b088      	sub	sp, #32
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3bc:	480f      	ldr	r0, [pc, #60]	; (3fc <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x14>)
     3be:	f007 fcfb 	bl	7db8 <z_impl_device_get_binding>
        ARG_UNUSED(argc);
        ARG_UNUSED(argv);

	const struct device *dev = device_get_binding(LED0);

	if (dev == NULL) {
     3c2:	4604      	mov	r4, r0
     3c4:	b1b8      	cbz	r0, 3f6 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xe>
		return ENODEV;
	}
	LOG_INF("Turning led0 off");
     3c6:	480e      	ldr	r0, [pc, #56]	; (400 <CONFIG_LOG_BUFFER_SIZE>)
     3c8:	6803      	ldr	r3, [r0, #0]
     3ca:	f003 0307 	and.w	r3, r3, #7
     3ce:	2b02      	cmp	r3, #2
     3d0:	d90a      	bls.n	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     3d2:	4b0c      	ldr	r3, [pc, #48]	; (404 <CONFIG_LOG_BUFFER_SIZE+0x4>)
     3d4:	9306      	str	r3, [sp, #24]
     3d6:	2302      	movs	r3, #2
     3d8:	9301      	str	r3, [sp, #4]
     3da:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
     3dc:	2300      	movs	r3, #0
     3de:	aa05      	add	r2, sp, #20
     3e0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     3e4:	f009 fee0 	bl	a1a8 <z_impl_z_log_msg2_static_create>
	return gpio_pin_set(dev, PIN, (int)0);
     3e8:	2100      	movs	r1, #0
     3ea:	4620      	mov	r0, r4
}
     3ec:	b008      	add	sp, #32
     3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return gpio_pin_set(dev, PIN, (int)0);
     3f2:	f009 b87c 	b.w	94ee <gpio_pin_set.constprop.0>
}
     3f6:	2013      	movs	r0, #19
     3f8:	b008      	add	sp, #32
     3fa:	bd10      	pop	{r4, pc}
     3fc:	0000da4c 	.word	0x0000da4c
     400:	20000280 	.word	0x20000280
     404:	0000da54 	.word	0x0000da54

00000408 <cmd_led_ctrl_on>:
{
     408:	b510      	push	{r4, lr}
     40a:	b088      	sub	sp, #32
     40c:	480f      	ldr	r0, [pc, #60]	; (44c <cmd_led_ctrl_on+0x44>)
     40e:	f007 fcd3 	bl	7db8 <z_impl_device_get_binding>
	if (dev == NULL) {
     412:	4604      	mov	r4, r0
     414:	b1b8      	cbz	r0, 446 <cmd_led_ctrl_on+0x3e>
	LOG_INF("Turning led0 on");
     416:	480e      	ldr	r0, [pc, #56]	; (450 <cmd_led_ctrl_on+0x48>)
     418:	6803      	ldr	r3, [r0, #0]
     41a:	f003 0307 	and.w	r3, r3, #7
     41e:	2b02      	cmp	r3, #2
     420:	d90a      	bls.n	438 <cmd_led_ctrl_on+0x30>
     422:	4b0c      	ldr	r3, [pc, #48]	; (454 <cmd_led_ctrl_on+0x4c>)
     424:	9306      	str	r3, [sp, #24]
     426:	2302      	movs	r3, #2
     428:	9301      	str	r3, [sp, #4]
     42a:	9305      	str	r3, [sp, #20]
     42c:	2300      	movs	r3, #0
     42e:	aa05      	add	r2, sp, #20
     430:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     434:	f009 feb8 	bl	a1a8 <z_impl_z_log_msg2_static_create>
	return gpio_pin_set(dev, PIN, (int)1);
     438:	2101      	movs	r1, #1
     43a:	4620      	mov	r0, r4
}
     43c:	b008      	add	sp, #32
     43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return gpio_pin_set(dev, PIN, (int)1);
     442:	f009 b854 	b.w	94ee <gpio_pin_set.constprop.0>
}
     446:	2013      	movs	r0, #19
     448:	b008      	add	sp, #32
     44a:	bd10      	pop	{r4, pc}
     44c:	0000da4c 	.word	0x0000da4c
     450:	20000280 	.word	0x20000280
     454:	0000da65 	.word	0x0000da65

00000458 <main>:
/*
 * Sample app to init USB, and demonstrate shell functionality
 */
void
main(void)
{
     458:	b510      	push	{r4, lr}
     45a:	4809      	ldr	r0, [pc, #36]	; (480 <main+0x28>)
     45c:	f007 fcac 	bl	7db8 <z_impl_device_get_binding>
	const struct device *dev = device_get_binding(LED0);
	int ret;

	if (dev == NULL)
     460:	b160      	cbz	r0, 47c <main+0x24>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     462:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     464:	6881      	ldr	r1, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     466:	6813      	ldr	r3, [r2, #0]
     468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     46c:	6013      	str	r3, [r2, #0]

	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
		return;
	}
     46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     472:	680b      	ldr	r3, [r1, #0]
     474:	f240 6201 	movw	r2, #1537	; 0x601
     478:	2107      	movs	r1, #7
     47a:	4718      	bx	r3
     47c:	bd10      	pop	{r4, pc}
     47e:	bf00      	nop
     480:	0000da4c 	.word	0x0000da4c

00000484 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     488:	4605      	mov	r5, r0
     48a:	b08b      	sub	sp, #44	; 0x2c
     48c:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     48e:	f015 0303 	ands.w	r3, r5, #3
     492:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
     496:	9203      	str	r2, [sp, #12]
     498:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
     49a:	9301      	str	r3, [sp, #4]
     49c:	f040 81f5 	bne.w	88a <CONFIG_ISR_STACK_SIZE+0x8a>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     4a0:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     4a2:	2d00      	cmp	r5, #0
     4a4:	f040 81f4 	bne.w	890 <CONFIG_ISR_STACK_SIZE+0x90>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     4a8:	f001 0607 	and.w	r6, r1, #7
     4ac:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     4ae:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     4b2:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     4b6:	2704      	movs	r7, #4
	s = fmt--;
     4b8:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     4ba:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     4be:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
     4c2:	4652      	mov	r2, sl
	size = sizeof(char *);
     4c4:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     4c6:	b105      	cbz	r5, 4ca <cbvprintf_package+0x46>
				*(const char **)buf = s;
     4c8:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
     4ca:	9b03      	ldr	r3, [sp, #12]
     4cc:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
     4d0:	4bce      	ldr	r3, [pc, #824]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     4d2:	4298      	cmp	r0, r3
     4d4:	f0c0 812a 	bcc.w	72c <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
     4d8:	4bcd      	ldr	r3, [pc, #820]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     4da:	4298      	cmp	r0, r3
     4dc:	f080 8126 	bcs.w	72c <cbvprintf_package+0x2a8>
     4e0:	f1be 0f00 	cmp.w	lr, #0
     4e4:	f000 813c 	beq.w	760 <cbvprintf_package+0x2dc>
	return ((addr >= (const char *)RO_START) &&
     4e8:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     4ec:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
     4f0:	f1be 0f00 	cmp.w	lr, #0
     4f4:	f000 811d 	beq.w	732 <cbvprintf_package+0x2ae>
     4f8:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
     4fc:	f0c0 8119 	bcc.w	732 <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     500:	f06f 0015 	mvn.w	r0, #21
     504:	e0f5      	b.n	6f2 <cbvprintf_package+0x26e>
		if (!parsing) {
     506:	b932      	cbnz	r2, 516 <cbvprintf_package+0x92>
			if (*fmt == '%') {
     508:	2b25      	cmp	r3, #37	; 0x25
     50a:	f040 812c 	bne.w	766 <cbvprintf_package+0x2e2>
				parsing = true;
     50e:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     510:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
     512:	46b9      	mov	r9, r7
     514:	e127      	b.n	766 <cbvprintf_package+0x2e2>
		switch (*fmt) {
     516:	2b2b      	cmp	r3, #43	; 0x2b
     518:	d824      	bhi.n	564 <cbvprintf_package+0xe0>
     51a:	2b1f      	cmp	r3, #31
     51c:	d801      	bhi.n	522 <cbvprintf_package+0x9e>
			parsing = false;
     51e:	2200      	movs	r2, #0
     520:	e121      	b.n	766 <cbvprintf_package+0x2e2>
		switch (*fmt) {
     522:	f1a3 0020 	sub.w	r0, r3, #32
     526:	280b      	cmp	r0, #11
     528:	d8f9      	bhi.n	51e <cbvprintf_package+0x9a>
     52a:	f20f 0c08 	addw	ip, pc, #8
     52e:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
     532:	bf00      	nop
     534:	00000767 	.word	0x00000767
     538:	0000051f 	.word	0x0000051f
     53c:	0000051f 	.word	0x0000051f
     540:	00000767 	.word	0x00000767
     544:	0000051f 	.word	0x0000051f
     548:	0000051f 	.word	0x0000051f
     54c:	0000051f 	.word	0x0000051f
     550:	0000051f 	.word	0x0000051f
     554:	0000051f 	.word	0x0000051f
     558:	0000051f 	.word	0x0000051f
     55c:	0000070b 	.word	0x0000070b
     560:	00000767 	.word	0x00000767
     564:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
     568:	fa5f fc80 	uxtb.w	ip, r0
     56c:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     570:	d8d5      	bhi.n	51e <cbvprintf_package+0x9a>
     572:	284d      	cmp	r0, #77	; 0x4d
     574:	d8d3      	bhi.n	51e <cbvprintf_package+0x9a>
     576:	f20f 0c08 	addw	ip, pc, #8
     57a:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
     57e:	bf00      	nop
     580:	00000767 	.word	0x00000767
     584:	00000767 	.word	0x00000767
     588:	0000051f 	.word	0x0000051f
     58c:	00000767 	.word	0x00000767
     590:	00000767 	.word	0x00000767
     594:	00000767 	.word	0x00000767
     598:	00000767 	.word	0x00000767
     59c:	00000767 	.word	0x00000767
     5a0:	00000767 	.word	0x00000767
     5a4:	00000767 	.word	0x00000767
     5a8:	00000767 	.word	0x00000767
     5ac:	00000767 	.word	0x00000767
     5b0:	00000767 	.word	0x00000767
     5b4:	0000051f 	.word	0x0000051f
     5b8:	0000051f 	.word	0x0000051f
     5bc:	0000051f 	.word	0x0000051f
     5c0:	0000051f 	.word	0x0000051f
     5c4:	0000051f 	.word	0x0000051f
     5c8:	0000051f 	.word	0x0000051f
     5cc:	0000051f 	.word	0x0000051f
     5d0:	000006d3 	.word	0x000006d3
     5d4:	0000051f 	.word	0x0000051f
     5d8:	0000051f 	.word	0x0000051f
     5dc:	0000051f 	.word	0x0000051f
     5e0:	000006d3 	.word	0x000006d3
     5e4:	000006d3 	.word	0x000006d3
     5e8:	000006d3 	.word	0x000006d3
     5ec:	0000051f 	.word	0x0000051f
     5f0:	0000051f 	.word	0x0000051f
     5f4:	0000051f 	.word	0x0000051f
     5f8:	0000051f 	.word	0x0000051f
     5fc:	00000767 	.word	0x00000767
     600:	0000051f 	.word	0x0000051f
     604:	0000051f 	.word	0x0000051f
     608:	0000051f 	.word	0x0000051f
     60c:	0000051f 	.word	0x0000051f
     610:	0000051f 	.word	0x0000051f
     614:	0000051f 	.word	0x0000051f
     618:	0000051f 	.word	0x0000051f
     61c:	0000051f 	.word	0x0000051f
     620:	0000051f 	.word	0x0000051f
     624:	0000051f 	.word	0x0000051f
     628:	0000051f 	.word	0x0000051f
     62c:	000006b9 	.word	0x000006b9
     630:	0000051f 	.word	0x0000051f
     634:	0000051f 	.word	0x0000051f
     638:	0000051f 	.word	0x0000051f
     63c:	0000051f 	.word	0x0000051f
     640:	0000051f 	.word	0x0000051f
     644:	0000051f 	.word	0x0000051f
     648:	0000051f 	.word	0x0000051f
     64c:	0000051f 	.word	0x0000051f
     650:	000006d3 	.word	0x000006d3
     654:	0000051f 	.word	0x0000051f
     658:	000006b9 	.word	0x000006b9
     65c:	000006b9 	.word	0x000006b9
     660:	000006d3 	.word	0x000006d3
     664:	000006d3 	.word	0x000006d3
     668:	000006d3 	.word	0x000006d3
     66c:	00000767 	.word	0x00000767
     670:	000006b9 	.word	0x000006b9
     674:	00000701 	.word	0x00000701
     678:	0000051f 	.word	0x0000051f
     67c:	00000767 	.word	0x00000767
     680:	0000051f 	.word	0x0000051f
     684:	00000705 	.word	0x00000705
     688:	000006b9 	.word	0x000006b9
     68c:	00000705 	.word	0x00000705
     690:	0000051f 	.word	0x0000051f
     694:	0000051f 	.word	0x0000051f
     698:	00000705 	.word	0x00000705
     69c:	00000511 	.word	0x00000511
     6a0:	000006b9 	.word	0x000006b9
     6a4:	0000051f 	.word	0x0000051f
     6a8:	0000051f 	.word	0x0000051f
     6ac:	000006b9 	.word	0x000006b9
     6b0:	0000051f 	.word	0x0000051f
     6b4:	00000511 	.word	0x00000511
			if (fmt[-1] == 'l') {
     6b8:	f811 2c01 	ldrb.w	r2, [r1, #-1]
     6bc:	2a6c      	cmp	r2, #108	; 0x6c
     6be:	d123      	bne.n	708 <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
     6c0:	f811 2c02 	ldrb.w	r2, [r1, #-2]
     6c4:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
     6c6:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
     6ca:	d02d      	beq.n	728 <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
     6cc:	2704      	movs	r7, #4
					size = sizeof(long long);
     6ce:	46b9      	mov	r9, r7
     6d0:	e01b      	b.n	70a <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
     6d2:	f108 0807 	add.w	r8, r8, #7
     6d6:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
     6da:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     6dc:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
     6e0:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     6e4:	b155      	cbz	r5, 6fc <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
     6e6:	eb0e 0004 	add.w	r0, lr, r4
     6ea:	42b0      	cmp	r0, r6
     6ec:	d904      	bls.n	6f8 <cbvprintf_package+0x274>
					return -ENOSPC;
     6ee:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     6f2:	b00b      	add	sp, #44	; 0x2c
     6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     6f8:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
     6fc:	3408      	adds	r4, #8
			parsing = false;
     6fe:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
     700:	2708      	movs	r7, #8
     702:	e706      	b.n	512 <cbvprintf_package+0x8e>
			parsing = false;
     704:	2200      	movs	r2, #0
     706:	e7e1      	b.n	6cc <cbvprintf_package+0x248>
			parsing = false;
     708:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
     70a:	3c01      	subs	r4, #1
     70c:	443c      	add	r4, r7
     70e:	4278      	negs	r0, r7
     710:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     712:	b125      	cbz	r5, 71e <cbvprintf_package+0x29a>
     714:	eba9 0005 	sub.w	r0, r9, r5
     718:	4420      	add	r0, r4
     71a:	42b0      	cmp	r0, r6
     71c:	d8e7      	bhi.n	6ee <cbvprintf_package+0x26a>
		if (*fmt == 's') {
     71e:	2b73      	cmp	r3, #115	; 0x73
     720:	d143      	bne.n	7aa <cbvprintf_package+0x326>
			s = va_arg(ap, char *);
     722:	f858 0b04 	ldr.w	r0, [r8], #4
     726:	e6ce      	b.n	4c6 <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
     728:	2708      	movs	r7, #8
     72a:	e7d0      	b.n	6ce <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
     72c:	f04f 0c00 	mov.w	ip, #0
     730:	e6dc      	b.n	4ec <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     732:	9b00      	ldr	r3, [sp, #0]
     734:	2b0f      	cmp	r3, #15
     736:	f63f aee3 	bhi.w	500 <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
     73a:	b345      	cbz	r5, 78e <cbvprintf_package+0x30a>
					str_ptr_pos[s_idx] = s_ptr_idx;
     73c:	f8dd e000 	ldr.w	lr, [sp]
     740:	a80a      	add	r0, sp, #40	; 0x28
     742:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
     746:	4470      	add	r0, lr
     748:	f1bc 0f00 	cmp.w	ip, #0
     74c:	d019      	beq.n	782 <cbvprintf_package+0x2fe>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     74e:	f063 037f 	orn	r3, r3, #127	; 0x7f
     752:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
     756:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     75a:	9b00      	ldr	r3, [sp, #0]
     75c:	3301      	adds	r3, #1
     75e:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
     760:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     762:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
     766:	f811 3f01 	ldrb.w	r3, [r1, #1]!
     76a:	2b00      	cmp	r3, #0
     76c:	f47f aecb 	bne.w	506 <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
     770:	1b60      	subs	r0, r4, r5
     772:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
     776:	f4bf aec3 	bcs.w	500 <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
     77a:	bb9d      	cbnz	r5, 7e4 <cbvprintf_package+0x360>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     77c:	3e08      	subs	r6, #8
     77e:	4430      	add	r0, r6
     780:	e7b7      	b.n	6f2 <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
     782:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
     786:	9b02      	ldr	r3, [sp, #8]
     788:	3301      	adds	r3, #1
     78a:	9302      	str	r3, [sp, #8]
     78c:	e7e5      	b.n	75a <cbvprintf_package+0x2d6>
				} else if (is_ro) {
     78e:	f1bc 0f00 	cmp.w	ip, #0
     792:	d001      	beq.n	798 <cbvprintf_package+0x314>
					len += 1;
     794:	3601      	adds	r6, #1
     796:	e7e0      	b.n	75a <cbvprintf_package+0x2d6>
     798:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
     79c:	f00a ffe7 	bl	b76e <strlen>
     7a0:	3602      	adds	r6, #2
     7a2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
     7a6:	4406      	add	r6, r0
     7a8:	e7d7      	b.n	75a <cbvprintf_package+0x2d6>
		} else if (size == sizeof(int)) {
     7aa:	f1b9 0f04 	cmp.w	r9, #4
     7ae:	d108      	bne.n	7c2 <cbvprintf_package+0x33e>
			int v = va_arg(ap, int);
     7b0:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
     7b4:	b115      	cbz	r5, 7bc <cbvprintf_package+0x338>
			int v = va_arg(ap, int);
     7b6:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
     7ba:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     7bc:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     7be:	4680      	mov	r8, r0
     7c0:	e7d1      	b.n	766 <cbvprintf_package+0x2e2>
		} else if (size == sizeof(long long)) {
     7c2:	f1b9 0f08 	cmp.w	r9, #8
     7c6:	f47f ae9b 	bne.w	500 <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
     7ca:	f108 0307 	add.w	r3, r8, #7
     7ce:	f023 0307 	bic.w	r3, r3, #7
     7d2:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
     7d6:	b11d      	cbz	r5, 7e0 <cbvprintf_package+0x35c>
			long long v = va_arg(ap, long long);
     7d8:	e9d3 bc00 	ldrd	fp, ip, [r3]
     7dc:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     7e0:	3408      	adds	r4, #8
     7e2:	e7c0      	b.n	766 <cbvprintf_package+0x2e2>
	buf0[1] = s_rw_cnt;
     7e4:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     7e6:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     7e8:	0880      	lsrs	r0, r0, #2
     7ea:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
     7ec:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
     7ee:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     7f2:	f1ba 0f00 	cmp.w	sl, #0
     7f6:	d005      	beq.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
     7f8:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
     7fa:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
     7fe:	9a00      	ldr	r2, [sp, #0]
     800:	429a      	cmp	r2, r3
     802:	d107      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
		if (BUF_OFFSET + 1 + size > len) {
     804:	f1c5 0901 	rsb	r9, r5, #1
     808:	e039      	b.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
     80a:	bf00      	nop
     80c:	0000cb6c 	.word	0x0000cb6c
     810:	0000f644 	.word	0x0000f644
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     814:	f811 2b01 	ldrb.w	r2, [r1], #1
     818:	0617      	lsls	r7, r2, #24
     81a:	d507      	bpl.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
			if (BUF_OFFSET + 1 > len) {
     81c:	1827      	adds	r7, r4, r0
     81e:	42b7      	cmp	r7, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     820:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     824:	f63f af63 	bhi.w	6ee <cbvprintf_package+0x26a>
			*buf++ = pos;
     828:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
     82c:	3301      	adds	r3, #1
     82e:	e7e6      	b.n	7fe <cbvprintf_package+0x37a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     830:	9b01      	ldr	r3, [sp, #4]
     832:	aa06      	add	r2, sp, #24
     834:	f812 8003 	ldrb.w	r8, [r2, r3]
     838:	f1ba 0f00 	cmp.w	sl, #0
     83c:	d002      	beq.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
     83e:	f018 0f80 	tst.w	r8, #128	; 0x80
     842:	d119      	bne.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     844:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     848:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     84a:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     84e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
     852:	4608      	mov	r0, r1
     854:	9102      	str	r1, [sp, #8]
     856:	f00a ff8a 	bl	b76e <strlen>
		if (BUF_OFFSET + 1 + size > len) {
     85a:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
     85e:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     860:	443a      	add	r2, r7
     862:	42b2      	cmp	r2, r6
     864:	f63f af43 	bhi.w	6ee <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
     868:	f804 8b01 	strb.w	r8, [r4], #1
		memcpy(buf, s, size);
     86c:	9902      	ldr	r1, [sp, #8]
     86e:	4620      	mov	r0, r4
     870:	463a      	mov	r2, r7
     872:	f00a ffd2 	bl	b81a <memcpy>
		buf += size;
     876:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
     878:	9b01      	ldr	r3, [sp, #4]
     87a:	3301      	adds	r3, #1
     87c:	9301      	str	r3, [sp, #4]
     87e:	e9dd 2300 	ldrd	r2, r3, [sp]
     882:	429a      	cmp	r2, r3
     884:	d1d4      	bne.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
	return BUF_OFFSET;
     886:	1b60      	subs	r0, r4, r5
     888:	e733      	b.n	6f2 <cbvprintf_package+0x26e>
		return -EFAULT;
     88a:	f06f 000d 	mvn.w	r0, #13
     88e:	e730      	b.n	6f2 <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     890:	2907      	cmp	r1, #7
     892:	f63f ae0e 	bhi.w	4b2 <cbvprintf_package+0x2e>
     896:	e72a      	b.n	6ee <cbvprintf_package+0x26a>

00000898 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     898:	4b01      	ldr	r3, [pc, #4]	; (8a0 <__printk_hook_install+0x8>)
     89a:	6018      	str	r0, [r3, #0]
}
     89c:	4770      	bx	lr
     89e:	bf00      	nop
     8a0:	20000000 	.word	0x20000000

000008a4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     8a4:	b530      	push	{r4, r5, lr}
     8a6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     8a8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     8ac:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     8ae:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     8b0:	a901      	add	r1, sp, #4
     8b2:	4805      	ldr	r0, [pc, #20]	; (8c8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     8b4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     8b6:	f000 f8e9 	bl	a8c <cbvprintf>

	if (ctx.count < ctx.max) {
     8ba:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     8be:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     8c0:	bfb8      	it	lt
     8c2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     8c4:	b005      	add	sp, #20
     8c6:	bd30      	pop	{r4, r5, pc}
     8c8:	000095bf 	.word	0x000095bf

000008cc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     8cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8d0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     8d4:	f019 0808 	ands.w	r8, r9, #8
{
     8d8:	4604      	mov	r4, r0
     8da:	4693      	mov	fp, r2
	if (processing) {
     8dc:	d00d      	beq.n	8fa <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     8de:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     8e0:	bf0c      	ite	eq
     8e2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     8e6:	f049 0920 	orrne.w	r9, r9, #32
     8ea:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     8ee:	f38b 8811 	msr	BASEPRI, fp
     8f2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     8f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8fa:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     8fe:	2902      	cmp	r1, #2
     900:	d107      	bne.n	912 <process_event+0x46>
			evt = process_recheck(mgr);
     902:	4620      	mov	r0, r4
     904:	f008 fe88 	bl	9618 <process_recheck>
		if (evt == EVT_NOP) {
     908:	2800      	cmp	r0, #0
     90a:	d0f0      	beq.n	8ee <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     90c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     90e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     910:	d14e      	bne.n	9b0 <process_event+0xe4>
			res = mgr->last_res;
     912:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     914:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     916:	2f00      	cmp	r7, #0
     918:	da15      	bge.n	946 <process_event+0x7a>
		*clients = mgr->clients;
     91a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     91c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     920:	e9c4 8800 	strd	r8, r8, [r4]
     924:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     928:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     92a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     92c:	8b21      	ldrh	r1, [r4, #24]
     92e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     932:	45ca      	cmp	sl, r9
     934:	d002      	beq.n	93c <process_event+0x70>
		if (do_monitors
     936:	68a3      	ldr	r3, [r4, #8]
     938:	2b00      	cmp	r3, #0
     93a:	d15a      	bne.n	9f2 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     93c:	b90d      	cbnz	r5, 942 <process_event+0x76>
		    || (transit != NULL)) {
     93e:	2e00      	cmp	r6, #0
     940:	d071      	beq.n	a26 <process_event+0x15a>
     942:	2300      	movs	r3, #0
     944:	e056      	b.n	9f4 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     946:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     94a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     94c:	2a01      	cmp	r2, #1
     94e:	d81e      	bhi.n	98e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     950:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     954:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     956:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     958:	b289      	uxth	r1, r1
     95a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     95e:	d10a      	bne.n	976 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     960:	b13d      	cbz	r5, 972 <process_event+0xa6>
     962:	8b63      	ldrh	r3, [r4, #26]
     964:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     966:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     968:	3301      	adds	r3, #1
     96a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     96c:	2a00      	cmp	r2, #0
     96e:	d1fa      	bne.n	966 <process_event+0x9a>
     970:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     972:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     976:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     978:	4620      	mov	r0, r4
     97a:	f008 fe4d 	bl	9618 <process_recheck>
     97e:	4606      	mov	r6, r0
     980:	2800      	cmp	r0, #0
     982:	d0d3      	beq.n	92c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     984:	8b23      	ldrh	r3, [r4, #24]
     986:	f043 0320 	orr.w	r3, r3, #32
     98a:	8323      	strh	r3, [r4, #24]
     98c:	e7cd      	b.n	92a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     98e:	2b04      	cmp	r3, #4
     990:	d10c      	bne.n	9ac <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     992:	f021 0107 	bic.w	r1, r1, #7
     996:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     998:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     99a:	4620      	mov	r0, r4
     99c:	f008 fe3c 	bl	9618 <process_recheck>
     9a0:	4605      	mov	r5, r0
     9a2:	2800      	cmp	r0, #0
     9a4:	d0c1      	beq.n	92a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     9a6:	f041 0120 	orr.w	r1, r1, #32
     9aa:	8321      	strh	r1, [r4, #24]
     9ac:	2500      	movs	r5, #0
     9ae:	e7bc      	b.n	92a <process_event+0x5e>
		} else if (evt == EVT_START) {
     9b0:	2803      	cmp	r0, #3
     9b2:	d109      	bne.n	9c8 <process_event+0xfc>
			transit = mgr->transitions->start;
     9b4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9b6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     9ba:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9bc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     9c0:	8323      	strh	r3, [r4, #24]
}
     9c2:	2500      	movs	r5, #0
		res = 0;
     9c4:	462f      	mov	r7, r5
     9c6:	e7b1      	b.n	92c <process_event+0x60>
		} else if (evt == EVT_STOP) {
     9c8:	2804      	cmp	r0, #4
     9ca:	d106      	bne.n	9da <process_event+0x10e>
			transit = mgr->transitions->stop;
     9cc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9ce:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     9d2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9d4:	f043 0304 	orr.w	r3, r3, #4
     9d8:	e7f2      	b.n	9c0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     9da:	2805      	cmp	r0, #5
     9dc:	d106      	bne.n	9ec <process_event+0x120>
			transit = mgr->transitions->reset;
     9de:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9e0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     9e4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9e6:	f043 0305 	orr.w	r3, r3, #5
     9ea:	e7e9      	b.n	9c0 <process_event+0xf4>
     9ec:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     9ee:	462e      	mov	r6, r5
     9f0:	e7e8      	b.n	9c4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     9f2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     9f4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     9f8:	8321      	strh	r1, [r4, #24]
     9fa:	f38b 8811 	msr	BASEPRI, fp
     9fe:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     a02:	b9fb      	cbnz	r3, a44 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     a04:	bb85      	cbnz	r5, a68 <process_event+0x19c>
			if (transit != NULL) {
     a06:	b116      	cbz	r6, a0e <process_event+0x142>
				transit(mgr, transition_complete);
     a08:	491f      	ldr	r1, [pc, #124]	; (a88 <process_event+0x1bc>)
     a0a:	4620      	mov	r0, r4
     a0c:	47b0      	blx	r6
	__asm__ volatile(
     a0e:	f04f 0320 	mov.w	r3, #32
     a12:	f3ef 8b11 	mrs	fp, BASEPRI
     a16:	f383 8812 	msr	BASEPRI_MAX, r3
     a1a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     a1e:	8b23      	ldrh	r3, [r4, #24]
     a20:	f023 0308 	bic.w	r3, r3, #8
     a24:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a26:	8b23      	ldrh	r3, [r4, #24]
     a28:	06da      	lsls	r2, r3, #27
     a2a:	d525      	bpl.n	a78 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a2c:	f023 0310 	bic.w	r3, r3, #16
     a30:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     a32:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     a34:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     a38:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     a3c:	2900      	cmp	r1, #0
     a3e:	f47f af5e 	bne.w	8fe <process_event+0x32>
out:
     a42:	e754      	b.n	8ee <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     a44:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a46:	2900      	cmp	r1, #0
     a48:	d0dc      	beq.n	a04 <process_event+0x138>
	return node->next;
     a4a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     a4e:	f8d1 b004 	ldr.w	fp, [r1, #4]
     a52:	463b      	mov	r3, r7
     a54:	4652      	mov	r2, sl
     a56:	4620      	mov	r0, r4
     a58:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a5a:	f1b9 0f00 	cmp.w	r9, #0
     a5e:	d0d1      	beq.n	a04 <process_event+0x138>
     a60:	4649      	mov	r1, r9
     a62:	f8d9 9000 	ldr.w	r9, [r9]
     a66:	e7f2      	b.n	a4e <process_event+0x182>
     a68:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     a6a:	463b      	mov	r3, r7
     a6c:	4652      	mov	r2, sl
     a6e:	4620      	mov	r0, r4
     a70:	682d      	ldr	r5, [r5, #0]
     a72:	f008 fded 	bl	9650 <notify_one>
     a76:	e7c5      	b.n	a04 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     a78:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     a7c:	bf1e      	ittt	ne
     a7e:	f023 0320 	bicne.w	r3, r3, #32
     a82:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     a84:	2102      	movne	r1, #2
     a86:	e7d5      	b.n	a34 <process_event+0x168>
     a88:	0000967d 	.word	0x0000967d

00000a8c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a90:	b091      	sub	sp, #68	; 0x44
     a92:	468b      	mov	fp, r1
     a94:	9002      	str	r0, [sp, #8]
     a96:	4692      	mov	sl, r2
     a98:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     a9a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     a9c:	f89a 0000 	ldrb.w	r0, [sl]
     aa0:	b908      	cbnz	r0, aa6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     aa2:	4628      	mov	r0, r5
     aa4:	e35f      	b.n	1166 <cbvprintf+0x6da>
		if (*fp != '%') {
     aa6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     aa8:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     aac:	d007      	beq.n	abe <cbvprintf+0x32>
			OUTC('%');
     aae:	9b02      	ldr	r3, [sp, #8]
     ab0:	4659      	mov	r1, fp
     ab2:	4798      	blx	r3
     ab4:	2800      	cmp	r0, #0
     ab6:	f2c0 8356 	blt.w	1166 <cbvprintf+0x6da>
     aba:	3501      	adds	r5, #1
			break;
     abc:	e212      	b.n	ee4 <cbvprintf+0x458>
		} state = {
     abe:	2218      	movs	r2, #24
     ac0:	2100      	movs	r1, #0
     ac2:	a80a      	add	r0, sp, #40	; 0x28
     ac4:	f00a feb4 	bl	b830 <memset>
	if (*sp == '%') {
     ac8:	f89a 3001 	ldrb.w	r3, [sl, #1]
     acc:	2b25      	cmp	r3, #37	; 0x25
     ace:	d078      	beq.n	bc2 <cbvprintf+0x136>
     ad0:	2200      	movs	r2, #0
     ad2:	4610      	mov	r0, r2
     ad4:	4696      	mov	lr, r2
     ad6:	4694      	mov	ip, r2
     ad8:	4616      	mov	r6, r2
     ada:	4639      	mov	r1, r7
		switch (*sp) {
     adc:	f817 3b01 	ldrb.w	r3, [r7], #1
     ae0:	2b2b      	cmp	r3, #43	; 0x2b
     ae2:	f000 809d 	beq.w	c20 <cbvprintf+0x194>
     ae6:	f200 8094 	bhi.w	c12 <cbvprintf+0x186>
     aea:	2b20      	cmp	r3, #32
     aec:	f000 809b 	beq.w	c26 <cbvprintf+0x19a>
     af0:	2b23      	cmp	r3, #35	; 0x23
     af2:	f000 809b 	beq.w	c2c <cbvprintf+0x1a0>
     af6:	b12e      	cbz	r6, b04 <cbvprintf+0x78>
     af8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     afc:	f046 0604 	orr.w	r6, r6, #4
     b00:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b04:	f1bc 0f00 	cmp.w	ip, #0
     b08:	d005      	beq.n	b16 <cbvprintf+0x8a>
     b0a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b0e:	f046 0608 	orr.w	r6, r6, #8
     b12:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b16:	f1be 0f00 	cmp.w	lr, #0
     b1a:	d005      	beq.n	b28 <cbvprintf+0x9c>
     b1c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b20:	f046 0610 	orr.w	r6, r6, #16
     b24:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b28:	b128      	cbz	r0, b36 <cbvprintf+0xaa>
     b2a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b2e:	f040 0020 	orr.w	r0, r0, #32
     b32:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b36:	b12a      	cbz	r2, b44 <cbvprintf+0xb8>
     b38:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     b40:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     b44:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b48:	f002 0044 	and.w	r0, r2, #68	; 0x44
     b4c:	2844      	cmp	r0, #68	; 0x44
     b4e:	d103      	bne.n	b58 <cbvprintf+0xcc>
		conv->flag_zero = false;
     b50:	f36f 1286 	bfc	r2, #6, #1
     b54:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     b58:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b5c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     b5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b62:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b66:	d17b      	bne.n	c60 <cbvprintf+0x1d4>
		conv->width_star = true;
     b68:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b6c:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     b70:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     b72:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     b76:	781a      	ldrb	r2, [r3, #0]
     b78:	2a2e      	cmp	r2, #46	; 0x2e
     b7a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b7e:	bf0c      	ite	eq
     b80:	2101      	moveq	r1, #1
     b82:	2100      	movne	r1, #0
     b84:	f361 0241 	bfi	r2, r1, #1, #1
     b88:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     b8c:	d174      	bne.n	c78 <cbvprintf+0x1ec>
	if (*sp == '*') {
     b8e:	785a      	ldrb	r2, [r3, #1]
     b90:	2a2a      	cmp	r2, #42	; 0x2a
     b92:	d06a      	beq.n	c6a <cbvprintf+0x1de>
	++sp;
     b94:	3301      	adds	r3, #1
	size_t val = 0;
     b96:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     b98:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     b9a:	4618      	mov	r0, r3
     b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
     ba0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     ba4:	2f09      	cmp	r7, #9
     ba6:	f240 808e 	bls.w	cc6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     baa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     bae:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     bb0:	f3c2 0040 	ubfx	r0, r2, #1, #1
     bb4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     bb8:	f361 0241 	bfi	r2, r1, #1, #1
     bbc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     bc0:	e05a      	b.n	c78 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     bc2:	f10a 0702 	add.w	r7, sl, #2
     bc6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     bca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bce:	07d9      	lsls	r1, r3, #31
     bd0:	f140 8149 	bpl.w	e66 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     bd4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     bd8:	f1b9 0f00 	cmp.w	r9, #0
     bdc:	da07      	bge.n	bee <cbvprintf+0x162>
				conv->flag_dash = true;
     bde:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     be2:	f042 0204 	orr.w	r2, r2, #4
     be6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     bea:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     bee:	075a      	lsls	r2, r3, #29
     bf0:	f140 8142 	bpl.w	e78 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     bf4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     bf8:	f1b8 0f00 	cmp.w	r8, #0
     bfc:	f280 8141 	bge.w	e82 <cbvprintf+0x3f6>
				conv->prec_present = false;
     c00:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c04:	f36f 0341 	bfc	r3, #1, #1
     c08:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     c0c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     c10:	e137      	b.n	e82 <cbvprintf+0x3f6>
		switch (*sp) {
     c12:	2b2d      	cmp	r3, #45	; 0x2d
     c14:	d00c      	beq.n	c30 <cbvprintf+0x1a4>
     c16:	2b30      	cmp	r3, #48	; 0x30
     c18:	f47f af6d 	bne.w	af6 <cbvprintf+0x6a>
			conv->flag_zero = true;
     c1c:	2201      	movs	r2, #1
	} while (loop);
     c1e:	e75c      	b.n	ada <cbvprintf+0x4e>
			conv->flag_plus = true;
     c20:	f04f 0c01 	mov.w	ip, #1
     c24:	e759      	b.n	ada <cbvprintf+0x4e>
			conv->flag_space = true;
     c26:	f04f 0e01 	mov.w	lr, #1
     c2a:	e756      	b.n	ada <cbvprintf+0x4e>
			conv->flag_hash = true;
     c2c:	2001      	movs	r0, #1
     c2e:	e754      	b.n	ada <cbvprintf+0x4e>
		switch (*sp) {
     c30:	2601      	movs	r6, #1
     c32:	e752      	b.n	ada <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c34:	fb0c 0202 	mla	r2, ip, r2, r0
     c38:	3a30      	subs	r2, #48	; 0x30
     c3a:	4633      	mov	r3, r6
     c3c:	461e      	mov	r6, r3
     c3e:	f816 0b01 	ldrb.w	r0, [r6], #1
     c42:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c46:	2f09      	cmp	r7, #9
     c48:	d9f4      	bls.n	c34 <cbvprintf+0x1a8>
	if (sp != wp) {
     c4a:	4299      	cmp	r1, r3
     c4c:	d093      	beq.n	b76 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     c4e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c52:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     c54:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     c56:	f362 0141 	bfi	r1, r2, #1, #1
     c5a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     c5e:	e78a      	b.n	b76 <cbvprintf+0xea>
     c60:	460b      	mov	r3, r1
	size_t val = 0;
     c62:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c64:	f04f 0c0a 	mov.w	ip, #10
     c68:	e7e8      	b.n	c3c <cbvprintf+0x1b0>
		conv->prec_star = true;
     c6a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c6e:	f042 0204 	orr.w	r2, r2, #4
     c72:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     c76:	3302      	adds	r3, #2
	switch (*sp) {
     c78:	461f      	mov	r7, r3
     c7a:	f817 2b01 	ldrb.w	r2, [r7], #1
     c7e:	2a6c      	cmp	r2, #108	; 0x6c
     c80:	d041      	beq.n	d06 <cbvprintf+0x27a>
     c82:	d825      	bhi.n	cd0 <cbvprintf+0x244>
     c84:	2a68      	cmp	r2, #104	; 0x68
     c86:	d02b      	beq.n	ce0 <cbvprintf+0x254>
     c88:	2a6a      	cmp	r2, #106	; 0x6a
     c8a:	d046      	beq.n	d1a <cbvprintf+0x28e>
     c8c:	2a4c      	cmp	r2, #76	; 0x4c
     c8e:	d04c      	beq.n	d2a <cbvprintf+0x29e>
     c90:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     c92:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     c96:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     c9a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     c9e:	2a78      	cmp	r2, #120	; 0x78
     ca0:	f200 80d9 	bhi.w	e56 <cbvprintf+0x3ca>
     ca4:	2a57      	cmp	r2, #87	; 0x57
     ca6:	d84d      	bhi.n	d44 <cbvprintf+0x2b8>
     ca8:	2a41      	cmp	r2, #65	; 0x41
     caa:	d003      	beq.n	cb4 <cbvprintf+0x228>
     cac:	3a45      	subs	r2, #69	; 0x45
     cae:	2a02      	cmp	r2, #2
     cb0:	f200 80d1 	bhi.w	e56 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     cb4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cb8:	2204      	movs	r2, #4
     cba:	f362 0302 	bfi	r3, r2, #0, #3
     cbe:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     cc2:	2301      	movs	r3, #1
			break;
     cc4:	e09e      	b.n	e04 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     cc6:	fb06 2101 	mla	r1, r6, r1, r2
     cca:	3930      	subs	r1, #48	; 0x30
     ccc:	4603      	mov	r3, r0
     cce:	e764      	b.n	b9a <cbvprintf+0x10e>
	switch (*sp) {
     cd0:	2a74      	cmp	r2, #116	; 0x74
     cd2:	d026      	beq.n	d22 <cbvprintf+0x296>
     cd4:	2a7a      	cmp	r2, #122	; 0x7a
     cd6:	d1db      	bne.n	c90 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     cd8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cdc:	2206      	movs	r2, #6
     cde:	e00d      	b.n	cfc <cbvprintf+0x270>
		if (*++sp == 'h') {
     ce0:	785a      	ldrb	r2, [r3, #1]
     ce2:	2a68      	cmp	r2, #104	; 0x68
     ce4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ce8:	d106      	bne.n	cf8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     cea:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     cec:	f361 02c6 	bfi	r2, r1, #3, #4
     cf0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     cf4:	1c9f      	adds	r7, r3, #2
     cf6:	e7cc      	b.n	c92 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     cf8:	4613      	mov	r3, r2
     cfa:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     cfc:	f362 03c6 	bfi	r3, r2, #3, #4
     d00:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     d04:	e7c5      	b.n	c92 <cbvprintf+0x206>
		if (*++sp == 'l') {
     d06:	785a      	ldrb	r2, [r3, #1]
     d08:	2a6c      	cmp	r2, #108	; 0x6c
     d0a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d0e:	d101      	bne.n	d14 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     d10:	2104      	movs	r1, #4
     d12:	e7eb      	b.n	cec <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     d14:	4613      	mov	r3, r2
     d16:	2203      	movs	r2, #3
     d18:	e7f0      	b.n	cfc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     d1a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d1e:	2205      	movs	r2, #5
     d20:	e7ec      	b.n	cfc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     d22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d26:	2207      	movs	r2, #7
     d28:	e7e8      	b.n	cfc <cbvprintf+0x270>
		conv->unsupported = true;
     d2a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d2e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d32:	f023 0302 	bic.w	r3, r3, #2
     d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d3a:	f043 0302 	orr.w	r3, r3, #2
     d3e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     d42:	e7a6      	b.n	c92 <cbvprintf+0x206>
	switch (conv->specifier) {
     d44:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     d48:	2920      	cmp	r1, #32
     d4a:	f200 8084 	bhi.w	e56 <cbvprintf+0x3ca>
     d4e:	a001      	add	r0, pc, #4	; (adr r0, d54 <cbvprintf+0x2c8>)
     d50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d54:	00000e19 	.word	0x00000e19
     d58:	00000e57 	.word	0x00000e57
     d5c:	00000e57 	.word	0x00000e57
     d60:	00000e57 	.word	0x00000e57
     d64:	00000e57 	.word	0x00000e57
     d68:	00000e57 	.word	0x00000e57
     d6c:	00000e57 	.word	0x00000e57
     d70:	00000e57 	.word	0x00000e57
     d74:	00000e57 	.word	0x00000e57
     d78:	00000cb5 	.word	0x00000cb5
     d7c:	00000e57 	.word	0x00000e57
     d80:	00000e19 	.word	0x00000e19
     d84:	00000dd9 	.word	0x00000dd9
     d88:	00000cb5 	.word	0x00000cb5
     d8c:	00000cb5 	.word	0x00000cb5
     d90:	00000cb5 	.word	0x00000cb5
     d94:	00000e57 	.word	0x00000e57
     d98:	00000dd9 	.word	0x00000dd9
     d9c:	00000e57 	.word	0x00000e57
     da0:	00000e57 	.word	0x00000e57
     da4:	00000e57 	.word	0x00000e57
     da8:	00000e57 	.word	0x00000e57
     dac:	00000e21 	.word	0x00000e21
     db0:	00000e19 	.word	0x00000e19
     db4:	00000e3d 	.word	0x00000e3d
     db8:	00000e57 	.word	0x00000e57
     dbc:	00000e57 	.word	0x00000e57
     dc0:	00000e3d 	.word	0x00000e3d
     dc4:	00000e57 	.word	0x00000e57
     dc8:	00000e19 	.word	0x00000e19
     dcc:	00000e57 	.word	0x00000e57
     dd0:	00000e57 	.word	0x00000e57
     dd4:	00000e19 	.word	0x00000e19
		conv->specifier_cat = SPECIFIER_SINT;
     dd8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     ddc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     dde:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     de2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     de6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     de8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     dec:	bf02      	ittt	eq
     dee:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     df2:	f041 0101 	orreq.w	r1, r1, #1
     df6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     dfa:	2a63      	cmp	r2, #99	; 0x63
     dfc:	d131      	bne.n	e62 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     dfe:	3b00      	subs	r3, #0
     e00:	bf18      	it	ne
     e02:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     e04:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e08:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e0c:	430b      	orrs	r3, r1
     e0e:	f363 0241 	bfi	r2, r3, #1, #1
     e12:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e16:	e6d8      	b.n	bca <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     e18:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e1c:	2002      	movs	r0, #2
     e1e:	e7de      	b.n	dde <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     e20:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e24:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e28:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e2c:	2103      	movs	r1, #3
     e2e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e32:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e34:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e38:	4143      	adcs	r3, r0
     e3a:	e7e3      	b.n	e04 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     e3c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     e40:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     e42:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     e46:	f361 0202 	bfi	r2, r1, #0, #3
     e4a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e4e:	bf14      	ite	ne
     e50:	2301      	movne	r3, #1
     e52:	2300      	moveq	r3, #0
     e54:	e7d6      	b.n	e04 <cbvprintf+0x378>
		conv->invalid = true;
     e56:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e5a:	f043 0301 	orr.w	r3, r3, #1
     e5e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     e62:	2300      	movs	r3, #0
     e64:	e7ce      	b.n	e04 <cbvprintf+0x378>
		} else if (conv->width_present) {
     e66:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     e6a:	2a00      	cmp	r2, #0
			width = conv->width_value;
     e6c:	bfb4      	ite	lt
     e6e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     e72:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     e76:	e6ba      	b.n	bee <cbvprintf+0x162>
		} else if (conv->prec_present) {
     e78:	079b      	lsls	r3, r3, #30
     e7a:	f57f aec7 	bpl.w	c0c <cbvprintf+0x180>
			precision = conv->prec_value;
     e7e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     e82:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     e86:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     e88:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     e8c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     e90:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     e94:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     e96:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     e9a:	d138      	bne.n	f0e <cbvprintf+0x482>
			switch (length_mod) {
     e9c:	1ecb      	subs	r3, r1, #3
     e9e:	2b04      	cmp	r3, #4
     ea0:	d822      	bhi.n	ee8 <cbvprintf+0x45c>
     ea2:	e8df f003 	tbb	[pc, r3]
     ea6:	0903      	.short	0x0903
     ea8:	2109      	.short	0x2109
     eaa:	21          	.byte	0x21
     eab:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     eac:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     eb0:	17da      	asrs	r2, r3, #31
     eb2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     eb6:	e006      	b.n	ec6 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     eb8:	3407      	adds	r4, #7
     eba:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     ebe:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     ec2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ec6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     eca:	f013 0603 	ands.w	r6, r3, #3
     ece:	d056      	beq.n	f7e <cbvprintf+0x4f2>
			OUTS(sp, fp);
     ed0:	9802      	ldr	r0, [sp, #8]
     ed2:	463b      	mov	r3, r7
     ed4:	4652      	mov	r2, sl
     ed6:	4659      	mov	r1, fp
     ed8:	f008 fcea 	bl	98b0 <outs>
     edc:	2800      	cmp	r0, #0
     ede:	f2c0 8142 	blt.w	1166 <cbvprintf+0x6da>
     ee2:	4405      	add	r5, r0
			continue;
     ee4:	46ba      	mov	sl, r7
     ee6:	e5d9      	b.n	a9c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ee8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     eec:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     eee:	ea4f 72e3 	mov.w	r2, r3, asr #31
     ef2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ef6:	d105      	bne.n	f04 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
     ef8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     efc:	930a      	str	r3, [sp, #40]	; 0x28
     efe:	2300      	movs	r3, #0
     f00:	930b      	str	r3, [sp, #44]	; 0x2c
     f02:	e7e0      	b.n	ec6 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
     f04:	2902      	cmp	r1, #2
     f06:	d1de      	bne.n	ec6 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
     f08:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     f0c:	e7d0      	b.n	eb0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f0e:	2b02      	cmp	r3, #2
     f10:	d123      	bne.n	f5a <cbvprintf+0x4ce>
			switch (length_mod) {
     f12:	1ecb      	subs	r3, r1, #3
     f14:	2b04      	cmp	r3, #4
     f16:	d813      	bhi.n	f40 <cbvprintf+0x4b4>
     f18:	e8df f003 	tbb	[pc, r3]
     f1c:	120a0a03 	.word	0x120a0a03
     f20:	12          	.byte	0x12
     f21:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     f22:	6822      	ldr	r2, [r4, #0]
     f24:	920a      	str	r2, [sp, #40]	; 0x28
     f26:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     f28:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     f2a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f2c:	4604      	mov	r4, r0
     f2e:	e7ca      	b.n	ec6 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
     f30:	1de0      	adds	r0, r4, #7
     f32:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     f36:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     f3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     f3e:	e7f5      	b.n	f2c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
     f40:	f854 3b04 	ldr.w	r3, [r4], #4
     f44:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f46:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     f48:	f04f 0300 	mov.w	r3, #0
     f4c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     f4e:	d0d3      	beq.n	ef8 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
     f50:	2902      	cmp	r1, #2
     f52:	d1b8      	bne.n	ec6 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
     f54:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     f58:	e7d0      	b.n	efc <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
     f5a:	2b04      	cmp	r3, #4
     f5c:	d109      	bne.n	f72 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
     f5e:	1de3      	adds	r3, r4, #7
     f60:	f023 0307 	bic.w	r3, r3, #7
     f64:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     f68:	e9d3 2300 	ldrd	r2, r3, [r3]
     f6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     f70:	e7a9      	b.n	ec6 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     f72:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     f74:	bf04      	itt	eq
     f76:	f854 3b04 	ldreq.w	r3, [r4], #4
     f7a:	930a      	streq	r3, [sp, #40]	; 0x28
     f7c:	e7a3      	b.n	ec6 <cbvprintf+0x43a>
		switch (conv->specifier) {
     f7e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f82:	2878      	cmp	r0, #120	; 0x78
     f84:	d8ae      	bhi.n	ee4 <cbvprintf+0x458>
     f86:	2862      	cmp	r0, #98	; 0x62
     f88:	d822      	bhi.n	fd0 <cbvprintf+0x544>
     f8a:	2825      	cmp	r0, #37	; 0x25
     f8c:	f43f ad8f 	beq.w	aae <cbvprintf+0x22>
     f90:	2858      	cmp	r0, #88	; 0x58
     f92:	d1a7      	bne.n	ee4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
     f94:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     f98:	9300      	str	r3, [sp, #0]
     f9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     f9e:	ab04      	add	r3, sp, #16
     fa0:	aa0c      	add	r2, sp, #48	; 0x30
     fa2:	f008 fc3f 	bl	9824 <encode_uint>
     fa6:	4682      	mov	sl, r0
			if (precision >= 0) {
     fa8:	f1b8 0f00 	cmp.w	r8, #0
     fac:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     fb0:	db0c      	blt.n	fcc <cbvprintf+0x540>
				conv->flag_zero = false;
     fb2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     fb6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     fba:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     fbe:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     fc0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     fc4:	d902      	bls.n	fcc <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
     fc6:	eba8 0303 	sub.w	r3, r8, r3
     fca:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     fcc:	4680      	mov	r8, r0
     fce:	e03d      	b.n	104c <cbvprintf+0x5c0>
		switch (conv->specifier) {
     fd0:	3863      	subs	r0, #99	; 0x63
     fd2:	2815      	cmp	r0, #21
     fd4:	d886      	bhi.n	ee4 <cbvprintf+0x458>
     fd6:	a201      	add	r2, pc, #4	; (adr r2, fdc <cbvprintf+0x550>)
     fd8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     fdc:	0000105d 	.word	0x0000105d
     fe0:	000010c1 	.word	0x000010c1
     fe4:	00000ee5 	.word	0x00000ee5
     fe8:	00000ee5 	.word	0x00000ee5
     fec:	00000ee5 	.word	0x00000ee5
     ff0:	00000ee5 	.word	0x00000ee5
     ff4:	000010c1 	.word	0x000010c1
     ff8:	00000ee5 	.word	0x00000ee5
     ffc:	00000ee5 	.word	0x00000ee5
    1000:	00000ee5 	.word	0x00000ee5
    1004:	00000ee5 	.word	0x00000ee5
    1008:	0000111b 	.word	0x0000111b
    100c:	000010e9 	.word	0x000010e9
    1010:	000010ed 	.word	0x000010ed
    1014:	00000ee5 	.word	0x00000ee5
    1018:	00000ee5 	.word	0x00000ee5
    101c:	00001035 	.word	0x00001035
    1020:	00000ee5 	.word	0x00000ee5
    1024:	000010e9 	.word	0x000010e9
    1028:	00000ee5 	.word	0x00000ee5
    102c:	00000ee5 	.word	0x00000ee5
    1030:	000010e9 	.word	0x000010e9
			if (precision >= 0) {
    1034:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1038:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    103c:	db0a      	blt.n	1054 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    103e:	4641      	mov	r1, r8
    1040:	4650      	mov	r0, sl
    1042:	f00a fb9b 	bl	b77c <strnlen>
			bpe = bps + len;
    1046:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    104a:	2600      	movs	r6, #0
		if (bps == NULL) {
    104c:	f1ba 0f00 	cmp.w	sl, #0
    1050:	d10c      	bne.n	106c <cbvprintf+0x5e0>
    1052:	e747      	b.n	ee4 <cbvprintf+0x458>
				len = strlen(bps);
    1054:	4650      	mov	r0, sl
    1056:	f00a fb8a 	bl	b76e <strlen>
    105a:	e7f4      	b.n	1046 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    105c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    105e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1062:	2600      	movs	r6, #0
			bps = buf;
    1064:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1068:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    106c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1070:	b106      	cbz	r6, 1074 <cbvprintf+0x5e8>
			nj_len += 1U;
    1072:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1074:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1078:	06d0      	lsls	r0, r2, #27
    107a:	d568      	bpl.n	114e <cbvprintf+0x6c2>
			nj_len += 2U;
    107c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    107e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1080:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1082:	bf48      	it	mi
    1084:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1086:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1088:	bf48      	it	mi
    108a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    108c:	f1b9 0f00 	cmp.w	r9, #0
    1090:	dd76      	ble.n	1180 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    1092:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1096:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    109a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    109e:	9303      	str	r3, [sp, #12]
    10a0:	0753      	lsls	r3, r2, #29
    10a2:	d46d      	bmi.n	1180 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    10a4:	0650      	lsls	r0, r2, #25
    10a6:	d561      	bpl.n	116c <cbvprintf+0x6e0>
					if (sign != 0) {
    10a8:	b146      	cbz	r6, 10bc <cbvprintf+0x630>
						OUTC(sign);
    10aa:	9b02      	ldr	r3, [sp, #8]
    10ac:	4659      	mov	r1, fp
    10ae:	4630      	mov	r0, r6
    10b0:	4798      	blx	r3
    10b2:	2800      	cmp	r0, #0
    10b4:	db57      	blt.n	1166 <cbvprintf+0x6da>
						sign = 0;
    10b6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    10b8:	3501      	adds	r5, #1
						sign = 0;
    10ba:	461e      	mov	r6, r3
					pad = '0';
    10bc:	2330      	movs	r3, #48	; 0x30
    10be:	e056      	b.n	116e <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    10c0:	071e      	lsls	r6, r3, #28
    10c2:	d40f      	bmi.n	10e4 <cbvprintf+0x658>
				sign = ' ';
    10c4:	f013 0610 	ands.w	r6, r3, #16
    10c8:	bf18      	it	ne
    10ca:	2620      	movne	r6, #32
			sint = value->sint;
    10cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    10d0:	2b00      	cmp	r3, #0
    10d2:	f6bf af5f 	bge.w	f94 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    10d6:	4252      	negs	r2, r2
    10d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    10dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    10e0:	262d      	movs	r6, #45	; 0x2d
    10e2:	e757      	b.n	f94 <cbvprintf+0x508>
				sign = '+';
    10e4:	262b      	movs	r6, #43	; 0x2b
    10e6:	e7f1      	b.n	10cc <cbvprintf+0x640>
		switch (conv->specifier) {
    10e8:	2600      	movs	r6, #0
    10ea:	e753      	b.n	f94 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    10ec:	980a      	ldr	r0, [sp, #40]	; 0x28
    10ee:	b340      	cbz	r0, 1142 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10f0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    10f4:	9300      	str	r3, [sp, #0]
    10f6:	aa0c      	add	r2, sp, #48	; 0x30
    10f8:	ab04      	add	r3, sp, #16
    10fa:	2100      	movs	r1, #0
    10fc:	f008 fb92 	bl	9824 <encode_uint>
				conv->altform_0c = true;
    1100:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1104:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1108:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    110c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1110:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1112:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1116:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1118:	e746      	b.n	fa8 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    111a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    111c:	2907      	cmp	r1, #7
    111e:	f63f aee1 	bhi.w	ee4 <cbvprintf+0x458>
    1122:	e8df f001 	tbb	[pc, r1]
    1126:	040c      	.short	0x040c
    1128:	08080c06 	.word	0x08080c06
    112c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    112e:	701d      	strb	r5, [r3, #0]
		break;
    1130:	e6d8      	b.n	ee4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    1132:	801d      	strh	r5, [r3, #0]
		break;
    1134:	e6d6      	b.n	ee4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    1136:	17ea      	asrs	r2, r5, #31
    1138:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    113c:	e6d2      	b.n	ee4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    113e:	601d      	str	r5, [r3, #0]
		break;
    1140:	e6d0      	b.n	ee4 <cbvprintf+0x458>
			bps = "(nil)";
    1142:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 120c <cbvprintf+0x780>
    1146:	4606      	mov	r6, r0
			bpe = bps + 5;
    1148:	f10a 0805 	add.w	r8, sl, #5
    114c:	e78e      	b.n	106c <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    114e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1150:	bf48      	it	mi
    1152:	3301      	addmi	r3, #1
    1154:	e793      	b.n	107e <cbvprintf+0x5f2>
					OUTC(pad);
    1156:	4618      	mov	r0, r3
    1158:	9303      	str	r3, [sp, #12]
    115a:	4659      	mov	r1, fp
    115c:	9b02      	ldr	r3, [sp, #8]
    115e:	4798      	blx	r3
    1160:	2800      	cmp	r0, #0
    1162:	9b03      	ldr	r3, [sp, #12]
    1164:	da04      	bge.n	1170 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    1166:	b011      	add	sp, #68	; 0x44
    1168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    116c:	2320      	movs	r3, #32
    116e:	444d      	add	r5, r9
    1170:	464a      	mov	r2, r9
				while (width-- > 0) {
    1172:	2a00      	cmp	r2, #0
    1174:	eba5 0109 	sub.w	r1, r5, r9
    1178:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    117c:	dceb      	bgt.n	1156 <cbvprintf+0x6ca>
    117e:	460d      	mov	r5, r1
		if (sign != 0) {
    1180:	b136      	cbz	r6, 1190 <cbvprintf+0x704>
			OUTC(sign);
    1182:	9b02      	ldr	r3, [sp, #8]
    1184:	4659      	mov	r1, fp
    1186:	4630      	mov	r0, r6
    1188:	4798      	blx	r3
    118a:	2800      	cmp	r0, #0
    118c:	dbeb      	blt.n	1166 <cbvprintf+0x6da>
    118e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1190:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1194:	06d9      	lsls	r1, r3, #27
    1196:	d401      	bmi.n	119c <cbvprintf+0x710>
    1198:	071a      	lsls	r2, r3, #28
    119a:	d506      	bpl.n	11aa <cbvprintf+0x71e>
				OUTC('0');
    119c:	9b02      	ldr	r3, [sp, #8]
    119e:	4659      	mov	r1, fp
    11a0:	2030      	movs	r0, #48	; 0x30
    11a2:	4798      	blx	r3
    11a4:	2800      	cmp	r0, #0
    11a6:	dbde      	blt.n	1166 <cbvprintf+0x6da>
    11a8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    11aa:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11ae:	06db      	lsls	r3, r3, #27
    11b0:	d507      	bpl.n	11c2 <cbvprintf+0x736>
				OUTC(conv->specifier);
    11b2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    11b6:	9b02      	ldr	r3, [sp, #8]
    11b8:	4659      	mov	r1, fp
    11ba:	4798      	blx	r3
    11bc:	2800      	cmp	r0, #0
    11be:	dbd2      	blt.n	1166 <cbvprintf+0x6da>
    11c0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    11c2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    11c4:	442e      	add	r6, r5
    11c6:	1b73      	subs	r3, r6, r5
    11c8:	2b00      	cmp	r3, #0
    11ca:	dc16      	bgt.n	11fa <cbvprintf+0x76e>
			OUTS(bps, bpe);
    11cc:	9802      	ldr	r0, [sp, #8]
    11ce:	4643      	mov	r3, r8
    11d0:	4652      	mov	r2, sl
    11d2:	4659      	mov	r1, fp
    11d4:	f008 fb6c 	bl	98b0 <outs>
    11d8:	2800      	cmp	r0, #0
    11da:	dbc4      	blt.n	1166 <cbvprintf+0x6da>
    11dc:	4405      	add	r5, r0
		while (width > 0) {
    11de:	44a9      	add	r9, r5
    11e0:	eba9 0305 	sub.w	r3, r9, r5
    11e4:	2b00      	cmp	r3, #0
    11e6:	f77f ae7d 	ble.w	ee4 <cbvprintf+0x458>
			OUTC(' ');
    11ea:	9b02      	ldr	r3, [sp, #8]
    11ec:	4659      	mov	r1, fp
    11ee:	2020      	movs	r0, #32
    11f0:	4798      	blx	r3
    11f2:	2800      	cmp	r0, #0
    11f4:	dbb7      	blt.n	1166 <cbvprintf+0x6da>
    11f6:	3501      	adds	r5, #1
			--width;
    11f8:	e7f2      	b.n	11e0 <cbvprintf+0x754>
				OUTC('0');
    11fa:	9b02      	ldr	r3, [sp, #8]
    11fc:	4659      	mov	r1, fp
    11fe:	2030      	movs	r0, #48	; 0x30
    1200:	4798      	blx	r3
    1202:	2800      	cmp	r0, #0
    1204:	dbaf      	blt.n	1166 <cbvprintf+0x6da>
    1206:	3501      	adds	r5, #1
    1208:	e7dd      	b.n	11c6 <cbvprintf+0x73a>
    120a:	bf00      	nop
    120c:	0000dab0 	.word	0x0000dab0

00001210 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1210:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1212:	4910      	ldr	r1, [pc, #64]	; (1254 <enable_logger+0x44>)
    1214:	4810      	ldr	r0, [pc, #64]	; (1258 <enable_logger+0x48>)
{
    1216:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1218:	2200      	movs	r2, #0
    121a:	f00b fb1e 	bl	c85a <k_timer_init>
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    121e:	4d0f      	ldr	r5, [pc, #60]	; (125c <enable_logger+0x4c>)
    1220:	490f      	ldr	r1, [pc, #60]	; (1260 <enable_logger+0x50>)
    1222:	2200      	movs	r2, #0
    1224:	2300      	movs	r3, #0
    1226:	e9cd 2306 	strd	r2, r3, [sp, #24]
    122a:	2400      	movs	r4, #0
    122c:	230e      	movs	r3, #14
    122e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1232:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1236:	4b0b      	ldr	r3, [pc, #44]	; (1264 <enable_logger+0x54>)
    1238:	9400      	str	r4, [sp, #0]
    123a:	f44f 7240 	mov.w	r2, #768	; 0x300
    123e:	4628      	mov	r0, r5
    1240:	f007 f854 	bl	82ec <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1244:	4908      	ldr	r1, [pc, #32]	; (1268 <enable_logger+0x58>)
    1246:	4628      	mov	r0, r5
    1248:	f006 ff9e 	bl	8188 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    124c:	4620      	mov	r0, r4
    124e:	b009      	add	sp, #36	; 0x24
    1250:	bd30      	pop	{r4, r5, pc}
    1252:	bf00      	nop
    1254:	0000126d 	.word	0x0000126d
    1258:	20000718 	.word	0x20000718
    125c:	20000750 	.word	0x20000750
    1260:	20001f80 	.word	0x20001f80
    1264:	000014c1 	.word	0x000014c1
    1268:	0000de40 	.word	0x0000de40

0000126c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    126c:	4801      	ldr	r0, [pc, #4]	; (1274 <log_process_thread_timer_expiry_fn+0x8>)
    126e:	f007 b99d 	b.w	85ac <z_impl_k_sem_give>
    1272:	bf00      	nop
    1274:	20000300 	.word	0x20000300

00001278 <log_init>:
{
    1278:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    127a:	4b12      	ldr	r3, [pc, #72]	; (12c4 <log_init+0x4c>)
    127c:	f3bf 8f5b 	dmb	ish
    1280:	e853 5f00 	ldrex	r5, [r3]
    1284:	1c6a      	adds	r2, r5, #1
    1286:	e843 2100 	strex	r1, r2, [r3]
    128a:	2900      	cmp	r1, #0
    128c:	d1f8      	bne.n	1280 <log_init+0x8>
    128e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1292:	b92d      	cbnz	r5, 12a0 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1294:	4c0c      	ldr	r4, [pc, #48]	; (12c8 <log_init+0x50>)
    1296:	4e0d      	ldr	r6, [pc, #52]	; (12cc <log_init+0x54>)
    1298:	1b36      	subs	r6, r6, r4
    129a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    129c:	42b5      	cmp	r5, r6
    129e:	db00      	blt.n	12a2 <log_init+0x2a>
}
    12a0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    12a2:	7b23      	ldrb	r3, [r4, #12]
    12a4:	b153      	cbz	r3, 12bc <log_init+0x44>
			if (backend->api->init != NULL) {
    12a6:	6823      	ldr	r3, [r4, #0]
    12a8:	699b      	ldr	r3, [r3, #24]
    12aa:	b10b      	cbz	r3, 12b0 <log_init+0x38>
				backend->api->init(backend);
    12ac:	4620      	mov	r0, r4
    12ae:	4798      	blx	r3
			log_backend_enable(backend,
    12b0:	6863      	ldr	r3, [r4, #4]
    12b2:	2204      	movs	r2, #4
    12b4:	6819      	ldr	r1, [r3, #0]
    12b6:	4620      	mov	r0, r4
    12b8:	f000 fa38 	bl	172c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    12bc:	3501      	adds	r5, #1
    12be:	3410      	adds	r4, #16
    12c0:	e7ec      	b.n	129c <log_init+0x24>
    12c2:	bf00      	nop
    12c4:	20001150 	.word	0x20001150
    12c8:	0000cefc 	.word	0x0000cefc
    12cc:	0000cf1c 	.word	0x0000cf1c

000012d0 <z_log_notify_backend_enabled>:
{
    12d0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    12d2:	4c04      	ldr	r4, [pc, #16]	; (12e4 <z_log_notify_backend_enabled+0x14>)
    12d4:	7823      	ldrb	r3, [r4, #0]
    12d6:	b913      	cbnz	r3, 12de <z_log_notify_backend_enabled+0xe>
    12d8:	4803      	ldr	r0, [pc, #12]	; (12e8 <z_log_notify_backend_enabled+0x18>)
    12da:	f007 f967 	bl	85ac <z_impl_k_sem_give>
	backend_attached = true;
    12de:	2301      	movs	r3, #1
    12e0:	7023      	strb	r3, [r4, #0]
}
    12e2:	bd10      	pop	{r4, pc}
    12e4:	20001ae0 	.word	0x20001ae0
    12e8:	20000300 	.word	0x20000300

000012ec <z_log_dropped>:
    12ec:	4b0c      	ldr	r3, [pc, #48]	; (1320 <z_log_dropped+0x34>)
    12ee:	f3bf 8f5b 	dmb	ish
    12f2:	e853 2f00 	ldrex	r2, [r3]
    12f6:	3201      	adds	r2, #1
    12f8:	e843 2100 	strex	r1, r2, [r3]
    12fc:	2900      	cmp	r1, #0
    12fe:	d1f8      	bne.n	12f2 <z_log_dropped+0x6>
    1300:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    1304:	b158      	cbz	r0, 131e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1306:	f3bf 8f5b 	dmb	ish
    130a:	4b06      	ldr	r3, [pc, #24]	; (1324 <z_log_dropped+0x38>)
    130c:	e853 2f00 	ldrex	r2, [r3]
    1310:	3a01      	subs	r2, #1
    1312:	e843 2100 	strex	r1, r2, [r3]
    1316:	2900      	cmp	r1, #0
    1318:	d1f8      	bne.n	130c <z_log_dropped+0x20>
    131a:	f3bf 8f5b 	dmb	ish
}
    131e:	4770      	bx	lr
    1320:	2000114c 	.word	0x2000114c
    1324:	20001148 	.word	0x20001148

00001328 <z_log_dropped_read_and_clear>:
}
    1328:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    132a:	4b06      	ldr	r3, [pc, #24]	; (1344 <z_log_dropped_read_and_clear+0x1c>)
    132c:	f3bf 8f5b 	dmb	ish
    1330:	4602      	mov	r2, r0
    1332:	e853 0f00 	ldrex	r0, [r3]
    1336:	e843 2100 	strex	r1, r2, [r3]
    133a:	2900      	cmp	r1, #0
    133c:	d1f9      	bne.n	1332 <z_log_dropped_read_and_clear+0xa>
    133e:	f3bf 8f5b 	dmb	ish
    1342:	4770      	bx	lr
    1344:	2000114c 	.word	0x2000114c

00001348 <dropped_notify>:
{
    1348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    134a:	f7ff ffed 	bl	1328 <z_log_dropped_read_and_clear>
    134e:	4c0a      	ldr	r4, [pc, #40]	; (1378 <dropped_notify+0x30>)
    1350:	4d0a      	ldr	r5, [pc, #40]	; (137c <dropped_notify+0x34>)
    1352:	1b2d      	subs	r5, r5, r4
    1354:	4607      	mov	r7, r0
    1356:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1358:	2600      	movs	r6, #0
    135a:	42ae      	cmp	r6, r5
    135c:	db00      	blt.n	1360 <dropped_notify+0x18>
}
    135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1360:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1362:	795b      	ldrb	r3, [r3, #5]
    1364:	b12b      	cbz	r3, 1372 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    1366:	6823      	ldr	r3, [r4, #0]
    1368:	691b      	ldr	r3, [r3, #16]
    136a:	b113      	cbz	r3, 1372 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    136c:	4639      	mov	r1, r7
    136e:	4620      	mov	r0, r4
    1370:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1372:	3601      	adds	r6, #1
    1374:	3410      	adds	r4, #16
    1376:	e7f0      	b.n	135a <dropped_notify+0x12>
    1378:	0000cefc 	.word	0x0000cefc
    137c:	0000cf1c 	.word	0x0000cf1c

00001380 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1380:	4901      	ldr	r1, [pc, #4]	; (1388 <z_log_msg2_init+0x8>)
    1382:	4802      	ldr	r0, [pc, #8]	; (138c <z_log_msg2_init+0xc>)
    1384:	f008 bc11 	b.w	9baa <mpsc_pbuf_init>
    1388:	0000d0e0 	.word	0x0000d0e0
    138c:	20001154 	.word	0x20001154

00001390 <log_core_init>:
	panic_mode = false;
    1390:	4a09      	ldr	r2, [pc, #36]	; (13b8 <log_core_init+0x28>)
{
    1392:	b508      	push	{r3, lr}
	panic_mode = false;
    1394:	2300      	movs	r3, #0
    1396:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1398:	4a08      	ldr	r2, [pc, #32]	; (13bc <log_core_init+0x2c>)
    139a:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    139c:	4b08      	ldr	r3, [pc, #32]	; (13c0 <log_core_init+0x30>)
    139e:	4a09      	ldr	r2, [pc, #36]	; (13c4 <log_core_init+0x34>)
    13a0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    13a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    13a6:	f000 fbd1 	bl	1b4c <log_output_timestamp_freq_set>
		z_log_msg2_init();
    13aa:	f7ff ffe9 	bl	1380 <z_log_msg2_init>
}
    13ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
    13b2:	f000 b925 	b.w	1600 <z_log_runtime_filters_init>
    13b6:	bf00      	nop
    13b8:	20001ae1 	.word	0x20001ae1
    13bc:	2000114c 	.word	0x2000114c
    13c0:	20000004 	.word	0x20000004
    13c4:	0000a0b1 	.word	0x0000a0b1

000013c8 <z_log_msg2_alloc>:
{
    13c8:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    13ca:	2200      	movs	r2, #0
    13cc:	4801      	ldr	r0, [pc, #4]	; (13d4 <z_log_msg2_alloc+0xc>)
    13ce:	2300      	movs	r3, #0
    13d0:	f008 bc0a 	b.w	9be8 <mpsc_pbuf_alloc>
    13d4:	20001154 	.word	0x20001154

000013d8 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    13d8:	4801      	ldr	r0, [pc, #4]	; (13e0 <z_log_msg2_claim+0x8>)
    13da:	f008 bc98 	b.w	9d0e <mpsc_pbuf_claim>
    13de:	bf00      	nop
    13e0:	20001154 	.word	0x20001154

000013e4 <z_log_msg2_free>:
{
    13e4:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    13e6:	4801      	ldr	r0, [pc, #4]	; (13ec <z_log_msg2_free+0x8>)
    13e8:	f008 bcdd 	b.w	9da6 <mpsc_pbuf_free>
    13ec:	20001154 	.word	0x20001154

000013f0 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    13f0:	4801      	ldr	r0, [pc, #4]	; (13f8 <z_log_msg2_pending+0x8>)
    13f2:	f008 bd0c 	b.w	9e0e <mpsc_pbuf_is_pending>
    13f6:	bf00      	nop
    13f8:	20001154 	.word	0x20001154

000013fc <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    13fc:	4b2a      	ldr	r3, [pc, #168]	; (14a8 <z_impl_log_process+0xac>)
    13fe:	781b      	ldrb	r3, [r3, #0]
{
    1400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1404:	4606      	mov	r6, r0
	if (!backend_attached && !bypass) {
    1406:	b90b      	cbnz	r3, 140c <z_impl_log_process+0x10>
    1408:	2800      	cmp	r0, #0
    140a:	d04b      	beq.n	14a4 <z_impl_log_process+0xa8>
	msg = get_msg();
    140c:	f008 fe64 	bl	a0d8 <get_msg>
	if (msg.msg) {
    1410:	4605      	mov	r5, r0
    1412:	b118      	cbz	r0, 141c <z_impl_log_process+0x20>
		if (!bypass) {
    1414:	b16e      	cbz	r6, 1432 <z_impl_log_process+0x36>
		z_log_msg2_free(msg.msg2);
    1416:	4628      	mov	r0, r5
    1418:	f7ff ffe4 	bl	13e4 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    141c:	b92e      	cbnz	r6, 142a <z_impl_log_process+0x2e>
	return dropped_cnt > 0;
    141e:	4b23      	ldr	r3, [pc, #140]	; (14ac <z_impl_log_process+0xb0>)
	if (!bypass && z_log_dropped_pending()) {
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	2b00      	cmp	r3, #0
    1424:	dd01      	ble.n	142a <z_impl_log_process+0x2e>
		dropped_notify();
    1426:	f7ff ff8f 	bl	1348 <dropped_notify>
}
    142a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return z_log_msg2_pending();
    142e:	f7ff bfdf 	b.w	13f0 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1432:	4b1f      	ldr	r3, [pc, #124]	; (14b0 <z_impl_log_process+0xb4>)
    1434:	f3bf 8f5b 	dmb	ish
    1438:	e853 2f00 	ldrex	r2, [r3]
    143c:	3a01      	subs	r2, #1
    143e:	e843 2100 	strex	r1, r2, [r3]
    1442:	2900      	cmp	r1, #0
    1444:	d1f8      	bne.n	1438 <z_impl_log_process+0x3c>
    1446:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    144a:	4c1a      	ldr	r4, [pc, #104]	; (14b4 <z_impl_log_process+0xb8>)
    144c:	4f1a      	ldr	r7, [pc, #104]	; (14b8 <z_impl_log_process+0xbc>)
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    144e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 14bc <z_impl_log_process+0xc0>
    1452:	1b3f      	subs	r7, r7, r4
    1454:	113f      	asrs	r7, r7, #4
    1456:	46b0      	mov	r8, r6
		for (int i = 0; i < log_backend_count_get(); i++) {
    1458:	45b8      	cmp	r8, r7
    145a:	dadc      	bge.n	1416 <z_impl_log_process+0x1a>
	return backend->cb->active;
    145c:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    145e:	795b      	ldrb	r3, [r3, #5]
    1460:	b1cb      	cbz	r3, 1496 <z_impl_log_process+0x9a>
	va_end(ap);
}

static inline bool z_log_item_is_msg(const union log_msg2_generic *msg)
{
	return msg->generic.type == Z_LOG_MSG2_LOG;
    1462:	7829      	ldrb	r1, [r5, #0]
	if (IS_ENABLED(CONFIG_LOG2) && !z_log_item_is_msg(msg.msg2)) {
    1464:	074b      	lsls	r3, r1, #29
    1466:	d411      	bmi.n	148c <z_impl_log_process+0x90>
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1468:	f8b5 9000 	ldrh.w	r9, [r5]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    146c:	686a      	ldr	r2, [r5, #4]
	return msg->hdr.desc.level;
    146e:	f3c9 1982 	ubfx	r9, r9, #6, #3
	return msg->hdr.desc.domain;
    1472:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		source_id = source ? log_dynamic_source_id(source) : -1;
    1476:	b192      	cbz	r2, 149e <z_impl_log_process+0xa2>
    1478:	eba2 020a 	sub.w	r2, r2, sl
    147c:	f342 028f 	sbfx	r2, r2, #2, #16
	backend_level = log_filter_get(backend, domain_id,
    1480:	2301      	movs	r3, #1
    1482:	4620      	mov	r0, r4
    1484:	f000 f968 	bl	1758 <log_filter_get>
			if (log_backend_is_active(backend) &&
    1488:	4548      	cmp	r0, r9
    148a:	d304      	bcc.n	1496 <z_impl_log_process+0x9a>
	backend->api->process(backend, msg);
    148c:	6823      	ldr	r3, [r4, #0]
    148e:	4629      	mov	r1, r5
    1490:	681b      	ldr	r3, [r3, #0]
    1492:	4620      	mov	r0, r4
    1494:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1496:	f108 0801 	add.w	r8, r8, #1
    149a:	3410      	adds	r4, #16
    149c:	e7dc      	b.n	1458 <z_impl_log_process+0x5c>
		source_id = source ? log_dynamic_source_id(source) : -1;
    149e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    14a2:	e7ed      	b.n	1480 <z_impl_log_process+0x84>
}
    14a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    14a8:	20001ae0 	.word	0x20001ae0
    14ac:	2000114c 	.word	0x2000114c
    14b0:	20001148 	.word	0x20001148
    14b4:	0000cefc 	.word	0x0000cefc
    14b8:	0000cf1c 	.word	0x0000cf1c
    14bc:	2000025c 	.word	0x2000025c

000014c0 <log_process_thread_func>:
{
    14c0:	b510      	push	{r4, lr}
	log_init();
    14c2:	f7ff fed9 	bl	1278 <log_init>
	return z_impl_z_current_get();
    14c6:	f007 fcfd 	bl	8ec4 <z_impl_z_current_get>
	proc_tid = process_tid;
    14ca:	4b0c      	ldr	r3, [pc, #48]	; (14fc <log_process_thread_func+0x3c>)
    14cc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    14ce:	b130      	cbz	r0, 14de <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    14d0:	4b0b      	ldr	r3, [pc, #44]	; (1500 <log_process_thread_func+0x40>)
	    process_tid &&
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	2b09      	cmp	r3, #9
    14d6:	dd02      	ble.n	14de <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    14d8:	480a      	ldr	r0, [pc, #40]	; (1504 <log_process_thread_func+0x44>)
    14da:	f007 f867 	bl	85ac <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    14de:	4c09      	ldr	r4, [pc, #36]	; (1504 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    14e0:	2000      	movs	r0, #0
    14e2:	f7ff ff8b 	bl	13fc <z_impl_log_process>
		if (log_process(false) == false) {
    14e6:	2800      	cmp	r0, #0
    14e8:	d1fa      	bne.n	14e0 <log_process_thread_func+0x20>
    14ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    14ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    14f2:	4620      	mov	r0, r4
    14f4:	f007 f880 	bl	85f8 <z_impl_k_sem_take>
    14f8:	e7f2      	b.n	14e0 <log_process_thread_func+0x20>
    14fa:	bf00      	nop
    14fc:	20001190 	.word	0x20001190
    1500:	20001148 	.word	0x20001148
    1504:	20000300 	.word	0x20000300

00001508 <z_log_msg_post_finalize>:
{
    1508:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    150a:	4b1d      	ldr	r3, [pc, #116]	; (1580 <z_log_msg_post_finalize+0x78>)
    150c:	f3bf 8f5b 	dmb	ish
    1510:	e853 2f00 	ldrex	r2, [r3]
    1514:	1c51      	adds	r1, r2, #1
    1516:	e843 1000 	strex	r0, r1, [r3]
    151a:	2800      	cmp	r0, #0
    151c:	d1f8      	bne.n	1510 <z_log_msg_post_finalize+0x8>
    151e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1522:	4b18      	ldr	r3, [pc, #96]	; (1584 <z_log_msg_post_finalize+0x7c>)
    1524:	781b      	ldrb	r3, [r3, #0]
    1526:	b183      	cbz	r3, 154a <z_log_msg_post_finalize+0x42>
    1528:	f04f 0320 	mov.w	r3, #32
    152c:	f3ef 8411 	mrs	r4, BASEPRI
    1530:	f383 8812 	msr	BASEPRI_MAX, r3
    1534:	f3bf 8f6f 	isb	sy
    1538:	2000      	movs	r0, #0
    153a:	f7ff ff5f 	bl	13fc <z_impl_log_process>
	__asm__ volatile(
    153e:	f384 8811 	msr	BASEPRI, r4
    1542:	f3bf 8f6f 	isb	sy
}
    1546:	b002      	add	sp, #8
    1548:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    154a:	4b0f      	ldr	r3, [pc, #60]	; (1588 <z_log_msg_post_finalize+0x80>)
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	2b00      	cmp	r3, #0
    1550:	d0f9      	beq.n	1546 <z_log_msg_post_finalize+0x3e>
    1552:	b952      	cbnz	r2, 156a <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    1554:	2200      	movs	r2, #0
    1556:	2300      	movs	r3, #0
    1558:	e9cd 2300 	strd	r2, r3, [sp]
    155c:	480b      	ldr	r0, [pc, #44]	; (158c <z_log_msg_post_finalize+0x84>)
    155e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1562:	2300      	movs	r3, #0
    1564:	f007 fec6 	bl	92f4 <z_impl_k_timer_start>
    1568:	e7ed      	b.n	1546 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    156a:	2a0a      	cmp	r2, #10
    156c:	d1eb      	bne.n	1546 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    156e:	4807      	ldr	r0, [pc, #28]	; (158c <z_log_msg_post_finalize+0x84>)
    1570:	f00b f97f 	bl	c872 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1574:	4806      	ldr	r0, [pc, #24]	; (1590 <z_log_msg_post_finalize+0x88>)
}
    1576:	b002      	add	sp, #8
    1578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    157c:	f007 b816 	b.w	85ac <z_impl_k_sem_give>
    1580:	20001148 	.word	0x20001148
    1584:	20001ae1 	.word	0x20001ae1
    1588:	20001190 	.word	0x20001190
    158c:	20000718 	.word	0x20000718
    1590:	20000300 	.word	0x20000300

00001594 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1594:	4b06      	ldr	r3, [pc, #24]	; (15b0 <z_log_msg2_commit+0x1c>)
{
    1596:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1598:	681b      	ldr	r3, [r3, #0]
{
    159a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    159c:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    159e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    15a0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    15a2:	4804      	ldr	r0, [pc, #16]	; (15b4 <z_log_msg2_commit+0x20>)
    15a4:	f008 fb96 	bl	9cd4 <mpsc_pbuf_commit>
}
    15a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    15ac:	f7ff bfac 	b.w	1508 <z_log_msg_post_finalize>
    15b0:	20000004 	.word	0x20000004
    15b4:	20001154 	.word	0x20001154

000015b8 <z_impl_log_panic>:
{
    15b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    15ba:	4f0e      	ldr	r7, [pc, #56]	; (15f4 <z_impl_log_panic+0x3c>)
    15bc:	783d      	ldrb	r5, [r7, #0]
    15be:	b975      	cbnz	r5, 15de <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    15c0:	4c0d      	ldr	r4, [pc, #52]	; (15f8 <z_impl_log_panic+0x40>)
    15c2:	4e0e      	ldr	r6, [pc, #56]	; (15fc <z_impl_log_panic+0x44>)
	log_init();
    15c4:	f7ff fe58 	bl	1278 <log_init>
    15c8:	1b36      	subs	r6, r6, r4
    15ca:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    15cc:	42b5      	cmp	r5, r6
    15ce:	db07      	blt.n	15e0 <z_impl_log_panic+0x28>
    15d0:	2000      	movs	r0, #0
    15d2:	f7ff ff13 	bl	13fc <z_impl_log_process>
		while (log_process(false) == true) {
    15d6:	2800      	cmp	r0, #0
    15d8:	d1fa      	bne.n	15d0 <z_impl_log_panic+0x18>
	panic_mode = true;
    15da:	2301      	movs	r3, #1
    15dc:	703b      	strb	r3, [r7, #0]
}
    15de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    15e0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    15e2:	795b      	ldrb	r3, [r3, #5]
    15e4:	b11b      	cbz	r3, 15ee <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    15e6:	6823      	ldr	r3, [r4, #0]
    15e8:	4620      	mov	r0, r4
    15ea:	695b      	ldr	r3, [r3, #20]
    15ec:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    15ee:	3501      	adds	r5, #1
    15f0:	3410      	adds	r4, #16
    15f2:	e7eb      	b.n	15cc <z_impl_log_panic+0x14>
    15f4:	20001ae1 	.word	0x20001ae1
    15f8:	0000cefc 	.word	0x0000cefc
    15fc:	0000cf1c 	.word	0x0000cf1c

00001600 <z_log_runtime_filters_init>:
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1600:	480b      	ldr	r0, [pc, #44]	; (1630 <z_log_runtime_filters_init+0x30>)
    1602:	4b0c      	ldr	r3, [pc, #48]	; (1634 <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
    1604:	b530      	push	{r4, r5, lr}
    1606:	1a1b      	subs	r3, r3, r0
    1608:	4c0b      	ldr	r4, [pc, #44]	; (1638 <z_log_runtime_filters_init+0x38>)
    160a:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
    160c:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
    160e:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    1610:	4299      	cmp	r1, r3
    1612:	d100      	bne.n	1616 <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
    1614:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
    1616:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    161a:	6825      	ldr	r5, [r4, #0]
    161c:	f002 0207 	and.w	r2, r2, #7
    1620:	f025 0507 	bic.w	r5, r5, #7
    1624:	432a      	orrs	r2, r5
    1626:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
    162a:	3101      	adds	r1, #1
    162c:	e7f0      	b.n	1610 <z_log_runtime_filters_init+0x10>
    162e:	bf00      	nop
    1630:	0000ce74 	.word	0x0000ce74
    1634:	0000cefc 	.word	0x0000cefc
    1638:	2000025c 	.word	0x2000025c

0000163c <log_source_name_get>:
    163c:	4a04      	ldr	r2, [pc, #16]	; (1650 <log_source_name_get+0x14>)
    163e:	4b05      	ldr	r3, [pc, #20]	; (1654 <log_source_name_get+0x18>)
    1640:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1642:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1646:	bf34      	ite	cc
    1648:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    164c:	2000      	movcs	r0, #0
}
    164e:	4770      	bx	lr
    1650:	0000ce74 	.word	0x0000ce74
    1654:	0000cefc 	.word	0x0000cefc

00001658 <z_impl_log_filter_set>:
}

uint32_t z_impl_log_filter_set(struct log_backend const *const backend,
			       uint32_t domain_id, int16_t source_id,
			       uint32_t level)
{
    1658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    165c:	4689      	mov	r9, r1
    165e:	4616      	mov	r6, r2
    1660:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		uint32_t new_aggr_filter;

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		if (backend == NULL) {
    1662:	4604      	mov	r4, r0
    1664:	b9b8      	cbnz	r0, 1696 <z_impl_log_filter_set+0x3e>
	return __log_backends_end - __log_backends_start;
    1666:	f8df a084 	ldr.w	sl, [pc, #132]	; 16ec <z_impl_log_filter_set+0x94>
    166a:	4f21      	ldr	r7, [pc, #132]	; (16f0 <z_impl_log_filter_set+0x98>)
    166c:	eba7 070a 	sub.w	r7, r7, sl
    1670:	113f      	asrs	r7, r7, #4
			struct log_backend const *iter_backend;
			uint32_t max = 0U;
    1672:	4605      	mov	r5, r0
			uint32_t current;

			for (int i = 0; i < log_backend_count_get(); i++) {
    1674:	42bc      	cmp	r4, r7
    1676:	db02      	blt.n	167e <z_impl_log_filter_set+0x26>
					    new_aggr_filter);
		}
	}

	return level;
}
    1678:	4628      	mov	r0, r5
    167a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
    167e:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    1682:	4643      	mov	r3, r8
    1684:	4632      	mov	r2, r6
    1686:	4649      	mov	r1, r9
    1688:	f7ff ffe6 	bl	1658 <z_impl_log_filter_set>
				max = MAX(current, max);
    168c:	4285      	cmp	r5, r0
    168e:	bf38      	it	cc
    1690:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    1692:	3401      	adds	r4, #1
    1694:	e7ee      	b.n	1674 <z_impl_log_filter_set+0x1c>
	return __log_const_start[source_id].level;
    1696:	4b17      	ldr	r3, [pc, #92]	; (16f4 <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    1698:	4c17      	ldr	r4, [pc, #92]	; (16f8 <z_impl_log_filter_set+0xa0>)
	return __log_const_start[source_id].level;
    169a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3

		return LOG_FILTER_SLOT_GET(filters,
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
    169e:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    16a0:	6843      	ldr	r3, [r0, #4]
			LOG_FILTER_SLOT_SET(filters,
    16a2:	791a      	ldrb	r2, [r3, #4]
    16a4:	2307      	movs	r3, #7
    16a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    16aa:	fa03 f102 	lsl.w	r1, r3, r2
			level = MIN(level, max);
    16ae:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    16b0:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
			level = MIN(level, max);
    16b4:	bf28      	it	cs
    16b6:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    16b8:	ea23 0301 	bic.w	r3, r3, r1
    16bc:	f005 0107 	and.w	r1, r5, #7
    16c0:	fa01 f202 	lsl.w	r2, r1, r2
    16c4:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    16c6:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
    16c8:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    16ca:	fa23 f002 	lsr.w	r0, r3, r2
    16ce:	f000 0007 	and.w	r0, r0, #7
    16d2:	4281      	cmp	r1, r0
    16d4:	f102 0203 	add.w	r2, r2, #3
    16d8:	bf38      	it	cc
    16da:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    16dc:	2a1e      	cmp	r2, #30
    16de:	d1f4      	bne.n	16ca <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
    16e0:	f023 0307 	bic.w	r3, r3, #7
    16e4:	430b      	orrs	r3, r1
    16e6:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
	return level;
    16ea:	e7c5      	b.n	1678 <z_impl_log_filter_set+0x20>
    16ec:	0000cefc 	.word	0x0000cefc
    16f0:	0000cf1c 	.word	0x0000cf1c
    16f4:	0000ce74 	.word	0x0000ce74
    16f8:	2000025c 	.word	0x2000025c

000016fc <backend_filter_set>:
{
    16fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16fe:	4c09      	ldr	r4, [pc, #36]	; (1724 <backend_filter_set+0x28>)
    1700:	4b09      	ldr	r3, [pc, #36]	; (1728 <backend_filter_set+0x2c>)
    1702:	1ae4      	subs	r4, r4, r3
    1704:	4606      	mov	r6, r0
    1706:	460f      	mov	r7, r1
    1708:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
    170a:	2500      	movs	r5, #0
    170c:	42a5      	cmp	r5, r4
    170e:	d100      	bne.n	1712 <backend_filter_set+0x16>
}
    1710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1712:	2100      	movs	r1, #0
    1714:	b22a      	sxth	r2, r5
    1716:	463b      	mov	r3, r7
    1718:	4630      	mov	r0, r6
    171a:	f7ff ff9d 	bl	1658 <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
    171e:	3501      	adds	r5, #1
    1720:	e7f4      	b.n	170c <backend_filter_set+0x10>
    1722:	bf00      	nop
    1724:	0000cefc 	.word	0x0000cefc
    1728:	0000ce74 	.word	0x0000ce74

0000172c <log_backend_enable>:
	id += backend - log_backend_get(0);
    172c:	4b09      	ldr	r3, [pc, #36]	; (1754 <log_backend_enable+0x28>)
    172e:	1ac3      	subs	r3, r0, r3
{
    1730:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    1732:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    1734:	6846      	ldr	r6, [r0, #4]
{
    1736:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
    1738:	3301      	adds	r3, #1
{
    173a:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
    173c:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
    173e:	4611      	mov	r1, r2
    1740:	f7ff ffdc 	bl	16fc <backend_filter_set>
	backend->cb->ctx = ctx;
    1744:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
    1746:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    1748:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
    174a:	715a      	strb	r2, [r3, #5]
}
    174c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    1750:	f7ff bdbe 	b.w	12d0 <z_log_notify_backend_enabled>
    1754:	0000cefc 	.word	0x0000cefc

00001758 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    1758:	b163      	cbz	r3, 1774 <log_filter_get+0x1c>
		if (source_id < 0) {
    175a:	2a00      	cmp	r2, #0
    175c:	db0f      	blt.n	177e <log_filter_get+0x26>
	return backend->cb->id;
    175e:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    1760:	4908      	ldr	r1, [pc, #32]	; (1784 <log_filter_get+0x2c>)
    1762:	7918      	ldrb	r0, [r3, #4]
    1764:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1768:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    176c:	40d8      	lsrs	r0, r3
    176e:	f000 0007 	and.w	r0, r0, #7
    1772:	4770      	bx	lr
	return __log_const_start[source_id].level;
    1774:	4b04      	ldr	r3, [pc, #16]	; (1788 <log_filter_get+0x30>)
    1776:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
    177a:	7910      	ldrb	r0, [r2, #4]
    177c:	4770      	bx	lr
			return LOG_LEVEL_DBG;
    177e:	2004      	movs	r0, #4
}
    1780:	4770      	bx	lr
    1782:	bf00      	nop
    1784:	2000025c 	.word	0x2000025c
    1788:	0000ce74 	.word	0x0000ce74

0000178c <log_msg_mem_get_free>:
 *
 * @return Number of unallocated memory blocks.
 */
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
	return slab->num_blocks - slab->num_used;
    178c:	4b02      	ldr	r3, [pc, #8]	; (1798 <log_msg_mem_get_free+0xc>)
    178e:	6898      	ldr	r0, [r3, #8]
    1790:	699b      	ldr	r3, [r3, #24]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
    1792:	1ac0      	subs	r0, r0, r3
    1794:	4770      	bx	lr
    1796:	bf00      	nop
    1798:	20001194 	.word	0x20001194

0000179c <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
    179c:	4b01      	ldr	r3, [pc, #4]	; (17a4 <log_msg_mem_get_used+0x8>)
    179e:	6998      	ldr	r0, [r3, #24]
    17a0:	4770      	bx	lr
    17a2:	bf00      	nop
    17a4:	20001194 	.word	0x20001194

000017a8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    17a8:	b40e      	push	{r1, r2, r3}
    17aa:	b503      	push	{r0, r1, lr}
    17ac:	ab03      	add	r3, sp, #12
    17ae:	4601      	mov	r1, r0
    17b0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    17b4:	4804      	ldr	r0, [pc, #16]	; (17c8 <print_formatted+0x20>)
	va_start(args, fmt);
    17b6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    17b8:	f7ff f968 	bl	a8c <cbvprintf>
	va_end(args);

	return length;
}
    17bc:	b002      	add	sp, #8
    17be:	f85d eb04 	ldr.w	lr, [sp], #4
    17c2:	b003      	add	sp, #12
    17c4:	4770      	bx	lr
    17c6:	bf00      	nop
    17c8:	0000a123 	.word	0x0000a123

000017cc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    17cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17d0:	461d      	mov	r5, r3
    17d2:	9b08      	ldr	r3, [sp, #32]
    17d4:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    17d6:	06da      	lsls	r2, r3, #27
{
    17d8:	4604      	mov	r4, r0
    17da:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    17dc:	d405      	bmi.n	17ea <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    17de:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    17e0:	bf4c      	ite	mi
    17e2:	492a      	ldrmi	r1, [pc, #168]	; (188c <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    17e4:	492a      	ldrpl	r1, [pc, #168]	; (1890 <hexdump_line_print+0xc4>)
    17e6:	f7ff ffdf 	bl	17a8 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    17ea:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1894 <hexdump_line_print+0xc8>
{
    17ee:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    17f2:	45a8      	cmp	r8, r5
    17f4:	db2a      	blt.n	184c <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    17f6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1898 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    17fa:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 189c <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    17fe:	f8df a094 	ldr.w	sl, [pc, #148]	; 1894 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1802:	2500      	movs	r5, #0
		if (i < length) {
    1804:	42bd      	cmp	r5, r7
    1806:	d22f      	bcs.n	1868 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1808:	5d72      	ldrb	r2, [r6, r5]
    180a:	4649      	mov	r1, r9
    180c:	4620      	mov	r0, r4
    180e:	f7ff ffcb 	bl	17a8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1812:	3501      	adds	r5, #1
    1814:	2d10      	cmp	r5, #16
    1816:	d120      	bne.n	185a <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    1818:	4921      	ldr	r1, [pc, #132]	; (18a0 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    181a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1894 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    181e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 18a4 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    1822:	4620      	mov	r0, r4
    1824:	f7ff ffc0 	bl	17a8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1828:	2500      	movs	r5, #0
		if (i < length) {
    182a:	42af      	cmp	r7, r5
    182c:	d928      	bls.n	1880 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    182e:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1830:	f1a2 0320 	sub.w	r3, r2, #32
    1834:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    1836:	bf28      	it	cs
    1838:	222e      	movcs	r2, #46	; 0x2e
    183a:	4649      	mov	r1, r9
    183c:	4620      	mov	r0, r4
    183e:	f7ff ffb3 	bl	17a8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1842:	3501      	adds	r5, #1
    1844:	2d10      	cmp	r5, #16
    1846:	d114      	bne.n	1872 <hexdump_line_print+0xa6>
		}
	}
}
    1848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    184c:	4649      	mov	r1, r9
    184e:	4620      	mov	r0, r4
    1850:	f7ff ffaa 	bl	17a8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1854:	f108 0801 	add.w	r8, r8, #1
    1858:	e7cb      	b.n	17f2 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    185a:	076a      	lsls	r2, r5, #29
    185c:	d1d2      	bne.n	1804 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    185e:	4651      	mov	r1, sl
    1860:	4620      	mov	r0, r4
    1862:	f7ff ffa1 	bl	17a8 <print_formatted>
    1866:	e7cd      	b.n	1804 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1868:	4641      	mov	r1, r8
    186a:	4620      	mov	r0, r4
    186c:	f7ff ff9c 	bl	17a8 <print_formatted>
    1870:	e7cf      	b.n	1812 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1872:	076b      	lsls	r3, r5, #29
    1874:	d1d9      	bne.n	182a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1876:	4641      	mov	r1, r8
    1878:	4620      	mov	r0, r4
    187a:	f7ff ff95 	bl	17a8 <print_formatted>
    187e:	e7d4      	b.n	182a <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1880:	4641      	mov	r1, r8
    1882:	4620      	mov	r0, r4
    1884:	f7ff ff90 	bl	17a8 <print_formatted>
    1888:	e7db      	b.n	1842 <hexdump_line_print+0x76>
    188a:	bf00      	nop
    188c:	0000dff1 	.word	0x0000dff1
    1890:	0000dbdd 	.word	0x0000dbdd
    1894:	0000dac2 	.word	0x0000dac2
    1898:	0000dac0 	.word	0x0000dac0
    189c:	0000daba 	.word	0x0000daba
    18a0:	0000dac4 	.word	0x0000dac4
    18a4:	0000e683 	.word	0x0000e683

000018a8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    18a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18ac:	b087      	sub	sp, #28
    18ae:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    18b0:	f001 0301 	and.w	r3, r1, #1
{
    18b4:	9205      	str	r2, [sp, #20]
    18b6:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    18ba:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    18be:	9304      	str	r3, [sp, #16]
{
    18c0:	4607      	mov	r7, r0
    18c2:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    18c4:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    18c8:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    18cc:	f008 fc08 	bl	a0e0 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    18d0:	4602      	mov	r2, r0
    18d2:	2800      	cmp	r0, #0
    18d4:	d044      	beq.n	1960 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    18d6:	493a      	ldr	r1, [pc, #232]	; (19c0 <prefix_print+0x118>)
    18d8:	4638      	mov	r0, r7
    18da:	f7ff ff65 	bl	17a8 <print_formatted>
    18de:	4605      	mov	r5, r0
	}

	if (stamp) {
    18e0:	f1bb 0f00 	cmp.w	fp, #0
    18e4:	d008      	beq.n	18f8 <prefix_print+0x50>
	if (!format) {
    18e6:	f018 0f44 	tst.w	r8, #68	; 0x44
    18ea:	d13b      	bne.n	1964 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    18ec:	4935      	ldr	r1, [pc, #212]	; (19c4 <prefix_print+0x11c>)
    18ee:	4622      	mov	r2, r4
    18f0:	4638      	mov	r0, r7
    18f2:	f7ff ff59 	bl	17a8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    18f6:	4405      	add	r5, r0
	if (color) {
    18f8:	9b04      	ldr	r3, [sp, #16]
    18fa:	b153      	cbz	r3, 1912 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    18fc:	4b32      	ldr	r3, [pc, #200]	; (19c8 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    18fe:	4933      	ldr	r1, [pc, #204]	; (19cc <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1900:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1904:	4b32      	ldr	r3, [pc, #200]	; (19d0 <prefix_print+0x128>)
    1906:	4638      	mov	r0, r7
    1908:	2a00      	cmp	r2, #0
    190a:	bf08      	it	eq
    190c:	461a      	moveq	r2, r3
    190e:	f7ff ff4b 	bl	17a8 <print_formatted>
	if (level_on) {
    1912:	b13e      	cbz	r6, 1924 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1914:	4b2f      	ldr	r3, [pc, #188]	; (19d4 <prefix_print+0x12c>)
    1916:	4930      	ldr	r1, [pc, #192]	; (19d8 <prefix_print+0x130>)
    1918:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    191c:	4638      	mov	r0, r7
    191e:	f7ff ff43 	bl	17a8 <print_formatted>
    1922:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1924:	f1ba 0f00 	cmp.w	sl, #0
    1928:	db16      	blt.n	1958 <prefix_print+0xb0>
		total += print_formatted(output,
    192a:	9b05      	ldr	r3, [sp, #20]
    192c:	2b00      	cmp	r3, #0
    192e:	d045      	beq.n	19bc <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1930:	2301      	movs	r3, #1
    1932:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    1936:	4b29      	ldr	r3, [pc, #164]	; (19dc <prefix_print+0x134>)
    1938:	4c29      	ldr	r4, [pc, #164]	; (19e0 <prefix_print+0x138>)
    193a:	f019 0f10 	tst.w	r9, #16
    193e:	bf18      	it	ne
    1940:	461c      	movne	r4, r3
    1942:	4651      	mov	r1, sl
    1944:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1948:	f7ff fe78 	bl	163c <log_source_name_get>
    194c:	4621      	mov	r1, r4
    194e:	4602      	mov	r2, r0
    1950:	4638      	mov	r0, r7
    1952:	f7ff ff29 	bl	17a8 <print_formatted>
    1956:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1958:	1970      	adds	r0, r6, r5
    195a:	b007      	add	sp, #28
    195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1960:	4605      	mov	r5, r0
    1962:	e7bd      	b.n	18e0 <prefix_print+0x38>
	} else if (freq != 0U) {
    1964:	4b1f      	ldr	r3, [pc, #124]	; (19e4 <prefix_print+0x13c>)
    1966:	6818      	ldr	r0, [r3, #0]
    1968:	2800      	cmp	r0, #0
    196a:	d0c4      	beq.n	18f6 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    196c:	4b1e      	ldr	r3, [pc, #120]	; (19e8 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    196e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1972:	681b      	ldr	r3, [r3, #0]
    1974:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1978:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    197c:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1980:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1984:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1988:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    198c:	fbb3 f2f1 	udiv	r2, r3, r1
    1990:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1994:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1998:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    199c:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    19a0:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    19a4:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    19a8:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    19aa:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    19ae:	490f      	ldr	r1, [pc, #60]	; (19ec <prefix_print+0x144>)
    19b0:	e9cd e001 	strd	lr, r0, [sp, #4]
    19b4:	4638      	mov	r0, r7
    19b6:	f7ff fef7 	bl	17a8 <print_formatted>
    19ba:	e79c      	b.n	18f6 <prefix_print+0x4e>
		total += print_formatted(output,
    19bc:	4c08      	ldr	r4, [pc, #32]	; (19e0 <prefix_print+0x138>)
    19be:	e7c0      	b.n	1942 <prefix_print+0x9a>
    19c0:	0000dad4 	.word	0x0000dad4
    19c4:	0000dad8 	.word	0x0000dad8
    19c8:	0000d0f4 	.word	0x0000d0f4
    19cc:	0000e110 	.word	0x0000e110
    19d0:	0000dac6 	.word	0x0000dac6
    19d4:	0000d108 	.word	0x0000d108
    19d8:	0000dafd 	.word	0x0000dafd
    19dc:	0000dad0 	.word	0x0000dad0
    19e0:	0000dacb 	.word	0x0000dacb
    19e4:	200011b0 	.word	0x200011b0
    19e8:	200011b4 	.word	0x200011b4
    19ec:	0000dae1 	.word	0x0000dae1

000019f0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    19f0:	b538      	push	{r3, r4, r5, lr}
    19f2:	460c      	mov	r4, r1
	if (color) {
    19f4:	07e1      	lsls	r1, r4, #31
{
    19f6:	4605      	mov	r5, r0
	if (color) {
    19f8:	d503      	bpl.n	1a02 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    19fa:	4a08      	ldr	r2, [pc, #32]	; (1a1c <postfix_print+0x2c>)
    19fc:	4908      	ldr	r1, [pc, #32]	; (1a20 <postfix_print+0x30>)
    19fe:	f7ff fed3 	bl	17a8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a02:	06e2      	lsls	r2, r4, #27
    1a04:	d408      	bmi.n	1a18 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1a06:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1a08:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1a0a:	bf4c      	ite	mi
    1a0c:	4905      	ldrmi	r1, [pc, #20]	; (1a24 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1a0e:	4906      	ldrpl	r1, [pc, #24]	; (1a28 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1a14:	f7ff bec8 	b.w	17a8 <print_formatted>
}
    1a18:	bd38      	pop	{r3, r4, r5, pc}
    1a1a:	bf00      	nop
    1a1c:	0000dac6 	.word	0x0000dac6
    1a20:	0000e110 	.word	0x0000e110
    1a24:	0000dff1 	.word	0x0000dff1
    1a28:	0000dbdd 	.word	0x0000dbdd

00001a2c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.desc.level;
    1a30:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    1a32:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1a36:	4606      	mov	r6, r0
    1a38:	460c      	mov	r4, r1
    1a3a:	4690      	mov	r8, r2
    1a3c:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1a40:	d04d      	beq.n	1ade <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1a42:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    1a44:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1a46:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	d044      	beq.n	1ad8 <log_output_msg2_process+0xac>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
    1a4e:	4925      	ldr	r1, [pc, #148]	; (1ae4 <log_output_msg2_process+0xb8>)
    1a50:	1a5b      	subs	r3, r3, r1
    1a52:	f343 038f 	sbfx	r3, r3, #2, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1a56:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1a5a:	f8cd 9000 	str.w	r9, [sp]
    1a5e:	68a3      	ldr	r3, [r4, #8]
    1a60:	2200      	movs	r2, #0
    1a62:	4641      	mov	r1, r8
    1a64:	4630      	mov	r0, r6
    1a66:	f7ff ff1f 	bl	18a8 <prefix_print>
    1a6a:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1a6c:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1a6e:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1a72:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1a76:	b153      	cbz	r3, 1a8e <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1a78:	4f1b      	ldr	r7, [pc, #108]	; (1ae8 <log_output_msg2_process+0xbc>)
    1a7a:	481c      	ldr	r0, [pc, #112]	; (1aec <log_output_msg2_process+0xc0>)
    1a7c:	491c      	ldr	r1, [pc, #112]	; (1af0 <log_output_msg2_process+0xc4>)
    1a7e:	462b      	mov	r3, r5
    1a80:	4632      	mov	r2, r6
    1a82:	f1b9 0f00 	cmp.w	r9, #0
    1a86:	bf08      	it	eq
    1a88:	4638      	moveq	r0, r7
    1a8a:	f007 fd3e 	bl	950a <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1a8e:	8867      	ldrh	r7, [r4, #2]
    1a90:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1a94:	b197      	cbz	r7, 1abc <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1a96:	6823      	ldr	r3, [r4, #0]
    1a98:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1a9c:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1a9e:	2f10      	cmp	r7, #16
    1aa0:	463c      	mov	r4, r7
    1aa2:	bf28      	it	cs
    1aa4:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1aa6:	4629      	mov	r1, r5
    1aa8:	f8cd 8000 	str.w	r8, [sp]
    1aac:	4653      	mov	r3, sl
    1aae:	4622      	mov	r2, r4
    1ab0:	4630      	mov	r0, r6
    1ab2:	f7ff fe8b 	bl	17cc <hexdump_line_print>
	} while (len);
    1ab6:	1b3f      	subs	r7, r7, r4
		data += length;
    1ab8:	4425      	add	r5, r4
	} while (len);
    1aba:	d1f0      	bne.n	1a9e <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1abc:	f1b9 0f00 	cmp.w	r9, #0
    1ac0:	d004      	beq.n	1acc <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1ac2:	464a      	mov	r2, r9
    1ac4:	4641      	mov	r1, r8
    1ac6:	4630      	mov	r0, r6
    1ac8:	f7ff ff92 	bl	19f0 <postfix_print>
	}

	log_output_flush(output);
    1acc:	4630      	mov	r0, r6
}
    1ace:	b004      	add	sp, #16
    1ad0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1ad4:	f008 bb18 	b.w	a108 <log_output_flush>
		int16_t source_id = source ?
    1ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1adc:	e7bb      	b.n	1a56 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1ade:	46ca      	mov	sl, r9
    1ae0:	e7c4      	b.n	1a6c <log_output_msg2_process+0x40>
    1ae2:	bf00      	nop
    1ae4:	2000025c 	.word	0x2000025c
    1ae8:	0000a159 	.word	0x0000a159
    1aec:	0000a123 	.word	0x0000a123
    1af0:	00000a8d 	.word	0x00000a8d

00001af4 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1af4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1af6:	f242 730f 	movw	r3, #9999	; 0x270f
    1afa:	428b      	cmp	r3, r1
    1afc:	bf28      	it	cs
    1afe:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1b00:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1b02:	4a0f      	ldr	r2, [pc, #60]	; (1b40 <log_output_dropped_process+0x4c>)
{
    1b04:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1b06:	2105      	movs	r1, #5
    1b08:	4668      	mov	r0, sp
    1b0a:	f007 fd78 	bl	95fe <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1b0e:	6863      	ldr	r3, [r4, #4]
    1b10:	490c      	ldr	r1, [pc, #48]	; (1b44 <log_output_dropped_process+0x50>)
    1b12:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1b14:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1b16:	2204      	movs	r2, #4
    1b18:	4628      	mov	r0, r5
    1b1a:	f008 fae8 	bl	a0ee <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1b1e:	6863      	ldr	r3, [r4, #4]
    1b20:	4632      	mov	r2, r6
    1b22:	4669      	mov	r1, sp
    1b24:	4628      	mov	r0, r5
    1b26:	685b      	ldr	r3, [r3, #4]
    1b28:	f008 fae1 	bl	a0ee <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1b2c:	6863      	ldr	r3, [r4, #4]
    1b2e:	4906      	ldr	r1, [pc, #24]	; (1b48 <log_output_dropped_process+0x54>)
    1b30:	685b      	ldr	r3, [r3, #4]
    1b32:	2217      	movs	r2, #23
    1b34:	4628      	mov	r0, r5
    1b36:	f008 fada 	bl	a0ee <buffer_write>
		     output->control_block->ctx);
}
    1b3a:	b002      	add	sp, #8
    1b3c:	bd70      	pop	{r4, r5, r6, pc}
    1b3e:	bf00      	nop
    1b40:	0000f43c 	.word	0x0000f43c
    1b44:	0000db3b 	.word	0x0000db3b
    1b48:	0000db23 	.word	0x0000db23

00001b4c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1b4c:	4a08      	ldr	r2, [pc, #32]	; (1b70 <log_output_timestamp_freq_set+0x24>)
{
    1b4e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1b50:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1b52:	4c08      	ldr	r4, [pc, #32]	; (1b74 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1b54:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1b56:	2100      	movs	r1, #0
    1b58:	42a0      	cmp	r0, r4
    1b5a:	d804      	bhi.n	1b66 <log_output_timestamp_freq_set+0x1a>
    1b5c:	b101      	cbz	r1, 1b60 <log_output_timestamp_freq_set+0x14>
    1b5e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1b60:	4b05      	ldr	r3, [pc, #20]	; (1b78 <log_output_timestamp_freq_set+0x2c>)
    1b62:	6018      	str	r0, [r3, #0]
}
    1b64:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1b66:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1b68:	005b      	lsls	r3, r3, #1
    1b6a:	2101      	movs	r1, #1
    1b6c:	e7f4      	b.n	1b58 <log_output_timestamp_freq_set+0xc>
    1b6e:	bf00      	nop
    1b70:	200011b4 	.word	0x200011b4
    1b74:	000f4240 	.word	0x000f4240
    1b78:	200011b0 	.word	0x200011b0

00001b7c <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    1b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b80:	b085      	sub	sp, #20
    1b82:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    1b86:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    1b8a:	4605      	mov	r5, r0
    1b8c:	4688      	mov	r8, r1
    1b8e:	4614      	mov	r4, r2
    1b90:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    1b92:	f1bb 0f00 	cmp.w	fp, #0
    1b96:	d037      	beq.n	1c08 <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    1b98:	2200      	movs	r2, #0
    1b9a:	f8cd a000 	str.w	sl, [sp]
    1b9e:	465b      	mov	r3, fp
    1ba0:	210c      	movs	r1, #12
    1ba2:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    1ba4:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    1ba8:	f7fe fc6c 	bl	484 <cbvprintf_package>
    1bac:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    1bae:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1bb2:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    1bb6:	f005 0407 	and.w	r4, r5, #7
    1bba:	4d14      	ldr	r5, [pc, #80]	; (1c0c <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    1bbc:	4b14      	ldr	r3, [pc, #80]	; (1c10 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    1bbe:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1bc0:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    1bc2:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    1bc6:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1bca:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    1bce:	432c      	orrs	r4, r5
    1bd0:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    1bd4:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    1bd6:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    1bd8:	f7ff fbf6 	bl	13c8 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    1bdc:	4605      	mov	r5, r0
    1bde:	b150      	cbz	r0, 1bf6 <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    1be0:	f1bb 0f00 	cmp.w	fp, #0
    1be4:	d007      	beq.n	1bf6 <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    1be6:	f8cd a000 	str.w	sl, [sp]
    1bea:	465b      	mov	r3, fp
    1bec:	2200      	movs	r2, #0
    1bee:	4639      	mov	r1, r7
    1bf0:	300c      	adds	r0, #12
    1bf2:	f7fe fc47 	bl	484 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    1bf6:	464b      	mov	r3, r9
    1bf8:	4622      	mov	r2, r4
    1bfa:	4641      	mov	r1, r8
    1bfc:	4628      	mov	r0, r5
}
    1bfe:	b005      	add	sp, #20
    1c00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    1c04:	f008 bab5 	b.w	a172 <z_log_msg2_finalize>
		plen = 0;
    1c08:	465f      	mov	r7, fp
    1c0a:	e7d0      	b.n	1bae <z_impl_z_log_msg2_runtime_vcreate+0x32>
    1c0c:	0007fe00 	.word	0x0007fe00
    1c10:	7ff80000 	.word	0x7ff80000

00001c14 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    1c14:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
    1c16:	2804      	cmp	r0, #4
	entry->handler = NULL;
    1c18:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    1c1a:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
    1c1c:	bf98      	it	ls
    1c1e:	4b04      	ldrls	r3, [pc, #16]	; (1c30 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
    1c20:	4a04      	ldr	r2, [pc, #16]	; (1c34 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
    1c22:	bf98      	it	ls
    1c24:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
    1c28:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
    1c2a:	600b      	str	r3, [r1, #0]
}
    1c2c:	4770      	bx	lr
    1c2e:	bf00      	nop
    1c30:	0000d15c 	.word	0x0000d15c
    1c34:	0000d138 	.word	0x0000d138

00001c38 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
    1c38:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
    1c3a:	4a08      	ldr	r2, [pc, #32]	; (1c5c <backend_name_get+0x24>)
	entry->syntax  = NULL;
    1c3c:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
    1c3e:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
    1c40:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
    1c42:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
    1c44:	4b06      	ldr	r3, [pc, #24]	; (1c60 <backend_name_get+0x28>)
    1c46:	4a07      	ldr	r2, [pc, #28]	; (1c64 <backend_name_get+0x2c>)
    1c48:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
    1c4a:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
    1c4e:	bf3e      	ittt	cc
    1c50:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
    1c54:	689b      	ldrcc	r3, [r3, #8]
    1c56:	600b      	strcc	r3, [r1, #0]
	}
}
    1c58:	4770      	bx	lr
    1c5a:	bf00      	nop
    1c5c:	0000d2b0 	.word	0x0000d2b0
    1c60:	0000cefc 	.word	0x0000cefc
    1c64:	0000cf1c 	.word	0x0000cf1c

00001c68 <cmd_log_memory_slabs>:
{
    1c68:	b538      	push	{r3, r4, r5, lr}
    1c6a:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
    1c6c:	f7ff fd8e 	bl	178c <log_msg_mem_get_free>
    1c70:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
    1c72:	f7ff fd93 	bl	179c <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
    1c76:	4a09      	ldr	r2, [pc, #36]	; (1c9c <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
    1c78:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
    1c7a:	2108      	movs	r1, #8
    1c7c:	4620      	mov	r0, r4
    1c7e:	f008 fca1 	bl	a5c4 <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
    1c82:	462b      	mov	r3, r5
    1c84:	4620      	mov	r0, r4
    1c86:	4a06      	ldr	r2, [pc, #24]	; (1ca0 <cmd_log_memory_slabs+0x38>)
    1c88:	2108      	movs	r1, #8
    1c8a:	f008 fc9b 	bl	a5c4 <shell_fprintf>
		shell_print(
    1c8e:	4620      	mov	r0, r4
    1c90:	4a04      	ldr	r2, [pc, #16]	; (1ca4 <cmd_log_memory_slabs+0x3c>)
    1c92:	2108      	movs	r1, #8
    1c94:	f008 fc96 	bl	a5c4 <shell_fprintf>
}
    1c98:	2000      	movs	r0, #0
    1c9a:	bd38      	pop	{r3, r4, r5, pc}
    1c9c:	0000db40 	.word	0x0000db40
    1ca0:	0000db51 	.word	0x0000db51
    1ca4:	0000db62 	.word	0x0000db62

00001ca8 <cmd_log_backends_list>:
{
    1ca8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1cac:	4b11      	ldr	r3, [pc, #68]	; (1cf4 <cmd_log_backends_list+0x4c>)
    1cae:	4c12      	ldr	r4, [pc, #72]	; (1cf8 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
    1cb0:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1cfc <cmd_log_backends_list+0x54>
    1cb4:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1d00 <cmd_log_backends_list+0x58>
    1cb8:	f8df a048 	ldr.w	sl, [pc, #72]	; 1d04 <cmd_log_backends_list+0x5c>
    1cbc:	1b1b      	subs	r3, r3, r4
{
    1cbe:	4607      	mov	r7, r0
    1cc0:	111e      	asrs	r6, r3, #4
	for (int i = 0; i < backend_count; i++) {
    1cc2:	2500      	movs	r5, #0
    1cc4:	42b5      	cmp	r5, r6
    1cc6:	db03      	blt.n	1cd0 <cmd_log_backends_list+0x28>
}
    1cc8:	2000      	movs	r0, #0
    1cca:	b002      	add	sp, #8
    1ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
    1cd0:	6863      	ldr	r3, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
    1cd2:	7959      	ldrb	r1, [r3, #5]
    1cd4:	791b      	ldrb	r3, [r3, #4]
    1cd6:	2900      	cmp	r1, #0
    1cd8:	bf14      	ite	ne
    1cda:	4642      	movne	r2, r8
    1cdc:	464a      	moveq	r2, r9
    1cde:	e9cd 2300 	strd	r2, r3, [sp]
    1ce2:	2108      	movs	r1, #8
    1ce4:	68a3      	ldr	r3, [r4, #8]
    1ce6:	4652      	mov	r2, sl
    1ce8:	4638      	mov	r0, r7
    1cea:	f008 fc6b 	bl	a5c4 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
    1cee:	3501      	adds	r5, #1
    1cf0:	3410      	adds	r4, #16
    1cf2:	e7e7      	b.n	1cc4 <cmd_log_backends_list+0x1c>
    1cf4:	0000cf1c 	.word	0x0000cf1c
    1cf8:	0000cefc 	.word	0x0000cefc
    1cfc:	0000dbae 	.word	0x0000dbae
    1d00:	0000dbb6 	.word	0x0000dbb6
    1d04:	0000dbbf 	.word	0x0000dbbf

00001d08 <log_status>:
{
    1d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1d0c:	4b24      	ldr	r3, [pc, #144]	; (1da0 <log_status+0x98>)
    1d0e:	4c25      	ldr	r4, [pc, #148]	; (1da4 <log_status+0x9c>)
    1d10:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
    1d12:	684b      	ldr	r3, [r1, #4]
	if (!log_backend_is_active(backend)) {
    1d14:	795b      	ldrb	r3, [r3, #5]
{
    1d16:	b085      	sub	sp, #20
    1d18:	4605      	mov	r5, r0
    1d1a:	460e      	mov	r6, r1
    1d1c:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
    1d1e:	b91b      	cbnz	r3, 1d28 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
    1d20:	4a21      	ldr	r2, [pc, #132]	; (1da8 <log_status+0xa0>)
    1d22:	2103      	movs	r1, #3
    1d24:	f008 fc4e 	bl	a5c4 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    1d28:	4b20      	ldr	r3, [pc, #128]	; (1dac <log_status+0xa4>)
    1d2a:	4a21      	ldr	r2, [pc, #132]	; (1db0 <log_status+0xa8>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1d2c:	f8df a084 	ldr.w	sl, [pc, #132]	; 1db4 <log_status+0xac>
    1d30:	f8df b084 	ldr.w	fp, [pc, #132]	; 1db8 <log_status+0xb0>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
    1d34:	2108      	movs	r1, #8
    1d36:	4628      	mov	r0, r5
    1d38:	f008 fc44 	bl	a5c4 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
    1d3c:	4a1f      	ldr	r2, [pc, #124]	; (1dbc <log_status+0xb4>)
    1d3e:	2108      	movs	r1, #8
    1d40:	4628      	mov	r0, r5
    1d42:	f008 fc3f 	bl	a5c4 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    1d46:	f04f 0800 	mov.w	r8, #0
    1d4a:	fa0f f788 	sxth.w	r7, r8
    1d4e:	42a7      	cmp	r7, r4
    1d50:	f108 0801 	add.w	r8, r8, #1
    1d54:	d303      	bcc.n	1d5e <log_status+0x56>
}
    1d56:	2000      	movs	r0, #0
    1d58:	b005      	add	sp, #20
    1d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1d5e:	463a      	mov	r2, r7
    1d60:	2301      	movs	r3, #1
    1d62:	2100      	movs	r1, #0
    1d64:	4630      	mov	r0, r6
    1d66:	f7ff fcf7 	bl	1758 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1d6a:	2300      	movs	r3, #0
    1d6c:	463a      	mov	r2, r7
    1d6e:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1d70:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1d72:	4630      	mov	r0, r6
    1d74:	f7ff fcf0 	bl	1758 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1d78:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
    1d7a:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
    1d7c:	2000      	movs	r0, #0
    1d7e:	f7ff fc5d 	bl	163c <log_source_name_get>
    1d82:	9a03      	ldr	r2, [sp, #12]
    1d84:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
    1d88:	9201      	str	r2, [sp, #4]
    1d8a:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
    1d8e:	9200      	str	r2, [sp, #0]
    1d90:	4603      	mov	r3, r0
    1d92:	465a      	mov	r2, fp
    1d94:	2108      	movs	r1, #8
    1d96:	4628      	mov	r0, r5
    1d98:	f008 fc14 	bl	a5c4 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
    1d9c:	e7d5      	b.n	1d4a <log_status+0x42>
    1d9e:	bf00      	nop
    1da0:	0000ce74 	.word	0x0000ce74
    1da4:	0000cefc 	.word	0x0000cefc
    1da8:	0000dbe0 	.word	0x0000dbe0
    1dac:	0000dbf2 	.word	0x0000dbf2
    1db0:	0000dbfe 	.word	0x0000dbfe
    1db4:	0000d148 	.word	0x0000d148
    1db8:	0000dc59 	.word	0x0000dc59
    1dbc:	0000dc1c 	.word	0x0000dc1c

00001dc0 <module_name_get>:
{
    1dc0:	b510      	push	{r4, lr}
	entry->handler = NULL;
    1dc2:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
    1dc4:	4a05      	ldr	r2, [pc, #20]	; (1ddc <module_name_get+0x1c>)
	entry->handler = NULL;
    1dc6:	60cb      	str	r3, [r1, #12]
{
    1dc8:	460c      	mov	r4, r1
	entry->help  = NULL;
    1dca:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
    1dcc:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
    1dce:	4601      	mov	r1, r0
    1dd0:	4618      	mov	r0, r3
    1dd2:	f7ff fc33 	bl	163c <log_source_name_get>
    1dd6:	6020      	str	r0, [r4, #0]
}
    1dd8:	bd10      	pop	{r4, pc}
    1dda:	bf00      	nop
    1ddc:	0000d138 	.word	0x0000d138

00001de0 <shell_backend_cmd_execute>:
{
    1de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
    1de4:	f852 ac04 	ldr.w	sl, [r2, #-4]
	return __log_backends_end - __log_backends_start;
    1de8:	4c18      	ldr	r4, [pc, #96]	; (1e4c <shell_backend_cmd_execute+0x6c>)
{
    1dea:	b085      	sub	sp, #20
    1dec:	4606      	mov	r6, r0
	size_t slen = strlen(name);
    1dee:	4650      	mov	r0, sl
{
    1df0:	4689      	mov	r9, r1
    1df2:	4690      	mov	r8, r2
    1df4:	9302      	str	r3, [sp, #8]
	size_t slen = strlen(name);
    1df6:	f009 fcba 	bl	b76e <strlen>
    1dfa:	4915      	ldr	r1, [pc, #84]	; (1e50 <shell_backend_cmd_execute+0x70>)
    1dfc:	1b09      	subs	r1, r1, r4
    1dfe:	110b      	asrs	r3, r1, #4
    1e00:	4602      	mov	r2, r0
    1e02:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e04:	2700      	movs	r7, #0
    1e06:	46a3      	mov	fp, r4
    1e08:	9b01      	ldr	r3, [sp, #4]
    1e0a:	429f      	cmp	r7, r3
    1e0c:	db08      	blt.n	1e20 <shell_backend_cmd_execute+0x40>
		shell_error(shell, "Invalid backend: %s", name);
    1e0e:	4a11      	ldr	r2, [pc, #68]	; (1e54 <shell_backend_cmd_execute+0x74>)
    1e10:	4653      	mov	r3, sl
    1e12:	2101      	movs	r1, #1
    1e14:	4630      	mov	r0, r6
    1e16:	f008 fbd5 	bl	a5c4 <shell_fprintf>
		return -ENOEXEC;
    1e1a:	f06f 0507 	mvn.w	r5, #7
    1e1e:	e00f      	b.n	1e40 <shell_backend_cmd_execute+0x60>
		if (strncmp(name, backend->name, slen) == 0) {
    1e20:	68a1      	ldr	r1, [r4, #8]
    1e22:	9203      	str	r2, [sp, #12]
    1e24:	4650      	mov	r0, sl
    1e26:	f009 fcbe 	bl	b7a6 <strncmp>
    1e2a:	3410      	adds	r4, #16
    1e2c:	9a03      	ldr	r2, [sp, #12]
    1e2e:	4605      	mov	r5, r0
    1e30:	b950      	cbnz	r0, 1e48 <shell_backend_cmd_execute+0x68>
		func(shell, backend, argc, argv);
    1e32:	9c02      	ldr	r4, [sp, #8]
    1e34:	4643      	mov	r3, r8
    1e36:	464a      	mov	r2, r9
    1e38:	eb0b 1107 	add.w	r1, fp, r7, lsl #4
    1e3c:	4630      	mov	r0, r6
    1e3e:	47a0      	blx	r4
}
    1e40:	4628      	mov	r0, r5
    1e42:	b005      	add	sp, #20
    1e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e48:	3701      	adds	r7, #1
    1e4a:	e7dd      	b.n	1e08 <shell_backend_cmd_execute+0x28>
    1e4c:	0000cefc 	.word	0x0000cefc
    1e50:	0000cf1c 	.word	0x0000cf1c
    1e54:	0000dc6d 	.word	0x0000dc6d

00001e58 <cmd_log_backend_status>:
{
    1e58:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
    1e5a:	4b02      	ldr	r3, [pc, #8]	; (1e64 <cmd_log_backend_status+0xc>)
    1e5c:	f7ff ffc0 	bl	1de0 <shell_backend_cmd_execute>
}
    1e60:	2000      	movs	r0, #0
    1e62:	bd08      	pop	{r3, pc}
    1e64:	00001d09 	.word	0x00001d09

00001e68 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
    1e68:	4b01      	ldr	r3, [pc, #4]	; (1e70 <cmd_log_backend_halt+0x8>)
    1e6a:	f7ff bfb9 	b.w	1de0 <shell_backend_cmd_execute>
    1e6e:	bf00      	nop
    1e70:	0000a1e9 	.word	0x0000a1e9

00001e74 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
    1e74:	4b01      	ldr	r3, [pc, #4]	; (1e7c <cmd_log_backend_go+0x8>)
    1e76:	f7ff bfb3 	b.w	1de0 <shell_backend_cmd_execute>
    1e7a:	bf00      	nop
    1e7c:	0000a1f1 	.word	0x0000a1f1

00001e80 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
    1e80:	4b01      	ldr	r3, [pc, #4]	; (1e88 <cmd_log_backend_enable+0x8>)
    1e82:	f7ff bfad 	b.w	1de0 <shell_backend_cmd_execute>
    1e86:	bf00      	nop
    1e88:	00001f89 	.word	0x00001f89

00001e8c <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
    1e8c:	4b01      	ldr	r3, [pc, #4]	; (1e94 <cmd_log_backend_disable+0x8>)
    1e8e:	f7ff bfa7 	b.w	1de0 <shell_backend_cmd_execute>
    1e92:	bf00      	nop
    1e94:	0000a23d 	.word	0x0000a23d

00001e98 <shell_state_precheck>:
{
    1e98:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
    1e9a:	69c3      	ldr	r3, [r0, #28]
    1e9c:	68db      	ldr	r3, [r3, #12]
    1e9e:	791c      	ldrb	r4, [r3, #4]
    1ea0:	b92c      	cbnz	r4, 1eae <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
    1ea2:	4a04      	ldr	r2, [pc, #16]	; (1eb4 <shell_state_precheck+0x1c>)
    1ea4:	2101      	movs	r1, #1
    1ea6:	f008 fb8d 	bl	a5c4 <shell_fprintf>
    1eaa:	4620      	mov	r0, r4
}
    1eac:	bd10      	pop	{r4, pc}
	return true;
    1eae:	2001      	movs	r0, #1
    1eb0:	e7fc      	b.n	1eac <shell_state_precheck+0x14>
    1eb2:	bf00      	nop
    1eb4:	0000dc82 	.word	0x0000dc82

00001eb8 <filters_set>:
{
    1eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ebc:	4e2c      	ldr	r6, [pc, #176]	; (1f70 <filters_set+0xb8>)
    1ebe:	461f      	mov	r7, r3
    1ec0:	4b2c      	ldr	r3, [pc, #176]	; (1f74 <filters_set+0xbc>)
    1ec2:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
    1ec4:	1e15      	subs	r5, r2, #0
{
    1ec6:	b085      	sub	sp, #20
    1ec8:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
    1ecc:	bf14      	ite	ne
    1ece:	462b      	movne	r3, r5
    1ed0:	4633      	moveq	r3, r6
    1ed2:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
    1ed4:	684b      	ldr	r3, [r1, #4]
    1ed6:	795b      	ldrb	r3, [r3, #5]
{
    1ed8:	4680      	mov	r8, r0
    1eda:	4689      	mov	r9, r1
	if (!backend->cb->active) {
    1edc:	b91b      	cbnz	r3, 1ee6 <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
    1ede:	4a26      	ldr	r2, [pc, #152]	; (1f78 <filters_set+0xc0>)
    1ee0:	2103      	movs	r1, #3
    1ee2:	f008 fb6f 	bl	a5c4 <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
    1ee6:	f8df a094 	ldr.w	sl, [pc, #148]	; 1f7c <filters_set+0xc4>
	for (i = 0U; i < modules_cnt; i++) {
    1eea:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
    1eec:	9b02      	ldr	r3, [sp, #8]
    1eee:	429c      	cmp	r4, r3
    1ef0:	db02      	blt.n	1ef8 <filters_set+0x40>
}
    1ef2:	b005      	add	sp, #20
    1ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
    1ef8:	b3bd      	cbz	r5, 1f6a <filters_set+0xb2>
    1efa:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
    1efe:	2300      	movs	r3, #0
    1f00:	429e      	cmp	r6, r3
    1f02:	d107      	bne.n	1f14 <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
    1f04:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    1f08:	4a1d      	ldr	r2, [pc, #116]	; (1f80 <filters_set+0xc8>)
    1f0a:	2101      	movs	r1, #1
    1f0c:	4640      	mov	r0, r8
    1f0e:	f008 fb59 	bl	a5c4 <shell_fprintf>
    1f12:	e023      	b.n	1f5c <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
    1f14:	4619      	mov	r1, r3
    1f16:	2000      	movs	r0, #0
    1f18:	9303      	str	r3, [sp, #12]
    1f1a:	f7ff fb8f 	bl	163c <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
    1f1e:	2240      	movs	r2, #64	; 0x40
    1f20:	4659      	mov	r1, fp
    1f22:	f009 fc40 	bl	b7a6 <strncmp>
    1f26:	9b03      	ldr	r3, [sp, #12]
    1f28:	b9d0      	cbnz	r0, 1f60 <filters_set+0xa8>
			return i;
    1f2a:	461a      	mov	r2, r3
    1f2c:	2100      	movs	r1, #0
    1f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f30:	b212      	sxth	r2, r2
    1f32:	4648      	mov	r0, r9
    1f34:	f7ff fb90 	bl	1658 <z_impl_log_filter_set>
			if (set_lvl != level) {
    1f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f3a:	4283      	cmp	r3, r0
    1f3c:	4683      	mov	fp, r0
    1f3e:	d00d      	beq.n	1f5c <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
    1f40:	b985      	cbnz	r5, 1f64 <filters_set+0xac>
					log_source_name_get(
    1f42:	4621      	mov	r1, r4
    1f44:	4628      	mov	r0, r5
    1f46:	f7ff fb79 	bl	163c <log_source_name_get>
    1f4a:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
    1f4c:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
    1f50:	9200      	str	r2, [sp, #0]
    1f52:	2103      	movs	r1, #3
    1f54:	4a0b      	ldr	r2, [pc, #44]	; (1f84 <filters_set+0xcc>)
    1f56:	4640      	mov	r0, r8
    1f58:	f008 fb34 	bl	a5c4 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
    1f5c:	3401      	adds	r4, #1
    1f5e:	e7c5      	b.n	1eec <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
    1f60:	3301      	adds	r3, #1
    1f62:	e7cd      	b.n	1f00 <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
    1f64:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    1f68:	e7f0      	b.n	1f4c <filters_set+0x94>
    1f6a:	4622      	mov	r2, r4
    1f6c:	e7de      	b.n	1f2c <filters_set+0x74>
    1f6e:	bf00      	nop
    1f70:	0000cefc 	.word	0x0000cefc
    1f74:	0000ce74 	.word	0x0000ce74
    1f78:	0000dca6 	.word	0x0000dca6
    1f7c:	0000d148 	.word	0x0000d148
    1f80:	0000dcd1 	.word	0x0000dcd1
    1f84:	0000dcbb 	.word	0x0000dcbb

00001f88 <log_enable>:
{
    1f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
    1f8c:	f8d3 b004 	ldr.w	fp, [r3, #4]
    1f90:	f8df a04c 	ldr.w	sl, [pc, #76]	; 1fe0 <log_enable+0x58>
{
    1f94:	4606      	mov	r6, r0
    1f96:	4688      	mov	r8, r1
    1f98:	4691      	mov	r9, r2
    1f9a:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    1f9c:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
    1f9e:	f85a 1b04 	ldr.w	r1, [sl], #4
    1fa2:	2204      	movs	r2, #4
    1fa4:	4658      	mov	r0, fp
    1fa6:	f009 fbfe 	bl	b7a6 <strncmp>
    1faa:	4604      	mov	r4, r0
    1fac:	b170      	cbz	r0, 1fcc <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
    1fae:	3701      	adds	r7, #1
    1fb0:	2f05      	cmp	r7, #5
    1fb2:	d1f4      	bne.n	1f9e <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
    1fb4:	686b      	ldr	r3, [r5, #4]
    1fb6:	4a0b      	ldr	r2, [pc, #44]	; (1fe4 <log_enable+0x5c>)
    1fb8:	2101      	movs	r1, #1
    1fba:	4630      	mov	r0, r6
    1fbc:	f008 fb02 	bl	a5c4 <shell_fprintf>
    1fc0:	f06f 0407 	mvn.w	r4, #7
}
    1fc4:	4620      	mov	r0, r4
    1fc6:	b003      	add	sp, #12
    1fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
    1fcc:	9700      	str	r7, [sp, #0]
    1fce:	f105 0308 	add.w	r3, r5, #8
    1fd2:	f1a9 0202 	sub.w	r2, r9, #2
    1fd6:	4641      	mov	r1, r8
    1fd8:	4630      	mov	r0, r6
    1fda:	f7ff ff6d 	bl	1eb8 <filters_set>
	return 0;
    1fde:	e7f1      	b.n	1fc4 <log_enable+0x3c>
    1fe0:	0000d148 	.word	0x0000d148
    1fe4:	0000dceb 	.word	0x0000dceb

00001fe8 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
    1fe8:	b513      	push	{r0, r1, r4, lr}
    1fea:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
    1fec:	f00a fa66 	bl	c4bc <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
    1ff0:	f3c0 2307 	ubfx	r3, r0, #8, #8
    1ff4:	9301      	str	r3, [sp, #4]
    1ff6:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1ffa:	9300      	str	r3, [sp, #0]
    1ffc:	4a04      	ldr	r2, [pc, #16]	; (2010 <cmd_kernel_version+0x28>)
    1ffe:	0e03      	lsrs	r3, r0, #24
    2000:	2108      	movs	r1, #8
    2002:	4620      	mov	r0, r4
    2004:	f008 fade 	bl	a5c4 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
    2008:	2000      	movs	r0, #0
    200a:	b002      	add	sp, #8
    200c:	bd10      	pop	{r4, pc}
    200e:	bf00      	nop
    2010:	0000dea6 	.word	0x0000dea6

00002014 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
    2014:	b510      	push	{r4, lr}
    2016:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    2018:	f00a fc19 	bl	c84e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    201c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2020:	fba0 2003 	umull	r2, r0, r0, r3
    2024:	fb03 0301 	mla	r3, r3, r1, r0
    2028:	0bd2      	lsrs	r2, r2, #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
    202a:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    202e:	4620      	mov	r0, r4
    2030:	4a02      	ldr	r2, [pc, #8]	; (203c <cmd_kernel_uptime+0x28>)
    2032:	2108      	movs	r1, #8
    2034:	f008 fac6 	bl	a5c4 <shell_fprintf>
	return 0;
}
    2038:	2000      	movs	r0, #0
    203a:	bd10      	pop	{r4, pc}
    203c:	0000debf 	.word	0x0000debf

00002040 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
    2040:	b510      	push	{r4, lr}
    2042:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
    2044:	f004 fc9c 	bl	6980 <sys_clock_elapsed>
    2048:	4a08      	ldr	r2, [pc, #32]	; (206c <cmd_kernel_threads+0x2c>)
    204a:	4603      	mov	r3, r0
    204c:	2108      	movs	r1, #8
    204e:	4620      	mov	r0, r4
    2050:	f008 fab8 	bl	a5c4 <shell_fprintf>
	shell_print(shell, "Threads:");
    2054:	4a06      	ldr	r2, [pc, #24]	; (2070 <cmd_kernel_threads+0x30>)
    2056:	4620      	mov	r0, r4
    2058:	2108      	movs	r1, #8
    205a:	f008 fab3 	bl	a5c4 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
    205e:	4805      	ldr	r0, [pc, #20]	; (2074 <cmd_kernel_threads+0x34>)
    2060:	4621      	mov	r1, r4
    2062:	f006 f859 	bl	8118 <k_thread_foreach>
	return 0;
}
    2066:	2000      	movs	r0, #0
    2068:	bd10      	pop	{r4, pc}
    206a:	bf00      	nop
    206c:	0000dece 	.word	0x0000dece
    2070:	0000deed 	.word	0x0000deed
    2074:	000020d9 	.word	0x000020d9

00002078 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
    2078:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
    207a:	4601      	mov	r1, r0
{
    207c:	b087      	sub	sp, #28
    207e:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
    2080:	4811      	ldr	r0, [pc, #68]	; (20c8 <cmd_kernel_stacks+0x50>)
    2082:	f006 f849 	bl	8118 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
    2086:	4a11      	ldr	r2, [pc, #68]	; (20cc <cmd_kernel_stacks+0x54>)
		unused = 0;
    2088:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
    208a:	f812 1b01 	ldrb.w	r1, [r2], #1
    208e:	29aa      	cmp	r1, #170	; 0xaa
    2090:	d103      	bne.n	209a <cmd_kernel_stacks+0x22>
				unused++;
    2092:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
    2094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2098:	d1f7      	bne.n	208a <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
    209a:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
    209e:	2264      	movs	r2, #100	; 0x64
    20a0:	434a      	muls	r2, r1
    20a2:	0ad2      	lsrs	r2, r2, #11
    20a4:	9205      	str	r2, [sp, #20]
    20a6:	2500      	movs	r5, #0
    20a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    20ac:	e9cd 1203 	strd	r1, r2, [sp, #12]
    20b0:	e9cd 2301 	strd	r2, r3, [sp, #4]
    20b4:	4620      	mov	r0, r4
    20b6:	4b06      	ldr	r3, [pc, #24]	; (20d0 <cmd_kernel_stacks+0x58>)
    20b8:	4a06      	ldr	r2, [pc, #24]	; (20d4 <cmd_kernel_stacks+0x5c>)
    20ba:	9500      	str	r5, [sp, #0]
    20bc:	2108      	movs	r1, #8
    20be:	f008 fa81 	bl	a5c4 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
    20c2:	4628      	mov	r0, r5
    20c4:	b007      	add	sp, #28
    20c6:	bd30      	pop	{r4, r5, pc}
    20c8:	000021b9 	.word	0x000021b9
    20cc:	20003880 	.word	0x20003880
    20d0:	20003860 	.word	0x20003860
    20d4:	0000def7 	.word	0x0000def7

000020d8 <shell_tdata_dump>:
{
    20d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20da:	b087      	sub	sp, #28
	size_t size = thread->stack_info.size;
    20dc:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
    20e0:	4604      	mov	r4, r0
    20e2:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
    20e4:	f00a f9d8 	bl	c498 <k_thread_name_get>
    20e8:	4606      	mov	r6, r0
	return z_impl_z_current_get();
    20ea:	f006 feeb 	bl	8ec4 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
    20ee:	4b23      	ldr	r3, [pc, #140]	; (217c <shell_tdata_dump+0xa4>)
    20f0:	4a23      	ldr	r2, [pc, #140]	; (2180 <shell_tdata_dump+0xa8>)
    20f2:	2e00      	cmp	r6, #0
    20f4:	bf08      	it	eq
    20f6:	461e      	moveq	r6, r3
    20f8:	4b22      	ldr	r3, [pc, #136]	; (2184 <shell_tdata_dump+0xac>)
    20fa:	e9cd 4600 	strd	r4, r6, [sp]
    20fe:	4284      	cmp	r4, r0
    2100:	bf18      	it	ne
    2102:	4613      	movne	r3, r2
    2104:	2108      	movs	r1, #8
    2106:	4628      	mov	r0, r5
    2108:	4a1f      	ldr	r2, [pc, #124]	; (2188 <shell_tdata_dump+0xb0>)
    210a:	f008 fa5b 	bl	a5c4 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
    210e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    2112:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2116:	f994 300e 	ldrsb.w	r3, [r4, #14]
    211a:	4a1c      	ldr	r2, [pc, #112]	; (218c <shell_tdata_dump+0xb4>)
    211c:	9300      	str	r3, [sp, #0]
    211e:	2108      	movs	r1, #8
    2120:	7b23      	ldrb	r3, [r4, #12]
    2122:	4628      	mov	r0, r5
    2124:	f008 fa4e 	bl	a5c4 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
    2128:	4620      	mov	r0, r4
    212a:	f006 f83d 	bl	81a8 <k_thread_state_str>
    212e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    2130:	9200      	str	r2, [sp, #0]
    2132:	4603      	mov	r3, r0
    2134:	4a16      	ldr	r2, [pc, #88]	; (2190 <shell_tdata_dump+0xb8>)
    2136:	2108      	movs	r1, #8
    2138:	4628      	mov	r0, r5
    213a:	f008 fa43 	bl	a5c4 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
    213e:	a905      	add	r1, sp, #20
    2140:	4620      	mov	r0, r4
    2142:	f00a f9ad 	bl	c4a0 <z_impl_k_thread_stack_space_get>
	if (ret) {
    2146:	4603      	mov	r3, r0
    2148:	b130      	cbz	r0, 2158 <shell_tdata_dump+0x80>
		shell_print(shell,
    214a:	4a12      	ldr	r2, [pc, #72]	; (2194 <shell_tdata_dump+0xbc>)
    214c:	2108      	movs	r1, #8
    214e:	4628      	mov	r0, r5
    2150:	f008 fa38 	bl	a5c4 <shell_fprintf>
}
    2154:	b007      	add	sp, #28
    2156:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
    2158:	9a05      	ldr	r2, [sp, #20]
    215a:	2364      	movs	r3, #100	; 0x64
    215c:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
    215e:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
    2162:	434b      	muls	r3, r1
		shell_print(shell,
    2164:	4a0c      	ldr	r2, [pc, #48]	; (2198 <shell_tdata_dump+0xc0>)
		pcnt = ((size - unused) * 100U) / size;
    2166:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
    216a:	2108      	movs	r1, #8
    216c:	e9cd 7302 	strd	r7, r3, [sp, #8]
    2170:	4628      	mov	r0, r5
    2172:	463b      	mov	r3, r7
    2174:	f008 fa26 	bl	a5c4 <shell_fprintf>
}
    2178:	e7ec      	b.n	2154 <shell_tdata_dump+0x7c>
    217a:	bf00      	nop
    217c:	0000df3d 	.word	0x0000df3d
    2180:	0000dac2 	.word	0x0000dac2
    2184:	0000ee27 	.word	0x0000ee27
    2188:	0000df40 	.word	0x0000df40
    218c:	0000df4c 	.word	0x0000df4c
    2190:	0000df78 	.word	0x0000df78
    2194:	0000df8f 	.word	0x0000df8f
    2198:	0000dfbc 	.word	0x0000dfbc

0000219c <cmd_kernel_cycles>:
{
    219c:	b510      	push	{r4, lr}
    219e:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    21a0:	f00a f874 	bl	c28c <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
    21a4:	4a03      	ldr	r2, [pc, #12]	; (21b4 <cmd_kernel_cycles+0x18>)
    21a6:	4603      	mov	r3, r0
    21a8:	2108      	movs	r1, #8
    21aa:	4620      	mov	r0, r4
    21ac:	f008 fa0a 	bl	a5c4 <shell_fprintf>
}
    21b0:	2000      	movs	r0, #0
    21b2:	bd10      	pop	{r4, pc}
    21b4:	0000dff3 	.word	0x0000dff3

000021b8 <shell_stack_dump>:
{
    21b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
    21ba:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
{
    21be:	b089      	sub	sp, #36	; 0x24
    21c0:	4604      	mov	r4, r0
    21c2:	460d      	mov	r5, r1
    21c4:	a907      	add	r1, sp, #28
    21c6:	f00a f96b 	bl	c4a0 <z_impl_k_thread_stack_space_get>
	if (ret) {
    21ca:	4603      	mov	r3, r0
    21cc:	b130      	cbz	r0, 21dc <shell_stack_dump+0x24>
		shell_print(shell,
    21ce:	4a10      	ldr	r2, [pc, #64]	; (2210 <shell_stack_dump+0x58>)
    21d0:	2108      	movs	r1, #8
    21d2:	4628      	mov	r0, r5
    21d4:	f008 f9f6 	bl	a5c4 <shell_fprintf>
}
    21d8:	b009      	add	sp, #36	; 0x24
    21da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
    21dc:	4620      	mov	r0, r4
    21de:	f00a f95b 	bl	c498 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
    21e2:	9907      	ldr	r1, [sp, #28]
	shell_print((const struct shell *)user_data,
    21e4:	4a0b      	ldr	r2, [pc, #44]	; (2214 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
    21e6:	1a77      	subs	r7, r6, r1
	shell_print((const struct shell *)user_data,
    21e8:	2800      	cmp	r0, #0
    21ea:	bf18      	it	ne
    21ec:	4602      	movne	r2, r0
	pcnt = ((size - unused) * 100U) / size;
    21ee:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
    21f0:	e9cd 1702 	strd	r1, r7, [sp, #8]
    21f4:	e9cd 2600 	strd	r2, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
    21f8:	437b      	muls	r3, r7
	shell_print((const struct shell *)user_data,
    21fa:	4a07      	ldr	r2, [pc, #28]	; (2218 <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
    21fc:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
    2200:	2108      	movs	r1, #8
    2202:	e9cd 6304 	strd	r6, r3, [sp, #16]
    2206:	4628      	mov	r0, r5
    2208:	4623      	mov	r3, r4
    220a:	f008 f9db 	bl	a5c4 <shell_fprintf>
    220e:	e7e3      	b.n	21d8 <shell_stack_dump+0x20>
    2210:	0000df8f 	.word	0x0000df8f
    2214:	0000df3d 	.word	0x0000df3d
    2218:	0000e009 	.word	0x0000e009

0000221c <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
    221c:	4603      	mov	r3, r0
	const char *name = dev->name;
    221e:	6800      	ldr	r0, [r0, #0]
{
    2220:	b510      	push	{r4, lr}
    2222:	460c      	mov	r4, r1
    2224:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
    2226:	b108      	cbz	r0, 222c <get_device_name+0x10>
    2228:	7802      	ldrb	r2, [r0, #0]
    222a:	b922      	cbnz	r2, 2236 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
    222c:	4a02      	ldr	r2, [pc, #8]	; (2238 <get_device_name+0x1c>)
    222e:	4620      	mov	r0, r4
    2230:	f002 fdf6 	bl	4e20 <snprintf>
		name = buf;
    2234:	4620      	mov	r0, r4
	}

	return name;
}
    2236:	bd10      	pop	{r4, pc}
    2238:	0000e0e0 	.word	0x0000e0e0

0000223c <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
    223c:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
    223e:	680c      	ldr	r4, [r1, #0]
    2240:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    2244:	f7ff ffea 	bl	221c <get_device_name>
    2248:	4a03      	ldr	r2, [pc, #12]	; (2258 <cmd_device_list_visitor+0x1c>)
    224a:	4603      	mov	r3, r0
    224c:	2108      	movs	r1, #8
    224e:	4620      	mov	r0, r4
    2250:	f008 f9b8 	bl	a5c4 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
    2254:	2000      	movs	r0, #0
    2256:	bd10      	pop	{r4, pc}
    2258:	0000e0e5 	.word	0x0000e0e5

0000225c <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
    225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2260:	b08a      	sub	sp, #40	; 0x28
    2262:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
    2264:	a801      	add	r0, sp, #4
    2266:	f005 fd99 	bl	7d9c <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
    226a:	9e01      	ldr	r6, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    226c:	4a1b      	ldr	r2, [pc, #108]	; (22dc <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    226e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 22e0 <cmd_device_list+0x84>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
    2272:	f8df 9070 	ldr.w	r9, [pc, #112]	; 22e4 <cmd_device_list+0x88>
    2276:	f8df a070 	ldr.w	sl, [pc, #112]	; 22e8 <cmd_device_list+0x8c>
	const struct device *devlist_end = devlist + devcnt;
    227a:	2318      	movs	r3, #24
    227c:	fb03 6600 	mla	r6, r3, r0, r6
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
    2280:	2108      	movs	r1, #8
    2282:	4628      	mov	r0, r5
    2284:	f008 f99e 	bl	a5c4 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
    2288:	9c01      	ldr	r4, [sp, #4]
    228a:	42b4      	cmp	r4, r6
    228c:	d303      	bcc.n	2296 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
    228e:	2000      	movs	r0, #0
    2290:	b00a      	add	sp, #40	; 0x28
    2292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
    2296:	af05      	add	r7, sp, #20
    2298:	4639      	mov	r1, r7
    229a:	2214      	movs	r2, #20
    229c:	4620      	mov	r0, r4
    229e:	f7ff ffbd 	bl	221c <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    22a2:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
    22a4:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
    22a6:	2108      	movs	r1, #8
    22a8:	4628      	mov	r0, r5
    22aa:	f008 f98b 	bl	a5c4 <shell_fprintf>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    22ae:	4620      	mov	r0, r4
    22b0:	f00a f8b2 	bl	c418 <z_device_is_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
    22b4:	4a0d      	ldr	r2, [pc, #52]	; (22ec <cmd_device_list+0x90>)
    22b6:	2800      	cmp	r0, #0
    22b8:	bf14      	ite	ne
    22ba:	464b      	movne	r3, r9
    22bc:	4653      	moveq	r3, sl
    22be:	2108      	movs	r1, #8
    22c0:	4628      	mov	r0, r5
    22c2:	f008 f97f 	bl	a5c4 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
    22c6:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    22c8:	4620      	mov	r0, r4
    22ca:	4909      	ldr	r1, [pc, #36]	; (22f0 <cmd_device_list+0x94>)
			struct cmd_device_list_visitor_context ctx = {
    22cc:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    22ce:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
    22d0:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
    22d4:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
    22d6:	f00a f8a9 	bl	c42c <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
    22da:	e7d6      	b.n	228a <cmd_device_list+0x2e>
    22dc:	0000e104 	.word	0x0000e104
    22e0:	0000e10e 	.word	0x0000e10e
    22e4:	0000e0f5 	.word	0x0000e0f5
    22e8:	0000e0fb 	.word	0x0000e0fb
    22ec:	0000e113 	.word	0x0000e113
    22f0:	0000223d 	.word	0x0000223d

000022f4 <device_get_config_level>:
{
    22f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    22f8:	4b11      	ldr	r3, [pc, #68]	; (2340 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    22fa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2344 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    22fe:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    2302:	3101      	adds	r1, #1
{
    2304:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    2306:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
    230a:	4606      	mov	r6, r0
	bool devices = false;
    230c:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    230e:	45a0      	cmp	r8, r4
    2310:	d803      	bhi.n	231a <device_get_config_level+0x26>
}
    2312:	4638      	mov	r0, r7
    2314:	b007      	add	sp, #28
    2316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    231a:	4620      	mov	r0, r4
    231c:	f00a f87c 	bl	c418 <z_device_is_ready>
		if (device_is_ready(dev)) {
    2320:	4605      	mov	r5, r0
    2322:	b158      	cbz	r0, 233c <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
    2324:	2214      	movs	r2, #20
    2326:	a901      	add	r1, sp, #4
    2328:	4620      	mov	r0, r4
    232a:	f7ff ff77 	bl	221c <get_device_name>
    232e:	464a      	mov	r2, r9
    2330:	4603      	mov	r3, r0
    2332:	2108      	movs	r1, #8
    2334:	4630      	mov	r0, r6
    2336:	f008 f945 	bl	a5c4 <shell_fprintf>
			devices = true;
    233a:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
    233c:	3418      	adds	r4, #24
    233e:	e7e6      	b.n	230e <device_get_config_level+0x1a>
    2340:	0000d368 	.word	0x0000d368
    2344:	0000e11a 	.word	0x0000e11a

00002348 <cmd_device_levels>:
{
    2348:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    234a:	2108      	movs	r1, #8
{
    234c:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
    234e:	4a1e      	ldr	r2, [pc, #120]	; (23c8 <cmd_device_levels+0x80>)
    2350:	f008 f938 	bl	a5c4 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
    2354:	2100      	movs	r1, #0
    2356:	4620      	mov	r0, r4
    2358:	f7ff ffcc 	bl	22f4 <device_get_config_level>
	if (ret == false) {
    235c:	b920      	cbnz	r0, 2368 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    235e:	4a1b      	ldr	r2, [pc, #108]	; (23cc <cmd_device_levels+0x84>)
    2360:	2108      	movs	r1, #8
    2362:	4620      	mov	r0, r4
    2364:	f008 f92e 	bl	a5c4 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
    2368:	2108      	movs	r1, #8
    236a:	4620      	mov	r0, r4
    236c:	4a18      	ldr	r2, [pc, #96]	; (23d0 <cmd_device_levels+0x88>)
    236e:	f008 f929 	bl	a5c4 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
    2372:	2101      	movs	r1, #1
    2374:	4620      	mov	r0, r4
    2376:	f7ff ffbd 	bl	22f4 <device_get_config_level>
	if (ret == false) {
    237a:	b920      	cbnz	r0, 2386 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    237c:	4a13      	ldr	r2, [pc, #76]	; (23cc <cmd_device_levels+0x84>)
    237e:	2108      	movs	r1, #8
    2380:	4620      	mov	r0, r4
    2382:	f008 f91f 	bl	a5c4 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
    2386:	2108      	movs	r1, #8
    2388:	4620      	mov	r0, r4
    238a:	4a12      	ldr	r2, [pc, #72]	; (23d4 <cmd_device_levels+0x8c>)
    238c:	f008 f91a 	bl	a5c4 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
    2390:	2102      	movs	r1, #2
    2392:	4620      	mov	r0, r4
    2394:	f7ff ffae 	bl	22f4 <device_get_config_level>
	if (ret == false) {
    2398:	b920      	cbnz	r0, 23a4 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    239a:	4a0c      	ldr	r2, [pc, #48]	; (23cc <cmd_device_levels+0x84>)
    239c:	2108      	movs	r1, #8
    239e:	4620      	mov	r0, r4
    23a0:	f008 f910 	bl	a5c4 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
    23a4:	2108      	movs	r1, #8
    23a6:	4620      	mov	r0, r4
    23a8:	4a0b      	ldr	r2, [pc, #44]	; (23d8 <cmd_device_levels+0x90>)
    23aa:	f008 f90b 	bl	a5c4 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
    23ae:	2103      	movs	r1, #3
    23b0:	4620      	mov	r0, r4
    23b2:	f7ff ff9f 	bl	22f4 <device_get_config_level>
	if (ret == false) {
    23b6:	b920      	cbnz	r0, 23c2 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
    23b8:	4a04      	ldr	r2, [pc, #16]	; (23cc <cmd_device_levels+0x84>)
    23ba:	2108      	movs	r1, #8
    23bc:	4620      	mov	r0, r4
    23be:	f008 f901 	bl	a5c4 <shell_fprintf>
}
    23c2:	2000      	movs	r0, #0
    23c4:	bd10      	pop	{r4, pc}
    23c6:	bf00      	nop
    23c8:	0000e120 	.word	0x0000e120
    23cc:	0000e12f 	.word	0x0000e12f
    23d0:	0000e137 	.word	0x0000e137
    23d4:	0000e146 	.word	0x0000e146
    23d8:	0000e154 	.word	0x0000e154

000023dc <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
    23dc:	1e8b      	subs	r3, r1, #2
    23de:	2b02      	cmp	r3, #2
{
    23e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23e4:	4607      	mov	r7, r0
    23e6:	4688      	mov	r8, r1
    23e8:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
    23ea:	d833      	bhi.n	2454 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
    23ec:	6860      	ldr	r0, [r4, #4]
    23ee:	2210      	movs	r2, #16
    23f0:	2100      	movs	r1, #0
    23f2:	f009 f8f9 	bl	b5e8 <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
    23f6:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
    23fa:	4606      	mov	r6, r0
	if (argc < 3) {
    23fc:	d01e      	beq.n	243c <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
    23fe:	68a0      	ldr	r0, [r4, #8]
    2400:	220a      	movs	r2, #10
    2402:	2100      	movs	r1, #0
    2404:	f009 f8f0 	bl	b5e8 <strtoul>
    2408:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
    240a:	4a21      	ldr	r2, [pc, #132]	; (2490 <cmd_devmem+0xb4>)
    240c:	462b      	mov	r3, r5
    240e:	2108      	movs	r1, #8
    2410:	4638      	mov	r0, r7
    2412:	f008 f8d7 	bl	a5c4 <shell_fprintf>

	if (argc <= 3) {
    2416:	f1b8 0f04 	cmp.w	r8, #4
    241a:	d01e      	beq.n	245a <cmd_devmem+0x7e>
	switch (width) {
    241c:	2d10      	cmp	r5, #16
    241e:	d00f      	beq.n	2440 <cmd_devmem+0x64>
    2420:	2d20      	cmp	r5, #32
    2422:	d010      	beq.n	2446 <cmd_devmem+0x6a>
    2424:	2d08      	cmp	r5, #8
    2426:	d110      	bne.n	244a <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
    2428:	7833      	ldrb	r3, [r6, #0]
    242a:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
    242c:	4a19      	ldr	r2, [pc, #100]	; (2494 <cmd_devmem+0xb8>)
    242e:	2108      	movs	r1, #8
    2430:	4638      	mov	r0, r7
    2432:	f008 f8c7 	bl	a5c4 <shell_fprintf>
	int err = 0;
    2436:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
    2438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
    243c:	2520      	movs	r5, #32
    243e:	e7e4      	b.n	240a <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
    2440:	8833      	ldrh	r3, [r6, #0]
    2442:	b29b      	uxth	r3, r3
	if (err == 0) {
    2444:	e7f2      	b.n	242c <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    2446:	6833      	ldr	r3, [r6, #0]
    2448:	e7f0      	b.n	242c <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
    244a:	4a13      	ldr	r2, [pc, #76]	; (2498 <cmd_devmem+0xbc>)
    244c:	2108      	movs	r1, #8
    244e:	4638      	mov	r0, r7
    2450:	f008 f8b8 	bl	a5c4 <shell_fprintf>
		return -EINVAL;
    2454:	f06f 0015 	mvn.w	r0, #21
    2458:	e7ee      	b.n	2438 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
    245a:	68e0      	ldr	r0, [r4, #12]
    245c:	2210      	movs	r2, #16
    245e:	2100      	movs	r1, #0
    2460:	f009 f8c2 	bl	b5e8 <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    2464:	4a0d      	ldr	r2, [pc, #52]	; (249c <cmd_devmem+0xc0>)
    2466:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
    2468:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
    246a:	2108      	movs	r1, #8
    246c:	4638      	mov	r0, r7
    246e:	f008 f8a9 	bl	a5c4 <shell_fprintf>
	switch (width) {
    2472:	2d10      	cmp	r5, #16
    2474:	d006      	beq.n	2484 <cmd_devmem+0xa8>
    2476:	2d20      	cmp	r5, #32
    2478:	d007      	beq.n	248a <cmd_devmem+0xae>
    247a:	2d08      	cmp	r5, #8
    247c:	d1e5      	bne.n	244a <cmd_devmem+0x6e>
		sys_write8(value, addr);
    247e:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
    2480:	7034      	strb	r4, [r6, #0]
    2482:	e7d8      	b.n	2436 <cmd_devmem+0x5a>
		sys_write16(value, addr);
    2484:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
    2486:	8034      	strh	r4, [r6, #0]
    2488:	e7d5      	b.n	2436 <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    248a:	6034      	str	r4, [r6, #0]
    248c:	e7d3      	b.n	2436 <cmd_devmem+0x5a>
    248e:	bf00      	nop
    2490:	0000e1b1 	.word	0x0000e1b1
    2494:	0000e1dc 	.word	0x0000e1dc
    2498:	0000e1c6 	.word	0x0000e1c6
    249c:	0000e1ed 	.word	0x0000e1ed

000024a0 <set_bypass.isra.0>:
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    24a0:	b570      	push	{r4, r5, r6, lr}
	if (bypass && in_use) {
    24a2:	4e0e      	ldr	r6, [pc, #56]	; (24dc <set_bypass.isra.0+0x3c>)
static int set_bypass(const struct shell *sh, shell_bypass_cb_t bypass)
    24a4:	4604      	mov	r4, r0
	if (bypass && in_use) {
    24a6:	7833      	ldrb	r3, [r6, #0]
    24a8:	460d      	mov	r5, r1
    24aa:	b131      	cbz	r1, 24ba <set_bypass.isra.0+0x1a>
    24ac:	b12b      	cbz	r3, 24ba <set_bypass.isra.0+0x1a>
}
    24ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
    24b2:	4a0b      	ldr	r2, [pc, #44]	; (24e0 <set_bypass.isra.0+0x40>)
    24b4:	2101      	movs	r1, #1
    24b6:	f008 b885 	b.w	a5c4 <shell_fprintf>
	in_use = !in_use;
    24ba:	f083 0301 	eor.w	r3, r3, #1
    24be:	7033      	strb	r3, [r6, #0]
	if (in_use) {
    24c0:	b133      	cbz	r3, 24d0 <set_bypass.isra.0+0x30>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
    24c2:	4a08      	ldr	r2, [pc, #32]	; (24e4 <set_bypass.isra.0+0x44>)
    24c4:	2108      	movs	r1, #8
    24c6:	4620      	mov	r0, r4
    24c8:	f008 f87c 	bl	a5c4 <shell_fprintf>
		in_use = true;
    24cc:	2301      	movs	r3, #1
    24ce:	7033      	strb	r3, [r6, #0]
	shell_set_bypass(sh, bypass);
    24d0:	4629      	mov	r1, r5
    24d2:	4620      	mov	r0, r4
}
    24d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_set_bypass(sh, bypass);
    24d8:	f008 b899 	b.w	a60e <shell_set_bypass>
    24dc:	20001ae4 	.word	0x20001ae4
    24e0:	0000e201 	.word	0x0000e201
    24e4:	0000e23c 	.word	0x0000e23c

000024e8 <bypass_cb>:
{
    24e8:	b570      	push	{r4, r5, r6, lr}
    24ea:	4604      	mov	r4, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
    24ec:	483c      	ldr	r0, [pc, #240]	; (25e0 <bypass_cb+0xf8>)
    24ee:	7803      	ldrb	r3, [r0, #0]
    24f0:	2b18      	cmp	r3, #24
    24f2:	d102      	bne.n	24fa <bypass_cb+0x12>
    24f4:	780b      	ldrb	r3, [r1, #0]
    24f6:	2b11      	cmp	r3, #17
    24f8:	d031      	beq.n	255e <bypass_cb+0x76>
    24fa:	3a01      	subs	r2, #1
    24fc:	460b      	mov	r3, r1
    24fe:	1855      	adds	r5, r2, r1
		for (int i = 0; i < (len - 1); i++) {
    2500:	429d      	cmp	r5, r3
    2502:	d125      	bne.n	2550 <bypass_cb+0x68>
	tail = recv[len - 1];
    2504:	5c8b      	ldrb	r3, [r1, r2]
	if (is_ascii(*recv)) {
    2506:	780a      	ldrb	r2, [r1, #0]
	tail = recv[len - 1];
    2508:	7003      	strb	r3, [r0, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
    250a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    250e:	2b09      	cmp	r3, #9
    2510:	4c34      	ldr	r4, [pc, #208]	; (25e4 <bypass_cb+0xfc>)
    2512:	d904      	bls.n	251e <bypass_cb+0x36>
	if (is_ascii(*recv)) {
    2514:	f022 0320 	bic.w	r3, r2, #32
    2518:	3b41      	subs	r3, #65	; 0x41
    251a:	2b05      	cmp	r3, #5
    251c:	d804      	bhi.n	2528 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
    251e:	6823      	ldr	r3, [r4, #0]
    2520:	4931      	ldr	r1, [pc, #196]	; (25e8 <bypass_cb+0x100>)
    2522:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
    2524:	3301      	adds	r3, #1
    2526:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
    2528:	6823      	ldr	r3, [r4, #0]
    252a:	2b02      	cmp	r3, #2
    252c:	d134      	bne.n	2598 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    252e:	2210      	movs	r2, #16
    2530:	482d      	ldr	r0, [pc, #180]	; (25e8 <bypass_cb+0x100>)
    2532:	2100      	movs	r1, #0
    2534:	f009 f858 	bl	b5e8 <strtoul>
		*bytes = byte;
    2538:	4a2c      	ldr	r2, [pc, #176]	; (25ec <bypass_cb+0x104>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
    253a:	6813      	ldr	r3, [r2, #0]
    253c:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
    2540:	6013      	str	r3, [r2, #0]
		sum++;
    2542:	4a2b      	ldr	r2, [pc, #172]	; (25f0 <bypass_cb+0x108>)
    2544:	6813      	ldr	r3, [r2, #0]
    2546:	3301      	adds	r3, #1
    2548:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
    254a:	2300      	movs	r3, #0
    254c:	6023      	str	r3, [r4, #0]
    254e:	e023      	b.n	2598 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
    2550:	f813 6b01 	ldrb.w	r6, [r3], #1
    2554:	2e18      	cmp	r6, #24
    2556:	d1d3      	bne.n	2500 <bypass_cb+0x18>
    2558:	781e      	ldrb	r6, [r3, #0]
    255a:	2e11      	cmp	r6, #17
    255c:	d1d0      	bne.n	2500 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
    255e:	4d24      	ldr	r5, [pc, #144]	; (25f0 <bypass_cb+0x108>)
    2560:	4a24      	ldr	r2, [pc, #144]	; (25f4 <bypass_cb+0x10c>)
    2562:	682b      	ldr	r3, [r5, #0]
    2564:	2108      	movs	r1, #8
    2566:	4620      	mov	r0, r4
    2568:	f008 f82c 	bl	a5c4 <shell_fprintf>
		set_bypass(sh, NULL);
    256c:	4620      	mov	r0, r4
    256e:	2100      	movs	r1, #0
    2570:	f7ff ff96 	bl	24a0 <set_bypass.isra.0>
		if (!littleendian) {
    2574:	4b20      	ldr	r3, [pc, #128]	; (25f8 <bypass_cb+0x110>)
    2576:	7818      	ldrb	r0, [r3, #0]
    2578:	b970      	cbnz	r0, 2598 <bypass_cb+0xb0>
    257a:	4a20      	ldr	r2, [pc, #128]	; (25fc <bypass_cb+0x114>)
    257c:	682b      	ldr	r3, [r5, #0]
    257e:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
    2580:	2b04      	cmp	r3, #4
    2582:	dc0a      	bgt.n	259a <bypass_cb+0xb2>
    2584:	b108      	cbz	r0, 258a <bypass_cb+0xa2>
    2586:	6011      	str	r1, [r2, #0]
    2588:	602b      	str	r3, [r5, #0]
			if (sum % 4 == 0) {
    258a:	f013 0103 	ands.w	r1, r3, #3
    258e:	d10b      	bne.n	25a8 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
    2590:	6812      	ldr	r2, [r2, #0]
    2592:	6813      	ldr	r3, [r2, #0]
    2594:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
    2596:	6013      	str	r3, [r2, #0]
}
    2598:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
    259a:	6808      	ldr	r0, [r1, #0]
    259c:	ba00      	rev	r0, r0
    259e:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
    25a2:	3b04      	subs	r3, #4
				data++;
    25a4:	2001      	movs	r0, #1
    25a6:	e7eb      	b.n	2580 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
    25a8:	425b      	negs	r3, r3
    25aa:	f003 0303 	and.w	r3, r3, #3
    25ae:	bf58      	it	pl
    25b0:	4259      	negpl	r1, r3
    25b2:	2902      	cmp	r1, #2
    25b4:	d104      	bne.n	25c0 <bypass_cb+0xd8>
				*data = __bswap_16(*data);
    25b6:	6812      	ldr	r2, [r2, #0]
    25b8:	8813      	ldrh	r3, [r2, #0]
    25ba:	ba5b      	rev16	r3, r3
    25bc:	b29b      	uxth	r3, r3
    25be:	e7ea      	b.n	2596 <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
    25c0:	2903      	cmp	r1, #3
    25c2:	d1e9      	bne.n	2598 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
    25c4:	6810      	ldr	r0, [r2, #0]
    25c6:	6802      	ldr	r2, [r0, #0]
    25c8:	0411      	lsls	r1, r2, #16
    25ca:	f3c2 4307 	ubfx	r3, r2, #16, #8
    25ce:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    25d2:	430b      	orrs	r3, r1
    25d4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    25d8:	4313      	orrs	r3, r2
    25da:	6003      	str	r3, [r0, #0]
    25dc:	e7dc      	b.n	2598 <bypass_cb+0xb0>
    25de:	bf00      	nop
    25e0:	20001ae6 	.word	0x20001ae6
    25e4:	200011bc 	.word	0x200011bc
    25e8:	20001ae2 	.word	0x20001ae2
    25ec:	200011b8 	.word	0x200011b8
    25f0:	200011c4 	.word	0x200011c4
    25f4:	0000e266 	.word	0x0000e266
    25f8:	20001ae5 	.word	0x20001ae5
    25fc:	200011c0 	.word	0x200011c0

00002600 <cmd_load>:
{
    2600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2604:	460d      	mov	r5, r1
	chunk_element = 0;
    2606:	492d      	ldr	r1, [pc, #180]	; (26bc <cmd_load+0xbc>)
	littleendian = false;
    2608:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 26c0 <cmd_load+0xc0>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    260c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 26c4 <cmd_load+0xc4>
			shell_print(sh, "Unknown option \"%s\"", arg);
    2610:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 26c8 <cmd_load+0xc8>
	littleendian = false;
    2614:	2300      	movs	r3, #0
	chunk_element = 0;
    2616:	600b      	str	r3, [r1, #0]
	sum = 0;
    2618:	492c      	ldr	r1, [pc, #176]	; (26cc <cmd_load+0xcc>)
	littleendian = false;
    261a:	f888 3000 	strb.w	r3, [r8]
{
    261e:	4606      	mov	r6, r0
	sum = 0;
    2620:	600b      	str	r3, [r1, #0]
	while (argc >= 2) {
    2622:	4614      	mov	r4, r2
    2624:	2d01      	cmp	r5, #1
    2626:	4627      	mov	r7, r4
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    2628:	f854 3f04 	ldr.w	r3, [r4, #4]!
	while (argc >= 2) {
    262c:	d921      	bls.n	2672 <cmd_load+0x72>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    262e:	4618      	mov	r0, r3
    2630:	2202      	movs	r2, #2
    2632:	4649      	mov	r1, r9
    2634:	9301      	str	r3, [sp, #4]
    2636:	f009 f8b6 	bl	b7a6 <strncmp>
    263a:	9b01      	ldr	r3, [sp, #4]
    263c:	b988      	cbnz	r0, 2662 <cmd_load+0x62>
    263e:	6822      	ldr	r2, [r4, #0]
    2640:	7892      	ldrb	r2, [r2, #2]
    2642:	3a00      	subs	r2, #0
    2644:	bf18      	it	ne
    2646:	2201      	movne	r2, #1
    2648:	eb03 0a02 	add.w	sl, r3, r2
		if (!strncmp(arg, "-e", 2)) {
    264c:	4920      	ldr	r1, [pc, #128]	; (26d0 <cmd_load+0xd0>)
    264e:	2202      	movs	r2, #2
    2650:	4650      	mov	r0, sl
    2652:	f009 f8a8 	bl	b7a6 <strncmp>
    2656:	b930      	cbnz	r0, 2666 <cmd_load+0x66>
			littleendian = true;
    2658:	2301      	movs	r3, #1
    265a:	f888 3000 	strb.w	r3, [r8]
		argc--;
    265e:	3d01      	subs	r5, #1
    2660:	e7e0      	b.n	2624 <cmd_load+0x24>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
    2662:	2200      	movs	r2, #0
    2664:	e7f0      	b.n	2648 <cmd_load+0x48>
		} else if (!strcmp(arg, "--")) {
    2666:	4649      	mov	r1, r9
    2668:	4650      	mov	r0, sl
    266a:	f009 f890 	bl	b78e <strcmp>
    266e:	b9b0      	cbnz	r0, 269e <cmd_load+0x9e>
			argv++;
    2670:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    2672:	2200      	movs	r2, #0
    2674:	4611      	mov	r1, r2
    2676:	6878      	ldr	r0, [r7, #4]
    2678:	f008 ff42 	bl	b500 <strtol>
    267c:	4b15      	ldr	r3, [pc, #84]	; (26d4 <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    267e:	2200      	movs	r2, #0
    2680:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
    2682:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    2684:	6878      	ldr	r0, [r7, #4]
    2686:	f008 ff3b 	bl	b500 <strtol>
    268a:	4b13      	ldr	r3, [pc, #76]	; (26d8 <cmd_load+0xd8>)
	set_bypass(sh, bypass_cb);
    268c:	4913      	ldr	r1, [pc, #76]	; (26dc <cmd_load+0xdc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
    268e:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
    2690:	4630      	mov	r0, r6
    2692:	f7ff ff05 	bl	24a0 <set_bypass.isra.0>
}
    2696:	2000      	movs	r0, #0
    2698:	b003      	add	sp, #12
    269a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
    269e:	f89a 2000 	ldrb.w	r2, [sl]
    26a2:	2a2d      	cmp	r2, #45	; 0x2d
    26a4:	d1e5      	bne.n	2672 <cmd_load+0x72>
    26a6:	f89a 2001 	ldrb.w	r2, [sl, #1]
    26aa:	2a00      	cmp	r2, #0
    26ac:	d0e1      	beq.n	2672 <cmd_load+0x72>
			shell_print(sh, "Unknown option \"%s\"", arg);
    26ae:	4653      	mov	r3, sl
    26b0:	465a      	mov	r2, fp
    26b2:	2108      	movs	r1, #8
    26b4:	4630      	mov	r0, r6
    26b6:	f007 ff85 	bl	a5c4 <shell_fprintf>
    26ba:	e7d0      	b.n	265e <cmd_load+0x5e>
    26bc:	200011bc 	.word	0x200011bc
    26c0:	20001ae5 	.word	0x20001ae5
    26c4:	0000e280 	.word	0x0000e280
    26c8:	0000e286 	.word	0x0000e286
    26cc:	200011c4 	.word	0x200011c4
    26d0:	0000e283 	.word	0x0000e283
    26d4:	200011b8 	.word	0x200011b8
    26d8:	200011c0 	.word	0x200011c0
    26dc:	000024e9 	.word	0x000024e9

000026e0 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
    26e0:	b507      	push	{r0, r1, r2, lr}
    26e2:	480a      	ldr	r0, [pc, #40]	; (270c <enable_shell_uart+0x2c>)
    26e4:	f009 fe98 	bl	c418 <z_device_is_ready>
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	if (!device_is_ready(dev)) {
    26e8:	b160      	cbz	r0, 2704 <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
    26ea:	4a09      	ldr	r2, [pc, #36]	; (2710 <enable_shell_uart+0x30>)
    26ec:	4907      	ldr	r1, [pc, #28]	; (270c <enable_shell_uart+0x2c>)
    26ee:	6812      	ldr	r2, [r2, #0]
    26f0:	4808      	ldr	r0, [pc, #32]	; (2714 <enable_shell_uart+0x34>)
    26f2:	2304      	movs	r3, #4
    26f4:	9300      	str	r3, [sp, #0]
    26f6:	2301      	movs	r3, #1
    26f8:	f000 fe60 	bl	33bc <shell_init>

	return 0;
    26fc:	2000      	movs	r0, #0
}
    26fe:	b003      	add	sp, #12
    2700:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
    2704:	f06f 0012 	mvn.w	r0, #18
    2708:	e7f9      	b.n	26fe <enable_shell_uart+0x1e>
    270a:	bf00      	nop
    270c:	0000cc4c 	.word	0x0000cc4c
    2710:	0000d404 	.word	0x0000d404
    2714:	0000cf4c 	.word	0x0000cf4c

00002718 <init>:
{
    2718:	b570      	push	{r4, r5, r6, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    271a:	6846      	ldr	r6, [r0, #4]
{
    271c:	460c      	mov	r4, r1
	sh_uart->ctrl_blk->dev = (const struct device *)config;
    271e:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
    2720:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->context = context;
    2722:	608b      	str	r3, [r1, #8]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
    2724:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->handler = evt_handler;
    2726:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
    272a:	2208      	movs	r2, #8
	buf->tail = 0;
    272c:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    2730:	4629      	mov	r1, r5
    2732:	4410      	add	r0, r2
    2734:	f009 f87c 	bl	b830 <memset>
	ring_buf_reset(sh_uart->rx_ringbuf);
    2738:	68f0      	ldr	r0, [r6, #12]
    273a:	2208      	movs	r2, #8
	buf->tail = 0;
    273c:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    2740:	4629      	mov	r1, r5
    2742:	4410      	add	r0, r2
    2744:	f009 f874 	bl	b830 <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
    2748:	6833      	ldr	r3, [r6, #0]
    274a:	60dd      	str	r5, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    274c:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    274e:	b12b      	cbz	r3, 275c <init+0x44>
    2750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2752:	b11b      	cbz	r3, 275c <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
    2754:	4905      	ldr	r1, [pc, #20]	; (276c <init+0x54>)
    2756:	4632      	mov	r2, r6
    2758:	4620      	mov	r0, r4
    275a:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
    275c:	68a3      	ldr	r3, [r4, #8]
    275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2760:	b10b      	cbz	r3, 2766 <init+0x4e>
		api->irq_rx_enable(dev);
    2762:	4620      	mov	r0, r4
    2764:	4798      	blx	r3
}
    2766:	2000      	movs	r0, #0
    2768:	bd70      	pop	{r4, r5, r6, pc}
    276a:	bf00      	nop
    276c:	00002771 	.word	0x00002771

00002770 <uart_callback>:
{
    2770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2774:	4604      	mov	r4, r0
    2776:	b088      	sub	sp, #32
    2778:	460e      	mov	r6, r1
	if (api->irq_update == NULL) {
    277a:	6883      	ldr	r3, [r0, #8]
    277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    277e:	b103      	cbz	r3, 2782 <uart_callback+0x12>
	return api->irq_update(dev);
    2780:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
    2782:	68a3      	ldr	r3, [r4, #8]
    2784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2786:	bb4b      	cbnz	r3, 27dc <uart_callback+0x6c>
			LOG_WRN("RX ring buffer full.");
    2788:	f8df 911c 	ldr.w	r9, [pc, #284]	; 28a8 <uart_callback+0x138>
    278c:	f8df a11c 	ldr.w	sl, [pc, #284]	; 28ac <uart_callback+0x13c>
{
    2790:	f04f 0800 	mov.w	r8, #0
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
    2794:	68f0      	ldr	r0, [r6, #12]
    2796:	4669      	mov	r1, sp
    2798:	6902      	ldr	r2, [r0, #16]
    279a:	f007 f8a2 	bl	98e2 <ring_buf_put_claim>
		if (len > 0) {
    279e:	4607      	mov	r7, r0
    27a0:	2800      	cmp	r0, #0
    27a2:	d043      	beq.n	282c <uart_callback+0xbc>
	if (api->fifo_read == NULL) {
    27a4:	68a3      	ldr	r3, [r4, #8]
			rd_len = uart_fifo_read(dev, data, len);
    27a6:	9900      	ldr	r1, [sp, #0]
    27a8:	699b      	ldr	r3, [r3, #24]
    27aa:	2b00      	cmp	r3, #0
    27ac:	d03b      	beq.n	2826 <uart_callback+0xb6>
	return api->fifo_read(dev, rx_data, size);
    27ae:	4602      	mov	r2, r0
    27b0:	4620      	mov	r0, r4
    27b2:	4798      	blx	r3
				new_data = true;
    27b4:	1e05      	subs	r5, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    27b6:	4629      	mov	r1, r5
    27b8:	68f0      	ldr	r0, [r6, #12]
				new_data = true;
    27ba:	bf18      	it	ne
    27bc:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
    27c0:	f007 f8bc 	bl	993c <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
    27c4:	b10d      	cbz	r5, 27ca <uart_callback+0x5a>
    27c6:	42af      	cmp	r7, r5
    27c8:	d0e4      	beq.n	2794 <uart_callback+0x24>
	if (new_data) {
    27ca:	f1b8 0f00 	cmp.w	r8, #0
    27ce:	d009      	beq.n	27e4 <uart_callback+0x74>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
    27d0:	6833      	ldr	r3, [r6, #0]
    27d2:	2000      	movs	r0, #0
    27d4:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    27d8:	4790      	blx	r2
}
    27da:	e003      	b.n	27e4 <uart_callback+0x74>
	return api->irq_rx_ready(dev);
    27dc:	4620      	mov	r0, r4
    27de:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
    27e0:	2800      	cmp	r0, #0
    27e2:	d1d1      	bne.n	2788 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
    27e4:	68a3      	ldr	r3, [r4, #8]
    27e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    27e8:	2b00      	cmp	r3, #0
    27ea:	d13c      	bne.n	2866 <uart_callback+0xf6>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
    27ec:	68b0      	ldr	r0, [r6, #8]
    27ee:	a901      	add	r1, sp, #4
    27f0:	6902      	ldr	r2, [r0, #16]
    27f2:	f007 f8de 	bl	99b2 <ring_buf_get_claim>
	if (len) {
    27f6:	4605      	mov	r5, r0
    27f8:	2800      	cmp	r0, #0
    27fa:	d04f      	beq.n	289c <uart_callback+0x12c>
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    27fc:	68a3      	ldr	r3, [r4, #8]
    27fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2800:	2b00      	cmp	r3, #0
    2802:	d037      	beq.n	2874 <uart_callback+0x104>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    2804:	aa02      	add	r2, sp, #8
    2806:	2104      	movs	r1, #4
    2808:	4620      	mov	r0, r4
    280a:	4798      	blx	r3
			if (err == -ENOSYS || err == -ENOTSUP) {
    280c:	f110 0f58 	cmn.w	r0, #88	; 0x58
    2810:	d030      	beq.n	2874 <uart_callback+0x104>
    2812:	3086      	adds	r0, #134	; 0x86
    2814:	d02e      	beq.n	2874 <uart_callback+0x104>
			if (dtr) {
    2816:	9b02      	ldr	r3, [sp, #8]
    2818:	bb63      	cbnz	r3, 2874 <uart_callback+0x104>
	return z_impl_k_sleep(timeout);
    281a:	2100      	movs	r1, #0
    281c:	f640 40cd 	movw	r0, #3277	; 0xccd
    2820:	f006 fb36 	bl	8e90 <z_impl_k_sleep>
		while (true) {
    2824:	e7ea      	b.n	27fc <uart_callback+0x8c>
		return -ENOSYS;
    2826:	f06f 0057 	mvn.w	r0, #87	; 0x57
    282a:	e7c3      	b.n	27b4 <uart_callback+0x44>
			LOG_WRN("RX ring buffer full.");
    282c:	f8d9 3000 	ldr.w	r3, [r9]
    2830:	f013 0f06 	tst.w	r3, #6
    2834:	d00b      	beq.n	284e <uart_callback+0xde>
    2836:	2302      	movs	r3, #2
    2838:	f8cd a018 	str.w	sl, [sp, #24]
    283c:	9301      	str	r3, [sp, #4]
    283e:	9305      	str	r3, [sp, #20]
    2840:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    2844:	4603      	mov	r3, r0
    2846:	aa05      	add	r2, sp, #20
    2848:	4648      	mov	r0, r9
    284a:	f007 fcad 	bl	a1a8 <z_impl_z_log_msg2_static_create>
	if (api->fifo_read == NULL) {
    284e:	68a3      	ldr	r3, [r4, #8]
    2850:	699b      	ldr	r3, [r3, #24]
    2852:	b12b      	cbz	r3, 2860 <uart_callback+0xf0>
	return api->fifo_read(dev, rx_data, size);
    2854:	2201      	movs	r2, #1
    2856:	a902      	add	r1, sp, #8
    2858:	4620      	mov	r0, r4
    285a:	4798      	blx	r3
    285c:	4605      	mov	r5, r0
    285e:	e7b1      	b.n	27c4 <uart_callback+0x54>
		return -ENOSYS;
    2860:	f06f 0557 	mvn.w	r5, #87	; 0x57
    2864:	e7ae      	b.n	27c4 <uart_callback+0x54>
	return api->irq_tx_ready(dev);
    2866:	4620      	mov	r0, r4
    2868:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
    286a:	2800      	cmp	r0, #0
    286c:	d1be      	bne.n	27ec <uart_callback+0x7c>
}
    286e:	b008      	add	sp, #32
    2870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (api->fifo_fill == NULL) {
    2874:	68a3      	ldr	r3, [r4, #8]
		len = uart_fifo_fill(dev, data, len);
    2876:	9901      	ldr	r1, [sp, #4]
    2878:	695b      	ldr	r3, [r3, #20]
    287a:	b163      	cbz	r3, 2896 <uart_callback+0x126>
	return api->fifo_fill(dev, tx_data, size);
    287c:	462a      	mov	r2, r5
    287e:	4620      	mov	r0, r4
    2880:	4798      	blx	r3
    2882:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
    2884:	68b0      	ldr	r0, [r6, #8]
    2886:	f007 f8bf 	bl	9a08 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    288a:	6833      	ldr	r3, [r6, #0]
    288c:	2001      	movs	r0, #1
    288e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    2892:	4790      	blx	r2
}
    2894:	e7eb      	b.n	286e <uart_callback+0xfe>
		return -ENOSYS;
    2896:	f06f 0157 	mvn.w	r1, #87	; 0x57
    289a:	e7f3      	b.n	2884 <uart_callback+0x114>
		uart_irq_tx_disable(dev);
    289c:	4620      	mov	r0, r4
    289e:	f007 fd11 	bl	a2c4 <uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
    28a2:	6833      	ldr	r3, [r6, #0]
    28a4:	60dd      	str	r5, [r3, #12]
    28a6:	e7f0      	b.n	288a <uart_callback+0x11a>
    28a8:	20000290 	.word	0x20000290
    28ac:	0000e328 	.word	0x0000e328

000028b0 <write>:
	return 0;
}

static int write(const struct shell_transport *transport,
		 const void *data, size_t length, size_t *cnt)
{
    28b0:	b538      	push	{r3, r4, r5, lr}
    28b2:	461c      	mov	r4, r3
	struct shell_rtt *sh_rtt = (struct shell_rtt *)transport->ctx;
	const uint8_t *data8 = (const uint8_t *)data;

	if (rtt_blocking) {
    28b4:	4b0b      	ldr	r3, [pc, #44]	; (28e4 <write+0x34>)
	struct shell_rtt *sh_rtt = (struct shell_rtt *)transport->ctx;
    28b6:	6845      	ldr	r5, [r0, #4]
	if (rtt_blocking) {
    28b8:	7818      	ldrb	r0, [r3, #0]
    28ba:	b170      	cbz	r0, 28da <write+0x2a>
		*cnt = SEGGER_RTT_WriteNoLock(0, data8, length);
    28bc:	2000      	movs	r0, #0
    28be:	f005 f9c1 	bl	7c44 <SEGGER_RTT_WriteNoLock>
    28c2:	6020      	str	r0, [r4, #0]
		while (SEGGER_RTT_HasDataUp(0)) {
    28c4:	2000      	movs	r0, #0
    28c6:	f005 fa11 	bl	7cec <SEGGER_RTT_HasDataUp>
    28ca:	2800      	cmp	r0, #0
    28cc:	d1fa      	bne.n	28c4 <write+0x14>
		}
	} else {
		*cnt = SEGGER_RTT_Write(0, data8, length);
	}

	sh_rtt->handler(SHELL_TRANSPORT_EVT_TX_RDY, sh_rtt->context);
    28ce:	682b      	ldr	r3, [r5, #0]
    28d0:	6c29      	ldr	r1, [r5, #64]	; 0x40
    28d2:	2001      	movs	r0, #1
    28d4:	4798      	blx	r3

	return 0;
}
    28d6:	2000      	movs	r0, #0
    28d8:	bd38      	pop	{r3, r4, r5, pc}
		*cnt = SEGGER_RTT_Write(0, data8, length);
    28da:	f005 f9e3 	bl	7ca4 <SEGGER_RTT_Write>
    28de:	6020      	str	r0, [r4, #0]
    28e0:	e7f5      	b.n	28ce <write+0x1e>
    28e2:	bf00      	nop
    28e4:	20001b05 	.word	0x20001b05

000028e8 <enable>:
{
    28e8:	b508      	push	{r3, lr}
	if (blocking) {
    28ea:	b131      	cbz	r1, 28fa <enable+0x12>
		rtt_blocking = true;
    28ec:	4b04      	ldr	r3, [pc, #16]	; (2900 <enable+0x18>)
	struct shell_rtt *sh_rtt = (struct shell_rtt *)transport->ctx;
    28ee:	6840      	ldr	r0, [r0, #4]
		rtt_blocking = true;
    28f0:	2201      	movs	r2, #1
    28f2:	701a      	strb	r2, [r3, #0]
	z_impl_k_timer_stop(timer);
    28f4:	3008      	adds	r0, #8
    28f6:	f009 ffbc 	bl	c872 <z_impl_k_timer_stop>
}
    28fa:	2000      	movs	r0, #0
    28fc:	bd08      	pop	{r3, pc}
    28fe:	bf00      	nop
    2900:	20001b05 	.word	0x20001b05

00002904 <enable_shell_rtt>:
	.write = write,
	.read = read
};

static int enable_shell_rtt(const struct device *arg)
{
    2904:	b507      	push	{r0, r1, r2, lr}
	uint32_t level = (CONFIG_SHELL_RTT_INIT_LOG_LEVEL > LOG_LEVEL_DBG) ?
		      CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_RTT_INIT_LOG_LEVEL;
	static const struct shell_backend_config_flags cfg_flags =
					SHELL_DEFAULT_BACKEND_CONFIG_FLAGS;

	shell_init(&shell_rtt, NULL, cfg_flags, log_backend, level);
    2906:	4a06      	ldr	r2, [pc, #24]	; (2920 <enable_shell_rtt+0x1c>)
    2908:	4806      	ldr	r0, [pc, #24]	; (2924 <enable_shell_rtt+0x20>)
    290a:	6812      	ldr	r2, [r2, #0]
    290c:	2304      	movs	r3, #4
    290e:	9300      	str	r3, [sp, #0]
    2910:	2100      	movs	r1, #0
    2912:	2301      	movs	r3, #1
    2914:	f000 fd52 	bl	33bc <shell_init>

	return 0;
}
    2918:	2000      	movs	r0, #0
    291a:	b003      	add	sp, #12
    291c:	f85d fb04 	ldr.w	pc, [sp], #4
    2920:	0000d484 	.word	0x0000d484
    2924:	0000cf1c 	.word	0x0000cf1c

00002928 <init>:
{
    2928:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct shell_rtt *sh_rtt = (struct shell_rtt *)transport->ctx;
    292a:	6844      	ldr	r4, [r0, #4]
	k_timer_init(&sh_rtt->timer, timer_handler, NULL);
    292c:	490a      	ldr	r1, [pc, #40]	; (2958 <init+0x30>)
	sh_rtt->handler = evt_handler;
    292e:	6022      	str	r2, [r4, #0]
	k_timer_init(&sh_rtt->timer, timer_handler, NULL);
    2930:	f104 0508 	add.w	r5, r4, #8
	sh_rtt->context = context;
    2934:	6423      	str	r3, [r4, #64]	; 0x40
	k_timer_init(&sh_rtt->timer, timer_handler, NULL);
    2936:	2200      	movs	r2, #0
    2938:	4628      	mov	r0, r5
    293a:	f009 ff8e 	bl	c85a <k_timer_init>
	timer->user_data = user_data;
    293e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    2942:	63e4      	str	r4, [r4, #60]	; 0x3c
    2944:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
    2946:	4628      	mov	r0, r5
    2948:	e9cd 2300 	strd	r2, r3, [sp]
    294c:	f006 fcd2 	bl	92f4 <z_impl_k_timer_start>
}
    2950:	2000      	movs	r0, #0
    2952:	b003      	add	sp, #12
    2954:	bd30      	pop	{r4, r5, pc}
    2956:	bf00      	nop
    2958:	0000a3af 	.word	0x0000a3af

0000295c <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
    295c:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    295e:	6881      	ldr	r1, [r0, #8]
{
    2960:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
    2962:	3108      	adds	r1, #8
    2964:	f001 f8ba 	bl	3adc <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    2968:	68a1      	ldr	r1, [r4, #8]
    296a:	4a03      	ldr	r2, [pc, #12]	; (2978 <shell_internal_help_print+0x1c>)
    296c:	4620      	mov	r0, r4
    296e:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
    2970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
    2974:	f001 b85a 	b.w	3a2c <z_shell_help_subcmd_print>
    2978:	0000e398 	.word	0x0000e398

0000297c <z_cursor_next_line_move.isra.0>:
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    297c:	4901      	ldr	r1, [pc, #4]	; (2984 <z_cursor_next_line_move.isra.0+0x8>)
    297e:	f007 bd64 	b.w	a44a <z_shell_raw_fprintf>
    2982:	bf00      	nop
    2984:	0000dff1 	.word	0x0000dff1

00002988 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
    2988:	b537      	push	{r0, r1, r2, r4, r5, lr}
    298a:	4604      	mov	r4, r0
	return sh->ctx->ctx.flags.history_exit == 1;
    298c:	6880      	ldr	r0, [r0, #8]
    298e:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
    2992:	075a      	lsls	r2, r3, #29
{
    2994:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
    2996:	d505      	bpl.n	29a4 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
    2998:	2100      	movs	r1, #0
    299a:	f007 fd97 	bl	a4cc <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
    299e:	68e0      	ldr	r0, [r4, #12]
    29a0:	f008 fcac 	bl	b2fc <z_shell_history_mode_exit>
 *
 * @return True if in browsing mode.
 */
static inline bool z_shell_history_active(struct shell_history *history)
{
	return (history->current) ? true : false;
    29a4:	68e3      	ldr	r3, [r4, #12]
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
    29a6:	68db      	ldr	r3, [r3, #12]
    29a8:	b96b      	cbnz	r3, 29c6 <history_handle+0x3e>
		if (up) {
    29aa:	2d00      	cmp	r5, #0
    29ac:	d037      	beq.n	2a1e <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
    29ae:	68a0      	ldr	r0, [r4, #8]
    29b0:	3042      	adds	r0, #66	; 0x42
    29b2:	f007 fd44 	bl	a43e <z_shell_strlen>

			if (cmd_len) {
    29b6:	68a3      	ldr	r3, [r4, #8]
    29b8:	b398      	cbz	r0, 2a22 <history_handle+0x9a>
				strcpy(shell->ctx->temp_buff,
    29ba:	f103 0142 	add.w	r1, r3, #66	; 0x42
    29be:	f503 70a1 	add.w	r0, r3, #322	; 0x142
    29c2:	f008 feaa 	bl	b71a <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
    29c6:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
    29c8:	68e0      	ldr	r0, [r4, #12]
    29ca:	f10d 0306 	add.w	r3, sp, #6
    29ce:	3242      	adds	r2, #66	; 0x42
    29d0:	4629      	mov	r1, r5
    29d2:	f008 fc96 	bl	b302 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
    29d6:	b958      	cbnz	r0, 29f0 <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
    29d8:	68a0      	ldr	r0, [r4, #8]
    29da:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    29de:	3042      	adds	r0, #66	; 0x42
    29e0:	f008 fe9b 	bl	b71a <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
    29e4:	68a0      	ldr	r0, [r4, #8]
    29e6:	3042      	adds	r0, #66	; 0x42
    29e8:	f007 fd29 	bl	a43e <z_shell_strlen>
    29ec:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
    29f0:	4620      	mov	r0, r4
    29f2:	f008 f911 	bl	ac18 <z_shell_op_cursor_home_move>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    29f6:	68a3      	ldr	r3, [r4, #8]
    29f8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    29fc:	069b      	lsls	r3, r3, #26
    29fe:	d503      	bpl.n	2a08 <history_handle+0x80>
    2a00:	4909      	ldr	r1, [pc, #36]	; (2a28 <history_handle+0xa0>)
    2a02:	6960      	ldr	r0, [r4, #20]
    2a04:	f007 fd21 	bl	a44a <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
    2a08:	4620      	mov	r0, r4
    2a0a:	f000 fedf 	bl	37cc <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
    2a0e:	68a3      	ldr	r3, [r4, #8]
    2a10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2a14:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
    2a16:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
    2a18:	4620      	mov	r0, r4
    2a1a:	f008 f86a 	bl	aaf2 <z_shell_op_cond_next_line>
}
    2a1e:	b003      	add	sp, #12
    2a20:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
    2a22:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
    2a26:	e7ce      	b.n	29c6 <history_handle+0x3e>
    2a28:	0000d040 	.word	0x0000d040

00002a2c <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
    2a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
    2a30:	2300      	movs	r3, #0
{
    2a32:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
    2a34:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
    2a38:	6883      	ldr	r3, [r0, #8]
{
    2a3a:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
    2a3c:	3342      	adds	r3, #66	; 0x42
    2a3e:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
    2a40:	f008 f8f0 	bl	ac24 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
    2a44:	4620      	mov	r0, r4
    2a46:	f008 f840 	bl	aaca <z_shell_cursor_in_empty_line>
    2a4a:	b910      	cbnz	r0, 2a52 <execute+0x26>
		z_cursor_next_line_move(shell);
    2a4c:	6960      	ldr	r0, [r4, #20]
    2a4e:	f7ff ff95 	bl	297c <z_cursor_next_line_move.isra.0>
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
    2a52:	68a0      	ldr	r0, [r4, #8]
    2a54:	2214      	movs	r2, #20
    2a56:	2100      	movs	r1, #0
    2a58:	3008      	adds	r0, #8
    2a5a:	f008 fee9 	bl	b830 <memset>

	if (IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		z_shell_cmd_trim(shell);
    2a5e:	4620      	mov	r0, r4
    2a60:	f007 ffac 	bl	a9bc <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
    2a64:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
    2a66:	68e0      	ldr	r0, [r4, #12]
    2a68:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    2a6a:	3142      	adds	r1, #66	; 0x42
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
    2a6c:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
    2a6e:	f008 fc7f 	bl	b370 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
    2a72:	4620      	mov	r0, r4
    2a74:	f008 fd02 	bl	b47c <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
    2a78:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	size_t cmd_with_handler_lvl = 0;
    2a7c:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
    2a7e:	46b2      	mov	sl, r6
    2a80:	af11      	add	r7, sp, #68	; 0x44
    2a82:	9602      	str	r6, [sp, #8]
    2a84:	4635      	mov	r5, r6
    2a86:	46b3      	mov	fp, r6
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
    2a88:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    2a8c:	2a01      	cmp	r2, #1
    2a8e:	f000 80d6 	beq.w	2c3e <execute+0x212>
    2a92:	2b0b      	cmp	r3, #11
    2a94:	f240 80ae 	bls.w	2bf4 <execute+0x1c8>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    2a98:	9b06      	ldr	r3, [sp, #24]
    2a9a:	2b02      	cmp	r3, #2
    2a9c:	f040 80ae 	bne.w	2bfc <execute+0x1d0>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
    2aa0:	4b89      	ldr	r3, [pc, #548]	; (2cc8 <execute+0x29c>)
    2aa2:	4a8a      	ldr	r2, [pc, #552]	; (2ccc <execute+0x2a0>)
    2aa4:	2101      	movs	r1, #1
    2aa6:	e014      	b.n	2ad2 <execute+0xa6>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    2aa8:	9a03      	ldr	r2, [sp, #12]
    2aaa:	2302      	movs	r3, #2
    2aac:	4639      	mov	r1, r7
    2aae:	a806      	add	r0, sp, #24
    2ab0:	f007 fe18 	bl	a6e4 <z_shell_make_argv>
		if (argc == 0) {
    2ab4:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
    2ab6:	687a      	ldr	r2, [r7, #4]
    2ab8:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
    2aba:	4603      	mov	r3, r0
		if (argc == 0) {
    2abc:	b929      	cbnz	r1, 2aca <execute+0x9e>
			return -ENOEXEC;
    2abe:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
    2ac2:	4628      	mov	r0, r5
    2ac4:	b01f      	add	sp, #124	; 0x7c
    2ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
    2aca:	2901      	cmp	r1, #1
    2acc:	d105      	bne.n	2ada <execute+0xae>
    2ace:	b120      	cbz	r0, 2ada <execute+0xae>
			z_shell_fprintf(shell, SHELL_ERROR,
    2ad0:	4a7f      	ldr	r2, [pc, #508]	; (2cd0 <execute+0x2a4>)
    2ad2:	4620      	mov	r0, r4
    2ad4:	f008 f952 	bl	ad7c <z_shell_fprintf>
    2ad8:	e7f1      	b.n	2abe <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2ada:	9b05      	ldr	r3, [sp, #20]
    2adc:	b34b      	cbz	r3, 2b32 <execute+0x106>
		    z_shell_help_request(argvp[0])) {
    2ade:	6838      	ldr	r0, [r7, #0]
    2ae0:	f001 f820 	bl	3b24 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
    2ae4:	b198      	cbz	r0, 2b0e <execute+0xe2>
			if (help_entry.help) {
    2ae6:	b166      	cbz	r6, 2b02 <execute+0xd6>
				shell->ctx->active_cmd = help_entry;
    2ae8:	68a5      	ldr	r5, [r4, #8]
    2aea:	960d      	str	r6, [sp, #52]	; 0x34
    2aec:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
    2aee:	ae0c      	add	r6, sp, #48	; 0x30
    2af0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2af4:	6833      	ldr	r3, [r6, #0]
    2af6:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
    2af8:	4620      	mov	r0, r4
    2afa:	f7ff ff2f 	bl	295c <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
    2afe:	2501      	movs	r5, #1
    2b00:	e7df      	b.n	2ac2 <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
    2b02:	4a74      	ldr	r2, [pc, #464]	; (2cd4 <execute+0x2a8>)
		z_shell_fprintf(shell, SHELL_ERROR,
    2b04:	2101      	movs	r1, #1
    2b06:	4620      	mov	r0, r4
    2b08:	f008 f938 	bl	ad7c <z_shell_fprintf>
		return false;
    2b0c:	e7d7      	b.n	2abe <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
    2b0e:	9b05      	ldr	r3, [sp, #20]
    2b10:	b17b      	cbz	r3, 2b32 <execute+0x106>
			status = z_shell_wildcard_process(shell, entry,
    2b12:	683a      	ldr	r2, [r7, #0]
    2b14:	4629      	mov	r1, r5
    2b16:	4620      	mov	r0, r4
    2b18:	f001 f968 	bl	3dec <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
    2b1c:	2802      	cmp	r0, #2
    2b1e:	f000 808e 	beq.w	2c3e <execute+0x212>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
    2b22:	2803      	cmp	r0, #3
    2b24:	d005      	beq.n	2b32 <execute+0x106>
				++cmd_lvl;
    2b26:	9b05      	ldr	r3, [sp, #20]
    2b28:	3301      	adds	r3, #1
    2b2a:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
    2b2c:	2301      	movs	r3, #1
    2b2e:	9302      	str	r3, [sp, #8]
				continue;
    2b30:	e7aa      	b.n	2a88 <execute+0x5c>
		if (has_last_handler == false) {
    2b32:	f1ba 0f00 	cmp.w	sl, #0
    2b36:	d105      	bne.n	2b44 <execute+0x118>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
    2b38:	6839      	ldr	r1, [r7, #0]
    2b3a:	aa07      	add	r2, sp, #28
    2b3c:	4658      	mov	r0, fp
    2b3e:	f007 febc 	bl	a8ba <z_shell_find_cmd>
    2b42:	4605      	mov	r5, r0
		argvp++;
    2b44:	3704      	adds	r7, #4
		args_left--;
    2b46:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (entry) {
    2b4a:	2d00      	cmp	r5, #0
    2b4c:	d040      	beq.n	2bd0 <execute+0x1a4>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
    2b4e:	9a02      	ldr	r2, [sp, #8]
    2b50:	68eb      	ldr	r3, [r5, #12]
    2b52:	b142      	cbz	r2, 2b66 <execute+0x13a>
    2b54:	b313      	cbz	r3, 2b9c <execute+0x170>
		z_shell_op_cursor_end_move(shell);
    2b56:	4620      	mov	r0, r4
    2b58:	f008 f864 	bl	ac24 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
    2b5c:	4620      	mov	r0, r4
    2b5e:	f007 ffc8 	bl	aaf2 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
    2b62:	4a5d      	ldr	r2, [pc, #372]	; (2cd8 <execute+0x2ac>)
    2b64:	e7ce      	b.n	2b04 <execute+0xd8>
	if (entry->handler) {
    2b66:	b1cb      	cbz	r3, 2b9c <execute+0x170>
		*active_cmd = *entry;
    2b68:	68a3      	ldr	r3, [r4, #8]
		*handler_lvl = *lvl;
    2b6a:	f8dd 9014 	ldr.w	r9, [sp, #20]
		*active_cmd = *entry;
    2b6e:	46ae      	mov	lr, r5
    2b70:	f103 0c08 	add.w	ip, r3, #8
    2b74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2b78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2b7c:	f8de 3000 	ldr.w	r3, [lr]
    2b80:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
    2b84:	68ab      	ldr	r3, [r5, #8]
    2b86:	b94b      	cbnz	r3, 2b9c <execute+0x170>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
    2b88:	7c6b      	ldrb	r3, [r5, #17]
    2b8a:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
    2b8c:	bf01      	itttt	eq
    2b8e:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
    2b92:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
    2b96:	f108 38ff 	addeq.w	r8, r8, #4294967295	; 0xffffffff
			*lvl = *lvl + 1;
    2b9a:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
    2b9c:	f8d5 c004 	ldr.w	ip, [r5, #4]
    2ba0:	f1bc 0f00 	cmp.w	ip, #0
    2ba4:	d008      	beq.n	2bb8 <execute+0x18c>
		*help_entry = *entry;
    2ba6:	46ae      	mov	lr, r5
    2ba8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2bac:	ae0c      	add	r6, sp, #48	; 0x30
    2bae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2bb0:	f8de 3000 	ldr.w	r3, [lr]
    2bb4:	6033      	str	r3, [r6, #0]
    2bb6:	4666      	mov	r6, ip
    2bb8:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
    2bba:	f1b8 0f00 	cmp.w	r8, #0
    2bbe:	d103      	bne.n	2bc8 <execute+0x19c>
    2bc0:	9b06      	ldr	r3, [sp, #24]
    2bc2:	2b02      	cmp	r3, #2
    2bc4:	f47f af60 	bne.w	2a88 <execute+0x5c>
			cmd_lvl++;
    2bc8:	9b05      	ldr	r3, [sp, #20]
    2bca:	3301      	adds	r3, #1
    2bcc:	9305      	str	r3, [sp, #20]
    2bce:	e75b      	b.n	2a88 <execute+0x5c>
			if (cmd_lvl == 0 &&
    2bd0:	9b05      	ldr	r3, [sp, #20]
    2bd2:	b963      	cbnz	r3, 2bee <execute+0x1c2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
    2bd4:	68a3      	ldr	r3, [r4, #8]
    2bd6:	69db      	ldr	r3, [r3, #28]
    2bd8:	b10b      	cbz	r3, 2bde <execute+0x1b2>
				(!z_shell_in_select_mode(shell) ||
    2bda:	68db      	ldr	r3, [r3, #12]
    2bdc:	b93b      	cbnz	r3, 2bee <execute+0x1c2>
				z_shell_fprintf(shell, SHELL_ERROR,
    2bde:	4b3f      	ldr	r3, [pc, #252]	; (2cdc <execute+0x2b0>)
    2be0:	9300      	str	r3, [sp, #0]
    2be2:	4a3f      	ldr	r2, [pc, #252]	; (2ce0 <execute+0x2b4>)
    2be4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2be6:	2101      	movs	r1, #1
    2be8:	4620      	mov	r0, r4
    2bea:	f008 f8c7 	bl	ad7c <z_shell_fprintf>
			has_last_handler = true;
    2bee:	f04f 0a01 	mov.w	sl, #1
    2bf2:	e7e2      	b.n	2bba <execute+0x18e>
		&& args_left > 0) {
    2bf4:	f1b8 0f00 	cmp.w	r8, #0
    2bf8:	f47f af56 	bne.w	2aa8 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
    2bfc:	9b02      	ldr	r3, [sp, #8]
    2bfe:	b14b      	cbz	r3, 2c14 <execute+0x1e8>
		z_shell_wildcard_finalize(shell);
    2c00:	4620      	mov	r0, r4
    2c02:	f008 fc5c 	bl	b4be <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
    2c06:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
    2c08:	230c      	movs	r3, #12
    2c0a:	3242      	adds	r2, #66	; 0x42
    2c0c:	a911      	add	r1, sp, #68	; 0x44
    2c0e:	a805      	add	r0, sp, #20
    2c10:	f007 fd68 	bl	a6e4 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
    2c14:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
    2c16:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
    2c18:	ab1e      	add	r3, sp, #120	; 0x78
    2c1a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2c1e:	2200      	movs	r2, #0
    2c20:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
    2c24:	6943      	ldr	r3, [r0, #20]
    2c26:	b973      	cbnz	r3, 2c46 <execute+0x21a>
			if (help_entry->help == NULL) {
    2c28:	2e00      	cmp	r6, #0
    2c2a:	f43f af48 	beq.w	2abe <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
    2c2e:	68c3      	ldr	r3, [r0, #12]
    2c30:	42b3      	cmp	r3, r6
    2c32:	f43f af61 	beq.w	2af8 <execute+0xcc>
				shell->ctx->active_cmd = *help_entry;
    2c36:	960d      	str	r6, [sp, #52]	; 0x34
    2c38:	f100 0508 	add.w	r5, r0, #8
    2c3c:	e757      	b.n	2aee <execute+0xc2>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
    2c3e:	9b05      	ldr	r3, [sp, #20]
    2c40:	2b0b      	cmp	r3, #11
    2c42:	d9db      	bls.n	2bfc <execute+0x1d0>
    2c44:	e728      	b.n	2a98 <execute+0x6c>
	if (shell->ctx->active_cmd.args.mandatory) {
    2c46:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
    2c48:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
    2c4c:	b1b3      	cbz	r3, 2c7c <execute+0x250>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
    2c4e:	7e41      	ldrb	r1, [r0, #25]
				UINT16_MAX : opt8;
    2c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2c54:	29ff      	cmp	r1, #255	; 0xff
    2c56:	bf18      	it	ne
    2c58:	460a      	movne	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
    2c5a:	429d      	cmp	r5, r3
    2c5c:	d302      	bcc.n	2c64 <execute+0x238>
    2c5e:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
    2c60:	429d      	cmp	r5, r3
    2c62:	d90b      	bls.n	2c7c <execute+0x250>
		z_shell_fprintf(shell, SHELL_ERROR,
    2c64:	6883      	ldr	r3, [r0, #8]
    2c66:	4a1f      	ldr	r2, [pc, #124]	; (2ce4 <execute+0x2b8>)
    2c68:	2101      	movs	r1, #1
    2c6a:	4620      	mov	r0, r4
    2c6c:	f008 f886 	bl	ad7c <z_shell_fprintf>
			shell_internal_help_print(shell);
    2c70:	4620      	mov	r0, r4
    2c72:	f7ff fe73 	bl	295c <shell_internal_help_print>
		return -EINVAL;
    2c76:	f06f 0515 	mvn.w	r5, #21
    2c7a:	e722      	b.n	2ac2 <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
    2c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2c80:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2c84:	f007 fba7 	bl	a3d6 <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    2c88:	68a0      	ldr	r0, [r4, #8]
    2c8a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2c8e:	f007 fc36 	bl	a4fe <k_mutex_unlock.isra.0>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
    2c92:	68a3      	ldr	r3, [r4, #8]
    2c94:	aa11      	add	r2, sp, #68	; 0x44
    2c96:	4629      	mov	r1, r5
    2c98:	eb02 0289 	add.w	r2, r2, r9, lsl #2
    2c9c:	695b      	ldr	r3, [r3, #20]
    2c9e:	4620      	mov	r0, r4
    2ca0:	4798      	blx	r3
    2ca2:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    2ca4:	68a0      	ldr	r0, [r4, #8]
    2ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2cae:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    2cb2:	f007 fbd7 	bl	a464 <k_mutex_lock.constprop.0.isra.0>
    2cb6:	68a0      	ldr	r0, [r4, #8]
    2cb8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    2cbc:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2cc0:	f007 fb98 	bl	a3f4 <atomic_and>
	return ret;
    2cc4:	e6fd      	b.n	2ac2 <execute+0x96>
    2cc6:	bf00      	nop
    2cc8:	0000e41b 	.word	0x0000e41b
    2ccc:	0000e11c 	.word	0x0000e11c
    2cd0:	0000e3a6 	.word	0x0000e3a6
    2cd4:	0000e3ba 	.word	0x0000e3ba
    2cd8:	0000e3d8 	.word	0x0000e3d8
    2cdc:	0000e407 	.word	0x0000e407
    2ce0:	0000e6d0 	.word	0x0000e6d0
    2ce4:	0000e43f 	.word	0x0000e43f

00002ce8 <state_set.constprop.0>:
	shell->ctx->state = state;
    2ce8:	6883      	ldr	r3, [r0, #8]
    2cea:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
    2cec:	b510      	push	{r4, lr}
	shell->ctx->state = state;
    2cee:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    2cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
    2cf2:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
    2cf4:	b9ba      	cbnz	r2, 2d26 <state_set.constprop.0+0x3e>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    2cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    2cfa:	63da      	str	r2, [r3, #60]	; 0x3c
	return sh->ctx->ctx.flags.print_noinit == 1;
    2cfc:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (z_flag_print_noinit_get(shell)) {
    2d00:	04db      	lsls	r3, r3, #19
    2d02:	d50b      	bpl.n	2d1c <state_set.constprop.0+0x34>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
    2d04:	2103      	movs	r1, #3
    2d06:	4b08      	ldr	r3, [pc, #32]	; (2d28 <state_set.constprop.0+0x40>)
    2d08:	4a08      	ldr	r2, [pc, #32]	; (2d2c <state_set.constprop.0+0x44>)
    2d0a:	f008 f837 	bl	ad7c <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    2d0e:	68a0      	ldr	r0, [r4, #8]
    2d10:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    2d14:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2d18:	f007 fb6c 	bl	a3f4 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
    2d1c:	4620      	mov	r0, r4
}
    2d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
    2d22:	f000 be65 	b.w	39f0 <z_shell_print_prompt_and_cmd>
}
    2d26:	bd10      	pop	{r4, pc}
    2d28:	0000e45a 	.word	0x0000e45a
    2d2c:	0000e110 	.word	0x0000e110

00002d30 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
    2d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d34:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
    2d36:	6880      	ldr	r0, [r0, #8]
    2d38:	b0ab      	sub	sp, #172	; 0xac
    2d3a:	2101      	movs	r1, #1
    2d3c:	f500 7019 	add.w	r0, r0, #612	; 0x264
    2d40:	f007 fb49 	bl	a3d6 <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
    2d44:	68a3      	ldr	r3, [r4, #8]
    2d46:	791b      	ldrb	r3, [r3, #4]
    2d48:	2b02      	cmp	r3, #2
    2d4a:	d117      	bne.n	2d7c <shell_process+0x4c>
	size_t count = 0;
    2d4c:	2300      	movs	r3, #0
    2d4e:	930b      	str	r3, [sp, #44]	; 0x2c
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    2d50:	68a3      	ldr	r3, [r4, #8]
			(void)shell->iface->api->read(shell->iface, buf,
    2d52:	6860      	ldr	r0, [r4, #4]
		shell_bypass_cb_t bypass = shell->ctx->bypass;
    2d54:	6b9e      	ldr	r6, [r3, #56]	; 0x38
			(void)shell->iface->api->read(shell->iface, buf,
    2d56:	6803      	ldr	r3, [r0, #0]
    2d58:	691d      	ldr	r5, [r3, #16]
    2d5a:	ab0b      	add	r3, sp, #44	; 0x2c
		if (bypass) {
    2d5c:	b1c6      	cbz	r6, 2d90 <shell_process+0x60>
			(void)shell->iface->api->read(shell->iface, buf,
    2d5e:	2210      	movs	r2, #16
    2d60:	a91d      	add	r1, sp, #116	; 0x74
    2d62:	47a8      	blx	r5
			if (count) {
    2d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2d66:	b14a      	cbz	r2, 2d7c <shell_process+0x4c>
				bypass(shell, buf, count);
    2d68:	a91d      	add	r1, sp, #116	; 0x74
    2d6a:	4620      	mov	r0, r4
    2d6c:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
    2d6e:	68a3      	ldr	r3, [r4, #8]
    2d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2d72:	2b00      	cmp	r3, #0
    2d74:	d1ec      	bne.n	2d50 <shell_process+0x20>
					state_set(shell, SHELL_STATE_ACTIVE);
    2d76:	4620      	mov	r0, r4
    2d78:	f7ff ffb6 	bl	2ce8 <state_set.constprop.0>
    2d7c:	68a0      	ldr	r0, [r4, #8]
    2d7e:	f06f 0101 	mvn.w	r1, #1
    2d82:	f500 7019 	add.w	r0, r0, #612	; 0x264
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
    2d86:	b02b      	add	sp, #172	; 0xac
    2d88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d8c:	f007 bb32 	b.w	a3f4 <atomic_and>
		(void)shell->iface->api->read(shell->iface, &data,
    2d90:	2201      	movs	r2, #1
    2d92:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    2d96:	47a8      	blx	r5
		if (count == 0) {
    2d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d0ee      	beq.n	2d7c <shell_process+0x4c>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2d9e:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
    2da2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
		switch (shell->ctx->receive_state) {
    2da6:	68a0      	ldr	r0, [r4, #8]
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
    2da8:	2a00      	cmp	r2, #0
    2daa:	dbd1      	blt.n	2d50 <shell_process+0x20>
		switch (shell->ctx->receive_state) {
    2dac:	7942      	ldrb	r2, [r0, #5]
    2dae:	2a03      	cmp	r2, #3
    2db0:	f200 82fd 	bhi.w	33ae <shell_process+0x67e>
    2db4:	e8df f012 	tbh	[pc, r2, lsl #1]
    2db8:	02750004 	.word	0x02750004
    2dbc:	02fb0298 	.word	0x02fb0298
	if ((data != '\r') && (data != '\n')) {
    2dc0:	2b0d      	cmp	r3, #13
    2dc2:	d01a      	beq.n	2dfa <shell_process+0xca>
    2dc4:	2b0a      	cmp	r3, #10
    2dc6:	d018      	beq.n	2dfa <shell_process+0xca>
	sh->ctx->ctx.flags.last_nl = val;
    2dc8:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
    2dcc:	f36f 02ca 	bfc	r2, #3, #8
    2dd0:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
    2dd4:	2b09      	cmp	r3, #9
    2dd6:	d04c      	beq.n	2e72 <shell_process+0x142>
    2dd8:	d832      	bhi.n	2e40 <shell_process+0x110>
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d0b8      	beq.n	2d50 <shell_process+0x20>
    2dde:	2b08      	cmp	r3, #8
    2de0:	f000 81c4 	beq.w	316c <shell_process+0x43c>
    2de4:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
    2de8:	2a5e      	cmp	r2, #94	; 0x5e
    2dea:	f200 81cb 	bhi.w	3184 <shell_process+0x454>
					z_flag_history_exit_set(shell, true);
    2dee:	2101      	movs	r1, #1
    2df0:	f007 fb6c 	bl	a4cc <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
    2df4:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    2df8:	e0e8      	b.n	2fcc <shell_process+0x29c>
	return sh->ctx->ctx.flags.last_nl;
    2dfa:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    2dfe:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
    2e02:	b12a      	cbz	r2, 2e10 <shell_process+0xe0>
    2e04:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
    2e08:	f3c2 02c7 	ubfx	r2, r2, #3, #8
    2e0c:	4293      	cmp	r3, r2
    2e0e:	d1e1      	bne.n	2dd4 <shell_process+0xa4>
	sh->ctx->ctx.flags.last_nl = val;
    2e10:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
    2e14:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
    2e16:	f363 02ca 	bfi	r2, r3, #3, #8
    2e1a:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
    2e1e:	b959      	cbnz	r1, 2e38 <shell_process+0x108>
	z_flag_history_exit_set(shell, false);
    2e20:	f007 fb54 	bl	a4cc <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
    2e24:	68e0      	ldr	r0, [r4, #12]
    2e26:	f008 fa69 	bl	b2fc <z_shell_history_mode_exit>
					z_cursor_next_line_move(shell);
    2e2a:	6960      	ldr	r0, [r4, #20]
    2e2c:	f7ff fda6 	bl	297c <z_cursor_next_line_move.isra.0>
		state_set(shell, SHELL_STATE_ACTIVE);
    2e30:	4620      	mov	r0, r4
    2e32:	f7ff ff59 	bl	2ce8 <state_set.constprop.0>
		break;
    2e36:	e78b      	b.n	2d50 <shell_process+0x20>
					(void)execute(shell);
    2e38:	4620      	mov	r0, r4
    2e3a:	f7ff fdf7 	bl	2a2c <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
    2e3e:	e7f7      	b.n	2e30 <shell_process+0x100>
    2e40:	2b1b      	cmp	r3, #27
    2e42:	d013      	beq.n	2e6c <shell_process+0x13c>
    2e44:	2b7f      	cmp	r3, #127	; 0x7f
    2e46:	d1cd      	bne.n	2de4 <shell_process+0xb4>
	return sh->ctx->cfg.flags.echo == 1;
    2e48:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    2e4c:	079a      	lsls	r2, r3, #30
    2e4e:	f57f af7f 	bpl.w	2d50 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2e52:	2101      	movs	r1, #1
    2e54:	f007 fb3a 	bl	a4cc <z_flag_history_exit_set.isra.0>
	return sh->ctx->cfg.flags.mode_delete == 1;
    2e58:	68a3      	ldr	r3, [r4, #8]
    2e5a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
					if (z_flag_mode_delete_get(shell)) {
    2e5e:	071b      	lsls	r3, r3, #28
    2e60:	f100 818c 	bmi.w	317c <shell_process+0x44c>
		z_shell_op_char_delete(shell);
    2e64:	4620      	mov	r0, r4
    2e66:	f007 ffc9 	bl	adfc <z_shell_op_char_delete>
		break;
    2e6a:	e771      	b.n	2d50 <shell_process+0x20>
	shell->ctx->receive_state = state;
    2e6c:	2301      	movs	r3, #1
    2e6e:	7143      	strb	r3, [r0, #5]
}
    2e70:	e76e      	b.n	2d50 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    2e72:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
    2e76:	079e      	lsls	r6, r3, #30
    2e78:	f57f af6a 	bpl.w	2d50 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    2e7c:	2101      	movs	r1, #1
    2e7e:	f007 fb25 	bl	a4cc <z_flag_history_exit_set.isra.0>
			shell->ctx->cmd_buff_len;
    2e82:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
    2e84:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    2e86:	2bff      	cmp	r3, #255	; 0xff
    2e88:	f43f af62 	beq.w	2d50 <shell_process+0x20>
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
    2e8c:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    2e8e:	f100 0142 	add.w	r1, r0, #66	; 0x42
    2e92:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    2e96:	f008 fcc0 	bl	b81a <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
    2e9a:	68a2      	ldr	r2, [r4, #8]
    2e9c:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    2e9e:	4413      	add	r3, r2
    2ea0:	2500      	movs	r5, #0
    2ea2:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
    2ea6:	a91d      	add	r1, sp, #116	; 0x74
    2ea8:	230c      	movs	r3, #12
    2eaa:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    2eae:	a80d      	add	r0, sp, #52	; 0x34
    2eb0:	f007 fc18 	bl	a6e4 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
    2eb4:	990d      	ldr	r1, [sp, #52]	; 0x34
    2eb6:	290c      	cmp	r1, #12
    2eb8:	f63f af4a 	bhi.w	2d50 <shell_process+0x20>
	(*argv)[*argc] = NULL;
    2ebc:	ab2a      	add	r3, sp, #168	; 0xa8
    2ebe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2ec2:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
    2ec6:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
    2ec8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
	int space = isspace((int)shell->ctx->cmd_buff[
    2eca:	4413      	add	r3, r2
    2ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    2ed0:	2b20      	cmp	r3, #32
    2ed2:	f000 826e 	beq.w	33b2 <shell_process+0x682>
    2ed6:	3b09      	subs	r3, #9
    2ed8:	2b04      	cmp	r3, #4
    2eda:	f240 826a 	bls.w	33b2 <shell_process+0x682>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    2ede:	2901      	cmp	r1, #1
    2ee0:	d84f      	bhi.n	2f82 <shell_process+0x252>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
    2ee2:	2500      	movs	r5, #0
    2ee4:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ee8:	aa2a      	add	r2, sp, #168	; 0xa8
    2eea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
    2eee:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
    2ef0:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2ef4:	4650      	mov	r0, sl
    2ef6:	f007 faa2 	bl	a43e <z_shell_strlen>
	size_t first = 0;
    2efa:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
    2efc:	4681      	mov	r9, r0
	*longest = 0U;
    2efe:	9604      	str	r6, [sp, #16]
	size_t idx = 0;
    2f00:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
    2f02:	aa18      	add	r2, sp, #96	; 0x60
    2f04:	4639      	mov	r1, r7
    2f06:	4628      	mov	r0, r5
    2f08:	f000 fbfc 	bl	3704 <z_shell_cmd_get>
    2f0c:	4683      	mov	fp, r0
    2f0e:	2800      	cmp	r0, #0
    2f10:	d144      	bne.n	2f9c <shell_process+0x26c>
	if (cnt == 1) {
    2f12:	2e01      	cmp	r6, #1
    2f14:	d163      	bne.n	2fde <shell_process+0x2ae>
		autocomplete(shell, cmd, argv[arg_idx], first);
    2f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f18:	aa2a      	add	r2, sp, #168	; 0xa8
    2f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
    2f1e:	f853 0c34 	ldr.w	r0, [r3, #-52]
    2f22:	f007 fa8c 	bl	a43e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2f26:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
    2f28:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
    2f2a:	3208      	adds	r2, #8
    2f2c:	4641      	mov	r1, r8
    2f2e:	4628      	mov	r0, r5
    2f30:	f000 fbe8 	bl	3704 <z_shell_cmd_get>
    2f34:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
    2f36:	6800      	ldr	r0, [r0, #0]
    2f38:	f007 fa81 	bl	a43e <z_shell_strlen>
	if (cmd_len != arg_len) {
    2f3c:	4286      	cmp	r6, r0
    2f3e:	d006      	beq.n	2f4e <shell_process+0x21e>
		z_shell_op_completion_insert(shell,
    2f40:	6829      	ldr	r1, [r5, #0]
    2f42:	1b82      	subs	r2, r0, r6
    2f44:	b292      	uxth	r2, r2
    2f46:	4431      	add	r1, r6
    2f48:	4620      	mov	r0, r4
    2f4a:	f007 ff55 	bl	adf8 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
    2f4e:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
    2f50:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
	if (!isspace((int) shell->ctx->cmd_buff[
    2f52:	4403      	add	r3, r0
    2f54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    2f58:	2b20      	cmp	r3, #32
    2f5a:	d03b      	beq.n	2fd4 <shell_process+0x2a4>
    2f5c:	3b09      	subs	r3, #9
    2f5e:	2b04      	cmp	r3, #4
    2f60:	d938      	bls.n	2fd4 <shell_process+0x2a4>
	return sh->ctx->cfg.flags.insert_mode == 1;
    2f62:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
    2f66:	07dd      	lsls	r5, r3, #31
    2f68:	d52f      	bpl.n	2fca <shell_process+0x29a>
			z_flag_insert_mode_set(shell, false);
    2f6a:	2100      	movs	r1, #0
    2f6c:	f007 fab8 	bl	a4e0 <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
    2f70:	2120      	movs	r1, #32
    2f72:	4620      	mov	r0, r4
    2f74:	f000 fd08 	bl	3988 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
    2f78:	68a0      	ldr	r0, [r4, #8]
    2f7a:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
    2f7c:	f007 fab0 	bl	a4e0 <z_flag_insert_mode_set.isra.0>
				break;
    2f80:	e6e6      	b.n	2d50 <shell_process+0x20>
	search_argc = space ? *argc : *argc - 1;
    2f82:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
    2f84:	2000      	movs	r0, #0
    2f86:	ab0e      	add	r3, sp, #56	; 0x38
    2f88:	9300      	str	r3, [sp, #0]
    2f8a:	9001      	str	r0, [sp, #4]
    2f8c:	ab0c      	add	r3, sp, #48	; 0x30
    2f8e:	aa1d      	add	r2, sp, #116	; 0x74
    2f90:	f007 fcb3 	bl	a8fa <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
    2f94:	4605      	mov	r5, r0
    2f96:	2800      	cmp	r0, #0
    2f98:	d1a5      	bne.n	2ee6 <shell_process+0x1b6>
    2f9a:	e6d9      	b.n	2d50 <shell_process+0x20>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    2f9c:	f8db 0000 	ldr.w	r0, [fp]
    2fa0:	464a      	mov	r2, r9
    2fa2:	4651      	mov	r1, sl
    2fa4:	f008 fbff 	bl	b7a6 <strncmp>
		if (is_candidate) {
    2fa8:	b968      	cbnz	r0, 2fc6 <shell_process+0x296>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2faa:	f8db 0000 	ldr.w	r0, [fp]
    2fae:	f008 fbde 	bl	b76e <strlen>
    2fb2:	9b04      	ldr	r3, [sp, #16]
    2fb4:	4283      	cmp	r3, r0
    2fb6:	bf38      	it	cc
    2fb8:	4603      	movcc	r3, r0
    2fba:	b29b      	uxth	r3, r3
				*first_idx = idx;
    2fbc:	2e00      	cmp	r6, #0
    2fbe:	bf08      	it	eq
    2fc0:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
    2fc2:	9304      	str	r3, [sp, #16]
			(*cnt)++;
    2fc4:	3601      	adds	r6, #1
		idx++;
    2fc6:	3701      	adds	r7, #1
    2fc8:	e79b      	b.n	2f02 <shell_process+0x1d2>
			z_shell_op_char_insert(shell, ' ');
    2fca:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
    2fcc:	4620      	mov	r0, r4
    2fce:	f000 fcdb 	bl	3988 <z_shell_op_char_insert>
    2fd2:	e6bd      	b.n	2d50 <shell_process+0x20>
		z_shell_op_cursor_move(shell, 1);
    2fd4:	2101      	movs	r1, #1
    2fd6:	4620      	mov	r0, r4
    2fd8:	f007 fdbe 	bl	ab58 <z_shell_op_cursor_move>
    2fdc:	e6b8      	b.n	2d50 <shell_process+0x20>
	} else if (cnt > 1) {
    2fde:	f67f aeb7 	bls.w	2d50 <shell_process+0x20>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
    2fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2fe4:	aa2a      	add	r2, sp, #168	; 0xa8
    2fe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fea:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
    2fee:	4650      	mov	r0, sl
    2ff0:	f007 fa25 	bl	a43e <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2ff4:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
    2ff6:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
    2ff8:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
    2ffc:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 32d0 <shell_process+0x5a0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3000:	9605      	str	r6, [sp, #20]
    3002:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    3006:	68a2      	ldr	r2, [r4, #8]
    3008:	9903      	ldr	r1, [sp, #12]
    300a:	3208      	adds	r2, #8
    300c:	4628      	mov	r0, r5
    300e:	f000 fb79 	bl	3704 <z_shell_cmd_get>
		idx++;
    3012:	9b03      	ldr	r3, [sp, #12]
    3014:	3301      	adds	r3, #1
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
    3016:	4607      	mov	r7, r0
		idx++;
    3018:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
    301a:	f1ba 0f00 	cmp.w	sl, #0
    301e:	d152      	bne.n	30c6 <shell_process+0x396>
		tab_item_print(shell, match->syntax, longest);
    3020:	683f      	ldr	r7, [r7, #0]
	if (option == NULL) {
    3022:	2f00      	cmp	r7, #0
    3024:	d159      	bne.n	30da <shell_process+0x3aa>
		shell->ctx->vt100_ctx.printed_cmd = 0;
    3026:	68a2      	ldr	r2, [r4, #8]
    3028:	8617      	strh	r7, [r2, #48]	; 0x30
	while (cnt) {
    302a:	9b05      	ldr	r3, [sp, #20]
    302c:	3b01      	subs	r3, #1
    302e:	9305      	str	r3, [sp, #20]
    3030:	d1e9      	bne.n	3006 <shell_process+0x2d6>
	z_cursor_next_line_move(shell);
    3032:	6960      	ldr	r0, [r4, #20]
    3034:	f7ff fca2 	bl	297c <z_cursor_next_line_move.isra.0>
	z_shell_print_prompt_and_cmd(shell);
    3038:	4620      	mov	r0, r4
    303a:	f000 fcd9 	bl	39f0 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
    303e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3040:	aa2a      	add	r2, sp, #168	; 0xa8
    3042:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
    3046:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
    304a:	f853 0c34 	ldr.w	r0, [r3, #-52]
    304e:	f007 f9f6 	bl	a43e <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    3052:	4641      	mov	r1, r8
    3054:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
    3056:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
    3058:	4628      	mov	r0, r5
    305a:	f000 fb53 	bl	3704 <z_shell_cmd_get>
    305e:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
    3060:	68a0      	ldr	r0, [r4, #8]
    3062:	f8d8 1000 	ldr.w	r1, [r8]
    3066:	22ff      	movs	r2, #255	; 0xff
    3068:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    306c:	f008 fb5f 	bl	b72e <strncpy>
	*str = match->syntax;
    3070:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
    3074:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    3078:	aa18      	add	r2, sp, #96	; 0x60
    307a:	4649      	mov	r1, r9
    307c:	4628      	mov	r0, r5
    307e:	f109 0b01 	add.w	fp, r9, #1
    3082:	f000 fb3f 	bl	3704 <z_shell_cmd_get>
		if (match2 == NULL) {
    3086:	2800      	cmp	r0, #0
    3088:	d063      	beq.n	3152 <shell_process+0x422>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
    308a:	68a3      	ldr	r3, [r4, #8]
    308c:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    308e:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
    3092:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    3094:	f813 cb01 	ldrb.w	ip, [r3], #1
    3098:	5c81      	ldrb	r1, [r0, r2]
    309a:	4561      	cmp	r1, ip
    309c:	d105      	bne.n	30aa <shell_process+0x37a>
    309e:	b121      	cbz	r1, 30aa <shell_process+0x37a>
		common++;
    30a0:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    30a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    30a6:	428a      	cmp	r2, r1
    30a8:	d1f4      	bne.n	3094 <shell_process+0x364>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
    30aa:	b10f      	cbz	r7, 30b0 <shell_process+0x380>
    30ac:	42ba      	cmp	r2, r7
    30ae:	db08      	blt.n	30c2 <shell_process+0x392>
			common = (curr_common < common) ? curr_common : common;
    30b0:	4542      	cmp	r2, r8
			--cnt;
    30b2:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
			common = (curr_common < common) ? curr_common : common;
    30b6:	bfa8      	it	ge
    30b8:	4642      	movge	r2, r8
	while (cnt > 1) {
    30ba:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
    30bc:	fa1f f882 	uxth.w	r8, r2
	while (cnt > 1) {
    30c0:	d047      	beq.n	3152 <shell_process+0x422>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
    30c2:	46d9      	mov	r9, fp
    30c4:	e7d8      	b.n	3078 <shell_process+0x348>
		if (str && match->syntax &&
    30c6:	6800      	ldr	r0, [r0, #0]
    30c8:	2800      	cmp	r0, #0
    30ca:	d0a9      	beq.n	3020 <shell_process+0x2f0>
	return (strncmp(candidate, str, len) == 0) ? true : false;
    30cc:	9a06      	ldr	r2, [sp, #24]
    30ce:	4651      	mov	r1, sl
    30d0:	f008 fb69 	bl	b7a6 <strncmp>
		if (str && match->syntax &&
    30d4:	2800      	cmp	r0, #0
    30d6:	d0a3      	beq.n	3020 <shell_process+0x2f0>
    30d8:	e795      	b.n	3006 <shell_process+0x2d6>
	longest_option += z_shell_strlen(tab);
    30da:	4658      	mov	r0, fp
    30dc:	f007 f9af 	bl	a43e <z_shell_strlen>
    30e0:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    30e2:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
    30e4:	18c2      	adds	r2, r0, r3
    30e6:	b292      	uxth	r2, r2
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    30e8:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
    30ea:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    30ec:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
    30ee:	9308      	str	r3, [sp, #32]
			- z_shell_strlen(tab)) / longest_option;
    30f0:	f007 f9a5 	bl	a43e <z_shell_strlen>
    30f4:	9007      	str	r0, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    30f6:	4638      	mov	r0, r7
    30f8:	f007 f9a1 	bl	a43e <z_shell_strlen>
    30fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
    30fe:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
	diff = longest_option - z_shell_strlen(option);
    3102:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3106:	68a0      	ldr	r0, [r4, #8]
    3108:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
    310c:	1a59      	subs	r1, r3, r1
    310e:	fb91 f2f2 	sdiv	r2, r1, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3112:	b292      	uxth	r2, r2
    3114:	fbbc f1f2 	udiv	r1, ip, r2
    3118:	fb02 c211 	mls	r2, r2, r1, ip
    311c:	f10c 0e01 	add.w	lr, ip, #1
    3120:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
    3122:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
    3126:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
    312a:	b95a      	cbnz	r2, 3144 <shell_process+0x414>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
    312c:	4a69      	ldr	r2, [pc, #420]	; (32d4 <shell_process+0x5a4>)
    312e:	9700      	str	r7, [sp, #0]
    3130:	465b      	mov	r3, fp
    3132:	2106      	movs	r1, #6
    3134:	4620      	mov	r0, r4
    3136:	f007 fe21 	bl	ad7c <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
    313a:	4649      	mov	r1, r9
    313c:	4620      	mov	r0, r4
    313e:	f000 fb2f 	bl	37a0 <z_shell_op_cursor_horiz_move>
    3142:	e772      	b.n	302a <shell_process+0x2fa>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
    3144:	4a64      	ldr	r2, [pc, #400]	; (32d8 <shell_process+0x5a8>)
    3146:	463b      	mov	r3, r7
    3148:	2106      	movs	r1, #6
    314a:	4620      	mov	r0, r4
    314c:	f007 fe16 	bl	ad7c <z_shell_fprintf>
    3150:	e7f3      	b.n	313a <shell_process+0x40a>
	if (common) {
    3152:	f1b8 0f00 	cmp.w	r8, #0
    3156:	f43f adfb 	beq.w	2d50 <shell_process+0x20>
		z_shell_op_completion_insert(shell, &completion[arg_len],
    315a:	eba8 0207 	sub.w	r2, r8, r7
    315e:	b292      	uxth	r2, r2
    3160:	eb0a 0107 	add.w	r1, sl, r7
    3164:	4620      	mov	r0, r4
    3166:	f007 fe47 	bl	adf8 <z_shell_op_completion_insert>
    316a:	e5f1      	b.n	2d50 <shell_process+0x20>
	return sh->ctx->cfg.flags.echo == 1;
    316c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    3170:	0799      	lsls	r1, r3, #30
    3172:	f57f aded 	bpl.w	2d50 <shell_process+0x20>
					z_flag_history_exit_set(shell, true);
    3176:	2101      	movs	r1, #1
    3178:	f007 f9a8 	bl	a4cc <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
    317c:	4620      	mov	r0, r4
    317e:	f007 fe58 	bl	ae32 <z_shell_op_char_backspace>
    3182:	e5e5      	b.n	2d50 <shell_process+0x20>
    3184:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
    3188:	0797      	lsls	r7, r2, #30
    318a:	f57f ade1 	bpl.w	2d50 <shell_process+0x20>
	switch (data) {
    318e:	3b01      	subs	r3, #1
    3190:	2b16      	cmp	r3, #22
    3192:	f63f addd 	bhi.w	2d50 <shell_process+0x20>
    3196:	a201      	add	r2, pc, #4	; (adr r2, 319c <shell_process+0x46c>)
    3198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    319c:	00003385 	.word	0x00003385
    31a0:	000031f9 	.word	0x000031f9
    31a4:	00003201 	.word	0x00003201
    31a8:	00002e65 	.word	0x00002e65
    31ac:	00003379 	.word	0x00003379
    31b0:	0000321f 	.word	0x0000321f
    31b4:	00002d51 	.word	0x00002d51
    31b8:	00002d51 	.word	0x00002d51
    31bc:	00002d51 	.word	0x00002d51
    31c0:	00002d51 	.word	0x00002d51
    31c4:	00003227 	.word	0x00003227
    31c8:	0000322f 	.word	0x0000322f
    31cc:	00002d51 	.word	0x00002d51
    31d0:	00003259 	.word	0x00003259
    31d4:	00002d51 	.word	0x00002d51
    31d8:	00003263 	.word	0x00003263
    31dc:	00002d51 	.word	0x00002d51
    31e0:	00002d51 	.word	0x00002d51
    31e4:	00002d51 	.word	0x00002d51
    31e8:	00002d51 	.word	0x00002d51
    31ec:	00003267 	.word	0x00003267
    31f0:	00002d51 	.word	0x00002d51
    31f4:	00003293 	.word	0x00003293
		z_shell_op_left_arrow(shell);
    31f8:	4620      	mov	r0, r4
    31fa:	f007 fd1a 	bl	ac32 <z_shell_op_left_arrow>
		break;
    31fe:	e5a7      	b.n	2d50 <shell_process+0x20>
		z_shell_op_cursor_end_move(shell);
    3200:	4620      	mov	r0, r4
    3202:	f007 fd0f 	bl	ac24 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
    3206:	4620      	mov	r0, r4
    3208:	f007 fc5f 	bl	aaca <z_shell_cursor_in_empty_line>
    320c:	b910      	cbnz	r0, 3214 <shell_process+0x4e4>
			z_cursor_next_line_move(shell);
    320e:	6960      	ldr	r0, [r4, #20]
    3210:	f7ff fbb4 	bl	297c <z_cursor_next_line_move.isra.0>
		z_flag_history_exit_set(shell, true);
    3214:	68a0      	ldr	r0, [r4, #8]
    3216:	2101      	movs	r1, #1
    3218:	f007 f958 	bl	a4cc <z_flag_history_exit_set.isra.0>
    321c:	e608      	b.n	2e30 <shell_process+0x100>
		z_shell_op_right_arrow(shell);
    321e:	4620      	mov	r0, r4
    3220:	f007 fd0f 	bl	ac42 <z_shell_op_right_arrow>
		break;
    3224:	e594      	b.n	2d50 <shell_process+0x20>
		z_shell_op_delete_from_cursor(shell);
    3226:	4620      	mov	r0, r4
    3228:	f007 fd14 	bl	ac54 <z_shell_op_delete_from_cursor>
		break;
    322c:	e590      	b.n	2d50 <shell_process+0x20>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    322e:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3232:	069e      	lsls	r6, r3, #26
    3234:	d503      	bpl.n	323e <shell_process+0x50e>
    3236:	4929      	ldr	r1, [pc, #164]	; (32dc <shell_process+0x5ac>)
    3238:	6960      	ldr	r0, [r4, #20]
    323a:	f007 f906 	bl	a44a <z_shell_raw_fprintf>
    323e:	68a3      	ldr	r3, [r4, #8]
    3240:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3244:	069d      	lsls	r5, r3, #26
    3246:	d503      	bpl.n	3250 <shell_process+0x520>
    3248:	4925      	ldr	r1, [pc, #148]	; (32e0 <shell_process+0x5b0>)
    324a:	6960      	ldr	r0, [r4, #20]
    324c:	f007 f8fd 	bl	a44a <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
    3250:	4620      	mov	r0, r4
    3252:	f000 fbcd 	bl	39f0 <z_shell_print_prompt_and_cmd>
		break;
    3256:	e57b      	b.n	2d50 <shell_process+0x20>
		history_handle(shell, false);
    3258:	2100      	movs	r1, #0
		history_handle(shell, true);
    325a:	4620      	mov	r0, r4
    325c:	f7ff fb94 	bl	2988 <history_handle>
		break;
    3260:	e576      	b.n	2d50 <shell_process+0x20>
		history_handle(shell, true);
    3262:	2101      	movs	r1, #1
    3264:	e7f9      	b.n	325a <shell_process+0x52a>
		z_shell_op_cursor_home_move(shell);
    3266:	4620      	mov	r0, r4
    3268:	f007 fcd6 	bl	ac18 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
    326c:	68a0      	ldr	r0, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
    326e:	2300      	movs	r3, #0
    3270:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
    3274:	63c3      	str	r3, [r0, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
    3276:	2101      	movs	r1, #1
    3278:	f007 f928 	bl	a4cc <z_flag_history_exit_set.isra.0>
    327c:	68a3      	ldr	r3, [r4, #8]
    327e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    3282:	0698      	lsls	r0, r3, #26
    3284:	f57f ad64 	bpl.w	2d50 <shell_process+0x20>
    3288:	4916      	ldr	r1, [pc, #88]	; (32e4 <shell_process+0x5b4>)
    328a:	6960      	ldr	r0, [r4, #20]
    328c:	f007 f8dd 	bl	a44a <z_shell_raw_fprintf>
    3290:	e55e      	b.n	2d50 <shell_process+0x20>
		z_shell_op_word_remove(shell);
    3292:	4620      	mov	r0, r4
    3294:	f000 fae0 	bl	3858 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
    3298:	68a0      	ldr	r0, [r4, #8]
    329a:	2101      	movs	r1, #1
    329c:	f007 f916 	bl	a4cc <z_flag_history_exit_set.isra.0>
		break;
    32a0:	e556      	b.n	2d50 <shell_process+0x20>
			if (data == '[') {
    32a2:	2b5b      	cmp	r3, #91	; 0x5b
    32a4:	d101      	bne.n	32aa <shell_process+0x57a>
	shell->ctx->receive_state = state;
    32a6:	2302      	movs	r3, #2
    32a8:	e5e1      	b.n	2e6e <shell_process+0x13e>
	return sh->ctx->cfg.flags.echo == 1;
    32aa:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
    32ae:	0791      	lsls	r1, r2, #30
    32b0:	d506      	bpl.n	32c0 <shell_process+0x590>
	if (data == SHELL_VT100_ASCII_ALT_B) {
    32b2:	2b62      	cmp	r3, #98	; 0x62
    32b4:	d108      	bne.n	32c8 <shell_process+0x598>
		z_shell_op_cursor_word_move(shell, -1);
    32b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
		z_shell_op_cursor_word_move(shell, 1);
    32ba:	4620      	mov	r0, r4
    32bc:	f007 fc70 	bl	aba0 <z_shell_op_cursor_word_move>
	shell->ctx->receive_state = state;
    32c0:	68a3      	ldr	r3, [r4, #8]
    32c2:	2200      	movs	r2, #0
    32c4:	715a      	strb	r2, [r3, #5]
}
    32c6:	e543      	b.n	2d50 <shell_process+0x20>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
    32c8:	2b66      	cmp	r3, #102	; 0x66
    32ca:	d1f9      	bne.n	32c0 <shell_process+0x590>
		z_shell_op_cursor_word_move(shell, 1);
    32cc:	2101      	movs	r1, #1
    32ce:	e7f4      	b.n	32ba <shell_process+0x58a>
    32d0:	0000dac1 	.word	0x0000dac1
    32d4:	0000e49e 	.word	0x0000e49e
    32d8:	0000e110 	.word	0x0000e110
    32dc:	0000d045 	.word	0x0000d045
    32e0:	0000d04a 	.word	0x0000d04a
    32e4:	0000d040 	.word	0x0000d040
	shell->ctx->receive_state = state;
    32e8:	2200      	movs	r2, #0
    32ea:	7142      	strb	r2, [r0, #5]
    32ec:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			if (!z_flag_echo_get(shell)) {
    32f0:	0792      	lsls	r2, r2, #30
    32f2:	f57f ad2d 	bpl.w	2d50 <shell_process+0x20>
			switch (data) {
    32f6:	3b31      	subs	r3, #49	; 0x31
    32f8:	2b1b      	cmp	r3, #27
    32fa:	f63f ad29 	bhi.w	2d50 <shell_process+0x20>
    32fe:	a201      	add	r2, pc, #4	; (adr r2, 3304 <shell_process+0x5d4>)
    3300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3304:	00003381 	.word	0x00003381
    3308:	0000338d 	.word	0x0000338d
    330c:	0000339f 	.word	0x0000339f
    3310:	00003375 	.word	0x00003375
    3314:	00002d51 	.word	0x00002d51
    3318:	00002d51 	.word	0x00002d51
    331c:	00002d51 	.word	0x00002d51
    3320:	00002d51 	.word	0x00002d51
    3324:	00002d51 	.word	0x00002d51
    3328:	00002d51 	.word	0x00002d51
    332c:	00002d51 	.word	0x00002d51
    3330:	00002d51 	.word	0x00002d51
    3334:	00002d51 	.word	0x00002d51
    3338:	00002d51 	.word	0x00002d51
    333c:	00002d51 	.word	0x00002d51
    3340:	00002d51 	.word	0x00002d51
    3344:	00003263 	.word	0x00003263
    3348:	00003259 	.word	0x00003259
    334c:	0000321f 	.word	0x0000321f
    3350:	000031f9 	.word	0x000031f9
    3354:	00002d51 	.word	0x00002d51
    3358:	00003379 	.word	0x00003379
    335c:	00002d51 	.word	0x00002d51
    3360:	00003385 	.word	0x00003385
    3364:	00002d51 	.word	0x00002d51
    3368:	00002d51 	.word	0x00002d51
    336c:	00002d51 	.word	0x00002d51
    3370:	00003391 	.word	0x00003391
	shell->ctx->receive_state = state;
    3374:	2303      	movs	r3, #3
    3376:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_end_move(shell);
    3378:	4620      	mov	r0, r4
    337a:	f007 fc53 	bl	ac24 <z_shell_op_cursor_end_move>
		break;
    337e:	e4e7      	b.n	2d50 <shell_process+0x20>
	shell->ctx->receive_state = state;
    3380:	2303      	movs	r3, #3
    3382:	7143      	strb	r3, [r0, #5]
		z_shell_op_cursor_home_move(shell);
    3384:	4620      	mov	r0, r4
    3386:	f007 fc47 	bl	ac18 <z_shell_op_cursor_home_move>
		break;
    338a:	e4e1      	b.n	2d50 <shell_process+0x20>
	shell->ctx->receive_state = state;
    338c:	2303      	movs	r3, #3
    338e:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.insert_mode == 1;
    3390:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    3394:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
    3398:	f081 0101 	eor.w	r1, r1, #1
    339c:	e5ee      	b.n	2f7c <shell_process+0x24c>
	shell->ctx->receive_state = state;
    339e:	2303      	movs	r3, #3
    33a0:	7143      	strb	r3, [r0, #5]
	return sh->ctx->cfg.flags.echo == 1;
    33a2:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
    33a6:	079b      	lsls	r3, r3, #30
    33a8:	f57f acd2 	bpl.w	2d50 <shell_process+0x20>
    33ac:	e55a      	b.n	2e64 <shell_process+0x134>
	shell->ctx->receive_state = state;
    33ae:	2300      	movs	r3, #0
    33b0:	e55d      	b.n	2e6e <shell_process+0x13e>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
    33b2:	2900      	cmp	r1, #0
    33b4:	f43f ad95 	beq.w	2ee2 <shell_process+0x1b2>
    33b8:	e5e4      	b.n	2f84 <shell_process+0x254>
    33ba:	bf00      	nop

000033bc <shell_init>:
{
    33bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    33c0:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
    33c2:	6880      	ldr	r0, [r0, #8]
{
    33c4:	4688      	mov	r8, r1
	if (shell->ctx->tid) {
    33c6:	f8d0 130c 	ldr.w	r1, [r0, #780]	; 0x30c
{
    33ca:	b089      	sub	sp, #36	; 0x24
    33cc:	4615      	mov	r5, r2
    33ce:	461f      	mov	r7, r3
	if (shell->ctx->tid) {
    33d0:	2900      	cmp	r1, #0
    33d2:	d161      	bne.n	3498 <shell_init+0xdc>
	memset(sh->ctx, 0, sizeof(*sh->ctx));
    33d4:	f44f 7244 	mov.w	r2, #784	; 0x310
    33d8:	f008 fa2a 	bl	b830 <memset>
	sh->ctx->prompt = sh->default_prompt;
    33dc:	68a3      	ldr	r3, [r4, #8]
    33de:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
    33e0:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
    33e2:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
    33e4:	f008 f830 	bl	b448 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
    33e8:	68a0      	ldr	r0, [r4, #8]
    33ea:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
    33ee:	f009 f877 	bl	c4e0 <z_impl_k_mutex_init>
    33f2:	f44f 792a 	mov.w	r9, #680	; 0x2a8
    33f6:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
    33fa:	68a0      	ldr	r0, [r4, #8]
    33fc:	4430      	add	r0, r6
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    33fe:	f009 fba1 	bl	cb44 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
    3402:	68a0      	ldr	r0, [r4, #8]
    3404:	2200      	movs	r2, #0
    3406:	1983      	adds	r3, r0, r6
    3408:	2101      	movs	r1, #1
    340a:	4448      	add	r0, r9
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    340c:	3610      	adds	r6, #16
		k_poll_event_init(&sh->ctx->events[i],
    340e:	f009 fb7c 	bl	cb0a <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
    3412:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
    3416:	f109 0914 	add.w	r9, r9, #20
    341a:	d1ee      	bne.n	33fa <shell_init+0x3e>
		sh->stats->log_lost_cnt = 0;
    341c:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
    341e:	68a0      	ldr	r0, [r4, #8]
    3420:	2600      	movs	r6, #0
    3422:	2102      	movs	r1, #2
    3424:	601e      	str	r6, [r3, #0]
    3426:	f500 7019 	add.w	r0, r0, #612	; 0x264
    342a:	f006 ffd4 	bl	a3d6 <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
    342e:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
    3430:	4a1b      	ldr	r2, [pc, #108]	; (34a0 <shell_init+0xe4>)
    3432:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    3434:	6818      	ldr	r0, [r3, #0]
    3436:	f007 f802 	bl	a43e <z_shell_strlen>
    343a:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
    343c:	4a19      	ldr	r2, [pc, #100]	; (34a4 <shell_init+0xe8>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
    343e:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
    3442:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
    3444:	f366 0582 	bfi	r5, r6, #2, #1
    3448:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
    344c:	6803      	ldr	r3, [r0, #0]
    344e:	4641      	mov	r1, r8
    3450:	681d      	ldr	r5, [r3, #0]
    3452:	4623      	mov	r3, r4
    3454:	47a8      	blx	r5
	if (ret == 0) {
    3456:	4605      	mov	r5, r0
    3458:	b9d0      	cbnz	r0, 3490 <shell_init+0xd4>
	shell->ctx->state = state;
    345a:	68a3      	ldr	r3, [r4, #8]
    345c:	2201      	movs	r2, #1
    345e:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
    3460:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3464:	2200      	movs	r2, #0
    3466:	2300      	movs	r3, #0
    3468:	e9cd 2306 	strd	r2, r3, [sp, #24]
    346c:	230e      	movs	r3, #14
    346e:	9303      	str	r3, [sp, #12]
    3470:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3472:	9504      	str	r5, [sp, #16]
    3474:	e9cd 7301 	strd	r7, r3, [sp, #4]
    3478:	9400      	str	r4, [sp, #0]
    347a:	4b0b      	ldr	r3, [pc, #44]	; (34a8 <shell_init+0xec>)
    347c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3480:	f004 ff34 	bl	82ec <z_impl_k_thread_create>
	shell->ctx->tid = tid;
    3484:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
    3486:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
    3488:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
    348c:	f004 fe7c 	bl	8188 <z_impl_k_thread_name_set>
}
    3490:	4628      	mov	r0, r5
    3492:	b009      	add	sp, #36	; 0x24
    3494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
    3498:	f06f 0577 	mvn.w	r5, #119	; 0x77
    349c:	e7f8      	b.n	3490 <shell_init+0xd4>
    349e:	bf00      	nop
    34a0:	00500018 	.word	0x00500018
    34a4:	0000a469 	.word	0x0000a469
    34a8:	000034f9 	.word	0x000034f9

000034ac <shell_start>:
{
    34ac:	b510      	push	{r4, lr}
    34ae:	4604      	mov	r4, r0
	return shell->ctx->state;
    34b0:	6880      	ldr	r0, [r0, #8]
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
    34b2:	7903      	ldrb	r3, [r0, #4]
    34b4:	2b01      	cmp	r3, #1
    34b6:	d119      	bne.n	34ec <shell_start+0x40>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    34b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34c0:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    34c4:	f006 ffce 	bl	a464 <k_mutex_lock.constprop.0.isra.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
    34c8:	2108      	movs	r1, #8
    34ca:	4620      	mov	r0, r4
    34cc:	f000 f986 	bl	37dc <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
    34d0:	4908      	ldr	r1, [pc, #32]	; (34f4 <shell_start+0x48>)
    34d2:	6960      	ldr	r0, [r4, #20]
    34d4:	f006 ffb9 	bl	a44a <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
    34d8:	4620      	mov	r0, r4
    34da:	f7ff fc05 	bl	2ce8 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
    34de:	68a0      	ldr	r0, [r4, #8]
    34e0:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    34e4:	f007 f80b 	bl	a4fe <k_mutex_unlock.isra.0>
	return 0;
    34e8:	2000      	movs	r0, #0
}
    34ea:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    34ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    34f0:	e7fb      	b.n	34ea <shell_start+0x3e>
    34f2:	bf00      	nop
    34f4:	0000dff0 	.word	0x0000dff0

000034f8 <shell_thread>:
{
    34f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34fc:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
    34fe:	6840      	ldr	r0, [r0, #4]
    3500:	6803      	ldr	r3, [r0, #0]
{
    3502:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
    3504:	689b      	ldr	r3, [r3, #8]
    3506:	2100      	movs	r1, #0
{
    3508:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
    350a:	4798      	blx	r3
	if (err != 0) {
    350c:	2800      	cmp	r0, #0
    350e:	d14c      	bne.n	35aa <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
    3510:	b126      	cbz	r6, 351c <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
    3512:	69e0      	ldr	r0, [r4, #28]
    3514:	462a      	mov	r2, r5
    3516:	4621      	mov	r1, r4
    3518:	f007 fd5f 	bl	afda <z_shell_log_backend_enable>
	err = shell_start(shell);
    351c:	4620      	mov	r0, r4
    351e:	f7ff ffc5 	bl	34ac <shell_start>
	if (err != 0) {
    3522:	2800      	cmp	r0, #0
    3524:	d141      	bne.n	35aa <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    3526:	f8df 8088 	ldr.w	r8, [pc, #136]	; 35b0 <shell_thread+0xb8>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    352a:	4f22      	ldr	r7, [pc, #136]	; (35b4 <shell_thread+0xbc>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    352c:	4e22      	ldr	r6, [pc, #136]	; (35b8 <shell_thread+0xc0>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
    352e:	68a0      	ldr	r0, [r4, #8]
    3530:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
    3534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    353c:	2103      	movs	r1, #3
    353e:	f005 ff2b 	bl	9398 <z_impl_k_poll>
		if (err != 0) {
    3542:	4605      	mov	r5, r0
    3544:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    354a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    354e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
    3552:	b175      	cbz	r5, 3572 <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3554:	f006 ff86 	bl	a464 <k_mutex_lock.constprop.0.isra.0>
			z_shell_fprintf(shell, SHELL_ERROR,
    3558:	4620      	mov	r0, r4
    355a:	462b      	mov	r3, r5
    355c:	4a17      	ldr	r2, [pc, #92]	; (35bc <shell_thread+0xc4>)
    355e:	2101      	movs	r1, #1
    3560:	f007 fc0c 	bl	ad7c <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
    3564:	68a0      	ldr	r0, [r4, #8]
}
    3566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
    356a:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    356e:	f006 bfc6 	b.w	a4fe <k_mutex_unlock.isra.0>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
    3572:	f006 ff77 	bl	a464 <k_mutex_lock.constprop.0.isra.0>
		if (shell->iface->api->update) {
    3576:	6860      	ldr	r0, [r4, #4]
    3578:	6803      	ldr	r3, [r0, #0]
    357a:	695b      	ldr	r3, [r3, #20]
    357c:	b103      	cbz	r3, 3580 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
    357e:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
    3580:	4642      	mov	r2, r8
    3582:	4620      	mov	r0, r4
    3584:	2102      	movs	r1, #2
    3586:	f006 ff44 	bl	a412 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
    358a:	463a      	mov	r2, r7
    358c:	4620      	mov	r0, r4
    358e:	2100      	movs	r1, #0
    3590:	f006 ff3f 	bl	a412 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
    3594:	4620      	mov	r0, r4
    3596:	4632      	mov	r2, r6
    3598:	2101      	movs	r1, #1
    359a:	f006 ff3a 	bl	a412 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
    359e:	68a0      	ldr	r0, [r4, #8]
    35a0:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    35a4:	f006 ffab 	bl	a4fe <k_mutex_unlock.isra.0>
    35a8:	e7c1      	b.n	352e <shell_thread+0x36>
}
    35aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35ae:	bf00      	nop
    35b0:	0000a47d 	.word	0x0000a47d
    35b4:	00002d31 	.word	0x00002d31
    35b8:	0000a503 	.word	0x0000a503
    35bc:	0000e4a4 	.word	0x0000e4a4

000035c0 <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
    35c0:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
    35c2:	4a0d      	ldr	r2, [pc, #52]	; (35f8 <cmd_help+0x38>)
{
    35c4:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
    35c6:	2108      	movs	r1, #8
    35c8:	f006 fffc 	bl	a5c4 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
    35cc:	4620      	mov	r0, r4
    35ce:	4a0b      	ldr	r2, [pc, #44]	; (35fc <cmd_help+0x3c>)
    35d0:	2108      	movs	r1, #8
    35d2:	f006 fff7 	bl	a5c4 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
    35d6:	4620      	mov	r0, r4
    35d8:	4a09      	ldr	r2, [pc, #36]	; (3600 <cmd_help+0x40>)
    35da:	2108      	movs	r1, #8
    35dc:	f006 fff2 	bl	a5c4 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
    35e0:	4620      	mov	r0, r4
    35e2:	4a08      	ldr	r2, [pc, #32]	; (3604 <cmd_help+0x44>)
    35e4:	2108      	movs	r1, #8
    35e6:	f006 ffed 	bl	a5c4 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
    35ea:	4620      	mov	r0, r4
    35ec:	4a06      	ldr	r2, [pc, #24]	; (3608 <cmd_help+0x48>)
    35ee:	2100      	movs	r1, #0
    35f0:	f000 fa1c 	bl	3a2c <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
    35f4:	2000      	movs	r0, #0
    35f6:	bd10      	pop	{r4, pc}
    35f8:	0000e4bb 	.word	0x0000e4bb
    35fc:	0000e4f9 	.word	0x0000e4f9
    3600:	0000e558 	.word	0x0000e558
    3604:	0000e5ac 	.word	0x0000e5ac
    3608:	0000e646 	.word	0x0000e646

0000360c <shell_hexdump_line>:
{
    360c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3610:	4616      	mov	r6, r2
    3612:	461f      	mov	r7, r3
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    3614:	4a2a      	ldr	r2, [pc, #168]	; (36c0 <shell_hexdump_line+0xb4>)
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    3616:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 36c4 <shell_hexdump_line+0xb8>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    361a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 36c8 <shell_hexdump_line+0xbc>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    361e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 36cc <shell_hexdump_line+0xc0>
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    3622:	460b      	mov	r3, r1
    3624:	2108      	movs	r1, #8
{
    3626:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
    3628:	f006 ffcc 	bl	a5c4 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    362c:	2500      	movs	r5, #0
		if (i < len) {
    362e:	42af      	cmp	r7, r5
    3630:	d931      	bls.n	3696 <shell_hexdump_line+0x8a>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
    3632:	5d73      	ldrb	r3, [r6, r5]
    3634:	464a      	mov	r2, r9
    3636:	2108      	movs	r1, #8
    3638:	4620      	mov	r0, r4
    363a:	f006 ffc3 	bl	a5c4 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    363e:	3501      	adds	r5, #1
    3640:	2d10      	cmp	r5, #16
    3642:	d120      	bne.n	3686 <shell_hexdump_line+0x7a>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    3644:	4a22      	ldr	r2, [pc, #136]	; (36d0 <shell_hexdump_line+0xc4>)
			shell_fprintf(shell, SHELL_NORMAL, " ");
    3646:	f8df 8084 	ldr.w	r8, [pc, #132]	; 36cc <shell_hexdump_line+0xc0>
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    364a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 36d4 <shell_hexdump_line+0xc8>
	shell_fprintf(shell, SHELL_NORMAL, "|");
    364e:	2108      	movs	r1, #8
    3650:	4620      	mov	r0, r4
    3652:	f006 ffb7 	bl	a5c4 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    3656:	2500      	movs	r5, #0
		if (i < len) {
    3658:	42bd      	cmp	r5, r7
    365a:	d22a      	bcs.n	36b2 <shell_hexdump_line+0xa6>
			char c = data[i];
    365c:	5d73      	ldrb	r3, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    365e:	f1a3 0220 	sub.w	r2, r3, #32
    3662:	2a5f      	cmp	r2, #95	; 0x5f
			shell_fprintf(shell, SHELL_NORMAL, "%c",
    3664:	bf28      	it	cs
    3666:	232e      	movcs	r3, #46	; 0x2e
    3668:	464a      	mov	r2, r9
    366a:	2108      	movs	r1, #8
    366c:	4620      	mov	r0, r4
    366e:	f006 ffa9 	bl	a5c4 <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
    3672:	3501      	adds	r5, #1
    3674:	2d10      	cmp	r5, #16
    3676:	d114      	bne.n	36a2 <shell_hexdump_line+0x96>
	shell_print(shell, "|");
    3678:	4620      	mov	r0, r4
    367a:	4a17      	ldr	r2, [pc, #92]	; (36d8 <shell_hexdump_line+0xcc>)
}
    367c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(shell, "|");
    3680:	2108      	movs	r1, #8
    3682:	f006 bf9f 	b.w	a5c4 <shell_fprintf>
		if (i > 0 && !(i % 8)) {
    3686:	076a      	lsls	r2, r5, #29
    3688:	d1d1      	bne.n	362e <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    368a:	4652      	mov	r2, sl
    368c:	2108      	movs	r1, #8
    368e:	4620      	mov	r0, r4
    3690:	f006 ff98 	bl	a5c4 <shell_fprintf>
    3694:	e7cb      	b.n	362e <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
    3696:	4642      	mov	r2, r8
    3698:	2108      	movs	r1, #8
    369a:	4620      	mov	r0, r4
    369c:	f006 ff92 	bl	a5c4 <shell_fprintf>
    36a0:	e7cd      	b.n	363e <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
    36a2:	076b      	lsls	r3, r5, #29
    36a4:	d1d8      	bne.n	3658 <shell_hexdump_line+0x4c>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    36a6:	4642      	mov	r2, r8
    36a8:	2108      	movs	r1, #8
    36aa:	4620      	mov	r0, r4
    36ac:	f006 ff8a 	bl	a5c4 <shell_fprintf>
    36b0:	e7d2      	b.n	3658 <shell_hexdump_line+0x4c>
			shell_fprintf(shell, SHELL_NORMAL, " ");
    36b2:	4642      	mov	r2, r8
    36b4:	2108      	movs	r1, #8
    36b6:	4620      	mov	r0, r4
    36b8:	f006 ff84 	bl	a5c4 <shell_fprintf>
    36bc:	e7d9      	b.n	3672 <shell_hexdump_line+0x66>
    36be:	bf00      	nop
    36c0:	0000e65c 	.word	0x0000e65c
    36c4:	0000dac0 	.word	0x0000dac0
    36c8:	0000daba 	.word	0x0000daba
    36cc:	0000dac2 	.word	0x0000dac2
    36d0:	0000dac4 	.word	0x0000dac4
    36d4:	0000e683 	.word	0x0000e683
    36d8:	0000e663 	.word	0x0000e663

000036dc <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
    36dc:	b510      	push	{r4, lr}
    36de:	4604      	mov	r4, r0
    36e0:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
    36e2:	460a      	mov	r2, r1
    36e4:	4601      	mov	r1, r0
    36e6:	4806      	ldr	r0, [pc, #24]	; (3700 <z_shell_fprintf_fmt+0x24>)
    36e8:	f7fd f9d0 	bl	a8c <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
    36ec:	6923      	ldr	r3, [r4, #16]
    36ee:	791b      	ldrb	r3, [r3, #4]
    36f0:	b123      	cbz	r3, 36fc <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    36f2:	4620      	mov	r0, r4
	}
}
    36f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
    36f8:	f006 bf8c 	b.w	a614 <z_shell_fprintf_buffer_flush>
}
    36fc:	bd10      	pop	{r4, pc}
    36fe:	bf00      	nop
    3700:	0000a62d 	.word	0x0000a62d

00003704 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
    3704:	b510      	push	{r4, lr}
    3706:	460b      	mov	r3, r1
    3708:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
    370a:	b950      	cbnz	r0, 3722 <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
    370c:	490e      	ldr	r1, [pc, #56]	; (3748 <z_shell_cmd_get+0x44>)
    370e:	4a0f      	ldr	r2, [pc, #60]	; (374c <z_shell_cmd_get+0x48>)
    3710:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
    3712:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
    3716:	d20f      	bcs.n	3738 <z_shell_cmd_get+0x34>
    3718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    371c:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
    371e:	4620      	mov	r0, r4
    3720:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
    3722:	6881      	ldr	r1, [r0, #8]
    3724:	b141      	cbz	r1, 3738 <z_shell_cmd_get+0x34>
			parent->subcmd->u.dynamic_get(idx, dloc);
    3726:	684a      	ldr	r2, [r1, #4]
		if (parent->subcmd->is_dynamic) {
    3728:	7809      	ldrb	r1, [r1, #0]
    372a:	b139      	cbz	r1, 373c <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
    372c:	4618      	mov	r0, r3
    372e:	4621      	mov	r1, r4
    3730:	4790      	blx	r2
			if (dloc->syntax != NULL) {
    3732:	6823      	ldr	r3, [r4, #0]
    3734:	2b00      	cmp	r3, #0
    3736:	d1f2      	bne.n	371e <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
    3738:	2400      	movs	r4, #0
    373a:	e7f0      	b.n	371e <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
    373c:	2014      	movs	r0, #20
    373e:	4343      	muls	r3, r0
    3740:	18d4      	adds	r4, r2, r3
    3742:	58d3      	ldr	r3, [r2, r3]
    3744:	e7f6      	b.n	3734 <z_shell_cmd_get+0x30>
    3746:	bf00      	nop
    3748:	0000cf7c 	.word	0x0000cf7c
    374c:	0000cfdc 	.word	0x0000cfdc

00003750 <z_clear_eos>:
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3750:	6883      	ldr	r3, [r0, #8]
    3752:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
    3756:	069b      	lsls	r3, r3, #26
    3758:	d503      	bpl.n	3762 <z_clear_eos+0x12>
    375a:	4902      	ldr	r1, [pc, #8]	; (3764 <z_clear_eos+0x14>)
    375c:	6940      	ldr	r0, [r0, #20]
    375e:	f007 b993 	b.w	aa88 <z_shell_raw_fprintf>
}
    3762:	4770      	bx	lr
    3764:	0000d050 	.word	0x0000d050

00003768 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3768:	4901      	ldr	r1, [pc, #4]	; (3770 <z_cursor_next_line_move.isra.0+0x8>)
    376a:	f007 b98d 	b.w	aa88 <z_shell_raw_fprintf>
    376e:	bf00      	nop
    3770:	0000dff1 	.word	0x0000dff1

00003774 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
    3774:	1e0a      	subs	r2, r1, #0
    3776:	dc0d      	bgt.n	3794 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
    3778:	d00e      	beq.n	3798 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
    377a:	2342      	movs	r3, #66	; 0x42
	return sh->ctx->cfg.flags.use_vt100 == 1;
    377c:	6881      	ldr	r1, [r0, #8]
    377e:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    3782:	0689      	lsls	r1, r1, #26
    3784:	d508      	bpl.n	3798 <z_shell_op_cursor_vert_move+0x24>
    3786:	2a00      	cmp	r2, #0
    3788:	4904      	ldr	r1, [pc, #16]	; (379c <z_shell_op_cursor_vert_move+0x28>)
    378a:	6940      	ldr	r0, [r0, #20]
    378c:	bfb8      	it	lt
    378e:	4252      	neglt	r2, r2
    3790:	f007 b97a 	b.w	aa88 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
    3794:	2341      	movs	r3, #65	; 0x41
    3796:	e7f1      	b.n	377c <z_shell_op_cursor_vert_move+0x8>
}
    3798:	4770      	bx	lr
    379a:	bf00      	nop
    379c:	0000e67f 	.word	0x0000e67f

000037a0 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
    37a0:	1e0a      	subs	r2, r1, #0
    37a2:	dc0d      	bgt.n	37c0 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
    37a4:	d00e      	beq.n	37c4 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
    37a6:	2344      	movs	r3, #68	; 0x44
    37a8:	6881      	ldr	r1, [r0, #8]
    37aa:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
    37ae:	0689      	lsls	r1, r1, #26
    37b0:	d508      	bpl.n	37c4 <z_shell_op_cursor_horiz_move+0x24>
    37b2:	2a00      	cmp	r2, #0
    37b4:	4904      	ldr	r1, [pc, #16]	; (37c8 <z_shell_op_cursor_horiz_move+0x28>)
    37b6:	6940      	ldr	r0, [r0, #20]
    37b8:	bfb8      	it	lt
    37ba:	4252      	neglt	r2, r2
    37bc:	f007 b964 	b.w	aa88 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
    37c0:	2343      	movs	r3, #67	; 0x43
    37c2:	e7f1      	b.n	37a8 <z_shell_op_cursor_horiz_move+0x8>
}
    37c4:	4770      	bx	lr
    37c6:	bf00      	nop
    37c8:	0000e67f 	.word	0x0000e67f

000037cc <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
    37cc:	6882      	ldr	r2, [r0, #8]
    37ce:	4902      	ldr	r1, [pc, #8]	; (37d8 <z_shell_print_cmd+0xc>)
    37d0:	6940      	ldr	r0, [r0, #20]
    37d2:	3242      	adds	r2, #66	; 0x42
    37d4:	f007 b958 	b.w	aa88 <z_shell_raw_fprintf>
    37d8:	0000e110 	.word	0x0000e110

000037dc <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
    37dc:	2908      	cmp	r1, #8
{
    37de:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
    37e0:	d816      	bhi.n	3810 <z_shell_vt100_color_set+0x34>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
    37e2:	6883      	ldr	r3, [r0, #8]
    37e4:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    37e8:	4291      	cmp	r1, r2
    37ea:	d011      	beq.n	3810 <z_shell_vt100_color_set+0x34>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;

	if (color != SHELL_NORMAL) {
    37ec:	2a08      	cmp	r2, #8
	shell->ctx->vt100_ctx.col.col = color;
    37ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    37f2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (color != SHELL_NORMAL) {
    37f6:	d005      	beq.n	3804 <z_shell_vt100_color_set+0x28>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
    37f8:	0699      	lsls	r1, r3, #26
    37fa:	d509      	bpl.n	3810 <z_shell_vt100_color_set+0x34>
    37fc:	4905      	ldr	r1, [pc, #20]	; (3814 <z_shell_vt100_color_set+0x38>)
    37fe:	6940      	ldr	r0, [r0, #20]
    3800:	f007 b942 	b.w	aa88 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
    3804:	069b      	lsls	r3, r3, #26
    3806:	d503      	bpl.n	3810 <z_shell_vt100_color_set+0x34>
    3808:	4903      	ldr	r1, [pc, #12]	; (3818 <z_shell_vt100_color_set+0x3c>)
    380a:	6940      	ldr	r0, [r0, #20]
    380c:	f007 b93c 	b.w	aa88 <z_shell_raw_fprintf>
	}
}
    3810:	4770      	bx	lr
    3812:	bf00      	nop
    3814:	0000e686 	.word	0x0000e686
    3818:	0000d055 	.word	0x0000d055

0000381c <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
    381c:	b538      	push	{r3, r4, r5, lr}
    381e:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
    3820:	7809      	ldrb	r1, [r1, #0]
{
    3822:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
    3824:	f7ff ffda 	bl	37dc <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
    3828:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
    382a:	2a07      	cmp	r2, #7
    382c:	d810      	bhi.n	3850 <z_shell_vt100_colors_restore+0x34>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
    382e:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
    3830:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
    3834:	4291      	cmp	r1, r2
    3836:	d00b      	beq.n	3850 <z_shell_vt100_colors_restore+0x34>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
    3838:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    383c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    3840:	069b      	lsls	r3, r3, #26
    3842:	d505      	bpl.n	3850 <z_shell_vt100_colors_restore+0x34>
    3844:	6960      	ldr	r0, [r4, #20]
    3846:	4903      	ldr	r1, [pc, #12]	; (3854 <z_shell_vt100_colors_restore+0x38>)
}
    3848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
    384c:	f007 b91c 	b.w	aa88 <z_shell_raw_fprintf>
}
    3850:	bd38      	pop	{r3, r4, r5, pc}
    3852:	bf00      	nop
    3854:	0000e68f 	.word	0x0000e68f

00003858 <z_shell_op_word_remove>:
{
    3858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    385a:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
    385c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    385e:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    3860:	2a00      	cmp	r2, #0
    3862:	d04e      	beq.n	3902 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    3864:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
    3866:	2800      	cmp	r0, #0
    3868:	d04b      	beq.n	3902 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
    386a:	3041      	adds	r0, #65	; 0x41
    386c:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
    386e:	f103 0642 	add.w	r6, r3, #66	; 0x42
    3872:	4603      	mov	r3, r0
    3874:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
    3876:	42b3      	cmp	r3, r6
    3878:	b2a4      	uxth	r4, r4
    387a:	4619      	mov	r1, r3
    387c:	d30d      	bcc.n	389a <z_shell_op_word_remove+0x42>
    387e:	f811 7901 	ldrb.w	r7, [r1], #-1
    3882:	2f20      	cmp	r7, #32
    3884:	d03b      	beq.n	38fe <z_shell_op_word_remove+0xa6>
    3886:	4619      	mov	r1, r3
    3888:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
    388a:	7808      	ldrb	r0, [r1, #0]
    388c:	2820      	cmp	r0, #32
    388e:	d004      	beq.n	389a <z_shell_op_word_remove+0x42>
		++chars_to_delete;
    3890:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
    3892:	429e      	cmp	r6, r3
		++chars_to_delete;
    3894:	b2a4      	uxth	r4, r4
		--str;
    3896:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
    3898:	d9f5      	bls.n	3886 <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
    389a:	1c63      	adds	r3, r4, #1
    389c:	1c4e      	adds	r6, r1, #1
    389e:	1b12      	subs	r2, r2, r4
    38a0:	4419      	add	r1, r3
    38a2:	4630      	mov	r0, r6
    38a4:	f007 ffa1 	bl	b7ea <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
    38a8:	68a9      	ldr	r1, [r5, #8]
    38aa:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
    38ac:	1b12      	subs	r2, r2, r4
    38ae:	b292      	uxth	r2, r2
    38b0:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    38b2:	440a      	add	r2, r1
    38b4:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
    38b6:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    38b8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
    38bc:	b209      	sxth	r1, r1
    38be:	4628      	mov	r0, r5
    38c0:	f007 f94a 	bl	ab58 <z_shell_op_cursor_move>
    38c4:	68ab      	ldr	r3, [r5, #8]
    38c6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    38ca:	069a      	lsls	r2, r3, #26
    38cc:	d503      	bpl.n	38d6 <z_shell_op_word_remove+0x7e>
    38ce:	490d      	ldr	r1, [pc, #52]	; (3904 <z_shell_op_word_remove+0xac>)
    38d0:	6968      	ldr	r0, [r5, #20]
    38d2:	f007 f8d9 	bl	aa88 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
    38d6:	4633      	mov	r3, r6
    38d8:	4a0b      	ldr	r2, [pc, #44]	; (3908 <z_shell_op_word_remove+0xb0>)
    38da:	2108      	movs	r1, #8
    38dc:	4628      	mov	r0, r5
    38de:	f007 fa4d 	bl	ad7c <z_shell_fprintf>
	z_clear_eos(shell);
    38e2:	4628      	mov	r0, r5
    38e4:	f7ff ff34 	bl	3750 <z_clear_eos>
	return sh->ctx->cfg.flags.use_vt100 == 1;
    38e8:	68ab      	ldr	r3, [r5, #8]
    38ea:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    38ee:	069b      	lsls	r3, r3, #26
    38f0:	d507      	bpl.n	3902 <z_shell_op_word_remove+0xaa>
    38f2:	6968      	ldr	r0, [r5, #20]
    38f4:	4905      	ldr	r1, [pc, #20]	; (390c <z_shell_op_word_remove+0xb4>)
}
    38f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    38fa:	f007 b8c5 	b.w	aa88 <z_shell_raw_fprintf>
    38fe:	460b      	mov	r3, r1
    3900:	e7b8      	b.n	3874 <z_shell_op_word_remove+0x1c>
    3902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3904:	0000d05a 	.word	0x0000d05a
    3908:	0000e110 	.word	0x0000e110
    390c:	0000d05e 	.word	0x0000d05e

00003910 <reprint_from_cursor>:
{
    3910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3914:	4604      	mov	r4, r0
    3916:	460d      	mov	r5, r1
	if (data_removed) {
    3918:	4617      	mov	r7, r2
    391a:	b10a      	cbz	r2, 3920 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
    391c:	f7ff ff18 	bl	3750 <z_clear_eos>
	return sh->ctx->cfg.flags.obscure == 1;
    3920:	68a3      	ldr	r3, [r4, #8]
    3922:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3926:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if (z_flag_obscure_get(shell)) {
    3928:	0752      	lsls	r2, r2, #29
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    392a:	f100 0042 	add.w	r0, r0, #66	; 0x42
    392e:	4403      	add	r3, r0
	if (z_flag_obscure_get(shell)) {
    3930:	d51f      	bpl.n	3972 <reprint_from_cursor+0x62>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    3932:	4618      	mov	r0, r3
    3934:	f007 ff1b 	bl	b76e <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    3938:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3980 <reprint_from_cursor+0x70>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
    393c:	4606      	mov	r6, r0
		while (len--) {
    393e:	b996      	cbnz	r6, 3966 <reprint_from_cursor+0x56>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    3940:	68a3      	ldr	r3, [r4, #8]
    3942:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    3944:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
    3946:	4620      	mov	r0, r4
    3948:	f007 f8ab 	bl	aaa2 <full_line_cmd>
    394c:	b120      	cbz	r0, 3958 <reprint_from_cursor+0x48>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
    394e:	b107      	cbz	r7, 3952 <reprint_from_cursor+0x42>
    3950:	b115      	cbz	r5, 3958 <reprint_from_cursor+0x48>
			z_cursor_next_line_move(shell);
    3952:	6960      	ldr	r0, [r4, #20]
    3954:	f7ff ff08 	bl	3768 <z_cursor_next_line_move.isra.0>
	z_shell_op_cursor_move(shell, -diff);
    3958:	4269      	negs	r1, r5
    395a:	4620      	mov	r0, r4
    395c:	b209      	sxth	r1, r1
}
    395e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
    3962:	f007 b8f9 	b.w	ab58 <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
    3966:	6960      	ldr	r0, [r4, #20]
    3968:	4641      	mov	r1, r8
    396a:	f007 f88d 	bl	aa88 <z_shell_raw_fprintf>
    396e:	3e01      	subs	r6, #1
    3970:	e7e5      	b.n	393e <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
    3972:	4a04      	ldr	r2, [pc, #16]	; (3984 <reprint_from_cursor+0x74>)
    3974:	2108      	movs	r1, #8
    3976:	4620      	mov	r0, r4
    3978:	f007 fa00 	bl	ad7c <z_shell_fprintf>
    397c:	e7e0      	b.n	3940 <reprint_from_cursor+0x30>
    397e:	bf00      	nop
    3980:	0000ee27 	.word	0x0000ee27
    3984:	0000e110 	.word	0x0000e110

00003988 <z_shell_op_char_insert>:
{
    3988:	b513      	push	{r0, r1, r4, lr}
	return sh->ctx->cfg.flags.insert_mode == 1;
    398a:	6883      	ldr	r3, [r0, #8]
    398c:	f88d 1007 	strb.w	r1, [sp, #7]
    3990:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
    3994:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
    3996:	07d0      	lsls	r0, r2, #31
    3998:	d521      	bpl.n	39de <z_shell_op_char_insert+0x56>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
    399a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
    399c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    399e:	428a      	cmp	r2, r1
    39a0:	d01d      	beq.n	39de <z_shell_op_char_insert+0x56>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    39a2:	1c48      	adds	r0, r1, #1
    39a4:	4419      	add	r1, r3
		char_replace(shell, data);
    39a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
    39aa:	87d8      	strh	r0, [r3, #62]	; 0x3e
    39ac:	f881 2042 	strb.w	r2, [r1, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    39b0:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    39b4:	0789      	lsls	r1, r1, #30
    39b6:	d510      	bpl.n	39da <z_shell_op_char_insert+0x52>
	return sh->ctx->cfg.flags.obscure == 1;
    39b8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    39bc:	6960      	ldr	r0, [r4, #20]
    39be:	490b      	ldr	r1, [pc, #44]	; (39ec <z_shell_op_char_insert+0x64>)
		data = '*';
    39c0:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
    39c4:	bf18      	it	ne
    39c6:	222a      	movne	r2, #42	; 0x2a
    39c8:	f007 f85e 	bl	aa88 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
    39cc:	4620      	mov	r0, r4
    39ce:	f007 f87c 	bl	aaca <z_shell_cursor_in_empty_line>
    39d2:	b110      	cbz	r0, 39da <z_shell_op_char_insert+0x52>
		z_cursor_next_line_move(shell);
    39d4:	6960      	ldr	r0, [r4, #20]
    39d6:	f7ff fec7 	bl	3768 <z_cursor_next_line_move.isra.0>
}
    39da:	b002      	add	sp, #8
    39dc:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
    39de:	2201      	movs	r2, #1
    39e0:	f10d 0107 	add.w	r1, sp, #7
    39e4:	4620      	mov	r0, r4
    39e6:	f007 f9d6 	bl	ad96 <data_insert>
}
    39ea:	e7f6      	b.n	39da <z_shell_op_char_insert+0x52>
    39ec:	0000e683 	.word	0x0000e683

000039f0 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    39f0:	6883      	ldr	r3, [r0, #8]
    39f2:	4a0a      	ldr	r2, [pc, #40]	; (3a1c <z_shell_print_prompt_and_cmd+0x2c>)
    39f4:	681b      	ldr	r3, [r3, #0]
{
    39f6:	b510      	push	{r4, lr}
    39f8:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
    39fa:	2102      	movs	r1, #2
    39fc:	f007 f9be 	bl	ad7c <z_shell_fprintf>
	return sh->ctx->cfg.flags.echo == 1;
    3a00:	68a3      	ldr	r3, [r4, #8]
    3a02:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	if (z_flag_echo_get(shell)) {
    3a06:	079b      	lsls	r3, r3, #30
    3a08:	d507      	bpl.n	3a1a <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
    3a0a:	4620      	mov	r0, r4
    3a0c:	f7ff fede 	bl	37cc <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
    3a10:	4620      	mov	r0, r4
}
    3a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
    3a16:	f007 b87c 	b.w	ab12 <z_shell_op_cursor_position_synchronize>
}
    3a1a:	bd10      	pop	{r4, pc}
    3a1c:	0000e110 	.word	0x0000e110

00003a20 <z_cursor_next_line_move.isra.0>:
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
    3a20:	4901      	ldr	r1, [pc, #4]	; (3a28 <z_cursor_next_line_move.isra.0+0x8>)
    3a22:	f007 bb62 	b.w	b0ea <z_shell_raw_fprintf>
    3a26:	bf00      	nop
    3a28:	0000dff1 	.word	0x0000dff1

00003a2c <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
    3a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a30:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
    3a32:	2100      	movs	r1, #0
{
    3a34:	b08d      	sub	sp, #52	; 0x34
    3a36:	4604      	mov	r4, r0
    3a38:	4617      	mov	r7, r2
	uint16_t longest = 0U;
    3a3a:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3a3c:	aa07      	add	r2, sp, #28
    3a3e:	4630      	mov	r0, r6
    3a40:	f101 0801 	add.w	r8, r1, #1
    3a44:	f7ff fe5e 	bl	3704 <z_shell_cmd_get>
    3a48:	b9a0      	cbnz	r0, 3a74 <z_shell_help_subcmd_print+0x48>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
    3a4a:	b185      	cbz	r5, 3a6e <z_shell_help_subcmd_print+0x42>
		return;
	}

	if (description != NULL) {
    3a4c:	b127      	cbz	r7, 3a58 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
    3a4e:	463a      	mov	r2, r7
    3a50:	2108      	movs	r1, #8
    3a52:	4620      	mov	r0, r4
    3a54:	f007 f992 	bl	ad7c <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3a58:	4f1e      	ldr	r7, [pc, #120]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    3a5a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3a5e:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3a60:	aa07      	add	r2, sp, #28
    3a62:	4630      	mov	r0, r6
    3a64:	f101 0801 	add.w	r8, r1, #1
    3a68:	f7ff fe4c 	bl	3704 <z_shell_cmd_get>
    3a6c:	b960      	cbnz	r0, 3a88 <z_shell_help_subcmd_print+0x5c>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
    3a6e:	b00d      	add	sp, #52	; 0x34
    3a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
    3a74:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
    3a76:	b110      	cbz	r0, 3a7e <z_shell_help_subcmd_print+0x52>
    3a78:	f007 fe79 	bl	b76e <strlen>
    3a7c:	b280      	uxth	r0, r0
    3a7e:	4285      	cmp	r5, r0
    3a80:	bf38      	it	cc
    3a82:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3a84:	4641      	mov	r1, r8
    3a86:	e7d9      	b.n	3a3c <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
    3a88:	6803      	ldr	r3, [r0, #0]
    3a8a:	f8d0 a004 	ldr.w	sl, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3a8e:	4811      	ldr	r0, [pc, #68]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
		help_item_print(shell, entry->syntax, longest, entry->help);
    3a90:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3a92:	f007 fe6c 	bl	b76e <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    3a96:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3a98:	4683      	mov	fp, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
    3a9a:	b183      	cbz	r3, 3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
    3a9c:	781a      	ldrb	r2, [r3, #0]
    3a9e:	b172      	cbz	r2, 3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
    3aa0:	e9cd 3701 	strd	r3, r7, [sp, #4]
    3aa4:	9500      	str	r5, [sp, #0]
    3aa6:	463b      	mov	r3, r7
    3aa8:	464a      	mov	r2, r9
    3aaa:	2108      	movs	r1, #8
    3aac:	4620      	mov	r0, r4
    3aae:	f007 f965 	bl	ad7c <z_shell_fprintf>
	if (item_help == NULL) {
    3ab2:	f1ba 0f00 	cmp.w	sl, #0
    3ab6:	d104      	bne.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		z_cursor_next_line_move(shell);
    3ab8:	6960      	ldr	r0, [r4, #20]
    3aba:	f7ff ffb1 	bl	3a20 <z_cursor_next_line_move.isra.0>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
    3abe:	4641      	mov	r1, r8
    3ac0:	e7ce      	b.n	3a60 <z_shell_help_subcmd_print+0x34>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
    3ac2:	1c6a      	adds	r2, r5, #1
    3ac4:	eb02 024b 	add.w	r2, r2, fp, lsl #1
	formatted_text_print(shell, item_help, offset, false);
    3ac8:	b292      	uxth	r2, r2
    3aca:	4651      	mov	r1, sl
    3acc:	4620      	mov	r0, r4
    3ace:	f007 fb19 	bl	b104 <formatted_text_print.constprop.0>
    3ad2:	e7f4      	b.n	3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
    3ad4:	0000e6b0 	.word	0x0000e6b0
    3ad8:	0000e698 	.word	0x0000e698

00003adc <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
    3adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ade:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3ae0:	6808      	ldr	r0, [r1, #0]
{
    3ae2:	460d      	mov	r5, r1
    3ae4:	b1b8      	cbz	r0, 3b16 <z_shell_help_cmd_print+0x3a>
    3ae6:	f007 fe42 	bl	b76e <strlen>
    3aea:	b284      	uxth	r4, r0
    3aec:	4f0b      	ldr	r7, [pc, #44]	; (3b1c <z_shell_help_cmd_print+0x40>)
    3aee:	4638      	mov	r0, r7
    3af0:	f007 fe3d 	bl	b76e <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    3af4:	682b      	ldr	r3, [r5, #0]
    3af6:	4a0a      	ldr	r2, [pc, #40]	; (3b20 <z_shell_help_cmd_print+0x44>)
    3af8:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3afa:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
    3afc:	2108      	movs	r1, #8
    3afe:	4630      	mov	r0, r6
    3b00:	f007 f93c 	bl	ad7c <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
    3b04:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
    3b06:	6869      	ldr	r1, [r5, #4]
    3b08:	4622      	mov	r2, r4
    3b0a:	4630      	mov	r0, r6
}
    3b0c:	b003      	add	sp, #12
    3b0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
    3b12:	f007 baf7 	b.w	b104 <formatted_text_print.constprop.0>
    3b16:	4604      	mov	r4, r0
    3b18:	e7e8      	b.n	3aec <z_shell_help_cmd_print+0x10>
    3b1a:	bf00      	nop
    3b1c:	0000e6ac 	.word	0x0000e6ac
    3b20:	0000e49f 	.word	0x0000e49f

00003b24 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
    3b24:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    3b26:	4907      	ldr	r1, [pc, #28]	; (3b44 <z_shell_help_request+0x20>)
{
    3b28:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
    3b2a:	f007 fe30 	bl	b78e <strcmp>
    3b2e:	b138      	cbz	r0, 3b40 <z_shell_help_request+0x1c>
    3b30:	4905      	ldr	r1, [pc, #20]	; (3b48 <z_shell_help_request+0x24>)
    3b32:	4620      	mov	r0, r4
    3b34:	f007 fe2b 	bl	b78e <strcmp>
    3b38:	fab0 f080 	clz	r0, r0
    3b3c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
    3b3e:	bd10      	pop	{r4, pc}
		return true;
    3b40:	2001      	movs	r0, #1
    3b42:	e7fc      	b.n	3b3e <z_shell_help_request+0x1a>
    3b44:	0000e6a2 	.word	0x0000e6a2
    3b48:	0000e6a5 	.word	0x0000e6a5

00003b4c <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
    3b4c:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3b4e:	6883      	ldr	r3, [r0, #8]
    3b50:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    3b54:	069b      	lsls	r3, r3, #26
{
    3b56:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
    3b58:	d503      	bpl.n	3b62 <cmd_resize_default+0x16>
    3b5a:	4904      	ldr	r1, [pc, #16]	; (3b6c <cmd_resize_default+0x20>)
    3b5c:	6940      	ldr	r0, [r0, #20]
    3b5e:	f007 fb48 	bl	b1f2 <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
    3b62:	68a3      	ldr	r3, [r4, #8]
    3b64:	4a02      	ldr	r2, [pc, #8]	; (3b70 <cmd_resize_default+0x24>)
    3b66:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
    3b68:	2000      	movs	r0, #0
    3b6a:	bd10      	pop	{r4, pc}
    3b6c:	0000d062 	.word	0x0000d062
    3b70:	00500018 	.word	0x00500018

00003b74 <cmd_shell_stats_show>:
{
    3b74:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
    3b76:	6983      	ldr	r3, [r0, #24]
    3b78:	4a03      	ldr	r2, [pc, #12]	; (3b88 <cmd_shell_stats_show+0x14>)
    3b7a:	681b      	ldr	r3, [r3, #0]
    3b7c:	2108      	movs	r1, #8
    3b7e:	f006 fd21 	bl	a5c4 <shell_fprintf>
}
    3b82:	2000      	movs	r0, #0
    3b84:	bd08      	pop	{r3, pc}
    3b86:	bf00      	nop
    3b88:	0000e6b3 	.word	0x0000e6b3

00003b8c <cmd_history>:
{
    3b8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
    3b8e:	4e0f      	ldr	r6, [pc, #60]	; (3bcc <cmd_history+0x40>)
{
    3b90:	4604      	mov	r4, r0
    3b92:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
    3b94:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
    3b96:	68e0      	ldr	r0, [r4, #12]
    3b98:	f10d 030e 	add.w	r3, sp, #14
    3b9c:	f502 72a1 	add.w	r2, r2, #322	; 0x142
    3ba0:	2101      	movs	r1, #1
    3ba2:	f007 fbae 	bl	b302 <z_shell_history_get>
		if (len) {
    3ba6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3baa:	68a3      	ldr	r3, [r4, #8]
    3bac:	b150      	cbz	r0, 3bc4 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
    3bae:	f503 73a1 	add.w	r3, r3, #322	; 0x142
    3bb2:	9300      	str	r3, [sp, #0]
    3bb4:	4632      	mov	r2, r6
    3bb6:	462b      	mov	r3, r5
    3bb8:	2108      	movs	r1, #8
    3bba:	4620      	mov	r0, r4
    3bbc:	f006 fd02 	bl	a5c4 <shell_fprintf>
	while (1) {
    3bc0:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
    3bc2:	e7e7      	b.n	3b94 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
    3bc4:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
    3bc8:	b004      	add	sp, #16
    3bca:	bd70      	pop	{r4, r5, r6, pc}
    3bcc:	0000e6c3 	.word	0x0000e6c3

00003bd0 <cmd_echo>:
	if (argc == 2) {
    3bd0:	2902      	cmp	r1, #2
{
    3bd2:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
    3bd4:	d10d      	bne.n	3bf2 <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
    3bd6:	6853      	ldr	r3, [r2, #4]
    3bd8:	9301      	str	r3, [sp, #4]
    3bda:	4b0e      	ldr	r3, [pc, #56]	; (3c14 <cmd_echo+0x44>)
    3bdc:	9300      	str	r3, [sp, #0]
    3bde:	6813      	ldr	r3, [r2, #0]
    3be0:	4a0d      	ldr	r2, [pc, #52]	; (3c18 <cmd_echo+0x48>)
    3be2:	2101      	movs	r1, #1
    3be4:	f006 fcee 	bl	a5c4 <shell_fprintf>
    3be8:	f06f 0015 	mvn.w	r0, #21
}
    3bec:	b003      	add	sp, #12
    3bee:	f85d fb04 	ldr.w	pc, [sp], #4
	return sh->ctx->cfg.flags.echo == 1;
    3bf2:	6883      	ldr	r3, [r0, #8]
	shell_print(shell, "Echo status: %s",
    3bf4:	4a09      	ldr	r2, [pc, #36]	; (3c1c <cmd_echo+0x4c>)
    3bf6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
    3bfa:	f013 0f02 	tst.w	r3, #2
    3bfe:	f04f 0108 	mov.w	r1, #8
    3c02:	4b07      	ldr	r3, [pc, #28]	; (3c20 <cmd_echo+0x50>)
    3c04:	bf18      	it	ne
    3c06:	4613      	movne	r3, r2
    3c08:	4a06      	ldr	r2, [pc, #24]	; (3c24 <cmd_echo+0x54>)
    3c0a:	f006 fcdb 	bl	a5c4 <shell_fprintf>
	return 0;
    3c0e:	2000      	movs	r0, #0
    3c10:	e7ec      	b.n	3bec <cmd_echo+0x1c>
    3c12:	bf00      	nop
    3c14:	0000e6d6 	.word	0x0000e6d6
    3c18:	0000e6cd 	.word	0x0000e6cd
    3c1c:	0000da72 	.word	0x0000da72
    3c20:	0000da61 	.word	0x0000da61
    3c24:	0000e6eb 	.word	0x0000e6eb

00003c28 <cmd_clear>:
{
    3c28:	b510      	push	{r4, lr}
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3c2a:	6883      	ldr	r3, [r0, #8]
    3c2c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3c30:	069a      	lsls	r2, r3, #26
{
    3c32:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
    3c34:	d503      	bpl.n	3c3e <cmd_clear+0x16>
    3c36:	4907      	ldr	r1, [pc, #28]	; (3c54 <cmd_clear+0x2c>)
    3c38:	6940      	ldr	r0, [r0, #20]
    3c3a:	f007 fada 	bl	b1f2 <z_shell_raw_fprintf>
    3c3e:	68a3      	ldr	r3, [r4, #8]
    3c40:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
    3c44:	069b      	lsls	r3, r3, #26
    3c46:	d503      	bpl.n	3c50 <cmd_clear+0x28>
    3c48:	4903      	ldr	r1, [pc, #12]	; (3c58 <cmd_clear+0x30>)
    3c4a:	6960      	ldr	r0, [r4, #20]
    3c4c:	f007 fad1 	bl	b1f2 <z_shell_raw_fprintf>
}
    3c50:	2000      	movs	r0, #0
    3c52:	bd10      	pop	{r4, pc}
    3c54:	0000d069 	.word	0x0000d069
    3c58:	0000d06e 	.word	0x0000d06e

00003c5c <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
    3c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
    3c5e:	2901      	cmp	r1, #1
{
    3c60:	b085      	sub	sp, #20
    3c62:	4604      	mov	r4, r0
	if (argc != 1) {
    3c64:	d00d      	beq.n	3c82 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
    3c66:	6853      	ldr	r3, [r2, #4]
    3c68:	9301      	str	r3, [sp, #4]
    3c6a:	4b59      	ldr	r3, [pc, #356]	; (3dd0 <cmd_resize+0x174>)
    3c6c:	9300      	str	r3, [sp, #0]
    3c6e:	6813      	ldr	r3, [r2, #0]
    3c70:	4a58      	ldr	r2, [pc, #352]	; (3dd4 <cmd_resize+0x178>)
    3c72:	2101      	movs	r1, #1
    3c74:	f006 fca6 	bl	a5c4 <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
    3c78:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
    3c7c:	4628      	mov	r0, r5
    3c7e:	b005      	add	sp, #20
    3c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c82:	6883      	ldr	r3, [r0, #8]
    3c84:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
    3c88:	069a      	lsls	r2, r3, #26
    3c8a:	d503      	bpl.n	3c94 <cmd_resize+0x38>
    3c8c:	4952      	ldr	r1, [pc, #328]	; (3dd8 <cmd_resize+0x17c>)
    3c8e:	6940      	ldr	r0, [r0, #20]
    3c90:	f007 faaf 	bl	b1f2 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
    3c94:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
    3c98:	4620      	mov	r0, r4
    3c9a:	f7ff fd6b 	bl	3774 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
    3c9e:	21fa      	movs	r1, #250	; 0xfa
    3ca0:	4620      	mov	r0, r4
    3ca2:	f7ff fd7d 	bl	37a0 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3ca6:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
    3ca8:	2500      	movs	r5, #0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3caa:	f44f 7280 	mov.w	r2, #256	; 0x100
    3cae:	4629      	mov	r1, r5
    3cb0:	f500 70a1 	add.w	r0, r0, #322	; 0x142
	char c = 0;
    3cb4:	f88d 500b 	strb.w	r5, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    3cb8:	f007 fdba 	bl	b830 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
    3cbc:	4947      	ldr	r1, [pc, #284]	; (3ddc <cmd_resize+0x180>)
    3cbe:	6960      	ldr	r0, [r4, #20]
    3cc0:	f007 fa97 	bl	b1f2 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    3cc4:	6960      	ldr	r0, [r4, #20]
    3cc6:	f006 fca5 	bl	a614 <z_shell_fprintf_buffer_flush>
    3cca:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
    3cce:	6860      	ldr	r0, [r4, #4]
    3cd0:	6803      	ldr	r3, [r0, #0]
    3cd2:	2201      	movs	r2, #1
    3cd4:	691f      	ldr	r7, [r3, #16]
    3cd6:	f10d 010b 	add.w	r1, sp, #11
    3cda:	ab03      	add	r3, sp, #12
    3cdc:	47b8      	blx	r7
			if (cnt == 0) {
    3cde:	9b03      	ldr	r3, [sp, #12]
    3ce0:	b953      	cbnz	r3, 3cf8 <cmd_resize+0x9c>
	for (uint16_t i = 0; i < 1000; i++) {
    3ce2:	3e01      	subs	r6, #1
	z_impl_k_busy_wait(usec_to_wait);
    3ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3ce8:	b2b6      	uxth	r6, r6
    3cea:	f008 fdb2 	bl	c852 <z_impl_k_busy_wait>
    3cee:	2e00      	cmp	r6, #0
    3cf0:	d1ed      	bne.n	3cce <cmd_resize+0x72>
		ret_val = -ENOTSUP;
    3cf2:	f06f 0585 	mvn.w	r5, #133	; 0x85
    3cf6:	e034      	b.n	3d62 <cmd_resize+0x106>
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3cf8:	f89d 300b 	ldrb.w	r3, [sp, #11]
			    (shell->ctx->temp_buff[0] !=
    3cfc:	68a1      	ldr	r1, [r4, #8]
			if ((c != SHELL_VT100_ASCII_ESC) &&
    3cfe:	2b1b      	cmp	r3, #27
    3d00:	d05a      	beq.n	3db8 <cmd_resize+0x15c>
    3d02:	f891 2142 	ldrb.w	r2, [r1, #322]	; 0x142
    3d06:	2a1b      	cmp	r2, #27
    3d08:	d1e1      	bne.n	3cce <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
    3d0a:	2b52      	cmp	r3, #82	; 0x52
    3d0c:	d154      	bne.n	3db8 <cmd_resize+0x15c>
				shell->ctx->temp_buff[buff_idx] = '\0';
    3d0e:	440d      	add	r5, r1
    3d10:	2300      	movs	r3, #0
    3d12:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
    3d16:	f891 2143 	ldrb.w	r2, [r1, #323]	; 0x143
    3d1a:	2a5b      	cmp	r2, #91	; 0x5b
    3d1c:	d154      	bne.n	3dc8 <cmd_resize+0x16c>
    3d1e:	f501 75a2 	add.w	r5, r1, #324	; 0x144
	*y = 0U;
    3d22:	461f      	mov	r7, r3
				buff_idx = 2U;
    3d24:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    3d26:	f815 0b01 	ldrb.w	r0, [r5], #1
    3d2a:	4632      	mov	r2, r6
    3d2c:	283b      	cmp	r0, #59	; 0x3b
					(shell->ctx->temp_buff[buff_idx++] -
    3d2e:	f106 0601 	add.w	r6, r6, #1
    3d32:	b2b6      	uxth	r6, r6
				while (shell->ctx->temp_buff[buff_idx] != ';') {
    3d34:	d12b      	bne.n	3d8e <cmd_resize+0x132>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    3d36:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    3d3a:	d0da      	beq.n	3cf2 <cmd_resize+0x96>
    3d3c:	f202 1243 	addw	r2, r2, #323	; 0x143
    3d40:	fa11 f282 	uxtah	r2, r1, r2
	*x = 0U;
    3d44:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
    3d46:	f812 5b01 	ldrb.w	r5, [r2], #1
    3d4a:	bb55      	cbnz	r5, 3da2 <cmd_resize+0x146>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    3d4c:	2bfa      	cmp	r3, #250	; 0xfa
    3d4e:	bf28      	it	cs
    3d50:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3d52:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
    3d54:	854b      	strh	r3, [r1, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3d56:	463b      	mov	r3, r7
    3d58:	bf28      	it	cs
    3d5a:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
    3d5c:	f881 5142 	strb.w	r5, [r1, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
    3d60:	850b      	strh	r3, [r1, #40]	; 0x28
	return sh->ctx->cfg.flags.use_vt100 == 1;
    3d62:	68a3      	ldr	r3, [r4, #8]
    3d64:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
    3d68:	069b      	lsls	r3, r3, #26
    3d6a:	d503      	bpl.n	3d74 <cmd_resize+0x118>
    3d6c:	491c      	ldr	r1, [pc, #112]	; (3de0 <cmd_resize+0x184>)
    3d6e:	6960      	ldr	r0, [r4, #20]
    3d70:	f007 fa3f 	bl	b1f2 <z_shell_raw_fprintf>
	if (err != 0) {
    3d74:	2d00      	cmp	r5, #0
    3d76:	d081      	beq.n	3c7c <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
    3d78:	68a3      	ldr	r3, [r4, #8]
    3d7a:	4a1a      	ldr	r2, [pc, #104]	; (3de4 <cmd_resize+0x188>)
    3d7c:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
    3d7e:	2103      	movs	r1, #3
    3d80:	4a19      	ldr	r2, [pc, #100]	; (3de8 <cmd_resize+0x18c>)
    3d82:	4620      	mov	r0, r4
    3d84:	f006 fc1e 	bl	a5c4 <shell_fprintf>
    3d88:	f06f 0507 	mvn.w	r5, #7
    3d8c:	e776      	b.n	3c7c <cmd_resize+0x20>
					*y = *y * 10U +
    3d8e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    3d92:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    3d96:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
    3d98:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
    3d9c:	b29f      	uxth	r7, r3
					if (buff_idx >=
    3d9e:	d1c2      	bne.n	3d26 <cmd_resize+0xca>
    3da0:	e7a7      	b.n	3cf2 <cmd_resize+0x96>
					*x = *x * 10U +
    3da2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
    3da6:	3601      	adds	r6, #1
					*x = *x * 10U +
    3da8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
    3dac:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
    3dae:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
    3db0:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
    3db2:	b2ab      	uxth	r3, r5
					if (buff_idx >=
    3db4:	d9c7      	bls.n	3d46 <cmd_resize+0xea>
    3db6:	e79c      	b.n	3cf2 <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
    3db8:	194a      	adds	r2, r1, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3dba:	3501      	adds	r5, #1
    3dbc:	b2ad      	uxth	r5, r5
    3dbe:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
    3dc0:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
    3dc4:	d983      	bls.n	3cce <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
    3dc6:	2300      	movs	r3, #0
    3dc8:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
				return -ENOMEM;
    3dcc:	e791      	b.n	3cf2 <cmd_resize+0x96>
    3dce:	bf00      	nop
    3dd0:	0000e6d6 	.word	0x0000e6d6
    3dd4:	0000e6cd 	.word	0x0000e6cd
    3dd8:	0000d074 	.word	0x0000d074
    3ddc:	0000eaf4 	.word	0x0000eaf4
    3de0:	0000d078 	.word	0x0000d078
    3de4:	00500018 	.word	0x00500018
    3de8:	0000e6fc 	.word	0x0000e6fc

00003dec <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
    3dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3df0:	4607      	mov	r7, r0
    3df2:	b089      	sub	sp, #36	; 0x24
    3df4:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
    3df6:	4689      	mov	r9, r1
    3df8:	b921      	cbnz	r1, 3e04 <z_shell_wildcard_process+0x18>
		return ret_val;
    3dfa:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
    3dfc:	4620      	mov	r0, r4
    3dfe:	b009      	add	sp, #36	; 0x24
    3e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
    3e04:	4610      	mov	r0, r2
    3e06:	f007 fb25 	bl	b454 <z_shell_has_wildcard>
    3e0a:	2800      	cmp	r0, #0
    3e0c:	d0f5      	beq.n	3dfa <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
    3e0e:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
    3e12:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    3e14:	2402      	movs	r4, #2
    3e16:	e024      	b.n	3e62 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
    3e18:	465c      	mov	r4, fp
    3e1a:	e03c      	b.n	3e96 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
    3e1c:	4629      	mov	r1, r5
    3e1e:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
    3e22:	f007 fc5a 	bl	b6da <strstr>
	if (!completion_addr) {
    3e26:	4606      	mov	r6, r0
    3e28:	2800      	cmp	r0, #0
    3e2a:	d04c      	beq.n	3ec6 <z_shell_wildcard_process+0xda>
    3e2c:	f007 fc9f 	bl	b76e <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
    3e30:	b282      	uxth	r2, r0
    3e32:	1c60      	adds	r0, r4, #1
    3e34:	3201      	adds	r2, #1
    3e36:	4631      	mov	r1, r6
    3e38:	4430      	add	r0, r6
    3e3a:	f007 fcd6 	bl	b7ea <memmove>
	memcpy(completion_addr, cmd, cmd_len);
    3e3e:	4622      	mov	r2, r4
    3e40:	4659      	mov	r1, fp
    3e42:	4630      	mov	r0, r6
    3e44:	f007 fce9 	bl	b81a <memcpy>
	completion_addr[cmd_len] = ' ';
    3e48:	f04f 0320 	mov.w	r3, #32
    3e4c:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
    3e4e:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
    3e52:	3001      	adds	r0, #1
    3e54:	4404      	add	r4, r0
    3e56:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
    3e5a:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
    3e5e:	2400      	movs	r4, #0
    3e60:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
    3e62:	1c4b      	adds	r3, r1, #1
    3e64:	aa03      	add	r2, sp, #12
    3e66:	4648      	mov	r0, r9
    3e68:	9301      	str	r3, [sp, #4]
    3e6a:	f7ff fc4b 	bl	3704 <z_shell_cmd_get>
    3e6e:	4606      	mov	r6, r0
    3e70:	b1e8      	cbz	r0, 3eae <z_shell_wildcard_process+0xc2>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
    3e72:	6831      	ldr	r1, [r6, #0]
    3e74:	2200      	movs	r2, #0
    3e76:	4628      	mov	r0, r5
    3e78:	f006 f905 	bl	a086 <fnmatch>
    3e7c:	2800      	cmp	r0, #0
    3e7e:	d1ef      	bne.n	3e60 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
    3e80:	f8d6 b000 	ldr.w	fp, [r6]
    3e84:	f8d7 a008 	ldr.w	sl, [r7, #8]
    3e88:	f1bb 0f00 	cmp.w	fp, #0
    3e8c:	d0c4      	beq.n	3e18 <z_shell_wildcard_process+0x2c>
    3e8e:	4658      	mov	r0, fp
    3e90:	f007 fc6d 	bl	b76e <strlen>
    3e94:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
    3e96:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
    3e9a:	4422      	add	r2, r4
    3e9c:	2aff      	cmp	r2, #255	; 0xff
    3e9e:	ddbd      	ble.n	3e1c <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
    3ea0:	4a0a      	ldr	r2, [pc, #40]	; (3ecc <z_shell_wildcard_process+0xe0>)
    3ea2:	462b      	mov	r3, r5
    3ea4:	2103      	movs	r1, #3
    3ea6:	4638      	mov	r0, r7
    3ea8:	f006 ff68 	bl	ad7c <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
    3eac:	2401      	movs	r4, #1
	if (cnt > 0) {
    3eae:	f1b8 0f00 	cmp.w	r8, #0
    3eb2:	d0a3      	beq.n	3dfc <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
    3eb4:	68b8      	ldr	r0, [r7, #8]
    3eb6:	462a      	mov	r2, r5
    3eb8:	f100 0140 	add.w	r1, r0, #64	; 0x40
    3ebc:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    3ec0:	f006 fcd4 	bl	a86c <z_shell_pattern_remove>
	return ret_val;
    3ec4:	e79a      	b.n	3dfc <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
    3ec6:	2402      	movs	r4, #2
    3ec8:	e7f1      	b.n	3eae <z_shell_wildcard_process+0xc2>
    3eca:	bf00      	nop
    3ecc:	0000eaf9 	.word	0x0000eaf9

00003ed0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ed4:	4605      	mov	r5, r0
	__asm__ volatile(
    3ed6:	f04f 0320 	mov.w	r3, #32
    3eda:	f3ef 8611 	mrs	r6, BASEPRI
    3ede:	f383 8812 	msr	BASEPRI_MAX, r3
    3ee2:	f3bf 8f6f 	isb	sy
	return list->head;
    3ee6:	4b0e      	ldr	r3, [pc, #56]	; (3f20 <pm_state_notify+0x50>)
    3ee8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3eea:	b19c      	cbz	r4, 3f14 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3eec:	4f0d      	ldr	r7, [pc, #52]	; (3f24 <pm_state_notify+0x54>)
    3eee:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3f28 <pm_state_notify+0x58>
    3ef2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    3ef6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3efa:	2d00      	cmp	r5, #0
    3efc:	bf08      	it	eq
    3efe:	4613      	moveq	r3, r2
		if (callback) {
    3f00:	b12b      	cbz	r3, 3f0e <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3f02:	f898 2014 	ldrb.w	r2, [r8, #20]
    3f06:	fb09 f202 	mul.w	r2, r9, r2
    3f0a:	5cb8      	ldrb	r0, [r7, r2]
    3f0c:	4798      	blx	r3
	return node->next;
    3f0e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f10:	2c00      	cmp	r4, #0
    3f12:	d1f0      	bne.n	3ef6 <pm_state_notify+0x26>
	__asm__ volatile(
    3f14:	f386 8811 	msr	BASEPRI, r6
    3f18:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f20:	200018b4 	.word	0x200018b4
    3f24:	200018bc 	.word	0x200018bc
    3f28:	20001a9c 	.word	0x20001a9c

00003f2c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3f2c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    3f2e:	2301      	movs	r3, #1
    3f30:	f000 001f 	and.w	r0, r0, #31
    3f34:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3f38:	4b07      	ldr	r3, [pc, #28]	; (3f58 <atomic_clear_bit.constprop.0+0x2c>)
    3f3a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3f3e:	43c0      	mvns	r0, r0
    3f40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3f44:	e853 2f00 	ldrex	r2, [r3]
    3f48:	4002      	ands	r2, r0
    3f4a:	e843 2100 	strex	r1, r2, [r3]
    3f4e:	2900      	cmp	r1, #0
    3f50:	d1f8      	bne.n	3f44 <atomic_clear_bit.constprop.0+0x18>
    3f52:	f3bf 8f5b 	dmb	ish
}
    3f56:	4770      	bx	lr
    3f58:	200018c8 	.word	0x200018c8

00003f5c <pm_system_resume>:

void pm_system_resume(void)
{
    3f5c:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    3f5e:	4b1d      	ldr	r3, [pc, #116]	; (3fd4 <pm_system_resume+0x78>)
    3f60:	7d1c      	ldrb	r4, [r3, #20]
    3f62:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    3f66:	f004 031f 	and.w	r3, r4, #31
    3f6a:	2201      	movs	r2, #1
    3f6c:	409a      	lsls	r2, r3
    3f6e:	4b1a      	ldr	r3, [pc, #104]	; (3fd8 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3f70:	0961      	lsrs	r1, r4, #5
{
    3f72:	b085      	sub	sp, #20
    3f74:	43d0      	mvns	r0, r2
    3f76:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3f7a:	e853 1f00 	ldrex	r1, [r3]
    3f7e:	ea01 0500 	and.w	r5, r1, r0
    3f82:	e843 5c00 	strex	ip, r5, [r3]
    3f86:	f1bc 0f00 	cmp.w	ip, #0
    3f8a:	d1f6      	bne.n	3f7a <pm_system_resume+0x1e>
    3f8c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3f90:	4211      	tst	r1, r2
    3f92:	d017      	beq.n	3fc4 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    3f94:	4d11      	ldr	r5, [pc, #68]	; (3fdc <pm_system_resume+0x80>)
    3f96:	220c      	movs	r2, #12
    3f98:	fb02 5204 	mla	r2, r2, r4, r5
    3f9c:	ca07      	ldmia	r2, {r0, r1, r2}
    3f9e:	ab01      	add	r3, sp, #4
    3fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3fa4:	4a0e      	ldr	r2, [pc, #56]	; (3fe0 <pm_system_resume+0x84>)
    3fa6:	b17a      	cbz	r2, 3fc8 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    3fa8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3fac:	f007 fc6c 	bl	b888 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    3fb0:	2000      	movs	r0, #0
    3fb2:	f7ff ff8d 	bl	3ed0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3fb6:	230c      	movs	r3, #12
    3fb8:	435c      	muls	r4, r3
    3fba:	192a      	adds	r2, r5, r4
    3fbc:	2300      	movs	r3, #0
    3fbe:	512b      	str	r3, [r5, r4]
    3fc0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    3fc4:	b005      	add	sp, #20
    3fc6:	bd30      	pop	{r4, r5, pc}
    3fc8:	f382 8811 	msr	BASEPRI, r2
    3fcc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3fd0:	e7ee      	b.n	3fb0 <pm_system_resume+0x54>
    3fd2:	bf00      	nop
    3fd4:	20001a9c 	.word	0x20001a9c
    3fd8:	200018cc 	.word	0x200018cc
    3fdc:	200018bc 	.word	0x200018bc
    3fe0:	0000b889 	.word	0x0000b889

00003fe4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3fe8:	4b35      	ldr	r3, [pc, #212]	; (40c0 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3fea:	4a36      	ldr	r2, [pc, #216]	; (40c4 <pm_system_suspend+0xe0>)
    3fec:	7d1c      	ldrb	r4, [r3, #20]
    3fee:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3ff2:	0963      	lsrs	r3, r4, #5
    3ff4:	ea4f 0983 	mov.w	r9, r3, lsl #2
    3ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ffc:	4d32      	ldr	r5, [pc, #200]	; (40c8 <pm_system_suspend+0xe4>)
    3ffe:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4002:	f004 081f 	and.w	r8, r4, #31
    4006:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    400a:	f013 0f01 	tst.w	r3, #1
{
    400e:	b085      	sub	sp, #20
    4010:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    4012:	d10a      	bne.n	402a <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    4014:	4601      	mov	r1, r0
    4016:	4620      	mov	r0, r4
    4018:	f000 f876 	bl	4108 <pm_policy_next_state>
		if (info != NULL) {
    401c:	b128      	cbz	r0, 402a <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    401e:	c807      	ldmia	r0, {r0, r1, r2}
    4020:	230c      	movs	r3, #12
    4022:	fb03 5304 	mla	r3, r3, r4, r5
    4026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    402a:	230c      	movs	r3, #12
    402c:	4363      	muls	r3, r4
    402e:	18ea      	adds	r2, r5, r3
    4030:	5cee      	ldrb	r6, [r5, r3]
    4032:	b936      	cbnz	r6, 4042 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    4034:	4620      	mov	r0, r4
    4036:	f7ff ff79 	bl	3f2c <atomic_clear_bit.constprop.0>
		ret = false;
    403a:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    403c:	b005      	add	sp, #20
    403e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    4042:	1c7b      	adds	r3, r7, #1
    4044:	d00f      	beq.n	4066 <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    4046:	f8d2 c008 	ldr.w	ip, [r2, #8]
    404a:	4820      	ldr	r0, [pc, #128]	; (40cc <pm_system_suspend+0xe8>)
    404c:	4a20      	ldr	r2, [pc, #128]	; (40d0 <pm_system_suspend+0xec>)
    404e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4052:	2100      	movs	r1, #0
    4054:	2300      	movs	r3, #0
    4056:	fbec 0106 	umlal	r0, r1, ip, r6
    405a:	f7fc f83f 	bl	dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    405e:	2101      	movs	r1, #1
    4060:	1a38      	subs	r0, r7, r0
    4062:	f008 fbd6 	bl	c812 <z_set_timeout_expiry>
	k_sched_lock();
    4066:	f004 fc95 	bl	8994 <k_sched_lock>
	pm_state_notify(true);
    406a:	2001      	movs	r0, #1
    406c:	f7ff ff30 	bl	3ed0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4070:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4074:	2301      	movs	r3, #1
    4076:	fa03 f808 	lsl.w	r8, r3, r8
    407a:	4b16      	ldr	r3, [pc, #88]	; (40d4 <pm_system_suspend+0xf0>)
    407c:	4499      	add	r9, r3
    407e:	e859 3f00 	ldrex	r3, [r9]
    4082:	ea43 0308 	orr.w	r3, r3, r8
    4086:	e849 3200 	strex	r2, r3, [r9]
    408a:	2a00      	cmp	r2, #0
    408c:	d1f7      	bne.n	407e <pm_system_suspend+0x9a>
    408e:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    4092:	230c      	movs	r3, #12
    4094:	fb03 5504 	mla	r5, r3, r4, r5
    4098:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    409c:	ab01      	add	r3, sp, #4
    409e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    40a2:	4a0d      	ldr	r2, [pc, #52]	; (40d8 <pm_system_suspend+0xf4>)
    40a4:	b11a      	cbz	r2, 40ae <pm_system_suspend+0xca>
		pm_power_state_set(info);
    40a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    40aa:	f007 fbda 	bl	b862 <pm_power_state_set>
	pm_system_resume();
    40ae:	f7ff ff55 	bl	3f5c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    40b2:	4620      	mov	r0, r4
    40b4:	f7ff ff3a 	bl	3f2c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    40b8:	f004 fe3a 	bl	8d30 <k_sched_unlock>
	bool ret = true;
    40bc:	2001      	movs	r0, #1
    40be:	e7bd      	b.n	403c <pm_system_suspend+0x58>
    40c0:	20001a9c 	.word	0x20001a9c
    40c4:	200018c8 	.word	0x200018c8
    40c8:	200018bc 	.word	0x200018bc
    40cc:	000f423f 	.word	0x000f423f
    40d0:	000f4240 	.word	0x000f4240
    40d4:	200018cc 	.word	0x200018cc
    40d8:	0000b863 	.word	0x0000b863

000040dc <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    40dc:	4b05      	ldr	r3, [pc, #20]	; (40f4 <pm_constraint_get+0x18>)
    40de:	f3bf 8f5b 	dmb	ish
    40e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    40e6:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    40ea:	fab0 f080 	clz	r0, r0
    40ee:	0940      	lsrs	r0, r0, #5
    40f0:	4770      	bx	lr
    40f2:	bf00      	nop
    40f4:	200018d0 	.word	0x200018d0

000040f8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    40f8:	b908      	cbnz	r0, 40fe <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    40fa:	4b02      	ldr	r3, [pc, #8]	; (4104 <pm_state_cpu_get_all+0xc>)
    40fc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    40fe:	2000      	movs	r0, #0
    4100:	4770      	bx	lr
    4102:	bf00      	nop
    4104:	0000d720 	.word	0x0000d720

00004108 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    4108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    410c:	b085      	sub	sp, #20
    410e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    4110:	a903      	add	r1, sp, #12
    4112:	f7ff fff1 	bl	40f8 <pm_state_cpu_get_all>
    4116:	f8df a074 	ldr.w	sl, [pc, #116]	; 418c <pm_policy_next_state+0x84>
    411a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4190 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    411e:	1e44      	subs	r4, r0, #1
    4120:	b224      	sxth	r4, r4
    4122:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4126:	f04f 0900 	mov.w	r9, #0
    412a:	1c63      	adds	r3, r4, #1
    412c:	d104      	bne.n	4138 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    412e:	2500      	movs	r5, #0
}
    4130:	4628      	mov	r0, r5
    4132:	b005      	add	sp, #20
    4134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    4138:	9a03      	ldr	r2, [sp, #12]
    413a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    413e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    4142:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    4146:	f7ff ffc9 	bl	40dc <pm_constraint_get>
    414a:	b1e0      	cbz	r0, 4186 <pm_policy_next_state+0x7e>
    414c:	6868      	ldr	r0, [r5, #4]
    414e:	f04f 0b00 	mov.w	fp, #0
    4152:	46d4      	mov	ip, sl
    4154:	4659      	mov	r1, fp
    4156:	fbe0 c107 	umlal	ip, r1, r0, r7
    415a:	4642      	mov	r2, r8
    415c:	464b      	mov	r3, r9
    415e:	4660      	mov	r0, ip
    4160:	f7fb ffbc 	bl	dc <__aeabi_uldivmod>
    4164:	9001      	str	r0, [sp, #4]
    4166:	68a8      	ldr	r0, [r5, #8]
    4168:	46d4      	mov	ip, sl
    416a:	4659      	mov	r1, fp
    416c:	fbe0 c107 	umlal	ip, r1, r0, r7
    4170:	4642      	mov	r2, r8
    4172:	464b      	mov	r3, r9
    4174:	4660      	mov	r0, ip
    4176:	f7fb ffb1 	bl	dc <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    417a:	1c72      	adds	r2, r6, #1
    417c:	d0d8      	beq.n	4130 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    417e:	9b01      	ldr	r3, [sp, #4]
    4180:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    4182:	42b0      	cmp	r0, r6
    4184:	d9d4      	bls.n	4130 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4186:	3c01      	subs	r4, #1
    4188:	b224      	sxth	r4, r4
    418a:	e7ce      	b.n	412a <pm_policy_next_state+0x22>
    418c:	000f423f 	.word	0x000f423f
    4190:	000f4240 	.word	0x000f4240

00004194 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4194:	4901      	ldr	r1, [pc, #4]	; (419c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4196:	2210      	movs	r2, #16
	str	r2, [r1]
    4198:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    419a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    419c:	e000ed10 	.word	0xe000ed10

000041a0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    41a0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    41a2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    41a4:	f380 8811 	msr	BASEPRI, r0
	isb
    41a8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    41ac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    41b0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    41b2:	b662      	cpsie	i
	isb
    41b4:	f3bf 8f6f 	isb	sy

	bx	lr
    41b8:	4770      	bx	lr
    41ba:	bf00      	nop

000041bc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    41bc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    41be:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    41c0:	f381 8811 	msr	BASEPRI, r1

	wfe
    41c4:	bf20      	wfe

	msr	BASEPRI, r0
    41c6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    41ca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    41cc:	4770      	bx	lr
    41ce:	bf00      	nop

000041d0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    41d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    41d4:	b089      	sub	sp, #36	; 0x24
    41d6:	4680      	mov	r8, r0
    41d8:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    41da:	460c      	mov	r4, r1
    41dc:	2900      	cmp	r1, #0
    41de:	d053      	beq.n	4288 <z_arm_fatal_error+0xb8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    41e0:	4d2d      	ldr	r5, [pc, #180]	; (4298 <z_arm_fatal_error+0xc8>)
    41e2:	682b      	ldr	r3, [r5, #0]
    41e4:	0758      	lsls	r0, r3, #29
    41e6:	d04f      	beq.n	4288 <z_arm_fatal_error+0xb8>
    41e8:	e9d1 0100 	ldrd	r0, r1, [r1]
    41ec:	4e2b      	ldr	r6, [pc, #172]	; (429c <z_arm_fatal_error+0xcc>)
    41ee:	68a3      	ldr	r3, [r4, #8]
    41f0:	46e9      	mov	r9, sp
    41f2:	b088      	sub	sp, #32
    41f4:	466a      	mov	r2, sp
    41f6:	e9c2 6004 	strd	r6, r0, [r2, #16]
    41fa:	2605      	movs	r6, #5
    41fc:	e9c2 1306 	strd	r1, r3, [r2, #24]
    4200:	60be      	str	r6, [r7, #8]
    4202:	f842 6f0c 	str.w	r6, [r2, #12]!
    4206:	2300      	movs	r3, #0
    4208:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    420c:	4628      	mov	r0, r5
    420e:	f005 ffcb 	bl	a1a8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4212:	682b      	ldr	r3, [r5, #0]
    4214:	0759      	lsls	r1, r3, #29
    4216:	46cd      	mov	sp, r9
    4218:	d036      	beq.n	4288 <z_arm_fatal_error+0xb8>
    421a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    421e:	4b20      	ldr	r3, [pc, #128]	; (42a0 <z_arm_fatal_error+0xd0>)
    4220:	60be      	str	r6, [r7, #8]
    4222:	b088      	sub	sp, #32
    4224:	466a      	mov	r2, sp
    4226:	e9c2 3004 	strd	r3, r0, [r2, #16]
    422a:	6963      	ldr	r3, [r4, #20]
    422c:	6191      	str	r1, [r2, #24]
    422e:	61d3      	str	r3, [r2, #28]
    4230:	f842 6f0c 	str.w	r6, [r2, #12]!
    4234:	2300      	movs	r3, #0
    4236:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    423a:	4628      	mov	r0, r5
    423c:	f005 ffb4 	bl	a1a8 <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4240:	682b      	ldr	r3, [r5, #0]
    4242:	075a      	lsls	r2, r3, #29
    4244:	46cd      	mov	sp, r9
    4246:	d01f      	beq.n	4288 <z_arm_fatal_error+0xb8>
    4248:	69e3      	ldr	r3, [r4, #28]
    424a:	4a16      	ldr	r2, [pc, #88]	; (42a4 <z_arm_fatal_error+0xd4>)
    424c:	2603      	movs	r6, #3
    424e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4252:	607e      	str	r6, [r7, #4]
    4254:	617e      	str	r6, [r7, #20]
    4256:	2300      	movs	r3, #0
    4258:	f107 0214 	add.w	r2, r7, #20
    425c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4260:	4628      	mov	r0, r5
    4262:	f005 ffa1 	bl	a1a8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4266:	682b      	ldr	r3, [r5, #0]
    4268:	075b      	lsls	r3, r3, #29
    426a:	d00d      	beq.n	4288 <z_arm_fatal_error+0xb8>
    426c:	69a3      	ldr	r3, [r4, #24]
    426e:	4a0e      	ldr	r2, [pc, #56]	; (42a8 <z_arm_fatal_error+0xd8>)
    4270:	607e      	str	r6, [r7, #4]
    4272:	e9c7 2306 	strd	r2, r3, [r7, #24]
    4276:	617e      	str	r6, [r7, #20]
    4278:	2300      	movs	r3, #0
    427a:	f107 0214 	add.w	r2, r7, #20
    427e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4282:	4628      	mov	r0, r5
    4284:	f005 ff90 	bl	a1a8 <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4288:	4621      	mov	r1, r4
    428a:	4640      	mov	r0, r8
    428c:	f003 fde0 	bl	7e50 <z_fatal_error>
}
    4290:	3724      	adds	r7, #36	; 0x24
    4292:	46bd      	mov	sp, r7
    4294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4298:	20000274 	.word	0x20000274
    429c:	0000eb4e 	.word	0x0000eb4e
    42a0:	0000eb7d 	.word	0x0000eb7d
    42a4:	0000ebac 	.word	0x0000ebac
    42a8:	0000ebbb 	.word	0x0000ebbb

000042ac <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    42ac:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    42ae:	2b00      	cmp	r3, #0
    42b0:	db08      	blt.n	42c4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42b2:	2201      	movs	r2, #1
    42b4:	f000 001f 	and.w	r0, r0, #31
    42b8:	fa02 f000 	lsl.w	r0, r2, r0
    42bc:	095b      	lsrs	r3, r3, #5
    42be:	4a02      	ldr	r2, [pc, #8]	; (42c8 <arch_irq_enable+0x1c>)
    42c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    42c4:	4770      	bx	lr
    42c6:	bf00      	nop
    42c8:	e000e100 	.word	0xe000e100

000042cc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    42cc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    42ce:	2b00      	cmp	r3, #0
    42d0:	db0d      	blt.n	42ee <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42d2:	2201      	movs	r2, #1
    42d4:	095b      	lsrs	r3, r3, #5
    42d6:	f000 001f 	and.w	r0, r0, #31
    42da:	fa02 f000 	lsl.w	r0, r2, r0
    42de:	3320      	adds	r3, #32
    42e0:	4a03      	ldr	r2, [pc, #12]	; (42f0 <arch_irq_disable+0x24>)
    42e2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    42e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42ea:	f3bf 8f6f 	isb	sy
}
    42ee:	4770      	bx	lr
    42f0:	e000e100 	.word	0xe000e100

000042f4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    42f4:	4b05      	ldr	r3, [pc, #20]	; (430c <arch_irq_is_enabled+0x18>)
    42f6:	0942      	lsrs	r2, r0, #5
    42f8:	f000 001f 	and.w	r0, r0, #31
    42fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4300:	2301      	movs	r3, #1
    4302:	fa03 f000 	lsl.w	r0, r3, r0
}
    4306:	4010      	ands	r0, r2
    4308:	4770      	bx	lr
    430a:	bf00      	nop
    430c:	e000e100 	.word	0xe000e100

00004310 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4310:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4312:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4314:	bfa8      	it	ge
    4316:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    431a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    431e:	bfb8      	it	lt
    4320:	4b06      	ldrlt	r3, [pc, #24]	; (433c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4322:	ea4f 1141 	mov.w	r1, r1, lsl #5
    4326:	bfac      	ite	ge
    4328:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    432c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4330:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4332:	bfb4      	ite	lt
    4334:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4336:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    433a:	4770      	bx	lr
    433c:	e000ed14 	.word	0xe000ed14

00004340 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4340:	bf30      	wfi
    b z_SysNmiOnReset
    4342:	f7ff bffd 	b.w	4340 <z_SysNmiOnReset>
    4346:	bf00      	nop

00004348 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4348:	4a0f      	ldr	r2, [pc, #60]	; (4388 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    434a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    434c:	4b0f      	ldr	r3, [pc, #60]	; (438c <z_arm_prep_c+0x44>)
    434e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4352:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4358:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    435c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4360:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4368:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    436c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    4370:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    4374:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4378:	f003 fe2c 	bl	7fd4 <z_bss_zero>
	z_data_copy();
    437c:	f004 fe20 	bl	8fc0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4380:	f000 fc22 	bl	4bc8 <z_arm_interrupt_init>
	z_cstart();
    4384:	f003 fe30 	bl	7fe8 <z_cstart>
    4388:	00000000 	.word	0x00000000
    438c:	e000ed00 	.word	0xe000ed00

00004390 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4390:	4a0a      	ldr	r2, [pc, #40]	; (43bc <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    4392:	490b      	ldr	r1, [pc, #44]	; (43c0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    4394:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4396:	6809      	ldr	r1, [r1, #0]
    4398:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    439c:	4909      	ldr	r1, [pc, #36]	; (43c4 <arch_swap+0x34>)
	_current->arch.basepri = key;
    439e:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    43a2:	684b      	ldr	r3, [r1, #4]
    43a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    43a8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    43aa:	2300      	movs	r3, #0
    43ac:	f383 8811 	msr	BASEPRI, r3
    43b0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    43b4:	6893      	ldr	r3, [r2, #8]
}
    43b6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    43ba:	4770      	bx	lr
    43bc:	20001a9c 	.word	0x20001a9c
    43c0:	0000da34 	.word	0x0000da34
    43c4:	e000ed00 	.word	0xe000ed00

000043c8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    43c8:	4913      	ldr	r1, [pc, #76]	; (4418 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    43ca:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    43cc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    43d0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    43d2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    43d6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    43da:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    43dc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    43e0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    43e4:	4f0d      	ldr	r7, [pc, #52]	; (441c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    43e6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    43ea:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    43ec:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    43ee:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    43f0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    43f4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    43f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    43fa:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    43fe:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4400:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4402:	f000 fc29 	bl	4c58 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4406:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    440a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    440e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4412:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4416:	4770      	bx	lr
    ldr r1, =_kernel
    4418:	20001a9c 	.word	0x20001a9c
    ldr v4, =_SCS_ICSR
    441c:	e000ed04 	.word	0xe000ed04

00004420 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4420:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4424:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4426:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    442a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    442e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4430:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4434:	2902      	cmp	r1, #2
    beq _oops
    4436:	d0ff      	beq.n	4438 <_oops>

00004438 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4438:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    443a:	f007 f84f 	bl	b4dc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    443e:	bd01      	pop	{r0, pc}

00004440 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4440:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4444:	9b00      	ldr	r3, [sp, #0]
    4446:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    444a:	490a      	ldr	r1, [pc, #40]	; (4474 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    444c:	9b01      	ldr	r3, [sp, #4]
    444e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4452:	9b02      	ldr	r3, [sp, #8]
    4454:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4458:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    445c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4460:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4464:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4468:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    446a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    446c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    446e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4472:	4770      	bx	lr
    4474:	00009811 	.word	0x00009811

00004478 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4478:	4a0a      	ldr	r2, [pc, #40]	; (44a4 <z_check_thread_stack_fail+0x2c>)
{
    447a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    447c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    447e:	b178      	cbz	r0, 44a0 <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4480:	f113 0f16 	cmn.w	r3, #22
    4484:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    4488:	d005      	beq.n	4496 <z_check_thread_stack_fail+0x1e>
    448a:	f1a0 0220 	sub.w	r2, r0, #32
    448e:	429a      	cmp	r2, r3
    4490:	d805      	bhi.n	449e <z_check_thread_stack_fail+0x26>
    4492:	4283      	cmp	r3, r0
    4494:	d203      	bcs.n	449e <z_check_thread_stack_fail+0x26>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    4496:	4281      	cmp	r1, r0
    4498:	bf28      	it	cs
    449a:	2000      	movcs	r0, #0
    449c:	4770      	bx	lr
    449e:	2000      	movs	r0, #0
}
    44a0:	4770      	bx	lr
    44a2:	bf00      	nop
    44a4:	20001a9c 	.word	0x20001a9c

000044a8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    44a8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    44aa:	4b09      	ldr	r3, [pc, #36]	; (44d0 <arch_switch_to_main_thread+0x28>)
    44ac:	6098      	str	r0, [r3, #8]
{
    44ae:	460d      	mov	r5, r1
    44b0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    44b2:	f000 fbd1 	bl	4c58 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    44b6:	4620      	mov	r0, r4
    44b8:	f385 8809 	msr	PSP, r5
    44bc:	2100      	movs	r1, #0
    44be:	b663      	cpsie	if
    44c0:	f381 8811 	msr	BASEPRI, r1
    44c4:	f3bf 8f6f 	isb	sy
    44c8:	2200      	movs	r2, #0
    44ca:	2300      	movs	r3, #0
    44cc:	f005 f9a0 	bl	9810 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    44d0:	20001a9c 	.word	0x20001a9c

000044d4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    44d4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    44d6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    44d8:	4a0b      	ldr	r2, [pc, #44]	; (4508 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    44da:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    44dc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    44de:	bf1e      	ittt	ne
	movne	r1, #0
    44e0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    44e2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    44e4:	f007 ffed 	blne	c4c2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    44e8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    44ea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    44ee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    44f2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    44f6:	4905      	ldr	r1, [pc, #20]	; (450c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    44f8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    44fa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    44fc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    44fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4502:	4903      	ldr	r1, [pc, #12]	; (4510 <_isr_wrapper+0x3c>)
	bx r1
    4504:	4708      	bx	r1
    4506:	0000      	.short	0x0000
	ldr r2, =_kernel
    4508:	20001a9c 	.word	0x20001a9c
	ldr r1, =_sw_isr_table
    450c:	0000cd3c 	.word	0x0000cd3c
	ldr r1, =z_arm_int_exit
    4510:	00004515 	.word	0x00004515

00004514 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4514:	4b04      	ldr	r3, [pc, #16]	; (4528 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4516:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4518:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    451a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    451c:	d003      	beq.n	4526 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    451e:	4903      	ldr	r1, [pc, #12]	; (452c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4524:	600a      	str	r2, [r1, #0]

00004526 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4526:	4770      	bx	lr
	ldr r3, =_kernel
    4528:	20001a9c 	.word	0x20001a9c
	ldr r1, =_SCS_ICSR
    452c:	e000ed04 	.word	0xe000ed04

00004530 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4530:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    4532:	4c4b      	ldr	r4, [pc, #300]	; (4660 <bus_fault.constprop.0+0x130>)
    4534:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4536:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4538:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    453a:	b088      	sub	sp, #32
    453c:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    453e:	d00a      	beq.n	4556 <bus_fault.constprop.0+0x26>
    4540:	4b48      	ldr	r3, [pc, #288]	; (4664 <bus_fault.constprop.0+0x134>)
    4542:	9306      	str	r3, [sp, #24]
    4544:	aa05      	add	r2, sp, #20
    4546:	2302      	movs	r3, #2
    4548:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    454c:	4620      	mov	r0, r4
    454e:	9301      	str	r3, [sp, #4]
    4550:	9305      	str	r3, [sp, #20]
    4552:	f006 ffd2 	bl	b4fa <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4556:	4b44      	ldr	r3, [pc, #272]	; (4668 <bus_fault.constprop.0+0x138>)
    4558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    455a:	04da      	lsls	r2, r3, #19
    455c:	d50d      	bpl.n	457a <bus_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  Stacking error");
    455e:	6823      	ldr	r3, [r4, #0]
    4560:	075b      	lsls	r3, r3, #29
    4562:	d00a      	beq.n	457a <bus_fault.constprop.0+0x4a>
    4564:	4b41      	ldr	r3, [pc, #260]	; (466c <bus_fault.constprop.0+0x13c>)
    4566:	9306      	str	r3, [sp, #24]
    4568:	483d      	ldr	r0, [pc, #244]	; (4660 <bus_fault.constprop.0+0x130>)
    456a:	2302      	movs	r3, #2
    456c:	aa05      	add	r2, sp, #20
    456e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4572:	9301      	str	r3, [sp, #4]
    4574:	9305      	str	r3, [sp, #20]
    4576:	f006 ffc0 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    457a:	4b3b      	ldr	r3, [pc, #236]	; (4668 <bus_fault.constprop.0+0x138>)
    457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    457e:	0518      	lsls	r0, r3, #20
    4580:	d50d      	bpl.n	459e <bus_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Unstacking error");
    4582:	6823      	ldr	r3, [r4, #0]
    4584:	0759      	lsls	r1, r3, #29
    4586:	d00a      	beq.n	459e <bus_fault.constprop.0+0x6e>
    4588:	4b39      	ldr	r3, [pc, #228]	; (4670 <bus_fault.constprop.0+0x140>)
    458a:	9306      	str	r3, [sp, #24]
    458c:	4834      	ldr	r0, [pc, #208]	; (4660 <bus_fault.constprop.0+0x130>)
    458e:	2302      	movs	r3, #2
    4590:	aa05      	add	r2, sp, #20
    4592:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4596:	9301      	str	r3, [sp, #4]
    4598:	9305      	str	r3, [sp, #20]
    459a:	f006 ffae 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    459e:	4b32      	ldr	r3, [pc, #200]	; (4668 <bus_fault.constprop.0+0x138>)
    45a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45a2:	059a      	lsls	r2, r3, #22
    45a4:	d527      	bpl.n	45f6 <bus_fault.constprop.0+0xc6>
		PR_FAULT_INFO("  Precise data bus error");
    45a6:	6823      	ldr	r3, [r4, #0]
    45a8:	075b      	lsls	r3, r3, #29
    45aa:	d00a      	beq.n	45c2 <bus_fault.constprop.0+0x92>
    45ac:	4b31      	ldr	r3, [pc, #196]	; (4674 <bus_fault.constprop.0+0x144>)
    45ae:	9306      	str	r3, [sp, #24]
    45b0:	482b      	ldr	r0, [pc, #172]	; (4660 <bus_fault.constprop.0+0x130>)
    45b2:	2302      	movs	r3, #2
    45b4:	aa05      	add	r2, sp, #20
    45b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    45ba:	9301      	str	r3, [sp, #4]
    45bc:	9305      	str	r3, [sp, #20]
    45be:	f006 ff9c 	bl	b4fa <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    45c2:	4b29      	ldr	r3, [pc, #164]	; (4668 <bus_fault.constprop.0+0x138>)
    45c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    45c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45c8:	0418      	lsls	r0, r3, #16
    45ca:	d514      	bpl.n	45f6 <bus_fault.constprop.0+0xc6>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    45cc:	6823      	ldr	r3, [r4, #0]
    45ce:	0759      	lsls	r1, r3, #29
    45d0:	d00b      	beq.n	45ea <bus_fault.constprop.0+0xba>
    45d2:	4b29      	ldr	r3, [pc, #164]	; (4678 <bus_fault.constprop.0+0x148>)
    45d4:	4822      	ldr	r0, [pc, #136]	; (4660 <bus_fault.constprop.0+0x130>)
    45d6:	e9cd 3206 	strd	r3, r2, [sp, #24]
    45da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    45de:	2303      	movs	r3, #3
    45e0:	aa05      	add	r2, sp, #20
    45e2:	9301      	str	r3, [sp, #4]
    45e4:	9305      	str	r3, [sp, #20]
    45e6:	f006 ff88 	bl	b4fa <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    45ea:	b126      	cbz	r6, 45f6 <bus_fault.constprop.0+0xc6>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    45ec:	4a1e      	ldr	r2, [pc, #120]	; (4668 <bus_fault.constprop.0+0x138>)
    45ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    45f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    45f4:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    45f6:	4b1c      	ldr	r3, [pc, #112]	; (4668 <bus_fault.constprop.0+0x138>)
    45f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45fa:	055b      	lsls	r3, r3, #21
    45fc:	d50d      	bpl.n	461a <bus_fault.constprop.0+0xea>
		PR_FAULT_INFO("  Imprecise data bus error");
    45fe:	6823      	ldr	r3, [r4, #0]
    4600:	075e      	lsls	r6, r3, #29
    4602:	d00a      	beq.n	461a <bus_fault.constprop.0+0xea>
    4604:	4b1d      	ldr	r3, [pc, #116]	; (467c <bus_fault.constprop.0+0x14c>)
    4606:	9306      	str	r3, [sp, #24]
    4608:	4815      	ldr	r0, [pc, #84]	; (4660 <bus_fault.constprop.0+0x130>)
    460a:	2302      	movs	r3, #2
    460c:	aa05      	add	r2, sp, #20
    460e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4612:	9301      	str	r3, [sp, #4]
    4614:	9305      	str	r3, [sp, #20]
    4616:	f006 ff70 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    461a:	4b13      	ldr	r3, [pc, #76]	; (4668 <bus_fault.constprop.0+0x138>)
    461c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    461e:	05d0      	lsls	r0, r2, #23
    4620:	d516      	bpl.n	4650 <bus_fault.constprop.0+0x120>
		PR_FAULT_INFO("  Instruction bus error");
    4622:	6823      	ldr	r3, [r4, #0]
    4624:	0759      	lsls	r1, r3, #29
    4626:	d00a      	beq.n	463e <bus_fault.constprop.0+0x10e>
    4628:	4b15      	ldr	r3, [pc, #84]	; (4680 <bus_fault.constprop.0+0x150>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    462a:	9306      	str	r3, [sp, #24]
    462c:	480c      	ldr	r0, [pc, #48]	; (4660 <bus_fault.constprop.0+0x130>)
    462e:	2302      	movs	r3, #2
    4630:	aa05      	add	r2, sp, #20
    4632:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4636:	9301      	str	r3, [sp, #4]
    4638:	9305      	str	r3, [sp, #20]
    463a:	f006 ff5e 	bl	b4fa <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    463e:	4a0a      	ldr	r2, [pc, #40]	; (4668 <bus_fault.constprop.0+0x138>)
    4640:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4642:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4644:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4648:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    464a:	7028      	strb	r0, [r5, #0]

	return reason;
}
    464c:	b008      	add	sp, #32
    464e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4652:	049a      	lsls	r2, r3, #18
    4654:	d5f3      	bpl.n	463e <bus_fault.constprop.0+0x10e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4656:	6823      	ldr	r3, [r4, #0]
    4658:	075b      	lsls	r3, r3, #29
    465a:	d0f0      	beq.n	463e <bus_fault.constprop.0+0x10e>
    465c:	4b09      	ldr	r3, [pc, #36]	; (4684 <bus_fault.constprop.0+0x154>)
    465e:	e7e4      	b.n	462a <bus_fault.constprop.0+0xfa>
    4660:	20000274 	.word	0x20000274
    4664:	0000ebe9 	.word	0x0000ebe9
    4668:	e000ed00 	.word	0xe000ed00
    466c:	0000ebff 	.word	0x0000ebff
    4670:	0000ec10 	.word	0x0000ec10
    4674:	0000ec23 	.word	0x0000ec23
    4678:	0000ec3c 	.word	0x0000ec3c
    467c:	0000ec51 	.word	0x0000ec51
    4680:	0000ec6c 	.word	0x0000ec6c
    4684:	0000ec84 	.word	0x0000ec84

00004688 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4688:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    468a:	4c43      	ldr	r4, [pc, #268]	; (4798 <usage_fault.constprop.0+0x110>)
    468c:	6823      	ldr	r3, [r4, #0]
    468e:	075b      	lsls	r3, r3, #29
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4690:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** USAGE FAULT *****");
    4692:	d00a      	beq.n	46aa <usage_fault.constprop.0+0x22>
    4694:	4b41      	ldr	r3, [pc, #260]	; (479c <usage_fault.constprop.0+0x114>)
    4696:	9306      	str	r3, [sp, #24]
    4698:	aa05      	add	r2, sp, #20
    469a:	2302      	movs	r3, #2
    469c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    46a0:	4620      	mov	r0, r4
    46a2:	9301      	str	r3, [sp, #4]
    46a4:	9305      	str	r3, [sp, #20]
    46a6:	f006 ff28 	bl	b4fa <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    46aa:	4b3d      	ldr	r3, [pc, #244]	; (47a0 <usage_fault.constprop.0+0x118>)
    46ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46ae:	0198      	lsls	r0, r3, #6
    46b0:	d50d      	bpl.n	46ce <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Division by zero");
    46b2:	6823      	ldr	r3, [r4, #0]
    46b4:	0759      	lsls	r1, r3, #29
    46b6:	d00a      	beq.n	46ce <usage_fault.constprop.0+0x46>
    46b8:	4b3a      	ldr	r3, [pc, #232]	; (47a4 <usage_fault.constprop.0+0x11c>)
    46ba:	9306      	str	r3, [sp, #24]
    46bc:	4836      	ldr	r0, [pc, #216]	; (4798 <usage_fault.constprop.0+0x110>)
    46be:	2302      	movs	r3, #2
    46c0:	aa05      	add	r2, sp, #20
    46c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    46c6:	9301      	str	r3, [sp, #4]
    46c8:	9305      	str	r3, [sp, #20]
    46ca:	f006 ff16 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    46ce:	4b34      	ldr	r3, [pc, #208]	; (47a0 <usage_fault.constprop.0+0x118>)
    46d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46d2:	01da      	lsls	r2, r3, #7
    46d4:	d50d      	bpl.n	46f2 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Unaligned memory access");
    46d6:	6823      	ldr	r3, [r4, #0]
    46d8:	075b      	lsls	r3, r3, #29
    46da:	d00a      	beq.n	46f2 <usage_fault.constprop.0+0x6a>
    46dc:	4b32      	ldr	r3, [pc, #200]	; (47a8 <usage_fault.constprop.0+0x120>)
    46de:	9306      	str	r3, [sp, #24]
    46e0:	482d      	ldr	r0, [pc, #180]	; (4798 <usage_fault.constprop.0+0x110>)
    46e2:	2302      	movs	r3, #2
    46e4:	aa05      	add	r2, sp, #20
    46e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    46ea:	9301      	str	r3, [sp, #4]
    46ec:	9305      	str	r3, [sp, #20]
    46ee:	f006 ff04 	bl	b4fa <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    46f2:	4b2b      	ldr	r3, [pc, #172]	; (47a0 <usage_fault.constprop.0+0x118>)
    46f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    46f6:	0318      	lsls	r0, r3, #12
    46f8:	d50d      	bpl.n	4716 <usage_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  No coprocessor instructions");
    46fa:	6823      	ldr	r3, [r4, #0]
    46fc:	0759      	lsls	r1, r3, #29
    46fe:	d00a      	beq.n	4716 <usage_fault.constprop.0+0x8e>
    4700:	4b2a      	ldr	r3, [pc, #168]	; (47ac <usage_fault.constprop.0+0x124>)
    4702:	9306      	str	r3, [sp, #24]
    4704:	4824      	ldr	r0, [pc, #144]	; (4798 <usage_fault.constprop.0+0x110>)
    4706:	2302      	movs	r3, #2
    4708:	aa05      	add	r2, sp, #20
    470a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    470e:	9301      	str	r3, [sp, #4]
    4710:	9305      	str	r3, [sp, #20]
    4712:	f006 fef2 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4716:	4b22      	ldr	r3, [pc, #136]	; (47a0 <usage_fault.constprop.0+0x118>)
    4718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    471a:	035a      	lsls	r2, r3, #13
    471c:	d50d      	bpl.n	473a <usage_fault.constprop.0+0xb2>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    471e:	6823      	ldr	r3, [r4, #0]
    4720:	075b      	lsls	r3, r3, #29
    4722:	d00a      	beq.n	473a <usage_fault.constprop.0+0xb2>
    4724:	4b22      	ldr	r3, [pc, #136]	; (47b0 <usage_fault.constprop.0+0x128>)
    4726:	9306      	str	r3, [sp, #24]
    4728:	481b      	ldr	r0, [pc, #108]	; (4798 <usage_fault.constprop.0+0x110>)
    472a:	2302      	movs	r3, #2
    472c:	aa05      	add	r2, sp, #20
    472e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4732:	9301      	str	r3, [sp, #4]
    4734:	9305      	str	r3, [sp, #20]
    4736:	f006 fee0 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    473a:	4b19      	ldr	r3, [pc, #100]	; (47a0 <usage_fault.constprop.0+0x118>)
    473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    473e:	0398      	lsls	r0, r3, #14
    4740:	d50d      	bpl.n	475e <usage_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4742:	6823      	ldr	r3, [r4, #0]
    4744:	0759      	lsls	r1, r3, #29
    4746:	d00a      	beq.n	475e <usage_fault.constprop.0+0xd6>
    4748:	4b1a      	ldr	r3, [pc, #104]	; (47b4 <usage_fault.constprop.0+0x12c>)
    474a:	9306      	str	r3, [sp, #24]
    474c:	4812      	ldr	r0, [pc, #72]	; (4798 <usage_fault.constprop.0+0x110>)
    474e:	2302      	movs	r3, #2
    4750:	aa05      	add	r2, sp, #20
    4752:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4756:	9301      	str	r3, [sp, #4]
    4758:	9305      	str	r3, [sp, #20]
    475a:	f006 fece 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    475e:	4b10      	ldr	r3, [pc, #64]	; (47a0 <usage_fault.constprop.0+0x118>)
    4760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4762:	03da      	lsls	r2, r3, #15
    4764:	d50d      	bpl.n	4782 <usage_fault.constprop.0+0xfa>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4766:	6823      	ldr	r3, [r4, #0]
    4768:	075b      	lsls	r3, r3, #29
    476a:	d00a      	beq.n	4782 <usage_fault.constprop.0+0xfa>
    476c:	4b12      	ldr	r3, [pc, #72]	; (47b8 <usage_fault.constprop.0+0x130>)
    476e:	9306      	str	r3, [sp, #24]
    4770:	4809      	ldr	r0, [pc, #36]	; (4798 <usage_fault.constprop.0+0x110>)
    4772:	2302      	movs	r3, #2
    4774:	aa05      	add	r2, sp, #20
    4776:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    477a:	9301      	str	r3, [sp, #4]
    477c:	9305      	str	r3, [sp, #20]
    477e:	f006 febc 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4782:	4a07      	ldr	r2, [pc, #28]	; (47a0 <usage_fault.constprop.0+0x118>)
    4784:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4786:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    478a:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    478e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4790:	6293      	str	r3, [r2, #40]	; 0x28
}
    4792:	b008      	add	sp, #32
    4794:	bd10      	pop	{r4, pc}
    4796:	bf00      	nop
    4798:	20000274 	.word	0x20000274
    479c:	0000ecb3 	.word	0x0000ecb3
    47a0:	e000ed00 	.word	0xe000ed00
    47a4:	0000eccb 	.word	0x0000eccb
    47a8:	0000ecde 	.word	0x0000ecde
    47ac:	0000ecf8 	.word	0x0000ecf8
    47b0:	0000ed16 	.word	0x0000ed16
    47b4:	0000ed3b 	.word	0x0000ed3b
    47b8:	0000ed55 	.word	0x0000ed55

000047bc <mem_manage_fault>:
{
    47bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    47c0:	4c55      	ldr	r4, [pc, #340]	; (4918 <mem_manage_fault+0x15c>)
    47c2:	6823      	ldr	r3, [r4, #0]
{
    47c4:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    47c6:	0759      	lsls	r1, r3, #29
{
    47c8:	b088      	sub	sp, #32
    47ca:	4607      	mov	r7, r0
    47cc:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    47ce:	d00a      	beq.n	47e6 <mem_manage_fault+0x2a>
    47d0:	4b52      	ldr	r3, [pc, #328]	; (491c <mem_manage_fault+0x160>)
    47d2:	9306      	str	r3, [sp, #24]
    47d4:	aa05      	add	r2, sp, #20
    47d6:	2302      	movs	r3, #2
    47d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    47dc:	4620      	mov	r0, r4
    47de:	9301      	str	r3, [sp, #4]
    47e0:	9305      	str	r3, [sp, #20]
    47e2:	f006 fe8a 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    47e6:	4b4e      	ldr	r3, [pc, #312]	; (4920 <mem_manage_fault+0x164>)
    47e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    47ea:	06da      	lsls	r2, r3, #27
    47ec:	d50d      	bpl.n	480a <mem_manage_fault+0x4e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    47ee:	6823      	ldr	r3, [r4, #0]
    47f0:	075b      	lsls	r3, r3, #29
    47f2:	d00a      	beq.n	480a <mem_manage_fault+0x4e>
    47f4:	4b4b      	ldr	r3, [pc, #300]	; (4924 <mem_manage_fault+0x168>)
    47f6:	9306      	str	r3, [sp, #24]
    47f8:	4847      	ldr	r0, [pc, #284]	; (4918 <mem_manage_fault+0x15c>)
    47fa:	2302      	movs	r3, #2
    47fc:	aa05      	add	r2, sp, #20
    47fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4802:	9301      	str	r3, [sp, #4]
    4804:	9305      	str	r3, [sp, #20]
    4806:	f006 fe78 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    480a:	4b45      	ldr	r3, [pc, #276]	; (4920 <mem_manage_fault+0x164>)
    480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    480e:	071e      	lsls	r6, r3, #28
    4810:	d50d      	bpl.n	482e <mem_manage_fault+0x72>
		PR_FAULT_INFO("  Unstacking error");
    4812:	6823      	ldr	r3, [r4, #0]
    4814:	0758      	lsls	r0, r3, #29
    4816:	d00a      	beq.n	482e <mem_manage_fault+0x72>
    4818:	4b43      	ldr	r3, [pc, #268]	; (4928 <mem_manage_fault+0x16c>)
    481a:	9306      	str	r3, [sp, #24]
    481c:	483e      	ldr	r0, [pc, #248]	; (4918 <mem_manage_fault+0x15c>)
    481e:	2302      	movs	r3, #2
    4820:	aa05      	add	r2, sp, #20
    4822:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4826:	9301      	str	r3, [sp, #4]
    4828:	9305      	str	r3, [sp, #20]
    482a:	f006 fe66 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    482e:	4b3c      	ldr	r3, [pc, #240]	; (4920 <mem_manage_fault+0x164>)
    4830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4832:	0799      	lsls	r1, r3, #30
    4834:	d437      	bmi.n	48a6 <mem_manage_fault+0xea>
	uint32_t mmfar = -EINVAL;
    4836:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    483a:	4b39      	ldr	r3, [pc, #228]	; (4920 <mem_manage_fault+0x164>)
    483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    483e:	07d9      	lsls	r1, r3, #31
    4840:	d50d      	bpl.n	485e <mem_manage_fault+0xa2>
		PR_FAULT_INFO("  Instruction Access Violation");
    4842:	6823      	ldr	r3, [r4, #0]
    4844:	075a      	lsls	r2, r3, #29
    4846:	d00a      	beq.n	485e <mem_manage_fault+0xa2>
    4848:	4b38      	ldr	r3, [pc, #224]	; (492c <mem_manage_fault+0x170>)
    484a:	9306      	str	r3, [sp, #24]
    484c:	4832      	ldr	r0, [pc, #200]	; (4918 <mem_manage_fault+0x15c>)
    484e:	2302      	movs	r3, #2
    4850:	aa05      	add	r2, sp, #20
    4852:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4856:	9301      	str	r3, [sp, #4]
    4858:	9305      	str	r3, [sp, #20]
    485a:	f006 fe4e 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    485e:	4b30      	ldr	r3, [pc, #192]	; (4920 <mem_manage_fault+0x164>)
    4860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4862:	069b      	lsls	r3, r3, #26
    4864:	d50d      	bpl.n	4882 <mem_manage_fault+0xc6>
		PR_FAULT_INFO(
    4866:	6823      	ldr	r3, [r4, #0]
    4868:	0758      	lsls	r0, r3, #29
    486a:	d00a      	beq.n	4882 <mem_manage_fault+0xc6>
    486c:	4b30      	ldr	r3, [pc, #192]	; (4930 <mem_manage_fault+0x174>)
    486e:	9306      	str	r3, [sp, #24]
    4870:	4829      	ldr	r0, [pc, #164]	; (4918 <mem_manage_fault+0x15c>)
    4872:	2302      	movs	r3, #2
    4874:	aa05      	add	r2, sp, #20
    4876:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    487a:	9301      	str	r3, [sp, #4]
    487c:	9305      	str	r3, [sp, #20]
    487e:	f006 fe3c 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4882:	4b27      	ldr	r3, [pc, #156]	; (4920 <mem_manage_fault+0x164>)
    4884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4886:	06d1      	lsls	r1, r2, #27
    4888:	d438      	bmi.n	48fc <mem_manage_fault+0x140>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    488a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    488c:	0792      	lsls	r2, r2, #30
    488e:	d435      	bmi.n	48fc <mem_manage_fault+0x140>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4890:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4892:	4a23      	ldr	r2, [pc, #140]	; (4920 <mem_manage_fault+0x164>)
    4894:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4896:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    489a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    489c:	2300      	movs	r3, #0
    489e:	702b      	strb	r3, [r5, #0]
}
    48a0:	b008      	add	sp, #32
    48a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    48a6:	6823      	ldr	r3, [r4, #0]
    48a8:	075a      	lsls	r2, r3, #29
    48aa:	d00a      	beq.n	48c2 <mem_manage_fault+0x106>
    48ac:	4b21      	ldr	r3, [pc, #132]	; (4934 <mem_manage_fault+0x178>)
    48ae:	9306      	str	r3, [sp, #24]
    48b0:	4819      	ldr	r0, [pc, #100]	; (4918 <mem_manage_fault+0x15c>)
    48b2:	2302      	movs	r3, #2
    48b4:	aa05      	add	r2, sp, #20
    48b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    48ba:	9301      	str	r3, [sp, #4]
    48bc:	9305      	str	r3, [sp, #20]
    48be:	f006 fe1c 	bl	b4fa <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    48c2:	4b17      	ldr	r3, [pc, #92]	; (4920 <mem_manage_fault+0x164>)
    48c4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    48c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48c8:	061b      	lsls	r3, r3, #24
    48ca:	d5b4      	bpl.n	4836 <mem_manage_fault+0x7a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    48cc:	6823      	ldr	r3, [r4, #0]
    48ce:	0758      	lsls	r0, r3, #29
    48d0:	d00b      	beq.n	48ea <mem_manage_fault+0x12e>
    48d2:	4b19      	ldr	r3, [pc, #100]	; (4938 <mem_manage_fault+0x17c>)
    48d4:	4810      	ldr	r0, [pc, #64]	; (4918 <mem_manage_fault+0x15c>)
    48d6:	e9cd 3606 	strd	r3, r6, [sp, #24]
    48da:	aa05      	add	r2, sp, #20
    48dc:	2303      	movs	r3, #3
    48de:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    48e2:	9301      	str	r3, [sp, #4]
    48e4:	9305      	str	r3, [sp, #20]
    48e6:	f006 fe08 	bl	b4fa <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    48ea:	f1b8 0f00 	cmp.w	r8, #0
    48ee:	d0a4      	beq.n	483a <mem_manage_fault+0x7e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    48f0:	4a0b      	ldr	r2, [pc, #44]	; (4920 <mem_manage_fault+0x164>)
    48f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    48f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    48f8:	6293      	str	r3, [r2, #40]	; 0x28
    48fa:	e79e      	b.n	483a <mem_manage_fault+0x7e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    48fc:	685b      	ldr	r3, [r3, #4]
    48fe:	051b      	lsls	r3, r3, #20
    4900:	d5c6      	bpl.n	4890 <mem_manage_fault+0xd4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4902:	4639      	mov	r1, r7
    4904:	4630      	mov	r0, r6
    4906:	f7ff fdb7 	bl	4478 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    490a:	2800      	cmp	r0, #0
    490c:	d0c0      	beq.n	4890 <mem_manage_fault+0xd4>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    490e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4912:	2002      	movs	r0, #2
    4914:	e7bd      	b.n	4892 <mem_manage_fault+0xd6>
    4916:	bf00      	nop
    4918:	20000274 	.word	0x20000274
    491c:	0000ed80 	.word	0x0000ed80
    4920:	e000ed00 	.word	0xe000ed00
    4924:	0000ed96 	.word	0x0000ed96
    4928:	0000ec10 	.word	0x0000ec10
    492c:	0000edf7 	.word	0x0000edf7
    4930:	0000ec84 	.word	0x0000ec84
    4934:	0000edc9 	.word	0x0000edc9
    4938:	0000ede1 	.word	0x0000ede1

0000493c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    493c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    493e:	ab0a      	add	r3, sp, #40	; 0x28
    4940:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    4942:	9302      	str	r3, [sp, #8]
    4944:	4b05      	ldr	r3, [pc, #20]	; (495c <z_log_msg2_runtime_create.constprop.0+0x20>)
    4946:	9301      	str	r3, [sp, #4]
    4948:	2300      	movs	r3, #0
    494a:	9300      	str	r3, [sp, #0]
    494c:	2201      	movs	r2, #1
    494e:	4618      	mov	r0, r3
    4950:	f7fd f914 	bl	1b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    4954:	b007      	add	sp, #28
    4956:	f85d fb04 	ldr.w	pc, [sp], #4
    495a:	bf00      	nop
    495c:	0000ee16 	.word	0x0000ee16

00004960 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4964:	4b83      	ldr	r3, [pc, #524]	; (4b74 <z_arm_fault+0x214>)
    4966:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    496a:	b08e      	sub	sp, #56	; 0x38
    496c:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    496e:	f3c8 0408 	ubfx	r4, r8, #0, #9
    4972:	2500      	movs	r5, #0
    4974:	f385 8811 	msr	BASEPRI, r5
    4978:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    497c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4980:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4984:	d112      	bne.n	49ac <z_arm_fault+0x4c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4986:	f002 030c 	and.w	r3, r2, #12
    498a:	2b08      	cmp	r3, #8
    498c:	d111      	bne.n	49b2 <z_arm_fault+0x52>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    498e:	487a      	ldr	r0, [pc, #488]	; (4b78 <z_arm_fault+0x218>)
    4990:	6803      	ldr	r3, [r0, #0]
    4992:	f013 0707 	ands.w	r7, r3, #7
    4996:	d00a      	beq.n	49ae <z_arm_fault+0x4e>
    4998:	4b78      	ldr	r3, [pc, #480]	; (4b7c <z_arm_fault+0x21c>)
    499a:	930a      	str	r3, [sp, #40]	; 0x28
    499c:	aa09      	add	r2, sp, #36	; 0x24
    499e:	2302      	movs	r3, #2
    49a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    49a4:	9305      	str	r3, [sp, #20]
    49a6:	9309      	str	r3, [sp, #36]	; 0x24
    49a8:	f006 fda7 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	*nested_exc = false;
    49ac:	462f      	mov	r7, r5
		return NULL;
    49ae:	463e      	mov	r6, r7
    49b0:	e004      	b.n	49bc <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    49b2:	0711      	lsls	r1, r2, #28
	*nested_exc = false;
    49b4:	bf4e      	itee	mi
    49b6:	462f      	movmi	r7, r5
			ptr_esf = (z_arch_esf_t *)msp;
    49b8:	4606      	movpl	r6, r0
			*nested_exc = true;
    49ba:	2701      	movpl	r7, #1
	*recoverable = false;
    49bc:	2300      	movs	r3, #0
    49be:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (fault) {
    49c2:	1ee3      	subs	r3, r4, #3
    49c4:	2b09      	cmp	r3, #9
    49c6:	f200 80b8 	bhi.w	4b3a <z_arm_fault+0x1da>
    49ca:	e8df f003 	tbb	[pc, r3]
    49ce:	a005      	.short	0xa005
    49d0:	b6b69da4 	.word	0xb6b69da4
    49d4:	a8b6b6b6 	.word	0xa8b6b6b6
	PR_FAULT_INFO("***** HARD FAULT *****");
    49d8:	4d67      	ldr	r5, [pc, #412]	; (4b78 <z_arm_fault+0x218>)
    49da:	682b      	ldr	r3, [r5, #0]
    49dc:	075a      	lsls	r2, r3, #29
    49de:	d00a      	beq.n	49f6 <z_arm_fault+0x96>
    49e0:	4b67      	ldr	r3, [pc, #412]	; (4b80 <z_arm_fault+0x220>)
    49e2:	930a      	str	r3, [sp, #40]	; 0x28
    49e4:	aa09      	add	r2, sp, #36	; 0x24
    49e6:	2302      	movs	r3, #2
    49e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    49ec:	4628      	mov	r0, r5
    49ee:	9305      	str	r3, [sp, #20]
    49f0:	9309      	str	r3, [sp, #36]	; 0x24
    49f2:	f006 fd82 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    49f6:	4a5f      	ldr	r2, [pc, #380]	; (4b74 <z_arm_fault+0x214>)
    49f8:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	*recoverable = false;
    49fa:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    49fe:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    4a02:	f88d 8013 	strb.w	r8, [sp, #19]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4a06:	d010      	beq.n	4a2a <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    4a08:	682b      	ldr	r3, [r5, #0]
    4a0a:	075b      	lsls	r3, r3, #29
    4a0c:	d101      	bne.n	4a12 <z_arm_fault+0xb2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4a0e:	2400      	movs	r4, #0
    4a10:	e01c      	b.n	4a4c <z_arm_fault+0xec>
		PR_EXC("  Bus fault on vector table read");
    4a12:	4b5c      	ldr	r3, [pc, #368]	; (4b84 <z_arm_fault+0x224>)
    4a14:	930a      	str	r3, [sp, #40]	; 0x28
    4a16:	4858      	ldr	r0, [pc, #352]	; (4b78 <z_arm_fault+0x218>)
    4a18:	2302      	movs	r3, #2
    4a1a:	9305      	str	r3, [sp, #20]
    4a1c:	9309      	str	r3, [sp, #36]	; 0x24
    4a1e:	aa09      	add	r2, sp, #36	; 0x24
    4a20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	PR_FAULT_INFO(
    4a24:	f006 fd69 	bl	b4fa <z_log_msg2_static_create.constprop.0>
    4a28:	e7f1      	b.n	4a0e <z_arm_fault+0xae>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4a2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	da28      	bge.n	4a82 <z_arm_fault+0x122>
		PR_EXC("  Debug event");
    4a30:	682b      	ldr	r3, [r5, #0]
    4a32:	075d      	lsls	r5, r3, #29
    4a34:	d0eb      	beq.n	4a0e <z_arm_fault+0xae>
    4a36:	4b54      	ldr	r3, [pc, #336]	; (4b88 <z_arm_fault+0x228>)
    4a38:	930a      	str	r3, [sp, #40]	; 0x28
    4a3a:	484f      	ldr	r0, [pc, #316]	; (4b78 <z_arm_fault+0x218>)
    4a3c:	2302      	movs	r3, #2
    4a3e:	aa09      	add	r2, sp, #36	; 0x24
    4a40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4a44:	9305      	str	r3, [sp, #20]
    4a46:	9309      	str	r3, [sp, #36]	; 0x24
    4a48:	f006 fd57 	bl	b4fa <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4a4c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    4a50:	b9a3      	cbnz	r3, 4a7c <z_arm_fault+0x11c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4a52:	2220      	movs	r2, #32
    4a54:	4631      	mov	r1, r6
    4a56:	a806      	add	r0, sp, #24
    4a58:	f006 fedf 	bl	b81a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4a5e:	2f00      	cmp	r7, #0
    4a60:	f000 8083 	beq.w	4b6a <z_arm_fault+0x20a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4a68:	b922      	cbnz	r2, 4a74 <z_arm_fault+0x114>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4a6a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4a6e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4a72:	930d      	str	r3, [sp, #52]	; 0x34
	}

	z_arm_fatal_error(reason, &esf_copy);
    4a74:	a906      	add	r1, sp, #24
    4a76:	4620      	mov	r0, r4
    4a78:	f7ff fbaa 	bl	41d0 <z_arm_fatal_error>
}
    4a7c:	b00e      	add	sp, #56	; 0x38
    4a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4a82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4a84:	005c      	lsls	r4, r3, #1
    4a86:	d5c2      	bpl.n	4a0e <z_arm_fault+0xae>
		PR_EXC("  Fault escalation (see below)");
    4a88:	682b      	ldr	r3, [r5, #0]
    4a8a:	0758      	lsls	r0, r3, #29
    4a8c:	d00a      	beq.n	4aa4 <z_arm_fault+0x144>
    4a8e:	4b3f      	ldr	r3, [pc, #252]	; (4b8c <z_arm_fault+0x22c>)
    4a90:	930a      	str	r3, [sp, #40]	; 0x28
    4a92:	4839      	ldr	r0, [pc, #228]	; (4b78 <z_arm_fault+0x218>)
    4a94:	2302      	movs	r3, #2
    4a96:	aa09      	add	r2, sp, #36	; 0x24
    4a98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4a9c:	9305      	str	r3, [sp, #20]
    4a9e:	9309      	str	r3, [sp, #36]	; 0x24
    4aa0:	f006 fd2b 	bl	b4fa <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    4aa4:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4aa6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    4aaa:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4aae:	429a      	cmp	r2, r3
    4ab0:	d00b      	beq.n	4aca <z_arm_fault+0x16a>
		} else if (SCB_MMFSR != 0) {
    4ab2:	4b30      	ldr	r3, [pc, #192]	; (4b74 <z_arm_fault+0x214>)
    4ab4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    4ab8:	b1ca      	cbz	r2, 4aee <z_arm_fault+0x18e>
			reason = mem_manage_fault(esf, 1, recoverable);
    4aba:	f10d 0213 	add.w	r2, sp, #19
    4abe:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4ac0:	4630      	mov	r0, r6
    4ac2:	f7ff fe7b 	bl	47bc <mem_manage_fault>
    4ac6:	4604      	mov	r4, r0
		break;
    4ac8:	e7c0      	b.n	4a4c <z_arm_fault+0xec>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4aca:	682b      	ldr	r3, [r5, #0]
    4acc:	0759      	lsls	r1, r3, #29
    4ace:	d00c      	beq.n	4aea <z_arm_fault+0x18a>
    4ad0:	6833      	ldr	r3, [r6, #0]
    4ad2:	4a2f      	ldr	r2, [pc, #188]	; (4b90 <z_arm_fault+0x230>)
    4ad4:	4828      	ldr	r0, [pc, #160]	; (4b78 <z_arm_fault+0x218>)
    4ad6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    4ada:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4ade:	2303      	movs	r3, #3
    4ae0:	aa09      	add	r2, sp, #36	; 0x24
    4ae2:	9305      	str	r3, [sp, #20]
    4ae4:	9309      	str	r3, [sp, #36]	; 0x24
    4ae6:	f006 fd08 	bl	b4fa <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
    4aea:	6834      	ldr	r4, [r6, #0]
    4aec:	e7ae      	b.n	4a4c <z_arm_fault+0xec>
		} else if (SCB_BFSR != 0) {
    4aee:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    4af2:	b12a      	cbz	r2, 4b00 <z_arm_fault+0x1a0>
			reason = bus_fault(esf, 1, recoverable);
    4af4:	f10d 0113 	add.w	r1, sp, #19
    4af8:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4afa:	f7ff fd19 	bl	4530 <bus_fault.constprop.0>
    4afe:	e7e2      	b.n	4ac6 <z_arm_fault+0x166>
		} else if (SCB_UFSR != 0) {
    4b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4b02:	b29b      	uxth	r3, r3
    4b04:	2b00      	cmp	r3, #0
    4b06:	d082      	beq.n	4a0e <z_arm_fault+0xae>
		reason = usage_fault(esf);
    4b08:	f7ff fdbe 	bl	4688 <usage_fault.constprop.0>
    4b0c:	e7db      	b.n	4ac6 <z_arm_fault+0x166>
		reason = mem_manage_fault(esf, 0, recoverable);
    4b0e:	f10d 0213 	add.w	r2, sp, #19
    4b12:	2100      	movs	r1, #0
    4b14:	e7d4      	b.n	4ac0 <z_arm_fault+0x160>
		reason = bus_fault(esf, 0, recoverable);
    4b16:	f10d 0113 	add.w	r1, sp, #19
    4b1a:	2000      	movs	r0, #0
    4b1c:	e7ed      	b.n	4afa <z_arm_fault+0x19a>
	PR_FAULT_INFO(
    4b1e:	4816      	ldr	r0, [pc, #88]	; (4b78 <z_arm_fault+0x218>)
    4b20:	6803      	ldr	r3, [r0, #0]
    4b22:	075a      	lsls	r2, r3, #29
    4b24:	f43f af73 	beq.w	4a0e <z_arm_fault+0xae>
    4b28:	4b1a      	ldr	r3, [pc, #104]	; (4b94 <z_arm_fault+0x234>)
    4b2a:	930a      	str	r3, [sp, #40]	; 0x28
    4b2c:	2302      	movs	r3, #2
    4b2e:	9305      	str	r3, [sp, #20]
    4b30:	9309      	str	r3, [sp, #36]	; 0x24
    4b32:	aa09      	add	r2, sp, #36	; 0x24
    4b34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b38:	e774      	b.n	4a24 <z_arm_fault+0xc4>
	PR_FAULT_INFO("***** %s %d) *****",
    4b3a:	490f      	ldr	r1, [pc, #60]	; (4b78 <z_arm_fault+0x218>)
    4b3c:	680b      	ldr	r3, [r1, #0]
    4b3e:	075b      	lsls	r3, r3, #29
    4b40:	f43f af65 	beq.w	4a0e <z_arm_fault+0xae>
    4b44:	4a14      	ldr	r2, [pc, #80]	; (4b98 <z_arm_fault+0x238>)
    4b46:	4b15      	ldr	r3, [pc, #84]	; (4b9c <z_arm_fault+0x23c>)
    4b48:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    4b4c:	bf18      	it	ne
    4b4e:	4613      	movne	r3, r2
    4b50:	3c10      	subs	r4, #16
    4b52:	e9cd 3402 	strd	r3, r4, [sp, #8]
    4b56:	2400      	movs	r4, #0
    4b58:	4b11      	ldr	r3, [pc, #68]	; (4ba0 <z_arm_fault+0x240>)
    4b5a:	9301      	str	r3, [sp, #4]
    4b5c:	9400      	str	r4, [sp, #0]
    4b5e:	4623      	mov	r3, r4
    4b60:	2201      	movs	r2, #1
    4b62:	4620      	mov	r0, r4
    4b64:	f7ff feea 	bl	493c <z_log_msg2_runtime_create.constprop.0>
    4b68:	e770      	b.n	4a4c <z_arm_fault+0xec>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4b6a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4b6e:	f023 0301 	bic.w	r3, r3, #1
    4b72:	e77e      	b.n	4a72 <z_arm_fault+0x112>
    4b74:	e000ed00 	.word	0xe000ed00
    4b78:	20000274 	.word	0x20000274
    4b7c:	0000ee57 	.word	0x0000ee57
    4b80:	0000ee82 	.word	0x0000ee82
    4b84:	0000ee99 	.word	0x0000ee99
    4b88:	0000eeba 	.word	0x0000eeba
    4b8c:	0000eec8 	.word	0x0000eec8
    4b90:	0000eee7 	.word	0x0000eee7
    4b94:	0000ef03 	.word	0x0000ef03
    4b98:	0000ee3e 	.word	0x0000ee3e
    4b9c:	0000ee29 	.word	0x0000ee29
    4ba0:	0000ee16 	.word	0x0000ee16

00004ba4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4ba4:	4a02      	ldr	r2, [pc, #8]	; (4bb0 <z_arm_fault_init+0xc>)
    4ba6:	6953      	ldr	r3, [r2, #20]
    4ba8:	f043 0310 	orr.w	r3, r3, #16
    4bac:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4bae:	4770      	bx	lr
    4bb0:	e000ed00 	.word	0xe000ed00

00004bb4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4bb4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4bb8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4bbc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4bbe:	4672      	mov	r2, lr
	bl z_arm_fault
    4bc0:	f7ff fece 	bl	4960 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4bc4:	bd01      	pop	{r0, pc}
    4bc6:	bf00      	nop

00004bc8 <z_arm_interrupt_init>:
    4bc8:	4804      	ldr	r0, [pc, #16]	; (4bdc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4bca:	2300      	movs	r3, #0
    4bcc:	2120      	movs	r1, #32
    4bce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4bd0:	3301      	adds	r3, #1
    4bd2:	2b27      	cmp	r3, #39	; 0x27
    4bd4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4bd8:	d1f9      	bne.n	4bce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4bda:	4770      	bx	lr
    4bdc:	e000e100 	.word	0xe000e100

00004be0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4be0:	f007 ffbe 	bl	cb60 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4be4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4be6:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    4bea:	480b      	ldr	r0, [pc, #44]	; (4c18 <__start+0x38>)
    ldr r1, =0xaa
    4bec:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4bf0:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
    4bf4:	f006 fe1c 	bl	b830 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4bf8:	4807      	ldr	r0, [pc, #28]	; (4c18 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4bfa:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4bfe:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4c00:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4c04:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4c08:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4c0a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4c0c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4c10:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4c14:	f7ff fb98 	bl	4348 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
    4c18:	20003860 	.word	0x20003860

00004c1c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4c1c:	4b06      	ldr	r3, [pc, #24]	; (4c38 <z_impl_k_thread_abort+0x1c>)
    4c1e:	689b      	ldr	r3, [r3, #8]
    4c20:	4283      	cmp	r3, r0
    4c22:	d107      	bne.n	4c34 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4c24:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4c28:	b123      	cbz	r3, 4c34 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4c2a:	4a04      	ldr	r2, [pc, #16]	; (4c3c <z_impl_k_thread_abort+0x20>)
    4c2c:	6853      	ldr	r3, [r2, #4]
    4c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4c32:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    4c34:	f004 b95c 	b.w	8ef0 <z_thread_abort>
    4c38:	20001a9c 	.word	0x20001a9c
    4c3c:	e000ed00 	.word	0xe000ed00

00004c40 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4c40:	4b02      	ldr	r3, [pc, #8]	; (4c4c <z_arm_configure_static_mpu_regions+0xc>)
    4c42:	4a03      	ldr	r2, [pc, #12]	; (4c50 <z_arm_configure_static_mpu_regions+0x10>)
    4c44:	4803      	ldr	r0, [pc, #12]	; (4c54 <z_arm_configure_static_mpu_regions+0x14>)
    4c46:	2101      	movs	r1, #1
    4c48:	f000 b892 	b.w	4d70 <arm_core_mpu_configure_static_mpu_regions>
    4c4c:	20010000 	.word	0x20010000
    4c50:	20000000 	.word	0x20000000
    4c54:	0000d720 	.word	0x0000d720

00004c58 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4c58:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4c5c:	4b05      	ldr	r3, [pc, #20]	; (4c74 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    4c5e:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    4c60:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4c62:	4a05      	ldr	r2, [pc, #20]	; (4c78 <z_arm_configure_dynamic_mpu_regions+0x20>)
    4c64:	2120      	movs	r1, #32
    4c66:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4c6a:	4618      	mov	r0, r3
    4c6c:	2101      	movs	r1, #1
    4c6e:	f000 b889 	b.w	4d84 <arm_core_mpu_configure_dynamic_mpu_regions>
    4c72:	bf00      	nop
    4c74:	200018ec 	.word	0x200018ec
    4c78:	150b0000 	.word	0x150b0000

00004c7c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4c7e:	4f2d      	ldr	r7, [pc, #180]	; (4d34 <mpu_configure_regions+0xb8>)
    4c80:	b089      	sub	sp, #36	; 0x24
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4c82:	2600      	movs	r6, #0
    4c84:	428e      	cmp	r6, r1
    4c86:	db02      	blt.n	4c8e <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4c88:	4610      	mov	r0, r2
    4c8a:	b009      	add	sp, #36	; 0x24
    4c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    4c8e:	6844      	ldr	r4, [r0, #4]
    4c90:	2c00      	cmp	r4, #0
    4c92:	d04c      	beq.n	4d2e <mpu_configure_regions+0xb2>
		if (do_sanity_check &&
    4c94:	b1db      	cbz	r3, 4cce <mpu_configure_regions+0x52>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4c96:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4c9a:	ea14 0f0c 	tst.w	r4, ip
    4c9e:	d010      	beq.n	4cc2 <mpu_configure_regions+0x46>
			LOG_ERR("Partition %u: sanity check failed.", i);
    4ca0:	4825      	ldr	r0, [pc, #148]	; (4d38 <mpu_configure_regions+0xbc>)
    4ca2:	6803      	ldr	r3, [r0, #0]
    4ca4:	075a      	lsls	r2, r3, #29
    4ca6:	d029      	beq.n	4cfc <mpu_configure_regions+0x80>
    4ca8:	4b24      	ldr	r3, [pc, #144]	; (4d3c <mpu_configure_regions+0xc0>)
    4caa:	e9cd 3606 	strd	r3, r6, [sp, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4cae:	2303      	movs	r3, #3
    4cb0:	9301      	str	r3, [sp, #4]
    4cb2:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    4cb4:	2300      	movs	r3, #0
    4cb6:	aa05      	add	r2, sp, #20
    4cb8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4cbc:	f005 fa74 	bl	a1a8 <z_impl_z_log_msg2_static_create>
		if (reg_index == -EINVAL) {
    4cc0:	e01c      	b.n	4cfc <mpu_configure_regions+0x80>
		&&
    4cc2:	2c1f      	cmp	r4, #31
    4cc4:	d9ec      	bls.n	4ca0 <mpu_configure_regions+0x24>
		((part->start & (part->size - 1U)) == 0U);
    4cc6:	6805      	ldr	r5, [r0, #0]
		&&
    4cc8:	ea1c 0f05 	tst.w	ip, r5
    4ccc:	d1e8      	bne.n	4ca0 <mpu_configure_regions+0x24>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4cce:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    4cd0:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4cd2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4cd6:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    4cd8:	d913      	bls.n	4d02 <mpu_configure_regions+0x86>
	if (size > (1UL << 31)) {
    4cda:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4cde:	d812      	bhi.n	4d06 <mpu_configure_regions+0x8a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4ce0:	3c01      	subs	r4, #1
    4ce2:	fab4 f484 	clz	r4, r4
    4ce6:	f1c4 041f 	rsb	r4, r4, #31
    4cea:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4cec:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4cee:	ea4c 0404 	orr.w	r4, ip, r4
    4cf2:	d90e      	bls.n	4d12 <mpu_configure_regions+0x96>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4cf4:	4810      	ldr	r0, [pc, #64]	; (4d38 <mpu_configure_regions+0xbc>)
    4cf6:	6803      	ldr	r3, [r0, #0]
    4cf8:	075b      	lsls	r3, r3, #29
    4cfa:	d106      	bne.n	4d0a <mpu_configure_regions+0x8e>
			return -EINVAL;
    4cfc:	f06f 0215 	mvn.w	r2, #21
    4d00:	e7c2      	b.n	4c88 <mpu_configure_regions+0xc>
		return REGION_32B;
    4d02:	2408      	movs	r4, #8
    4d04:	e7f2      	b.n	4cec <mpu_configure_regions+0x70>
		return REGION_4G;
    4d06:	243e      	movs	r4, #62	; 0x3e
    4d08:	e7f0      	b.n	4cec <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4d0a:	4b0d      	ldr	r3, [pc, #52]	; (4d40 <mpu_configure_regions+0xc4>)
    4d0c:	e9cd 3206 	strd	r3, r2, [sp, #24]
    4d10:	e7cd      	b.n	4cae <mpu_configure_regions+0x32>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4d12:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    4d16:	4315      	orrs	r5, r2
    4d18:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4d1c:	f044 0401 	orr.w	r4, r4, #1
    4d20:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4d24:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    4d28:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4d2a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    4d2e:	3601      	adds	r6, #1
    4d30:	300c      	adds	r0, #12
    4d32:	e7a7      	b.n	4c84 <mpu_configure_regions+0x8>
    4d34:	e000ed00 	.word	0xe000ed00
    4d38:	20000270 	.word	0x20000270
    4d3c:	0000ef2b 	.word	0x0000ef2b
    4d40:	0000ef4e 	.word	0x0000ef4e

00004d44 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4d44:	4b04      	ldr	r3, [pc, #16]	; (4d58 <arm_core_mpu_enable+0x14>)
    4d46:	2205      	movs	r2, #5
    4d48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4d4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d50:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4d54:	4770      	bx	lr
    4d56:	bf00      	nop
    4d58:	e000ed00 	.word	0xe000ed00

00004d5c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4d5c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4d60:	4b02      	ldr	r3, [pc, #8]	; (4d6c <arm_core_mpu_disable+0x10>)
    4d62:	2200      	movs	r2, #0
    4d64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4d68:	4770      	bx	lr
    4d6a:	bf00      	nop
    4d6c:	e000ed00 	.word	0xe000ed00

00004d70 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4d70:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4d72:	4c03      	ldr	r4, [pc, #12]	; (4d80 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4d74:	2301      	movs	r3, #1
    4d76:	7822      	ldrb	r2, [r4, #0]
    4d78:	f7ff ff80 	bl	4c7c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4d7c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4d7e:	bd10      	pop	{r4, pc}
    4d80:	20001b24 	.word	0x20001b24

00004d84 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4d84:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4d86:	4a09      	ldr	r2, [pc, #36]	; (4dac <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    4d88:	2300      	movs	r3, #0
    4d8a:	7812      	ldrb	r2, [r2, #0]
    4d8c:	f7ff ff76 	bl	4c7c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4d90:	f110 0f16 	cmn.w	r0, #22
    4d94:	d003      	beq.n	4d9e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4d96:	4b06      	ldr	r3, [pc, #24]	; (4db0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    4d98:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4d9a:	2807      	cmp	r0, #7
    4d9c:	dd00      	ble.n	4da0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4d9e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    4da0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    4da4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    4da8:	3001      	adds	r0, #1
    4daa:	e7f6      	b.n	4d9a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    4dac:	20001b24 	.word	0x20001b24
    4db0:	e000ed00 	.word	0xe000ed00

00004db4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4db4:	4914      	ldr	r1, [pc, #80]	; (4e08 <z_arm_mpu_init+0x54>)
    4db6:	6808      	ldr	r0, [r1, #0]
    4db8:	2808      	cmp	r0, #8
{
    4dba:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4dbc:	d821      	bhi.n	4e02 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4dbe:	f7ff ffcd 	bl	4d5c <arm_core_mpu_disable>
    4dc2:	4c12      	ldr	r4, [pc, #72]	; (4e0c <z_arm_mpu_init+0x58>)
    4dc4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4dc6:	2200      	movs	r2, #0
    4dc8:	4290      	cmp	r0, r2
    4dca:	f101 010c 	add.w	r1, r1, #12
    4dce:	d105      	bne.n	4ddc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4dd0:	4b0f      	ldr	r3, [pc, #60]	; (4e10 <z_arm_mpu_init+0x5c>)
    4dd2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4dd4:	f7ff ffb6 	bl	4d44 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4dd8:	2000      	movs	r0, #0
}
    4dda:	bd10      	pop	{r4, pc}
    4ddc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4de0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4de4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4de8:	4313      	orrs	r3, r2
    4dea:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4dee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4df6:	f043 0301 	orr.w	r3, r3, #1
    4dfa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4dfe:	3201      	adds	r2, #1
    4e00:	e7e2      	b.n	4dc8 <z_arm_mpu_init+0x14>
		return -1;
    4e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4e06:	e7e8      	b.n	4dda <z_arm_mpu_init+0x26>
    4e08:	0000d72c 	.word	0x0000d72c
    4e0c:	e000ed00 	.word	0xe000ed00
    4e10:	20001b24 	.word	0x20001b24

00004e14 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4e14:	4b01      	ldr	r3, [pc, #4]	; (4e1c <__stdout_hook_install+0x8>)
    4e16:	6018      	str	r0, [r3, #0]
}
    4e18:	4770      	bx	lr
    4e1a:	bf00      	nop
    4e1c:	200000b8 	.word	0x200000b8

00004e20 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    4e20:	b40c      	push	{r2, r3}
    4e22:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    4e24:	b909      	cbnz	r1, 4e2a <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    4e26:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    4e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    4e2e:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    4e30:	9a06      	ldr	r2, [sp, #24]
    4e32:	4806      	ldr	r0, [pc, #24]	; (4e4c <snprintf+0x2c>)
	va_start(vargs, format);
    4e34:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    4e36:	a902      	add	r1, sp, #8
    4e38:	f7fb fe28 	bl	a8c <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    4e3c:	9b02      	ldr	r3, [sp, #8]
    4e3e:	2200      	movs	r2, #0
    4e40:	701a      	strb	r2, [r3, #0]
	return r;
}
    4e42:	b005      	add	sp, #20
    4e44:	f85d eb04 	ldr.w	lr, [sp], #4
    4e48:	b002      	add	sp, #8
    4e4a:	4770      	bx	lr
    4e4c:	0000b849 	.word	0x0000b849

00004e50 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4e50:	f04f 0220 	mov.w	r2, #32
    4e54:	f3ef 8311 	mrs	r3, BASEPRI
    4e58:	f382 8812 	msr	BASEPRI_MAX, r2
    4e5c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4e60:	4a04      	ldr	r2, [pc, #16]	; (4e74 <nordicsemi_nrf52_init+0x24>)
    4e62:	2101      	movs	r1, #1
    4e64:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    4e68:	f383 8811 	msr	BASEPRI, r3
    4e6c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4e70:	2000      	movs	r0, #0
    4e72:	4770      	bx	lr
    4e74:	4001e000 	.word	0x4001e000

00004e78 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4e78:	b120      	cbz	r0, 4e84 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4e7a:	4b03      	ldr	r3, [pc, #12]	; (4e88 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4e7c:	0180      	lsls	r0, r0, #6
    4e7e:	f043 0301 	orr.w	r3, r3, #1
    4e82:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4e84:	4770      	bx	lr
    4e86:	bf00      	nop
    4e88:	0000d080 	.word	0x0000d080

00004e8c <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    4e8c:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    4e8e:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    4e90:	6820      	ldr	r0, [r4, #0]
    4e92:	f002 ff91 	bl	7db8 <z_impl_device_get_binding>
	if (!gpio) {
    4e96:	b930      	cbnz	r0, 4ea6 <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    4e98:	480d      	ldr	r0, [pc, #52]	; (4ed0 <pwr_ctrl_init+0x44>)
    4e9a:	6821      	ldr	r1, [r4, #0]
    4e9c:	f004 fba2 	bl	95e4 <printk>
		return -ENODEV;
    4ea0:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    4ea4:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    4ea6:	6861      	ldr	r1, [r4, #4]
	struct gpio_driver_data *data =
    4ea8:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    4eaa:	6885      	ldr	r5, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4eac:	b2c9      	uxtb	r1, r1
    4eae:	2301      	movs	r3, #1
    4eb0:	fa03 f201 	lsl.w	r2, r3, r1
    4eb4:	6823      	ldr	r3, [r4, #0]
    4eb6:	ea23 0302 	bic.w	r3, r3, r2
    4eba:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    4ebc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    4ec0:	682b      	ldr	r3, [r5, #0]
    4ec2:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
    4ec4:	2021      	movs	r0, #33	; 0x21
    4ec6:	2100      	movs	r1, #0
    4ec8:	f003 ffe2 	bl	8e90 <z_impl_k_sleep>
	return 0;
    4ecc:	2000      	movs	r0, #0
    4ece:	e7e9      	b.n	4ea4 <pwr_ctrl_init+0x18>
    4ed0:	0000ef87 	.word	0x0000ef87

00004ed4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4ed4:	4b08      	ldr	r3, [pc, #32]	; (4ef8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4ed6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4ed8:	1ac3      	subs	r3, r0, r3
{
    4eda:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4edc:	4907      	ldr	r1, [pc, #28]	; (4efc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    4ede:	109b      	asrs	r3, r3, #2
{
    4ee0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4ee2:	4359      	muls	r1, r3
    4ee4:	4806      	ldr	r0, [pc, #24]	; (4f00 <onoff_stop+0x2c>)
    4ee6:	2240      	movs	r2, #64	; 0x40
    4ee8:	f006 fcf5 	bl	b8d6 <stop>
	notify(mgr, res);
    4eec:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4eee:	4601      	mov	r1, r0
	notify(mgr, res);
    4ef0:	4620      	mov	r0, r4
}
    4ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4ef6:	4718      	bx	r3
    4ef8:	20001908 	.word	0x20001908
    4efc:	b6db6db7 	.word	0xb6db6db7
    4f00:	0000cc1c 	.word	0x0000cc1c

00004f04 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4f06:	4c0c      	ldr	r4, [pc, #48]	; (4f38 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4f08:	4a0c      	ldr	r2, [pc, #48]	; (4f3c <onoff_start+0x38>)
    4f0a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    4f0c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4f0e:	9300      	str	r3, [sp, #0]
{
    4f10:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4f12:	460b      	mov	r3, r1
    4f14:	490a      	ldr	r1, [pc, #40]	; (4f40 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    4f16:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4f18:	4361      	muls	r1, r4
{
    4f1a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4f1c:	4809      	ldr	r0, [pc, #36]	; (4f44 <onoff_start+0x40>)
    4f1e:	f006 fd07 	bl	b930 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4f22:	1e01      	subs	r1, r0, #0
    4f24:	da05      	bge.n	4f32 <onoff_start+0x2e>
		notify(mgr, err);
    4f26:	4630      	mov	r0, r6
    4f28:	462b      	mov	r3, r5
	}
}
    4f2a:	b002      	add	sp, #8
    4f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    4f30:	4718      	bx	r3
}
    4f32:	b002      	add	sp, #8
    4f34:	bd70      	pop	{r4, r5, r6, pc}
    4f36:	bf00      	nop
    4f38:	20001908 	.word	0x20001908
    4f3c:	0000b99f 	.word	0x0000b99f
    4f40:	b6db6db7 	.word	0xb6db6db7
    4f44:	0000cc1c 	.word	0x0000cc1c

00004f48 <hfclk_start>:
{
    4f48:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    4f4a:	f007 fc80 	bl	c84e <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    4f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4f52:	fba0 0302 	umull	r0, r3, r0, r2
		hf_start_tstamp = k_uptime_get();
    4f56:	4c07      	ldr	r4, [pc, #28]	; (4f74 <hfclk_start+0x2c>)
    4f58:	fb02 3101 	mla	r1, r2, r1, r3
    4f5c:	0bc0      	lsrs	r0, r0, #15
    4f5e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    4f62:	0bc9      	lsrs	r1, r1, #15
    4f64:	e9c4 0100 	strd	r0, r1, [r4]
}
    4f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4f6c:	2001      	movs	r0, #1
    4f6e:	f001 bec9 	b.w	6d04 <nrfx_clock_start>
    4f72:	bf00      	nop
    4f74:	20000dc0 	.word	0x20000dc0

00004f78 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4f78:	2200      	movs	r2, #0
{
    4f7a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4f7c:	2101      	movs	r1, #1
{
    4f7e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4f80:	4610      	mov	r0, r2
    4f82:	f7ff f9c5 	bl	4310 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4f86:	2000      	movs	r0, #0
    4f88:	f7ff f990 	bl	42ac <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4f8c:	480f      	ldr	r0, [pc, #60]	; (4fcc <clk_init+0x54>)
    4f8e:	f001 fea9 	bl	6ce4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4f92:	4b0f      	ldr	r3, [pc, #60]	; (4fd0 <clk_init+0x58>)
    4f94:	4298      	cmp	r0, r3
    4f96:	d115      	bne.n	4fc4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4f98:	f007 f98d 	bl	c2b6 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4f9c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4f9e:	490d      	ldr	r1, [pc, #52]	; (4fd4 <clk_init+0x5c>)
    4fa0:	4630      	mov	r0, r6
    4fa2:	f004 fb88 	bl	96b6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4fa6:	2800      	cmp	r0, #0
    4fa8:	db0b      	blt.n	4fc2 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    4faa:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4fac:	4909      	ldr	r1, [pc, #36]	; (4fd4 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4fae:	2501      	movs	r5, #1
    4fb0:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4fb2:	f104 001c 	add.w	r0, r4, #28
    4fb6:	f004 fb7e 	bl	96b6 <onoff_manager_init>
		if (err < 0) {
    4fba:	2800      	cmp	r0, #0
    4fbc:	db01      	blt.n	4fc2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4fbe:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4fc0:	2000      	movs	r0, #0
}
    4fc2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4fc4:	f06f 0004 	mvn.w	r0, #4
    4fc8:	e7fb      	b.n	4fc2 <clk_init+0x4a>
    4fca:	bf00      	nop
    4fcc:	0000500d 	.word	0x0000500d
    4fd0:	0bad0000 	.word	0x0bad0000
    4fd4:	0000d7c8 	.word	0x0000d7c8

00004fd8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4fd8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4fda:	230c      	movs	r3, #12
    4fdc:	4809      	ldr	r0, [pc, #36]	; (5004 <clkstarted_handle.constprop.0+0x2c>)
    4fde:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4fe0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4fe2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4fe4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    4fe8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4fea:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    4fec:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4fee:	4418      	add	r0, r3
    4ff0:	f006 fc5e 	bl	b8b0 <set_on_state>
	if (callback) {
    4ff4:	b12d      	cbz	r5, 5002 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4ff6:	4632      	mov	r2, r6
    4ff8:	462b      	mov	r3, r5
    4ffa:	4803      	ldr	r0, [pc, #12]	; (5008 <clkstarted_handle.constprop.0+0x30>)
}
    4ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5000:	4718      	bx	r3
}
    5002:	bd70      	pop	{r4, r5, r6, pc}
    5004:	20001908 	.word	0x20001908
    5008:	0000cc1c 	.word	0x0000cc1c

0000500c <clock_event_handler>:
	switch (event) {
    500c:	b110      	cbz	r0, 5014 <clock_event_handler+0x8>
    500e:	2801      	cmp	r0, #1
    5010:	d004      	beq.n	501c <clock_event_handler+0x10>
    5012:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5014:	4b03      	ldr	r3, [pc, #12]	; (5024 <clock_event_handler+0x18>)
    5016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5018:	075b      	lsls	r3, r3, #29
    501a:	d101      	bne.n	5020 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    501c:	f7ff bfdc 	b.w	4fd8 <clkstarted_handle.constprop.0>
}
    5020:	4770      	bx	lr
    5022:	bf00      	nop
    5024:	20001908 	.word	0x20001908

00005028 <generic_hfclk_start>:
{
    5028:	b508      	push	{r3, lr}
	__asm__ volatile(
    502a:	f04f 0320 	mov.w	r3, #32
    502e:	f3ef 8111 	mrs	r1, BASEPRI
    5032:	f383 8812 	msr	BASEPRI_MAX, r3
    5036:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    503a:	4a11      	ldr	r2, [pc, #68]	; (5080 <generic_hfclk_start+0x58>)
    503c:	6813      	ldr	r3, [r2, #0]
    503e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    5042:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5046:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5048:	d00c      	beq.n	5064 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    504a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    504e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5052:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5056:	f013 0301 	ands.w	r3, r3, #1
    505a:	d003      	beq.n	5064 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    505c:	4809      	ldr	r0, [pc, #36]	; (5084 <generic_hfclk_start+0x5c>)
    505e:	f006 fc27 	bl	b8b0 <set_on_state>
			already_started = true;
    5062:	2301      	movs	r3, #1
	__asm__ volatile(
    5064:	f381 8811 	msr	BASEPRI, r1
    5068:	f3bf 8f6f 	isb	sy
	if (already_started) {
    506c:	b123      	cbz	r3, 5078 <generic_hfclk_start+0x50>
}
    506e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5072:	2000      	movs	r0, #0
    5074:	f7ff bfb0 	b.w	4fd8 <clkstarted_handle.constprop.0>
}
    5078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
    507c:	f7ff bf64 	b.w	4f48 <hfclk_start>
    5080:	20001958 	.word	0x20001958
    5084:	20001948 	.word	0x20001948

00005088 <api_blocking_start>:
{
    5088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    508a:	2200      	movs	r2, #0
    508c:	2301      	movs	r3, #1
    508e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5092:	ab04      	add	r3, sp, #16
    5094:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5098:	4a09      	ldr	r2, [pc, #36]	; (50c0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    509a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    509e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    50a0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    50a4:	f006 fc74 	bl	b990 <api_start>
	if (err < 0) {
    50a8:	2800      	cmp	r0, #0
    50aa:	db05      	blt.n	50b8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    50ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    50b0:	2300      	movs	r3, #0
    50b2:	4668      	mov	r0, sp
    50b4:	f003 faa0 	bl	85f8 <z_impl_k_sem_take>
}
    50b8:	b007      	add	sp, #28
    50ba:	f85d fb04 	ldr.w	pc, [sp], #4
    50be:	bf00      	nop
    50c0:	0000b9b7 	.word	0x0000b9b7

000050c4 <lfclk_start>:
{
    50c4:	b510      	push	{r4, lr}
	if (!once) {
    50c6:	4c07      	ldr	r4, [pc, #28]	; (50e4 <lfclk_start+0x20>)
    50c8:	7823      	ldrb	r3, [r4, #0]
    50ca:	b92b      	cbnz	r3, 50d8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    50cc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    50d0:	f007 fbbf 	bl	c852 <z_impl_k_busy_wait>
		once = true;
    50d4:	2301      	movs	r3, #1
    50d6:	7023      	strb	r3, [r4, #0]
}
    50d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    50dc:	2000      	movs	r0, #0
    50de:	f001 be11 	b.w	6d04 <nrfx_clock_start>
    50e2:	bf00      	nop
    50e4:	20001b25 	.word	0x20001b25

000050e8 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
    50e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    50ec:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    50f0:	4605      	mov	r5, r0
    50f2:	f8d8 6418 	ldr.w	r6, [r8, #1048]	; 0x418
    50f6:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
    50fa:	f04f 0320 	mov.w	r3, #32
    50fe:	f3ef 8711 	mrs	r7, BASEPRI
    5102:	f383 8812 	msr	BASEPRI_MAX, r3
    5106:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
    510a:	f007 fba0 	bl	c84e <z_impl_k_uptime_ticks>
    510e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5112:	fba0 4003 	umull	r4, r0, r0, r3
    5116:	fb03 0001 	mla	r0, r3, r1, r0
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    511a:	f8d8 940c 	ldr.w	r9, [r8, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    511e:	f8d8 340c 	ldr.w	r3, [r8, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
    5122:	4b25      	ldr	r3, [pc, #148]	; (51b8 <cmd_status+0xd0>)
    5124:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
    5128:	4b24      	ldr	r3, [pc, #144]	; (51bc <cmd_status+0xd4>)
    512a:	0be4      	lsrs	r4, r4, #15
    512c:	f8d3 a000 	ldr.w	sl, [r3]
    5130:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
	__asm__ volatile(
    5134:	f387 8811 	msr	BASEPRI, r7
    5138:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
    513c:	4a20      	ldr	r2, [pc, #128]	; (51c0 <cmd_status+0xd8>)
	shell_print(shell, "\t- %srunning (users: %u)",
    513e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 51c4 <cmd_status+0xdc>
    5142:	4f21      	ldr	r7, [pc, #132]	; (51c8 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
    5144:	4628      	mov	r0, r5
    5146:	2108      	movs	r1, #8
    5148:	f005 fa3c 	bl	a5c4 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    514c:	f019 0f01 	tst.w	r9, #1
    5150:	f8df 9078 	ldr.w	r9, [pc, #120]	; 51cc <cmd_status+0xe4>
    5154:	4a1e      	ldr	r2, [pc, #120]	; (51d0 <cmd_status+0xe8>)
    5156:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    515a:	9300      	str	r3, [sp, #0]
    515c:	4628      	mov	r0, r5
    515e:	bf14      	ite	ne
    5160:	4643      	movne	r3, r8
    5162:	463b      	moveq	r3, r7
    5164:	2108      	movs	r1, #8
    5166:	f005 fa2d 	bl	a5c4 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    516a:	eba4 030b 	sub.w	r3, r4, fp
    516e:	9300      	str	r3, [sp, #0]
    5170:	4628      	mov	r0, r5
    5172:	465b      	mov	r3, fp
    5174:	4a17      	ldr	r2, [pc, #92]	; (51d4 <cmd_status+0xec>)
    5176:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    5178:	eba4 040a 	sub.w	r4, r4, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
    517c:	f005 fa22 	bl	a5c4 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
    5180:	4653      	mov	r3, sl
    5182:	4628      	mov	r0, r5
    5184:	4a14      	ldr	r2, [pc, #80]	; (51d8 <cmd_status+0xf0>)
    5186:	9400      	str	r4, [sp, #0]
    5188:	2108      	movs	r1, #8
    518a:	f005 fa1b 	bl	a5c4 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
    518e:	4628      	mov	r0, r5
    5190:	4a12      	ldr	r2, [pc, #72]	; (51dc <cmd_status+0xf4>)
    5192:	2108      	movs	r1, #8
    5194:	f005 fa16 	bl	a5c4 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
    5198:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
    519c:	9300      	str	r3, [sp, #0]
    519e:	4628      	mov	r0, r5
    51a0:	4a0b      	ldr	r2, [pc, #44]	; (51d0 <cmd_status+0xe8>)
    51a2:	2e00      	cmp	r6, #0
    51a4:	bf14      	ite	ne
    51a6:	4643      	movne	r3, r8
    51a8:	463b      	moveq	r3, r7
    51aa:	2108      	movs	r1, #8
    51ac:	f005 fa0a 	bl	a5c4 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
    51b0:	2000      	movs	r0, #0
    51b2:	b003      	add	sp, #12
    51b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51b8:	20000dc0 	.word	0x20000dc0
    51bc:	20000dc8 	.word	0x20000dc8
    51c0:	0000efaf 	.word	0x0000efaf
    51c4:	0000dff2 	.word	0x0000dff2
    51c8:	0000efaa 	.word	0x0000efaa
    51cc:	20001908 	.word	0x20001908
    51d0:	0000efba 	.word	0x0000efba
    51d4:	0000efd4 	.word	0x0000efd4
    51d8:	0000eff6 	.word	0x0000eff6
    51dc:	0000f017 	.word	0x0000f017

000051e0 <hfclk_stop>:
{
    51e0:	b510      	push	{r4, lr}
    51e2:	f007 fb34 	bl	c84e <z_impl_k_uptime_ticks>
    51e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    51ea:	fba0 0302 	umull	r0, r3, r0, r2
		hf_stop_tstamp = k_uptime_get();
    51ee:	4c07      	ldr	r4, [pc, #28]	; (520c <hfclk_stop+0x2c>)
    51f0:	fb02 3101 	mla	r1, r2, r1, r3
    51f4:	0bc0      	lsrs	r0, r0, #15
    51f6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    51fa:	0bc9      	lsrs	r1, r1, #15
    51fc:	e9c4 0100 	strd	r0, r1, [r4]
}
    5200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5204:	2001      	movs	r0, #1
    5206:	f001 bdc5 	b.w	6d94 <nrfx_clock_stop>
    520a:	bf00      	nop
    520c:	20000dc8 	.word	0x20000dc8

00005210 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5210:	4b08      	ldr	r3, [pc, #32]	; (5234 <generic_hfclk_stop+0x24>)
    5212:	f3bf 8f5b 	dmb	ish
    5216:	e853 2f00 	ldrex	r2, [r3]
    521a:	f022 0102 	bic.w	r1, r2, #2
    521e:	e843 1000 	strex	r0, r1, [r3]
    5222:	2800      	cmp	r0, #0
    5224:	d1f7      	bne.n	5216 <generic_hfclk_stop+0x6>
    5226:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    522a:	07d3      	lsls	r3, r2, #31
    522c:	d401      	bmi.n	5232 <generic_hfclk_stop+0x22>
	hfclk_stop();
    522e:	f7ff bfd7 	b.w	51e0 <hfclk_stop>
}
    5232:	4770      	bx	lr
    5234:	20001958 	.word	0x20001958

00005238 <z_nrf_clock_control_lf_on>:
{
    5238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    523c:	4939      	ldr	r1, [pc, #228]	; (5324 <z_nrf_clock_control_lf_on+0xec>)
    523e:	f3bf 8f5b 	dmb	ish
    5242:	4607      	mov	r7, r0
    5244:	2201      	movs	r2, #1
    5246:	e851 3f00 	ldrex	r3, [r1]
    524a:	e841 2000 	strex	r0, r2, [r1]
    524e:	2800      	cmp	r0, #0
    5250:	d1f9      	bne.n	5246 <z_nrf_clock_control_lf_on+0xe>
    5252:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5256:	b933      	cbnz	r3, 5266 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5258:	4933      	ldr	r1, [pc, #204]	; (5328 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    525a:	4834      	ldr	r0, [pc, #208]	; (532c <z_nrf_clock_control_lf_on+0xf4>)
    525c:	604b      	str	r3, [r1, #4]
    525e:	60cb      	str	r3, [r1, #12]
    5260:	608a      	str	r2, [r1, #8]
    5262:	f004 fa3b 	bl	96dc <onoff_request>
	switch (start_mode) {
    5266:	1e7b      	subs	r3, r7, #1
    5268:	2b01      	cmp	r3, #1
    526a:	d82f      	bhi.n	52cc <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    526c:	2f01      	cmp	r7, #1
    526e:	d107      	bne.n	5280 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5274:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5278:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    527c:	2b01      	cmp	r3, #1
    527e:	d025      	beq.n	52cc <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5280:	f007 f904 	bl	c48c <k_is_in_isr>
    5284:	4604      	mov	r4, r0
    5286:	b918      	cbnz	r0, 5290 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    5288:	4b29      	ldr	r3, [pc, #164]	; (5330 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    528a:	781b      	ldrb	r3, [r3, #0]
    528c:	2b00      	cmp	r3, #0
    528e:	d141      	bne.n	5314 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    5290:	f04f 0320 	mov.w	r3, #32
    5294:	f3ef 8611 	mrs	r6, BASEPRI
    5298:	f383 8812 	msr	BASEPRI_MAX, r3
    529c:	f3bf 8f6f 	isb	sy
    52a0:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    52a2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5334 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    52a6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    52aa:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    52ae:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    52b2:	03d2      	lsls	r2, r2, #15
    52b4:	d50c      	bpl.n	52d0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    52b6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    52ba:	2b01      	cmp	r3, #1
    52bc:	d001      	beq.n	52c2 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    52be:	2f01      	cmp	r7, #1
    52c0:	d106      	bne.n	52d0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    52c2:	b30c      	cbz	r4, 5308 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    52c4:	f386 8811 	msr	BASEPRI, r6
    52c8:	f3bf 8f6f 	isb	sy
}
    52cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    52d0:	b1ac      	cbz	r4, 52fe <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    52d2:	4630      	mov	r0, r6
    52d4:	f7fe ff72 	bl	41bc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    52d8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    52dc:	2b00      	cmp	r3, #0
    52de:	d1e4      	bne.n	52aa <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    52e0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    52e4:	2a00      	cmp	r2, #0
    52e6:	d0e0      	beq.n	52aa <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52e8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    52ec:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    52f0:	2301      	movs	r3, #1
    52f2:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    52f6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52fa:	60ab      	str	r3, [r5, #8]
}
    52fc:	e7d5      	b.n	52aa <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    52fe:	2100      	movs	r1, #0
    5300:	2021      	movs	r0, #33	; 0x21
    5302:	f003 fdc5 	bl	8e90 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5306:	e7e7      	b.n	52d8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    5308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    530c:	2202      	movs	r2, #2
    530e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5312:	e7db      	b.n	52cc <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    5314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5318:	2202      	movs	r2, #2
    531a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    531e:	4606      	mov	r6, r0
}
    5320:	e7bf      	b.n	52a2 <z_nrf_clock_control_lf_on+0x6a>
    5322:	bf00      	nop
    5324:	2000195c 	.word	0x2000195c
    5328:	200018f8 	.word	0x200018f8
    532c:	20001924 	.word	0x20001924
    5330:	20001f77 	.word	0x20001f77
    5334:	e000e100 	.word	0xe000e100

00005338 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    5338:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    533a:	4c04      	ldr	r4, [pc, #16]	; (534c <rtt_console_init+0x14>)
    533c:	4620      	mov	r0, r4
    533e:	f7fb faab 	bl	898 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    5342:	4620      	mov	r0, r4
    5344:	f7ff fd66 	bl	4e14 <__stdout_hook_install>

	return 0;
}
    5348:	2000      	movs	r0, #0
    534a:	bd10      	pop	{r4, pc}
    534c:	00005351 	.word	0x00005351

00005350 <rtt_console_out>:
{
    5350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5352:	4e14      	ldr	r6, [pc, #80]	; (53a4 <rtt_console_out+0x54>)
	char c = (char)character;
    5354:	f88d 0007 	strb.w	r0, [sp, #7]
{
    5358:	4604      	mov	r4, r0
	char c = (char)character;
    535a:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    535c:	f3ef 8711 	mrs	r7, BASEPRI
    5360:	f04f 0120 	mov.w	r1, #32
    5364:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    5368:	2201      	movs	r2, #1
    536a:	f10d 0107 	add.w	r1, sp, #7
    536e:	2000      	movs	r0, #0
    5370:	f002 fc68 	bl	7c44 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    5374:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    5378:	b120      	cbz	r0, 5384 <rtt_console_out+0x34>
			host_present = true;
    537a:	2301      	movs	r3, #1
    537c:	7033      	strb	r3, [r6, #0]
}
    537e:	4620      	mov	r0, r4
    5380:	b003      	add	sp, #12
    5382:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    5384:	7833      	ldrb	r3, [r6, #0]
    5386:	2b00      	cmp	r3, #0
    5388:	d0f9      	beq.n	537e <rtt_console_out+0x2e>
			if (max_cnt) {
    538a:	3d01      	subs	r5, #1
    538c:	d008      	beq.n	53a0 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    538e:	f007 f87d 	bl	c48c <k_is_in_isr>
    5392:	2800      	cmp	r0, #0
    5394:	d1e2      	bne.n	535c <rtt_console_out+0xc>
    5396:	2100      	movs	r1, #0
    5398:	2042      	movs	r0, #66	; 0x42
    539a:	f003 fd79 	bl	8e90 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    539e:	e7dd      	b.n	535c <rtt_console_out+0xc>
				host_present = false;
    53a0:	7035      	strb	r5, [r6, #0]
    53a2:	e7ec      	b.n	537e <rtt_console_out+0x2e>
    53a4:	20001b26 	.word	0x20001b26

000053a8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    53a8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    53aa:	4b08      	ldr	r3, [pc, #32]	; (53cc <uart_console_init+0x24>)
    53ac:	4808      	ldr	r0, [pc, #32]	; (53d0 <uart_console_init+0x28>)
    53ae:	6018      	str	r0, [r3, #0]
    53b0:	f007 f832 	bl	c418 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    53b4:	b138      	cbz	r0, 53c6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    53b6:	4807      	ldr	r0, [pc, #28]	; (53d4 <uart_console_init+0x2c>)
    53b8:	f7ff fd2c 	bl	4e14 <__stdout_hook_install>
	__printk_hook_install(console_out);
    53bc:	4805      	ldr	r0, [pc, #20]	; (53d4 <uart_console_init+0x2c>)
    53be:	f7fb fa6b 	bl	898 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    53c2:	2000      	movs	r0, #0
}
    53c4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    53c6:	f06f 0012 	mvn.w	r0, #18
    53ca:	e7fb      	b.n	53c4 <uart_console_init+0x1c>
    53cc:	20001960 	.word	0x20001960
    53d0:	0000cc4c 	.word	0x0000cc4c
    53d4:	000053d9 	.word	0x000053d9

000053d8 <console_out>:
	if ('\n' == c) {
    53d8:	280a      	cmp	r0, #10
{
    53da:	b538      	push	{r3, r4, r5, lr}
    53dc:	4d07      	ldr	r5, [pc, #28]	; (53fc <console_out+0x24>)
    53de:	4604      	mov	r4, r0
	if ('\n' == c) {
    53e0:	d104      	bne.n	53ec <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    53e2:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    53e4:	6883      	ldr	r3, [r0, #8]
    53e6:	210d      	movs	r1, #13
    53e8:	685b      	ldr	r3, [r3, #4]
    53ea:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    53ec:	6828      	ldr	r0, [r5, #0]
    53ee:	6883      	ldr	r3, [r0, #8]
    53f0:	b2e1      	uxtb	r1, r4
    53f2:	685b      	ldr	r3, [r3, #4]
    53f4:	4798      	blx	r3
}
    53f6:	4620      	mov	r0, r4
    53f8:	bd38      	pop	{r3, r4, r5, pc}
    53fa:	bf00      	nop
    53fc:	20001960 	.word	0x20001960

00005400 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5400:	b530      	push	{r4, r5, lr}
	return port->config;
    5402:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5404:	7b04      	ldrb	r4, [r0, #12]
    5406:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    540a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    540e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    5412:	b085      	sub	sp, #20
    5414:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    5418:	d104      	bne.n	5424 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    541a:	4628      	mov	r0, r5
    541c:	f001 ff58 	bl	72d0 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    5420:	2000      	movs	r0, #0
    5422:	e02e      	b.n	5482 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    5424:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5428:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    542c:	d12b      	bne.n	5486 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    542e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    5432:	bf0c      	ite	eq
    5434:	2304      	moveq	r3, #4
    5436:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    5438:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    543c:	6883      	ldr	r3, [r0, #8]
    543e:	fa23 f101 	lsr.w	r1, r3, r1
    5442:	07c9      	lsls	r1, r1, #31
    5444:	d42b      	bmi.n	549e <gpio_nrfx_pin_interrupt_configure+0x9e>
    5446:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    544a:	d128      	bne.n	549e <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    544c:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5450:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5454:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    545c:	07db      	lsls	r3, r3, #31
    545e:	d41e      	bmi.n	549e <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5460:	f10d 0407 	add.w	r4, sp, #7
    5464:	4621      	mov	r1, r4
    5466:	4628      	mov	r0, r5
    5468:	f001 fe9a 	bl	71a0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    546c:	4b14      	ldr	r3, [pc, #80]	; (54c0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    546e:	4298      	cmp	r0, r3
    5470:	d114      	bne.n	549c <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    5472:	4620      	mov	r0, r4
    5474:	f001 fee2 	bl	723c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5478:	4b12      	ldr	r3, [pc, #72]	; (54c4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    547a:	4298      	cmp	r0, r3
    547c:	d00e      	beq.n	549c <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    547e:	f06f 000b 	mvn.w	r0, #11
}
    5482:	b005      	add	sp, #20
    5484:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5486:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    548a:	d005      	beq.n	5498 <gpio_nrfx_pin_interrupt_configure+0x98>
    548c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    5490:	bf0c      	ite	eq
    5492:	2302      	moveq	r3, #2
    5494:	2301      	movne	r3, #1
    5496:	e7cf      	b.n	5438 <gpio_nrfx_pin_interrupt_configure+0x38>
    5498:	2303      	movs	r3, #3
    549a:	e7cd      	b.n	5438 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    549c:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    549e:	2300      	movs	r3, #0
    54a0:	4619      	mov	r1, r3
    54a2:	aa02      	add	r2, sp, #8
    54a4:	4628      	mov	r0, r5
    54a6:	f001 fd53 	bl	6f50 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    54aa:	4b06      	ldr	r3, [pc, #24]	; (54c4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    54ac:	4298      	cmp	r0, r3
    54ae:	d104      	bne.n	54ba <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    54b0:	2101      	movs	r1, #1
    54b2:	4628      	mov	r0, r5
    54b4:	f001 fec8 	bl	7248 <nrfx_gpiote_trigger_enable>
    54b8:	e7b2      	b.n	5420 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    54ba:	f06f 0004 	mvn.w	r0, #4
    54be:	e7e0      	b.n	5482 <gpio_nrfx_pin_interrupt_configure+0x82>
    54c0:	0bad0004 	.word	0x0bad0004
    54c4:	0bad0000 	.word	0x0bad0000

000054c8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    54c8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    54ca:	f001 fea7 	bl	721c <nrfx_gpiote_is_init>
    54ce:	4604      	mov	r4, r0
    54d0:	b968      	cbnz	r0, 54ee <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    54d2:	f001 fe7b 	bl	71cc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    54d6:	4b08      	ldr	r3, [pc, #32]	; (54f8 <gpio_nrfx_init+0x30>)
    54d8:	4298      	cmp	r0, r3
    54da:	d10a      	bne.n	54f2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    54dc:	4807      	ldr	r0, [pc, #28]	; (54fc <gpio_nrfx_init+0x34>)
    54de:	4621      	mov	r1, r4
    54e0:	f001 fe58 	bl	7194 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    54e4:	4622      	mov	r2, r4
    54e6:	2105      	movs	r1, #5
    54e8:	2006      	movs	r0, #6
    54ea:	f7fe ff11 	bl	4310 <z_arm_irq_priority_set>
		return 0;
    54ee:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    54f0:	bd10      	pop	{r4, pc}
		return -EIO;
    54f2:	f06f 0004 	mvn.w	r0, #4
    54f6:	e7fb      	b.n	54f0 <gpio_nrfx_init+0x28>
    54f8:	0bad0000 	.word	0x0bad0000
    54fc:	00005501 	.word	0x00005501

00005500 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5500:	0943      	lsrs	r3, r0, #5
{
    5502:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5504:	d110      	bne.n	5528 <nrfx_gpio_handler+0x28>
	return list->head;
    5506:	4b09      	ldr	r3, [pc, #36]	; (552c <nrfx_gpio_handler+0x2c>)
    5508:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    550a:	b169      	cbz	r1, 5528 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    550c:	2501      	movs	r5, #1
	return node->next;
    550e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5510:	4e07      	ldr	r6, [pc, #28]	; (5530 <nrfx_gpio_handler+0x30>)
    5512:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    5514:	688a      	ldr	r2, [r1, #8]
    5516:	402a      	ands	r2, r5
    5518:	d002      	beq.n	5520 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    551a:	684b      	ldr	r3, [r1, #4]
    551c:	4630      	mov	r0, r6
    551e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5520:	b114      	cbz	r4, 5528 <nrfx_gpio_handler+0x28>
    5522:	4621      	mov	r1, r4
    5524:	6824      	ldr	r4, [r4, #0]
    5526:	e7f5      	b.n	5514 <nrfx_gpio_handler+0x14>
}
    5528:	bd70      	pop	{r4, r5, r6, pc}
    552a:	bf00      	nop
    552c:	20001964 	.word	0x20001964
    5530:	0000cc34 	.word	0x0000cc34

00005534 <gpio_nrfx_pin_configure>:
{
    5534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    5538:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    553a:	7b3b      	ldrb	r3, [r7, #12]
    553c:	f001 051f 	and.w	r5, r1, #31
{
    5540:	b085      	sub	sp, #20
    5542:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5544:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    5548:	4614      	mov	r4, r2
    554a:	b9ca      	cbnz	r2, 5580 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    554c:	a902      	add	r1, sp, #8
    554e:	4628      	mov	r0, r5
    5550:	f001 fe26 	bl	71a0 <nrfx_gpiote_channel_get>
    5554:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    5556:	4628      	mov	r0, r5
    5558:	f001 fee2 	bl	7320 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    555c:	4b48      	ldr	r3, [pc, #288]	; (5680 <gpio_nrfx_pin_configure+0x14c>)
    555e:	4298      	cmp	r0, r3
    5560:	d004      	beq.n	556c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    5562:	f06f 0004 	mvn.w	r0, #4
}
    5566:	b005      	add	sp, #20
    5568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    556c:	4284      	cmp	r4, r0
    556e:	d105      	bne.n	557c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    5570:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5574:	f001 fe5c 	bl	7230 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5578:	42a0      	cmp	r0, r4
    557a:	d1f2      	bne.n	5562 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    557c:	2000      	movs	r0, #0
    557e:	e7f2      	b.n	5566 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5580:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    5584:	f10d 0103 	add.w	r1, sp, #3
    5588:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    558a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    558e:	f001 fe07 	bl	71a0 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5592:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    5594:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5596:	aa02      	add	r2, sp, #8
    5598:	4649      	mov	r1, r9
    559a:	4628      	mov	r0, r5
    559c:	f001 fcd8 	bl	6f50 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    55a0:	4b37      	ldr	r3, [pc, #220]	; (5680 <gpio_nrfx_pin_configure+0x14c>)
    55a2:	4298      	cmp	r0, r3
    55a4:	d002      	beq.n	55ac <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    55a6:	f06f 0015 	mvn.w	r0, #21
    55aa:	e7dc      	b.n	5566 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    55ac:	4580      	cmp	r8, r0
    55ae:	d103      	bne.n	55b8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    55b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    55b4:	f001 fe3c 	bl	7230 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    55b8:	05a3      	lsls	r3, r4, #22
    55ba:	d54e      	bpl.n	565a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    55bc:	4b31      	ldr	r3, [pc, #196]	; (5684 <gpio_nrfx_pin_configure+0x150>)
    55be:	4a32      	ldr	r2, [pc, #200]	; (5688 <gpio_nrfx_pin_configure+0x154>)
    55c0:	4023      	ands	r3, r4
    55c2:	4293      	cmp	r3, r2
    55c4:	d03a      	beq.n	563c <gpio_nrfx_pin_configure+0x108>
    55c6:	d80c      	bhi.n	55e2 <gpio_nrfx_pin_configure+0xae>
    55c8:	2b06      	cmp	r3, #6
    55ca:	d014      	beq.n	55f6 <gpio_nrfx_pin_configure+0xc2>
    55cc:	d804      	bhi.n	55d8 <gpio_nrfx_pin_configure+0xa4>
    55ce:	b193      	cbz	r3, 55f6 <gpio_nrfx_pin_configure+0xc2>
    55d0:	2b02      	cmp	r3, #2
    55d2:	d1e8      	bne.n	55a6 <gpio_nrfx_pin_configure+0x72>
    55d4:	2304      	movs	r3, #4
    55d6:	e00e      	b.n	55f6 <gpio_nrfx_pin_configure+0xc2>
    55d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    55dc:	d1e3      	bne.n	55a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    55de:	2301      	movs	r3, #1
    55e0:	e009      	b.n	55f6 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    55e2:	4a2a      	ldr	r2, [pc, #168]	; (568c <gpio_nrfx_pin_configure+0x158>)
    55e4:	4293      	cmp	r3, r2
    55e6:	d02b      	beq.n	5640 <gpio_nrfx_pin_configure+0x10c>
    55e8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    55ec:	d02a      	beq.n	5644 <gpio_nrfx_pin_configure+0x110>
    55ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    55f2:	d1d8      	bne.n	55a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    55f4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    55f6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    55fa:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    55fe:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    5602:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5604:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    5608:	bf54      	ite	pl
    560a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    560e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5610:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    5612:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5616:	d517      	bpl.n	5648 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	2101      	movs	r1, #1
    561c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    5620:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5624:	2200      	movs	r2, #0
    5626:	a901      	add	r1, sp, #4
    5628:	4628      	mov	r0, r5
    562a:	f001 fd3b 	bl	70a4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    562e:	4b14      	ldr	r3, [pc, #80]	; (5680 <gpio_nrfx_pin_configure+0x14c>)
    5630:	4298      	cmp	r0, r3
    5632:	bf14      	ite	ne
    5634:	f06f 0015 	mvnne.w	r0, #21
    5638:	2000      	moveq	r0, #0
    563a:	e794      	b.n	5566 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    563c:	2307      	movs	r3, #7
    563e:	e7da      	b.n	55f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    5640:	2305      	movs	r3, #5
    5642:	e7d8      	b.n	55f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    5644:	2303      	movs	r3, #3
    5646:	e7d6      	b.n	55f6 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5648:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    564a:	bf41      	itttt	mi
    564c:	687b      	ldrmi	r3, [r7, #4]
    564e:	2101      	movmi	r1, #1
    5650:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    5654:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    5658:	e7e4      	b.n	5624 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    565a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    565c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    5660:	bf54      	ite	pl
    5662:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    5666:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5668:	461a      	mov	r2, r3
    566a:	a901      	add	r1, sp, #4
    566c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    566e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5672:	f001 fc6d 	bl	6f50 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5676:	4b02      	ldr	r3, [pc, #8]	; (5680 <gpio_nrfx_pin_configure+0x14c>)
    5678:	4298      	cmp	r0, r3
    567a:	f43f af7f 	beq.w	557c <gpio_nrfx_pin_configure+0x48>
    567e:	e792      	b.n	55a6 <gpio_nrfx_pin_configure+0x72>
    5680:	0bad0000 	.word	0x0bad0000
    5684:	00f00006 	.word	0x00f00006
    5688:	00100006 	.word	0x00100006
    568c:	00400002 	.word	0x00400002

00005690 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
    5690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct sx1509b_config *cfg = dev->config;
    5694:	6847      	ldr	r7, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    5696:	6905      	ldr	r5, [r0, #16]
{
    5698:	4606      	mov	r6, r0
    569a:	b086      	sub	sp, #24
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
    569c:	6878      	ldr	r0, [r7, #4]
    569e:	f002 fb8b 	bl	7db8 <z_impl_device_get_binding>
    56a2:	f8df 815c 	ldr.w	r8, [pc, #348]	; 5800 <sx1509b_init+0x170>
    56a6:	6068      	str	r0, [r5, #4]
    56a8:	4603      	mov	r3, r0
	if (!drv_data->i2c_master) {
    56aa:	b988      	cbnz	r0, 56d0 <sx1509b_init+0x40>
		LOG_ERR("%s: no bus %s", dev->name,
    56ac:	f8d8 2000 	ldr.w	r2, [r8]
    56b0:	0751      	lsls	r1, r2, #29
    56b2:	d00a      	beq.n	56ca <sx1509b_init+0x3a>
    56b4:	687a      	ldr	r2, [r7, #4]
    56b6:	9203      	str	r2, [sp, #12]
    56b8:	6832      	ldr	r2, [r6, #0]
    56ba:	9202      	str	r2, [sp, #8]
    56bc:	4a51      	ldr	r2, [pc, #324]	; (5804 <sx1509b_init+0x174>)
    56be:	4641      	mov	r1, r8
    56c0:	e9cd 0200 	strd	r0, r2, [sp]
    56c4:	2201      	movs	r2, #1
    56c6:	f006 f9d1 	bl	ba6c <z_log_msg2_runtime_create.constprop.0>
			cfg->i2c_master_dev_name);
		rc = -EINVAL;
    56ca:	f06f 0415 	mvn.w	r4, #21
    56ce:	e01e      	b.n	570e <sx1509b_init+0x7e>
	drv_data->irq_state = (struct sx1509b_irq_state) {
		.interrupt_mask = ALL_PINS,
	};
#endif

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    56d0:	893b      	ldrh	r3, [r7, #8]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    56d2:	f04f 0a7d 	mov.w	sl, #125	; 0x7d
    56d6:	f04f 0912 	mov.w	r9, #18

	return i2c_write(dev, tx_buf, 2, dev_addr);
    56da:	2202      	movs	r2, #2
    56dc:	a905      	add	r1, sp, #20
	uint8_t tx_buf[2] = {reg_addr, value};
    56de:	f88d a014 	strb.w	sl, [sp, #20]
    56e2:	f88d 9015 	strb.w	r9, [sp, #21]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    56e6:	f006 f9d1 	bl	ba8c <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
    56ea:	4604      	mov	r4, r0
    56ec:	b338      	cbz	r0, 573e <sx1509b_init+0xae>
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
    56ee:	f8d8 3000 	ldr.w	r3, [r8]
    56f2:	075a      	lsls	r2, r3, #29
    56f4:	d00b      	beq.n	570e <sx1509b_init+0x7e>
    56f6:	6833      	ldr	r3, [r6, #0]
    56f8:	9302      	str	r3, [sp, #8]
    56fa:	4b43      	ldr	r3, [pc, #268]	; (5808 <sx1509b_init+0x178>)
    56fc:	9301      	str	r3, [sp, #4]
    56fe:	2300      	movs	r3, #0
    5700:	9003      	str	r0, [sp, #12]
    5702:	9300      	str	r3, [sp, #0]
    5704:	2201      	movs	r2, #1
    5706:	4641      	mov	r1, r8
    5708:	4618      	mov	r0, r3
    570a:	f006 f9af 	bl	ba6c <z_log_msg2_runtime_create.constprop.0>
				SX1509B_REG_MISC_FREQ);
	}

out:
	if (rc != 0) {
		LOG_ERR("%s init failed: %d", dev->name, rc);
    570e:	f8d8 3000 	ldr.w	r3, [r8]
    5712:	075b      	lsls	r3, r3, #29
    5714:	d00b      	beq.n	572e <sx1509b_init+0x9e>
    5716:	6833      	ldr	r3, [r6, #0]
    5718:	9302      	str	r3, [sp, #8]
    571a:	4b3c      	ldr	r3, [pc, #240]	; (580c <sx1509b_init+0x17c>)
    571c:	9301      	str	r3, [sp, #4]
    571e:	2300      	movs	r3, #0
    5720:	4937      	ldr	r1, [pc, #220]	; (5800 <sx1509b_init+0x170>)
    5722:	9403      	str	r4, [sp, #12]
    5724:	9300      	str	r3, [sp, #0]
    5726:	2201      	movs	r2, #1
    5728:	4618      	mov	r0, r3
    572a:	f006 f99f 	bl	ba6c <z_log_msg2_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
    572e:	f105 0020 	add.w	r0, r5, #32
    5732:	f002 ff3b 	bl	85ac <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
    5736:	4620      	mov	r0, r4
    5738:	b006      	add	sp, #24
    573a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t tx_buf[2] = {reg_addr, value};
    573e:	2234      	movs	r2, #52	; 0x34
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    5740:	6868      	ldr	r0, [r5, #4]
    5742:	893b      	ldrh	r3, [r7, #8]
    5744:	f88d 2015 	strb.w	r2, [sp, #21]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5748:	a905      	add	r1, sp, #20
    574a:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    574c:	f88d a014 	strb.w	sl, [sp, #20]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5750:	f006 f99c 	bl	ba8c <i2c_write>
	if (rc != 0) {
    5754:	4604      	mov	r4, r0
    5756:	2800      	cmp	r0, #0
    5758:	d1d9      	bne.n	570e <sx1509b_init+0x7e>
	return z_impl_k_sleep(timeout);
    575a:	2100      	movs	r1, #0
    575c:	2063      	movs	r0, #99	; 0x63
    575e:	f003 fb97 	bl	8e90 <z_impl_k_sleep>
	drv_data->pin_state = (struct sx1509b_pin_state) {
    5762:	464a      	mov	r2, r9
    5764:	4621      	mov	r1, r4
    5766:	f105 0008 	add.w	r0, r5, #8
    576a:	f006 f861 	bl	b830 <memset>
    576e:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
    5772:	221e      	movs	r2, #30
    5774:	832b      	strh	r3, [r5, #24]
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    5776:	83ac      	strh	r4, [r5, #28]
    5778:	77ac      	strb	r4, [r5, #30]
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    577a:	6868      	ldr	r0, [r5, #4]
    577c:	893b      	ldrh	r3, [r7, #8]
    577e:	f88d 2014 	strb.w	r2, [sp, #20]
    5782:	2240      	movs	r2, #64	; 0x40
    5784:	f88d 2015 	strb.w	r2, [sp, #21]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5788:	a905      	add	r1, sp, #20
    578a:	2202      	movs	r2, #2
    578c:	f006 f97e 	bl	ba8c <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    5790:	46a1      	mov	r9, r4
	if (rc == 0) {
    5792:	4604      	mov	r4, r0
    5794:	2800      	cmp	r0, #0
    5796:	d1ba      	bne.n	570e <sx1509b_init+0x7e>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5798:	8b2b      	ldrh	r3, [r5, #24]
    579a:	8939      	ldrh	r1, [r7, #8]
    579c:	6868      	ldr	r0, [r5, #4]
    579e:	2210      	movs	r2, #16
    57a0:	f006 f981 	bl	baa6 <i2c_reg_write_word_be>
	if (rc == 0) {
    57a4:	4604      	mov	r4, r0
    57a6:	2800      	cmp	r0, #0
    57a8:	d1b1      	bne.n	570e <sx1509b_init+0x7e>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    57aa:	8aeb      	ldrh	r3, [r5, #22]
    57ac:	8939      	ldrh	r1, [r7, #8]
    57ae:	6868      	ldr	r0, [r5, #4]
    57b0:	220e      	movs	r2, #14
    57b2:	f006 f978 	bl	baa6 <i2c_reg_write_word_be>
	if (rc == 0) {
    57b6:	4604      	mov	r4, r0
    57b8:	2800      	cmp	r0, #0
    57ba:	d1a8      	bne.n	570e <sx1509b_init+0x7e>
	uint8_t tx_buf[3] = { reg_addr, value };
    57bc:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
    57be:	6868      	ldr	r0, [r5, #4]
    57c0:	893b      	ldrh	r3, [r7, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
    57c2:	f88d 2014 	strb.w	r2, [sp, #20]
    57c6:	2298      	movs	r2, #152	; 0x98
    57c8:	f88d 2015 	strb.w	r2, [sp, #21]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    57cc:	a905      	add	r1, sp, #20
    57ce:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
    57d0:	f88d 9016 	strb.w	r9, [sp, #22]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    57d4:	f006 f95a 	bl	ba8c <i2c_write>
	if (rc != 0) {
    57d8:	4604      	mov	r4, r0
    57da:	2800      	cmp	r0, #0
    57dc:	d197      	bne.n	570e <sx1509b_init+0x7e>
		LOG_INF("%s init ok", dev->name);
    57de:	f8d8 3000 	ldr.w	r3, [r8]
    57e2:	f003 0307 	and.w	r3, r3, #7
    57e6:	2b02      	cmp	r3, #2
    57e8:	d9a1      	bls.n	572e <sx1509b_init+0x9e>
    57ea:	6833      	ldr	r3, [r6, #0]
    57ec:	9302      	str	r3, [sp, #8]
    57ee:	4b08      	ldr	r3, [pc, #32]	; (5810 <sx1509b_init+0x180>)
    57f0:	2203      	movs	r2, #3
    57f2:	e9cd 0300 	strd	r0, r3, [sp]
    57f6:	4641      	mov	r1, r8
    57f8:	4603      	mov	r3, r0
    57fa:	f006 f937 	bl	ba6c <z_log_msg2_runtime_create.constprop.0>
    57fe:	e796      	b.n	572e <sx1509b_init+0x9e>
    5800:	20000298 	.word	0x20000298
    5804:	0000f065 	.word	0x0000f065
    5808:	0000f073 	.word	0x0000f073
    580c:	0000f08c 	.word	0x0000f08c
    5810:	0000f09f 	.word	0x0000f09f

00005814 <device_name_get>:
static void device_name_get(size_t idx, struct shell_static_entry *entry);

SHELL_DYNAMIC_CMD_CREATE(dsub_device_name, device_name_get);

static void device_name_get(size_t idx, struct shell_static_entry *entry)
{
    5814:	b510      	push	{r4, lr}
    5816:	460c      	mov	r4, r1
	const struct device *dev = shell_device_lookup(idx, I2C_DEVICE_PREFIX);
    5818:	4905      	ldr	r1, [pc, #20]	; (5830 <device_name_get+0x1c>)
    581a:	f005 f901 	bl	aa20 <shell_device_lookup>

	entry->syntax = (dev != NULL) ? dev->name : NULL;
    581e:	b100      	cbz	r0, 5822 <device_name_get+0xe>
    5820:	6800      	ldr	r0, [r0, #0]
    5822:	6020      	str	r0, [r4, #0]
	entry->handler = NULL;
    5824:	2300      	movs	r3, #0
	entry->help = NULL;
	entry->subcmd = NULL;
    5826:	e9c4 3301 	strd	r3, r3, [r4, #4]
	entry->handler = NULL;
    582a:	60e3      	str	r3, [r4, #12]
}
    582c:	bd10      	pop	{r4, pc}
    582e:	bf00      	nop
    5830:	0000f0bc 	.word	0x0000f0bc

00005834 <cmd_i2c_write_byte>:
{
    5834:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5838:	4605      	mov	r5, r0
    583a:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
    583c:	6850      	ldr	r0, [r2, #4]
    583e:	f002 fabb 	bl	7db8 <z_impl_device_get_binding>
	if (!dev) {
    5842:	4606      	mov	r6, r0
    5844:	b950      	cbnz	r0, 585c <cmd_i2c_write_byte+0x28>
		shell_error(shell, "I2C: Device driver %s not found.",
    5846:	4628      	mov	r0, r5
    5848:	6863      	ldr	r3, [r4, #4]
    584a:	4a1b      	ldr	r2, [pc, #108]	; (58b8 <cmd_i2c_write_byte+0x84>)
    584c:	2101      	movs	r1, #1
    584e:	f004 feb9 	bl	a5c4 <shell_fprintf>
		return -ENODEV;
    5852:	f06f 0012 	mvn.w	r0, #18
}
    5856:	b004      	add	sp, #16
    5858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    585c:	2210      	movs	r2, #16
    585e:	2100      	movs	r1, #0
    5860:	68a0      	ldr	r0, [r4, #8]
    5862:	f005 fe4d 	bl	b500 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    5866:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    5868:	4607      	mov	r7, r0
	reg_addr = strtol(argv[3], NULL, 16);
    586a:	2100      	movs	r1, #0
    586c:	68e0      	ldr	r0, [r4, #12]
    586e:	f005 fe47 	bl	b500 <strtol>
	out_byte = strtol(argv[4], NULL, 16);
    5872:	2210      	movs	r2, #16
	reg_addr = strtol(argv[3], NULL, 16);
    5874:	4680      	mov	r8, r0
	out_byte = strtol(argv[4], NULL, 16);
    5876:	2100      	movs	r1, #0
    5878:	6920      	ldr	r0, [r4, #16]
    587a:	f005 fe41 	bl	b500 <strtol>
	msg.len = num_bytes;
    587e:	2302      	movs	r3, #2
	if (i2c_reg_write_byte(dev, dev_addr, reg_addr, out_byte) < 0) {
    5880:	f88d 0001 	strb.w	r0, [sp, #1]
    5884:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    5886:	f88d 300c 	strb.w	r3, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
    588a:	2201      	movs	r2, #1
    588c:	b2bb      	uxth	r3, r7
    588e:	a901      	add	r1, sp, #4
    5890:	4630      	mov	r0, r6
    5892:	f88d 8000 	strb.w	r8, [sp]
	msg.buf = (uint8_t *)buf;
    5896:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
    589a:	f006 fa6e 	bl	bd7a <i2c_transfer>
    589e:	2800      	cmp	r0, #0
    58a0:	da08      	bge.n	58b4 <cmd_i2c_write_byte+0x80>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
    58a2:	4628      	mov	r0, r5
    58a4:	6863      	ldr	r3, [r4, #4]
    58a6:	4a05      	ldr	r2, [pc, #20]	; (58bc <cmd_i2c_write_byte+0x88>)
    58a8:	2101      	movs	r1, #1
    58aa:	f004 fe8b 	bl	a5c4 <shell_fprintf>
		return -EIO;
    58ae:	f06f 0004 	mvn.w	r0, #4
    58b2:	e7d0      	b.n	5856 <cmd_i2c_write_byte+0x22>
	return 0;
    58b4:	2000      	movs	r0, #0
    58b6:	e7ce      	b.n	5856 <cmd_i2c_write_byte+0x22>
    58b8:	0000f0c1 	.word	0x0000f0c1
    58bc:	0000f0e3 	.word	0x0000f0e3

000058c0 <cmd_i2c_read>:
{
    58c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58c4:	4606      	mov	r6, r0
    58c6:	b08d      	sub	sp, #52	; 0x34
	dev = device_get_binding(argv[1]);
    58c8:	6850      	ldr	r0, [r2, #4]
{
    58ca:	460f      	mov	r7, r1
    58cc:	4614      	mov	r4, r2
    58ce:	f002 fa73 	bl	7db8 <z_impl_device_get_binding>
	if (!dev) {
    58d2:	4680      	mov	r8, r0
    58d4:	b950      	cbnz	r0, 58ec <cmd_i2c_read+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
    58d6:	4630      	mov	r0, r6
    58d8:	6863      	ldr	r3, [r4, #4]
    58da:	4a27      	ldr	r2, [pc, #156]	; (5978 <cmd_i2c_read+0xb8>)
    58dc:	2101      	movs	r1, #1
    58de:	f004 fe71 	bl	a5c4 <shell_fprintf>
		return -ENODEV;
    58e2:	f06f 0012 	mvn.w	r0, #18
}
    58e6:	b00d      	add	sp, #52	; 0x34
    58e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    58ec:	2210      	movs	r2, #16
    58ee:	2100      	movs	r1, #0
    58f0:	68a0      	ldr	r0, [r4, #8]
    58f2:	f005 fe05 	bl	b500 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    58f6:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    58f8:	4681      	mov	r9, r0
	reg_addr = strtol(argv[3], NULL, 16);
    58fa:	2100      	movs	r1, #0
    58fc:	68e0      	ldr	r0, [r4, #12]
    58fe:	f005 fdff 	bl	b500 <strtol>
	if (argc > 4) {
    5902:	2f04      	cmp	r7, #4
	reg_addr = strtol(argv[3], NULL, 16);
    5904:	4605      	mov	r5, r0
	if (argc > 4) {
    5906:	d92d      	bls.n	5964 <cmd_i2c_read+0xa4>
		num_bytes = strtol(argv[4], NULL, 16);
    5908:	6920      	ldr	r0, [r4, #16]
    590a:	2210      	movs	r2, #16
    590c:	2100      	movs	r1, #0
    590e:	f005 fdf7 	bl	b500 <strtol>
		if (num_bytes > MAX_I2C_BYTES)
    5912:	2810      	cmp	r0, #16
    5914:	bfa8      	it	ge
    5916:	2010      	movge	r0, #16
    5918:	4607      	mov	r7, r0
	msg[0].buf = (uint8_t *)write_buf;
    591a:	f10d 0307 	add.w	r3, sp, #7
    591e:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5920:	2307      	movs	r3, #7
	if (i2c_burst_read(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
    5922:	f88d 5007 	strb.w	r5, [sp, #7]
    5926:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	msg[0].flags = I2C_MSG_WRITE;
    592a:	2500      	movs	r5, #0
	msg[0].len = num_write;
    592c:	f04f 0b01 	mov.w	fp, #1
	msg[1].buf = (uint8_t *)read_buf;
    5930:	f10d 0a08 	add.w	sl, sp, #8
	return i2c_transfer(dev, msg, 2, addr);
    5934:	fa1f f389 	uxth.w	r3, r9
    5938:	2202      	movs	r2, #2
    593a:	a906      	add	r1, sp, #24
    593c:	4640      	mov	r0, r8
	msg[1].len = num_read;
    593e:	e9cd a709 	strd	sl, r7, [sp, #36]	; 0x24
	msg[0].len = num_write;
    5942:	f8cd b01c 	str.w	fp, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
    5946:	f88d 5020 	strb.w	r5, [sp, #32]
	return i2c_transfer(dev, msg, 2, addr);
    594a:	f006 fa16 	bl	bd7a <i2c_transfer>
    594e:	42a8      	cmp	r0, r5
    5950:	da0a      	bge.n	5968 <cmd_i2c_read+0xa8>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
    5952:	4630      	mov	r0, r6
    5954:	6863      	ldr	r3, [r4, #4]
    5956:	4a09      	ldr	r2, [pc, #36]	; (597c <cmd_i2c_read+0xbc>)
    5958:	4659      	mov	r1, fp
    595a:	f004 fe33 	bl	a5c4 <shell_fprintf>
		return -EIO;
    595e:	f06f 0004 	mvn.w	r0, #4
    5962:	e7c0      	b.n	58e6 <cmd_i2c_read+0x26>
		num_bytes = MAX_I2C_BYTES;
    5964:	2710      	movs	r7, #16
    5966:	e7d8      	b.n	591a <cmd_i2c_read+0x5a>
	shell_hexdump(shell, buf, num_bytes);
    5968:	4630      	mov	r0, r6
    596a:	463a      	mov	r2, r7
    596c:	4651      	mov	r1, sl
    596e:	f004 fe36 	bl	a5de <shell_hexdump>
	return 0;
    5972:	4628      	mov	r0, r5
    5974:	e7b7      	b.n	58e6 <cmd_i2c_read+0x26>
    5976:	bf00      	nop
    5978:	0000f0c1 	.word	0x0000f0c1
    597c:	0000f102 	.word	0x0000f102

00005980 <cmd_i2c_scan>:
{
    5980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5984:	4604      	mov	r4, r0
    5986:	b087      	sub	sp, #28
	dev = device_get_binding(argv[1]);
    5988:	6850      	ldr	r0, [r2, #4]
{
    598a:	4617      	mov	r7, r2
    598c:	f002 fa14 	bl	7db8 <z_impl_device_get_binding>
	if (!dev) {
    5990:	4681      	mov	r9, r0
    5992:	b950      	cbnz	r0, 59aa <cmd_i2c_scan+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
    5994:	4620      	mov	r0, r4
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	4a2a      	ldr	r2, [pc, #168]	; (5a44 <cmd_i2c_scan+0xc4>)
    599a:	2101      	movs	r1, #1
    599c:	f004 fe12 	bl	a5c4 <shell_fprintf>
		return -ENODEV;
    59a0:	f06f 0012 	mvn.w	r0, #18
}
    59a4:	b007      	add	sp, #28
    59a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	shell_print(shell,
    59aa:	4a27      	ldr	r2, [pc, #156]	; (5a48 <cmd_i2c_scan+0xc8>)
    59ac:	2108      	movs	r1, #8
    59ae:	4620      	mov	r0, r4
    59b0:	f004 fe08 	bl	a5c4 <shell_fprintf>
    59b4:	f04f 0800 	mov.w	r8, #0
	uint8_t cnt = 0, first = 0x04, last = 0x77;
    59b8:	4646      	mov	r6, r8
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
    59ba:	4a24      	ldr	r2, [pc, #144]	; (5a4c <cmd_i2c_scan+0xcc>)
				shell_fprintf(shell, SHELL_NORMAL,
    59bc:	f8df a090 	ldr.w	sl, [pc, #144]	; 5a50 <cmd_i2c_scan+0xd0>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
    59c0:	f8df b090 	ldr.w	fp, [pc, #144]	; 5a54 <cmd_i2c_scan+0xd4>
		shell_fprintf(shell, SHELL_NORMAL, "%02x: ", i);
    59c4:	4643      	mov	r3, r8
    59c6:	2108      	movs	r1, #8
    59c8:	4620      	mov	r0, r4
    59ca:	f004 fdfb 	bl	a5c4 <shell_fprintf>
    59ce:	4645      	mov	r5, r8
			if (i + j < first || i + j > last) {
    59d0:	1f2b      	subs	r3, r5, #4
    59d2:	2b73      	cmp	r3, #115	; 0x73
    59d4:	d907      	bls.n	59e6 <cmd_i2c_scan+0x66>
				shell_fprintf(shell, SHELL_NORMAL, "   ");
    59d6:	465a      	mov	r2, fp
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
    59d8:	2108      	movs	r1, #8
    59da:	4620      	mov	r0, r4
    59dc:	f004 fdf2 	bl	a5c4 <shell_fprintf>
    59e0:	e018      	b.n	5a14 <cmd_i2c_scan+0x94>
    59e2:	46a8      	mov	r8, r5
    59e4:	e7e9      	b.n	59ba <cmd_i2c_scan+0x3a>
			msgs[0].buf = &dst;
    59e6:	f10d 030b 	add.w	r3, sp, #11
    59ea:	9303      	str	r3, [sp, #12]
			msgs[0].len = 0U;
    59ec:	2300      	movs	r3, #0
    59ee:	9304      	str	r3, [sp, #16]
			msgs[0].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    59f0:	2302      	movs	r3, #2
    59f2:	f88d 3014 	strb.w	r3, [sp, #20]
			if (i2c_transfer(dev, &msgs[0], 1, i + j) == 0) {
    59f6:	2201      	movs	r2, #1
    59f8:	b2ab      	uxth	r3, r5
    59fa:	a903      	add	r1, sp, #12
    59fc:	4648      	mov	r0, r9
    59fe:	f006 f9bc 	bl	bd7a <i2c_transfer>
    5a02:	b9e8      	cbnz	r0, 5a40 <cmd_i2c_scan+0xc0>
				shell_fprintf(shell, SHELL_NORMAL,
    5a04:	462b      	mov	r3, r5
    5a06:	4652      	mov	r2, sl
    5a08:	2108      	movs	r1, #8
    5a0a:	4620      	mov	r0, r4
    5a0c:	f004 fdda 	bl	a5c4 <shell_fprintf>
				++cnt;
    5a10:	3601      	adds	r6, #1
    5a12:	b2f6      	uxtb	r6, r6
		for (uint8_t j = 0; j < 16; j++) {
    5a14:	3501      	adds	r5, #1
    5a16:	f108 0310 	add.w	r3, r8, #16
    5a1a:	429d      	cmp	r5, r3
    5a1c:	d1d8      	bne.n	59d0 <cmd_i2c_scan+0x50>
		shell_print(shell, "");
    5a1e:	4a0e      	ldr	r2, [pc, #56]	; (5a58 <cmd_i2c_scan+0xd8>)
    5a20:	2108      	movs	r1, #8
    5a22:	4620      	mov	r0, r4
    5a24:	f004 fdce 	bl	a5c4 <shell_fprintf>
	for (uint8_t i = 0; i <= last; i += 16) {
    5a28:	2d80      	cmp	r5, #128	; 0x80
    5a2a:	d1da      	bne.n	59e2 <cmd_i2c_scan+0x62>
	shell_print(shell, "%u devices found on %s",
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	9300      	str	r3, [sp, #0]
    5a30:	4620      	mov	r0, r4
    5a32:	4a0a      	ldr	r2, [pc, #40]	; (5a5c <cmd_i2c_scan+0xdc>)
    5a34:	4633      	mov	r3, r6
    5a36:	2108      	movs	r1, #8
    5a38:	f004 fdc4 	bl	a5c4 <shell_fprintf>
	return 0;
    5a3c:	2000      	movs	r0, #0
    5a3e:	e7b1      	b.n	59a4 <cmd_i2c_scan+0x24>
				shell_fprintf(shell, SHELL_NORMAL, "-- ");
    5a40:	4a07      	ldr	r2, [pc, #28]	; (5a60 <cmd_i2c_scan+0xe0>)
    5a42:	e7c9      	b.n	59d8 <cmd_i2c_scan+0x58>
    5a44:	0000f0c1 	.word	0x0000f0c1
    5a48:	0000f122 	.word	0x0000f122
    5a4c:	0000f157 	.word	0x0000f157
    5a50:	0000daba 	.word	0x0000daba
    5a54:	0000dac0 	.word	0x0000dac0
    5a58:	0000dff1 	.word	0x0000dff1
    5a5c:	0000f162 	.word	0x0000f162
    5a60:	0000f15e 	.word	0x0000f15e

00005a64 <cmd_i2c_recover>:
{
    5a64:	b538      	push	{r3, r4, r5, lr}
    5a66:	4605      	mov	r5, r0
    5a68:	4614      	mov	r4, r2
	dev = device_get_binding(argv[1]);
    5a6a:	6850      	ldr	r0, [r2, #4]
    5a6c:	f002 f9a4 	bl	7db8 <z_impl_device_get_binding>
	if (!dev) {
    5a70:	b948      	cbnz	r0, 5a86 <cmd_i2c_recover+0x22>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
    5a72:	6863      	ldr	r3, [r4, #4]
    5a74:	4a0c      	ldr	r2, [pc, #48]	; (5aa8 <cmd_i2c_recover+0x44>)
    5a76:	2101      	movs	r1, #1
    5a78:	4628      	mov	r0, r5
    5a7a:	f004 fda3 	bl	a5c4 <shell_fprintf>
    5a7e:	f06f 0412 	mvn.w	r4, #18
}
    5a82:	4620      	mov	r0, r4
    5a84:	bd38      	pop	{r3, r4, r5, pc}
	if (api->recover_bus == NULL) {
    5a86:	6883      	ldr	r3, [r0, #8]
    5a88:	695b      	ldr	r3, [r3, #20]
    5a8a:	b153      	cbz	r3, 5aa2 <cmd_i2c_recover+0x3e>
	return api->recover_bus(dev);
    5a8c:	4798      	blx	r3
	if (err) {
    5a8e:	4604      	mov	r4, r0
    5a90:	2800      	cmp	r0, #0
    5a92:	d0f6      	beq.n	5a82 <cmd_i2c_recover+0x1e>
		shell_error(shell, "I2C: Bus recovery failed (err %d)", err);
    5a94:	4a05      	ldr	r2, [pc, #20]	; (5aac <cmd_i2c_recover+0x48>)
    5a96:	4623      	mov	r3, r4
    5a98:	2101      	movs	r1, #1
    5a9a:	4628      	mov	r0, r5
    5a9c:	f004 fd92 	bl	a5c4 <shell_fprintf>
		return err;
    5aa0:	e7ef      	b.n	5a82 <cmd_i2c_recover+0x1e>
		return -ENOSYS;
    5aa2:	f06f 0457 	mvn.w	r4, #87	; 0x57
    5aa6:	e7f5      	b.n	5a94 <cmd_i2c_recover+0x30>
    5aa8:	0000f0c1 	.word	0x0000f0c1
    5aac:	0000f17a 	.word	0x0000f17a

00005ab0 <cmd_i2c_read_byte>:
{
    5ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ab4:	4606      	mov	r6, r0
    5ab6:	b089      	sub	sp, #36	; 0x24
	dev = device_get_binding(argv[1]);
    5ab8:	6850      	ldr	r0, [r2, #4]
{
    5aba:	4614      	mov	r4, r2
    5abc:	f002 f97c 	bl	7db8 <z_impl_device_get_binding>
	if (!dev) {
    5ac0:	4607      	mov	r7, r0
    5ac2:	b950      	cbnz	r0, 5ada <cmd_i2c_read_byte+0x2a>
		shell_error(shell, "I2C: Device driver %s not found.",
    5ac4:	4630      	mov	r0, r6
    5ac6:	6863      	ldr	r3, [r4, #4]
    5ac8:	4a20      	ldr	r2, [pc, #128]	; (5b4c <cmd_i2c_read_byte+0x9c>)
    5aca:	2101      	movs	r1, #1
    5acc:	f004 fd7a 	bl	a5c4 <shell_fprintf>
		return -ENODEV;
    5ad0:	f06f 0012 	mvn.w	r0, #18
}
    5ad4:	b009      	add	sp, #36	; 0x24
    5ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    5ada:	2210      	movs	r2, #16
    5adc:	2100      	movs	r1, #0
    5ade:	68a0      	ldr	r0, [r4, #8]
    5ae0:	f005 fd0e 	bl	b500 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    5ae4:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    5ae6:	4681      	mov	r9, r0
	reg_addr = strtol(argv[3], NULL, 16);
    5ae8:	2100      	movs	r1, #0
    5aea:	68e0      	ldr	r0, [r4, #12]
    5aec:	f005 fd08 	bl	b500 <strtol>
	msg[0].buf = (uint8_t *)write_buf;
    5af0:	f10d 0307 	add.w	r3, sp, #7
    5af4:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    5af6:	f04f 0801 	mov.w	r8, #1
	msg[1].buf = (uint8_t *)read_buf;
    5afa:	f10d 0306 	add.w	r3, sp, #6
	msg[1].len = num_read;
    5afe:	e9cd 3805 	strd	r3, r8, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5b02:	2307      	movs	r3, #7
	if (i2c_reg_read_byte(dev, dev_addr, reg_addr, &out) < 0) {
    5b04:	f88d 0007 	strb.w	r0, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    5b08:	2500      	movs	r5, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5b0a:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
    5b0e:	2202      	movs	r2, #2
    5b10:	fa1f f389 	uxth.w	r3, r9
    5b14:	a902      	add	r1, sp, #8
    5b16:	4638      	mov	r0, r7
	msg[0].len = num_write;
    5b18:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    5b1c:	f88d 5010 	strb.w	r5, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
    5b20:	f006 f92b 	bl	bd7a <i2c_transfer>
    5b24:	42a8      	cmp	r0, r5
    5b26:	da08      	bge.n	5b3a <cmd_i2c_read_byte+0x8a>
		shell_error(shell, "Failed to read from device: %s", argv[1]);
    5b28:	4630      	mov	r0, r6
    5b2a:	6863      	ldr	r3, [r4, #4]
    5b2c:	4a08      	ldr	r2, [pc, #32]	; (5b50 <cmd_i2c_read_byte+0xa0>)
    5b2e:	4641      	mov	r1, r8
    5b30:	f004 fd48 	bl	a5c4 <shell_fprintf>
		return -EIO;
    5b34:	f06f 0004 	mvn.w	r0, #4
    5b38:	e7cc      	b.n	5ad4 <cmd_i2c_read_byte+0x24>
	shell_print(shell, "Output: 0x%x", out);
    5b3a:	4630      	mov	r0, r6
    5b3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5b40:	4a04      	ldr	r2, [pc, #16]	; (5b54 <cmd_i2c_read_byte+0xa4>)
    5b42:	2108      	movs	r1, #8
    5b44:	f004 fd3e 	bl	a5c4 <shell_fprintf>
	return 0;
    5b48:	4628      	mov	r0, r5
    5b4a:	e7c3      	b.n	5ad4 <cmd_i2c_read_byte+0x24>
    5b4c:	0000f0c1 	.word	0x0000f0c1
    5b50:	0000f102 	.word	0x0000f102
    5b54:	0000f19d 	.word	0x0000f19d

00005b58 <cmd_i2c_write>:
{
    5b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b5c:	4606      	mov	r6, r0
    5b5e:	b08f      	sub	sp, #60	; 0x3c
	dev = device_get_binding(argv[1]);
    5b60:	6850      	ldr	r0, [r2, #4]
{
    5b62:	460c      	mov	r4, r1
    5b64:	4615      	mov	r5, r2
    5b66:	f002 f927 	bl	7db8 <z_impl_device_get_binding>
	if (!dev) {
    5b6a:	4607      	mov	r7, r0
    5b6c:	b950      	cbnz	r0, 5b84 <cmd_i2c_write+0x2c>
		shell_error(shell, "I2C: Device driver %s not found.", argv[1]);
    5b6e:	4630      	mov	r0, r6
    5b70:	686b      	ldr	r3, [r5, #4]
    5b72:	4a29      	ldr	r2, [pc, #164]	; (5c18 <cmd_i2c_write+0xc0>)
    5b74:	2101      	movs	r1, #1
    5b76:	f004 fd25 	bl	a5c4 <shell_fprintf>
		return -ENODEV;
    5b7a:	f06f 0012 	mvn.w	r0, #18
}
    5b7e:	b00f      	add	sp, #60	; 0x3c
    5b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dev_addr = strtol(argv[2], NULL, 16);
    5b84:	2210      	movs	r2, #16
    5b86:	2100      	movs	r1, #0
    5b88:	68a8      	ldr	r0, [r5, #8]
    5b8a:	f005 fcb9 	bl	b500 <strtol>
	reg_addr = strtol(argv[3], NULL, 16);
    5b8e:	2210      	movs	r2, #16
	dev_addr = strtol(argv[2], NULL, 16);
    5b90:	4683      	mov	fp, r0
	reg_addr = strtol(argv[3], NULL, 16);
    5b92:	2100      	movs	r1, #0
    5b94:	68e8      	ldr	r0, [r5, #12]
    5b96:	f005 fcb3 	bl	b500 <strtol>
	if (num_bytes < 0) {
    5b9a:	3c04      	subs	r4, #4
	reg_addr = strtol(argv[3], NULL, 16);
    5b9c:	4681      	mov	r9, r0
	if (num_bytes < 0) {
    5b9e:	d501      	bpl.n	5ba4 <cmd_i2c_write+0x4c>
		return 0;
    5ba0:	2000      	movs	r0, #0
    5ba2:	e7ec      	b.n	5b7e <cmd_i2c_write+0x26>
	for (i = 0; i < num_bytes; i++) {
    5ba4:	2c10      	cmp	r4, #16
    5ba6:	f105 080c 	add.w	r8, r5, #12
    5baa:	bfa8      	it	ge
    5bac:	2410      	movge	r4, #16
    5bae:	f10d 0a10 	add.w	sl, sp, #16
    5bb2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    5bb6:	4598      	cmp	r8, r3
    5bb8:	d122      	bne.n	5c00 <cmd_i2c_write+0xa8>
	msg[0].buf = &start_addr;
    5bba:	f10d 030f 	add.w	r3, sp, #15
    5bbe:	9308      	str	r3, [sp, #32]
	msg[0].flags = I2C_MSG_WRITE;
    5bc0:	2300      	movs	r3, #0
    5bc2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	msg[1].buf = (uint8_t *)buf;
    5bc6:	ab04      	add	r3, sp, #16
	msg[1].len = num_bytes;
    5bc8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    5bcc:	2202      	movs	r2, #2
	msg[0].len = 1U;
    5bce:	f04f 0801 	mov.w	r8, #1
	return i2c_transfer(dev, msg, 2, dev_addr);
    5bd2:	fa1f f38b 	uxth.w	r3, fp
    5bd6:	a908      	add	r1, sp, #32
    5bd8:	4638      	mov	r0, r7
	if (i2c_burst_write(dev, dev_addr, reg_addr, buf, num_bytes) < 0) {
    5bda:	f88d 900f 	strb.w	r9, [sp, #15]
	msg[0].len = 1U;
    5bde:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    5be2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	return i2c_transfer(dev, msg, 2, dev_addr);
    5be6:	f006 f8c8 	bl	bd7a <i2c_transfer>
    5bea:	2800      	cmp	r0, #0
    5bec:	dad8      	bge.n	5ba0 <cmd_i2c_write+0x48>
		shell_error(shell, "Failed to write to device: %s", argv[1]);
    5bee:	4630      	mov	r0, r6
    5bf0:	686b      	ldr	r3, [r5, #4]
    5bf2:	4a0a      	ldr	r2, [pc, #40]	; (5c1c <cmd_i2c_write+0xc4>)
    5bf4:	4641      	mov	r1, r8
    5bf6:	f004 fce5 	bl	a5c4 <shell_fprintf>
		return -EIO;
    5bfa:	f06f 0004 	mvn.w	r0, #4
    5bfe:	e7be      	b.n	5b7e <cmd_i2c_write+0x26>
		buf[i] = (uint8_t)strtol(argv[4 + i], NULL, 16);
    5c00:	f858 0f04 	ldr.w	r0, [r8, #4]!
    5c04:	9301      	str	r3, [sp, #4]
    5c06:	2210      	movs	r2, #16
    5c08:	2100      	movs	r1, #0
    5c0a:	f005 fc79 	bl	b500 <strtol>
    5c0e:	9b01      	ldr	r3, [sp, #4]
    5c10:	f80a 0b01 	strb.w	r0, [sl], #1
    5c14:	e7cf      	b.n	5bb6 <cmd_i2c_write+0x5e>
    5c16:	bf00      	nop
    5c18:	0000f0c1 	.word	0x0000f0c1
    5c1c:	0000f0e3 	.word	0x0000f0e3

00005c20 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    5c20:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    5c22:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    5c24:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
    5c28:	f001 ff4a 	bl	7ac0 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    5c2c:	4b03      	ldr	r3, [pc, #12]	; (5c3c <i2c_nrfx_twim_recover_bus+0x1c>)
    5c2e:	4298      	cmp	r0, r3
}
    5c30:	bf14      	ite	ne
    5c32:	f06f 000f 	mvnne.w	r0, #15
    5c36:	2000      	moveq	r0, #0
    5c38:	bd08      	pop	{r3, pc}
    5c3a:	bf00      	nop
    5c3c:	0bad0000 	.word	0x0bad0000

00005c40 <init_twim>:
{
    5c40:	b530      	push	{r4, r5, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    5c42:	6905      	ldr	r5, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
    5c44:	4a11      	ldr	r2, [pc, #68]	; (5c8c <init_twim+0x4c>)
    5c46:	462b      	mov	r3, r5
{
    5c48:	b085      	sub	sp, #20
    5c4a:	4604      	mov	r4, r0
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
    5c4c:	f105 0130 	add.w	r1, r5, #48	; 0x30
    5c50:	6840      	ldr	r0, [r0, #4]
    5c52:	f001 fcf3 	bl	763c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    5c56:	4b0e      	ldr	r3, [pc, #56]	; (5c90 <init_twim+0x50>)
    5c58:	4298      	cmp	r0, r3
    5c5a:	d010      	beq.n	5c7e <init_twim+0x3e>
		LOG_ERR("Failed to initialize device: %s", dev->name);
    5c5c:	490d      	ldr	r1, [pc, #52]	; (5c94 <init_twim+0x54>)
    5c5e:	680b      	ldr	r3, [r1, #0]
    5c60:	075b      	lsls	r3, r3, #29
    5c62:	d009      	beq.n	5c78 <init_twim+0x38>
    5c64:	6823      	ldr	r3, [r4, #0]
    5c66:	9302      	str	r3, [sp, #8]
    5c68:	4b0b      	ldr	r3, [pc, #44]	; (5c98 <init_twim+0x58>)
    5c6a:	9301      	str	r3, [sp, #4]
    5c6c:	2300      	movs	r3, #0
    5c6e:	9300      	str	r3, [sp, #0]
    5c70:	2201      	movs	r2, #1
    5c72:	4618      	mov	r0, r3
    5c74:	f006 f887 	bl	bd86 <z_log_msg2_runtime_create.constprop.0>
    5c78:	f06f 0004 	mvn.w	r0, #4
    5c7c:	e003      	b.n	5c86 <init_twim+0x46>
	dev_data->twim_initialized = true;
    5c7e:	2301      	movs	r3, #1
    5c80:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	return 0;
    5c84:	2000      	movs	r0, #0
}
    5c86:	b005      	add	sp, #20
    5c88:	bd30      	pop	{r4, r5, pc}
    5c8a:	bf00      	nop
    5c8c:	00005d19 	.word	0x00005d19
    5c90:	0bad0000 	.word	0x0bad0000
    5c94:	20000264 	.word	0x20000264
    5c98:	0000f283 	.word	0x0000f283

00005c9c <i2c_nrfx_twim_configure>:
{
    5c9c:	b530      	push	{r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
    5c9e:	f011 0301 	ands.w	r3, r1, #1
{
    5ca2:	b089      	sub	sp, #36	; 0x24
    5ca4:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
    5ca6:	d113      	bne.n	5cd0 <i2c_nrfx_twim_configure+0x34>
	switch (I2C_SPEED_GET(i2c_config)) {
    5ca8:	f3c1 0142 	ubfx	r1, r1, #1, #3
    5cac:	2901      	cmp	r1, #1
    5cae:	d013      	beq.n	5cd8 <i2c_nrfx_twim_configure+0x3c>
    5cb0:	2902      	cmp	r1, #2
    5cb2:	d027      	beq.n	5d04 <i2c_nrfx_twim_configure+0x68>
		LOG_ERR("unsupported speed");
    5cb4:	4816      	ldr	r0, [pc, #88]	; (5d10 <i2c_nrfx_twim_configure+0x74>)
    5cb6:	6802      	ldr	r2, [r0, #0]
    5cb8:	0752      	lsls	r2, r2, #29
    5cba:	d009      	beq.n	5cd0 <i2c_nrfx_twim_configure+0x34>
    5cbc:	4a15      	ldr	r2, [pc, #84]	; (5d14 <i2c_nrfx_twim_configure+0x78>)
    5cbe:	9206      	str	r2, [sp, #24]
    5cc0:	2202      	movs	r2, #2
    5cc2:	9201      	str	r2, [sp, #4]
    5cc4:	9205      	str	r2, [sp, #20]
    5cc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5cca:	aa05      	add	r2, sp, #20
    5ccc:	f004 fa6c 	bl	a1a8 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
    5cd0:	f06f 0015 	mvn.w	r0, #21
}
    5cd4:	b009      	add	sp, #36	; 0x24
    5cd6:	bd30      	pop	{r4, r5, pc}
		frequency = NRF_TWIM_FREQ_100K;
    5cd8:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    5cdc:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
    5cde:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5ce0:	4293      	cmp	r3, r2
    5ce2:	d012      	beq.n	5d0a <i2c_nrfx_twim_configure+0x6e>
		dev_data->twim_config.frequency = frequency;
    5ce4:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
    5ce6:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    5cea:	b12b      	cbz	r3, 5cf8 <i2c_nrfx_twim_configure+0x5c>
		nrfx_twim_uninit(&dev_config->twim);
    5cec:	6860      	ldr	r0, [r4, #4]
    5cee:	f001 fd23 	bl	7738 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
    5cf2:	2300      	movs	r3, #0
    5cf4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
    5cf8:	4620      	mov	r0, r4
}
    5cfa:	b009      	add	sp, #36	; 0x24
    5cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return init_twim(dev);
    5d00:	f7ff bf9e 	b.w	5c40 <init_twim>
	switch (I2C_SPEED_GET(i2c_config)) {
    5d04:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
    5d08:	e7e8      	b.n	5cdc <i2c_nrfx_twim_configure+0x40>
	return 0;
    5d0a:	2000      	movs	r0, #0
    5d0c:	e7e2      	b.n	5cd4 <i2c_nrfx_twim_configure+0x38>
    5d0e:	bf00      	nop
    5d10:	20000264 	.word	0x20000264
    5d14:	0000f2a3 	.word	0x0000f2a3

00005d18 <event_handler>:
	switch (p_event->type) {
    5d18:	7803      	ldrb	r3, [r0, #0]
    5d1a:	2b01      	cmp	r3, #1
    5d1c:	d008      	beq.n	5d30 <event_handler+0x18>
    5d1e:	2b02      	cmp	r3, #2
    5d20:	d008      	beq.n	5d34 <event_handler+0x1c>
    5d22:	b94b      	cbnz	r3, 5d38 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    5d24:	4b05      	ldr	r3, [pc, #20]	; (5d3c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    5d26:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
    5d28:	f101 0018 	add.w	r0, r1, #24
    5d2c:	f002 bc3e 	b.w	85ac <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    5d30:	4b03      	ldr	r3, [pc, #12]	; (5d40 <event_handler+0x28>)
    5d32:	e7f8      	b.n	5d26 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    5d34:	4b03      	ldr	r3, [pc, #12]	; (5d44 <event_handler+0x2c>)
    5d36:	e7f6      	b.n	5d26 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    5d38:	4b03      	ldr	r3, [pc, #12]	; (5d48 <event_handler+0x30>)
    5d3a:	e7f4      	b.n	5d26 <event_handler+0xe>
    5d3c:	0bad0000 	.word	0x0bad0000
    5d40:	0bae0001 	.word	0x0bae0001
    5d44:	0bae0002 	.word	0x0bae0002
    5d48:	0bad0001 	.word	0x0bad0001

00005d4c <i2c_nrfx_twim_transfer>:
{
    5d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d50:	b099      	sub	sp, #100	; 0x64
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    5d52:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    5d56:	6906      	ldr	r6, [r0, #16]
{
    5d58:	af06      	add	r7, sp, #24
    5d5a:	461d      	mov	r5, r3
    5d5c:	613a      	str	r2, [r7, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    5d5e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    5d62:	617b      	str	r3, [r7, #20]
{
    5d64:	4680      	mov	r8, r0
    5d66:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    5d68:	2214      	movs	r2, #20
    5d6a:	2100      	movs	r1, #0
    5d6c:	f107 001c 	add.w	r0, r7, #28
	uint8_t *msg_buf = dev_data->msg_buf;
    5d70:	f8d6 b048 	ldr.w	fp, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
    5d74:	f005 fd5c 	bl	b830 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    5d78:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
    5d7c:	777d      	strb	r5, [r7, #29]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    5d7e:	b1d3      	cbz	r3, 5db6 <i2c_nrfx_twim_transfer+0x6a>
	return z_impl_k_sem_take(sem, timeout);
    5d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d88:	4630      	mov	r0, r6
    5d8a:	f002 fc35 	bl	85f8 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    5d8e:	f106 0318 	add.w	r3, r6, #24
    5d92:	60fb      	str	r3, [r7, #12]
    5d94:	2200      	movs	r2, #0
    5d96:	2300      	movs	r3, #0
    5d98:	f106 0018 	add.w	r0, r6, #24
    5d9c:	f002 fc2c 	bl	85f8 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    5da0:	4648      	mov	r0, r9
    5da2:	f001 fc9b 	bl	76dc <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    5da6:	f04f 0a00 	mov.w	sl, #0
	uint16_t msg_buf_used = 0;
    5daa:	4655      	mov	r5, sl
	for (size_t i = 0; i < num_msgs; i++) {
    5dac:	693b      	ldr	r3, [r7, #16]
    5dae:	459a      	cmp	sl, r3
    5db0:	d309      	bcc.n	5dc6 <i2c_nrfx_twim_transfer+0x7a>
    5db2:	2400      	movs	r4, #0
    5db4:	e06d      	b.n	5e92 <i2c_nrfx_twim_transfer+0x146>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    5db6:	4640      	mov	r0, r8
    5db8:	f7ff ff42 	bl	5c40 <init_twim>
    5dbc:	2800      	cmp	r0, #0
    5dbe:	dadf      	bge.n	5d80 <i2c_nrfx_twim_transfer+0x34>
		return -EIO;
    5dc0:	f06f 0404 	mvn.w	r4, #4
    5dc4:	e06b      	b.n	5e9e <i2c_nrfx_twim_transfer+0x152>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    5dc6:	7a21      	ldrb	r1, [r4, #8]
    5dc8:	070a      	lsls	r2, r1, #28
    5dca:	f100 80e9 	bmi.w	5fa0 <i2c_nrfx_twim_transfer+0x254>
				&& ((msgs[i].flags & I2C_MSG_READ)
    5dce:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
    5dd0:	f10a 0301 	add.w	r3, sl, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    5dd4:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
    5dd6:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
    5dd8:	d20a      	bcs.n	5df0 <i2c_nrfx_twim_transfer+0xa4>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    5dda:	078b      	lsls	r3, r1, #30
    5ddc:	d408      	bmi.n	5df0 <i2c_nrfx_twim_transfer+0xa4>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    5dde:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    5de0:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    5de4:	f002 0201 	and.w	r2, r2, #1
    5de8:	f003 0304 	and.w	r3, r3, #4
    5dec:	4313      	orrs	r3, r2
    5dee:	d01e      	beq.n	5e2e <i2c_nrfx_twim_transfer+0xe2>
		if (concat_next || (msg_buf_used != 0)) {
    5df0:	2d00      	cmp	r5, #0
    5df2:	d030      	beq.n	5e56 <i2c_nrfx_twim_transfer+0x10a>
				&& ((msgs[i].flags & I2C_MSG_READ)
    5df4:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    5df6:	6862      	ldr	r2, [r4, #4]
    5df8:	f8d7 c014 	ldr.w	ip, [r7, #20]
    5dfc:	18a8      	adds	r0, r5, r2
    5dfe:	4560      	cmp	r0, ip
    5e00:	d917      	bls.n	5e32 <i2c_nrfx_twim_transfer+0xe6>
				LOG_ERR("Need to use concatenation buffer and "
    5e02:	496a      	ldr	r1, [pc, #424]	; (5fac <i2c_nrfx_twim_transfer+0x260>)
    5e04:	680b      	ldr	r3, [r1, #0]
    5e06:	0758      	lsls	r0, r3, #29
    5e08:	d00e      	beq.n	5e28 <i2c_nrfx_twim_transfer+0xdc>
    5e0a:	f8d8 3000 	ldr.w	r3, [r8]
    5e0e:	9305      	str	r3, [sp, #20]
    5e10:	697b      	ldr	r3, [r7, #20]
    5e12:	9502      	str	r5, [sp, #8]
    5e14:	e9cd 2303 	strd	r2, r3, [sp, #12]
    5e18:	4b65      	ldr	r3, [pc, #404]	; (5fb0 <i2c_nrfx_twim_transfer+0x264>)
    5e1a:	9301      	str	r3, [sp, #4]
    5e1c:	2300      	movs	r3, #0
    5e1e:	9300      	str	r3, [sp, #0]
    5e20:	2201      	movs	r2, #1
    5e22:	4618      	mov	r0, r3
    5e24:	f005 ffaf 	bl	bd86 <z_log_msg2_runtime_create.constprop.0>
				ret = -ENOSPC;
    5e28:	f06f 041b 	mvn.w	r4, #27
    5e2c:	e031      	b.n	5e92 <i2c_nrfx_twim_transfer+0x146>
				&& ((msgs[i].flags & I2C_MSG_READ)
    5e2e:	2301      	movs	r3, #1
    5e30:	e7e1      	b.n	5df6 <i2c_nrfx_twim_transfer+0xaa>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    5e32:	07c9      	lsls	r1, r1, #31
    5e34:	d406      	bmi.n	5e44 <i2c_nrfx_twim_transfer+0xf8>
				memcpy(msg_buf + msg_buf_used,
    5e36:	6821      	ldr	r1, [r4, #0]
    5e38:	607b      	str	r3, [r7, #4]
    5e3a:	eb0b 0005 	add.w	r0, fp, r5
    5e3e:	f005 fcec 	bl	b81a <memcpy>
    5e42:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
    5e44:	6862      	ldr	r2, [r4, #4]
    5e46:	4415      	add	r5, r2
    5e48:	b2ad      	uxth	r5, r5
		if (concat_next) {
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d04e      	beq.n	5eec <i2c_nrfx_twim_transfer+0x1a0>
		bool concat_next = ((i + 1) < num_msgs)
    5e4e:	f8d7 a008 	ldr.w	sl, [r7, #8]
    5e52:	340c      	adds	r4, #12
    5e54:	e7aa      	b.n	5dac <i2c_nrfx_twim_transfer+0x60>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    5e56:	07cb      	lsls	r3, r1, #31
    5e58:	d526      	bpl.n	5ea8 <i2c_nrfx_twim_transfer+0x15c>
			cur_xfer.p_primary_buf = msgs[i].buf;
    5e5a:	6823      	ldr	r3, [r4, #0]
    5e5c:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
    5e5e:	6863      	ldr	r3, [r4, #4]
    5e60:	623b      	str	r3, [r7, #32]
    5e62:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    5e64:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    5e66:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    5e6a:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    5e6e:	773a      	strb	r2, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    5e70:	f107 011c 	add.w	r1, r7, #28
    5e74:	bf0c      	ite	eq
    5e76:	2220      	moveq	r2, #32
    5e78:	2200      	movne	r2, #0
    5e7a:	4648      	mov	r0, r9
    5e7c:	f001 fc92 	bl	77a4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    5e80:	4b4c      	ldr	r3, [pc, #304]	; (5fb4 <i2c_nrfx_twim_transfer+0x268>)
    5e82:	4298      	cmp	r0, r3
    5e84:	d038      	beq.n	5ef8 <i2c_nrfx_twim_transfer+0x1ac>
			if (res == NRFX_ERROR_BUSY) {
    5e86:	330b      	adds	r3, #11
    5e88:	4298      	cmp	r0, r3
    5e8a:	f000 808c 	beq.w	5fa6 <i2c_nrfx_twim_transfer+0x25a>
			ret = -EIO;
    5e8e:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
    5e92:	4648      	mov	r0, r9
    5e94:	f001 fc32 	bl	76fc <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    5e98:	4630      	mov	r0, r6
    5e9a:	f002 fb87 	bl	85ac <z_impl_k_sem_give>
}
    5e9e:	4620      	mov	r0, r4
    5ea0:	374c      	adds	r7, #76	; 0x4c
    5ea2:	46bd      	mov	sp, r7
    5ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
    5ea8:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5eaa:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    5eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5eb2:	d0d2      	beq.n	5e5a <i2c_nrfx_twim_transfer+0x10e>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    5eb4:	6862      	ldr	r2, [r4, #4]
    5eb6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    5eba:	4293      	cmp	r3, r2
    5ebc:	d212      	bcs.n	5ee4 <i2c_nrfx_twim_transfer+0x198>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    5ebe:	493b      	ldr	r1, [pc, #236]	; (5fac <i2c_nrfx_twim_transfer+0x260>)
    5ec0:	680b      	ldr	r3, [r1, #0]
    5ec2:	0758      	lsls	r0, r3, #29
    5ec4:	d00b      	beq.n	5ede <i2c_nrfx_twim_transfer+0x192>
    5ec6:	f8d8 3000 	ldr.w	r3, [r8]
    5eca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5ece:	4b3a      	ldr	r3, [pc, #232]	; (5fb8 <i2c_nrfx_twim_transfer+0x26c>)
    5ed0:	2201      	movs	r2, #1
    5ed2:	e9cd 5300 	strd	r5, r3, [sp]
    5ed6:	4628      	mov	r0, r5
    5ed8:	462b      	mov	r3, r5
    5eda:	f005 ff54 	bl	bd86 <z_log_msg2_runtime_create.constprop.0>
				ret = -EINVAL;
    5ede:	f06f 0415 	mvn.w	r4, #21
    5ee2:	e7d6      	b.n	5e92 <i2c_nrfx_twim_transfer+0x146>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    5ee4:	4658      	mov	r0, fp
    5ee6:	f005 fc98 	bl	b81a <memcpy>
			msg_buf_used = msgs[i].len;
    5eea:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    5eec:	2d00      	cmp	r5, #0
    5eee:	d0b4      	beq.n	5e5a <i2c_nrfx_twim_transfer+0x10e>
			cur_xfer.p_primary_buf = msg_buf;
    5ef0:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
    5ef4:	623d      	str	r5, [r7, #32]
    5ef6:	e7b5      	b.n	5e64 <i2c_nrfx_twim_transfer+0x118>
	return z_impl_k_sem_take(sem, timeout);
    5ef8:	2300      	movs	r3, #0
    5efa:	68f8      	ldr	r0, [r7, #12]
    5efc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5f00:	f002 fb7a 	bl	85f8 <z_impl_k_sem_take>
		if (ret != 0) {
    5f04:	4603      	mov	r3, r0
    5f06:	b1c0      	cbz	r0, 5f3a <i2c_nrfx_twim_transfer+0x1ee>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    5f08:	4828      	ldr	r0, [pc, #160]	; (5fac <i2c_nrfx_twim_transfer+0x260>)
    5f0a:	6803      	ldr	r3, [r0, #0]
    5f0c:	0759      	lsls	r1, r3, #29
    5f0e:	d00c      	beq.n	5f2a <i2c_nrfx_twim_transfer+0x1de>
    5f10:	4b2a      	ldr	r3, [pc, #168]	; (5fbc <i2c_nrfx_twim_transfer+0x270>)
    5f12:	e9c7 3a10 	strd	r3, sl, [r7, #64]	; 0x40
    5f16:	2303      	movs	r3, #3
    5f18:	61bb      	str	r3, [r7, #24]
    5f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    5f1c:	2300      	movs	r3, #0
    5f1e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    5f22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5f26:	f004 f93f 	bl	a1a8 <z_impl_z_log_msg2_static_create>
			nrfx_twim_disable(&dev_config->twim);
    5f2a:	4648      	mov	r0, r9
    5f2c:	f001 fbe6 	bl	76fc <nrfx_twim_disable>
    5f30:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
    5f34:	f001 fdc4 	bl	7ac0 <nrfx_twi_twim_bus_recover>
    5f38:	e7a9      	b.n	5e8e <i2c_nrfx_twim_transfer+0x142>
		res = dev_data->res;
    5f3a:	6c71      	ldr	r1, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
    5f3c:	4a1d      	ldr	r2, [pc, #116]	; (5fb4 <i2c_nrfx_twim_transfer+0x268>)
    5f3e:	4291      	cmp	r1, r2
    5f40:	d015      	beq.n	5f6e <i2c_nrfx_twim_transfer+0x222>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    5f42:	481a      	ldr	r0, [pc, #104]	; (5fac <i2c_nrfx_twim_transfer+0x260>)
    5f44:	6802      	ldr	r2, [r0, #0]
    5f46:	0752      	lsls	r2, r2, #29
    5f48:	d0a1      	beq.n	5e8e <i2c_nrfx_twim_transfer+0x142>
    5f4a:	4d1d      	ldr	r5, [pc, #116]	; (5fc0 <i2c_nrfx_twim_transfer+0x274>)
    5f4c:	466c      	mov	r4, sp
    5f4e:	b088      	sub	sp, #32
    5f50:	aa06      	add	r2, sp, #24
    5f52:	e9c2 5104 	strd	r5, r1, [r2, #16]
    5f56:	2104      	movs	r1, #4
    5f58:	f8c2 a018 	str.w	sl, [r2, #24]
    5f5c:	6339      	str	r1, [r7, #48]	; 0x30
    5f5e:	f842 1f0c 	str.w	r1, [r2, #12]!
    5f62:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    5f66:	f004 f91f 	bl	a1a8 <z_impl_z_log_msg2_static_create>
    5f6a:	46a5      	mov	sp, r4
    5f6c:	e78f      	b.n	5e8e <i2c_nrfx_twim_transfer+0x142>
		if ((msgs[i].flags & I2C_MSG_READ)
    5f6e:	7a23      	ldrb	r3, [r4, #8]
    5f70:	07db      	lsls	r3, r3, #31
    5f72:	d401      	bmi.n	5f78 <i2c_nrfx_twim_transfer+0x22c>
		msg_buf_used = 0;
    5f74:	2500      	movs	r5, #0
    5f76:	e76a      	b.n	5e4e <i2c_nrfx_twim_transfer+0x102>
		    && cur_xfer.p_primary_buf == msg_buf) {
    5f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f7a:	459b      	cmp	fp, r3
    5f7c:	d1fa      	bne.n	5f74 <i2c_nrfx_twim_transfer+0x228>
    5f7e:	46a2      	mov	sl, r4
    5f80:	e007      	b.n	5f92 <i2c_nrfx_twim_transfer+0x246>
				msg_buf_used -= msgs[j].len;
    5f82:	1aa9      	subs	r1, r5, r2
    5f84:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    5f86:	f8da 000c 	ldr.w	r0, [sl, #12]
    5f8a:	fa1b f181 	uxtah	r1, fp, r1
    5f8e:	f005 fc44 	bl	b81a <memcpy>
			while (msg_buf_used >= msgs[j].len) {
    5f92:	f8da 2004 	ldr.w	r2, [sl, #4]
    5f96:	4295      	cmp	r5, r2
    5f98:	f1aa 0a0c 	sub.w	sl, sl, #12
    5f9c:	d2f1      	bcs.n	5f82 <i2c_nrfx_twim_transfer+0x236>
    5f9e:	e7e9      	b.n	5f74 <i2c_nrfx_twim_transfer+0x228>
			ret = -ENOTSUP;
    5fa0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5fa4:	e775      	b.n	5e92 <i2c_nrfx_twim_transfer+0x146>
				ret = -EBUSY;
    5fa6:	f06f 040f 	mvn.w	r4, #15
    5faa:	e772      	b.n	5e92 <i2c_nrfx_twim_transfer+0x146>
    5fac:	20000264 	.word	0x20000264
    5fb0:	0000f2b5 	.word	0x0000f2b5
    5fb4:	0bad0000 	.word	0x0bad0000
    5fb8:	0000f345 	.word	0x0000f345
    5fbc:	0000f3ab 	.word	0x0000f3ab
    5fc0:	0000f3d5 	.word	0x0000f3d5

00005fc4 <common_init.isra.0>:
 *
 * @param gpiop where to store the GPIO device pointer
 *
 * @return negative on error, otherwise zero.
 */
static int common_init(const struct device *dev)
    5fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fc6:	4604      	mov	r4, r0
    5fc8:	b085      	sub	sp, #20
{
	const struct driver_config *cfg = dev->config;
	gpio_flags_t flags;

	if (!device_is_ready(cfg->enable.port)) {
    5fca:	68c0      	ldr	r0, [r0, #12]
    5fcc:	f006 fa24 	bl	c418 <z_device_is_ready>
    5fd0:	4603      	mov	r3, r0
    5fd2:	b978      	cbnz	r0, 5ff4 <common_init.isra.0+0x30>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
    5fd4:	491c      	ldr	r1, [pc, #112]	; (6048 <common_init.isra.0+0x84>)
    5fd6:	680a      	ldr	r2, [r1, #0]
    5fd8:	0755      	lsls	r5, r2, #29
    5fda:	d008      	beq.n	5fee <common_init.isra.0+0x2a>
    5fdc:	68e2      	ldr	r2, [r4, #12]
    5fde:	6812      	ldr	r2, [r2, #0]
    5fe0:	9202      	str	r2, [sp, #8]
    5fe2:	4a1a      	ldr	r2, [pc, #104]	; (604c <common_init.isra.0+0x88>)
    5fe4:	e9cd 0200 	strd	r0, r2, [sp]
    5fe8:	2201      	movs	r2, #1
    5fea:	f005 ff4f 	bl	be8c <z_log_msg2_runtime_create.constprop.0>
		return -ENODEV;
    5fee:	f06f 0412 	mvn.w	r4, #18
    5ff2:	e026      	b.n	6042 <common_init.isra.0+0x7e>
	}

	bool on = cfg->options & (OPTION_ALWAYS_ON | OPTION_BOOT_ON);
	uint32_t delay_us = 0;

	if (on) {
    5ff4:	7d25      	ldrb	r5, [r4, #20]
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
    5ff6:	7c63      	ldrb	r3, [r4, #17]
	return gpio_pin_configure(spec->port,
    5ff8:	68e0      	ldr	r0, [r4, #12]
    5ffa:	7c21      	ldrb	r1, [r4, #16]
    5ffc:	f015 0503 	ands.w	r5, r5, #3
		flags = GPIO_OUTPUT_ACTIVE;
    6000:	bf16      	itet	ne
    6002:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		delay_us = cfg->startup_delay_us;
	} else {
		flags = GPIO_OUTPUT_INACTIVE;
    6006:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
    600a:	6865      	ldrne	r5, [r4, #4]
    600c:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
    600e:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
    6010:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6014:	683c      	ldr	r4, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    6016:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    6018:	bf48      	it	mi
    601a:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    601e:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    6020:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6024:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    6026:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6028:	bf4c      	ite	mi
    602a:	4334      	orrmi	r4, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    602c:	43b4      	bicpl	r4, r6
    602e:	603c      	str	r4, [r7, #0]
	return api->pin_configure(port, pin, flags);
    6030:	f8dc 3000 	ldr.w	r3, [ip]
    6034:	4798      	blx	r3
	}

	int rc = gpio_pin_configure_dt(&cfg->enable, flags);

	if ((rc == 0) && (delay_us > 0)) {
    6036:	4604      	mov	r4, r0
    6038:	b918      	cbnz	r0, 6042 <common_init.isra.0+0x7e>
    603a:	b115      	cbz	r5, 6042 <common_init.isra.0+0x7e>
	z_impl_k_busy_wait(usec_to_wait);
    603c:	4628      	mov	r0, r5
    603e:	f006 fc08 	bl	c852 <z_impl_k_busy_wait>
		 */
		k_busy_wait(delay_us);
	}

	return rc;
}
    6042:	4620      	mov	r0, r4
    6044:	b005      	add	sp, #20
    6046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6048:	2000027c 	.word	0x2000027c
    604c:	0000f40e 	.word	0x0000f40e

00006050 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
    6050:	b530      	push	{r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
    6052:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
    6054:	4912      	ldr	r1, [pc, #72]	; (60a0 <regulator_fixed_init_onoff+0x50>)
{
    6056:	4604      	mov	r4, r0
	data->dev = dev;
    6058:	4628      	mov	r0, r5
{
    605a:	b085      	sub	sp, #20
	data->dev = dev;
    605c:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
    6060:	f003 fb29 	bl	96b6 <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
    6064:	490f      	ldr	r1, [pc, #60]	; (60a4 <regulator_fixed_init_onoff+0x54>)
    6066:	f105 0020 	add.w	r0, r5, #32
    606a:	f006 fa9e 	bl	c5aa <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
    606e:	6860      	ldr	r0, [r4, #4]
    6070:	f7ff ffa8 	bl	5fc4 <common_init.isra.0>
	if (rc >= 0) {
		rc = 0;
	}

	LOG_INF("%s onoff: %d", dev->name, rc);
    6074:	490c      	ldr	r1, [pc, #48]	; (60a8 <regulator_fixed_init_onoff+0x58>)
    6076:	680b      	ldr	r3, [r1, #0]
    6078:	f003 0307 	and.w	r3, r3, #7
    607c:	2b02      	cmp	r3, #2
    607e:	ea00 75e0 	and.w	r5, r0, r0, asr #31
    6082:	d90a      	bls.n	609a <regulator_fixed_init_onoff+0x4a>
    6084:	6823      	ldr	r3, [r4, #0]
    6086:	9302      	str	r3, [sp, #8]
    6088:	4b08      	ldr	r3, [pc, #32]	; (60ac <regulator_fixed_init_onoff+0x5c>)
    608a:	9301      	str	r3, [sp, #4]
    608c:	2300      	movs	r3, #0
    608e:	9503      	str	r5, [sp, #12]
    6090:	9300      	str	r3, [sp, #0]
    6092:	2203      	movs	r2, #3
    6094:	4618      	mov	r0, r3
    6096:	f005 fef9 	bl	be8c <z_log_msg2_runtime_create.constprop.0>

	return rc;
}
    609a:	4628      	mov	r0, r5
    609c:	b005      	add	sp, #20
    609e:	bd30      	pop	{r4, r5, pc}
    60a0:	0000d9a0 	.word	0x0000d9a0
    60a4:	0000bea9 	.word	0x0000bea9
    60a8:	2000027c 	.word	0x2000027c
    60ac:	0000f426 	.word	0x0000f426

000060b0 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
    60b0:	b530      	push	{r4, r5, lr}
    60b2:	4605      	mov	r5, r0
    60b4:	b085      	sub	sp, #20
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
    60b6:	6840      	ldr	r0, [r0, #4]
    60b8:	f7ff ff84 	bl	5fc4 <common_init.isra.0>
	__ASSERT(cfg->startup_delay_us == 0,
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
    60bc:	490a      	ldr	r1, [pc, #40]	; (60e8 <regulator_fixed_init_sync+0x38>)
    60be:	680b      	ldr	r3, [r1, #0]
    60c0:	f003 0307 	and.w	r3, r3, #7
    60c4:	2b02      	cmp	r3, #2
	int rc = common_init(dev);
    60c6:	4604      	mov	r4, r0
	LOG_INF("%s sync: %d", dev->name, rc);
    60c8:	d90a      	bls.n	60e0 <regulator_fixed_init_sync+0x30>
    60ca:	682b      	ldr	r3, [r5, #0]
    60cc:	9302      	str	r3, [sp, #8]
    60ce:	4b07      	ldr	r3, [pc, #28]	; (60ec <regulator_fixed_init_sync+0x3c>)
    60d0:	9301      	str	r3, [sp, #4]
    60d2:	2300      	movs	r3, #0
    60d4:	9003      	str	r0, [sp, #12]
    60d6:	9300      	str	r3, [sp, #0]
    60d8:	2203      	movs	r2, #3
    60da:	4618      	mov	r0, r3
    60dc:	f005 fed6 	bl	be8c <z_log_msg2_runtime_create.constprop.0>

	return rc;
}
    60e0:	4620      	mov	r0, r4
    60e2:	b005      	add	sp, #20
    60e4:	bd30      	pop	{r4, r5, pc}
    60e6:	bf00      	nop
    60e8:	2000027c 	.word	0x2000027c
    60ec:	0000f433 	.word	0x0000f433

000060f0 <finalize_transition>:
{
    60f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
    60f4:	1e1c      	subs	r4, r3, #0
{
    60f6:	4605      	mov	r5, r0
    60f8:	460f      	mov	r7, r1
    60fa:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
    60fc:	db10      	blt.n	6120 <finalize_transition+0x30>
    60fe:	b17a      	cbz	r2, 6120 <finalize_transition+0x30>
			return (uint32_t)((t * to_hz + off) / from_hz);
    6100:	ea4f 4952 	mov.w	r9, r2, lsr #17
    6104:	03d6      	lsls	r6, r2, #15
    6106:	2300      	movs	r3, #0
    6108:	4a14      	ldr	r2, [pc, #80]	; (615c <finalize_transition+0x6c>)
    610a:	4630      	mov	r0, r6
    610c:	4649      	mov	r1, r9
    610e:	f7f9 ffe5 	bl	dc <__aeabi_uldivmod>
		    || k_is_pre_kernel()
    6112:	b110      	cbz	r0, 611a <finalize_transition+0x2a>
	return !z_sys_post_kernel;
    6114:	4b12      	ldr	r3, [pc, #72]	; (6160 <finalize_transition+0x70>)
    6116:	781b      	ldrb	r3, [r3, #0]
    6118:	b943      	cbnz	r3, 612c <finalize_transition+0x3c>
    611a:	4640      	mov	r0, r8
    611c:	f006 fb99 	bl	c852 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
    6120:	4621      	mov	r1, r4
    6122:	1d28      	adds	r0, r5, #4
    6124:	463b      	mov	r3, r7
}
    6126:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
    612a:	4718      	bx	r3
			return ((t * to_hz + off) / from_hz);
    612c:	480d      	ldr	r0, [pc, #52]	; (6164 <finalize_transition+0x74>)
    612e:	4a0b      	ldr	r2, [pc, #44]	; (615c <finalize_transition+0x6c>)
			data->notify = notify;
    6130:	652f      	str	r7, [r5, #80]	; 0x50
    6132:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
    6134:	f04f 0303 	mov.w	r3, #3
    6138:	f149 0100 	adc.w	r1, r9, #0
    613c:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    6140:	2300      	movs	r3, #0
    6142:	f7f9 ffcb 	bl	dc <__aeabi_uldivmod>
    6146:	4602      	mov	r2, r0
    6148:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
    614a:	f105 0020 	add.w	r0, r5, #32
    614e:	f002 fbc3 	bl	88d8 <k_work_schedule>
			if (rc >= 0) {
    6152:	1e04      	subs	r4, r0, #0
    6154:	dbe4      	blt.n	6120 <finalize_transition+0x30>
}
    6156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    615a:	bf00      	nop
    615c:	000f4240 	.word	0x000f4240
    6160:	20001f77 	.word	0x20001f77
    6164:	000f423f 	.word	0x000f423f

00006168 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    6168:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    616a:	794b      	ldrb	r3, [r1, #5]
    616c:	2b01      	cmp	r3, #1
    616e:	d120      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6170:	798b      	ldrb	r3, [r1, #6]
    6172:	2b03      	cmp	r3, #3
    6174:	d11d      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    6176:	79cc      	ldrb	r4, [r1, #7]
    6178:	b10c      	cbz	r4, 617e <uarte_nrfx_configure+0x16>
    617a:	2c01      	cmp	r4, #1
    617c:	d119      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    617e:	790a      	ldrb	r2, [r1, #4]
    6180:	b112      	cbz	r2, 6188 <uarte_nrfx_configure+0x20>
    6182:	2a02      	cmp	r2, #2
    6184:	d115      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
    6186:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    6188:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    618a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    618c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    6190:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    6192:	d062      	beq.n	625a <uarte_nrfx_configure+0xf2>
    6194:	d82b      	bhi.n	61ee <uarte_nrfx_configure+0x86>
    6196:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    619a:	d061      	beq.n	6260 <uarte_nrfx_configure+0xf8>
    619c:	d814      	bhi.n	61c8 <uarte_nrfx_configure+0x60>
    619e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    61a2:	d05f      	beq.n	6264 <uarte_nrfx_configure+0xfc>
    61a4:	d808      	bhi.n	61b8 <uarte_nrfx_configure+0x50>
    61a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    61aa:	d05e      	beq.n	626a <uarte_nrfx_configure+0x102>
    61ac:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    61b0:	d05e      	beq.n	6270 <uarte_nrfx_configure+0x108>
    61b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    61b6:	e04f      	b.n	6258 <uarte_nrfx_configure+0xf0>
    61b8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    61bc:	d05b      	beq.n	6276 <uarte_nrfx_configure+0x10e>
    61be:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    61c2:	d1f6      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    61c4:	4b36      	ldr	r3, [pc, #216]	; (62a0 <uarte_nrfx_configure+0x138>)
    61c6:	e03c      	b.n	6242 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    61c8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    61cc:	d056      	beq.n	627c <uarte_nrfx_configure+0x114>
    61ce:	d807      	bhi.n	61e0 <uarte_nrfx_configure+0x78>
    61d0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    61d4:	d054      	beq.n	6280 <uarte_nrfx_configure+0x118>
    61d6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    61da:	d1ea      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    61dc:	4b31      	ldr	r3, [pc, #196]	; (62a4 <uarte_nrfx_configure+0x13c>)
    61de:	e030      	b.n	6242 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    61e0:	f647 2612 	movw	r6, #31250	; 0x7a12
    61e4:	42b3      	cmp	r3, r6
    61e6:	d1e4      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    61e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    61ec:	e029      	b.n	6242 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    61ee:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    61f2:	d047      	beq.n	6284 <uarte_nrfx_configure+0x11c>
    61f4:	d813      	bhi.n	621e <uarte_nrfx_configure+0xb6>
    61f6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    61fa:	d046      	beq.n	628a <uarte_nrfx_configure+0x122>
    61fc:	d809      	bhi.n	6212 <uarte_nrfx_configure+0xaa>
    61fe:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    6202:	42b3      	cmp	r3, r6
    6204:	d043      	beq.n	628e <uarte_nrfx_configure+0x126>
    6206:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    620a:	d1d2      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    620c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    6210:	e017      	b.n	6242 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    6212:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    6216:	d1cc      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    6218:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    621c:	e011      	b.n	6242 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    621e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    6222:	d037      	beq.n	6294 <uarte_nrfx_configure+0x12c>
    6224:	d808      	bhi.n	6238 <uarte_nrfx_configure+0xd0>
    6226:	4e20      	ldr	r6, [pc, #128]	; (62a8 <uarte_nrfx_configure+0x140>)
    6228:	42b3      	cmp	r3, r6
    622a:	d036      	beq.n	629a <uarte_nrfx_configure+0x132>
    622c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    6230:	d1bf      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    6232:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    6236:	e004      	b.n	6242 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    6238:	4e1c      	ldr	r6, [pc, #112]	; (62ac <uarte_nrfx_configure+0x144>)
    623a:	42b3      	cmp	r3, r6
    623c:	d1b9      	bne.n	61b2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    623e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    6242:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    6244:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    6248:	1d03      	adds	r3, r0, #4
    624a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    624c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    624e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    6252:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    6256:	2000      	movs	r0, #0
}
    6258:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    625a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    625e:	e7f0      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    6260:	4b13      	ldr	r3, [pc, #76]	; (62b0 <uarte_nrfx_configure+0x148>)
    6262:	e7ee      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    6264:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    6268:	e7eb      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    626a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    626e:	e7e8      	b.n	6242 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    6270:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    6274:	e7e5      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    6276:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    627a:	e7e2      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    627c:	4b0d      	ldr	r3, [pc, #52]	; (62b4 <uarte_nrfx_configure+0x14c>)
    627e:	e7e0      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    6280:	4b0d      	ldr	r3, [pc, #52]	; (62b8 <uarte_nrfx_configure+0x150>)
    6282:	e7de      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    6284:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    6288:	e7db      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    628a:	4b0c      	ldr	r3, [pc, #48]	; (62bc <uarte_nrfx_configure+0x154>)
    628c:	e7d9      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    628e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    6292:	e7d6      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    6294:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    6298:	e7d3      	b.n	6242 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    629a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    629e:	e7d0      	b.n	6242 <uarte_nrfx_configure+0xda>
    62a0:	0013b000 	.word	0x0013b000
    62a4:	004ea000 	.word	0x004ea000
    62a8:	0003d090 	.word	0x0003d090
    62ac:	000f4240 	.word	0x000f4240
    62b0:	00275000 	.word	0x00275000
    62b4:	0075c000 	.word	0x0075c000
    62b8:	003af000 	.word	0x003af000
    62bc:	013a9000 	.word	0x013a9000

000062c0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    62c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    62c2:	6906      	ldr	r6, [r0, #16]
{
    62c4:	4605      	mov	r5, r0
    62c6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    62c8:	f006 f8e0 	bl	c48c <k_is_in_isr>
    62cc:	b910      	cbnz	r0, 62d4 <uarte_nrfx_poll_out+0x14>
    62ce:	4b20      	ldr	r3, [pc, #128]	; (6350 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    62d0:	781b      	ldrb	r3, [r3, #0]
    62d2:	b983      	cbnz	r3, 62f6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    62d4:	f04f 0320 	mov.w	r3, #32
    62d8:	f3ef 8411 	mrs	r4, BASEPRI
    62dc:	f383 8812 	msr	BASEPRI_MAX, r3
    62e0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    62e4:	6868      	ldr	r0, [r5, #4]
    62e6:	f005 ff23 	bl	c130 <is_tx_ready.isra.0>
    62ea:	bb28      	cbnz	r0, 6338 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    62ec:	f384 8811 	msr	BASEPRI, r4
    62f0:	f3bf 8f6f 	isb	sy
}
    62f4:	e7ee      	b.n	62d4 <uarte_nrfx_poll_out+0x14>
{
    62f6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    62f8:	6868      	ldr	r0, [r5, #4]
    62fa:	f005 ff19 	bl	c130 <is_tx_ready.isra.0>
    62fe:	b970      	cbnz	r0, 631e <uarte_nrfx_poll_out+0x5e>
    6300:	2001      	movs	r0, #1
    6302:	f005 ffd6 	bl	c2b2 <nrfx_busy_wait>
    6306:	3c01      	subs	r4, #1
    6308:	d1f6      	bne.n	62f8 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    630a:	2100      	movs	r1, #0
    630c:	2021      	movs	r0, #33	; 0x21
    630e:	f002 fdbf 	bl	8e90 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6312:	e7f0      	b.n	62f6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    6314:	f384 8811 	msr	BASEPRI, r4
    6318:	f3bf 8f6f 	isb	sy
}
    631c:	e7f5      	b.n	630a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    631e:	f04f 0320 	mov.w	r3, #32
    6322:	f3ef 8411 	mrs	r4, BASEPRI
    6326:	f383 8812 	msr	BASEPRI_MAX, r3
    632a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    632e:	6868      	ldr	r0, [r5, #4]
    6330:	f005 fefe 	bl	c130 <is_tx_ready.isra.0>
    6334:	2800      	cmp	r0, #0
    6336:	d0ed      	beq.n	6314 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    6338:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    633a:	2201      	movs	r2, #1
	data->char_out = c;
    633c:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    6340:	6868      	ldr	r0, [r5, #4]
    6342:	f005 feda 	bl	c0fa <tx_start.isra.0>
	__asm__ volatile(
    6346:	f384 8811 	msr	BASEPRI, r4
    634a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    634e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6350:	20001f77 	.word	0x20001f77

00006354 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    6354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6358:	2101      	movs	r1, #1
    635a:	4606      	mov	r6, r0
    635c:	b089      	sub	sp, #36	; 0x24
    635e:	2200      	movs	r2, #0
    6360:	2002      	movs	r0, #2
    6362:	f7fd ffd5 	bl	4310 <z_arm_irq_priority_set>
    6366:	2002      	movs	r0, #2
    6368:	f7fd ffa0 	bl	42ac <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    636c:	6877      	ldr	r7, [r6, #4]
	struct uarte_nrfx_data *data = dev->data;
    636e:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
    6370:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6372:	2300      	movs	r3, #0
    6374:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    6378:	602e      	str	r6, [r5, #0]
	uarte_nrfx_pins_configure(dev, false);
    637a:	6873      	ldr	r3, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    637c:	68d8      	ldr	r0, [r3, #12]
    637e:	1c41      	adds	r1, r0, #1
    6380:	d00c      	beq.n	639c <uarte_0_init+0x48>
    *p_pin = pin_number & 0x1F;
    6382:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
    6386:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    638a:	2101      	movs	r1, #1
    638c:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
    638e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    6392:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    6396:	2103      	movs	r1, #3
    6398:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    639c:	6919      	ldr	r1, [r3, #16]
    639e:	1c4a      	adds	r2, r1, #1
    63a0:	d010      	beq.n	63c4 <uarte_0_init+0x70>
			nrf_gpio_cfg_input(cfg->rx_pin,
    63a2:	7f1a      	ldrb	r2, [r3, #28]
    63a4:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
    63a6:	f001 021f 	and.w	r2, r1, #31
    63aa:	bf14      	ite	ne
    63ac:	f04f 0c03 	movne.w	ip, #3
    63b0:	f04f 0c00 	moveq.w	ip, #0
    reg->PIN_CNF[pin_number] = cnf;
    63b4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    63b8:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    63bc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    63c0:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    63c4:	f8d3 c014 	ldr.w	ip, [r3, #20]
    63c8:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    63cc:	d00f      	beq.n	63ee <uarte_0_init+0x9a>
    *p_pin = pin_number & 0x1F;
    63ce:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
    63d2:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    63d6:	f04f 0e01 	mov.w	lr, #1
    63da:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
    63de:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    63e2:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    63e6:	f04f 0e03 	mov.w	lr, #3
    63ea:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    63ee:	f8d3 e018 	ldr.w	lr, [r3, #24]
    63f2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    63f6:	d010      	beq.n	641a <uarte_0_init+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
    63f8:	7f5a      	ldrb	r2, [r3, #29]
    63fa:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
    63fc:	f00e 021f 	and.w	r2, lr, #31
    6400:	bf14      	ite	ne
    6402:	f04f 0803 	movne.w	r8, #3
    6406:	f04f 0800 	moveq.w	r8, #0
    reg->PIN_CNF[pin_number] = cnf;
    640a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    640e:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6412:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    6416:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    641a:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
    641c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    6420:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &data->uart_config);
    6424:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
    6426:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
    642a:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
    642c:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
    6430:	f7ff fe9a 	bl	6168 <uarte_nrfx_configure>
	if (err) {
    6434:	4606      	mov	r6, r0
    6436:	2800      	cmp	r0, #0
    6438:	d155      	bne.n	64e6 <uarte_0_init+0x192>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    643a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    643c:	0798      	lsls	r0, r3, #30
    643e:	d52b      	bpl.n	6498 <uarte_0_init+0x144>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    6440:	f105 0016 	add.w	r0, r5, #22
    6444:	f001 f836 	bl	74b4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6448:	4b29      	ldr	r3, [pc, #164]	; (64f0 <uarte_0_init+0x19c>)
    644a:	4298      	cmp	r0, r3
    644c:	d011      	beq.n	6472 <uarte_0_init+0x11e>
		LOG_ERR("Failed to allocate PPI Channel");
    644e:	4829      	ldr	r0, [pc, #164]	; (64f4 <uarte_0_init+0x1a0>)
    6450:	6803      	ldr	r3, [r0, #0]
    6452:	0759      	lsls	r1, r3, #29
    6454:	d00a      	beq.n	646c <uarte_0_init+0x118>
    6456:	4b28      	ldr	r3, [pc, #160]	; (64f8 <uarte_0_init+0x1a4>)
    6458:	9306      	str	r3, [sp, #24]
    645a:	2302      	movs	r3, #2
    645c:	9301      	str	r3, [sp, #4]
    645e:	9305      	str	r3, [sp, #20]
    6460:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6464:	4633      	mov	r3, r6
    6466:	aa05      	add	r2, sp, #20
    6468:	f003 fe9e 	bl	a1a8 <z_impl_z_log_msg2_static_create>
		return -EIO;
    646c:	f06f 0604 	mvn.w	r6, #4
UART_NRF_UARTE_DEVICE(0);
    6470:	e039      	b.n	64e6 <uarte_0_init+0x192>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    6472:	7da8      	ldrb	r0, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6474:	00c3      	lsls	r3, r0, #3
    6476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    647a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    647e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6482:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6486:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    648a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    648e:	4a1b      	ldr	r2, [pc, #108]	; (64fc <uarte_0_init+0x1a8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    6490:	2301      	movs	r3, #1
    6492:	4083      	lsls	r3, r0
    6494:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6498:	2308      	movs	r3, #8
    649a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    649e:	7a3b      	ldrb	r3, [r7, #8]
    64a0:	b95b      	cbnz	r3, 64ba <uarte_0_init+0x166>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    64a2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    64a6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    64aa:	f105 0315 	add.w	r3, r5, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    64ae:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    64b2:	2301      	movs	r3, #1
    64b4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    64b8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    64ba:	687b      	ldr	r3, [r7, #4]
    64bc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    64be:	bf5c      	itt	pl
    64c0:	f44f 7280 	movpl.w	r2, #256	; 0x100
    64c4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    64c8:	06db      	lsls	r3, r3, #27
    64ca:	bf44      	itt	mi
    64cc:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    64d0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    64d4:	3514      	adds	r5, #20
    p_reg->TXD.MAXCNT = length;
    64d6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    64d8:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    64dc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    64e0:	2301      	movs	r3, #1
    64e2:	60a3      	str	r3, [r4, #8]
    64e4:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    64e6:	4630      	mov	r0, r6
    64e8:	b009      	add	sp, #36	; 0x24
    64ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    64ee:	bf00      	nop
    64f0:	0bad0000 	.word	0x0bad0000
    64f4:	2000029c 	.word	0x2000029c
    64f8:	0000f490 	.word	0x0000f490
    64fc:	4001f000 	.word	0x4001f000

00006500 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6500:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6502:	2301      	movs	r3, #1
    6504:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6506:	4a11      	ldr	r2, [pc, #68]	; (654c <compare_int_lock+0x4c>)
    6508:	f3bf 8f5b 	dmb	ish
    650c:	43dc      	mvns	r4, r3
    650e:	e852 1f00 	ldrex	r1, [r2]
    6512:	ea01 0c04 	and.w	ip, r1, r4
    6516:	e842 ce00 	strex	lr, ip, [r2]
    651a:	f1be 0f00 	cmp.w	lr, #0
    651e:	d1f6      	bne.n	650e <compare_int_lock+0xe>
    6520:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6524:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6528:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    652c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6534:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    6538:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    653c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6540:	420b      	tst	r3, r1
}
    6542:	bf14      	ite	ne
    6544:	2001      	movne	r0, #1
    6546:	2000      	moveq	r0, #0
    6548:	bd10      	pop	{r4, pc}
    654a:	bf00      	nop
    654c:	2000197c 	.word	0x2000197c

00006550 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6550:	4919      	ldr	r1, [pc, #100]	; (65b8 <sys_clock_timeout_handler+0x68>)
{
    6552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6554:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    6556:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    655a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    655c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6560:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6564:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    6566:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    656a:	d222      	bcs.n	65b2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    656c:	4b13      	ldr	r3, [pc, #76]	; (65bc <sys_clock_timeout_handler+0x6c>)
    656e:	681b      	ldr	r3, [r3, #0]
    6570:	0a1a      	lsrs	r2, r3, #8
    6572:	061b      	lsls	r3, r3, #24
    6574:	195e      	adds	r6, r3, r5
    6576:	4b12      	ldr	r3, [pc, #72]	; (65c0 <sys_clock_timeout_handler+0x70>)
    6578:	f142 0700 	adc.w	r7, r2, #0
    657c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    6580:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6582:	f002 fdfb 	bl	917c <sys_clock_announce>
    return p_reg->CC[ch];
    6586:	00a3      	lsls	r3, r4, #2
    6588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    658c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    6590:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    6594:	42aa      	cmp	r2, r5
    6596:	d10b      	bne.n	65b0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    6598:	b91e      	cbnz	r6, 65a2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    659a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    659e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    65a2:	4b08      	ldr	r3, [pc, #32]	; (65c4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    65a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    65a8:	fa00 f404 	lsl.w	r4, r0, r4
    65ac:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    65b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    65b2:	2600      	movs	r6, #0
    65b4:	e7e5      	b.n	6582 <sys_clock_timeout_handler+0x32>
    65b6:	bf00      	nop
    65b8:	20000ef0 	.word	0x20000ef0
    65bc:	20001980 	.word	0x20001980
    65c0:	20000ed8 	.word	0x20000ed8
    65c4:	40011000 	.word	0x40011000

000065c8 <compare_int_unlock>:
	if (key) {
    65c8:	b319      	cbz	r1, 6612 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    65ca:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    65ce:	2301      	movs	r3, #1
    65d0:	4a10      	ldr	r2, [pc, #64]	; (6614 <compare_int_unlock+0x4c>)
    65d2:	4083      	lsls	r3, r0
    65d4:	e852 1f00 	ldrex	r1, [r2]
    65d8:	4319      	orrs	r1, r3
    65da:	e842 1c00 	strex	ip, r1, [r2]
    65de:	f1bc 0f00 	cmp.w	ip, #0
    65e2:	d1f7      	bne.n	65d4 <compare_int_unlock+0xc>
    65e4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    65e8:	4a0b      	ldr	r2, [pc, #44]	; (6618 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    65ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    65ee:	4083      	lsls	r3, r0
    65f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65f4:	4b09      	ldr	r3, [pc, #36]	; (661c <compare_int_unlock+0x54>)
    65f6:	f3bf 8f5b 	dmb	ish
    65fa:	681b      	ldr	r3, [r3, #0]
    65fc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6600:	fa23 f000 	lsr.w	r0, r3, r0
    6604:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6606:	bf42      	ittt	mi
    6608:	4b05      	ldrmi	r3, [pc, #20]	; (6620 <compare_int_unlock+0x58>)
    660a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    660e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    6612:	4770      	bx	lr
    6614:	2000197c 	.word	0x2000197c
    6618:	40011000 	.word	0x40011000
    661c:	20001978 	.word	0x20001978
    6620:	e000e100 	.word	0xe000e100

00006624 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6624:	4b0d      	ldr	r3, [pc, #52]	; (665c <z_nrf_rtc_timer_read+0x38>)
    6626:	6818      	ldr	r0, [r3, #0]
    6628:	0a01      	lsrs	r1, r0, #8
    662a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    662c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    6630:	4b0b      	ldr	r3, [pc, #44]	; (6660 <z_nrf_rtc_timer_read+0x3c>)
    6632:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    6636:	1818      	adds	r0, r3, r0
    6638:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    663c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6640:	d20a      	bcs.n	6658 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    6642:	4b08      	ldr	r3, [pc, #32]	; (6664 <z_nrf_rtc_timer_read+0x40>)
    6644:	e9d3 2300 	ldrd	r2, r3, [r3]
    6648:	4290      	cmp	r0, r2
    664a:	eb71 0303 	sbcs.w	r3, r1, r3
    664e:	d203      	bcs.n	6658 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    6650:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6654:	f141 0100 	adc.w	r1, r1, #0
}
    6658:	4770      	bx	lr
    665a:	bf00      	nop
    665c:	20001980 	.word	0x20001980
    6660:	40011000 	.word	0x40011000
    6664:	20000ed8 	.word	0x20000ed8

00006668 <compare_set>:
{
    6668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    666c:	b085      	sub	sp, #20
    666e:	4616      	mov	r6, r2
    6670:	4698      	mov	r8, r3
    6672:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    6674:	f7ff ff44 	bl	6500 <compare_int_lock>
    6678:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    667a:	f7ff ffd3 	bl	6624 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    667e:	42b0      	cmp	r0, r6
    6680:	eb71 0308 	sbcs.w	r3, r1, r8
    6684:	d278      	bcs.n	6778 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    6686:	4b46      	ldr	r3, [pc, #280]	; (67a0 <compare_set+0x138>)
    6688:	1a30      	subs	r0, r6, r0
    668a:	eb68 0101 	sbc.w	r1, r8, r1
    668e:	4298      	cmp	r0, r3
    6690:	f171 0300 	sbcs.w	r3, r1, #0
    6694:	f080 8081 	bcs.w	679a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    6698:	4b42      	ldr	r3, [pc, #264]	; (67a4 <compare_set+0x13c>)
    669a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    669e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    66a2:	45d8      	cmp	r8, fp
    66a4:	bf08      	it	eq
    66a6:	4556      	cmpeq	r6, sl
    66a8:	d051      	beq.n	674e <compare_set+0xe6>
    66aa:	ea4f 0985 	mov.w	r9, r5, lsl #2
    66ae:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    66b2:	f105 0750 	add.w	r7, r5, #80	; 0x50
    66b6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    66ba:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    66bc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    66c0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66c4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    66c6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    66ca:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    66ce:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    66d0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    66d4:	4b34      	ldr	r3, [pc, #208]	; (67a8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66d6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    66da:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    66dc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    66e0:	1a40      	subs	r0, r0, r1
    66e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    66e6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    66ea:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    66ec:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    66f0:	d107      	bne.n	6702 <compare_set+0x9a>
    66f2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    66f6:	2013      	movs	r0, #19
    66f8:	f006 f8ab 	bl	c852 <z_impl_k_busy_wait>
    66fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    6700:	4b29      	ldr	r3, [pc, #164]	; (67a8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    6702:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    6706:	eba4 000c 	sub.w	r0, r4, ip
    670a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    670e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6712:	bf88      	it	hi
    6714:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6716:	2000      	movs	r0, #0
    6718:	6038      	str	r0, [r7, #0]
    671a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    671c:	9801      	ldr	r0, [sp, #4]
    671e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6722:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6726:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    672a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    672e:	4281      	cmp	r1, r0
    6730:	d006      	beq.n	6740 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    6732:	1a20      	subs	r0, r4, r0
    6734:	3802      	subs	r0, #2
    6736:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    673a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    673e:	d819      	bhi.n	6774 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    6740:	1aa4      	subs	r4, r4, r2
    6742:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    6746:	eb14 0a06 	adds.w	sl, r4, r6
    674a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    674e:	4915      	ldr	r1, [pc, #84]	; (67a4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    6750:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    6752:	012b      	lsls	r3, r5, #4
    6754:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    6758:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    675c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    675e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6760:	6053      	str	r3, [r2, #4]
	return ret;
    6762:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    6764:	4628      	mov	r0, r5
    6766:	9900      	ldr	r1, [sp, #0]
    6768:	f7ff ff2e 	bl	65c8 <compare_int_unlock>
}
    676c:	4620      	mov	r0, r4
    676e:	b005      	add	sp, #20
    6770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6774:	4620      	mov	r0, r4
    6776:	e7b1      	b.n	66dc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    6778:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    677a:	4a0c      	ldr	r2, [pc, #48]	; (67ac <compare_set+0x144>)
    677c:	f3bf 8f5b 	dmb	ish
    6780:	40ab      	lsls	r3, r5
    6782:	e852 1f00 	ldrex	r1, [r2]
    6786:	4319      	orrs	r1, r3
    6788:	e842 1000 	strex	r0, r1, [r2]
    678c:	2800      	cmp	r0, #0
    678e:	d1f8      	bne.n	6782 <compare_set+0x11a>
    6790:	f3bf 8f5b 	dmb	ish
    6794:	46b2      	mov	sl, r6
    6796:	46c3      	mov	fp, r8
    6798:	e7d9      	b.n	674e <compare_set+0xe6>
			return -EINVAL;
    679a:	f06f 0415 	mvn.w	r4, #21
    679e:	e7e1      	b.n	6764 <compare_set+0xfc>
    67a0:	01000001 	.word	0x01000001
    67a4:	20000ee0 	.word	0x20000ee0
    67a8:	40011000 	.word	0x40011000
    67ac:	20001978 	.word	0x20001978

000067b0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    67b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    67b2:	4b19      	ldr	r3, [pc, #100]	; (6818 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    67b4:	4d19      	ldr	r5, [pc, #100]	; (681c <sys_clock_driver_init+0x6c>)
    67b6:	2400      	movs	r4, #0
    67b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    67bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    67c0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    67c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    67c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    67cc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    67d0:	4b13      	ldr	r3, [pc, #76]	; (6820 <sys_clock_driver_init+0x70>)
    67d2:	2602      	movs	r6, #2
    67d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    67d8:	2101      	movs	r1, #1
    67da:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    67de:	2011      	movs	r0, #17
    67e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    67e4:	4622      	mov	r2, r4
    67e6:	f7fd fd93 	bl	4310 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    67ea:	2011      	movs	r0, #17
    67ec:	f7fd fd5e 	bl	42ac <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    67f0:	4a0c      	ldr	r2, [pc, #48]	; (6824 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    67f2:	2301      	movs	r3, #1
    67f4:	60ab      	str	r3, [r5, #8]
    67f6:	602b      	str	r3, [r5, #0]
    67f8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    67fa:	4b0b      	ldr	r3, [pc, #44]	; (6828 <sys_clock_driver_init+0x78>)
    67fc:	4a0b      	ldr	r2, [pc, #44]	; (682c <sys_clock_driver_init+0x7c>)
    67fe:	9300      	str	r3, [sp, #0]
    6800:	9401      	str	r4, [sp, #4]
    6802:	2300      	movs	r3, #0
    6804:	4620      	mov	r0, r4
    6806:	f7ff ff2f 	bl	6668 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    680a:	4630      	mov	r0, r6
    680c:	f7fe fd14 	bl	5238 <z_nrf_clock_control_lf_on>

	return 0;
}
    6810:	4620      	mov	r0, r4
    6812:	b002      	add	sp, #8
    6814:	bd70      	pop	{r4, r5, r6, pc}
    6816:	bf00      	nop
    6818:	20000ee0 	.word	0x20000ee0
    681c:	40011000 	.word	0x40011000
    6820:	e000e100 	.word	0xe000e100
    6824:	2000197c 	.word	0x2000197c
    6828:	00006551 	.word	0x00006551
    682c:	007fffff 	.word	0x007fffff

00006830 <rtc_nrf_isr>:
{
    6830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    6834:	4c35      	ldr	r4, [pc, #212]	; (690c <rtc_nrf_isr+0xdc>)
    6836:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    683a:	079a      	lsls	r2, r3, #30
    683c:	d50b      	bpl.n	6856 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    683e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6842:	b143      	cbz	r3, 6856 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    6844:	4a32      	ldr	r2, [pc, #200]	; (6910 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6846:	2300      	movs	r3, #0
    6848:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    684c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6850:	6813      	ldr	r3, [r2, #0]
    6852:	3301      	adds	r3, #1
    6854:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    6856:	f04f 0320 	mov.w	r3, #32
    685a:	f3ef 8211 	mrs	r2, BASEPRI
    685e:	f383 8812 	msr	BASEPRI_MAX, r3
    6862:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    6866:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    686a:	03db      	lsls	r3, r3, #15
    686c:	d512      	bpl.n	6894 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    686e:	f3bf 8f5b 	dmb	ish
    6872:	4b28      	ldr	r3, [pc, #160]	; (6914 <rtc_nrf_isr+0xe4>)
    6874:	e853 1f00 	ldrex	r1, [r3]
    6878:	f021 0001 	bic.w	r0, r1, #1
    687c:	e843 0600 	strex	r6, r0, [r3]
    6880:	2e00      	cmp	r6, #0
    6882:	d1f7      	bne.n	6874 <rtc_nrf_isr+0x44>
    6884:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6888:	2900      	cmp	r1, #0
    688a:	d136      	bne.n	68fa <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    688c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    6890:	2b00      	cmp	r3, #0
    6892:	d132      	bne.n	68fa <rtc_nrf_isr+0xca>
{
    6894:	2300      	movs	r3, #0
	__asm__ volatile(
    6896:	f382 8811 	msr	BASEPRI, r2
    689a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    689e:	b34b      	cbz	r3, 68f4 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    68a0:	f7ff fec0 	bl	6624 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    68a4:	f04f 0320 	mov.w	r3, #32
    68a8:	f3ef 8c11 	mrs	ip, BASEPRI
    68ac:	f383 8812 	msr	BASEPRI_MAX, r3
    68b0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    68b4:	4b18      	ldr	r3, [pc, #96]	; (6918 <rtc_nrf_isr+0xe8>)
    68b6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    68ba:	42b0      	cmp	r0, r6
    68bc:	eb71 0207 	sbcs.w	r2, r1, r7
    68c0:	f04f 0200 	mov.w	r2, #0
    68c4:	d320      	bcc.n	6908 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    68c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    68ca:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    68ce:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    68d2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    68d6:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    68d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    68dc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    68e0:	f38c 8811 	msr	BASEPRI, ip
    68e4:	f3bf 8f6f 	isb	sy
		if (handler) {
    68e8:	b121      	cbz	r1, 68f4 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    68ea:	9500      	str	r5, [sp, #0]
    68ec:	4632      	mov	r2, r6
    68ee:	463b      	mov	r3, r7
    68f0:	2000      	movs	r0, #0
    68f2:	4788      	blx	r1
}
    68f4:	b003      	add	sp, #12
    68f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    68fa:	2300      	movs	r3, #0
    68fc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    6900:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6904:	2301      	movs	r3, #1
}
    6906:	e7c6      	b.n	6896 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    6908:	4611      	mov	r1, r2
    690a:	e7e9      	b.n	68e0 <rtc_nrf_isr+0xb0>
    690c:	40011000 	.word	0x40011000
    6910:	20001980 	.word	0x20001980
    6914:	20001978 	.word	0x20001978
    6918:	20000ee0 	.word	0x20000ee0

0000691c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    691c:	1c43      	adds	r3, r0, #1
{
    691e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6920:	d021      	beq.n	6966 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6922:	2801      	cmp	r0, #1
    6924:	dd21      	ble.n	696a <sys_clock_set_timeout+0x4e>
    6926:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    692a:	da20      	bge.n	696e <sys_clock_set_timeout+0x52>
    692c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    692e:	f7ff fe79 	bl	6624 <z_nrf_rtc_timer_read>
    6932:	4b10      	ldr	r3, [pc, #64]	; (6974 <sys_clock_set_timeout+0x58>)
    6934:	e9d3 1300 	ldrd	r1, r3, [r3]
    6938:	1a40      	subs	r0, r0, r1
		ticks = 0;
    693a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    693e:	bf28      	it	cs
    6940:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6942:	3001      	adds	r0, #1
    6944:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    6946:	480c      	ldr	r0, [pc, #48]	; (6978 <sys_clock_set_timeout+0x5c>)
    6948:	4282      	cmp	r2, r0
    694a:	bf28      	it	cs
    694c:	4602      	movcs	r2, r0
    694e:	1852      	adds	r2, r2, r1
    6950:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6954:	4909      	ldr	r1, [pc, #36]	; (697c <sys_clock_set_timeout+0x60>)
    6956:	9001      	str	r0, [sp, #4]
    6958:	9100      	str	r1, [sp, #0]
    695a:	f143 0300 	adc.w	r3, r3, #0
    695e:	f7ff fe83 	bl	6668 <compare_set>
}
    6962:	b002      	add	sp, #8
    6964:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6966:	4804      	ldr	r0, [pc, #16]	; (6978 <sys_clock_set_timeout+0x5c>)
    6968:	e7e0      	b.n	692c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    696a:	2400      	movs	r4, #0
    696c:	e7df      	b.n	692e <sys_clock_set_timeout+0x12>
    696e:	4c02      	ldr	r4, [pc, #8]	; (6978 <sys_clock_set_timeout+0x5c>)
    6970:	e7dd      	b.n	692e <sys_clock_set_timeout+0x12>
    6972:	bf00      	nop
    6974:	20000ef0 	.word	0x20000ef0
    6978:	007fffff 	.word	0x007fffff
    697c:	00006551 	.word	0x00006551

00006980 <sys_clock_elapsed>:
{
    6980:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    6982:	f7ff fe4f 	bl	6624 <z_nrf_rtc_timer_read>
    6986:	4b02      	ldr	r3, [pc, #8]	; (6990 <sys_clock_elapsed+0x10>)
    6988:	681b      	ldr	r3, [r3, #0]
}
    698a:	1ac0      	subs	r0, r0, r3
    698c:	bd08      	pop	{r3, pc}
    698e:	bf00      	nop
    6990:	20000ef0 	.word	0x20000ef0

00006994 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6994:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    6998:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    699c:	2a06      	cmp	r2, #6
    699e:	d109      	bne.n	69b4 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    69a0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    69a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
    69a8:	3b03      	subs	r3, #3
    69aa:	2b04      	cmp	r3, #4
    69ac:	d802      	bhi.n	69b4 <nrf52_errata_16+0x20>
    69ae:	4a02      	ldr	r2, [pc, #8]	; (69b8 <nrf52_errata_16+0x24>)
    69b0:	5cd0      	ldrb	r0, [r2, r3]
    69b2:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    69b4:	2000      	movs	r0, #0
    #endif
}
    69b6:	4770      	bx	lr
    69b8:	0000f4d5 	.word	0x0000f4d5

000069bc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    69bc:	4a02      	ldr	r2, [pc, #8]	; (69c8 <nvmc_wait+0xc>)
    69be:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    69c2:	2b00      	cmp	r3, #0
    69c4:	d0fb      	beq.n	69be <nvmc_wait+0x2>
}
    69c6:	4770      	bx	lr
    69c8:	4001e000 	.word	0x4001e000

000069cc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    69cc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    69ce:	f005 fc61 	bl	c294 <nrf52_errata_108>
    69d2:	b140      	cbz	r0, 69e6 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    69d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    69d8:	4a90      	ldr	r2, [pc, #576]	; (6c1c <SystemInit+0x250>)
    69da:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    69de:	f3c3 2304 	ubfx	r3, r3, #8, #5
    69e2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    69e6:	f7ff ffd5 	bl	6994 <nrf52_errata_16>
    69ea:	b110      	cbz	r0, 69f2 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    69ec:	4b8c      	ldr	r3, [pc, #560]	; (6c20 <SystemInit+0x254>)
    69ee:	4a8d      	ldr	r2, [pc, #564]	; (6c24 <SystemInit+0x258>)
    69f0:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    69f2:	f005 fc4f 	bl	c294 <nrf52_errata_108>
    69f6:	b148      	cbz	r0, 6a0c <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    69f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    69fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6a00:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    6a04:	f3c3 3342 	ubfx	r3, r3, #13, #3
    6a08:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    6a0c:	f7ff ffc2 	bl	6994 <nrf52_errata_16>
    6a10:	b130      	cbz	r0, 6a20 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    6a12:	4a85      	ldr	r2, [pc, #532]	; (6c28 <SystemInit+0x25c>)
    6a14:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    6a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    6a1c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    6a20:	f005 fc38 	bl	c294 <nrf52_errata_108>
    6a24:	b140      	cbz	r0, 6a38 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    6a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a2a:	2200      	movs	r2, #0
    6a2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6a30:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6a34:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    6a38:	f7ff ffac 	bl	6994 <nrf52_errata_16>
    6a3c:	b120      	cbz	r0, 6a48 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    6a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a42:	2203      	movs	r2, #3
    6a44:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    6a48:	f7ff ffa4 	bl	6994 <nrf52_errata_16>
    6a4c:	b160      	cbz	r0, 6a68 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    6a4e:	4b77      	ldr	r3, [pc, #476]	; (6c2c <SystemInit+0x260>)
    6a50:	2205      	movs	r2, #5
    6a52:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    6a56:	2201      	movs	r2, #1
    6a58:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    6a5c:	2200      	movs	r2, #0
    6a5e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    6a62:	223f      	movs	r2, #63	; 0x3f
    6a64:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    6a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6a6c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6a70:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6a72:	bf09      	itett	eq
    6a74:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    6a78:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6a7c:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    6a80:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    6a84:	bf08      	it	eq
    6a86:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6a8a:	2a06      	cmp	r2, #6
    6a8c:	d14d      	bne.n	6b2a <SystemInit+0x15e>
            {
                switch(var2)
    6a8e:	3b03      	subs	r3, #3
    6a90:	2b04      	cmp	r3, #4
    6a92:	d803      	bhi.n	6a9c <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    6a94:	4a66      	ldr	r2, [pc, #408]	; (6c30 <SystemInit+0x264>)
    6a96:	5cd3      	ldrb	r3, [r2, r3]
    6a98:	2b00      	cmp	r3, #0
    6a9a:	d046      	beq.n	6b2a <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6aa0:	4b64      	ldr	r3, [pc, #400]	; (6c34 <SystemInit+0x268>)
    6aa2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    6aa6:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    6aaa:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    6aae:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    6ab2:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    6ab6:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    6aba:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    6abe:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    6ac2:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    6ac6:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6aca:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6ace:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    6ad2:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    6ad6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    6ada:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    6ade:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    6ae2:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    6ae6:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6aea:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    6aee:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    6af2:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    6af6:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    6afa:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    6afe:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    6b02:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    6b06:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6b0a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    6b0e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    6b12:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    6b16:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6b1a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    6b1e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    6b22:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    6b26:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    6b2a:	f005 fbb3 	bl	c294 <nrf52_errata_108>
    6b2e:	b148      	cbz	r0, 6b44 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    6b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6b38:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    6b3c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    6b40:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    6b44:	f005 fba6 	bl	c294 <nrf52_errata_108>
    6b48:	b148      	cbz	r0, 6b5e <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6b4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b4e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6b52:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    6b54:	bf44      	itt	mi
    6b56:	f06f 0201 	mvnmi.w	r2, #1
    6b5a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6b5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6b62:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6b66:	2a06      	cmp	r2, #6
    6b68:	d126      	bne.n	6bb8 <SystemInit+0x1ec>
            {
                switch(var2)
    6b6a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    6b6e:	3b03      	subs	r3, #3
    6b70:	2b04      	cmp	r3, #4
    6b72:	d802      	bhi.n	6b7a <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    6b74:	4a30      	ldr	r2, [pc, #192]	; (6c38 <SystemInit+0x26c>)
    6b76:	5cd3      	ldrb	r3, [r2, r3]
    6b78:	b163      	cbz	r3, 6b94 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    6b7a:	4a30      	ldr	r2, [pc, #192]	; (6c3c <SystemInit+0x270>)
    6b7c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    6b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6b84:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6b88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    6b8c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6b90:	2b06      	cmp	r3, #6
    6b92:	d111      	bne.n	6bb8 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6b94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6b98:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    6b9c:	3b03      	subs	r3, #3
    6b9e:	2b04      	cmp	r3, #4
    6ba0:	d802      	bhi.n	6ba8 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6ba2:	4a27      	ldr	r2, [pc, #156]	; (6c40 <SystemInit+0x274>)
    6ba4:	5cd3      	ldrb	r3, [r2, r3]
    6ba6:	b13b      	cbz	r3, 6bb8 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    6ba8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6bac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    6bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6bb4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6bb8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6bbc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    6bc0:	2a00      	cmp	r2, #0
    6bc2:	db03      	blt.n	6bcc <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    6bc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6bc8:	2b00      	cmp	r3, #0
    6bca:	da22      	bge.n	6c12 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6bcc:	491d      	ldr	r1, [pc, #116]	; (6c44 <SystemInit+0x278>)
    6bce:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6bd0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6bd4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6bd8:	2415      	movs	r4, #21
    nvmc_wait();
    6bda:	f7ff feef 	bl	69bc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6bde:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    6be2:	f7ff feeb 	bl	69bc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    6be6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    6bea:	f7ff fee7 	bl	69bc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6bee:	2300      	movs	r3, #0
    6bf0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    6bf4:	f7ff fee2 	bl	69bc <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    6bf8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6bfc:	490a      	ldr	r1, [pc, #40]	; (6c28 <SystemInit+0x25c>)
    6bfe:	4b12      	ldr	r3, [pc, #72]	; (6c48 <SystemInit+0x27c>)
    6c00:	68ca      	ldr	r2, [r1, #12]
    6c02:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6c06:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6c08:	60cb      	str	r3, [r1, #12]
    6c0a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6c0e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6c10:	e7fd      	b.n	6c0e <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    6c12:	4b0e      	ldr	r3, [pc, #56]	; (6c4c <SystemInit+0x280>)
    6c14:	4a0e      	ldr	r2, [pc, #56]	; (6c50 <SystemInit+0x284>)
    6c16:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    6c18:	bd10      	pop	{r4, pc}
    6c1a:	bf00      	nop
    6c1c:	40013000 	.word	0x40013000
    6c20:	4007c000 	.word	0x4007c000
    6c24:	baadf00d 	.word	0xbaadf00d
    6c28:	e000ed00 	.word	0xe000ed00
    6c2c:	40005000 	.word	0x40005000
    6c30:	0000f4c6 	.word	0x0000f4c6
    6c34:	4000c000 	.word	0x4000c000
    6c38:	0000f4cb 	.word	0x0000f4cb
    6c3c:	40001000 	.word	0x40001000
    6c40:	0000f4d0 	.word	0x0000f4d0
    6c44:	4001e000 	.word	0x4001e000
    6c48:	05fa0004 	.word	0x05fa0004
    6c4c:	200001b8 	.word	0x200001b8
    6c50:	03d09000 	.word	0x03d09000

00006c54 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6c54:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    6c56:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    6c58:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    6c5a:	fab2 f382 	clz	r3, r2
    6c5e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    6c62:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    6c64:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    6c66:	d014      	beq.n	6c92 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6c68:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    6c6c:	fa05 f303 	lsl.w	r3, r5, r3
    6c70:	ea22 0303 	bic.w	r3, r2, r3
    6c74:	e850 6f00 	ldrex	r6, [r0]
    6c78:	4296      	cmp	r6, r2
    6c7a:	d104      	bne.n	6c86 <nrfx_flag32_alloc+0x32>
    6c7c:	e840 3c00 	strex	ip, r3, [r0]
    6c80:	f1bc 0f00 	cmp.w	ip, #0
    6c84:	d1f6      	bne.n	6c74 <nrfx_flag32_alloc+0x20>
    6c86:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6c8a:	d1e5      	bne.n	6c58 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    6c8c:	4802      	ldr	r0, [pc, #8]	; (6c98 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    6c8e:	700c      	strb	r4, [r1, #0]
}
    6c90:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    6c92:	4802      	ldr	r0, [pc, #8]	; (6c9c <nrfx_flag32_alloc+0x48>)
    6c94:	e7fc      	b.n	6c90 <nrfx_flag32_alloc+0x3c>
    6c96:	bf00      	nop
    6c98:	0bad0000 	.word	0x0bad0000
    6c9c:	0bad0002 	.word	0x0bad0002

00006ca0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6ca0:	6803      	ldr	r3, [r0, #0]
    6ca2:	40cb      	lsrs	r3, r1
    6ca4:	07db      	lsls	r3, r3, #31
{
    6ca6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6ca8:	d415      	bmi.n	6cd6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6caa:	2301      	movs	r3, #1
    6cac:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    6cb0:	6803      	ldr	r3, [r0, #0]
    6cb2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6cb6:	ea41 0203 	orr.w	r2, r1, r3
    6cba:	e850 4f00 	ldrex	r4, [r0]
    6cbe:	429c      	cmp	r4, r3
    6cc0:	d104      	bne.n	6ccc <nrfx_flag32_free+0x2c>
    6cc2:	e840 2c00 	strex	ip, r2, [r0]
    6cc6:	f1bc 0f00 	cmp.w	ip, #0
    6cca:	d1f6      	bne.n	6cba <nrfx_flag32_free+0x1a>
    6ccc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6cd0:	d1ee      	bne.n	6cb0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    6cd2:	4802      	ldr	r0, [pc, #8]	; (6cdc <nrfx_flag32_free+0x3c>)
}
    6cd4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6cd6:	4802      	ldr	r0, [pc, #8]	; (6ce0 <nrfx_flag32_free+0x40>)
    6cd8:	e7fc      	b.n	6cd4 <nrfx_flag32_free+0x34>
    6cda:	bf00      	nop
    6cdc:	0bad0000 	.word	0x0bad0000
    6ce0:	0bad0004 	.word	0x0bad0004

00006ce4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6ce4:	4b04      	ldr	r3, [pc, #16]	; (6cf8 <nrfx_clock_init+0x14>)
    6ce6:	791a      	ldrb	r2, [r3, #4]
    6ce8:	b922      	cbnz	r2, 6cf4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    6cea:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    6cec:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    6cee:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6cf0:	4802      	ldr	r0, [pc, #8]	; (6cfc <nrfx_clock_init+0x18>)
    6cf2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6cf4:	4802      	ldr	r0, [pc, #8]	; (6d00 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6cf6:	4770      	bx	lr
    6cf8:	20001984 	.word	0x20001984
    6cfc:	0bad0000 	.word	0x0bad0000
    6d00:	0bad000c 	.word	0x0bad000c

00006d04 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    6d04:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6d06:	b110      	cbz	r0, 6d0e <nrfx_clock_start+0xa>
    6d08:	2801      	cmp	r0, #1
    6d0a:	d034      	beq.n	6d76 <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    6d0c:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d12:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6d16:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    6d1a:	03c9      	lsls	r1, r1, #15
    6d1c:	d529      	bpl.n	6d72 <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6d1e:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    6d22:	2a01      	cmp	r2, #1
    6d24:	d125      	bne.n	6d72 <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6d26:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d2e:	2200      	movs	r2, #0
    6d30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6d34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    6d38:	2202      	movs	r2, #2
    6d3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    6d3e:	4a13      	ldr	r2, [pc, #76]	; (6d8c <nrfx_clock_start+0x88>)
    6d40:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    6d44:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    6d48:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    6d4c:	4b10      	ldr	r3, [pc, #64]	; (6d90 <nrfx_clock_start+0x8c>)
    6d4e:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    6d50:	f044 0101 	orr.w	r1, r4, #1
    6d54:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    6d56:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    6d58:	6859      	ldr	r1, [r3, #4]
    6d5a:	1b49      	subs	r1, r1, r5
    6d5c:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    6d60:	d3fa      	bcc.n	6d58 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
    6d62:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    6d68:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    6d6c:	2201      	movs	r2, #1
    6d6e:	609a      	str	r2, [r3, #8]
}
    6d70:	e7cc      	b.n	6d0c <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6d72:	2200      	movs	r2, #0
    6d74:	e7d7      	b.n	6d26 <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d7a:	2200      	movs	r2, #0
    6d7c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6d80:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6d84:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d88:	6018      	str	r0, [r3, #0]
}
    6d8a:	e7bf      	b.n	6d0c <nrfx_clock_start+0x8>
    6d8c:	e000ed00 	.word	0xe000ed00
    6d90:	e0001000 	.word	0xe0001000

00006d94 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    6d94:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6d96:	b110      	cbz	r0, 6d9e <nrfx_clock_stop+0xa>
    6d98:	2801      	cmp	r0, #1
    6d9a:	d017      	beq.n	6dcc <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6d9c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    6d9e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6da2:	2302      	movs	r3, #2
    6da4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6da8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    6dac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6db0:	2301      	movs	r3, #1
    6db2:	60e3      	str	r3, [r4, #12]
    6db4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6db8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    6dbc:	03db      	lsls	r3, r3, #15
    6dbe:	d5ed      	bpl.n	6d9c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    6dc0:	2001      	movs	r0, #1
    6dc2:	f005 fa76 	bl	c2b2 <nrfx_busy_wait>
    6dc6:	3d01      	subs	r5, #1
    6dc8:	d1f6      	bne.n	6db8 <nrfx_clock_stop+0x24>
    6dca:	e7e7      	b.n	6d9c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    6dcc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dd0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    6dd2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    6dda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6dde:	6060      	str	r0, [r4, #4]
    6de0:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6de4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6de8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    6dec:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6dee:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6df2:	d505      	bpl.n	6e00 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    6df4:	b123      	cbz	r3, 6e00 <nrfx_clock_stop+0x6c>
    6df6:	2001      	movs	r0, #1
    6df8:	f005 fa5b 	bl	c2b2 <nrfx_busy_wait>
    6dfc:	3d01      	subs	r5, #1
    6dfe:	d1f1      	bne.n	6de4 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    6e00:	4b01      	ldr	r3, [pc, #4]	; (6e08 <nrfx_clock_stop+0x74>)
    6e02:	2200      	movs	r2, #0
    6e04:	715a      	strb	r2, [r3, #5]
    6e06:	e7c9      	b.n	6d9c <nrfx_clock_stop+0x8>
    6e08:	20001984 	.word	0x20001984

00006e0c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6e10:	b510      	push	{r4, lr}
    6e12:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6e16:	b16a      	cbz	r2, 6e34 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e18:	2200      	movs	r2, #0
    6e1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6e1e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6e22:	2201      	movs	r2, #1
    6e24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6e28:	4b11      	ldr	r3, [pc, #68]	; (6e70 <nrfx_power_clock_irq_handler+0x64>)
    6e2a:	7958      	ldrb	r0, [r3, #5]
    6e2c:	b910      	cbnz	r0, 6e34 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    6e2e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6e30:	681b      	ldr	r3, [r3, #0]
    6e32:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6e3c:	b172      	cbz	r2, 6e5c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e3e:	2200      	movs	r2, #0
    6e40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6e44:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6e48:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6e4c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6e50:	0792      	lsls	r2, r2, #30
    6e52:	d104      	bne.n	6e5e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6e54:	2201      	movs	r2, #1
    6e56:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e5a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6e5c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    6e5e:	2202      	movs	r2, #2
    6e60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6e64:	4b02      	ldr	r3, [pc, #8]	; (6e70 <nrfx_power_clock_irq_handler+0x64>)
}
    6e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6e6a:	681b      	ldr	r3, [r3, #0]
    6e6c:	2001      	movs	r0, #1
    6e6e:	4718      	bx	r3
    6e70:	20001984 	.word	0x20001984

00006e74 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6e74:	4b03      	ldr	r3, [pc, #12]	; (6e84 <pin_in_use_by_te+0x10>)
    6e76:	3008      	adds	r0, #8
    6e78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6e7c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6e80:	4770      	bx	lr
    6e82:	bf00      	nop
    6e84:	200001bc 	.word	0x200001bc

00006e88 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6e88:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6e8a:	f100 0308 	add.w	r3, r0, #8
    6e8e:	4c0c      	ldr	r4, [pc, #48]	; (6ec0 <call_handler+0x38>)
    6e90:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6e94:	05da      	lsls	r2, r3, #23
{
    6e96:	4605      	mov	r5, r0
    6e98:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6e9a:	d507      	bpl.n	6eac <call_handler+0x24>
    6e9c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6ea0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6ea4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6ea8:	6852      	ldr	r2, [r2, #4]
    6eaa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6eac:	68a3      	ldr	r3, [r4, #8]
    6eae:	b12b      	cbz	r3, 6ebc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6eb0:	68e2      	ldr	r2, [r4, #12]
    6eb2:	4631      	mov	r1, r6
    6eb4:	4628      	mov	r0, r5
    }
}
    6eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6eba:	4718      	bx	r3
}
    6ebc:	bd70      	pop	{r4, r5, r6, pc}
    6ebe:	bf00      	nop
    6ec0:	200001bc 	.word	0x200001bc

00006ec4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6ec4:	4a12      	ldr	r2, [pc, #72]	; (6f10 <release_handler+0x4c>)
    6ec6:	3008      	adds	r0, #8
{
    6ec8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6eca:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    6ece:	05d9      	lsls	r1, r3, #23
    6ed0:	d51b      	bpl.n	6f0a <release_handler+0x46>
    6ed2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6ed6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6eda:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6ede:	f102 0410 	add.w	r4, r2, #16
    6ee2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6ee4:	f834 3b02 	ldrh.w	r3, [r4], #2
    6ee8:	f413 7f80 	tst.w	r3, #256	; 0x100
    6eec:	d003      	beq.n	6ef6 <release_handler+0x32>
    6eee:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6ef2:	4299      	cmp	r1, r3
    6ef4:	d009      	beq.n	6f0a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6ef6:	3001      	adds	r0, #1
    6ef8:	2820      	cmp	r0, #32
    6efa:	d1f3      	bne.n	6ee4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    6efc:	2300      	movs	r3, #0
    6efe:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6f02:	4804      	ldr	r0, [pc, #16]	; (6f14 <release_handler+0x50>)
}
    6f04:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6f06:	f7ff becb 	b.w	6ca0 <nrfx_flag32_free>
}
    6f0a:	bc10      	pop	{r4}
    6f0c:	4770      	bx	lr
    6f0e:	bf00      	nop
    6f10:	200001bc 	.word	0x200001bc
    6f14:	20000210 	.word	0x20000210

00006f18 <pin_handler_trigger_uninit>:
{
    6f18:	b538      	push	{r3, r4, r5, lr}
    6f1a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6f1c:	f7ff ffaa 	bl	6e74 <pin_in_use_by_te>
    6f20:	4c09      	ldr	r4, [pc, #36]	; (6f48 <pin_handler_trigger_uninit+0x30>)
    6f22:	f102 0508 	add.w	r5, r2, #8
    6f26:	b140      	cbz	r0, 6f3a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6f28:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6f2c:	4907      	ldr	r1, [pc, #28]	; (6f4c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6f2e:	0b5b      	lsrs	r3, r3, #13
    6f30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6f34:	2000      	movs	r0, #0
    6f36:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    6f3a:	4610      	mov	r0, r2
    6f3c:	f7ff ffc2 	bl	6ec4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6f40:	2300      	movs	r3, #0
    6f42:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6f46:	bd38      	pop	{r3, r4, r5, pc}
    6f48:	200001bc 	.word	0x200001bc
    6f4c:	40006000 	.word	0x40006000

00006f50 <nrfx_gpiote_input_configure>:
{
    6f50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6f54:	4604      	mov	r4, r0
    6f56:	461e      	mov	r6, r3
    if (p_input_config)
    6f58:	b309      	cbz	r1, 6f9e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6f5a:	4f4d      	ldr	r7, [pc, #308]	; (7090 <nrfx_gpiote_input_configure+0x140>)
    6f5c:	f100 0808 	add.w	r8, r0, #8
    6f60:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6f64:	07ab      	lsls	r3, r5, #30
    6f66:	d506      	bpl.n	6f76 <nrfx_gpiote_input_configure+0x26>
    6f68:	f7ff ff84 	bl	6e74 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    6f6c:	b118      	cbz	r0, 6f76 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    6f6e:	4849      	ldr	r0, [pc, #292]	; (7094 <nrfx_gpiote_input_configure+0x144>)
}
    6f70:	b002      	add	sp, #8
    6f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    6f76:	f004 001f 	and.w	r0, r4, #31
    6f7a:	0080      	lsls	r0, r0, #2
    6f7c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6f80:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6f82:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6f86:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    6f8a:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6f8e:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6f92:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    6f96:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    6f9a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    6f9e:	b192      	cbz	r2, 6fc6 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6fa0:	4b3b      	ldr	r3, [pc, #236]	; (7090 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6fa2:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6fa4:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6fa6:	f104 0008 	add.w	r0, r4, #8
    6faa:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    6fae:	078f      	lsls	r7, r1, #30
    6fb0:	d50c      	bpl.n	6fcc <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    6fb2:	2a00      	cmp	r2, #0
    6fb4:	d1db      	bne.n	6f6e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6fb6:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    6fba:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6fbe:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    6fc2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    6fc6:	bbce      	cbnz	r6, 703c <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    6fc8:	4833      	ldr	r0, [pc, #204]	; (7098 <nrfx_gpiote_input_configure+0x148>)
    6fca:	e7d1      	b.n	6f70 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6fcc:	f021 0120 	bic.w	r1, r1, #32
    6fd0:	04c9      	lsls	r1, r1, #19
    6fd2:	0cc9      	lsrs	r1, r1, #19
    6fd4:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    6fd8:	2a00      	cmp	r2, #0
    6fda:	d0ec      	beq.n	6fb6 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    6fdc:	2d03      	cmp	r5, #3
    6fde:	d8c6      	bhi.n	6f6e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6fe0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6fe2:	b92d      	cbnz	r5, 6ff0 <nrfx_gpiote_input_configure+0xa0>
    6fe4:	4a2d      	ldr	r2, [pc, #180]	; (709c <nrfx_gpiote_input_configure+0x14c>)
    6fe6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    6fea:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    6fee:	e7e2      	b.n	6fb6 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6ff0:	00ba      	lsls	r2, r7, #2
    6ff2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6ff6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6ffa:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    6ffe:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    7002:	f02c 0c03 	bic.w	ip, ip, #3
    7006:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    700a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    700e:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    7012:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    7016:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    701a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    701e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    7022:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    7026:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    702a:	ea4c 0c0e 	orr.w	ip, ip, lr
    702e:	f041 0120 	orr.w	r1, r1, #32
    7032:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    7036:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    703a:	e7bc      	b.n	6fb6 <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    703c:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    7040:	4620      	mov	r0, r4
    7042:	f7ff ff3f 	bl	6ec4 <release_handler>
    if (!handler)
    7046:	2f00      	cmp	r7, #0
    7048:	d0be      	beq.n	6fc8 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    704a:	4d11      	ldr	r5, [pc, #68]	; (7090 <nrfx_gpiote_input_configure+0x140>)
    704c:	682b      	ldr	r3, [r5, #0]
    704e:	429f      	cmp	r7, r3
    7050:	d104      	bne.n	705c <nrfx_gpiote_input_configure+0x10c>
    7052:	686b      	ldr	r3, [r5, #4]
    7054:	429e      	cmp	r6, r3
    7056:	d101      	bne.n	705c <nrfx_gpiote_input_configure+0x10c>
    7058:	2200      	movs	r2, #0
    705a:	e009      	b.n	7070 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    705c:	4810      	ldr	r0, [pc, #64]	; (70a0 <nrfx_gpiote_input_configure+0x150>)
    705e:	f10d 0107 	add.w	r1, sp, #7
    7062:	f7ff fdf7 	bl	6c54 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7066:	4b0c      	ldr	r3, [pc, #48]	; (7098 <nrfx_gpiote_input_configure+0x148>)
    7068:	4298      	cmp	r0, r3
    706a:	d181      	bne.n	6f70 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    706c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    7070:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    7074:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7078:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    707a:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    707c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7080:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    7084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7088:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    708c:	e79c      	b.n	6fc8 <nrfx_gpiote_input_configure+0x78>
    708e:	bf00      	nop
    7090:	200001bc 	.word	0x200001bc
    7094:	0bad0004 	.word	0x0bad0004
    7098:	0bad0000 	.word	0x0bad0000
    709c:	40006000 	.word	0x40006000
    70a0:	20000210 	.word	0x20000210

000070a4 <nrfx_gpiote_output_configure>:
{
    70a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70a6:	4604      	mov	r4, r0
    if (p_config)
    70a8:	b371      	cbz	r1, 7108 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    70aa:	4e37      	ldr	r6, [pc, #220]	; (7188 <nrfx_gpiote_output_configure+0xe4>)
    70ac:	f100 0708 	add.w	r7, r0, #8
    70b0:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    70b4:	07ab      	lsls	r3, r5, #30
    70b6:	d404      	bmi.n	70c2 <nrfx_gpiote_output_configure+0x1e>
    70b8:	f7ff fedc 	bl	6e74 <pin_in_use_by_te>
    70bc:	b108      	cbz	r0, 70c2 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    70be:	4833      	ldr	r0, [pc, #204]	; (718c <nrfx_gpiote_output_configure+0xe8>)
}
    70c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    70c2:	f015 0f1c 	tst.w	r5, #28
    70c6:	784b      	ldrb	r3, [r1, #1]
    70c8:	d001      	beq.n	70ce <nrfx_gpiote_output_configure+0x2a>
    70ca:	2b01      	cmp	r3, #1
    70cc:	d0f7      	beq.n	70be <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    70ce:	f004 001f 	and.w	r0, r4, #31
    70d2:	0080      	lsls	r0, r0, #2
    70d4:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    70d8:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    70dc:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    70e0:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    70e2:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    70e4:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    70e8:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    70ec:	f02c 0c07 	bic.w	ip, ip, #7
    70f0:	ea43 030c 	orr.w	r3, r3, ip
    70f4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    70f8:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    70fc:	f043 0301 	orr.w	r3, r3, #1
    7100:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    7104:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    7108:	b90a      	cbnz	r2, 710e <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    710a:	4821      	ldr	r0, [pc, #132]	; (7190 <nrfx_gpiote_output_configure+0xec>)
    710c:	e7d8      	b.n	70c0 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    710e:	4e1e      	ldr	r6, [pc, #120]	; (7188 <nrfx_gpiote_output_configure+0xe4>)
    7110:	f104 0708 	add.w	r7, r4, #8
    7114:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    7118:	0783      	lsls	r3, r0, #30
    711a:	d5d0      	bpl.n	70be <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    711c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    7120:	4661      	mov	r1, ip
    7122:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    7124:	f020 0020 	bic.w	r0, r0, #32
    7128:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    712c:	04c0      	lsls	r0, r0, #19
    712e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    7132:	0cc0      	lsrs	r0, r0, #19
    7134:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7138:	2300      	movs	r3, #0
    713a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    713e:	7855      	ldrb	r5, [r2, #1]
    7140:	2d00      	cmp	r5, #0
    7142:	d0e2      	beq.n	710a <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7144:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    7148:	7892      	ldrb	r2, [r2, #2]
    714a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    714e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7152:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7156:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    715a:	0223      	lsls	r3, r4, #8
    715c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7160:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7162:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7166:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    716a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    716c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    716e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7172:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7176:	4313      	orrs	r3, r2
    7178:	f040 0020 	orr.w	r0, r0, #32
    717c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7180:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    7184:	e7c1      	b.n	710a <nrfx_gpiote_output_configure+0x66>
    7186:	bf00      	nop
    7188:	200001bc 	.word	0x200001bc
    718c:	0bad0004 	.word	0x0bad0004
    7190:	0bad0000 	.word	0x0bad0000

00007194 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7194:	4b01      	ldr	r3, [pc, #4]	; (719c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    7196:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    719a:	4770      	bx	lr
    719c:	200001bc 	.word	0x200001bc

000071a0 <nrfx_gpiote_channel_get>:
{
    71a0:	b508      	push	{r3, lr}
    71a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    71a4:	f7ff fe66 	bl	6e74 <pin_in_use_by_te>
    71a8:	b138      	cbz	r0, 71ba <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    71aa:	4b05      	ldr	r3, [pc, #20]	; (71c0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    71ac:	4805      	ldr	r0, [pc, #20]	; (71c4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    71ae:	3208      	adds	r2, #8
    71b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    71b4:	0b5b      	lsrs	r3, r3, #13
    71b6:	700b      	strb	r3, [r1, #0]
}
    71b8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    71ba:	4803      	ldr	r0, [pc, #12]	; (71c8 <nrfx_gpiote_channel_get+0x28>)
    71bc:	e7fc      	b.n	71b8 <nrfx_gpiote_channel_get+0x18>
    71be:	bf00      	nop
    71c0:	200001bc 	.word	0x200001bc
    71c4:	0bad0000 	.word	0x0bad0000
    71c8:	0bad0004 	.word	0x0bad0004

000071cc <nrfx_gpiote_init>:
{
    71cc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    71ce:	4c0f      	ldr	r4, [pc, #60]	; (720c <nrfx_gpiote_init+0x40>)
    71d0:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    71d4:	b9bd      	cbnz	r5, 7206 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    71d6:	2240      	movs	r2, #64	; 0x40
    71d8:	4629      	mov	r1, r5
    71da:	f104 0010 	add.w	r0, r4, #16
    71de:	f004 fb27 	bl	b830 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    71e2:	2006      	movs	r0, #6
    71e4:	f7fd f862 	bl	42ac <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    71e8:	4b09      	ldr	r3, [pc, #36]	; (7210 <nrfx_gpiote_init+0x44>)
    return err_code;
    71ea:	480a      	ldr	r0, [pc, #40]	; (7214 <nrfx_gpiote_init+0x48>)
    71ec:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    71f0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    71f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    71f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    71fc:	2301      	movs	r3, #1
    71fe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    7202:	6563      	str	r3, [r4, #84]	; 0x54
}
    7204:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    7206:	4804      	ldr	r0, [pc, #16]	; (7218 <nrfx_gpiote_init+0x4c>)
    7208:	e7fc      	b.n	7204 <nrfx_gpiote_init+0x38>
    720a:	bf00      	nop
    720c:	200001bc 	.word	0x200001bc
    7210:	40006000 	.word	0x40006000
    7214:	0bad0000 	.word	0x0bad0000
    7218:	0bad0005 	.word	0x0bad0005

0000721c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    721c:	4b03      	ldr	r3, [pc, #12]	; (722c <nrfx_gpiote_is_init+0x10>)
    721e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    7222:	3800      	subs	r0, #0
    7224:	bf18      	it	ne
    7226:	2001      	movne	r0, #1
    7228:	4770      	bx	lr
    722a:	bf00      	nop
    722c:	200001bc 	.word	0x200001bc

00007230 <nrfx_gpiote_channel_free>:
{
    7230:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7232:	4801      	ldr	r0, [pc, #4]	; (7238 <nrfx_gpiote_channel_free+0x8>)
    7234:	f7ff bd34 	b.w	6ca0 <nrfx_flag32_free>
    7238:	2000020c 	.word	0x2000020c

0000723c <nrfx_gpiote_channel_alloc>:
{
    723c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    723e:	4801      	ldr	r0, [pc, #4]	; (7244 <nrfx_gpiote_channel_alloc+0x8>)
    7240:	f7ff bd08 	b.w	6c54 <nrfx_flag32_alloc>
    7244:	2000020c 	.word	0x2000020c

00007248 <nrfx_gpiote_trigger_enable>:
{
    7248:	b510      	push	{r4, lr}
    724a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    724c:	f7ff fe12 	bl	6e74 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7250:	f102 0408 	add.w	r4, r2, #8
    7254:	4b1c      	ldr	r3, [pc, #112]	; (72c8 <nrfx_gpiote_trigger_enable+0x80>)
    7256:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    725a:	b1e0      	cbz	r0, 7296 <nrfx_gpiote_trigger_enable+0x4e>
    725c:	f013 0402 	ands.w	r4, r3, #2
    7260:	d119      	bne.n	7296 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7262:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7264:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    7266:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    726a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    726e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7272:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7276:	6004      	str	r4, [r0, #0]
    7278:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    727a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    727e:	f040 0001 	orr.w	r0, r0, #1
    7282:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    7286:	b129      	cbz	r1, 7294 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7288:	2201      	movs	r2, #1
    728a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    728e:	4a0f      	ldr	r2, [pc, #60]	; (72cc <nrfx_gpiote_trigger_enable+0x84>)
    7290:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    7294:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7296:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    729a:	2b04      	cmp	r3, #4
    729c:	d010      	beq.n	72c0 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    729e:	2b05      	cmp	r3, #5
    72a0:	d010      	beq.n	72c4 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    72a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    72a6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    72aa:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    72ae:	40d9      	lsrs	r1, r3
    72b0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    72b4:	3102      	adds	r1, #2
}
    72b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    72ba:	4610      	mov	r0, r2
    72bc:	f005 b805 	b.w	c2ca <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    72c0:	2103      	movs	r1, #3
    72c2:	e7f8      	b.n	72b6 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    72c4:	2102      	movs	r1, #2
    72c6:	e7f6      	b.n	72b6 <nrfx_gpiote_trigger_enable+0x6e>
    72c8:	200001bc 	.word	0x200001bc
    72cc:	40006000 	.word	0x40006000

000072d0 <nrfx_gpiote_trigger_disable>:
{
    72d0:	b508      	push	{r3, lr}
    72d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    72d4:	f7ff fdce 	bl	6e74 <pin_in_use_by_te>
    72d8:	b1c0      	cbz	r0, 730c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    72da:	f102 0108 	add.w	r1, r2, #8
    72de:	4b0e      	ldr	r3, [pc, #56]	; (7318 <nrfx_gpiote_trigger_disable+0x48>)
    72e0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    72e4:	0799      	lsls	r1, r3, #30
    72e6:	d411      	bmi.n	730c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    72e8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    72ea:	2201      	movs	r2, #1
    72ec:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    72ee:	009b      	lsls	r3, r3, #2
    72f0:	490a      	ldr	r1, [pc, #40]	; (731c <nrfx_gpiote_trigger_disable+0x4c>)
    72f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    72f6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    72fa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    72fe:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    7302:	f022 0203 	bic.w	r2, r2, #3
    7306:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    730a:	bd08      	pop	{r3, pc}
    730c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7310:	2100      	movs	r1, #0
    7312:	4610      	mov	r0, r2
    7314:	f004 bfd9 	b.w	c2ca <nrf_gpio_cfg_sense_set>
    7318:	200001bc 	.word	0x200001bc
    731c:	40006000 	.word	0x40006000

00007320 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7320:	4b0d      	ldr	r3, [pc, #52]	; (7358 <nrfx_gpiote_pin_uninit+0x38>)
    7322:	f100 0208 	add.w	r2, r0, #8
{
    7326:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7328:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    732c:	07db      	lsls	r3, r3, #31
{
    732e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    7330:	d50f      	bpl.n	7352 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    7332:	f7ff ffcd 	bl	72d0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    7336:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    7338:	f004 041f 	and.w	r4, r4, #31
    733c:	f7ff fdec 	bl	6f18 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    7340:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    7344:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7348:	2202      	movs	r2, #2
    734a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    734e:	4803      	ldr	r0, [pc, #12]	; (735c <nrfx_gpiote_pin_uninit+0x3c>)
}
    7350:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7352:	4803      	ldr	r0, [pc, #12]	; (7360 <nrfx_gpiote_pin_uninit+0x40>)
    7354:	e7fc      	b.n	7350 <nrfx_gpiote_pin_uninit+0x30>
    7356:	bf00      	nop
    7358:	200001bc 	.word	0x200001bc
    735c:	0bad0000 	.word	0x0bad0000
    7360:	0bad0004 	.word	0x0bad0004

00007364 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7368:	4b4e      	ldr	r3, [pc, #312]	; (74a4 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    736a:	484f      	ldr	r0, [pc, #316]	; (74a8 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    736c:	494f      	ldr	r1, [pc, #316]	; (74ac <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    736e:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7370:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7372:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7374:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7376:	b136      	cbz	r6, 7386 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    7378:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    737c:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    737e:	bf1e      	ittt	ne
    7380:	601c      	strne	r4, [r3, #0]
    7382:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    7384:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7386:	3304      	adds	r3, #4
    7388:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    738a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    738e:	d1f1      	bne.n	7374 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7390:	4b45      	ldr	r3, [pc, #276]	; (74a8 <nrfx_gpiote_irq_handler+0x144>)
    7392:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    7396:	b1bb      	cbz	r3, 73c8 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    7398:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    739c:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    73a0:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    73a2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    73a6:	af01      	add	r7, sp, #4
    73a8:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    73ac:	9c01      	ldr	r4, [sp, #4]
    73ae:	b96c      	cbnz	r4, 73cc <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    73b0:	4b3d      	ldr	r3, [pc, #244]	; (74a8 <nrfx_gpiote_irq_handler+0x144>)
    73b2:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    73b6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    73ba:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    73be:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    73c0:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    73c4:	2b00      	cmp	r3, #0
    73c6:	d1ee      	bne.n	73a6 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    73c8:	2401      	movs	r4, #1
    73ca:	e066      	b.n	749a <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    73cc:	fa94 f4a4 	rbit	r4, r4
    73d0:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    73d4:	4a36      	ldr	r2, [pc, #216]	; (74b0 <nrfx_gpiote_irq_handler+0x14c>)
    73d6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    73da:	08e0      	lsrs	r0, r4, #3
    73dc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    73e0:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    73e4:	fa08 f203 	lsl.w	r2, r8, r3
    73e8:	5c3b      	ldrb	r3, [r7, r0]
    73ea:	ea23 0302 	bic.w	r3, r3, r2
    73ee:	543b      	strb	r3, [r7, r0]
    73f0:	00a3      	lsls	r3, r4, #2
    73f2:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    73f6:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    73fa:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    73fe:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7400:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    7402:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    7406:	d518      	bpl.n	743a <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    7408:	4659      	mov	r1, fp
    740a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    740c:	fa5f fa82 	uxtb.w	sl, r2
    7410:	f7ff fd3a 	bl	6e88 <call_handler>
    7414:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7418:	f3c3 4301 	ubfx	r3, r3, #16, #2
    741c:	459a      	cmp	sl, r3
    741e:	d107      	bne.n	7430 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7420:	2100      	movs	r1, #0
    7422:	4620      	mov	r0, r4
    7424:	f004 ff51 	bl	c2ca <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    7428:	4651      	mov	r1, sl
    742a:	4620      	mov	r0, r4
    742c:	f004 ff4d 	bl	c2ca <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    7430:	fa08 f404 	lsl.w	r4, r8, r4
    7434:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    7438:	e7b8      	b.n	73ac <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    743a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    743c:	bf0c      	ite	eq
    743e:	2103      	moveq	r1, #3
    7440:	2102      	movne	r1, #2
    7442:	4620      	mov	r0, r4
    7444:	f004 ff41 	bl	c2ca <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7448:	f1ba 0f03 	cmp.w	sl, #3
    744c:	d004      	beq.n	7458 <nrfx_gpiote_irq_handler+0xf4>
    744e:	2a02      	cmp	r2, #2
    7450:	d107      	bne.n	7462 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7452:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7456:	d1eb      	bne.n	7430 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    7458:	4659      	mov	r1, fp
    745a:	4620      	mov	r0, r4
    745c:	f7ff fd14 	bl	6e88 <call_handler>
    7460:	e7e6      	b.n	7430 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7462:	2a03      	cmp	r2, #3
    7464:	d1e4      	bne.n	7430 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7466:	f1ba 0f02 	cmp.w	sl, #2
    746a:	e7f4      	b.n	7456 <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    746c:	fa95 f3a5 	rbit	r3, r5
    7470:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7474:	fa04 f203 	lsl.w	r2, r4, r3
    7478:	009b      	lsls	r3, r3, #2
    747a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    747e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7482:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7486:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    748a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    748e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    7492:	f3c1 4101 	ubfx	r1, r1, #16, #2
    7496:	f7ff fcf7 	bl	6e88 <call_handler>
    while (mask)
    749a:	2d00      	cmp	r5, #0
    749c:	d1e6      	bne.n	746c <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    749e:	b003      	add	sp, #12
    74a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74a4:	40006100 	.word	0x40006100
    74a8:	40006000 	.word	0x40006000
    74ac:	40006120 	.word	0x40006120
    74b0:	200001bc 	.word	0x200001bc

000074b4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    74b4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    74b6:	4801      	ldr	r0, [pc, #4]	; (74bc <nrfx_ppi_channel_alloc+0x8>)
    74b8:	f7ff bbcc 	b.w	6c54 <nrfx_flag32_alloc>
    74bc:	20000218 	.word	0x20000218

000074c0 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    74c0:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    74c2:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    74c6:	b087      	sub	sp, #28
    74c8:	4604      	mov	r4, r0
    74ca:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    74cc:	b1f3      	cbz	r3, 750c <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74ce:	2300      	movs	r3, #0
    74d0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    74d4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    74d8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    74dc:	b9b3      	cbnz	r3, 750c <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    74de:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
    74e0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    74e4:	2302      	movs	r3, #2
    74e6:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    74e8:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    74ea:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    74ee:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    74f2:	b11b      	cbz	r3, 74fc <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    74f4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    74f8:	059f      	lsls	r7, r3, #22
    74fa:	d402      	bmi.n	7502 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74fc:	2301      	movs	r3, #1
    74fe:	6223      	str	r3, [r4, #32]
    7500:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
    7502:	2301      	movs	r3, #1
    7504:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
    7508:	b007      	add	sp, #28
    750a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    750c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    7510:	2b00      	cmp	r3, #0
    7512:	d044      	beq.n	759e <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7514:	2300      	movs	r3, #0
    7516:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    751a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    751e:	6a2b      	ldr	r3, [r5, #32]
    7520:	065e      	lsls	r6, r3, #25
    7522:	d40a      	bmi.n	753a <twim_irq_handler+0x7a>
    7524:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    7528:	b93b      	cbnz	r3, 753a <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    752a:	4629      	mov	r1, r5
    752c:	4620      	mov	r0, r4
    752e:	f004 feda 	bl	c2e6 <xfer_completeness_check>
    7532:	f080 0001 	eor.w	r0, r0, #1
    7536:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    753a:	6a2b      	ldr	r3, [r5, #32]
    753c:	f013 0c04 	ands.w	ip, r3, #4
    7540:	d13e      	bne.n	75c0 <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
    7542:	f105 070c 	add.w	r7, r5, #12
    7546:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    7548:	ae01      	add	r6, sp, #4
    754a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
    754c:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    7550:	683b      	ldr	r3, [r7, #0]
    7552:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
    7556:	6033      	str	r3, [r6, #0]
    7558:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    755c:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
    7560:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    7564:	f1be 0f00 	cmp.w	lr, #0
    7568:	d002      	beq.n	7570 <twim_irq_handler+0xb0>
    756a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    756e:	b33b      	cbz	r3, 75c0 <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
    7570:	2300      	movs	r3, #0
    7572:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    7576:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    7578:	4b2e      	ldr	r3, [pc, #184]	; (7634 <twim_irq_handler+0x174>)
    757a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    757e:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    7582:	2b00      	cmp	r3, #0
    7584:	ea4f 3214 	mov.w	r2, r4, lsr #12
    7588:	db1a      	blt.n	75c0 <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    758a:	f002 011f 	and.w	r1, r2, #31
    758e:	095b      	lsrs	r3, r3, #5
    7590:	2201      	movs	r2, #1
    7592:	408a      	lsls	r2, r1
    7594:	3360      	adds	r3, #96	; 0x60
    7596:	4928      	ldr	r1, [pc, #160]	; (7638 <twim_irq_handler+0x178>)
    7598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    759c:	e010      	b.n	75c0 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    759e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    75a2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    75a6:	7b2b      	ldrb	r3, [r5, #12]
    75a8:	bb23      	cbnz	r3, 75f4 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
    75aa:	f105 070c 	add.w	r7, r5, #12
    75ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    75b0:	ae01      	add	r6, sp, #4
    75b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    75b4:	683b      	ldr	r3, [r7, #0]
    75b6:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    75b8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    75bc:	2b00      	cmp	r3, #0
    75be:	d0d8      	beq.n	7572 <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
    75c0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    75c4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    75c8:	0798      	lsls	r0, r3, #30
    75ca:	d525      	bpl.n	7618 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    75cc:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    75ce:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    75d2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    75d6:	b90b      	cbnz	r3, 75dc <twim_irq_handler+0x11c>
        p_cb->busy = false;
    75d8:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    75dc:	6a2b      	ldr	r3, [r5, #32]
    75de:	075b      	lsls	r3, r3, #29
    75e0:	d503      	bpl.n	75ea <twim_irq_handler+0x12a>
    75e2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    75e6:	2b00      	cmp	r3, #0
    75e8:	d08e      	beq.n	7508 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
    75ea:	e9d5 3100 	ldrd	r3, r1, [r5]
    75ee:	4668      	mov	r0, sp
    75f0:	4798      	blx	r3
    75f2:	e789      	b.n	7508 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
    75f4:	f44f 7300 	mov.w	r3, #512	; 0x200
    75f8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    75fc:	f240 2302 	movw	r3, #514	; 0x202
    7600:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    7602:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    7606:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    760a:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    760c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7610:	2301      	movs	r3, #1
    7612:	60a3      	str	r3, [r4, #8]
    7614:	6223      	str	r3, [r4, #32]
            return;
    7616:	e777      	b.n	7508 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    7618:	0759      	lsls	r1, r3, #29
    761a:	d501      	bpl.n	7620 <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    761c:	2302      	movs	r3, #2
    761e:	e7d6      	b.n	75ce <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    7620:	07da      	lsls	r2, r3, #31
    7622:	d501      	bpl.n	7628 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    7624:	2303      	movs	r3, #3
    7626:	e7d2      	b.n	75ce <twim_irq_handler+0x10e>
    else if (p_cb->error)
    7628:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    762c:	2b00      	cmp	r3, #0
    762e:	d0ce      	beq.n	75ce <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    7630:	2304      	movs	r3, #4
    7632:	e7cc      	b.n	75ce <twim_irq_handler+0x10e>
    7634:	019c0202 	.word	0x019c0202
    7638:	e000e100 	.word	0xe000e100

0000763c <nrfx_twim_init>:
{
    763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    763e:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7640:	4d23      	ldr	r5, [pc, #140]	; (76d0 <nrfx_twim_init+0x94>)
    7642:	f04f 0c34 	mov.w	ip, #52	; 0x34
    7646:	fb0c fc06 	mul.w	ip, ip, r6
    764a:	eb05 040c 	add.w	r4, r5, ip
    764e:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    7652:	2f00      	cmp	r7, #0
    7654:	d13a      	bne.n	76cc <nrfx_twim_init+0x90>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    7656:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    7658:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    765a:	7b4b      	ldrb	r3, [r1, #13]
    765c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    7660:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    7662:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
    7664:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    7668:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    766c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    p_cb->handler         = event_handler;
    7670:	f845 200c 	str.w	r2, [r5, ip]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    7674:	7bcc      	ldrb	r4, [r1, #15]
    7676:	b1b3      	cbz	r3, 76a6 <nrfx_twim_init+0x6a>
    7678:	b92c      	cbnz	r4, 7686 <nrfx_twim_init+0x4a>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    767a:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    767e:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    7682:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    7686:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    7688:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    768c:	b11a      	cbz	r2, 7696 <nrfx_twim_init+0x5a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    768e:	f340 3007 	sbfx	r0, r0, #12, #8
    7692:	f7fc fe0b 	bl	42ac <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7696:	2334      	movs	r3, #52	; 0x34
    7698:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
    769c:	480d      	ldr	r0, [pc, #52]	; (76d4 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    769e:	2301      	movs	r3, #1
    76a0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    76a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    76a6:	680b      	ldr	r3, [r1, #0]
    76a8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    76ac:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    76b0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    76b4:	f240 6c0c 	movw	ip, #1548	; 0x60c
    76b8:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    76bc:	684b      	ldr	r3, [r1, #4]
    76be:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    76c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    76c6:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    76ca:	e7d5      	b.n	7678 <nrfx_twim_init+0x3c>
        return err_code;
    76cc:	4802      	ldr	r0, [pc, #8]	; (76d8 <nrfx_twim_init+0x9c>)
    76ce:	e7e9      	b.n	76a4 <nrfx_twim_init+0x68>
    76d0:	2000198c 	.word	0x2000198c
    76d4:	0bad0000 	.word	0x0bad0000
    76d8:	0bad0005 	.word	0x0bad0005

000076dc <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
    76dc:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    76de:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    76e0:	2106      	movs	r1, #6
    76e2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    76e6:	4b04      	ldr	r3, [pc, #16]	; (76f8 <nrfx_twim_enable+0x1c>)
    76e8:	2134      	movs	r1, #52	; 0x34
    76ea:	fb01 3302 	mla	r3, r1, r2, r3
    76ee:	2202      	movs	r2, #2
    76f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    76f4:	4770      	bx	lr
    76f6:	bf00      	nop
    76f8:	2000198c 	.word	0x2000198c

000076fc <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    76fc:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
    76fe:	4b0c      	ldr	r3, [pc, #48]	; (7730 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    7700:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    7702:	2034      	movs	r0, #52	; 0x34
    7704:	fb00 3301 	mla	r3, r0, r1, r3
    7708:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    770a:	480a      	ldr	r0, [pc, #40]	; (7734 <nrfx_twim_disable+0x38>)
    770c:	6099      	str	r1, [r3, #8]
    770e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    7712:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    7716:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    771a:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    771e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7722:	2201      	movs	r2, #1
    7724:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    7728:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    772c:	4770      	bx	lr
    772e:	bf00      	nop
    7730:	2000198c 	.word	0x2000198c
    7734:	019c0202 	.word	0x019c0202

00007738 <nrfx_twim_uninit>:
{
    7738:	b570      	push	{r4, r5, r6, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    773a:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
    773c:	4d18      	ldr	r5, [pc, #96]	; (77a0 <nrfx_twim_uninit+0x68>)
    773e:	2334      	movs	r3, #52	; 0x34
    7740:	4373      	muls	r3, r6
{
    7742:	4604      	mov	r4, r0
    if (p_cb->handler)
    7744:	58eb      	ldr	r3, [r5, r3]
    7746:	b123      	cbz	r3, 7752 <nrfx_twim_uninit+0x1a>
    7748:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
    774a:	f340 3007 	sbfx	r0, r0, #12, #8
    774e:	f7fc fdbd 	bl	42cc <arch_irq_disable>
    nrfx_twim_disable(p_instance);
    7752:	4620      	mov	r0, r4
    7754:	f7ff ffd2 	bl	76fc <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
    7758:	2334      	movs	r3, #52	; 0x34
    775a:	fb03 5306 	mla	r3, r3, r6, r5
    775e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    7762:	b9b2      	cbnz	r2, 7792 <nrfx_twim_uninit+0x5a>
    7764:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    7768:	b99b      	cbnz	r3, 7792 <nrfx_twim_uninit+0x5a>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
    776a:	6820      	ldr	r0, [r4, #0]
    return p_reg->PSEL.SCL;
    776c:	f8d0 3508 	ldr.w	r3, [r0, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    7770:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7774:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7778:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    777c:	2102      	movs	r1, #2
    777e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSEL.SDA;
    7782:	f8d0 350c 	ldr.w	r3, [r0, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    7786:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    778a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    778e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    7792:	2334      	movs	r3, #52	; 0x34
    7794:	fb03 5506 	mla	r5, r3, r6, r5
    7798:	2300      	movs	r3, #0
    779a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    779e:	bd70      	pop	{r4, r5, r6, pc}
    77a0:	2000198c 	.word	0x2000198c

000077a4 <nrfx_twim_xfer>:
{
    77a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    77a8:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 7a7c <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    77ac:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    77b0:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    77b2:	2334      	movs	r3, #52	; 0x34
    77b4:	fb03 c30e 	mla	r3, r3, lr, ip
{
    77b8:	4617      	mov	r7, r2
    p_cb->error = false;
    77ba:	2200      	movs	r2, #0
    77bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    77c0:	684b      	ldr	r3, [r1, #4]
{
    77c2:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    77c4:	b14b      	cbz	r3, 77da <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    77c6:	68cb      	ldr	r3, [r1, #12]
    77c8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    77cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    77d0:	d003      	beq.n	77da <nrfx_twim_xfer+0x36>
        return err_code;
    77d2:	4eab      	ldr	r6, [pc, #684]	; (7a80 <nrfx_twim_xfer+0x2dc>)
}
    77d4:	4630      	mov	r0, r6
    77d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    77da:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    77dc:	4ba9      	ldr	r3, [pc, #676]	; (7a84 <nrfx_twim_xfer+0x2e0>)
    77de:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    77e2:	fb06 c60e 	mla	r6, r6, lr, ip
    77e6:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    77ea:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    77ee:	b123      	cbz	r3, 77fa <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    77f0:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    77f2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    77f6:	4ea4      	ldr	r6, [pc, #656]	; (7a88 <nrfx_twim_xfer+0x2e4>)
    77f8:	e7ec      	b.n	77d4 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    77fa:	f017 0f14 	tst.w	r7, #20
    77fe:	bf0c      	ite	eq
    7800:	2301      	moveq	r3, #1
    7802:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    7804:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    7808:	46a9      	mov	r9, r5
    780a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    780e:	f106 080c 	add.w	r8, r6, #12
    7812:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    7816:	f8d9 3000 	ldr.w	r3, [r9]
    781a:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    781e:	f3c7 1300 	ubfx	r3, r7, #4, #1
    7822:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    7826:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
    7828:	786b      	ldrb	r3, [r5, #1]
    782a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    782e:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    7832:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    7836:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    783a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    783e:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    7842:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    7846:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    784a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    784e:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    7852:	bf18      	it	ne
    7854:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    7856:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    785a:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    785e:	bf18      	it	ne
    7860:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    7862:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    7866:	782a      	ldrb	r2, [r5, #0]
    7868:	2a03      	cmp	r2, #3
    786a:	f200 80b5 	bhi.w	79d8 <nrfx_twim_xfer+0x234>
    786e:	e8df f002 	tbb	[pc, r2]
    7872:	a084      	.short	0xa084
    7874:	0269      	.short	0x0269
    7876:	692b      	ldr	r3, [r5, #16]
    7878:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    787c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    7880:	d1a7      	bne.n	77d2 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    7882:	f44f 7180 	mov.w	r1, #256	; 0x100
    7886:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    788a:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    788c:	6869      	ldr	r1, [r5, #4]
    788e:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    7892:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7896:	2100      	movs	r1, #0
    7898:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    789c:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    78a0:	2001      	movs	r0, #1
    78a2:	6220      	str	r0, [r4, #32]
    78a4:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    78a6:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    78aa:	2800      	cmp	r0, #0
    78ac:	d0fb      	beq.n	78a6 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78ae:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    78b2:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    78b6:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    78b8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    78bc:	2334      	movs	r3, #52	; 0x34
    78be:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
    78c2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    78c6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    78ca:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    78cc:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    78ce:	4e6f      	ldr	r6, [pc, #444]	; (7a8c <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    78d0:	0739      	lsls	r1, r7, #28
    78d2:	d406      	bmi.n	78e2 <nrfx_twim_xfer+0x13e>
    78d4:	2a03      	cmp	r2, #3
    78d6:	d004      	beq.n	78e2 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    78d8:	2201      	movs	r2, #1
    78da:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    78dc:	686b      	ldr	r3, [r5, #4]
    78de:	b903      	cbnz	r3, 78e2 <nrfx_twim_xfer+0x13e>
    78e0:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    78e2:	2334      	movs	r3, #52	; 0x34
    78e4:	fb03 f30e 	mul.w	r3, r3, lr
    78e8:	eb0c 0103 	add.w	r1, ip, r3
    78ec:	f85c 2003 	ldr.w	r2, [ip, r3]
    78f0:	2a00      	cmp	r2, #0
    78f2:	d174      	bne.n	79de <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
    78f4:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    78f6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    78fa:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    78fe:	2800      	cmp	r0, #0
    7900:	f040 8088 	bne.w	7a14 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    7904:	3b00      	subs	r3, #0
    7906:	bf18      	it	ne
    7908:	2301      	movne	r3, #1
    790a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    790e:	2800      	cmp	r0, #0
    7910:	f000 8086 	beq.w	7a20 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7914:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    7918:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    791c:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    7920:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    7924:	b115      	cbz	r5, 792c <nrfx_twim_xfer+0x188>
    7926:	f410 7f00 	tst.w	r0, #512	; 0x200
    792a:	d104      	bne.n	7936 <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    792c:	6221      	str	r1, [r4, #32]
    792e:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    7930:	2d00      	cmp	r5, #0
    7932:	d0e0      	beq.n	78f6 <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
    7934:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    7936:	05c0      	lsls	r0, r0, #23
    7938:	d572      	bpl.n	7a20 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    793a:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    793e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    7942:	e7d8      	b.n	78f6 <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    7944:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7946:	68e9      	ldr	r1, [r5, #12]
    7948:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    794c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    7950:	692b      	ldr	r3, [r5, #16]
    7952:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    7956:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    795a:	f47f af3a 	bne.w	77d2 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    795e:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7960:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    7964:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    7968:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    796c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    7970:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    7972:	fb03 c30e 	mla	r3, r3, lr, ip
    7976:	2102      	movs	r1, #2
    7978:	e012      	b.n	79a0 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    797a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    797c:	68e9      	ldr	r1, [r5, #12]
    797e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    7982:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    7986:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    798a:	f04f 0334 	mov.w	r3, #52	; 0x34
    798e:	d00b      	beq.n	79a8 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
    7990:	f44f 7180 	mov.w	r1, #256	; 0x100
    7994:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    7998:	fb03 c30e 	mla	r3, r3, lr, ip
    799c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    79a0:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    79a2:	2301      	movs	r3, #1
    79a4:	6223      	str	r3, [r4, #32]
    79a6:	e791      	b.n	78cc <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
    79a8:	f44f 7100 	mov.w	r1, #512	; 0x200
    79ac:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    79b0:	e7df      	b.n	7972 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    79b2:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    79b4:	68e9      	ldr	r1, [r5, #12]
    79b6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    79ba:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    79be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    79c2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    79c6:	2334      	movs	r3, #52	; 0x34
    79c8:	fb03 c30e 	mla	r3, r3, lr, ip
    79cc:	2102      	movs	r1, #2
    79ce:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    79d0:	2301      	movs	r3, #1
    79d2:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    79d4:	2300      	movs	r3, #0
    79d6:	e77a      	b.n	78ce <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
    79d8:	4e2d      	ldr	r6, [pc, #180]	; (7a90 <nrfx_twim_xfer+0x2ec>)
    79da:	2308      	movs	r3, #8
    79dc:	e778      	b.n	78d0 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    79de:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
    79e0:	bf44      	itt	mi
    79e2:	2300      	movmi	r3, #0
    79e4:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    79e6:	067b      	lsls	r3, r7, #25
    79e8:	d406      	bmi.n	79f8 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    79ea:	2334      	movs	r3, #52	; 0x34
    79ec:	fb03 c30e 	mla	r3, r3, lr, ip
    79f0:	689a      	ldr	r2, [r3, #8]
    79f2:	f042 0202 	orr.w	r2, r2, #2
    79f6:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    79f8:	2334      	movs	r3, #52	; 0x34
    79fa:	fb03 cc0e 	mla	ip, r3, lr, ip
    79fe:	f8dc 3008 	ldr.w	r3, [ip, #8]
    7a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7a06:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    7a0a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
    7a0e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    7a12:	e6df      	b.n	77d4 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a14:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    7a18:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    7a1c:	2301      	movs	r3, #1
    7a1e:	e774      	b.n	790a <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
    7a20:	2b00      	cmp	r3, #0
    7a22:	f43f af68 	beq.w	78f6 <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
    7a26:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    7a28:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    7a2c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    7a30:	fb01 c20e 	mla	r2, r1, lr, ip
    7a34:	2000      	movs	r0, #0
    7a36:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    7a3a:	b18b      	cbz	r3, 7a60 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    7a3c:	4a15      	ldr	r2, [pc, #84]	; (7a94 <nrfx_twim_xfer+0x2f0>)
    7a3e:	4e16      	ldr	r6, [pc, #88]	; (7a98 <nrfx_twim_xfer+0x2f4>)
    7a40:	f013 0f01 	tst.w	r3, #1
    7a44:	bf18      	it	ne
    7a46:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    7a48:	f013 0f02 	tst.w	r3, #2
    7a4c:	f102 0201 	add.w	r2, r2, #1
    7a50:	bf18      	it	ne
    7a52:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    7a54:	f013 0f04 	tst.w	r3, #4
    7a58:	4b10      	ldr	r3, [pc, #64]	; (7a9c <nrfx_twim_xfer+0x2f8>)
    7a5a:	bf18      	it	ne
    7a5c:	461e      	movne	r6, r3
    7a5e:	e6b9      	b.n	77d4 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    7a60:	067b      	lsls	r3, r7, #25
    7a62:	f53f aeb7 	bmi.w	77d4 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    7a66:	fb0e c101 	mla	r1, lr, r1, ip
    7a6a:	4620      	mov	r0, r4
    7a6c:	f004 fc3b 	bl	c2e6 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    7a70:	4b09      	ldr	r3, [pc, #36]	; (7a98 <nrfx_twim_xfer+0x2f4>)
    7a72:	2800      	cmp	r0, #0
    7a74:	bf08      	it	eq
    7a76:	461e      	moveq	r6, r3
    7a78:	e6ac      	b.n	77d4 <nrfx_twim_xfer+0x30>
    7a7a:	bf00      	nop
    7a7c:	2000198c 	.word	0x2000198c
    7a80:	0bad000a 	.word	0x0bad000a
    7a84:	019c0202 	.word	0x019c0202
    7a88:	0bad000b 	.word	0x0bad000b
    7a8c:	0bad0000 	.word	0x0bad0000
    7a90:	0bad0004 	.word	0x0bad0004
    7a94:	0bae0000 	.word	0x0bae0000
    7a98:	0bad0001 	.word	0x0bad0001
    7a9c:	0bae0002 	.word	0x0bae0002

00007aa0 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    7aa0:	4901      	ldr	r1, [pc, #4]	; (7aa8 <nrfx_twim_0_irq_handler+0x8>)
    7aa2:	4802      	ldr	r0, [pc, #8]	; (7aac <nrfx_twim_0_irq_handler+0xc>)
    7aa4:	f7ff bd0c 	b.w	74c0 <twim_irq_handler>
    7aa8:	2000198c 	.word	0x2000198c
    7aac:	40003000 	.word	0x40003000

00007ab0 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    7ab0:	4902      	ldr	r1, [pc, #8]	; (7abc <nrfx_twim_1_irq_handler+0xc>)
    7ab2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    7ab6:	f7ff bd03 	b.w	74c0 <twim_irq_handler>
    7aba:	bf00      	nop
    7abc:	200019c0 	.word	0x200019c0

00007ac0 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    7ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    7ac4:	f000 001f 	and.w	r0, r0, #31
    7ac8:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7acc:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
    7ace:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7ad2:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
    7ad6:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    7ada:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    7ade:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7ae2:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
    7ae4:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
    7ae8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    7aec:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
    7af0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    7af4:	2004      	movs	r0, #4
    7af6:	f004 fbdc 	bl	c2b2 <nrfx_busy_wait>
    7afa:	2709      	movs	r7, #9
    return p_reg->IN;
    7afc:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    7b00:	421c      	tst	r4, r3
    7b02:	d10d      	bne.n	7b20 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    7b04:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
    7b06:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
    7b0a:	f004 fbd2 	bl	c2b2 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    7b0e:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
    7b10:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    7b14:	2004      	movs	r0, #4
    7b16:	f004 fbcc 	bl	c2b2 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    7b1a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    7b1e:	d1ed      	bne.n	7afc <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
    7b20:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    7b24:	2004      	movs	r0, #4
    7b26:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    7b2a:	f004 fbc2 	bl	c2b2 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    7b2e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    7b32:	2004      	movs	r0, #4
    7b34:	f004 fbbd 	bl	c2b2 <nrfx_busy_wait>
    return p_reg->IN;
    7b38:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
    7b3c:	4803      	ldr	r0, [pc, #12]	; (7b4c <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7b3e:	fa21 f606 	lsr.w	r6, r1, r6
    7b42:	f006 0601 	and.w	r6, r6, #1
    7b46:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    7b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b4c:	0bad0001 	.word	0x0bad0001

00007b50 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    7b50:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7b52:	4c14      	ldr	r4, [pc, #80]	; (7ba4 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    7b54:	4a14      	ldr	r2, [pc, #80]	; (7ba8 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    7b56:	4915      	ldr	r1, [pc, #84]	; (7bac <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7b58:	2303      	movs	r3, #3
    7b5a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    7b5c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7b5e:	4b14      	ldr	r3, [pc, #80]	; (7bb0 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    7b60:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7b62:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    7b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
    7b68:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    7b6a:	2300      	movs	r3, #0
    7b6c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    7b6e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7b70:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    7b72:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    7b74:	4a0f      	ldr	r2, [pc, #60]	; (7bb4 <_DoInit+0x64>)
    7b76:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    7b78:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    7b7a:	2210      	movs	r2, #16
    7b7c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    7b7e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    7b80:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7b82:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    7b84:	f003 fdc9 	bl	b71a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7b88:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    7b8c:	490a      	ldr	r1, [pc, #40]	; (7bb8 <_DoInit+0x68>)
    7b8e:	4620      	mov	r0, r4
    7b90:	f003 fdc3 	bl	b71a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7b94:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    7b98:	2320      	movs	r3, #32
    7b9a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    7b9c:	f3bf 8f5f 	dmb	sy
}
    7ba0:	bd10      	pop	{r4, pc}
    7ba2:	bf00      	nop
    7ba4:	200019f4 	.word	0x200019f4
    7ba8:	0000f4da 	.word	0x0000f4da
    7bac:	0000f4e3 	.word	0x0000f4e3
    7bb0:	20001b77 	.word	0x20001b77
    7bb4:	20001b67 	.word	0x20001b67
    7bb8:	0000f4e7 	.word	0x0000f4e7

00007bbc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
    7bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
    7bc0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 7c40 <SEGGER_RTT_ReadNoLock+0x84>
    7bc4:	f898 3000 	ldrb.w	r3, [r8]
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
    7bc8:	4682      	mov	sl, r0
    7bca:	4689      	mov	r9, r1
    7bcc:	4616      	mov	r6, r2
  INIT();
    7bce:	b90b      	cbnz	r3, 7bd4 <SEGGER_RTT_ReadNoLock+0x18>
    7bd0:	f7ff ffbe 	bl	7b50 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  pBuffer = (unsigned char*)pData;
  RdOff = pRing->RdOff;
    7bd4:	2718      	movs	r7, #24
    7bd6:	fb07 870a 	mla	r7, r7, sl, r8
    7bda:	6f3d      	ldr	r5, [r7, #112]	; 0x70
  WrOff = pRing->WrOff;
    7bdc:	f8d7 b06c 	ldr.w	fp, [r7, #108]	; 0x6c
  NumBytesRead = 0u;
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
    7be0:	455d      	cmp	r5, fp
    7be2:	d92b      	bls.n	7c3c <SEGGER_RTT_ReadNoLock+0x80>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
    7be4:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    NumBytesRem = MIN(NumBytesRem, BufferSize);
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
    7be6:	6e79      	ldr	r1, [r7, #100]	; 0x64
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
    7be8:	1b64      	subs	r4, r4, r5
    NumBytesRem = MIN(NumBytesRem, BufferSize);
    7bea:	42b4      	cmp	r4, r6
    7bec:	bf28      	it	cs
    7bee:	4634      	movcs	r4, r6
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
    7bf0:	4429      	add	r1, r5
    7bf2:	4648      	mov	r0, r9
    7bf4:	4622      	mov	r2, r4
    7bf6:	f003 fe10 	bl	b81a <memcpy>
    RdOff        += NumBytesRem;
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
    7bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    RdOff        += NumBytesRem;
    7bfc:	4425      	add	r5, r4
    pBuffer      += NumBytesRem;
    7bfe:	44a1      	add	r9, r4
    BufferSize   -= NumBytesRem;
    7c00:	1b36      	subs	r6, r6, r4
      RdOff = 0u;
    7c02:	42ab      	cmp	r3, r5
    7c04:	bf08      	it	eq
    7c06:	2500      	moveq	r5, #0
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
    7c08:	ebab 0205 	sub.w	r2, fp, r5
  NumBytesRem = MIN(NumBytesRem, BufferSize);
    7c0c:	4296      	cmp	r6, r2
    7c0e:	bf28      	it	cs
    7c10:	4616      	movcs	r6, r2
  if (NumBytesRem > 0u) {
    7c12:	b156      	cbz	r6, 7c2a <SEGGER_RTT_ReadNoLock+0x6e>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
    7c14:	2318      	movs	r3, #24
    7c16:	fb03 830a 	mla	r3, r3, sl, r8
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
    7c1a:	4632      	mov	r2, r6
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
    7c1c:	6e59      	ldr	r1, [r3, #100]	; 0x64
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
    7c1e:	4648      	mov	r0, r9
    7c20:	4429      	add	r1, r5
    7c22:	f003 fdfa 	bl	b81a <memcpy>
    NumBytesRead += NumBytesRem;
    7c26:	4434      	add	r4, r6
    pBuffer      += NumBytesRem;
    BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
    7c28:	4435      	add	r5, r6
#endif
  }
  if (NumBytesRead) {
    7c2a:	b124      	cbz	r4, 7c36 <SEGGER_RTT_ReadNoLock+0x7a>
    pRing->RdOff = RdOff;
    7c2c:	2018      	movs	r0, #24
    7c2e:	fb00 880a 	mla	r8, r0, sl, r8
    7c32:	f8c8 5070 	str.w	r5, [r8, #112]	; 0x70
  }
  //
  return NumBytesRead;
}
    7c36:	4620      	mov	r0, r4
    7c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  NumBytesRead = 0u;
    7c3c:	2400      	movs	r4, #0
    7c3e:	e7e3      	b.n	7c08 <SEGGER_RTT_ReadNoLock+0x4c>
    7c40:	200019f4 	.word	0x200019f4

00007c44 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7c44:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    7c46:	4b16      	ldr	r3, [pc, #88]	; (7ca0 <SEGGER_RTT_WriteNoLock+0x5c>)
    7c48:	2418      	movs	r4, #24
    7c4a:	fb00 4504 	mla	r5, r0, r4, r4
    7c4e:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    7c50:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7c54:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    7c56:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    7c58:	2c01      	cmp	r4, #1
    7c5a:	d00e      	beq.n	7c7a <SEGGER_RTT_WriteNoLock+0x36>
    7c5c:	2c02      	cmp	r4, #2
    7c5e:	d018      	beq.n	7c92 <SEGGER_RTT_WriteNoLock+0x4e>
    7c60:	b9e4      	cbnz	r4, 7c9c <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    7c62:	4628      	mov	r0, r5
    7c64:	f004 fb6f 	bl	c346 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    7c68:	4286      	cmp	r6, r0
    7c6a:	d804      	bhi.n	7c76 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    7c6c:	4632      	mov	r2, r6
    7c6e:	4628      	mov	r0, r5
    7c70:	f004 fb72 	bl	c358 <_WriteNoCheck>
    7c74:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    7c76:	4620      	mov	r0, r4
    7c78:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    7c7a:	4628      	mov	r0, r5
    7c7c:	f004 fb63 	bl	c346 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    7c80:	4286      	cmp	r6, r0
    7c82:	4634      	mov	r4, r6
    7c84:	bf28      	it	cs
    7c86:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    7c88:	4622      	mov	r2, r4
    7c8a:	4628      	mov	r0, r5
    7c8c:	f004 fb64 	bl	c358 <_WriteNoCheck>
    break;
    7c90:	e7f1      	b.n	7c76 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    7c92:	4628      	mov	r0, r5
}
    7c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    7c98:	f004 bb7c 	b.w	c394 <_WriteBlocking>
  switch (pRing->Flags) {
    7c9c:	2400      	movs	r4, #0
  return Status;
    7c9e:	e7ea      	b.n	7c76 <SEGGER_RTT_WriteNoLock+0x32>
    7ca0:	200019f4 	.word	0x200019f4

00007ca4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned Status;

  INIT();
    7ca6:	4b0b      	ldr	r3, [pc, #44]	; (7cd4 <SEGGER_RTT_Write+0x30>)
    7ca8:	781b      	ldrb	r3, [r3, #0]
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7caa:	4604      	mov	r4, r0
    7cac:	460d      	mov	r5, r1
    7cae:	4616      	mov	r6, r2
  INIT();
    7cb0:	b90b      	cbnz	r3, 7cb6 <SEGGER_RTT_Write+0x12>
    7cb2:	f7ff ff4d 	bl	7b50 <_DoInit>
  SEGGER_RTT_LOCK();
    7cb6:	f3ef 8711 	mrs	r7, BASEPRI
    7cba:	f04f 0120 	mov.w	r1, #32
    7cbe:	f381 8811 	msr	BASEPRI, r1
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    7cc2:	4632      	mov	r2, r6
    7cc4:	4629      	mov	r1, r5
    7cc6:	4620      	mov	r0, r4
    7cc8:	f7ff ffbc 	bl	7c44 <SEGGER_RTT_WriteNoLock>
  SEGGER_RTT_UNLOCK();
    7ccc:	f387 8811 	msr	BASEPRI, r7
  return Status;
}
    7cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cd2:	bf00      	nop
    7cd4:	200019f4 	.word	0x200019f4

00007cd8 <SEGGER_RTT_HasData>:
unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_DOWN* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->WrOff;
    7cd8:	4b03      	ldr	r3, [pc, #12]	; (7ce8 <SEGGER_RTT_HasData+0x10>)
    7cda:	2218      	movs	r2, #24
    7cdc:	fb02 3300 	mla	r3, r2, r0, r3
    7ce0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
  return v - pRing->RdOff;
    7ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    7ce4:	1ac0      	subs	r0, r0, r3
    7ce6:	4770      	bx	lr
    7ce8:	200019f4 	.word	0x200019f4

00007cec <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    7cec:	4b03      	ldr	r3, [pc, #12]	; (7cfc <SEGGER_RTT_HasDataUp+0x10>)
    7cee:	2218      	movs	r2, #24
    7cf0:	fb02 3300 	mla	r3, r2, r0, r3
    7cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    7cf6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    7cf8:	1a80      	subs	r0, r0, r2
    7cfa:	4770      	bx	lr
    7cfc:	200019f4 	.word	0x200019f4

00007d00 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
    7d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
    7d04:	f8df a048 	ldr.w	sl, [pc, #72]	; 7d50 <device_visitor+0x50>
    7d08:	4d12      	ldr	r5, [pc, #72]	; (7d54 <device_visitor+0x54>)
    7d0a:	469b      	mov	fp, r3
    7d0c:	eba5 050a 	sub.w	r5, r5, sl
    7d10:	4b11      	ldr	r3, [pc, #68]	; (7d58 <device_visitor+0x58>)
    7d12:	10ed      	asrs	r5, r5, #3
    7d14:	4680      	mov	r8, r0
    7d16:	460f      	mov	r7, r1
    7d18:	4691      	mov	r9, r2
    7d1a:	435d      	muls	r5, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
    7d1c:	2600      	movs	r6, #0
    7d1e:	42be      	cmp	r6, r7
    7d20:	d102      	bne.n	7d28 <device_visitor+0x28>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
    7d22:	4630      	mov	r0, r6
}
    7d24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
    7d28:	f938 4016 	ldrsh.w	r4, [r8, r6, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
    7d2c:	2c00      	cmp	r4, #0
    7d2e:	dd0d      	ble.n	7d4c <device_visitor+0x4c>
    7d30:	42a5      	cmp	r5, r4
    7d32:	d30b      	bcc.n	7d4c <device_visitor+0x4c>
		dev = &__device_start[dev_handle - 1];
    7d34:	3c01      	subs	r4, #1
    7d36:	b224      	sxth	r4, r4
    7d38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7d3c:	eb0a 00c4 	add.w	r0, sl, r4, lsl #3
		int rc = visitor_cb(rdev, context);
    7d40:	4659      	mov	r1, fp
    7d42:	47c8      	blx	r9
		if (rc < 0) {
    7d44:	2800      	cmp	r0, #0
    7d46:	dbed      	blt.n	7d24 <device_visitor+0x24>
	for (size_t i = 0; i < handle_count; ++i) {
    7d48:	3601      	adds	r6, #1
    7d4a:	e7e8      	b.n	7d1e <device_visitor+0x1e>
	const struct device *dev = NULL;
    7d4c:	2000      	movs	r0, #0
    7d4e:	e7f7      	b.n	7d40 <device_visitor+0x40>
    7d50:	0000cc1c 	.word	0x0000cc1c
    7d54:	0000cd3c 	.word	0x0000cd3c
    7d58:	aaaaaaab 	.word	0xaaaaaaab

00007d5c <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7d5c:	4b0e      	ldr	r3, [pc, #56]	; (7d98 <z_sys_init_run_level+0x3c>)
{
    7d5e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7d60:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7d64:	3001      	adds	r0, #1
    7d66:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    7d6a:	42a6      	cmp	r6, r4
    7d6c:	d800      	bhi.n	7d70 <z_sys_init_run_level+0x14>
}
    7d6e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    7d70:	e9d4 3500 	ldrd	r3, r5, [r4]
    7d74:	4628      	mov	r0, r5
    7d76:	4798      	blx	r3
		if (dev != NULL) {
    7d78:	b165      	cbz	r5, 7d94 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    7d7a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    7d7c:	b130      	cbz	r0, 7d8c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    7d7e:	2800      	cmp	r0, #0
    7d80:	bfb8      	it	lt
    7d82:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    7d84:	28ff      	cmp	r0, #255	; 0xff
    7d86:	bfa8      	it	ge
    7d88:	20ff      	movge	r0, #255	; 0xff
    7d8a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    7d8c:	785a      	ldrb	r2, [r3, #1]
    7d8e:	f042 0201 	orr.w	r2, r2, #1
    7d92:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7d94:	3408      	adds	r4, #8
    7d96:	e7e8      	b.n	7d6a <z_sys_init_run_level+0xe>
    7d98:	0000da20 	.word	0x0000da20

00007d9c <z_device_get_all_static>:
	*devices = __device_start;
    7d9c:	4a03      	ldr	r2, [pc, #12]	; (7dac <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
    7d9e:	4b04      	ldr	r3, [pc, #16]	; (7db0 <z_device_get_all_static+0x14>)
	*devices = __device_start;
    7da0:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
    7da2:	1a9b      	subs	r3, r3, r2
}
    7da4:	4803      	ldr	r0, [pc, #12]	; (7db4 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
    7da6:	10db      	asrs	r3, r3, #3
}
    7da8:	4358      	muls	r0, r3
    7daa:	4770      	bx	lr
    7dac:	0000cc1c 	.word	0x0000cc1c
    7db0:	0000cd3c 	.word	0x0000cd3c
    7db4:	aaaaaaab 	.word	0xaaaaaaab

00007db8 <z_impl_device_get_binding>:
{
    7db8:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
    7dba:	4605      	mov	r5, r0
    7dbc:	b910      	cbnz	r0, 7dc4 <z_impl_device_get_binding+0xc>
		return NULL;
    7dbe:	2400      	movs	r4, #0
}
    7dc0:	4620      	mov	r0, r4
    7dc2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    7dc4:	7803      	ldrb	r3, [r0, #0]
    7dc6:	2b00      	cmp	r3, #0
    7dc8:	d0f9      	beq.n	7dbe <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    7dca:	4c0e      	ldr	r4, [pc, #56]	; (7e04 <z_impl_device_get_binding+0x4c>)
    7dcc:	4e0e      	ldr	r6, [pc, #56]	; (7e08 <z_impl_device_get_binding+0x50>)
    7dce:	42b4      	cmp	r4, r6
    7dd0:	d108      	bne.n	7de4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    7dd2:	4c0c      	ldr	r4, [pc, #48]	; (7e04 <z_impl_device_get_binding+0x4c>)
    7dd4:	42b4      	cmp	r4, r6
    7dd6:	d0f2      	beq.n	7dbe <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7dd8:	4620      	mov	r0, r4
    7dda:	f004 fb1d 	bl	c418 <z_device_is_ready>
    7dde:	b950      	cbnz	r0, 7df6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    7de0:	3418      	adds	r4, #24
    7de2:	e7f7      	b.n	7dd4 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    7de4:	4620      	mov	r0, r4
    7de6:	f004 fb17 	bl	c418 <z_device_is_ready>
    7dea:	b110      	cbz	r0, 7df2 <z_impl_device_get_binding+0x3a>
    7dec:	6823      	ldr	r3, [r4, #0]
    7dee:	42ab      	cmp	r3, r5
    7df0:	d0e6      	beq.n	7dc0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    7df2:	3418      	adds	r4, #24
    7df4:	e7eb      	b.n	7dce <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7df6:	6821      	ldr	r1, [r4, #0]
    7df8:	4628      	mov	r0, r5
    7dfa:	f003 fcc8 	bl	b78e <strcmp>
    7dfe:	2800      	cmp	r0, #0
    7e00:	d1ee      	bne.n	7de0 <z_impl_device_get_binding+0x28>
    7e02:	e7dd      	b.n	7dc0 <z_impl_device_get_binding+0x8>
    7e04:	0000cc1c 	.word	0x0000cc1c
    7e08:	0000cd3c 	.word	0x0000cd3c

00007e0c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    7e0c:	4b01      	ldr	r3, [pc, #4]	; (7e14 <z_impl_z_errno+0x8>)
    7e0e:	6898      	ldr	r0, [r3, #8]
}
    7e10:	3098      	adds	r0, #152	; 0x98
    7e12:	4770      	bx	lr
    7e14:	20001a9c 	.word	0x20001a9c

00007e18 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    7e18:	b510      	push	{r4, lr}
    7e1a:	4604      	mov	r4, r0
    7e1c:	b088      	sub	sp, #32
	z_impl_log_panic();
    7e1e:	f7f9 fbcb 	bl	15b8 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    7e22:	4809      	ldr	r0, [pc, #36]	; (7e48 <k_sys_fatal_error_handler+0x30>)
    7e24:	6803      	ldr	r3, [r0, #0]
    7e26:	075b      	lsls	r3, r3, #29
    7e28:	d00a      	beq.n	7e40 <k_sys_fatal_error_handler+0x28>
    7e2a:	4b08      	ldr	r3, [pc, #32]	; (7e4c <k_sys_fatal_error_handler+0x34>)
    7e2c:	9306      	str	r3, [sp, #24]
    7e2e:	2302      	movs	r3, #2
    7e30:	9301      	str	r3, [sp, #4]
    7e32:	9305      	str	r3, [sp, #20]
    7e34:	2300      	movs	r3, #0
    7e36:	aa05      	add	r2, sp, #20
    7e38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7e3c:	f002 f9b4 	bl	a1a8 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
    7e40:	4620      	mov	r0, r4
    7e42:	f004 fb1a 	bl	c47a <arch_system_halt>
    7e46:	bf00      	nop
    7e48:	20000274 	.word	0x20000274
    7e4c:	0000f4ee 	.word	0x0000f4ee

00007e50 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e54:	4605      	mov	r5, r0
    7e56:	b08e      	sub	sp, #56	; 0x38
    7e58:	460e      	mov	r6, r1
	__asm__ volatile(
    7e5a:	f04f 0320 	mov.w	r3, #32
    7e5e:	f3ef 8811 	mrs	r8, BASEPRI
    7e62:	f383 8812 	msr	BASEPRI_MAX, r3
    7e66:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7e6a:	4f2b      	ldr	r7, [pc, #172]	; (7f18 <z_fatal_error+0xc8>)
	return z_impl_z_current_get();
    7e6c:	f001 f82a 	bl	8ec4 <z_impl_z_current_get>
    7e70:	683b      	ldr	r3, [r7, #0]
    7e72:	0759      	lsls	r1, r3, #29
    7e74:	4604      	mov	r4, r0
    7e76:	d04c      	beq.n	7f12 <z_fatal_error+0xc2>
	switch (reason) {
    7e78:	2d04      	cmp	r5, #4
    7e7a:	bf96      	itet	ls
    7e7c:	4b27      	ldrls	r3, [pc, #156]	; (7f1c <z_fatal_error+0xcc>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7e7e:	4a28      	ldrhi	r2, [pc, #160]	; (7f20 <z_fatal_error+0xd0>)
	return 0;
    7e80:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7e84:	4924      	ldr	r1, [pc, #144]	; (7f18 <z_fatal_error+0xc8>)
    7e86:	9502      	str	r5, [sp, #8]
    7e88:	2300      	movs	r3, #0
    7e8a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    7e8e:	4a25      	ldr	r2, [pc, #148]	; (7f24 <z_fatal_error+0xd4>)
    7e90:	4618      	mov	r0, r3
    7e92:	e9cd 3200 	strd	r3, r2, [sp]
    7e96:	2201      	movs	r2, #1
    7e98:	f004 fae0 	bl	c45c <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7e9c:	b196      	cbz	r6, 7ec4 <z_fatal_error+0x74>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7e9e:	69f3      	ldr	r3, [r6, #28]
    7ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7ea4:	b173      	cbz	r3, 7ec4 <z_fatal_error+0x74>
		LOG_ERR("Fault during interrupt handling\n");
    7ea6:	683b      	ldr	r3, [r7, #0]
    7ea8:	075a      	lsls	r2, r3, #29
    7eaa:	d01b      	beq.n	7ee4 <z_fatal_error+0x94>
    7eac:	4b1e      	ldr	r3, [pc, #120]	; (7f28 <z_fatal_error+0xd8>)
    7eae:	930c      	str	r3, [sp, #48]	; 0x30
    7eb0:	2302      	movs	r3, #2
    7eb2:	9307      	str	r3, [sp, #28]
    7eb4:	930b      	str	r3, [sp, #44]	; 0x2c
    7eb6:	4818      	ldr	r0, [pc, #96]	; (7f18 <z_fatal_error+0xc8>)
    7eb8:	2300      	movs	r3, #0
    7eba:	aa0b      	add	r2, sp, #44	; 0x2c
    7ebc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7ec0:	f002 f972 	bl	a1a8 <z_impl_z_log_msg2_static_create>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7ec4:	683b      	ldr	r3, [r7, #0]
    7ec6:	075b      	lsls	r3, r3, #29
    7ec8:	d00c      	beq.n	7ee4 <z_fatal_error+0x94>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7eca:	b9cc      	cbnz	r4, 7f00 <z_fatal_error+0xb0>
		thread_name = "unknown";
    7ecc:	4817      	ldr	r0, [pc, #92]	; (7f2c <z_fatal_error+0xdc>)
	LOG_ERR("Current thread: %p (%s)", thread,
    7ece:	4b18      	ldr	r3, [pc, #96]	; (7f30 <z_fatal_error+0xe0>)
    7ed0:	9301      	str	r3, [sp, #4]
    7ed2:	2300      	movs	r3, #0
    7ed4:	e9cd 4002 	strd	r4, r0, [sp, #8]
    7ed8:	490f      	ldr	r1, [pc, #60]	; (7f18 <z_fatal_error+0xc8>)
    7eda:	9300      	str	r3, [sp, #0]
    7edc:	2201      	movs	r2, #1
    7ede:	4618      	mov	r0, r3
    7ee0:	f004 fabc 	bl	c45c <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7ee4:	4631      	mov	r1, r6
    7ee6:	4628      	mov	r0, r5
    7ee8:	f7ff ff96 	bl	7e18 <k_sys_fatal_error_handler>
	__asm__ volatile(
    7eec:	f388 8811 	msr	BASEPRI, r8
    7ef0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7ef4:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7ef6:	b00e      	add	sp, #56	; 0x38
    7ef8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7efc:	f7fc be8e 	b.w	4c1c <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7f00:	4620      	mov	r0, r4
    7f02:	f004 fac9 	bl	c498 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    7f06:	2800      	cmp	r0, #0
    7f08:	d0e0      	beq.n	7ecc <z_fatal_error+0x7c>
    7f0a:	7803      	ldrb	r3, [r0, #0]
    7f0c:	2b00      	cmp	r3, #0
    7f0e:	d0dd      	beq.n	7ecc <z_fatal_error+0x7c>
    7f10:	e7dd      	b.n	7ece <z_fatal_error+0x7e>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7f12:	2e00      	cmp	r6, #0
    7f14:	d1c3      	bne.n	7e9e <z_fatal_error+0x4e>
    7f16:	e7e5      	b.n	7ee4 <z_fatal_error+0x94>
    7f18:	20000274 	.word	0x20000274
    7f1c:	0000da38 	.word	0x0000da38
    7f20:	0000f4fd 	.word	0x0000f4fd
    7f24:	0000f513 	.word	0x0000f513
    7f28:	0000f53b 	.word	0x0000f53b
    7f2c:	0000f50b 	.word	0x0000f50b
    7f30:	0000f55c 	.word	0x0000f55c

00007f34 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7f34:	b570      	push	{r4, r5, r6, lr}
    7f36:	b088      	sub	sp, #32
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    7f38:	ae06      	add	r6, sp, #24
{
    7f3a:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
    7f3c:	4603      	mov	r3, r0
    7f3e:	4a13      	ldr	r2, [pc, #76]	; (7f8c <init_idle_thread+0x58>)
	struct k_thread *thread = &z_idle_threads[i];
    7f40:	4d13      	ldr	r5, [pc, #76]	; (7f90 <init_idle_thread+0x5c>)
	snprintk(tname, 8, "idle %02d", i);
    7f42:	2108      	movs	r1, #8
    7f44:	4630      	mov	r0, r6
    7f46:	f001 fb5a 	bl	95fe <snprintk>
	struct k_thread *thread = &z_idle_threads[i];
    7f4a:	23b8      	movs	r3, #184	; 0xb8
    7f4c:	fb03 5504 	mla	r5, r3, r4, r5
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    7f50:	2201      	movs	r2, #1
    7f52:	230f      	movs	r3, #15
    7f54:	e9cd 3203 	strd	r3, r2, [sp, #12]
    7f58:	2300      	movs	r3, #0
    7f5a:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7f5e:	4b0d      	ldr	r3, [pc, #52]	; (7f94 <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
    7f60:	490d      	ldr	r1, [pc, #52]	; (7f98 <init_idle_thread+0x64>)
    7f62:	9605      	str	r6, [sp, #20]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7f64:	2218      	movs	r2, #24
    7f66:	fb02 3304 	mla	r3, r2, r4, r3
	z_setup_new_thread(thread, stack,
    7f6a:	f44f 70b0 	mov.w	r0, #352	; 0x160
    7f6e:	9300      	str	r3, [sp, #0]
    7f70:	fb00 1104 	mla	r1, r0, r4, r1
    7f74:	4b09      	ldr	r3, [pc, #36]	; (7f9c <init_idle_thread+0x68>)
    7f76:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7f7a:	4628      	mov	r0, r5
    7f7c:	f000 f94e 	bl	821c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7f80:	7b6b      	ldrb	r3, [r5, #13]
    7f82:	f023 0304 	bic.w	r3, r3, #4
    7f86:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    7f88:	b008      	add	sp, #32
    7f8a:	bd70      	pop	{r4, r5, r6, pc}
    7f8c:	0000f5be 	.word	0x0000f5be
    7f90:	20000ef8 	.word	0x20000ef8
    7f94:	20001a9c 	.word	0x20001a9c
    7f98:	20003700 	.word	0x20003700
    7f9c:	000083fd 	.word	0x000083fd

00007fa0 <bg_thread_main>:
{
    7fa0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    7fa2:	4b0a      	ldr	r3, [pc, #40]	; (7fcc <bg_thread_main+0x2c>)
    7fa4:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7fa6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    7fa8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7faa:	f7ff fed7 	bl	7d5c <z_sys_init_run_level>
	boot_banner();
    7fae:	f001 fa77 	bl	94a0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7fb2:	2003      	movs	r0, #3
    7fb4:	f7ff fed2 	bl	7d5c <z_sys_init_run_level>
	z_init_static_threads();
    7fb8:	f000 f9c4 	bl	8344 <z_init_static_threads>
	main();
    7fbc:	f7f8 fa4c 	bl	458 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7fc0:	4a03      	ldr	r2, [pc, #12]	; (7fd0 <bg_thread_main+0x30>)
    7fc2:	7b13      	ldrb	r3, [r2, #12]
    7fc4:	f023 0301 	bic.w	r3, r3, #1
    7fc8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7fca:	bd08      	pop	{r3, pc}
    7fcc:	20001f77 	.word	0x20001f77
    7fd0:	20000fb0 	.word	0x20000fb0

00007fd4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    7fd4:	4802      	ldr	r0, [pc, #8]	; (7fe0 <z_bss_zero+0xc>)
    7fd6:	4a03      	ldr	r2, [pc, #12]	; (7fe4 <z_bss_zero+0x10>)
    7fd8:	2100      	movs	r1, #0
    7fda:	1a12      	subs	r2, r2, r0
    7fdc:	f003 bc28 	b.w	b830 <memset>
    7fe0:	20000318 	.word	0x20000318
    7fe4:	20001f78 	.word	0x20001f78

00007fe8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7fe8:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7fea:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>
    7fee:	b0b4      	sub	sp, #208	; 0xd0
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7ff0:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7ff4:	4d30      	ldr	r5, [pc, #192]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    7ff6:	4e31      	ldr	r6, [pc, #196]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    7ff8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7ffa:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
    7ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8002:	2400      	movs	r4, #0
    8004:	616b      	str	r3, [r5, #20]
    8006:	23e0      	movs	r3, #224	; 0xe0
    8008:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    800c:	77ec      	strb	r4, [r5, #31]
    800e:	762c      	strb	r4, [r5, #24]
    8010:	766c      	strb	r4, [r5, #25]
    8012:	76ac      	strb	r4, [r5, #26]
    8014:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8018:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    801a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    801e:	626b      	str	r3, [r5, #36]	; 0x24
    8020:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8024:	f7fc fdbe 	bl	4ba4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8028:	f7fc f8b4 	bl	4194 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    802c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8030:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8032:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8034:	f7fc febe 	bl	4db4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    8038:	f7fc fe02 	bl	4c40 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    803c:	f7f9 f9a8 	bl	1390 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    8040:	f240 1301 	movw	r3, #257	; 0x101
    8044:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    8048:	ab06      	add	r3, sp, #24
    804a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    804c:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
	dummy_thread->resource_pool = NULL;
    8050:	9430      	str	r4, [sp, #192]	; 0xc0
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    8052:	f004 f9e0 	bl	c416 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    8056:	4620      	mov	r0, r4
    8058:	f7ff fe80 	bl	7d5c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    805c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    805e:	4d19      	ldr	r5, [pc, #100]	; (80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8060:	f7ff fe7c 	bl	7d5c <z_sys_init_run_level>
	z_sched_init();
    8064:	f000 fe80 	bl	8d68 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8068:	4b17      	ldr	r3, [pc, #92]	; (80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>)
    806a:	9305      	str	r3, [sp, #20]
    806c:	2301      	movs	r3, #1
    806e:	4917      	ldr	r1, [pc, #92]	; (80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>)
    8070:	9400      	str	r4, [sp, #0]
    8072:	e9cd 4303 	strd	r4, r3, [sp, #12]
    8076:	f44f 6280 	mov.w	r2, #1024	; 0x400
    807a:	464b      	mov	r3, r9
    807c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    8080:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    8082:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8084:	f000 f8ca 	bl	821c <z_setup_new_thread>
    8088:	7b6a      	ldrb	r2, [r5, #13]
    808a:	4607      	mov	r7, r0
    808c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    8090:	4628      	mov	r0, r5
    8092:	736a      	strb	r2, [r5, #13]
    8094:	f004 faf0 	bl	c678 <z_ready_thread>
		init_idle_thread(i);
    8098:	4620      	mov	r0, r4
    809a:	f7ff ff4b 	bl	7f34 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    809e:	4b0c      	ldr	r3, [pc, #48]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    80a0:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    80a2:	464a      	mov	r2, r9
    80a4:	4639      	mov	r1, r7
    80a6:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    80a8:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    80aa:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    80ae:	f7fc f9fb 	bl	44a8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    80b2:	bf00      	nop
    80b4:	20004080 	.word	0x20004080
    80b8:	e000ed00 	.word	0xe000ed00
    80bc:	20001a9c 	.word	0x20001a9c
    80c0:	00007fa1 	.word	0x00007fa1
    80c4:	20000fb0 	.word	0x20000fb0
    80c8:	0000f5c8 	.word	0x0000f5c8
    80cc:	200032e0 	.word	0x200032e0
    80d0:	20000ef8 	.word	0x20000ef8

000080d4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    80d4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    80d6:	4b0e      	ldr	r3, [pc, #56]	; (8110 <init_mem_slab_module+0x3c>)
    80d8:	4c0e      	ldr	r4, [pc, #56]	; (8114 <init_mem_slab_module+0x40>)
    80da:	42a3      	cmp	r3, r4
    80dc:	d301      	bcc.n	80e2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    80de:	2000      	movs	r0, #0
	return rc;
}
    80e0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    80e2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    80e6:	ea41 0200 	orr.w	r2, r1, r0
    80ea:	f012 0203 	ands.w	r2, r2, #3
    80ee:	d10b      	bne.n	8108 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    80f0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    80f2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    80f4:	42aa      	cmp	r2, r5
    80f6:	d101      	bne.n	80fc <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    80f8:	331c      	adds	r3, #28
    80fa:	e7ee      	b.n	80da <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    80fc:	695e      	ldr	r6, [r3, #20]
    80fe:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8100:	3201      	adds	r2, #1
		slab->free_list = p;
    8102:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    8104:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    8106:	e7f5      	b.n	80f4 <init_mem_slab_module+0x20>
	return rc;
    8108:	f06f 0015 	mvn.w	r0, #21
    810c:	e7e8      	b.n	80e0 <init_mem_slab_module+0xc>
    810e:	bf00      	nop
    8110:	200002a0 	.word	0x200002a0
    8114:	200002a0 	.word	0x200002a0

00008118 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
    8118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    811a:	4605      	mov	r5, r0
    811c:	460e      	mov	r6, r1
	__asm__ volatile(
    811e:	f04f 0320 	mov.w	r3, #32
    8122:	f3ef 8711 	mrs	r7, BASEPRI
    8126:	f383 8812 	msr	BASEPRI_MAX, r3
    812a:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    812e:	4b06      	ldr	r3, [pc, #24]	; (8148 <k_thread_foreach+0x30>)
    8130:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8132:	b924      	cbnz	r4, 813e <k_thread_foreach+0x26>
	__asm__ volatile(
    8134:	f387 8811 	msr	BASEPRI, r7
    8138:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
    813c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
    813e:	4620      	mov	r0, r4
    8140:	4631      	mov	r1, r6
    8142:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
    8144:	6f64      	ldr	r4, [r4, #116]	; 0x74
    8146:	e7f4      	b.n	8132 <k_thread_foreach+0x1a>
    8148:	20001a9c 	.word	0x20001a9c

0000814c <z_thread_monitor_exit>:
	__asm__ volatile(
    814c:	f04f 0320 	mov.w	r3, #32
    8150:	f3ef 8111 	mrs	r1, BASEPRI
    8154:	f383 8812 	msr	BASEPRI_MAX, r3
    8158:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    815c:	4a09      	ldr	r2, [pc, #36]	; (8184 <z_thread_monitor_exit+0x38>)
    815e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8160:	4283      	cmp	r3, r0
    8162:	d107      	bne.n	8174 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    8164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8166:	6293      	str	r3, [r2, #40]	; 0x28
	__asm__ volatile(
    8168:	f381 8811 	msr	BASEPRI, r1
    816c:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    8170:	4770      	bx	lr
    8172:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    8174:	2b00      	cmp	r3, #0
    8176:	d0f7      	beq.n	8168 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    8178:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
    817a:	4282      	cmp	r2, r0
    817c:	d1f9      	bne.n	8172 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    817e:	6f42      	ldr	r2, [r0, #116]	; 0x74
    8180:	675a      	str	r2, [r3, #116]	; 0x74
    8182:	e7f1      	b.n	8168 <z_thread_monitor_exit+0x1c>
    8184:	20001a9c 	.word	0x20001a9c

00008188 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    8188:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    818a:	4604      	mov	r4, r0
    818c:	b908      	cbnz	r0, 8192 <z_impl_k_thread_name_set+0xa>
		thread = _current;
    818e:	4b05      	ldr	r3, [pc, #20]	; (81a4 <z_impl_k_thread_name_set+0x1c>)
    8190:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    8192:	2220      	movs	r2, #32
    8194:	f104 0078 	add.w	r0, r4, #120	; 0x78
    8198:	f003 fac9 	bl	b72e <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    819c:	2000      	movs	r0, #0
    819e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    81a2:	bd10      	pop	{r4, pc}
    81a4:	20001a9c 	.word	0x20001a9c

000081a8 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
    81a8:	7b43      	ldrb	r3, [r0, #13]
    81aa:	2b10      	cmp	r3, #16
    81ac:	d80e      	bhi.n	81cc <k_thread_state_str+0x24>
    81ae:	2b10      	cmp	r3, #16
    81b0:	d81c      	bhi.n	81ec <k_thread_state_str+0x44>
    81b2:	e8df f003 	tbb	[pc, r3]
    81b6:	091d      	.short	0x091d
    81b8:	1b151b13 	.word	0x1b151b13
    81bc:	1b171b1b 	.word	0x1b171b1b
    81c0:	1b1b1b1b 	.word	0x1b1b1b1b
    81c4:	1b1b      	.short	0x1b1b
    81c6:	19          	.byte	0x19
    81c7:	00          	.byte	0x00
    81c8:	480b      	ldr	r0, [pc, #44]	; (81f8 <k_thread_state_str+0x50>)
    81ca:	4770      	bx	lr
    81cc:	2b20      	cmp	r3, #32
    81ce:	d011      	beq.n	81f4 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
    81d0:	4a0a      	ldr	r2, [pc, #40]	; (81fc <k_thread_state_str+0x54>)
    81d2:	480b      	ldr	r0, [pc, #44]	; (8200 <k_thread_state_str+0x58>)
    81d4:	2b80      	cmp	r3, #128	; 0x80
    81d6:	bf08      	it	eq
    81d8:	4610      	moveq	r0, r2
    81da:	4770      	bx	lr
		return "pending";
    81dc:	4809      	ldr	r0, [pc, #36]	; (8204 <k_thread_state_str+0x5c>)
    81de:	4770      	bx	lr
		return "prestart";
    81e0:	4809      	ldr	r0, [pc, #36]	; (8208 <k_thread_state_str+0x60>)
    81e2:	4770      	bx	lr
		return "dead";
    81e4:	4809      	ldr	r0, [pc, #36]	; (820c <k_thread_state_str+0x64>)
    81e6:	4770      	bx	lr
		return "suspended";
    81e8:	4809      	ldr	r0, [pc, #36]	; (8210 <k_thread_state_str+0x68>)
    81ea:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
    81ec:	4804      	ldr	r0, [pc, #16]	; (8200 <k_thread_state_str+0x58>)
    81ee:	4770      	bx	lr
		return "";
    81f0:	4808      	ldr	r0, [pc, #32]	; (8214 <k_thread_state_str+0x6c>)
    81f2:	4770      	bx	lr
		return "aborting";
    81f4:	4808      	ldr	r0, [pc, #32]	; (8218 <k_thread_state_str+0x70>)
}
    81f6:	4770      	bx	lr
    81f8:	0000f5f0 	.word	0x0000f5f0
    81fc:	0000f5ff 	.word	0x0000f5ff
    8200:	0000f50b 	.word	0x0000f50b
    8204:	0000f5d0 	.word	0x0000f5d0
    8208:	0000f5d8 	.word	0x0000f5d8
    820c:	0000f5e1 	.word	0x0000f5e1
    8210:	0000f5e6 	.word	0x0000f5e6
    8214:	0000dff2 	.word	0x0000dff2
    8218:	0000f5f6 	.word	0x0000f5f6

0000821c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8220:	b085      	sub	sp, #20
    8222:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    8224:	f100 0358 	add.w	r3, r0, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    8228:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    822c:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    822e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8230:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8232:	f022 0a07 	bic.w	sl, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    8236:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
    8238:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    823a:	f101 0b20 	add.w	fp, r1, #32
	thread_base->thread_state = (uint8_t)initial_state;
    823e:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8240:	f10a 0720 	add.w	r7, sl, #32

	thread_base->prio = priority;
    8244:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
    8246:	6085      	str	r5, [r0, #8]
{
    8248:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    824a:	e9c0 5506 	strd	r5, r5, [r0, #24]
    824e:	460e      	mov	r6, r1
	thread_base->prio = priority;
    8250:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
    8252:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
    8254:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
    8256:	4652      	mov	r2, sl
    8258:	21aa      	movs	r1, #170	; 0xaa
    825a:	4658      	mov	r0, fp
{
    825c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
    8260:	f003 fae6 	bl	b830 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8264:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8266:	9302      	str	r3, [sp, #8]
    8268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    826a:	9301      	str	r3, [sp, #4]
    826c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    826e:	9300      	str	r3, [sp, #0]
	new_thread->stack_info.size = stack_buf_size;
    8270:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8274:	4643      	mov	r3, r8
	new_thread->stack_info.delta = delta;
    8276:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    827a:	463a      	mov	r2, r7
    827c:	4631      	mov	r1, r6
    827e:	4620      	mov	r0, r4
    8280:	f7fc f8de 	bl	4440 <arch_new_thread>
	new_thread->entry.parameter1 = p1;
    8284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8286:	66a3      	str	r3, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
    8288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    828a:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
    828c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    828e:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    8290:	f8c4 8064 	str.w	r8, [r4, #100]	; 0x64
	new_thread->entry.parameter3 = p3;
    8294:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
    8296:	f04f 0220 	mov.w	r2, #32
    829a:	f3ef 8311 	mrs	r3, BASEPRI
    829e:	f382 8812 	msr	BASEPRI_MAX, r2
    82a2:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    82a6:	4e10      	ldr	r6, [pc, #64]	; (82e8 <z_setup_new_thread+0xcc>)
    82a8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    82aa:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
    82ac:	62b4      	str	r4, [r6, #40]	; 0x28
	__asm__ volatile(
    82ae:	f383 8811 	msr	BASEPRI, r3
    82b2:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    82b6:	f1b9 0f00 	cmp.w	r9, #0
    82ba:	d011      	beq.n	82e0 <z_setup_new_thread+0xc4>
		strncpy(new_thread->name, name,
    82bc:	221f      	movs	r2, #31
    82be:	4649      	mov	r1, r9
    82c0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    82c4:	f003 fa33 	bl	b72e <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    82c8:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
    82cc:	68b3      	ldr	r3, [r6, #8]
    82ce:	b10b      	cbz	r3, 82d4 <z_setup_new_thread+0xb8>
	new_thread->resource_pool = _current->resource_pool;
    82d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	return stack_ptr;
    82d4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
    82d8:	4638      	mov	r0, r7
    82da:	b005      	add	sp, #20
    82dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    82e0:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
    82e4:	e7f2      	b.n	82cc <z_setup_new_thread+0xb0>
    82e6:	bf00      	nop
    82e8:	20001a9c 	.word	0x20001a9c

000082ec <z_impl_k_thread_create>:
{
    82ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    82ee:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    82f0:	2700      	movs	r7, #0
    82f2:	9705      	str	r7, [sp, #20]
    82f4:	9f10      	ldr	r7, [sp, #64]	; 0x40
    82f6:	9704      	str	r7, [sp, #16]
    82f8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    82fa:	9703      	str	r7, [sp, #12]
    82fc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    82fe:	9702      	str	r7, [sp, #8]
{
    8300:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8304:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    8306:	9701      	str	r7, [sp, #4]
    8308:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    830a:	9700      	str	r7, [sp, #0]
{
    830c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    830e:	f7ff ff85 	bl	821c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8312:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    8316:	bf08      	it	eq
    8318:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    831c:	d005      	beq.n	832a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    831e:	ea55 0306 	orrs.w	r3, r5, r6
    8322:	d105      	bne.n	8330 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    8324:	4620      	mov	r0, r4
    8326:	f000 fc19 	bl	8b5c <z_sched_start>
}
    832a:	4620      	mov	r0, r4
    832c:	b007      	add	sp, #28
    832e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8330:	4903      	ldr	r1, [pc, #12]	; (8340 <z_impl_k_thread_create+0x54>)
    8332:	4632      	mov	r2, r6
    8334:	462b      	mov	r3, r5
    8336:	f104 0018 	add.w	r0, r4, #24
    833a:	f000 fea5 	bl	9088 <z_add_timeout>
    833e:	e7f4      	b.n	832a <z_impl_k_thread_create+0x3e>
    8340:	0000c699 	.word	0x0000c699

00008344 <z_init_static_threads>:
{
    8344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8348:	4c29      	ldr	r4, [pc, #164]	; (83f0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    834a:	4d2a      	ldr	r5, [pc, #168]	; (83f4 <z_init_static_threads+0xb0>)
{
    834c:	b087      	sub	sp, #28
    834e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    8350:	42ae      	cmp	r6, r5
    8352:	f104 0430 	add.w	r4, r4, #48	; 0x30
    8356:	d30f      	bcc.n	8378 <z_init_static_threads+0x34>
	k_sched_lock();
    8358:	f000 fb1c 	bl	8994 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    835c:	4c24      	ldr	r4, [pc, #144]	; (83f0 <z_init_static_threads+0xac>)
    835e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83f8 <z_init_static_threads+0xb4>
    8362:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    8366:	f240 37e7 	movw	r7, #999	; 0x3e7
    836a:	42ac      	cmp	r4, r5
    836c:	d320      	bcc.n	83b0 <z_init_static_threads+0x6c>
}
    836e:	b007      	add	sp, #28
    8370:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    8374:	f000 bcdc 	b.w	8d30 <k_sched_unlock>
		z_setup_new_thread(
    8378:	f854 3c04 	ldr.w	r3, [r4, #-4]
    837c:	9305      	str	r3, [sp, #20]
    837e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8382:	9304      	str	r3, [sp, #16]
    8384:	f854 3c14 	ldr.w	r3, [r4, #-20]
    8388:	9303      	str	r3, [sp, #12]
    838a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    838e:	9302      	str	r3, [sp, #8]
    8390:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    8394:	9301      	str	r3, [sp, #4]
    8396:	f854 3c20 	ldr.w	r3, [r4, #-32]
    839a:	9300      	str	r3, [sp, #0]
    839c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    83a0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    83a4:	f7ff ff3a 	bl	821c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    83a8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    83ac:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    83ae:	e7ce      	b.n	834e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    83b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    83b2:	1c5a      	adds	r2, r3, #1
    83b4:	d00d      	beq.n	83d2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    83b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    83ba:	2100      	movs	r1, #0
    83bc:	4638      	mov	r0, r7
    83be:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    83c2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    83c6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    83ca:	d104      	bne.n	83d6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    83cc:	4640      	mov	r0, r8
    83ce:	f000 fbc5 	bl	8b5c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    83d2:	3430      	adds	r4, #48	; 0x30
    83d4:	e7c9      	b.n	836a <z_init_static_threads+0x26>
    83d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    83da:	2300      	movs	r3, #0
    83dc:	f7f7 fe7e 	bl	dc <__aeabi_uldivmod>
    83e0:	4602      	mov	r2, r0
    83e2:	460b      	mov	r3, r1
    83e4:	f108 0018 	add.w	r0, r8, #24
    83e8:	4649      	mov	r1, r9
    83ea:	f000 fe4d 	bl	9088 <z_add_timeout>
    83ee:	e7f0      	b.n	83d2 <z_init_static_threads+0x8e>
    83f0:	200002a0 	.word	0x200002a0
    83f4:	200002a0 	.word	0x200002a0
    83f8:	0000c699 	.word	0x0000c699

000083fc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    83fc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    83fe:	4c0b      	ldr	r4, [pc, #44]	; (842c <idle+0x30>)
	return !z_sys_post_kernel;
    8400:	4d0b      	ldr	r5, [pc, #44]	; (8430 <idle+0x34>)
	__asm__ volatile(
    8402:	f04f 0220 	mov.w	r2, #32
    8406:	f3ef 8311 	mrs	r3, BASEPRI
    840a:	f382 8812 	msr	BASEPRI_MAX, r2
    840e:	f3bf 8f6f 	isb	sy
    8412:	f004 f9ee 	bl	c7f2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8416:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    8418:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    841a:	b913      	cbnz	r3, 8422 <idle+0x26>
	arch_cpu_idle();
    841c:	f7fb fec0 	bl	41a0 <arch_cpu_idle>
}
    8420:	e7ef      	b.n	8402 <idle+0x6>
    8422:	f7fb fddf 	bl	3fe4 <pm_system_suspend>
    8426:	2800      	cmp	r0, #0
    8428:	d1eb      	bne.n	8402 <idle+0x6>
    842a:	e7f7      	b.n	841c <idle+0x20>
    842c:	20001a9c 	.word	0x20001a9c
    8430:	20001f77 	.word	0x20001f77

00008434 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8438:	4604      	mov	r4, r0
    843a:	4617      	mov	r7, r2
    843c:	461e      	mov	r6, r3
    843e:	f04f 0320 	mov.w	r3, #32
    8442:	f3ef 8811 	mrs	r8, BASEPRI
    8446:	f383 8812 	msr	BASEPRI_MAX, r3
    844a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    844e:	68c3      	ldr	r3, [r0, #12]
    8450:	4a32      	ldr	r2, [pc, #200]	; (851c <z_impl_k_mutex_lock+0xe8>)
    8452:	b16b      	cbz	r3, 8470 <z_impl_k_mutex_lock+0x3c>
    8454:	6880      	ldr	r0, [r0, #8]
    8456:	6891      	ldr	r1, [r2, #8]
    8458:	4288      	cmp	r0, r1
    845a:	d019      	beq.n	8490 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    845c:	ea57 0306 	orrs.w	r3, r7, r6
    8460:	d118      	bne.n	8494 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    8462:	f388 8811 	msr	BASEPRI, r8
    8466:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    846a:	f06f 000f 	mvn.w	r0, #15
    846e:	e00c      	b.n	848a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    8470:	6891      	ldr	r1, [r2, #8]
    8472:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    8476:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    8478:	3301      	adds	r3, #1
    847a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    847c:	6893      	ldr	r3, [r2, #8]
    847e:	60a3      	str	r3, [r4, #8]
    8480:	f388 8811 	msr	BASEPRI, r8
    8484:	f3bf 8f6f 	isb	sy
		return 0;
    8488:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    848a:	b002      	add	sp, #8
    848c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    8490:	6921      	ldr	r1, [r4, #16]
    8492:	e7f0      	b.n	8476 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8494:	f991 100e 	ldrsb.w	r1, [r1, #14]
    8498:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    849c:	4299      	cmp	r1, r3
    849e:	bfa8      	it	ge
    84a0:	4619      	movge	r1, r3
    84a2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    84a6:	4291      	cmp	r1, r2
    84a8:	bfb8      	it	lt
    84aa:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    84ac:	428b      	cmp	r3, r1
    84ae:	dd2e      	ble.n	850e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    84b0:	f004 f80e 	bl	c4d0 <adjust_owner_prio.isra.0>
    84b4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    84b6:	e9cd 7600 	strd	r7, r6, [sp]
    84ba:	4819      	ldr	r0, [pc, #100]	; (8520 <z_impl_k_mutex_lock+0xec>)
    84bc:	4622      	mov	r2, r4
    84be:	4641      	mov	r1, r8
    84c0:	f000 fba8 	bl	8c14 <z_pend_curr>
	if (got_mutex == 0) {
    84c4:	2800      	cmp	r0, #0
    84c6:	d0e0      	beq.n	848a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    84c8:	f04f 0320 	mov.w	r3, #32
    84cc:	f3ef 8611 	mrs	r6, BASEPRI
    84d0:	f383 8812 	msr	BASEPRI_MAX, r3
    84d4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    84d8:	6823      	ldr	r3, [r4, #0]
    84da:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84dc:	429c      	cmp	r4, r3
    84de:	d00a      	beq.n	84f6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    84e0:	b14b      	cbz	r3, 84f6 <z_impl_k_mutex_lock+0xc2>
    84e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    84e6:	4299      	cmp	r1, r3
    84e8:	bfa8      	it	ge
    84ea:	4619      	movge	r1, r3
    84ec:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    84f0:	4299      	cmp	r1, r3
    84f2:	bfb8      	it	lt
    84f4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    84f6:	68a0      	ldr	r0, [r4, #8]
    84f8:	f003 ffea 	bl	c4d0 <adjust_owner_prio.isra.0>
    84fc:	b900      	cbnz	r0, 8500 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    84fe:	b145      	cbz	r5, 8512 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    8500:	4807      	ldr	r0, [pc, #28]	; (8520 <z_impl_k_mutex_lock+0xec>)
    8502:	4631      	mov	r1, r6
    8504:	f000 fa34 	bl	8970 <z_reschedule>
	return -EAGAIN;
    8508:	f06f 000a 	mvn.w	r0, #10
    850c:	e7bd      	b.n	848a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    850e:	2500      	movs	r5, #0
    8510:	e7d1      	b.n	84b6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    8512:	f386 8811 	msr	BASEPRI, r6
    8516:	f3bf 8f6f 	isb	sy
    851a:	e7f5      	b.n	8508 <z_impl_k_mutex_lock+0xd4>
    851c:	20001a9c 	.word	0x20001a9c
    8520:	20001f78 	.word	0x20001f78

00008524 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    8524:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    8526:	6883      	ldr	r3, [r0, #8]
{
    8528:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    852a:	2b00      	cmp	r3, #0
    852c:	d033      	beq.n	8596 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    852e:	4a1d      	ldr	r2, [pc, #116]	; (85a4 <z_impl_k_mutex_unlock+0x80>)
    8530:	6892      	ldr	r2, [r2, #8]
    8532:	4293      	cmp	r3, r2
    8534:	d132      	bne.n	859c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    8536:	7bda      	ldrb	r2, [r3, #15]
    8538:	3a01      	subs	r2, #1
    853a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    853c:	68c3      	ldr	r3, [r0, #12]
    853e:	2b01      	cmp	r3, #1
    8540:	d905      	bls.n	854e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    8542:	3b01      	subs	r3, #1
    8544:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    8546:	f000 fbf3 	bl	8d30 <k_sched_unlock>

	return 0;
    854a:	2000      	movs	r0, #0
}
    854c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    854e:	f04f 0320 	mov.w	r3, #32
    8552:	f3ef 8511 	mrs	r5, BASEPRI
    8556:	f383 8812 	msr	BASEPRI_MAX, r3
    855a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    855e:	6901      	ldr	r1, [r0, #16]
    8560:	6880      	ldr	r0, [r0, #8]
    8562:	f003 ffb5 	bl	c4d0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8566:	4620      	mov	r0, r4
    8568:	f004 f8f7 	bl	c75a <z_unpend_first_thread>
	mutex->owner = new_owner;
    856c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    856e:	b160      	cbz	r0, 858a <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
    8570:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8574:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8576:	2200      	movs	r2, #0
    8578:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
    857c:	f004 f87c 	bl	c678 <z_ready_thread>
		z_reschedule(&lock, key);
    8580:	4809      	ldr	r0, [pc, #36]	; (85a8 <z_impl_k_mutex_unlock+0x84>)
    8582:	4629      	mov	r1, r5
    8584:	f000 f9f4 	bl	8970 <z_reschedule>
    8588:	e7dd      	b.n	8546 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    858a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    858c:	f385 8811 	msr	BASEPRI, r5
    8590:	f3bf 8f6f 	isb	sy
    8594:	e7d7      	b.n	8546 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    8596:	f06f 0015 	mvn.w	r0, #21
    859a:	e7d7      	b.n	854c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    859c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    85a0:	e7d4      	b.n	854c <z_impl_k_mutex_unlock+0x28>
    85a2:	bf00      	nop
    85a4:	20001a9c 	.word	0x20001a9c
    85a8:	20001f78 	.word	0x20001f78

000085ac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    85ac:	b538      	push	{r3, r4, r5, lr}
    85ae:	4604      	mov	r4, r0
	__asm__ volatile(
    85b0:	f04f 0320 	mov.w	r3, #32
    85b4:	f3ef 8511 	mrs	r5, BASEPRI
    85b8:	f383 8812 	msr	BASEPRI_MAX, r3
    85bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    85c0:	f004 f8cb 	bl	c75a <z_unpend_first_thread>

	if (thread != NULL) {
    85c4:	b150      	cbz	r0, 85dc <z_impl_k_sem_give+0x30>
    85c6:	2200      	movs	r2, #0
    85c8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    85cc:	f004 f854 	bl	c678 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    85d0:	4629      	mov	r1, r5
    85d2:	4808      	ldr	r0, [pc, #32]	; (85f4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    85d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    85d8:	f000 b9ca 	b.w	8970 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    85dc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    85e0:	429a      	cmp	r2, r3
    85e2:	bf18      	it	ne
    85e4:	3301      	addne	r3, #1
    85e6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    85e8:	2102      	movs	r1, #2
    85ea:	f104 0010 	add.w	r0, r4, #16
    85ee:	f004 fa9b 	bl	cb28 <z_handle_obj_poll_events>
}
    85f2:	e7ed      	b.n	85d0 <z_impl_k_sem_give+0x24>
    85f4:	20001f78 	.word	0x20001f78

000085f8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    85f8:	b513      	push	{r0, r1, r4, lr}
    85fa:	f04f 0420 	mov.w	r4, #32
    85fe:	f3ef 8111 	mrs	r1, BASEPRI
    8602:	f384 8812 	msr	BASEPRI_MAX, r4
    8606:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    860a:	6884      	ldr	r4, [r0, #8]
    860c:	b144      	cbz	r4, 8620 <z_impl_k_sem_take+0x28>
		sem->count--;
    860e:	3c01      	subs	r4, #1
    8610:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    8612:	f381 8811 	msr	BASEPRI, r1
    8616:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    861a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    861c:	b002      	add	sp, #8
    861e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8620:	ea52 0403 	orrs.w	r4, r2, r3
    8624:	d106      	bne.n	8634 <z_impl_k_sem_take+0x3c>
    8626:	f381 8811 	msr	BASEPRI, r1
    862a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    862e:	f06f 000f 	mvn.w	r0, #15
    8632:	e7f3      	b.n	861c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8634:	e9cd 2300 	strd	r2, r3, [sp]
    8638:	4602      	mov	r2, r0
    863a:	4802      	ldr	r0, [pc, #8]	; (8644 <z_impl_k_sem_take+0x4c>)
    863c:	f000 faea 	bl	8c14 <z_pend_curr>
	return ret;
    8640:	e7ec      	b.n	861c <z_impl_k_sem_take+0x24>
    8642:	bf00      	nop
    8644:	20001f78 	.word	0x20001f78

00008648 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    8648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    864c:	4e47      	ldr	r6, [pc, #284]	; (876c <work_queue_main+0x124>)
    864e:	b085      	sub	sp, #20
    8650:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    8652:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    8656:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    865a:	f04f 0320 	mov.w	r3, #32
    865e:	f3ef 8711 	mrs	r7, BASEPRI
    8662:	f383 8812 	msr	BASEPRI_MAX, r3
    8666:	f3bf 8f6f 	isb	sy
    866a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    866e:	b98d      	cbnz	r5, 8694 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    8670:	2102      	movs	r1, #2
    8672:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    8676:	f003 ff4a 	bl	c50e <flag_test_and_clear>
    867a:	2800      	cmp	r0, #0
    867c:	d135      	bne.n	86ea <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    867e:	2300      	movs	r3, #0
    8680:	e9cd 8900 	strd	r8, r9, [sp]
    8684:	9302      	str	r3, [sp, #8]
    8686:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    868a:	4639      	mov	r1, r7
    868c:	4838      	ldr	r0, [pc, #224]	; (8770 <work_queue_main+0x128>)
    868e:	f000 fc85 	bl	8f9c <z_sched_wait>
			continue;
    8692:	e7e2      	b.n	865a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8694:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return node->next;
    8698:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    869a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    869e:	4295      	cmp	r5, r2
    86a0:	d101      	bne.n	86a6 <work_queue_main+0x5e>
	list->tail = node;
    86a2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
    86a6:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    86aa:	f043 0302 	orr.w	r3, r3, #2
    86ae:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
    86b2:	68eb      	ldr	r3, [r5, #12]
    86b4:	f023 0304 	bic.w	r3, r3, #4
    86b8:	f043 0301 	orr.w	r3, r3, #1
    86bc:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    86be:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    86c0:	f387 8811 	msr	BASEPRI, r7
    86c4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    86c8:	4628      	mov	r0, r5
    86ca:	4798      	blx	r3
	__asm__ volatile(
    86cc:	f04f 0320 	mov.w	r3, #32
    86d0:	f3ef 8b11 	mrs	fp, BASEPRI
    86d4:	f383 8812 	msr	BASEPRI_MAX, r3
    86d8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    86dc:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    86de:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    86e0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    86e4:	d40b      	bmi.n	86fe <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    86e6:	60ea      	str	r2, [r5, #12]
    86e8:	e00e      	b.n	8708 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    86ea:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    86ee:	2200      	movs	r2, #0
    86f0:	2101      	movs	r1, #1
    86f2:	4628      	mov	r0, r5
    86f4:	f004 f849 	bl	c78a <z_sched_wake>
    86f8:	2800      	cmp	r0, #0
    86fa:	d1f8      	bne.n	86ee <work_queue_main+0xa6>
    86fc:	e7bf      	b.n	867e <work_queue_main+0x36>
	return list->head;
    86fe:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    8700:	f023 0303 	bic.w	r3, r3, #3
    8704:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8706:	b970      	cbnz	r0, 8726 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    8708:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    870c:	f023 0302 	bic.w	r3, r3, #2
    8710:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
    8714:	f38b 8811 	msr	BASEPRI, fp
    8718:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    871c:	05d8      	lsls	r0, r3, #23
    871e:	d49c      	bmi.n	865a <work_queue_main+0x12>
	z_impl_k_yield();
    8720:	f000 fb2e 	bl	8d80 <z_impl_k_yield>
}
    8724:	e799      	b.n	865a <work_queue_main+0x12>
	return node->next;
    8726:	2700      	movs	r7, #0
    8728:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    872c:	463b      	mov	r3, r7
		if (wc->work == work) {
    872e:	6842      	ldr	r2, [r0, #4]
    8730:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    8732:	4601      	mov	r1, r0
		if (wc->work == work) {
    8734:	d10c      	bne.n	8750 <work_queue_main+0x108>
	return node->next;
    8736:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    8738:	b997      	cbnz	r7, 8760 <work_queue_main+0x118>
    873a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    873c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    873e:	4282      	cmp	r2, r0
    8740:	d100      	bne.n	8744 <work_queue_main+0xfc>
	list->tail = node;
    8742:	6071      	str	r1, [r6, #4]
	parent->next = child;
    8744:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    8748:	f7ff ff30 	bl	85ac <z_impl_k_sem_give>
}
    874c:	4639      	mov	r1, r7
    874e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8750:	f1ba 0f00 	cmp.w	sl, #0
    8754:	d0d8      	beq.n	8708 <work_queue_main+0xc0>
	return node->next;
    8756:	4650      	mov	r0, sl
    8758:	460f      	mov	r7, r1
    875a:	f8da a000 	ldr.w	sl, [sl]
    875e:	e7e6      	b.n	872e <work_queue_main+0xe6>
	return list->tail;
    8760:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    8762:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    8764:	4290      	cmp	r0, r2
	list->tail = node;
    8766:	bf08      	it	eq
    8768:	6077      	streq	r7, [r6, #4]
}
    876a:	e7eb      	b.n	8744 <work_queue_main+0xfc>
    876c:	20001ac8 	.word	0x20001ac8
    8770:	20001f78 	.word	0x20001f78

00008774 <submit_to_queue_locked>:
{
    8774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    8776:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8778:	079a      	lsls	r2, r3, #30
{
    877a:	4604      	mov	r4, r0
    877c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    877e:	f3c3 0540 	ubfx	r5, r3, #1, #1
    8782:	d41f      	bmi.n	87c4 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    8784:	075f      	lsls	r7, r3, #29
    8786:	d41f      	bmi.n	87c8 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    8788:	680a      	ldr	r2, [r1, #0]
    878a:	b90a      	cbnz	r2, 8790 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    878c:	6882      	ldr	r2, [r0, #8]
    878e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    8790:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    8792:	bf44      	itt	mi
    8794:	68a3      	ldrmi	r3, [r4, #8]
    8796:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    8798:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    879a:	bf4c      	ite	mi
    879c:	2502      	movmi	r5, #2
		ret = 1;
    879e:	2501      	movpl	r5, #1
	if (queue == NULL) {
    87a0:	b37f      	cbz	r7, 8802 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    87a2:	4b1b      	ldr	r3, [pc, #108]	; (8810 <submit_to_queue_locked+0x9c>)
    87a4:	689b      	ldr	r3, [r3, #8]
    87a6:	42bb      	cmp	r3, r7
    87a8:	d111      	bne.n	87ce <submit_to_queue_locked+0x5a>
    87aa:	f003 fe6f 	bl	c48c <k_is_in_isr>
    87ae:	f080 0001 	eor.w	r0, r0, #1
    87b2:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    87b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    87b8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    87ba:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    87be:	d523      	bpl.n	8808 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    87c0:	b13a      	cbz	r2, 87d2 <submit_to_queue_locked+0x5e>
    87c2:	b940      	cbnz	r0, 87d6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    87c4:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    87c8:	2300      	movs	r3, #0
    87ca:	6033      	str	r3, [r6, #0]
	return ret;
    87cc:	e013      	b.n	87f6 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    87ce:	2000      	movs	r0, #0
    87d0:	e7f0      	b.n	87b4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    87d2:	071b      	lsls	r3, r3, #28
    87d4:	d4f6      	bmi.n	87c4 <submit_to_queue_locked+0x50>
	parent->next = child;
    87d6:	2300      	movs	r3, #0
    87d8:	6023      	str	r3, [r4, #0]
	return list->tail;
    87da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
    87de:	b963      	cbnz	r3, 87fa <submit_to_queue_locked+0x86>
	list->head = node;
    87e0:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
    87e4:	4638      	mov	r0, r7
    87e6:	f003 fe9d 	bl	c524 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    87ea:	68e3      	ldr	r3, [r4, #12]
    87ec:	f043 0304 	orr.w	r3, r3, #4
    87f0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    87f2:	6833      	ldr	r3, [r6, #0]
    87f4:	60a3      	str	r3, [r4, #8]
}
    87f6:	4628      	mov	r0, r5
    87f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    87fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
    87fc:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
    8800:	e7f0      	b.n	87e4 <submit_to_queue_locked+0x70>
		return -EINVAL;
    8802:	f06f 0515 	mvn.w	r5, #21
    8806:	e7df      	b.n	87c8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    8808:	f06f 0512 	mvn.w	r5, #18
    880c:	e7dc      	b.n	87c8 <submit_to_queue_locked+0x54>
    880e:	bf00      	nop
    8810:	20001a9c 	.word	0x20001a9c

00008814 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    8814:	b5f0      	push	{r4, r5, r6, r7, lr}
    8816:	b089      	sub	sp, #36	; 0x24
    8818:	4604      	mov	r4, r0
	list->head = NULL;
    881a:	2000      	movs	r0, #0
	list->tail = NULL;
    881c:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
    8820:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8822:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
    8826:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    882a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    882e:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    8832:	b31d      	cbz	r5, 887c <k_work_queue_start+0x68>
    8834:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    8836:	2800      	cmp	r0, #0
    8838:	f240 1001 	movw	r0, #257	; 0x101
    883c:	bf08      	it	eq
    883e:	2001      	moveq	r0, #1
	*flagp = flags;
    8840:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8844:	2000      	movs	r0, #0
    8846:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    884a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    884e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    8852:	e9cd 0001 	strd	r0, r0, [sp, #4]
    8856:	e9cd 6706 	strd	r6, r7, [sp, #24]
    885a:	4b09      	ldr	r3, [pc, #36]	; (8880 <k_work_queue_start+0x6c>)
    885c:	9400      	str	r4, [sp, #0]
    885e:	4620      	mov	r0, r4
    8860:	f7ff fd44 	bl	82ec <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    8864:	b125      	cbz	r5, 8870 <k_work_queue_start+0x5c>
    8866:	6829      	ldr	r1, [r5, #0]
    8868:	b111      	cbz	r1, 8870 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    886a:	4620      	mov	r0, r4
    886c:	f7ff fc8c 	bl	8188 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    8870:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    8872:	b009      	add	sp, #36	; 0x24
    8874:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8878:	f003 be10 	b.w	c49c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    887c:	2001      	movs	r0, #1
    887e:	e7df      	b.n	8840 <k_work_queue_start+0x2c>
    8880:	00008649 	.word	0x00008649

00008884 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    8884:	b513      	push	{r0, r1, r4, lr}
    8886:	9001      	str	r0, [sp, #4]
    8888:	4608      	mov	r0, r1
	__asm__ volatile(
    888a:	f04f 0120 	mov.w	r1, #32
    888e:	f3ef 8411 	mrs	r4, BASEPRI
    8892:	f381 8812 	msr	BASEPRI_MAX, r1
    8896:	f3bf 8f6f 	isb	sy
	return *flagp;
    889a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    889c:	f011 0f0e 	tst.w	r1, #14
    88a0:	d116      	bne.n	88d0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    88a2:	ea53 0c02 	orrs.w	ip, r3, r2
    88a6:	d108      	bne.n	88ba <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    88a8:	a901      	add	r1, sp, #4
    88aa:	f7ff ff63 	bl	8774 <submit_to_queue_locked>
	__asm__ volatile(
    88ae:	f384 8811 	msr	BASEPRI, r4
    88b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    88b6:	b002      	add	sp, #8
    88b8:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    88ba:	f041 0108 	orr.w	r1, r1, #8
    88be:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    88c0:	9901      	ldr	r1, [sp, #4]
    88c2:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    88c4:	3010      	adds	r0, #16
    88c6:	4903      	ldr	r1, [pc, #12]	; (88d4 <k_work_schedule_for_queue+0x50>)
    88c8:	f000 fbde 	bl	9088 <z_add_timeout>
	return ret;
    88cc:	2001      	movs	r0, #1
    88ce:	e7ee      	b.n	88ae <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    88d0:	2000      	movs	r0, #0
    88d2:	e7ec      	b.n	88ae <k_work_schedule_for_queue+0x2a>
    88d4:	0000c533 	.word	0x0000c533

000088d8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    88d8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    88da:	4801      	ldr	r0, [pc, #4]	; (88e0 <k_work_schedule+0x8>)
    88dc:	f7ff bfd2 	b.w	8884 <k_work_schedule_for_queue>
    88e0:	20001070 	.word	0x20001070

000088e4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    88e4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    88e6:	4c08      	ldr	r4, [pc, #32]	; (8908 <z_reset_time_slice+0x24>)
    88e8:	6823      	ldr	r3, [r4, #0]
    88ea:	b15b      	cbz	r3, 8904 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    88ec:	f7fe f848 	bl	6980 <sys_clock_elapsed>
    88f0:	4603      	mov	r3, r0
    88f2:	6820      	ldr	r0, [r4, #0]
    88f4:	4a05      	ldr	r2, [pc, #20]	; (890c <z_reset_time_slice+0x28>)
    88f6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    88f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    88fc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    88fe:	2100      	movs	r1, #0
    8900:	f003 bf87 	b.w	c812 <z_set_timeout_expiry>
}
    8904:	bd10      	pop	{r4, pc}
    8906:	bf00      	nop
    8908:	20001ad8 	.word	0x20001ad8
    890c:	20001a9c 	.word	0x20001a9c

00008910 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    8910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8912:	4604      	mov	r4, r0
    8914:	460d      	mov	r5, r1
	__asm__ volatile(
    8916:	f04f 0320 	mov.w	r3, #32
    891a:	f3ef 8611 	mrs	r6, BASEPRI
    891e:	f383 8812 	msr	BASEPRI_MAX, r3
    8922:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    8926:	4b0f      	ldr	r3, [pc, #60]	; (8964 <k_sched_time_slice_set+0x54>)
    8928:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    892a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    892e:	f240 30e7 	movw	r0, #999	; 0x3e7
    8932:	6119      	str	r1, [r3, #16]
    8934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8938:	2300      	movs	r3, #0
    893a:	fbe4 0107 	umlal	r0, r1, r4, r7
    893e:	f7f7 fbcd 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    8942:	2c00      	cmp	r4, #0
    8944:	4b08      	ldr	r3, [pc, #32]	; (8968 <k_sched_time_slice_set+0x58>)
    8946:	dc09      	bgt.n	895c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    8948:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    894a:	4b08      	ldr	r3, [pc, #32]	; (896c <k_sched_time_slice_set+0x5c>)
    894c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    894e:	f7ff ffc9 	bl	88e4 <z_reset_time_slice>
	__asm__ volatile(
    8952:	f386 8811 	msr	BASEPRI, r6
    8956:	f3bf 8f6f 	isb	sy
	}
}
    895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    895c:	2802      	cmp	r0, #2
    895e:	bfb8      	it	lt
    8960:	2002      	movlt	r0, #2
    8962:	e7f1      	b.n	8948 <k_sched_time_slice_set+0x38>
    8964:	20001a9c 	.word	0x20001a9c
    8968:	20001ad8 	.word	0x20001ad8
    896c:	20001ad4 	.word	0x20001ad4

00008970 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8970:	b949      	cbnz	r1, 8986 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8972:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    8976:	b930      	cbnz	r0, 8986 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    8978:	4b05      	ldr	r3, [pc, #20]	; (8990 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    897a:	69da      	ldr	r2, [r3, #28]
    897c:	689b      	ldr	r3, [r3, #8]
    897e:	429a      	cmp	r2, r3
    8980:	d001      	beq.n	8986 <z_reschedule+0x16>
	ret = arch_swap(key);
    8982:	f7fb bd05 	b.w	4390 <arch_swap>
    8986:	f381 8811 	msr	BASEPRI, r1
    898a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    898e:	4770      	bx	lr
    8990:	20001a9c 	.word	0x20001a9c

00008994 <k_sched_lock>:
	__asm__ volatile(
    8994:	f04f 0320 	mov.w	r3, #32
    8998:	f3ef 8111 	mrs	r1, BASEPRI
    899c:	f383 8812 	msr	BASEPRI_MAX, r3
    89a0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    89a4:	4b04      	ldr	r3, [pc, #16]	; (89b8 <k_sched_lock+0x24>)
    89a6:	689a      	ldr	r2, [r3, #8]
    89a8:	7bd3      	ldrb	r3, [r2, #15]
    89aa:	3b01      	subs	r3, #1
    89ac:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    89ae:	f381 8811 	msr	BASEPRI, r1
    89b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    89b6:	4770      	bx	lr
    89b8:	20001a9c 	.word	0x20001a9c

000089bc <update_cache>:
{
    89bc:	b538      	push	{r3, r4, r5, lr}
    89be:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    89c0:	480c      	ldr	r0, [pc, #48]	; (89f4 <update_cache+0x38>)
    89c2:	4d0d      	ldr	r5, [pc, #52]	; (89f8 <update_cache+0x3c>)
    89c4:	f003 fe52 	bl	c66c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    89c8:	4604      	mov	r4, r0
    89ca:	b900      	cbnz	r0, 89ce <update_cache+0x12>
    89cc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    89ce:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    89d0:	b94a      	cbnz	r2, 89e6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    89d2:	7b5a      	ldrb	r2, [r3, #13]
    89d4:	06d2      	lsls	r2, r2, #27
    89d6:	d106      	bne.n	89e6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    89d8:	69a2      	ldr	r2, [r4, #24]
    89da:	b922      	cbnz	r2, 89e6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    89dc:	89da      	ldrh	r2, [r3, #14]
    89de:	2a7f      	cmp	r2, #127	; 0x7f
    89e0:	d901      	bls.n	89e6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    89e2:	61eb      	str	r3, [r5, #28]
}
    89e4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    89e6:	429c      	cmp	r4, r3
    89e8:	d001      	beq.n	89ee <update_cache+0x32>
			z_reset_time_slice();
    89ea:	f7ff ff7b 	bl	88e4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    89ee:	61ec      	str	r4, [r5, #28]
}
    89f0:	e7f8      	b.n	89e4 <update_cache+0x28>
    89f2:	bf00      	nop
    89f4:	20001abc 	.word	0x20001abc
    89f8:	20001a9c 	.word	0x20001a9c

000089fc <move_thread_to_end_of_prio_q>:
{
    89fc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    89fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8a02:	7b43      	ldrb	r3, [r0, #13]
    8a04:	2a00      	cmp	r2, #0
{
    8a06:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8a08:	da04      	bge.n	8a14 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8a0e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    8a10:	f003 fdd7 	bl	c5c2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8a14:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    8a16:	4a15      	ldr	r2, [pc, #84]	; (8a6c <move_thread_to_end_of_prio_q+0x70>)
    8a18:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8a1c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    8a1e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a22:	f102 0520 	add.w	r5, r2, #32
    8a26:	42ab      	cmp	r3, r5
    8a28:	d01b      	beq.n	8a62 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a2a:	b1d3      	cbz	r3, 8a62 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    8a2c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    8a30:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    8a34:	4286      	cmp	r6, r0
    8a36:	d00f      	beq.n	8a58 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    8a38:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8a3a:	2800      	cmp	r0, #0
    8a3c:	dd0c      	ble.n	8a58 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    8a3e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    8a40:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    8a44:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    8a46:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    8a48:	6890      	ldr	r0, [r2, #8]
    8a4a:	1a43      	subs	r3, r0, r1
    8a4c:	4258      	negs	r0, r3
}
    8a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    8a52:	4158      	adcs	r0, r3
    8a54:	f7ff bfb2 	b.w	89bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8a58:	42a3      	cmp	r3, r4
    8a5a:	d002      	beq.n	8a62 <move_thread_to_end_of_prio_q+0x66>
    8a5c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a5e:	2b00      	cmp	r3, #0
    8a60:	d1e6      	bne.n	8a30 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    8a62:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    8a66:	6021      	str	r1, [r4, #0]
	list->tail = node;
    8a68:	6251      	str	r1, [r2, #36]	; 0x24
}
    8a6a:	e7ed      	b.n	8a48 <move_thread_to_end_of_prio_q+0x4c>
    8a6c:	20001a9c 	.word	0x20001a9c

00008a70 <z_time_slice>:
{
    8a70:	b538      	push	{r3, r4, r5, lr}
    8a72:	4601      	mov	r1, r0
	__asm__ volatile(
    8a74:	f04f 0320 	mov.w	r3, #32
    8a78:	f3ef 8411 	mrs	r4, BASEPRI
    8a7c:	f383 8812 	msr	BASEPRI_MAX, r3
    8a80:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    8a84:	4b15      	ldr	r3, [pc, #84]	; (8adc <z_time_slice+0x6c>)
    8a86:	4a16      	ldr	r2, [pc, #88]	; (8ae0 <z_time_slice+0x70>)
    8a88:	6898      	ldr	r0, [r3, #8]
    8a8a:	6815      	ldr	r5, [r2, #0]
    8a8c:	42a8      	cmp	r0, r5
    8a8e:	d106      	bne.n	8a9e <z_time_slice+0x2e>
			z_reset_time_slice();
    8a90:	f7ff ff28 	bl	88e4 <z_reset_time_slice>
	__asm__ volatile(
    8a94:	f384 8811 	msr	BASEPRI, r4
    8a98:	f3bf 8f6f 	isb	sy
}
    8a9c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    8a9e:	2500      	movs	r5, #0
    8aa0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    8aa2:	4a10      	ldr	r2, [pc, #64]	; (8ae4 <z_time_slice+0x74>)
    8aa4:	6812      	ldr	r2, [r2, #0]
    8aa6:	b1ba      	cbz	r2, 8ad8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    8aa8:	89c2      	ldrh	r2, [r0, #14]
    8aaa:	2a7f      	cmp	r2, #127	; 0x7f
    8aac:	d814      	bhi.n	8ad8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    8aae:	7b42      	ldrb	r2, [r0, #13]
    8ab0:	06d2      	lsls	r2, r2, #27
    8ab2:	d111      	bne.n	8ad8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8ab4:	4a0c      	ldr	r2, [pc, #48]	; (8ae8 <z_time_slice+0x78>)
    8ab6:	f990 500e 	ldrsb.w	r5, [r0, #14]
    8aba:	6812      	ldr	r2, [r2, #0]
    8abc:	4295      	cmp	r5, r2
    8abe:	db0b      	blt.n	8ad8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    8ac0:	4a0a      	ldr	r2, [pc, #40]	; (8aec <z_time_slice+0x7c>)
    8ac2:	4290      	cmp	r0, r2
    8ac4:	d008      	beq.n	8ad8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    8ac6:	691a      	ldr	r2, [r3, #16]
    8ac8:	428a      	cmp	r2, r1
    8aca:	dc02      	bgt.n	8ad2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    8acc:	f7ff ff96 	bl	89fc <move_thread_to_end_of_prio_q>
    8ad0:	e7de      	b.n	8a90 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    8ad2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    8ad4:	611a      	str	r2, [r3, #16]
    8ad6:	e7dd      	b.n	8a94 <z_time_slice+0x24>
    8ad8:	2200      	movs	r2, #0
    8ada:	e7fb      	b.n	8ad4 <z_time_slice+0x64>
    8adc:	20001a9c 	.word	0x20001a9c
    8ae0:	20001ad0 	.word	0x20001ad0
    8ae4:	20001ad8 	.word	0x20001ad8
    8ae8:	20001ad4 	.word	0x20001ad4
    8aec:	20000ef8 	.word	0x20000ef8

00008af0 <ready_thread>:
{
    8af0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8af2:	f990 200d 	ldrsb.w	r2, [r0, #13]
    8af6:	7b43      	ldrb	r3, [r0, #13]
    8af8:	2a00      	cmp	r2, #0
    8afa:	db2a      	blt.n	8b52 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8afc:	06da      	lsls	r2, r3, #27
    8afe:	d128      	bne.n	8b52 <ready_thread+0x62>
    8b00:	6982      	ldr	r2, [r0, #24]
    8b02:	bb32      	cbnz	r2, 8b52 <ready_thread+0x62>
	return list->head == list;
    8b04:	4a14      	ldr	r2, [pc, #80]	; (8b58 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    8b06:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b0a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    8b0c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b10:	f102 0520 	add.w	r5, r2, #32
    8b14:	42ab      	cmp	r3, r5
    8b16:	d017      	beq.n	8b48 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b18:	b1b3      	cbz	r3, 8b48 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    8b1a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    8b1e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    8b22:	428e      	cmp	r6, r1
    8b24:	d00b      	beq.n	8b3e <ready_thread+0x4e>
		return b2 - b1;
    8b26:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b28:	2900      	cmp	r1, #0
    8b2a:	dd08      	ble.n	8b3e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    8b2c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8b2e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    8b32:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8b34:	6058      	str	r0, [r3, #4]
}
    8b36:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    8b38:	2000      	movs	r0, #0
    8b3a:	f7ff bf3f 	b.w	89bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8b3e:	42a3      	cmp	r3, r4
    8b40:	d002      	beq.n	8b48 <ready_thread+0x58>
    8b42:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b44:	2b00      	cmp	r3, #0
    8b46:	d1ea      	bne.n	8b1e <ready_thread+0x2e>
	node->prev = tail;
    8b48:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    8b4c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    8b4e:	6250      	str	r0, [r2, #36]	; 0x24
}
    8b50:	e7f1      	b.n	8b36 <ready_thread+0x46>
}
    8b52:	bc70      	pop	{r4, r5, r6}
    8b54:	4770      	bx	lr
    8b56:	bf00      	nop
    8b58:	20001a9c 	.word	0x20001a9c

00008b5c <z_sched_start>:
{
    8b5c:	b510      	push	{r4, lr}
	__asm__ volatile(
    8b5e:	f04f 0220 	mov.w	r2, #32
    8b62:	f3ef 8411 	mrs	r4, BASEPRI
    8b66:	f382 8812 	msr	BASEPRI_MAX, r2
    8b6a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    8b6e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    8b70:	0751      	lsls	r1, r2, #29
    8b72:	d404      	bmi.n	8b7e <z_sched_start+0x22>
	__asm__ volatile(
    8b74:	f384 8811 	msr	BASEPRI, r4
    8b78:	f3bf 8f6f 	isb	sy
}
    8b7c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8b7e:	f022 0204 	bic.w	r2, r2, #4
    8b82:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    8b84:	f7ff ffb4 	bl	8af0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8b88:	4621      	mov	r1, r4
    8b8a:	4802      	ldr	r0, [pc, #8]	; (8b94 <z_sched_start+0x38>)
}
    8b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    8b90:	f7ff beee 	b.w	8970 <z_reschedule>
    8b94:	20001f78 	.word	0x20001f78

00008b98 <unready_thread>:
{
    8b98:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    8b9a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8b9e:	7b43      	ldrb	r3, [r0, #13]
    8ba0:	2a00      	cmp	r2, #0
{
    8ba2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8ba4:	da04      	bge.n	8bb0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8baa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8bac:	f003 fd09 	bl	c5c2 <sys_dlist_remove>
	update_cache(thread == _current);
    8bb0:	4b04      	ldr	r3, [pc, #16]	; (8bc4 <unready_thread+0x2c>)
    8bb2:	6898      	ldr	r0, [r3, #8]
    8bb4:	1a43      	subs	r3, r0, r1
    8bb6:	4258      	negs	r0, r3
    8bb8:	4158      	adcs	r0, r3
}
    8bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    8bbe:	f7ff befd 	b.w	89bc <update_cache>
    8bc2:	bf00      	nop
    8bc4:	20001a9c 	.word	0x20001a9c

00008bc8 <pend>:
{
    8bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bcc:	4606      	mov	r6, r0
    8bce:	4615      	mov	r5, r2
    8bd0:	461c      	mov	r4, r3
	__asm__ volatile(
    8bd2:	f04f 0320 	mov.w	r3, #32
    8bd6:	f3ef 8711 	mrs	r7, BASEPRI
    8bda:	f383 8812 	msr	BASEPRI_MAX, r3
    8bde:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    8be2:	f003 fd7b 	bl	c6dc <add_to_waitq_locked>
	__asm__ volatile(
    8be6:	f387 8811 	msr	BASEPRI, r7
    8bea:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8bee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8bf2:	bf08      	it	eq
    8bf4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8bf8:	d008      	beq.n	8c0c <pend+0x44>
    8bfa:	462a      	mov	r2, r5
    8bfc:	4623      	mov	r3, r4
    8bfe:	f106 0018 	add.w	r0, r6, #24
    8c02:	4903      	ldr	r1, [pc, #12]	; (8c10 <pend+0x48>)
}
    8c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8c08:	f000 ba3e 	b.w	9088 <z_add_timeout>
    8c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c10:	0000c699 	.word	0x0000c699

00008c14 <z_pend_curr>:
{
    8c14:	b510      	push	{r4, lr}
	pending_current = _current;
    8c16:	4b07      	ldr	r3, [pc, #28]	; (8c34 <z_pend_curr+0x20>)
    8c18:	6898      	ldr	r0, [r3, #8]
    8c1a:	4b07      	ldr	r3, [pc, #28]	; (8c38 <z_pend_curr+0x24>)
{
    8c1c:	460c      	mov	r4, r1
	pending_current = _current;
    8c1e:	6018      	str	r0, [r3, #0]
{
    8c20:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    8c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8c26:	f7ff ffcf 	bl	8bc8 <pend>
    8c2a:	4620      	mov	r0, r4
}
    8c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8c30:	f7fb bbae 	b.w	4390 <arch_swap>
    8c34:	20001a9c 	.word	0x20001a9c
    8c38:	20001ad0 	.word	0x20001ad0

00008c3c <z_set_prio>:
{
    8c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c3e:	4604      	mov	r4, r0
	__asm__ volatile(
    8c40:	f04f 0320 	mov.w	r3, #32
    8c44:	f3ef 8611 	mrs	r6, BASEPRI
    8c48:	f383 8812 	msr	BASEPRI_MAX, r3
    8c4c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    8c50:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8c52:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    8c54:	b249      	sxtb	r1, r1
    8c56:	d133      	bne.n	8cc0 <z_set_prio+0x84>
		if (need_sched) {
    8c58:	6982      	ldr	r2, [r0, #24]
    8c5a:	bb8a      	cbnz	r2, 8cc0 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8c60:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8c62:	f003 fcae 	bl	c5c2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8c66:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    8c68:	4a17      	ldr	r2, [pc, #92]	; (8cc8 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    8c6a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8c70:	7343      	strb	r3, [r0, #13]
    8c72:	4610      	mov	r0, r2
    8c74:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c78:	4283      	cmp	r3, r0
    8c7a:	d01b      	beq.n	8cb4 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8c7c:	b1d3      	cbz	r3, 8cb4 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    8c7e:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    8c80:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    8c84:	42a9      	cmp	r1, r5
    8c86:	d010      	beq.n	8caa <z_set_prio+0x6e>
		return b2 - b1;
    8c88:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    8c8a:	2d00      	cmp	r5, #0
    8c8c:	dd0d      	ble.n	8caa <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    8c8e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8c90:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8c94:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8c96:	605c      	str	r4, [r3, #4]
			update_cache(1);
    8c98:	2001      	movs	r0, #1
    8c9a:	f7ff fe8f 	bl	89bc <update_cache>
    8c9e:	2001      	movs	r0, #1
	__asm__ volatile(
    8ca0:	f386 8811 	msr	BASEPRI, r6
    8ca4:	f3bf 8f6f 	isb	sy
}
    8ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    8caa:	42bb      	cmp	r3, r7
    8cac:	d002      	beq.n	8cb4 <z_set_prio+0x78>
    8cae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8cb0:	2b00      	cmp	r3, #0
    8cb2:	d1e5      	bne.n	8c80 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    8cb4:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    8cb6:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    8cba:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8cbc:	6254      	str	r4, [r2, #36]	; 0x24
}
    8cbe:	e7eb      	b.n	8c98 <z_set_prio+0x5c>
			thread->base.prio = prio;
    8cc0:	73a1      	strb	r1, [r4, #14]
    8cc2:	2000      	movs	r0, #0
    8cc4:	e7ec      	b.n	8ca0 <z_set_prio+0x64>
    8cc6:	bf00      	nop
    8cc8:	20001a9c 	.word	0x20001a9c

00008ccc <z_impl_k_thread_suspend>:
{
    8ccc:	b570      	push	{r4, r5, r6, lr}
    8cce:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8cd0:	3018      	adds	r0, #24
    8cd2:	f003 fd78 	bl	c7c6 <z_abort_timeout>
	__asm__ volatile(
    8cd6:	f04f 0320 	mov.w	r3, #32
    8cda:	f3ef 8611 	mrs	r6, BASEPRI
    8cde:	f383 8812 	msr	BASEPRI_MAX, r3
    8ce2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    8ce6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    8cea:	7b63      	ldrb	r3, [r4, #13]
    8cec:	2a00      	cmp	r2, #0
    8cee:	da05      	bge.n	8cfc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8cf4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8cf6:	4620      	mov	r0, r4
    8cf8:	f003 fc63 	bl	c5c2 <sys_dlist_remove>
		update_cache(thread == _current);
    8cfc:	4d0b      	ldr	r5, [pc, #44]	; (8d2c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8cfe:	7b63      	ldrb	r3, [r4, #13]
    8d00:	68a8      	ldr	r0, [r5, #8]
    8d02:	f043 0310 	orr.w	r3, r3, #16
    8d06:	7363      	strb	r3, [r4, #13]
    8d08:	1b03      	subs	r3, r0, r4
    8d0a:	4258      	negs	r0, r3
    8d0c:	4158      	adcs	r0, r3
    8d0e:	f7ff fe55 	bl	89bc <update_cache>
	__asm__ volatile(
    8d12:	f386 8811 	msr	BASEPRI, r6
    8d16:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8d1a:	68ab      	ldr	r3, [r5, #8]
    8d1c:	42a3      	cmp	r3, r4
    8d1e:	d103      	bne.n	8d28 <z_impl_k_thread_suspend+0x5c>
}
    8d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8d24:	f003 bc98 	b.w	c658 <z_reschedule_unlocked>
}
    8d28:	bd70      	pop	{r4, r5, r6, pc}
    8d2a:	bf00      	nop
    8d2c:	20001a9c 	.word	0x20001a9c

00008d30 <k_sched_unlock>:
{
    8d30:	b510      	push	{r4, lr}
	__asm__ volatile(
    8d32:	f04f 0320 	mov.w	r3, #32
    8d36:	f3ef 8411 	mrs	r4, BASEPRI
    8d3a:	f383 8812 	msr	BASEPRI_MAX, r3
    8d3e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    8d42:	4b08      	ldr	r3, [pc, #32]	; (8d64 <k_sched_unlock+0x34>)
    8d44:	689a      	ldr	r2, [r3, #8]
    8d46:	7bd3      	ldrb	r3, [r2, #15]
    8d48:	3301      	adds	r3, #1
    8d4a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8d4c:	2000      	movs	r0, #0
    8d4e:	f7ff fe35 	bl	89bc <update_cache>
	__asm__ volatile(
    8d52:	f384 8811 	msr	BASEPRI, r4
    8d56:	f3bf 8f6f 	isb	sy
}
    8d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    8d5e:	f003 bc7b 	b.w	c658 <z_reschedule_unlocked>
    8d62:	bf00      	nop
    8d64:	20001a9c 	.word	0x20001a9c

00008d68 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8d68:	4b04      	ldr	r3, [pc, #16]	; (8d7c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8d6a:	2100      	movs	r1, #0
    8d6c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    8d70:	e9c3 2208 	strd	r2, r2, [r3, #32]
    8d74:	4608      	mov	r0, r1
    8d76:	f7ff bdcb 	b.w	8910 <k_sched_time_slice_set>
    8d7a:	bf00      	nop
    8d7c:	20001a9c 	.word	0x20001a9c

00008d80 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    8d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    8d82:	f04f 0320 	mov.w	r3, #32
    8d86:	f3ef 8511 	mrs	r5, BASEPRI
    8d8a:	f383 8812 	msr	BASEPRI_MAX, r3
    8d8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8d92:	491a      	ldr	r1, [pc, #104]	; (8dfc <z_impl_k_yield+0x7c>)
    8d94:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8d96:	7b43      	ldrb	r3, [r0, #13]
    8d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8d9c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8d9e:	f003 fc10 	bl	c5c2 <sys_dlist_remove>
	}
	queue_thread(_current);
    8da2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8da4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    8da6:	4608      	mov	r0, r1
    8da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    8dac:	735a      	strb	r2, [r3, #13]
    8dae:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8db2:	4282      	cmp	r2, r0
    8db4:	d01c      	beq.n	8df0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8db6:	b1da      	cbz	r2, 8df0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    8db8:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    8dba:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    8dbe:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    8dc2:	42a6      	cmp	r6, r4
    8dc4:	d00f      	beq.n	8de6 <z_impl_k_yield+0x66>
		return b2 - b1;
    8dc6:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    8dc8:	2c00      	cmp	r4, #0
    8dca:	dd0c      	ble.n	8de6 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    8dcc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    8dce:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    8dd2:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    8dd4:	6053      	str	r3, [r2, #4]
	update_cache(1);
    8dd6:	2001      	movs	r0, #1
    8dd8:	f7ff fdf0 	bl	89bc <update_cache>
    8ddc:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    8dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8de2:	f7fb bad5 	b.w	4390 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8de6:	42ba      	cmp	r2, r7
    8de8:	d002      	beq.n	8df0 <z_impl_k_yield+0x70>
    8dea:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8dec:	2a00      	cmp	r2, #0
    8dee:	d1e6      	bne.n	8dbe <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    8df0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    8df2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    8df6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8df8:	624b      	str	r3, [r1, #36]	; 0x24
}
    8dfa:	e7ec      	b.n	8dd6 <z_impl_k_yield+0x56>
    8dfc:	20001a9c 	.word	0x20001a9c

00008e00 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8e00:	ea50 0301 	orrs.w	r3, r0, r1
{
    8e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e08:	4605      	mov	r5, r0
    8e0a:	460e      	mov	r6, r1
	if (ticks == 0) {
    8e0c:	d103      	bne.n	8e16 <z_tick_sleep+0x16>
	z_impl_k_yield();
    8e0e:	f7ff ffb7 	bl	8d80 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    8e12:	2000      	movs	r0, #0
    8e14:	e033      	b.n	8e7e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    8e16:	f06f 0401 	mvn.w	r4, #1
    8e1a:	1a24      	subs	r4, r4, r0
    8e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8e20:	eb63 0301 	sbc.w	r3, r3, r1
    8e24:	2c01      	cmp	r4, #1
    8e26:	f173 0300 	sbcs.w	r3, r3, #0
    8e2a:	da02      	bge.n	8e32 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8e2c:	f003 fd0b 	bl	c846 <sys_clock_tick_get_32>
    8e30:	1944      	adds	r4, r0, r5
    8e32:	f04f 0320 	mov.w	r3, #32
    8e36:	f3ef 8811 	mrs	r8, BASEPRI
    8e3a:	f383 8812 	msr	BASEPRI_MAX, r3
    8e3e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    8e42:	4f10      	ldr	r7, [pc, #64]	; (8e84 <z_tick_sleep+0x84>)
    8e44:	4b10      	ldr	r3, [pc, #64]	; (8e88 <z_tick_sleep+0x88>)
    8e46:	68b8      	ldr	r0, [r7, #8]
    8e48:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    8e4a:	f7ff fea5 	bl	8b98 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8e4e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8e50:	490e      	ldr	r1, [pc, #56]	; (8e8c <z_tick_sleep+0x8c>)
    8e52:	462a      	mov	r2, r5
    8e54:	4633      	mov	r3, r6
    8e56:	3018      	adds	r0, #24
    8e58:	f000 f916 	bl	9088 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8e5c:	68ba      	ldr	r2, [r7, #8]
    8e5e:	7b53      	ldrb	r3, [r2, #13]
    8e60:	f043 0310 	orr.w	r3, r3, #16
    8e64:	7353      	strb	r3, [r2, #13]
    8e66:	4640      	mov	r0, r8
    8e68:	f7fb fa92 	bl	4390 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8e6c:	f003 fceb 	bl	c846 <sys_clock_tick_get_32>
    8e70:	1a20      	subs	r0, r4, r0
    8e72:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8e76:	2801      	cmp	r0, #1
    8e78:	f173 0300 	sbcs.w	r3, r3, #0
    8e7c:	dbc9      	blt.n	8e12 <z_tick_sleep+0x12>
}
    8e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e82:	bf00      	nop
    8e84:	20001a9c 	.word	0x20001a9c
    8e88:	20001ad0 	.word	0x20001ad0
    8e8c:	0000c699 	.word	0x0000c699

00008e90 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8e90:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    8e94:	bf08      	it	eq
    8e96:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    8e9a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8e9c:	d106      	bne.n	8eac <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    8e9e:	4b08      	ldr	r3, [pc, #32]	; (8ec0 <z_impl_k_sleep+0x30>)
    8ea0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8ea2:	f7ff ff13 	bl	8ccc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8eaa:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    8eac:	f7ff ffa8 	bl	8e00 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    8eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8eb4:	fb80 0303 	smull	r0, r3, r0, r3
    8eb8:	0bc0      	lsrs	r0, r0, #15
    8eba:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8ebe:	e7f4      	b.n	8eaa <z_impl_k_sleep+0x1a>
    8ec0:	20001a9c 	.word	0x20001a9c

00008ec4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8ec4:	4b01      	ldr	r3, [pc, #4]	; (8ecc <z_impl_z_current_get+0x8>)
    8ec6:	6898      	ldr	r0, [r3, #8]
    8ec8:	4770      	bx	lr
    8eca:	bf00      	nop
    8ecc:	20001a9c 	.word	0x20001a9c

00008ed0 <z_impl_k_is_preempt_thread>:
    8ed0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    8ed4:	b93b      	cbnz	r3, 8ee6 <z_impl_k_is_preempt_thread+0x16>
    8ed6:	4b05      	ldr	r3, [pc, #20]	; (8eec <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8ed8:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    8eda:	89d8      	ldrh	r0, [r3, #14]
    8edc:	287f      	cmp	r0, #127	; 0x7f
    8ede:	bf8c      	ite	hi
    8ee0:	2000      	movhi	r0, #0
    8ee2:	2001      	movls	r0, #1
    8ee4:	4770      	bx	lr
    8ee6:	2000      	movs	r0, #0
}
    8ee8:	4770      	bx	lr
    8eea:	bf00      	nop
    8eec:	20001a9c 	.word	0x20001a9c

00008ef0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ef4:	4604      	mov	r4, r0
    8ef6:	f04f 0320 	mov.w	r3, #32
    8efa:	f3ef 8611 	mrs	r6, BASEPRI
    8efe:	f383 8812 	msr	BASEPRI_MAX, r3
    8f02:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8f06:	7b43      	ldrb	r3, [r0, #13]
    8f08:	071a      	lsls	r2, r3, #28
    8f0a:	d505      	bpl.n	8f18 <z_thread_abort+0x28>
	__asm__ volatile(
    8f0c:	f386 8811 	msr	BASEPRI, r6
    8f10:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8f18:	f023 0220 	bic.w	r2, r3, #32
    8f1c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8f20:	09d2      	lsrs	r2, r2, #7
    8f22:	d123      	bne.n	8f6c <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8f24:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    8f26:	68a3      	ldr	r3, [r4, #8]
    8f28:	b113      	cbz	r3, 8f30 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    8f2a:	4620      	mov	r0, r4
    8f2c:	f003 fb51 	bl	c5d2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8f30:	f104 0018 	add.w	r0, r4, #24
    8f34:	f003 fc47 	bl	c7c6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8f38:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8f3c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8f40:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f42:	42bd      	cmp	r5, r7
    8f44:	d000      	beq.n	8f48 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8f46:	b9cd      	cbnz	r5, 8f7c <z_thread_abort+0x8c>
		update_cache(1);
    8f48:	2001      	movs	r0, #1
    8f4a:	f7ff fd37 	bl	89bc <update_cache>
		z_thread_monitor_exit(thread);
    8f4e:	4620      	mov	r0, r4
    8f50:	f7ff f8fc 	bl	814c <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    8f54:	4b10      	ldr	r3, [pc, #64]	; (8f98 <z_thread_abort+0xa8>)
    8f56:	689b      	ldr	r3, [r3, #8]
    8f58:	42a3      	cmp	r3, r4
    8f5a:	d1d7      	bne.n	8f0c <z_thread_abort+0x1c>
    8f5c:	f3ef 8305 	mrs	r3, IPSR
    8f60:	2b00      	cmp	r3, #0
    8f62:	d1d3      	bne.n	8f0c <z_thread_abort+0x1c>
    8f64:	4630      	mov	r0, r6
    8f66:	f7fb fa13 	bl	4390 <arch_swap>
	return ret;
    8f6a:	e7cf      	b.n	8f0c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8f6c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8f70:	f043 0308 	orr.w	r3, r3, #8
    8f74:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8f76:	f003 fb24 	bl	c5c2 <sys_dlist_remove>
}
    8f7a:	e7d4      	b.n	8f26 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    8f7c:	4628      	mov	r0, r5
    8f7e:	f003 fb28 	bl	c5d2 <unpend_thread_no_timeout>
    8f82:	f105 0018 	add.w	r0, r5, #24
    8f86:	f003 fc1e 	bl	c7c6 <z_abort_timeout>
    8f8a:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
		ready_thread(thread);
    8f8e:	4628      	mov	r0, r5
    8f90:	f7ff fdae 	bl	8af0 <ready_thread>
    8f94:	e7d4      	b.n	8f40 <z_thread_abort+0x50>
    8f96:	bf00      	nop
    8f98:	20001a9c 	.word	0x20001a9c

00008f9c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    8f9c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8f9e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    8fa2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8fa4:	e9cd 6700 	strd	r6, r7, [sp]
    8fa8:	f7ff fe34 	bl	8c14 <z_pend_curr>

	if (data != NULL) {
    8fac:	b11c      	cbz	r4, 8fb6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    8fae:	4b03      	ldr	r3, [pc, #12]	; (8fbc <z_sched_wait+0x20>)
    8fb0:	689b      	ldr	r3, [r3, #8]
    8fb2:	695b      	ldr	r3, [r3, #20]
    8fb4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    8fb6:	b002      	add	sp, #8
    8fb8:	bdd0      	pop	{r4, r6, r7, pc}
    8fba:	bf00      	nop
    8fbc:	20001a9c 	.word	0x20001a9c

00008fc0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8fc0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    8fc2:	4806      	ldr	r0, [pc, #24]	; (8fdc <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    8fc4:	4a06      	ldr	r2, [pc, #24]	; (8fe0 <z_data_copy+0x20>)
    8fc6:	4907      	ldr	r1, [pc, #28]	; (8fe4 <z_data_copy+0x24>)
    8fc8:	1a12      	subs	r2, r2, r0
    8fca:	f002 fc26 	bl	b81a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8fd2:	4a05      	ldr	r2, [pc, #20]	; (8fe8 <z_data_copy+0x28>)
    8fd4:	4905      	ldr	r1, [pc, #20]	; (8fec <z_data_copy+0x2c>)
    8fd6:	4806      	ldr	r0, [pc, #24]	; (8ff0 <z_data_copy+0x30>)
    8fd8:	f002 bc1f 	b.w	b81a <memcpy>
    8fdc:	20000000 	.word	0x20000000
    8fe0:	20000318 	.word	0x20000318
    8fe4:	0000f644 	.word	0x0000f644
    8fe8:	00000000 	.word	0x00000000
    8fec:	0000f644 	.word	0x0000f644
    8ff0:	20000000 	.word	0x20000000

00008ff4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8ff4:	4b03      	ldr	r3, [pc, #12]	; (9004 <elapsed+0x10>)
    8ff6:	681b      	ldr	r3, [r3, #0]
    8ff8:	b90b      	cbnz	r3, 8ffe <elapsed+0xa>
    8ffa:	f7fd bcc1 	b.w	6980 <sys_clock_elapsed>
}
    8ffe:	2000      	movs	r0, #0
    9000:	4770      	bx	lr
    9002:	bf00      	nop
    9004:	20001adc 	.word	0x20001adc

00009008 <next_timeout>:
	return list->head == list;
    9008:	4b10      	ldr	r3, [pc, #64]	; (904c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    900a:	b510      	push	{r4, lr}
    900c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    900e:	429c      	cmp	r4, r3
    9010:	bf08      	it	eq
    9012:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    9014:	f7ff ffee 	bl	8ff4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    9018:	b1a4      	cbz	r4, 9044 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    901a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    901e:	1a1b      	subs	r3, r3, r0
    9020:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    9024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9028:	f170 0200 	sbcs.w	r2, r0, #0
    902c:	da0a      	bge.n	9044 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    902e:	2800      	cmp	r0, #0
    9030:	bfac      	ite	ge
    9032:	4618      	movge	r0, r3
    9034:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    9036:	4b06      	ldr	r3, [pc, #24]	; (9050 <next_timeout+0x48>)
    9038:	691b      	ldr	r3, [r3, #16]
    903a:	b113      	cbz	r3, 9042 <next_timeout+0x3a>
    903c:	4298      	cmp	r0, r3
    903e:	bfa8      	it	ge
    9040:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    9042:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    9044:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9048:	e7f5      	b.n	9036 <next_timeout+0x2e>
    904a:	bf00      	nop
    904c:	2000021c 	.word	0x2000021c
    9050:	20001a9c 	.word	0x20001a9c

00009054 <remove_timeout>:
{
    9054:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    9056:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9058:	b168      	cbz	r0, 9076 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    905a:	4a0a      	ldr	r2, [pc, #40]	; (9084 <remove_timeout+0x30>)
    905c:	6852      	ldr	r2, [r2, #4]
    905e:	4290      	cmp	r0, r2
    9060:	d009      	beq.n	9076 <remove_timeout+0x22>
	if (next(t) != NULL) {
    9062:	b143      	cbz	r3, 9076 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    9064:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    9068:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    906c:	1912      	adds	r2, r2, r4
    906e:	eb41 0105 	adc.w	r1, r1, r5
    9072:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    9076:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    9078:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    907a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    907c:	2300      	movs	r3, #0
	node->prev = NULL;
    907e:	e9c0 3300 	strd	r3, r3, [r0]
}
    9082:	bd30      	pop	{r4, r5, pc}
    9084:	2000021c 	.word	0x2000021c

00009088 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    908c:	bf08      	it	eq
    908e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    9092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9094:	4604      	mov	r4, r0
    9096:	461f      	mov	r7, r3
    9098:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    909a:	d067      	beq.n	916c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    909c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    909e:	f04f 0320 	mov.w	r3, #32
    90a2:	f3ef 8611 	mrs	r6, BASEPRI
    90a6:	f383 8812 	msr	BASEPRI_MAX, r3
    90aa:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    90ae:	f06f 0201 	mvn.w	r2, #1
    90b2:	1b53      	subs	r3, r2, r5
    90b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    90b8:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    90bc:	2b00      	cmp	r3, #0
    90be:	db1b      	blt.n	90f8 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    90c0:	4b2b      	ldr	r3, [pc, #172]	; (9170 <z_add_timeout+0xe8>)
    90c2:	e9d3 1300 	ldrd	r1, r3, [r3]
    90c6:	1a52      	subs	r2, r2, r1
    90c8:	eb6c 0303 	sbc.w	r3, ip, r3
    90cc:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    90ce:	eb63 0307 	sbc.w	r3, r3, r7
    90d2:	2d01      	cmp	r5, #1
    90d4:	f173 0200 	sbcs.w	r2, r3, #0
    90d8:	bfbc      	itt	lt
    90da:	2501      	movlt	r5, #1
    90dc:	2300      	movlt	r3, #0
    90de:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    90e2:	4824      	ldr	r0, [pc, #144]	; (9174 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    90e4:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    90e8:	4283      	cmp	r3, r0
    90ea:	d118      	bne.n	911e <z_add_timeout+0x96>
	node->prev = tail;
    90ec:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    90f0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    90f4:	6044      	str	r4, [r0, #4]
}
    90f6:	e026      	b.n	9146 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    90f8:	f7ff ff7c 	bl	8ff4 <elapsed>
    90fc:	3501      	adds	r5, #1
    90fe:	f147 0700 	adc.w	r7, r7, #0
    9102:	182d      	adds	r5, r5, r0
    9104:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    9108:	e9c4 5704 	strd	r5, r7, [r4, #16]
    910c:	e7e9      	b.n	90e2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    910e:	1a52      	subs	r2, r2, r1
    9110:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    9114:	459c      	cmp	ip, r3
    9116:	e9c4 2504 	strd	r2, r5, [r4, #16]
    911a:	d0e7      	beq.n	90ec <z_add_timeout+0x64>
    911c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    911e:	2b00      	cmp	r3, #0
    9120:	d0e4      	beq.n	90ec <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    9122:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    9126:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    912a:	428a      	cmp	r2, r1
    912c:	eb75 0e07 	sbcs.w	lr, r5, r7
    9130:	daed      	bge.n	910e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    9132:	1a8a      	subs	r2, r1, r2
    9134:	eb67 0505 	sbc.w	r5, r7, r5
    9138:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    913c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    913e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9142:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9144:	605c      	str	r4, [r3, #4]
	return list->head == list;
    9146:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9148:	4283      	cmp	r3, r0
    914a:	d00b      	beq.n	9164 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    914c:	429c      	cmp	r4, r3
    914e:	d109      	bne.n	9164 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    9150:	f7ff ff5a 	bl	9008 <next_timeout>

			if (next_time == 0 ||
    9154:	b118      	cbz	r0, 915e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    9156:	4b08      	ldr	r3, [pc, #32]	; (9178 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    9158:	691b      	ldr	r3, [r3, #16]
    915a:	4283      	cmp	r3, r0
    915c:	d002      	beq.n	9164 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    915e:	2100      	movs	r1, #0
    9160:	f7fd fbdc 	bl	691c <sys_clock_set_timeout>
	__asm__ volatile(
    9164:	f386 8811 	msr	BASEPRI, r6
    9168:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    916c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    916e:	bf00      	nop
    9170:	20001068 	.word	0x20001068
    9174:	2000021c 	.word	0x2000021c
    9178:	20001a9c 	.word	0x20001a9c

0000917c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    917c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9180:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9182:	f7ff fc75 	bl	8a70 <z_time_slice>
	__asm__ volatile(
    9186:	f04f 0320 	mov.w	r3, #32
    918a:	f3ef 8411 	mrs	r4, BASEPRI
    918e:	f383 8812 	msr	BASEPRI_MAX, r3
    9192:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    9196:	4e24      	ldr	r6, [pc, #144]	; (9228 <sys_clock_announce+0xac>)
	return list->head == list;
    9198:	f8df 8090 	ldr.w	r8, [pc, #144]	; 922c <sys_clock_announce+0xb0>
    919c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    919e:	4d24      	ldr	r5, [pc, #144]	; (9230 <sys_clock_announce+0xb4>)
    91a0:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    91a4:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    91a6:	4540      	cmp	r0, r8
		curr_tick += dt;
    91a8:	e9d5 1e00 	ldrd	r1, lr, [r5]
    91ac:	ea4f 77e2 	mov.w	r7, r2, asr #31
    91b0:	d00b      	beq.n	91ca <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    91b2:	b150      	cbz	r0, 91ca <sys_clock_announce+0x4e>
    91b4:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    91b8:	429a      	cmp	r2, r3
    91ba:	eb77 090c 	sbcs.w	r9, r7, ip
    91be:	da16      	bge.n	91ee <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    91c0:	1a9b      	subs	r3, r3, r2
    91c2:	eb6c 0c07 	sbc.w	ip, ip, r7
    91c6:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    91ca:	1852      	adds	r2, r2, r1
    91cc:	eb4e 0707 	adc.w	r7, lr, r7
    91d0:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    91d4:	2500      	movs	r5, #0
    91d6:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    91d8:	f7ff ff16 	bl	9008 <next_timeout>
    91dc:	4629      	mov	r1, r5
    91de:	f7fd fb9d 	bl	691c <sys_clock_set_timeout>
	__asm__ volatile(
    91e2:	f384 8811 	msr	BASEPRI, r4
    91e6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    91ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    91ee:	1859      	adds	r1, r3, r1
    91f0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    91f4:	1ad3      	subs	r3, r2, r3
    91f6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    91f8:	2200      	movs	r2, #0
    91fa:	2300      	movs	r3, #0
    91fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    9200:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    9204:	f7ff ff26 	bl	9054 <remove_timeout>
    9208:	f384 8811 	msr	BASEPRI, r4
    920c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    9210:	6883      	ldr	r3, [r0, #8]
    9212:	4798      	blx	r3
	__asm__ volatile(
    9214:	f04f 0320 	mov.w	r3, #32
    9218:	f3ef 8411 	mrs	r4, BASEPRI
    921c:	f383 8812 	msr	BASEPRI_MAX, r3
    9220:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    9224:	e7bc      	b.n	91a0 <sys_clock_announce+0x24>
    9226:	bf00      	nop
    9228:	20001adc 	.word	0x20001adc
    922c:	2000021c 	.word	0x2000021c
    9230:	20001068 	.word	0x20001068

00009234 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9234:	b510      	push	{r4, lr}
    9236:	f04f 0320 	mov.w	r3, #32
    923a:	f3ef 8411 	mrs	r4, BASEPRI
    923e:	f383 8812 	msr	BASEPRI_MAX, r3
    9242:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    9246:	f7fd fb9b 	bl	6980 <sys_clock_elapsed>
    924a:	4a05      	ldr	r2, [pc, #20]	; (9260 <sys_clock_tick_get+0x2c>)
    924c:	e9d2 3100 	ldrd	r3, r1, [r2]
    9250:	18c0      	adds	r0, r0, r3
    9252:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    9256:	f384 8811 	msr	BASEPRI, r4
    925a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    925e:	bd10      	pop	{r4, pc}
    9260:	20001068 	.word	0x20001068

00009264 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9264:	b570      	push	{r4, r5, r6, lr}
    9266:	4604      	mov	r4, r0
	__asm__ volatile(
    9268:	f04f 0320 	mov.w	r3, #32
    926c:	f3ef 8511 	mrs	r5, BASEPRI
    9270:	f383 8812 	msr	BASEPRI_MAX, r3
    9274:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9278:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    927c:	3301      	adds	r3, #1
    927e:	f142 0200 	adc.w	r2, r2, #0
    9282:	2b02      	cmp	r3, #2
    9284:	f172 0300 	sbcs.w	r3, r2, #0
    9288:	d304      	bcc.n	9294 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    928a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    928e:	4918      	ldr	r1, [pc, #96]	; (92f0 <z_timer_expiration_handler+0x8c>)
    9290:	f7ff fefa 	bl	9088 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    9294:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9296:	3301      	adds	r3, #1
    9298:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    929a:	6a23      	ldr	r3, [r4, #32]
    929c:	b173      	cbz	r3, 92bc <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    929e:	f385 8811 	msr	BASEPRI, r5
    92a2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    92a6:	6a23      	ldr	r3, [r4, #32]
    92a8:	4620      	mov	r0, r4
    92aa:	4798      	blx	r3
	__asm__ volatile(
    92ac:	f04f 0320 	mov.w	r3, #32
    92b0:	f3ef 8511 	mrs	r5, BASEPRI
    92b4:	f383 8812 	msr	BASEPRI_MAX, r3
    92b8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    92bc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    92c0:	42a6      	cmp	r6, r4
    92c2:	d000      	beq.n	92c6 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    92c4:	b926      	cbnz	r6, 92d0 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    92c6:	f385 8811 	msr	BASEPRI, r5
    92ca:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    92ce:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    92d0:	4630      	mov	r0, r6
    92d2:	f003 f991 	bl	c5f8 <z_unpend_thread_no_timeout>
    92d6:	2300      	movs	r3, #0
    92d8:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
    92dc:	f385 8811 	msr	BASEPRI, r5
    92e0:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    92e4:	4630      	mov	r0, r6
}
    92e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    92ea:	f003 b9c5 	b.w	c678 <z_ready_thread>
    92ee:	bf00      	nop
    92f0:	00009265 	.word	0x00009265

000092f4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    92f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    92f8:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    92fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    92fe:	bf08      	it	eq
    9300:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    9304:	4606      	mov	r6, r0
    9306:	461c      	mov	r4, r3
    9308:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    930c:	4689      	mov	r9, r1
    930e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9310:	d03e      	beq.n	9390 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9312:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9316:	bf08      	it	eq
    9318:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    931c:	4615      	mov	r5, r2
    931e:	4607      	mov	r7, r0
    9320:	d014      	beq.n	934c <z_impl_k_timer_start+0x58>
    9322:	ea50 0302 	orrs.w	r3, r0, r2
    9326:	d011      	beq.n	934c <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    9328:	f06f 0301 	mvn.w	r3, #1
    932c:	1a9b      	subs	r3, r3, r2
    932e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9332:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9336:	2b00      	cmp	r3, #0
    9338:	da08      	bge.n	934c <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    933a:	2a02      	cmp	r2, #2
    933c:	f170 0300 	sbcs.w	r3, r0, #0
    9340:	bfbc      	itt	lt
    9342:	2502      	movlt	r5, #2
    9344:	2700      	movlt	r7, #0
    9346:	3d01      	subs	r5, #1
    9348:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    934c:	f06f 0301 	mvn.w	r3, #1
    9350:	1a5b      	subs	r3, r3, r1
    9352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9356:	eb63 0304 	sbc.w	r3, r3, r4
    935a:	2b00      	cmp	r3, #0
    935c:	da09      	bge.n	9372 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    935e:	2901      	cmp	r1, #1
    9360:	f174 0300 	sbcs.w	r3, r4, #0
    9364:	bfbc      	itt	lt
    9366:	2101      	movlt	r1, #1
    9368:	2400      	movlt	r4, #0
    936a:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    936e:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    9372:	4630      	mov	r0, r6
    9374:	f003 fa27 	bl	c7c6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    9378:	2300      	movs	r3, #0
    937a:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    937c:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9380:	464a      	mov	r2, r9
    9382:	4643      	mov	r3, r8
    9384:	4630      	mov	r0, r6
    9386:	4903      	ldr	r1, [pc, #12]	; (9394 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    9388:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    938c:	f7ff be7c 	b.w	9088 <z_add_timeout>
}
    9390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9394:	00009265 	.word	0x00009265

00009398 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    9398:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    939c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    939e:	4b29      	ldr	r3, [pc, #164]	; (9444 <z_impl_k_poll+0xac>)
    93a0:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
    93a2:	2301      	movs	r3, #1
    93a4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
    93a8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    93ac:	ea52 0305 	orrs.w	r3, r2, r5
{
    93b0:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    93b2:	bf0c      	ite	eq
    93b4:	2301      	moveq	r3, #1
    93b6:	2300      	movne	r3, #0
    93b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
    93bc:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    93be:	f003 faa4 	bl	c90a <register_events>
    93c2:	4681      	mov	r9, r0
	__asm__ volatile(
    93c4:	f04f 0320 	mov.w	r3, #32
    93c8:	f3ef 8a11 	mrs	sl, BASEPRI
    93cc:	f383 8812 	msr	BASEPRI_MAX, r3
    93d0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    93d4:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
    93d8:	b964      	cbnz	r4, 93f4 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    93da:	4601      	mov	r1, r0
    93dc:	4652      	mov	r2, sl
    93de:	4640      	mov	r0, r8
    93e0:	f003 fb64 	bl	caac <clear_event_registrations>
	__asm__ volatile(
    93e4:	f38a 8811 	msr	BASEPRI, sl
    93e8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    93ec:	4620      	mov	r0, r4
    93ee:	b002      	add	sp, #8
    93f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    93f4:	2300      	movs	r3, #0
    93f6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    93fa:	ea56 0305 	orrs.w	r3, r6, r5
    93fe:	d106      	bne.n	940e <z_impl_k_poll+0x76>
    9400:	f38a 8811 	msr	BASEPRI, sl
    9404:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    9408:	f06f 040a 	mvn.w	r4, #10
    940c:	e7ee      	b.n	93ec <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    940e:	e9cd 6500 	strd	r6, r5, [sp]
    9412:	4a0d      	ldr	r2, [pc, #52]	; (9448 <z_impl_k_poll+0xb0>)
    9414:	480d      	ldr	r0, [pc, #52]	; (944c <z_impl_k_poll+0xb4>)
    9416:	4651      	mov	r1, sl
    9418:	f7ff fbfc 	bl	8c14 <z_pend_curr>
    941c:	4604      	mov	r4, r0
	__asm__ volatile(
    941e:	f04f 0320 	mov.w	r3, #32
    9422:	f3ef 8511 	mrs	r5, BASEPRI
    9426:	f383 8812 	msr	BASEPRI_MAX, r3
    942a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    942e:	462a      	mov	r2, r5
    9430:	4649      	mov	r1, r9
    9432:	4640      	mov	r0, r8
    9434:	f003 fb3a 	bl	caac <clear_event_registrations>
	__asm__ volatile(
    9438:	f385 8811 	msr	BASEPRI, r5
    943c:	f3bf 8f6f 	isb	sy
	return swap_rc;
    9440:	e7d4      	b.n	93ec <z_impl_k_poll+0x54>
    9442:	bf00      	nop
    9444:	20001a9c 	.word	0x20001a9c
    9448:	20000224 	.word	0x20000224
    944c:	20001f78 	.word	0x20001f78

00009450 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    9450:	b538      	push	{r3, r4, r5, lr}
    9452:	4603      	mov	r3, r0
	__asm__ volatile(
    9454:	f04f 0220 	mov.w	r2, #32
    9458:	f3ef 8511 	mrs	r5, BASEPRI
    945c:	f382 8812 	msr	BASEPRI_MAX, r2
    9460:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    9464:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    9466:	2101      	movs	r1, #1
    9468:	6081      	str	r1, [r0, #8]
	return list->head == list;
    946a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    946c:	4283      	cmp	r3, r0
    946e:	d106      	bne.n	947e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    9470:	f385 8811 	msr	BASEPRI, r5
    9474:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    9478:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    947a:	4620      	mov	r0, r4
    947c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    947e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    9482:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9484:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9486:	2300      	movs	r3, #0
	node->prev = NULL;
    9488:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    948c:	f003 fab4 	bl	c9f8 <signal_poll_event>
	z_reschedule(&lock, key);
    9490:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    9492:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    9494:	4801      	ldr	r0, [pc, #4]	; (949c <z_impl_k_poll_signal_raise+0x4c>)
    9496:	f7ff fa6b 	bl	8970 <z_reschedule>
	return rc;
    949a:	e7ee      	b.n	947a <z_impl_k_poll_signal_raise+0x2a>
    949c:	20001f78 	.word	0x20001f78

000094a0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    94a0:	4a02      	ldr	r2, [pc, #8]	; (94ac <boot_banner+0xc>)
    94a2:	4903      	ldr	r1, [pc, #12]	; (94b0 <boot_banner+0x10>)
    94a4:	4803      	ldr	r0, [pc, #12]	; (94b4 <boot_banner+0x14>)
    94a6:	f000 b89d 	b.w	95e4 <printk>
    94aa:	bf00      	nop
    94ac:	0000dff2 	.word	0x0000dff2
    94b0:	0000f606 	.word	0x0000f606
    94b4:	0000f614 	.word	0x0000f614

000094b8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    94b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    94ba:	4b09      	ldr	r3, [pc, #36]	; (94e0 <k_sys_work_q_init+0x28>)
    94bc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    94be:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    94c0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    94c2:	9300      	str	r3, [sp, #0]
    94c4:	4907      	ldr	r1, [pc, #28]	; (94e4 <k_sys_work_q_init+0x2c>)
    94c6:	4808      	ldr	r0, [pc, #32]	; (94e8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    94c8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    94cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    94d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    94d4:	f7ff f99e 	bl	8814 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    94d8:	4620      	mov	r0, r4
    94da:	b004      	add	sp, #16
    94dc:	bd10      	pop	{r4, pc}
    94de:	bf00      	nop
    94e0:	0000f63b 	.word	0x0000f63b
    94e4:	20004080 	.word	0x20004080
    94e8:	20001070 	.word	0x20001070

000094ec <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    94ec:	4770      	bx	lr

000094ee <gpio_pin_set.constprop.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    94ee:	6903      	ldr	r3, [r0, #16]
    94f0:	681b      	ldr	r3, [r3, #0]
    94f2:	061b      	lsls	r3, r3, #24
		value = (value != 0) ? 0 : 1;
    94f4:	bf48      	it	mi
    94f6:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
    94fa:	b119      	cbz	r1, 9504 <gpio_pin_set.constprop.0+0x16>
	return api->port_set_bits_raw(port, pins);
    94fc:	6883      	ldr	r3, [r0, #8]
    94fe:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    9500:	2180      	movs	r1, #128	; 0x80
    9502:	4718      	bx	r3
    9504:	6883      	ldr	r3, [r0, #8]
    9506:	691b      	ldr	r3, [r3, #16]
    9508:	e7fa      	b.n	9500 <gpio_pin_set.constprop.0+0x12>

0000950a <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    950a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    950e:	4607      	mov	r7, r0
    9510:	460e      	mov	r6, r1
    9512:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
    9514:	461d      	mov	r5, r3
    9516:	b1fb      	cbz	r3, 9558 <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
    9518:	7818      	ldrb	r0, [r3, #0]
    951a:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    951c:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
    9520:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    9524:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    9526:	f04f 0900 	mov.w	r9, #0
    952a:	45d1      	cmp	r9, sl
    952c:	d308      	bcc.n	9540 <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
    952e:	686a      	ldr	r2, [r5, #4]
    9530:	f105 0308 	add.w	r3, r5, #8
    9534:	4641      	mov	r1, r8
    9536:	4638      	mov	r0, r7
    9538:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    953a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    953e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    9540:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    9544:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    9548:	4620      	mov	r0, r4
    954a:	f002 f910 	bl	b76e <strlen>
    954e:	3001      	adds	r0, #1
    9550:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    9552:	f109 0901 	add.w	r9, r9, #1
    9556:	e7e8      	b.n	952a <cbpprintf_external+0x20>
}
    9558:	f06f 0015 	mvn.w	r0, #21
    955c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009560 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    9560:	4603      	mov	r3, r0
    9562:	b140      	cbz	r0, 9576 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9564:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9566:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    956a:	2a02      	cmp	r2, #2
    956c:	d006      	beq.n	957c <sys_notify_validate+0x1c>
    956e:	2a03      	cmp	r2, #3
    9570:	d004      	beq.n	957c <sys_notify_validate+0x1c>
    9572:	2a01      	cmp	r2, #1
    9574:	d005      	beq.n	9582 <sys_notify_validate+0x22>
		return -EINVAL;
    9576:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    957a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    957c:	681a      	ldr	r2, [r3, #0]
    957e:	2a00      	cmp	r2, #0
    9580:	d0f9      	beq.n	9576 <sys_notify_validate+0x16>
		notify->result = 0;
    9582:	2000      	movs	r0, #0
    9584:	6098      	str	r0, [r3, #8]
    9586:	4770      	bx	lr

00009588 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9588:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    958a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    958e:	2a02      	cmp	r2, #2
{
    9590:	b510      	push	{r4, lr}
    9592:	4603      	mov	r3, r0
	notify->result = res;
    9594:	6081      	str	r1, [r0, #8]
	switch (method) {
    9596:	d00a      	beq.n	95ae <sys_notify_finalize+0x26>
    9598:	2a03      	cmp	r2, #3
    959a:	d10b      	bne.n	95b4 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    959c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    959e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    95a0:	2200      	movs	r2, #0
    95a2:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    95a4:	b108      	cbz	r0, 95aa <sys_notify_finalize+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    95a6:	f7ff ff53 	bl	9450 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    95aa:	4620      	mov	r0, r4
    95ac:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    95ae:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    95b0:	2400      	movs	r4, #0
		break;
    95b2:	e7f5      	b.n	95a0 <sys_notify_finalize+0x18>
	switch (method) {
    95b4:	2400      	movs	r4, #0
    95b6:	4620      	mov	r0, r4
    95b8:	e7f2      	b.n	95a0 <sys_notify_finalize+0x18>

000095ba <arch_printk_char_out>:
}
    95ba:	2000      	movs	r0, #0
    95bc:	4770      	bx	lr

000095be <str_out>:
{
    95be:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    95c0:	688a      	ldr	r2, [r1, #8]
    95c2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    95c4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    95c6:	b114      	cbz	r4, 95ce <str_out+0x10>
    95c8:	684b      	ldr	r3, [r1, #4]
    95ca:	4293      	cmp	r3, r2
    95cc:	dc01      	bgt.n	95d2 <str_out+0x14>
		ctx->count++;
    95ce:	608d      	str	r5, [r1, #8]
}
    95d0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    95d2:	3b01      	subs	r3, #1
    95d4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    95d6:	bf08      	it	eq
    95d8:	2200      	moveq	r2, #0
    95da:	608d      	str	r5, [r1, #8]
    95dc:	bf0c      	ite	eq
    95de:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    95e0:	54a0      	strbne	r0, [r4, r2]
    95e2:	e7f5      	b.n	95d0 <str_out+0x12>

000095e4 <printk>:
{
    95e4:	b40f      	push	{r0, r1, r2, r3}
    95e6:	b507      	push	{r0, r1, r2, lr}
    95e8:	a904      	add	r1, sp, #16
    95ea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    95ee:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    95f0:	f000 fd62 	bl	a0b8 <z_log_vprintk>
}
    95f4:	b003      	add	sp, #12
    95f6:	f85d eb04 	ldr.w	lr, [sp], #4
    95fa:	b004      	add	sp, #16
    95fc:	4770      	bx	lr

000095fe <snprintk>:
{
    95fe:	b40c      	push	{r2, r3}
    9600:	b507      	push	{r0, r1, r2, lr}
    9602:	ab04      	add	r3, sp, #16
    9604:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    9608:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    960a:	f7f7 f94b 	bl	8a4 <vsnprintk>
}
    960e:	b003      	add	sp, #12
    9610:	f85d eb04 	ldr.w	lr, [sp], #4
    9614:	b002      	add	sp, #8
    9616:	4770      	bx	lr

00009618 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9618:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    961a:	f013 0307 	ands.w	r3, r3, #7
    961e:	d105      	bne.n	962c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9620:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    9622:	2b00      	cmp	r3, #0
    9624:	bf0c      	ite	eq
    9626:	2000      	moveq	r0, #0
    9628:	2003      	movne	r0, #3
    962a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    962c:	2b02      	cmp	r3, #2
    962e:	d105      	bne.n	963c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    9630:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    9632:	2b00      	cmp	r3, #0
    9634:	bf14      	ite	ne
    9636:	2000      	movne	r0, #0
    9638:	2004      	moveq	r0, #4
    963a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    963c:	2b01      	cmp	r3, #1
    963e:	d105      	bne.n	964c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    9640:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    9642:	2b00      	cmp	r3, #0
    9644:	bf0c      	ite	eq
    9646:	2000      	moveq	r0, #0
    9648:	2005      	movne	r0, #5
    964a:	4770      	bx	lr
	int evt = EVT_NOP;
    964c:	2000      	movs	r0, #0
}
    964e:	4770      	bx	lr

00009650 <notify_one>:
{
    9650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9654:	460d      	mov	r5, r1
    9656:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9658:	4619      	mov	r1, r3
    965a:	1d28      	adds	r0, r5, #4
{
    965c:	4690      	mov	r8, r2
    965e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9660:	f7ff ff92 	bl	9588 <sys_notify_finalize>
	if (cb) {
    9664:	4604      	mov	r4, r0
    9666:	b138      	cbz	r0, 9678 <notify_one+0x28>
		cb(mgr, cli, state, res);
    9668:	4633      	mov	r3, r6
    966a:	4642      	mov	r2, r8
    966c:	4629      	mov	r1, r5
    966e:	4638      	mov	r0, r7
    9670:	46a4      	mov	ip, r4
}
    9672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9676:	4760      	bx	ip
}
    9678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000967c <transition_complete>:
{
    967c:	b410      	push	{r4}
	__asm__ volatile(
    967e:	f04f 0420 	mov.w	r4, #32
    9682:	f3ef 8211 	mrs	r2, BASEPRI
    9686:	f384 8812 	msr	BASEPRI_MAX, r4
    968a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    968e:	6141      	str	r1, [r0, #20]
}
    9690:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    9692:	2101      	movs	r1, #1
    9694:	f7f7 b91a 	b.w	8cc <process_event>

00009698 <validate_args>:
{
    9698:	b510      	push	{r4, lr}
    969a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    969c:	b140      	cbz	r0, 96b0 <validate_args+0x18>
    969e:	b139      	cbz	r1, 96b0 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    96a0:	1d08      	adds	r0, r1, #4
    96a2:	f7ff ff5d 	bl	9560 <sys_notify_validate>
	if ((rv == 0)
    96a6:	b928      	cbnz	r0, 96b4 <validate_args+0x1c>
	    && ((cli->notify.flags
    96a8:	68a3      	ldr	r3, [r4, #8]
    96aa:	f033 0303 	bics.w	r3, r3, #3
    96ae:	d001      	beq.n	96b4 <validate_args+0x1c>
		rv = -EINVAL;
    96b0:	f06f 0015 	mvn.w	r0, #21
}
    96b4:	bd10      	pop	{r4, pc}

000096b6 <onoff_manager_init>:
{
    96b6:	b538      	push	{r3, r4, r5, lr}
    96b8:	460c      	mov	r4, r1
	if ((mgr == NULL)
    96ba:	4605      	mov	r5, r0
    96bc:	b158      	cbz	r0, 96d6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    96be:	b151      	cbz	r1, 96d6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    96c0:	680b      	ldr	r3, [r1, #0]
    96c2:	b143      	cbz	r3, 96d6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    96c4:	684b      	ldr	r3, [r1, #4]
    96c6:	b133      	cbz	r3, 96d6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    96c8:	221c      	movs	r2, #28
    96ca:	2100      	movs	r1, #0
    96cc:	f002 f8b0 	bl	b830 <memset>
    96d0:	612c      	str	r4, [r5, #16]
	return 0;
    96d2:	2000      	movs	r0, #0
}
    96d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    96d6:	f06f 0015 	mvn.w	r0, #21
    96da:	e7fb      	b.n	96d4 <onoff_manager_init+0x1e>

000096dc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    96dc:	b570      	push	{r4, r5, r6, lr}
    96de:	4604      	mov	r4, r0
    96e0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    96e2:	f7ff ffd9 	bl	9698 <validate_args>

	if (rv < 0) {
    96e6:	1e05      	subs	r5, r0, #0
    96e8:	db31      	blt.n	974e <onoff_request+0x72>
    96ea:	f04f 0320 	mov.w	r3, #32
    96ee:	f3ef 8111 	mrs	r1, BASEPRI
    96f2:	f383 8812 	msr	BASEPRI_MAX, r3
    96f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    96fa:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    96fc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    96fe:	f64f 75ff 	movw	r5, #65535	; 0xffff
    9702:	42ab      	cmp	r3, r5
    9704:	f000 0207 	and.w	r2, r0, #7
    9708:	d02e      	beq.n	9768 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    970a:	2a02      	cmp	r2, #2
    970c:	d10e      	bne.n	972c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    970e:	3301      	adds	r3, #1
    9710:	8363      	strh	r3, [r4, #26]
	rv = state;
    9712:	4615      	mov	r5, r2
		notify = true;
    9714:	2301      	movs	r3, #1
	__asm__ volatile(
    9716:	f381 8811 	msr	BASEPRI, r1
    971a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    971e:	b1b3      	cbz	r3, 974e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    9720:	2300      	movs	r3, #0
    9722:	4631      	mov	r1, r6
    9724:	4620      	mov	r0, r4
    9726:	f7ff ff93 	bl	9650 <notify_one>
    972a:	e010      	b.n	974e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    972c:	0783      	lsls	r3, r0, #30
    972e:	d001      	beq.n	9734 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    9730:	2a06      	cmp	r2, #6
    9732:	d10e      	bne.n	9752 <onoff_request+0x76>
	parent->next = child;
    9734:	2300      	movs	r3, #0
    9736:	6033      	str	r3, [r6, #0]
	return list->tail;
    9738:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    973a:	b993      	cbnz	r3, 9762 <onoff_request+0x86>
	list->head = node;
    973c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    9740:	4615      	mov	r5, r2
    9742:	b962      	cbnz	r2, 975e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    9744:	460a      	mov	r2, r1
    9746:	4620      	mov	r0, r4
    9748:	2102      	movs	r1, #2
    974a:	f7f7 f8bf 	bl	8cc <process_event>
		}
	}

	return rv;
}
    974e:	4628      	mov	r0, r5
    9750:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    9752:	2a05      	cmp	r2, #5
    9754:	bf0c      	ite	eq
    9756:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    975a:	f06f 0504 	mvnne.w	r5, #4
    975e:	2300      	movs	r3, #0
    9760:	e7d9      	b.n	9716 <onoff_request+0x3a>
	parent->next = child;
    9762:	601e      	str	r6, [r3, #0]
	list->tail = node;
    9764:	6066      	str	r6, [r4, #4]
}
    9766:	e7eb      	b.n	9740 <onoff_request+0x64>
		rv = -EAGAIN;
    9768:	f06f 050a 	mvn.w	r5, #10
    976c:	e7f7      	b.n	975e <onoff_request+0x82>

0000976e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    976e:	b510      	push	{r4, lr}
	__asm__ volatile(
    9770:	f04f 0320 	mov.w	r3, #32
    9774:	f3ef 8211 	mrs	r2, BASEPRI
    9778:	f383 8812 	msr	BASEPRI_MAX, r3
    977c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9780:	8b04      	ldrh	r4, [r0, #24]
    9782:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    9786:	2c02      	cmp	r4, #2
    9788:	d00a      	beq.n	97a0 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    978a:	2c01      	cmp	r4, #1
    978c:	bf0c      	ite	eq
    978e:	f06f 0004 	mvneq.w	r0, #4
    9792:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    9796:	f382 8811 	msr	BASEPRI, r2
    979a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    979e:	e008      	b.n	97b2 <onoff_release+0x44>
	mgr->refs -= 1U;
    97a0:	8b43      	ldrh	r3, [r0, #26]
    97a2:	3b01      	subs	r3, #1
    97a4:	b29b      	uxth	r3, r3
    97a6:	8343      	strh	r3, [r0, #26]
	if (stop) {
    97a8:	b923      	cbnz	r3, 97b4 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    97aa:	4621      	mov	r1, r4
    97ac:	f7f7 f88e 	bl	8cc <process_event>
	int rv = state;
    97b0:	4620      	mov	r0, r4
}
    97b2:	bd10      	pop	{r4, pc}
	int rv = state;
    97b4:	4620      	mov	r0, r4
    97b6:	e7ee      	b.n	9796 <onoff_release+0x28>

000097b8 <onoff_sync_lock>:
	__asm__ volatile(
    97b8:	f04f 0220 	mov.w	r2, #32
    97bc:	f3ef 8311 	mrs	r3, BASEPRI
    97c0:	f382 8812 	msr	BASEPRI_MAX, r2
    97c4:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
    97c8:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
    97ca:	600b      	str	r3, [r1, #0]
}
    97cc:	4770      	bx	lr

000097ce <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    97ce:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    97d0:	6804      	ldr	r4, [r0, #0]
    97d2:	2c00      	cmp	r4, #0
		srv->count = 0;
    97d4:	bfbc      	itt	lt
    97d6:	2400      	movlt	r4, #0
    97d8:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
    97da:	2b00      	cmp	r3, #0
{
    97dc:	460d      	mov	r5, r1
    97de:	4611      	mov	r1, r2
    97e0:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
    97e4:	da0c      	bge.n	9800 <onoff_sync_finalize+0x32>
		srv->count = res;
    97e6:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
    97e8:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
    97ea:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
    97ec:	f385 8811 	msr	BASEPRI, r5
    97f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    97f4:	b111      	cbz	r1, 97fc <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    97f6:	2000      	movs	r0, #0
    97f8:	f7ff ff2a 	bl	9650 <notify_one>
	}

	return rv;
}
    97fc:	4620      	mov	r0, r4
    97fe:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
    9800:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
    9802:	b11a      	cbz	r2, 980c <onoff_sync_finalize+0x3e>
		srv->count += 1;
    9804:	3401      	adds	r4, #1
		srv->count -= 1;
    9806:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
    9808:	2202      	movs	r2, #2
    980a:	e7ee      	b.n	97ea <onoff_sync_finalize+0x1c>
		srv->count -= 1;
    980c:	3c01      	subs	r4, #1
    980e:	e7fa      	b.n	9806 <onoff_sync_finalize+0x38>

00009810 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9810:	4604      	mov	r4, r0
    9812:	b508      	push	{r3, lr}
    9814:	4608      	mov	r0, r1
    9816:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9818:	461a      	mov	r2, r3
    981a:	47a0      	blx	r4
	return z_impl_z_current_get();
    981c:	f7ff fb52 	bl	8ec4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9820:	f7fb f9fc 	bl	4c1c <z_impl_k_thread_abort>

00009824 <encode_uint>:
{
    9824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9828:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    982a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    982c:	2b6f      	cmp	r3, #111	; 0x6f
{
    982e:	4680      	mov	r8, r0
    9830:	460f      	mov	r7, r1
    9832:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9834:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    9838:	d029      	beq.n	988e <encode_uint+0x6a>
    983a:	d824      	bhi.n	9886 <encode_uint+0x62>
		return 16;
    983c:	2b58      	cmp	r3, #88	; 0x58
    983e:	bf14      	ite	ne
    9840:	260a      	movne	r6, #10
    9842:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    9844:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    9848:	4632      	mov	r2, r6
    984a:	2300      	movs	r3, #0
    984c:	4640      	mov	r0, r8
    984e:	4639      	mov	r1, r7
    9850:	f7f6 fc44 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9854:	2a09      	cmp	r2, #9
    9856:	b2d4      	uxtb	r4, r2
    9858:	d81e      	bhi.n	9898 <encode_uint+0x74>
    985a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    985c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    985e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    9860:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9864:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    9868:	d301      	bcc.n	986e <encode_uint+0x4a>
    986a:	45d1      	cmp	r9, sl
    986c:	d811      	bhi.n	9892 <encode_uint+0x6e>
	if (conv->flag_hash) {
    986e:	782b      	ldrb	r3, [r5, #0]
    9870:	069b      	lsls	r3, r3, #26
    9872:	d505      	bpl.n	9880 <encode_uint+0x5c>
		if (radix == 8) {
    9874:	2e08      	cmp	r6, #8
    9876:	d115      	bne.n	98a4 <encode_uint+0x80>
			conv->altform_0 = true;
    9878:	78ab      	ldrb	r3, [r5, #2]
    987a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    987e:	70ab      	strb	r3, [r5, #2]
}
    9880:	4648      	mov	r0, r9
    9882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    9886:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    988a:	2b70      	cmp	r3, #112	; 0x70
    988c:	e7d7      	b.n	983e <encode_uint+0x1a>
	switch (specifier) {
    988e:	2608      	movs	r6, #8
    9890:	e7d8      	b.n	9844 <encode_uint+0x20>
		value /= radix;
    9892:	4680      	mov	r8, r0
    9894:	460f      	mov	r7, r1
    9896:	e7d7      	b.n	9848 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9898:	f1bb 0f19 	cmp.w	fp, #25
    989c:	bf94      	ite	ls
    989e:	3437      	addls	r4, #55	; 0x37
    98a0:	3457      	addhi	r4, #87	; 0x57
    98a2:	e7db      	b.n	985c <encode_uint+0x38>
		} else if (radix == 16) {
    98a4:	2e10      	cmp	r6, #16
    98a6:	d1eb      	bne.n	9880 <encode_uint+0x5c>
			conv->altform_0c = true;
    98a8:	78ab      	ldrb	r3, [r5, #2]
    98aa:	f043 0310 	orr.w	r3, r3, #16
    98ae:	e7e6      	b.n	987e <encode_uint+0x5a>

000098b0 <outs>:
{
    98b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98b4:	4607      	mov	r7, r0
    98b6:	4688      	mov	r8, r1
    98b8:	4615      	mov	r5, r2
    98ba:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    98bc:	4614      	mov	r4, r2
    98be:	42b4      	cmp	r4, r6
    98c0:	eba4 0005 	sub.w	r0, r4, r5
    98c4:	d302      	bcc.n	98cc <outs+0x1c>
    98c6:	b93e      	cbnz	r6, 98d8 <outs+0x28>
    98c8:	7823      	ldrb	r3, [r4, #0]
    98ca:	b12b      	cbz	r3, 98d8 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    98cc:	f814 0b01 	ldrb.w	r0, [r4], #1
    98d0:	4641      	mov	r1, r8
    98d2:	47b8      	blx	r7
		if (rc < 0) {
    98d4:	2800      	cmp	r0, #0
    98d6:	daf2      	bge.n	98be <outs+0xe>
}
    98d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000098dc <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    98dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    98e0:	4770      	bx	lr

000098e2 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    98e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
    98e6:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
    98e8:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
    98ec:	454c      	cmp	r4, r9
{
    98ee:	4605      	mov	r5, r0
    98f0:	460e      	mov	r6, r1
    98f2:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
    98f4:	d907      	bls.n	9906 <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    98f6:	6907      	ldr	r7, [r0, #16]
    98f8:	f7ff fff0 	bl	98dc <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    98fc:	fbb0 f0f7 	udiv	r0, r0, r7
    9900:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    9902:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    9906:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    9908:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    990a:	692f      	ldr	r7, [r5, #16]
    990c:	b18b      	cbz	r3, 9932 <ring_buf_put_claim+0x50>
    990e:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
    9910:	443c      	add	r4, r7
    9912:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    9916:	4540      	cmp	r0, r8
    9918:	bf28      	it	cs
    991a:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
    991c:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    991e:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
    9920:	42b8      	cmp	r0, r7
    9922:	bf28      	it	cs
    9924:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    9926:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    9928:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    992a:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
    992c:	60a9      	str	r1, [r5, #8]

	return allocated;
}
    992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    9932:	fbb1 f3f7 	udiv	r3, r1, r7
    9936:	fb07 1313 	mls	r3, r7, r3, r1
    993a:	e7e9      	b.n	9910 <ring_buf_put_claim+0x2e>

0000993c <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    993c:	b570      	push	{r4, r5, r6, lr}
    993e:	4605      	mov	r5, r0
    9940:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    9942:	f7ff ffcb 	bl	98dc <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    9946:	686e      	ldr	r6, [r5, #4]
    9948:	692a      	ldr	r2, [r5, #16]
    994a:	682b      	ldr	r3, [r5, #0]
    994c:	1931      	adds	r1, r6, r4
    994e:	4413      	add	r3, r2
    9950:	4299      	cmp	r1, r3
    9952:	d80c      	bhi.n	996e <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    9954:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
    9956:	bf83      	ittte	hi
    9958:	fbb0 f3f2 	udivhi	r3, r0, r2
    995c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    9960:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    9962:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
    9964:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    9966:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
    996a:	2000      	movs	r0, #0
}
    996c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    996e:	f06f 0015 	mvn.w	r0, #21
    9972:	e7fb      	b.n	996c <ring_buf_put_finish+0x30>

00009974 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    9974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9978:	4680      	mov	r8, r0
    997a:	460e      	mov	r6, r1
    997c:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    997e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    9980:	462a      	mov	r2, r5
    9982:	a901      	add	r1, sp, #4
    9984:	4640      	mov	r0, r8
    9986:	f7ff ffac 	bl	98e2 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    998a:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    998c:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    998e:	4602      	mov	r2, r0
    9990:	9801      	ldr	r0, [sp, #4]
    9992:	f001 ff42 	bl	b81a <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    9996:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    9998:	4427      	add	r7, r4
		data += partial_size;
    999a:	4426      	add	r6, r4
	} while (size && partial_size);
    999c:	d001      	beq.n	99a2 <ring_buf_put+0x2e>
    999e:	2c00      	cmp	r4, #0
    99a0:	d1ee      	bne.n	9980 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    99a2:	4639      	mov	r1, r7
    99a4:	4640      	mov	r0, r8
    99a6:	f7ff ffc9 	bl	993c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    99aa:	4638      	mov	r0, r7
    99ac:	b002      	add	sp, #8
    99ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000099b2 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    99b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    99b6:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    99b8:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    99ba:	42b3      	cmp	r3, r6
{
    99bc:	4604      	mov	r4, r0
    99be:	460f      	mov	r7, r1
    99c0:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    99c2:	d907      	bls.n	99d4 <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    99c4:	6905      	ldr	r5, [r0, #16]
    99c6:	f7ff ff89 	bl	98dc <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    99ca:	fbb0 f1f5 	udiv	r1, r0, r5
    99ce:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
    99d0:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    99d4:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    99d6:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    99d8:	6923      	ldr	r3, [r4, #16]
    99da:	b185      	cbz	r5, 99fe <ring_buf_get_claim+0x4c>
    99dc:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    99de:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    99e0:	4540      	cmp	r0, r8
    99e2:	bf28      	it	cs
    99e4:	4640      	movcs	r0, r8
    99e6:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
    99e8:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    99ea:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
    99ec:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    99ee:	bf28      	it	cs
    99f0:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
    99f2:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
    99f4:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    99f6:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    99f8:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    99fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    99fe:	fbb1 f5f3 	udiv	r5, r1, r3
    9a02:	fb03 1515 	mls	r5, r3, r5, r1
    9a06:	e7ea      	b.n	99de <ring_buf_get_claim+0x2c>

00009a08 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    9a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    9a0a:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    9a0c:	68c3      	ldr	r3, [r0, #12]
    9a0e:	42b3      	cmp	r3, r6
{
    9a10:	4605      	mov	r5, r0
    9a12:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    9a14:	d914      	bls.n	9a40 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    9a16:	6907      	ldr	r7, [r0, #16]
    9a18:	f7ff ff60 	bl	98dc <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    9a1c:	fbb0 f1f7 	udiv	r1, r0, r7
    9a20:	3901      	subs	r1, #1
    9a22:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
    9a26:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    9a28:	6829      	ldr	r1, [r5, #0]
    9a2a:	4421      	add	r1, r4
    9a2c:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    9a2e:	bf9f      	itttt	ls
    9a30:	1ac9      	subls	r1, r1, r3
    9a32:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    9a34:	60e9      	strls	r1, [r5, #12]

	return 0;
    9a36:	2000      	movls	r0, #0
		return -EINVAL;
    9a38:	bf88      	it	hi
    9a3a:	f06f 0015 	mvnhi.w	r0, #21
}
    9a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    9a40:	2300      	movs	r3, #0
    9a42:	e7f1      	b.n	9a28 <ring_buf_get_finish+0x20>

00009a44 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    9a44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9a48:	4680      	mov	r8, r0
    9a4a:	460d      	mov	r5, r1
    9a4c:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    9a4e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    9a50:	4632      	mov	r2, r6
    9a52:	a901      	add	r1, sp, #4
    9a54:	4640      	mov	r0, r8
    9a56:	f7ff ffac 	bl	99b2 <ring_buf_get_claim>
    9a5a:	4604      	mov	r4, r0
		if (data) {
    9a5c:	b12d      	cbz	r5, 9a6a <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    9a5e:	4602      	mov	r2, r0
    9a60:	9901      	ldr	r1, [sp, #4]
    9a62:	4628      	mov	r0, r5
    9a64:	f001 fed9 	bl	b81a <memcpy>
			data += partial_size;
    9a68:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    9a6a:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    9a6c:	4427      	add	r7, r4
	} while (size && partial_size);
    9a6e:	d001      	beq.n	9a74 <ring_buf_get+0x30>
    9a70:	2c00      	cmp	r4, #0
    9a72:	d1ed      	bne.n	9a50 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    9a74:	4639      	mov	r1, r7
    9a76:	4640      	mov	r0, r8
    9a78:	f7ff ffc6 	bl	9a08 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    9a7c:	4638      	mov	r0, r7
    9a7e:	b002      	add	sp, #8
    9a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009a84 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    9a84:	4602      	mov	r2, r0
    9a86:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    9a88:	68c0      	ldr	r0, [r0, #12]
    9a8a:	6814      	ldr	r4, [r2, #0]
    9a8c:	42a0      	cmp	r0, r4
    9a8e:	d904      	bls.n	9a9a <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    9a90:	3801      	subs	r0, #1
    9a92:	1b00      	subs	r0, r0, r4
    9a94:	6008      	str	r0, [r1, #0]

		return false;
    9a96:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    9a98:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    9a9a:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    9a9c:	b918      	cbnz	r0, 9aa6 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    9a9e:	3b01      	subs	r3, #1
    9aa0:	1b1b      	subs	r3, r3, r4
    9aa2:	600b      	str	r3, [r1, #0]
		return false;
    9aa4:	e7f8      	b.n	9a98 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    9aa6:	1b1b      	subs	r3, r3, r4
    9aa8:	600b      	str	r3, [r1, #0]
	return true;
    9aaa:	2001      	movs	r0, #1
    9aac:	e7f4      	b.n	9a98 <free_space+0x14>

00009aae <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    9aae:	b510      	push	{r4, lr}
    9ab0:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    9ab2:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9ab4:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    9ab6:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    9ab8:	07d2      	lsls	r2, r2, #31
    9aba:	d502      	bpl.n	9ac2 <idx_inc+0x14>
		return i & (buffer->size - 1);
    9abc:	3b01      	subs	r3, #1
    9abe:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    9ac0:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    9ac2:	4298      	cmp	r0, r3
    9ac4:	bf28      	it	cs
    9ac6:	1ac0      	subcs	r0, r0, r3
    9ac8:	e7fa      	b.n	9ac0 <idx_inc+0x12>

00009aca <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    9aca:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    9acc:	69c2      	ldr	r2, [r0, #28]
{
    9ace:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    9ad0:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    9ad2:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    9ad4:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    9ad8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    9adc:	462a      	mov	r2, r5
    9ade:	6801      	ldr	r1, [r0, #0]
{
    9ae0:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    9ae2:	f7ff ffe4 	bl	9aae <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9ae6:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    9ae8:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9aea:	462a      	mov	r2, r5
    9aec:	4620      	mov	r0, r4
    9aee:	f7ff ffde 	bl	9aae <idx_inc>
    9af2:	6060      	str	r0, [r4, #4]
}
    9af4:	bd38      	pop	{r3, r4, r5, pc}

00009af6 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    9af6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    9afa:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    9afe:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    9b02:	461f      	mov	r7, r3
	*user_packet = false;
    9b04:	2300      	movs	r3, #0
    9b06:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    9b08:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    9b0c:	f003 0303 	and.w	r3, r3, #3
    9b10:	2b02      	cmp	r3, #2
{
    9b12:	4604      	mov	r4, r0
    9b14:	468b      	mov	fp, r1
    9b16:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    9b18:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    9b1c:	d103      	bne.n	9b26 <drop_item_locked+0x30>
		return item->skip.len;
    9b1e:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    9b22:	08ad      	lsrs	r5, r5, #2
    9b24:	d12e      	bne.n	9b84 <drop_item_locked+0x8e>
    9b26:	69a3      	ldr	r3, [r4, #24]
    9b28:	4630      	mov	r0, r6
    9b2a:	4798      	blx	r3
    9b2c:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    9b2e:	f1b8 0f00 	cmp.w	r8, #0
    9b32:	d036      	beq.n	9ba2 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    9b34:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    9b38:	079b      	lsls	r3, r3, #30
    9b3a:	d52f      	bpl.n	9b9c <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    9b3c:	f10b 0101 	add.w	r1, fp, #1
    9b40:	4620      	mov	r0, r4
    9b42:	f7ff ffc2 	bl	9aca <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    9b46:	6861      	ldr	r1, [r4, #4]
    9b48:	462a      	mov	r2, r5
    9b4a:	4620      	mov	r0, r4
    9b4c:	f7ff ffaf 	bl	9aae <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    9b50:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    9b52:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    9b54:	462a      	mov	r2, r5
    9b56:	4620      	mov	r0, r4
    9b58:	f7ff ffa9 	bl	9aae <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    9b5c:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    9b5e:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    9b60:	68e1      	ldr	r1, [r4, #12]
    9b62:	4620      	mov	r0, r4
    9b64:	f7ff ffa3 	bl	9aae <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    9b68:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    9b6a:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    9b6e:	f002 0203 	and.w	r2, r2, #3
    9b72:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    9b74:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    9b78:	d10c      	bne.n	9b94 <drop_item_locked+0x9e>
		return item->skip.len;
    9b7a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    9b7e:	089b      	lsrs	r3, r3, #2
    9b80:	d008      	beq.n	9b94 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    9b82:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    9b84:	68e1      	ldr	r1, [r4, #12]
    9b86:	462a      	mov	r2, r5
    9b88:	4620      	mov	r0, r4
    9b8a:	f7ff ff90 	bl	9aae <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    9b8e:	e9c4 0002 	strd	r0, r0, [r4, #8]
    9b92:	e007      	b.n	9ba4 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    9b94:	69a3      	ldr	r3, [r4, #24]
    9b96:	4630      	mov	r0, r6
    9b98:	4798      	blx	r3
    9b9a:	4405      	add	r5, r0
			*user_packet = true;
    9b9c:	2301      	movs	r3, #1
    9b9e:	703b      	strb	r3, [r7, #0]
    9ba0:	e7f0      	b.n	9b84 <drop_item_locked+0x8e>
		item = NULL;
    9ba2:	4646      	mov	r6, r8
	}

	return item;
}
    9ba4:	4630      	mov	r0, r6
    9ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009baa <mpsc_pbuf_init>:
{
    9baa:	b538      	push	{r3, r4, r5, lr}
    9bac:	460d      	mov	r5, r1
    9bae:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    9bb0:	221c      	movs	r2, #28
    9bb2:	2100      	movs	r1, #0
    9bb4:	f001 fe3c 	bl	b830 <memset>
	buffer->get_wlen = cfg->get_wlen;
    9bb8:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
    9bba:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
    9bbc:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    9bbe:	68ab      	ldr	r3, [r5, #8]
    9bc0:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    9bc2:	682b      	ldr	r3, [r5, #0]
    9bc4:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    9bc6:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    9bc8:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    9bca:	b122      	cbz	r2, 9bd6 <mpsc_pbuf_init+0x2c>
    9bcc:	1e51      	subs	r1, r2, #1
    9bce:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    9bd0:	bf08      	it	eq
    9bd2:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    9bd6:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    9bd8:	2201      	movs	r2, #1
    9bda:	f104 0024 	add.w	r0, r4, #36	; 0x24
    9bde:	2100      	movs	r1, #0
}
    9be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9be4:	f002 bc83 	b.w	c4ee <z_impl_k_sem_init>

00009be8 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    9be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bec:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    9bee:	6a03      	ldr	r3, [r0, #32]
    9bf0:	3b01      	subs	r3, #1
    9bf2:	428b      	cmp	r3, r1
{
    9bf4:	b085      	sub	sp, #20
    9bf6:	4604      	mov	r4, r0
    9bf8:	460f      	mov	r7, r1
    9bfa:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    9bfc:	d364      	bcc.n	9cc8 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    9bfe:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    9c00:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    9c02:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
    9c06:	f04f 0320 	mov.w	r3, #32
    9c0a:	f3ef 8611 	mrs	r6, BASEPRI
    9c0e:	f383 8812 	msr	BASEPRI_MAX, r3
    9c12:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    9c16:	a903      	add	r1, sp, #12
    9c18:	4620      	mov	r0, r4
    9c1a:	f7ff ff33 	bl	9a84 <free_space>
		if (free_wlen >= wlen) {
    9c1e:	9903      	ldr	r1, [sp, #12]
    9c20:	42b9      	cmp	r1, r7
    9c22:	d321      	bcc.n	9c68 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    9c24:	6821      	ldr	r1, [r4, #0]
			item =
    9c26:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    9c28:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    9c2c:	f022 0203 	bic.w	r2, r2, #3
    9c30:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    9c34:	4620      	mov	r0, r4
    9c36:	463a      	mov	r2, r7
			item =
    9c38:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    9c3c:	f7ff ff37 	bl	9aae <idx_inc>
		cont = false;
    9c40:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    9c42:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    9c44:	f386 8811 	msr	BASEPRI, r6
    9c48:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d03d      	beq.n	9ccc <mpsc_pbuf_alloc+0xe4>
    9c50:	2d00      	cmp	r5, #0
    9c52:	d0d8      	beq.n	9c06 <mpsc_pbuf_alloc+0x1e>
    9c54:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c58:	2b00      	cmp	r3, #0
    9c5a:	d0d4      	beq.n	9c06 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    9c5c:	4629      	mov	r1, r5
    9c5e:	6963      	ldr	r3, [r4, #20]
    9c60:	4620      	mov	r0, r4
    9c62:	4798      	blx	r3
			dropped_item = NULL;
    9c64:	2500      	movs	r5, #0
    9c66:	e7ce      	b.n	9c06 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    9c68:	b128      	cbz	r0, 9c76 <mpsc_pbuf_alloc+0x8e>
    9c6a:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    9c6c:	4620      	mov	r0, r4
    9c6e:	f7ff ff2c 	bl	9aca <add_skip_item>
			cont = true;
    9c72:	9b01      	ldr	r3, [sp, #4]
    9c74:	e7e6      	b.n	9c44 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    9c76:	ea58 0309 	orrs.w	r3, r8, r9
    9c7a:	d017      	beq.n	9cac <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    9c7c:	f002 fc06 	bl	c48c <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    9c80:	b9a0      	cbnz	r0, 9cac <mpsc_pbuf_alloc+0xc4>
    9c82:	f386 8811 	msr	BASEPRI, r6
    9c86:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    9c8a:	4642      	mov	r2, r8
    9c8c:	464b      	mov	r3, r9
    9c8e:	4658      	mov	r0, fp
    9c90:	f7fe fcb2 	bl	85f8 <z_impl_k_sem_take>
	__asm__ volatile(
    9c94:	f04f 0320 	mov.w	r3, #32
    9c98:	f3ef 8611 	mrs	r6, BASEPRI
    9c9c:	f383 8812 	msr	BASEPRI_MAX, r3
    9ca0:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    9ca4:	fab0 f380 	clz	r3, r0
    9ca8:	095b      	lsrs	r3, r3, #5
    9caa:	e7cb      	b.n	9c44 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    9cac:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    9cae:	9903      	ldr	r1, [sp, #12]
    9cb0:	f10d 030b 	add.w	r3, sp, #11
    9cb4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    9cb8:	4620      	mov	r0, r4
    9cba:	f7ff ff1c 	bl	9af6 <drop_item_locked>
			cont = dropped_item != NULL;
    9cbe:	1e03      	subs	r3, r0, #0
    9cc0:	4605      	mov	r5, r0
    9cc2:	bf18      	it	ne
    9cc4:	2301      	movne	r3, #1
    9cc6:	e7bd      	b.n	9c44 <mpsc_pbuf_alloc+0x5c>
		return NULL;
    9cc8:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    9ccc:	4650      	mov	r0, sl
    9cce:	b005      	add	sp, #20
    9cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009cd4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    9cd4:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    9cd6:	6983      	ldr	r3, [r0, #24]
{
    9cd8:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    9cda:	4608      	mov	r0, r1
{
    9cdc:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    9cde:	4798      	blx	r3
    9ce0:	4602      	mov	r2, r0
    9ce2:	f04f 0320 	mov.w	r3, #32
    9ce6:	f3ef 8611 	mrs	r6, BASEPRI
    9cea:	f383 8812 	msr	BASEPRI_MAX, r3
    9cee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    9cf2:	782b      	ldrb	r3, [r5, #0]
    9cf4:	f043 0301 	orr.w	r3, r3, #1
    9cf8:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9cfa:	6861      	ldr	r1, [r4, #4]
    9cfc:	4620      	mov	r0, r4
    9cfe:	f7ff fed6 	bl	9aae <idx_inc>
    9d02:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
    9d04:	f386 8811 	msr	BASEPRI, r6
    9d08:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    9d0c:	bd70      	pop	{r4, r5, r6, pc}

00009d0e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    9d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d12:	4604      	mov	r4, r0
	__asm__ volatile(
    9d14:	f04f 0320 	mov.w	r3, #32
    9d18:	f3ef 8611 	mrs	r6, BASEPRI
    9d1c:	f383 8812 	msr	BASEPRI_MAX, r3
    9d20:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    9d24:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    9d28:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    9d2a:	bf88      	it	hi
    9d2c:	6a23      	ldrhi	r3, [r4, #32]
    9d2e:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    9d30:	b1f3      	cbz	r3, 9d70 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    9d32:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    9d34:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    9d38:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    9d3c:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    9d40:	d016      	beq.n	9d70 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    9d42:	2b02      	cmp	r3, #2
    9d44:	d103      	bne.n	9d4e <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    9d46:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    9d4a:	08ad      	lsrs	r5, r5, #2
    9d4c:	d115      	bne.n	9d7a <mpsc_pbuf_claim+0x6c>
    9d4e:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    9d50:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    9d52:	d50f      	bpl.n	9d74 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    9d54:	f042 0202 	orr.w	r2, r2, #2
    9d58:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    9d5c:	4640      	mov	r0, r8
    9d5e:	4798      	blx	r3
    9d60:	4639      	mov	r1, r7
    9d62:	4602      	mov	r2, r0
    9d64:	4620      	mov	r0, r4
    9d66:	f7ff fea2 	bl	9aae <idx_inc>
		cont = false;
    9d6a:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    9d6c:	60a0      	str	r0, [r4, #8]
    9d6e:	e011      	b.n	9d94 <mpsc_pbuf_claim+0x86>
			item = NULL;
    9d70:	4698      	mov	r8, r3
    9d72:	e00f      	b.n	9d94 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    9d74:	4640      	mov	r0, r8
    9d76:	4798      	blx	r3
    9d78:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    9d7a:	68a1      	ldr	r1, [r4, #8]
    9d7c:	462a      	mov	r2, r5
    9d7e:	4620      	mov	r0, r4
    9d80:	f7ff fe95 	bl	9aae <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    9d84:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    9d86:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    9d88:	462a      	mov	r2, r5
    9d8a:	4620      	mov	r0, r4
    9d8c:	f7ff fe8f 	bl	9aae <idx_inc>
				cont = true;
    9d90:	2301      	movs	r3, #1
				buffer->rd_idx =
    9d92:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    9d94:	f386 8811 	msr	BASEPRI, r6
    9d98:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    9d9c:	2b00      	cmp	r3, #0
    9d9e:	d1b9      	bne.n	9d14 <mpsc_pbuf_claim+0x6>

	return item;
}
    9da0:	4640      	mov	r0, r8
    9da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009da6 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    9da6:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    9da8:	6983      	ldr	r3, [r0, #24]
{
    9daa:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    9dac:	4608      	mov	r0, r1
{
    9dae:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    9db0:	4798      	blx	r3
    9db2:	4602      	mov	r2, r0
	__asm__ volatile(
    9db4:	f04f 0320 	mov.w	r3, #32
    9db8:	f3ef 8611 	mrs	r6, BASEPRI
    9dbc:	f383 8812 	msr	BASEPRI_MAX, r3
    9dc0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    9dc4:	782b      	ldrb	r3, [r5, #0]
    9dc6:	f36f 0300 	bfc	r3, #0, #1
    9dca:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    9dcc:	6923      	ldr	r3, [r4, #16]
    9dce:	079b      	lsls	r3, r3, #30
    9dd0:	d505      	bpl.n	9dde <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    9dd2:	68e1      	ldr	r1, [r4, #12]
    9dd4:	69e3      	ldr	r3, [r4, #28]
    9dd6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    9dda:	429d      	cmp	r5, r3
    9ddc:	d112      	bne.n	9e04 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    9dde:	782b      	ldrb	r3, [r5, #0]
    9de0:	f36f 0341 	bfc	r3, #1, #1
    9de4:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    9de6:	68e1      	ldr	r1, [r4, #12]
    9de8:	4620      	mov	r0, r4
    9dea:	f7ff fe60 	bl	9aae <idx_inc>
    9dee:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    9df0:	f386 8811 	msr	BASEPRI, r6
    9df4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    9df8:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    9dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9e00:	f7fe bbd4 	b.w	85ac <z_impl_k_sem_give>
		witem->skip.len = wlen;
    9e04:	682b      	ldr	r3, [r5, #0]
    9e06:	f360 039f 	bfi	r3, r0, #2, #30
    9e0a:	602b      	str	r3, [r5, #0]
    9e0c:	e7f0      	b.n	9df0 <mpsc_pbuf_free+0x4a>

00009e0e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    9e0e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    9e12:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    9e14:	bf8a      	itet	hi
    9e16:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    9e18:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    9e1a:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    9e1c:	1e18      	subs	r0, r3, #0
    9e1e:	bf18      	it	ne
    9e20:	2001      	movne	r0, #1
    9e22:	4770      	bx	lr

00009e24 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
    9e24:	070b      	lsls	r3, r1, #28
    9e26:	d504      	bpl.n	9e32 <foldcase+0xe>
    9e28:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    9e2c:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
    9e2e:	bf98      	it	ls
    9e30:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
    9e32:	4770      	bx	lr

00009e34 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
    9e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e38:	b087      	sub	sp, #28
    9e3a:	468a      	mov	sl, r1
    9e3c:	4614      	mov	r4, r2
    9e3e:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
    9e40:	4605      	mov	r5, r0
    9e42:	b918      	cbnz	r0, 9e4c <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
    9e44:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
    9e46:	b007      	add	sp, #28
    9e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
    9e4c:	2900      	cmp	r1, #0
    9e4e:	d0f9      	beq.n	9e44 <fnmatchx+0x10>
    if (recursion-- == 0)
    9e50:	9b02      	ldr	r3, [sp, #8]
    9e52:	2b00      	cmp	r3, #0
    9e54:	f000 8113 	beq.w	a07e <fnmatchx+0x24a>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    9e58:	f004 0304 	and.w	r3, r4, #4
    9e5c:	460a      	mov	r2, r1
    9e5e:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
    9e60:	46a9      	mov	r9, r5
    9e62:	4621      	mov	r1, r4
    9e64:	f819 0b01 	ldrb.w	r0, [r9], #1
    9e68:	f7ff ffdc 	bl	9e24 <foldcase>
    9e6c:	4603      	mov	r3, r0
    9e6e:	b2c0      	uxtb	r0, r0
    9e70:	283f      	cmp	r0, #63	; 0x3f
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    9e72:	7817      	ldrb	r7, [r2, #0]
    9e74:	4606      	mov	r6, r0
        switch (c = FOLDCASE(*pattern++, flags)) {
    9e76:	d025      	beq.n	9ec4 <fnmatchx+0x90>
    9e78:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    9e7c:	d10b      	bne.n	9e96 <fnmatchx+0x62>
    9e7e:	b1c8      	cbz	r0, 9eb4 <fnmatchx+0x80>
    9e80:	282a      	cmp	r0, #42	; 0x2a
    9e82:	d036      	beq.n	9ef2 <fnmatchx+0xbe>
            if (c != FOLDCASE(*string++, flags))
    9e84:	4621      	mov	r1, r4
    9e86:	4638      	mov	r0, r7
    9e88:	f7ff ffcc 	bl	9e24 <foldcase>
    9e8c:	4286      	cmp	r6, r0
    9e8e:	f102 0201 	add.w	r2, r2, #1
    9e92:	d01e      	beq.n	9ed2 <fnmatchx+0x9e>
    9e94:	e7d6      	b.n	9e44 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
    9e96:	285b      	cmp	r0, #91	; 0x5b
    9e98:	d07b      	beq.n	9f92 <fnmatchx+0x15e>
    9e9a:	285c      	cmp	r0, #92	; 0x5c
    9e9c:	d1f2      	bne.n	9e84 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
    9e9e:	07e0      	lsls	r0, r4, #31
    9ea0:	d4f0      	bmi.n	9e84 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
    9ea2:	7868      	ldrb	r0, [r5, #1]
    9ea4:	f7ff ffbe 	bl	9e24 <foldcase>
    9ea8:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    9eac:	bf18      	it	ne
    9eae:	f105 0902 	addne.w	r9, r5, #2
    9eb2:	e7e7      	b.n	9e84 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
    9eb4:	06e3      	lsls	r3, r4, #27
    9eb6:	d501      	bpl.n	9ebc <fnmatchx+0x88>
    9eb8:	2f2f      	cmp	r7, #47	; 0x2f
    9eba:	d0c4      	beq.n	9e46 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
    9ebc:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
    9ebe:	bf18      	it	ne
    9ec0:	2001      	movne	r0, #1
    9ec2:	e7c0      	b.n	9e46 <fnmatchx+0x12>
            if (*string == EOS)
    9ec4:	2f00      	cmp	r7, #0
    9ec6:	d0bd      	beq.n	9e44 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
    9ec8:	2f2f      	cmp	r7, #47	; 0x2f
    9eca:	d104      	bne.n	9ed6 <fnmatchx+0xa2>
    9ecc:	07a6      	lsls	r6, r4, #30
    9ece:	d4b9      	bmi.n	9e44 <fnmatchx+0x10>
            ++string;
    9ed0:	3201      	adds	r2, #1
            break;
    9ed2:	464d      	mov	r5, r9
    9ed4:	e7c4      	b.n	9e60 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    9ed6:	2f2e      	cmp	r7, #46	; 0x2e
    9ed8:	d1fa      	bne.n	9ed0 <fnmatchx+0x9c>
    9eda:	9b04      	ldr	r3, [sp, #16]
    9edc:	2b00      	cmp	r3, #0
    9ede:	d0f7      	beq.n	9ed0 <fnmatchx+0x9c>
    9ee0:	4552      	cmp	r2, sl
    9ee2:	d0af      	beq.n	9e44 <fnmatchx+0x10>
                (string == stringstart ||
    9ee4:	07a5      	lsls	r5, r4, #30
    9ee6:	d5f3      	bpl.n	9ed0 <fnmatchx+0x9c>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    9ee8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    9eec:	2b2f      	cmp	r3, #47	; 0x2f
    9eee:	d1ef      	bne.n	9ed0 <fnmatchx+0x9c>
    9ef0:	e7a8      	b.n	9e44 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
    9ef2:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
    9ef4:	f7ff ff96 	bl	9e24 <foldcase>
    9ef8:	b2c1      	uxtb	r1, r0
            while (c == '*')
    9efa:	292a      	cmp	r1, #42	; 0x2a
    9efc:	d018      	beq.n	9f30 <fnmatchx+0xfc>
            if (*string == '.' && (flags & FNM_PERIOD) &&
    9efe:	2f2e      	cmp	r7, #46	; 0x2e
    9f00:	d109      	bne.n	9f16 <fnmatchx+0xe2>
    9f02:	9b04      	ldr	r3, [sp, #16]
    9f04:	b13b      	cbz	r3, 9f16 <fnmatchx+0xe2>
    9f06:	4552      	cmp	r2, sl
    9f08:	d09c      	beq.n	9e44 <fnmatchx+0x10>
                (string == stringstart ||
    9f0a:	07a0      	lsls	r0, r4, #30
    9f0c:	d503      	bpl.n	9f16 <fnmatchx+0xe2>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
    9f0e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    9f12:	2b2f      	cmp	r3, #47	; 0x2f
    9f14:	d096      	beq.n	9e44 <fnmatchx+0x10>
            if (c == EOS) {
    9f16:	b979      	cbnz	r1, 9f38 <fnmatchx+0x104>
                if (flags & FNM_PATHNAME)
    9f18:	f014 0002 	ands.w	r0, r4, #2
    9f1c:	d093      	beq.n	9e46 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
    9f1e:	06e3      	lsls	r3, r4, #27
    9f20:	f100 80af 	bmi.w	a082 <fnmatchx+0x24e>
                        strchr(string, '/') == NULL ?
    9f24:	212f      	movs	r1, #47	; 0x2f
    9f26:	4610      	mov	r0, r2
    9f28:	f001 fc13 	bl	b752 <strchr>
                        0 : FNM_NOMATCH;
    9f2c:	3800      	subs	r0, #0
    9f2e:	e7c6      	b.n	9ebe <fnmatchx+0x8a>
                c = FOLDCASE(*++pattern, flags);
    9f30:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    9f34:	4621      	mov	r1, r4
    9f36:	e7dd      	b.n	9ef4 <fnmatchx+0xc0>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    9f38:	292f      	cmp	r1, #47	; 0x2f
    9f3a:	d021      	beq.n	9f80 <fnmatchx+0x14c>
    if (recursion-- == 0)
    9f3c:	9b02      	ldr	r3, [sp, #8]
    9f3e:	4616      	mov	r6, r2
    9f40:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
    9f42:	f024 0804 	bic.w	r8, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
    9f46:	f004 0a02 	and.w	sl, r4, #2
    9f4a:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
    9f4c:	4621      	mov	r1, r4
    9f4e:	f89b 0000 	ldrb.w	r0, [fp]
    9f52:	f7ff ff67 	bl	9e24 <foldcase>
    9f56:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    9f5a:	f106 0601 	add.w	r6, r6, #1
    9f5e:	f43f af71 	beq.w	9e44 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
    9f62:	463b      	mov	r3, r7
    9f64:	4642      	mov	r2, r8
    9f66:	4659      	mov	r1, fp
    9f68:	4648      	mov	r0, r9
    9f6a:	f7ff ff63 	bl	9e34 <fnmatchx>
    9f6e:	2801      	cmp	r0, #1
    9f70:	f47f af69 	bne.w	9e46 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
    9f74:	2d2f      	cmp	r5, #47	; 0x2f
    9f76:	d1e8      	bne.n	9f4a <fnmatchx+0x116>
    9f78:	f1ba 0f00 	cmp.w	sl, #0
    9f7c:	d0e5      	beq.n	9f4a <fnmatchx+0x116>
    9f7e:	e761      	b.n	9e44 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
    9f80:	07a7      	lsls	r7, r4, #30
    9f82:	d5db      	bpl.n	9f3c <fnmatchx+0x108>
                if ((string = strchr(string, '/')) == NULL)
    9f84:	4610      	mov	r0, r2
    9f86:	f001 fbe4 	bl	b752 <strchr>
    9f8a:	4602      	mov	r2, r0
    9f8c:	2800      	cmp	r0, #0
    9f8e:	d1a0      	bne.n	9ed2 <fnmatchx+0x9e>
    9f90:	e758      	b.n	9e44 <fnmatchx+0x10>
            if (*string == EOS)
    9f92:	2f00      	cmp	r7, #0
    9f94:	f43f af56 	beq.w	9e44 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
    9f98:	2f2f      	cmp	r7, #47	; 0x2f
    9f9a:	d102      	bne.n	9fa2 <fnmatchx+0x16e>
    9f9c:	07a6      	lsls	r6, r4, #30
    9f9e:	f53f af51 	bmi.w	9e44 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
    9fa2:	4621      	mov	r1, r4
    9fa4:	4638      	mov	r0, r7
    9fa6:	f7ff ff3d 	bl	9e24 <foldcase>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    9faa:	786b      	ldrb	r3, [r5, #1]
            if ((r = rangematch(pattern,
    9fac:	9000      	str	r0, [sp, #0]
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    9fae:	2b21      	cmp	r3, #33	; 0x21
    9fb0:	d001      	beq.n	9fb6 <fnmatchx+0x182>
    9fb2:	2b5e      	cmp	r3, #94	; 0x5e
    9fb4:	d123      	bne.n	9ffe <fnmatchx+0x1ca>
        ++pattern;
    9fb6:	3502      	adds	r5, #2
    9fb8:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    9fba:	9301      	str	r3, [sp, #4]
    need = 1;
    9fbc:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    9fbe:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    9fc2:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    9fc6:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
    9fc8:	462e      	mov	r6, r5
    9fca:	4621      	mov	r1, r4
    9fcc:	f816 0b01 	ldrb.w	r0, [r6], #1
    9fd0:	9305      	str	r3, [sp, #20]
    9fd2:	f7ff ff27 	bl	9e24 <foldcase>
    9fd6:	fa5f f880 	uxtb.w	r8, r0
    9fda:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    9fde:	9b05      	ldr	r3, [sp, #20]
    9fe0:	d110      	bne.n	a004 <fnmatchx+0x1d0>
    9fe2:	bb0b      	cbnz	r3, a028 <fnmatchx+0x1f4>
    return ok == negate ? NULL : pattern;
    9fe4:	9b01      	ldr	r3, [sp, #4]
    9fe6:	455b      	cmp	r3, fp
    9fe8:	f43f af2c 	beq.w	9e44 <fnmatchx+0x10>
            if (r == (void *)-1) {
    9fec:	1c73      	adds	r3, r6, #1
    9fee:	d103      	bne.n	9ff8 <fnmatchx+0x1c4>
                if (*string != '[')
    9ff0:	2f5b      	cmp	r7, #91	; 0x5b
    9ff2:	f47f af27 	bne.w	9e44 <fnmatchx+0x10>
    9ff6:	464e      	mov	r6, r9
            ++string;
    9ff8:	3201      	adds	r2, #1
            break;
    9ffa:	46b1      	mov	r9, r6
    9ffc:	e769      	b.n	9ed2 <fnmatchx+0x9e>
    9ffe:	464d      	mov	r5, r9
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
    a000:	2300      	movs	r3, #0
    a002:	e7da      	b.n	9fba <fnmatchx+0x186>
        if (c == '/')
    a004:	f1b8 0f2f 	cmp.w	r8, #47	; 0x2f
    a008:	d0f2      	beq.n	9ff0 <fnmatchx+0x1bc>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
    a00a:	f1b8 0f5c 	cmp.w	r8, #92	; 0x5c
    a00e:	d107      	bne.n	a020 <fnmatchx+0x1ec>
    a010:	9b03      	ldr	r3, [sp, #12]
    a012:	b94b      	cbnz	r3, a028 <fnmatchx+0x1f4>
            c = FOLDCASE(*pattern++, flags);
    a014:	7868      	ldrb	r0, [r5, #1]
    a016:	f7ff ff05 	bl	9e24 <foldcase>
    a01a:	1cae      	adds	r6, r5, #2
    a01c:	fa5f f880 	uxtb.w	r8, r0
        if (c == EOS)
    a020:	f1b8 0f00 	cmp.w	r8, #0
    a024:	f43f af0e 	beq.w	9e44 <fnmatchx+0x10>
        if (*pattern == '-' 
    a028:	7833      	ldrb	r3, [r6, #0]
    a02a:	2b2d      	cmp	r3, #45	; 0x2d
    a02c:	d120      	bne.n	a070 <fnmatchx+0x23c>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
    a02e:	7870      	ldrb	r0, [r6, #1]
    a030:	4621      	mov	r1, r4
    a032:	f7ff fef7 	bl	9e24 <foldcase>
    a036:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    a03a:	d019      	beq.n	a070 <fnmatchx+0x23c>
    a03c:	285d      	cmp	r0, #93	; 0x5d
    a03e:	d017      	beq.n	a070 <fnmatchx+0x23c>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    a040:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
    a042:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
    a046:	d10a      	bne.n	a05e <fnmatchx+0x22a>
    a048:	9b03      	ldr	r3, [sp, #12]
    a04a:	b943      	cbnz	r3, a05e <fnmatchx+0x22a>
                c2 = FOLDCASE(*pattern++, flags);
    a04c:	78b0      	ldrb	r0, [r6, #2]
    a04e:	f7ff fee9 	bl	9e24 <foldcase>
            if (c2 == EOS)
    a052:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
    a056:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
    a05a:	f43f aef3 	beq.w	9e44 <fnmatchx+0x10>
            if (c <= test && test <= c2)
    a05e:	9b00      	ldr	r3, [sp, #0]
    a060:	4543      	cmp	r3, r8
    a062:	db03      	blt.n	a06c <fnmatchx+0x238>
                ok = 1;
    a064:	4283      	cmp	r3, r0
    a066:	bfd8      	it	le
    a068:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
    a06c:	2300      	movs	r3, #0
    a06e:	e7ab      	b.n	9fc8 <fnmatchx+0x194>
        } else if (c == test)
    a070:	9b00      	ldr	r3, [sp, #0]
    a072:	4635      	mov	r5, r6
    a074:	4543      	cmp	r3, r8
    a076:	bf08      	it	eq
    a078:	f04f 0b01 	moveq.w	fp, #1
    a07c:	e7f6      	b.n	a06c <fnmatchx+0x238>
        return FNM_NORES;
    a07e:	2003      	movs	r0, #3
    a080:	e6e1      	b.n	9e46 <fnmatchx+0x12>
                return 0;
    a082:	4608      	mov	r0, r1
    a084:	e6df      	b.n	9e46 <fnmatchx+0x12>

0000a086 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
    a086:	2340      	movs	r3, #64	; 0x40
    a088:	f7ff bed4 	b.w	9e34 <fnmatchx>

0000a08c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    a08c:	4770      	bx	lr

0000a08e <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    a08e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    a090:	075b      	lsls	r3, r3, #29
    a092:	d40b      	bmi.n	a0ac <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    a094:	6803      	ldr	r3, [r0, #0]
    a096:	8840      	ldrh	r0, [r0, #2]
    a098:	f3c3 2349 	ubfx	r3, r3, #9, #10
    a09c:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    a0a0:	4418      	add	r0, r3
    a0a2:	3013      	adds	r0, #19
    a0a4:	f020 0007 	bic.w	r0, r0, #7
    a0a8:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    a0aa:	4770      	bx	lr
	return 0;
    a0ac:	2000      	movs	r0, #0
}
    a0ae:	4770      	bx	lr

0000a0b0 <default_get_timestamp>:
    a0b0:	f002 b8ec 	b.w	c28c <sys_clock_cycle_get_32>

0000a0b4 <dummy_timestamp>:
    a0b4:	2000      	movs	r0, #0
    a0b6:	4770      	bx	lr

0000a0b8 <z_log_vprintk>:
{
    a0b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    a0ba:	2300      	movs	r3, #0
    a0bc:	e9cd 0101 	strd	r0, r1, [sp, #4]
    a0c0:	9300      	str	r3, [sp, #0]
    a0c2:	461a      	mov	r2, r3
    a0c4:	4619      	mov	r1, r3
    a0c6:	4618      	mov	r0, r3
    a0c8:	f7f7 fd58 	bl	1b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    a0cc:	b005      	add	sp, #20
    a0ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000a0d2 <notify_drop>:
	z_log_dropped(true);
    a0d2:	2001      	movs	r0, #1
    a0d4:	f7f7 b90a 	b.w	12ec <z_log_dropped>

0000a0d8 <get_msg>:
{
    a0d8:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    a0da:	f7f7 f97d 	bl	13d8 <z_log_msg2_claim>
}
    a0de:	bd08      	pop	{r3, pc}

0000a0e0 <z_log_get_tag>:
}
    a0e0:	2000      	movs	r0, #0
    a0e2:	4770      	bx	lr

0000a0e4 <log_backend_disable>:
	backend->cb->active = false;
    a0e4:	6843      	ldr	r3, [r0, #4]
    a0e6:	2100      	movs	r1, #0
    a0e8:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
    a0ea:	f7f7 bb07 	b.w	16fc <backend_filter_set>

0000a0ee <buffer_write>:
{
    a0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0f0:	4606      	mov	r6, r0
    a0f2:	460d      	mov	r5, r1
    a0f4:	4614      	mov	r4, r2
    a0f6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    a0f8:	4621      	mov	r1, r4
    a0fa:	4628      	mov	r0, r5
    a0fc:	463a      	mov	r2, r7
    a0fe:	47b0      	blx	r6
	} while (len != 0);
    a100:	1a24      	subs	r4, r4, r0
		buf += processed;
    a102:	4405      	add	r5, r0
	} while (len != 0);
    a104:	d1f8      	bne.n	a0f8 <buffer_write+0xa>
}
    a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a108 <log_output_flush>:
		     output->control_block->offset,
    a108:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    a10a:	6881      	ldr	r1, [r0, #8]
{
    a10c:	b510      	push	{r4, lr}
    a10e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    a110:	e9d2 2300 	ldrd	r2, r3, [r2]
    a114:	6800      	ldr	r0, [r0, #0]
    a116:	f7ff ffea 	bl	a0ee <buffer_write>
	output->control_block->offset = 0;
    a11a:	6863      	ldr	r3, [r4, #4]
    a11c:	2200      	movs	r2, #0
    a11e:	601a      	str	r2, [r3, #0]
}
    a120:	bd10      	pop	{r4, pc}

0000a122 <out_func>:
{
    a122:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    a124:	684b      	ldr	r3, [r1, #4]
    a126:	681a      	ldr	r2, [r3, #0]
    a128:	68cb      	ldr	r3, [r1, #12]
    a12a:	429a      	cmp	r2, r3
{
    a12c:	4605      	mov	r5, r0
    a12e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    a130:	d102      	bne.n	a138 <out_func+0x16>
		log_output_flush(out_ctx);
    a132:	4608      	mov	r0, r1
    a134:	f7ff ffe8 	bl	a108 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a138:	6863      	ldr	r3, [r4, #4]
    a13a:	f3bf 8f5b 	dmb	ish
    a13e:	e853 2f00 	ldrex	r2, [r3]
    a142:	1c51      	adds	r1, r2, #1
    a144:	e843 1000 	strex	r0, r1, [r3]
    a148:	2800      	cmp	r0, #0
    a14a:	d1f8      	bne.n	a13e <out_func+0x1c>
    a14c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    a150:	68a3      	ldr	r3, [r4, #8]
    a152:	549d      	strb	r5, [r3, r2]
}
    a154:	2000      	movs	r0, #0
    a156:	bd38      	pop	{r3, r4, r5, pc}

0000a158 <cr_out_func>:
{
    a158:	b538      	push	{r3, r4, r5, lr}
    a15a:	4605      	mov	r5, r0
    a15c:	460c      	mov	r4, r1
	out_func(c, ctx);
    a15e:	f7ff ffe0 	bl	a122 <out_func>
	if (c == '\n') {
    a162:	2d0a      	cmp	r5, #10
    a164:	d103      	bne.n	a16e <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    a166:	4621      	mov	r1, r4
    a168:	200d      	movs	r0, #13
    a16a:	f7ff ffda 	bl	a122 <out_func>
}
    a16e:	2000      	movs	r0, #0
    a170:	bd38      	pop	{r3, r4, r5, pc}

0000a172 <z_log_msg2_finalize>:
{
    a172:	b570      	push	{r4, r5, r6, lr}
    a174:	460e      	mov	r6, r1
    a176:	4615      	mov	r5, r2
    a178:	4619      	mov	r1, r3
	if (!msg) {
    a17a:	4604      	mov	r4, r0
    a17c:	b918      	cbnz	r0, a186 <z_log_msg2_finalize+0x14>
}
    a17e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    a182:	f7f7 b8b3 	b.w	12ec <z_log_dropped>
	if (data) {
    a186:	b143      	cbz	r3, a19a <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    a188:	f100 030c 	add.w	r3, r0, #12
    a18c:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    a190:	4418      	add	r0, r3
    a192:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    a196:	f001 fb40 	bl	b81a <memcpy>
	msg->hdr.source = source;
    a19a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    a19e:	4620      	mov	r0, r4
}
    a1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    a1a4:	f7f7 b9f6 	b.w	1594 <z_log_msg2_commit>

0000a1a8 <z_impl_z_log_msg2_static_create>:
{
    a1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    a1ac:	f3c1 2949 	ubfx	r9, r1, #9, #10
    a1b0:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    a1b4:	444c      	add	r4, r9
    a1b6:	3413      	adds	r4, #19
    a1b8:	f024 0407 	bic.w	r4, r4, #7
    a1bc:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
    a1be:	08a0      	lsrs	r0, r4, #2
{
    a1c0:	460d      	mov	r5, r1
    a1c2:	4690      	mov	r8, r2
    a1c4:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
    a1c6:	f7f7 f8ff 	bl	13c8 <z_log_msg2_alloc>
	if (msg) {
    a1ca:	4604      	mov	r4, r0
    a1cc:	b120      	cbz	r0, a1d8 <z_impl_z_log_msg2_static_create+0x30>
		memcpy(msg->data, package, desc.package_len);
    a1ce:	464a      	mov	r2, r9
    a1d0:	4641      	mov	r1, r8
    a1d2:	300c      	adds	r0, #12
    a1d4:	f001 fb21 	bl	b81a <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
    a1d8:	463b      	mov	r3, r7
    a1da:	462a      	mov	r2, r5
    a1dc:	4631      	mov	r1, r6
    a1de:	4620      	mov	r0, r4
}
    a1e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    a1e4:	f7ff bfc5 	b.w	a172 <z_log_msg2_finalize>

0000a1e8 <log_halt>:
    a1e8:	684b      	ldr	r3, [r1, #4]
    a1ea:	2000      	movs	r0, #0
    a1ec:	7158      	strb	r0, [r3, #5]
}
    a1ee:	4770      	bx	lr

0000a1f0 <log_go>:
	backend->cb->active = true;
    a1f0:	684b      	ldr	r3, [r1, #4]
    a1f2:	2201      	movs	r2, #1
    a1f4:	715a      	strb	r2, [r3, #5]
}
    a1f6:	2000      	movs	r0, #0
    a1f8:	4770      	bx	lr

0000a1fa <cmd_log_self_status>:
{
    a1fa:	b570      	push	{r4, r5, r6, lr}
    a1fc:	4604      	mov	r4, r0
    a1fe:	460d      	mov	r5, r1
    a200:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    a202:	f7f7 fe49 	bl	1e98 <shell_state_precheck>
    a206:	b130      	cbz	r0, a216 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
    a208:	69e1      	ldr	r1, [r4, #28]
    a20a:	4633      	mov	r3, r6
    a20c:	6809      	ldr	r1, [r1, #0]
    a20e:	462a      	mov	r2, r5
    a210:	4620      	mov	r0, r4
    a212:	f7f7 fd79 	bl	1d08 <log_status>
}
    a216:	2000      	movs	r0, #0
    a218:	bd70      	pop	{r4, r5, r6, pc}

0000a21a <cmd_log_self_enable>:
{
    a21a:	b570      	push	{r4, r5, r6, lr}
    a21c:	4604      	mov	r4, r0
    a21e:	460d      	mov	r5, r1
    a220:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    a222:	f7f7 fe39 	bl	1e98 <shell_state_precheck>
    a226:	b140      	cbz	r0, a23a <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    a228:	69e1      	ldr	r1, [r4, #28]
    a22a:	4633      	mov	r3, r6
    a22c:	462a      	mov	r2, r5
    a22e:	4620      	mov	r0, r4
    a230:	6809      	ldr	r1, [r1, #0]
}
    a232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
    a236:	f7f7 bea7 	b.w	1f88 <log_enable>
}
    a23a:	bd70      	pop	{r4, r5, r6, pc}

0000a23c <log_disable>:
{
    a23c:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
    a23e:	2400      	movs	r4, #0
    a240:	9400      	str	r4, [sp, #0]
    a242:	3304      	adds	r3, #4
    a244:	3a01      	subs	r2, #1
    a246:	f7f7 fe37 	bl	1eb8 <filters_set>
}
    a24a:	4620      	mov	r0, r4
    a24c:	b002      	add	sp, #8
    a24e:	bd10      	pop	{r4, pc}

0000a250 <cmd_log_self_disable>:
{
    a250:	b570      	push	{r4, r5, r6, lr}
    a252:	4604      	mov	r4, r0
    a254:	460d      	mov	r5, r1
    a256:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
    a258:	f7f7 fe1e 	bl	1e98 <shell_state_precheck>
    a25c:	b140      	cbz	r0, a270 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    a25e:	69e1      	ldr	r1, [r4, #28]
    a260:	4633      	mov	r3, r6
    a262:	462a      	mov	r2, r5
    a264:	4620      	mov	r0, r4
    a266:	6809      	ldr	r1, [r1, #0]
}
    a268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
    a26c:	f7ff bfe6 	b.w	a23c <log_disable>
}
    a270:	bd70      	pop	{r4, r5, r6, pc}

0000a272 <cmd_log_self_go>:
{
    a272:	b510      	push	{r4, lr}
    a274:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    a276:	f7f7 fe0f 	bl	1e98 <shell_state_precheck>
    a27a:	b120      	cbz	r0, a286 <cmd_log_self_go+0x14>
	return log_go(shell, shell->log_backend->backend, argc, argv);
    a27c:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
    a27e:	681b      	ldr	r3, [r3, #0]
    a280:	685b      	ldr	r3, [r3, #4]
    a282:	2201      	movs	r2, #1
    a284:	715a      	strb	r2, [r3, #5]
}
    a286:	2000      	movs	r0, #0
    a288:	bd10      	pop	{r4, pc}

0000a28a <cmd_log_self_halt>:
{
    a28a:	b510      	push	{r4, lr}
    a28c:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
    a28e:	f7f7 fe03 	bl	1e98 <shell_state_precheck>
    a292:	b120      	cbz	r0, a29e <cmd_log_self_halt+0x14>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
    a294:	69e3      	ldr	r3, [r4, #28]
	backend->cb->active = false;
    a296:	681b      	ldr	r3, [r3, #0]
    a298:	685b      	ldr	r3, [r3, #4]
    a29a:	2200      	movs	r2, #0
    a29c:	715a      	strb	r2, [r3, #5]
}
    a29e:	2000      	movs	r0, #0
    a2a0:	bd10      	pop	{r4, pc}

0000a2a2 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    a2a2:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    a2a4:	075b      	lsls	r3, r3, #29
    a2a6:	d40b      	bmi.n	a2c0 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    a2a8:	6803      	ldr	r3, [r0, #0]
    a2aa:	8840      	ldrh	r0, [r0, #2]
    a2ac:	f3c3 2349 	ubfx	r3, r3, #9, #10
    a2b0:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    a2b4:	4418      	add	r0, r3
    a2b6:	3013      	adds	r0, #19
    a2b8:	f020 0007 	bic.w	r0, r0, #7
    a2bc:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    a2be:	4770      	bx	lr
	return 0;
    a2c0:	2000      	movs	r0, #0
}
    a2c2:	4770      	bx	lr

0000a2c4 <uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
    a2c4:	6883      	ldr	r3, [r0, #8]
    a2c6:	6a1b      	ldr	r3, [r3, #32]
    a2c8:	b103      	cbz	r3, a2cc <uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
    a2ca:	4718      	bx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
}
    a2cc:	4770      	bx	lr

0000a2ce <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
    a2ce:	6843      	ldr	r3, [r0, #4]
    a2d0:	681b      	ldr	r3, [r3, #0]
{
    a2d2:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
    a2d4:	681c      	ldr	r4, [r3, #0]
		uart_irq_tx_disable(dev);
    a2d6:	4620      	mov	r0, r4
    a2d8:	f7ff fff4 	bl	a2c4 <uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
    a2dc:	68a3      	ldr	r3, [r4, #8]
    a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a2e0:	b10b      	cbz	r3, a2e6 <uninit+0x18>
		api->irq_rx_disable(dev);
    a2e2:	4620      	mov	r0, r4
    a2e4:	4798      	blx	r3
}
    a2e6:	2000      	movs	r0, #0
    a2e8:	bd10      	pop	{r4, pc}

0000a2ea <enable>:
{
    a2ea:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
    a2ec:	6843      	ldr	r3, [r0, #4]
    a2ee:	681b      	ldr	r3, [r3, #0]
    a2f0:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
    a2f2:	b111      	cbz	r1, a2fa <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
    a2f4:	6818      	ldr	r0, [r3, #0]
    a2f6:	f7ff ffe5 	bl	a2c4 <uart_irq_tx_disable>
}
    a2fa:	2000      	movs	r0, #0
    a2fc:	bd08      	pop	{r3, pc}

0000a2fe <read>:
{
    a2fe:	b510      	push	{r4, lr}
    a300:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
    a302:	6843      	ldr	r3, [r0, #4]
    a304:	68d8      	ldr	r0, [r3, #12]
    a306:	f7ff fb9d 	bl	9a44 <ring_buf_get>
    a30a:	6020      	str	r0, [r4, #0]
}
    a30c:	2000      	movs	r0, #0
    a30e:	bd10      	pop	{r4, pc}

0000a310 <write>:
{
    a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
    a314:	6845      	ldr	r5, [r0, #4]
{
    a316:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
    a318:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    a31a:	7c1b      	ldrb	r3, [r3, #16]
{
    a31c:	460c      	mov	r4, r1
    a31e:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
    a320:	b153      	cbz	r3, a338 <write+0x28>
    a322:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
    a326:	4544      	cmp	r4, r8
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    a328:	682b      	ldr	r3, [r5, #0]
		for (size_t i = 0; i < length; i++) {
    a32a:	d120      	bne.n	a36e <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    a32c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
    a330:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
    a332:	2001      	movs	r0, #1
    a334:	4790      	blx	r2
    a336:	e017      	b.n	a368 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
    a338:	68a8      	ldr	r0, [r5, #8]
    a33a:	f7ff fb1b 	bl	9974 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a33e:	682b      	ldr	r3, [r5, #0]
    a340:	6030      	str	r0, [r6, #0]
    a342:	330c      	adds	r3, #12
    a344:	2101      	movs	r1, #1
    a346:	f3bf 8f5b 	dmb	ish
    a34a:	e853 2f00 	ldrex	r2, [r3]
    a34e:	e843 1000 	strex	r0, r1, [r3]
    a352:	2800      	cmp	r0, #0
    a354:	d1f9      	bne.n	a34a <write+0x3a>
    a356:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
    a35a:	b92a      	cbnz	r2, a368 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
    a35c:	682b      	ldr	r3, [r5, #0]
    a35e:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
    a360:	6883      	ldr	r3, [r0, #8]
    a362:	69db      	ldr	r3, [r3, #28]
    a364:	b103      	cbz	r3, a368 <write+0x58>
		api->irq_tx_enable(dev);
    a366:	4798      	blx	r3
}
    a368:	2000      	movs	r0, #0
    a36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
    a36e:	6818      	ldr	r0, [r3, #0]
    a370:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    a374:	6883      	ldr	r3, [r0, #8]
    a376:	685b      	ldr	r3, [r3, #4]
    a378:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    a37a:	e7d4      	b.n	a326 <write+0x16>

0000a37c <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    a37c:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    a37e:	075b      	lsls	r3, r3, #29
    a380:	d40b      	bmi.n	a39a <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    a382:	6803      	ldr	r3, [r0, #0]
    a384:	8840      	ldrh	r0, [r0, #2]
    a386:	f3c3 2349 	ubfx	r3, r3, #9, #10
    a38a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    a38e:	4418      	add	r0, r3
    a390:	3013      	adds	r0, #19
    a392:	f020 0007 	bic.w	r0, r0, #7
    a396:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    a398:	4770      	bx	lr
	return 0;
    a39a:	2000      	movs	r0, #0
}
    a39c:	4770      	bx	lr

0000a39e <read>:
{
    a39e:	b510      	push	{r4, lr}
	*cnt = SEGGER_RTT_Read(0, data, length);
    a3a0:	2000      	movs	r0, #0
{
    a3a2:	461c      	mov	r4, r3
	*cnt = SEGGER_RTT_Read(0, data, length);
    a3a4:	f002 f822 	bl	c3ec <SEGGER_RTT_Read>
    a3a8:	6020      	str	r0, [r4, #0]
}
    a3aa:	2000      	movs	r0, #0
    a3ac:	bd10      	pop	{r4, pc}

0000a3ae <timer_handler>:
{
    a3ae:	b510      	push	{r4, lr}
	return timer->user_data;
    a3b0:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (SEGGER_RTT_HasData(0)) {
    a3b2:	2000      	movs	r0, #0
    a3b4:	f7fd fc90 	bl	7cd8 <SEGGER_RTT_HasData>
    a3b8:	b128      	cbz	r0, a3c6 <timer_handler+0x18>
		sh_rtt->handler(SHELL_TRANSPORT_EVT_RX_RDY, sh_rtt->context);
    a3ba:	6823      	ldr	r3, [r4, #0]
    a3bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
    a3be:	2000      	movs	r0, #0
}
    a3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sh_rtt->handler(SHELL_TRANSPORT_EVT_RX_RDY, sh_rtt->context);
    a3c4:	4718      	bx	r3
}
    a3c6:	bd10      	pop	{r4, pc}

0000a3c8 <uninit>:
	k_timer_stop(&sh_rtt->timer);
    a3c8:	6840      	ldr	r0, [r0, #4]
{
    a3ca:	b508      	push	{r3, lr}
	k_timer_stop(&sh_rtt->timer);
    a3cc:	3008      	adds	r0, #8
	z_impl_k_timer_stop(timer);
    a3ce:	f002 fa50 	bl	c872 <z_impl_k_timer_stop>
}
    a3d2:	2000      	movs	r0, #0
    a3d4:	bd08      	pop	{r3, pc}

0000a3d6 <atomic_or>:
{
    a3d6:	4603      	mov	r3, r0
}
    a3d8:	f3bf 8f5b 	dmb	ish
    a3dc:	e853 0f00 	ldrex	r0, [r3]
    a3e0:	ea40 0201 	orr.w	r2, r0, r1
    a3e4:	e843 2c00 	strex	ip, r2, [r3]
    a3e8:	f1bc 0f00 	cmp.w	ip, #0
    a3ec:	d1f6      	bne.n	a3dc <atomic_or+0x6>
    a3ee:	f3bf 8f5b 	dmb	ish
    a3f2:	4770      	bx	lr

0000a3f4 <atomic_and>:
{
    a3f4:	4603      	mov	r3, r0
}
    a3f6:	f3bf 8f5b 	dmb	ish
    a3fa:	e853 0f00 	ldrex	r0, [r3]
    a3fe:	ea00 0201 	and.w	r2, r0, r1
    a402:	e843 2c00 	strex	ip, r2, [r3]
    a406:	f1bc 0f00 	cmp.w	ip, #0
    a40a:	d1f6      	bne.n	a3fa <atomic_and+0x6>
    a40c:	f3bf 8f5b 	dmb	ish
    a410:	4770      	bx	lr

0000a412 <shell_signal_handle>:
{
    a412:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    a414:	6885      	ldr	r5, [r0, #8]
    a416:	0109      	lsls	r1, r1, #4
    a418:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
    a41c:	4604      	mov	r4, r0
    a41e:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
    a420:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
    a422:	aa01      	add	r2, sp, #4
    a424:	4669      	mov	r1, sp
    a426:	4628      	mov	r0, r5
    a428:	f002 fb94 	bl	cb54 <z_impl_k_poll_signal_check>
	if (set) {
    a42c:	9b00      	ldr	r3, [sp, #0]
    a42e:	b123      	cbz	r3, a43a <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
    a430:	4628      	mov	r0, r5
    a432:	f002 fb8c 	bl	cb4e <z_impl_k_poll_signal_reset>
		handler(shell);
    a436:	4620      	mov	r0, r4
    a438:	47b0      	blx	r6
}
    a43a:	b002      	add	sp, #8
    a43c:	bd70      	pop	{r4, r5, r6, pc}

0000a43e <z_shell_strlen>:
{
    a43e:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    a440:	b110      	cbz	r0, a448 <z_shell_strlen+0xa>
    a442:	f001 f994 	bl	b76e <strlen>
    a446:	b280      	uxth	r0, r0
}
    a448:	bd08      	pop	{r3, pc}

0000a44a <z_shell_raw_fprintf>:
{
    a44a:	b40e      	push	{r1, r2, r3}
    a44c:	b503      	push	{r0, r1, lr}
    a44e:	aa03      	add	r2, sp, #12
    a450:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    a454:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    a456:	f7f9 f941 	bl	36dc <z_shell_fprintf_fmt>
}
    a45a:	b002      	add	sp, #8
    a45c:	f85d eb04 	ldr.w	lr, [sp], #4
    a460:	b003      	add	sp, #12
    a462:	4770      	bx	lr

0000a464 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    a464:	f7fd bfe6 	b.w	8434 <z_impl_k_mutex_lock>

0000a468 <transport_evt_handler>:
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
    a468:	688b      	ldr	r3, [r1, #8]
    a46a:	b920      	cbnz	r0, a476 <transport_evt_handler+0xe>
    a46c:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
    a470:	2100      	movs	r1, #0
    a472:	f7fe bfed 	b.w	9450 <z_impl_k_poll_signal_raise>
    a476:	f503 7026 	add.w	r0, r3, #664	; 0x298
    a47a:	e7f9      	b.n	a470 <transport_evt_handler+0x8>

0000a47c <kill_handler>:
{
    a47c:	b538      	push	{r3, r4, r5, lr}
	return sh->ctx->ctx.flags.processing == 1;
    a47e:	6883      	ldr	r3, [r0, #8]
    a480:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
	if (z_flag_processing_get(shell)) {
    a484:	07db      	lsls	r3, r3, #31
{
    a486:	4604      	mov	r4, r0
	if (z_flag_processing_get(shell)) {
    a488:	d41d      	bmi.n	a4c6 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
    a48a:	69c0      	ldr	r0, [r0, #28]
    a48c:	f000 fdbb 	bl	b006 <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
    a490:	6860      	ldr	r0, [r4, #4]
    a492:	6803      	ldr	r3, [r0, #0]
    a494:	685b      	ldr	r3, [r3, #4]
    a496:	4798      	blx	r3
	if (err != 0) {
    a498:	4605      	mov	r5, r0
    a49a:	b920      	cbnz	r0, a4a6 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
    a49c:	68e0      	ldr	r0, [r4, #12]
    a49e:	f000 ff5b 	bl	b358 <z_shell_history_purge>
	shell->ctx->state = state;
    a4a2:	68a3      	ldr	r3, [r4, #8]
    a4a4:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
    a4a6:	68a3      	ldr	r3, [r4, #8]
    a4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a4aa:	b113      	cbz	r3, a4b2 <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
    a4ac:	4629      	mov	r1, r5
    a4ae:	4620      	mov	r0, r4
    a4b0:	4798      	blx	r3
	shell->ctx->tid = NULL;
    a4b2:	68a3      	ldr	r3, [r4, #8]
    a4b4:	2200      	movs	r2, #0
    a4b6:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
    a4ba:	f7fe fd03 	bl	8ec4 <z_impl_z_current_get>
}
    a4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
    a4c2:	f7fa bbab 	b.w	4c1c <z_impl_k_thread_abort>
		return -EBUSY;
    a4c6:	f06f 050f 	mvn.w	r5, #15
    a4ca:	e7ec      	b.n	a4a6 <kill_handler+0x2a>

0000a4cc <z_flag_history_exit_set.isra.0>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
    a4cc:	f500 7019 	add.w	r0, r0, #612	; 0x264
    a4d0:	b111      	cbz	r1, a4d8 <z_flag_history_exit_set.isra.0+0xc>
    a4d2:	2104      	movs	r1, #4
    a4d4:	f7ff bf7f 	b.w	a3d6 <atomic_or>
    a4d8:	f06f 0104 	mvn.w	r1, #4
    a4dc:	f7ff bf8a 	b.w	a3f4 <atomic_and>

0000a4e0 <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
    a4e0:	b508      	push	{r3, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    a4e2:	f500 7018 	add.w	r0, r0, #608	; 0x260
    a4e6:	b129      	cbz	r1, a4f4 <z_flag_insert_mode_set.isra.0+0x14>
    a4e8:	2101      	movs	r1, #1
    a4ea:	f7ff ff74 	bl	a3d6 <atomic_or>
}
    a4ee:	f000 0001 	and.w	r0, r0, #1
    a4f2:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
    a4f4:	f06f 0101 	mvn.w	r1, #1
    a4f8:	f7ff ff7c 	bl	a3f4 <atomic_and>
    a4fc:	e7f7      	b.n	a4ee <z_flag_insert_mode_set.isra.0+0xe>

0000a4fe <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    a4fe:	f7fe b811 	b.w	8524 <z_impl_k_mutex_unlock>

0000a502 <shell_log_process>:
{
    a502:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
    a504:	2300      	movs	r3, #0
{
    a506:	4604      	mov	r4, r0
	int signaled = 0;
    a508:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
    a50a:	4620      	mov	r0, r4
    a50c:	f000 fbab 	bl	ac66 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
    a510:	69e0      	ldr	r0, [r4, #28]
    a512:	f000 fdb9 	bl	b088 <z_shell_log_backend_process>
    a516:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
    a518:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
    a51a:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
    a51c:	f7f9 fa68 	bl	39f0 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
    a520:	68a3      	ldr	r3, [r4, #8]
    a522:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
    a524:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
    a528:	b123      	cbz	r3, a534 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
    a52a:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
    a52e:	2100      	movs	r1, #0
    a530:	f7fe fcae 	bl	8e90 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
    a534:	aa01      	add	r2, sp, #4
    a536:	4669      	mov	r1, sp
    a538:	4630      	mov	r0, r6
    a53a:	f002 fb0b 	bl	cb54 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
    a53e:	b115      	cbz	r5, a546 <shell_log_process+0x44>
    a540:	9b00      	ldr	r3, [sp, #0]
    a542:	2b00      	cmp	r3, #0
    a544:	d0e1      	beq.n	a50a <shell_log_process+0x8>
}
    a546:	b002      	add	sp, #8
    a548:	bd70      	pop	{r4, r5, r6, pc}

0000a54a <shell_vfprintf>:
{
    a54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a54c:	4604      	mov	r4, r0
	return shell->ctx->state;
    a54e:	6880      	ldr	r0, [r0, #8]
{
    a550:	461f      	mov	r7, r3
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    a552:	7903      	ldrb	r3, [r0, #4]
    a554:	2b02      	cmp	r3, #2
{
    a556:	460d      	mov	r5, r1
    a558:	4616      	mov	r6, r2
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
    a55a:	d007      	beq.n	a56c <shell_vfprintf+0x22>
}
    a55c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
    a560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    a564:	f500 7019 	add.w	r0, r0, #612	; 0x264
    a568:	f7ff bf35 	b.w	a3d6 <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
    a56c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a574:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    a578:	f7ff ff74 	bl	a464 <k_mutex_lock.constprop.0.isra.0>
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    a57c:	68a3      	ldr	r3, [r4, #8]
    a57e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    a582:	0511      	lsls	r1, r2, #20
    a584:	d404      	bmi.n	a590 <shell_vfprintf+0x46>
    a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a588:	b913      	cbnz	r3, a590 <shell_vfprintf+0x46>
		z_shell_cmd_line_erase(sh);
    a58a:	4620      	mov	r0, r4
    a58c:	f000 fb6b 	bl	ac66 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
    a590:	463b      	mov	r3, r7
    a592:	4632      	mov	r2, r6
    a594:	4629      	mov	r1, r5
    a596:	4620      	mov	r0, r4
    a598:	f000 fbc6 	bl	ad28 <z_shell_vfprintf>
    a59c:	68a3      	ldr	r3, [r4, #8]
    a59e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
    a5a2:	0512      	lsls	r2, r2, #20
    a5a4:	d404      	bmi.n	a5b0 <shell_vfprintf+0x66>
    a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a5a8:	b913      	cbnz	r3, a5b0 <shell_vfprintf+0x66>
		z_shell_print_prompt_and_cmd(sh);
    a5aa:	4620      	mov	r0, r4
    a5ac:	f7f9 fa20 	bl	39f0 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    a5b0:	6960      	ldr	r0, [r4, #20]
    a5b2:	f000 f82f 	bl	a614 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
    a5b6:	68a0      	ldr	r0, [r4, #8]
}
    a5b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
    a5bc:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
    a5c0:	f7ff bf9d 	b.w	a4fe <k_mutex_unlock.isra.0>

0000a5c4 <shell_fprintf>:
{
    a5c4:	b40c      	push	{r2, r3}
    a5c6:	b507      	push	{r0, r1, r2, lr}
    a5c8:	ab04      	add	r3, sp, #16
    a5ca:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
    a5ce:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
    a5d0:	f7ff ffbb 	bl	a54a <shell_vfprintf>
}
    a5d4:	b003      	add	sp, #12
    a5d6:	f85d eb04 	ldr.w	lr, [sp], #4
    a5da:	b002      	add	sp, #8
    a5dc:	4770      	bx	lr

0000a5de <shell_hexdump>:
{
    a5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a5e2:	4607      	mov	r7, r0
    a5e4:	460e      	mov	r6, r1
    a5e6:	4614      	mov	r4, r2
	const uint8_t *p = data;
    a5e8:	460d      	mov	r5, r1
	while (len) {
    a5ea:	b90c      	cbnz	r4, a5f0 <shell_hexdump+0x12>
}
    a5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
    a5f0:	2c10      	cmp	r4, #16
    a5f2:	46a0      	mov	r8, r4
    a5f4:	bf28      	it	cs
    a5f6:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(shell, p - data, p, line_len);
    a5fa:	462a      	mov	r2, r5
    a5fc:	1ba9      	subs	r1, r5, r6
    a5fe:	4643      	mov	r3, r8
    a600:	4638      	mov	r0, r7
    a602:	f7f9 f803 	bl	360c <shell_hexdump_line>
		len -= line_len;
    a606:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
    a60a:	4445      	add	r5, r8
    a60c:	e7ed      	b.n	a5ea <shell_hexdump+0xc>

0000a60e <shell_set_bypass>:
	sh->ctx->bypass = bypass;
    a60e:	6883      	ldr	r3, [r0, #8]
    a610:	6399      	str	r1, [r3, #56]	; 0x38
}
    a612:	4770      	bx	lr

0000a614 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    a614:	6902      	ldr	r2, [r0, #16]
    a616:	6883      	ldr	r3, [r0, #8]
    a618:	6812      	ldr	r2, [r2, #0]
    a61a:	6801      	ldr	r1, [r0, #0]
{
    a61c:	b510      	push	{r4, lr}
    a61e:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
    a620:	68c0      	ldr	r0, [r0, #12]
    a622:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
    a624:	6923      	ldr	r3, [r4, #16]
    a626:	2200      	movs	r2, #0
    a628:	601a      	str	r2, [r3, #0]
}
    a62a:	bd10      	pop	{r4, pc}

0000a62c <out_func>:
{
    a62c:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    a62e:	68cb      	ldr	r3, [r1, #12]
    a630:	7c1b      	ldrb	r3, [r3, #16]
    a632:	2b02      	cmp	r3, #2
{
    a634:	4605      	mov	r5, r0
    a636:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
    a638:	d104      	bne.n	a644 <out_func+0x18>
    a63a:	280a      	cmp	r0, #10
    a63c:	d102      	bne.n	a644 <out_func+0x18>
		(void)out_func('\r', ctx);
    a63e:	200d      	movs	r0, #13
    a640:	f7ff fff4 	bl	a62c <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
    a644:	6923      	ldr	r3, [r4, #16]
    a646:	6822      	ldr	r2, [r4, #0]
    a648:	681b      	ldr	r3, [r3, #0]
    a64a:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
    a64c:	6922      	ldr	r2, [r4, #16]
    a64e:	6813      	ldr	r3, [r2, #0]
    a650:	3301      	adds	r3, #1
    a652:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
    a654:	6862      	ldr	r2, [r4, #4]
    a656:	4293      	cmp	r3, r2
    a658:	d102      	bne.n	a660 <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
    a65a:	4620      	mov	r0, r4
    a65c:	f7ff ffda 	bl	a614 <z_shell_fprintf_buffer_flush>
}
    a660:	2000      	movs	r0, #0
    a662:	bd38      	pop	{r3, r4, r5, pc}

0000a664 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    a664:	2820      	cmp	r0, #32
    a666:	d005      	beq.n	a674 <isspace+0x10>
    a668:	3809      	subs	r0, #9
    a66a:	2804      	cmp	r0, #4
    a66c:	bf8c      	ite	hi
    a66e:	2000      	movhi	r0, #0
    a670:	2001      	movls	r0, #1
    a672:	4770      	bx	lr
    a674:	2001      	movs	r0, #1
}
    a676:	4770      	bx	lr

0000a678 <z_shell_strlen>:
{
    a678:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    a67a:	b110      	cbz	r0, a682 <z_shell_strlen+0xa>
    a67c:	f001 f877 	bl	b76e <strlen>
    a680:	b280      	uxth	r0, r0
}
    a682:	bd08      	pop	{r3, pc}

0000a684 <z_column_span_with_buffer_offsets_get>:
{
    a684:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
    a686:	7b03      	ldrb	r3, [r0, #12]
    a688:	8940      	ldrh	r0, [r0, #10]
    a68a:	441a      	add	r2, r3
    a68c:	4419      	add	r1, r3
    a68e:	fbb2 f4f0 	udiv	r4, r2, r0
    a692:	fbb1 f3f0 	udiv	r3, r1, r0
    a696:	fb00 2214 	mls	r2, r0, r4, r2
    a69a:	fb00 1013 	mls	r0, r0, r3, r1
}
    a69e:	1a10      	subs	r0, r2, r0
    a6a0:	bd10      	pop	{r4, pc}

0000a6a2 <z_row_span_with_buffer_offsets_get>:
{
    a6a2:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
    a6a4:	7b04      	ldrb	r4, [r0, #12]
    a6a6:	8943      	ldrh	r3, [r0, #10]
    a6a8:	4421      	add	r1, r4
    a6aa:	1910      	adds	r0, r2, r4
    a6ac:	fbb1 f1f3 	udiv	r1, r1, r3
    a6b0:	fbb0 f0f3 	udiv	r0, r0, r3
}
    a6b4:	1a40      	subs	r0, r0, r1
    a6b6:	bd10      	pop	{r4, pc}

0000a6b8 <z_shell_multiline_data_calc>:
{
    a6b8:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    a6ba:	7b05      	ldrb	r5, [r0, #12]
    a6bc:	8943      	ldrh	r3, [r0, #10]
    a6be:	4429      	add	r1, r5
    a6c0:	fbb1 f4f3 	udiv	r4, r1, r3
    a6c4:	fb03 1114 	mls	r1, r3, r4, r1
    a6c8:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    a6ca:	442a      	add	r2, r5
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    a6cc:	3401      	adds	r4, #1
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
    a6ce:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    a6d0:	fbb2 f1f3 	udiv	r1, r2, r3
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    a6d4:	fb03 2211 	mls	r2, r3, r1, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
    a6d8:	8084      	strh	r4, [r0, #4]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    a6da:	3201      	adds	r2, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
    a6dc:	1c4c      	adds	r4, r1, #1
    a6de:	80c4      	strh	r4, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
    a6e0:	8042      	strh	r2, [r0, #2]
}
    a6e2:	bd30      	pop	{r4, r5, pc}

0000a6e4 <z_shell_make_argv>:
{
    a6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
    a6e8:	2500      	movs	r5, #0
{
    a6ea:	4606      	mov	r6, r0
    a6ec:	460f      	mov	r7, r1
    a6ee:	4614      	mov	r4, r2
    a6f0:	4698      	mov	r8, r3
	*argc = 0;
    a6f2:	6005      	str	r5, [r0, #0]
		c = *cmd;
    a6f4:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
    a6f6:	2800      	cmp	r0, #0
    a6f8:	f000 80b5 	beq.w	a866 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
    a6fc:	f7ff ffb2 	bl	a664 <isspace>
    a700:	b118      	cbz	r0, a70a <z_shell_make_argv+0x26>
			*cmd++ = '\0';
    a702:	2300      	movs	r3, #0
    a704:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
    a708:	e7f4      	b.n	a6f4 <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
    a70a:	6832      	ldr	r2, [r6, #0]
    a70c:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
    a70e:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
    a710:	6033      	str	r3, [r6, #0]
    a712:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
    a716:	f000 80a6 	beq.w	a866 <z_shell_make_argv+0x182>
	char quote = 0;
    a71a:	4605      	mov	r5, r0
		c = *cmd;
    a71c:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
    a720:	f1b9 0f00 	cmp.w	r9, #0
    a724:	d0e6      	beq.n	a6f4 <z_shell_make_argv+0x10>
		if (!quote) {
    a726:	2d00      	cmp	r5, #0
    a728:	f040 8089 	bne.w	a83e <z_shell_make_argv+0x15a>
			switch (c) {
    a72c:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    a730:	d006      	beq.n	a740 <z_shell_make_argv+0x5c>
    a732:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    a736:	f000 808a 	beq.w	a84e <z_shell_make_argv+0x16a>
    a73a:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
    a73e:	d176      	bne.n	a82e <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
    a740:	4620      	mov	r0, r4
    a742:	f7ff ff99 	bl	a678 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    a746:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
    a748:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    a74a:	4620      	mov	r0, r4
    a74c:	f001 f84d 	bl	b7ea <memmove>
				continue;
    a750:	464d      	mov	r5, r9
    a752:	e7e3      	b.n	a71c <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
    a754:	4620      	mov	r0, r4
    a756:	f7ff ff8f 	bl	a678 <z_shell_strlen>
    a75a:	1c61      	adds	r1, r4, #1
    a75c:	4602      	mov	r2, r0
    a75e:	4620      	mov	r0, r4
    a760:	f001 f843 	bl	b7ea <memmove>
			quote = 0;
    a764:	2500      	movs	r5, #0
			continue;
    a766:	e7d9      	b.n	a71c <z_shell_make_argv+0x38>
			if (t == '0') {
    a768:	2930      	cmp	r1, #48	; 0x30
    a76a:	d126      	bne.n	a7ba <z_shell_make_argv+0xd6>
    a76c:	2302      	movs	r3, #2
				uint8_t v = 0U;
    a76e:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
    a772:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
    a774:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a778:	b2d2      	uxtb	r2, r2
    a77a:	2a07      	cmp	r2, #7
    a77c:	fa5f f983 	uxtb.w	r9, r3
    a780:	d818      	bhi.n	a7b4 <z_shell_make_argv+0xd0>
				for (i = 2U; i < (2 + 3); i++) {
    a782:	3301      	adds	r3, #1
						v = (v << 3) | (t - '0');
    a784:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
    a788:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
    a78a:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
    a78e:	d1f0      	bne.n	a772 <z_shell_make_argv+0x8e>
    a790:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
    a792:	4620      	mov	r0, r4
    a794:	f7ff ff70 	bl	a678 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    a798:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
    a79c:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
    a79e:	f1a9 0902 	sub.w	r9, r9, #2
					memmove(cmd, cmd + (i - 1),
    a7a2:	eba0 0209 	sub.w	r2, r0, r9
    a7a6:	4659      	mov	r1, fp
    a7a8:	4620      	mov	r0, r4
    a7aa:	f001 f81e 	bl	b7ea <memmove>
					*cmd++ = v;
    a7ae:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
    a7b2:	e7b3      	b.n	a71c <z_shell_make_argv+0x38>
				if (i > 2) {
    a7b4:	f1b9 0f02 	cmp.w	r9, #2
    a7b8:	d1eb      	bne.n	a792 <z_shell_make_argv+0xae>
			if (t == 'x') {
    a7ba:	2978      	cmp	r1, #120	; 0x78
    a7bc:	d13d      	bne.n	a83a <z_shell_make_argv+0x156>
    a7be:	2102      	movs	r1, #2
				uint8_t v = 0U;
    a7c0:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
    a7c4:	5c62      	ldrb	r2, [r4, r1]
					if (t >= '0' && t <= '9') {
    a7c6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    a7ca:	b2db      	uxtb	r3, r3
    a7cc:	2b09      	cmp	r3, #9
    a7ce:	b2c8      	uxtb	r0, r1
    a7d0:	d81a      	bhi.n	a808 <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
    a7d2:	ea43 1209 	orr.w	r2, r3, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
    a7d6:	2903      	cmp	r1, #3
						v = (v << 4) | (t - 'A' + 10);
    a7d8:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
    a7dc:	d112      	bne.n	a804 <z_shell_make_argv+0x120>
    a7de:	f04f 0a04 	mov.w	sl, #4
						z_shell_strlen(cmd) - (i - 2));
    a7e2:	4620      	mov	r0, r4
    a7e4:	f7ff ff48 	bl	a678 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
    a7e8:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    a7ec:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
    a7ee:	f1aa 0a02 	sub.w	sl, sl, #2
					memmove(cmd, cmd + (i - 1),
    a7f2:	eba0 020a 	sub.w	r2, r0, sl
    a7f6:	4659      	mov	r1, fp
    a7f8:	4620      	mov	r0, r4
    a7fa:	f000 fff6 	bl	b7ea <memmove>
					*cmd++ = v;
    a7fe:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
    a802:	e78b      	b.n	a71c <z_shell_make_argv+0x38>
    a804:	2103      	movs	r1, #3
    a806:	e7dd      	b.n	a7c4 <z_shell_make_argv+0xe0>
					} else if ((t >= 'a') &&
    a808:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    a80c:	2b05      	cmp	r3, #5
    a80e:	d803      	bhi.n	a818 <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
    a810:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
    a812:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
    a816:	e7de      	b.n	a7d6 <z_shell_make_argv+0xf2>
					} else if ((t >= 'A') && (t <= 'F')) {
    a818:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    a81c:	2b05      	cmp	r3, #5
    a81e:	d801      	bhi.n	a824 <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
    a820:	3a37      	subs	r2, #55	; 0x37
    a822:	e7f6      	b.n	a812 <z_shell_make_argv+0x12e>
				if (i > 2) {
    a824:	2802      	cmp	r0, #2
    a826:	d008      	beq.n	a83a <z_shell_make_argv+0x156>
    a828:	f04f 0a03 	mov.w	sl, #3
    a82c:	e7d9      	b.n	a7e2 <z_shell_make_argv+0xfe>
		if (!quote && isspace((int) c)) {
    a82e:	4648      	mov	r0, r9
    a830:	f7ff ff18 	bl	a664 <isspace>
    a834:	2800      	cmp	r0, #0
    a836:	f47f af5d 	bne.w	a6f4 <z_shell_make_argv+0x10>
		cmd += 1;
    a83a:	3401      	adds	r4, #1
    a83c:	e76e      	b.n	a71c <z_shell_make_argv+0x38>
		if (quote == c) {
    a83e:	45a9      	cmp	r9, r5
    a840:	d088      	beq.n	a754 <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
    a842:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    a846:	d1f8      	bne.n	a83a <z_shell_make_argv+0x156>
			char t = *(cmd + 1);
    a848:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
    a84a:	428d      	cmp	r5, r1
    a84c:	d18c      	bne.n	a768 <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
    a84e:	4620      	mov	r0, r4
    a850:	f7ff ff12 	bl	a678 <z_shell_strlen>
				memmove(cmd, cmd + 1,
    a854:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
    a858:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
    a85a:	4649      	mov	r1, r9
    a85c:	4620      	mov	r0, r4
    a85e:	f000 ffc4 	bl	b7ea <memmove>
				cmd += 1;
    a862:	464c      	mov	r4, r9
				continue;
    a864:	e75a      	b.n	a71c <z_shell_make_argv+0x38>
}
    a866:	4628      	mov	r0, r5
    a868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a86c <z_shell_pattern_remove>:
{
    a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a86e:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
    a870:	4611      	mov	r1, r2
{
    a872:	4615      	mov	r5, r2
    a874:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
    a876:	f000 ff30 	bl	b6da <strstr>
    a87a:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
    a87c:	4628      	mov	r0, r5
    a87e:	f7ff fefb 	bl	a678 <z_shell_strlen>
    a882:	4605      	mov	r5, r0
	if (!pattern_addr) {
    a884:	b1c4      	cbz	r4, a8b8 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
    a886:	42a7      	cmp	r7, r4
    a888:	d207      	bcs.n	a89a <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
    a88a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    a88e:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
    a890:	bf02      	ittt	eq
    a892:	3501      	addeq	r5, #1
    a894:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
    a896:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    a89a:	4620      	mov	r0, r4
    a89c:	f7ff feec 	bl	a678 <z_shell_strlen>
	*buff_len -= pattern_len;
    a8a0:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    a8a2:	1c42      	adds	r2, r0, #1
	*buff_len -= pattern_len;
    a8a4:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
    a8a6:	1b52      	subs	r2, r2, r5
	*buff_len -= pattern_len;
    a8a8:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    a8aa:	1961      	adds	r1, r4, r5
    a8ac:	4620      	mov	r0, r4
    a8ae:	b292      	uxth	r2, r2
}
    a8b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
    a8b4:	f000 bf99 	b.w	b7ea <memmove>
}
    a8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a8ba <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
    a8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8be:	4688      	mov	r8, r1
    a8c0:	b086      	sub	sp, #24
    a8c2:	4617      	mov	r7, r2
	 * dynamic commands at the same time (current and subcommand) they
	 * will operate on the same memory region what can cause undefined
	 * behaviour.
	 * Hence we need a separate memory for each of them.
	 */
	if (parent) {
    a8c4:	4604      	mov	r4, r0
    a8c6:	b128      	cbz	r0, a8d4 <z_shell_find_cmd+0x1a>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
    a8c8:	4601      	mov	r1, r0
    a8ca:	2214      	movs	r2, #20
    a8cc:	a801      	add	r0, sp, #4
    a8ce:	f000 ffa4 	bl	b81a <memcpy>
		parent = &parent_cpy;
    a8d2:	ac01      	add	r4, sp, #4
    a8d4:	2600      	movs	r6, #0
	}

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
    a8d6:	4631      	mov	r1, r6
    a8d8:	463a      	mov	r2, r7
    a8da:	4620      	mov	r0, r4
    a8dc:	f7f8 ff12 	bl	3704 <z_shell_cmd_get>
    a8e0:	3601      	adds	r6, #1
    a8e2:	4605      	mov	r5, r0
    a8e4:	b128      	cbz	r0, a8f2 <z_shell_find_cmd+0x38>
		if (strcmp(cmd_str, entry->syntax) == 0) {
    a8e6:	6829      	ldr	r1, [r5, #0]
    a8e8:	4640      	mov	r0, r8
    a8ea:	f000 ff50 	bl	b78e <strcmp>
    a8ee:	2800      	cmp	r0, #0
    a8f0:	d1f1      	bne.n	a8d6 <z_shell_find_cmd+0x1c>
			return entry;
		}
	}

	return NULL;
}
    a8f2:	4628      	mov	r0, r5
    a8f4:	b006      	add	sp, #24
    a8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a8fa <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
    a8fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8fe:	461c      	mov	r4, r3
    a900:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a904:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    a908:	2300      	movs	r3, #0
{
    a90a:	460f      	mov	r7, r1
    a90c:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
    a90e:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
    a910:	6823      	ldr	r3, [r4, #0]
    a912:	42bb      	cmp	r3, r7

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
    a914:	4605      	mov	r5, r0
	while (*match_arg < argc) {
    a916:	d21b      	bcs.n	a950 <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
    a918:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    a91c:	f000 fd9a 	bl	b454 <z_shell_has_wildcard>
    a920:	6823      	ldr	r3, [r4, #0]
    a922:	4682      	mov	sl, r0
    a924:	b118      	cbz	r0, a92e <z_shell_get_last_command+0x34>
				(*match_arg)++;
    a926:	3301      	adds	r3, #1
    a928:	6023      	str	r3, [r4, #0]
				continue;
    a92a:	4628      	mov	r0, r5
    a92c:	e7f0      	b.n	a910 <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
    a92e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    a932:	4642      	mov	r2, r8
    a934:	4628      	mov	r0, r5
    a936:	f7ff ffc0 	bl	a8ba <z_shell_find_cmd>
		if (entry) {
    a93a:	b148      	cbz	r0, a950 <z_shell_get_last_command+0x56>
			(*match_arg)++;
    a93c:	6823      	ldr	r3, [r4, #0]
    a93e:	1c5a      	adds	r2, r3, #1
    a940:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
    a942:	f1b9 0f00 	cmp.w	r9, #0
    a946:	d0e3      	beq.n	a910 <z_shell_get_last_command+0x16>
    a948:	4580      	cmp	r8, r0
    a94a:	d1e1      	bne.n	a910 <z_shell_get_last_command+0x16>
			(*match_arg)--;
    a94c:	6023      	str	r3, [r4, #0]
			return NULL;
    a94e:	4655      	mov	r5, sl
		}
	}

	return entry;
}
    a950:	4628      	mov	r0, r5
    a952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a956 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
    a956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a95a:	4607      	mov	r7, r0
	uint16_t len = z_shell_strlen(str);
    a95c:	f7ff fe8c 	bl	a678 <z_shell_strlen>
    a960:	4606      	mov	r6, r0
	uint16_t shift = 0U;

	if (!str) {
    a962:	bb47      	cbnz	r7, a9b6 <z_shell_spaces_trim+0x60>

				break;
			}
		}
	}
}
    a964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (shift > 0) {
    a968:	b14c      	cbz	r4, a97e <z_shell_spaces_trim+0x28>
						len - j + 1);
    a96a:	b292      	uxth	r2, r2
    a96c:	1ab2      	subs	r2, r6, r2
					memmove(&str[i + 1],
    a96e:	1c58      	adds	r0, r3, #1
    a970:	3201      	adds	r2, #1
    a972:	4438      	add	r0, r7
    a974:	f000 ff39 	bl	b7ea <memmove>
					len -= shift;
    a978:	1b36      	subs	r6, r6, r4
    a97a:	b2b6      	uxth	r6, r6
					shift = 0U;
    a97c:	4644      	mov	r4, r8
	for (uint16_t i = 0; i < len - 1; i++) {
    a97e:	1e73      	subs	r3, r6, #1
    a980:	429d      	cmp	r5, r3
    a982:	daef      	bge.n	a964 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
    a984:	5d78      	ldrb	r0, [r7, r5]
    a986:	f7ff fe6d 	bl	a664 <isspace>
    a98a:	462b      	mov	r3, r5
			for (uint16_t j = i + 1; j < len; j++) {
    a98c:	3501      	adds	r5, #1
    a98e:	b2ad      	uxth	r5, r5
		if (isspace((int)str[i])) {
    a990:	2800      	cmp	r0, #0
    a992:	d0f4      	beq.n	a97e <z_shell_spaces_trim+0x28>
    a994:	462a      	mov	r2, r5
			for (uint16_t j = i + 1; j < len; j++) {
    a996:	b291      	uxth	r1, r2
    a998:	428e      	cmp	r6, r1
    a99a:	d9f0      	bls.n	a97e <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
    a99c:	5cb8      	ldrb	r0, [r7, r2]
    a99e:	f7ff fe61 	bl	a664 <isspace>
    a9a2:	18b9      	adds	r1, r7, r2
    a9a4:	f102 0c01 	add.w	ip, r2, #1
    a9a8:	4680      	mov	r8, r0
    a9aa:	2800      	cmp	r0, #0
    a9ac:	d0dc      	beq.n	a968 <z_shell_spaces_trim+0x12>
					shift++;
    a9ae:	3401      	adds	r4, #1
    a9b0:	b2a4      	uxth	r4, r4
    a9b2:	4662      	mov	r2, ip
    a9b4:	e7ef      	b.n	a996 <z_shell_spaces_trim+0x40>
	for (uint16_t i = 0; i < len - 1; i++) {
    a9b6:	2500      	movs	r5, #0
	uint16_t shift = 0U;
    a9b8:	462c      	mov	r4, r5
    a9ba:	e7e0      	b.n	a97e <z_shell_spaces_trim+0x28>

0000a9bc <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
    a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    a9be:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
    a9c0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
    a9c4:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
    a9c6:	b953      	cbnz	r3, a9de <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
    a9c8:	68ab      	ldr	r3, [r5, #8]
    a9ca:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    a9cc:	87da      	strh	r2, [r3, #62]	; 0x3e
}
    a9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
    a9d0:	3a01      	subs	r2, #1
    a9d2:	b292      	uxth	r2, r2
    a9d4:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
    a9d6:	b922      	cbnz	r2, a9e2 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
    a9d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
    a9dc:	e7f4      	b.n	a9c8 <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
    a9de:	f104 0642 	add.w	r6, r4, #66	; 0x42
	while (isspace((int) buff[*buff_len - 1U])) {
    a9e2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    a9e4:	18b3      	adds	r3, r6, r2
    a9e6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    a9ea:	f7ff fe3b 	bl	a664 <isspace>
    a9ee:	4603      	mov	r3, r0
    a9f0:	2800      	cmp	r0, #0
    a9f2:	d1ed      	bne.n	a9d0 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
    a9f4:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
    a9f6:	b29f      	uxth	r7, r3
    a9f8:	fa16 f183 	uxtah	r1, r6, r3
    a9fc:	5df0      	ldrb	r0, [r6, r7]
    a9fe:	f7ff fe31 	bl	a664 <isspace>
    aa02:	3301      	adds	r3, #1
    aa04:	2800      	cmp	r0, #0
    aa06:	d1f6      	bne.n	a9f6 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
    aa08:	2f00      	cmp	r7, #0
    aa0a:	d0dd      	beq.n	a9c8 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
    aa0c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    aa0e:	3301      	adds	r3, #1
    aa10:	1bda      	subs	r2, r3, r7
    aa12:	4630      	mov	r0, r6
    aa14:	f000 fee9 	bl	b7ea <memmove>
		*buff_len = *buff_len - i;
    aa18:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    aa1a:	1bdb      	subs	r3, r3, r7
    aa1c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    aa1e:	e7d3      	b.n	a9c8 <z_shell_cmd_trim+0xc>

0000aa20 <shell_device_lookup>:

const struct device *shell_device_lookup(size_t idx,
				   const char *prefix)
{
    aa20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aa24:	4607      	mov	r7, r0
	size_t match_idx = 0;
	const struct device *dev;
	size_t len = z_device_get_all_static(&dev);
    aa26:	a801      	add	r0, sp, #4
{
    aa28:	460c      	mov	r4, r1
	size_t len = z_device_get_all_static(&dev);
    aa2a:	f7fd f9b7 	bl	7d9c <z_device_get_all_static>
	const struct device *dev_end = dev + len;
    aa2e:	9d01      	ldr	r5, [sp, #4]
    aa30:	2318      	movs	r3, #24
    aa32:	fb03 5500 	mla	r5, r3, r0, r5
	size_t match_idx = 0;
    aa36:	2600      	movs	r6, #0

	while (dev < dev_end) {
    aa38:	9801      	ldr	r0, [sp, #4]
    aa3a:	42a8      	cmp	r0, r5
    aa3c:	d301      	bcc.n	aa42 <shell_device_lookup+0x22>
			++match_idx;
		}
		++dev;
	}

	return NULL;
    aa3e:	2000      	movs	r0, #0
    aa40:	e00c      	b.n	aa5c <shell_device_lookup+0x3c>
	return z_device_is_ready(dev);
    aa42:	f001 fce9 	bl	c418 <z_device_is_ready>
		if (device_is_ready(dev)
    aa46:	b1c8      	cbz	r0, aa7c <shell_device_lookup+0x5c>
		    && (dev->name != NULL)
    aa48:	9b01      	ldr	r3, [sp, #4]
    aa4a:	6818      	ldr	r0, [r3, #0]
    aa4c:	b1b0      	cbz	r0, aa7c <shell_device_lookup+0x5c>
		    && (strlen(dev->name) != 0)
    aa4e:	f000 fe8e 	bl	b76e <strlen>
    aa52:	b198      	cbz	r0, aa7c <shell_device_lookup+0x5c>
		    && ((prefix == NULL)
    aa54:	b92c      	cbnz	r4, aa62 <shell_device_lookup+0x42>
			if (match_idx == idx) {
    aa56:	42be      	cmp	r6, r7
    aa58:	d114      	bne.n	aa84 <shell_device_lookup+0x64>
				return dev;
    aa5a:	9801      	ldr	r0, [sp, #4]
}
    aa5c:	b002      	add	sp, #8
    aa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (strncmp(prefix, dev->name,
    aa62:	9b01      	ldr	r3, [sp, #4]
    aa64:	4620      	mov	r0, r4
    aa66:	f8d3 8000 	ldr.w	r8, [r3]
    aa6a:	f000 fe80 	bl	b76e <strlen>
    aa6e:	4641      	mov	r1, r8
    aa70:	4602      	mov	r2, r0
    aa72:	4620      	mov	r0, r4
    aa74:	f000 fe97 	bl	b7a6 <strncmp>
    aa78:	2800      	cmp	r0, #0
    aa7a:	d0ec      	beq.n	aa56 <shell_device_lookup+0x36>
		++dev;
    aa7c:	9b01      	ldr	r3, [sp, #4]
    aa7e:	3318      	adds	r3, #24
    aa80:	9301      	str	r3, [sp, #4]
    aa82:	e7d9      	b.n	aa38 <shell_device_lookup+0x18>
			++match_idx;
    aa84:	3601      	adds	r6, #1
    aa86:	e7f9      	b.n	aa7c <shell_device_lookup+0x5c>

0000aa88 <z_shell_raw_fprintf>:
{
    aa88:	b40e      	push	{r1, r2, r3}
    aa8a:	b503      	push	{r0, r1, lr}
    aa8c:	aa03      	add	r2, sp, #12
    aa8e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    aa92:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    aa94:	f7f8 fe22 	bl	36dc <z_shell_fprintf_fmt>
}
    aa98:	b002      	add	sp, #8
    aa9a:	f85d eb04 	ldr.w	lr, [sp], #4
    aa9e:	b003      	add	sp, #12
    aaa0:	4770      	bx	lr

0000aaa2 <full_line_cmd>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    aaa2:	6882      	ldr	r2, [r0, #8]
{
    aaa4:	b538      	push	{r3, r4, r5, lr}
    aaa6:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    aaa8:	6810      	ldr	r0, [r2, #0]
    aaaa:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
    aaac:	b110      	cbz	r0, aab4 <full_line_cmd+0x12>
    aaae:	f000 fe5e 	bl	b76e <strlen>
    aab2:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    aab4:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
    aab6:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    aab8:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    aaba:	fbb3 f2f0 	udiv	r2, r3, r0
    aabe:	fb00 3012 	mls	r0, r0, r2, r3
}
    aac2:	fab0 f080 	clz	r0, r0
    aac6:	0940      	lsrs	r0, r0, #5
    aac8:	bd38      	pop	{r3, r4, r5, pc}

0000aaca <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    aaca:	6882      	ldr	r2, [r0, #8]
{
    aacc:	b538      	push	{r3, r4, r5, lr}
    aace:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    aad0:	6810      	ldr	r0, [r2, #0]
    aad2:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
    aad4:	b110      	cbz	r0, aadc <z_shell_cursor_in_empty_line+0x12>
    aad6:	f000 fe4a 	bl	b76e <strlen>
    aada:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    aadc:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
    aade:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
    aae0:	8d50      	ldrh	r0, [r2, #42]	; 0x2a
    aae2:	fbb3 f2f0 	udiv	r2, r3, r0
    aae6:	fb00 3012 	mls	r0, r0, r2, r3
}
    aaea:	fab0 f080 	clz	r0, r0
    aaee:	0940      	lsrs	r0, r0, #5
    aaf0:	bd38      	pop	{r3, r4, r5, pc}

0000aaf2 <z_shell_op_cond_next_line>:
{
    aaf2:	b510      	push	{r4, lr}
    aaf4:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    aaf6:	f7ff ffe8 	bl	aaca <z_shell_cursor_in_empty_line>
    aafa:	b120      	cbz	r0, ab06 <z_shell_op_cond_next_line+0x14>
		z_cursor_next_line_move(shell);
    aafc:	6960      	ldr	r0, [r4, #20]
}
    aafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_cursor_next_line_move(shell);
    ab02:	f7f8 be31 	b.w	3768 <z_cursor_next_line_move.isra.0>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
    ab06:	4620      	mov	r0, r4
    ab08:	f7ff ffcb 	bl	aaa2 <full_line_cmd>
    ab0c:	2800      	cmp	r0, #0
    ab0e:	d1f5      	bne.n	aafc <z_shell_op_cond_next_line+0xa>
}
    ab10:	bd10      	pop	{r4, pc}

0000ab12 <z_shell_op_cursor_position_synchronize>:
{
    ab12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    ab14:	6884      	ldr	r4, [r0, #8]
{
    ab16:	4605      	mov	r5, r0
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    ab18:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    ab1a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    ab1c:	f104 0020 	add.w	r0, r4, #32
    ab20:	f7ff fdca 	bl	a6b8 <z_shell_multiline_data_calc>
	if (full_line_cmd(shell)) {
    ab24:	4628      	mov	r0, r5
	last_line = (cons->cur_y == cons->cur_y_end);
    ab26:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    ab28:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
    ab2a:	f7ff ffba 	bl	aaa2 <full_line_cmd>
    ab2e:	b110      	cbz	r0, ab36 <z_shell_op_cursor_position_synchronize+0x24>
		z_cursor_next_line_move(shell);
    ab30:	6968      	ldr	r0, [r5, #20]
    ab32:	f7f8 fe19 	bl	3768 <z_cursor_next_line_move.isra.0>
	if (last_line) {
    ab36:	42b7      	cmp	r7, r6
    ab38:	d107      	bne.n	ab4a <z_shell_op_cursor_position_synchronize+0x38>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    ab3a:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
    ab3c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    ab3e:	4628      	mov	r0, r5
    ab40:	1ac9      	subs	r1, r1, r3
}
    ab42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
    ab46:	f7f8 be2b 	b.w	37a0 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
    ab4a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    ab4c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    ab4e:	4628      	mov	r0, r5
    ab50:	1ac9      	subs	r1, r1, r3
    ab52:	f7f8 fe0f 	bl	3774 <z_shell_op_cursor_vert_move>
    ab56:	e7f0      	b.n	ab3a <z_shell_op_cursor_position_synchronize+0x28>

0000ab58 <z_shell_op_cursor_move>:
{
    ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab5a:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
    ab5c:	6880      	ldr	r0, [r0, #8]
{
    ab5e:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    ab60:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    ab62:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    ab64:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    ab66:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
    ab68:	f7ff fda6 	bl	a6b8 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
    ab6c:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
    ab6e:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
    ab70:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    ab72:	462a      	mov	r2, r5
    ab74:	3020      	adds	r0, #32
    ab76:	f7ff fd94 	bl	a6a2 <z_row_span_with_buffer_offsets_get>
    ab7a:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
    ab7c:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
    ab7e:	462a      	mov	r2, r5
    ab80:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    ab82:	3020      	adds	r0, #32
    ab84:	f7ff fd7e 	bl	a684 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
    ab88:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
    ab8a:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
    ab8c:	4620      	mov	r0, r4
    ab8e:	f7f8 fdf1 	bl	3774 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
    ab92:	4631      	mov	r1, r6
    ab94:	4620      	mov	r0, r4
    ab96:	f7f8 fe03 	bl	37a0 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
    ab9a:	68a3      	ldr	r3, [r4, #8]
    ab9c:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
    ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000aba0 <z_shell_op_cursor_word_move>:
{
    aba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
    aba4:	1e0c      	subs	r4, r1, #0
{
    aba6:	4606      	mov	r6, r0
	if (val < 0) {
    aba8:	da34      	bge.n	ac14 <z_shell_op_cursor_word_move+0x74>
		val = -val;
    abaa:	4264      	negs	r4, r4
    abac:	b224      	sxth	r4, r4
		sign = -1;
    abae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    abb2:	b2a4      	uxth	r4, r4
    abb4:	b2af      	uxth	r7, r5
    abb6:	e025      	b.n	ac04 <z_shell_op_cursor_word_move+0x64>
		shift = shift_calc(shell->ctx->cmd_buff,
    abb8:	68b3      	ldr	r3, [r6, #8]
    abba:	f8b3 e03e 	ldrh.w	lr, [r3, #62]	; 0x3e
    abbe:	f8b3 903c 	ldrh.w	r9, [r3, #60]	; 0x3c
    abc2:	f103 0842 	add.w	r8, r3, #66	; 0x42
	bool found = false;
    abc6:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
    abc8:	4673      	mov	r3, lr
		idx = pos + ret * sign;
    abca:	eba3 010e 	sub.w	r1, r3, lr
    abce:	b289      	uxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
    abd0:	b90b      	cbnz	r3, abd6 <z_shell_op_cursor_word_move+0x36>
    abd2:	1c6a      	adds	r2, r5, #1
    abd4:	d010      	beq.n	abf8 <z_shell_op_cursor_word_move+0x58>
    abd6:	4599      	cmp	r9, r3
    abd8:	d101      	bne.n	abde <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
    abda:	2d01      	cmp	r5, #1
    abdc:	d00c      	beq.n	abf8 <z_shell_op_cursor_word_move+0x58>
		if (isalnum((int)str[idx]) != 0) {
    abde:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    abe2:	f042 0c20 	orr.w	ip, r2, #32
    abe6:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
    abea:	f1bc 0f19 	cmp.w	ip, #25
    abee:	d90d      	bls.n	ac0c <z_shell_op_cursor_word_move+0x6c>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    abf0:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    abf2:	2a09      	cmp	r2, #9
    abf4:	d90a      	bls.n	ac0c <z_shell_op_cursor_word_move+0x6c>
			if (found) {
    abf6:	b150      	cbz	r0, ac0e <z_shell_op_cursor_word_move+0x6e>
		z_shell_op_cursor_move(shell, sign * shift);
    abf8:	b209      	sxth	r1, r1
    abfa:	4630      	mov	r0, r6
    abfc:	f7ff ffac 	bl	ab58 <z_shell_op_cursor_move>
    ac00:	3c01      	subs	r4, #1
    ac02:	b2a4      	uxth	r4, r4
	while (val--) {
    ac04:	2c00      	cmp	r4, #0
    ac06:	d1d7      	bne.n	abb8 <z_shell_op_cursor_word_move+0x18>
}
    ac08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
    ac0c:	2001      	movs	r0, #1
	while (1) {
    ac0e:	443b      	add	r3, r7
    ac10:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
    ac12:	e7da      	b.n	abca <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
    ac14:	2501      	movs	r5, #1
    ac16:	e7cc      	b.n	abb2 <z_shell_op_cursor_word_move+0x12>

0000ac18 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
    ac18:	6883      	ldr	r3, [r0, #8]
    ac1a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
    ac1c:	4249      	negs	r1, r1
    ac1e:	b209      	sxth	r1, r1
    ac20:	f7ff bf9a 	b.w	ab58 <z_shell_op_cursor_move>

0000ac24 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
    ac24:	6883      	ldr	r3, [r0, #8]
    ac26:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
    ac28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    ac2a:	1ac9      	subs	r1, r1, r3
    ac2c:	b209      	sxth	r1, r1
    ac2e:	f7ff bf93 	b.w	ab58 <z_shell_op_cursor_move>

0000ac32 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
    ac32:	6883      	ldr	r3, [r0, #8]
    ac34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    ac36:	b11b      	cbz	r3, ac40 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
    ac38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac3c:	f7ff bf8c 	b.w	ab58 <z_shell_op_cursor_move>
}
    ac40:	4770      	bx	lr

0000ac42 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
    ac42:	6883      	ldr	r3, [r0, #8]
    ac44:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    ac46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    ac48:	429a      	cmp	r2, r3
    ac4a:	d202      	bcs.n	ac52 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
    ac4c:	2101      	movs	r1, #1
    ac4e:	f7ff bf83 	b.w	ab58 <z_shell_op_cursor_move>
}
    ac52:	4770      	bx	lr

0000ac54 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
    ac54:	6883      	ldr	r3, [r0, #8]
    ac56:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    ac58:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
    ac5a:	4413      	add	r3, r2
    ac5c:	2200      	movs	r2, #0
    ac5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
    ac62:	f7f8 bd75 	b.w	3750 <z_clear_eos>

0000ac66 <z_shell_cmd_line_erase>:
{
    ac66:	b510      	push	{r4, lr}
    ac68:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    ac6a:	6880      	ldr	r0, [r0, #8]
    ac6c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    ac6e:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    ac70:	3020      	adds	r0, #32
    ac72:	f7ff fd21 	bl	a6b8 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
    ac76:	68a3      	ldr	r3, [r4, #8]
    ac78:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
    ac7a:	4620      	mov	r0, r4
    ac7c:	f1c1 0101 	rsb	r1, r1, #1
    ac80:	f7f8 fd8e 	bl	37a0 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
    ac84:	68a3      	ldr	r3, [r4, #8]
    ac86:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    ac88:	4620      	mov	r0, r4
    ac8a:	3901      	subs	r1, #1
    ac8c:	f7f8 fd72 	bl	3774 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
    ac90:	4620      	mov	r0, r4
}
    ac92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
    ac96:	f7f8 bd5b 	b.w	3750 <z_clear_eos>

0000ac9a <z_shell_write>:
{
    ac9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac9e:	4605      	mov	r5, r0
    aca0:	b086      	sub	sp, #24
    aca2:	460f      	mov	r7, r1
    aca4:	4614      	mov	r4, r2
	size_t offset = 0;
    aca6:	2600      	movs	r6, #0
	while (length) {
    aca8:	b914      	cbnz	r4, acb0 <z_shell_write+0x16>
}
    acaa:	b006      	add	sp, #24
    acac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
    acb0:	6868      	ldr	r0, [r5, #4]
    acb2:	6803      	ldr	r3, [r0, #0]
    acb4:	4622      	mov	r2, r4
    acb6:	f8d3 800c 	ldr.w	r8, [r3, #12]
    acba:	19b9      	adds	r1, r7, r6
    acbc:	466b      	mov	r3, sp
    acbe:	47c0      	blx	r8
		offset += tmp_cnt;
    acc0:	9a00      	ldr	r2, [sp, #0]
    acc2:	4416      	add	r6, r2
		length -= tmp_cnt;
    acc4:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
    acc6:	2a00      	cmp	r2, #0
    acc8:	d1ee      	bne.n	aca8 <z_shell_write+0xe>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
    acca:	68ab      	ldr	r3, [r5, #8]
    accc:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
    acce:	2903      	cmp	r1, #3
    acd0:	d0ea      	beq.n	aca8 <z_shell_write+0xe>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
    acd2:	2902      	cmp	r1, #2
    acd4:	d813      	bhi.n	acfe <z_shell_write+0x64>
		k_poll_event_init(&event,
    acd6:	f503 7326 	add.w	r3, r3, #664	; 0x298
    acda:	2101      	movs	r1, #1
    acdc:	a801      	add	r0, sp, #4
    acde:	f001 ff14 	bl	cb0a <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
    ace2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ace6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    acea:	2101      	movs	r1, #1
    acec:	a801      	add	r0, sp, #4
    acee:	f7fe fb53 	bl	9398 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
    acf2:	68a8      	ldr	r0, [r5, #8]
    acf4:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
    acf8:	f001 ff29 	bl	cb4e <z_impl_k_poll_signal_reset>
    acfc:	e7d4      	b.n	aca8 <z_shell_write+0xe>
	return sh->ctx->ctx.flags.tx_rdy == 1;
    acfe:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
    ad02:	0792      	lsls	r2, r2, #30
    ad04:	d5fb      	bpl.n	acfe <z_shell_write+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ad06:	f3bf 8f5b 	dmb	ish
    ad0a:	f503 7319 	add.w	r3, r3, #612	; 0x264
    ad0e:	e853 2f00 	ldrex	r2, [r3]
    ad12:	f022 0202 	bic.w	r2, r2, #2
    ad16:	e843 2100 	strex	r1, r2, [r3]
    ad1a:	2900      	cmp	r1, #0
    ad1c:	d1f7      	bne.n	ad0e <z_shell_write+0x74>
    ad1e:	f3bf 8f5b 	dmb	ish
	return ret;
    ad22:	e7c1      	b.n	aca8 <z_shell_write+0xe>

0000ad24 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
    ad24:	f7ff bfb9 	b.w	ac9a <z_shell_write>

0000ad28 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
    ad28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ad2a:	460f      	mov	r7, r1
	return sh->ctx->cfg.flags.use_colors == 1;
    ad2c:	6881      	ldr	r1, [r0, #8]
    ad2e:	461e      	mov	r6, r3
    ad30:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    ad34:	06db      	lsls	r3, r3, #27
{
    ad36:	4604      	mov	r4, r0
    ad38:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
    ad3a:	d517      	bpl.n	ad6c <z_shell_vfprintf+0x44>
	    z_flag_use_colors_get(shell)	  &&
    ad3c:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    ad40:	42bb      	cmp	r3, r7
    ad42:	d013      	beq.n	ad6c <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    ad44:	2202      	movs	r2, #2
    ad46:	312e      	adds	r1, #46	; 0x2e
    ad48:	a801      	add	r0, sp, #4
    ad4a:	f000 fd66 	bl	b81a <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
    ad4e:	4639      	mov	r1, r7
    ad50:	4620      	mov	r0, r4
    ad52:	f7f8 fd43 	bl	37dc <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    ad56:	6960      	ldr	r0, [r4, #20]
    ad58:	4632      	mov	r2, r6
    ad5a:	4629      	mov	r1, r5
    ad5c:	f7f8 fcbe 	bl	36dc <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
    ad60:	a901      	add	r1, sp, #4
    ad62:	4620      	mov	r0, r4
    ad64:	f7f8 fd5a 	bl	381c <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
    ad68:	b003      	add	sp, #12
    ad6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    ad6c:	6960      	ldr	r0, [r4, #20]
    ad6e:	4632      	mov	r2, r6
    ad70:	4629      	mov	r1, r5
}
    ad72:	b003      	add	sp, #12
    ad74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
    ad78:	f7f8 bcb0 	b.w	36dc <z_shell_fprintf_fmt>

0000ad7c <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
    ad7c:	b40c      	push	{r2, r3}
    ad7e:	b507      	push	{r0, r1, r2, lr}
    ad80:	ab04      	add	r3, sp, #16
    ad82:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT(z_flag_sync_mode_get(sh) || !k_is_in_isr(),
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
    ad86:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
    ad88:	f7ff ffce 	bl	ad28 <z_shell_vfprintf>
	va_end(args);
}
    ad8c:	b003      	add	sp, #12
    ad8e:	f85d eb04 	ldr.w	lr, [sp], #4
    ad92:	b002      	add	sp, #8
    ad94:	4770      	bx	lr

0000ad96 <data_insert>:
{
    ad96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    ad9a:	6886      	ldr	r6, [r0, #8]
    ad9c:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    ad9e:	18ab      	adds	r3, r5, r2
    ada0:	2bff      	cmp	r3, #255	; 0xff
{
    ada2:	4607      	mov	r7, r0
    ada4:	4688      	mov	r8, r1
    ada6:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
    ada8:	dc1e      	bgt.n	ade8 <data_insert+0x52>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    adaa:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
    adac:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    adae:	3342      	adds	r3, #66	; 0x42
    adb0:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    adb2:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
    adb4:	462a      	mov	r2, r5
    adb6:	4631      	mov	r1, r6
    adb8:	1930      	adds	r0, r6, r4
    adba:	f000 fd16 	bl	b7ea <memmove>
	memcpy(curr_pos, data, len);
    adbe:	4622      	mov	r2, r4
    adc0:	4641      	mov	r1, r8
    adc2:	4630      	mov	r0, r6
    adc4:	f000 fd29 	bl	b81a <memcpy>
	shell->ctx->cmd_buff_len += len;
    adc8:	68b9      	ldr	r1, [r7, #8]
    adca:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
    adcc:	4423      	add	r3, r4
    adce:	b29b      	uxth	r3, r3
    add0:	878b      	strh	r3, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
    add2:	440b      	add	r3, r1
    add4:	2200      	movs	r2, #0
    add6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	return sh->ctx->cfg.flags.echo == 1;
    adda:	f8d1 3260 	ldr.w	r3, [r1, #608]	; 0x260
	if (!z_flag_echo_get(shell)) {
    adde:	079b      	lsls	r3, r3, #30
    ade0:	d404      	bmi.n	adec <data_insert+0x56>
		shell->ctx->cmd_buff_pos += len;
    ade2:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
    ade4:	4414      	add	r4, r2
    ade6:	87cc      	strh	r4, [r1, #62]	; 0x3e
}
    ade8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
    adec:	4629      	mov	r1, r5
    adee:	4638      	mov	r0, r7
}
    adf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
    adf4:	f7f8 bd8c 	b.w	3910 <reprint_from_cursor>

0000adf8 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
    adf8:	f7ff bfcd 	b.w	ad96 <data_insert>

0000adfc <z_shell_op_char_delete>:
{
    adfc:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    adfe:	6883      	ldr	r3, [r0, #8]
{
    ae00:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
    ae02:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
    ae04:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    ae06:	1a24      	subs	r4, r4, r0
    ae08:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
    ae0a:	b18c      	cbz	r4, ae30 <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
    ae0c:	3042      	adds	r0, #66	; 0x42
    ae0e:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
    ae10:	4622      	mov	r2, r4
    ae12:	1c41      	adds	r1, r0, #1
    ae14:	f000 fce9 	bl	b7ea <memmove>
	--shell->ctx->cmd_buff_len;
    ae18:	68aa      	ldr	r2, [r5, #8]
    ae1a:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    ae1c:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
    ae1e:	3b01      	subs	r3, #1
    ae20:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
    ae22:	4628      	mov	r0, r5
    ae24:	2201      	movs	r2, #1
}
    ae26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
    ae2a:	b289      	uxth	r1, r1
    ae2c:	f7f8 bd70 	b.w	3910 <reprint_from_cursor>
}
    ae30:	bd38      	pop	{r3, r4, r5, pc}

0000ae32 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
    ae32:	6883      	ldr	r3, [r0, #8]
    ae34:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
    ae36:	b510      	push	{r4, lr}
    ae38:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
    ae3a:	b152      	cbz	r2, ae52 <z_shell_op_char_backspace+0x20>
    ae3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    ae3e:	b143      	cbz	r3, ae52 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
    ae40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ae44:	f7ff fe88 	bl	ab58 <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
    ae48:	4620      	mov	r0, r4
}
    ae4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
    ae4e:	f7ff bfd5 	b.w	adfc <z_shell_op_char_delete>
}
    ae52:	bd10      	pop	{r4, pc}

0000ae54 <process_msg2_from_buffer>:
		irq_unlock(key);
	}
}

static bool process_msg2_from_buffer(const struct shell *shell)
{
    ae54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct shell_log_backend *log_backend = shell->log_backend;
    ae56:	69c3      	ldr	r3, [r0, #28]
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    ae58:	699e      	ldr	r6, [r3, #24]
	const struct log_output *log_output = log_backend->log_output;
    ae5a:	689f      	ldr	r7, [r3, #8]
	return sh->ctx->cfg.flags.use_colors == 1;
    ae5c:	6883      	ldr	r3, [r0, #8]
	union log_msg2_generic *msg;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);

	msg = (union log_msg2_generic *)mpsc_pbuf_claim(mpsc_buffer);
    ae5e:	4630      	mov	r0, r6
    ae60:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
    ae64:	f7fe ff53 	bl	9d0e <mpsc_pbuf_claim>
    ae68:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (!msg) {
    ae6c:	4604      	mov	r4, r0
    ae6e:	b160      	cbz	r0, ae8a <process_msg2_from_buffer+0x36>
		flags |= LOG_OUTPUT_FLAG_COLORS;
    ae70:	2d00      	cmp	r5, #0
	log_output_msg2_process(log_output, &msg->log, flags);
    ae72:	4601      	mov	r1, r0
    ae74:	bf0c      	ite	eq
    ae76:	220e      	moveq	r2, #14
    ae78:	220f      	movne	r2, #15
    ae7a:	4638      	mov	r0, r7
    ae7c:	f7f6 fdd6 	bl	1a2c <log_output_msg2_process>
		return false;
	}

	process_log_msg2(shell, log_output, msg, false, colors);

	mpsc_pbuf_free(mpsc_buffer, &msg->buf);
    ae80:	4630      	mov	r0, r6
    ae82:	4621      	mov	r1, r4
    ae84:	f7fe ff8f 	bl	9da6 <mpsc_pbuf_free>

	return true;
    ae88:	2001      	movs	r0, #1
}
    ae8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ae8c <log2_process>:

static void log2_process(const struct log_backend *const backend,
		    union log_msg2_generic *msg)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    ae8c:	6843      	ldr	r3, [r0, #4]
{
    ae8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    ae92:	681e      	ldr	r6, [r3, #0]
    ae94:	68b2      	ldr	r2, [r6, #8]
	const struct shell_log_backend *log_backend = shell->log_backend;
    ae96:	69f3      	ldr	r3, [r6, #28]
    ae98:	f8d2 4260 	ldr.w	r4, [r2, #608]	; 0x260
	const struct log_output *log_output = log_backend->log_output;
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);
	struct k_poll_signal *signal;

	switch (shell->log_backend->control_block->state) {
    ae9c:	68da      	ldr	r2, [r3, #12]
    ae9e:	7912      	ldrb	r2, [r2, #4]
    aea0:	2a01      	cmp	r2, #1
{
    aea2:	460d      	mov	r5, r1
    aea4:	f3c4 1400 	ubfx	r4, r4, #4, #1
	switch (shell->log_backend->control_block->state) {
    aea8:	d003      	beq.n	aeb2 <log2_process+0x26>
    aeaa:	2a03      	cmp	r2, #3
    aeac:	d042      	beq.n	af34 <log2_process+0xa8>
	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		break;
	}
}
    aeae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct mpsc_pbuf_buffer *mpsc_buffer = log_backend->mpsc_buffer;
    aeb2:	699f      	ldr	r7, [r3, #24]
			copy_to_pbuffer(mpsc_buffer, msg,
    aeb4:	6918      	ldr	r0, [r3, #16]
	return msg->generic.type == Z_LOG_MSG2_LOG;
    aeb6:	780b      	ldrb	r3, [r1, #0]
	if (z_log_item_is_msg(generic_msg)) {
    aeb8:	0759      	lsls	r1, r3, #29
    aeba:	d439      	bmi.n	af30 <log2_process+0xa4>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    aebc:	682b      	ldr	r3, [r5, #0]
    aebe:	f3c3 2449 	ubfx	r4, r3, #9, #10
    aec2:	886b      	ldrh	r3, [r5, #2]
    aec4:	f3c3 03cb 	ubfx	r3, r3, #3, #12
    aec8:	441c      	add	r4, r3
    aeca:	3413      	adds	r4, #19
    aecc:	f024 0407 	bic.w	r4, r4, #7
    aed0:	08a4      	lsrs	r4, r4, #2
    aed2:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    aed6:	f240 3ce7 	movw	ip, #999	; 0x3e7
    aeda:	2100      	movs	r1, #0
    aedc:	fbe0 c10e 	umlal	ip, r1, r0, lr
    aee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aee4:	2300      	movs	r3, #0
    aee6:	4660      	mov	r0, ip
    aee8:	f7f5 f8f8 	bl	dc <__aeabi_uldivmod>
    aeec:	4602      	mov	r2, r0
    aeee:	460b      	mov	r3, r1
	dst = mpsc_pbuf_alloc(mpsc_buffer, wlen, K_MSEC(timeout));
    aef0:	4638      	mov	r0, r7
    aef2:	4621      	mov	r1, r4
    aef4:	f7fe fe78 	bl	9be8 <mpsc_pbuf_alloc>
	if (!dst) {
    aef8:	4680      	mov	r8, r0
    aefa:	b188      	cbz	r0, af20 <log2_process+0x94>
	dst->hdr.data = msg->buf.hdr.data;
    aefc:	4629      	mov	r1, r5
    aefe:	6802      	ldr	r2, [r0, #0]
    af00:	f851 3b04 	ldr.w	r3, [r1], #4
    af04:	f3c3 039d 	ubfx	r3, r3, #2, #30
    af08:	f363 029f 	bfi	r2, r3, #2, #30
    af0c:	f840 2b04 	str.w	r2, [r0], #4
	memcpy(dst_data, src_data, (wlen - hdr_wlen) * sizeof(uint32_t));
    af10:	1e62      	subs	r2, r4, #1
    af12:	0092      	lsls	r2, r2, #2
    af14:	f000 fc81 	bl	b81a <memcpy>
	mpsc_pbuf_commit(mpsc_buffer, dst);
    af18:	4641      	mov	r1, r8
    af1a:	4638      	mov	r0, r7
    af1c:	f7fe feda 	bl	9cd4 <mpsc_pbuf_commit>
				signal =
    af20:	68b0      	ldr	r0, [r6, #8]
    af22:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
    af26:	2100      	movs	r1, #0
}
    af28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    af2c:	f7fe ba90 	b.w	9450 <z_impl_k_poll_signal_raise>
	return 0;
    af30:	2400      	movs	r4, #0
    af32:	e7ce      	b.n	aed2 <log2_process+0x46>
		z_shell_cmd_line_erase(shell);
    af34:	4630      	mov	r0, r6
	const struct log_output *log_output = log_backend->log_output;
    af36:	689f      	ldr	r7, [r3, #8]
		z_shell_cmd_line_erase(shell);
    af38:	f7ff fe95 	bl	ac66 <z_shell_cmd_line_erase>
		flags |= LOG_OUTPUT_FLAG_COLORS;
    af3c:	2c00      	cmp	r4, #0
    af3e:	bf0c      	ite	eq
    af40:	f04f 080e 	moveq.w	r8, #14
    af44:	f04f 080f 	movne.w	r8, #15
	__asm__ volatile(
    af48:	f04f 0320 	mov.w	r3, #32
    af4c:	f3ef 8411 	mrs	r4, BASEPRI
    af50:	f383 8812 	msr	BASEPRI_MAX, r3
    af54:	f3bf 8f6f 	isb	sy
	return sh->ctx->ctx.flags.cmd_ctx == 1;
    af58:	68b3      	ldr	r3, [r6, #8]
    af5a:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
    af5e:	051a      	lsls	r2, r3, #20
    af60:	d402      	bmi.n	af68 <log2_process+0xdc>
			z_shell_cmd_line_erase(shell);
    af62:	4630      	mov	r0, r6
    af64:	f7ff fe7f 	bl	ac66 <z_shell_cmd_line_erase>
	log_output_msg2_process(log_output, &msg->log, flags);
    af68:	4642      	mov	r2, r8
    af6a:	4629      	mov	r1, r5
    af6c:	4638      	mov	r0, r7
    af6e:	f7f6 fd5d 	bl	1a2c <log_output_msg2_process>
    af72:	68b3      	ldr	r3, [r6, #8]
    af74:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
		if (!z_flag_cmd_ctx_get(shell)) {
    af78:	051b      	lsls	r3, r3, #20
    af7a:	d402      	bmi.n	af82 <log2_process+0xf6>
			z_shell_print_prompt_and_cmd(shell);
    af7c:	4630      	mov	r0, r6
    af7e:	f7f8 fd37 	bl	39f0 <z_shell_print_prompt_and_cmd>
	__asm__ volatile(
    af82:	f384 8811 	msr	BASEPRI, r4
    af86:	f3bf 8f6f 	isb	sy
}
    af8a:	e790      	b.n	aeae <log2_process+0x22>

0000af8c <dropped>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    af8c:	6843      	ldr	r3, [r0, #4]
    af8e:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    af90:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
    af94:	f3bf 8f5b 	dmb	ish
    af98:	e853 0f00 	ldrex	r0, [r3]
    af9c:	4408      	add	r0, r1
    af9e:	e843 0c00 	strex	ip, r0, [r3]
    afa2:	f1bc 0f00 	cmp.w	ip, #0
    afa6:	d1f7      	bne.n	af98 <dropped+0xc>
    afa8:	f3bf 8f5b 	dmb	ish
    afac:	68d3      	ldr	r3, [r2, #12]
    afae:	f3bf 8f5b 	dmb	ish
    afb2:	e853 2f00 	ldrex	r2, [r3]
    afb6:	440a      	add	r2, r1
    afb8:	e843 2000 	strex	r0, r2, [r3]
    afbc:	2800      	cmp	r0, #0
    afbe:	d1f8      	bne.n	afb2 <dropped+0x26>
    afc0:	f3bf 8f5b 	dmb	ish
}
    afc4:	4770      	bx	lr

0000afc6 <z_shell_log_backend_output_func>:
{
    afc6:	b510      	push	{r4, lr}
    afc8:	4613      	mov	r3, r2
    afca:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
    afcc:	460a      	mov	r2, r1
    afce:	4601      	mov	r1, r0
    afd0:	4618      	mov	r0, r3
    afd2:	f7ff fea7 	bl	ad24 <z_shell_print_stream>
}
    afd6:	4620      	mov	r0, r4
    afd8:	bd10      	pop	{r4, pc}

0000afda <z_shell_log_backend_enable>:
{
    afda:	b570      	push	{r4, r5, r6, lr}
    afdc:	4604      	mov	r4, r0
    afde:	460d      	mov	r5, r1
    afe0:	4616      	mov	r6, r2
		mpsc_pbuf_init(backend->mpsc_buffer,
    afe2:	e9d0 1005 	ldrd	r1, r0, [r0, #20]
    afe6:	f7fe fde0 	bl	9baa <mpsc_pbuf_init>
		log_backend_enable(backend->backend, ctx, init_log_level);
    afea:	4632      	mov	r2, r6
    afec:	6820      	ldr	r0, [r4, #0]
    afee:	4629      	mov	r1, r5
    aff0:	f7f6 fb9c 	bl	172c <log_backend_enable>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
    aff4:	68a3      	ldr	r3, [r4, #8]
    aff6:	685b      	ldr	r3, [r3, #4]
    aff8:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
    affa:	68e3      	ldr	r3, [r4, #12]
    affc:	2200      	movs	r2, #0
    affe:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
    b000:	2201      	movs	r2, #1
    b002:	711a      	strb	r2, [r3, #4]
}
    b004:	bd70      	pop	{r4, r5, r6, pc}

0000b006 <z_shell_log_backend_disable>:
{
    b006:	b510      	push	{r4, lr}
    b008:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
    b00a:	6800      	ldr	r0, [r0, #0]
    b00c:	f7ff f86a 	bl	a0e4 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
    b010:	68e3      	ldr	r3, [r4, #12]
    b012:	2202      	movs	r2, #2
    b014:	711a      	strb	r2, [r3, #4]
}
    b016:	bd10      	pop	{r4, pc}

0000b018 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    b018:	6843      	ldr	r3, [r0, #4]
{
    b01a:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
    b01c:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
    b01e:	6860      	ldr	r0, [r4, #4]
    b020:	6803      	ldr	r3, [r0, #0]
    b022:	2101      	movs	r1, #1
    b024:	689b      	ldr	r3, [r3, #8]
    b026:	4798      	blx	r3
	if (err == 0) {
    b028:	bb48      	cbnz	r0, b07e <panic+0x66>
		shell->log_backend->control_block->state =
    b02a:	69e3      	ldr	r3, [r4, #28]
    b02c:	68db      	ldr	r3, [r3, #12]
    b02e:	2203      	movs	r2, #3
    b030:	711a      	strb	r2, [r3, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b032:	68a3      	ldr	r3, [r4, #8]
    b034:	f3bf 8f5b 	dmb	ish
    b038:	f503 7319 	add.w	r3, r3, #612	; 0x264
    b03c:	e853 2f00 	ldrex	r2, [r3]
    b040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b044:	e843 2100 	strex	r1, r2, [r3]
    b048:	2900      	cmp	r1, #0
    b04a:	d1f7      	bne.n	b03c <panic+0x24>
    b04c:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
    b050:	68a0      	ldr	r0, [r4, #8]
    b052:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    b054:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    b056:	3020      	adds	r0, #32
    b058:	f7ff fb2e 	bl	a6b8 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
    b05c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b060:	4620      	mov	r0, r4
    b062:	f7f8 fb87 	bl	3774 <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
    b066:	68a3      	ldr	r3, [r4, #8]
    b068:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
    b06a:	4620      	mov	r0, r4
    b06c:	4249      	negs	r1, r1
    b06e:	f7f8 fb97 	bl	37a0 <z_shell_op_cursor_horiz_move>
			while (process_msg2_from_buffer(shell)) {
    b072:	4620      	mov	r0, r4
    b074:	f7ff feee 	bl	ae54 <process_msg2_from_buffer>
    b078:	2800      	cmp	r0, #0
    b07a:	d1fa      	bne.n	b072 <panic+0x5a>
}
    b07c:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
    b07e:	69e0      	ldr	r0, [r4, #28]
}
    b080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
    b084:	f7ff bfbf 	b.w	b006 <z_shell_log_backend_disable>

0000b088 <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
    b088:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
    b08a:	685b      	ldr	r3, [r3, #4]
{
    b08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
    b08e:	681c      	ldr	r4, [r3, #0]
	return sh->ctx->cfg.flags.use_colors == 1;
    b090:	68a3      	ldr	r3, [r4, #8]
    b092:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b096:	68c3      	ldr	r3, [r0, #12]
    b098:	f3bf 8f5b 	dmb	ish
{
    b09c:	4605      	mov	r5, r0
    b09e:	f3c6 1600 	ubfx	r6, r6, #4, #1
    b0a2:	2200      	movs	r2, #0
    b0a4:	e853 7f00 	ldrex	r7, [r3]
    b0a8:	e843 2100 	strex	r1, r2, [r3]
    b0ac:	2900      	cmp	r1, #0
    b0ae:	d1f9      	bne.n	b0a4 <z_shell_log_backend_process+0x1c>
    b0b0:	f3bf 8f5b 	dmb	ish
	if (dropped) {
    b0b4:	b19f      	cbz	r7, b0de <z_shell_log_backend_process+0x56>
		if (colors) {
    b0b6:	b14e      	cbz	r6, b0cc <z_shell_log_backend_process+0x44>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
    b0b8:	68a1      	ldr	r1, [r4, #8]
    b0ba:	2202      	movs	r2, #2
    b0bc:	312e      	adds	r1, #46	; 0x2e
    b0be:	a801      	add	r0, sp, #4
    b0c0:	f000 fbab 	bl	b81a <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
    b0c4:	2101      	movs	r1, #1
    b0c6:	4620      	mov	r0, r4
    b0c8:	f7f8 fb88 	bl	37dc <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
    b0cc:	68a8      	ldr	r0, [r5, #8]
    b0ce:	4639      	mov	r1, r7
    b0d0:	f7f6 fd10 	bl	1af4 <log_output_dropped_process>
		if (colors) {
    b0d4:	b11e      	cbz	r6, b0de <z_shell_log_backend_process+0x56>
			z_shell_vt100_colors_restore(shell, &col);
    b0d6:	a901      	add	r1, sp, #4
    b0d8:	4620      	mov	r0, r4
    b0da:	f7f8 fb9f 	bl	381c <z_shell_vt100_colors_restore>
		return process_msg2_from_buffer(shell);
    b0de:	4620      	mov	r0, r4
}
    b0e0:	b003      	add	sp, #12
    b0e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return process_msg2_from_buffer(shell);
    b0e6:	f7ff beb5 	b.w	ae54 <process_msg2_from_buffer>

0000b0ea <z_shell_raw_fprintf>:
{
    b0ea:	b40e      	push	{r1, r2, r3}
    b0ec:	b503      	push	{r0, r1, lr}
    b0ee:	aa03      	add	r2, sp, #12
    b0f0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    b0f4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    b0f6:	f7f8 faf1 	bl	36dc <z_shell_fprintf_fmt>
}
    b0fa:	b002      	add	sp, #8
    b0fc:	f85d eb04 	ldr.w	lr, [sp], #4
    b100:	b003      	add	sp, #12
    b102:	4770      	bx	lr

0000b104 <formatted_text_print.constprop.0>:
static void formatted_text_print(const struct shell *shell, const char *str,
    b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b108:	4604      	mov	r4, r0
    b10a:	4690      	mov	r8, r2
	if (str == NULL) {
    b10c:	460e      	mov	r6, r1
    b10e:	2900      	cmp	r1, #0
    b110:	d069      	beq.n	b1e6 <formatted_text_print.constprop.0+0xe2>
    b112:	2500      	movs	r5, #0
	while (isspace((int) *(str + offset))) {
    b114:	5d73      	ldrb	r3, [r6, r5]
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    b116:	2b20      	cmp	r3, #32
    b118:	d023      	beq.n	b162 <formatted_text_print.constprop.0+0x5e>
    b11a:	3b09      	subs	r3, #9
    b11c:	2b04      	cmp	r3, #4
    b11e:	d920      	bls.n	b162 <formatted_text_print.constprop.0+0x5e>
    b120:	4630      	mov	r0, r6
    b122:	f000 fb24 	bl	b76e <strlen>
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    b126:	68a3      	ldr	r3, [r4, #8]
    b128:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
    b12a:	b280      	uxth	r0, r0
    b12c:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
    b12e:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
    b132:	4298      	cmp	r0, r3
    b134:	eb06 0905 	add.w	r9, r6, r5
    b138:	d915      	bls.n	b166 <formatted_text_print.constprop.0+0x62>
    b13a:	4648      	mov	r0, r9
		size_t idx = 0;
    b13c:	2700      	movs	r7, #0
			if (isspace((int) (*(str + offset + idx)))) {
    b13e:	f810 2b01 	ldrb.w	r2, [r0], #1
    b142:	2a20      	cmp	r2, #32
    b144:	d006      	beq.n	b154 <formatted_text_print.constprop.0+0x50>
    b146:	f1a2 0c09 	sub.w	ip, r2, #9
    b14a:	f1bc 0f04 	cmp.w	ip, #4
    b14e:	d802      	bhi.n	b156 <formatted_text_print.constprop.0+0x52>
				if (*(str + offset + idx) == '\n') {
    b150:	2a0a      	cmp	r2, #10
    b152:	d02f      	beq.n	b1b4 <formatted_text_print.constprop.0+0xb0>
    b154:	463b      	mov	r3, r7
			if ((idx + terminal_offset) >=
    b156:	eb08 0207 	add.w	r2, r8, r7
    b15a:	4291      	cmp	r1, r2
    b15c:	d929      	bls.n	b1b2 <formatted_text_print.constprop.0+0xae>
			++idx;
    b15e:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
    b160:	e7ed      	b.n	b13e <formatted_text_print.constprop.0+0x3a>
		++offset;
    b162:	3501      	adds	r5, #1
    b164:	e7d6      	b.n	b114 <formatted_text_print.constprop.0+0x10>
    b166:	464b      	mov	r3, r9
			for (idx = 0; idx < length; idx++) {
    b168:	2700      	movs	r7, #0
    b16a:	42b8      	cmp	r0, r7
    b16c:	d016      	beq.n	b19c <formatted_text_print.constprop.0+0x98>
				if (*(str + offset + idx) == '\n') {
    b16e:	f813 2b01 	ldrb.w	r2, [r3], #1
    b172:	2a0a      	cmp	r2, #10
    b174:	eb05 0a07 	add.w	sl, r5, r7
    b178:	d119      	bne.n	b1ae <formatted_text_print.constprop.0+0xaa>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
    b17a:	6960      	ldr	r0, [r4, #20]
    b17c:	f7ff fa4a 	bl	a614 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
    b180:	4649      	mov	r1, r9
    b182:	463a      	mov	r2, r7
    b184:	4620      	mov	r0, r4
    b186:	f7ff fd88 	bl	ac9a <z_shell_write>
					z_cursor_next_line_move(shell);
    b18a:	6960      	ldr	r0, [r4, #20]
    b18c:	f7f8 fc48 	bl	3a20 <z_cursor_next_line_move.isra.0>
					z_shell_op_cursor_horiz_move(shell,
    b190:	4641      	mov	r1, r8
    b192:	4620      	mov	r0, r4
					offset += idx + 1;
    b194:	f10a 0501 	add.w	r5, sl, #1
					z_shell_op_cursor_horiz_move(shell,
    b198:	f7f8 fb02 	bl	37a0 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
    b19c:	6960      	ldr	r0, [r4, #20]
    b19e:	1971      	adds	r1, r6, r5
    b1a0:	f7ff ffa3 	bl	b0ea <z_shell_raw_fprintf>
	z_cursor_next_line_move(shell);
    b1a4:	6960      	ldr	r0, [r4, #20]
}
    b1a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_cursor_next_line_move(shell);
    b1aa:	f7f8 bc39 	b.w	3a20 <z_cursor_next_line_move.isra.0>
			for (idx = 0; idx < length; idx++) {
    b1ae:	3701      	adds	r7, #1
    b1b0:	e7db      	b.n	b16a <formatted_text_print.constprop.0+0x66>
    b1b2:	461f      	mov	r7, r3
    b1b4:	6960      	ldr	r0, [r4, #20]
    b1b6:	f7ff fa2d 	bl	a614 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
    b1ba:	463a      	mov	r2, r7
    b1bc:	4649      	mov	r1, r9
    b1be:	4620      	mov	r0, r4
    b1c0:	f7ff fd6b 	bl	ac9a <z_shell_write>
		offset += length;
    b1c4:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
    b1c6:	5d73      	ldrb	r3, [r6, r5]
    b1c8:	2b20      	cmp	r3, #32
    b1ca:	d00a      	beq.n	b1e2 <formatted_text_print.constprop.0+0xde>
    b1cc:	3b09      	subs	r3, #9
    b1ce:	2b04      	cmp	r3, #4
    b1d0:	d907      	bls.n	b1e2 <formatted_text_print.constprop.0+0xde>
		z_cursor_next_line_move(shell);
    b1d2:	6960      	ldr	r0, [r4, #20]
    b1d4:	f7f8 fc24 	bl	3a20 <z_cursor_next_line_move.isra.0>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
    b1d8:	4641      	mov	r1, r8
    b1da:	4620      	mov	r0, r4
    b1dc:	f7f8 fae0 	bl	37a0 <z_shell_op_cursor_horiz_move>
	while (true) {
    b1e0:	e79e      	b.n	b120 <formatted_text_print.constprop.0+0x1c>
			++offset;
    b1e2:	3501      	adds	r5, #1
    b1e4:	e7ef      	b.n	b1c6 <formatted_text_print.constprop.0+0xc2>
}
    b1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000b1ea <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
    b1ea:	6983      	ldr	r3, [r0, #24]
    b1ec:	2000      	movs	r0, #0
    b1ee:	6018      	str	r0, [r3, #0]
}
    b1f0:	4770      	bx	lr

0000b1f2 <z_shell_raw_fprintf>:
{
    b1f2:	b40e      	push	{r1, r2, r3}
    b1f4:	b503      	push	{r0, r1, lr}
    b1f6:	aa03      	add	r2, sp, #12
    b1f8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
    b1fc:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
    b1fe:	f7f8 fa6d 	bl	36dc <z_shell_fprintf_fmt>
}
    b202:	b002      	add	sp, #8
    b204:	f85d eb04 	ldr.w	lr, [sp], #4
    b208:	b003      	add	sp, #12
    b20a:	4770      	bx	lr

0000b20c <cmd_bacskpace_mode_backspace>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b20c:	6883      	ldr	r3, [r0, #8]
    b20e:	f3bf 8f5b 	dmb	ish
    b212:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b216:	e853 2f00 	ldrex	r2, [r3]
    b21a:	f022 0208 	bic.w	r2, r2, #8
    b21e:	e843 2100 	strex	r1, r2, [r3]
    b222:	2900      	cmp	r1, #0
    b224:	d1f7      	bne.n	b216 <cmd_bacskpace_mode_backspace+0xa>
    b226:	f3bf 8f5b 	dmb	ish
}
    b22a:	2000      	movs	r0, #0
    b22c:	4770      	bx	lr

0000b22e <cmd_bacskpace_mode_delete>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b22e:	6883      	ldr	r3, [r0, #8]
    b230:	f3bf 8f5b 	dmb	ish
    b234:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b238:	e853 2f00 	ldrex	r2, [r3]
    b23c:	f042 0208 	orr.w	r2, r2, #8
    b240:	e843 2100 	strex	r1, r2, [r3]
    b244:	2900      	cmp	r1, #0
    b246:	d1f7      	bne.n	b238 <cmd_bacskpace_mode_delete+0xa>
    b248:	f3bf 8f5b 	dmb	ish
}
    b24c:	2000      	movs	r0, #0
    b24e:	4770      	bx	lr

0000b250 <cmd_echo_off>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b250:	6883      	ldr	r3, [r0, #8]
    b252:	f3bf 8f5b 	dmb	ish
    b256:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b25a:	e853 2f00 	ldrex	r2, [r3]
    b25e:	f022 0202 	bic.w	r2, r2, #2
    b262:	e843 2100 	strex	r1, r2, [r3]
    b266:	2900      	cmp	r1, #0
    b268:	d1f7      	bne.n	b25a <cmd_echo_off+0xa>
    b26a:	f3bf 8f5b 	dmb	ish
}
    b26e:	2000      	movs	r0, #0
    b270:	4770      	bx	lr

0000b272 <cmd_colors_off>:
    b272:	6883      	ldr	r3, [r0, #8]
    b274:	f3bf 8f5b 	dmb	ish
    b278:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b27c:	e853 2f00 	ldrex	r2, [r3]
    b280:	f022 0210 	bic.w	r2, r2, #16
    b284:	e843 2100 	strex	r1, r2, [r3]
    b288:	2900      	cmp	r1, #0
    b28a:	d1f7      	bne.n	b27c <cmd_colors_off+0xa>
    b28c:	f3bf 8f5b 	dmb	ish
}
    b290:	2000      	movs	r0, #0
    b292:	4770      	bx	lr

0000b294 <cmd_colors_on>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b294:	6883      	ldr	r3, [r0, #8]
    b296:	f3bf 8f5b 	dmb	ish
    b29a:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b29e:	e853 2f00 	ldrex	r2, [r3]
    b2a2:	f042 0210 	orr.w	r2, r2, #16
    b2a6:	e843 2100 	strex	r1, r2, [r3]
    b2aa:	2900      	cmp	r1, #0
    b2ac:	d1f7      	bne.n	b29e <cmd_colors_on+0xa>
    b2ae:	f3bf 8f5b 	dmb	ish
}
    b2b2:	2000      	movs	r0, #0
    b2b4:	4770      	bx	lr

0000b2b6 <cmd_echo_on>:
    b2b6:	6883      	ldr	r3, [r0, #8]
    b2b8:	f3bf 8f5b 	dmb	ish
    b2bc:	f503 7318 	add.w	r3, r3, #608	; 0x260
    b2c0:	e853 2f00 	ldrex	r2, [r3]
    b2c4:	f042 0202 	orr.w	r2, r2, #2
    b2c8:	e843 2100 	strex	r1, r2, [r3]
    b2cc:	2900      	cmp	r1, #0
    b2ce:	d1f7      	bne.n	b2c0 <cmd_echo_on+0xa>
    b2d0:	f3bf 8f5b 	dmb	ish
}
    b2d4:	2000      	movs	r0, #0
    b2d6:	4770      	bx	lr

0000b2d8 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
    b2d8:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    b2da:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
    b2dc:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
    b2de:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
    b2e2:	600a      	str	r2, [r1, #0]
	next->prev = prev;
    b2e4:	6051      	str	r1, [r2, #4]
	node->next = NULL;
    b2e6:	2200      	movs	r2, #0
	node->prev = NULL;
    b2e8:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
    b2ec:	8919      	ldrh	r1, [r3, #8]
    b2ee:	895b      	ldrh	r3, [r3, #10]
    b2f0:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
    b2f2:	310c      	adds	r1, #12
    b2f4:	f7fe fb88 	bl	9a08 <ring_buf_get_finish>

	return true;
}
    b2f8:	2001      	movs	r0, #1
    b2fa:	bd08      	pop	{r3, pc}

0000b2fc <z_shell_history_mode_exit>:
	history->current = NULL;
    b2fc:	2300      	movs	r3, #0
    b2fe:	60c3      	str	r3, [r0, #12]
}
    b300:	4770      	bx	lr

0000b302 <z_shell_history_get>:
{
    b302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b304:	461f      	mov	r7, r3
	return list->head == list;
    b306:	4603      	mov	r3, r0
    b308:	4616      	mov	r6, r2
    b30a:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
    b30e:	429c      	cmp	r4, r3
    b310:	d102      	bne.n	b318 <z_shell_history_get+0x16>
		*len = 0U;
    b312:	2000      	movs	r0, #0
    b314:	8038      	strh	r0, [r7, #0]
}
    b316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (history->current == NULL) {
    b318:	68c5      	ldr	r5, [r0, #12]
	if (!up) { /* button down */
    b31a:	b9b1      	cbnz	r1, b34a <z_shell_history_get+0x48>
		if (history->current == NULL) {
    b31c:	2d00      	cmp	r5, #0
    b31e:	d0f8      	beq.n	b312 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
    b320:	42ac      	cmp	r4, r5
    b322:	d102      	bne.n	b32a <z_shell_history_get+0x28>
	history->current = l_item;
    b324:	2300      	movs	r3, #0
    b326:	60c3      	str	r3, [r0, #12]
	if (l_item) {
    b328:	e7f3      	b.n	b312 <z_shell_history_get+0x10>
    b32a:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
    b32c:	60c4      	str	r4, [r0, #12]
	if (l_item) {
    b32e:	2c00      	cmp	r4, #0
    b330:	d0ef      	beq.n	b312 <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
    b332:	8922      	ldrh	r2, [r4, #8]
    b334:	f104 010c 	add.w	r1, r4, #12
    b338:	4630      	mov	r0, r6
    b33a:	f000 fa6e 	bl	b81a <memcpy>
		*len = h_item->len;
    b33e:	8923      	ldrh	r3, [r4, #8]
    b340:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
    b342:	2200      	movs	r2, #0
    b344:	54f2      	strb	r2, [r6, r3]
		return true;
    b346:	2001      	movs	r0, #1
    b348:	e7e5      	b.n	b316 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
    b34a:	2d00      	cmp	r5, #0
    b34c:	d0ee      	beq.n	b32c <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
    b34e:	6883      	ldr	r3, [r0, #8]
    b350:	42ab      	cmp	r3, r5
    b352:	d0e7      	beq.n	b324 <z_shell_history_get+0x22>
    b354:	682c      	ldr	r4, [r5, #0]
    b356:	e7e9      	b.n	b32c <z_shell_history_get+0x2a>

0000b358 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
    b358:	b538      	push	{r3, r4, r5, lr}
    b35a:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
    b35c:	1d05      	adds	r5, r0, #4
    b35e:	6863      	ldr	r3, [r4, #4]
    b360:	42ab      	cmp	r3, r5
    b362:	d004      	beq.n	b36e <z_shell_history_purge+0x16>
    b364:	4620      	mov	r0, r4
    b366:	f7ff ffb7 	bl	b2d8 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
    b36a:	2800      	cmp	r0, #0
    b36c:	d1f7      	bne.n	b35e <z_shell_history_purge+0x6>
	}
}
    b36e:	bd38      	pop	{r3, r4, r5, pc}

0000b370 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
    b370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Ring buffer capacity (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_capacity_get(struct ring_buf *buf)
{
	return buf->size;
    b374:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *l_item; /* list item */
	struct shell_history_item *h_item;
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
    b376:	f102 050c 	add.w	r5, r2, #12
	uint32_t claim_len;
	uint32_t claim2_len;
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    b37a:	f1c5 0800 	rsb	r8, r5, #0

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    b37e:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
    b380:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
    b384:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    b386:	429d      	cmp	r5, r3
{
    b388:	4604      	mov	r4, r0
    b38a:	468a      	mov	sl, r1
    b38c:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
    b38e:	d841      	bhi.n	b414 <z_shell_history_put+0xa4>
	history->current = NULL;
    b390:	2300      	movs	r3, #0
    b392:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
    b394:	2a00      	cmp	r2, #0
    b396:	d03d      	beq.n	b414 <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
    b398:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
    b39c:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b39e:	4581      	cmp	r9, r0
    b3a0:	d12d      	bne.n	b3fe <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    b3a2:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
    b3a4:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
    b3a8:	6820      	ldr	r0, [r4, #0]
    b3aa:	462a      	mov	r2, r5
    b3ac:	a901      	add	r1, sp, #4
    b3ae:	f7fe fa98 	bl	98e2 <ring_buf_put_claim>
		if (claim_len < total_len) {
    b3b2:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
    b3b4:	4606      	mov	r6, r0
		if (claim_len < total_len) {
    b3b6:	d930      	bls.n	b41a <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
    b3b8:	6820      	ldr	r0, [r4, #0]
    b3ba:	462a      	mov	r2, r5
    b3bc:	a901      	add	r1, sp, #4
    b3be:	f7fe fa90 	bl	98e2 <ring_buf_put_claim>
			if (claim2_len == total_len) {
    b3c2:	4285      	cmp	r5, r0
    b3c4:	d12a      	bne.n	b41c <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
    b3c6:	4631      	mov	r1, r6
    b3c8:	6820      	ldr	r0, [r4, #0]
    b3ca:	f7fe fab7 	bl	993c <ring_buf_put_finish>
				padding += claim_len;
    b3ce:	44b0      	add	r8, r6
    b3d0:	fa1f f888 	uxth.w	r8, r8
    b3d4:	462e      	mov	r6, r5
			add_to_head(history, h_item, line, len, padding);
    b3d6:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
    b3d8:	4651      	mov	r1, sl
	item->len = len;
    b3da:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
    b3dc:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
    b3e0:	463a      	mov	r2, r7
    b3e2:	f105 000c 	add.w	r0, r5, #12
    b3e6:	f000 fa18 	bl	b81a <memcpy>
	sys_dnode_t *const head = list->head;
    b3ea:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
    b3ec:	6820      	ldr	r0, [r4, #0]
	node->prev = list;
    b3ee:	e9c5 3900 	strd	r3, r9, [r5]
    b3f2:	4631      	mov	r1, r6
	head->prev = node;
    b3f4:	605d      	str	r5, [r3, #4]
	list->head = node;
    b3f6:	6065      	str	r5, [r4, #4]
    b3f8:	f7fe faa0 	bl	993c <ring_buf_put_finish>
			break;
    b3fc:	e00a      	b.n	b414 <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
    b3fe:	9001      	str	r0, [sp, #4]
	if (l_item &&
    b400:	2800      	cmp	r0, #0
    b402:	d0cf      	beq.n	b3a4 <z_shell_history_put+0x34>
	   (h_item->len == len) &&
    b404:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
    b406:	4293      	cmp	r3, r2
    b408:	d1cc      	bne.n	b3a4 <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
    b40a:	300c      	adds	r0, #12
    b40c:	f000 f9dc 	bl	b7c8 <memcmp>
	   (h_item->len == len) &&
    b410:	2800      	cmp	r0, #0
    b412:	d1c7      	bne.n	b3a4 <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
    b414:	b003      	add	sp, #12
    b416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
    b41a:	d0dc      	beq.n	b3d6 <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
    b41c:	6820      	ldr	r0, [r4, #0]
    b41e:	2100      	movs	r1, #0
    b420:	f7fe fa8c 	bl	993c <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
    b424:	6863      	ldr	r3, [r4, #4]
    b426:	4599      	cmp	r9, r3
    b428:	d108      	bne.n	b43c <z_shell_history_put+0xcc>
			ring_buf_reset(history->ring_buf);
    b42a:	6820      	ldr	r0, [r4, #0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    b42c:	2208      	movs	r2, #8
	buf->tail = 0;
    b42e:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
    b432:	2100      	movs	r1, #0
    b434:	4410      	add	r0, r2
    b436:	f000 f9fb 	bl	b830 <memset>
}
    b43a:	e7b5      	b.n	b3a8 <z_shell_history_put+0x38>
    b43c:	4620      	mov	r0, r4
    b43e:	f7ff ff4b 	bl	b2d8 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
    b442:	2800      	cmp	r0, #0
    b444:	d1b0      	bne.n	b3a8 <z_shell_history_put+0x38>
    b446:	e7f0      	b.n	b42a <z_shell_history_put+0xba>

0000b448 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
    b448:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
    b44a:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
    b44e:	2300      	movs	r3, #0
    b450:	60c3      	str	r3, [r0, #12]
}
    b452:	4770      	bx	lr

0000b454 <z_shell_has_wildcard>:
{
    b454:	b510      	push	{r4, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
    b456:	4604      	mov	r4, r0
    b458:	b908      	cbnz	r0, b45e <z_shell_has_wildcard+0xa>
	return false;
    b45a:	2000      	movs	r0, #0
}
    b45c:	bd10      	pop	{r4, pc}
    b45e:	f000 f986 	bl	b76e <strlen>
	for (size_t i = 0; i < str_len; i++) {
    b462:	2300      	movs	r3, #0
    b464:	b280      	uxth	r0, r0
    b466:	4283      	cmp	r3, r0
    b468:	d2f7      	bcs.n	b45a <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
    b46a:	5ce2      	ldrb	r2, [r4, r3]
    b46c:	2a3f      	cmp	r2, #63	; 0x3f
    b46e:	d003      	beq.n	b478 <z_shell_has_wildcard+0x24>
    b470:	2a2a      	cmp	r2, #42	; 0x2a
    b472:	d001      	beq.n	b478 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
    b474:	3301      	adds	r3, #1
    b476:	e7f6      	b.n	b466 <z_shell_has_wildcard+0x12>
			return true;
    b478:	2001      	movs	r0, #1
    b47a:	e7ef      	b.n	b45c <z_shell_has_wildcard+0x8>

0000b47c <z_shell_wildcard_prepare>:
{
    b47c:	b510      	push	{r4, lr}
    b47e:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
    b480:	6880      	ldr	r0, [r0, #8]
    b482:	f44f 7280 	mov.w	r2, #256	; 0x100
    b486:	2100      	movs	r1, #0
    b488:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    b48c:	f000 f9d0 	bl	b830 <memset>
	memcpy(shell->ctx->temp_buff,
    b490:	68a0      	ldr	r0, [r4, #8]
    b492:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    b494:	f100 0142 	add.w	r1, r0, #66	; 0x42
    b498:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    b49c:	f000 f9bd 	bl	b81a <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
    b4a0:	68a0      	ldr	r0, [r4, #8]
    b4a2:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    b4a6:	f7ff fa56 	bl	a956 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
    b4aa:	68a0      	ldr	r0, [r4, #8]
    b4ac:	f500 70a1 	add.w	r0, r0, #322	; 0x142
    b4b0:	f000 f95d 	bl	b76e <strlen>
    b4b4:	68a3      	ldr	r3, [r4, #8]
    b4b6:	3001      	adds	r0, #1
    b4b8:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
}
    b4bc:	bd10      	pop	{r4, pc}

0000b4be <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
    b4be:	b510      	push	{r4, lr}
    b4c0:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
    b4c2:	6880      	ldr	r0, [r0, #8]
    b4c4:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
    b4c8:	f500 71a1 	add.w	r1, r0, #322	; 0x142
    b4cc:	3042      	adds	r0, #66	; 0x42
    b4ce:	f000 f9a4 	bl	b81a <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
    b4d2:	68a3      	ldr	r3, [r4, #8]
    b4d4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    b4d8:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    b4da:	bd10      	pop	{r4, pc}

0000b4dc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    b4dc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    b4de:	6800      	ldr	r0, [r0, #0]
    b4e0:	f7f8 be76 	b.w	41d0 <z_arm_fatal_error>

0000b4e4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    b4e4:	2100      	movs	r1, #0
    b4e6:	2001      	movs	r0, #1
    b4e8:	f7f8 be72 	b.w	41d0 <z_arm_fatal_error>

0000b4ec <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    b4ec:	b508      	push	{r3, lr}
	handler();
    b4ee:	f7f8 ff27 	bl	4340 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    b4f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    b4f6:	f7f9 b80d 	b.w	4514 <z_arm_exc_exit>

0000b4fa <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    b4fa:	2300      	movs	r3, #0
    b4fc:	f7fe be54 	b.w	a1a8 <z_impl_z_log_msg2_static_create>

0000b500 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
    b500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b504:	4684      	mov	ip, r0
    b506:	4688      	mov	r8, r1
	register const char *s = nptr;
    b508:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
    b50a:	4621      	mov	r1, r4
    b50c:	f814 3b01 	ldrb.w	r3, [r4], #1
    b510:	2b20      	cmp	r3, #32
    b512:	d0fa      	beq.n	b50a <strtol+0xa>
    b514:	f1a3 0009 	sub.w	r0, r3, #9
    b518:	2804      	cmp	r0, #4
    b51a:	d9f6      	bls.n	b50a <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
    b51c:	2b2d      	cmp	r3, #45	; 0x2d
    b51e:	d12d      	bne.n	b57c <strtol+0x7c>
		neg = 1;
		c = *s++;
    b520:	784b      	ldrb	r3, [r1, #1]
    b522:	1c8c      	adds	r4, r1, #2
		neg = 1;
    b524:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    b526:	2a00      	cmp	r2, #0
    b528:	d05a      	beq.n	b5e0 <strtol+0xe0>
    b52a:	2a10      	cmp	r2, #16
    b52c:	d109      	bne.n	b542 <strtol+0x42>
    b52e:	2b30      	cmp	r3, #48	; 0x30
    b530:	d107      	bne.n	b542 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    b532:	7823      	ldrb	r3, [r4, #0]
    b534:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b538:	2b58      	cmp	r3, #88	; 0x58
    b53a:	d14c      	bne.n	b5d6 <strtol+0xd6>
		c = s[1];
    b53c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    b53e:	2210      	movs	r2, #16
		s += 2;
    b540:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
    b542:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
    b546:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    b548:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
    b54a:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
    b54e:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
    b550:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    b554:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    b558:	2d09      	cmp	r5, #9
    b55a:	d815      	bhi.n	b588 <strtol+0x88>
			c -= '0';
    b55c:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    b55e:	429a      	cmp	r2, r3
    b560:	dd22      	ble.n	b5a8 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    b562:	1c75      	adds	r5, r6, #1
    b564:	d007      	beq.n	b576 <strtol+0x76>
    b566:	4570      	cmp	r0, lr
    b568:	d81b      	bhi.n	b5a2 <strtol+0xa2>
    b56a:	d101      	bne.n	b570 <strtol+0x70>
    b56c:	454b      	cmp	r3, r9
    b56e:	dc18      	bgt.n	b5a2 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    b570:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    b574:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    b576:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    b57a:	e7eb      	b.n	b554 <strtol+0x54>
	} else if (c == '+') {
    b57c:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    b57e:	bf04      	itt	eq
    b580:	784b      	ldrbeq	r3, [r1, #1]
    b582:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    b584:	2100      	movs	r1, #0
    b586:	e7ce      	b.n	b526 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    b588:	f043 0520 	orr.w	r5, r3, #32
    b58c:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    b58e:	2d19      	cmp	r5, #25
    b590:	d80a      	bhi.n	b5a8 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    b592:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    b596:	2d1a      	cmp	r5, #26
    b598:	bf34      	ite	cc
    b59a:	2537      	movcc	r5, #55	; 0x37
    b59c:	2557      	movcs	r5, #87	; 0x57
    b59e:	1b5b      	subs	r3, r3, r5
    b5a0:	e7dd      	b.n	b55e <strtol+0x5e>
			any = -1;
    b5a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    b5a6:	e7e6      	b.n	b576 <strtol+0x76>
		}
	}

	if (any < 0) {
    b5a8:	1c73      	adds	r3, r6, #1
    b5aa:	d109      	bne.n	b5c0 <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    b5ac:	f7fc fc2e 	bl	7e0c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
    b5b0:	2322      	movs	r3, #34	; 0x22
    b5b2:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
    b5b4:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
    b5b6:	f1b8 0f00 	cmp.w	r8, #0
    b5ba:	d107      	bne.n	b5cc <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    b5bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
    b5c0:	b101      	cbz	r1, b5c4 <strtol+0xc4>
		acc = -acc;
    b5c2:	4240      	negs	r0, r0
	if (endptr != NULL) {
    b5c4:	f1b8 0f00 	cmp.w	r8, #0
    b5c8:	d0f8      	beq.n	b5bc <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
    b5ca:	b10e      	cbz	r6, b5d0 <strtol+0xd0>
    b5cc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    b5d0:	f8c8 c000 	str.w	ip, [r8]
	return acc;
    b5d4:	e7f2      	b.n	b5bc <strtol+0xbc>
	if (base == 0) {
    b5d6:	2330      	movs	r3, #48	; 0x30
    b5d8:	2a00      	cmp	r2, #0
    b5da:	d1b2      	bne.n	b542 <strtol+0x42>
		base = c == '0' ? 8 : 10;
    b5dc:	2208      	movs	r2, #8
    b5de:	e7b0      	b.n	b542 <strtol+0x42>
	if ((base == 0 || base == 16) &&
    b5e0:	2b30      	cmp	r3, #48	; 0x30
    b5e2:	d0a6      	beq.n	b532 <strtol+0x32>
		base = c == '0' ? 8 : 10;
    b5e4:	220a      	movs	r2, #10
    b5e6:	e7ac      	b.n	b542 <strtol+0x42>

0000b5e8 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
    b5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5ec:	4607      	mov	r7, r0
    b5ee:	4688      	mov	r8, r1
	register const char *s = nptr;
    b5f0:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
    b5f2:	4621      	mov	r1, r4
    b5f4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
    b5f8:	2b20      	cmp	r3, #32
    b5fa:	d0fa      	beq.n	b5f2 <strtoul+0xa>
    b5fc:	f1a3 0009 	sub.w	r0, r3, #9
    b600:	2804      	cmp	r0, #4
    b602:	d9f6      	bls.n	b5f2 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
    b604:	2b2d      	cmp	r3, #45	; 0x2d
    b606:	d12f      	bne.n	b668 <strtoul+0x80>
		neg = 1;
		c = *s++;
    b608:	784b      	ldrb	r3, [r1, #1]
    b60a:	1c8c      	adds	r4, r1, #2
		neg = 1;
    b60c:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
    b610:	2a00      	cmp	r2, #0
    b612:	d05e      	beq.n	b6d2 <strtoul+0xea>
    b614:	2a10      	cmp	r2, #16
    b616:	d109      	bne.n	b62c <strtoul+0x44>
    b618:	2b30      	cmp	r3, #48	; 0x30
    b61a:	d107      	bne.n	b62c <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
    b61c:	7823      	ldrb	r3, [r4, #0]
    b61e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b622:	2b58      	cmp	r3, #88	; 0x58
    b624:	d150      	bne.n	b6c8 <strtoul+0xe0>
		c = s[1];
    b626:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
    b628:	2210      	movs	r2, #16
		s += 2;
    b62a:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    b62c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
    b630:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
    b632:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
    b636:	fb02 fe01 	mul.w	lr, r2, r1
    b63a:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
    b63e:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    b640:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
    b644:	2d09      	cmp	r5, #9
    b646:	d816      	bhi.n	b676 <strtoul+0x8e>
			c -= '0';
    b648:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
    b64a:	429a      	cmp	r2, r3
    b64c:	dd23      	ble.n	b696 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
    b64e:	2e00      	cmp	r6, #0
    b650:	db1e      	blt.n	b690 <strtoul+0xa8>
    b652:	4288      	cmp	r0, r1
    b654:	d81c      	bhi.n	b690 <strtoul+0xa8>
    b656:	d101      	bne.n	b65c <strtoul+0x74>
    b658:	4573      	cmp	r3, lr
    b65a:	dc19      	bgt.n	b690 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
    b65c:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
    b660:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
    b662:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
    b666:	e7eb      	b.n	b640 <strtoul+0x58>
	} else if (c == '+') {
    b668:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
    b66a:	bf04      	itt	eq
    b66c:	784b      	ldrbeq	r3, [r1, #1]
    b66e:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
    b670:	f04f 0c00 	mov.w	ip, #0
    b674:	e7cc      	b.n	b610 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    b676:	f043 0520 	orr.w	r5, r3, #32
    b67a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
    b67c:	2d19      	cmp	r5, #25
    b67e:	d80a      	bhi.n	b696 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    b680:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
    b684:	2d1a      	cmp	r5, #26
    b686:	bf34      	ite	cc
    b688:	2537      	movcc	r5, #55	; 0x37
    b68a:	2557      	movcs	r5, #87	; 0x57
    b68c:	1b5b      	subs	r3, r3, r5
    b68e:	e7dc      	b.n	b64a <strtoul+0x62>
			any = -1;
    b690:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    b694:	e7e5      	b.n	b662 <strtoul+0x7a>
		}
	}
	if (any < 0) {
    b696:	2e00      	cmp	r6, #0
    b698:	da0a      	bge.n	b6b0 <strtoul+0xc8>
    b69a:	f7fc fbb7 	bl	7e0c <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
    b69e:	2322      	movs	r3, #34	; 0x22
    b6a0:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
    b6a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
    b6a6:	f1b8 0f00 	cmp.w	r8, #0
    b6aa:	d109      	bne.n	b6c0 <strtoul+0xd8>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
    b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
    b6b0:	f1bc 0f00 	cmp.w	ip, #0
    b6b4:	d000      	beq.n	b6b8 <strtoul+0xd0>
		acc = -acc;
    b6b6:	4240      	negs	r0, r0
	if (endptr != NULL) {
    b6b8:	f1b8 0f00 	cmp.w	r8, #0
    b6bc:	d0f6      	beq.n	b6ac <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
    b6be:	b106      	cbz	r6, b6c2 <strtoul+0xda>
    b6c0:	1e67      	subs	r7, r4, #1
    b6c2:	f8c8 7000 	str.w	r7, [r8]
	return acc;
    b6c6:	e7f1      	b.n	b6ac <strtoul+0xc4>
	if (base == 0) {
    b6c8:	2330      	movs	r3, #48	; 0x30
    b6ca:	2a00      	cmp	r2, #0
    b6cc:	d1ae      	bne.n	b62c <strtoul+0x44>
		base = c == '0' ? 8 : 10;
    b6ce:	2208      	movs	r2, #8
    b6d0:	e7ac      	b.n	b62c <strtoul+0x44>
	if ((base == 0 || base == 16) &&
    b6d2:	2b30      	cmp	r3, #48	; 0x30
    b6d4:	d0a2      	beq.n	b61c <strtoul+0x34>
		base = c == '0' ? 8 : 10;
    b6d6:	220a      	movs	r2, #10
    b6d8:	e7a8      	b.n	b62c <strtoul+0x44>

0000b6da <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
    b6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
    b6de:	f891 8000 	ldrb.w	r8, [r1]
{
    b6e2:	4605      	mov	r5, r0
	if (c != 0) {
    b6e4:	f1b8 0f00 	cmp.w	r8, #0
    b6e8:	d010      	beq.n	b70c <strstr+0x32>
	c = *find++;
    b6ea:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
    b6ec:	4620      	mov	r0, r4
    b6ee:	f000 f83e 	bl	b76e <strlen>
    b6f2:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
    b6f4:	462e      	mov	r6, r5
    b6f6:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
    b6fa:	b163      	cbz	r3, b716 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
    b6fc:	4598      	cmp	r8, r3
    b6fe:	d108      	bne.n	b712 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
    b700:	463a      	mov	r2, r7
    b702:	4621      	mov	r1, r4
    b704:	4630      	mov	r0, r6
    b706:	f000 f84e 	bl	b7a6 <strncmp>
    b70a:	b910      	cbnz	r0, b712 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
    b70c:	4628      	mov	r0, r5
    b70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    b712:	4635      	mov	r5, r6
    b714:	e7ee      	b.n	b6f4 <strstr+0x1a>
					return NULL;
    b716:	461d      	mov	r5, r3
    b718:	e7f8      	b.n	b70c <strstr+0x32>

0000b71a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    b71a:	3901      	subs	r1, #1
    b71c:	4603      	mov	r3, r0
    b71e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    b722:	b90a      	cbnz	r2, b728 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    b724:	701a      	strb	r2, [r3, #0]

	return dest;
}
    b726:	4770      	bx	lr
		*d = *s;
    b728:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    b72c:	e7f7      	b.n	b71e <strcpy+0x4>

0000b72e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
    b72e:	b570      	push	{r4, r5, r6, lr}
    b730:	4605      	mov	r5, r0
    b732:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    b734:	b142      	cbz	r2, b748 <strncpy+0x1a>
    b736:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
    b73a:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
    b73c:	b92c      	cbnz	r4, b74a <strncpy+0x1c>
    b73e:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
    b740:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
    b744:	429a      	cmp	r2, r3
    b746:	d1fb      	bne.n	b740 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
    b748:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    b74a:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
    b74e:	4632      	mov	r2, r6
    b750:	e7ef      	b.n	b732 <strncpy+0x4>

0000b752 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    b752:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    b754:	4603      	mov	r3, r0
    b756:	781a      	ldrb	r2, [r3, #0]
    b758:	428a      	cmp	r2, r1
    b75a:	4618      	mov	r0, r3
    b75c:	f103 0301 	add.w	r3, r3, #1
    b760:	d004      	beq.n	b76c <strchr+0x1a>
    b762:	2a00      	cmp	r2, #0
    b764:	d1f7      	bne.n	b756 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    b766:	2900      	cmp	r1, #0
    b768:	bf18      	it	ne
    b76a:	2000      	movne	r0, #0
}
    b76c:	4770      	bx	lr

0000b76e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    b76e:	4603      	mov	r3, r0
	size_t n = 0;
    b770:	2000      	movs	r0, #0

	while (*s != '\0') {
    b772:	5c1a      	ldrb	r2, [r3, r0]
    b774:	b902      	cbnz	r2, b778 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    b776:	4770      	bx	lr
		n++;
    b778:	3001      	adds	r0, #1
    b77a:	e7fa      	b.n	b772 <strlen+0x4>

0000b77c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    b77c:	4603      	mov	r3, r0
	size_t n = 0;
    b77e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    b780:	5c1a      	ldrb	r2, [r3, r0]
    b782:	b10a      	cbz	r2, b788 <strnlen+0xc>
    b784:	4288      	cmp	r0, r1
    b786:	d100      	bne.n	b78a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    b788:	4770      	bx	lr
		n++;
    b78a:	3001      	adds	r0, #1
    b78c:	e7f8      	b.n	b780 <strnlen+0x4>

0000b78e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    b78e:	1e43      	subs	r3, r0, #1
    b790:	3901      	subs	r1, #1
    b792:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    b796:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    b79a:	4282      	cmp	r2, r0
    b79c:	d101      	bne.n	b7a2 <strcmp+0x14>
    b79e:	2a00      	cmp	r2, #0
    b7a0:	d1f7      	bne.n	b792 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    b7a2:	1a10      	subs	r0, r2, r0
    b7a4:	4770      	bx	lr

0000b7a6 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
    b7a6:	b510      	push	{r4, lr}
    b7a8:	3901      	subs	r1, #1
    b7aa:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
    b7ac:	4282      	cmp	r2, r0
    b7ae:	d009      	beq.n	b7c4 <strncmp+0x1e>
    b7b0:	7803      	ldrb	r3, [r0, #0]
    b7b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b7b6:	42a3      	cmp	r3, r4
    b7b8:	d100      	bne.n	b7bc <strncmp+0x16>
    b7ba:	b90b      	cbnz	r3, b7c0 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
    b7bc:	1b18      	subs	r0, r3, r4
    b7be:	e002      	b.n	b7c6 <strncmp+0x20>
		s1++;
    b7c0:	3001      	adds	r0, #1
		n--;
    b7c2:	e7f3      	b.n	b7ac <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
    b7c4:	2000      	movs	r0, #0
}
    b7c6:	bd10      	pop	{r4, pc}

0000b7c8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    b7c8:	b510      	push	{r4, lr}
    b7ca:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    b7cc:	b15a      	cbz	r2, b7e6 <memcmp+0x1e>
    b7ce:	3901      	subs	r1, #1
    b7d0:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    b7d2:	f813 0b01 	ldrb.w	r0, [r3], #1
    b7d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    b7da:	42a3      	cmp	r3, r4
    b7dc:	d001      	beq.n	b7e2 <memcmp+0x1a>
    b7de:	4290      	cmp	r0, r2
    b7e0:	d0f7      	beq.n	b7d2 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    b7e2:	1a80      	subs	r0, r0, r2
}
    b7e4:	bd10      	pop	{r4, pc}
		return 0;
    b7e6:	4610      	mov	r0, r2
    b7e8:	e7fc      	b.n	b7e4 <memcmp+0x1c>

0000b7ea <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    b7ea:	1a43      	subs	r3, r0, r1
    b7ec:	4293      	cmp	r3, r2
{
    b7ee:	b510      	push	{r4, lr}
    b7f0:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    b7f4:	d308      	bcc.n	b808 <memmove+0x1e>
    b7f6:	3901      	subs	r1, #1
	char *dest = d;
    b7f8:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    b7fa:	429a      	cmp	r2, r3
    b7fc:	d007      	beq.n	b80e <memmove+0x24>
			*dest = *src;
    b7fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b802:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    b806:	e7f8      	b.n	b7fa <memmove+0x10>
    b808:	440a      	add	r2, r1
		while (n > 0) {
    b80a:	428a      	cmp	r2, r1
    b80c:	d100      	bne.n	b810 <memmove+0x26>
		}
	}

	return d;
}
    b80e:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    b810:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    b814:	f803 4d01 	strb.w	r4, [r3, #-1]!
    b818:	e7f7      	b.n	b80a <memmove+0x20>

0000b81a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    b81a:	b510      	push	{r4, lr}
    b81c:	1e43      	subs	r3, r0, #1
    b81e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    b820:	4291      	cmp	r1, r2
    b822:	d100      	bne.n	b826 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    b824:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    b826:	f811 4b01 	ldrb.w	r4, [r1], #1
    b82a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    b82e:	e7f7      	b.n	b820 <memcpy+0x6>

0000b830 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    b830:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    b832:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    b834:	4603      	mov	r3, r0
	while (n > 0) {
    b836:	4293      	cmp	r3, r2
    b838:	d100      	bne.n	b83c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    b83a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    b83c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    b840:	e7f9      	b.n	b836 <memset+0x6>

0000b842 <_stdout_hook_default>:
}
    b842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b846:	4770      	bx	lr

0000b848 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    b848:	684b      	ldr	r3, [r1, #4]
    b84a:	2b01      	cmp	r3, #1
    b84c:	dd07      	ble.n	b85e <sprintf_out+0x16>
		*(p->ptr) = c;
    b84e:	680b      	ldr	r3, [r1, #0]
    b850:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    b852:	680b      	ldr	r3, [r1, #0]
    b854:	3301      	adds	r3, #1
    b856:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    b858:	684b      	ldr	r3, [r1, #4]
    b85a:	3b01      	subs	r3, #1
    b85c:	604b      	str	r3, [r1, #4]
}
    b85e:	2000      	movs	r0, #0
    b860:	4770      	bx	lr

0000b862 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    b862:	b084      	sub	sp, #16
    b864:	ab04      	add	r3, sp, #16
    b866:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    b86a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    b86e:	2b06      	cmp	r3, #6
    b870:	d108      	bne.n	b884 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    b872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b876:	2201      	movs	r2, #1
    b878:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    b87c:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    b880:	bf20      	wfe
    while (true)
    b882:	e7fd      	b.n	b880 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    b884:	b004      	add	sp, #16
    b886:	4770      	bx	lr

0000b888 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    b888:	b084      	sub	sp, #16
    b88a:	ab04      	add	r3, sp, #16
    b88c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    b890:	2300      	movs	r3, #0
    b892:	f383 8811 	msr	BASEPRI, r3
    b896:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    b89a:	b004      	add	sp, #16
    b89c:	4770      	bx	lr

0000b89e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b89e:	6903      	ldr	r3, [r0, #16]
    b8a0:	b2c9      	uxtb	r1, r1
    b8a2:	220c      	movs	r2, #12
    b8a4:	fb01 3302 	mla	r3, r1, r2, r3
    b8a8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    b8aa:	f000 0007 	and.w	r0, r0, #7
    b8ae:	4770      	bx	lr

0000b8b0 <set_on_state>:
	__asm__ volatile(
    b8b0:	f04f 0320 	mov.w	r3, #32
    b8b4:	f3ef 8211 	mrs	r2, BASEPRI
    b8b8:	f383 8812 	msr	BASEPRI_MAX, r3
    b8bc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b8c0:	6803      	ldr	r3, [r0, #0]
    b8c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b8c6:	f043 0302 	orr.w	r3, r3, #2
    b8ca:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b8cc:	f382 8811 	msr	BASEPRI, r2
    b8d0:	f3bf 8f6f 	isb	sy
}
    b8d4:	4770      	bx	lr

0000b8d6 <stop>:
{
    b8d6:	4603      	mov	r3, r0
    b8d8:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    b8da:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    b8dc:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    b8de:	f04f 0420 	mov.w	r4, #32
    b8e2:	f3ef 8611 	mrs	r6, BASEPRI
    b8e6:	f384 8812 	msr	BASEPRI_MAX, r4
    b8ea:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b8ee:	250c      	movs	r5, #12
    b8f0:	fb05 0401 	mla	r4, r5, r1, r0
    b8f4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b8f6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    b8fa:	d001      	beq.n	b900 <stop+0x2a>
    b8fc:	42a2      	cmp	r2, r4
    b8fe:	d111      	bne.n	b924 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b900:	fb05 0001 	mla	r0, r5, r1, r0
    b904:	2201      	movs	r2, #1
    b906:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    b908:	2000      	movs	r0, #0
	__asm__ volatile(
    b90a:	f386 8811 	msr	BASEPRI, r6
    b90e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b912:	b930      	cbnz	r0, b922 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    b914:	685b      	ldr	r3, [r3, #4]
    b916:	220c      	movs	r2, #12
    b918:	fb02 3101 	mla	r1, r2, r1, r3
    b91c:	684b      	ldr	r3, [r1, #4]
    b91e:	4798      	blx	r3
	return 0;
    b920:	2000      	movs	r0, #0
}
    b922:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    b924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b928:	e7ef      	b.n	b90a <stop+0x34>

0000b92a <api_stop>:
	return stop(dev, subsys, CTX_API);
    b92a:	2280      	movs	r2, #128	; 0x80
    b92c:	f7ff bfd3 	b.w	b8d6 <stop>

0000b930 <async_start>:
{
    b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b932:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    b934:	6904      	ldr	r4, [r0, #16]
{
    b936:	4605      	mov	r5, r0
    b938:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    b93a:	f04f 0020 	mov.w	r0, #32
    b93e:	f3ef 8c11 	mrs	ip, BASEPRI
    b942:	f380 8812 	msr	BASEPRI_MAX, r0
    b946:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b94a:	260c      	movs	r6, #12
    b94c:	fb06 4601 	mla	r6, r6, r1, r4
    b950:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b952:	f000 0e07 	and.w	lr, r0, #7
    b956:	f1be 0f01 	cmp.w	lr, #1
    b95a:	d110      	bne.n	b97e <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b95c:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    b95e:	2600      	movs	r6, #0
	__asm__ volatile(
    b960:	f38c 8811 	msr	BASEPRI, ip
    b964:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b968:	b93e      	cbnz	r6, b97a <async_start+0x4a>
	subdata->cb = cb;
    b96a:	200c      	movs	r0, #12
    b96c:	4341      	muls	r1, r0
    b96e:	440c      	add	r4, r1
	subdata->user_data = user_data;
    b970:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    b974:	686b      	ldr	r3, [r5, #4]
    b976:	585b      	ldr	r3, [r3, r1]
    b978:	4798      	blx	r3
}
    b97a:	4630      	mov	r0, r6
    b97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    b97e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    b982:	4287      	cmp	r7, r0
    b984:	bf14      	ite	ne
    b986:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    b98a:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    b98e:	e7e7      	b.n	b960 <async_start+0x30>

0000b990 <api_start>:
{
    b990:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b992:	2480      	movs	r4, #128	; 0x80
    b994:	9400      	str	r4, [sp, #0]
    b996:	f7ff ffcb 	bl	b930 <async_start>
}
    b99a:	b002      	add	sp, #8
    b99c:	bd10      	pop	{r4, pc}

0000b99e <onoff_started_callback>:
	return &data->mgr[type];
    b99e:	6900      	ldr	r0, [r0, #16]
{
    b9a0:	b410      	push	{r4}
	return &data->mgr[type];
    b9a2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    b9a4:	241c      	movs	r4, #28
    b9a6:	fb03 0004 	mla	r0, r3, r4, r0
    b9aa:	2100      	movs	r1, #0
}
    b9ac:	bc10      	pop	{r4}
	notify(mgr, 0);
    b9ae:	4710      	bx	r2

0000b9b0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b9b0:	2000      	movs	r0, #0
    b9b2:	f7fb b9ef 	b.w	6d94 <nrfx_clock_stop>

0000b9b6 <blocking_start_callback>:
{
    b9b6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b9b8:	f7fc bdf8 	b.w	85ac <z_impl_k_sem_give>

0000b9bc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b9bc:	6843      	ldr	r3, [r0, #4]
    b9be:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    b9c0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    b9c4:	600b      	str	r3, [r1, #0]
}
    b9c6:	2000      	movs	r0, #0
    b9c8:	4770      	bx	lr

0000b9ca <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b9ca:	6843      	ldr	r3, [r0, #4]
    b9cc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    b9ce:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    b9d2:	4042      	eors	r2, r0
    b9d4:	400a      	ands	r2, r1
    b9d6:	4042      	eors	r2, r0
    p_reg->OUT = value;
    b9d8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    b9dc:	2000      	movs	r0, #0
    b9de:	4770      	bx	lr

0000b9e0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b9e0:	6843      	ldr	r3, [r0, #4]
    b9e2:	685b      	ldr	r3, [r3, #4]
}
    b9e4:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    b9e6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    b9ea:	4770      	bx	lr

0000b9ec <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b9ec:	6843      	ldr	r3, [r0, #4]
    b9ee:	685b      	ldr	r3, [r3, #4]
}
    b9f0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    b9f2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    b9f6:	4770      	bx	lr

0000b9f8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b9f8:	6843      	ldr	r3, [r0, #4]
    b9fa:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    b9fc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    ba00:	404b      	eors	r3, r1
    p_reg->OUT = value;
    ba02:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    ba06:	2000      	movs	r0, #0
    ba08:	4770      	bx	lr

0000ba0a <gpio_nrfx_manage_callback>:
	return port->data;
    ba0a:	6903      	ldr	r3, [r0, #16]
	return list->head;
    ba0c:	6858      	ldr	r0, [r3, #4]
{
    ba0e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    ba10:	b158      	cbz	r0, ba2a <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ba12:	2400      	movs	r4, #0
    ba14:	4281      	cmp	r1, r0
    ba16:	d112      	bne.n	ba3e <gpio_nrfx_manage_callback+0x34>
	return node->next;
    ba18:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    ba1a:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    ba1c:	b954      	cbnz	r4, ba34 <gpio_nrfx_manage_callback+0x2a>
    ba1e:	428d      	cmp	r5, r1
	list->head = node;
    ba20:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    ba22:	d100      	bne.n	ba26 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    ba24:	6098      	str	r0, [r3, #8]
	parent->next = child;
    ba26:	2000      	movs	r0, #0
    ba28:	6008      	str	r0, [r1, #0]
	if (set) {
    ba2a:	b96a      	cbnz	r2, ba48 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    ba2c:	2000      	movs	r0, #0
}
    ba2e:	bd30      	pop	{r4, r5, pc}
    ba30:	4628      	mov	r0, r5
    ba32:	e7ef      	b.n	ba14 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    ba34:	428d      	cmp	r5, r1
	parent->next = child;
    ba36:	6020      	str	r0, [r4, #0]
	list->tail = node;
    ba38:	bf08      	it	eq
    ba3a:	609c      	streq	r4, [r3, #8]
}
    ba3c:	e7f3      	b.n	ba26 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    ba3e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ba40:	4604      	mov	r4, r0
    ba42:	2d00      	cmp	r5, #0
    ba44:	d1f4      	bne.n	ba30 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    ba46:	b13a      	cbz	r2, ba58 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    ba48:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    ba4a:	685a      	ldr	r2, [r3, #4]
    ba4c:	600a      	str	r2, [r1, #0]
	list->head = node;
    ba4e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    ba50:	2800      	cmp	r0, #0
    ba52:	d1eb      	bne.n	ba2c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    ba54:	6099      	str	r1, [r3, #8]
}
    ba56:	e7ea      	b.n	ba2e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    ba58:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    ba5c:	e7e7      	b.n	ba2e <gpio_nrfx_manage_callback+0x24>

0000ba5e <pin_interrupt_configure>:
		return -ENOTSUP;
    ba5e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
}
    ba62:	bf14      	ite	ne
    ba64:	f06f 0085 	mvnne.w	r0, #133	; 0x85
    ba68:	2000      	moveq	r0, #0
    ba6a:	4770      	bx	lr

0000ba6c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    ba6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    ba6e:	ab0a      	add	r3, sp, #40	; 0x28
    ba70:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    ba72:	9302      	str	r3, [sp, #8]
    ba74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba76:	9301      	str	r3, [sp, #4]
    ba78:	2300      	movs	r3, #0
    ba7a:	9300      	str	r3, [sp, #0]
    ba7c:	4618      	mov	r0, r3
    ba7e:	f7f6 f87d 	bl	1b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    ba82:	b007      	add	sp, #28
    ba84:	f85d fb04 	ldr.w	pc, [sp], #4

0000ba88 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    ba88:	f7fc bdb6 	b.w	85f8 <z_impl_k_sem_take>

0000ba8c <i2c_write>:
{
    ba8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
    ba8e:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    ba92:	2202      	movs	r2, #2
    ba94:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    ba98:	6882      	ldr	r2, [r0, #8]
    ba9a:	a901      	add	r1, sp, #4
    ba9c:	6894      	ldr	r4, [r2, #8]
    ba9e:	2201      	movs	r2, #1
    baa0:	47a0      	blx	r4
}
    baa2:	b004      	add	sp, #16
    baa4:	bd10      	pop	{r4, pc}

0000baa6 <i2c_reg_write_word_be>:
{
    baa6:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
    baa8:	f88d 2004 	strb.w	r2, [sp, #4]
    baac:	0a1a      	lsrs	r2, r3, #8
    baae:	f88d 2005 	strb.w	r2, [sp, #5]
    bab2:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
    bab6:	2203      	movs	r2, #3
    bab8:	460b      	mov	r3, r1
    baba:	a901      	add	r1, sp, #4
    babc:	f7ff ffe6 	bl	ba8c <i2c_write>
}
    bac0:	b003      	add	sp, #12
    bac2:	f85d fb04 	ldr.w	pc, [sp], #4

0000bac6 <port_write>:
{
    bac6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    baca:	4605      	mov	r5, r0
    bacc:	4689      	mov	r9, r1
    bace:	4614      	mov	r4, r2
    bad0:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
    bad2:	f000 fcdb 	bl	c48c <k_is_in_isr>
    bad6:	bb08      	cbnz	r0, bb1c <port_write+0x56>
	const struct sx1509b_config *cfg = dev->config;
    bad8:	686f      	ldr	r7, [r5, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    bada:	692d      	ldr	r5, [r5, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
    badc:	f105 0620 	add.w	r6, r5, #32
    bae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bae8:	4630      	mov	r0, r6
    baea:	f7ff ffcd 	bl	ba88 <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
    baee:	8b28      	ldrh	r0, [r5, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    baf0:	8939      	ldrh	r1, [r7, #8]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
    baf2:	4044      	eors	r4, r0
    baf4:	ea04 0409 	and.w	r4, r4, r9
    baf8:	ea84 0408 	eor.w	r4, r4, r8
    bafc:	4044      	eors	r4, r0
    bafe:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    bb00:	6868      	ldr	r0, [r5, #4]
    bb02:	4623      	mov	r3, r4
    bb04:	2210      	movs	r2, #16
    bb06:	f7ff ffce 	bl	baa6 <i2c_reg_write_word_be>
	if (rc == 0) {
    bb0a:	4607      	mov	r7, r0
    bb0c:	b900      	cbnz	r0, bb10 <port_write+0x4a>
		*outp = out;
    bb0e:	832c      	strh	r4, [r5, #24]
	z_impl_k_sem_give(sem);
    bb10:	4630      	mov	r0, r6
    bb12:	f7fc fd4b 	bl	85ac <z_impl_k_sem_give>
}
    bb16:	4638      	mov	r0, r7
    bb18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
    bb1c:	f06f 070a 	mvn.w	r7, #10
    bb20:	e7f9      	b.n	bb16 <port_write+0x50>

0000bb22 <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
    bb22:	2200      	movs	r2, #0
{
    bb24:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
    bb26:	4611      	mov	r1, r2
    bb28:	f7ff bfcd 	b.w	bac6 <port_write>

0000bb2c <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
    bb2c:	2300      	movs	r3, #0
    bb2e:	461a      	mov	r2, r3
    bb30:	f7ff bfc9 	b.w	bac6 <port_write>

0000bb34 <port_set_bits>:
{
    bb34:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
    bb36:	2300      	movs	r3, #0
    bb38:	f7ff bfc5 	b.w	bac6 <port_write>

0000bb3c <port_set_masked>:
	return port_write(dev, mask, value, 0);
    bb3c:	2300      	movs	r3, #0
    bb3e:	f7ff bfc2 	b.w	bac6 <port_write>

0000bb42 <write_pin_state>:
{
    bb42:	b530      	push	{r4, r5, lr}
    bb44:	b087      	sub	sp, #28
    bb46:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
    bb48:	2100      	movs	r1, #0
    bb4a:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
    bb4e:	8811      	ldrh	r1, [r2, #0]
    bb50:	ba49      	rev16	r1, r1
    bb52:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
    bb56:	8851      	ldrh	r1, [r2, #2]
    bb58:	ba49      	rev16	r1, r1
    bb5a:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
    bb5e:	8891      	ldrh	r1, [r2, #4]
    bb60:	ba49      	rev16	r1, r1
    bb62:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
    bb66:	88d1      	ldrh	r1, [r2, #6]
    bb68:	ba49      	rev16	r1, r1
    bb6a:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
    bb6e:	8911      	ldrh	r1, [r2, #8]
    bb70:	ba49      	rev16	r1, r1
    bb72:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
    bb76:	8951      	ldrh	r1, [r2, #10]
    bb78:	ba49      	rev16	r1, r1
    bb7a:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
    bb7e:	8991      	ldrh	r1, [r2, #12]
    bb80:	ba49      	rev16	r1, r1
    bb82:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    bb86:	89d1      	ldrh	r1, [r2, #14]
    bb88:	8a12      	ldrh	r2, [r2, #16]
{
    bb8a:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    bb8c:	ba49      	rev16	r1, r1
    bb8e:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
    bb92:	ba51      	rev16	r1, r2
    bb94:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    bb98:	6860      	ldr	r0, [r4, #4]
    bb9a:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
    bb9c:	b163      	cbz	r3, bbb8 <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    bb9e:	4613      	mov	r3, r2
    bba0:	2210      	movs	r2, #16
    bba2:	f7ff ff80 	bl	baa6 <i2c_reg_write_word_be>
		if (rc == 0) {
    bba6:	b928      	cbnz	r0, bbb4 <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    bba8:	892b      	ldrh	r3, [r5, #8]
    bbaa:	6860      	ldr	r0, [r4, #4]
    bbac:	2211      	movs	r2, #17
    bbae:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    bbb0:	f7ff ff6c 	bl	ba8c <i2c_write>
}
    bbb4:	b007      	add	sp, #28
    bbb6:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    bbb8:	460b      	mov	r3, r1
    bbba:	2213      	movs	r2, #19
    bbbc:	a901      	add	r1, sp, #4
    bbbe:	e7f7      	b.n	bbb0 <write_pin_state+0x6e>

0000bbc0 <sx1509b_config>:
{
    bbc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
    bbc4:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    bbc8:	6904      	ldr	r4, [r0, #16]
{
    bbca:	460d      	mov	r5, r1
    bbcc:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
    bbce:	f000 fc5d 	bl	c48c <k_is_in_isr>
    bbd2:	4683      	mov	fp, r0
    bbd4:	2800      	cmp	r0, #0
    bbd6:	f040 808c 	bne.w	bcf2 <sx1509b_config+0x132>
	if ((flags & GPIO_DS_ALT) != 0) {
    bbda:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
    bbde:	f040 808b 	bne.w	bcf8 <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
    bbe2:	f104 0920 	add.w	r9, r4, #32
    bbe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bbea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bbee:	4648      	mov	r0, r9
    bbf0:	f7ff ff4a 	bl	ba88 <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
    bbf4:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
    bbf6:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
    bbf8:	40ae      	lsls	r6, r5
    bbfa:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    bbfc:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
    bc00:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    bc04:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
    bc06:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
    bc0a:	d44f      	bmi.n	bcac <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
    bc0c:	8a63      	ldrh	r3, [r4, #18]
    bc0e:	ea03 0208 	and.w	r2, r3, r8
    bc12:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
    bc14:	07ba      	lsls	r2, r7, #30
    bc16:	d45c      	bmi.n	bcd2 <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
    bc18:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
    bc1a:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
    bc1c:	bf4c      	ite	mi
    bc1e:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
    bc20:	ea03 0308 	andpl.w	r3, r3, r8
    bc24:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
    bc26:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
    bc28:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
    bc2a:	bf4c      	ite	mi
    bc2c:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
    bc2e:	ea03 0308 	andpl.w	r3, r3, r8
    bc32:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
    bc34:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
    bc36:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
    bc38:	bf4c      	ite	mi
    bc3a:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
    bc3e:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
    bc40:	05bd      	lsls	r5, r7, #22
    bc42:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
    bc44:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
    bc46:	d54e      	bpl.n	bce6 <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
    bc48:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    bc4c:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
    bc4e:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    bc50:	d544      	bpl.n	bcdc <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
    bc52:	8b23      	ldrh	r3, [r4, #24]
    bc54:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
    bc58:	8323      	strh	r3, [r4, #24]
			data_first = true;
    bc5a:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
    bc5e:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
    bc62:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
    bc64:	bf4c      	ite	mi
    bc66:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
    bc68:	ea08 0603 	andpl.w	r6, r8, r3
    bc6c:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
    bc70:	465b      	mov	r3, fp
    bc72:	f104 0208 	add.w	r2, r4, #8
    bc76:	4621      	mov	r1, r4
    bc78:	4650      	mov	r0, sl
    bc7a:	f7ff ff62 	bl	bb42 <write_pin_state>
	if (rc == 0) {
    bc7e:	4605      	mov	r5, r0
    bc80:	bb00      	cbnz	r0, bcc4 <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
    bc82:	2322      	movs	r3, #34	; 0x22
    bc84:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
    bc88:	7f23      	ldrb	r3, [r4, #28]
    bc8a:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
    bc8e:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
    bc92:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
    bc94:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
    bc96:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
    bc98:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
    bc9c:	eb0d 0102 	add.w	r1, sp, r2
    bca0:	f8ba 3008 	ldrh.w	r3, [sl, #8]
    bca4:	f7ff fef2 	bl	ba8c <i2c_write>
    bca8:	4605      	mov	r5, r0
    bcaa:	e00b      	b.n	bcc4 <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
    bcac:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    bcb0:	f8ba 1008 	ldrh.w	r1, [sl, #8]
    bcb4:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
    bcb6:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    bcb8:	2220      	movs	r2, #32
    bcba:	f7ff fef4 	bl	baa6 <i2c_reg_write_word_be>
		if (rc) {
    bcbe:	4605      	mov	r5, r0
    bcc0:	2800      	cmp	r0, #0
    bcc2:	d0a3      	beq.n	bc0c <sx1509b_config+0x4c>
    bcc4:	4648      	mov	r0, r9
    bcc6:	f7fc fc71 	bl	85ac <z_impl_k_sem_give>
}
    bcca:	4628      	mov	r0, r5
    bccc:	b003      	add	sp, #12
    bcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
    bcd2:	077d      	lsls	r5, r7, #29
    bcd4:	d50a      	bpl.n	bcec <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
    bcd6:	4333      	orrs	r3, r6
    bcd8:	8263      	strh	r3, [r4, #18]
    bcda:	e79d      	b.n	bc18 <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    bcdc:	0539      	lsls	r1, r7, #20
    bcde:	d5be      	bpl.n	bc5e <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
    bce0:	8b23      	ldrh	r3, [r4, #24]
    bce2:	4333      	orrs	r3, r6
    bce4:	e7b8      	b.n	bc58 <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
    bce6:	4333      	orrs	r3, r6
    bce8:	82e3      	strh	r3, [r4, #22]
    bcea:	e7b8      	b.n	bc5e <sx1509b_config+0x9e>
			rc = -ENOTSUP;
    bcec:	f06f 0585 	mvn.w	r5, #133	; 0x85
    bcf0:	e7e8      	b.n	bcc4 <sx1509b_config+0x104>
		return -EWOULDBLOCK;
    bcf2:	f06f 050a 	mvn.w	r5, #10
    bcf6:	e7e8      	b.n	bcca <sx1509b_config+0x10a>
		return -ENOTSUP;
    bcf8:	f06f 0585 	mvn.w	r5, #133	; 0x85
    bcfc:	e7e5      	b.n	bcca <sx1509b_config+0x10a>

0000bcfe <port_get>:
{
    bcfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd02:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
    bd04:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    bd08:	6907      	ldr	r7, [r0, #16]
{
    bd0a:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
    bd0c:	f000 fbbe 	bl	c48c <k_is_in_isr>
    bd10:	4604      	mov	r4, r0
    bd12:	bb78      	cbnz	r0, bd74 <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
    bd14:	f107 0620 	add.w	r6, r7, #32
    bd18:	4630      	mov	r0, r6
    bd1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bd1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bd22:	f7ff feb1 	bl	ba88 <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
    bd26:	f10d 0205 	add.w	r2, sp, #5
    bd2a:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    bd2c:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    bd2e:	6878      	ldr	r0, [r7, #4]
    bd30:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
    bd32:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
    bd34:	f10d 0206 	add.w	r2, sp, #6
    bd38:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    bd3c:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    bd3e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
    bd42:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
    bd44:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    bd46:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
    bd4a:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    bd4c:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    bd50:	6881      	ldr	r1, [r0, #8]
    bd52:	688c      	ldr	r4, [r1, #8]
    bd54:	a902      	add	r1, sp, #8
    bd56:	47a0      	blx	r4
	if (rc != 0) {
    bd58:	4604      	mov	r4, r0
    bd5a:	b920      	cbnz	r0, bd66 <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
    bd5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    bd60:	ba5b      	rev16	r3, r3
    bd62:	b29b      	uxth	r3, r3
    bd64:	602b      	str	r3, [r5, #0]
    bd66:	4630      	mov	r0, r6
    bd68:	f7fc fc20 	bl	85ac <z_impl_k_sem_give>
}
    bd6c:	4620      	mov	r0, r4
    bd6e:	b008      	add	sp, #32
    bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
    bd74:	f06f 040a 	mvn.w	r4, #10
    bd78:	e7f8      	b.n	bd6c <port_get+0x6e>

0000bd7a <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
    bd7a:	b410      	push	{r4}
    bd7c:	6884      	ldr	r4, [r0, #8]
    bd7e:	68a4      	ldr	r4, [r4, #8]
    bd80:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
    bd82:	bc10      	pop	{r4}
    bd84:	4760      	bx	ip

0000bd86 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    bd86:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    bd88:	ab0a      	add	r3, sp, #40	; 0x28
    bd8a:	9305      	str	r3, [sp, #20]
    bd8c:	9302      	str	r3, [sp, #8]
    bd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd90:	9301      	str	r3, [sp, #4]
    bd92:	2300      	movs	r3, #0
    bd94:	9300      	str	r3, [sp, #0]
    bd96:	2201      	movs	r2, #1
    bd98:	4618      	mov	r0, r3
    bd9a:	f7f5 feef 	bl	1b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    bd9e:	b007      	add	sp, #28
    bda0:	f85d fb04 	ldr.w	pc, [sp], #4

0000bda4 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    bda4:	b510      	push	{r4, lr}
    bda6:	2200      	movs	r2, #0
    bda8:	4604      	mov	r4, r0
    bdaa:	2101      	movs	r1, #1
    bdac:	2003      	movs	r0, #3
    bdae:	f7f8 faaf 	bl	4310 <z_arm_irq_priority_set>
    bdb2:	4620      	mov	r0, r4
    bdb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bdb8:	f7f9 bf42 	b.w	5c40 <init_twim>

0000bdbc <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    bdbc:	b510      	push	{r4, lr}
    bdbe:	2200      	movs	r2, #0
    bdc0:	4604      	mov	r4, r0
    bdc2:	2101      	movs	r1, #1
    bdc4:	2004      	movs	r0, #4
    bdc6:	f7f8 faa3 	bl	4310 <z_arm_irq_priority_set>
    bdca:	4620      	mov	r0, r4
    bdcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bdd0:	f7f9 bf36 	b.w	5c40 <init_twim>

0000bdd4 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
    bdd4:	4603      	mov	r3, r0
    bdd6:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    bdd8:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    bdda:	7919      	ldrb	r1, [r3, #4]
    bddc:	2301      	movs	r3, #1
    bdde:	fa03 f101 	lsl.w	r1, r3, r1
    bde2:	6903      	ldr	r3, [r0, #16]
    bde4:	681b      	ldr	r3, [r3, #0]
    bde6:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    bde8:	bf18      	it	ne
    bdea:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    bdee:	b112      	cbz	r2, bdf6 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    bdf0:	6883      	ldr	r3, [r0, #8]
    bdf2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    bdf4:	4718      	bx	r3
    bdf6:	6883      	ldr	r3, [r0, #8]
    bdf8:	691b      	ldr	r3, [r3, #16]
    bdfa:	e7fb      	b.n	bdf4 <gpio_pin_set_dt+0x20>

0000bdfc <disable_sync>:
{
    bdfc:	b530      	push	{r4, r5, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    bdfe:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
    be00:	6845      	ldr	r5, [r0, #4]
{
    be02:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
    be04:	a903      	add	r1, sp, #12
    be06:	4620      	mov	r0, r4
    be08:	f7fd fcd6 	bl	97b8 <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    be0c:	7d29      	ldrb	r1, [r5, #20]
    be0e:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
    be12:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    be14:	d114      	bne.n	be40 <disable_sync+0x44>
	} else if (rc == 1) {
    be16:	2801      	cmp	r0, #1
    be18:	d10c      	bne.n	be34 <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    be1a:	f105 000c 	add.w	r0, r5, #12
    be1e:	f7ff ffd9 	bl	bdd4 <gpio_pin_set_dt>
    be22:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    be24:	2200      	movs	r2, #0
    be26:	9903      	ldr	r1, [sp, #12]
    be28:	9200      	str	r2, [sp, #0]
    be2a:	4620      	mov	r0, r4
    be2c:	f7fd fccf 	bl	97ce <onoff_sync_finalize>
}
    be30:	b005      	add	sp, #20
    be32:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
    be34:	2800      	cmp	r0, #0
    be36:	bf14      	ite	ne
    be38:	4603      	movne	r3, r0
    be3a:	f06f 0315 	mvneq.w	r3, #21
    be3e:	e7f1      	b.n	be24 <disable_sync+0x28>
		rc = 0;
    be40:	2300      	movs	r3, #0
    be42:	e7ef      	b.n	be24 <disable_sync+0x28>

0000be44 <enable_sync>:
{
    be44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    be46:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
    be48:	6846      	ldr	r6, [r0, #4]
{
    be4a:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
    be4c:	4628      	mov	r0, r5
    be4e:	a903      	add	r1, sp, #12
    be50:	f7fd fcb2 	bl	97b8 <onoff_sync_lock>
	if ((rc == 0)
    be54:	4603      	mov	r3, r0
    be56:	b940      	cbnz	r0, be6a <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    be58:	7d32      	ldrb	r2, [r6, #20]
    be5a:	07d2      	lsls	r2, r2, #31
    be5c:	d405      	bmi.n	be6a <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    be5e:	2101      	movs	r1, #1
    be60:	f106 000c 	add.w	r0, r6, #12
    be64:	f7ff ffb6 	bl	bdd4 <gpio_pin_set_dt>
    be68:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    be6a:	2201      	movs	r2, #1
    be6c:	9200      	str	r2, [sp, #0]
    be6e:	9903      	ldr	r1, [sp, #12]
    be70:	4622      	mov	r2, r4
    be72:	4628      	mov	r0, r5
    be74:	f7fd fcab 	bl	97ce <onoff_sync_finalize>
}
    be78:	b004      	add	sp, #16
    be7a:	bd70      	pop	{r4, r5, r6, pc}

0000be7c <disable_onoff>:
	return onoff_release(&data->mgr);
    be7c:	6900      	ldr	r0, [r0, #16]
    be7e:	3004      	adds	r0, #4
    be80:	f7fd bc75 	b.w	976e <onoff_release>

0000be84 <enable_onoff>:
	return onoff_request(&data->mgr, cli);
    be84:	6900      	ldr	r0, [r0, #16]
    be86:	3004      	adds	r0, #4
    be88:	f7fd bc28 	b.w	96dc <onoff_request>

0000be8c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    be8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    be8e:	ab0a      	add	r3, sp, #40	; 0x28
    be90:	9305      	str	r3, [sp, #20]
    be92:	9302      	str	r3, [sp, #8]
    be94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be96:	9301      	str	r3, [sp, #4]
    be98:	2300      	movs	r3, #0
    be9a:	9300      	str	r3, [sp, #0]
    be9c:	4618      	mov	r0, r3
    be9e:	f7f5 fe6d 	bl	1b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    bea2:	b007      	add	sp, #28
    bea4:	f85d fb04 	ldr.w	pc, [sp], #4

0000bea8 <onoff_worker>:
{
    bea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
    beac:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
    beb0:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
    beb4:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
    beb6:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
    beb8:	2901      	cmp	r1, #1
{
    beba:	4604      	mov	r4, r0
	struct driver_data_onoff *data
    bebc:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
    bec0:	d10f      	bne.n	bee2 <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    bec2:	f105 000c 	add.w	r0, r5, #12
    bec6:	f7ff ff85 	bl	bdd4 <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
    beca:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
    becc:	4603      	mov	r3, r0
	data->notify = NULL;
    bece:	2100      	movs	r1, #0
    bed0:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
    bed2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
    bed6:	4630      	mov	r0, r6
    bed8:	4639      	mov	r1, r7
}
    beda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    bede:	f7fa b907 	b.w	60f0 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
    bee2:	2902      	cmp	r1, #2
    bee4:	d107      	bne.n	bef6 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    bee6:	2100      	movs	r1, #0
    bee8:	f105 000c 	add.w	r0, r5, #12
    beec:	f7ff ff72 	bl	bdd4 <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
    bef0:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
    bef2:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
    bef4:	e7eb      	b.n	bece <onoff_worker+0x26>
	int rc = 0;
    bef6:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
    bef8:	461a      	mov	r2, r3
    befa:	e7e8      	b.n	bece <onoff_worker+0x26>

0000befc <stop>:
{
    befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    bf00:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    bf04:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    bf06:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
    bf08:	6858      	ldr	r0, [r3, #4]
{
    bf0a:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    bf0c:	7d01      	ldrb	r1, [r0, #20]
    bf0e:	f011 0101 	ands.w	r1, r1, #1
    bf12:	d113      	bne.n	bf3c <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
    bf14:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
    bf16:	300c      	adds	r0, #12
    bf18:	f7ff ff5c 	bl	bdd4 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    bf1c:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
    bf20:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    bf22:	d10d      	bne.n	bf40 <stop+0x44>
		data->task = WORK_TASK_DISABLE;
    bf24:	2302      	movs	r3, #2
    bf26:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    bf2a:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    bf2c:	f104 001c 	add.w	r0, r4, #28
    bf30:	2200      	movs	r2, #0
}
    bf32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    bf36:	2300      	movs	r3, #0
    bf38:	f7fc bcce 	b.w	88d8 <k_work_schedule>
	int rc = 0;
    bf3c:	2300      	movs	r3, #0
		delay_us = 0;
    bf3e:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
    bf40:	463a      	mov	r2, r7
    bf42:	4629      	mov	r1, r5
    bf44:	4630      	mov	r0, r6
}
    bf46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    bf4a:	f7fa b8d1 	b.w	60f0 <finalize_transition>

0000bf4e <start>:
{
    bf4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    bf52:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    bf56:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    bf58:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
    bf5a:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    bf5c:	7d03      	ldrb	r3, [r0, #20]
    bf5e:	07db      	lsls	r3, r3, #31
{
    bf60:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    bf62:	d414      	bmi.n	bf8e <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
    bf64:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
    bf66:	2101      	movs	r1, #1
    bf68:	300c      	adds	r0, #12
    bf6a:	f7ff ff33 	bl	bdd4 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    bf6e:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
    bf72:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    bf74:	d10d      	bne.n	bf92 <start+0x44>
		data->task = WORK_TASK_ENABLE;
    bf76:	2301      	movs	r3, #1
    bf78:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    bf7c:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    bf7e:	f104 001c 	add.w	r0, r4, #28
    bf82:	2200      	movs	r2, #0
}
    bf84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    bf88:	2300      	movs	r3, #0
    bf8a:	f7fc bca5 	b.w	88d8 <k_work_schedule>
	int rc = 0;
    bf8e:	2300      	movs	r3, #0
		delay_us = 0;
    bf90:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
    bf92:	4632      	mov	r2, r6
    bf94:	4629      	mov	r1, r5
    bf96:	4638      	mov	r0, r7
}
    bf98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    bf9c:	f7fa b8a8 	b.w	60f0 <finalize_transition>

0000bfa0 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    bfa0:	6902      	ldr	r2, [r0, #16]
{
    bfa2:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    bfa4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    bfa8:	e883 0003 	stmia.w	r3, {r0, r1}
}
    bfac:	2000      	movs	r0, #0
    bfae:	4770      	bx	lr

0000bfb0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    bfb0:	6843      	ldr	r3, [r0, #4]
    bfb2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    bfb4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    bfb8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    bfbc:	4770      	bx	lr

0000bfbe <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    bfbe:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    bfc0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    bfc2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bfc4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    bfc8:	b148      	cbz	r0, bfde <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    bfca:	7d52      	ldrb	r2, [r2, #21]
    bfcc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bfce:	2000      	movs	r0, #0
    bfd0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    bfd4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bfd8:	2201      	movs	r2, #1
    bfda:	601a      	str	r2, [r3, #0]
	return 0;
    bfdc:	4770      	bx	lr
		return -1;
    bfde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    bfe2:	4770      	bx	lr

0000bfe4 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    bfe4:	2a00      	cmp	r2, #0
{
    bfe6:	b510      	push	{r4, lr}
    bfe8:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    bfea:	dd0f      	ble.n	c00c <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    bfec:	6843      	ldr	r3, [r0, #4]
    bfee:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bff0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    bff4:	b148      	cbz	r0, c00a <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
    bff6:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bff8:	2000      	movs	r0, #0
    bffa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    bffe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    c002:	7d52      	ldrb	r2, [r2, #21]
    c004:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c006:	2001      	movs	r0, #1
    c008:	6018      	str	r0, [r3, #0]
}
    c00a:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    c00c:	2000      	movs	r0, #0
    c00e:	e7fc      	b.n	c00a <uarte_nrfx_fifo_read+0x26>

0000c010 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    c010:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    c012:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    c014:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    c016:	f04f 0020 	mov.w	r0, #32
    c01a:	f3ef 8311 	mrs	r3, BASEPRI
    c01e:	f380 8812 	msr	BASEPRI_MAX, r0
    c022:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    c026:	68c9      	ldr	r1, [r1, #12]
    c028:	2000      	movs	r0, #0
    c02a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    c02c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    c030:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    c034:	f383 8811 	msr	BASEPRI, r3
    c038:	f3bf 8f6f 	isb	sy
}
    c03c:	4770      	bx	lr

0000c03e <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    c03e:	6903      	ldr	r3, [r0, #16]
    c040:	68db      	ldr	r3, [r3, #12]
    c042:	2201      	movs	r2, #1
    c044:	739a      	strb	r2, [r3, #14]
}
    c046:	4770      	bx	lr

0000c048 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    c048:	6903      	ldr	r3, [r0, #16]
    c04a:	68db      	ldr	r3, [r3, #12]
    c04c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    c04e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    c052:	b962      	cbnz	r2, c06e <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    c054:	6842      	ldr	r2, [r0, #4]
    c056:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c058:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    c05c:	b140      	cbz	r0, c070 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    c05e:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    c062:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    c066:	d003      	beq.n	c070 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    c068:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    c06a:	2001      	movs	r0, #1
    c06c:	4770      	bx	lr
    c06e:	2000      	movs	r0, #0
}
    c070:	4770      	bx	lr

0000c072 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    c072:	6843      	ldr	r3, [r0, #4]
    c074:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c076:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    c07a:	3800      	subs	r0, #0
    c07c:	bf18      	it	ne
    c07e:	2001      	movne	r0, #1
    c080:	4770      	bx	lr

0000c082 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    c082:	6843      	ldr	r3, [r0, #4]
    c084:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    c086:	2210      	movs	r2, #16
    c088:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    c08c:	4770      	bx	lr

0000c08e <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    c08e:	6843      	ldr	r3, [r0, #4]
    c090:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    c092:	2210      	movs	r2, #16
    c094:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c098:	4770      	bx	lr

0000c09a <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    c09a:	6843      	ldr	r3, [r0, #4]
    c09c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    c09e:	f44f 7200 	mov.w	r2, #512	; 0x200
    c0a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    c0a6:	4770      	bx	lr

0000c0a8 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    c0a8:	6843      	ldr	r3, [r0, #4]
    c0aa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    c0ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    c0b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c0b4:	4770      	bx	lr

0000c0b6 <uarte_nrfx_irq_update>:
}
    c0b6:	2001      	movs	r0, #1
    c0b8:	4770      	bx	lr

0000c0ba <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    c0ba:	6903      	ldr	r3, [r0, #16]
    c0bc:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    c0be:	e9c3 1200 	strd	r1, r2, [r3]
}
    c0c2:	4770      	bx	lr

0000c0c4 <uarte_nrfx_irq_is_pending>:
{
    c0c4:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    c0c6:	6843      	ldr	r3, [r0, #4]
    c0c8:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    c0ca:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    c0ce:	025b      	lsls	r3, r3, #9
{
    c0d0:	4604      	mov	r4, r0
		||
    c0d2:	d405      	bmi.n	c0e0 <uarte_nrfx_irq_is_pending+0x1c>
    c0d4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c0d8:	f010 0010 	ands.w	r0, r0, #16
    c0dc:	d106      	bne.n	c0ec <uarte_nrfx_irq_is_pending+0x28>
}
    c0de:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    c0e0:	f7ff ffb2 	bl	c048 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    c0e4:	2800      	cmp	r0, #0
    c0e6:	d0f5      	beq.n	c0d4 <uarte_nrfx_irq_is_pending+0x10>
		||
    c0e8:	2001      	movs	r0, #1
    c0ea:	e7f8      	b.n	c0de <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    c0ec:	4620      	mov	r0, r4
    c0ee:	f7ff ffc0 	bl	c072 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    c0f2:	3800      	subs	r0, #0
    c0f4:	bf18      	it	ne
    c0f6:	2001      	movne	r0, #1
    c0f8:	e7f1      	b.n	c0de <uarte_nrfx_irq_is_pending+0x1a>

0000c0fa <tx_start.isra.0>:
	return config->uarte_regs;
    c0fa:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    c0fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    c100:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c104:	2200      	movs	r2, #0
    c106:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    c10a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    c10e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    c112:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c116:	6842      	ldr	r2, [r0, #4]
    c118:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    c11a:	bf41      	itttt	mi
    c11c:	2208      	movmi	r2, #8
    c11e:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    c122:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    c126:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c12a:	2201      	movs	r2, #1
    c12c:	609a      	str	r2, [r3, #8]
}
    c12e:	4770      	bx	lr

0000c130 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    c130:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    c132:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c134:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c138:	b940      	cbnz	r0, c14c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    c13a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    c13c:	079b      	lsls	r3, r3, #30
    c13e:	d406      	bmi.n	c14e <is_tx_ready.isra.0+0x1e>
    c140:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    c144:	3800      	subs	r0, #0
    c146:	bf18      	it	ne
    c148:	2001      	movne	r0, #1
    c14a:	4770      	bx	lr
    c14c:	2001      	movs	r0, #1
}
    c14e:	4770      	bx	lr

0000c150 <uarte_nrfx_fifo_fill>:
{
    c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    c152:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    c154:	68f3      	ldr	r3, [r6, #12]
    c156:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c158:	f3bf 8f5b 	dmb	ish
    c15c:	4294      	cmp	r4, r2
    c15e:	bfa8      	it	ge
    c160:	4614      	movge	r4, r2
{
    c162:	4605      	mov	r5, r0
    c164:	3310      	adds	r3, #16
    c166:	2201      	movs	r2, #1
    c168:	e853 0f00 	ldrex	r0, [r3]
    c16c:	2800      	cmp	r0, #0
    c16e:	d103      	bne.n	c178 <uarte_nrfx_fifo_fill+0x28>
    c170:	e843 2700 	strex	r7, r2, [r3]
    c174:	2f00      	cmp	r7, #0
    c176:	d1f7      	bne.n	c168 <uarte_nrfx_fifo_fill+0x18>
    c178:	f3bf 8f5b 	dmb	ish
    c17c:	bf0c      	ite	eq
    c17e:	4613      	moveq	r3, r2
    c180:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    c182:	d01d      	beq.n	c1c0 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    c184:	461c      	mov	r4, r3
}
    c186:	4620      	mov	r0, r4
    c188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    c18a:	68f2      	ldr	r2, [r6, #12]
    c18c:	5cc8      	ldrb	r0, [r1, r3]
    c18e:	6892      	ldr	r2, [r2, #8]
    c190:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    c192:	3301      	adds	r3, #1
    c194:	42a3      	cmp	r3, r4
    c196:	dbf8      	blt.n	c18a <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    c198:	f04f 0320 	mov.w	r3, #32
    c19c:	f3ef 8711 	mrs	r7, BASEPRI
    c1a0:	f383 8812 	msr	BASEPRI_MAX, r3
    c1a4:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    c1a8:	6868      	ldr	r0, [r5, #4]
    c1aa:	f7ff ffc1 	bl	c130 <is_tx_ready.isra.0>
    c1ae:	68f3      	ldr	r3, [r6, #12]
    c1b0:	b940      	cbnz	r0, c1c4 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    c1b2:	6118      	str	r0, [r3, #16]
		len = 0;
    c1b4:	4604      	mov	r4, r0
	__asm__ volatile(
    c1b6:	f387 8811 	msr	BASEPRI, r7
    c1ba:	f3bf 8f6f 	isb	sy
	return len;
    c1be:	e7e2      	b.n	c186 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    c1c0:	2300      	movs	r3, #0
    c1c2:	e7e7      	b.n	c194 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    c1c4:	6899      	ldr	r1, [r3, #8]
    c1c6:	6868      	ldr	r0, [r5, #4]
    c1c8:	4622      	mov	r2, r4
    c1ca:	f7ff ff96 	bl	c0fa <tx_start.isra.0>
    c1ce:	e7f2      	b.n	c1b6 <uarte_nrfx_fifo_fill+0x66>

0000c1d0 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    c1d0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    c1d2:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    c1d4:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c1d8:	05c9      	lsls	r1, r1, #23
{
    c1da:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    c1dc:	d518      	bpl.n	c210 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c1de:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    c1e2:	b1a9      	cbz	r1, c210 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    c1e4:	f04f 0420 	mov.w	r4, #32
    c1e8:	f3ef 8111 	mrs	r1, BASEPRI
    c1ec:	f384 8812 	msr	BASEPRI_MAX, r4
    c1f0:	f3bf 8f6f 	isb	sy
    c1f4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    c1f8:	b134      	cbz	r4, c208 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c1fa:	2400      	movs	r4, #0
    c1fc:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    c200:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c204:	2401      	movs	r4, #1
    c206:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    c208:	f381 8811 	msr	BASEPRI, r1
    c20c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    c210:	6852      	ldr	r2, [r2, #4]
    c212:	06d2      	lsls	r2, r2, #27
    c214:	d51a      	bpl.n	c24c <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    c216:	f04f 0220 	mov.w	r2, #32
    c21a:	f3ef 8111 	mrs	r1, BASEPRI
    c21e:	f382 8812 	msr	BASEPRI_MAX, r2
    c222:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c226:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c22a:	b112      	cbz	r2, c232 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    c22c:	2200      	movs	r2, #0
    c22e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    c232:	6902      	ldr	r2, [r0, #16]
    c234:	68d2      	ldr	r2, [r2, #12]
    c236:	b10a      	cbz	r2, c23c <uarte_nrfx_isr_int+0x6c>
    c238:	6912      	ldr	r2, [r2, #16]
    c23a:	b91a      	cbnz	r2, c244 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    c23c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    c240:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    c244:	f381 8811 	msr	BASEPRI, r1
    c248:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    c24c:	6902      	ldr	r2, [r0, #16]
    c24e:	68d2      	ldr	r2, [r2, #12]
    c250:	b15a      	cbz	r2, c26a <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c252:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    c256:	b151      	cbz	r1, c26e <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
    c258:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    c25a:	2100      	movs	r1, #0
    c25c:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    c25e:	b134      	cbz	r4, c26e <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
    c260:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c264:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    c268:	7391      	strb	r1, [r2, #14]
}
    c26a:	bc10      	pop	{r4}
    c26c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c26e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    c272:	b121      	cbz	r1, c27e <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c274:	2100      	movs	r1, #0
    c276:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    c27a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    c27e:	6813      	ldr	r3, [r2, #0]
    c280:	2b00      	cmp	r3, #0
    c282:	d0f2      	beq.n	c26a <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    c284:	6851      	ldr	r1, [r2, #4]
}
    c286:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    c288:	4718      	bx	r3

0000c28a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    c28a:	4770      	bx	lr

0000c28c <sys_clock_cycle_get_32>:
{
    c28c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    c28e:	f7fa f9c9 	bl	6624 <z_nrf_rtc_timer_read>
}
    c292:	bd08      	pop	{r3, pc}

0000c294 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    c294:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c298:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    c29c:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    c29e:	bf04      	itt	eq
    c2a0:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    c2a4:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    c2a8:	1f83      	subs	r3, r0, #6
    c2aa:	4258      	negs	r0, r3
    c2ac:	4158      	adcs	r0, r3
    c2ae:	4770      	bx	lr

0000c2b0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    c2b0:	4700      	bx	r0

0000c2b2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    c2b2:	f000 bace 	b.w	c852 <z_impl_k_busy_wait>

0000c2b6 <nrfx_clock_enable>:
{
    c2b6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    c2b8:	2000      	movs	r0, #0
    c2ba:	f7f8 f81b 	bl	42f4 <arch_irq_is_enabled>
    c2be:	b918      	cbnz	r0, c2c8 <nrfx_clock_enable+0x12>
}
    c2c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    c2c4:	f7f7 bff2 	b.w	42ac <arch_irq_enable>
    c2c8:	bd08      	pop	{r3, pc}

0000c2ca <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    c2ca:	f000 001f 	and.w	r0, r0, #31
    c2ce:	0080      	lsls	r0, r0, #2
    c2d0:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c2d4:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    c2d8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c2dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    c2e0:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    c2e4:	4770      	bx	lr

0000c2e6 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    c2e6:	7b0a      	ldrb	r2, [r1, #12]
{
    c2e8:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    c2ea:	2a03      	cmp	r2, #3
    c2ec:	d829      	bhi.n	c342 <xfer_completeness_check+0x5c>
    c2ee:	e8df f002 	tbb	[pc, r2]
    c2f2:	2521      	.short	0x2521
    c2f4:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    c2f6:	688a      	ldr	r2, [r1, #8]
    c2f8:	0350      	lsls	r0, r2, #13
    c2fa:	d504      	bpl.n	c306 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    c2fc:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    c300:	6908      	ldr	r0, [r1, #16]
    c302:	4290      	cmp	r0, r2
    c304:	d107      	bne.n	c316 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    c306:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    c308:	0352      	lsls	r2, r2, #13
    c30a:	d41a      	bmi.n	c342 <xfer_completeness_check+0x5c>
    c30c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    c310:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    c312:	4291      	cmp	r1, r2
    c314:	d015      	beq.n	c342 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    c316:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    c318:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    c31a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    c31e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    c322:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    c324:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    c328:	6908      	ldr	r0, [r1, #16]
    c32a:	4290      	cmp	r0, r2
    c32c:	d1f3      	bne.n	c316 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    c32e:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    c332:	e7ed      	b.n	c310 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    c334:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    c338:	6909      	ldr	r1, [r1, #16]
    c33a:	e7ea      	b.n	c312 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    c33c:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    c340:	e7fa      	b.n	c338 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    c342:	2001      	movs	r0, #1
}
    c344:	4770      	bx	lr

0000c346 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    c346:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    c348:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    c34a:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    c34c:	bf9c      	itt	ls
    c34e:	6880      	ldrls	r0, [r0, #8]
    c350:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    c352:	3b01      	subs	r3, #1
    c354:	1a98      	subs	r0, r3, r2
}
    c356:	4770      	bx	lr

0000c358 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    c35c:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    c360:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    c362:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    c366:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    c368:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    c36a:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    c36c:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    c36e:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    c370:	d906      	bls.n	c380 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    c372:	f7ff fa52 	bl	b81a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    c376:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    c37a:	60ec      	str	r4, [r5, #12]
}
    c37c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    c380:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    c382:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    c386:	f7ff fa48 	bl	b81a <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    c38a:	6868      	ldr	r0, [r5, #4]
    c38c:	4622      	mov	r2, r4
    c38e:	eb07 0108 	add.w	r1, r7, r8
    c392:	e7ee      	b.n	c372 <_WriteNoCheck+0x1a>

0000c394 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    c394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    c398:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    c39a:	4606      	mov	r6, r0
    c39c:	4689      	mov	r9, r1
    c39e:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    c3a0:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    c3a4:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    c3a6:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    c3a8:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    c3aa:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    c3ac:	bf28      	it	cs
    c3ae:	18e4      	addcs	r4, r4, r3
    c3b0:	3c01      	subs	r4, #1
    c3b2:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    c3b4:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    c3b6:	42bc      	cmp	r4, r7
    c3b8:	bf28      	it	cs
    c3ba:	463c      	movcs	r4, r7
    c3bc:	4294      	cmp	r4, r2
    c3be:	bf28      	it	cs
    c3c0:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    c3c2:	4649      	mov	r1, r9
    c3c4:	4622      	mov	r2, r4
    c3c6:	4428      	add	r0, r5
    c3c8:	f7ff fa27 	bl	b81a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    c3cc:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    c3ce:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
    c3d0:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    c3d2:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    c3d4:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
    c3d6:	42ab      	cmp	r3, r5
    c3d8:	bf08      	it	eq
    c3da:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    c3dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    c3e0:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    c3e2:	2f00      	cmp	r7, #0
    c3e4:	d1de      	bne.n	c3a4 <_WriteBlocking+0x10>
}
    c3e6:	4640      	mov	r0, r8
    c3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c3ec <SEGGER_RTT_Read>:
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
    c3ec:	b510      	push	{r4, lr}
    c3ee:	460b      	mov	r3, r1
  SEGGER_RTT_LOCK();
    c3f0:	f3ef 8411 	mrs	r4, BASEPRI
    c3f4:	f04f 0120 	mov.w	r1, #32
    c3f8:	f381 8811 	msr	BASEPRI, r1
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
    c3fc:	4619      	mov	r1, r3
    c3fe:	f7fb fbdd 	bl	7bbc <SEGGER_RTT_ReadNoLock>
  SEGGER_RTT_UNLOCK();
    c402:	f384 8811 	msr	BASEPRI, r4
}
    c406:	bd10      	pop	{r4, pc}

0000c408 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    c408:	f7fb bba2 	b.w	7b50 <_DoInit>

0000c40c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    c40c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    c40e:	f7ff fffb 	bl	c408 <SEGGER_RTT_Init>

	return 0;
}
    c412:	2000      	movs	r0, #0
    c414:	bd08      	pop	{r3, pc}

0000c416 <z_device_state_init>:
}
    c416:	4770      	bx	lr

0000c418 <z_device_is_ready>:
	if (dev == NULL) {
    c418:	b138      	cbz	r0, c42a <z_device_is_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
    c41a:	68c3      	ldr	r3, [r0, #12]
    c41c:	8818      	ldrh	r0, [r3, #0]
    c41e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c422:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    c426:	4258      	negs	r0, r3
    c428:	4158      	adcs	r0, r3
}
    c42a:	4770      	bx	lr

0000c42c <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
    c42c:	6940      	ldr	r0, [r0, #20]
{
    c42e:	b470      	push	{r4, r5, r6}
    c430:	4613      	mov	r3, r2
    c432:	460d      	mov	r5, r1
	if (rv != NULL) {
    c434:	b960      	cbnz	r0, c450 <device_required_foreach+0x24>
	size_t handle_count = 0;
    c436:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
    c438:	462a      	mov	r2, r5
}
    c43a:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
    c43c:	f7fb bc60 	b.w	7d00 <device_visitor>
			++i;
    c440:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    c442:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
    c446:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    c448:	b2a4      	uxth	r4, r4
    c44a:	4294      	cmp	r4, r2
    c44c:	d9f8      	bls.n	c440 <device_required_foreach+0x14>
    c44e:	e7f3      	b.n	c438 <device_required_foreach+0xc>
		size_t i = 0;
    c450:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
    c452:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
    c456:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    c45a:	e7f2      	b.n	c442 <device_required_foreach+0x16>

0000c45c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    c45c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    c45e:	ab0a      	add	r3, sp, #40	; 0x28
    c460:	9305      	str	r3, [sp, #20]
    c462:	9302      	str	r3, [sp, #8]
    c464:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c466:	9301      	str	r3, [sp, #4]
    c468:	2300      	movs	r3, #0
    c46a:	9300      	str	r3, [sp, #0]
    c46c:	2201      	movs	r2, #1
    c46e:	4618      	mov	r0, r3
    c470:	f7f5 fb84 	bl	1b7c <z_impl_z_log_msg2_runtime_vcreate>
}
    c474:	b007      	add	sp, #28
    c476:	f85d fb04 	ldr.w	pc, [sp], #4

0000c47a <arch_system_halt>:
	__asm__ volatile(
    c47a:	f04f 0220 	mov.w	r2, #32
    c47e:	f3ef 8311 	mrs	r3, BASEPRI
    c482:	f382 8812 	msr	BASEPRI_MAX, r2
    c486:	f3bf 8f6f 	isb	sy
	for (;;) {
    c48a:	e7fe      	b.n	c48a <arch_system_halt+0x10>

0000c48c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c48c:	f3ef 8005 	mrs	r0, IPSR
}
    c490:	3800      	subs	r0, #0
    c492:	bf18      	it	ne
    c494:	2001      	movne	r0, #1
    c496:	4770      	bx	lr

0000c498 <k_thread_name_get>:
}
    c498:	3078      	adds	r0, #120	; 0x78
    c49a:	4770      	bx	lr

0000c49c <z_impl_k_thread_start>:
	z_sched_start(thread);
    c49c:	f7fc bb5e 	b.w	8b5c <z_sched_start>

0000c4a0 <z_impl_k_thread_stack_space_get>:
#error "Unsupported configuration for stack analysis"
#endif

int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
    c4a0:	b510      	push	{r4, lr}
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
    c4a2:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
	size_t unused = 0;
    c4a6:	2300      	movs	r3, #0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
    c4a8:	4293      	cmp	r3, r2
    c4aa:	d102      	bne.n	c4b2 <z_impl_k_thread_stack_space_get+0x12>
		} else {
			break;
		}
	}

	*unused_ptr = unused;
    c4ac:	600b      	str	r3, [r1, #0]

	return 0;
}
    c4ae:	2000      	movs	r0, #0
    c4b0:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
    c4b2:	5ce0      	ldrb	r0, [r4, r3]
    c4b4:	28aa      	cmp	r0, #170	; 0xaa
    c4b6:	d1f9      	bne.n	c4ac <z_impl_k_thread_stack_space_get+0xc>
			unused++;
    c4b8:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
    c4ba:	e7f5      	b.n	c4a8 <z_impl_k_thread_stack_space_get+0x8>

0000c4bc <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
    c4bc:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
    c4c0:	4770      	bx	lr

0000c4c2 <z_pm_save_idle_exit>:
{
    c4c2:	b508      	push	{r3, lr}
	pm_system_resume();
    c4c4:	f7f7 fd4a 	bl	3f5c <pm_system_resume>
}
    c4c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    c4cc:	f7ff bedd 	b.w	c28a <sys_clock_idle_exit>

0000c4d0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    c4d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    c4d4:	428b      	cmp	r3, r1
    c4d6:	d001      	beq.n	c4dc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    c4d8:	f7fc bbb0 	b.w	8c3c <z_set_prio>
}
    c4dc:	2000      	movs	r0, #0
    c4de:	4770      	bx	lr

0000c4e0 <z_impl_k_mutex_init>:
{
    c4e0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    c4e2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    c4e4:	e9c3 0002 	strd	r0, r0, [r3, #8]
    c4e8:	e9c3 3300 	strd	r3, r3, [r3]
}
    c4ec:	4770      	bx	lr

0000c4ee <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    c4ee:	b15a      	cbz	r2, c508 <z_impl_k_sem_init+0x1a>
    c4f0:	428a      	cmp	r2, r1
    c4f2:	d309      	bcc.n	c508 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    c4f4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    c4f8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    c4fc:	e9c0 0000 	strd	r0, r0, [r0]
    c500:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    c504:	2000      	movs	r0, #0
    c506:	4770      	bx	lr
		return -EINVAL;
    c508:	f06f 0015 	mvn.w	r0, #21
}
    c50c:	4770      	bx	lr

0000c50e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    c50e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    c510:	2301      	movs	r3, #1
    c512:	408b      	lsls	r3, r1
    c514:	ea22 0303 	bic.w	r3, r2, r3
    c518:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    c51a:	fa22 f001 	lsr.w	r0, r2, r1
}
    c51e:	f000 0001 	and.w	r0, r0, #1
    c522:	4770      	bx	lr

0000c524 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    c524:	b120      	cbz	r0, c530 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    c526:	2200      	movs	r2, #0
    c528:	4611      	mov	r1, r2
    c52a:	30c0      	adds	r0, #192	; 0xc0
    c52c:	f000 b92d 	b.w	c78a <z_sched_wake>
}
    c530:	4770      	bx	lr

0000c532 <work_timeout>:
{
    c532:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c534:	4604      	mov	r4, r0
    c536:	f04f 0320 	mov.w	r3, #32
    c53a:	f3ef 8511 	mrs	r5, BASEPRI
    c53e:	f383 8812 	msr	BASEPRI_MAX, r3
    c542:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    c546:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    c548:	f1a0 0610 	sub.w	r6, r0, #16
    c54c:	2103      	movs	r1, #3
    c54e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    c550:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    c552:	f7ff ffdc 	bl	c50e <flag_test_and_clear>
    c556:	b128      	cbz	r0, c564 <work_timeout+0x32>
		queue = dw->queue;
    c558:	69a3      	ldr	r3, [r4, #24]
    c55a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    c55c:	a901      	add	r1, sp, #4
    c55e:	4630      	mov	r0, r6
    c560:	f7fc f908 	bl	8774 <submit_to_queue_locked>
	__asm__ volatile(
    c564:	f385 8811 	msr	BASEPRI, r5
    c568:	f3bf 8f6f 	isb	sy
}
    c56c:	b002      	add	sp, #8
    c56e:	bd70      	pop	{r4, r5, r6, pc}

0000c570 <k_work_submit_to_queue>:
{
    c570:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c572:	9001      	str	r0, [sp, #4]
    c574:	4608      	mov	r0, r1
	__asm__ volatile(
    c576:	f04f 0320 	mov.w	r3, #32
    c57a:	f3ef 8511 	mrs	r5, BASEPRI
    c57e:	f383 8812 	msr	BASEPRI_MAX, r3
    c582:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    c586:	a901      	add	r1, sp, #4
    c588:	f7fc f8f4 	bl	8774 <submit_to_queue_locked>
    c58c:	4604      	mov	r4, r0
	__asm__ volatile(
    c58e:	f385 8811 	msr	BASEPRI, r5
    c592:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    c596:	2800      	cmp	r0, #0
    c598:	dd04      	ble.n	c5a4 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    c59a:	f7fc fc99 	bl	8ed0 <z_impl_k_is_preempt_thread>
    c59e:	b108      	cbz	r0, c5a4 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    c5a0:	f7fc fbee 	bl	8d80 <z_impl_k_yield>
}
    c5a4:	4620      	mov	r0, r4
    c5a6:	b003      	add	sp, #12
    c5a8:	bd30      	pop	{r4, r5, pc}

0000c5aa <k_work_init_delayable>:
{
    c5aa:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    c5ac:	2230      	movs	r2, #48	; 0x30
{
    c5ae:	4604      	mov	r4, r0
    c5b0:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    c5b2:	2100      	movs	r1, #0
    c5b4:	f7ff f93c 	bl	b830 <memset>
    c5b8:	f44f 7380 	mov.w	r3, #256	; 0x100
    c5bc:	6065      	str	r5, [r4, #4]
    c5be:	60e3      	str	r3, [r4, #12]
}
    c5c0:	bd38      	pop	{r3, r4, r5, pc}

0000c5c2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    c5c2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    c5c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c5c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c5ca:	2300      	movs	r3, #0
	node->prev = NULL;
    c5cc:	e9c0 3300 	strd	r3, r3, [r0]
}
    c5d0:	4770      	bx	lr

0000c5d2 <unpend_thread_no_timeout>:
{
    c5d2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    c5d4:	f7ff fff5 	bl	c5c2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c5d8:	7b43      	ldrb	r3, [r0, #13]
    c5da:	f023 0302 	bic.w	r3, r3, #2
    c5de:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    c5e0:	2300      	movs	r3, #0
    c5e2:	6083      	str	r3, [r0, #8]
}
    c5e4:	bd08      	pop	{r3, pc}

0000c5e6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    c5e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    c5ea:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    c5ee:	4283      	cmp	r3, r0
		return b2 - b1;
    c5f0:	bf14      	ite	ne
    c5f2:	1ac0      	subne	r0, r0, r3
	return 0;
    c5f4:	2000      	moveq	r0, #0
}
    c5f6:	4770      	bx	lr

0000c5f8 <z_unpend_thread_no_timeout>:
{
    c5f8:	b508      	push	{r3, lr}
	__asm__ volatile(
    c5fa:	f04f 0320 	mov.w	r3, #32
    c5fe:	f3ef 8111 	mrs	r1, BASEPRI
    c602:	f383 8812 	msr	BASEPRI_MAX, r3
    c606:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    c60a:	f7ff ffe2 	bl	c5d2 <unpend_thread_no_timeout>
	__asm__ volatile(
    c60e:	f381 8811 	msr	BASEPRI, r1
    c612:	f3bf 8f6f 	isb	sy
}
    c616:	bd08      	pop	{r3, pc}

0000c618 <z_unpend_thread>:
{
    c618:	b510      	push	{r4, lr}
	__asm__ volatile(
    c61a:	f04f 0320 	mov.w	r3, #32
    c61e:	f3ef 8411 	mrs	r4, BASEPRI
    c622:	f383 8812 	msr	BASEPRI_MAX, r3
    c626:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    c62a:	f7ff ffd2 	bl	c5d2 <unpend_thread_no_timeout>
	__asm__ volatile(
    c62e:	f384 8811 	msr	BASEPRI, r4
    c632:	f3bf 8f6f 	isb	sy
}
    c636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c63a:	3018      	adds	r0, #24
    c63c:	f000 b8c3 	b.w	c7c6 <z_abort_timeout>

0000c640 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c640:	4603      	mov	r3, r0
    c642:	b920      	cbnz	r0, c64e <z_reschedule_irqlock+0xe>
    c644:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    c648:	b90a      	cbnz	r2, c64e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    c64a:	f7f7 bea1 	b.w	4390 <arch_swap>
    c64e:	f383 8811 	msr	BASEPRI, r3
    c652:	f3bf 8f6f 	isb	sy
}
    c656:	4770      	bx	lr

0000c658 <z_reschedule_unlocked>:
	__asm__ volatile(
    c658:	f04f 0320 	mov.w	r3, #32
    c65c:	f3ef 8011 	mrs	r0, BASEPRI
    c660:	f383 8812 	msr	BASEPRI_MAX, r3
    c664:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    c668:	f7ff bfea 	b.w	c640 <z_reschedule_irqlock>

0000c66c <z_priq_dumb_best>:
{
    c66c:	4603      	mov	r3, r0
	return list->head == list;
    c66e:	6800      	ldr	r0, [r0, #0]
}
    c670:	4283      	cmp	r3, r0
    c672:	bf08      	it	eq
    c674:	2000      	moveq	r0, #0
    c676:	4770      	bx	lr

0000c678 <z_ready_thread>:
{
    c678:	b510      	push	{r4, lr}
    c67a:	f04f 0320 	mov.w	r3, #32
    c67e:	f3ef 8411 	mrs	r4, BASEPRI
    c682:	f383 8812 	msr	BASEPRI_MAX, r3
    c686:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    c68a:	f7fc fa31 	bl	8af0 <ready_thread>
	__asm__ volatile(
    c68e:	f384 8811 	msr	BASEPRI, r4
    c692:	f3bf 8f6f 	isb	sy
}
    c696:	bd10      	pop	{r4, pc}

0000c698 <z_thread_timeout>:
{
    c698:	b510      	push	{r4, lr}
    c69a:	4601      	mov	r1, r0
	__asm__ volatile(
    c69c:	f04f 0320 	mov.w	r3, #32
    c6a0:	f3ef 8411 	mrs	r4, BASEPRI
    c6a4:	f383 8812 	msr	BASEPRI_MAX, r3
    c6a8:	f3bf 8f6f 	isb	sy
		if (!killed) {
    c6ac:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    c6b0:	f013 0f28 	tst.w	r3, #40	; 0x28
    c6b4:	d10d      	bne.n	c6d2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    c6b6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    c6ba:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    c6bc:	b10b      	cbz	r3, c6c2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    c6be:	f7ff ff88 	bl	c5d2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    c6c2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    c6c6:	f023 0314 	bic.w	r3, r3, #20
    c6ca:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    c6ce:	f7fc fa0f 	bl	8af0 <ready_thread>
	__asm__ volatile(
    c6d2:	f384 8811 	msr	BASEPRI, r4
    c6d6:	f3bf 8f6f 	isb	sy
}
    c6da:	bd10      	pop	{r4, pc}

0000c6dc <add_to_waitq_locked>:
{
    c6dc:	b538      	push	{r3, r4, r5, lr}
    c6de:	4604      	mov	r4, r0
    c6e0:	460d      	mov	r5, r1
	unready_thread(thread);
    c6e2:	f7fc fa59 	bl	8b98 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    c6e6:	7b63      	ldrb	r3, [r4, #13]
    c6e8:	f043 0302 	orr.w	r3, r3, #2
    c6ec:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    c6ee:	b195      	cbz	r5, c716 <add_to_waitq_locked+0x3a>
    c6f0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    c6f2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c6f4:	429d      	cmp	r5, r3
    c6f6:	d015      	beq.n	c724 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c6f8:	b1a3      	cbz	r3, c724 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    c6fa:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    c6fe:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    c702:	4291      	cmp	r1, r2
    c704:	d008      	beq.n	c718 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    c706:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    c708:	2a00      	cmp	r2, #0
    c70a:	dd05      	ble.n	c718 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    c70c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    c70e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    c712:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    c714:	605c      	str	r4, [r3, #4]
}
    c716:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    c718:	686a      	ldr	r2, [r5, #4]
    c71a:	4293      	cmp	r3, r2
    c71c:	d002      	beq.n	c724 <add_to_waitq_locked+0x48>
    c71e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c720:	2b00      	cmp	r3, #0
    c722:	d1ec      	bne.n	c6fe <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    c724:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    c726:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    c72a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    c72c:	606c      	str	r4, [r5, #4]
}
    c72e:	e7f2      	b.n	c716 <add_to_waitq_locked+0x3a>

0000c730 <z_unpend1_no_timeout>:
{
    c730:	b510      	push	{r4, lr}
	__asm__ volatile(
    c732:	f04f 0320 	mov.w	r3, #32
    c736:	f3ef 8411 	mrs	r4, BASEPRI
    c73a:	f383 8812 	msr	BASEPRI_MAX, r3
    c73e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    c742:	f7ff ff93 	bl	c66c <z_priq_dumb_best>
		if (thread != NULL) {
    c746:	4601      	mov	r1, r0
    c748:	b108      	cbz	r0, c74e <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    c74a:	f7ff ff42 	bl	c5d2 <unpend_thread_no_timeout>
	__asm__ volatile(
    c74e:	f384 8811 	msr	BASEPRI, r4
    c752:	f3bf 8f6f 	isb	sy
}
    c756:	4608      	mov	r0, r1
    c758:	bd10      	pop	{r4, pc}

0000c75a <z_unpend_first_thread>:
{
    c75a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c75c:	f04f 0320 	mov.w	r3, #32
    c760:	f3ef 8511 	mrs	r5, BASEPRI
    c764:	f383 8812 	msr	BASEPRI_MAX, r3
    c768:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    c76c:	f7ff ff7e 	bl	c66c <z_priq_dumb_best>
		if (thread != NULL) {
    c770:	4604      	mov	r4, r0
    c772:	b120      	cbz	r0, c77e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    c774:	f7ff ff2d 	bl	c5d2 <unpend_thread_no_timeout>
    c778:	3018      	adds	r0, #24
    c77a:	f000 f824 	bl	c7c6 <z_abort_timeout>
	__asm__ volatile(
    c77e:	f385 8811 	msr	BASEPRI, r5
    c782:	f3bf 8f6f 	isb	sy
}
    c786:	4620      	mov	r0, r4
    c788:	bd38      	pop	{r3, r4, r5, pc}

0000c78a <z_sched_wake>:
{
    c78a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c78c:	f04f 0320 	mov.w	r3, #32
    c790:	f3ef 8511 	mrs	r5, BASEPRI
    c794:	f383 8812 	msr	BASEPRI_MAX, r3
    c798:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    c79c:	f7ff ff66 	bl	c66c <z_priq_dumb_best>
		if (thread != NULL) {
    c7a0:	4604      	mov	r4, r0
    c7a2:	b158      	cbz	r0, c7bc <z_sched_wake+0x32>
    c7a4:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    c7a8:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    c7aa:	f7ff ff12 	bl	c5d2 <unpend_thread_no_timeout>
    c7ae:	3018      	adds	r0, #24
    c7b0:	f000 f809 	bl	c7c6 <z_abort_timeout>
			ready_thread(thread);
    c7b4:	4620      	mov	r0, r4
    c7b6:	f7fc f99b 	bl	8af0 <ready_thread>
			ret = true;
    c7ba:	2001      	movs	r0, #1
	__asm__ volatile(
    c7bc:	f385 8811 	msr	BASEPRI, r5
    c7c0:	f3bf 8f6f 	isb	sy
}
    c7c4:	bd38      	pop	{r3, r4, r5, pc}

0000c7c6 <z_abort_timeout>:
{
    c7c6:	b510      	push	{r4, lr}
	__asm__ volatile(
    c7c8:	f04f 0220 	mov.w	r2, #32
    c7cc:	f3ef 8411 	mrs	r4, BASEPRI
    c7d0:	f382 8812 	msr	BASEPRI_MAX, r2
    c7d4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    c7d8:	6803      	ldr	r3, [r0, #0]
    c7da:	b13b      	cbz	r3, c7ec <z_abort_timeout+0x26>
			remove_timeout(to);
    c7dc:	f7fc fc3a 	bl	9054 <remove_timeout>
			ret = 0;
    c7e0:	2000      	movs	r0, #0
	__asm__ volatile(
    c7e2:	f384 8811 	msr	BASEPRI, r4
    c7e6:	f3bf 8f6f 	isb	sy
}
    c7ea:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    c7ec:	f06f 0015 	mvn.w	r0, #21
    c7f0:	e7f7      	b.n	c7e2 <z_abort_timeout+0x1c>

0000c7f2 <z_get_next_timeout_expiry>:
{
    c7f2:	b510      	push	{r4, lr}
	__asm__ volatile(
    c7f4:	f04f 0320 	mov.w	r3, #32
    c7f8:	f3ef 8411 	mrs	r4, BASEPRI
    c7fc:	f383 8812 	msr	BASEPRI_MAX, r3
    c800:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    c804:	f7fc fc00 	bl	9008 <next_timeout>
	__asm__ volatile(
    c808:	f384 8811 	msr	BASEPRI, r4
    c80c:	f3bf 8f6f 	isb	sy
}
    c810:	bd10      	pop	{r4, pc}

0000c812 <z_set_timeout_expiry>:
{
    c812:	b570      	push	{r4, r5, r6, lr}
    c814:	4604      	mov	r4, r0
    c816:	460d      	mov	r5, r1
	__asm__ volatile(
    c818:	f04f 0320 	mov.w	r3, #32
    c81c:	f3ef 8611 	mrs	r6, BASEPRI
    c820:	f383 8812 	msr	BASEPRI_MAX, r3
    c824:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    c828:	f7fc fbee 	bl	9008 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    c82c:	2801      	cmp	r0, #1
    c82e:	dd05      	ble.n	c83c <z_set_timeout_expiry+0x2a>
    c830:	42a0      	cmp	r0, r4
    c832:	db03      	blt.n	c83c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    c834:	4629      	mov	r1, r5
    c836:	4620      	mov	r0, r4
    c838:	f7fa f870 	bl	691c <sys_clock_set_timeout>
	__asm__ volatile(
    c83c:	f386 8811 	msr	BASEPRI, r6
    c840:	f3bf 8f6f 	isb	sy
}
    c844:	bd70      	pop	{r4, r5, r6, pc}

0000c846 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    c846:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    c848:	f7fc fcf4 	bl	9234 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    c84c:	bd08      	pop	{r3, pc}

0000c84e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    c84e:	f7fc bcf1 	b.w	9234 <sys_clock_tick_get>

0000c852 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    c852:	b108      	cbz	r0, c858 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    c854:	f7f8 bb10 	b.w	4e78 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    c858:	4770      	bx	lr

0000c85a <k_timer_init>:
	timer->status = 0U;
    c85a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    c85c:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    c860:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    c864:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    c868:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    c86c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    c86e:	6343      	str	r3, [r0, #52]	; 0x34
}
    c870:	4770      	bx	lr

0000c872 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    c872:	b510      	push	{r4, lr}
    c874:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    c876:	f7ff ffa6 	bl	c7c6 <z_abort_timeout>

	if (inactive) {
    c87a:	b9b0      	cbnz	r0, c8aa <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    c87c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c87e:	b10b      	cbz	r3, c884 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    c880:	4620      	mov	r0, r4
    c882:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    c884:	f104 0018 	add.w	r0, r4, #24
    c888:	f7ff ff52 	bl	c730 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    c88c:	b168      	cbz	r0, c8aa <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    c88e:	f7ff fef3 	bl	c678 <z_ready_thread>
	__asm__ volatile(
    c892:	f04f 0320 	mov.w	r3, #32
    c896:	f3ef 8011 	mrs	r0, BASEPRI
    c89a:	f383 8812 	msr	BASEPRI_MAX, r3
    c89e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    c8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    c8a6:	f7ff becb 	b.w	c640 <z_reschedule_irqlock>
    c8aa:	bd10      	pop	{r4, pc}

0000c8ac <add_event>:
{
    c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8ae:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    c8b0:	e9d0 1300 	ldrd	r1, r3, [r0]
    c8b4:	4288      	cmp	r0, r1
    c8b6:	4604      	mov	r4, r0
    c8b8:	d00d      	beq.n	c8d6 <add_event+0x2a>
	if ((pending == NULL) ||
    c8ba:	b163      	cbz	r3, c8d6 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
    c8bc:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    c8be:	b100      	cbz	r0, c8c2 <add_event+0x16>
    c8c0:	3860      	subs	r0, #96	; 0x60
    c8c2:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
    c8c6:	4639      	mov	r1, r7
    c8c8:	f7ff fe8d 	bl	c5e6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
    c8cc:	2800      	cmp	r0, #0
    c8ce:	dc02      	bgt.n	c8d6 <add_event+0x2a>
	return list->head == list;
    c8d0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c8d2:	42b4      	cmp	r4, r6
    c8d4:	d109      	bne.n	c8ea <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
    c8d6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
    c8d8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
    c8dc:	601d      	str	r5, [r3, #0]
	list->tail = node;
    c8de:	6065      	str	r5, [r4, #4]
}
    c8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    c8e2:	6863      	ldr	r3, [r4, #4]
    c8e4:	42b3      	cmp	r3, r6
    c8e6:	d0f6      	beq.n	c8d6 <add_event+0x2a>
    c8e8:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    c8ea:	2e00      	cmp	r6, #0
    c8ec:	d0f3      	beq.n	c8d6 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
    c8ee:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    c8f0:	b101      	cbz	r1, c8f4 <add_event+0x48>
    c8f2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
    c8f4:	4638      	mov	r0, r7
    c8f6:	f7ff fe76 	bl	c5e6 <z_sched_prio_cmp>
    c8fa:	2800      	cmp	r0, #0
    c8fc:	ddf1      	ble.n	c8e2 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
    c8fe:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
    c900:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
    c904:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    c906:	6075      	str	r5, [r6, #4]
			return;
    c908:	e7ea      	b.n	c8e0 <add_event+0x34>

0000c90a <register_events>:
{
    c90a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
    c90e:	2500      	movs	r5, #0
{
    c910:	468b      	mov	fp, r1
    c912:	4614      	mov	r4, r2
    c914:	461f      	mov	r7, r3
    c916:	4682      	mov	sl, r0
	int events_registered = 0;
    c918:	462e      	mov	r6, r5
	event->poller = NULL;
    c91a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
    c91c:	455d      	cmp	r5, fp
    c91e:	db02      	blt.n	c926 <register_events+0x1c>
}
    c920:	4630      	mov	r0, r6
    c922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c926:	f04f 0320 	mov.w	r3, #32
    c92a:	f3ef 8911 	mrs	r9, BASEPRI
    c92e:	f383 8812 	msr	BASEPRI_MAX, r3
    c932:	f3bf 8f6f 	isb	sy
	switch (event->type) {
    c936:	f89a 300d 	ldrb.w	r3, [sl, #13]
    c93a:	f003 031f 	and.w	r3, r3, #31
    c93e:	3b01      	subs	r3, #1
    c940:	2b07      	cmp	r3, #7
    c942:	d80f      	bhi.n	c964 <register_events+0x5a>
    c944:	e8df f003 	tbb	[pc, r3]
    c948:	0a0e041e 	.word	0x0a0e041e
    c94c:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
    c950:	f8da 3010 	ldr.w	r3, [sl, #16]
    c954:	689b      	ldr	r3, [r3, #8]
    c956:	b12b      	cbz	r3, c964 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
    c958:	2302      	movs	r3, #2
    c95a:	e020      	b.n	c99e <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
    c95c:	f8da 3010 	ldr.w	r3, [sl, #16]
    c960:	681b      	ldr	r3, [r3, #0]
    c962:	bb8b      	cbnz	r3, c9c8 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
    c964:	bb47      	cbnz	r7, c9b8 <register_events+0xae>
    c966:	7823      	ldrb	r3, [r4, #0]
    c968:	b333      	cbz	r3, c9b8 <register_events+0xae>
	switch (event->type) {
    c96a:	f89a 300d 	ldrb.w	r3, [sl, #13]
    c96e:	f003 031f 	and.w	r3, r3, #31
    c972:	3b01      	subs	r3, #1
    c974:	2b07      	cmp	r3, #7
    c976:	d830      	bhi.n	c9da <register_events+0xd0>
    c978:	e8df f003 	tbb	[pc, r3]
    c97c:	282f2833 	.word	0x282f2833
    c980:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
    c984:	f8da 3010 	ldr.w	r3, [sl, #16]
    c988:	689b      	ldr	r3, [r3, #8]
    c98a:	2b00      	cmp	r3, #0
    c98c:	d0ea      	beq.n	c964 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
    c98e:	2301      	movs	r3, #1
    c990:	e005      	b.n	c99e <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
    c992:	f8da 3010 	ldr.w	r3, [sl, #16]
    c996:	6a1b      	ldr	r3, [r3, #32]
    c998:	2b00      	cmp	r3, #0
    c99a:	d0e3      	beq.n	c964 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
    c99c:	2310      	movs	r3, #16
	event->state |= state;
    c99e:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
    c9a2:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
    c9a6:	f3c2 3145 	ubfx	r1, r2, #13, #6
    c9aa:	430b      	orrs	r3, r1
    c9ac:	f363 3252 	bfi	r2, r3, #13, #6
    c9b0:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
    c9b4:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
    c9b8:	f389 8811 	msr	BASEPRI, r9
    c9bc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
    c9c0:	3501      	adds	r5, #1
    c9c2:	f10a 0a14 	add.w	sl, sl, #20
    c9c6:	e7a9      	b.n	c91c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    c9c8:	2304      	movs	r3, #4
    c9ca:	e7e8      	b.n	c99e <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
    c9cc:	f8da 0010 	ldr.w	r0, [sl, #16]
    c9d0:	4622      	mov	r2, r4
    c9d2:	4651      	mov	r1, sl
    c9d4:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
    c9d6:	f7ff ff69 	bl	c8ac <add_event>
	event->poller = poller;
    c9da:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
    c9de:	3601      	adds	r6, #1
    c9e0:	e7ea      	b.n	c9b8 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
    c9e2:	f8da 0010 	ldr.w	r0, [sl, #16]
    c9e6:	4622      	mov	r2, r4
    c9e8:	4651      	mov	r1, sl
    c9ea:	e7f4      	b.n	c9d6 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
    c9ec:	f8da 0010 	ldr.w	r0, [sl, #16]
    c9f0:	4622      	mov	r2, r4
    c9f2:	4651      	mov	r1, sl
    c9f4:	3024      	adds	r0, #36	; 0x24
    c9f6:	e7ee      	b.n	c9d6 <register_events+0xcc>

0000c9f8 <signal_poll_event>:
{
    c9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    c9fc:	6884      	ldr	r4, [r0, #8]
{
    c9fe:	4605      	mov	r5, r0
    ca00:	460e      	mov	r6, r1
	if (poller != NULL) {
    ca02:	b144      	cbz	r4, ca16 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    ca04:	7863      	ldrb	r3, [r4, #1]
    ca06:	2b01      	cmp	r3, #1
    ca08:	d136      	bne.n	ca78 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
    ca0a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    ca0e:	f013 0302 	ands.w	r3, r3, #2
    ca12:	d10a      	bne.n	ca2a <signal_poll_event+0x32>
		poller->is_polling = false;
    ca14:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    ca16:	68eb      	ldr	r3, [r5, #12]
    ca18:	f3c3 3145 	ubfx	r1, r3, #13, #6
    ca1c:	430e      	orrs	r6, r1
	event->poller = NULL;
    ca1e:	2000      	movs	r0, #0
	event->state |= state;
    ca20:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    ca24:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    ca26:	60eb      	str	r3, [r5, #12]
	return retcode;
    ca28:	e00b      	b.n	ca42 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
    ca2a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    ca2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ca32:	bf08      	it	eq
    ca34:	f112 0f02 	cmneq.w	r2, #2
    ca38:	d105      	bne.n	ca46 <signal_poll_event+0x4e>
		poller->is_polling = false;
    ca3a:	2300      	movs	r3, #0
    ca3c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    ca3e:	f06f 000a 	mvn.w	r0, #10
}
    ca42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    ca46:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    ca4a:	4640      	mov	r0, r8
    ca4c:	f7ff fde4 	bl	c618 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    ca50:	2e08      	cmp	r6, #8
    ca52:	bf0c      	ite	eq
    ca54:	f06f 0303 	mvneq.w	r3, #3
    ca58:	2300      	movne	r3, #0
    ca5a:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ca5c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    ca60:	06db      	lsls	r3, r3, #27
    ca62:	d102      	bne.n	ca6a <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
    ca64:	f854 7c48 	ldr.w	r7, [r4, #-72]
    ca68:	b10f      	cbz	r7, ca6e <signal_poll_event+0x76>
		poller->is_polling = false;
    ca6a:	2300      	movs	r3, #0
    ca6c:	e7d2      	b.n	ca14 <signal_poll_event+0x1c>
	z_ready_thread(thread);
    ca6e:	4640      	mov	r0, r8
    ca70:	f7ff fe02 	bl	c678 <z_ready_thread>
		poller->is_polling = false;
    ca74:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    ca76:	e7ce      	b.n	ca16 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    ca78:	2b02      	cmp	r3, #2
    ca7a:	d1f6      	bne.n	ca6a <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    ca7c:	7823      	ldrb	r3, [r4, #0]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d0c9      	beq.n	ca16 <signal_poll_event+0x1e>
    ca82:	f854 7c04 	ldr.w	r7, [r4, #-4]
    ca86:	2f00      	cmp	r7, #0
    ca88:	d0f4      	beq.n	ca74 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    ca8a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    ca8e:	f1a4 0914 	sub.w	r9, r4, #20
    ca92:	f104 0014 	add.w	r0, r4, #20
    ca96:	f7ff fe96 	bl	c7c6 <z_abort_timeout>
		twork->poll_result = 0;
    ca9a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    ca9e:	4649      	mov	r1, r9
    caa0:	4638      	mov	r0, r7
    caa2:	f7ff fd65 	bl	c570 <k_work_submit_to_queue>
		poller->is_polling = false;
    caa6:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    caaa:	e7b4      	b.n	ca16 <signal_poll_event+0x1e>

0000caac <clear_event_registrations>:
	while (num_events--) {
    caac:	2314      	movs	r3, #20
{
    caae:	b5f0      	push	{r4, r5, r6, r7, lr}
    cab0:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
    cab4:	2400      	movs	r4, #0
    cab6:	2601      	movs	r6, #1
	while (num_events--) {
    cab8:	b901      	cbnz	r1, cabc <clear_event_registrations+0x10>
}
    caba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
    cabc:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
    cac0:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
    cac4:	f003 031f 	and.w	r3, r3, #31
    cac8:	2b08      	cmp	r3, #8
    caca:	f1a0 0714 	sub.w	r7, r0, #20
    cace:	d80d      	bhi.n	caec <clear_event_registrations+0x40>
    cad0:	fa06 f303 	lsl.w	r3, r6, r3
    cad4:	f413 7f8b 	tst.w	r3, #278	; 0x116
    cad8:	d008      	beq.n	caec <clear_event_registrations+0x40>
	return node->next != NULL;
    cada:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
    cade:	b12b      	cbz	r3, caec <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
    cae0:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
    cae4:	602b      	str	r3, [r5, #0]
	next->prev = prev;
    cae6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
    cae8:	e940 4405 	strd	r4, r4, [r0, #-20]
    caec:	f382 8811 	msr	BASEPRI, r2
    caf0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    caf4:	f04f 0320 	mov.w	r3, #32
    caf8:	f3ef 8211 	mrs	r2, BASEPRI
    cafc:	f383 8812 	msr	BASEPRI_MAX, r3
    cb00:	f3bf 8f6f 	isb	sy
    cb04:	3901      	subs	r1, #1
    cb06:	4638      	mov	r0, r7
    cb08:	e7d6      	b.n	cab8 <clear_event_registrations+0xc>

0000cb0a <k_poll_event_init>:
{
    cb0a:	b510      	push	{r4, lr}
	event->type = type;
    cb0c:	04d2      	lsls	r2, r2, #19
    cb0e:	0209      	lsls	r1, r1, #8
    cb10:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
    cb14:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    cb18:	430a      	orrs	r2, r1
    cb1a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
    cb1c:	2400      	movs	r4, #0
	event->type = type;
    cb1e:	430a      	orrs	r2, r1
	event->obj = obj;
    cb20:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
    cb24:	6084      	str	r4, [r0, #8]
}
    cb26:	bd10      	pop	{r4, pc}

0000cb28 <z_handle_obj_poll_events>:
{
    cb28:	4603      	mov	r3, r0
	return list->head == list;
    cb2a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    cb2c:	4283      	cmp	r3, r0
    cb2e:	d008      	beq.n	cb42 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    cb30:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    cb34:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    cb36:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    cb38:	2300      	movs	r3, #0
	node->prev = NULL;
    cb3a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    cb3e:	f7ff bf5b 	b.w	c9f8 <signal_poll_event>
}
    cb42:	4770      	bx	lr

0000cb44 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
    cb44:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
    cb46:	e9c0 0000 	strd	r0, r0, [r0]
    cb4a:	6083      	str	r3, [r0, #8]
}
    cb4c:	4770      	bx	lr

0000cb4e <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
    cb4e:	2300      	movs	r3, #0
    cb50:	6083      	str	r3, [r0, #8]
}
    cb52:	4770      	bx	lr

0000cb54 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
    cb54:	6883      	ldr	r3, [r0, #8]
    cb56:	600b      	str	r3, [r1, #0]
	*result = sig->result;
    cb58:	68c3      	ldr	r3, [r0, #12]
    cb5a:	6013      	str	r3, [r2, #0]
}
    cb5c:	4770      	bx	lr
	...

0000cb60 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    cb60:	f7f9 bf34 	b.w	69cc <SystemInit>
