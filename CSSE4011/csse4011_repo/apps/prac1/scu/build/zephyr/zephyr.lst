
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 4c 00 20 e1 65 00 00 af bc 01 00 b5 65 00 00     .L. .e.......e..
  10:	b5 65 00 00 b5 65 00 00 b5 65 00 00 00 00 00 00     .e...e...e......
	...
  2c:	c9 62 00 00 b5 65 00 00 00 00 00 00 75 62 00 00     .b...e......ub..
  3c:	b5 65 00 00                                         .e..

00000040 <_irq_vector_table>:
  40:	79 63 00 00 29 39 01 00 79 63 00 00 79 63 00 00     yc..)9..yc..yc..
  50:	79 63 00 00 79 63 00 00 79 63 00 00 79 63 00 00     yc..yc..yc..yc..
  60:	79 63 00 00 79 63 00 00 79 63 00 00 79 63 00 00     yc..yc..yc..yc..
  70:	79 63 00 00 79 63 00 00 79 63 00 00 79 63 00 00     yc..yc..yc..yc..
  80:	79 63 00 00 79 63 00 00 79 63 00 00 79 63 00 00     yc..yc..yc..yc..
  90:	79 63 00 00 79 63 00 00 79 63 00 00 79 63 00 00     yc..yc..yc..yc..
  a0:	79 63 00 00 79 63 00 00 79 63 00 00 79 63 00 00     yc..yc..yc..yc..
  b0:	79 63 00 00 79 63 00 00 79 63 00 00 79 63 00 00     yc..yc..yc..yc..
  c0:	79 63 00 00 79 63 00 00 79 63 00 00 79 63 00 00     yc..yc..yc..yc..
  d0:	79 63 00 00 79 63 00 00 79 63 00 00                 yc..yc..yc..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x38>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_FLASH_SIZE+0x12c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x38>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_FLASH_SIZE+0x13a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_FLASH_SIZE+0x11c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_COMPANY_ID+0x43>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_COMPANY_ID+0x9f>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x148>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x118>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_COMPANY_ID+0x29>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_COMPANY_ID+0x6d>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_COMPANY_ID+0x89>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_COMPANY_ID+0x9b>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     87a:	e712      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>

0000087c <__gedf2>:
     87c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     880:	e006      	b.n	890 <__cmpdf2+0x4>
     882:	bf00      	nop

00000884 <__ledf2>:
     884:	f04f 0c01 	mov.w	ip, #1
     888:	e002      	b.n	890 <__cmpdf2+0x4>
     88a:	bf00      	nop

0000088c <__cmpdf2>:
     88c:	f04f 0c01 	mov.w	ip, #1
     890:	f84d cd04 	str.w	ip, [sp, #-4]!
     894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     89c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8a0:	bf18      	it	ne
     8a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8a6:	d01b      	beq.n	8e0 <__data_size>
     8a8:	b001      	add	sp, #4
     8aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ae:	bf0c      	ite	eq
     8b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8b4:	ea91 0f03 	teqne	r1, r3
     8b8:	bf02      	ittt	eq
     8ba:	ea90 0f02 	teqeq	r0, r2
     8be:	2000      	moveq	r0, #0
     8c0:	4770      	bxeq	lr
     8c2:	f110 0f00 	cmn.w	r0, #0
     8c6:	ea91 0f03 	teq	r1, r3
     8ca:	bf58      	it	pl
     8cc:	4299      	cmppl	r1, r3
     8ce:	bf08      	it	eq
     8d0:	4290      	cmpeq	r0, r2
     8d2:	bf2c      	ite	cs
     8d4:	17d8      	asrcs	r0, r3, #31
     8d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8da:	f040 0001 	orr.w	r0, r0, #1
     8de:	4770      	bx	lr
     8e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8e8:	d102      	bne.n	8f0 <__data_size+0x10>
     8ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     8ee:	d107      	bne.n	900 <__data_size+0x20>
     8f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8f8:	d1d6      	bne.n	8a8 <__cmpdf2+0x1c>
     8fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     8fe:	d0d3      	beq.n	8a8 <__cmpdf2+0x1c>
     900:	f85d 0b04 	ldr.w	r0, [sp], #4
     904:	4770      	bx	lr
     906:	bf00      	nop

00000908 <__aeabi_cdrcmple>:
     908:	4684      	mov	ip, r0
     90a:	4610      	mov	r0, r2
     90c:	4662      	mov	r2, ip
     90e:	468c      	mov	ip, r1
     910:	4619      	mov	r1, r3
     912:	4663      	mov	r3, ip
     914:	e000      	b.n	918 <__aeabi_cdcmpeq>
     916:	bf00      	nop

00000918 <__aeabi_cdcmpeq>:
     918:	b501      	push	{r0, lr}
     91a:	f7ff ffb7 	bl	88c <__cmpdf2>
     91e:	2800      	cmp	r0, #0
     920:	bf48      	it	mi
     922:	f110 0f00 	cmnmi.w	r0, #0
     926:	bd01      	pop	{r0, pc}

00000928 <__aeabi_dcmpeq>:
     928:	f84d ed08 	str.w	lr, [sp, #-8]!
     92c:	f7ff fff4 	bl	918 <__aeabi_cdcmpeq>
     930:	bf0c      	ite	eq
     932:	2001      	moveq	r0, #1
     934:	2000      	movne	r0, #0
     936:	f85d fb08 	ldr.w	pc, [sp], #8
     93a:	bf00      	nop

0000093c <__aeabi_dcmplt>:
     93c:	f84d ed08 	str.w	lr, [sp, #-8]!
     940:	f7ff ffea 	bl	918 <__aeabi_cdcmpeq>
     944:	bf34      	ite	cc
     946:	2001      	movcc	r0, #1
     948:	2000      	movcs	r0, #0
     94a:	f85d fb08 	ldr.w	pc, [sp], #8
     94e:	bf00      	nop

00000950 <__aeabi_dcmple>:
     950:	f84d ed08 	str.w	lr, [sp, #-8]!
     954:	f7ff ffe0 	bl	918 <__aeabi_cdcmpeq>
     958:	bf94      	ite	ls
     95a:	2001      	movls	r0, #1
     95c:	2000      	movhi	r0, #0
     95e:	f85d fb08 	ldr.w	pc, [sp], #8
     962:	bf00      	nop

00000964 <__aeabi_dcmpge>:
     964:	f84d ed08 	str.w	lr, [sp, #-8]!
     968:	f7ff ffce 	bl	908 <__aeabi_cdrcmple>
     96c:	bf94      	ite	ls
     96e:	2001      	movls	r0, #1
     970:	2000      	movhi	r0, #0
     972:	f85d fb08 	ldr.w	pc, [sp], #8
     976:	bf00      	nop

00000978 <__aeabi_dcmpgt>:
     978:	f84d ed08 	str.w	lr, [sp, #-8]!
     97c:	f7ff ffc4 	bl	908 <__aeabi_cdrcmple>
     980:	bf34      	ite	cc
     982:	2001      	movcc	r0, #1
     984:	2000      	movcs	r0, #0
     986:	f85d fb08 	ldr.w	pc, [sp], #8
     98a:	bf00      	nop

0000098c <__aeabi_d2uiz>:
     98c:	004a      	lsls	r2, r1, #1
     98e:	d211      	bcs.n	9b4 <__aeabi_d2uiz+0x28>
     990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     994:	d211      	bcs.n	9ba <__aeabi_d2uiz+0x2e>
     996:	d50d      	bpl.n	9b4 <__aeabi_d2uiz+0x28>
     998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     99c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9a0:	d40e      	bmi.n	9c0 <__aeabi_d2uiz+0x34>
     9a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ae:	fa23 f002 	lsr.w	r0, r3, r2
     9b2:	4770      	bx	lr
     9b4:	f04f 0000 	mov.w	r0, #0
     9b8:	4770      	bx	lr
     9ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9be:	d102      	bne.n	9c6 <__aeabi_d2uiz+0x3a>
     9c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     9c4:	4770      	bx	lr
     9c6:	f04f 0000 	mov.w	r0, #0
     9ca:	4770      	bx	lr

000009cc <__aeabi_d2f>:
     9cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     9d4:	bf24      	itt	cs
     9d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     9da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     9de:	d90d      	bls.n	9fc <__aeabi_d2f+0x30>
     9e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     9e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     9ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     9f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     9f4:	bf08      	it	eq
     9f6:	f020 0001 	biceq.w	r0, r0, #1
     9fa:	4770      	bx	lr
     9fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a00:	d121      	bne.n	a46 <__aeabi_d2f+0x7a>
     a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a06:	bfbc      	itt	lt
     a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a0c:	4770      	bxlt	lr
     a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a16:	f1c2 0218 	rsb	r2, r2, #24
     a1a:	f1c2 0c20 	rsb	ip, r2, #32
     a1e:	fa10 f30c 	lsls.w	r3, r0, ip
     a22:	fa20 f002 	lsr.w	r0, r0, r2
     a26:	bf18      	it	ne
     a28:	f040 0001 	orrne.w	r0, r0, #1
     a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a34:	fa03 fc0c 	lsl.w	ip, r3, ip
     a38:	ea40 000c 	orr.w	r0, r0, ip
     a3c:	fa23 f302 	lsr.w	r3, r3, r2
     a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a44:	e7cc      	b.n	9e0 <__aeabi_d2f+0x14>
     a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a4a:	d107      	bne.n	a5c <__aeabi_d2f+0x90>
     a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a50:	bf1e      	ittt	ne
     a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a5a:	4770      	bxne	lr
     a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a68:	4770      	bx	lr
     a6a:	bf00      	nop

00000a6c <__aeabi_ldivmod>:
     a6c:	b97b      	cbnz	r3, a8e <__aeabi_ldivmod+0x22>
     a6e:	b972      	cbnz	r2, a8e <__aeabi_ldivmod+0x22>
     a70:	2900      	cmp	r1, #0
     a72:	bfbe      	ittt	lt
     a74:	2000      	movlt	r0, #0
     a76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     a7a:	e006      	blt.n	a8a <__aeabi_ldivmod+0x1e>
     a7c:	bf08      	it	eq
     a7e:	2800      	cmpeq	r0, #0
     a80:	bf1c      	itt	ne
     a82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     a86:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     a8a:	f000 b875 	b.w	b78 <__aeabi_idiv0>
     a8e:	f1ad 0c08 	sub.w	ip, sp, #8
     a92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a96:	2900      	cmp	r1, #0
     a98:	db09      	blt.n	aae <__aeabi_ldivmod+0x42>
     a9a:	2b00      	cmp	r3, #0
     a9c:	db1a      	blt.n	ad4 <__aeabi_ldivmod+0x68>
     a9e:	f000 f86d 	bl	b7c <__udivmoddi4>
     aa2:	f8dd e004 	ldr.w	lr, [sp, #4]
     aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     aaa:	b004      	add	sp, #16
     aac:	4770      	bx	lr
     aae:	4240      	negs	r0, r0
     ab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ab4:	2b00      	cmp	r3, #0
     ab6:	db1b      	blt.n	af0 <__aeabi_ldivmod+0x84>
     ab8:	f000 f860 	bl	b7c <__udivmoddi4>
     abc:	f8dd e004 	ldr.w	lr, [sp, #4]
     ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ac4:	b004      	add	sp, #16
     ac6:	4240      	negs	r0, r0
     ac8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     acc:	4252      	negs	r2, r2
     ace:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ad2:	4770      	bx	lr
     ad4:	4252      	negs	r2, r2
     ad6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ada:	f000 f84f 	bl	b7c <__udivmoddi4>
     ade:	f8dd e004 	ldr.w	lr, [sp, #4]
     ae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ae6:	b004      	add	sp, #16
     ae8:	4240      	negs	r0, r0
     aea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     aee:	4770      	bx	lr
     af0:	4252      	negs	r2, r2
     af2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     af6:	f000 f841 	bl	b7c <__udivmoddi4>
     afa:	f8dd e004 	ldr.w	lr, [sp, #4]
     afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b02:	b004      	add	sp, #16
     b04:	4252      	negs	r2, r2
     b06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b0a:	4770      	bx	lr

00000b0c <__aeabi_uldivmod>:
     b0c:	b953      	cbnz	r3, b24 <__aeabi_uldivmod+0x18>
     b0e:	b94a      	cbnz	r2, b24 <__aeabi_uldivmod+0x18>
     b10:	2900      	cmp	r1, #0
     b12:	bf08      	it	eq
     b14:	2800      	cmpeq	r0, #0
     b16:	bf1c      	itt	ne
     b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     b20:	f000 b82a 	b.w	b78 <__aeabi_idiv0>
     b24:	f1ad 0c08 	sub.w	ip, sp, #8
     b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     b2c:	f000 f826 	bl	b7c <__udivmoddi4>
     b30:	f8dd e004 	ldr.w	lr, [sp, #4]
     b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b38:	b004      	add	sp, #16
     b3a:	4770      	bx	lr

00000b3c <__aeabi_d2ulz>:
     b3c:	b5d0      	push	{r4, r6, r7, lr}
     b3e:	4b0c      	ldr	r3, [pc, #48]	; (b70 <__aeabi_d2ulz+0x34>)
     b40:	2200      	movs	r2, #0
     b42:	4606      	mov	r6, r0
     b44:	460f      	mov	r7, r1
     b46:	f7ff fc87 	bl	458 <__aeabi_dmul>
     b4a:	f7ff ff1f 	bl	98c <__aeabi_d2uiz>
     b4e:	4604      	mov	r4, r0
     b50:	f7ff fc08 	bl	364 <__aeabi_ui2d>
     b54:	4b07      	ldr	r3, [pc, #28]	; (b74 <__aeabi_d2ulz+0x38>)
     b56:	2200      	movs	r2, #0
     b58:	f7ff fc7e 	bl	458 <__aeabi_dmul>
     b5c:	4602      	mov	r2, r0
     b5e:	460b      	mov	r3, r1
     b60:	4630      	mov	r0, r6
     b62:	4639      	mov	r1, r7
     b64:	f7ff fac0 	bl	e8 <__aeabi_dsub>
     b68:	f7ff ff10 	bl	98c <__aeabi_d2uiz>
     b6c:	4621      	mov	r1, r4
     b6e:	bdd0      	pop	{r4, r6, r7, pc}
     b70:	3df00000 	.word	0x3df00000
     b74:	41f00000 	.word	0x41f00000

00000b78 <__aeabi_idiv0>:
     b78:	4770      	bx	lr
     b7a:	bf00      	nop

00000b7c <__udivmoddi4>:
     b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b80:	4607      	mov	r7, r0
     b82:	468c      	mov	ip, r1
     b84:	4608      	mov	r0, r1
     b86:	9e09      	ldr	r6, [sp, #36]	; 0x24
     b88:	4615      	mov	r5, r2
     b8a:	463c      	mov	r4, r7
     b8c:	4619      	mov	r1, r3
     b8e:	2b00      	cmp	r3, #0
     b90:	f040 80c6 	bne.w	d20 <__udivmoddi4+0x1a4>
     b94:	4282      	cmp	r2, r0
     b96:	fab2 f782 	clz	r7, r2
     b9a:	d946      	bls.n	c2a <__udivmoddi4+0xae>
     b9c:	b14f      	cbz	r7, bb2 <__udivmoddi4+0x36>
     b9e:	f1c7 0e20 	rsb	lr, r7, #32
     ba2:	fa24 fe0e 	lsr.w	lr, r4, lr
     ba6:	fa00 f307 	lsl.w	r3, r0, r7
     baa:	40bd      	lsls	r5, r7
     bac:	ea4e 0c03 	orr.w	ip, lr, r3
     bb0:	40bc      	lsls	r4, r7
     bb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
     bb6:	fa1f fe85 	uxth.w	lr, r5
     bba:	fbbc f9f8 	udiv	r9, ip, r8
     bbe:	0c22      	lsrs	r2, r4, #16
     bc0:	fb08 c319 	mls	r3, r8, r9, ip
     bc4:	fb09 fa0e 	mul.w	sl, r9, lr
     bc8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     bcc:	459a      	cmp	sl, r3
     bce:	d928      	bls.n	c22 <__udivmoddi4+0xa6>
     bd0:	18eb      	adds	r3, r5, r3
     bd2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     bd6:	d204      	bcs.n	be2 <__udivmoddi4+0x66>
     bd8:	459a      	cmp	sl, r3
     bda:	d902      	bls.n	be2 <__udivmoddi4+0x66>
     bdc:	f1a9 0002 	sub.w	r0, r9, #2
     be0:	442b      	add	r3, r5
     be2:	eba3 030a 	sub.w	r3, r3, sl
     be6:	b2a4      	uxth	r4, r4
     be8:	fbb3 f2f8 	udiv	r2, r3, r8
     bec:	fb08 3312 	mls	r3, r8, r2, r3
     bf0:	fb02 fe0e 	mul.w	lr, r2, lr
     bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     bf8:	45a6      	cmp	lr, r4
     bfa:	d914      	bls.n	c26 <__udivmoddi4+0xaa>
     bfc:	192c      	adds	r4, r5, r4
     bfe:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     c02:	d203      	bcs.n	c0c <__udivmoddi4+0x90>
     c04:	45a6      	cmp	lr, r4
     c06:	d901      	bls.n	c0c <__udivmoddi4+0x90>
     c08:	1e93      	subs	r3, r2, #2
     c0a:	442c      	add	r4, r5
     c0c:	eba4 040e 	sub.w	r4, r4, lr
     c10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c14:	b11e      	cbz	r6, c1e <__udivmoddi4+0xa2>
     c16:	40fc      	lsrs	r4, r7
     c18:	2300      	movs	r3, #0
     c1a:	6034      	str	r4, [r6, #0]
     c1c:	6073      	str	r3, [r6, #4]
     c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c22:	4648      	mov	r0, r9
     c24:	e7dd      	b.n	be2 <__udivmoddi4+0x66>
     c26:	4613      	mov	r3, r2
     c28:	e7f0      	b.n	c0c <__udivmoddi4+0x90>
     c2a:	b902      	cbnz	r2, c2e <__udivmoddi4+0xb2>
     c2c:	deff      	udf	#255	; 0xff
     c2e:	bb87      	cbnz	r7, c92 <__udivmoddi4+0x116>
     c30:	1a83      	subs	r3, r0, r2
     c32:	2101      	movs	r1, #1
     c34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c38:	b2aa      	uxth	r2, r5
     c3a:	fbb3 fcfe 	udiv	ip, r3, lr
     c3e:	0c20      	lsrs	r0, r4, #16
     c40:	fb0e 331c 	mls	r3, lr, ip, r3
     c44:	fb0c f802 	mul.w	r8, ip, r2
     c48:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     c4c:	4598      	cmp	r8, r3
     c4e:	d963      	bls.n	d18 <__udivmoddi4+0x19c>
     c50:	18eb      	adds	r3, r5, r3
     c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     c56:	d204      	bcs.n	c62 <__udivmoddi4+0xe6>
     c58:	4598      	cmp	r8, r3
     c5a:	d902      	bls.n	c62 <__udivmoddi4+0xe6>
     c5c:	f1ac 0002 	sub.w	r0, ip, #2
     c60:	442b      	add	r3, r5
     c62:	eba3 0308 	sub.w	r3, r3, r8
     c66:	b2a4      	uxth	r4, r4
     c68:	fbb3 fcfe 	udiv	ip, r3, lr
     c6c:	fb0e 331c 	mls	r3, lr, ip, r3
     c70:	fb0c f202 	mul.w	r2, ip, r2
     c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c78:	42a2      	cmp	r2, r4
     c7a:	d94f      	bls.n	d1c <__udivmoddi4+0x1a0>
     c7c:	192c      	adds	r4, r5, r4
     c7e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     c82:	d204      	bcs.n	c8e <__udivmoddi4+0x112>
     c84:	42a2      	cmp	r2, r4
     c86:	d902      	bls.n	c8e <__udivmoddi4+0x112>
     c88:	f1ac 0302 	sub.w	r3, ip, #2
     c8c:	442c      	add	r4, r5
     c8e:	1aa4      	subs	r4, r4, r2
     c90:	e7be      	b.n	c10 <__udivmoddi4+0x94>
     c92:	f1c7 0c20 	rsb	ip, r7, #32
     c96:	fa20 f80c 	lsr.w	r8, r0, ip
     c9a:	fa00 f307 	lsl.w	r3, r0, r7
     c9e:	fa24 fc0c 	lsr.w	ip, r4, ip
     ca2:	40bd      	lsls	r5, r7
     ca4:	ea4c 0203 	orr.w	r2, ip, r3
     ca8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     cac:	b2ab      	uxth	r3, r5
     cae:	fbb8 fcfe 	udiv	ip, r8, lr
     cb2:	0c11      	lsrs	r1, r2, #16
     cb4:	fb0e 801c 	mls	r0, lr, ip, r8
     cb8:	fb0c f903 	mul.w	r9, ip, r3
     cbc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     cc0:	4581      	cmp	r9, r0
     cc2:	fa04 f407 	lsl.w	r4, r4, r7
     cc6:	d923      	bls.n	d10 <__udivmoddi4+0x194>
     cc8:	1828      	adds	r0, r5, r0
     cca:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     cce:	d204      	bcs.n	cda <__udivmoddi4+0x15e>
     cd0:	4581      	cmp	r9, r0
     cd2:	d902      	bls.n	cda <__udivmoddi4+0x15e>
     cd4:	f1ac 0102 	sub.w	r1, ip, #2
     cd8:	4428      	add	r0, r5
     cda:	eba0 0009 	sub.w	r0, r0, r9
     cde:	b292      	uxth	r2, r2
     ce0:	fbb0 fcfe 	udiv	ip, r0, lr
     ce4:	fb0e 001c 	mls	r0, lr, ip, r0
     ce8:	fb0c f803 	mul.w	r8, ip, r3
     cec:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     cf0:	4598      	cmp	r8, r3
     cf2:	d90f      	bls.n	d14 <__udivmoddi4+0x198>
     cf4:	18eb      	adds	r3, r5, r3
     cf6:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     cfa:	d204      	bcs.n	d06 <__udivmoddi4+0x18a>
     cfc:	4598      	cmp	r8, r3
     cfe:	d902      	bls.n	d06 <__udivmoddi4+0x18a>
     d00:	f1ac 0202 	sub.w	r2, ip, #2
     d04:	442b      	add	r3, r5
     d06:	eba3 0308 	sub.w	r3, r3, r8
     d0a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     d0e:	e791      	b.n	c34 <__udivmoddi4+0xb8>
     d10:	4661      	mov	r1, ip
     d12:	e7e2      	b.n	cda <__udivmoddi4+0x15e>
     d14:	4662      	mov	r2, ip
     d16:	e7f6      	b.n	d06 <__udivmoddi4+0x18a>
     d18:	4660      	mov	r0, ip
     d1a:	e7a2      	b.n	c62 <__udivmoddi4+0xe6>
     d1c:	4663      	mov	r3, ip
     d1e:	e7b6      	b.n	c8e <__udivmoddi4+0x112>
     d20:	4283      	cmp	r3, r0
     d22:	d905      	bls.n	d30 <__udivmoddi4+0x1b4>
     d24:	b10e      	cbz	r6, d2a <__udivmoddi4+0x1ae>
     d26:	e9c6 7000 	strd	r7, r0, [r6]
     d2a:	2100      	movs	r1, #0
     d2c:	4608      	mov	r0, r1
     d2e:	e776      	b.n	c1e <__udivmoddi4+0xa2>
     d30:	fab3 f183 	clz	r1, r3
     d34:	b981      	cbnz	r1, d58 <__udivmoddi4+0x1dc>
     d36:	4283      	cmp	r3, r0
     d38:	d301      	bcc.n	d3e <__udivmoddi4+0x1c2>
     d3a:	42ba      	cmp	r2, r7
     d3c:	d80a      	bhi.n	d54 <__udivmoddi4+0x1d8>
     d3e:	1abc      	subs	r4, r7, r2
     d40:	eb60 0303 	sbc.w	r3, r0, r3
     d44:	2001      	movs	r0, #1
     d46:	469c      	mov	ip, r3
     d48:	2e00      	cmp	r6, #0
     d4a:	d068      	beq.n	e1e <__udivmoddi4+0x2a2>
     d4c:	e9c6 4c00 	strd	r4, ip, [r6]
     d50:	2100      	movs	r1, #0
     d52:	e764      	b.n	c1e <__udivmoddi4+0xa2>
     d54:	4608      	mov	r0, r1
     d56:	e7f7      	b.n	d48 <__udivmoddi4+0x1cc>
     d58:	f1c1 0c20 	rsb	ip, r1, #32
     d5c:	408b      	lsls	r3, r1
     d5e:	fa22 f40c 	lsr.w	r4, r2, ip
     d62:	431c      	orrs	r4, r3
     d64:	fa02 f501 	lsl.w	r5, r2, r1
     d68:	fa00 f301 	lsl.w	r3, r0, r1
     d6c:	fa27 f20c 	lsr.w	r2, r7, ip
     d70:	fa20 fb0c 	lsr.w	fp, r0, ip
     d74:	ea4f 4914 	mov.w	r9, r4, lsr #16
     d78:	4313      	orrs	r3, r2
     d7a:	fbbb f8f9 	udiv	r8, fp, r9
     d7e:	fa1f fe84 	uxth.w	lr, r4
     d82:	fb09 bb18 	mls	fp, r9, r8, fp
     d86:	0c1a      	lsrs	r2, r3, #16
     d88:	fb08 fa0e 	mul.w	sl, r8, lr
     d8c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     d90:	4592      	cmp	sl, r2
     d92:	fa07 f701 	lsl.w	r7, r7, r1
     d96:	d93e      	bls.n	e16 <__udivmoddi4+0x29a>
     d98:	18a2      	adds	r2, r4, r2
     d9a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     d9e:	d204      	bcs.n	daa <__udivmoddi4+0x22e>
     da0:	4592      	cmp	sl, r2
     da2:	d902      	bls.n	daa <__udivmoddi4+0x22e>
     da4:	f1a8 0002 	sub.w	r0, r8, #2
     da8:	4422      	add	r2, r4
     daa:	eba2 020a 	sub.w	r2, r2, sl
     dae:	b29b      	uxth	r3, r3
     db0:	fbb2 f8f9 	udiv	r8, r2, r9
     db4:	fb09 2218 	mls	r2, r9, r8, r2
     db8:	fb08 fe0e 	mul.w	lr, r8, lr
     dbc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     dc0:	4596      	cmp	lr, r2
     dc2:	d92a      	bls.n	e1a <__udivmoddi4+0x29e>
     dc4:	18a2      	adds	r2, r4, r2
     dc6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     dca:	d204      	bcs.n	dd6 <__udivmoddi4+0x25a>
     dcc:	4596      	cmp	lr, r2
     dce:	d902      	bls.n	dd6 <__udivmoddi4+0x25a>
     dd0:	f1a8 0302 	sub.w	r3, r8, #2
     dd4:	4422      	add	r2, r4
     dd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     dda:	fba0 9305 	umull	r9, r3, r0, r5
     dde:	eba2 020e 	sub.w	r2, r2, lr
     de2:	429a      	cmp	r2, r3
     de4:	46ce      	mov	lr, r9
     de6:	4698      	mov	r8, r3
     de8:	d302      	bcc.n	df0 <__udivmoddi4+0x274>
     dea:	d106      	bne.n	dfa <__udivmoddi4+0x27e>
     dec:	454f      	cmp	r7, r9
     dee:	d204      	bcs.n	dfa <__udivmoddi4+0x27e>
     df0:	ebb9 0e05 	subs.w	lr, r9, r5
     df4:	eb63 0804 	sbc.w	r8, r3, r4
     df8:	3801      	subs	r0, #1
     dfa:	b186      	cbz	r6, e1e <__udivmoddi4+0x2a2>
     dfc:	ebb7 030e 	subs.w	r3, r7, lr
     e00:	eb62 0708 	sbc.w	r7, r2, r8
     e04:	fa07 fc0c 	lsl.w	ip, r7, ip
     e08:	40cb      	lsrs	r3, r1
     e0a:	ea4c 0303 	orr.w	r3, ip, r3
     e0e:	40cf      	lsrs	r7, r1
     e10:	e9c6 3700 	strd	r3, r7, [r6]
     e14:	e79c      	b.n	d50 <__udivmoddi4+0x1d4>
     e16:	4640      	mov	r0, r8
     e18:	e7c7      	b.n	daa <__udivmoddi4+0x22e>
     e1a:	4643      	mov	r3, r8
     e1c:	e7db      	b.n	dd6 <__udivmoddi4+0x25a>
     e1e:	4631      	mov	r1, r6
     e20:	e6fd      	b.n	c1e <__udivmoddi4+0xa2>
     e22:	0000      	movs	r0, r0
     e24:	0000      	movs	r0, r0
	...

00000e28 <sensor_value_to_double>:
 *
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
     e28:	b5d0      	push	{r4, r6, r7, lr}
     e2a:	4604      	mov	r4, r0
	return (double)val->val1 + (double)val->val2 / 1000000;
     e2c:	6840      	ldr	r0, [r0, #4]
     e2e:	f7ff faa9 	bl	384 <__aeabi_i2d>
     e32:	a309      	add	r3, pc, #36	; (adr r3, e58 <sensor_value_to_double+0x30>)
     e34:	e9d3 2300 	ldrd	r2, r3, [r3]
     e38:	f7ff fc38 	bl	6ac <__aeabi_ddiv>
     e3c:	4606      	mov	r6, r0
     e3e:	6820      	ldr	r0, [r4, #0]
     e40:	460f      	mov	r7, r1
     e42:	f7ff fa9f 	bl	384 <__aeabi_i2d>
     e46:	4602      	mov	r2, r0
     e48:	460b      	mov	r3, r1
     e4a:	4630      	mov	r0, r6
     e4c:	4639      	mov	r1, r7
     e4e:	f7ff f94d 	bl	ec <__adddf3>
}
     e52:	bdd0      	pop	{r4, r6, r7, pc}
     e54:	f3af 8000 	nop.w
     e58:	00000000 	.word	0x00000000
     e5c:	412e8480 	.word	0x412e8480

00000e60 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
     e60:	2800      	cmp	r0, #0
     e62:	f000 80a6 	beq.w	fb2 <ll_adv_enable+0x152>
{
     e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     e6a:	4c5b      	ldr	r4, [pc, #364]	; (fd8 <ll_adv_enable+0x178>)
     e6c:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
     e70:	f015 0501 	ands.w	r5, r5, #1
{
     e74:	b08c      	sub	sp, #48	; 0x30
	if (!adv || adv->is_enabled) {
     e76:	f040 8087 	bne.w	f88 <ll_adv_enable+0x128>
	ull_filter_adv_update(lll->filter_policy);
     e7a:	f894 0020 	ldrb.w	r0, [r4, #32]
	lll->rl_idx = FILTER_IDX_NONE;
     e7e:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
     e80:	0980      	lsrs	r0, r0, #6
	lll->rl_idx = FILTER_IDX_NONE;
     e82:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	ull_filter_adv_update(lll->filter_policy);
     e86:	f012 f8f7 	bl	13078 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     e8a:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
     e8e:	0742      	lsls	r2, r0, #29
     e90:	d47f      	bmi.n	f92 <ll_adv_enable+0x132>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     e92:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     e96:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     e9a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     e9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     ea2:	6a96      	ldr	r6, [r2, #40]	; 0x28
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     ea4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
     ea6:	b17e      	cbz	r6, ec8 <ll_adv_enable+0x68>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
     ea8:	484b      	ldr	r0, [pc, #300]	; (fd8 <ll_adv_enable+0x178>)
     eaa:	4631      	mov	r1, r6
     eac:	f00d fe36 	bl	eb1c <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
     eb0:	7833      	ldrb	r3, [r6, #0]
     eb2:	065b      	lsls	r3, r3, #25
     eb4:	d504      	bpl.n	ec0 <ll_adv_enable+0x60>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     eb6:	2106      	movs	r1, #6
     eb8:	f009 f918 	bl	a0ec <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     ebc:	2800      	cmp	r0, #0
     ebe:	d07f      	beq.n	fc0 <ll_adv_enable+0x160>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     ec0:	4845      	ldr	r0, [pc, #276]	; (fd8 <ll_adv_enable+0x178>)
     ec2:	4639      	mov	r1, r7
     ec4:	f00d fe2a 	bl	eb1c <ull_adv_pdu_update_addrs>
	uint8_t ch_map = lll->chan_map;
     ec8:	f894 3020 	ldrb.w	r3, [r4, #32]
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     ecc:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     ece:	f3c3 0302 	ubfx	r3, r3, #0, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     ed2:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
     ed6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     eda:	f009 fa93 	bl	a404 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     ede:	4602      	mov	r2, r0
     ee0:	2800      	cmp	r0, #0
     ee2:	d068      	beq.n	fb6 <ll_adv_enable+0x156>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
     ee4:	7879      	ldrb	r1, [r7, #1]
     ee6:	4630      	mov	r0, r6
     ee8:	f00d fc54 	bl	e794 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     eec:	493b      	ldr	r1, [pc, #236]	; (fdc <ll_adv_enable+0x17c>)
	uint16_t interval = adv->interval;
     eee:	f8b4 803c 	ldrh.w	r8, [r4, #60]	; 0x3c
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
     ef2:	2600      	movs	r6, #0
	adv->ull.ticks_prepare_to_start =
     ef4:	2331      	movs	r3, #49	; 0x31
     ef6:	e9c4 6301 	strd	r6, r3, [r4, #4]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     efa:	fba0 0101 	umull	r0, r1, r0, r1
     efe:	a334      	add	r3, pc, #208	; (adr r3, fd0 <ll_adv_enable+0x170>)
     f00:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     f04:	e9c4 6605 	strd	r6, r6, [r4, #20]
	hdr->ref = 0U;
     f08:	7026      	strb	r6, [r4, #0]
	adv->ull.ticks_preempt_to_start =
     f0a:	60e6      	str	r6, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     f0c:	f7ff fdfe 	bl	b0c <__aeabi_uldivmod>
     f10:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
     f12:	f00a fc6f 	bl	b7f4 <ticker_ticks_now_get>
		const uint32_t ticks_slot = adv->ull.ticks_slot +
     f16:	6922      	ldr	r2, [r4, #16]
		ll_adv_ticker_ext[handle].ticks_slot_window =
     f18:	4b31      	ldr	r3, [pc, #196]	; (fe0 <ll_adv_enable+0x180>)
		ret = ticker_start_ext(
     f1a:	9204      	str	r2, [sp, #16]
	ticks_anchor = ticker_ticks_now_get();
     f1c:	4607      	mov	r7, r0
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     f1e:	4831      	ldr	r0, [pc, #196]	; (fe4 <ll_adv_enable+0x184>)
		ret = ticker_start_ext(
     f20:	9406      	str	r4, [sp, #24]
     f22:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     f26:	f202 1247 	addw	r2, r2, #327	; 0x147
		ret = ticker_start_ext(
     f2a:	f8cd 9020 	str.w	r9, [sp, #32]
     f2e:	9602      	str	r6, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     f30:	fba8 0100 	umull	r0, r1, r8, r0
		ll_adv_ticker_ext[handle].ticks_slot_window =
     f34:	601a      	str	r2, [r3, #0]
		ret = ticker_start_ext(
     f36:	9309      	str	r3, [sp, #36]	; 0x24
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     f38:	2391      	movs	r3, #145	; 0x91
     f3a:	fb03 1108 	mla	r1, r3, r8, r1
		ret = ticker_start_ext(
     f3e:	4b2a      	ldr	r3, [pc, #168]	; (fe8 <ll_adv_enable+0x188>)
     f40:	9307      	str	r3, [sp, #28]
     f42:	4b2a      	ldr	r3, [pc, #168]	; (fec <ll_adv_enable+0x18c>)
     f44:	9305      	str	r3, [sp, #20]
     f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
		ret_cb = TICKER_STATUS_BUSY;
     f4a:	f04f 0a02 	mov.w	sl, #2
		ret = ticker_start_ext(
     f4e:	9303      	str	r3, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     f50:	a31f      	add	r3, pc, #124	; (adr r3, fd0 <ll_adv_enable+0x170>)
     f52:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
     f56:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     f5a:	f7ff fdd7 	bl	b0c <__aeabi_uldivmod>
		ret = ticker_start_ext(
     f5e:	2103      	movs	r1, #3
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     f60:	9001      	str	r0, [sp, #4]
		ret = ticker_start_ext(
     f62:	463b      	mov	r3, r7
     f64:	4652      	mov	r2, sl
     f66:	9600      	str	r6, [sp, #0]
     f68:	4630      	mov	r0, r6
     f6a:	f00a fac3 	bl	b4f4 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     f6e:	4649      	mov	r1, r9
     f70:	f00c fefa 	bl	dd68 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     f74:	b9f8      	cbnz	r0, fb6 <ll_adv_enable+0x156>
	adv->is_enabled = 1;
     f76:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
     f7a:	f043 0301 	orr.w	r3, r3, #1
     f7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     f82:	f00d ffa7 	bl	eed4 <ull_scan_is_enabled_get>
     f86:	b1e8      	cbz	r0, fc4 <ll_adv_enable+0x164>
			return 0;
     f88:	2500      	movs	r5, #0
}
     f8a:	4628      	mov	r0, r5
     f8c:	b00c      	add	sp, #48	; 0x30
     f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     f92:	462a      	mov	r2, r5
     f94:	f104 013f 	add.w	r1, r4, #63	; 0x3f
     f98:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     f9c:	f012 f9fe 	bl	1339c <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
     fa0:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     fa2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
		if (lll->rl_idx != FILTER_IDX_NONE) {
     fa6:	f43f af74 	beq.w	e92 <ll_adv_enable+0x32>
			ull_filter_rpa_update(false);
     faa:	4628      	mov	r0, r5
     fac:	f012 f8aa 	bl	13104 <ull_filter_rpa_update>
     fb0:	e76f      	b.n	e92 <ll_adv_enable+0x32>
		return disable(handle);
     fb2:	f00d bb65 	b.w	e680 <disable.constprop.0>
	return BT_HCI_ERR_CMD_DISALLOWED;
     fb6:	250c      	movs	r5, #12
}
     fb8:	4628      	mov	r0, r5
     fba:	b00c      	add	sp, #48	; 0x30
     fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return BT_HCI_ERR_INVALID_PARAM;
     fc0:	2512      	movs	r5, #18
     fc2:	e7e2      	b.n	f8a <ll_adv_enable+0x12a>
		ull_filter_adv_scan_state_cb(BIT(0));
     fc4:	2001      	movs	r0, #1
     fc6:	f012 f839 	bl	1303c <ull_filter_adv_scan_state_cb>
     fca:	e7de      	b.n	f8a <ll_adv_enable+0x12a>
     fcc:	f3af 8000 	nop.w
     fd0:	1afd498d 	.word	0x1afd498d
     fd4:	00000007 	.word	0x00000007
     fd8:	20002148 	.word	0x20002148
     fdc:	3b9aca00 	.word	0x3b9aca00
     fe0:	20002190 	.word	0x20002190
     fe4:	84e72a00 	.word	0x84e72a00
     fe8:	0000d371 	.word	0x0000d371
     fec:	0000e805 	.word	0x0000e805

00000ff0 <ull_adv_time_update>:
{
     ff0:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
     ff2:	f890 3020 	ldrb.w	r3, [r0, #32]
{
     ff6:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
     ff8:	f3c3 0302 	ubfx	r3, r3, #0, #3
{
     ffc:	460d      	mov	r5, r1
     ffe:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1000:	2101      	movs	r1, #1
    1002:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    1006:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    1008:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    100c:	f009 f9fa 	bl	a404 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1010:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1012:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1014:	4628      	mov	r0, r5
    1016:	f00d fbbd 	bl	e794 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    101a:	491d      	ldr	r1, [pc, #116]	; (1090 <ull_adv_time_update+0xa0>)
    101c:	a31a      	add	r3, pc, #104	; (adr r3, 1088 <ull_adv_time_update+0x98>)
    101e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1022:	fba0 0101 	umull	r0, r1, r0, r1
    1026:	f7ff fd71 	bl	b0c <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    102a:	6923      	ldr	r3, [r4, #16]
    102c:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    102e:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    1030:	d220      	bcs.n	1074 <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    1032:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    1034:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1036:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1038:	4a16      	ldr	r2, [pc, #88]	; (1094 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    103a:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    103c:	4b16      	ldr	r3, [pc, #88]	; (1098 <ull_adv_time_update+0xa8>)
    103e:	1aa2      	subs	r2, r4, r2
    1040:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
    1044:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1046:	0912      	lsrs	r2, r2, #4
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1048:	2300      	movs	r3, #0
    104a:	440a      	add	r2, r1
    104c:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
    104e:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1050:	4912      	ldr	r1, [pc, #72]	; (109c <ull_adv_time_update+0xac>)
    1052:	9105      	str	r1, [sp, #20]
    1054:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1058:	2103      	movs	r1, #3
    105a:	b2d2      	uxtb	r2, r2
    105c:	9606      	str	r6, [sp, #24]
    105e:	9300      	str	r3, [sp, #0]
    1060:	4618      	mov	r0, r3
    1062:	f00a fb0f 	bl	b684 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1066:	4631      	mov	r1, r6
    1068:	f00c fe7e 	bl	dd68 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    106c:	b948      	cbnz	r0, 1082 <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
    106e:	6125      	str	r5, [r4, #16]
}
    1070:	b00a      	add	sp, #40	; 0x28
    1072:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    1074:	d902      	bls.n	107c <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    1076:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    1078:	2300      	movs	r3, #0
    107a:	e7dc      	b.n	1036 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    107c:	2000      	movs	r0, #0
}
    107e:	b00a      	add	sp, #40	; 0x28
    1080:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1082:	200c      	movs	r0, #12
}
    1084:	b00a      	add	sp, #40	; 0x28
    1086:	bd70      	pop	{r4, r5, r6, pc}
    1088:	1afd498d 	.word	0x1afd498d
    108c:	00000007 	.word	0x00000007
    1090:	3b9aca00 	.word	0x3b9aca00
    1094:	20002148 	.word	0x20002148
    1098:	38e38e39 	.word	0x38e38e39
    109c:	0000d371 	.word	0x0000d371

000010a0 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    10a0:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    10a2:	4c19      	ldr	r4, [pc, #100]	; (1108 <ll_scan_params_set+0x68>)
{
    10a4:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
    10a8:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    10ac:	f01c 0501 	ands.w	r5, ip, #1
    10b0:	d122      	bne.n	10f8 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
    10b2:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
    10b6:	0140      	lsls	r0, r0, #5
    10b8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
    10bc:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
    10be:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    10c2:	f00e 0e18 	and.w	lr, lr, #24
    10c6:	f000 0020 	and.w	r0, r0, #32
    10ca:	ea40 000e 	orr.w	r0, r0, lr
    10ce:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    10d2:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    10d4:	480d      	ldr	r0, [pc, #52]	; (110c <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
    10d6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    10da:	fba2 0100 	umull	r0, r1, r2, r0
    10de:	2391      	movs	r3, #145	; 0x91
    10e0:	fb03 1102 	mla	r1, r3, r2, r1
    10e4:	a306      	add	r3, pc, #24	; (adr r3, 1100 <ll_scan_params_set+0x60>)
    10e6:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
    10ea:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    10ee:	f7ff fd0d 	bl	b0c <__aeabi_uldivmod>
    10f2:	6420      	str	r0, [r4, #64]	; 0x40
}
    10f4:	4628      	mov	r0, r5
    10f6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    10f8:	250c      	movs	r5, #12
}
    10fa:	4628      	mov	r0, r5
    10fc:	bd38      	pop	{r3, r4, r5, pc}
    10fe:	bf00      	nop
    1100:	1afd498d 	.word	0x1afd498d
    1104:	00000007 	.word	0x00000007
    1108:	200021b4 	.word	0x200021b4
    110c:	84e72a00 	.word	0x84e72a00

00001110 <ull_scan_params_set>:
{
    1110:	b510      	push	{r4, lr}
    1112:	f89d c008 	ldrb.w	ip, [sp, #8]
    1116:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
    1118:	0149      	lsls	r1, r1, #5
    111a:	ea4f 00cc 	mov.w	r0, ip, lsl #3
    111e:	f000 0018 	and.w	r0, r0, #24
    1122:	f001 0c20 	and.w	ip, r1, #32
    1126:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
    1128:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
    112a:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    112e:	480c      	ldr	r0, [pc, #48]	; (1160 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
    1130:	f021 0138 	bic.w	r1, r1, #56	; 0x38
    1134:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1138:	2291      	movs	r2, #145	; 0x91
    113a:	fba3 0100 	umull	r0, r1, r3, r0
    113e:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
    1142:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1146:	a304      	add	r3, pc, #16	; (adr r3, 1158 <ull_scan_params_set+0x48>)
    1148:	e9d3 2300 	ldrd	r2, r3, [r3]
    114c:	f7ff fcde 	bl	b0c <__aeabi_uldivmod>
    1150:	6260      	str	r0, [r4, #36]	; 0x24
}
    1152:	bd10      	pop	{r4, pc}
    1154:	f3af 8000 	nop.w
    1158:	1afd498d 	.word	0x1afd498d
    115c:	00000007 	.word	0x00000007
    1160:	84e72a00 	.word	0x84e72a00
    1164:	00000000 	.word	0x00000000

00001168 <ull_scan_enable>:
{
    1168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    116c:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    116e:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1172:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    1176:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    117a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    117e:	f360 1386 	bfi	r3, r0, #6, #1
{
    1182:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    1184:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1188:	f00a fb6c 	bl	b864 <ll_addr_read>
	lll->chan = 0U;
    118c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1190:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    1192:	484d      	ldr	r0, [pc, #308]	; (12c8 <ull_scan_enable+0x160>)

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    1194:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
    1196:	f002 0279 	and.w	r2, r2, #121	; 0x79
    119a:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    119c:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
    11a0:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    11a4:	2291      	movs	r2, #145	; 0x91
    11a6:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    11aa:	e9c4 5505 	strd	r5, r5, [r4, #20]
    11ae:	a344      	add	r3, pc, #272	; (adr r3, 12c0 <ull_scan_enable+0x158>)
    11b0:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
    11b4:	7025      	strb	r5, [r4, #0]
    11b6:	f7ff fca9 	bl	b0c <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
    11ba:	2331      	movs	r3, #49	; 0x31
    11bc:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
    11c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
    11c2:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
    11c4:	3309      	adds	r3, #9
	    (ticks_interval -
    11c6:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    11ca:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
    11cc:	bf32      	itee	cc
    11ce:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
    11d0:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
    11d2:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    11d4:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    11d6:	f00a fb0d 	bl	b7f4 <ticker_ticks_now_get>
	if (!lll->conn) {
    11da:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
    11dc:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    11de:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
    11e2:	2b00      	cmp	r3, #0
    11e4:	d04c      	beq.n	1280 <ull_scan_enable+0x118>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    11e6:	4d39      	ldr	r5, [pc, #228]	; (12cc <ull_scan_enable+0x164>)
    11e8:	4b39      	ldr	r3, [pc, #228]	; (12d0 <ull_scan_enable+0x168>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    11ea:	f8cd 8020 	str.w	r8, [sp, #32]
    11ee:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    11f0:	1b65      	subs	r5, r4, r5
    11f2:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    11f6:	4834      	ldr	r0, [pc, #208]	; (12c8 <ull_scan_enable+0x160>)
    11f8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    11fa:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    11fe:	fba3 0100 	umull	r0, r1, r3, r0
    1202:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1204:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1208:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    120c:	6923      	ldr	r3, [r4, #16]
    120e:	9304      	str	r3, [sp, #16]
    1210:	4b30      	ldr	r3, [pc, #192]	; (12d4 <ull_scan_enable+0x16c>)
    1212:	9307      	str	r3, [sp, #28]
    1214:	4b30      	ldr	r3, [pc, #192]	; (12d8 <ull_scan_enable+0x170>)
    1216:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
    1218:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    121c:	a328      	add	r3, pc, #160	; (adr r3, 12c0 <ull_scan_enable+0x158>)
    121e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    1222:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1226:	f7ff fc71 	bl	b0c <__aeabi_uldivmod>
    122a:	4610      	mov	r0, r2
    122c:	4619      	mov	r1, r3
    122e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1232:	2300      	movs	r3, #0
    1234:	f7ff fc6a 	bl	b0c <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1238:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    123a:	3504      	adds	r5, #4
    123c:	b2ed      	uxtb	r5, r5
    123e:	462a      	mov	r2, r5
    1240:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1244:	463b      	mov	r3, r7
    1246:	2103      	movs	r1, #3
    1248:	f8cd a000 	str.w	sl, [sp]
    124c:	4650      	mov	r0, sl
    124e:	f00a f9a7 	bl	b5a0 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1252:	4641      	mov	r1, r8
    1254:	f00c fd88 	bl	dd68 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1258:	4605      	mov	r5, r0
    125a:	b968      	cbnz	r0, 1278 <ull_scan_enable+0x110>
	scan->is_enabled = 1U;
    125c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1260:	f043 0301 	orr.w	r3, r3, #1
    1264:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
    1268:	f00d fc2e 	bl	eac8 <ull_adv_is_enabled_get>
    126c:	4604      	mov	r4, r0
    126e:	b1f8      	cbz	r0, 12b0 <ull_scan_enable+0x148>
	return 0;
    1270:	4628      	mov	r0, r5
}
    1272:	b00c      	add	sp, #48	; 0x30
    1274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1278:	200c      	movs	r0, #12
}
    127a:	b00c      	add	sp, #48	; 0x30
    127c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
    1280:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1284:	6921      	ldr	r1, [r4, #16]
    1286:	4643      	mov	r3, r8
    1288:	aa0a      	add	r2, sp, #40	; 0x28
    128a:	2003      	movs	r0, #3
    128c:	f002 f914 	bl	34b8 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    1290:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1292:	2900      	cmp	r1, #0
    1294:	d0a7      	beq.n	11e6 <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1296:	4811      	ldr	r0, [pc, #68]	; (12dc <ull_scan_enable+0x174>)
    1298:	a309      	add	r3, pc, #36	; (adr r3, 12c0 <ull_scan_enable+0x158>)
    129a:	e9d3 2300 	ldrd	r2, r3, [r3]
    129e:	fba1 0100 	umull	r0, r1, r1, r0
    12a2:	f7ff fc33 	bl	b0c <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    12a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    12a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    12ac:	4407      	add	r7, r0
    12ae:	e79a      	b.n	11e6 <ull_scan_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(1));
    12b0:	4648      	mov	r0, r9
    12b2:	f011 fec3 	bl	1303c <ull_filter_adv_scan_state_cb>
	return 0;
    12b6:	4620      	mov	r0, r4
}
    12b8:	b00c      	add	sp, #48	; 0x30
    12ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12be:	bf00      	nop
    12c0:	1afd498d 	.word	0x1afd498d
    12c4:	00000007 	.word	0x00000007
    12c8:	84e72a00 	.word	0x84e72a00
    12cc:	200021b4 	.word	0x200021b4
    12d0:	38e38e39 	.word	0x38e38e39
    12d4:	0000d371 	.word	0x0000d371
    12d8:	0000ecd1 	.word	0x0000ecd1
    12dc:	3b9aca00 	.word	0x3b9aca00

000012e0 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    12e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_LL_SW_LLCP_LEGACY)
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    12e4:	f890 e0bc 	ldrb.w	lr, [r0, #188]	; 0xbc
    12e8:	f890 c0bb 	ldrb.w	ip, [r0, #187]	; 0xbb
    12ec:	45e6      	cmp	lr, ip
{
    12ee:	b08b      	sub	sp, #44	; 0x2c
    12f0:	4604      	mov	r4, r0
    12f2:	460e      	mov	r6, r1
    12f4:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    12f6:	d02e      	beq.n	1356 <ull_conn_llcp+0x76>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    12f8:	ebac 0c0e 	sub.w	ip, ip, lr
    12fc:	f00c 0c03 	and.w	ip, ip, #3
    1300:	f1bc 0f02 	cmp.w	ip, #2
    1304:	d00c      	beq.n	1320 <ull_conn_llcp+0x40>
		}
	}
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */

	/* Terminate Procedure Request */
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
    1306:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    130a:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    130e:	1a9b      	subs	r3, r3, r2
    1310:	b2db      	uxtb	r3, r3
    1312:	2b01      	cmp	r3, #1
    1314:	f000 817b 	beq.w	160e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x286>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    1318:	2000      	movs	r0, #0
	}

	/* Continue prepare */
	return 0;
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */
}
    131a:	b00b      	add	sp, #44	; 0x2c
    131c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1320:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
    1324:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    1328:	429a      	cmp	r2, r3
    132a:	d006      	beq.n	133a <ull_conn_llcp+0x5a>
			     LLCP_LENGTH_STATE_RESIZE) ||
    132c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			if ((conn->llcp_length.state ==
    1330:	f003 0306 	and.w	r3, r3, #6
    1334:	2b04      	cmp	r3, #4
    1336:	f000 83a9 	beq.w	1a8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x704>
		switch (conn->llcp_type) {
    133a:	f894 70bd 	ldrb.w	r7, [r4, #189]	; 0xbd
    133e:	1e7b      	subs	r3, r7, #1
    1340:	2b05      	cmp	r3, #5
    1342:	f200 8352 	bhi.w	19ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x662>
    1346:	e8df f013 	tbh	[pc, r3, lsl #1]
    134a:	001f      	.short	0x001f
    134c:	029c0326 	.word	0x029c0326
    1350:	02610350 	.word	0x02610350
    1354:	01cb      	.short	0x01cb
	    !conn->llcp_enc.pause_rx) {
    1356:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
	if ((conn->llcp_ack == conn->llcp_req) &&
    135a:	f013 0801 	ands.w	r8, r3, #1
    135e:	d1d2      	bne.n	1306 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1360:	f890 10e5 	ldrb.w	r1, [r0, #229]	; 0xe5
    1364:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
    1368:	428a      	cmp	r2, r1
    136a:	f000 834c 	beq.w	1a06 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x67e>
			conn->llcp_type = LLCP_CONN_UPD;
    136e:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1370:	f890 2184 	ldrb.w	r2, [r0, #388]	; 0x184
			conn->llcp_type = LLCP_CONN_UPD;
    1374:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1378:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
			conn->llcp_ack -= 2U;
    137c:	f1ae 0c02 	sub.w	ip, lr, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1380:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
    1382:	f880 c0bc 	strb.w	ip, [r0, #188]	; 0xbc
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1386:	d1d1      	bne.n	132c <ull_conn_llcp+0x4c>
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1388:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    138a:	8e67      	ldrh	r7, [r4, #50]	; 0x32
    138c:	441f      	add	r7, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    138e:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1392:	b2bf      	uxth	r7, r7
    1394:	19ea      	adds	r2, r5, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1396:	f013 0107 	ands.w	r1, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    139a:	b292      	uxth	r2, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    139c:	f040 83bc 	bne.w	1b18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x790>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    13a0:	f8b4 50c0 	ldrh.w	r5, [r4, #192]	; 0xc0
    13a4:	1b52      	subs	r2, r2, r5
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    13a6:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    13a8:	fa1f f982 	uxth.w	r9, r2
	} else if (instant_latency <= 0x7FFF) {
    13ac:	d4ab      	bmi.n	1306 <ull_conn_llcp+0x26>

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    13ae:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
    13b2:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
			conn->llcp_ack = conn->llcp_req;
    13b6:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb
    13ba:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    13be:	4293      	cmp	r3, r2
		conn->llcp_cu.ack = conn->llcp_cu.req;
    13c0:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    13c4:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    13c8:	d009      	beq.n	13de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    13ca:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    13ce:	f003 030f 	and.w	r3, r3, #15
    13d2:	2b06      	cmp	r3, #6
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    13d4:	bf04      	itt	eq
    13d6:	f884 215d 	strbeq.w	r2, [r4, #349]	; 0x15d

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    13da:	f8a4 10ac 	strheq.w	r1, [r4, #172]	; 0xac
	if (conn == conn_upd_curr) {
    13de:	4bb4      	ldr	r3, [pc, #720]	; (16b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x328>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    13e0:	f8d4 80e0 	ldr.w	r8, [r4, #224]	; 0xe0
	if (conn == conn_upd_curr) {
    13e4:	681a      	ldr	r2, [r3, #0]
    13e6:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    13e8:	bf04      	itt	eq
    13ea:	2200      	moveq	r2, #0
    13ec:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    13ee:	f1b8 0f00 	cmp.w	r8, #0
    13f2:	f000 8722 	beq.w	223a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xeb2>
    13f6:	f8d8 0000 	ldr.w	r0, [r8]
    13fa:	2800      	cmp	r0, #0
    13fc:	f000 871d 	beq.w	223a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xeb2>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1400:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    1404:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    1408:	6842      	ldr	r2, [r0, #4]
    140a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((conn->llcp_cu.interval != lll->interval) ||
    140e:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    1410:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1414:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
		if ((conn->llcp_cu.interval != lll->interval) ||
    1418:	f000 872a 	beq.w	2270 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee8>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    141c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1420:	f8a8 301e 	strh.w	r3, [r8, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1424:	2318      	movs	r3, #24
    1426:	f888 3004 	strb.w	r3, [r8, #4]
			cu->status = 0x00;
    142a:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    142c:	f8a8 c006 	strh.w	ip, [r8, #6]
			cu->latency = conn->llcp_cu.latency;
    1430:	f8a8 2020 	strh.w	r2, [r8, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1434:	f8a8 1022 	strh.w	r1, [r8, #34]	; 0x22
			cu->status = 0x00;
    1438:	f888 301c 	strb.w	r3, [r8, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    143c:	4641      	mov	r1, r8
    143e:	f00c fc1b 	bl	dc78 <ll_rx_put>
		ll_rx_sched();
    1442:	f00c fc23 	bl	dc8c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1446:	68a3      	ldr	r3, [r4, #8]
    1448:	2b00      	cmp	r3, #0
    144a:	da09      	bge.n	1460 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd8>
			uint32_t ticks_prepare_to_start =
    144c:	68e0      	ldr	r0, [r4, #12]
    144e:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1454:	4290      	cmp	r0, r2
    1456:	bf2c      	ite	cs
    1458:	1831      	addcs	r1, r6, r0
    145a:	18b1      	addcc	r1, r6, r2
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    145c:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    145e:	1ace      	subs	r6, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1460:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1462:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
		conn_interval_old = instant_latency * lll->interval;
    1466:	fb13 f309 	smulbb	r3, r3, r9
    146a:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    146c:	fbb3 f1f8 	udiv	r1, r3, r8
		conn_interval_new = latency * conn->llcp_cu.interval;
    1470:	fb18 f201 	smulbb	r2, r8, r1
    1474:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1476:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    1478:	fa1f f981 	uxth.w	r9, r1
		if (conn_interval_new > conn_interval_old) {
    147c:	f080 86cb 	bcs.w	2216 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1480:	1ad3      	subs	r3, r2, r3
    1482:	498c      	ldr	r1, [pc, #560]	; (16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>)
    1484:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1488:	fb02 f303 	mul.w	r3, r2, r3
    148c:	fba3 0101 	umull	r0, r1, r3, r1
    1490:	a385      	add	r3, pc, #532	; (adr r3, 16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>)
    1492:	e9d3 2300 	ldrd	r2, r3, [r3]
    1496:	f7ff fb39 	bl	b0c <__aeabi_uldivmod>
    149a:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    149e:	441e      	add	r6, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    14a0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    14a2:	441d      	add	r5, r3
				CONN_INT_UNIT_US) * CONN_INT_UNIT_US);
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
    14a4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    14a8:	1bef      	subs	r7, r5, r7
    14aa:	444f      	add	r7, r9
		conn_interval_us = conn->llcp_cu.interval *
    14ac:	f240 45e2 	movw	r5, #1250	; 0x4e2
		} else if (!lll->role) {
    14b0:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    14b2:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    14b4:	fb05 f508 	mul.w	r5, r5, r8
		} else if (!lll->role) {
    14b8:	f2c0 87b9 	blt.w	242e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10a6>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    14bc:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
    14c0:	487c      	ldr	r0, [pc, #496]	; (16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>)
    14c2:	a379      	add	r3, pc, #484	; (adr r3, 16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>)
    14c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    14c8:	fba1 0100 	umull	r0, r1, r1, r0
    14cc:	f7ff fb1e 	bl	b0c <__aeabi_uldivmod>
    14d0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    14d4:	3701      	adds	r7, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    14d6:	4978      	ldr	r1, [pc, #480]	; (16b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x330>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    14d8:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
		lll->latency = conn->llcp_cu.latency;
    14dc:	f8b4 00ea 	ldrh.w	r0, [r4, #234]	; 0xea

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    14e0:	4b76      	ldr	r3, [pc, #472]	; (16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>)
		lll->interval = conn->llcp_cu.interval;
    14e2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    14e6:	4429      	add	r1, r5
    14e8:	fbb1 f1f5 	udiv	r1, r1, r5
    14ec:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    14f0:	f242 7110 	movw	r1, #10000	; 0x2710
    14f4:	fb01 5202 	mla	r2, r1, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    14f8:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    14fa:	3a01      	subs	r2, #1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    14fc:	1d81      	adds	r1, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    14fe:	fbb2 f2f5 	udiv	r2, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1502:	fbb3 f3f5 	udiv	r3, r3, r5
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1506:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    150a:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    150c:	428a      	cmp	r2, r1
		lll->latency = conn->llcp_cu.latency;
    150e:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1510:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1514:	dd04      	ble.n	1520 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x198>
    1516:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    151a:	30fa      	adds	r0, #250	; 0xfa
    151c:	4402      	add	r2, r0
    151e:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1520:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1524:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
		if (conn->llcp_cu.cmd) {
    1528:	071a      	lsls	r2, r3, #28
			conn->supervision_expire = 0U;
    152a:	bf44      	itt	mi
    152c:	2300      	movmi	r3, #0
    152e:	f8a4 30a8 	strhmi.w	r3, [r4, #168]	; 0xa8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1532:	2102      	movs	r1, #2
    1534:	2001      	movs	r0, #1
    1536:	f015 f9db 	bl	168f0 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    153a:	2200      	movs	r2, #0
    153c:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    153e:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1540:	2001      	movs	r0, #1
    1542:	f008 fe2f 	bl	a1a4 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1546:	495e      	ldr	r1, [pc, #376]	; (16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>)
    1548:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    154c:	4620      	mov	r0, r4
    154e:	f008 fdb9 	bl	a0c4 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1552:	f100 0805 	add.w	r8, r0, #5
    1556:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    155a:	4b5a      	ldr	r3, [pc, #360]	; (16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>)
    155c:	9400      	str	r4, [sp, #0]
    155e:	4642      	mov	r2, r8
    1560:	2101      	movs	r1, #1
    1562:	2000      	movs	r0, #0
    1564:	f00a f8a6 	bl	b6b4 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1568:	f030 0302 	bics.w	r3, r0, #2
    156c:	d00c      	beq.n	1588 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x200>
    156e:	4a56      	ldr	r2, [pc, #344]	; (16c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x340>)
    1570:	4956      	ldr	r1, [pc, #344]	; (16cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x344>)
    1572:	4857      	ldr	r0, [pc, #348]	; (16d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x348>)
    1574:	f640 43cb 	movw	r3, #3275	; 0xccb
    1578:	f019 fd9d 	bl	1b0b6 <printk>
    157c:	4040      	eors	r0, r0
    157e:	f380 8811 	msr	BASEPRI, r0
    1582:	f04f 0003 	mov.w	r0, #3
    1586:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1588:	9408      	str	r4, [sp, #32]
    158a:	9406      	str	r4, [sp, #24]
    158c:	6923      	ldr	r3, [r4, #16]
    158e:	9304      	str	r3, [sp, #16]
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1590:	4c48      	ldr	r4, [pc, #288]	; (16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1592:	4b50      	ldr	r3, [pc, #320]	; (16d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34c>)
    1594:	9307      	str	r3, [sp, #28]
    1596:	4b50      	ldr	r3, [pc, #320]	; (16d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x350>)
    1598:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    159a:	fba5 5404 	umull	r5, r4, r5, r4
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    159e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    15a2:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    15a4:	4628      	mov	r0, r5
    15a6:	a340      	add	r3, pc, #256	; (adr r3, 16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>)
    15a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    15ac:	4621      	mov	r1, r4
    15ae:	f7ff faad 	bl	b0c <__aeabi_uldivmod>
    15b2:	4610      	mov	r0, r2
    15b4:	4619      	mov	r1, r3
    15b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    15ba:	2300      	movs	r3, #0
    15bc:	f7ff faa6 	bl	b0c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    15c0:	a339      	add	r3, pc, #228	; (adr r3, 16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>)
    15c2:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    15c6:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    15c8:	4621      	mov	r1, r4
    15ca:	4628      	mov	r0, r5
    15cc:	f7ff fa9e 	bl	b0c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    15d0:	4633      	mov	r3, r6
    15d2:	e9cd 7000 	strd	r7, r0, [sp]
    15d6:	4642      	mov	r2, r8
    15d8:	2101      	movs	r1, #1
    15da:	2000      	movs	r0, #0
    15dc:	f009 ffe0 	bl	b5a0 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    15e0:	f030 0302 	bics.w	r3, r0, #2
    15e4:	d00c      	beq.n	1600 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x278>
    15e6:	4a38      	ldr	r2, [pc, #224]	; (16c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x340>)
    15e8:	4938      	ldr	r1, [pc, #224]	; (16cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x344>)
    15ea:	4839      	ldr	r0, [pc, #228]	; (16d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x348>)
    15ec:	f640 43e5 	movw	r3, #3301	; 0xce5
    15f0:	f019 fd61 	bl	1b0b6 <printk>
    15f4:	4040      	eors	r0, r0
    15f6:	f380 8811 	msr	BASEPRI, r0
    15fa:	f04f 0003 	mov.w	r0, #3
    15fe:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1600:	f1b9 0f00 	cmp.w	r9, #0
    1604:	f040 86f4 	bne.w	23f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1068>
				return -ECANCELED;
    1608:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    160c:	e685      	b.n	131a <ull_conn_llcp+0x3a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    160e:	4833      	ldr	r0, [pc, #204]	; (16dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x354>)
    1610:	f008 fd22 	bl	a058 <mem_acquire>
		if (tx) {
    1614:	2800      	cmp	r0, #0
    1616:	d038      	beq.n	168a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x302>
			conn->llcp_terminate.ack--;
    1618:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    161c:	3b01      	subs	r3, #1
    161e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1622:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1624:	2202      	movs	r2, #2
    1626:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1628:	f043 0303 	orr.w	r3, r3, #3
    162c:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    162e:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
    1630:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_tx->llctrl.terminate_ind.error_code =
    1634:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		if (!conn->tx_ctrl) {
    1638:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			pdu_tx->llctrl.terminate_ind.error_code =
    163c:	7202      	strb	r2, [r0, #8]
	if (
    163e:	b1b3      	cbz	r3, 166e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e6>
	    !conn->llcp_enc.pause_tx &&
    1640:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1644:	0795      	lsls	r5, r2, #30
    1646:	d412      	bmi.n	166e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e6>
	    !conn->llcp_phy.pause_tx &&
    1648:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    164c:	07d2      	lsls	r2, r2, #31
    164e:	d40e      	bmi.n	166e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e6>
		if (conn->tx_head == conn->tx_data) {
    1650:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1654:	4293      	cmp	r3, r2
    1656:	f000 8700 	beq.w	245a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10d2>
		} else if (!conn->tx_ctrl) {
    165a:	b959      	cbnz	r1, 1674 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ec>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    165c:	791a      	ldrb	r2, [r3, #4]
    165e:	f002 0203 	and.w	r2, r2, #3
    1662:	2a03      	cmp	r2, #3
    1664:	f001 809c 	beq.w	27a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1418>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1668:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    166c:	e004      	b.n	1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>
		if (!conn->tx_ctrl) {
    166e:	2900      	cmp	r1, #0
    1670:	f000 847f 	beq.w	1f72 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbea>
	tx->next = conn->tx_ctrl_last->next;
    1674:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1678:	681a      	ldr	r2, [r3, #0]
    167a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    167c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    167e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    1680:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1684:	2b00      	cmp	r3, #0
    1686:	f000 8205 	beq.w	1a94 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70c>
		if (!conn->procedure_expire) {
    168a:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    168e:	2800      	cmp	r0, #0
    1690:	f47f ae42 	bne.w	1318 <ull_conn_llcp+0x38>
			conn->procedure_expire = conn->supervision_reload;
    1694:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			if (conn->procedure_expire <= 1U) {
    1698:	2b01      	cmp	r3, #1
    169a:	f240 8465 	bls.w	1f68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbe0>
			conn->procedure_expire = conn->supervision_reload;
    169e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    16a2:	e639      	b.n	1318 <ull_conn_llcp+0x38>
    16a4:	f3af 8000 	nop.w
    16a8:	1afd498d 	.word	0x1afd498d
    16ac:	00000007 	.word	0x00000007
    16b0:	20002210 	.word	0x20002210
    16b4:	3b9aca00 	.word	0x3b9aca00
    16b8:	026259ff 	.word	0x026259ff
    16bc:	01c9c37f 	.word	0x01c9c37f
    16c0:	200012b0 	.word	0x200012b0
    16c4:	0000f3e5 	.word	0x0000f3e5
    16c8:	00020800 	.word	0x00020800
    16cc:	0002091c 	.word	0x0002091c
    16d0:	000203b4 	.word	0x000203b4
    16d4:	0000f38d 	.word	0x0000f38d
    16d8:	00011edd 	.word	0x00011edd
    16dc:	200022a4 	.word	0x200022a4
			event_counter = lll->event_counter +
    16e0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    16e2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    16e4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    16e8:	440a      	add	r2, r1
    16ea:	442a      	add	r2, r5
    16ec:	b295      	uxth	r5, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    16ee:	07da      	lsls	r2, r3, #31
    16f0:	4619      	mov	r1, r3
    16f2:	f100 8277 	bmi.w	1be4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x85c>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    16f6:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
    16fa:	1aad      	subs	r5, r5, r2
    16fc:	0428      	lsls	r0, r5, #16
    16fe:	f53f ae02 	bmi.w	1306 <ull_conn_llcp+0x26>
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
		}

		/* apply new phy */
		old_tx = lll->phy_tx;
    1702:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		old_rx = lll->phy_rx;
    1706:	f894 8047 	ldrb.w	r8, [r4, #71]	; 0x47
			conn->llcp_ack = conn->llcp_req;
    170a:	f894 00bb 	ldrb.w	r0, [r4, #187]	; 0xbb

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    170e:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
			conn->llcp_ack = conn->llcp_req;
    1712:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    1716:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
    171a:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
    171e:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
    1722:	f040 859b 	bne.w	225c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xed4>
		uint16_t eff_tx_time = lll->max_tx_time;
    1726:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    172a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    172e:	d008      	beq.n	1742 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3ba>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1730:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    1734:	095b      	lsrs	r3, r3, #5
    1736:	f363 0202 	bfi	r2, r3, #0, #3
    173a:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    173e:	f44f 77a4 	mov.w	r7, #328	; 0x148

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1742:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    1746:	2d00      	cmp	r5, #0
    1748:	f000 85af 	beq.w	22aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf22>
    174c:	6828      	ldr	r0, [r5, #0]
    174e:	2800      	cmp	r0, #0
    1750:	f000 85ab 	beq.w	22aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf22>
		conn->llcp_rx = rx->hdr.link->mem;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1754:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		    (lll->phy_rx == old_rx)) {
    1758:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
		conn->llcp_rx = rx->hdr.link->mem;
    175c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    1760:	f8c4 c0e0 	str.w	ip, [r4, #224]	; 0xe0
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1764:	0789      	lsls	r1, r1, #30
    1766:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
    176a:	f3c2 0e02 	ubfx	lr, r2, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    176e:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
    1772:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1776:	d402      	bmi.n	177e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f6>
    1778:	4599      	cmp	r9, r3
    177a:	f000 868a 	beq.w	2492 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x110a>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    177e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1780:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1782:	231c      	movs	r3, #28
    1784:	712b      	strb	r3, [r5, #4]

		upd = (void *)rx->pdu;
		upd->status = 0U;
    1786:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    1788:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
    178c:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
    1790:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1792:	4629      	mov	r1, r5
    1794:	f00c fa70 	bl	dc78 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    1798:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    179c:	2d00      	cmp	r5, #0
    179e:	f000 8613 	beq.w	23c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1040>
    17a2:	6828      	ldr	r0, [r5, #0]
    17a4:	2800      	cmp	r0, #0
    17a6:	f000 860f 	beq.w	23c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1040>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    17aa:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		conn->llcp_rx = rx->hdr.link->mem;
    17ae:	6842      	ldr	r2, [r0, #4]
    17b0:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		if ((eff_tx_time <= lll->max_tx_time) &&
    17b4:	42b3      	cmp	r3, r6
    17b6:	d30a      	bcc.n	17ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x446>
    17b8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    17bc:	d807      	bhi.n	17ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x446>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    17be:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
		    (lll->max_tx_time <= max_tx_time) &&
    17c2:	42bb      	cmp	r3, r7
    17c4:	d303      	bcc.n	17ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x446>
		    (eff_rx_time <= lll->max_rx_time) &&
    17c6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    17ca:	f240 87f1 	bls.w	27b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1428>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    17ce:	f8a4 6042 	strh.w	r6, [r4, #66]	; 0x42
		lll->max_rx_time = eff_rx_time;
    17d2:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    17d6:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    17d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    17da:	80ea      	strh	r2, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    17dc:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    17e0:	f043 0303 	orr.w	r3, r3, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    17e4:	2109      	movs	r1, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    17e6:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    17ea:	7769      	strb	r1, [r5, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    17ec:	772b      	strb	r3, [r5, #28]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    17ee:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    17f2:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    17f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    17f6:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    17f8:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    17fa:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    17fc:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    17fe:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    1800:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1802:	f00c fa39 	bl	dc78 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    1806:	f00c fa41 	bl	dc8c <ll_rx_sched>
    180a:	e57c      	b.n	1306 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    180c:	48cb      	ldr	r0, [pc, #812]	; (1b3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b4>)
    180e:	f008 fc23 	bl	a058 <mem_acquire>
	if (tx) {
    1812:	2800      	cmp	r0, #0
    1814:	f43f ad77 	beq.w	1306 <ull_conn_llcp+0x26>
		conn->llcp_ack = conn->llcp_req;
    1818:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    181c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1820:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1822:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1824:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    1826:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    182a:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    182e:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1830:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1832:	71c1      	strb	r1, [r0, #7]
		if (!conn->tx_ctrl) {
    1834:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
	if (
    1838:	2b00      	cmp	r3, #0
    183a:	f000 83a3 	beq.w	1f84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbfc>
	    !conn->llcp_enc.pause_tx &&
    183e:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1842:	078d      	lsls	r5, r1, #30
    1844:	f100 839e 	bmi.w	1f84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbfc>
	    !conn->llcp_phy.pause_tx &&
    1848:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    184c:	07c9      	lsls	r1, r1, #31
    184e:	f100 8399 	bmi.w	1f84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbfc>
		if (conn->tx_head == conn->tx_data) {
    1852:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    1856:	428b      	cmp	r3, r1
    1858:	f000 8767 	beq.w	272a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13a2>
		} else if (!conn->tx_ctrl) {
    185c:	2a00      	cmp	r2, #0
    185e:	f000 87e0 	beq.w	2822 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x149a>
	tx->next = conn->tx_ctrl_last->next;
    1862:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1866:	681a      	ldr	r2, [r3, #0]
    1868:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    186a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    186c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    186e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1872:	2b00      	cmp	r3, #0
    1874:	f000 85b8 	beq.w	23e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1060>
		conn->procedure_expire = conn->procedure_reload;
    1878:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    187c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    1880:	e541      	b.n	1306 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
    1882:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    1886:	f013 0503 	ands.w	r5, r3, #3
    188a:	f47f ad3c 	bne.w	1306 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    188e:	48ab      	ldr	r0, [pc, #684]	; (1b3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b4>)
    1890:	f008 fbe2 	bl	a058 <mem_acquire>
	if (!tx) {
    1894:	4606      	mov	r6, r0
    1896:	2800      	cmp	r0, #0
    1898:	f43f ad35 	beq.w	1306 <ull_conn_llcp+0x26>
	if (!lll->role) {
    189c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    18a0:	2b00      	cmp	r3, #0
    18a2:	f280 82fd 	bge.w	1ea0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb18>
	else if (!lll->enc_rx) {
    18a6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    18aa:	0719      	lsls	r1, r3, #28
    18ac:	f100 860e 	bmi.w	24cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1144>
		if (conn->llcp.encryption.error_code) {
    18b0:	f894 50cd 	ldrb.w	r5, [r4, #205]	; 0xcd
    18b4:	2d00      	cmp	r5, #0
    18b6:	f040 86c5 	bne.w	2644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12bc>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    18ba:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    18be:	463b      	mov	r3, r7
    18c0:	462a      	mov	r2, r5
    18c2:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    18c6:	f204 1049 	addw	r0, r4, #329	; 0x149
    18ca:	f014 fb45 	bl	15f58 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    18ce:	2210      	movs	r2, #16
    18d0:	4639      	mov	r1, r7
    18d2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    18d6:	f01a fa28 	bl	1bd2a <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    18da:	2208      	movs	r2, #8
    18dc:	f104 0178 	add.w	r1, r4, #120	; 0x78
    18e0:	f104 0099 	add.w	r0, r4, #153	; 0x99
    18e4:	f01a fa21 	bl	1bd2a <memcpy>
			lll->ccm_rx.direction = 1U;
    18e8:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
			lll->ccm_tx.direction = 0U;
    18ec:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
			lll->ccm_rx.counter = 0U;
    18f0:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
			lll->ccm_rx.direction = 1U;
    18f4:	f043 0301 	orr.w	r3, r3, #1
    18f8:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
			lll->enc_rx = 1U;
    18fc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_rx.counter = 0U;
    1900:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
			lll->ccm_tx.direction = 0U;
    1904:	f365 0200 	bfi	r2, r5, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1908:	2101      	movs	r1, #1
			lll->enc_rx = 1U;
    190a:	f043 0308 	orr.w	r3, r3, #8
			lll->ccm_tx.direction = 0U;
    190e:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
			lll->enc_rx = 1U;
    1912:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			lll->ccm_tx.counter = 0U;
    1916:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
			lll->ccm_rx.counter = 0U;
    191a:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    191e:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    1922:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    1926:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    192a:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    192e:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1932:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1934:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    1936:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    193a:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    193e:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1940:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    1942:	71f1      	strb	r1, [r6, #7]
	if (
    1944:	2b00      	cmp	r3, #0
    1946:	f000 8326 	beq.w	1f96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0e>
	    !conn->llcp_enc.pause_tx &&
    194a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    194e:	0790      	lsls	r0, r2, #30
    1950:	f100 8321 	bmi.w	1f96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0e>
	    !conn->llcp_phy.pause_tx &&
    1954:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1958:	07d1      	lsls	r1, r2, #31
    195a:	f100 831c 	bmi.w	1f96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0e>
		if (conn->tx_head == conn->tx_data) {
    195e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1962:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    1966:	428b      	cmp	r3, r1
    1968:	f000 82f1 	beq.w	1f4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc6>
		} else if (!conn->tx_ctrl) {
    196c:	2a00      	cmp	r2, #0
    196e:	f000 8770 	beq.w	2852 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ca>
	tx->next = conn->tx_ctrl_last->next;
    1972:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1976:	681a      	ldr	r2, [r3, #0]
    1978:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    197a:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    197c:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    197e:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1982:	2b00      	cmp	r3, #0
    1984:	f000 8565 	beq.w	2452 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10ca>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    1988:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    198c:	f043 0303 	orr.w	r3, r3, #3
    1990:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    1994:	e4b7      	b.n	1306 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    1996:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1998:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
    199a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			event_counter = lll->event_counter +
    199e:	440a      	add	r2, r1
    19a0:	442a      	add	r2, r5
	if (conn->llcp.chan_map.initiate) {
    19a2:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    19a4:	b295      	uxth	r5, r2
	if (conn->llcp.chan_map.initiate) {
    19a6:	f100 80d1 	bmi.w	1b4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    19aa:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    19ae:	1aad      	subs	r5, r5, r2
    19b0:	0428      	lsls	r0, r5, #16
    19b2:	f53f aca8 	bmi.w	1306 <ull_conn_llcp+0x26>
			conn->llcp_ack = conn->llcp_req;
    19b6:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    19ba:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
		memcpy(&lll->data_chan_map[0],
    19be:	f104 0534 	add.w	r5, r4, #52	; 0x34
    19c2:	2205      	movs	r2, #5
    19c4:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    19c8:	4628      	mov	r0, r5
    19ca:	f01a f9ae 	bl	1bd2a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    19ce:	2105      	movs	r1, #5
    19d0:	4628      	mov	r0, r5
    19d2:	f008 fd17 	bl	a404 <util_ones_count_get>
		lll->data_chan_count =
    19d6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    19da:	2201      	movs	r2, #1
		lll->data_chan_count =
    19dc:	f360 0305 	bfi	r3, r0, #0, #6
    19e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    19e4:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
    19e8:	e48d      	b.n	1306 <ull_conn_llcp+0x26>
			LL_ASSERT(0);
    19ea:	4a55      	ldr	r2, [pc, #340]	; (1b40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b8>)
    19ec:	4955      	ldr	r1, [pc, #340]	; (1b44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7bc>)
    19ee:	4856      	ldr	r0, [pc, #344]	; (1b48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c0>)
    19f0:	f240 43e1 	movw	r3, #1249	; 0x4e1
    19f4:	f019 fb5f 	bl	1b0b6 <printk>
    19f8:	4040      	eors	r0, r0
    19fa:	f380 8811 	msr	BASEPRI, r0
    19fe:	f04f 0003 	mov.w	r0, #3
    1a02:	df02      	svc	2
			break;
    1a04:	e47f      	b.n	1306 <ull_conn_llcp+0x26>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1a06:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    1a0a:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
    1a0e:	42ba      	cmp	r2, r7
    1a10:	d143      	bne.n	1a9a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x712>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    1a12:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
    1a16:	f890 7110 	ldrb.w	r7, [r0, #272]	; 0x110
    1a1a:	42ba      	cmp	r2, r7
    1a1c:	f000 82c6 	beq.w	1fac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc24>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1a20:	1bd2      	subs	r2, r2, r7
    1a22:	07d0      	lsls	r0, r2, #31
    1a24:	f57f ac6f 	bpl.w	1306 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
    1a28:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    1a2c:	07d9      	lsls	r1, r3, #31
    1a2e:	f140 85b5 	bpl.w	259c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1214>
	} else if (conn->llcp_version.rx) {
    1a32:	0798      	lsls	r0, r3, #30
    1a34:	f140 85ad 	bpl.w	2592 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x120a>
		rx = ll_pdu_rx_alloc();
    1a38:	f00c f94c 	bl	dcd4 <ll_pdu_rx_alloc>
		if (!rx) {
    1a3c:	4601      	mov	r1, r0
    1a3e:	b300      	cbz	r0, 1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
		conn->llcp_version.ack = conn->llcp_version.req;
    1a40:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    1a44:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		rx->hdr.handle = conn->lll.handle;
    1a48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1a4a:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1a4c:	2303      	movs	r3, #3
    1a4e:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1a50:	7f03      	ldrb	r3, [r0, #28]
    1a52:	f043 0303 	orr.w	r3, r3, #3
    1a56:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1a58:	2306      	movs	r3, #6
    1a5a:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1a5c:	230c      	movs	r3, #12
    1a5e:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    1a60:	f894 3113 	ldrb.w	r3, [r4, #275]	; 0x113
    1a64:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    1a68:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    1a6c:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    1a70:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    1a74:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
	ll_rx_put(rx->hdr.link, rx);
    1a78:	6808      	ldr	r0, [r1, #0]
    1a7a:	f00c f8fd 	bl	dc78 <ll_rx_put>
	ll_rx_sched();
    1a7e:	f00c f905 	bl	dc8c <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1a82:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    1a86:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
    1a8a:	e435      	b.n	12f8 <ull_conn_llcp+0x18>
				event_len_prep(conn);
    1a8c:	4620      	mov	r0, r4
    1a8e:	f00d fd97 	bl	f5c0 <event_len_prep>
    1a92:	e452      	b.n	133a <ull_conn_llcp+0x5a>
		conn->tx_data_last = tx;
    1a94:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    1a98:	e5f7      	b.n	168a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x302>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1a9a:	1bd2      	subs	r2, r2, r7
    1a9c:	07d1      	lsls	r1, r2, #31
    1a9e:	f57f ac32 	bpl.w	1306 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
    1aa2:	f890 10ba 	ldrb.w	r1, [r0, #186]	; 0xba
    1aa6:	f011 0701 	ands.w	r7, r1, #1
    1aaa:	f000 8425 	beq.w	22f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf70>
		rx = ll_pdu_rx_alloc();
    1aae:	f00c f911 	bl	dcd4 <ll_pdu_rx_alloc>
		if (!rx) {
    1ab2:	4607      	mov	r7, r0
    1ab4:	2800      	cmp	r0, #0
    1ab6:	d0e4      	beq.n	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    1ab8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    1abc:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1ac0:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1ac2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1ac4:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1ac6:	f043 0303 	orr.w	r3, r3, #3
    1aca:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1acc:	2309      	movs	r3, #9
    1ace:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1ad0:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1ad2:	2303      	movs	r3, #3
    1ad4:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1ad6:	4641      	mov	r1, r8
    1ad8:	2208      	movs	r2, #8
    1ada:	3020      	adds	r0, #32
    1adc:	f01a f930 	bl	1bd40 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
    1ae0:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1ae4:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    1ae6:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
    1aea:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1aee:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
    1af2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    1af4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    1af8:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
    1afc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1b00:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    1b02:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
    1b06:	0a12      	lsrs	r2, r2, #8
    1b08:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
    1b0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    1b10:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
    1b14:	4639      	mov	r1, r7
    1b16:	e7af      	b.n	1a78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f0>
		switch (conn->llcp_cu.state) {
    1b18:	1e4b      	subs	r3, r1, #1
    1b1a:	2b04      	cmp	r3, #4
    1b1c:	f201 8126 	bhi.w	2d6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19e4>
    1b20:	a101      	add	r1, pc, #4	; (adr r1, 1b28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a0>)
    1b22:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1b26:	bf00      	nop
    1b28:	00001d8d 	.word	0x00001d8d
    1b2c:	00001cad 	.word	0x00001cad
    1b30:	00001307 	.word	0x00001307
    1b34:	00001d93 	.word	0x00001d93
    1b38:	00001e03 	.word	0x00001e03
    1b3c:	200022a4 	.word	0x200022a4
    1b40:	00020800 	.word	0x00020800
    1b44:	00020414 	.word	0x00020414
    1b48:	000203b4 	.word	0x000203b4
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b4c:	48cb      	ldr	r0, [pc, #812]	; (1e7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf4>)
    1b4e:	f008 fa83 	bl	a058 <mem_acquire>
		if (tx) {
    1b52:	4606      	mov	r6, r0
    1b54:	2800      	cmp	r0, #0
    1b56:	f43f abd6 	beq.w	1306 <ull_conn_llcp+0x26>
						      conn->lll.latency + 6;
    1b5a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    1b5c:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b60:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    1b62:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
    1b64:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
    1b68:	442a      	add	r2, r5
			conn->llcp.chan_map.initiate = 0U;
    1b6a:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
			conn->llcp.chan_map.instant = event_counter +
    1b6e:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b72:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1b76:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
    1b78:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b7a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1b7c:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1b7e:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1b80:	f104 01c1 	add.w	r1, r4, #193	; 0xc1
    1b84:	2205      	movs	r2, #5
    1b86:	3008      	adds	r0, #8
    1b88:	f01a f8cf 	bl	1bd2a <memcpy>
	    conn->tx_head &&
    1b8c:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1b90:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    1b94:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
    1b98:	2b00      	cmp	r3, #0
    1b9a:	f000 8432 	beq.w	2402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x107a>
	    !conn->llcp_enc.pause_tx &&
    1b9e:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1ba2:	0797      	lsls	r7, r2, #30
    1ba4:	f100 842d 	bmi.w	2402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x107a>
	    !conn->llcp_phy.pause_tx &&
    1ba8:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1bac:	07d5      	lsls	r5, r2, #31
    1bae:	f100 8428 	bmi.w	2402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x107a>
		if (conn->tx_head == conn->tx_data) {
    1bb2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1bb6:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    1bba:	428b      	cmp	r3, r1
    1bbc:	f000 863b 	beq.w	2836 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ae>
		} else if (!conn->tx_ctrl) {
    1bc0:	2a00      	cmp	r2, #0
    1bc2:	f000 8727 	beq.w	2a14 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x168c>
	tx->next = conn->tx_ctrl_last->next;
    1bc6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1bca:	681a      	ldr	r2, [r3, #0]
    1bcc:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1bce:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    1bd0:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
    1bd2:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	f47f ab95 	bne.w	1306 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    1bdc:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    1be0:	f7ff bb91 	b.w	1306 <ull_conn_llcp+0x26>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
    1be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    1be8:	2200      	movs	r2, #0
    1bea:	f008 faa3 	bl	a134 <memq_peek>
    1bee:	4606      	mov	r6, r0
    1bf0:	2800      	cmp	r0, #0
    1bf2:	f47f ab88 	bne.w	1306 <ull_conn_llcp+0x26>
		rx = ll_pdu_rx_alloc_peek(2);
    1bf6:	2002      	movs	r0, #2
    1bf8:	f00c f84e 	bl	dc98 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1bfc:	4680      	mov	r8, r0
    1bfe:	2800      	cmp	r0, #0
    1c00:	f43f ab81 	beq.w	1306 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1c04:	489d      	ldr	r0, [pc, #628]	; (1e7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf4>)
    1c06:	f008 fa27 	bl	a058 <mem_acquire>
		if (!tx) {
    1c0a:	4607      	mov	r7, r0
    1c0c:	2800      	cmp	r0, #0
    1c0e:	f43f ab7a 	beq.w	1306 <ull_conn_llcp+0x26>
		conn->llcp.phy_upd_ind.initiate = 0U;
    1c12:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    1c16:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    1c1a:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    1c1e:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
    1c22:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    1c26:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		if (!((conn->llcp.phy_upd_ind.tx |
    1c2a:	b2db      	uxtb	r3, r3
    1c2c:	f040 8596 	bne.w	275c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13d4>
			conn->llcp_ack = conn->llcp_req;
    1c30:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
			conn->llcp.phy_upd_ind.instant = 0U;
    1c34:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
			if (conn->llcp.phy_upd_ind.cmd) {
    1c38:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    1c3a:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			if (conn->llcp.phy_upd_ind.cmd) {
    1c3e:	f100 85c0 	bmi.w	27c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x143a>
    1c42:	4633      	mov	r3, r6
    1c44:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    1c46:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
    1c48:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    1c4a:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
    1c4c:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    1c4e:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
    1c50:	2218      	movs	r2, #24
	    conn->tx_head &&
    1c52:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		if (!conn->tx_ctrl) {
    1c56:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		pdu_ctrl_tx->llctrl.opcode =
    1c5a:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c5c:	793a      	ldrb	r2, [r7, #4]
    1c5e:	f042 0203 	orr.w	r2, r2, #3
    1c62:	713a      	strb	r2, [r7, #4]
	if (
    1c64:	2b00      	cmp	r3, #0
    1c66:	f000 8527 	beq.w	26b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1330>
	    !conn->llcp_enc.pause_tx &&
    1c6a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1c6e:	0796      	lsls	r6, r2, #30
    1c70:	f100 8522 	bmi.w	26b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1330>
	    !conn->llcp_phy.pause_tx &&
    1c74:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1c78:	07d5      	lsls	r5, r2, #31
    1c7a:	f100 851d 	bmi.w	26b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1330>
		if (conn->tx_head == conn->tx_data) {
    1c7e:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1c82:	4293      	cmp	r3, r2
    1c84:	f000 86a2 	beq.w	29cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1644>
		} else if (!conn->tx_ctrl) {
    1c88:	2900      	cmp	r1, #0
    1c8a:	f000 86dd 	beq.w	2a48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16c0>
	tx->next = conn->tx_ctrl_last->next;
    1c8e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1c92:	681a      	ldr	r2, [r3, #0]
    1c94:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    1c96:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
    1c98:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1c9c:	683b      	ldr	r3, [r7, #0]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	f47f ab31 	bne.w	1306 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    1ca4:	f8c4 71ac 	str.w	r7, [r4, #428]	; 0x1ac
    1ca8:	f7ff bb2d 	b.w	1306 <ull_conn_llcp+0x26>
		switch (conn->llcp_cu.state) {
    1cac:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 1e80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf8>
		rx = ll_pdu_rx_alloc_peek(1);
    1cb0:	2001      	movs	r0, #1
    1cb2:	f00b fff1 	bl	dc98 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1cb6:	4607      	mov	r7, r0
    1cb8:	2800      	cmp	r0, #0
    1cba:	f43f ab24 	beq.w	1306 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1cbe:	486f      	ldr	r0, [pc, #444]	; (1e7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf4>)
    1cc0:	f008 f9ca 	bl	a058 <mem_acquire>
		if (!tx) {
    1cc4:	4605      	mov	r5, r0
    1cc6:	2800      	cmp	r0, #0
    1cc8:	f43f ab1d 	beq.w	1306 <ull_conn_llcp+0x26>
	if (!conn_upd_curr) {
    1ccc:	4b6d      	ldr	r3, [pc, #436]	; (1e84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xafc>)
    1cce:	681a      	ldr	r2, [r3, #0]
    1cd0:	2a00      	cmp	r2, #0
    1cd2:	f000 845b 	beq.w	258c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1204>
		(void)ll_pdu_rx_alloc();
    1cd6:	f00b fffd 	bl	dcd4 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    1cda:	683b      	ldr	r3, [r7, #0]
    1cdc:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    1ce0:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ce2:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
    1ce4:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ce8:	f043 0303 	orr.w	r3, r3, #3
    1cec:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1cee:	230c      	movs	r3, #12
    1cf0:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1cf2:	2300      	movs	r3, #0
    1cf4:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1cf6:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    1cfa:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1cfc:	4a62      	ldr	r2, [pc, #392]	; (1e88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb00>)
    1cfe:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    1d02:	fba2 2303 	umull	r2, r3, r2, r3
    1d06:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1d08:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1d0c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
    1d10:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1d14:	f8b4 30ea 	ldrh.w	r3, [r4, #234]	; 0xea
    1d18:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1d1c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    1d20:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    1d24:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    1d28:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    1d2c:	2203      	movs	r2, #3
    1d2e:	f362 0302 	bfi	r3, r2, #0, #3
    1d32:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1d36:	68a3      	ldr	r3, [r4, #8]
    1d38:	2b00      	cmp	r3, #0
    1d3a:	da0a      	bge.n	1d52 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ca>
			uint32_t ticks_prepare_to_start =
    1d3c:	68e0      	ldr	r0, [r4, #12]
    1d3e:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    1d40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    1d44:	4290      	cmp	r0, r2
    1d46:	bf2c      	ite	cs
    1d48:	1831      	addcs	r1, r6, r0
    1d4a:	18b1      	addcc	r1, r6, r2
    1d4c:	1acb      	subs	r3, r1, r3
    1d4e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1d52:	4b4e      	ldr	r3, [pc, #312]	; (1e8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb04>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1d54:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
    1d56:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
    1d58:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1d5c:	2102      	movs	r1, #2
    1d5e:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    1d60:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1d64:	f008 fa50 	bl	a208 <mayfly_enqueue>
		LL_ASSERT(!retval);
    1d68:	2800      	cmp	r0, #0
    1d6a:	f43f aacc 	beq.w	1306 <ull_conn_llcp+0x26>
    1d6e:	4a48      	ldr	r2, [pc, #288]	; (1e90 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb08>)
    1d70:	4948      	ldr	r1, [pc, #288]	; (1e94 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0c>)
    1d72:	4849      	ldr	r0, [pc, #292]	; (1e98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb10>)
    1d74:	f640 3373 	movw	r3, #2931	; 0xb73
    1d78:	f019 f99d 	bl	1b0b6 <printk>
    1d7c:	4040      	eors	r0, r0
    1d7e:	f380 8811 	msr	BASEPRI, r0
    1d82:	f04f 0003 	mov.w	r0, #3
    1d86:	df02      	svc	2
    1d88:	f7ff babd 	b.w	1306 <ull_conn_llcp+0x26>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    1d8c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1e9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb14>
    1d90:	e78e      	b.n	1cb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x928>
						      conn->lll.latency + 6;
    1d92:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1d94:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    1d98:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
	    conn->tx_head &&
    1d9c:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
						      conn->lll.latency + 6;
    1da0:	3306      	adds	r3, #6
    1da2:	441a      	add	r2, r3
    1da4:	b293      	uxth	r3, r2
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1da6:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    1daa:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    1dae:	f1a5 0209 	sub.w	r2, r5, #9
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1db2:	812b      	strh	r3, [r5, #8]
		if (!conn->tx_ctrl) {
    1db4:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1db8:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (
    1dbc:	2900      	cmp	r1, #0
    1dbe:	f000 83ce 	beq.w	255e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11d6>
	    !conn->llcp_enc.pause_tx &&
    1dc2:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1dc6:	0787      	lsls	r7, r0, #30
    1dc8:	f100 83c9 	bmi.w	255e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11d6>
	    !conn->llcp_phy.pause_tx &&
    1dcc:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    1dd0:	07c6      	lsls	r6, r0, #31
    1dd2:	f100 83c4 	bmi.w	255e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11d6>
		if (conn->tx_head == conn->tx_data) {
    1dd6:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    1dda:	4281      	cmp	r1, r0
    1ddc:	f000 859e 	beq.w	291c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1594>
		} else if (!conn->tx_ctrl) {
    1de0:	2b00      	cmp	r3, #0
    1de2:	f000 866e 	beq.w	2ac2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x173a>
	tx->next = conn->tx_ctrl_last->next;
    1de6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1dea:	6819      	ldr	r1, [r3, #0]
    1dec:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    1df0:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    1df2:	f855 1c09 	ldr.w	r1, [r5, #-9]
	conn->tx_ctrl_last = tx;
    1df6:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1dfa:	2900      	cmp	r1, #0
    1dfc:	f47f aa83 	bne.w	1306 <ull_conn_llcp+0x26>
    1e00:	e038      	b.n	1e74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaec>
			conn->llcp_ack = conn->llcp_req;
    1e02:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
    1e06:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
			conn->llcp_cu.ack = conn->llcp_cu.req;
    1e0a:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
	conn_upd_curr = NULL;
    1e0e:	4a1d      	ldr	r2, [pc, #116]	; (1e84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xafc>)
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    1e10:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
			conn->llcp_cu.ack = conn->llcp_cu.req;
    1e14:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	    conn->tx_head &&
    1e18:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1e1c:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
    1e20:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    1e24:	2100      	movs	r1, #0
    1e26:	6011      	str	r1, [r2, #0]
		if (!conn->tx_ctrl) {
    1e28:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    1e2c:	f1a5 0209 	sub.w	r2, r5, #9
	if (
    1e30:	2b00      	cmp	r3, #0
    1e32:	f000 83a1 	beq.w	2578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11f0>
	    !conn->llcp_enc.pause_tx &&
    1e36:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1e3a:	0786      	lsls	r6, r0, #30
    1e3c:	f100 839c 	bmi.w	2578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11f0>
	    !conn->llcp_phy.pause_tx &&
    1e40:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    1e44:	07c0      	lsls	r0, r0, #31
    1e46:	f100 8397 	bmi.w	2578 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11f0>
		if (conn->tx_head == conn->tx_data) {
    1e4a:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    1e4e:	4283      	cmp	r3, r0
    1e50:	f000 85ea 	beq.w	2a28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16a0>
		} else if (!conn->tx_ctrl) {
    1e54:	2900      	cmp	r1, #0
    1e56:	f000 862a 	beq.w	2aae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1726>
	tx->next = conn->tx_ctrl_last->next;
    1e5a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    1e5e:	6819      	ldr	r1, [r3, #0]
    1e60:	f845 1c09 	str.w	r1, [r5, #-9]
	conn->tx_ctrl_last->next = tx;
    1e64:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    1e66:	f855 3c09 	ldr.w	r3, [r5, #-9]
	conn->tx_ctrl_last = tx;
    1e6a:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1e6e:	2b00      	cmp	r3, #0
    1e70:	f47f aa49 	bne.w	1306 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    1e74:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
    1e78:	f7ff ba45 	b.w	1306 <ull_conn_llcp+0x26>
    1e7c:	200022a4 	.word	0x200022a4
    1e80:	00003681 	.word	0x00003681
    1e84:	20002210 	.word	0x20002210
    1e88:	d1b71759 	.word	0xd1b71759
    1e8c:	2000064c 	.word	0x2000064c
    1e90:	00020800 	.word	0x00020800
    1e94:	00020694 	.word	0x00020694
    1e98:	000203b4 	.word	0x000203b4
    1e9c:	00012531 	.word	0x00012531
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    1ea0:	f104 075f 	add.w	r7, r4, #95	; 0x5f
    1ea4:	463b      	mov	r3, r7
    1ea6:	462a      	mov	r2, r5
    1ea8:	f104 01ce 	add.w	r1, r4, #206	; 0xce
    1eac:	f204 1049 	addw	r0, r4, #329	; 0x149
    1eb0:	f014 f852 	bl	15f58 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    1eb4:	2210      	movs	r2, #16
    1eb6:	4639      	mov	r1, r7
    1eb8:	f104 0080 	add.w	r0, r4, #128	; 0x80
    1ebc:	f019 ff35 	bl	1bd2a <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    1ec0:	2208      	movs	r2, #8
    1ec2:	f104 0178 	add.w	r1, r4, #120	; 0x78
    1ec6:	f104 0099 	add.w	r0, r4, #153	; 0x99
    1eca:	f019 ff2e 	bl	1bd2a <memcpy>
		lll->ccm_rx.direction = 0;
    1ece:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    1ed2:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
		lll->enc_rx = 1;
    1ed6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
		lll->ccm_rx.counter = 0;
    1eda:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
		lll->ccm_tx.counter = 0;
    1ede:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
		lll->enc_rx = 1;
    1ee2:	f023 0318 	bic.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    1ee6:	f365 0100 	bfi	r1, r5, #0, #1
		lll->ccm_tx.direction = 1;
    1eea:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.counter = 0;
    1eee:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    1ef2:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
    1ef6:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
    1efa:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
    1efe:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    1f02:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
    1f06:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		lll->enc_rx = 1;
    1f0a:	f043 0318 	orr.w	r3, r3, #24
		lll->ccm_rx.direction = 0;
    1f0e:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
		lll->ccm_tx.direction = 1;
    1f12:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
	conn->lll.enc_tx = 1;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    1f16:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
    1f18:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f1c:	7932      	ldrb	r2, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    1f1e:	7171      	strb	r1, [r6, #5]
	    conn->tx_head &&
    1f20:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f24:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    1f28:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f2a:	7132      	strb	r2, [r6, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    1f2c:	71f1      	strb	r1, [r6, #7]
	if (
    1f2e:	b393      	cbz	r3, 1f96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0e>
	    !conn->llcp_enc.pause_tx &&
    1f30:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    1f34:	0792      	lsls	r2, r2, #30
    1f36:	d42e      	bmi.n	1f96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0e>
	    !conn->llcp_phy.pause_tx &&
    1f38:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    1f3c:	07d7      	lsls	r7, r2, #31
    1f3e:	d42a      	bmi.n	1f96 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0e>
		if (conn->tx_head == conn->tx_data) {
    1f40:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    1f44:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    1f46:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    1f4a:	f47f ad0f 	bne.w	196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
			conn->tx_data = conn->tx_data->next;
    1f4e:	6819      	ldr	r1, [r3, #0]
    1f50:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    1f54:	2a00      	cmp	r2, #0
    1f56:	f47f ad0c 	bne.w	1972 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ea>
			tx->next = conn->tx_head->next;
    1f5a:	681a      	ldr	r2, [r3, #0]
    1f5c:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    1f5e:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    1f60:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    1f62:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    1f66:	e50c      	b.n	1982 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5fa>
				conn->procedure_expire++;
    1f68:	3301      	adds	r3, #1
    1f6a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
    1f6e:	f7ff b9d4 	b.w	131a <ull_conn_llcp+0x3a>
			tx->next = conn->tx_head;
    1f72:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1f74:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1f78:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	f47f ab84 	bne.w	168a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x302>
    1f82:	e587      	b.n	1a94 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70c>
		if (!conn->tx_ctrl) {
    1f84:	2a00      	cmp	r2, #0
    1f86:	f47f ac6c 	bne.w	1862 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4da>
			tx->next = conn->tx_head;
    1f8a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1f8c:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1f90:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    1f94:	e46d      	b.n	1872 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ea>
		if (!conn->tx_ctrl) {
    1f96:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    1f9a:	2a00      	cmp	r2, #0
    1f9c:	f47f ace9 	bne.w	1972 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ea>
			tx->next = conn->tx_head;
    1fa0:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    1fa2:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    1fa6:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    1faa:	e4ea      	b.n	1982 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5fa>
		} else if (conn->llcp_conn_param.ack !=
    1fac:	f890 715d 	ldrb.w	r7, [r0, #349]	; 0x15d
    1fb0:	f890 215c 	ldrb.w	r2, [r0, #348]	; 0x15c
    1fb4:	4297      	cmp	r7, r2
    1fb6:	f000 8230 	beq.w	241a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1092>
	return conn_upd_curr && (conn_upd_curr != conn);
    1fba:	4fc7      	ldr	r7, [pc, #796]	; (22d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf50>)
    1fbc:	683a      	ldr	r2, [r7, #0]
    1fbe:	2a00      	cmp	r2, #0
    1fc0:	f000 8393 	beq.w	26ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1362>
    1fc4:	4290      	cmp	r0, r2
    1fc6:	f47f a99e 	bne.w	1306 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
    1fca:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    1fce:	f002 020f 	and.w	r2, r2, #15
    1fd2:	2a08      	cmp	r2, #8
    1fd4:	f200 86db 	bhi.w	2d8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a06>
    1fd8:	a001      	add	r0, pc, #4	; (adr r0, 1fe0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc58>)
    1fda:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    1fde:	bf00      	nop
    1fe0:	00002149 	.word	0x00002149
    1fe4:	000020c1 	.word	0x000020c1
    1fe8:	00002071 	.word	0x00002071
    1fec:	000012f9 	.word	0x000012f9
    1ff0:	000012f9 	.word	0x000012f9
    1ff4:	000012f9 	.word	0x000012f9
    1ff8:	000012f9 	.word	0x000012f9
    1ffc:	000012f9 	.word	0x000012f9
    2000:	00002005 	.word	0x00002005
			event_counter = lll->event_counter +
    2004:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    2006:	8e62      	ldrh	r2, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
    2008:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
			event_counter = lll->event_counter +
    200c:	440a      	add	r2, r1
    200e:	442a      	add	r2, r5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    2010:	f894 515e 	ldrb.w	r5, [r4, #350]	; 0x15e
	    conn->tx_head &&
    2014:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
    2018:	f820 2c02 	strh.w	r2, [r0, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    201c:	2204      	movs	r2, #4
    201e:	f362 0503 	bfi	r5, r2, #0, #4
    2022:	f884 515e 	strb.w	r5, [r4, #350]	; 0x15e
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    2026:	f1a0 0213 	sub.w	r2, r0, #19
		if (!conn->tx_ctrl) {
    202a:	f8d4 51a0 	ldr.w	r5, [r4, #416]	; 0x1a0
	if (
    202e:	2900      	cmp	r1, #0
    2030:	f000 83ed 	beq.w	280e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1486>
	    conn->tx_head &&
    2034:	079e      	lsls	r6, r3, #30
    2036:	f100 83ea 	bmi.w	280e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1486>
	    !conn->llcp_phy.pause_tx &&
    203a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    203e:	07db      	lsls	r3, r3, #31
    2040:	f100 83e5 	bmi.w	280e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1486>
		if (conn->tx_head == conn->tx_data) {
    2044:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    2048:	4299      	cmp	r1, r3
    204a:	f000 85f9 	beq.w	2c40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18b8>
		} else if (!conn->tx_ctrl) {
    204e:	2d00      	cmp	r5, #0
    2050:	f000 864a 	beq.w	2ce8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1960>
	tx->next = conn->tx_ctrl_last->next;
    2054:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2058:	6819      	ldr	r1, [r3, #0]
    205a:	f840 1c13 	str.w	r1, [r0, #-19]
	conn->tx_ctrl_last->next = tx;
    205e:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    2060:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2064:	f850 3c13 	ldr.w	r3, [r0, #-19]
    2068:	2b00      	cmp	r3, #0
    206a:	f47f a94c 	bne.w	1306 <ull_conn_llcp+0x26>
    206e:	e701      	b.n	1e74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaec>
	if (conn->llcp_enc.pause_tx) {
    2070:	079f      	lsls	r7, r3, #30
    2072:	f53f a948 	bmi.w	1306 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
    2076:	f00b fe2d 	bl	dcd4 <ll_pdu_rx_alloc>
	if (!rx) {
    207a:	4601      	mov	r1, r0
    207c:	2800      	cmp	r0, #0
    207e:	f43f ad00 	beq.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2082:	f894 015e 	ldrb.w	r0, [r4, #350]	; 0x15e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2086:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2088:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    208a:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    208e:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2092:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2094:	f884 015e 	strb.w	r0, [r4, #350]	; 0x15e
	rx->hdr.handle = conn->lll.handle;
    2098:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    209a:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    209c:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    209e:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    20a0:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    20a4:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    20a6:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    20aa:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    20ac:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    20b0:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    20b2:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    20b6:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    20b8:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    20ba:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    20bc:	77cb      	strb	r3, [r1, #31]
    20be:	e4db      	b.n	1a78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f0>
	if (conn->llcp_conn_param.status) {
    20c0:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
    20c4:	2b00      	cmp	r3, #0
    20c6:	f040 83de 	bne.w	2886 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14fe>
	if (!conn->lll.role) {
    20ca:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    20ce:	2a00      	cmp	r2, #0
    20d0:	f2c0 8516 	blt.w	2b00 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1778>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    20d4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_offset_us = 0U;
    20d8:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    20dc:	2006      	movs	r0, #6
    20de:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    20e2:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    20e6:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.win_size = 1U;
    20ea:	2501      	movs	r5, #1
		interval_max = conn->llcp_conn_param.interval_max;
    20ec:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
		conn->llcp_cu.win_size = 1U;
    20f0:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		if (preferred_periodicity) {
    20f4:	2800      	cmp	r0, #0
    20f6:	f000 84f7 	beq.w	2ae8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1760>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    20fa:	fbb2 f3f0 	udiv	r3, r2, r0
    20fe:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    2102:	f8b4 0160 	ldrh.w	r0, [r4, #352]	; 0x160
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    2106:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    2108:	4298      	cmp	r0, r3
    210a:	bf98      	it	ls
    210c:	461a      	movls	r2, r3
    210e:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2112:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2116:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    211a:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    211e:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2122:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2126:	00db      	lsls	r3, r3, #3
    2128:	f022 020f 	bic.w	r2, r2, #15
    212c:	f043 0302 	orr.w	r3, r3, #2
    2130:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    2132:	3901      	subs	r1, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    2134:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    2138:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    213c:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.ack--;
    2140:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		return;
    2144:	f7ff b8df 	b.w	1306 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2148:	4864      	ldr	r0, [pc, #400]	; (22dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf54>)
    214a:	f007 ff85 	bl	a058 <mem_acquire>
	if (!tx) {
    214e:	4602      	mov	r2, r0
    2150:	2800      	cmp	r0, #0
    2152:	f43f ac96 	beq.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2156:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    2158:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    215a:	f043 0303 	orr.w	r3, r3, #3
    215e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2160:	2318      	movs	r3, #24
    2162:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2164:	230f      	movs	r3, #15
    2166:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2168:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
    216c:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    216e:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
    2172:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2174:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
    2178:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    217a:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
    217e:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
    2180:	2300      	movs	r3, #0
    2182:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    2184:	74c3      	strb	r3, [r0, #19]
    2186:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    2188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    218c:	7543      	strb	r3, [r0, #21]
    218e:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    2190:	75c3      	strb	r3, [r0, #23]
    2192:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    2194:	7643      	strb	r3, [r0, #25]
    2196:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    2198:	76c3      	strb	r3, [r0, #27]
    219a:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    219c:	7743      	strb	r3, [r0, #29]
    219e:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
    21a0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    21a4:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    21a8:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    21ac:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
    21b0:	2107      	movs	r1, #7
    21b2:	f361 0303 	bfi	r3, r1, #0, #4
    21b6:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    21ba:	68a3      	ldr	r3, [r4, #8]
    21bc:	2b00      	cmp	r3, #0
    21be:	da0a      	bge.n	21d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe4e>
			uint32_t ticks_prepare_to_start =
    21c0:	68e7      	ldr	r7, [r4, #12]
    21c2:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    21c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    21c8:	4287      	cmp	r7, r0
    21ca:	bf2c      	ite	cs
    21cc:	19f1      	addcs	r1, r6, r7
    21ce:	1831      	addcc	r1, r6, r0
    21d0:	1acb      	subs	r3, r1, r3
    21d2:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		win_offs = &p->offset0;
    21d6:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
    21d8:	4b41      	ldr	r3, [pc, #260]	; (22e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf58>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
    21da:	f8c4 2178 	str.w	r2, [r4, #376]	; 0x178
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    21de:	2201      	movs	r2, #1
    21e0:	2102      	movs	r1, #2
    21e2:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
    21e4:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    21e6:	f008 f80f 	bl	a208 <mayfly_enqueue>
		LL_ASSERT(!retval);
    21ea:	2800      	cmp	r0, #0
    21ec:	f43f ac49 	beq.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
    21f0:	4a3c      	ldr	r2, [pc, #240]	; (22e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf5c>)
    21f2:	493d      	ldr	r1, [pc, #244]	; (22e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf60>)
    21f4:	f640 63f6 	movw	r3, #3830	; 0xef6
		LL_ASSERT(0);
    21f8:	483c      	ldr	r0, [pc, #240]	; (22ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf64>)
    21fa:	f018 ff5c 	bl	1b0b6 <printk>
    21fe:	4040      	eors	r0, r0
    2200:	f380 8811 	msr	BASEPRI, r0
    2204:	f04f 0003 	mov.w	r0, #3
    2208:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    220a:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    220e:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		break;
    2212:	f7ff b871 	b.w	12f8 <ull_conn_llcp+0x18>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2216:	fb08 3311 	mls	r3, r8, r1, r3
    221a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    221e:	4934      	ldr	r1, [pc, #208]	; (22f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf68>)
    2220:	b29b      	uxth	r3, r3
    2222:	fb02 f303 	mul.w	r3, r2, r3
    2226:	fba3 0101 	umull	r0, r1, r3, r1
    222a:	a329      	add	r3, pc, #164	; (adr r3, 22d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf48>)
    222c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2230:	f7fe fc6c 	bl	b0c <__aeabi_uldivmod>
    2234:	1a36      	subs	r6, r6, r0
    2236:	f7ff b933 	b.w	14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>
		LL_ASSERT(rx && rx->hdr.link);
    223a:	4a2a      	ldr	r2, [pc, #168]	; (22e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf5c>)
    223c:	492d      	ldr	r1, [pc, #180]	; (22f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf6c>)
    223e:	482b      	ldr	r0, [pc, #172]	; (22ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf64>)
    2240:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    2244:	f018 ff37 	bl	1b0b6 <printk>
    2248:	4040      	eors	r0, r0
    224a:	f380 8811 	msr	BASEPRI, r0
    224e:	f04f 0003 	mov.w	r0, #3
    2252:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2254:	f8d8 0000 	ldr.w	r0, [r8]
    2258:	f7ff b8d2 	b.w	1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    225c:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2260:	f360 0202 	bfi	r2, r0, #0, #3
    2264:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    2268:	f44f 76a4 	mov.w	r6, #328	; 0x148
    226c:	f7ff ba5d 	b.w	172a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a2>
		if ((conn->llcp_cu.interval != lll->interval) ||
    2270:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    2274:	4594      	cmp	ip, r2
    2276:	f47f a8d1 	bne.w	141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    227a:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    227e:	fb0c fe03 	mul.w	lr, ip, r3
    2282:	f242 7c10 	movw	ip, #10000	; 0x2710
    2286:	fb0c ec01 	mla	ip, ip, r1, lr
    228a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    228e:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2292:	f8b4 e0a6 	ldrh.w	lr, [r4, #166]	; 0xa6
    2296:	fa1f fc8c 	uxth.w	ip, ip
    229a:	45e6      	cmp	lr, ip
    229c:	f47f a8be 	bne.w	141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    22a0:	2301      	movs	r3, #1
    22a2:	f888 3004 	strb.w	r3, [r8, #4]
    22a6:	f7ff b8c9 	b.w	143c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4>
		LL_ASSERT(rx && rx->hdr.link);
    22aa:	4a0e      	ldr	r2, [pc, #56]	; (22e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf5c>)
    22ac:	4911      	ldr	r1, [pc, #68]	; (22f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf6c>)
    22ae:	480f      	ldr	r0, [pc, #60]	; (22ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf64>)
    22b0:	f241 231a 	movw	r3, #4634	; 0x121a
    22b4:	f018 feff 	bl	1b0b6 <printk>
    22b8:	4040      	eors	r0, r0
    22ba:	f380 8811 	msr	BASEPRI, r0
    22be:	f04f 0003 	mov.w	r0, #3
    22c2:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    22c4:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    22c6:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    22ca:	f7ff ba43 	b.w	1754 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3cc>
    22ce:	bf00      	nop
    22d0:	1afd498d 	.word	0x1afd498d
    22d4:	00000007 	.word	0x00000007
    22d8:	20002210 	.word	0x20002210
    22dc:	200022a4 	.word	0x200022a4
    22e0:	2000065c 	.word	0x2000065c
    22e4:	00020800 	.word	0x00020800
    22e8:	00020694 	.word	0x00020694
    22ec:	000203b4 	.word	0x000203b4
    22f0:	3b9aca00 	.word	0x3b9aca00
    22f4:	000208e0 	.word	0x000208e0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    22f8:	48cd      	ldr	r0, [pc, #820]	; (2630 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12a8>)
    22fa:	f007 fead 	bl	a058 <mem_acquire>
	if (tx) {
    22fe:	4680      	mov	r8, r0
    2300:	2800      	cmp	r0, #0
    2302:	f43f abbe 	beq.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
		conn->llcp_feature.ack--;
    2306:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
    230a:	3b01      	subs	r3, #1
    230c:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2310:	2309      	movs	r3, #9
    2312:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    2314:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    2318:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    231a:	7903      	ldrb	r3, [r0, #4]
    231c:	f043 0303 	orr.w	r3, r3, #3
    2320:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2322:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    2326:	bfac      	ite	ge
    2328:	2308      	movge	r3, #8
    232a:	230e      	movlt	r3, #14
    232c:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    232e:	4639      	mov	r1, r7
    2330:	4410      	add	r0, r2
    2332:	f019 fd05 	bl	1bd40 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    2336:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
	sys_put_le16(val >> 16, &dst[2]);
    233a:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    233c:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
    2340:	f3c2 2207 	ubfx	r2, r2, #8, #8
    2344:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
    2348:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    234a:	f888 300c 	strb.w	r3, [r8, #12]
    234e:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
    2352:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    2356:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
    235a:	0a09      	lsrs	r1, r1, #8
    235c:	0a12      	lsrs	r2, r2, #8
    235e:	f888 100b 	strb.w	r1, [r8, #11]
    2362:	f888 300d 	strb.w	r3, [r8, #13]
    2366:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
    236a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    236e:	2b00      	cmp	r3, #0
    2370:	f000 8084 	beq.w	247c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10f4>
	    !conn->llcp_enc.pause_tx &&
    2374:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2378:	0792      	lsls	r2, r2, #30
    237a:	d47f      	bmi.n	247c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10f4>
	    !conn->llcp_phy.pause_tx &&
    237c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2380:	07d7      	lsls	r7, r2, #31
    2382:	d47b      	bmi.n	247c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10f4>
		if (conn->tx_head == conn->tx_data) {
    2384:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2388:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    238c:	428b      	cmp	r3, r1
    238e:	f000 826a 	beq.w	2866 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14de>
		} else if (!conn->tx_ctrl) {
    2392:	2a00      	cmp	r2, #0
    2394:	f000 836e 	beq.w	2a74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16ec>
	tx->next = conn->tx_ctrl_last->next;
    2398:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    239c:	681a      	ldr	r2, [r3, #0]
    239e:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    23a2:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    23a6:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    23aa:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
	if (!tx->next) {
    23ae:	2b00      	cmp	r3, #0
    23b0:	f000 81b8 	beq.w	2724 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x139c>
		conn->procedure_expire = conn->procedure_reload;
    23b4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    23b8:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    23bc:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
		conn->procedure_expire = conn->procedure_reload;
    23c0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	break;
    23c4:	f7fe bf98 	b.w	12f8 <ull_conn_llcp+0x18>
		LL_ASSERT(rx && rx->hdr.link);
    23c8:	4a9a      	ldr	r2, [pc, #616]	; (2634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12ac>)
    23ca:	499b      	ldr	r1, [pc, #620]	; (2638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b0>)
    23cc:	489b      	ldr	r0, [pc, #620]	; (263c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b4>)
    23ce:	f241 2349 	movw	r3, #4681	; 0x1249
    23d2:	f018 fe70 	bl	1b0b6 <printk>
    23d6:	4040      	eors	r0, r0
    23d8:	f380 8811 	msr	BASEPRI, r0
    23dc:	f04f 0003 	mov.w	r0, #3
    23e0:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    23e2:	6828      	ldr	r0, [r5, #0]
    23e4:	f7ff b9e1 	b.w	17aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x422>
		conn->tx_data_last = tx;
    23e8:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    23ec:	f7ff ba44 	b.w	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    23f0:	2201      	movs	r2, #1
    23f2:	4610      	mov	r0, r2
    23f4:	2102      	movs	r1, #2
    23f6:	f007 fed5 	bl	a1a4 <mayfly_enable>
				return -ECANCELED;
    23fa:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    23fe:	f7fe bf8c 	b.w	131a <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    2402:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2406:	2a00      	cmp	r2, #0
    2408:	f47f abdd 	bne.w	1bc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x83e>
			tx->next = conn->tx_head;
    240c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    240e:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2412:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    2416:	f7ff bbde 	b.w	1bd6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84e>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    241a:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
    241e:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
    2422:	429a      	cmp	r2, r3
    2424:	d055      	beq.n	24d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114a>
			event_len_prep(conn);
    2426:	f00d f8cb 	bl	f5c0 <event_len_prep>
    242a:	f7ff bb2a 	b.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
			LL_ASSERT(0);
    242e:	4a81      	ldr	r2, [pc, #516]	; (2634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12ac>)
    2430:	4983      	ldr	r1, [pc, #524]	; (2640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b8>)
    2432:	4882      	ldr	r0, [pc, #520]	; (263c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b4>)
    2434:	f640 439c 	movw	r3, #3228	; 0xc9c
    2438:	f018 fe3d 	bl	1b0b6 <printk>
    243c:	4040      	eors	r0, r0
    243e:	f380 8811 	msr	BASEPRI, r0
    2442:	f04f 0003 	mov.w	r0, #3
    2446:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2448:	2700      	movs	r7, #0
		lll->interval = conn->llcp_cu.interval;
    244a:	f8b4 80e8 	ldrh.w	r8, [r4, #232]	; 0xe8
    244e:	f7ff b842 	b.w	14d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14e>
		conn->tx_data_last = tx;
    2452:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    2456:	f7ff ba97 	b.w	1988 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x600>
			conn->tx_data = conn->tx_data->next;
    245a:	681a      	ldr	r2, [r3, #0]
    245c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2460:	2900      	cmp	r1, #0
    2462:	f47f a907 	bne.w	1674 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ec>
			tx->next = conn->tx_head->next;
    2466:	681a      	ldr	r2, [r3, #0]
    2468:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    246a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    246c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    246e:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
    2472:	2b00      	cmp	r3, #0
    2474:	f47f a909 	bne.w	168a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x302>
    2478:	f7ff bb0c 	b.w	1a94 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70c>
		if (!conn->tx_ctrl) {
    247c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    2480:	2a00      	cmp	r2, #0
    2482:	d189      	bne.n	2398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1010>
			tx->next = conn->tx_head;
    2484:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2488:	e9c4 8867 	strd	r8, r8, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    248c:	f8c4 81a4 	str.w	r8, [r4, #420]	; 0x1a4
    2490:	e78d      	b.n	23ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1026>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2492:	4590      	cmp	r8, r2
    2494:	f47f a973 	bne.w	177e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2498:	2301      	movs	r3, #1
    249a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    249c:	4629      	mov	r1, r5
    249e:	f00b fbeb 	bl	dc78 <ll_rx_put>
				rx = conn->llcp_rx;
    24a2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
				LL_ASSERT(rx && rx->hdr.link);
    24a6:	2d00      	cmp	r5, #0
    24a8:	f000 829d 	beq.w	29e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x165e>
    24ac:	6828      	ldr	r0, [r5, #0]
    24ae:	2800      	cmp	r0, #0
    24b0:	f000 8299 	beq.w	29e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x165e>
				conn->llcp_rx = rx->hdr.link->mem;
    24b4:	6842      	ldr	r2, [r0, #4]
    24b6:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    24ba:	2301      	movs	r3, #1
    24bc:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    24be:	4629      	mov	r1, r5
    24c0:	f00b fbda 	bl	dc78 <ll_rx_put>
			ll_rx_sched();
    24c4:	f00b fbe2 	bl	dc8c <ll_rx_sched>
			return;
    24c8:	f7fe bf1d 	b.w	1306 <ull_conn_llcp+0x26>
	conn->lll.enc_tx = 1;
    24cc:	f043 0310 	orr.w	r3, r3, #16
    24d0:	e521      	b.n	1f16 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8e>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    24d2:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    24d6:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
    24da:	429a      	cmp	r2, r3
    24dc:	f43e af13 	beq.w	1306 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
    24e0:	f890 2196 	ldrb.w	r2, [r0, #406]	; 0x196
    24e4:	f002 0103 	and.w	r1, r2, #3
    24e8:	2903      	cmp	r1, #3
    24ea:	f000 822a 	beq.w	2942 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15ba>
    24ee:	2900      	cmp	r1, #0
    24f0:	f47e af09 	bne.w	1306 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24f4:	484e      	ldr	r0, [pc, #312]	; (2630 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12a8>)
    24f6:	f007 fdaf 	bl	a058 <mem_acquire>
		if (!tx) {
    24fa:	4601      	mov	r1, r0
    24fc:	2800      	cmp	r0, #0
    24fe:	f43f aac0 	beq.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2502:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2506:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    250a:	2201      	movs	r2, #1
    250c:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2510:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2514:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2518:	f3c3 0782 	ubfx	r7, r3, #2, #3
    251c:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    2520:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
    2524:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2528:	f360 07c3 	bfi	r7, r0, #3, #1
    252c:	f884 7046 	strb.w	r7, [r4, #70]	; 0x46
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2530:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2534:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2536:	f367 02c5 	bfi	r2, r7, #3, #3
    253a:	f884 2198 	strb.w	r2, [r4, #408]	; 0x198
		conn->phy_pref_tx = conn->llcp_phy.tx;
    253e:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    2542:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2544:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
    2548:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    254a:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    254c:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    254e:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2550:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2552:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2554:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2556:	4620      	mov	r0, r4
    2558:	f00c fd3c 	bl	efd4 <ctrl_tx_pause_enqueue>
    255c:	e72a      	b.n	23b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x102c>
		if (!conn->tx_ctrl) {
    255e:	2b00      	cmp	r3, #0
    2560:	f47f ac41 	bne.w	1de6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa5e>
			tx->next = conn->tx_head;
    2564:	f845 1c09 	str.w	r1, [r5, #-9]
				conn->tx_ctrl = tx;
    2568:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    256c:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2570:	2900      	cmp	r1, #0
    2572:	f47e aec8 	bne.w	1306 <ull_conn_llcp+0x26>
    2576:	e47d      	b.n	1e74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaec>
		if (!conn->tx_ctrl) {
    2578:	2900      	cmp	r1, #0
    257a:	f47f ac6e 	bne.w	1e5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xad2>
			tx->next = conn->tx_head;
    257e:	f845 3c09 	str.w	r3, [r5, #-9]
				conn->tx_ctrl = tx;
    2582:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2586:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    258a:	e470      	b.n	1e6e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae6>
		conn_upd_curr = conn;
    258c:	601c      	str	r4, [r3, #0]
    258e:	f7ff bba2 	b.w	1cd6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94e>
		LL_ASSERT(0);
    2592:	4a28      	ldr	r2, [pc, #160]	; (2634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12ac>)
    2594:	492a      	ldr	r1, [pc, #168]	; (2640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b8>)
    2596:	f640 63a1 	movw	r3, #3745	; 0xea1
    259a:	e62d      	b.n	21f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe70>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    259c:	4824      	ldr	r0, [pc, #144]	; (2630 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12a8>)
    259e:	f007 fd5b 	bl	a058 <mem_acquire>
		if (tx) {
    25a2:	2800      	cmp	r0, #0
    25a4:	f43f aa6d 	beq.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
			conn->llcp_version.ack--;
    25a8:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
    25ac:	3b01      	subs	r3, #1
    25ae:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->llcp_version.tx = 1U;
    25b2:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    25b6:	f043 0301 	orr.w	r3, r3, #1
    25ba:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    25be:	7903      	ldrb	r3, [r0, #4]
    25c0:	f043 0303 	orr.w	r3, r3, #3
    25c4:	7103      	strb	r3, [r0, #4]
			pdu->len =
    25c6:	2306      	movs	r3, #6
    25c8:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    25ca:	230c      	movs	r3, #12
    25cc:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    25ce:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    25d0:	f06f 030e 	mvn.w	r3, #14
    25d4:	7243      	strb	r3, [r0, #9]
    25d6:	2305      	movs	r3, #5
    25d8:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    25da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    25de:	72c3      	strb	r3, [r0, #11]
    25e0:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    25e2:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	if (
    25e6:	2b00      	cmp	r3, #0
    25e8:	f000 80ad 	beq.w	2746 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13be>
	    !conn->llcp_enc.pause_tx &&
    25ec:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    25f0:	0792      	lsls	r2, r2, #30
    25f2:	f100 80a8 	bmi.w	2746 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13be>
	    !conn->llcp_phy.pause_tx &&
    25f6:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    25fa:	07d7      	lsls	r7, r2, #31
    25fc:	f100 80a3 	bmi.w	2746 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13be>
		if (conn->tx_head == conn->tx_data) {
    2600:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2604:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    2606:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    260a:	f000 8227 	beq.w	2a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16d4>
		} else if (!conn->tx_ctrl) {
    260e:	2a00      	cmp	r2, #0
    2610:	f000 8334 	beq.w	2c7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f4>
	tx->next = conn->tx_ctrl_last->next;
    2614:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    2618:	681a      	ldr	r2, [r3, #0]
    261a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    261c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    261e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2622:	6803      	ldr	r3, [r0, #0]
    2624:	2b00      	cmp	r3, #0
    2626:	f47f aec5 	bne.w	23b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x102c>
		conn->tx_data_last = tx;
    262a:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
			conn->procedure_expire = conn->procedure_reload;
    262e:	e6c1      	b.n	23b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x102c>
    2630:	200022a4 	.word	0x200022a4
    2634:	00020800 	.word	0x00020800
    2638:	000208e0 	.word	0x000208e0
    263c:	000203b4 	.word	0x000203b4
    2640:	00020414 	.word	0x00020414
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2644:	7903      	ldrb	r3, [r0, #4]
    2646:	f043 0303 	orr.w	r3, r3, #3
    264a:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    264c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    2650:	07da      	lsls	r2, r3, #31
    2652:	d545      	bpl.n	26e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1358>
	    (conn->llcp_feature.features_conn &
    2654:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
	if (conn->common.fex_valid &&
    2658:	075b      	lsls	r3, r3, #29
    265a:	d541      	bpl.n	26e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1358>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    265c:	2311      	movs	r3, #17
    265e:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    2660:	2303      	movs	r3, #3
    2662:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
    2664:	7245      	strb	r5, [r0, #9]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    2666:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    2668:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	conn->llcp.encryption.error_code = 0U;
    266c:	2200      	movs	r2, #0
    266e:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
	if (
    2672:	b35b      	cbz	r3, 26cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1344>
	    !conn->llcp_enc.pause_tx &&
    2674:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2678:	0797      	lsls	r7, r2, #30
    267a:	d427      	bmi.n	26cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1344>
	    !conn->llcp_phy.pause_tx &&
    267c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    2680:	07d5      	lsls	r5, r2, #31
    2682:	d423      	bmi.n	26cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1344>
		if (conn->tx_head == conn->tx_data) {
    2684:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    2688:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    268a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    268e:	f000 8139 	beq.w	2904 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x157c>
		} else if (!conn->tx_ctrl) {
    2692:	2a00      	cmp	r2, #0
    2694:	f000 821f 	beq.w	2ad6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x174e>
	tx->next = conn->tx_ctrl_last->next;
    2698:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    269c:	681a      	ldr	r2, [r3, #0]
    269e:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    26a0:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    26a2:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
	if (!tx->next) {
    26a6:	6833      	ldr	r3, [r6, #0]
    26a8:	2b00      	cmp	r3, #0
    26aa:	d076      	beq.n	279a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1412>
			conn->llcp_ack = conn->llcp_req;
    26ac:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
    26b0:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			return;
    26b4:	f7fe be27 	b.w	1306 <ull_conn_llcp+0x26>
		if (!conn->tx_ctrl) {
    26b8:	2900      	cmp	r1, #0
    26ba:	f47f aae8 	bne.w	1c8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x906>
			tx->next = conn->tx_head;
    26be:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    26c0:	e9c4 7767 	strd	r7, r7, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    26c4:	f8c4 71a4 	str.w	r7, [r4, #420]	; 0x1a4
    26c8:	f7ff bae8 	b.w	1c9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x914>
		if (!conn->tx_ctrl) {
    26cc:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    26d0:	2a00      	cmp	r2, #0
    26d2:	d1e1      	bne.n	2698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1310>
			tx->next = conn->tx_head;
    26d4:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    26d6:	e9c4 6667 	strd	r6, r6, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    26da:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
    26de:	e7e2      	b.n	26a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x131e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    26e0:	230d      	movs	r3, #13
    26e2:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    26e4:	7235      	strb	r5, [r6, #8]
    26e6:	2702      	movs	r7, #2
    26e8:	e7bd      	b.n	2666 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12de>
	switch (conn->llcp_conn_param.state) {
    26ea:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
    26ee:	f002 020f 	and.w	r2, r2, #15
    26f2:	2a08      	cmp	r2, #8
    26f4:	f200 834b 	bhi.w	2d8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a06>
    26f8:	a001      	add	r0, pc, #4	; (adr r0, 2700 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1378>)
    26fa:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    26fe:	bf00      	nop
    2700:	00002149 	.word	0x00002149
    2704:	000020c1 	.word	0x000020c1
    2708:	00002071 	.word	0x00002071
    270c:	00001307 	.word	0x00001307
    2710:	00001307 	.word	0x00001307
    2714:	00001307 	.word	0x00001307
    2718:	00001307 	.word	0x00001307
    271c:	00001307 	.word	0x00001307
    2720:	00002005 	.word	0x00002005
		conn->tx_data_last = tx;
    2724:	f8c4 81ac 	str.w	r8, [r4, #428]	; 0x1ac
		conn->procedure_expire = conn->procedure_reload;
    2728:	e644      	b.n	23b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x102c>
			conn->tx_data = conn->tx_data->next;
    272a:	6819      	ldr	r1, [r3, #0]
    272c:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2730:	2a00      	cmp	r2, #0
    2732:	f47f a896 	bne.w	1862 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4da>
			tx->next = conn->tx_head->next;
    2736:	681a      	ldr	r2, [r3, #0]
    2738:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    273a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    273c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    273e:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    2742:	f7ff b896 	b.w	1872 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ea>
		if (!conn->tx_ctrl) {
    2746:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
    274a:	2a00      	cmp	r2, #0
    274c:	f47f af62 	bne.w	2614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128c>
			tx->next = conn->tx_head;
    2750:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2752:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2756:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    275a:	e762      	b.n	2622 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x129a>
							 lll->latency +
    275c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    275e:	3206      	adds	r2, #6
    2760:	442a      	add	r2, r5
			conn->llcp.phy_upd_ind.instant = event_counter +
    2762:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
			(void)ll_pdu_rx_alloc();
    2766:	f00b fab5 	bl	dcd4 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    276a:	f8d8 3000 	ldr.w	r3, [r8]
    276e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    2772:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2774:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
				rx = ll_pdu_rx_alloc();
    2778:	f00b faac 	bl	dcd4 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    277c:	6803      	ldr	r3, [r0, #0]
    277e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    2782:	6059      	str	r1, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    2784:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2788:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
				conn->llcp_rx = rx;
    278c:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    2790:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    2794:	095b      	lsrs	r3, r3, #5
    2796:	f7ff ba56 	b.w	1c46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8be>
		conn->tx_data_last = tx;
    279a:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
    279e:	e785      	b.n	26ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1324>
	    ((pdu_data_tx->llctrl.opcode !=
    27a0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    27a2:	2a03      	cmp	r2, #3
    27a4:	f43f ae5f 	beq.w	2466 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10de>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    27a8:	2a0a      	cmp	r2, #10
    27aa:	f47e af5d 	bne.w	1668 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e0>
    27ae:	e65a      	b.n	2466 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10de>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    27b0:	2301      	movs	r3, #1
			ll_rx_put(rx->hdr.link, rx);
    27b2:	4629      	mov	r1, r5
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    27b4:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    27b6:	f00b fa5f 	bl	dc78 <ll_rx_put>
			ll_rx_sched();
    27ba:	f00b fa67 	bl	dc8c <ll_rx_sched>
			return;
    27be:	f7fe bda2 	b.w	1306 <ull_conn_llcp+0x26>
				(void)ll_pdu_rx_alloc();
    27c2:	f00b fa87 	bl	dcd4 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    27c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    27c8:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    27cc:	231c      	movs	r3, #28
				upd->status = 0U;
    27ce:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    27d2:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    27d6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
				ll_rx_put(rx->hdr.link, rx);
    27da:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    27de:	f3c3 0302 	ubfx	r3, r3, #0, #3
    27e2:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    27e6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    27ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
    27ee:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    27f2:	4641      	mov	r1, r8
    27f4:	f00b fa40 	bl	dc78 <ll_rx_put>
				ll_rx_sched();
    27f8:	f00b fa48 	bl	dc8c <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    27fc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2800:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    2804:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    2808:	095b      	lsrs	r3, r3, #5
    280a:	f7ff ba1c 	b.w	1c46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8be>
		if (!conn->tx_ctrl) {
    280e:	2d00      	cmp	r5, #0
    2810:	f47f ac20 	bne.w	2054 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xccc>
			tx->next = conn->tx_head;
    2814:	f840 1c13 	str.w	r1, [r0, #-19]
				conn->tx_ctrl = tx;
    2818:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    281c:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    2820:	e420      	b.n	2064 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcdc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2822:	791a      	ldrb	r2, [r3, #4]
    2824:	f002 0203 	and.w	r2, r2, #3
    2828:	2a03      	cmp	r2, #3
    282a:	f000 80eb 	beq.w	2a04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x167c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    282e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2832:	f7ff b816 	b.w	1862 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4da>
			conn->tx_data = conn->tx_data->next;
    2836:	6819      	ldr	r1, [r3, #0]
    2838:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    283c:	2a00      	cmp	r2, #0
    283e:	f47f a9c2 	bne.w	1bc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x83e>
			tx->next = conn->tx_head->next;
    2842:	681a      	ldr	r2, [r3, #0]
    2844:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2846:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
    2848:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    284a:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    284e:	f7ff b9c2 	b.w	1bd6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2852:	791a      	ldrb	r2, [r3, #4]
    2854:	f002 0203 	and.w	r2, r2, #3
    2858:	2a03      	cmp	r2, #3
    285a:	f000 8114 	beq.w	2a86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16fe>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    285e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2862:	f7ff b886 	b.w	1972 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ea>
			conn->tx_data = conn->tx_data->next;
    2866:	6819      	ldr	r1, [r3, #0]
    2868:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    286c:	2a00      	cmp	r2, #0
    286e:	f47f ad93 	bne.w	2398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1010>
			tx->next = conn->tx_head->next;
    2872:	681a      	ldr	r2, [r3, #0]
    2874:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    2878:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    287c:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    2880:	e9c4 8868 	strd	r8, r8, [r4, #416]	; 0x1a0
    2884:	e593      	b.n	23ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1026>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2886:	489a      	ldr	r0, [pc, #616]	; (2af0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1768>)
    2888:	f007 fbe6 	bl	a058 <mem_acquire>
		if (!tx) {
    288c:	2800      	cmp	r0, #0
    288e:	f43f a8f8 	beq.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2892:	7902      	ldrb	r2, [r0, #4]
    2894:	f042 0203 	orr.w	r2, r2, #3
    2898:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    289a:	2211      	movs	r2, #17
    289c:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    289e:	2203      	movs	r2, #3
    28a0:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    28a2:	220f      	movs	r2, #15
    28a4:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    28a6:	f894 215f 	ldrb.w	r2, [r4, #351]	; 0x15f
    28aa:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
    28ac:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    28b0:	2a00      	cmp	r2, #0
    28b2:	f000 80f1 	beq.w	2a98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1710>
	    !conn->llcp_enc.pause_tx &&
    28b6:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    28ba:	0789      	lsls	r1, r1, #30
    28bc:	f100 80ec 	bmi.w	2a98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1710>
	    !conn->llcp_phy.pause_tx &&
    28c0:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    28c4:	07cb      	lsls	r3, r1, #31
    28c6:	f100 80e7 	bmi.w	2a98 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1710>
		if (conn->tx_head == conn->tx_data) {
    28ca:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    28ce:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    28d0:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    28d4:	f000 81f1 	beq.w	2cba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1932>
		} else if (!conn->tx_ctrl) {
    28d8:	2900      	cmp	r1, #0
    28da:	f000 81fd 	beq.w	2cd8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1950>
	tx->next = conn->tx_ctrl_last->next;
    28de:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    28e2:	6811      	ldr	r1, [r2, #0]
    28e4:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    28e6:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    28e8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    28ec:	6802      	ldr	r2, [r0, #0]
    28ee:	2a00      	cmp	r2, #0
    28f0:	f000 81ef 	beq.w	2cd2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x194a>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    28f4:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
    28f8:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
    28fc:	2300      	movs	r3, #0
    28fe:	603b      	str	r3, [r7, #0]
		return;
    2900:	f7ff b8bf 	b.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
			conn->tx_data = conn->tx_data->next;
    2904:	6819      	ldr	r1, [r3, #0]
    2906:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    290a:	2a00      	cmp	r2, #0
    290c:	f47f aec4 	bne.w	2698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1310>
			tx->next = conn->tx_head->next;
    2910:	681a      	ldr	r2, [r3, #0]
    2912:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2914:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    2916:	e9c4 6668 	strd	r6, r6, [r4, #416]	; 0x1a0
    291a:	e6c4      	b.n	26a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x131e>
			conn->tx_data = conn->tx_data->next;
    291c:	6808      	ldr	r0, [r1, #0]
    291e:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2922:	2b00      	cmp	r3, #0
    2924:	f47f aa5f 	bne.w	1de6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa5e>
			tx->next = conn->tx_head->next;
    2928:	680b      	ldr	r3, [r1, #0]
    292a:	f845 3c09 	str.w	r3, [r5, #-9]
			conn->tx_head->next = tx;
    292e:	600a      	str	r2, [r1, #0]
	if (!tx->next) {
    2930:	f855 1c09 	ldr.w	r1, [r5, #-9]
				conn->tx_ctrl_last = tx;
    2934:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
	if (!tx->next) {
    2938:	2900      	cmp	r1, #0
    293a:	f47e ace4 	bne.w	1306 <ull_conn_llcp+0x26>
    293e:	f7ff ba99 	b.w	1e74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaec>
		if (conn->llcp_phy.tx & PHY_2M) {
    2942:	0717      	lsls	r7, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    2944:	f880 3195 	strb.w	r3, [r0, #405]	; 0x195
		if (conn->llcp_phy.tx & PHY_2M) {
    2948:	f3c2 0382 	ubfx	r3, r2, #2, #3
    294c:	f140 814f 	bpl.w	2bee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1866>
			conn->llcp_phy.tx = PHY_2M;
    2950:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
    2954:	2202      	movs	r2, #2
    2956:	f362 0384 	bfi	r3, r2, #2, #3
    295a:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		if (conn->llcp_phy.rx & PHY_2M) {
    295e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    2962:	0659      	lsls	r1, r3, #25
    2964:	ea4f 1253 	mov.w	r2, r3, lsr #5
    2968:	f140 8139 	bpl.w	2bde <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1856>
			conn->llcp_phy.rx = PHY_2M;
    296c:	2202      	movs	r2, #2
    296e:	f362 1347 	bfi	r3, r2, #5, #3
    2972:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2976:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    297a:	f894 7046 	ldrb.w	r7, [r4, #70]	; 0x46
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    297e:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2982:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2986:	f3c2 0182 	ubfx	r1, r2, #2, #3
    298a:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    298e:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2992:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    2996:	428f      	cmp	r7, r1
    2998:	bf08      	it	eq
    299a:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    299c:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    299e:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    29a2:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    29a6:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    29aa:	bf08      	it	eq
    29ac:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    29ae:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    29b2:	f1ae 0c02 	sub.w	ip, lr, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    29b6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    29ba:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    29bc:	f884 c0bc 	strb.w	ip, [r4, #188]	; 0xbc
		conn->llcp.phy_upd_ind.initiate = 1U;
    29c0:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_PHY_UPD;
    29c4:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    29c8:	f7fe bcb7 	b.w	133a <ull_conn_llcp+0x5a>
			conn->tx_data = conn->tx_data->next;
    29cc:	681a      	ldr	r2, [r3, #0]
    29ce:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    29d2:	2900      	cmp	r1, #0
    29d4:	f47f a95b 	bne.w	1c8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x906>
			tx->next = conn->tx_head->next;
    29d8:	681a      	ldr	r2, [r3, #0]
    29da:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    29dc:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl_last = tx;
    29de:	e9c4 7768 	strd	r7, r7, [r4, #416]	; 0x1a0
    29e2:	f7ff b95b 	b.w	1c9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x914>
				LL_ASSERT(rx && rx->hdr.link);
    29e6:	4a43      	ldr	r2, [pc, #268]	; (2af4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x176c>)
    29e8:	4943      	ldr	r1, [pc, #268]	; (2af8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1770>)
    29ea:	4844      	ldr	r0, [pc, #272]	; (2afc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1774>)
    29ec:	f241 232c 	movw	r3, #4652	; 0x122c
    29f0:	f018 fb61 	bl	1b0b6 <printk>
    29f4:	4040      	eors	r0, r0
    29f6:	f380 8811 	msr	BASEPRI, r0
    29fa:	f04f 0003 	mov.w	r0, #3
    29fe:	df02      	svc	2
    2a00:	6828      	ldr	r0, [r5, #0]
    2a02:	e557      	b.n	24b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x112c>
	    ((pdu_data_tx->llctrl.opcode !=
    2a04:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2a06:	2a03      	cmp	r2, #3
    2a08:	f43f ae95 	beq.w	2736 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13ae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2a0c:	2a0a      	cmp	r2, #10
    2a0e:	f47f af0e 	bne.w	282e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14a6>
    2a12:	e690      	b.n	2736 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13ae>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2a14:	791a      	ldrb	r2, [r3, #4]
    2a16:	f002 0203 	and.w	r2, r2, #3
    2a1a:	2a03      	cmp	r2, #3
    2a1c:	f000 80d7 	beq.w	2bce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1846>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2a20:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2a24:	f7ff b8cf 	b.w	1bc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x83e>
			conn->tx_data = conn->tx_data->next;
    2a28:	6818      	ldr	r0, [r3, #0]
    2a2a:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2a2e:	2900      	cmp	r1, #0
    2a30:	f47f aa13 	bne.w	1e5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xad2>
			tx->next = conn->tx_head->next;
    2a34:	6819      	ldr	r1, [r3, #0]
    2a36:	f845 1c09 	str.w	r1, [r5, #-9]
			conn->tx_head->next = tx;
    2a3a:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
    2a3c:	f855 3c09 	ldr.w	r3, [r5, #-9]
				conn->tx_ctrl_last = tx;
    2a40:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    2a44:	f7ff ba13 	b.w	1e6e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2a48:	791a      	ldrb	r2, [r3, #4]
    2a4a:	f002 0203 	and.w	r2, r2, #3
    2a4e:	2a03      	cmp	r2, #3
    2a50:	f000 811c 	beq.w	2c8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1904>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2a54:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2a58:	f7ff b919 	b.w	1c8e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x906>
			conn->tx_data = conn->tx_data->next;
    2a5c:	6819      	ldr	r1, [r3, #0]
    2a5e:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2a62:	2a00      	cmp	r2, #0
    2a64:	f47f add6 	bne.w	2614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128c>
			tx->next = conn->tx_head->next;
    2a68:	681a      	ldr	r2, [r3, #0]
    2a6a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2a6c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2a6e:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    2a72:	e5d6      	b.n	2622 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x129a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2a74:	791a      	ldrb	r2, [r3, #4]
    2a76:	f002 0203 	and.w	r2, r2, #3
    2a7a:	2a03      	cmp	r2, #3
    2a7c:	f000 8115 	beq.w	2caa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1922>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2a80:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2a84:	e488      	b.n	2398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1010>
	    ((pdu_data_tx->llctrl.opcode !=
    2a86:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2a88:	2a03      	cmp	r2, #3
    2a8a:	f43f aa66 	beq.w	1f5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbd2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2a8e:	2a0a      	cmp	r2, #10
    2a90:	f47f aee5 	bne.w	285e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14d6>
    2a94:	f7ff ba61 	b.w	1f5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbd2>
		if (!conn->tx_ctrl) {
    2a98:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    2a9c:	2900      	cmp	r1, #0
    2a9e:	f47f af1e 	bne.w	28de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1556>
			tx->next = conn->tx_head;
    2aa2:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    2aa4:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2aa8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    2aac:	e71e      	b.n	28ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1564>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2aae:	7919      	ldrb	r1, [r3, #4]
    2ab0:	f001 0103 	and.w	r1, r1, #3
    2ab4:	2903      	cmp	r1, #3
    2ab6:	f000 80d1 	beq.w	2c5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18d4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2aba:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2abe:	f7ff b9cc 	b.w	1e5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xad2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2ac2:	790b      	ldrb	r3, [r1, #4]
    2ac4:	f003 0303 	and.w	r3, r3, #3
    2ac8:	2b03      	cmp	r3, #3
    2aca:	f000 80cf 	beq.w	2c6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18e4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2ace:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    2ad2:	f7ff b988 	b.w	1de6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa5e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2ad6:	791a      	ldrb	r2, [r3, #4]
    2ad8:	f002 0203 	and.w	r2, r2, #3
    2adc:	2a03      	cmp	r2, #3
    2ade:	f000 810f 	beq.w	2d00 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1978>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2ae2:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2ae6:	e5d7      	b.n	2698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1310>
			conn->llcp_cu.interval = interval_max;
    2ae8:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
    2aec:	f7ff bb11 	b.w	2112 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd8a>
    2af0:	200022a4 	.word	0x200022a4
    2af4:	00020800 	.word	0x00020800
    2af8:	000208e0 	.word	0x000208e0
    2afc:	000203b4 	.word	0x000203b4
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2b00:	48a6      	ldr	r0, [pc, #664]	; (2d9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a14>)
    2b02:	f007 faa9 	bl	a058 <mem_acquire>
	if (!tx) {
    2b06:	2800      	cmp	r0, #0
    2b08:	f43e afbb 	beq.w	1a82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6fa>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2b0c:	7902      	ldrb	r2, [r0, #4]
    2b0e:	f042 0203 	orr.w	r2, r2, #3
    2b12:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2b14:	2218      	movs	r2, #24
    2b16:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2b18:	2210      	movs	r2, #16
    2b1a:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
    2b1c:	f8b4 2160 	ldrh.w	r2, [r4, #352]	; 0x160
    2b20:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
    2b22:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
    2b26:	8142      	strh	r2, [r0, #10]
	rsp->latency =
    2b28:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
    2b2c:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
    2b2e:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
    2b32:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
    2b34:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
    2b38:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
    2b3a:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
    2b3e:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2b42:	f8b4 216c 	ldrh.w	r2, [r4, #364]	; 0x16c
    2b46:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2b4a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
    2b4e:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2b52:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
    2b56:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2b5a:	f8b4 2172 	ldrh.w	r2, [r4, #370]	; 0x172
    2b5e:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2b62:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
    2b66:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2b6a:	f8b4 2176 	ldrh.w	r2, [r4, #374]	; 0x176
    2b6e:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
    2b72:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	if (
    2b76:	2a00      	cmp	r2, #0
    2b78:	d043      	beq.n	2c02 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x187a>
	    !conn->llcp_enc.pause_tx &&
    2b7a:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    2b7e:	0789      	lsls	r1, r1, #30
    2b80:	d43f      	bmi.n	2c02 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x187a>
	    !conn->llcp_phy.pause_tx &&
    2b82:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    2b86:	07cb      	lsls	r3, r1, #31
    2b88:	d43b      	bmi.n	2c02 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x187a>
		if (conn->tx_head == conn->tx_data) {
    2b8a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    2b8e:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    2b90:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
    2b94:	f000 80c2 	beq.w	2d1c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1994>
		} else if (!conn->tx_ctrl) {
    2b98:	2900      	cmp	r1, #0
    2b9a:	f000 80d2 	beq.w	2d42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19ba>
	tx->next = conn->tx_ctrl_last->next;
    2b9e:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    2ba2:	6811      	ldr	r1, [r2, #0]
    2ba4:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2ba6:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    2ba8:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    2bac:	6802      	ldr	r2, [r0, #0]
    2bae:	2a00      	cmp	r2, #0
    2bb0:	f000 80a3 	beq.w	2cfa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1972>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    2bb4:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2bb8:	f894 c0bb 	ldrb.w	ip, [r4, #187]	; 0xbb
    2bbc:	f894 e0bc 	ldrb.w	lr, [r4, #188]	; 0xbc
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    2bc0:	2205      	movs	r2, #5
    2bc2:	f362 0303 	bfi	r3, r2, #0, #4
    2bc6:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
    2bca:	f7fe bb95 	b.w	12f8 <ull_conn_llcp+0x18>
	    ((pdu_data_tx->llctrl.opcode !=
    2bce:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2bd0:	2a03      	cmp	r2, #3
    2bd2:	f43f ae36 	beq.w	2842 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ba>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2bd6:	2a0a      	cmp	r2, #10
    2bd8:	f47f af22 	bne.w	2a20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1698>
    2bdc:	e631      	b.n	2842 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ba>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    2bde:	07d7      	lsls	r7, r2, #31
    2be0:	d519      	bpl.n	2c16 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188e>
			conn->llcp_phy.rx = PHY_1M;
    2be2:	2201      	movs	r2, #1
    2be4:	f362 1347 	bfi	r3, r2, #5, #3
    2be8:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    2bec:	e6c3      	b.n	2976 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15ee>
		} else if (conn->llcp_phy.tx & PHY_1M) {
    2bee:	07d8      	lsls	r0, r3, #31
    2bf0:	d51a      	bpl.n	2c28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18a0>
			conn->llcp_phy.tx = PHY_1M;
    2bf2:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    2bf6:	2201      	movs	r2, #1
    2bf8:	f362 0384 	bfi	r3, r2, #2, #3
    2bfc:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    2c00:	e6ad      	b.n	295e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15d6>
		if (!conn->tx_ctrl) {
    2c02:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
    2c06:	2900      	cmp	r1, #0
    2c08:	d1c9      	bne.n	2b9e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1816>
			tx->next = conn->tx_head;
    2c0a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    2c0c:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    2c10:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    2c14:	e7ca      	b.n	2bac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1824>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    2c16:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
    2c1a:	bf18      	it	ne
    2c1c:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    2c1e:	f362 1347 	bfi	r3, r2, #5, #3
    2c22:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    2c26:	e6a6      	b.n	2976 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15ee>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    2c28:	f013 0304 	ands.w	r3, r3, #4
    2c2c:	f000 8082 	beq.w	2d34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19ac>
			conn->llcp_phy.tx = PHY_CODED;
    2c30:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
    2c34:	2204      	movs	r2, #4
    2c36:	f362 0384 	bfi	r3, r2, #2, #3
    2c3a:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
    2c3e:	e68e      	b.n	295e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15d6>
			conn->tx_data = conn->tx_data->next;
    2c40:	680b      	ldr	r3, [r1, #0]
    2c42:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2c46:	2d00      	cmp	r5, #0
    2c48:	f47f aa04 	bne.w	2054 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xccc>
			tx->next = conn->tx_head->next;
    2c4c:	680b      	ldr	r3, [r1, #0]
    2c4e:	f840 3c13 	str.w	r3, [r0, #-19]
			conn->tx_head->next = tx;
    2c52:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
    2c54:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    2c58:	f7ff ba04 	b.w	2064 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcdc>
	    ((pdu_data_tx->llctrl.opcode !=
    2c5c:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2c5e:	2903      	cmp	r1, #3
    2c60:	f43f aee8 	beq.w	2a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16ac>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2c64:	290a      	cmp	r1, #10
    2c66:	f47f af28 	bne.w	2aba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1732>
    2c6a:	e6e3      	b.n	2a34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16ac>
	    ((pdu_data_tx->llctrl.opcode !=
    2c6c:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2c6e:	2b03      	cmp	r3, #3
    2c70:	f43f ae5a 	beq.w	2928 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2c74:	2b0a      	cmp	r3, #10
    2c76:	f47f af2a 	bne.w	2ace <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1746>
    2c7a:	e655      	b.n	2928 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2c7c:	791a      	ldrb	r2, [r3, #4]
    2c7e:	f002 0203 	and.w	r2, r2, #3
    2c82:	2a03      	cmp	r2, #3
    2c84:	d00a      	beq.n	2c9c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1914>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2c86:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
    2c8a:	e4c3      	b.n	2614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128c>
	    ((pdu_data_tx->llctrl.opcode !=
    2c8c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2c8e:	2a03      	cmp	r2, #3
    2c90:	f43f aea2 	beq.w	29d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1650>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2c94:	2a0a      	cmp	r2, #10
    2c96:	f47f aedd 	bne.w	2a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16cc>
    2c9a:	e69d      	b.n	29d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1650>
	    ((pdu_data_tx->llctrl.opcode !=
    2c9c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2c9e:	2a03      	cmp	r2, #3
    2ca0:	f43f aee2 	beq.w	2a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2ca4:	2a0a      	cmp	r2, #10
    2ca6:	d1ee      	bne.n	2c86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18fe>
    2ca8:	e6de      	b.n	2a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e0>
	    ((pdu_data_tx->llctrl.opcode !=
    2caa:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2cac:	2a03      	cmp	r2, #3
    2cae:	f43f ade0 	beq.w	2872 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ea>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2cb2:	2a0a      	cmp	r2, #10
    2cb4:	f47f aee4 	bne.w	2a80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16f8>
    2cb8:	e5db      	b.n	2872 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ea>
			conn->tx_data = conn->tx_data->next;
    2cba:	6813      	ldr	r3, [r2, #0]
    2cbc:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2cc0:	2900      	cmp	r1, #0
    2cc2:	f47f ae0c 	bne.w	28de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1556>
			tx->next = conn->tx_head->next;
    2cc6:	6811      	ldr	r1, [r2, #0]
    2cc8:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    2cca:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    2ccc:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    2cd0:	e60c      	b.n	28ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1564>
		conn->tx_data_last = tx;
    2cd2:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2cd6:	e60d      	b.n	28f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2cd8:	7911      	ldrb	r1, [r2, #4]
    2cda:	f001 0103 	and.w	r1, r1, #3
    2cde:	2903      	cmp	r1, #3
    2ce0:	d016      	beq.n	2d10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1988>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2ce2:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    2ce6:	e5fa      	b.n	28de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1556>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2ce8:	790b      	ldrb	r3, [r1, #4]
    2cea:	f003 0303 	and.w	r3, r3, #3
    2cee:	2b03      	cmp	r3, #3
    2cf0:	d02f      	beq.n	2d52 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19ca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2cf2:	e9c4 1168 	strd	r1, r1, [r4, #416]	; 0x1a0
    2cf6:	f7ff b9ad 	b.w	2054 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xccc>
		conn->tx_data_last = tx;
    2cfa:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    2cfe:	e759      	b.n	2bb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x182c>
	    ((pdu_data_tx->llctrl.opcode !=
    2d00:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2d02:	2a03      	cmp	r2, #3
    2d04:	f43f ae04 	beq.w	2910 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1588>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2d08:	2a0a      	cmp	r2, #10
    2d0a:	f47f aeea 	bne.w	2ae2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x175a>
    2d0e:	e5ff      	b.n	2910 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1588>
	    ((pdu_data_tx->llctrl.opcode !=
    2d10:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2d12:	2903      	cmp	r1, #3
    2d14:	d0d7      	beq.n	2cc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x193e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2d16:	290a      	cmp	r1, #10
    2d18:	d1e3      	bne.n	2ce2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x195a>
    2d1a:	e7d4      	b.n	2cc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x193e>
			conn->tx_data = conn->tx_data->next;
    2d1c:	6813      	ldr	r3, [r2, #0]
    2d1e:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    2d22:	2900      	cmp	r1, #0
    2d24:	f47f af3b 	bne.w	2b9e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1816>
			tx->next = conn->tx_head->next;
    2d28:	6811      	ldr	r1, [r2, #0]
    2d2a:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    2d2c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    2d2e:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    2d32:	e73b      	b.n	2bac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1824>
			conn->llcp_phy.tx = 0U;
    2d34:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
    2d38:	f363 0284 	bfi	r2, r3, #2, #3
    2d3c:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
    2d40:	e60d      	b.n	295e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15d6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2d42:	7911      	ldrb	r1, [r2, #4]
    2d44:	f001 0103 	and.w	r1, r1, #3
    2d48:	2903      	cmp	r1, #3
    2d4a:	d009      	beq.n	2d60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19d8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2d4c:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
    2d50:	e725      	b.n	2b9e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1816>
	    ((pdu_data_tx->llctrl.opcode !=
    2d52:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2d54:	2b03      	cmp	r3, #3
    2d56:	f43f af79 	beq.w	2c4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2d5a:	2b0a      	cmp	r3, #10
    2d5c:	d1c9      	bne.n	2cf2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x196a>
    2d5e:	e775      	b.n	2c4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c4>
	    ((pdu_data_tx->llctrl.opcode !=
    2d60:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2d62:	2903      	cmp	r1, #3
    2d64:	d0e0      	beq.n	2d28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2d66:	290a      	cmp	r1, #10
    2d68:	d1f0      	bne.n	2d4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19c4>
    2d6a:	e7dd      	b.n	2d28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19a0>
			LL_ASSERT(0);
    2d6c:	4a0c      	ldr	r2, [pc, #48]	; (2da0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a18>)
    2d6e:	490d      	ldr	r1, [pc, #52]	; (2da4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a1c>)
    2d70:	480d      	ldr	r0, [pc, #52]	; (2da8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a20>)
    2d72:	f640 33c7 	movw	r3, #3015	; 0xbc7
    2d76:	f018 f99e 	bl	1b0b6 <printk>
    2d7a:	4040      	eors	r0, r0
    2d7c:	f380 8811 	msr	BASEPRI, r0
    2d80:	f04f 0003 	mov.w	r0, #3
    2d84:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    2d86:	f04f 0800 	mov.w	r8, #0
			break;
    2d8a:	f7fe bf91 	b.w	1cb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x928>
		LL_ASSERT(0);
    2d8e:	4a04      	ldr	r2, [pc, #16]	; (2da0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a18>)
    2d90:	4904      	ldr	r1, [pc, #16]	; (2da4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a1c>)
    2d92:	f640 73e1 	movw	r3, #4065	; 0xfe1
    2d96:	f7ff ba2f 	b.w	21f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe70>
    2d9a:	bf00      	nop
    2d9c:	200022a4 	.word	0x200022a4
    2da0:	00020800 	.word	0x00020800
    2da4:	00020414 	.word	0x00020414
    2da8:	000203b4 	.word	0x000203b4
    2dac:	00000000 	.word	0x00000000

00002db0 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    2db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2db4:	b08b      	sub	sp, #44	; 0x2c
    2db6:	460f      	mov	r7, r1
    2db8:	9304      	str	r3, [sp, #16]
    2dba:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    2dbe:	9005      	str	r0, [sp, #20]
    2dc0:	9306      	str	r3, [sp, #24]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2dc2:	2000      	movs	r0, #0
{
    2dc4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    2dc8:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    2dcc:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    2dd0:	9303      	str	r3, [sp, #12]
    2dd2:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2dd4:	f00c f88c 	bl	eef0 <ull_scan_is_disabled_get>
	if (!scan) {
    2dd8:	2800      	cmp	r0, #0
    2dda:	f000 8194 	beq.w	3106 <ll_create_connection+0x356>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
    2dde:	f009 0a01 	and.w	sl, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
    2de2:	4605      	mov	r5, r0
    2de4:	4650      	mov	r0, sl
    2de6:	f008 fd2d 	bl	b844 <ll_addr_get>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    2dea:	f1ba 0f00 	cmp.w	sl, #0
    2dee:	d16a      	bne.n	2ec6 <ll_create_connection+0x116>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    2df0:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
    2df2:	f105 021c 	add.w	r2, r5, #28
    2df6:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d06b      	beq.n	2ed4 <ll_create_connection+0x124>
		conn_lll = lll->conn;
    2dfc:	f8d5 8020 	ldr.w	r8, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
    2e00:	f8d8 4000 	ldr.w	r4, [r8]
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
    2e04:	f898 002a 	ldrb.w	r0, [r8, #42]	; 0x2a
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    2e08:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    2e0c:	f000 0007 	and.w	r0, r0, #7
    2e10:	f011 f948 	bl	140a4 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2e14:	f8b8 1026 	ldrh.w	r1, [r8, #38]	; 0x26
    2e18:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    2e1c:	4401      	add	r1, r0
    2e1e:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
    2e22:	4401      	add	r1, r0
    2e24:	48c2      	ldr	r0, [pc, #776]	; (3130 <ll_create_connection+0x380>)
    2e26:	a3c0      	add	r3, pc, #768	; (adr r3, 3128 <ll_create_connection+0x378>)
    2e28:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e2c:	fba1 0100 	umull	r0, r1, r1, r0
    2e30:	f7fd fe6c 	bl	b0c <__aeabi_uldivmod>
    2e34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    2e38:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    2e3a:	4630      	mov	r0, r6
    2e3c:	f010 f93e 	bl	130bc <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    2e40:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2e44:	f36f 0341 	bfc	r3, #1, #1
    2e48:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    2e4c:	23ff      	movs	r3, #255	; 0xff
    2e4e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    2e52:	b366      	cbz	r6, 2eae <ll_create_connection+0xfe>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    2e54:	f1a9 0302 	sub.w	r3, r9, #2
    2e58:	2b01      	cmp	r3, #1
    2e5a:	f240 8158 	bls.w	310e <ll_create_connection+0x35e>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    2e5e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    2e62:	9a04      	ldr	r2, [sp, #16]
	scan->own_addr_type = own_addr_type;
    2e64:	f369 0342 	bfi	r3, r9, #1, #2
    2e68:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    2e6c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2e70:	f362 0300 	bfi	r3, r2, #0, #1
    2e74:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
    2e78:	9914      	ldr	r1, [sp, #80]	; 0x50
    2e7a:	2206      	movs	r2, #6
    2e7c:	f105 0024 	add.w	r0, r5, #36	; 0x24
    2e80:	f018 ff53 	bl	1bd2a <memcpy>
	lll->conn_timeout = timeout;
    2e84:	9b03      	ldr	r3, [sp, #12]
    2e86:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    2e88:	9a05      	ldr	r2, [sp, #20]
    2e8a:	9600      	str	r6, [sp, #0]
    2e8c:	463b      	mov	r3, r7
    2e8e:	f105 001c 	add.w	r0, r5, #28
    2e92:	2100      	movs	r1, #0
    2e94:	f7fe f93c 	bl	1110 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    2e98:	f011 faa2 	bl	143e0 <lll_clock_wait>
	if (err) {
    2e9c:	2800      	cmp	r0, #0
    2e9e:	f040 8157 	bne.w	3150 <ll_create_connection+0x3a0>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    2ea2:	4628      	mov	r0, r5
    2ea4:	f7fe f960 	bl	1168 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    2ea8:	b00b      	add	sp, #44	; 0x2c
    2eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    2eae:	f010 fd33 	bl	13918 <ull_filter_lll_rl_enabled>
    2eb2:	2800      	cmp	r0, #0
    2eb4:	d0ce      	beq.n	2e54 <ll_create_connection+0xa4>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    2eb6:	9914      	ldr	r1, [sp, #80]	; 0x50
    2eb8:	9804      	ldr	r0, [sp, #16]
    2eba:	4632      	mov	r2, r6
    2ebc:	f010 fa6e 	bl	1339c <ull_filter_rl_find>
    2ec0:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    2ec4:	e7c6      	b.n	2e54 <ll_create_connection+0xa4>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    2ec6:	2106      	movs	r1, #6
    2ec8:	f007 f910 	bl	a0ec <mem_nz>
    2ecc:	2800      	cmp	r0, #0
    2ece:	d18f      	bne.n	2df0 <ll_create_connection+0x40>
		return BT_HCI_ERR_INVALID_PARAM;
    2ed0:	2012      	movs	r0, #18
    2ed2:	e7e9      	b.n	2ea8 <ll_create_connection+0xf8>
	link = ll_rx_link_alloc();
    2ed4:	f00a fec4 	bl	dc60 <ll_rx_link_alloc>
	if (!link) {
    2ed8:	9007      	str	r0, [sp, #28]
    2eda:	2800      	cmp	r0, #0
    2edc:	f000 816f 	beq.w	31be <ll_create_connection+0x40e>
	conn = ll_conn_acquire();
    2ee0:	f00c fc64 	bl	f7ac <ll_conn_acquire>
	if (!conn) {
    2ee4:	4604      	mov	r4, r0
    2ee6:	2800      	cmp	r0, #0
    2ee8:	f000 818b 	beq.w	3202 <ll_create_connection+0x452>
	err = util_aa_le32(conn_lll->access_addr);
    2eec:	3020      	adds	r0, #32
    2eee:	f007 fa9d 	bl	a42c <util_aa_le32>
	conn_lll = &conn->lll;
    2ef2:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    2ef6:	2800      	cmp	r0, #0
    2ef8:	f040 8154 	bne.w	31a4 <ll_create_connection+0x3f4>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    2efc:	2103      	movs	r1, #3
    2efe:	f104 0024 	add.w	r0, r4, #36	; 0x24
    2f02:	f010 ff7d 	bl	13e00 <lll_csrand_get>
	conn_lll->interval = interval;
    2f06:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
    2f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
	conn_lll->interval = interval;
    2f0a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    2f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    2f10:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    2f14:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    2f16:	2800      	cmp	r0, #0
    2f18:	f000 8153 	beq.w	31c2 <ll_create_connection+0x412>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    2f1c:	f104 0148 	add.w	r1, r4, #72	; 0x48
    2f20:	f104 024c 	add.w	r2, r4, #76	; 0x4c
    2f24:	f007 f8ee 	bl	a104 <memq_init>
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    2f28:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f2a:	4a82      	ldr	r2, [pc, #520]	; (3134 <ll_create_connection+0x384>)
    2f2c:	401a      	ands	r2, r3
	conn_lll->sn = 0;
    2f2e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    2f32:	f023 0307 	bic.w	r3, r3, #7
    2f36:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn_lll->max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    2f3a:	4b7f      	ldr	r3, [pc, #508]	; (3138 <ll_create_connection+0x388>)
    2f3c:	4313      	orrs	r3, r2
    2f3e:	6463      	str	r3, [r4, #68]	; 0x44
	conn_lll->max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    2f40:	4b7e      	ldr	r3, [pc, #504]	; (313c <ll_create_connection+0x38c>)
    2f42:	6423      	str	r3, [r4, #64]	; 0x40
	conn_lll->link_tx_free = NULL;
    2f44:	f04f 0b00 	mov.w	fp, #0
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    2f48:	231b      	movs	r3, #27
    2f4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
	conn_lll->link_tx_free = NULL;
    2f4c:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
	conn_lll->packet_tx_head_len = 0;
    2f50:	f8a4 b05c 	strh.w	fp, [r4, #92]	; 0x5c
	conn_lll->latency_prepare = 0;
    2f54:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    2f58:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    2f5c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    2f60:	f00f fb3a 	bl	125d8 <ull_chan_map_get>
    2f64:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    2f68:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    2f6c:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    2f6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    2f72:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    2f76:	f010 ff43 	bl	13e00 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    2f7a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    2f7e:	4b70      	ldr	r3, [pc, #448]	; (3140 <ll_create_connection+0x390>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    2f80:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2f84:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    2f86:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    2f8a:	fba3 1302 	umull	r1, r3, r3, r2
    2f8e:	08db      	lsrs	r3, r3, #3
    2f90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2f94:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    2f98:	3305      	adds	r3, #5
    2f9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    2f9e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2fa2:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
    2fa4:	f8a4 b0a8 	strh.w	fp, [r4, #168]	; 0xa8
	conn_lll->data_chan_sel = 0;
    2fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2fac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
    2fb0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    2fb4:	f8a4 b0ac 	strh.w	fp, [r4, #172]	; 0xac
	conn_lll->central.initiated = 0;
    2fb8:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2fbc:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
    2fc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2fc4:	4b5f      	ldr	r3, [pc, #380]	; (3144 <ll_create_connection+0x394>)
	conn->apto_expire = 0U;
    2fc6:	f8a4 b0b4 	strh.w	fp, [r4, #180]	; 0xb4
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2fca:	fb02 f101 	mul.w	r1, r2, r1
    2fce:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2fd0:	440b      	add	r3, r1
    2fd2:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    2fd6:	495c      	ldr	r1, [pc, #368]	; (3148 <ll_create_connection+0x398>)
	conn->appto_expire = 0U;
    2fd8:	f8a4 b0b0 	strh.w	fp, [r4, #176]	; 0xb0
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    2fdc:	4411      	add	r1, r2
    2fde:	fbb1 f1f2 	udiv	r1, r1, r2
    2fe2:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    2fe6:	f242 7110 	movw	r1, #10000	; 0x2710
    2fea:	fb01 210c 	mla	r1, r1, ip, r2
    2fee:	3901      	subs	r1, #1
    2ff0:	fbb1 f2f2 	udiv	r2, r1, r2
    2ff4:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
    2ff8:	2206      	movs	r2, #6
    2ffa:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2ffe:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    3000:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    3002:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    3004:	f8a4 20b2 	strh.w	r2, [r4, #178]	; 0xb2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    3008:	dd02      	ble.n	3010 <ll_create_connection+0x260>
    300a:	3a06      	subs	r2, #6
    300c:	1a12      	subs	r2, r2, r0
    300e:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    3010:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    3014:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    3018:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    301c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    3020:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    3024:	f8a4 b0bc 	strh.w	fp, [r4, #188]	; 0xbc
	conn->llcp_rx = NULL;
    3028:	f8c4 b0e0 	str.w	fp, [r4, #224]	; 0xe0
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    302c:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    3030:	f8a4 b0f8 	strh.w	fp, [r4, #248]	; 0xf8
	conn->llcp_feature.features_conn = ll_feat_get();
    3034:	f00a f936 	bl	d2a4 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    3038:	9b07      	ldr	r3, [sp, #28]
    303a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    303e:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    3042:	f8a4 b110 	strh.w	fp, [r4, #272]	; 0x110
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    3046:	f023 0303 	bic.w	r3, r3, #3
    304a:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    304e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    3052:	f8a4 b118 	strh.w	fp, [r4, #280]	; 0x118
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    3056:	f023 0318 	bic.w	r3, r3, #24
    305a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    305e:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_terminate.reason_final = 0U;
    3062:	f884 b11b 	strb.w	fp, [r4, #283]	; 0x11b
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    3066:	f023 0307 	bic.w	r3, r3, #7
    306a:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	conn->llcp_conn_param.disabled = 0U;
    306e:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    3072:	f8a4 b13c 	strh.w	fp, [r4, #316]	; 0x13c
	conn->llcp_conn_param.disabled = 0U;
    3076:	f36b 1345 	bfi	r3, fp, #5, #1
    307a:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conn->llcp_length.disabled = 0U;
    307e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_conn_param.req = 0U;
    3082:	f8a4 b15c 	strh.w	fp, [r4, #348]	; 0x15c
	conn->llcp_length.disabled = 0U;
    3086:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    308a:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    308c:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_feature.features_peer = 0;
    3090:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    3092:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
	conn->llcp_feature.features_peer = 0;
    3096:	e9c4 2342 	strd	r2, r3, [r4, #264]	; 0x108
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    309a:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.cache.tx_octets = 0U;
    309e:	f8a4 b190 	strh.w	fp, [r4, #400]	; 0x190
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    30a2:	f00c fe87 	bl	fdb4 <ull_conn_default_tx_octets_get>
    30a6:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
	conn->default_tx_time = ull_conn_default_tx_time_get();
    30aa:	f00c fe89 	bl	fdc0 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    30ae:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    30b2:	4b26      	ldr	r3, [pc, #152]	; (314c <ll_create_connection+0x39c>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    30b4:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    30b8:	4013      	ands	r3, r2
    30ba:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    30be:	f00c fe85 	bl	fdcc <ull_conn_default_phy_tx_get>
    30c2:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    30c6:	f360 0302 	bfi	r3, r0, #0, #3
    30ca:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    30ce:	f00c fe83 	bl	fdd8 <ull_conn_default_phy_rx_get>
    30d2:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    30d6:	f8c4 b19c 	str.w	fp, [r4, #412]	; 0x19c
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    30da:	f360 03c5 	bfi	r3, r0, #3, #3
    30de:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
	conn->ull.ticks_prepare_to_start =
    30e2:	2331      	movs	r3, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
    30e4:	e9c4 bb6a 	strd	fp, fp, [r4, #424]	; 0x1a8
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    30e8:	e9c4 bb68 	strd	fp, fp, [r4, #416]	; 0x1a0
	conn->ull.ticks_active_to_start = 0U;
    30ec:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_preempt_to_start =
    30f0:	f8c4 b00c 	str.w	fp, [r4, #12]
	conn->ull.ticks_prepare_to_start =
    30f4:	60a3      	str	r3, [r4, #8]
	lll->conn = conn_lll;
    30f6:	f8c5 8020 	str.w	r8, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    30fa:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    30fe:	f884 b000 	strb.w	fp, [r4]
    3102:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    3104:	e67e      	b.n	2e04 <ll_create_connection+0x54>
		return BT_HCI_ERR_CMD_DISALLOWED;
    3106:	200c      	movs	r0, #12
}
    3108:	b00b      	add	sp, #44	; 0x2c
    310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
    310e:	2000      	movs	r0, #0
    3110:	f00f fff8 	bl	13104 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    3114:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    3118:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
    311c:	46d1      	mov	r9, sl
		lll->rpa_gen = 1;
    311e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    3122:	e69c      	b.n	2e5e <ll_create_connection+0xae>
    3124:	f3af 8000 	nop.w
    3128:	1afd498d 	.word	0x1afd498d
    312c:	00000007 	.word	0x00000007
    3130:	3b9aca00 	.word	0x3b9aca00
    3134:	f8800000 	.word	0xf8800000
    3138:	01110148 	.word	0x01110148
    313c:	0148001b 	.word	0x0148001b
    3140:	aaaaaaab 	.word	0xaaaaaaab
    3144:	01c9c37f 	.word	0x01c9c37f
    3148:	026259ff 	.word	0x026259ff
    314c:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    3150:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    3152:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3154:	b163      	cbz	r3, 3170 <ll_create_connection+0x3c0>
    3156:	4a2d      	ldr	r2, [pc, #180]	; (320c <ll_create_connection+0x45c>)
    3158:	492d      	ldr	r1, [pc, #180]	; (3210 <ll_create_connection+0x460>)
    315a:	482e      	ldr	r0, [pc, #184]	; (3214 <ll_create_connection+0x464>)
    315c:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
    3160:	f017 ffa9 	bl	1b0b6 <printk>
    3164:	4040      	eors	r0, r0
    3166:	f380 8811 	msr	BASEPRI, r0
    316a:	f04f 0003 	mov.w	r0, #3
    316e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    3170:	f104 0130 	add.w	r1, r4, #48	; 0x30
    3174:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3178:	f006 ffc8 	bl	a10c <memq_deinit>
	LL_ASSERT(link);
    317c:	4606      	mov	r6, r0
    317e:	2800      	cmp	r0, #0
    3180:	d031      	beq.n	31e6 <ll_create_connection+0x436>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    3182:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    3184:	63e6      	str	r6, [r4, #60]	; 0x3c

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    3186:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	LL_ASSERT(link);
    318a:	b1f4      	cbz	r4, 31ca <ll_create_connection+0x41a>

	ll_rx_link_release(link);
    318c:	4620      	mov	r0, r4
    318e:	f00a fd6d 	bl	dc6c <ll_rx_link_release>

	ll_conn_release(conn);
    3192:	4638      	mov	r0, r7
    3194:	f00c fb10 	bl	f7b8 <ll_conn_release>
	scan->lll.conn = NULL;
    3198:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    319a:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    319c:	622b      	str	r3, [r5, #32]
}
    319e:	b00b      	add	sp, #44	; 0x2c
    31a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    31a4:	4a19      	ldr	r2, [pc, #100]	; (320c <ll_create_connection+0x45c>)
    31a6:	491c      	ldr	r1, [pc, #112]	; (3218 <ll_create_connection+0x468>)
    31a8:	481a      	ldr	r0, [pc, #104]	; (3214 <ll_create_connection+0x464>)
    31aa:	23bf      	movs	r3, #191	; 0xbf
    31ac:	f017 ff83 	bl	1b0b6 <printk>
    31b0:	4040      	eors	r0, r0
    31b2:	f380 8811 	msr	BASEPRI, r0
    31b6:	f04f 0003 	mov.w	r0, #3
    31ba:	df02      	svc	2
    31bc:	e69e      	b.n	2efc <ll_create_connection+0x14c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    31be:	2007      	movs	r0, #7
    31c0:	e672      	b.n	2ea8 <ll_create_connection+0xf8>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    31c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    31c6:	65a0      	str	r0, [r4, #88]	; 0x58
    31c8:	e6a8      	b.n	2f1c <ll_create_connection+0x16c>
	LL_ASSERT(link);
    31ca:	4a10      	ldr	r2, [pc, #64]	; (320c <ll_create_connection+0x45c>)
    31cc:	4913      	ldr	r1, [pc, #76]	; (321c <ll_create_connection+0x46c>)
    31ce:	4811      	ldr	r0, [pc, #68]	; (3214 <ll_create_connection+0x464>)
    31d0:	f240 43c1 	movw	r3, #1217	; 0x4c1
    31d4:	f017 ff6f 	bl	1b0b6 <printk>
    31d8:	4040      	eors	r0, r0
    31da:	f380 8811 	msr	BASEPRI, r0
    31de:	f04f 0003 	mov.w	r0, #3
    31e2:	df02      	svc	2
    31e4:	e7d2      	b.n	318c <ll_create_connection+0x3dc>
	LL_ASSERT(link);
    31e6:	4a09      	ldr	r2, [pc, #36]	; (320c <ll_create_connection+0x45c>)
    31e8:	490c      	ldr	r1, [pc, #48]	; (321c <ll_create_connection+0x46c>)
    31ea:	480a      	ldr	r0, [pc, #40]	; (3214 <ll_create_connection+0x464>)
    31ec:	f240 43ba 	movw	r3, #1210	; 0x4ba
    31f0:	f017 ff61 	bl	1b0b6 <printk>
    31f4:	4040      	eors	r0, r0
    31f6:	f380 8811 	msr	BASEPRI, r0
    31fa:	f04f 0003 	mov.w	r0, #3
    31fe:	df02      	svc	2
    3200:	e7bf      	b.n	3182 <ll_create_connection+0x3d2>
		ll_rx_link_release(link);
    3202:	9807      	ldr	r0, [sp, #28]
    3204:	f00a fd32 	bl	dc6c <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    3208:	2007      	movs	r0, #7
    320a:	e64d      	b.n	2ea8 <ll_create_connection+0xf8>
    320c:	000209cc 	.word	0x000209cc
    3210:	00020a10 	.word	0x00020a10
    3214:	000203b4 	.word	0x000203b4
    3218:	00020590 	.word	0x00020590
    321c:	00020858 	.word	0x00020858

00003220 <ull_central_setup>:
{
    3220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
    3224:	4680      	mov	r8, r0
{
    3226:	b08f      	sub	sp, #60	; 0x3c
    3228:	4604      	mov	r4, r0
    322a:	460f      	mov	r7, r1
    322c:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    322e:	f100 0124 	add.w	r1, r0, #36	; 0x24
    3232:	2206      	movs	r2, #6
    3234:	a80c      	add	r0, sp, #48	; 0x30
	peer_addr_type = pdu_tx->rx_addr;
    3236:	f818 6f1c 	ldrb.w	r6, [r8, #28]!
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
    323a:	f018 fd76 	bl	1bd2a <memcpy>
	chan_sel = pdu_tx->chan_sel;
    323e:	f894 901c 	ldrb.w	r9, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3242:	f018 0f01 	tst.w	r8, #1
	chan_sel = pdu_tx->chan_sel;
    3246:	f3c9 1b40 	ubfx	fp, r9, #5, #1
	peer_addr_type = pdu_tx->rx_addr;
    324a:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	chan_sel = pdu_tx->chan_sel;
    324e:	46d9      	mov	r9, fp
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    3250:	f040 8104 	bne.w	345c <ull_central_setup+0x23c>
	cc->status = 0U;
    3254:	2300      	movs	r3, #0
    3256:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
    3258:	7cb9      	ldrb	r1, [r7, #18]
	uint8_t rl_idx = ftr->rl_idx;
    325a:	f897 8011 	ldrb.w	r8, [r7, #17]
	if (ftr->lrpa_used) {
    325e:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    3262:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    3266:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
    326a:	f000 80e1 	beq.w	3430 <ull_central_setup+0x210>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    326e:	f104 011e 	add.w	r1, r4, #30
    3272:	f018 fd5a 	bl	1bd2a <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    3276:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    327a:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    327e:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    3282:	f000 80df 	beq.w	3444 <ull_central_setup+0x224>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3286:	4652      	mov	r2, sl
    3288:	4640      	mov	r0, r8
    328a:	f104 011e 	add.w	r1, r4, #30
    328e:	930b      	str	r3, [sp, #44]	; 0x2c
    3290:	f00f fbf0 	bl	12a74 <ll_rl_id_addr_get>
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3296:	4618      	mov	r0, r3
		cc->peer_addr_type += 2;
    3298:	7fa3      	ldrb	r3, [r4, #30]
    329a:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    329c:	a90c      	add	r1, sp, #48	; 0x30
		cc->peer_addr_type += 2;
    329e:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    32a0:	2206      	movs	r2, #6
    32a2:	f018 fd42 	bl	1bd2a <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
    32a6:	683b      	ldr	r3, [r7, #0]
    32a8:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    32ac:	89eb      	ldrh	r3, [r5, #14]
    32ae:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    32b0:	8a2b      	ldrh	r3, [r5, #16]
    32b2:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    32b4:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    32b8:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
    32ba:	f011 f8e3 	bl	14484 <lll_clock_sca_local_get>
    32be:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
    32c2:	f8d5 8000 	ldr.w	r8, [r5]
	lll->handle = ll_conn_handle_get(conn);
    32c6:	4640      	mov	r0, r8
    32c8:	f00c fa7c 	bl	f7c4 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    32cc:	687e      	ldr	r6, [r7, #4]
	lll->handle = ll_conn_handle_get(conn);
    32ce:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    32d0:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    32d2:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    32d4:	6820      	ldr	r0, [r4, #0]
    32d6:	f00a fccf 	bl	dc78 <ll_rx_put>
		rx->handle = lll->handle;
    32da:	89ab      	ldrh	r3, [r5, #12]
    32dc:	80f3      	strh	r3, [r6, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    32de:	231b      	movs	r3, #27
		link = rx->link;
    32e0:	6834      	ldr	r4, [r6, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    32e2:	7133      	strb	r3, [r6, #4]
		if (chan_sel) {
    32e4:	f1b9 0f00 	cmp.w	r9, #0
    32e8:	f040 80c6 	bne.w	3478 <ull_central_setup+0x258>
			cs->csa = 0x00;
    32ec:	f886 b01c 	strb.w	fp, [r6, #28]
	ll_rx_put(link, rx);
    32f0:	4631      	mov	r1, r6
    32f2:	4620      	mov	r0, r4
    32f4:	f00a fcc0 	bl	dc78 <ll_rx_put>
	ll_rx_sched();
    32f8:	f00a fcc8 	bl	dc8c <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    32fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3300:	f8d8 6008 	ldr.w	r6, [r8, #8]
						      lll->phy_flags);
    3304:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3308:	f8b5 900e 	ldrh.w	r9, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    330c:	68fc      	ldr	r4, [r7, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    330e:	429e      	cmp	r6, r3
    3310:	bf38      	it	cc
    3312:	461e      	movcc	r6, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3314:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3318:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    331c:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3320:	fb03 f909 	mul.w	r9, r3, r9
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3324:	f010 febe 	bl	140a4 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    3328:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    332a:	2200      	movs	r2, #0
    332c:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    332e:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3330:	2001      	movs	r0, #1
    3332:	f006 ff37 	bl	a1a4 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    3336:	4650      	mov	r0, sl
    3338:	f00b fdb2 	bl	eea0 <ull_scan_handle_get>
    333c:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    333e:	4b56      	ldr	r3, [pc, #344]	; (3498 <ull_central_setup+0x278>)
    3340:	f8cd a000 	str.w	sl, [sp]
    3344:	b2d2      	uxtb	r2, r2
    3346:	2101      	movs	r1, #1
    3348:	2000      	movs	r0, #0
    334a:	f008 f9b3 	bl	b6b4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    334e:	f030 0302 	bics.w	r3, r0, #2
    3352:	d00c      	beq.n	336e <ull_central_setup+0x14e>
    3354:	4a51      	ldr	r2, [pc, #324]	; (349c <ull_central_setup+0x27c>)
    3356:	4952      	ldr	r1, [pc, #328]	; (34a0 <ull_central_setup+0x280>)
    3358:	4852      	ldr	r0, [pc, #328]	; (34a4 <ull_central_setup+0x284>)
    335a:	f240 33c9 	movw	r3, #969	; 0x3c9
    335e:	f017 feaa 	bl	1b0b6 <printk>
    3362:	4040      	eors	r0, r0
    3364:	f380 8811 	msr	BASEPRI, r0
    3368:	f04f 0003 	mov.w	r0, #3
    336c:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    336e:	f04f 0a00 	mov.w	sl, #0
    3372:	4653      	mov	r3, sl
    3374:	2203      	movs	r2, #3
    3376:	2101      	movs	r1, #1
    3378:	f8cd a000 	str.w	sl, [sp]
    337c:	4650      	mov	r0, sl
    337e:	f008 f999 	bl	b6b4 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3382:	4640      	mov	r0, r8
    3384:	f00c fa1e 	bl	f7c4 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3388:	68bb      	ldr	r3, [r7, #8]
    338a:	f8cd 8018 	str.w	r8, [sp, #24]
    338e:	3b09      	subs	r3, #9
    3390:	1b9e      	subs	r6, r3, r6
    3392:	4b45      	ldr	r3, [pc, #276]	; (34a8 <ull_central_setup+0x288>)
    3394:	9307      	str	r3, [sp, #28]
    3396:	4b45      	ldr	r3, [pc, #276]	; (34ac <ull_central_setup+0x28c>)
    3398:	9305      	str	r3, [sp, #20]
    339a:	f240 33f9 	movw	r3, #1017	; 0x3f9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    339e:	4f44      	ldr	r7, [pc, #272]	; (34b0 <ull_central_setup+0x290>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    33a0:	9308      	str	r3, [sp, #32]
    33a2:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    33a6:	fba9 9807 	umull	r9, r8, r9, r7
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    33aa:	e9cd a303 	strd	sl, r3, [sp, #12]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    33ae:	1d45      	adds	r5, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    33b0:	a337      	add	r3, pc, #220	; (adr r3, 3490 <ull_central_setup+0x270>)
    33b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    33b6:	4648      	mov	r0, r9
    33b8:	4641      	mov	r1, r8
    33ba:	f7fd fba7 	bl	b0c <__aeabi_uldivmod>
    33be:	4610      	mov	r0, r2
    33c0:	4619      	mov	r1, r3
    33c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33c6:	2300      	movs	r3, #0
    33c8:	f7fd fba0 	bl	b0c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    33cc:	a330      	add	r3, pc, #192	; (adr r3, 3490 <ull_central_setup+0x270>)
    33ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    33d2:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    33d4:	4641      	mov	r1, r8
    33d6:	4648      	mov	r0, r9
    33d8:	f7fd fb98 	bl	b0c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    33dc:	a32c      	add	r3, pc, #176	; (adr r3, 3490 <ull_central_setup+0x270>)
    33de:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    33e2:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    33e4:	fba4 0107 	umull	r0, r1, r4, r7
    33e8:	f7fd fb90 	bl	b0c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    33ec:	b2ed      	uxtb	r5, r5
    33ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33f2:	9000      	str	r0, [sp, #0]
    33f4:	4633      	mov	r3, r6
    33f6:	462a      	mov	r2, r5
    33f8:	2101      	movs	r1, #1
    33fa:	4650      	mov	r0, sl
    33fc:	f008 f8d0 	bl	b5a0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3400:	f030 0302 	bics.w	r3, r0, #2
    3404:	d00c      	beq.n	3420 <ull_central_setup+0x200>
    3406:	4a25      	ldr	r2, [pc, #148]	; (349c <ull_central_setup+0x27c>)
    3408:	4925      	ldr	r1, [pc, #148]	; (34a0 <ull_central_setup+0x280>)
    340a:	4826      	ldr	r0, [pc, #152]	; (34a4 <ull_central_setup+0x284>)
    340c:	f240 33fa 	movw	r3, #1018	; 0x3fa
    3410:	f017 fe51 	bl	1b0b6 <printk>
    3414:	4040      	eors	r0, r0
    3416:	f380 8811 	msr	BASEPRI, r0
    341a:	f04f 0003 	mov.w	r0, #3
    341e:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3420:	2201      	movs	r2, #1
    3422:	2102      	movs	r1, #2
    3424:	4610      	mov	r0, r2
    3426:	f006 febd 	bl	a1a4 <mayfly_enable>
}
    342a:	b00f      	add	sp, #60	; 0x3c
    342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    3430:	f018 fc86 	bl	1bd40 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    3434:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3438:	f104 0325 	add.w	r3, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    343c:	f104 0a1f 	add.w	sl, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    3440:	f47f af21 	bne.w	3286 <ull_central_setup+0x66>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    3444:	4618      	mov	r0, r3
    3446:	2206      	movs	r2, #6
    3448:	2100      	movs	r1, #0
    344a:	f018 fc79 	bl	1bd40 <memset>
		cc->peer_addr_type = peer_addr_type;
    344e:	77a6      	strb	r6, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
    3450:	a90c      	add	r1, sp, #48	; 0x30
    3452:	4650      	mov	r0, sl
    3454:	2206      	movs	r2, #6
    3456:	f018 fc68 	bl	1bd2a <memcpy>
    345a:	e724      	b.n	32a6 <ull_central_setup+0x86>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    345c:	4a0f      	ldr	r2, [pc, #60]	; (349c <ull_central_setup+0x27c>)
    345e:	4915      	ldr	r1, [pc, #84]	; (34b4 <ull_central_setup+0x294>)
    3460:	4810      	ldr	r0, [pc, #64]	; (34a4 <ull_central_setup+0x284>)
    3462:	f44f 7352 	mov.w	r3, #840	; 0x348
    3466:	f017 fe26 	bl	1b0b6 <printk>
    346a:	4040      	eors	r0, r0
    346c:	f380 8811 	msr	BASEPRI, r0
    3470:	f04f 0003 	mov.w	r0, #3
    3474:	df02      	svc	2
    3476:	e6ed      	b.n	3254 <ull_central_setup+0x34>
			lll->data_chan_sel = 1;
    3478:	7f6b      	ldrb	r3, [r5, #29]
    347a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    347e:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3480:	1d28      	adds	r0, r5, #4
    3482:	f00f f8f5 	bl	12670 <lll_chan_id>
			cs->csa = 0x01;
    3486:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3488:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    348a:	7733      	strb	r3, [r6, #28]
    348c:	e730      	b.n	32f0 <ull_central_setup+0xd0>
    348e:	bf00      	nop
    3490:	1afd498d 	.word	0x1afd498d
    3494:	00000007 	.word	0x00000007
    3498:	00011ea9 	.word	0x00011ea9
    349c:	000209cc 	.word	0x000209cc
    34a0:	0002091c 	.word	0x0002091c
    34a4:	000203b4 	.word	0x000203b4
    34a8:	00011ead 	.word	0x00011ead
    34ac:	00011edd 	.word	0x00011edd
    34b0:	3b9aca00 	.word	0x3b9aca00
    34b4:	000204c4 	.word	0x000204c4

000034b8 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    34b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34bc:	b08f      	sub	sp, #60	; 0x3c
    34be:	461e      	mov	r6, r3
    34c0:	9309      	str	r3, [sp, #36]	; 0x24
    34c2:	4615      	mov	r5, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    34c4:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    34c6:	1d0a      	adds	r2, r1, #4
    34c8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 35d0 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    34cc:	f8df b104 	ldr.w	fp, [pc, #260]	; 35d4 <ull_sched_after_mstr_slot_get+0x11c>
    34d0:	f8df a104 	ldr.w	sl, [pc, #260]	; 35d8 <ull_sched_after_mstr_slot_get+0x120>
    34d4:	f8df 9104 	ldr.w	r9, [pc, #260]	; 35dc <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    34d8:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    34da:	2100      	movs	r1, #0
    34dc:	6031      	str	r1, [r6, #0]
{
    34de:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    34e0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    34e4:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    34e6:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    34e8:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    34ea:	9106      	str	r1, [sp, #24]
    34ec:	af0d      	add	r7, sp, #52	; 0x34
    34ee:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    34f0:	2302      	movs	r3, #2
    34f2:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    34f4:	e9cd 8701 	strd	r8, r7, [sp, #4]
    34f8:	9600      	str	r6, [sp, #0]
    34fa:	462b      	mov	r3, r5
    34fc:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    3500:	4621      	mov	r1, r4
    3502:	2000      	movs	r0, #0
    3504:	f008 f918 	bl	b738 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3508:	2802      	cmp	r0, #2
    350a:	d02d      	beq.n	3568 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    350c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    350e:	2b00      	cmp	r3, #0
    3510:	d130      	bne.n	3574 <ull_sched_after_mstr_slot_get+0xbc>

		if (ticker_id == 0xff) {
    3512:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3516:	2bff      	cmp	r3, #255	; 0xff
    3518:	d03c      	beq.n	3594 <ull_sched_after_mstr_slot_get+0xdc>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    351a:	2b05      	cmp	r3, #5
    351c:	d1e8      	bne.n	34f0 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    351e:	2000      	movs	r0, #0
    3520:	f00c f958 	bl	f7d4 <ll_conn_get>
		if (conn && !conn->lll.role) {
    3524:	2800      	cmp	r0, #0
    3526:	d0e3      	beq.n	34f0 <ull_sched_after_mstr_slot_get+0x38>
    3528:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    352c:	2b00      	cmp	r3, #0
    352e:	dbdf      	blt.n	34f0 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    3530:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
    3532:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    3534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    3536:	29ff      	cmp	r1, #255	; 0xff
    3538:	d00c      	beq.n	3554 <ull_sched_after_mstr_slot_get+0x9c>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    353a:	9906      	ldr	r1, [sp, #24]
    353c:	9207      	str	r2, [sp, #28]
    353e:	4618      	mov	r0, r3
    3540:	9304      	str	r3, [sp, #16]
    3542:	f008 f959 	bl	b7f8 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    3546:	9b05      	ldr	r3, [sp, #20]
    3548:	9a08      	ldr	r2, [sp, #32]
    354a:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    354c:	4288      	cmp	r0, r1
    354e:	9b04      	ldr	r3, [sp, #16]
    3550:	9a07      	ldr	r2, [sp, #28]
    3552:	d822      	bhi.n	359a <ull_sched_after_mstr_slot_get+0xe2>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    3554:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    3558:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    355c:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    355e:	e7c7      	b.n	34f0 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3560:	4621      	mov	r1, r4
    3562:	2000      	movs	r0, #0
    3564:	f008 f92e 	bl	b7c4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    356a:	2b02      	cmp	r3, #2
    356c:	d0f8      	beq.n	3560 <ull_sched_after_mstr_slot_get+0xa8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    356e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3570:	2b00      	cmp	r3, #0
    3572:	d0ce      	beq.n	3512 <ull_sched_after_mstr_slot_get+0x5a>
    3574:	2373      	movs	r3, #115	; 0x73
    3576:	465a      	mov	r2, fp
    3578:	4651      	mov	r1, sl
    357a:	4648      	mov	r0, r9
    357c:	f017 fd9b 	bl	1b0b6 <printk>
    3580:	4040      	eors	r0, r0
    3582:	f380 8811 	msr	BASEPRI, r0
    3586:	f04f 0003 	mov.w	r0, #3
    358a:	df02      	svc	2
		if (ticker_id == 0xff) {
    358c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3590:	2bff      	cmp	r3, #255	; 0xff
    3592:	d1c2      	bne.n	351a <ull_sched_after_mstr_slot_get+0x62>
		}
	}

	if (ticker_id_prev != 0xff) {
    3594:	9b04      	ldr	r3, [sp, #16]
    3596:	2bff      	cmp	r3, #255	; 0xff
    3598:	d010      	beq.n	35bc <ull_sched_after_mstr_slot_get+0x104>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    359a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    359e:	4810      	ldr	r0, [pc, #64]	; (35e0 <ull_sched_after_mstr_slot_get+0x128>)
    35a0:	4413      	add	r3, r2
    35a2:	fba3 0100 	umull	r0, r1, r3, r0
    35a6:	2207      	movs	r2, #7
    35a8:	fb02 1103 	mla	r1, r2, r3, r1
    35ac:	a306      	add	r3, pc, #24	; (adr r3, 35c8 <ull_sched_after_mstr_slot_get+0x110>)
    35ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    35b2:	f7fd faab 	bl	b0c <__aeabi_uldivmod>
    35b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    35b8:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    35ba:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    35bc:	b00f      	add	sp, #60	; 0x3c
    35be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35c2:	bf00      	nop
    35c4:	f3af 8000 	nop.w
    35c8:	3b9aca00 	.word	0x3b9aca00
    35cc:	00000000 	.word	0x00000000
    35d0:	00012279 	.word	0x00012279
    35d4:	00020a50 	.word	0x00020a50
    35d8:	00020a94 	.word	0x00020a94
    35dc:	000203b4 	.word	0x000203b4
    35e0:	1afd498d 	.word	0x1afd498d
    35e4:	00000000 	.word	0x00000000

000035e8 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    35e8:	b570      	push	{r4, r5, r6, lr}
    35ea:	b082      	sub	sp, #8
    35ec:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    35ee:	9201      	str	r2, [sp, #4]
{
    35f0:	4615      	mov	r5, r2
    35f2:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    35f4:	aa01      	add	r2, sp, #4
    35f6:	2002      	movs	r0, #2
    35f8:	f7ff ff5e 	bl	34b8 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    35fc:	6823      	ldr	r3, [r4, #0]
    35fe:	b30b      	cbz	r3, 3644 <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    3600:	9801      	ldr	r0, [sp, #4]
    3602:	1b43      	subs	r3, r0, r5
    3604:	021b      	lsls	r3, r3, #8
    3606:	d41f      	bmi.n	3648 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    3608:	4629      	mov	r1, r5
    360a:	f008 f8f5 	bl	b7f8 <ticker_ticks_diff_get>
    360e:	4a1a      	ldr	r2, [pc, #104]	; (3678 <after_mstr_offset_get+0x90>)
    3610:	4603      	mov	r3, r0
    3612:	2107      	movs	r1, #7
    3614:	fba0 0202 	umull	r0, r2, r0, r2
    3618:	fb01 2103 	mla	r1, r1, r3, r2
    361c:	a314      	add	r3, pc, #80	; (adr r3, 3670 <after_mstr_offset_get+0x88>)
    361e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3622:	f7fd fa73 	bl	b0c <__aeabi_uldivmod>
    3626:	6822      	ldr	r2, [r4, #0]
    3628:	4402      	add	r2, r0
    362a:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    362c:	2a00      	cmp	r2, #0
    362e:	db09      	blt.n	3644 <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    3630:	f240 40e2 	movw	r0, #1250	; 0x4e2
    3634:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    3638:	4290      	cmp	r0, r2
    363a:	d203      	bcs.n	3644 <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    363c:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    363e:	4282      	cmp	r2, r0
    3640:	d8fc      	bhi.n	363c <after_mstr_offset_get+0x54>
    3642:	6022      	str	r2, [r4, #0]
		}
	}
}
    3644:	b002      	add	sp, #8
    3646:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    3648:	4601      	mov	r1, r0
    364a:	4628      	mov	r0, r5
    364c:	f008 f8d4 	bl	b7f8 <ticker_ticks_diff_get>
    3650:	4a09      	ldr	r2, [pc, #36]	; (3678 <after_mstr_offset_get+0x90>)
    3652:	4603      	mov	r3, r0
    3654:	2107      	movs	r1, #7
    3656:	fba0 0202 	umull	r0, r2, r0, r2
    365a:	fb01 2103 	mla	r1, r1, r3, r2
    365e:	a304      	add	r3, pc, #16	; (adr r3, 3670 <after_mstr_offset_get+0x88>)
    3660:	e9d3 2300 	ldrd	r2, r3, [r3]
    3664:	f7fd fa52 	bl	b0c <__aeabi_uldivmod>
    3668:	6822      	ldr	r2, [r4, #0]
    366a:	1a12      	subs	r2, r2, r0
    366c:	6022      	str	r2, [r4, #0]
    366e:	e7dd      	b.n	362c <after_mstr_offset_get+0x44>
    3670:	3b9aca00 	.word	0x3b9aca00
    3674:	00000000 	.word	0x00000000
    3678:	1afd498d 	.word	0x1afd498d
    367c:	00000000 	.word	0x00000000

00003680 <ull_sched_mfy_win_offset_select>:
{
    3680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3684:	f8b0 116c 	ldrh.w	r1, [r0, #364]	; 0x16c
{
    3688:	b088      	sub	sp, #32
    368a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    368c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    3690:	4847      	ldr	r0, [pc, #284]	; (37b0 <ull_sched_mfy_win_offset_select+0x130>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3692:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3694:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    3698:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    369a:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    369c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    36a0:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    36a4:	fba1 0100 	umull	r0, r1, r1, r0
    36a8:	a33f      	add	r3, pc, #252	; (adr r3, 37a8 <ull_sched_mfy_win_offset_select+0x128>)
    36aa:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    36ae:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    36b0:	f7fd fa2c 	bl	b0c <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    36b4:	f10d 030f 	add.w	r3, sp, #15
    36b8:	9501      	str	r5, [sp, #4]
    36ba:	9300      	str	r3, [sp, #0]
    36bc:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    36c0:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    36c2:	aa04      	add	r2, sp, #16
    36c4:	4620      	mov	r0, r4
    36c6:	2101      	movs	r1, #1
    36c8:	f00e fdd8 	bl	1227c <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    36cc:	f89d 800f 	ldrb.w	r8, [sp, #15]
    36d0:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    36d4:	fa5f fc8c 	uxtb.w	ip, ip
    36d8:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    36dc:	4630      	mov	r0, r6
    36de:	f504 77b6 	add.w	r7, r4, #364	; 0x16c
    36e2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    36e6:	f504 76bc 	add.w	r6, r4, #376	; 0x178
			if (win_offset_s != 0xffff) {
    36ea:	f64f 7eff 	movw	lr, #65535	; 0xffff
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    36ee:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    36f0:	f1b8 0f00 	cmp.w	r8, #0
    36f4:	d00a      	beq.n	370c <ull_sched_mfy_win_offset_select+0x8c>
    36f6:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    36f8:	4572      	cmp	r2, lr
    36fa:	d004      	beq.n	3706 <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    36fc:	8819      	ldrh	r1, [r3, #0]
    36fe:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    3700:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    3704:	d01d      	beq.n	3742 <ull_sched_mfy_win_offset_select+0xc2>
		while (offset_index_m < offset_m_max) {
    3706:	3302      	adds	r3, #2
    3708:	459c      	cmp	ip, r3
    370a:	d1f5      	bne.n	36f8 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    370c:	3702      	adds	r7, #2
    370e:	42be      	cmp	r6, r7
    3710:	d1ed      	bne.n	36ee <ull_sched_mfy_win_offset_select+0x6e>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3712:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	} else if (!has_offset_s) {
    3716:	bb48      	cbnz	r0, 376c <ull_sched_mfy_win_offset_select+0xec>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    3718:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    371c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    3720:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
    3724:	0a10      	lsrs	r0, r2, #8
    3726:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
	dst[0] = val;
    372a:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
    372c:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    372e:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    3732:	2204      	movs	r2, #4
    3734:	f362 0302 	bfi	r3, r2, #0, #3
    3738:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    373c:	b008      	add	sp, #32
    373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3742:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    3746:	f240 43e2 	movw	r3, #1250	; 0x4e2
    374a:	fb02 f303 	mul.w	r3, r2, r3
    374e:	0a10      	lsrs	r0, r2, #8
    3750:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	dst[0] = val;
    3754:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    3756:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    3758:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    375c:	2204      	movs	r2, #4
    375e:	f362 0302 	bfi	r3, r2, #0, #3
    3762:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
    3766:	b008      	add	sp, #32
    3768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx->len =
    376c:	2203      	movs	r2, #3
    376e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3772:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    3776:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
    377a:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    377c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    3780:	2011      	movs	r0, #17
    3782:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3786:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    378a:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    378e:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3790:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    3792:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    3796:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    3798:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
}
    379c:	b008      	add	sp, #32
    379e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37a2:	bf00      	nop
    37a4:	f3af 8000 	nop.w
    37a8:	1afd498d 	.word	0x1afd498d
    37ac:	00000007 	.word	0x00000007
    37b0:	3b9aca00 	.word	0x3b9aca00
    37b4:	00000000 	.word	0x00000000

000037b8 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    37b8:	b538      	push	{r3, r4, r5, lr}
    37ba:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    37bc:	f011 fb9c 	bl	14ef8 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
    37c0:	7da2      	ldrb	r2, [r4, #22]
    37c2:	f3c2 0341 	ubfx	r3, r2, #1, #2
    37c6:	3301      	adds	r3, #1
    37c8:	f003 0303 	and.w	r3, r3, #3
    37cc:	2b03      	cmp	r3, #3
    37ce:	d034      	beq.n	383a <isr_window+0x82>
    37d0:	f363 0242 	bfi	r2, r3, #1, #2
    37d4:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    37d6:	f103 0025 	add.w	r0, r3, #37	; 0x25
    37da:	f010 fc21 	bl	14020 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    37de:	6863      	ldr	r3, [r4, #4]
    37e0:	b30b      	cbz	r3, 3826 <isr_window+0x6e>
    37e2:	6923      	ldr	r3, [r4, #16]
    37e4:	b1fb      	cbz	r3, 3826 <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    37e6:	f012 ff2f 	bl	16648 <radio_tmr_start_get>
    37ea:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    37ec:	f008 f802 	bl	b7f4 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    37f0:	1cc1      	adds	r1, r0, #3
    37f2:	2000      	movs	r0, #0
    37f4:	f012 fef6 	bl	165e4 <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
    37f8:	f012 ff58 	bl	166ac <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    37fc:	f012 ff24 	bl	16648 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3800:	4629      	mov	r1, r5
    3802:	f007 fff9 	bl	b7f8 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    3806:	4912      	ldr	r1, [pc, #72]	; (3850 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3808:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    380a:	2207      	movs	r2, #7
    380c:	fba0 0101 	umull	r0, r1, r0, r1
    3810:	fb02 1103 	mla	r1, r2, r3, r1
    3814:	a30c      	add	r3, pc, #48	; (adr r3, 3848 <isr_window+0x90>)
    3816:	e9d3 2300 	ldrd	r2, r3, [r3]
    381a:	f7fd f977 	bl	b0c <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    381e:	6923      	ldr	r3, [r4, #16]
    3820:	1a1b      	subs	r3, r3, r0
    3822:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    3824:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    3826:	f007 ffe5 	bl	b7f4 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    382a:	1cc1      	adds	r1, r0, #3
    382c:	2000      	movs	r0, #0
    382e:	f012 fed9 	bl	165e4 <radio_tmr_start_tick>
}
    3832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    3836:	f012 bf39 	b.w	166ac <radio_tmr_end_capture>
		lll->chan = 0U;
    383a:	f36f 0242 	bfc	r2, #1, #2
    383e:	75a2      	strb	r2, [r4, #22]
    3840:	2025      	movs	r0, #37	; 0x25
    3842:	e7ca      	b.n	37da <isr_window+0x22>
    3844:	f3af 8000 	nop.w
    3848:	3b9aca00 	.word	0x3b9aca00
    384c:	00000000 	.word	0x00000000
    3850:	1afd498d 	.word	0x1afd498d
    3854:	00000000 	.word	0x00000000

00003858 <isr_rx>:
{
    3858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    385c:	b087      	sub	sp, #28
    385e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    3860:	f012 fcd0 	bl	16204 <radio_is_done>
	if (trx_done) {
    3864:	b2c0      	uxtb	r0, r0
    3866:	b950      	cbnz	r0, 387e <isr_rx+0x26>
	lll_isr_status_reset();
    3868:	f010 fc30 	bl	140cc <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    386c:	48b4      	ldr	r0, [pc, #720]	; (3b40 <isr_rx+0x2e8>)
    386e:	4621      	mov	r1, r4
    3870:	f012 fba4 	bl	15fbc <radio_isr_set>
}
    3874:	b007      	add	sp, #28
    3876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    387a:	f012 bc99 	b.w	161b0 <radio_disable>
		crc_ok = radio_crc_is_valid();
    387e:	f012 fce1 	bl	16244 <radio_crc_is_valid>
    3882:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    3884:	f012 fe00 	bl	16488 <radio_filter_has_match>
    3888:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
    388a:	f012 fe07 	bl	1649c <radio_filter_match_get>
    388e:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
    3890:	f012 fffa 	bl	16888 <radio_ar_has_match>
    3894:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
    3896:	f012 ffdb 	bl	16850 <radio_ar_match_get>
    389a:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    389c:	f012 fdb8 	bl	16410 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
    38a0:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
    38a2:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    38a4:	f012 fd9a 	bl	163dc <radio_phy_flags_rx_get>
	lll_isr_status_reset();
    38a8:	f010 fc10 	bl	140cc <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    38ac:	2d00      	cmp	r5, #0
    38ae:	d0dd      	beq.n	386c <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
    38b0:	2001      	movs	r0, #1
    38b2:	f00a fb3d 	bl	df30 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    38b6:	4605      	mov	r5, r0
    38b8:	2800      	cmp	r0, #0
    38ba:	f000 817d 	beq.w	3bb8 <isr_rx+0x360>
	rl_idx = devmatch_ok ?
    38be:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
    38c2:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
    38c4:	f040 816f 	bne.w	3ba6 <isr_rx+0x34e>
    38c8:	2e00      	cmp	r6, #0
    38ca:	f040 80cc 	bne.w	3a66 <isr_rx+0x20e>
    38ce:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
    38d0:	465a      	mov	r2, fp
    38d2:	463b      	mov	r3, r7
    38d4:	4631      	mov	r1, r6
    38d6:	4620      	mov	r0, r4
    38d8:	f011 fd3c 	bl	15354 <lll_scan_isr_rx_check>
	if (has_adva &&
    38dc:	2800      	cmp	r0, #0
    38de:	d0c5      	beq.n	386c <isr_rx+0x14>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    38e0:	7f2b      	ldrb	r3, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
    38e2:	6862      	ldr	r2, [r4, #4]
	bool dir_report = false;
    38e4:	2100      	movs	r1, #0
    38e6:	f88d 1013 	strb.w	r1, [sp, #19]
		rssi_ready = radio_rssi_is_ready();
    38ea:	fa5f f888 	uxtb.w	r8, r8
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    38ee:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
    38f2:	2a00      	cmp	r2, #0
    38f4:	f000 80d3 	beq.w	3a9e <isr_rx+0x246>
    38f8:	6862      	ldr	r2, [r4, #4]
    38fa:	f892 2020 	ldrb.w	r2, [r2, #32]
    38fe:	0790      	lsls	r0, r2, #30
    3900:	f100 80cd 	bmi.w	3a9e <isr_rx+0x246>
    3904:	2907      	cmp	r1, #7
    3906:	d0b1      	beq.n	386c <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    3908:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    390a:	0712      	lsls	r2, r2, #28
    390c:	f140 8162 	bpl.w	3bd4 <isr_rx+0x37c>
    3910:	2900      	cmp	r1, #0
    3912:	f040 80ae 	bne.w	3a72 <isr_rx+0x21a>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    3916:	7f6b      	ldrb	r3, [r5, #29]
    3918:	2b25      	cmp	r3, #37	; 0x25
    391a:	f200 8122 	bhi.w	3b62 <isr_rx+0x30a>
			rx = ull_pdu_rx_alloc_peek(4);
    391e:	2004      	movs	r0, #4
    3920:	f00a fb06 	bl	df30 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    3924:	2800      	cmp	r0, #0
    3926:	d0a1      	beq.n	386c <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    3928:	f012 fec8 	bl	166bc <radio_tmr_end_get>
		if (!lll->ticks_window) {
    392c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    392e:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    3930:	b943      	cbnz	r3, 3944 <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    3932:	8c23      	ldrh	r3, [r4, #32]
    3934:	f240 2271 	movw	r2, #625	; 0x271
    3938:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    393c:	fbb0 f2f3 	udiv	r2, r0, r3
    3940:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    3944:	6823      	ldr	r3, [r4, #0]
    3946:	691a      	ldr	r2, [r3, #16]
    3948:	4b7e      	ldr	r3, [pc, #504]	; (3b44 <isr_rx+0x2ec>)
    394a:	2107      	movs	r1, #7
    394c:	fba2 0303 	umull	r0, r3, r2, r3
    3950:	fb01 3102 	mla	r1, r1, r2, r3
    3954:	a378      	add	r3, pc, #480	; (adr r3, 3b38 <isr_rx+0x2e0>)
    3956:	e9d3 2300 	ldrd	r2, r3, [r3]
    395a:	f7fd f8d7 	bl	b0c <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    395e:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    3962:	4543      	cmp	r3, r8
    3964:	d382      	bcc.n	386c <isr_rx+0x14>
		radio_switch_complete_and_disable();
    3966:	f012 fd2b 	bl	163c0 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    396a:	4638      	mov	r0, r7
		lll_conn = lll->conn;
    396c:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    396e:	f00f fe33 	bl	135d8 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    3972:	7de3      	ldrb	r3, [r4, #23]
    3974:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3976:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
    3978:	f140 81cf 	bpl.w	3d1a <isr_rx+0x4c2>
    397c:	2800      	cmp	r0, #0
    397e:	f000 81cc 	beq.w	3d1a <isr_rx+0x4c2>
			init_addr = lrpa->val;
    3982:	4683      	mov	fp, r0
			init_tx_addr = 1;
    3984:	f04f 0801 	mov.w	r8, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
    3988:	f012 fc6a 	bl	16260 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    398c:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    398e:	aa05      	add	r2, sp, #20
    3990:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
    3992:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    3996:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
    3998:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    399a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    399e:	9200      	str	r2, [sp, #0]
    39a0:	4620      	mov	r0, r4
    39a2:	2200      	movs	r2, #0
    39a4:	e9cd 8b01 	strd	r8, fp, [sp, #4]
    39a8:	f011 fcee 	bl	15388 <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    39ac:	4650      	mov	r0, sl
    39ae:	f012 fbdf 	bl	16170 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    39b2:	f012 fc1d 	bl	161f0 <radio_is_ready>
    39b6:	2800      	cmp	r0, #0
    39b8:	f040 81c5 	bne.w	3d46 <isr_rx+0x4ee>
		radio_isr_set(isr_done_cleanup, lll);
    39bc:	4862      	ldr	r0, [pc, #392]	; (3b48 <isr_rx+0x2f0>)
    39be:	4621      	mov	r1, r4
    39c0:	f012 fafc 	bl	15fbc <radio_isr_set>
		lll->conn->central.initiated = 1U;
    39c4:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
    39c6:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
    39c8:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    39cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
    39d0:	f042 0201 	orr.w	r2, r2, #1
    39d4:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    39d8:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    39da:	f00a fac7 	bl	df6c <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    39de:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
    39e0:	4680      	mov	r8, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    39e2:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
    39e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    39e8:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
    39ea:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
    39ec:	4651      	mov	r1, sl
    39ee:	2224      	movs	r2, #36	; 0x24
    39f0:	301c      	adds	r0, #28
    39f2:	f018 f99a 	bl	1bd2a <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    39f6:	f898 301c 	ldrb.w	r3, [r8, #28]
		ftr->param = lll;
    39fa:	f8c8 4008 	str.w	r4, [r8, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    39fe:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    3a02:	f365 1345 	bfi	r3, r5, #5, #1
    3a06:	f888 301c 	strb.w	r3, [r8, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    3a0a:	f012 fe1d 	bl	16648 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    3a0e:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    3a10:	f8c8 0010 	str.w	r0, [r8, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    3a14:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    3a16:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    3a18:	f012 fbb8 	bl	1618c <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3a1c:	2e00      	cmp	r6, #0
    3a1e:	bf08      	it	eq
    3a20:	27ff      	moveq	r7, #255	; 0xff
    3a22:	f888 7019 	strb.w	r7, [r8, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3a26:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    3a28:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3a2a:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
    3a2e:	f8c8 5014 	str.w	r5, [r8, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3a32:	d003      	beq.n	3a3c <isr_rx+0x1e4>
    3a34:	f1b9 0300 	subs.w	r3, r9, #0
    3a38:	bf18      	it	ne
    3a3a:	2301      	movne	r3, #1
    3a3c:	f898 201a 	ldrb.w	r2, [r8, #26]
    3a40:	f363 0200 	bfi	r2, r3, #0, #1
    3a44:	f888 201a 	strb.w	r2, [r8, #26]
			ftr->extra = ull_pdu_rx_alloc();
    3a48:	f00a fa90 	bl	df6c <ull_pdu_rx_alloc>
    3a4c:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    3a4e:	4641      	mov	r1, r8
    3a50:	f8d8 0000 	ldr.w	r0, [r8]
			ftr->extra = ull_pdu_rx_alloc();
    3a54:	f8c8 300c 	str.w	r3, [r8, #12]
		ull_rx_put(rx->hdr.link, rx);
    3a58:	f00a fa9e 	bl	df98 <ull_rx_put>
		ull_rx_sched();
    3a5c:	f00a faac 	bl	dfb8 <ull_rx_sched>
}
    3a60:	b007      	add	sp, #28
    3a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    3a66:	fa5f f08a 	uxtb.w	r0, sl
    3a6a:	f00f fe43 	bl	136f4 <ull_filter_lll_rl_irk_idx>
    3a6e:	4607      	mov	r7, r0
    3a70:	e72e      	b.n	38d0 <isr_rx+0x78>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    3a72:	2901      	cmp	r1, #1
    3a74:	d115      	bne.n	3aa2 <isr_rx+0x24a>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    3a76:	7f6b      	ldrb	r3, [r5, #29]
    3a78:	2b0c      	cmp	r3, #12
    3a7a:	f47f aef7 	bne.w	386c <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
    3a7e:	7f2a      	ldrb	r2, [r5, #28]
    3a80:	9700      	str	r7, [sp, #0]
    3a82:	2300      	movs	r3, #0
    3a84:	9301      	str	r3, [sp, #4]
    3a86:	09d2      	lsrs	r2, r2, #7
    3a88:	f105 0324 	add.w	r3, r5, #36	; 0x24
    3a8c:	4620      	mov	r0, r4
    3a8e:	f011 fbb3 	bl	151f8 <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
    3a92:	2800      	cmp	r0, #0
    3a94:	f47f af43 	bne.w	391e <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3a98:	7f29      	ldrb	r1, [r5, #28]
    3a9a:	f001 010f 	and.w	r1, r1, #15
    3a9e:	2900      	cmp	r1, #0
    3aa0:	d054      	beq.n	3b4c <isr_rx+0x2f4>
    3aa2:	2906      	cmp	r1, #6
    3aa4:	d052      	beq.n	3b4c <isr_rx+0x2f4>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3aa6:	2902      	cmp	r1, #2
    3aa8:	f000 80a7 	beq.w	3bfa <isr_rx+0x3a2>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    3aac:	2901      	cmp	r1, #1
    3aae:	d158      	bne.n	3b62 <isr_rx+0x30a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    3ab0:	7f6b      	ldrb	r3, [r5, #29]
    3ab2:	2b0c      	cmp	r3, #12
    3ab4:	f47f aeda 	bne.w	386c <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    3ab8:	7f2a      	ldrb	r2, [r5, #28]
    3aba:	9700      	str	r7, [sp, #0]
    3abc:	f10d 0313 	add.w	r3, sp, #19
    3ac0:	9301      	str	r3, [sp, #4]
    3ac2:	09d2      	lsrs	r2, r2, #7
    3ac4:	f105 0324 	add.w	r3, r5, #36	; 0x24
    3ac8:	2100      	movs	r1, #0
    3aca:	4620      	mov	r0, r4
    3acc:	f011 fb94 	bl	151f8 <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    3ad0:	2800      	cmp	r0, #0
    3ad2:	d046      	beq.n	3b62 <isr_rx+0x30a>
		 (pdu_adv_rx->len != 0) &&
    3ad4:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	f43f aec8 	beq.w	386c <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    3adc:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    3ade:	b12b      	cbz	r3, 3aec <isr_rx+0x294>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    3ae0:	7f2b      	ldrb	r3, [r5, #28]
    3ae2:	f003 030f 	and.w	r3, r3, #15
    3ae6:	2b07      	cmp	r3, #7
    3ae8:	f47f aec0 	bne.w	386c <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    3aec:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
    3aee:	f89d 9013 	ldrb.w	r9, [sp, #19]
	node_rx = ull_pdu_rx_alloc_peek(3);
    3af2:	f00a fa1d 	bl	df30 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    3af6:	4605      	mov	r5, r0
    3af8:	2800      	cmp	r0, #0
    3afa:	f43f aeb7 	beq.w	386c <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    3afe:	f00a fa35 	bl	df6c <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    3b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3b06:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    3b08:	2305      	movs	r3, #5
    3b0a:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3b0c:	f1b8 0f00 	cmp.w	r8, #0
    3b10:	d16f      	bne.n	3bf2 <isr_rx+0x39a>
    3b12:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    3b14:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3b16:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3b18:	2e00      	cmp	r6, #0
    3b1a:	bf08      	it	eq
    3b1c:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
    3b1e:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    3b22:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
    3b24:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    3b26:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3b28:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    3b2a:	f00a fa35 	bl	df98 <ull_rx_put>
	ull_rx_sched();
    3b2e:	f00a fa43 	bl	dfb8 <ull_rx_sched>
	if (!err) {
    3b32:	e69b      	b.n	386c <isr_rx+0x14>
    3b34:	f3af 8000 	nop.w
    3b38:	3b9aca00 	.word	0x3b9aca00
    3b3c:	00000000 	.word	0x00000000
    3b40:	00014fb1 	.word	0x00014fb1
    3b44:	1afd498d 	.word	0x1afd498d
    3b48:	000151a9 	.word	0x000151a9
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    3b4c:	7f6b      	ldrb	r3, [r5, #29]
    3b4e:	2b25      	cmp	r3, #37	; 0x25
    3b50:	d807      	bhi.n	3b62 <isr_rx+0x30a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    3b52:	7da2      	ldrb	r2, [r4, #22]
    3b54:	0692      	lsls	r2, r2, #26
    3b56:	d502      	bpl.n	3b5e <isr_rx+0x306>
		   !lll->conn) {
    3b58:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    3b5a:	2a00      	cmp	r2, #0
    3b5c:	d04f      	beq.n	3bfe <isr_rx+0x3a6>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    3b5e:	2b25      	cmp	r3, #37	; 0x25
    3b60:	d9b9      	bls.n	3ad6 <isr_rx+0x27e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    3b62:	7f2b      	ldrb	r3, [r5, #28]
    3b64:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    3b68:	2b04      	cmp	r3, #4
    3b6a:	f47f ae7f 	bne.w	386c <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    3b6e:	7f6b      	ldrb	r3, [r5, #29]
    3b70:	2b25      	cmp	r3, #37	; 0x25
    3b72:	f63f ae7b 	bhi.w	386c <isr_rx+0x14>
		   (lll->state != 0U) &&
    3b76:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    3b78:	07d9      	lsls	r1, r3, #31
    3b7a:	f57f ae77 	bpl.w	386c <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    3b7e:	f012 fb6f 	bl	16260 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    3b82:	7f2b      	ldrb	r3, [r5, #28]
    3b84:	7802      	ldrb	r2, [r0, #0]
    3b86:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3b8a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    3b8e:	f47f ae6d 	bne.w	386c <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    3b92:	3008      	adds	r0, #8
    3b94:	2206      	movs	r2, #6
    3b96:	f105 011e 	add.w	r1, r5, #30
    3b9a:	f018 f8b5 	bl	1bd08 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    3b9e:	2800      	cmp	r0, #0
    3ba0:	f47f ae64 	bne.w	386c <isr_rx+0x14>
    3ba4:	e796      	b.n	3ad4 <isr_rx+0x27c>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    3ba6:	7da0      	ldrb	r0, [r4, #22]
    3ba8:	fa5f f189 	uxtb.w	r1, r9
    3bac:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3bb0:	f00f fd36 	bl	13620 <ull_filter_lll_rl_idx>
    3bb4:	4607      	mov	r7, r0
    3bb6:	e68b      	b.n	38d0 <isr_rx+0x78>
	LL_ASSERT(node_rx);
    3bb8:	4a71      	ldr	r2, [pc, #452]	; (3d80 <isr_rx+0x528>)
    3bba:	4972      	ldr	r1, [pc, #456]	; (3d84 <isr_rx+0x52c>)
    3bbc:	4872      	ldr	r0, [pc, #456]	; (3d88 <isr_rx+0x530>)
    3bbe:	f240 23c3 	movw	r3, #707	; 0x2c3
    3bc2:	f017 fa78 	bl	1b0b6 <printk>
    3bc6:	4040      	eors	r0, r0
    3bc8:	f380 8811 	msr	BASEPRI, r0
    3bcc:	f04f 0003 	mov.w	r0, #3
    3bd0:	df02      	svc	2
    3bd2:	e674      	b.n	38be <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
    3bd4:	2fff      	cmp	r7, #255	; 0xff
    3bd6:	f88d 7014 	strb.w	r7, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    3bda:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
    3bde:	d078      	beq.n	3cd2 <isr_rx+0x47a>
		return (rl_idx == lll->rl_idx);
    3be0:	7e23      	ldrb	r3, [r4, #24]
    3be2:	1bdb      	subs	r3, r3, r7
    3be4:	fab3 f383 	clz	r3, r3
    3be8:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    3bea:	2b00      	cmp	r3, #0
    3bec:	f47f ae90 	bne.w	3910 <isr_rx+0xb8>
    3bf0:	e755      	b.n	3a9e <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3bf2:	f012 fbff 	bl	163f4 <radio_rssi_get>
    3bf6:	b2c0      	uxtb	r0, r0
    3bf8:	e78c      	b.n	3b14 <isr_rx+0x2bc>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    3bfa:	7f6b      	ldrb	r3, [r5, #29]
    3bfc:	e7af      	b.n	3b5e <isr_rx+0x306>
		radio_tmr_tifs_set(EVENT_IFS_US);
    3bfe:	2096      	movs	r0, #150	; 0x96
    3c00:	f012 fc62 	bl	164c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    3c04:	2000      	movs	r0, #0
    3c06:	f012 fb33 	bl	16270 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
    3c0a:	2003      	movs	r0, #3
    3c0c:	f00a f990 	bl	df30 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    3c10:	4681      	mov	r9, r0
    3c12:	2800      	cmp	r0, #0
    3c14:	f43f ae2a 	beq.w	386c <isr_rx+0x14>
	ull_pdu_rx_alloc();
    3c18:	f00a f9a8 	bl	df6c <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    3c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3c20:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    3c24:	2305      	movs	r3, #5
    3c26:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3c2a:	f1b8 0f00 	cmp.w	r8, #0
    3c2e:	d170      	bne.n	3d12 <isr_rx+0x4ba>
    3c30:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3c32:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3c34:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3c38:	bf14      	ite	ne
    3c3a:	463b      	movne	r3, r7
    3c3c:	23ff      	moveq	r3, #255	; 0xff
    3c3e:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
    3c42:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    3c46:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
    3c4a:	f36f 0341 	bfc	r3, #1, #1
    3c4e:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    3c52:	4649      	mov	r1, r9
    3c54:	f00a f9a0 	bl	df98 <ull_rx_put>
	ull_rx_sched();
    3c58:	f00a f9ae 	bl	dfb8 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    3c5c:	f012 fb00 	bl	16260 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    3c60:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    3c62:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    3c64:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    3c68:	7832      	ldrb	r2, [r6, #0]
    3c6a:	01db      	lsls	r3, r3, #7
    3c6c:	f002 0270 	and.w	r2, r2, #112	; 0x70
    3c70:	f043 0303 	orr.w	r3, r3, #3
    3c74:	4313      	orrs	r3, r2
    3c76:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    3c78:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3c7a:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    3c7c:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3c7e:	f00f fcab 	bl	135d8 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    3c82:	7de3      	ldrb	r3, [r4, #23]
    3c84:	079f      	lsls	r7, r3, #30
    3c86:	d54f      	bpl.n	3d28 <isr_rx+0x4d0>
    3c88:	2800      	cmp	r0, #0
    3c8a:	d04d      	beq.n	3d28 <isr_rx+0x4d0>
			pdu_tx->tx_addr = 1;
    3c8c:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    3c8e:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
    3c90:	4630      	mov	r0, r6
    3c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3c96:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
    3c9a:	2206      	movs	r2, #6
    3c9c:	f018 f845 	bl	1bd2a <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
    3ca0:	2206      	movs	r2, #6
    3ca2:	f105 011e 	add.w	r1, r5, #30
    3ca6:	f106 0008 	add.w	r0, r6, #8
    3caa:	f018 f83e 	bl	1bd2a <memcpy>
		radio_pkt_tx_set(pdu_tx);
    3cae:	4630      	mov	r0, r6
    3cb0:	f012 fa5e 	bl	16170 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    3cb4:	f012 fa9c 	bl	161f0 <radio_is_ready>
    3cb8:	2800      	cmp	r0, #0
    3cba:	d152      	bne.n	3d62 <isr_rx+0x50a>
		radio_tmr_end_capture();
    3cbc:	f012 fcf6 	bl	166ac <radio_tmr_end_capture>
		lll->state = 1U;
    3cc0:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    3cc2:	4832      	ldr	r0, [pc, #200]	; (3d8c <isr_rx+0x534>)
		lll->state = 1U;
    3cc4:	f043 0301 	orr.w	r3, r3, #1
    3cc8:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    3cca:	4621      	mov	r1, r4
    3ccc:	f012 f976 	bl	15fbc <radio_isr_set>
	if (!err) {
    3cd0:	e6c6      	b.n	3a60 <isr_rx+0x208>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    3cd2:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
    3cd6:	aa05      	add	r2, sp, #20
    3cd8:	4651      	mov	r1, sl
    3cda:	4648      	mov	r0, r9
    3cdc:	f00f fdc0 	bl	13860 <ull_filter_lll_rl_addr_allowed>
    3ce0:	2800      	cmp	r0, #0
    3ce2:	f43f aed9 	beq.w	3a98 <isr_rx+0x240>
	return ((lll->adv_addr_type == addr_type) &&
    3ce6:	7de3      	ldrb	r3, [r4, #23]
    3ce8:	f003 0301 	and.w	r3, r3, #1
    3cec:	454b      	cmp	r3, r9
    3cee:	f47f aed3 	bne.w	3a98 <isr_rx+0x240>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    3cf2:	4651      	mov	r1, sl
    3cf4:	2206      	movs	r2, #6
    3cf6:	f104 0008 	add.w	r0, r4, #8
    3cfa:	f018 f805 	bl	1bd08 <memcmp>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3cfe:	7f29      	ldrb	r1, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
    3d00:	fab0 f380 	clz	r3, r0
    3d04:	095b      	lsrs	r3, r3, #5
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3d06:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	f47f ae00 	bne.w	3910 <isr_rx+0xb8>
    3d10:	e6c5      	b.n	3a9e <isr_rx+0x246>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3d12:	f012 fb6f 	bl	163f4 <radio_rssi_get>
    3d16:	b2c3      	uxtb	r3, r0
    3d18:	e78b      	b.n	3c32 <isr_rx+0x3da>
			init_tx_addr = lll->init_addr_type;
    3d1a:	f894 8016 	ldrb.w	r8, [r4, #22]
			init_addr = lll->init_addr;
    3d1e:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
    3d22:	f3c8 1880 	ubfx	r8, r8, #6, #1
			init_addr = lll->init_addr;
    3d26:	e62f      	b.n	3988 <isr_rx+0x130>
			pdu_tx->tx_addr = lll->init_addr_type;
    3d28:	7da3      	ldrb	r3, [r4, #22]
    3d2a:	7832      	ldrb	r2, [r6, #0]
    3d2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3d30:	4630      	mov	r0, r6
    3d32:	f363 1286 	bfi	r2, r3, #6, #1
    3d36:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
    3d3a:	f104 0119 	add.w	r1, r4, #25
    3d3e:	2206      	movs	r2, #6
    3d40:	f017 fff3 	bl	1bd2a <memcpy>
    3d44:	e7ac      	b.n	3ca0 <isr_rx+0x448>
		LL_ASSERT(!radio_is_ready());
    3d46:	4a0e      	ldr	r2, [pc, #56]	; (3d80 <isr_rx+0x528>)
    3d48:	4911      	ldr	r1, [pc, #68]	; (3d90 <isr_rx+0x538>)
    3d4a:	480f      	ldr	r0, [pc, #60]	; (3d88 <isr_rx+0x530>)
    3d4c:	f240 4391 	movw	r3, #1169	; 0x491
    3d50:	f017 f9b1 	bl	1b0b6 <printk>
    3d54:	4040      	eors	r0, r0
    3d56:	f380 8811 	msr	BASEPRI, r0
    3d5a:	f04f 0003 	mov.w	r0, #3
    3d5e:	df02      	svc	2
    3d60:	e62c      	b.n	39bc <isr_rx+0x164>
		LL_ASSERT(!radio_is_ready());
    3d62:	4a07      	ldr	r2, [pc, #28]	; (3d80 <isr_rx+0x528>)
    3d64:	490a      	ldr	r1, [pc, #40]	; (3d90 <isr_rx+0x538>)
    3d66:	4808      	ldr	r0, [pc, #32]	; (3d88 <isr_rx+0x530>)
    3d68:	f240 5316 	movw	r3, #1302	; 0x516
    3d6c:	f017 f9a3 	bl	1b0b6 <printk>
    3d70:	4040      	eors	r0, r0
    3d72:	f380 8811 	msr	BASEPRI, r0
    3d76:	f04f 0003 	mov.w	r0, #3
    3d7a:	df02      	svc	2
    3d7c:	e79e      	b.n	3cbc <isr_rx+0x464>
    3d7e:	bf00      	nop
    3d80:	00020ea4 	.word	0x00020ea4
    3d84:	00020e58 	.word	0x00020e58
    3d88:	000203b4 	.word	0x000203b4
    3d8c:	00014fc5 	.word	0x00014fc5
    3d90:	00020e60 	.word	0x00020e60
    3d94:	00000000 	.word	0x00000000

00003d98 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
    3d98:	2903      	cmp	r1, #3
{
    3d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3d9c:	4614      	mov	r4, r2
    3d9e:	4605      	mov	r5, r0
    3da0:	461a      	mov	r2, r3
	switch (chan) {
    3da2:	d85d      	bhi.n	3e60 <lis2dh_attr_set+0xc8>
	switch (attr) {
    3da4:	2c00      	cmp	r4, #0
    3da6:	d03c      	beq.n	3e22 <lis2dh_attr_set+0x8a>
    3da8:	2c07      	cmp	r4, #7
    3daa:	d159      	bne.n	3e60 <lis2dh_attr_set+0xc8>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
    3dac:	685b      	ldr	r3, [r3, #4]
    3dae:	6810      	ldr	r0, [r2, #0]
    3db0:	4a37      	ldr	r2, [pc, #220]	; (3e90 <lis2dh_attr_set+0xf8>)
    3db2:	17d9      	asrs	r1, r3, #31
    3db4:	fbc0 3102 	smlal	r3, r1, r0, r2
	if (micro_ms2 > 0) {
    3db8:	2b01      	cmp	r3, #1
    3dba:	f171 0200 	sbcs.w	r2, r1, #0
    3dbe:	db22      	blt.n	3e06 <lis2dh_attr_set+0x6e>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
    3dc0:	4834      	ldr	r0, [pc, #208]	; (3e94 <lis2dh_attr_set+0xfc>)
    3dc2:	1818      	adds	r0, r3, r0
    3dc4:	a330      	add	r3, pc, #192	; (adr r3, 3e88 <lis2dh_attr_set+0xf0>)
    3dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dca:	f141 0100 	adc.w	r1, r1, #0
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
    3dce:	f7fc fe4d 	bl	a6c <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    3dd2:	b280      	uxth	r0, r0
    3dd4:	2802      	cmp	r0, #2
    3dd6:	d01e      	beq.n	3e16 <lis2dh_attr_set+0x7e>
    3dd8:	2804      	cmp	r0, #4
    3dda:	d01e      	beq.n	3e1a <lis2dh_attr_set+0x82>
    3ddc:	2808      	cmp	r0, #8
    3dde:	d01e      	beq.n	3e1e <lis2dh_attr_set+0x86>
    3de0:	2810      	cmp	r0, #16
    3de2:	d133      	bne.n	3e4c <lis2dh_attr_set+0xb4>
    3de4:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    3de6:	492c      	ldr	r1, [pc, #176]	; (3e98 <lis2dh_attr_set+0x100>)
	struct lis2dh_data *lis2dh = dev->data;
    3de8:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    3dea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    3dee:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    3df0:	6852      	ldr	r2, [r2, #4]
    3df2:	6914      	ldr	r4, [r2, #16]
    3df4:	011b      	lsls	r3, r3, #4
    3df6:	2230      	movs	r2, #48	; 0x30
    3df8:	2123      	movs	r1, #35	; 0x23
    3dfa:	4628      	mov	r0, r5
    3dfc:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
    3dfe:	b002      	add	sp, #8
    3e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    3e04:	4760      	bx	ip
    3e06:	4825      	ldr	r0, [pc, #148]	; (3e9c <lis2dh_attr_set+0x104>)
    3e08:	1818      	adds	r0, r3, r0
    3e0a:	f161 0100 	sbc.w	r1, r1, #0
    3e0e:	a31e      	add	r3, pc, #120	; (adr r3, 3e88 <lis2dh_attr_set+0xf0>)
    3e10:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e14:	e7db      	b.n	3dce <lis2dh_attr_set+0x36>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
    3e16:	2300      	movs	r3, #0
    3e18:	e7e5      	b.n	3de6 <lis2dh_attr_set+0x4e>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    3e1a:	2301      	movs	r3, #1
    3e1c:	e7e3      	b.n	3de6 <lis2dh_attr_set+0x4e>
    3e1e:	2302      	movs	r3, #2
    3e20:	e7e1      	b.n	3de6 <lis2dh_attr_set+0x4e>
		return lis2dh_acc_odr_set(dev, val->val1);
    3e22:	881a      	ldrh	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    3e24:	4b1e      	ldr	r3, [pc, #120]	; (3ea0 <lis2dh_attr_set+0x108>)
		if (freq == lis2dh_odr_map[i]) {
    3e26:	f833 1b02 	ldrh.w	r1, [r3], #2
    3e2a:	428a      	cmp	r2, r1
    3e2c:	d10b      	bne.n	3e46 <lis2dh_attr_set+0xae>
	struct lis2dh_data *data = dev->data;
    3e2e:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
    3e30:	6873      	ldr	r3, [r6, #4]
    3e32:	f10d 0207 	add.w	r2, sp, #7
    3e36:	689b      	ldr	r3, [r3, #8]
    3e38:	2120      	movs	r1, #32
    3e3a:	4628      	mov	r0, r5
    3e3c:	4798      	blx	r3
	if (status < 0) {
    3e3e:	2800      	cmp	r0, #0
    3e40:	da07      	bge.n	3e52 <lis2dh_attr_set+0xba>
}
    3e42:	b002      	add	sp, #8
    3e44:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    3e46:	3401      	adds	r4, #1
    3e48:	2c0b      	cmp	r4, #11
    3e4a:	d1ec      	bne.n	3e26 <lis2dh_attr_set+0x8e>
	return -EINVAL;
    3e4c:	f06f 0015 	mvn.w	r0, #21
    3e50:	e7f7      	b.n	3e42 <lis2dh_attr_set+0xaa>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    3e52:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3e56:	0711      	lsls	r1, r2, #28
			return i;
    3e58:	4623      	mov	r3, r4
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    3e5a:	d404      	bmi.n	3e66 <lis2dh_attr_set+0xce>
    3e5c:	2c08      	cmp	r4, #8
    3e5e:	d105      	bne.n	3e6c <lis2dh_attr_set+0xd4>
	switch (attr) {
    3e60:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e64:	e7ed      	b.n	3e42 <lis2dh_attr_set+0xaa>
		odr--;
    3e66:	2c0a      	cmp	r4, #10
    3e68:	bf08      	it	eq
    3e6a:	2309      	moveq	r3, #9
				      (value & ~LIS2DH_ODR_MASK) |
    3e6c:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    3e70:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    3e74:	6873      	ldr	r3, [r6, #4]
    3e76:	b2d2      	uxtb	r2, r2
    3e78:	68db      	ldr	r3, [r3, #12]
    3e7a:	2120      	movs	r1, #32
    3e7c:	4628      	mov	r0, r5
    3e7e:	4798      	blx	r3
    3e80:	e7df      	b.n	3e42 <lis2dh_attr_set+0xaa>
    3e82:	bf00      	nop
    3e84:	f3af 8000 	nop.w
    3e88:	0095a33a 	.word	0x0095a33a
    3e8c:	00000000 	.word	0x00000000
    3e90:	000f4240 	.word	0x000f4240
    3e94:	004ad19d 	.word	0x004ad19d
    3e98:	200007f4 	.word	0x200007f4
    3e9c:	ffb52e63 	.word	0xffb52e63
    3ea0:	0002137c 	.word	0x0002137c

00003ea4 <sensor_entry>:
*on duty cycle
* @param arg1 - thread param
*@param arg2 - thread param
*@param arg3 - thread param
*/
void sensor_entry(void *arg1, void *arg2, void *arg3) {
    3ea4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    while(1) {
        htts221_read();
        lps22hb_read();
        VOC_READ();
        lis2dh_read();
        printk("yooy%f %d\n,",(dutyVal/100),sampler);
    3ea8:	4f2e      	ldr	r7, [pc, #184]	; (3f64 <sensor_entry+0xc0>)
        k_sleep(K_MSEC((sampler*1000)*(1-(dutyVal/100)) +200));
    3eaa:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3f68 <sensor_entry+0xc4>
        printk("yooy%f %d\n,",(dutyVal/100),sampler);
    3eae:	2600      	movs	r6, #0
        k_sleep(K_MSEC((sampler*1000)*(1-(dutyVal/100)) +200));
    3eb0:	f04f 0800 	mov.w	r8, #0
        printk("yooy%f %d\n,",(dutyVal/100),sampler);
    3eb4:	4c2d      	ldr	r4, [pc, #180]	; (3f6c <sensor_entry+0xc8>)
    3eb6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 3f70 <sensor_entry+0xcc>
        htts221_read();
    3eba:	f000 fb63 	bl	4584 <htts221_read>
        lps22hb_read();
    3ebe:	f000 fc37 	bl	4730 <lps22hb_read>
        VOC_READ();
    3ec2:	f000 fc8f 	bl	47e4 <VOC_READ>
        lis2dh_read();
    3ec6:	f000 fbbf 	bl	4648 <lis2dh_read>
        printk("yooy%f %d\n,",(dutyVal/100),sampler);
    3eca:	e9d4 0100 	ldrd	r0, r1, [r4]
    3ece:	4632      	mov	r2, r6
    3ed0:	463b      	mov	r3, r7
    3ed2:	f7fc fbeb 	bl	6ac <__aeabi_ddiv>
    3ed6:	460b      	mov	r3, r1
    3ed8:	f8ba 1000 	ldrh.w	r1, [sl]
    3edc:	9100      	str	r1, [sp, #0]
    3ede:	4602      	mov	r2, r0
    3ee0:	4824      	ldr	r0, [pc, #144]	; (3f74 <sensor_entry+0xd0>)
    3ee2:	f017 f8e8 	bl	1b0b6 <printk>
        k_sleep(K_MSEC((sampler*1000)*(1-(dutyVal/100)) +200));
    3ee6:	e9d4 0100 	ldrd	r0, r1, [r4]
    3eea:	4632      	mov	r2, r6
    3eec:	463b      	mov	r3, r7
    3eee:	f7fc fbdd 	bl	6ac <__aeabi_ddiv>
    3ef2:	4602      	mov	r2, r0
    3ef4:	460b      	mov	r3, r1
    3ef6:	2000      	movs	r0, #0
    3ef8:	491f      	ldr	r1, [pc, #124]	; (3f78 <sensor_entry+0xd4>)
    3efa:	f7fc f8f5 	bl	e8 <__aeabi_dsub>
    3efe:	f8ba 3000 	ldrh.w	r3, [sl]
    3f02:	4604      	mov	r4, r0
    3f04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3f08:	4358      	muls	r0, r3
    3f0a:	460d      	mov	r5, r1
    3f0c:	f7fc fa3a 	bl	384 <__aeabi_i2d>
    3f10:	4602      	mov	r2, r0
    3f12:	460b      	mov	r3, r1
    3f14:	4620      	mov	r0, r4
    3f16:	4629      	mov	r1, r5
    3f18:	f7fc fa9e 	bl	458 <__aeabi_dmul>
    3f1c:	4642      	mov	r2, r8
    3f1e:	464b      	mov	r3, r9
    3f20:	f7fc f8e4 	bl	ec <__adddf3>
    3f24:	2200      	movs	r2, #0
    3f26:	2300      	movs	r3, #0
    3f28:	4604      	mov	r4, r0
    3f2a:	460d      	mov	r5, r1
    3f2c:	f7fc fd24 	bl	978 <__aeabi_dcmpgt>
    3f30:	b1a8      	cbz	r0, 3f5e <sensor_entry+0xba>
    3f32:	4620      	mov	r0, r4
    3f34:	4629      	mov	r1, r5
    3f36:	f7fc fe01 	bl	b3c <__aeabi_d2ulz>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3f3a:	03c9      	lsls	r1, r1, #15
    3f3c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3f40:	f240 33e7 	movw	r3, #999	; 0x3e7
    3f44:	03c0      	lsls	r0, r0, #15
    3f46:	18c0      	adds	r0, r0, r3
    3f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3f4c:	f04f 0300 	mov.w	r3, #0
    3f50:	f141 0100 	adc.w	r1, r1, #0
    3f54:	f7fc fdda 	bl	b0c <__aeabi_uldivmod>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    3f58:	f016 fd9c 	bl	1aa94 <z_impl_k_sleep>
    while(1) {
    3f5c:	e7aa      	b.n	3eb4 <sensor_entry+0x10>
        k_sleep(K_MSEC((sampler*1000)*(1-(dutyVal/100)) +200));
    3f5e:	4601      	mov	r1, r0
    3f60:	e7eb      	b.n	3f3a <sensor_entry+0x96>
    3f62:	bf00      	nop
    3f64:	40590000 	.word	0x40590000
    3f68:	40690000 	.word	0x40690000
    3f6c:	200000c8 	.word	0x200000c8
    3f70:	20002d42 	.word	0x20002d42
    3f74:	00021392 	.word	0x00021392
    3f78:	3ff00000 	.word	0x3ff00000

00003f7c <scan_entry>:
* functions which handles scanning 
* @param arg1 - thread param
*@param arg2 - thread param
*@param arg3 - thread param
**/
void scan_entry(void *arg1, void *arg2, void *arg3) {
    3f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // initialise blue tooth
    bt_init();
    3f80:	f017 f826 	bl	1afd0 <bt_init>
            return;
        }
        // initalise scanning
        scanner_init();
        k_sem_give(&adver);
        k_sleep(K_MSEC(500*(1-(dutyVal/100))+500));
    3f84:	f8df b094 	ldr.w	fp, [pc, #148]	; 401c <scan_entry+0xa0>
    3f88:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4020 <scan_entry+0xa4>
    3f8c:	4f25      	ldr	r7, [pc, #148]	; (4024 <scan_entry+0xa8>)
    3f8e:	f04f 0a00 	mov.w	sl, #0
    3f92:	f04f 0800 	mov.w	r8, #0
    3f96:	2600      	movs	r6, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3f98:	4823      	ldr	r0, [pc, #140]	; (4028 <scan_entry+0xac>)
    3f9a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    3f9e:	2300      	movs	r3, #0
    3fa0:	f016 f902 	bl	1a1a8 <z_impl_k_sem_take>
        if (k_sem_take(&scan, K_SECONDS(10)) != 0) {
    3fa4:	bbc0      	cbnz	r0, 4018 <scan_entry+0x9c>
        scanner_init();
    3fa6:	f000 fe29 	bl	4bfc <scanner_init>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3faa:	4820      	ldr	r0, [pc, #128]	; (402c <scan_entry+0xb0>)
    3fac:	f016 f8d6 	bl	1a15c <z_impl_k_sem_give>
        k_sleep(K_MSEC(500*(1-(dutyVal/100))+500));
    3fb0:	491f      	ldr	r1, [pc, #124]	; (4030 <scan_entry+0xb4>)
    3fb2:	4652      	mov	r2, sl
    3fb4:	465b      	mov	r3, fp
    3fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
    3fba:	f7fc fb77 	bl	6ac <__aeabi_ddiv>
    3fbe:	4602      	mov	r2, r0
    3fc0:	460b      	mov	r3, r1
    3fc2:	4640      	mov	r0, r8
    3fc4:	4649      	mov	r1, r9
    3fc6:	f7fc f88f 	bl	e8 <__aeabi_dsub>
    3fca:	4632      	mov	r2, r6
    3fcc:	463b      	mov	r3, r7
    3fce:	f7fc fa43 	bl	458 <__aeabi_dmul>
    3fd2:	4632      	mov	r2, r6
    3fd4:	463b      	mov	r3, r7
    3fd6:	f7fc f889 	bl	ec <__adddf3>
    3fda:	2200      	movs	r2, #0
    3fdc:	2300      	movs	r3, #0
    3fde:	4604      	mov	r4, r0
    3fe0:	460d      	mov	r5, r1
    3fe2:	f7fc fcc9 	bl	978 <__aeabi_dcmpgt>
    3fe6:	b1a8      	cbz	r0, 4014 <scan_entry+0x98>
    3fe8:	4620      	mov	r0, r4
    3fea:	4629      	mov	r1, r5
    3fec:	f7fc fda6 	bl	b3c <__aeabi_d2ulz>
    3ff0:	03c9      	lsls	r1, r1, #15
    3ff2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3ff6:	f240 33e7 	movw	r3, #999	; 0x3e7
    3ffa:	03c0      	lsls	r0, r0, #15
    3ffc:	18c0      	adds	r0, r0, r3
    3ffe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4002:	f04f 0300 	mov.w	r3, #0
    4006:	f141 0100 	adc.w	r1, r1, #0
    400a:	f7fc fd7f 	bl	b0c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    400e:	f016 fd41 	bl	1aa94 <z_impl_k_sleep>
    while(1) {
    4012:	e7c1      	b.n	3f98 <scan_entry+0x1c>
        k_sleep(K_MSEC(500*(1-(dutyVal/100))+500));
    4014:	4601      	mov	r1, r0
    4016:	e7eb      	b.n	3ff0 <scan_entry+0x74>
    }

}
    4018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    401c:	40590000 	.word	0x40590000
    4020:	3ff00000 	.word	0x3ff00000
    4024:	407f4000 	.word	0x407f4000
    4028:	20000a28 	.word	0x20000a28
    402c:	20000a10 	.word	0x20000a10
    4030:	200000c8 	.word	0x200000c8

00004034 <fltohex>:
{
    4034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4036:	460d      	mov	r5, r1
   } v = { val };
    4038:	9001      	str	r0, [sp, #4]
   printf("%f is stored as ", v.f);
    403a:	f7fc f9b5 	bl	3a8 <__aeabi_f2d>
    403e:	4602      	mov	r2, r0
    4040:	460b      	mov	r3, r1
    4042:	480b      	ldr	r0, [pc, #44]	; (4070 <fltohex+0x3c>)
        printf("%02X%c", v.b[i], i < sizeof(v.b) - 1 ? '-' : '\n');
    4044:	4f0b      	ldr	r7, [pc, #44]	; (4074 <fltohex+0x40>)
   printf("%f is stored as ", v.f);
    4046:	f002 fbe5 	bl	6814 <printf>
   for ( i = 0; i < 4; ++i )
    404a:	ae01      	add	r6, sp, #4
    404c:	2400      	movs	r4, #0
        printf("%02X%c", v.b[i], i < sizeof(v.b) - 1 ? '-' : '\n');
    404e:	2c03      	cmp	r4, #3
        vals[i] = v.b[i];
    4050:	f816 1b01 	ldrb.w	r1, [r6], #1
    4054:	5529      	strb	r1, [r5, r4]
        printf("%02X%c", v.b[i], i < sizeof(v.b) - 1 ? '-' : '\n');
    4056:	bf14      	ite	ne
    4058:	222d      	movne	r2, #45	; 0x2d
    405a:	220a      	moveq	r2, #10
    405c:	4638      	mov	r0, r7
   for ( i = 0; i < 4; ++i )
    405e:	3401      	adds	r4, #1
        printf("%02X%c", v.b[i], i < sizeof(v.b) - 1 ? '-' : '\n');
    4060:	f002 fbd8 	bl	6814 <printf>
   for ( i = 0; i < 4; ++i )
    4064:	2c04      	cmp	r4, #4
    4066:	d1f2      	bne.n	404e <fltohex+0x1a>
}
    4068:	4628      	mov	r0, r5
    406a:	b003      	add	sp, #12
    406c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    406e:	bf00      	nop
    4070:	0002139e 	.word	0x0002139e
    4074:	000213af 	.word	0x000213af

00004078 <bt_entry>:
void bt_entry(void *arg1, void *arg2, void *arg3) {
    4078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ble_adv();
    407c:	f000 fd60 	bl	4b40 <ble_adv>
    button_init();
    4080:	f000 fdd6 	bl	4c30 <button_init>
    led_init();
    4084:	f000 fe3e 	bl	4d04 <led_init>
    speaker_init();
    4088:	f000 feac 	bl	4de4 <speaker_init>
	return z_impl_k_sem_take(sem, timeout);
    408c:	48a7      	ldr	r0, [pc, #668]	; (432c <bt_entry+0x2b4>)
    408e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4092:	2300      	movs	r3, #0
    4094:	f016 f888 	bl	1a1a8 <z_impl_k_sem_take>
        if (k_sem_take(&adver, K_SECONDS(10)) != 0) {
    4098:	2800      	cmp	r0, #0
    409a:	f040 8253 	bne.w	4544 <bt_entry+0x4cc>
        if(loadTemp) {
    409e:	f8df b290 	ldr.w	fp, [pc, #656]	; 4330 <bt_entry+0x2b8>
        set = false;
    40a2:	4da4      	ldr	r5, [pc, #656]	; (4334 <bt_entry+0x2bc>)
        if(loadTemp) {
    40a4:	f89b 3000 	ldrb.w	r3, [fp]
        set = false;
    40a8:	7028      	strb	r0, [r5, #0]
        if(loadTemp) {
    40aa:	b16b      	cbz	r3, 40c8 <bt_entry+0x50>
            set = true;
    40ac:	2301      	movs	r3, #1
    40ae:	702b      	strb	r3, [r5, #0]
            sensorAdv[3] = sensorData[0];
    40b0:	4ba1      	ldr	r3, [pc, #644]	; (4338 <bt_entry+0x2c0>)
            loadTemp = false;
    40b2:	f88b 0000 	strb.w	r0, [fp]
            sensorAdv[3] = sensorData[0];
    40b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    40ba:	48a0      	ldr	r0, [pc, #640]	; (433c <bt_entry+0x2c4>)
            load(sensorAdv,2,4);
    40bc:	2102      	movs	r1, #2
            sensorAdv[3] = sensorData[0];
    40be:	e9c0 2306 	strd	r2, r3, [r0, #24]
            load(sensorAdv,2,4);
    40c2:	2204      	movs	r2, #4
    40c4:	f000 fd1e 	bl	4b04 <load>
        if(loadHum) {
    40c8:	f8df a274 	ldr.w	sl, [pc, #628]	; 4340 <bt_entry+0x2c8>
    40cc:	f89a 3000 	ldrb.w	r3, [sl]
    40d0:	b173      	cbz	r3, 40f0 <bt_entry+0x78>
            loadHum = false;
    40d2:	2300      	movs	r3, #0
    40d4:	f88a 3000 	strb.w	r3, [sl]
            set = true;
    40d8:	2301      	movs	r3, #1
    40da:	702b      	strb	r3, [r5, #0]
            sensorAdv[3] = sensorData[1];
    40dc:	4b96      	ldr	r3, [pc, #600]	; (4338 <bt_entry+0x2c0>)
    40de:	4897      	ldr	r0, [pc, #604]	; (433c <bt_entry+0x2c4>)
    40e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
            load(sensorAdv,2,4);
    40e4:	2102      	movs	r1, #2
            sensorAdv[3] = sensorData[1];
    40e6:	e9c0 2306 	strd	r2, r3, [r0, #24]
            load(sensorAdv,2,4);
    40ea:	2204      	movs	r2, #4
    40ec:	f000 fd0a 	bl	4b04 <load>
        if(loadAp) {
    40f0:	4b94      	ldr	r3, [pc, #592]	; (4344 <bt_entry+0x2cc>)
    40f2:	781b      	ldrb	r3, [r3, #0]
    40f4:	b173      	cbz	r3, 4114 <bt_entry+0x9c>
            loadAp = false;
    40f6:	4a93      	ldr	r2, [pc, #588]	; (4344 <bt_entry+0x2cc>)
            sensorAdv[3] = sensorData[5];
    40f8:	4890      	ldr	r0, [pc, #576]	; (433c <bt_entry+0x2c4>)
            loadAp = false;
    40fa:	2300      	movs	r3, #0
    40fc:	7013      	strb	r3, [r2, #0]
            set = true;
    40fe:	2301      	movs	r3, #1
    4100:	702b      	strb	r3, [r5, #0]
            sensorAdv[3] = sensorData[5];
    4102:	4b8d      	ldr	r3, [pc, #564]	; (4338 <bt_entry+0x2c0>)
    4104:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
            load(sensorAdv,2,4);
    4108:	2102      	movs	r1, #2
            sensorAdv[3] = sensorData[5];
    410a:	e9c0 2306 	strd	r2, r3, [r0, #24]
            load(sensorAdv,2,4);
    410e:	2204      	movs	r2, #4
    4110:	f000 fcf8 	bl	4b04 <load>
        if(loadVoc) {
    4114:	4b8c      	ldr	r3, [pc, #560]	; (4348 <bt_entry+0x2d0>)
    4116:	781b      	ldrb	r3, [r3, #0]
    4118:	b173      	cbz	r3, 4138 <bt_entry+0xc0>
            loadVoc = false;
    411a:	4a8b      	ldr	r2, [pc, #556]	; (4348 <bt_entry+0x2d0>)
            sensorAdv[3] = sensorData[6];
    411c:	4887      	ldr	r0, [pc, #540]	; (433c <bt_entry+0x2c4>)
            loadVoc = false;
    411e:	2300      	movs	r3, #0
    4120:	7013      	strb	r3, [r2, #0]
            set = true;
    4122:	2301      	movs	r3, #1
    4124:	702b      	strb	r3, [r5, #0]
            sensorAdv[3] = sensorData[6];
    4126:	4b84      	ldr	r3, [pc, #528]	; (4338 <bt_entry+0x2c0>)
    4128:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
            load(sensorAdv,2,4);
    412c:	2102      	movs	r1, #2
            sensorAdv[3] = sensorData[6];
    412e:	e9c0 2306 	strd	r2, r3, [r0, #24]
            load(sensorAdv,2,4);
    4132:	2204      	movs	r2, #4
    4134:	f000 fce6 	bl	4b04 <load>
        if(loadX) {
    4138:	f8df 9210 	ldr.w	r9, [pc, #528]	; 434c <bt_entry+0x2d4>
    413c:	f899 3000 	ldrb.w	r3, [r9]
    4140:	b33b      	cbz	r3, 4192 <bt_entry+0x11a>
            loadX = false;
    4142:	2300      	movs	r3, #0
    4144:	f889 3000 	strb.w	r3, [r9]
            set = true;
    4148:	2301      	movs	r3, #1
    414a:	702b      	strb	r3, [r5, #0]
            fltohex(sensorData[2],xyzVals);
    414c:	4b7a      	ldr	r3, [pc, #488]	; (4338 <bt_entry+0x2c0>)
    414e:	4e80      	ldr	r6, [pc, #512]	; (4350 <bt_entry+0x2d8>)
            accelAdv[3] = xyzVals[0];
    4150:	4c80      	ldr	r4, [pc, #512]	; (4354 <bt_entry+0x2dc>)
            fltohex(sensorData[2],xyzVals);
    4152:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    4156:	f7fc fc39 	bl	9cc <__aeabi_d2f>
    415a:	4631      	mov	r1, r6
    415c:	f7ff ff6a 	bl	4034 <fltohex>
            accelAdv[3] = xyzVals[0];
    4160:	7830      	ldrb	r0, [r6, #0]
    4162:	f7fc f8ff 	bl	364 <__aeabi_ui2d>
    4166:	e9c4 0106 	strd	r0, r1, [r4, #24]
            accelAdv[4] = xyzVals[1];
    416a:	7870      	ldrb	r0, [r6, #1]
    416c:	f7fc f8fa 	bl	364 <__aeabi_ui2d>
    4170:	e9c4 0108 	strd	r0, r1, [r4, #32]
            accelAdv[5] = xyzVals[2];
    4174:	78b0      	ldrb	r0, [r6, #2]
    4176:	f7fc f8f5 	bl	364 <__aeabi_ui2d>
    417a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            accelAdv[6] = xyzVals[3];
    417e:	78f0      	ldrb	r0, [r6, #3]
    4180:	f7fc f8f0 	bl	364 <__aeabi_ui2d>
           load(accelAdv,2,7);
    4184:	2207      	movs	r2, #7
            accelAdv[6] = xyzVals[3];
    4186:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
           load(accelAdv,2,7);
    418a:	2102      	movs	r1, #2
    418c:	4620      	mov	r0, r4
    418e:	f000 fcb9 	bl	4b04 <load>
        if(loadY) {
    4192:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 4358 <bt_entry+0x2e0>
    4196:	f898 3000 	ldrb.w	r3, [r8]
    419a:	b33b      	cbz	r3, 41ec <bt_entry+0x174>
            loadY = false;
    419c:	2300      	movs	r3, #0
    419e:	f888 3000 	strb.w	r3, [r8]
            set = true;
    41a2:	2301      	movs	r3, #1
    41a4:	702b      	strb	r3, [r5, #0]
            fltohex(sensorData[3],xyzVals);
    41a6:	4b64      	ldr	r3, [pc, #400]	; (4338 <bt_entry+0x2c0>)
    41a8:	4e69      	ldr	r6, [pc, #420]	; (4350 <bt_entry+0x2d8>)
            accelAdv[3] = xyzVals[0];
    41aa:	4c6a      	ldr	r4, [pc, #424]	; (4354 <bt_entry+0x2dc>)
            fltohex(sensorData[3],xyzVals);
    41ac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
    41b0:	f7fc fc0c 	bl	9cc <__aeabi_d2f>
    41b4:	4631      	mov	r1, r6
    41b6:	f7ff ff3d 	bl	4034 <fltohex>
            accelAdv[3] = xyzVals[0];
    41ba:	7830      	ldrb	r0, [r6, #0]
    41bc:	f7fc f8d2 	bl	364 <__aeabi_ui2d>
    41c0:	e9c4 0106 	strd	r0, r1, [r4, #24]
            accelAdv[4] = xyzVals[1];
    41c4:	7870      	ldrb	r0, [r6, #1]
    41c6:	f7fc f8cd 	bl	364 <__aeabi_ui2d>
    41ca:	e9c4 0108 	strd	r0, r1, [r4, #32]
            accelAdv[5] = xyzVals[2];
    41ce:	78b0      	ldrb	r0, [r6, #2]
    41d0:	f7fc f8c8 	bl	364 <__aeabi_ui2d>
    41d4:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            accelAdv[6] = xyzVals[3];
    41d8:	78f0      	ldrb	r0, [r6, #3]
    41da:	f7fc f8c3 	bl	364 <__aeabi_ui2d>
           load(accelAdv,2,7);
    41de:	2207      	movs	r2, #7
            accelAdv[6] = xyzVals[3];
    41e0:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
           load(accelAdv,2,7);
    41e4:	2102      	movs	r1, #2
    41e6:	4620      	mov	r0, r4
    41e8:	f000 fc8c 	bl	4b04 <load>
        if(loadZ) {
    41ec:	4b5b      	ldr	r3, [pc, #364]	; (435c <bt_entry+0x2e4>)
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	b33b      	cbz	r3, 4242 <bt_entry+0x1ca>
            loadZ = false;
    41f2:	4a5a      	ldr	r2, [pc, #360]	; (435c <bt_entry+0x2e4>)
            fltohex(sensorData[4],xyzVals);
    41f4:	4e56      	ldr	r6, [pc, #344]	; (4350 <bt_entry+0x2d8>)
            accelAdv[3] = xyzVals[0];
    41f6:	4c57      	ldr	r4, [pc, #348]	; (4354 <bt_entry+0x2dc>)
            loadZ = false;
    41f8:	2300      	movs	r3, #0
    41fa:	7013      	strb	r3, [r2, #0]
            set = true;
    41fc:	2301      	movs	r3, #1
    41fe:	702b      	strb	r3, [r5, #0]
            fltohex(sensorData[4],xyzVals);
    4200:	4b4d      	ldr	r3, [pc, #308]	; (4338 <bt_entry+0x2c0>)
    4202:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
    4206:	f7fc fbe1 	bl	9cc <__aeabi_d2f>
    420a:	4631      	mov	r1, r6
    420c:	f7ff ff12 	bl	4034 <fltohex>
            accelAdv[3] = xyzVals[0];
    4210:	7830      	ldrb	r0, [r6, #0]
    4212:	f7fc f8a7 	bl	364 <__aeabi_ui2d>
    4216:	e9c4 0106 	strd	r0, r1, [r4, #24]
            accelAdv[4] = xyzVals[1];
    421a:	7870      	ldrb	r0, [r6, #1]
    421c:	f7fc f8a2 	bl	364 <__aeabi_ui2d>
    4220:	e9c4 0108 	strd	r0, r1, [r4, #32]
            accelAdv[5] = xyzVals[2];
    4224:	78b0      	ldrb	r0, [r6, #2]
    4226:	f7fc f89d 	bl	364 <__aeabi_ui2d>
    422a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            accelAdv[6] = xyzVals[3];
    422e:	78f0      	ldrb	r0, [r6, #3]
    4230:	f7fc f898 	bl	364 <__aeabi_ui2d>
            load(accelAdv,2,7);
    4234:	2207      	movs	r2, #7
            accelAdv[6] = xyzVals[3];
    4236:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
            load(accelAdv,2,7);
    423a:	2102      	movs	r1, #2
    423c:	4620      	mov	r0, r4
    423e:	f000 fc61 	bl	4b04 <load>
        if(loadBut) {
    4242:	4b47      	ldr	r3, [pc, #284]	; (4360 <bt_entry+0x2e8>)
    4244:	781a      	ldrb	r2, [r3, #0]
    4246:	b18a      	cbz	r2, 426c <bt_entry+0x1f4>
            if(pressed) {
    4248:	4a46      	ldr	r2, [pc, #280]	; (4364 <bt_entry+0x2ec>)
            sensorAdv[3] = butVal;
    424a:	4c3c      	ldr	r4, [pc, #240]	; (433c <bt_entry+0x2c4>)
            if(pressed) {
    424c:	7810      	ldrb	r0, [r2, #0]
    424e:	4a46      	ldr	r2, [pc, #280]	; (4368 <bt_entry+0x2f0>)
    4250:	7010      	strb	r0, [r2, #0]
            loadBut = false;
    4252:	2200      	movs	r2, #0
    4254:	701a      	strb	r2, [r3, #0]
            set = true;
    4256:	2301      	movs	r3, #1
    4258:	702b      	strb	r3, [r5, #0]
            sensorAdv[3] = butVal;
    425a:	f7fc f883 	bl	364 <__aeabi_ui2d>
            load(sensorAdv,2,4);
    425e:	2204      	movs	r2, #4
            sensorAdv[3] = butVal;
    4260:	e9c4 0106 	strd	r0, r1, [r4, #24]
            load(sensorAdv,2,4);
    4264:	2102      	movs	r1, #2
    4266:	4620      	mov	r0, r4
    4268:	f000 fc4c 	bl	4b04 <load>
        if(ledRGB) {
    426c:	4c3f      	ldr	r4, [pc, #252]	; (436c <bt_entry+0x2f4>)
    426e:	7823      	ldrb	r3, [r4, #0]
    4270:	b1a3      	cbz	r3, 429c <bt_entry+0x224>
            led_red(redVal);
    4272:	4b3f      	ldr	r3, [pc, #252]	; (4370 <bt_entry+0x2f8>)
    4274:	7818      	ldrb	r0, [r3, #0]
    4276:	f000 fd33 	bl	4ce0 <led_red>
            led_green(greenVal);
    427a:	4b3e      	ldr	r3, [pc, #248]	; (4374 <bt_entry+0x2fc>)
    427c:	7818      	ldrb	r0, [r3, #0]
    427e:	f000 fd35 	bl	4cec <led_green>
            led_blue(blueVal);
    4282:	4b3d      	ldr	r3, [pc, #244]	; (4378 <bt_entry+0x300>)
    4284:	7818      	ldrb	r0, [r3, #0]
    4286:	f000 fd37 	bl	4cf8 <led_blue>
            load(sensorAdv,2,4);
    428a:	482c      	ldr	r0, [pc, #176]	; (433c <bt_entry+0x2c4>)
    428c:	2204      	movs	r2, #4
    428e:	2102      	movs	r1, #2
    4290:	f000 fc38 	bl	4b04 <load>
            set = true;
    4294:	2301      	movs	r3, #1
    4296:	702b      	strb	r3, [r5, #0]
            ledRGB = false;
    4298:	2300      	movs	r3, #0
    429a:	7023      	strb	r3, [r4, #0]
        if(buzz) {
    429c:	4b37      	ldr	r3, [pc, #220]	; (437c <bt_entry+0x304>)
    429e:	781a      	ldrb	r2, [r3, #0]
    42a0:	b1b2      	cbz	r2, 42d0 <bt_entry+0x258>
            buzz = false;
    42a2:	2200      	movs	r2, #0
    42a4:	701a      	strb	r2, [r3, #0]
            set = true;
    42a6:	2301      	movs	r3, #1
            freq = (buzzFH << 8) | buzzFL;
    42a8:	4a35      	ldr	r2, [pc, #212]	; (4380 <bt_entry+0x308>)
            set = true;
    42aa:	702b      	strb	r3, [r5, #0]
            freq = (buzzFH << 8) | buzzFL;
    42ac:	4b35      	ldr	r3, [pc, #212]	; (4384 <bt_entry+0x30c>)
    42ae:	7811      	ldrb	r1, [r2, #0]
    42b0:	781b      	ldrb	r3, [r3, #0]
    42b2:	4c35      	ldr	r4, [pc, #212]	; (4388 <bt_entry+0x310>)
            printk("buz%d\n",freq);
    42b4:	4835      	ldr	r0, [pc, #212]	; (438c <bt_entry+0x314>)
            freq = (buzzFH << 8) | buzzFL;
    42b6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    42ba:	8021      	strh	r1, [r4, #0]
            printk("buz%d\n",freq);
    42bc:	f016 fefb 	bl	1b0b6 <printk>
            speaker_set(freq);
    42c0:	8820      	ldrh	r0, [r4, #0]
    42c2:	f000 fdb7 	bl	4e34 <speaker_set>
            load(sensorAdv,2,4);
    42c6:	481d      	ldr	r0, [pc, #116]	; (433c <bt_entry+0x2c4>)
    42c8:	2204      	movs	r2, #4
    42ca:	2102      	movs	r1, #2
    42cc:	f000 fc1a 	bl	4b04 <load>
        if(retDC) {
    42d0:	4c2f      	ldr	r4, [pc, #188]	; (4390 <bt_entry+0x318>)
    42d2:	7823      	ldrb	r3, [r4, #0]
    42d4:	b143      	cbz	r3, 42e8 <bt_entry+0x270>
            load(sensorAdv,2,4);
    42d6:	4819      	ldr	r0, [pc, #100]	; (433c <bt_entry+0x2c4>)
    42d8:	2204      	movs	r2, #4
    42da:	2102      	movs	r1, #2
    42dc:	f000 fc12 	bl	4b04 <load>
            retDC = false;
    42e0:	2300      	movs	r3, #0
    42e2:	7023      	strb	r3, [r4, #0]
            set = true;
    42e4:	2301      	movs	r3, #1
    42e6:	702b      	strb	r3, [r5, #0]
        if(retSample) {
    42e8:	4a2a      	ldr	r2, [pc, #168]	; (4394 <bt_entry+0x31c>)
    42ea:	7813      	ldrb	r3, [r2, #0]
    42ec:	b183      	cbz	r3, 4310 <bt_entry+0x298>
            sampler = (sampleH << 8) | sampleL;
    42ee:	4b2a      	ldr	r3, [pc, #168]	; (4398 <bt_entry+0x320>)
            load(sensorAdv,2,4);
    42f0:	4812      	ldr	r0, [pc, #72]	; (433c <bt_entry+0x2c4>)
            sampler = (sampleH << 8) | sampleL;
    42f2:	7819      	ldrb	r1, [r3, #0]
    42f4:	4b29      	ldr	r3, [pc, #164]	; (439c <bt_entry+0x324>)
    42f6:	781b      	ldrb	r3, [r3, #0]
    42f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    42fc:	4928      	ldr	r1, [pc, #160]	; (43a0 <bt_entry+0x328>)
    42fe:	800b      	strh	r3, [r1, #0]
            retSample = false;
    4300:	2300      	movs	r3, #0
    4302:	7013      	strb	r3, [r2, #0]
            load(sensorAdv,2,4);
    4304:	2102      	movs	r1, #2
            set = true;
    4306:	2301      	movs	r3, #1
            load(sensorAdv,2,4);
    4308:	2204      	movs	r2, #4
            set = true;
    430a:	702b      	strb	r3, [r5, #0]
            load(sensorAdv,2,4);
    430c:	f000 fbfa 	bl	4b04 <load>
        if(loadAll) {
    4310:	4a24      	ldr	r2, [pc, #144]	; (43a4 <bt_entry+0x32c>)
    4312:	7813      	ldrb	r3, [r2, #0]
    4314:	2b00      	cmp	r3, #0
    4316:	f000 80b0 	beq.w	447a <bt_entry+0x402>
            allAdv[2] = sensorData[0];
    431a:	4f07      	ldr	r7, [pc, #28]	; (4338 <bt_entry+0x2c0>)
    431c:	4c22      	ldr	r4, [pc, #136]	; (43a8 <bt_entry+0x330>)
            fltohex(sensorData[2],xyzVals);
    431e:	4e0c      	ldr	r6, [pc, #48]	; (4350 <bt_entry+0x2d8>)
            allAdv[2] = sensorData[0];
    4320:	e9d7 0100 	ldrd	r0, r1, [r7]
    4324:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4328:	e040      	b.n	43ac <bt_entry+0x334>
    432a:	bf00      	nop
    432c:	20000a10 	.word	0x20000a10
    4330:	20002da4 	.word	0x20002da4
    4334:	20002d6f 	.word	0x20002d6f
    4338:	20000d10 	.word	0x20000d10
    433c:	200000d0 	.word	0x200000d0
    4340:	20002da3 	.word	0x20002da3
    4344:	20002da1 	.word	0x20002da1
    4348:	20002da5 	.word	0x20002da5
    434c:	20002da6 	.word	0x20002da6
    4350:	20002d70 	.word	0x20002d70
    4354:	20000000 	.word	0x20000000
    4358:	20002da7 	.word	0x20002da7
    435c:	20002da8 	.word	0x20002da8
    4360:	20002da2 	.word	0x20002da2
    4364:	20002dae 	.word	0x20002dae
    4368:	20002d6e 	.word	0x20002d6e
    436c:	20002d9f 	.word	0x20002d9f
    4370:	20002da9 	.word	0x20002da9
    4374:	20002d9e 	.word	0x20002d9e
    4378:	20002d85 	.word	0x20002d85
    437c:	20002d86 	.word	0x20002d86
    4380:	20002d88 	.word	0x20002d88
    4384:	20002d87 	.word	0x20002d87
    4388:	20002d40 	.word	0x20002d40
    438c:	000213b6 	.word	0x000213b6
    4390:	20002daa 	.word	0x20002daa
    4394:	20002dab 	.word	0x20002dab
    4398:	20002dac 	.word	0x20002dac
    439c:	20002dad 	.word	0x20002dad
    43a0:	20002d42 	.word	0x20002d42
    43a4:	20002da0 	.word	0x20002da0
    43a8:	20000038 	.word	0x20000038
            allAdv[3] = sensorData[1];
    43ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    43b0:	e9c4 0106 	strd	r0, r1, [r4, #24]
            fltohex(sensorData[2],xyzVals);
    43b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    43b8:	f7fc fb08 	bl	9cc <__aeabi_d2f>
    43bc:	4631      	mov	r1, r6
    43be:	f7ff fe39 	bl	4034 <fltohex>
            allAdv[4] = xyzVals[0];
    43c2:	7830      	ldrb	r0, [r6, #0]
    43c4:	f7fb ffce 	bl	364 <__aeabi_ui2d>
    43c8:	e9c4 0108 	strd	r0, r1, [r4, #32]
            allAdv[5] = xyzVals[1];
    43cc:	7870      	ldrb	r0, [r6, #1]
    43ce:	f7fb ffc9 	bl	364 <__aeabi_ui2d>
    43d2:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            allAdv[6] = xyzVals[2];
    43d6:	78b0      	ldrb	r0, [r6, #2]
    43d8:	f7fb ffc4 	bl	364 <__aeabi_ui2d>
    43dc:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
            allAdv[7] = xyzVals[3];
    43e0:	78f0      	ldrb	r0, [r6, #3]
    43e2:	f7fb ffbf 	bl	364 <__aeabi_ui2d>
    43e6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
            fltohex(sensorData[3],xyzVals);
    43ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    43ee:	f7fc faed 	bl	9cc <__aeabi_d2f>
    43f2:	4631      	mov	r1, r6
    43f4:	f7ff fe1e 	bl	4034 <fltohex>
            allAdv[8] = xyzVals[0];
    43f8:	7830      	ldrb	r0, [r6, #0]
    43fa:	f7fb ffb3 	bl	364 <__aeabi_ui2d>
    43fe:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
            allAdv[9] = xyzVals[1];
    4402:	7870      	ldrb	r0, [r6, #1]
    4404:	f7fb ffae 	bl	364 <__aeabi_ui2d>
    4408:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
            allAdv[10] = xyzVals[2];
    440c:	78b0      	ldrb	r0, [r6, #2]
    440e:	f7fb ffa9 	bl	364 <__aeabi_ui2d>
    4412:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
            allAdv[11] = xyzVals[3];
    4416:	78f0      	ldrb	r0, [r6, #3]
    4418:	f7fb ffa4 	bl	364 <__aeabi_ui2d>
    441c:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
            fltohex(sensorData[4],xyzVals);
    4420:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    4424:	f7fc fad2 	bl	9cc <__aeabi_d2f>
    4428:	4631      	mov	r1, r6
    442a:	f7ff fe03 	bl	4034 <fltohex>
            allAdv[12] = xyzVals[0];
    442e:	7830      	ldrb	r0, [r6, #0]
    4430:	f7fb ff98 	bl	364 <__aeabi_ui2d>
    4434:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
            allAdv[13] = xyzVals[1];
    4438:	7870      	ldrb	r0, [r6, #1]
    443a:	f7fb ff93 	bl	364 <__aeabi_ui2d>
    443e:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
            allAdv[14] = xyzVals[2];
    4442:	78b0      	ldrb	r0, [r6, #2]
    4444:	f7fb ff8e 	bl	364 <__aeabi_ui2d>
    4448:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            allAdv[15] = xyzVals[3];
    444c:	78f0      	ldrb	r0, [r6, #3]
    444e:	f7fb ff89 	bl	364 <__aeabi_ui2d>
    4452:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
            allAdv[16] = sensorData[5];
    4456:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    445a:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
            allAdv[17] = sensorData[6];
    445e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
            loadAll = false;
    4462:	4a39      	ldr	r2, [pc, #228]	; (4548 <bt_entry+0x4d0>)
    4464:	2300      	movs	r3, #0
            allAdv[17] = sensorData[6];
    4466:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
            loadAll = false;
    446a:	7013      	strb	r3, [r2, #0]
            load(allAdv,2,18);
    446c:	2102      	movs	r1, #2
            set = true;
    446e:	2301      	movs	r3, #1
            load(allAdv,2,18);
    4470:	2212      	movs	r2, #18
    4472:	4620      	mov	r0, r4
            set = true;
    4474:	702b      	strb	r3, [r5, #0]
            load(allAdv,2,18);
    4476:	f000 fb45 	bl	4b04 <load>
        if(!loadTemp && !loadHum && !loadAp && !loadVoc && !loadX && !loadY && !loadZ && !loadBut && !ledRGB 
    447a:	f89b 3000 	ldrb.w	r3, [fp]
    447e:	bb53      	cbnz	r3, 44d6 <bt_entry+0x45e>
    4480:	f89a 3000 	ldrb.w	r3, [sl]
    4484:	bb3b      	cbnz	r3, 44d6 <bt_entry+0x45e>
    4486:	4b31      	ldr	r3, [pc, #196]	; (454c <bt_entry+0x4d4>)
    4488:	781b      	ldrb	r3, [r3, #0]
    448a:	bb23      	cbnz	r3, 44d6 <bt_entry+0x45e>
    448c:	4b30      	ldr	r3, [pc, #192]	; (4550 <bt_entry+0x4d8>)
    448e:	781b      	ldrb	r3, [r3, #0]
    4490:	bb0b      	cbnz	r3, 44d6 <bt_entry+0x45e>
    4492:	f899 3000 	ldrb.w	r3, [r9]
    4496:	b9f3      	cbnz	r3, 44d6 <bt_entry+0x45e>
    4498:	f898 3000 	ldrb.w	r3, [r8]
    449c:	b9db      	cbnz	r3, 44d6 <bt_entry+0x45e>
    449e:	4b2d      	ldr	r3, [pc, #180]	; (4554 <bt_entry+0x4dc>)
    44a0:	781b      	ldrb	r3, [r3, #0]
    44a2:	b9c3      	cbnz	r3, 44d6 <bt_entry+0x45e>
    44a4:	4b2c      	ldr	r3, [pc, #176]	; (4558 <bt_entry+0x4e0>)
    44a6:	781b      	ldrb	r3, [r3, #0]
    44a8:	b9ab      	cbnz	r3, 44d6 <bt_entry+0x45e>
    44aa:	4b2c      	ldr	r3, [pc, #176]	; (455c <bt_entry+0x4e4>)
    44ac:	781b      	ldrb	r3, [r3, #0]
    44ae:	b993      	cbnz	r3, 44d6 <bt_entry+0x45e>
            && !buzz && !set && !retDC && !retSample && !loadAll) {
    44b0:	4b2b      	ldr	r3, [pc, #172]	; (4560 <bt_entry+0x4e8>)
    44b2:	781b      	ldrb	r3, [r3, #0]
    44b4:	b97b      	cbnz	r3, 44d6 <bt_entry+0x45e>
    44b6:	782b      	ldrb	r3, [r5, #0]
    44b8:	b96b      	cbnz	r3, 44d6 <bt_entry+0x45e>
    44ba:	4b2a      	ldr	r3, [pc, #168]	; (4564 <bt_entry+0x4ec>)
    44bc:	781b      	ldrb	r3, [r3, #0]
    44be:	b953      	cbnz	r3, 44d6 <bt_entry+0x45e>
    44c0:	4b29      	ldr	r3, [pc, #164]	; (4568 <bt_entry+0x4f0>)
    44c2:	781b      	ldrb	r3, [r3, #0]
    44c4:	b93b      	cbnz	r3, 44d6 <bt_entry+0x45e>
    44c6:	4b20      	ldr	r3, [pc, #128]	; (4548 <bt_entry+0x4d0>)
    44c8:	781b      	ldrb	r3, [r3, #0]
    44ca:	b923      	cbnz	r3, 44d6 <bt_entry+0x45e>
            load(defAd,2,18);
    44cc:	4827      	ldr	r0, [pc, #156]	; (456c <bt_entry+0x4f4>)
    44ce:	2212      	movs	r2, #18
    44d0:	2102      	movs	r1, #2
    44d2:	f000 fb17 	bl	4b04 <load>
	z_impl_k_sem_give(sem);
    44d6:	4826      	ldr	r0, [pc, #152]	; (4570 <bt_entry+0x4f8>)
    44d8:	f015 fe40 	bl	1a15c <z_impl_k_sem_give>
        k_sleep(K_MSEC(1000*(1-(dutyVal/100))+1000));
    44dc:	4925      	ldr	r1, [pc, #148]	; (4574 <bt_entry+0x4fc>)
    44de:	4b26      	ldr	r3, [pc, #152]	; (4578 <bt_entry+0x500>)
    44e0:	2200      	movs	r2, #0
    44e2:	e9d1 0100 	ldrd	r0, r1, [r1]
    44e6:	f7fc f8e1 	bl	6ac <__aeabi_ddiv>
    44ea:	4602      	mov	r2, r0
    44ec:	460b      	mov	r3, r1
    44ee:	2000      	movs	r0, #0
    44f0:	4922      	ldr	r1, [pc, #136]	; (457c <bt_entry+0x504>)
    44f2:	f7fb fdf9 	bl	e8 <__aeabi_dsub>
    44f6:	4b22      	ldr	r3, [pc, #136]	; (4580 <bt_entry+0x508>)
    44f8:	2200      	movs	r2, #0
    44fa:	f7fb ffad 	bl	458 <__aeabi_dmul>
    44fe:	4b20      	ldr	r3, [pc, #128]	; (4580 <bt_entry+0x508>)
    4500:	2200      	movs	r2, #0
    4502:	f7fb fdf3 	bl	ec <__adddf3>
    4506:	2200      	movs	r2, #0
    4508:	2300      	movs	r3, #0
    450a:	4604      	mov	r4, r0
    450c:	460d      	mov	r5, r1
    450e:	f7fc fa33 	bl	978 <__aeabi_dcmpgt>
    4512:	b1a8      	cbz	r0, 4540 <bt_entry+0x4c8>
    4514:	4620      	mov	r0, r4
    4516:	4629      	mov	r1, r5
    4518:	f7fc fb10 	bl	b3c <__aeabi_d2ulz>
    451c:	03c9      	lsls	r1, r1, #15
    451e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4522:	f240 33e7 	movw	r3, #999	; 0x3e7
    4526:	03c0      	lsls	r0, r0, #15
    4528:	18c0      	adds	r0, r0, r3
    452a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    452e:	f04f 0300 	mov.w	r3, #0
    4532:	f141 0100 	adc.w	r1, r1, #0
    4536:	f7fc fae9 	bl	b0c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    453a:	f016 faab 	bl	1aa94 <z_impl_k_sleep>
    while(1) {
    453e:	e5a5      	b.n	408c <bt_entry+0x14>
        k_sleep(K_MSEC(1000*(1-(dutyVal/100))+1000));
    4540:	4601      	mov	r1, r0
    4542:	e7eb      	b.n	451c <bt_entry+0x4a4>
}
    4544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4548:	20002da0 	.word	0x20002da0
    454c:	20002da1 	.word	0x20002da1
    4550:	20002da5 	.word	0x20002da5
    4554:	20002da8 	.word	0x20002da8
    4558:	20002da2 	.word	0x20002da2
    455c:	20002d9f 	.word	0x20002d9f
    4560:	20002d86 	.word	0x20002d86
    4564:	20002daa 	.word	0x20002daa
    4568:	20002dab 	.word	0x20002dab
    456c:	20000d48 	.word	0x20000d48
    4570:	20000a28 	.word	0x20000a28
    4574:	200000c8 	.word	0x200000c8
    4578:	40590000 	.word	0x40590000
    457c:	3ff00000 	.word	0x3ff00000
    4580:	408f4000 	.word	0x408f4000

00004584 <htts221_read>:
}

/**
*function which reads temp value
**/
void htts221_read(void) {
    4584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    4586:	4826      	ldr	r0, [pc, #152]	; (4620 <htts221_read+0x9c>)
    4588:	f015 fb8e 	bl	19ca8 <z_impl_device_get_binding>
	const struct device *dev = device_get_binding("HTS221");

	if (dev == NULL) {
    458c:	4604      	mov	r4, r0
    458e:	b928      	cbnz	r0, 459c <htts221_read+0x18>
		printf("Could not get HTS221 device\n");
    4590:	4824      	ldr	r0, [pc, #144]	; (4624 <htts221_read+0xa0>)
			return;
		}
	}
	process_sample(dev);

}
    4592:	b004      	add	sp, #16
    4594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Could not get HTS221 device\n");
    4598:	f002 b93c 	b.w	6814 <printf>
	if (sensor_sample_fetch(dev) < 0) {
    459c:	f016 fd11 	bl	1afc2 <sensor_sample_fetch>
    45a0:	2800      	cmp	r0, #0
    45a2:	da05      	bge.n	45b0 <htts221_read+0x2c>
		printk("Sensor sample update error\n");
    45a4:	4820      	ldr	r0, [pc, #128]	; (4628 <htts221_read+0xa4>)
}
    45a6:	b004      	add	sp, #16
    45a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Sensor sample update error\n");
    45ac:	f016 bd83 	b.w	1b0b6 <printk>
	if (sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0) {
    45b0:	466a      	mov	r2, sp
    45b2:	210d      	movs	r1, #13
    45b4:	4620      	mov	r0, r4
    45b6:	f016 fd08 	bl	1afca <sensor_channel_get>
    45ba:	2800      	cmp	r0, #0
    45bc:	da04      	bge.n	45c8 <htts221_read+0x44>
		printk("Cannot read HTS221 temperature channel\n");
    45be:	481b      	ldr	r0, [pc, #108]	; (462c <htts221_read+0xa8>)
		printk("Cannot read HTS221 humidity channel\n");
    45c0:	f016 fd79 	bl	1b0b6 <printk>
}
    45c4:	b004      	add	sp, #16
    45c6:	bd10      	pop	{r4, pc}
	if (sensor_channel_get(dev, SENSOR_CHAN_HUMIDITY, &hum) < 0) {
    45c8:	aa02      	add	r2, sp, #8
    45ca:	2110      	movs	r1, #16
    45cc:	4620      	mov	r0, r4
    45ce:	f016 fcfc 	bl	1afca <sensor_channel_get>
    45d2:	2800      	cmp	r0, #0
    45d4:	da01      	bge.n	45da <htts221_read+0x56>
		printk("Cannot read HTS221 humidity channel\n");
    45d6:	4816      	ldr	r0, [pc, #88]	; (4630 <htts221_read+0xac>)
    45d8:	e7f2      	b.n	45c0 <htts221_read+0x3c>
	++obs;
    45da:	4b16      	ldr	r3, [pc, #88]	; (4634 <htts221_read+0xb0>)
	printf("Observation:%u\n", obs);
    45dc:	4816      	ldr	r0, [pc, #88]	; (4638 <htts221_read+0xb4>)
	++obs;
    45de:	6819      	ldr	r1, [r3, #0]
	sensorData[0] = sensor_value_to_double(&temp);
    45e0:	4c16      	ldr	r4, [pc, #88]	; (463c <htts221_read+0xb8>)
	++obs;
    45e2:	3101      	adds	r1, #1
    45e4:	6019      	str	r1, [r3, #0]
	printf("Observation:%u\n", obs);
    45e6:	f002 f915 	bl	6814 <printf>
	printf("Temperature:%.1f C\n", sensor_value_to_double(&temp));
    45ea:	4668      	mov	r0, sp
    45ec:	f7fc fc1c 	bl	e28 <sensor_value_to_double>
    45f0:	4602      	mov	r2, r0
    45f2:	460b      	mov	r3, r1
    45f4:	4812      	ldr	r0, [pc, #72]	; (4640 <htts221_read+0xbc>)
    45f6:	f002 f90d 	bl	6814 <printf>
	printf("Relative Humidity:%.1f%%\n",sensor_value_to_double(&hum));
    45fa:	a802      	add	r0, sp, #8
    45fc:	f7fc fc14 	bl	e28 <sensor_value_to_double>
    4600:	4602      	mov	r2, r0
    4602:	460b      	mov	r3, r1
    4604:	480f      	ldr	r0, [pc, #60]	; (4644 <htts221_read+0xc0>)
    4606:	f002 f905 	bl	6814 <printf>
	sensorData[0] = sensor_value_to_double(&temp);
    460a:	4668      	mov	r0, sp
    460c:	f7fc fc0c 	bl	e28 <sensor_value_to_double>
    4610:	e9c4 0100 	strd	r0, r1, [r4]
	sensorData[1] = sensor_value_to_double(&hum);
    4614:	a802      	add	r0, sp, #8
    4616:	f7fc fc07 	bl	e28 <sensor_value_to_double>
    461a:	e9c4 0102 	strd	r0, r1, [r4, #8]
    461e:	e7d1      	b.n	45c4 <htts221_read+0x40>
    4620:	000213d7 	.word	0x000213d7
    4624:	000213de 	.word	0x000213de
    4628:	000213fb 	.word	0x000213fb
    462c:	00021417 	.word	0x00021417
    4630:	0002143f 	.word	0x0002143f
    4634:	20001778 	.word	0x20001778
    4638:	00021464 	.word	0x00021464
    463c:	20000d10 	.word	0x20000d10
    4640:	00021474 	.word	0x00021474
    4644:	00021488 	.word	0x00021488

00004648 <lis2dh_read>:

/**
function which accelerator values
**/
void lis2dh_read(void)
{
    4648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    464c:	b08c      	sub	sp, #48	; 0x30
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    464e:	4c30      	ldr	r4, [pc, #192]	; (4710 <lis2dh_read+0xc8>)
    4650:	4620      	mov	r0, r4
    4652:	f01a fd2c 	bl	1f0ae <z_device_is_ready>

	if (sensor == NULL) {
		printf("No device found\n");
		return;
	}
	if (!device_is_ready(sensor)) {
    4656:	b930      	cbnz	r0, 4666 <lis2dh_read+0x1e>
		printf("Device %s is not ready\n", sensor->name);
    4658:	6821      	ldr	r1, [r4, #0]
    465a:	482e      	ldr	r0, [pc, #184]	; (4714 <lis2dh_read+0xcc>)
		}
	}
#else /* CONFIG_LIS2DH_TRIGGER */
	fetch_and_display(sensor);
#endif /* CONFIG_LIS2DH_TRIGGER */
}
    465c:	b00c      	add	sp, #48	; 0x30
    465e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("Device %s is not ready\n", sensor->name);
    4662:	f002 b8d7 	b.w	6814 <printf>
	int rc = sensor_sample_fetch(sensor);
    4666:	4620      	mov	r0, r4
	++count;
    4668:	4c2b      	ldr	r4, [pc, #172]	; (4718 <lis2dh_read+0xd0>)
	int rc = sensor_sample_fetch(sensor);
    466a:	f016 fcaa 	bl	1afc2 <sensor_sample_fetch>
	++count;
    466e:	6823      	ldr	r3, [r4, #0]
	if (rc == -EBADMSG) {
    4670:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
	++count;
    4674:	f103 0301 	add.w	r3, r3, #1
	int rc = sensor_sample_fetch(sensor);
    4678:	4601      	mov	r1, r0
	++count;
    467a:	6023      	str	r3, [r4, #0]
	if (rc == -EBADMSG) {
    467c:	d000      	beq.n	4680 <lis2dh_read+0x38>
	if (rc == 0) {
    467e:	b928      	cbnz	r0, 468c <lis2dh_read+0x44>
		rc = sensor_channel_get(sensor,
    4680:	2103      	movs	r1, #3
    4682:	4823      	ldr	r0, [pc, #140]	; (4710 <lis2dh_read+0xc8>)
    4684:	aa06      	add	r2, sp, #24
    4686:	f016 fca0 	bl	1afca <sensor_channel_get>
    468a:	4601      	mov	r1, r0
	if (rc < 0) {
    468c:	2900      	cmp	r1, #0
    468e:	da08      	bge.n	46a2 <lis2dh_read+0x5a>
		printf("ERROR: Update failed: %d\n", rc);
    4690:	4822      	ldr	r0, [pc, #136]	; (471c <lis2dh_read+0xd4>)
    4692:	f002 f8bf 	bl	6814 <printf>
		printf("\n");
    4696:	4822      	ldr	r0, [pc, #136]	; (4720 <lis2dh_read+0xd8>)
    4698:	f002 f8bc 	bl	6814 <printf>
}
    469c:	b00c      	add	sp, #48	; 0x30
    469e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("#%u @ %u ms: %sx %f , y %f , z %f",
    46a2:	6825      	ldr	r5, [r4, #0]
	return z_impl_k_uptime_ticks();
    46a4:	f01b f8bb 	bl	1f81e <z_impl_k_uptime_ticks>
    46a8:	4604      	mov	r4, r0
    46aa:	a806      	add	r0, sp, #24
    46ac:	468a      	mov	sl, r1
    46ae:	f7fc fbbb 	bl	e28 <sensor_value_to_double>
    46b2:	4606      	mov	r6, r0
    46b4:	a808      	add	r0, sp, #32
    46b6:	460f      	mov	r7, r1
    46b8:	f7fc fbb6 	bl	e28 <sensor_value_to_double>
    46bc:	4680      	mov	r8, r0
    46be:	a80a      	add	r0, sp, #40	; 0x28
    46c0:	4689      	mov	r9, r1
    46c2:	f7fc fbb1 	bl	e28 <sensor_value_to_double>
    46c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    46ca:	fba4 4203 	umull	r4, r2, r4, r3
    46ce:	fb03 220a 	mla	r2, r3, sl, r2
    46d2:	0be4      	lsrs	r4, r4, #15
    46d4:	ea44 4242 	orr.w	r2, r4, r2, lsl #17
    46d8:	4b12      	ldr	r3, [pc, #72]	; (4724 <lis2dh_read+0xdc>)
		sensorData[2] = sensor_value_to_double(&accel[0]);
    46da:	4c13      	ldr	r4, [pc, #76]	; (4728 <lis2dh_read+0xe0>)
		printf("#%u @ %u ms: %sx %f , y %f , z %f",
    46dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    46e0:	e9cd 8902 	strd	r8, r9, [sp, #8]
    46e4:	4629      	mov	r1, r5
    46e6:	e9cd 6700 	strd	r6, r7, [sp]
    46ea:	4810      	ldr	r0, [pc, #64]	; (472c <lis2dh_read+0xe4>)
    46ec:	f002 f892 	bl	6814 <printf>
		sensorData[2] = sensor_value_to_double(&accel[0]);
    46f0:	a806      	add	r0, sp, #24
    46f2:	f7fc fb99 	bl	e28 <sensor_value_to_double>
    46f6:	e9c4 0104 	strd	r0, r1, [r4, #16]
		sensorData[3] = sensor_value_to_double(&accel[1]);
    46fa:	a808      	add	r0, sp, #32
    46fc:	f7fc fb94 	bl	e28 <sensor_value_to_double>
    4700:	e9c4 0106 	strd	r0, r1, [r4, #24]
		sensorData[4] = sensor_value_to_double(&accel[2]);
    4704:	a80a      	add	r0, sp, #40	; 0x28
    4706:	f7fc fb8f 	bl	e28 <sensor_value_to_double>
    470a:	e9c4 0108 	strd	r0, r1, [r4, #32]
    470e:	e7c2      	b.n	4696 <lis2dh_read+0x4e>
    4710:	0001fda8 	.word	0x0001fda8
    4714:	000214a2 	.word	0x000214a2
    4718:	20001770 	.word	0x20001770
    471c:	000214ba 	.word	0x000214ba
    4720:	00021901 	.word	0x00021901
    4724:	00021902 	.word	0x00021902
    4728:	20000d10 	.word	0x20000d10
    472c:	000214d4 	.word	0x000214d4

00004730 <lps22hb_read>:

/**
*read air presseure value
*/
void lps22hb_read(void)
{
    4730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4732:	4822      	ldr	r0, [pc, #136]	; (47bc <lps22hb_read+0x8c>)
    4734:	f015 fab8 	bl	19ca8 <z_impl_device_get_binding>
	const struct device *dev = device_get_binding(DT_LABEL(DT_INST(0, st_lps22hb_press)));

	if (dev == NULL) {
    4738:	4604      	mov	r4, r0
    473a:	b928      	cbnz	r0, 4748 <lps22hb_read+0x18>
		printf("Could not get LPS22HB device\n");
    473c:	4820      	ldr	r0, [pc, #128]	; (47c0 <lps22hb_read+0x90>)
		return;
	}

	process_airpressure(dev);
}
    473e:	b004      	add	sp, #16
    4740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Sensor sample update error\n");
    4744:	f002 b866 	b.w	6814 <printf>
	if (sensor_sample_fetch(dev) < 0) {
    4748:	f016 fc3b 	bl	1afc2 <sensor_sample_fetch>
    474c:	2800      	cmp	r0, #0
    474e:	da01      	bge.n	4754 <lps22hb_read+0x24>
		printf("Sensor sample update error\n");
    4750:	481c      	ldr	r0, [pc, #112]	; (47c4 <lps22hb_read+0x94>)
    4752:	e7f4      	b.n	473e <lps22hb_read+0xe>
	if (sensor_channel_get(dev, SENSOR_CHAN_PRESS, &pressure) < 0) {
    4754:	466a      	mov	r2, sp
    4756:	210e      	movs	r1, #14
    4758:	4620      	mov	r0, r4
    475a:	f016 fc36 	bl	1afca <sensor_channel_get>
    475e:	2800      	cmp	r0, #0
    4760:	da04      	bge.n	476c <lps22hb_read+0x3c>
		printf("Cannot read LPS22HB pressure channel\n");
    4762:	4819      	ldr	r0, [pc, #100]	; (47c8 <lps22hb_read+0x98>)
		printf("Cannot read LPS22HB temperature channel\n");
    4764:	f002 f856 	bl	6814 <printf>
}
    4768:	b004      	add	sp, #16
    476a:	bd10      	pop	{r4, pc}
	if (sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0) {
    476c:	aa02      	add	r2, sp, #8
    476e:	210d      	movs	r1, #13
    4770:	4620      	mov	r0, r4
    4772:	f016 fc2a 	bl	1afca <sensor_channel_get>
    4776:	2800      	cmp	r0, #0
    4778:	da01      	bge.n	477e <lps22hb_read+0x4e>
		printf("Cannot read LPS22HB temperature channel\n");
    477a:	4814      	ldr	r0, [pc, #80]	; (47cc <lps22hb_read+0x9c>)
    477c:	e7f2      	b.n	4764 <lps22hb_read+0x34>
	++obs;
    477e:	4b14      	ldr	r3, [pc, #80]	; (47d0 <lps22hb_read+0xa0>)
	printf("Observation:%u\n", obs);
    4780:	4814      	ldr	r0, [pc, #80]	; (47d4 <lps22hb_read+0xa4>)
	++obs;
    4782:	6819      	ldr	r1, [r3, #0]
    4784:	3101      	adds	r1, #1
    4786:	6019      	str	r1, [r3, #0]
	printf("Observation:%u\n", obs);
    4788:	f002 f844 	bl	6814 <printf>
	printf("Pressure:%.1f kPa\n", sensor_value_to_double(&pressure));
    478c:	4668      	mov	r0, sp
    478e:	f7fc fb4b 	bl	e28 <sensor_value_to_double>
    4792:	4602      	mov	r2, r0
    4794:	460b      	mov	r3, r1
    4796:	4810      	ldr	r0, [pc, #64]	; (47d8 <lps22hb_read+0xa8>)
    4798:	f002 f83c 	bl	6814 <printf>
	sensorData[5] = sensor_value_to_double(&pressure);
    479c:	4668      	mov	r0, sp
    479e:	f7fc fb43 	bl	e28 <sensor_value_to_double>
    47a2:	4b0e      	ldr	r3, [pc, #56]	; (47dc <lps22hb_read+0xac>)
    47a4:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
	printf("Temperature:%.1f C\n", sensor_value_to_double(&temp));
    47a8:	a802      	add	r0, sp, #8
    47aa:	f7fc fb3d 	bl	e28 <sensor_value_to_double>
    47ae:	4602      	mov	r2, r0
    47b0:	460b      	mov	r3, r1
    47b2:	480b      	ldr	r0, [pc, #44]	; (47e0 <lps22hb_read+0xb0>)
    47b4:	f002 f82e 	bl	6814 <printf>
    47b8:	e7d6      	b.n	4768 <lps22hb_read+0x38>
    47ba:	bf00      	nop
    47bc:	000214f6 	.word	0x000214f6
    47c0:	000214fe 	.word	0x000214fe
    47c4:	000213fb 	.word	0x000213fb
    47c8:	0002151c 	.word	0x0002151c
    47cc:	00021542 	.word	0x00021542
    47d0:	20001774 	.word	0x20001774
    47d4:	00021464 	.word	0x00021464
    47d8:	0002156b 	.word	0x0002156b
    47dc:	20000d10 	.word	0x20000d10
    47e0:	00021474 	.word	0x00021474

000047e4 <VOC_READ>:
}

/**
*function that reads voc
*/
void VOC_READ(void) {
    47e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    47e6:	b08f      	sub	sp, #60	; 0x3c
    47e8:	484d      	ldr	r0, [pc, #308]	; (4920 <VOC_READ+0x13c>)
    47ea:	f015 fa5d 	bl	19ca8 <z_impl_device_get_binding>
	const struct device *dev = device_get_binding(DT_LABEL(DT_INST(0, ams_ccs811)));
	struct ccs811_configver_type cfgver;
	int rc;

	if (!dev) {
    47ee:	4604      	mov	r4, r0
    47f0:	b928      	cbnz	r0, 47fe <VOC_READ+0x1a>
		printk("Failed to get device binding");
    47f2:	484c      	ldr	r0, [pc, #304]	; (4924 <VOC_READ+0x140>)
	printk("Trigger installation got: %d\n", rc);
#endif /* CONFIG_CCS811_TRIGGER */
	if (rc == 0) {
		do_main(dev);
	}
}
    47f4:	b00f      	add	sp, #60	; 0x3c
    47f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("Failed to get device binding");
    47fa:	f016 bc5c 	b.w	1b0b6 <printk>
	printk("device is %p, name is %s\n", dev, dev->name);
    47fe:	4601      	mov	r1, r0
    4800:	6802      	ldr	r2, [r0, #0]
    4802:	4849      	ldr	r0, [pc, #292]	; (4928 <VOC_READ+0x144>)
    4804:	f016 fc57 	bl	1b0b6 <printk>
	rc = ccs811_configver_fetch(dev, &cfgver);
    4808:	a904      	add	r1, sp, #16
    480a:	4620      	mov	r0, r4
    480c:	f019 ffcf 	bl	1e7ae <ccs811_configver_fetch>
	if (rc == 0) {
    4810:	2800      	cmp	r0, #0
    4812:	f040 8083 	bne.w	491c <VOC_READ+0x138>
		printk("HW %02x; FW Boot %04x App %04x ; mode %02x\n",
    4816:	f89d 3015 	ldrb.w	r3, [sp, #21]
    481a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    481e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    4822:	4842      	ldr	r0, [pc, #264]	; (492c <VOC_READ+0x148>)
    4824:	9300      	str	r3, [sp, #0]
    4826:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		app_fw_2 = (cfgver.fw_app_version >> 8) > 0x11;
    482a:	4d41      	ldr	r5, [pc, #260]	; (4930 <VOC_READ+0x14c>)
		printk("HW %02x; FW Boot %04x App %04x ; mode %02x\n",
    482c:	f016 fc43 	bl	1b0b6 <printk>
		app_fw_2 = (cfgver.fw_app_version >> 8) > 0x11;
    4830:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    4834:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
    4838:	bf34      	ite	cc
    483a:	2300      	movcc	r3, #0
    483c:	2301      	movcs	r3, #1
		rc = sensor_sample_fetch(dev);
    483e:	4620      	mov	r0, r4
		app_fw_2 = (cfgver.fw_app_version >> 8) > 0x11;
    4840:	702b      	strb	r3, [r5, #0]
		rc = sensor_sample_fetch(dev);
    4842:	f016 fbbe 	bl	1afc2 <sensor_sample_fetch>
	if (rc == 0) {
    4846:	4601      	mov	r1, r0
    4848:	2800      	cmp	r0, #0
    484a:	d161      	bne.n	4910 <VOC_READ+0x12c>
		const struct ccs811_result_type *rp = ccs811_result(dev);
    484c:	4620      	mov	r0, r4
    484e:	f019 ffab 	bl	1e7a8 <ccs811_result>
		sensor_channel_get(dev, SENSOR_CHAN_CO2, &co2);
    4852:	aa06      	add	r2, sp, #24
		const struct ccs811_result_type *rp = ccs811_result(dev);
    4854:	4606      	mov	r6, r0
		sensor_channel_get(dev, SENSOR_CHAN_CO2, &co2);
    4856:	211b      	movs	r1, #27
    4858:	4620      	mov	r0, r4
    485a:	f016 fbb6 	bl	1afca <sensor_channel_get>
		sensor_channel_get(dev, SENSOR_CHAN_VOC, &tvoc);
    485e:	aa08      	add	r2, sp, #32
    4860:	211c      	movs	r1, #28
    4862:	4620      	mov	r0, r4
    4864:	f016 fbb1 	bl	1afca <sensor_channel_get>
		sensor_channel_get(dev, SENSOR_CHAN_VOLTAGE, &voltage);
    4868:	aa0a      	add	r2, sp, #40	; 0x28
    486a:	211e      	movs	r1, #30
    486c:	4620      	mov	r0, r4
    486e:	f016 fbac 	bl	1afca <sensor_channel_get>
		sensor_channel_get(dev, SENSOR_CHAN_CURRENT, &current);
    4872:	aa0c      	add	r2, sp, #48	; 0x30
    4874:	211f      	movs	r1, #31
    4876:	4620      	mov	r0, r4
    4878:	f016 fba7 	bl	1afca <sensor_channel_get>
    487c:	f01a ffcf 	bl	1f81e <z_impl_k_uptime_ticks>
    4880:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    4884:	fba0 2004 	umull	r2, r0, r0, r4
    4888:	fb04 0001 	mla	r0, r4, r1, r0
    488c:	0bd2      	lsrs	r2, r2, #15
	now /= 60U;
    488e:	273c      	movs	r7, #60	; 0x3c
    4890:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
	now /= MSEC_PER_SEC;
    4894:	fbb2 f0f4 	udiv	r0, r2, r4
	unsigned int ms = now % MSEC_PER_SEC;
    4898:	fb04 2210 	mls	r2, r4, r0, r2
	now /= 60U;
    489c:	fbb0 f1f7 	udiv	r1, r0, r7
	s = now % 60U;
    48a0:	fb07 0011 	mls	r0, r7, r1, r0
	now /= 60U;
    48a4:	fbb1 f3f7 	udiv	r3, r1, r7
	min = now % 60U;
    48a8:	fb07 1113 	mls	r1, r7, r3, r1
	snprintf(buf, sizeof(buf), "%u:%02u:%02u.%03u",
    48ac:	9202      	str	r2, [sp, #8]
    48ae:	9001      	str	r0, [sp, #4]
    48b0:	4a20      	ldr	r2, [pc, #128]	; (4934 <VOC_READ+0x150>)
    48b2:	9100      	str	r1, [sp, #0]
    48b4:	4820      	ldr	r0, [pc, #128]	; (4938 <VOC_READ+0x154>)
    48b6:	2110      	movs	r1, #16
    48b8:	f001 ff94 	bl	67e4 <snprintf>
		printk("\n[%s]: CCS811: %u ppm eCO2; %u ppb eTVOC\n",
    48bc:	9b08      	ldr	r3, [sp, #32]
    48be:	9a06      	ldr	r2, [sp, #24]
    48c0:	491d      	ldr	r1, [pc, #116]	; (4938 <VOC_READ+0x154>)
    48c2:	481e      	ldr	r0, [pc, #120]	; (493c <VOC_READ+0x158>)
    48c4:	f016 fbf7 	bl	1b0b6 <printk>
		sensorData[6] = tvoc.val1;
    48c8:	9808      	ldr	r0, [sp, #32]
    48ca:	f7fb fd5b 	bl	384 <__aeabi_i2d>
    48ce:	4b1c      	ldr	r3, [pc, #112]	; (4940 <VOC_READ+0x15c>)
    48d0:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
		printk("Voltage: %d.%06dV; Current: %d.%06dA\n", voltage.val1,
    48d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    48d6:	9300      	str	r3, [sp, #0]
    48d8:	990a      	ldr	r1, [sp, #40]	; 0x28
    48da:	481a      	ldr	r0, [pc, #104]	; (4944 <VOC_READ+0x160>)
    48dc:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
    48e0:	f016 fbe9 	bl	1b0b6 <printk>
		if (app_fw_2 && !(rp->status & CCS811_STATUS_DATA_READY)) {
    48e4:	782b      	ldrb	r3, [r5, #0]
    48e6:	b12b      	cbz	r3, 48f4 <VOC_READ+0x110>
    48e8:	79b3      	ldrb	r3, [r6, #6]
    48ea:	071a      	lsls	r2, r3, #28
    48ec:	d402      	bmi.n	48f4 <VOC_READ+0x110>
			printk("STALE DATA\n");
    48ee:	4816      	ldr	r0, [pc, #88]	; (4948 <VOC_READ+0x164>)
    48f0:	f016 fbe1 	bl	1b0b6 <printk>
		if (rp->status & CCS811_STATUS_ERROR) {
    48f4:	79b3      	ldrb	r3, [r6, #6]
    48f6:	07db      	lsls	r3, r3, #31
    48f8:	d503      	bpl.n	4902 <VOC_READ+0x11e>
			printk("ERROR: %02x\n", rp->error);
    48fa:	79f1      	ldrb	r1, [r6, #7]
    48fc:	4813      	ldr	r0, [pc, #76]	; (494c <VOC_READ+0x168>)
    48fe:	f016 fbda 	bl	1b0b6 <printk>
		printk("Timed fetch got %d\n", rc);
    4902:	4813      	ldr	r0, [pc, #76]	; (4950 <VOC_READ+0x16c>)
    4904:	2100      	movs	r1, #0
    4906:	e000      	b.n	490a <VOC_READ+0x126>
		printk("Timed fetch failed: %d\n", rc);
    4908:	4812      	ldr	r0, [pc, #72]	; (4954 <VOC_READ+0x170>)
		printk("Timed fetch got %d\n", rc);
    490a:	f016 fbd4 	bl	1b0b6 <printk>
    490e:	e005      	b.n	491c <VOC_READ+0x138>
	} else if (-EAGAIN == rc) {
    4910:	f110 0f0b 	cmn.w	r0, #11
    4914:	d1f8      	bne.n	4908 <VOC_READ+0x124>
		printk("Timed fetch got stale data\n");
    4916:	4810      	ldr	r0, [pc, #64]	; (4958 <VOC_READ+0x174>)
    4918:	f016 fbcd 	bl	1b0b6 <printk>
}
    491c:	b00f      	add	sp, #60	; 0x3c
    491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4920:	0002157e 	.word	0x0002157e
    4924:	00021585 	.word	0x00021585
    4928:	000215a2 	.word	0x000215a2
    492c:	000215bc 	.word	0x000215bc
    4930:	20002d74 	.word	0x20002d74
    4934:	000215e8 	.word	0x000215e8
    4938:	20002d75 	.word	0x20002d75
    493c:	000215fa 	.word	0x000215fa
    4940:	20000d10 	.word	0x20000d10
    4944:	00021624 	.word	0x00021624
    4948:	0002164a 	.word	0x0002164a
    494c:	00021656 	.word	0x00021656
    4950:	00021697 	.word	0x00021697
    4954:	0002167f 	.word	0x0002167f
    4958:	00021663 	.word	0x00021663

0000495c <scan_cb>:
*@param - data buffer
**/
static void scan_cb(const bt_addr_le_t *addr, int8_t rssi, uint8_t adv_type,
		    struct net_buf_simple *buf)

{	
    495c:	b5f0      	push	{r4, r5, r6, r7, lr}
    495e:	461c      	mov	r4, r3
	// dongle 1 address 
	uint8_t donglead[6] = {0x92,0xCA,0x3F,0x32,0xC0,0xE3};
    4960:	4b4f      	ldr	r3, [pc, #316]	; (4aa0 <scan_cb+0x144>)
{	
    4962:	b085      	sub	sp, #20
    4964:	4602      	mov	r2, r0
	uint8_t donglead[6] = {0x92,0xCA,0x3F,0x32,0xC0,0xE3};
    4966:	6818      	ldr	r0, [r3, #0]
    4968:	889b      	ldrh	r3, [r3, #4]
    496a:	f8ad 3004 	strh.w	r3, [sp, #4]
	// dongle 2 address
	uint8_t donglead2[6] = {0x39,0x5F,0x44,0x7E,0x1A,0xD8};
    496e:	4b4d      	ldr	r3, [pc, #308]	; (4aa4 <scan_cb+0x148>)
	uint8_t donglead[6] = {0x92,0xCA,0x3F,0x32,0xC0,0xE3};
    4970:	9000      	str	r0, [sp, #0]
	uint8_t donglead2[6] = {0x39,0x5F,0x44,0x7E,0x1A,0xD8};
    4972:	6818      	ldr	r0, [r3, #0]
    4974:	889b      	ldrh	r3, [r3, #4]
    4976:	f8ad 300c 	strh.w	r3, [sp, #12]
	//counter to check for connection
	int counter = 0;
	for(int i = 0; i < 6; i++) {
    497a:	1c53      	adds	r3, r2, #1
	uint8_t donglead2[6] = {0x39,0x5F,0x44,0x7E,0x1A,0xD8};
    497c:	9002      	str	r0, [sp, #8]
    497e:	466d      	mov	r5, sp
    4980:	3207      	adds	r2, #7
    4982:	4618      	mov	r0, r3
	int counter = 0;
    4984:	2100      	movs	r1, #0
		if(addr->a.val[i] == donglead[i]) {
    4986:	f810 7b01 	ldrb.w	r7, [r0], #1
    498a:	f815 6b01 	ldrb.w	r6, [r5], #1
    498e:	42b7      	cmp	r7, r6
			counter++;
    4990:	bf08      	it	eq
    4992:	3101      	addeq	r1, #1
	for(int i = 0; i < 6; i++) {
    4994:	4282      	cmp	r2, r0
    4996:	d1f6      	bne.n	4986 <scan_cb+0x2a>
		}
	}
	// counter is 6 means there was a device ID match
	if(counter == 6) {
    4998:	2906      	cmp	r1, #6
		found = true;
    499a:	bf02      	ittt	eq
    499c:	4942      	ldreq	r1, [pc, #264]	; (4aa8 <scan_cb+0x14c>)
    499e:	2001      	moveq	r0, #1
    49a0:	7008      	strbeq	r0, [r1, #0]
	}
	counter = 0;

	for(int i = 0; i < 6; i++) {
    49a2:	a802      	add	r0, sp, #8
	counter = 0;
    49a4:	2100      	movs	r1, #0
		if(addr->a.val[i] == donglead2[i]) {
    49a6:	f813 6b01 	ldrb.w	r6, [r3], #1
    49aa:	f810 5b01 	ldrb.w	r5, [r0], #1
    49ae:	42ae      	cmp	r6, r5
		counter++;
    49b0:	bf08      	it	eq
    49b2:	3101      	addeq	r1, #1
	for(int i = 0; i < 6; i++) {
    49b4:	4293      	cmp	r3, r2
    49b6:	d1f6      	bne.n	49a6 <scan_cb+0x4a>
		}
	}
	if(counter == 6) {
    49b8:	2906      	cmp	r1, #6
    49ba:	4e3b      	ldr	r6, [pc, #236]	; (4aa8 <scan_cb+0x14c>)
    49bc:	d139      	bne.n	4a32 <scan_cb+0xd6>
		found = true;
    49be:	2301      	movs	r3, #1
    49c0:	7033      	strb	r3, [r6, #0]
	}
	counter = 0;

	// check if any IO/sensor data was requested
	if(found) {
		if(buf -> data[sensorId] == 0x01) {
    49c2:	6822      	ldr	r2, [r4, #0]
    49c4:	79d3      	ldrb	r3, [r2, #7]
    49c6:	2b01      	cmp	r3, #1
    49c8:	d13c      	bne.n	4a44 <scan_cb+0xe8>
			loadTemp = true;
    49ca:	4a38      	ldr	r2, [pc, #224]	; (4aac <scan_cb+0x150>)
    49cc:	7013      	strb	r3, [r2, #0]
			ledRGB = true;
			redVal = buf -> data[sensorId+1];
			greenVal = buf -> data[sensorId+2];
			blueVal = buf -> data[sensorId+3];
		}
		if(buf -> data[sensorId] == 0x09) {
    49ce:	6823      	ldr	r3, [r4, #0]
    49d0:	79da      	ldrb	r2, [r3, #7]
    49d2:	2a09      	cmp	r2, #9
    49d4:	d109      	bne.n	49ea <scan_cb+0x8e>
			buzz = true;
    49d6:	4a36      	ldr	r2, [pc, #216]	; (4ab0 <scan_cb+0x154>)
    49d8:	2101      	movs	r1, #1
    49da:	7011      	strb	r1, [r2, #0]
			buzzFH = buf -> data[sensorId + 1];
    49dc:	7a1a      	ldrb	r2, [r3, #8]
    49de:	4b35      	ldr	r3, [pc, #212]	; (4ab4 <scan_cb+0x158>)
    49e0:	701a      	strb	r2, [r3, #0]
			buzzFL = buf -> data[sensorId + 2];
    49e2:	6823      	ldr	r3, [r4, #0]
    49e4:	7a5a      	ldrb	r2, [r3, #9]
    49e6:	4b34      	ldr	r3, [pc, #208]	; (4ab8 <scan_cb+0x15c>)
    49e8:	701a      	strb	r2, [r3, #0]
		}
		if(buf -> data[sensorId] == 0xEE) {
    49ea:	6825      	ldr	r5, [r4, #0]
    49ec:	79eb      	ldrb	r3, [r5, #7]
    49ee:	2bee      	cmp	r3, #238	; 0xee
    49f0:	d108      	bne.n	4a04 <scan_cb+0xa8>
			retDC = true;
    49f2:	4b32      	ldr	r3, [pc, #200]	; (4abc <scan_cb+0x160>)
			dutyVal = buf -> data[sensorId + 1];
    49f4:	7a28      	ldrb	r0, [r5, #8]
			retDC = true;
    49f6:	2201      	movs	r2, #1
    49f8:	701a      	strb	r2, [r3, #0]
			dutyVal = buf -> data[sensorId + 1];
    49fa:	f7fb fcb3 	bl	364 <__aeabi_ui2d>
    49fe:	4b30      	ldr	r3, [pc, #192]	; (4ac0 <scan_cb+0x164>)
    4a00:	e9c3 0100 	strd	r0, r1, [r3]
		}
		if(buf -> data[sensorId] == 0xDD) {
    4a04:	79eb      	ldrb	r3, [r5, #7]
    4a06:	2bdd      	cmp	r3, #221	; 0xdd
    4a08:	d109      	bne.n	4a1e <scan_cb+0xc2>
			retSample = true;
    4a0a:	4b2e      	ldr	r3, [pc, #184]	; (4ac4 <scan_cb+0x168>)
    4a0c:	2201      	movs	r2, #1
    4a0e:	701a      	strb	r2, [r3, #0]
			sampleH = buf -> data[sensorId + 1];
    4a10:	4b2d      	ldr	r3, [pc, #180]	; (4ac8 <scan_cb+0x16c>)
    4a12:	7a2a      	ldrb	r2, [r5, #8]
    4a14:	701a      	strb	r2, [r3, #0]
			sampleL = buf -> data[sensorId + 2];
    4a16:	6823      	ldr	r3, [r4, #0]
    4a18:	7a5a      	ldrb	r2, [r3, #9]
    4a1a:	4b2c      	ldr	r3, [pc, #176]	; (4acc <scan_cb+0x170>)
    4a1c:	701a      	strb	r2, [r3, #0]
		}
		if(buf -> data[sensorId] == 0xFF) {
    4a1e:	6823      	ldr	r3, [r4, #0]
    4a20:	79db      	ldrb	r3, [r3, #7]
    4a22:	2bff      	cmp	r3, #255	; 0xff
			loadAll = true;
    4a24:	bf02      	ittt	eq
    4a26:	4b2a      	ldreq	r3, [pc, #168]	; (4ad0 <scan_cb+0x174>)
    4a28:	2201      	moveq	r2, #1
    4a2a:	701a      	strbeq	r2, [r3, #0]
		}
		found = false;
    4a2c:	2300      	movs	r3, #0
    4a2e:	7033      	strb	r3, [r6, #0]
    4a30:	e002      	b.n	4a38 <scan_cb+0xdc>
	if(found) {
    4a32:	7833      	ldrb	r3, [r6, #0]
    4a34:	2b00      	cmp	r3, #0
    4a36:	d1c4      	bne.n	49c2 <scan_cb+0x66>
	}
	mfg_data[2]++;
    4a38:	4a26      	ldr	r2, [pc, #152]	; (4ad4 <scan_cb+0x178>)
    4a3a:	7893      	ldrb	r3, [r2, #2]
    4a3c:	3301      	adds	r3, #1
    4a3e:	7093      	strb	r3, [r2, #2]
}
    4a40:	b005      	add	sp, #20
    4a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(buf -> data[sensorId] == 0x02) {
    4a44:	2b02      	cmp	r3, #2
    4a46:	d01b      	beq.n	4a80 <scan_cb+0x124>
		if(buf -> data[sensorId] == 0x03) {
    4a48:	2b03      	cmp	r3, #3
    4a4a:	d01d      	beq.n	4a88 <scan_cb+0x12c>
		if(buf -> data[sensorId] == 0x04) {
    4a4c:	2b04      	cmp	r3, #4
    4a4e:	d01d      	beq.n	4a8c <scan_cb+0x130>
		if(buf -> data[sensorId] == 0x05) {
    4a50:	2b05      	cmp	r3, #5
    4a52:	d01d      	beq.n	4a90 <scan_cb+0x134>
		if(buf -> data[sensorId] == 0x06) {
    4a54:	2b06      	cmp	r3, #6
    4a56:	d01d      	beq.n	4a94 <scan_cb+0x138>
		if(buf -> data[sensorId] == 0x07) {
    4a58:	2b07      	cmp	r3, #7
    4a5a:	d01d      	beq.n	4a98 <scan_cb+0x13c>
		if(buf -> data[sensorId] == 0x0A) {
    4a5c:	2b0a      	cmp	r3, #10
    4a5e:	d01d      	beq.n	4a9c <scan_cb+0x140>
		if(buf -> data[sensorId] == 0x08) {
    4a60:	2b08      	cmp	r3, #8
    4a62:	d1b4      	bne.n	49ce <scan_cb+0x72>
			ledRGB = true;
    4a64:	4b1c      	ldr	r3, [pc, #112]	; (4ad8 <scan_cb+0x17c>)
			redVal = buf -> data[sensorId+1];
    4a66:	7a12      	ldrb	r2, [r2, #8]
			ledRGB = true;
    4a68:	2101      	movs	r1, #1
    4a6a:	7019      	strb	r1, [r3, #0]
			redVal = buf -> data[sensorId+1];
    4a6c:	4b1b      	ldr	r3, [pc, #108]	; (4adc <scan_cb+0x180>)
    4a6e:	701a      	strb	r2, [r3, #0]
			greenVal = buf -> data[sensorId+2];
    4a70:	6823      	ldr	r3, [r4, #0]
    4a72:	7a5a      	ldrb	r2, [r3, #9]
    4a74:	4b1a      	ldr	r3, [pc, #104]	; (4ae0 <scan_cb+0x184>)
    4a76:	701a      	strb	r2, [r3, #0]
			blueVal = buf -> data[sensorId+3];
    4a78:	6823      	ldr	r3, [r4, #0]
    4a7a:	7a9a      	ldrb	r2, [r3, #10]
    4a7c:	4b19      	ldr	r3, [pc, #100]	; (4ae4 <scan_cb+0x188>)
    4a7e:	e001      	b.n	4a84 <scan_cb+0x128>
			loadHum = true;
    4a80:	4b19      	ldr	r3, [pc, #100]	; (4ae8 <scan_cb+0x18c>)
			loadBut = true;
    4a82:	2201      	movs	r2, #1
			blueVal = buf -> data[sensorId+3];
    4a84:	701a      	strb	r2, [r3, #0]
    4a86:	e7a2      	b.n	49ce <scan_cb+0x72>
			loadAp = true;
    4a88:	4b18      	ldr	r3, [pc, #96]	; (4aec <scan_cb+0x190>)
    4a8a:	e7fa      	b.n	4a82 <scan_cb+0x126>
			loadVoc = true;
    4a8c:	4b18      	ldr	r3, [pc, #96]	; (4af0 <scan_cb+0x194>)
    4a8e:	e7f8      	b.n	4a82 <scan_cb+0x126>
			loadX = true;
    4a90:	4b18      	ldr	r3, [pc, #96]	; (4af4 <scan_cb+0x198>)
    4a92:	e7f6      	b.n	4a82 <scan_cb+0x126>
			loadY = true;
    4a94:	4b18      	ldr	r3, [pc, #96]	; (4af8 <scan_cb+0x19c>)
    4a96:	e7f4      	b.n	4a82 <scan_cb+0x126>
			loadZ = true;
    4a98:	4b18      	ldr	r3, [pc, #96]	; (4afc <scan_cb+0x1a0>)
    4a9a:	e7f2      	b.n	4a82 <scan_cb+0x126>
			loadBut = true;
    4a9c:	4b18      	ldr	r3, [pc, #96]	; (4b00 <scan_cb+0x1a4>)
    4a9e:	e7f0      	b.n	4a82 <scan_cb+0x126>
    4aa0:	000216ab 	.word	0x000216ab
    4aa4:	000216b2 	.word	0x000216b2
    4aa8:	20002d9d 	.word	0x20002d9d
    4aac:	20002da4 	.word	0x20002da4
    4ab0:	20002d86 	.word	0x20002d86
    4ab4:	20002d87 	.word	0x20002d87
    4ab8:	20002d88 	.word	0x20002d88
    4abc:	20002daa 	.word	0x20002daa
    4ac0:	200000c8 	.word	0x200000c8
    4ac4:	20002dab 	.word	0x20002dab
    4ac8:	20002dac 	.word	0x20002dac
    4acc:	20002dad 	.word	0x20002dad
    4ad0:	20002da0 	.word	0x20002da0
    4ad4:	200008dc 	.word	0x200008dc
    4ad8:	20002d9f 	.word	0x20002d9f
    4adc:	20002da9 	.word	0x20002da9
    4ae0:	20002d9e 	.word	0x20002d9e
    4ae4:	20002d85 	.word	0x20002d85
    4ae8:	20002da3 	.word	0x20002da3
    4aec:	20002da1 	.word	0x20002da1
    4af0:	20002da5 	.word	0x20002da5
    4af4:	20002da6 	.word	0x20002da6
    4af8:	20002da7 	.word	0x20002da7
    4afc:	20002da8 	.word	0x20002da8
    4b00:	20002da2 	.word	0x20002da2

00004b04 <load>:
void load(double sensorData1[],int start,int len) {
    4b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			data[i] = (uint8_t)sensorData1[c];
    4b08:	4f0a      	ldr	r7, [pc, #40]	; (4b34 <load+0x30>)
    4b0a:	f1a0 0508 	sub.w	r5, r0, #8
	for(int i = start; i < start + len; i++) {
    4b0e:	460c      	mov	r4, r1
    4b10:	188e      	adds	r6, r1, r2
    4b12:	42a6      	cmp	r6, r4
    4b14:	dc07      	bgt.n	4b26 <load+0x22>
	bt_le_adv_update_data(ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    4b16:	2301      	movs	r3, #1
}
    4b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_le_adv_update_data(ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    4b1c:	4a06      	ldr	r2, [pc, #24]	; (4b38 <load+0x34>)
    4b1e:	4807      	ldr	r0, [pc, #28]	; (4b3c <load+0x38>)
    4b20:	4619      	mov	r1, r3
    4b22:	f003 b8d9 	b.w	7cd8 <bt_le_adv_update_data>
			data[i] = (uint8_t)sensorData1[c];
    4b26:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
    4b2a:	f7fb ff2f 	bl	98c <__aeabi_d2uiz>
    4b2e:	5538      	strb	r0, [r7, r4]
	for(int i = start; i < start + len; i++) {
    4b30:	3401      	adds	r4, #1
    4b32:	e7ee      	b.n	4b12 <load+0xe>
    4b34:	20002d89 	.word	0x20002d89
    4b38:	00020068 	.word	0x00020068
    4b3c:	20000250 	.word	0x20000250

00004b40 <ble_adv>:
{
    4b40:	b570      	push	{r4, r5, r6, lr}
    bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY, \
    4b42:	4d25      	ldr	r5, [pc, #148]	; (4bd8 <ble_adv+0x98>)
{
    4b44:	b09a      	sub	sp, #104	; 0x68
	bt_addr_le_t addr = {0};
    4b46:	2300      	movs	r3, #0
    4b48:	9308      	str	r3, [sp, #32]
    4b4a:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY, \
    4b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4b50:	ac0d      	add	r4, sp, #52	; 0x34
    4b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	size_t count = 1;
    4b54:	2601      	movs	r6, #1
    bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY, \
    4b56:	682b      	ldr	r3, [r5, #0]
    4b58:	6023      	str	r3, [r4, #0]
    4b5a:	4920      	ldr	r1, [pc, #128]	; (4bdc <ble_adv+0x9c>)
    4b5c:	4b20      	ldr	r3, [pc, #128]	; (4be0 <ble_adv+0xa0>)
    4b5e:	9600      	str	r6, [sp, #0]
    4b60:	4632      	mov	r2, r6
    4b62:	a80d      	add	r0, sp, #52	; 0x34
	size_t count = 1;
    4b64:	9607      	str	r6, [sp, #28]
    bt_le_adv_start(BT_LE_ADV_PARAM(BT_LE_ADV_OPT_USE_IDENTITY, \
    4b66:	f003 f9df 	bl	7f28 <bt_le_adv_start>
	bt_id_get(&addr, &count);
    4b6a:	a907      	add	r1, sp, #28
    4b6c:	a808      	add	r0, sp, #32
    4b6e:	f002 febb 	bl	78e8 <bt_id_get>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4b72:	f89d 3020 	ldrb.w	r3, [sp, #32]
    4b76:	ac0a      	add	r4, sp, #40	; 0x28
    4b78:	2b03      	cmp	r3, #3
    4b7a:	d826      	bhi.n	4bca <ble_adv+0x8a>
    4b7c:	e8df f003 	tbb	[pc, r3]
    4b80:	23211f02 	.word	0x23211f02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4b84:	4917      	ldr	r1, [pc, #92]	; (4be4 <ble_adv+0xa4>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    4b86:	4620      	mov	r0, r4
    4b88:	f017 f898 	bl	1bcbc <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4b8c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    4b90:	9304      	str	r3, [sp, #16]
    4b92:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4b96:	9303      	str	r3, [sp, #12]
    4b98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    4b9c:	9302      	str	r3, [sp, #8]
    4b9e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    4ba2:	9301      	str	r3, [sp, #4]
    4ba4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    4ba8:	9300      	str	r3, [sp, #0]
    4baa:	4a0f      	ldr	r2, [pc, #60]	; (4be8 <ble_adv+0xa8>)
    4bac:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    4bb0:	9405      	str	r4, [sp, #20]
    4bb2:	211e      	movs	r1, #30
    4bb4:	a812      	add	r0, sp, #72	; 0x48
    4bb6:	f016 fa8b 	bl	1b0d0 <snprintk>
}
    4bba:	b01a      	add	sp, #104	; 0x68
    4bbc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    4bbe:	490b      	ldr	r1, [pc, #44]	; (4bec <ble_adv+0xac>)
    4bc0:	e7e1      	b.n	4b86 <ble_adv+0x46>
		strcpy(type, "public-id");
    4bc2:	490b      	ldr	r1, [pc, #44]	; (4bf0 <ble_adv+0xb0>)
    4bc4:	e7df      	b.n	4b86 <ble_adv+0x46>
		strcpy(type, "random-id");
    4bc6:	490b      	ldr	r1, [pc, #44]	; (4bf4 <ble_adv+0xb4>)
    4bc8:	e7dd      	b.n	4b86 <ble_adv+0x46>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4bca:	4a0b      	ldr	r2, [pc, #44]	; (4bf8 <ble_adv+0xb8>)
    4bcc:	210a      	movs	r1, #10
    4bce:	4620      	mov	r0, r4
    4bd0:	f016 fa7e 	bl	1b0d0 <snprintk>
		break;
    4bd4:	e7da      	b.n	4b8c <ble_adv+0x4c>
    4bd6:	bf00      	nop
    4bd8:	00020000 	.word	0x00020000
    4bdc:	20000250 	.word	0x20000250
    4be0:	00020068 	.word	0x00020068
    4be4:	000216b9 	.word	0x000216b9
    4be8:	000216e2 	.word	0x000216e2
    4bec:	000216c0 	.word	0x000216c0
    4bf0:	000216c7 	.word	0x000216c7
    4bf4:	000216d1 	.word	0x000216d1
    4bf8:	000216db 	.word	0x000216db

00004bfc <scanner_init>:

/**
*initalise scanning
**/
void scanner_init(void) {
	 bt_le_scan_start(&scan_param, scan_cb);
    4bfc:	4901      	ldr	r1, [pc, #4]	; (4c04 <scanner_init+0x8>)
    4bfe:	4802      	ldr	r0, [pc, #8]	; (4c08 <scanner_init+0xc>)
    4c00:	f003 bbae 	b.w	8360 <bt_le_scan_start>
    4c04:	0000495d 	.word	0x0000495d
    4c08:	20000258 	.word	0x20000258

00004c0c <button_pressed>:
*@param pins - which pins are high
**/
void button_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   pressed= !pressed;
    4c0c:	4a06      	ldr	r2, [pc, #24]	; (4c28 <button_pressed+0x1c>)
{
    4c0e:	b508      	push	{r3, lr}
   pressed= !pressed;
    4c10:	7813      	ldrb	r3, [r2, #0]
    4c12:	f083 0301 	eor.w	r3, r3, #1
    4c16:	7013      	strb	r3, [r2, #0]
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    4c18:	f01a f958 	bl	1eecc <sys_clock_cycle_get_32>
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
    4c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4c20:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
    4c22:	4802      	ldr	r0, [pc, #8]	; (4c2c <button_pressed+0x20>)
    4c24:	f016 ba47 	b.w	1b0b6 <printk>
    4c28:	20002dae 	.word	0x20002dae
    4c2c:	0002170d 	.word	0x0002170d

00004c30 <button_init>:

/**
*functions that initialises the button
**/
void button_init(void)
{
    4c30:	b570      	push	{r4, r5, r6, lr}
    4c32:	4c24      	ldr	r4, [pc, #144]	; (4cc4 <button_init+0x94>)
    4c34:	4620      	mov	r0, r4
    4c36:	f01a fa3a 	bl	1f0ae <z_device_is_ready>
	int ret;

	if (!device_is_ready(button.port)) {
    4c3a:	b928      	cbnz	r0, 4c48 <button_init+0x18>
		printk("Error: button device %s is not ready\n",
    4c3c:	6821      	ldr	r1, [r4, #0]
    4c3e:	4822      	ldr	r0, [pc, #136]	; (4cc8 <button_init+0x98>)
	}

	gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));
	gpio_add_callback(button.port, &button_cb_data);
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
}
    4c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Error: button device %s is not ready\n",
    4c44:	f016 ba37 	b.w	1b0b6 <printk>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    4c48:	6926      	ldr	r6, [r4, #16]
	const struct gpio_driver_api *api =
    4c4a:	68a5      	ldr	r5, [r4, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4c4c:	6833      	ldr	r3, [r6, #0]
    4c4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    4c52:	6033      	str	r3, [r6, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    4c54:	210b      	movs	r1, #11
    4c56:	682b      	ldr	r3, [r5, #0]
    4c58:	f240 1211 	movw	r2, #273	; 0x111
    4c5c:	4620      	mov	r0, r4
    4c5e:	4798      	blx	r3
	if (ret != 0) {
    4c60:	4601      	mov	r1, r0
    4c62:	b130      	cbz	r0, 4c72 <button_init+0x42>
		printk("Error %d: failed to configure %s pin %d\n",
    4c64:	6822      	ldr	r2, [r4, #0]
    4c66:	4819      	ldr	r0, [pc, #100]	; (4ccc <button_init+0x9c>)
    4c68:	230b      	movs	r3, #11
}
    4c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    4c6e:	f016 ba22 	b.w	1b0b6 <printk>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    4c72:	6833      	ldr	r3, [r6, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    4c74:	69ae      	ldr	r6, [r5, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    4c76:	f413 6f00 	tst.w	r3, #2048	; 0x800
	return api->pin_interrupt_configure(port, pin, mode, trig);
    4c7a:	f04f 010b 	mov.w	r1, #11
    4c7e:	bf0c      	ite	eq
    4c80:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    4c84:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    4c88:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    4c8c:	4620      	mov	r0, r4
    4c8e:	47b0      	blx	r6
    4c90:	6826      	ldr	r6, [r4, #0]
	if (ret != 0) {
    4c92:	4601      	mov	r1, r0
    4c94:	b118      	cbz	r0, 4c9e <button_init+0x6e>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    4c96:	480e      	ldr	r0, [pc, #56]	; (4cd0 <button_init+0xa0>)
    4c98:	230b      	movs	r3, #11
    4c9a:	4632      	mov	r2, r6
    4c9c:	e7e5      	b.n	4c6a <button_init+0x3a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    4c9e:	490d      	ldr	r1, [pc, #52]	; (4cd4 <button_init+0xa4>)
    4ca0:	4b0d      	ldr	r3, [pc, #52]	; (4cd8 <button_init+0xa8>)
    4ca2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    4ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    4ca8:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    4caa:	69eb      	ldr	r3, [r5, #28]
    4cac:	b113      	cbz	r3, 4cb4 <button_init+0x84>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    4cae:	2201      	movs	r2, #1
    4cb0:	4620      	mov	r0, r4
    4cb2:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
    4cb4:	4631      	mov	r1, r6
    4cb6:	4809      	ldr	r0, [pc, #36]	; (4cdc <button_init+0xac>)
}
    4cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
    4cbc:	220b      	movs	r2, #11
    4cbe:	f016 b9fa 	b.w	1b0b6 <printk>
    4cc2:	bf00      	nop
    4cc4:	0001fc28 	.word	0x0001fc28
    4cc8:	00021723 	.word	0x00021723
    4ccc:	00021749 	.word	0x00021749
    4cd0:	00021772 	.word	0x00021772
    4cd4:	2000177c 	.word	0x2000177c
    4cd8:	00004c0d 	.word	0x00004c0d
    4cdc:	000217a8 	.word	0x000217a8

00004ce0 <led_red>:
static const struct gpio_dt_spec led2 = GPIO_DT_SPEC_GET(LED2_NODE, gpios);

/**
*function that sets or resets the red led
**/
void led_red(int i ) {
    4ce0:	4601      	mov	r1, r0
    gpio_pin_set_dt(&led,i);
    4ce2:	4801      	ldr	r0, [pc, #4]	; (4ce8 <led_red+0x8>)
    4ce4:	f016 b991 	b.w	1b00a <gpio_pin_set_dt.isra.0>
    4ce8:	00020070 	.word	0x00020070

00004cec <led_green>:
}

/**
*function that sets or resets the green led
**/
void led_green(int i) {
    4cec:	4601      	mov	r1, r0
    gpio_pin_set_dt(&led1,i);
    4cee:	4801      	ldr	r0, [pc, #4]	; (4cf4 <led_green+0x8>)
    4cf0:	f016 b98b 	b.w	1b00a <gpio_pin_set_dt.isra.0>
    4cf4:	00020078 	.word	0x00020078

00004cf8 <led_blue>:
}

/**
*function that sets or resets the blue led
**/
void led_blue(int i) {
    4cf8:	4601      	mov	r1, r0
    gpio_pin_set_dt(&led2,i);
    4cfa:	4801      	ldr	r0, [pc, #4]	; (4d00 <led_blue+0x8>)
    4cfc:	f016 b985 	b.w	1b00a <gpio_pin_set_dt.isra.0>
    4d00:	00020080 	.word	0x00020080

00004d04 <led_init>:
}

/**
*function which initalises the led ports
**/
void led_init(void) {
    4d04:	b508      	push	{r3, lr}
    4d06:	4813      	ldr	r0, [pc, #76]	; (4d54 <led_init+0x50>)
    4d08:	f01a f9d1 	bl	1f0ae <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
    4d0c:	b300      	cbz	r0, 4d50 <led_init+0x4c>
    4d0e:	4811      	ldr	r0, [pc, #68]	; (4d54 <led_init+0x50>)
    4d10:	f01a f9cd 	bl	1f0ae <z_device_is_ready>
		return;
	}
    if (!device_is_ready(led1.port)) {
    4d14:	b1e0      	cbz	r0, 4d50 <led_init+0x4c>
    4d16:	480f      	ldr	r0, [pc, #60]	; (4d54 <led_init+0x50>)
    4d18:	f01a f9c9 	bl	1f0ae <z_device_is_ready>
	    return;
	}
    if (!device_is_ready(led2.port)) {
    4d1c:	b1c0      	cbz	r0, 4d50 <led_init+0x4c>
		return;
	}
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
    4d1e:	480e      	ldr	r0, [pc, #56]	; (4d58 <led_init+0x54>)
    4d20:	f016 f959 	bl	1afd6 <gpio_pin_configure_dt.constprop.0>
    ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
    4d24:	480d      	ldr	r0, [pc, #52]	; (4d5c <led_init+0x58>)
    4d26:	f016 f956 	bl	1afd6 <gpio_pin_configure_dt.constprop.0>
    ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
    4d2a:	480d      	ldr	r0, [pc, #52]	; (4d60 <led_init+0x5c>)
    4d2c:	f016 f953 	bl	1afd6 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) {
    4d30:	2800      	cmp	r0, #0
    4d32:	db0d      	blt.n	4d50 <led_init+0x4c>
		return;
	}
    gpio_pin_set_dt(&led,0);
    4d34:	4808      	ldr	r0, [pc, #32]	; (4d58 <led_init+0x54>)
    4d36:	2100      	movs	r1, #0
    4d38:	f016 f967 	bl	1b00a <gpio_pin_set_dt.isra.0>
    gpio_pin_set_dt(&led1,0);
    4d3c:	4807      	ldr	r0, [pc, #28]	; (4d5c <led_init+0x58>)
    4d3e:	2100      	movs	r1, #0
    4d40:	f016 f963 	bl	1b00a <gpio_pin_set_dt.isra.0>
    gpio_pin_set_dt(&led2,0);
    4d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpio_pin_set_dt(&led2,0);
    4d48:	4805      	ldr	r0, [pc, #20]	; (4d60 <led_init+0x5c>)
    4d4a:	2100      	movs	r1, #0
    4d4c:	f016 b95d 	b.w	1b00a <gpio_pin_set_dt.isra.0>
    4d50:	bd08      	pop	{r3, pc}
    4d52:	bf00      	nop
    4d54:	0001fcd0 	.word	0x0001fcd0
    4d58:	00020070 	.word	0x00020070
    4d5c:	00020078 	.word	0x00020078
    4d60:	00020080 	.word	0x00020080

00004d64 <pwm_pin_set_usec.constprop.0.isra.0>:
 * @param flags Flags for pin configuration (polarity).
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(const struct device *dev, uint32_t pwm,
    4d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d68:	4605      	mov	r5, r0
    4d6a:	b087      	sub	sp, #28
    4d6c:	460f      	mov	r7, r1
    4d6e:	4616      	mov	r6, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
    4d70:	6883      	ldr	r3, [r0, #8]
    4d72:	aa04      	add	r2, sp, #16
    4d74:	685b      	ldr	r3, [r3, #4]
    4d76:	211b      	movs	r1, #27
    4d78:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
    4d7a:	9003      	str	r0, [sp, #12]
    4d7c:	bb58      	cbnz	r0, 4dd6 <pwm_pin_set_usec.constprop.0.isra.0+0x72>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    4d7e:	e9dd 4a04 	ldrd	r4, sl, [sp, #16]
    4d82:	fba7 b104 	umull	fp, r1, r7, r4
    4d86:	fb07 170a 	mla	r7, r7, sl, r1
    4d8a:	2300      	movs	r3, #0
    4d8c:	4658      	mov	r0, fp
    4d8e:	4a13      	ldr	r2, [pc, #76]	; (4ddc <pwm_pin_set_usec.constprop.0.isra.0+0x78>)
    4d90:	4639      	mov	r1, r7
	if (period_cycles >= ((uint64_t)1 << 32)) {
    4d92:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    4d96:	f7fb feb9 	bl	b0c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
    4d9a:	45d9      	cmp	r9, fp
    4d9c:	f8df b040 	ldr.w	fp, [pc, #64]	; 4de0 <pwm_pin_set_usec.constprop.0.isra.0+0x7c>
    4da0:	eb7b 0307 	sbcs.w	r3, fp, r7
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    4da4:	4680      	mov	r8, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
    4da6:	d316      	bcc.n	4dd6 <pwm_pin_set_usec.constprop.0.isra.0+0x72>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    4da8:	fba6 7404 	umull	r7, r4, r6, r4
    4dac:	fb06 460a 	mla	r6, r6, sl, r4
    4db0:	4a0a      	ldr	r2, [pc, #40]	; (4ddc <pwm_pin_set_usec.constprop.0.isra.0+0x78>)
    4db2:	2300      	movs	r3, #0
    4db4:	4638      	mov	r0, r7
    4db6:	4631      	mov	r1, r6
    4db8:	f7fb fea8 	bl	b0c <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    4dbc:	45b9      	cmp	r9, r7
    4dbe:	eb7b 0206 	sbcs.w	r2, fp, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    4dc2:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    4dc4:	d307      	bcc.n	4dd6 <pwm_pin_set_usec.constprop.0.isra.0+0x72>
	return api->pin_set(dev, pwm, period, pulse, flags);
    4dc6:	68aa      	ldr	r2, [r5, #8]
    4dc8:	9903      	ldr	r1, [sp, #12]
    4dca:	9100      	str	r1, [sp, #0]
    4dcc:	6814      	ldr	r4, [r2, #0]
    4dce:	211b      	movs	r1, #27
    4dd0:	4642      	mov	r2, r8
    4dd2:	4628      	mov	r0, r5
    4dd4:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
				  (uint32_t)pulse_cycles, flags);
}
    4dd6:	b007      	add	sp, #28
    4dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ddc:	000f4240 	.word	0x000f4240
    4de0:	000f423f 	.word	0x000f423f

00004de4 <speaker_init>:
#include "scu_speaker.h"
static const struct device* speaker_power = DEVICE_DT_GET(SPK_PWR_NODE);
const struct device *pwm_dev;


void speaker_init(void) {
    4de4:	b510      	push	{r4, lr}
    4de6:	480e      	ldr	r0, [pc, #56]	; (4e20 <speaker_init+0x3c>)
    4de8:	f014 ff5e 	bl	19ca8 <z_impl_device_get_binding>
    pwm_dev = device_get_binding(DT_LABEL(DT_NODELABEL(pwm0)));
    4dec:	4b0d      	ldr	r3, [pc, #52]	; (4e24 <speaker_init+0x40>)
    4dee:	6018      	str	r0, [r3, #0]
    4df0:	f01a f95d 	bl	1f0ae <z_device_is_ready>

	if (!device_is_ready(pwm_dev)) {
    4df4:	b910      	cbnz	r0, 4dfc <speaker_init+0x18>
		printk("E");
    4df6:	480c      	ldr	r0, [pc, #48]	; (4e28 <speaker_init+0x44>)
    4df8:	f016 f95d 	bl	1b0b6 <printk>
    4dfc:	4c0b      	ldr	r4, [pc, #44]	; (4e2c <speaker_init+0x48>)
    4dfe:	4620      	mov	r0, r4
    4e00:	f01a f955 	bl	1f0ae <z_device_is_ready>
	}
	if (!device_is_ready(speaker_power)) {
    4e04:	b920      	cbnz	r0, 4e10 <speaker_init+0x2c>
		printk("Error");
		return;
	}
	regulator_enable(speaker_power, NULL);
}
    4e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Error");
    4e0a:	4809      	ldr	r0, [pc, #36]	; (4e30 <speaker_init+0x4c>)
    4e0c:	f016 b953 	b.w	1b0b6 <printk>
				   struct onoff_client *cli)
{
	const struct regulator_driver_api *api =
		(const struct regulator_driver_api *)reg->api;

	return api->enable(reg, cli);
    4e10:	68a3      	ldr	r3, [r4, #8]
    4e12:	4620      	mov	r0, r4
    4e14:	681b      	ldr	r3, [r3, #0]
}
    4e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e1a:	2100      	movs	r1, #0
    4e1c:	4718      	bx	r3
    4e1e:	bf00      	nop
    4e20:	000217c4 	.word	0x000217c4
    4e24:	20001788 	.word	0x20001788
    4e28:	000217ca 	.word	0x000217ca
    4e2c:	0001fd30 	.word	0x0001fd30
    4e30:	000217cc 	.word	0x000217cc

00004e34 <speaker_set>:

void speaker_set(int freq) {
    if(freq == 0) {
        pwm_pin_set_usec(pwm_dev, 0x1b, 0, 0, 0);
    4e34:	4b06      	ldr	r3, [pc, #24]	; (4e50 <speaker_set+0x1c>)
void speaker_set(int freq) {
    4e36:	4601      	mov	r1, r0
        pwm_pin_set_usec(pwm_dev, 0x1b, 0, 0, 0);
    4e38:	6818      	ldr	r0, [r3, #0]
    if(freq == 0) {
    4e3a:	b911      	cbnz	r1, 4e42 <speaker_set+0xe>
        pwm_pin_set_usec(pwm_dev, 0x1b, 0, 0, 0);
    4e3c:	460a      	mov	r2, r1
        return;
    }
    pwm_pin_set_usec(pwm_dev, 0x1b, USEC_PER_SEC/freq, ((USEC_PER_SEC/freq) / 2U), 0);
    4e3e:	f7ff bf91 	b.w	4d64 <pwm_pin_set_usec.constprop.0.isra.0>
    4e42:	4a04      	ldr	r2, [pc, #16]	; (4e54 <speaker_set+0x20>)
    4e44:	4b04      	ldr	r3, [pc, #16]	; (4e58 <speaker_set+0x24>)
    4e46:	fbb2 f2f1 	udiv	r2, r2, r1
    4e4a:	fbb3 f1f1 	udiv	r1, r3, r1
    4e4e:	e7f6      	b.n	4e3e <speaker_set+0xa>
    4e50:	20001788 	.word	0x20001788
    4e54:	0007a120 	.word	0x0007a120
    4e58:	000f4240 	.word	0x000f4240

00004e5c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4e5c:	680b      	ldr	r3, [r1, #0]
    4e5e:	3301      	adds	r3, #1
    4e60:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    4e62:	4b01      	ldr	r3, [pc, #4]	; (4e68 <char_out+0xc>)
    4e64:	681b      	ldr	r3, [r3, #0]
    4e66:	4718      	bx	r3
    4e68:	2000026c 	.word	0x2000026c

00004e6c <__printk_hook_install>:
	_char_out = fn;
    4e6c:	4b01      	ldr	r3, [pc, #4]	; (4e74 <__printk_hook_install+0x8>)
    4e6e:	6018      	str	r0, [r3, #0]
}
    4e70:	4770      	bx	lr
    4e72:	bf00      	nop
    4e74:	2000026c 	.word	0x2000026c

00004e78 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    4e78:	b507      	push	{r0, r1, r2, lr}
    4e7a:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    4e7c:	2100      	movs	r1, #0
{
    4e7e:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    4e80:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    4e82:	4803      	ldr	r0, [pc, #12]	; (4e90 <vprintk+0x18>)
    4e84:	a901      	add	r1, sp, #4
    4e86:	f000 f8f9 	bl	507c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    4e8a:	b003      	add	sp, #12
    4e8c:	f85d fb04 	ldr.w	pc, [sp], #4
    4e90:	00004e5d 	.word	0x00004e5d

00004e94 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4e94:	b530      	push	{r4, r5, lr}
    4e96:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4e98:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4e9c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4e9e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4ea0:	a901      	add	r1, sp, #4
    4ea2:	4805      	ldr	r0, [pc, #20]	; (4eb8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4ea4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    4ea6:	f000 f8e9 	bl	507c <cbvprintf>

	if (ctx.count < ctx.max) {
    4eaa:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4eae:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4eb0:	bfb8      	it	lt
    4eb2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4eb4:	b005      	add	sp, #20
    4eb6:	bd30      	pop	{r4, r5, pc}
    4eb8:	0001b091 	.word	0x0001b091

00004ebc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4ec0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4ec4:	f019 0808 	ands.w	r8, r9, #8
{
    4ec8:	4604      	mov	r4, r0
    4eca:	4693      	mov	fp, r2
	if (processing) {
    4ecc:	d00d      	beq.n	4eea <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4ece:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4ed0:	bf0c      	ite	eq
    4ed2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4ed6:	f049 0920 	orrne.w	r9, r9, #32
    4eda:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4ede:	f38b 8811 	msr	BASEPRI, fp
    4ee2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4eea:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4eee:	2902      	cmp	r1, #2
    4ef0:	d107      	bne.n	4f02 <process_event+0x46>
			evt = process_recheck(mgr);
    4ef2:	4620      	mov	r0, r4
    4ef4:	f016 f8f9 	bl	1b0ea <process_recheck>
		if (evt == EVT_NOP) {
    4ef8:	2800      	cmp	r0, #0
    4efa:	d0f0      	beq.n	4ede <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4efc:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4efe:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    4f00:	d14e      	bne.n	4fa0 <process_event+0xe4>
			res = mgr->last_res;
    4f02:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4f04:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4f06:	2f00      	cmp	r7, #0
    4f08:	da15      	bge.n	4f36 <process_event+0x7a>
		*clients = mgr->clients;
    4f0a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f0c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4f10:	e9c4 8800 	strd	r8, r8, [r4]
    4f14:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4f18:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4f1a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4f1c:	8b21      	ldrh	r1, [r4, #24]
    4f1e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4f22:	45ca      	cmp	sl, r9
    4f24:	d002      	beq.n	4f2c <process_event+0x70>
		if (do_monitors
    4f26:	68a3      	ldr	r3, [r4, #8]
    4f28:	2b00      	cmp	r3, #0
    4f2a:	d15a      	bne.n	4fe2 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    4f2c:	b90d      	cbnz	r5, 4f32 <process_event+0x76>
		    || (transit != NULL)) {
    4f2e:	2e00      	cmp	r6, #0
    4f30:	d071      	beq.n	5016 <process_event+0x15a>
    4f32:	2300      	movs	r3, #0
    4f34:	e056      	b.n	4fe4 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4f36:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4f3a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4f3c:	2a01      	cmp	r2, #1
    4f3e:	d81e      	bhi.n	4f7e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f40:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4f44:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4f46:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f48:	b289      	uxth	r1, r1
    4f4a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4f4e:	d10a      	bne.n	4f66 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4f50:	b13d      	cbz	r5, 4f62 <process_event+0xa6>
    4f52:	8b63      	ldrh	r3, [r4, #26]
    4f54:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    4f56:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    4f58:	3301      	adds	r3, #1
    4f5a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4f5c:	2a00      	cmp	r2, #0
    4f5e:	d1fa      	bne.n	4f56 <process_event+0x9a>
    4f60:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f62:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4f66:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4f68:	4620      	mov	r0, r4
    4f6a:	f016 f8be 	bl	1b0ea <process_recheck>
    4f6e:	4606      	mov	r6, r0
    4f70:	2800      	cmp	r0, #0
    4f72:	d0d3      	beq.n	4f1c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4f74:	8b23      	ldrh	r3, [r4, #24]
    4f76:	f043 0320 	orr.w	r3, r3, #32
    4f7a:	8323      	strh	r3, [r4, #24]
    4f7c:	e7cd      	b.n	4f1a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4f7e:	2b04      	cmp	r3, #4
    4f80:	d10c      	bne.n	4f9c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4f82:	f021 0107 	bic.w	r1, r1, #7
    4f86:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4f88:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4f8a:	4620      	mov	r0, r4
    4f8c:	f016 f8ad 	bl	1b0ea <process_recheck>
    4f90:	4605      	mov	r5, r0
    4f92:	2800      	cmp	r0, #0
    4f94:	d0c1      	beq.n	4f1a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4f96:	f041 0120 	orr.w	r1, r1, #32
    4f9a:	8321      	strh	r1, [r4, #24]
    4f9c:	2500      	movs	r5, #0
    4f9e:	e7bc      	b.n	4f1a <process_event+0x5e>
		} else if (evt == EVT_START) {
    4fa0:	2803      	cmp	r0, #3
    4fa2:	d109      	bne.n	4fb8 <process_event+0xfc>
			transit = mgr->transitions->start;
    4fa4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4fa6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4faa:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4fac:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4fb0:	8323      	strh	r3, [r4, #24]
}
    4fb2:	2500      	movs	r5, #0
		res = 0;
    4fb4:	462f      	mov	r7, r5
    4fb6:	e7b1      	b.n	4f1c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4fb8:	2804      	cmp	r0, #4
    4fba:	d106      	bne.n	4fca <process_event+0x10e>
			transit = mgr->transitions->stop;
    4fbc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4fbe:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    4fc2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4fc4:	f043 0304 	orr.w	r3, r3, #4
    4fc8:	e7f2      	b.n	4fb0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    4fca:	2805      	cmp	r0, #5
    4fcc:	d106      	bne.n	4fdc <process_event+0x120>
			transit = mgr->transitions->reset;
    4fce:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4fd0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    4fd4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4fd6:	f043 0305 	orr.w	r3, r3, #5
    4fda:	e7e9      	b.n	4fb0 <process_event+0xf4>
    4fdc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4fde:	462e      	mov	r6, r5
    4fe0:	e7e8      	b.n	4fb4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    4fe2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4fe4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4fe8:	8321      	strh	r1, [r4, #24]
    4fea:	f38b 8811 	msr	BASEPRI, fp
    4fee:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    4ff2:	b9fb      	cbnz	r3, 5034 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    4ff4:	bb85      	cbnz	r5, 5058 <process_event+0x19c>
			if (transit != NULL) {
    4ff6:	b116      	cbz	r6, 4ffe <process_event+0x142>
				transit(mgr, transition_complete);
    4ff8:	491f      	ldr	r1, [pc, #124]	; (5078 <process_event+0x1bc>)
    4ffa:	4620      	mov	r0, r4
    4ffc:	47b0      	blx	r6
	__asm__ volatile(
    4ffe:	f04f 0320 	mov.w	r3, #32
    5002:	f3ef 8b11 	mrs	fp, BASEPRI
    5006:	f383 8812 	msr	BASEPRI_MAX, r3
    500a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    500e:	8b23      	ldrh	r3, [r4, #24]
    5010:	f023 0308 	bic.w	r3, r3, #8
    5014:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    5016:	8b23      	ldrh	r3, [r4, #24]
    5018:	06da      	lsls	r2, r3, #27
    501a:	d525      	bpl.n	5068 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    501c:	f023 0310 	bic.w	r3, r3, #16
    5020:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    5022:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    5024:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    5028:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    502c:	2900      	cmp	r1, #0
    502e:	f47f af5e 	bne.w	4eee <process_event+0x32>
out:
    5032:	e754      	b.n	4ede <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    5034:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5036:	2900      	cmp	r1, #0
    5038:	d0dc      	beq.n	4ff4 <process_event+0x138>
	return node->next;
    503a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    503e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    5042:	463b      	mov	r3, r7
    5044:	4652      	mov	r2, sl
    5046:	4620      	mov	r0, r4
    5048:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    504a:	f1b9 0f00 	cmp.w	r9, #0
    504e:	d0d1      	beq.n	4ff4 <process_event+0x138>
    5050:	4649      	mov	r1, r9
    5052:	f8d9 9000 	ldr.w	r9, [r9]
    5056:	e7f2      	b.n	503e <process_event+0x182>
    5058:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    505a:	463b      	mov	r3, r7
    505c:	4652      	mov	r2, sl
    505e:	4620      	mov	r0, r4
    5060:	682d      	ldr	r5, [r5, #0]
    5062:	f016 f85e 	bl	1b122 <notify_one>
    5066:	e7c5      	b.n	4ff4 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    5068:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    506c:	bf1e      	ittt	ne
    506e:	f023 0320 	bicne.w	r3, r3, #32
    5072:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    5074:	2102      	movne	r1, #2
    5076:	e7d5      	b.n	5024 <process_event+0x168>
    5078:	0001b14f 	.word	0x0001b14f

0000507c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5080:	4681      	mov	r9, r0
    5082:	b09b      	sub	sp, #108	; 0x6c
    5084:	468a      	mov	sl, r1
    5086:	4615      	mov	r5, r2
    5088:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    508a:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    508c:	7828      	ldrb	r0, [r5, #0]
    508e:	b910      	cbnz	r0, 5096 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    5090:	4630      	mov	r0, r6
    5092:	f000 bdee 	b.w	5c72 <cbvprintf+0xbf6>
			OUTC(*fp++);
    5096:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    5098:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    509a:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    509c:	d006      	beq.n	50ac <cbvprintf+0x30>
			OUTC(*fp++);
    509e:	4651      	mov	r1, sl
			OUTC('%');
    50a0:	47c8      	blx	r9
    50a2:	2800      	cmp	r0, #0
    50a4:	f2c0 85e5 	blt.w	5c72 <cbvprintf+0xbf6>
    50a8:	3601      	adds	r6, #1
		if (bps == NULL) {
    50aa:	e24c      	b.n	5546 <cbvprintf+0x4ca>
		} state = {
    50ac:	2218      	movs	r2, #24
    50ae:	2100      	movs	r1, #0
    50b0:	a80c      	add	r0, sp, #48	; 0x30
    50b2:	f016 fe45 	bl	1bd40 <memset>
	if (*sp == '%') {
    50b6:	786b      	ldrb	r3, [r5, #1]
    50b8:	2b25      	cmp	r3, #37	; 0x25
    50ba:	d07c      	beq.n	51b6 <cbvprintf+0x13a>
    50bc:	2200      	movs	r2, #0
    50be:	1c68      	adds	r0, r5, #1
    50c0:	4696      	mov	lr, r2
    50c2:	4690      	mov	r8, r2
    50c4:	4694      	mov	ip, r2
    50c6:	4617      	mov	r7, r2
    50c8:	4601      	mov	r1, r0
		switch (*sp) {
    50ca:	f810 3b01 	ldrb.w	r3, [r0], #1
    50ce:	2b2b      	cmp	r3, #43	; 0x2b
    50d0:	f000 80a0 	beq.w	5214 <cbvprintf+0x198>
    50d4:	f200 8097 	bhi.w	5206 <cbvprintf+0x18a>
    50d8:	2b20      	cmp	r3, #32
    50da:	f000 809e 	beq.w	521a <cbvprintf+0x19e>
    50de:	2b23      	cmp	r3, #35	; 0x23
    50e0:	f000 809e 	beq.w	5220 <cbvprintf+0x1a4>
    50e4:	b12f      	cbz	r7, 50f2 <cbvprintf+0x76>
    50e6:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    50ea:	f040 0004 	orr.w	r0, r0, #4
    50ee:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    50f2:	f1bc 0f00 	cmp.w	ip, #0
    50f6:	d005      	beq.n	5104 <cbvprintf+0x88>
    50f8:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    50fc:	f040 0008 	orr.w	r0, r0, #8
    5100:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    5104:	f1b8 0f00 	cmp.w	r8, #0
    5108:	d005      	beq.n	5116 <cbvprintf+0x9a>
    510a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    510e:	f040 0010 	orr.w	r0, r0, #16
    5112:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    5116:	f1be 0f00 	cmp.w	lr, #0
    511a:	d005      	beq.n	5128 <cbvprintf+0xac>
    511c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5120:	f040 0020 	orr.w	r0, r0, #32
    5124:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    5128:	b12a      	cbz	r2, 5136 <cbvprintf+0xba>
    512a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    512e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5132:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    5136:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    513a:	f002 0044 	and.w	r0, r2, #68	; 0x44
    513e:	2844      	cmp	r0, #68	; 0x44
    5140:	d103      	bne.n	514a <cbvprintf+0xce>
		conv->flag_zero = false;
    5142:	f36f 1286 	bfc	r2, #6, #1
    5146:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    514a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    514e:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    5150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5154:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    5158:	d17e      	bne.n	5258 <cbvprintf+0x1dc>
		conv->width_star = true;
    515a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    515e:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    5162:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    5164:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    5168:	781a      	ldrb	r2, [r3, #0]
    516a:	2a2e      	cmp	r2, #46	; 0x2e
    516c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5170:	bf0c      	ite	eq
    5172:	2101      	moveq	r1, #1
    5174:	2100      	movne	r1, #0
    5176:	f361 0241 	bfi	r2, r1, #1, #1
    517a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    517e:	d177      	bne.n	5270 <cbvprintf+0x1f4>
	if (*sp == '*') {
    5180:	785a      	ldrb	r2, [r3, #1]
    5182:	2a2a      	cmp	r2, #42	; 0x2a
    5184:	d06d      	beq.n	5262 <cbvprintf+0x1e6>
	++sp;
    5186:	3301      	adds	r3, #1
	size_t val = 0;
    5188:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    518a:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    518e:	4618      	mov	r0, r3
    5190:	f810 2b01 	ldrb.w	r2, [r0], #1
    5194:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5198:	2f09      	cmp	r7, #9
    519a:	f240 80ab 	bls.w	52f4 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    519e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    51a2:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    51a4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    51a8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    51ac:	f361 0241 	bfi	r2, r1, #1, #1
    51b0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    51b4:	e05c      	b.n	5270 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    51b6:	1caa      	adds	r2, r5, #2
    51b8:	9202      	str	r2, [sp, #8]
    51ba:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    51be:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    51c2:	07df      	lsls	r7, r3, #31
    51c4:	f140 8173 	bpl.w	54ae <cbvprintf+0x432>
			width = va_arg(ap, int);
    51c8:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    51cc:	f1bb 0f00 	cmp.w	fp, #0
    51d0:	da07      	bge.n	51e2 <cbvprintf+0x166>
				conv->flag_dash = true;
    51d2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    51d6:	f042 0204 	orr.w	r2, r2, #4
    51da:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    51de:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    51e2:	0758      	lsls	r0, r3, #29
    51e4:	f140 816c 	bpl.w	54c0 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    51e8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    51ec:	f1b8 0f00 	cmp.w	r8, #0
    51f0:	f280 816b 	bge.w	54ca <cbvprintf+0x44e>
				conv->prec_present = false;
    51f4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    51f8:	f36f 0341 	bfc	r3, #1, #1
    51fc:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    5200:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5204:	e161      	b.n	54ca <cbvprintf+0x44e>
		switch (*sp) {
    5206:	2b2d      	cmp	r3, #45	; 0x2d
    5208:	d00d      	beq.n	5226 <cbvprintf+0x1aa>
    520a:	2b30      	cmp	r3, #48	; 0x30
    520c:	f47f af6a 	bne.w	50e4 <cbvprintf+0x68>
			conv->flag_zero = true;
    5210:	2201      	movs	r2, #1
	} while (loop);
    5212:	e759      	b.n	50c8 <cbvprintf+0x4c>
			conv->flag_plus = true;
    5214:	f04f 0c01 	mov.w	ip, #1
    5218:	e756      	b.n	50c8 <cbvprintf+0x4c>
			conv->flag_space = true;
    521a:	f04f 0801 	mov.w	r8, #1
    521e:	e753      	b.n	50c8 <cbvprintf+0x4c>
			conv->flag_hash = true;
    5220:	f04f 0e01 	mov.w	lr, #1
    5224:	e750      	b.n	50c8 <cbvprintf+0x4c>
		switch (*sp) {
    5226:	2701      	movs	r7, #1
    5228:	e74e      	b.n	50c8 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    522a:	fb0c 7202 	mla	r2, ip, r2, r7
    522e:	3a30      	subs	r2, #48	; 0x30
    5230:	4603      	mov	r3, r0
    5232:	4618      	mov	r0, r3
    5234:	f810 7b01 	ldrb.w	r7, [r0], #1
    5238:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    523c:	f1be 0f09 	cmp.w	lr, #9
    5240:	d9f3      	bls.n	522a <cbvprintf+0x1ae>
	if (sp != wp) {
    5242:	4299      	cmp	r1, r3
    5244:	d090      	beq.n	5168 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    5246:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    524a:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    524c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    524e:	f362 0141 	bfi	r1, r2, #1, #1
    5252:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    5256:	e787      	b.n	5168 <cbvprintf+0xec>
    5258:	460b      	mov	r3, r1
	size_t val = 0;
    525a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    525c:	f04f 0c0a 	mov.w	ip, #10
    5260:	e7e7      	b.n	5232 <cbvprintf+0x1b6>
		conv->prec_star = true;
    5262:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5266:	f042 0204 	orr.w	r2, r2, #4
    526a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    526e:	3302      	adds	r3, #2
	switch (*sp) {
    5270:	4619      	mov	r1, r3
    5272:	f811 2b01 	ldrb.w	r2, [r1], #1
    5276:	2a6c      	cmp	r2, #108	; 0x6c
    5278:	d05c      	beq.n	5334 <cbvprintf+0x2b8>
    527a:	d840      	bhi.n	52fe <cbvprintf+0x282>
    527c:	2a68      	cmp	r2, #104	; 0x68
    527e:	d046      	beq.n	530e <cbvprintf+0x292>
    5280:	2a6a      	cmp	r2, #106	; 0x6a
    5282:	d061      	beq.n	5348 <cbvprintf+0x2cc>
    5284:	2a4c      	cmp	r2, #76	; 0x4c
    5286:	d067      	beq.n	5358 <cbvprintf+0x2dc>
    5288:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    528a:	460b      	mov	r3, r1
    528c:	f813 2b01 	ldrb.w	r2, [r3], #1
    5290:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    5292:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    5294:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    5298:	f200 80df 	bhi.w	545a <cbvprintf+0x3de>
    529c:	2a57      	cmp	r2, #87	; 0x57
    529e:	d868      	bhi.n	5372 <cbvprintf+0x2f6>
    52a0:	2a41      	cmp	r2, #65	; 0x41
    52a2:	d004      	beq.n	52ae <cbvprintf+0x232>
    52a4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    52a8:	2b02      	cmp	r3, #2
    52aa:	f200 80d6 	bhi.w	545a <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    52ae:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    52b2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    52b6:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    52b8:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    52bc:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    52c0:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    52c4:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    52c8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    52cc:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    52d0:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    52d4:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    52d6:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    52da:	b2cb      	uxtb	r3, r1
    52dc:	f100 80e5 	bmi.w	54aa <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    52e0:	f003 0278 	and.w	r2, r3, #120	; 0x78
    52e4:	2a18      	cmp	r2, #24
    52e6:	f040 80b5 	bne.w	5454 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    52ea:	f36f 03c6 	bfc	r3, #3, #4
    52ee:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    52f2:	e09c      	b.n	542e <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    52f4:	fb0c 2101 	mla	r1, ip, r1, r2
    52f8:	3930      	subs	r1, #48	; 0x30
    52fa:	4603      	mov	r3, r0
    52fc:	e747      	b.n	518e <cbvprintf+0x112>
	switch (*sp) {
    52fe:	2a74      	cmp	r2, #116	; 0x74
    5300:	d026      	beq.n	5350 <cbvprintf+0x2d4>
    5302:	2a7a      	cmp	r2, #122	; 0x7a
    5304:	d1c0      	bne.n	5288 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    5306:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    530a:	2206      	movs	r2, #6
    530c:	e00d      	b.n	532a <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    530e:	785a      	ldrb	r2, [r3, #1]
    5310:	2a68      	cmp	r2, #104	; 0x68
    5312:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5316:	d106      	bne.n	5326 <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    5318:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    531a:	f361 02c6 	bfi	r2, r1, #3, #4
    531e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    5322:	1c99      	adds	r1, r3, #2
    5324:	e7b1      	b.n	528a <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    5326:	4613      	mov	r3, r2
    5328:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    532a:	f362 03c6 	bfi	r3, r2, #3, #4
    532e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    5332:	e7aa      	b.n	528a <cbvprintf+0x20e>
		if (*++sp == 'l') {
    5334:	785a      	ldrb	r2, [r3, #1]
    5336:	2a6c      	cmp	r2, #108	; 0x6c
    5338:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    533c:	d101      	bne.n	5342 <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    533e:	2104      	movs	r1, #4
    5340:	e7eb      	b.n	531a <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    5342:	4613      	mov	r3, r2
    5344:	2203      	movs	r2, #3
    5346:	e7f0      	b.n	532a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    5348:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    534c:	2205      	movs	r2, #5
    534e:	e7ec      	b.n	532a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    5350:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5354:	2207      	movs	r2, #7
    5356:	e7e8      	b.n	532a <cbvprintf+0x2ae>
		conv->unsupported = true;
    5358:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    535c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    5360:	f023 0302 	bic.w	r3, r3, #2
    5364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    5368:	f043 0302 	orr.w	r3, r3, #2
    536c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    5370:	e78b      	b.n	528a <cbvprintf+0x20e>
	switch (conv->specifier) {
    5372:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    5376:	2b20      	cmp	r3, #32
    5378:	d86f      	bhi.n	545a <cbvprintf+0x3de>
    537a:	a101      	add	r1, pc, #4	; (adr r1, 5380 <cbvprintf+0x304>)
    537c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    5380:	00005433 	.word	0x00005433
    5384:	0000545b 	.word	0x0000545b
    5388:	0000545b 	.word	0x0000545b
    538c:	0000545b 	.word	0x0000545b
    5390:	0000545b 	.word	0x0000545b
    5394:	0000545b 	.word	0x0000545b
    5398:	0000545b 	.word	0x0000545b
    539c:	0000545b 	.word	0x0000545b
    53a0:	0000545b 	.word	0x0000545b
    53a4:	000052af 	.word	0x000052af
    53a8:	0000545b 	.word	0x0000545b
    53ac:	00005433 	.word	0x00005433
    53b0:	00005405 	.word	0x00005405
    53b4:	000052af 	.word	0x000052af
    53b8:	000052af 	.word	0x000052af
    53bc:	000052af 	.word	0x000052af
    53c0:	0000545b 	.word	0x0000545b
    53c4:	00005405 	.word	0x00005405
    53c8:	0000545b 	.word	0x0000545b
    53cc:	0000545b 	.word	0x0000545b
    53d0:	0000545b 	.word	0x0000545b
    53d4:	0000545b 	.word	0x0000545b
    53d8:	00005469 	.word	0x00005469
    53dc:	00005433 	.word	0x00005433
    53e0:	0000548d 	.word	0x0000548d
    53e4:	0000545b 	.word	0x0000545b
    53e8:	0000545b 	.word	0x0000545b
    53ec:	0000548d 	.word	0x0000548d
    53f0:	0000545b 	.word	0x0000545b
    53f4:	00005433 	.word	0x00005433
    53f8:	0000545b 	.word	0x0000545b
    53fc:	0000545b 	.word	0x0000545b
    5400:	00005433 	.word	0x00005433
		conv->specifier_cat = SPECIFIER_SINT;
    5404:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5408:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    540a:	f361 0302 	bfi	r3, r1, #0, #3
    540e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5412:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5416:	f003 0378 	and.w	r3, r3, #120	; 0x78
    541a:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    541c:	bf02      	ittt	eq
    541e:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    5422:	f041 0101 	orreq.w	r1, r1, #1
    5426:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    542a:	2a63      	cmp	r2, #99	; 0x63
    542c:	d005      	beq.n	543a <cbvprintf+0x3be>
	bool unsupported = false;
    542e:	2300      	movs	r3, #0
    5430:	e006      	b.n	5440 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    5432:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5436:	2102      	movs	r1, #2
    5438:	e7e7      	b.n	540a <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    543a:	3b00      	subs	r3, #0
    543c:	bf18      	it	ne
    543e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    5440:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5444:	f3c2 0140 	ubfx	r1, r2, #1, #1
    5448:	430b      	orrs	r3, r1
    544a:	f363 0241 	bfi	r2, r3, #1, #1
    544e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    5452:	e6b4      	b.n	51be <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    5454:	f013 0f38 	tst.w	r3, #56	; 0x38
    5458:	d0e9      	beq.n	542e <cbvprintf+0x3b2>
			conv->invalid = true;
    545a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    545e:	f043 0301 	orr.w	r3, r3, #1
    5462:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    5466:	e7e2      	b.n	542e <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    5468:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    546c:	2203      	movs	r2, #3
    546e:	f362 0302 	bfi	r3, r2, #0, #3
    5472:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5476:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    547a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    547e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    5482:	f1dc 0300 	rsbs	r3, ip, #0
    5486:	eb43 030c 	adc.w	r3, r3, ip
    548a:	e7d9      	b.n	5440 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    548c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5490:	2203      	movs	r2, #3
    5492:	f362 0302 	bfi	r3, r2, #0, #3
    5496:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    549a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    549e:	f013 0f78 	tst.w	r3, #120	; 0x78
    54a2:	bf14      	ite	ne
    54a4:	2301      	movne	r3, #1
    54a6:	2300      	moveq	r3, #0
    54a8:	e7ca      	b.n	5440 <cbvprintf+0x3c4>
			unsupported = true;
    54aa:	2301      	movs	r3, #1
    54ac:	e7c8      	b.n	5440 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    54ae:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    54b2:	2a00      	cmp	r2, #0
			width = conv->width_value;
    54b4:	bfb4      	ite	lt
    54b6:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    54ba:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    54be:	e690      	b.n	51e2 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    54c0:	0799      	lsls	r1, r3, #30
    54c2:	f57f ae9d 	bpl.w	5200 <cbvprintf+0x184>
			precision = conv->prec_value;
    54c6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    54ca:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    54ce:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    54d0:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    54d4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    54d8:	f003 0207 	and.w	r2, r3, #7
    54dc:	2a04      	cmp	r2, #4
    54de:	d109      	bne.n	54f4 <cbvprintf+0x478>
		    && !conv->prec_present) {
    54e0:	078a      	lsls	r2, r1, #30
    54e2:	d407      	bmi.n	54f4 <cbvprintf+0x478>
			if (conv->specifier_a) {
    54e4:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    54e8:	2a00      	cmp	r2, #0
    54ea:	bfb4      	ite	lt
    54ec:	f04f 080d 	movlt.w	r8, #13
    54f0:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    54f4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    54f8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    54fa:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    54fe:	d137      	bne.n	5570 <cbvprintf+0x4f4>
			switch (length_mod) {
    5500:	1ecb      	subs	r3, r1, #3
    5502:	2b04      	cmp	r3, #4
    5504:	d821      	bhi.n	554a <cbvprintf+0x4ce>
    5506:	e8df f003 	tbb	[pc, r3]
    550a:	0903      	.short	0x0903
    550c:	2009      	.short	0x2009
    550e:	20          	.byte	0x20
    550f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    5510:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    5514:	17da      	asrs	r2, r3, #31
    5516:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    551a:	e006      	b.n	552a <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    551c:	3407      	adds	r4, #7
    551e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    5522:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    5526:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    552a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    552e:	07bb      	lsls	r3, r7, #30
    5530:	d056      	beq.n	55e0 <cbvprintf+0x564>
			OUTS(sp, fp);
    5532:	9b02      	ldr	r3, [sp, #8]
    5534:	462a      	mov	r2, r5
    5536:	4651      	mov	r1, sl
    5538:	4648      	mov	r0, r9
    553a:	f016 f917 	bl	1b76c <outs>
    553e:	2800      	cmp	r0, #0
    5540:	f2c0 8397 	blt.w	5c72 <cbvprintf+0xbf6>
    5544:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    5546:	9d02      	ldr	r5, [sp, #8]
    5548:	e5a0      	b.n	508c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    554a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    554e:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    5550:	ea4f 72e3 	mov.w	r2, r3, asr #31
    5554:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    5558:	d105      	bne.n	5566 <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    555a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    555e:	930c      	str	r3, [sp, #48]	; 0x30
    5560:	2300      	movs	r3, #0
    5562:	930d      	str	r3, [sp, #52]	; 0x34
    5564:	e7e1      	b.n	552a <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    5566:	2902      	cmp	r1, #2
    5568:	d1df      	bne.n	552a <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    556a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    556e:	e7d1      	b.n	5514 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    5570:	2b02      	cmp	r3, #2
    5572:	d123      	bne.n	55bc <cbvprintf+0x540>
			switch (length_mod) {
    5574:	1ecb      	subs	r3, r1, #3
    5576:	2b04      	cmp	r3, #4
    5578:	d813      	bhi.n	55a2 <cbvprintf+0x526>
    557a:	e8df f003 	tbb	[pc, r3]
    557e:	0a03      	.short	0x0a03
    5580:	120a      	.short	0x120a
    5582:	12          	.byte	0x12
    5583:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    5584:	6822      	ldr	r2, [r4, #0]
    5586:	920c      	str	r2, [sp, #48]	; 0x30
    5588:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    558a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    558c:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    558e:	4604      	mov	r4, r0
    5590:	e7cb      	b.n	552a <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    5592:	1de0      	adds	r0, r4, #7
    5594:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    5598:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    559c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    55a0:	e7f5      	b.n	558e <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    55a2:	f854 3b04 	ldr.w	r3, [r4], #4
    55a6:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    55a8:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    55aa:	f04f 0300 	mov.w	r3, #0
    55ae:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    55b0:	d0d3      	beq.n	555a <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    55b2:	2902      	cmp	r1, #2
    55b4:	d1b9      	bne.n	552a <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    55b6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    55ba:	e7d0      	b.n	555e <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    55bc:	2b04      	cmp	r3, #4
    55be:	d109      	bne.n	55d4 <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    55c0:	1de3      	adds	r3, r4, #7
    55c2:	f023 0307 	bic.w	r3, r3, #7
    55c6:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    55ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    55ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    55d2:	e7aa      	b.n	552a <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    55d4:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    55d6:	bf04      	itt	eq
    55d8:	f854 3b04 	ldreq.w	r3, [r4], #4
    55dc:	930c      	streq	r3, [sp, #48]	; 0x30
    55de:	e7a4      	b.n	552a <cbvprintf+0x4ae>
		switch (conv->specifier) {
    55e0:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    55e4:	2a78      	cmp	r2, #120	; 0x78
    55e6:	d8ae      	bhi.n	5546 <cbvprintf+0x4ca>
    55e8:	2a57      	cmp	r2, #87	; 0x57
    55ea:	f200 808c 	bhi.w	5706 <cbvprintf+0x68a>
    55ee:	2a25      	cmp	r2, #37	; 0x25
    55f0:	f000 80d4 	beq.w	579c <cbvprintf+0x720>
    55f4:	2a24      	cmp	r2, #36	; 0x24
    55f6:	d9a6      	bls.n	5546 <cbvprintf+0x4ca>
    55f8:	2a41      	cmp	r2, #65	; 0x41
    55fa:	d003      	beq.n	5604 <cbvprintf+0x588>
    55fc:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5600:	2b02      	cmp	r3, #2
    5602:	d8a0      	bhi.n	5546 <cbvprintf+0x4ca>
	} u = {
    5604:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    5608:	2b00      	cmp	r3, #0
    560a:	f2c0 81be 	blt.w	598a <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    560e:	0738      	lsls	r0, r7, #28
    5610:	f100 81bd 	bmi.w	598e <cbvprintf+0x912>
		*sign = ' ';
    5614:	f017 0710 	ands.w	r7, r7, #16
    5618:	bf18      	it	ne
    561a:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    561c:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    5620:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5624:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    5628:	2d00      	cmp	r5, #0
    562a:	f040 81b2 	bne.w	5992 <cbvprintf+0x916>
    562e:	ea51 0003 	orrs.w	r0, r1, r3
    5632:	bf14      	ite	ne
    5634:	2001      	movne	r0, #1
    5636:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    5638:	02db      	lsls	r3, r3, #11
    563a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    563e:	02c9      	lsls	r1, r1, #11
		c = 'f';
    5640:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    5642:	ea45 0e01 	orr.w	lr, r5, r1
    5646:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    564a:	bf08      	it	eq
    564c:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    564e:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    5652:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    5656:	f000 8206 	beq.w	5a66 <cbvprintf+0x9ea>
		if (is_subnormal) {
    565a:	2800      	cmp	r0, #0
    565c:	f040 81ce 	bne.w	59fc <cbvprintf+0x980>
		fract |= BIT_63;
    5660:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5664:	f04f 0c00 	mov.w	ip, #0
    5668:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    566c:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    5670:	9109      	str	r1, [sp, #36]	; 0x24
    5672:	4663      	mov	r3, ip
		fract *= 5U;
    5674:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    5678:	f115 0f02 	cmn.w	r5, #2
    567c:	f2c0 81c5 	blt.w	5a0a <cbvprintf+0x98e>
    5680:	f1bc 0f00 	cmp.w	ip, #0
    5684:	d001      	beq.n	568a <cbvprintf+0x60e>
    5686:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    568a:	2d00      	cmp	r5, #0
		fract += 2;
    568c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    5690:	f300 81d0 	bgt.w	5a34 <cbvprintf+0x9b8>
	fract >>= (4 - expo);
    5694:	9809      	ldr	r0, [sp, #36]	; 0x24
    5696:	9908      	ldr	r1, [sp, #32]
    5698:	f1c5 0c04 	rsb	ip, r5, #4
    569c:	351c      	adds	r5, #28
    569e:	fa00 f505 	lsl.w	r5, r0, r5
    56a2:	f1ac 0e20 	sub.w	lr, ip, #32
    56a6:	fa21 f10c 	lsr.w	r1, r1, ip
    56aa:	fa20 fe0e 	lsr.w	lr, r0, lr
    56ae:	4329      	orrs	r1, r5
    56b0:	ea41 010e 	orr.w	r1, r1, lr
    56b4:	fa20 f00c 	lsr.w	r0, r0, ip
    56b8:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    56bc:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    56c0:	2947      	cmp	r1, #71	; 0x47
    56c2:	f040 81d7 	bne.w	5a74 <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    56c6:	1cdd      	adds	r5, r3, #3
    56c8:	db02      	blt.n	56d0 <cbvprintf+0x654>
    56ca:	4598      	cmp	r8, r3
    56cc:	f280 81ce 	bge.w	5a6c <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    56d0:	3a02      	subs	r2, #2
			if (precision > 0) {
    56d2:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    56d6:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    56d8:	dd01      	ble.n	56de <cbvprintf+0x662>
				precision--;
    56da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    56de:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    56e2:	0688      	lsls	r0, r1, #26
    56e4:	f100 81c6 	bmi.w	5a74 <cbvprintf+0x9f8>
    56e8:	f1b8 0f00 	cmp.w	r8, #0
    56ec:	bfd4      	ite	le
    56ee:	2100      	movle	r1, #0
    56f0:	2101      	movgt	r1, #1
	if (c == 'f') {
    56f2:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    56f4:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    56f6:	f040 81bf 	bne.w	5a78 <cbvprintf+0x9fc>
		if (decimals < 0) {
    56fa:	eb18 0503 	adds.w	r5, r8, r3
    56fe:	f140 81bd 	bpl.w	5a7c <cbvprintf+0xa00>
			decimals = 0;
    5702:	2500      	movs	r5, #0
    5704:	e1bd      	b.n	5a82 <cbvprintf+0xa06>
		switch (conv->specifier) {
    5706:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    570a:	2b20      	cmp	r3, #32
    570c:	f63f af1b 	bhi.w	5546 <cbvprintf+0x4ca>
    5710:	a001      	add	r0, pc, #4	; (adr r0, 5718 <cbvprintf+0x69c>)
    5712:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    5716:	bf00      	nop
    5718:	0000592d 	.word	0x0000592d
    571c:	00005547 	.word	0x00005547
    5720:	00005547 	.word	0x00005547
    5724:	00005547 	.word	0x00005547
    5728:	00005547 	.word	0x00005547
    572c:	00005547 	.word	0x00005547
    5730:	00005547 	.word	0x00005547
    5734:	00005547 	.word	0x00005547
    5738:	00005547 	.word	0x00005547
    573c:	00005605 	.word	0x00005605
    5740:	00005547 	.word	0x00005547
    5744:	000057c9 	.word	0x000057c9
    5748:	000058cd 	.word	0x000058cd
    574c:	00005605 	.word	0x00005605
    5750:	00005605 	.word	0x00005605
    5754:	00005605 	.word	0x00005605
    5758:	00005547 	.word	0x00005547
    575c:	000058cd 	.word	0x000058cd
    5760:	00005547 	.word	0x00005547
    5764:	00005547 	.word	0x00005547
    5768:	00005547 	.word	0x00005547
    576c:	00005547 	.word	0x00005547
    5770:	00005963 	.word	0x00005963
    5774:	0000592d 	.word	0x0000592d
    5778:	00005931 	.word	0x00005931
    577c:	00005547 	.word	0x00005547
    5780:	00005547 	.word	0x00005547
    5784:	000057a3 	.word	0x000057a3
    5788:	00005547 	.word	0x00005547
    578c:	0000592d 	.word	0x0000592d
    5790:	00005547 	.word	0x00005547
    5794:	00005547 	.word	0x00005547
    5798:	0000592d 	.word	0x0000592d
			OUTC('%');
    579c:	4651      	mov	r1, sl
    579e:	4610      	mov	r0, r2
    57a0:	e47e      	b.n	50a0 <cbvprintf+0x24>
			if (precision >= 0) {
    57a2:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    57a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    57a8:	db09      	blt.n	57be <cbvprintf+0x742>
				len = strnlen(bps, precision);
    57aa:	4641      	mov	r1, r8
    57ac:	4610      	mov	r0, r2
    57ae:	9203      	str	r2, [sp, #12]
    57b0:	f016 fa95 	bl	1bcde <strnlen>
				len = strlen(bps);
    57b4:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    57b6:	2700      	movs	r7, #0
			bpe = bps + len;
    57b8:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    57ba:	b962      	cbnz	r2, 57d6 <cbvprintf+0x75a>
    57bc:	e6c3      	b.n	5546 <cbvprintf+0x4ca>
				len = strlen(bps);
    57be:	4610      	mov	r0, r2
    57c0:	9203      	str	r2, [sp, #12]
    57c2:	f016 fa85 	bl	1bcd0 <strlen>
    57c6:	e7f5      	b.n	57b4 <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    57c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    57ca:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    57ce:	2700      	movs	r7, #0
			bpe = buf + 1;
    57d0:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    57d4:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    57d6:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    57d8:	b107      	cbz	r7, 57dc <cbvprintf+0x760>
			nj_len += 1U;
    57da:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    57dc:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    57e0:	06c1      	lsls	r1, r0, #27
    57e2:	f140 823a 	bpl.w	5c5a <cbvprintf+0xbde>
			nj_len += 2U;
    57e6:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    57e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    57ea:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    57ec:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    57ee:	bf44      	itt	mi
    57f0:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    57f2:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    57f4:	f1bb 0f00 	cmp.w	fp, #0
    57f8:	dd23      	ble.n	5842 <cbvprintf+0x7c6>
			width -= (int)nj_len;
    57fa:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    57fe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5802:	0759      	lsls	r1, r3, #29
    5804:	f3c3 0880 	ubfx	r8, r3, #2, #1
    5808:	d41b      	bmi.n	5842 <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    580a:	0658      	lsls	r0, r3, #25
    580c:	f140 8234 	bpl.w	5c78 <cbvprintf+0xbfc>
					if (sign != 0) {
    5810:	2f00      	cmp	r7, #0
    5812:	f000 8234 	beq.w	5c7e <cbvprintf+0xc02>
						OUTC(sign);
    5816:	4651      	mov	r1, sl
    5818:	4638      	mov	r0, r7
    581a:	9203      	str	r2, [sp, #12]
    581c:	47c8      	blx	r9
    581e:	2800      	cmp	r0, #0
    5820:	f2c0 8227 	blt.w	5c72 <cbvprintf+0xbf6>
    5824:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    5826:	4647      	mov	r7, r8
						OUTC(sign);
    5828:	3601      	adds	r6, #1
					pad = '0';
    582a:	f04f 0830 	mov.w	r8, #48	; 0x30
    582e:	445e      	add	r6, fp
    5830:	465b      	mov	r3, fp
				while (width-- > 0) {
    5832:	2b00      	cmp	r3, #0
    5834:	eba6 000b 	sub.w	r0, r6, fp
    5838:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    583c:	f300 8211 	bgt.w	5c62 <cbvprintf+0xbe6>
    5840:	4606      	mov	r6, r0
		if (sign != 0) {
    5842:	b147      	cbz	r7, 5856 <cbvprintf+0x7da>
			OUTC(sign);
    5844:	4651      	mov	r1, sl
    5846:	4638      	mov	r0, r7
    5848:	9203      	str	r2, [sp, #12]
    584a:	47c8      	blx	r9
    584c:	2800      	cmp	r0, #0
    584e:	f2c0 8210 	blt.w	5c72 <cbvprintf+0xbf6>
    5852:	9a03      	ldr	r2, [sp, #12]
    5854:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    5856:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    585a:	0659      	lsls	r1, r3, #25
    585c:	f140 8265 	bpl.w	5d2a <cbvprintf+0xcae>
			if (conv->specifier_a) {
    5860:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    5864:	2b00      	cmp	r3, #0
    5866:	eba6 0302 	sub.w	r3, r6, r2
    586a:	9303      	str	r3, [sp, #12]
    586c:	f2c0 820a 	blt.w	5c84 <cbvprintf+0xc08>
    5870:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    5872:	7838      	ldrb	r0, [r7, #0]
    5874:	9b03      	ldr	r3, [sp, #12]
    5876:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    587a:	2a09      	cmp	r2, #9
    587c:	46b8      	mov	r8, r7
    587e:	eb03 0607 	add.w	r6, r3, r7
    5882:	f107 0701 	add.w	r7, r7, #1
    5886:	f240 8229 	bls.w	5cdc <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    588a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    588e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    5890:	0693      	lsls	r3, r2, #26
    5892:	d408      	bmi.n	58a6 <cbvprintf+0x82a>
    5894:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    5896:	2f00      	cmp	r7, #0
    5898:	eba6 0307 	sub.w	r3, r6, r7
    589c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    58a0:	f300 8222 	bgt.w	5ce8 <cbvprintf+0xc6c>
    58a4:	461e      	mov	r6, r3
				if (*cp == '.') {
    58a6:	f898 0000 	ldrb.w	r0, [r8]
    58aa:	282e      	cmp	r0, #46	; 0x2e
    58ac:	d10b      	bne.n	58c6 <cbvprintf+0x84a>
					OUTC(*cp++);
    58ae:	4651      	mov	r1, sl
    58b0:	47c8      	blx	r9
						OUTC('0');
    58b2:	2800      	cmp	r0, #0
    58b4:	f2c0 81dd 	blt.w	5c72 <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    58b8:	2f00      	cmp	r7, #0
						OUTC('0');
    58ba:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    58be:	f300 821a 	bgt.w	5cf6 <cbvprintf+0xc7a>
					OUTC(*cp++);
    58c2:	f108 0801 	add.w	r8, r8, #1
    58c6:	eba6 0608 	sub.w	r6, r6, r8
    58ca:	e21d      	b.n	5d08 <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    58cc:	073d      	lsls	r5, r7, #28
    58ce:	d42b      	bmi.n	5928 <cbvprintf+0x8ac>
				sign = ' ';
    58d0:	f017 0710 	ands.w	r7, r7, #16
    58d4:	bf18      	it	ne
    58d6:	2720      	movne	r7, #32
			sint = value->sint;
    58d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    58dc:	2b00      	cmp	r3, #0
    58de:	da05      	bge.n	58ec <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    58e0:	4252      	negs	r2, r2
    58e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    58e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    58ea:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    58ec:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    58f0:	9300      	str	r3, [sp, #0]
    58f2:	aa0e      	add	r2, sp, #56	; 0x38
    58f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    58f8:	ab13      	add	r3, sp, #76	; 0x4c
    58fa:	f015 fef1 	bl	1b6e0 <encode_uint>
    58fe:	4602      	mov	r2, r0
			if (precision >= 0) {
    5900:	f1b8 0f00 	cmp.w	r8, #0
    5904:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    5908:	f6ff af57 	blt.w	57ba <cbvprintf+0x73e>
				conv->flag_zero = false;
    590c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    5910:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    5912:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    5916:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    5918:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    591c:	f67f af4d 	bls.w	57ba <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    5920:	eba8 0303 	sub.w	r3, r8, r3
    5924:	930f      	str	r3, [sp, #60]	; 0x3c
    5926:	e748      	b.n	57ba <cbvprintf+0x73e>
				sign = '+';
    5928:	272b      	movs	r7, #43	; 0x2b
    592a:	e7d5      	b.n	58d8 <cbvprintf+0x85c>
		switch (conv->specifier) {
    592c:	2700      	movs	r7, #0
    592e:	e7dd      	b.n	58ec <cbvprintf+0x870>
			if (value->ptr != NULL) {
    5930:	980c      	ldr	r0, [sp, #48]	; 0x30
    5932:	2800      	cmp	r0, #0
    5934:	f000 818d 	beq.w	5c52 <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5938:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    593c:	9300      	str	r3, [sp, #0]
    593e:	aa0e      	add	r2, sp, #56	; 0x38
    5940:	ab13      	add	r3, sp, #76	; 0x4c
    5942:	2100      	movs	r1, #0
    5944:	f015 fecc 	bl	1b6e0 <encode_uint>
				conv->altform_0c = true;
    5948:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    594c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    5950:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    5954:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5958:	4602      	mov	r2, r0
				conv->altform_0c = true;
    595a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    595e:	2700      	movs	r7, #0
				goto prec_int_pad0;
    5960:	e7ce      	b.n	5900 <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    5962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    5964:	2907      	cmp	r1, #7
    5966:	f63f adee 	bhi.w	5546 <cbvprintf+0x4ca>
    596a:	e8df f001 	tbb	[pc, r1]
    596e:	040c      	.short	0x040c
    5970:	08080c06 	.word	0x08080c06
    5974:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    5976:	701e      	strb	r6, [r3, #0]
		break;
    5978:	e5e5      	b.n	5546 <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    597a:	801e      	strh	r6, [r3, #0]
		break;
    597c:	e5e3      	b.n	5546 <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    597e:	17f2      	asrs	r2, r6, #31
    5980:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    5984:	e5df      	b.n	5546 <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5986:	601e      	str	r6, [r3, #0]
		break;
    5988:	e5dd      	b.n	5546 <cbvprintf+0x4ca>
		*sign = '-';
    598a:	272d      	movs	r7, #45	; 0x2d
    598c:	e646      	b.n	561c <cbvprintf+0x5a0>
		*sign = '+';
    598e:	272b      	movs	r7, #43	; 0x2b
    5990:	e644      	b.n	561c <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    5992:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5996:	4285      	cmp	r5, r0
    5998:	d12d      	bne.n	59f6 <cbvprintf+0x97a>
		if (fract == 0) {
    599a:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    599c:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    59a0:	d11b      	bne.n	59da <cbvprintf+0x95e>
			if (isupper((int)c)) {
    59a2:	2a19      	cmp	r2, #25
    59a4:	d811      	bhi.n	59ca <cbvprintf+0x94e>
				*buf++ = 'I';
    59a6:	2349      	movs	r3, #73	; 0x49
    59a8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    59ac:	234e      	movs	r3, #78	; 0x4e
    59ae:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    59b2:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    59b4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    59b8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    59bc:	f36f 1386 	bfc	r3, #6, #1
    59c0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    59c4:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    59c8:	e704      	b.n	57d4 <cbvprintf+0x758>
				*buf++ = 'i';
    59ca:	2369      	movs	r3, #105	; 0x69
    59cc:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    59d0:	236e      	movs	r3, #110	; 0x6e
    59d2:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    59d6:	2366      	movs	r3, #102	; 0x66
    59d8:	e7ec      	b.n	59b4 <cbvprintf+0x938>
			if (isupper((int)c)) {
    59da:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    59dc:	bf99      	ittee	ls
    59de:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    59e0:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    59e2:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    59e4:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    59e6:	bf94      	ite	ls
    59e8:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    59ec:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    59f0:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    59f4:	e7de      	b.n	59b4 <cbvprintf+0x938>
	bool is_subnormal = (expo == 0) && (fract != 0);
    59f6:	2000      	movs	r0, #0
    59f8:	e61e      	b.n	5638 <cbvprintf+0x5bc>
				expo--;
    59fa:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    59fc:	1849      	adds	r1, r1, r1
    59fe:	415b      	adcs	r3, r3
    5a00:	2b00      	cmp	r3, #0
    5a02:	dafa      	bge.n	59fa <cbvprintf+0x97e>
    5a04:	e9cd 1308 	strd	r1, r3, [sp, #32]
    5a08:	e62a      	b.n	5660 <cbvprintf+0x5e4>
			fract >>= 1;
    5a0a:	0840      	lsrs	r0, r0, #1
    5a0c:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    5a10:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    5a12:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    5a16:	46ac      	mov	ip, r5
			expo++;
    5a18:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    5a1c:	d2f5      	bcs.n	5a0a <cbvprintf+0x98e>
		fract *= 5U;
    5a1e:	fb0e f501 	mul.w	r5, lr, r1
    5a22:	fba0 010e 	umull	r0, r1, r0, lr
    5a26:	4429      	add	r1, r5
		decexp--;
    5a28:	3b01      	subs	r3, #1
		expo++;
    5a2a:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    5a2e:	f04f 0c01 	mov.w	ip, #1
    5a32:	e621      	b.n	5678 <cbvprintf+0x5fc>
		fract += 2;
    5a34:	3102      	adds	r1, #2
    5a36:	f140 0000 	adc.w	r0, r0, #0
    5a3a:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    5a3e:	a808      	add	r0, sp, #32
    5a40:	e9cd 2303 	strd	r2, r3, [sp, #12]
    5a44:	f015 fe1d 	bl	1b682 <_ldiv5>
		decexp++;
    5a48:	9b04      	ldr	r3, [sp, #16]
    5a4a:	9a03      	ldr	r2, [sp, #12]
    5a4c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    5a50:	3d01      	subs	r5, #1
		decexp++;
    5a52:	3301      	adds	r3, #1
			fract <<= 1;
    5a54:	1849      	adds	r1, r1, r1
    5a56:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    5a58:	2800      	cmp	r0, #0
			expo--;
    5a5a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    5a5e:	daf9      	bge.n	5a54 <cbvprintf+0x9d8>
    5a60:	e9cd 1008 	strd	r1, r0, [sp, #32]
    5a64:	e611      	b.n	568a <cbvprintf+0x60e>
    5a66:	2300      	movs	r3, #0
    5a68:	461d      	mov	r5, r3
    5a6a:	e613      	b.n	5694 <cbvprintf+0x618>
			precision -= decexp;
    5a6c:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    5a70:	2266      	movs	r2, #102	; 0x66
    5a72:	e634      	b.n	56de <cbvprintf+0x662>
	bool prune_zero = false;
    5a74:	2100      	movs	r1, #0
    5a76:	e63c      	b.n	56f2 <cbvprintf+0x676>
		decimals = precision + 1;
    5a78:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    5a7c:	2d10      	cmp	r5, #16
    5a7e:	bfa8      	it	ge
    5a80:	2510      	movge	r5, #16
    5a82:	2110      	movs	r1, #16
    5a84:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    5a86:	2000      	movs	r0, #0
    5a88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    5a8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    5a90:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    5a94:	b9a5      	cbnz	r5, 5ac0 <cbvprintf+0xa44>
	fract += round;
    5a96:	9d08      	ldr	r5, [sp, #32]
    5a98:	1949      	adds	r1, r1, r5
    5a9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5a9c:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    5aa0:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    5aa4:	d21b      	bcs.n	5ade <cbvprintf+0xa62>
	fract += round;
    5aa6:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    5aaa:	2a66      	cmp	r2, #102	; 0x66
    5aac:	f040 8099 	bne.w	5be2 <cbvprintf+0xb66>
		if (decexp > 0) {
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	dc23      	bgt.n	5afc <cbvprintf+0xa80>
			*buf++ = '0';
    5ab4:	2130      	movs	r1, #48	; 0x30
    5ab6:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    5aba:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    5abe:	e02f      	b.n	5b20 <cbvprintf+0xaa4>
	*v >>= 1;
    5ac0:	0849      	lsrs	r1, r1, #1
    5ac2:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    5ac6:	0840      	lsrs	r0, r0, #1
    5ac8:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    5acc:	a80a      	add	r0, sp, #40	; 0x28
    5ace:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5ad2:	3d01      	subs	r5, #1
    5ad4:	f015 fdd5 	bl	1b682 <_ldiv5>
    5ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    5adc:	e7d8      	b.n	5a90 <cbvprintf+0xa14>
	*v >>= 1;
    5ade:	0849      	lsrs	r1, r1, #1
    5ae0:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    5ae4:	a808      	add	r0, sp, #32
	*v >>= 1;
    5ae6:	086d      	lsrs	r5, r5, #1
    5ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5aec:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    5af0:	f015 fdc7 	bl	1b682 <_ldiv5>
		decexp++;
    5af4:	9b05      	ldr	r3, [sp, #20]
    5af6:	9a04      	ldr	r2, [sp, #16]
    5af8:	3301      	adds	r3, #1
    5afa:	e7d6      	b.n	5aaa <cbvprintf+0xa2e>
	char *buf = bps;
    5afc:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    5afe:	9907      	ldr	r1, [sp, #28]
    5b00:	2900      	cmp	r1, #0
    5b02:	dd0b      	ble.n	5b1c <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    5b04:	a907      	add	r1, sp, #28
    5b06:	a808      	add	r0, sp, #32
    5b08:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5b0c:	f015 fdd1 	bl	1b6b2 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    5b10:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    5b12:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    5b16:	3b01      	subs	r3, #1
    5b18:	9a04      	ldr	r2, [sp, #16]
    5b1a:	d1f0      	bne.n	5afe <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    5b1c:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    5b1e:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    5b20:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    5b24:	0689      	lsls	r1, r1, #26
    5b26:	d402      	bmi.n	5b2e <cbvprintf+0xab2>
    5b28:	f1b8 0f00 	cmp.w	r8, #0
    5b2c:	dd1d      	ble.n	5b6a <cbvprintf+0xaee>
			*buf++ = '.';
    5b2e:	212e      	movs	r1, #46	; 0x2e
    5b30:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    5b34:	b19b      	cbz	r3, 5b5e <cbvprintf+0xae2>
    5b36:	f1b8 0f00 	cmp.w	r8, #0
    5b3a:	dd16      	ble.n	5b6a <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    5b3c:	4259      	negs	r1, r3
    5b3e:	4541      	cmp	r1, r8
    5b40:	bfa8      	it	ge
    5b42:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    5b44:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    5b48:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    5b4a:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    5b4c:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    5b50:	bfd4      	ite	le
    5b52:	2100      	movle	r1, #0
    5b54:	2101      	movgt	r1, #1
    5b56:	f361 1045 	bfi	r0, r1, #5, #1
    5b5a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    5b5e:	f1b8 0f00 	cmp.w	r8, #0
    5b62:	dd02      	ble.n	5b6a <cbvprintf+0xaee>
    5b64:	9907      	ldr	r1, [sp, #28]
    5b66:	2900      	cmp	r1, #0
    5b68:	dc56      	bgt.n	5c18 <cbvprintf+0xb9c>
	if (prune_zero) {
    5b6a:	9903      	ldr	r1, [sp, #12]
    5b6c:	2900      	cmp	r1, #0
    5b6e:	d163      	bne.n	5c38 <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    5b70:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    5b74:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    5b78:	2945      	cmp	r1, #69	; 0x45
    5b7a:	d121      	bne.n	5bc0 <cbvprintf+0xb44>
		if (decexp < 0) {
    5b7c:	2b00      	cmp	r3, #0
		*buf++ = c;
    5b7e:	4629      	mov	r1, r5
			decexp = -decexp;
    5b80:	bfb8      	it	lt
    5b82:	425b      	neglt	r3, r3
		*buf++ = c;
    5b84:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    5b88:	bfb4      	ite	lt
    5b8a:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    5b8c:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    5b8e:	2b63      	cmp	r3, #99	; 0x63
    5b90:	706a      	strb	r2, [r5, #1]
    5b92:	dd09      	ble.n	5ba8 <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    5b94:	2064      	movs	r0, #100	; 0x64
    5b96:	fbb3 f2f0 	udiv	r2, r3, r0
    5b9a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    5b9e:	1ce9      	adds	r1, r5, #3
    5ba0:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    5ba4:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    5ba8:	200a      	movs	r0, #10
    5baa:	460d      	mov	r5, r1
    5bac:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    5bb0:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    5bb4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    5bb8:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    5bba:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    5bbe:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    5bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	dc43      	bgt.n	5c4e <cbvprintf+0xbd2>
    5bc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5bc8:	2b00      	cmp	r3, #0
    5bca:	bfd4      	ite	le
    5bcc:	2300      	movle	r3, #0
    5bce:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    5bd0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    5bd4:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    5bd8:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    5bda:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    5bde:	702b      	strb	r3, [r5, #0]
	return bps;
    5be0:	e5f8      	b.n	57d4 <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    5be2:	a907      	add	r1, sp, #28
    5be4:	a808      	add	r0, sp, #32
    5be6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5bea:	f015 fd62 	bl	1b6b2 <_get_digit>
		if (*buf++ != '0') {
    5bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    5bf2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    5bf6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    5bfa:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    5bfc:	bf18      	it	ne
    5bfe:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    5c02:	0688      	lsls	r0, r1, #26
    5c04:	d402      	bmi.n	5c0c <cbvprintf+0xb90>
    5c06:	f1b8 0f00 	cmp.w	r8, #0
    5c0a:	dd12      	ble.n	5c32 <cbvprintf+0xbb6>
			*buf++ = '.';
    5c0c:	212e      	movs	r1, #46	; 0x2e
    5c0e:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    5c12:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    5c16:	e7a2      	b.n	5b5e <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    5c18:	a907      	add	r1, sp, #28
    5c1a:	a808      	add	r0, sp, #32
    5c1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5c20:	f015 fd47 	bl	1b6b2 <_get_digit>
		precision--;
    5c24:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    5c2c:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    5c30:	e795      	b.n	5b5e <cbvprintf+0xae2>
		if (*buf++ != '0') {
    5c32:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    5c36:	e798      	b.n	5b6a <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    5c38:	2100      	movs	r1, #0
    5c3a:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    5c3c:	4628      	mov	r0, r5
    5c3e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    5c42:	2930      	cmp	r1, #48	; 0x30
    5c44:	d0fa      	beq.n	5c3c <cbvprintf+0xbc0>
		if (*buf != '.') {
    5c46:	292e      	cmp	r1, #46	; 0x2e
    5c48:	bf18      	it	ne
    5c4a:	4605      	movne	r5, r0
    5c4c:	e792      	b.n	5b74 <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    5c4e:	2301      	movs	r3, #1
    5c50:	e7be      	b.n	5bd0 <cbvprintf+0xb54>
			bpe = bps + 5;
    5c52:	4d4b      	ldr	r5, [pc, #300]	; (5d80 <cbvprintf+0xd04>)
		char sign = 0;
    5c54:	4607      	mov	r7, r0
			bps = "(nil)";
    5c56:	1f6a      	subs	r2, r5, #5
    5c58:	e5bd      	b.n	57d6 <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    5c5a:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    5c5c:	bf48      	it	mi
    5c5e:	3301      	addmi	r3, #1
    5c60:	e5c2      	b.n	57e8 <cbvprintf+0x76c>
					OUTC(pad);
    5c62:	4651      	mov	r1, sl
    5c64:	4640      	mov	r0, r8
    5c66:	9203      	str	r2, [sp, #12]
    5c68:	47c8      	blx	r9
    5c6a:	2800      	cmp	r0, #0
    5c6c:	9a03      	ldr	r2, [sp, #12]
    5c6e:	f6bf addf 	bge.w	5830 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    5c72:	b01b      	add	sp, #108	; 0x6c
    5c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    5c78:	f04f 0820 	mov.w	r8, #32
    5c7c:	e5d7      	b.n	582e <cbvprintf+0x7b2>
					pad = '0';
    5c7e:	f04f 0830 	mov.w	r8, #48	; 0x30
    5c82:	e5d4      	b.n	582e <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    5c84:	4690      	mov	r8, r2
    5c86:	9b03      	ldr	r3, [sp, #12]
    5c88:	4647      	mov	r7, r8
    5c8a:	4443      	add	r3, r8
				while (*cp != 'p') {
    5c8c:	f818 0b01 	ldrb.w	r0, [r8], #1
    5c90:	2870      	cmp	r0, #112	; 0x70
    5c92:	d11e      	bne.n	5cd2 <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    5c94:	461e      	mov	r6, r3
    5c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5c98:	eb03 0806 	add.w	r8, r3, r6
    5c9c:	eba8 0306 	sub.w	r3, r8, r6
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	dc3b      	bgt.n	5d1c <cbvprintf+0xca0>
			OUTS(cp, bpe);
    5ca4:	462b      	mov	r3, r5
    5ca6:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    5ca8:	4651      	mov	r1, sl
    5caa:	4648      	mov	r0, r9
    5cac:	f015 fd5e 	bl	1b76c <outs>
    5cb0:	2800      	cmp	r0, #0
    5cb2:	dbde      	blt.n	5c72 <cbvprintf+0xbf6>
    5cb4:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    5cb6:	4606      	mov	r6, r0
    5cb8:	4483      	add	fp, r0
		while (width > 0) {
    5cba:	ebab 0306 	sub.w	r3, fp, r6
    5cbe:	2b00      	cmp	r3, #0
    5cc0:	f77f ac41 	ble.w	5546 <cbvprintf+0x4ca>
			OUTC(' ');
    5cc4:	4651      	mov	r1, sl
    5cc6:	2020      	movs	r0, #32
    5cc8:	47c8      	blx	r9
    5cca:	2800      	cmp	r0, #0
    5ccc:	dbd1      	blt.n	5c72 <cbvprintf+0xbf6>
    5cce:	3601      	adds	r6, #1
			--width;
    5cd0:	e7f3      	b.n	5cba <cbvprintf+0xc3e>
					OUTC(*cp++);
    5cd2:	4651      	mov	r1, sl
    5cd4:	47c8      	blx	r9
    5cd6:	2800      	cmp	r0, #0
    5cd8:	dad5      	bge.n	5c86 <cbvprintf+0xc0a>
    5cda:	e7ca      	b.n	5c72 <cbvprintf+0xbf6>
					OUTC(*cp++);
    5cdc:	4651      	mov	r1, sl
    5cde:	47c8      	blx	r9
    5ce0:	2800      	cmp	r0, #0
    5ce2:	f6bf adc6 	bge.w	5872 <cbvprintf+0x7f6>
    5ce6:	e7c4      	b.n	5c72 <cbvprintf+0xbf6>
						OUTC('0');
    5ce8:	4651      	mov	r1, sl
    5cea:	2030      	movs	r0, #48	; 0x30
    5cec:	47c8      	blx	r9
    5cee:	2800      	cmp	r0, #0
    5cf0:	f6bf add1 	bge.w	5896 <cbvprintf+0x81a>
    5cf4:	e7bd      	b.n	5c72 <cbvprintf+0xbf6>
						OUTC('0');
    5cf6:	4651      	mov	r1, sl
    5cf8:	2030      	movs	r0, #48	; 0x30
    5cfa:	47c8      	blx	r9
    5cfc:	3f01      	subs	r7, #1
    5cfe:	e5d8      	b.n	58b2 <cbvprintf+0x836>
					OUTC(*cp++);
    5d00:	4651      	mov	r1, sl
    5d02:	47c8      	blx	r9
    5d04:	2800      	cmp	r0, #0
    5d06:	dbb4      	blt.n	5c72 <cbvprintf+0xbf6>
    5d08:	4647      	mov	r7, r8
    5d0a:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    5d0e:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5d12:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    5d16:	2a09      	cmp	r2, #9
    5d18:	d9f2      	bls.n	5d00 <cbvprintf+0xc84>
    5d1a:	e7bb      	b.n	5c94 <cbvprintf+0xc18>
				OUTC('0');
    5d1c:	4651      	mov	r1, sl
    5d1e:	2030      	movs	r0, #48	; 0x30
    5d20:	47c8      	blx	r9
    5d22:	2800      	cmp	r0, #0
    5d24:	dba5      	blt.n	5c72 <cbvprintf+0xbf6>
    5d26:	3601      	adds	r6, #1
    5d28:	e7b8      	b.n	5c9c <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    5d2a:	06d8      	lsls	r0, r3, #27
    5d2c:	d401      	bmi.n	5d32 <cbvprintf+0xcb6>
    5d2e:	0719      	lsls	r1, r3, #28
    5d30:	d507      	bpl.n	5d42 <cbvprintf+0xcc6>
				OUTC('0');
    5d32:	4651      	mov	r1, sl
    5d34:	2030      	movs	r0, #48	; 0x30
    5d36:	9203      	str	r2, [sp, #12]
    5d38:	47c8      	blx	r9
    5d3a:	2800      	cmp	r0, #0
    5d3c:	db99      	blt.n	5c72 <cbvprintf+0xbf6>
    5d3e:	9a03      	ldr	r2, [sp, #12]
    5d40:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    5d42:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5d46:	06db      	lsls	r3, r3, #27
    5d48:	d508      	bpl.n	5d5c <cbvprintf+0xce0>
				OUTC(conv->specifier);
    5d4a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5d4e:	9203      	str	r2, [sp, #12]
    5d50:	4651      	mov	r1, sl
    5d52:	47c8      	blx	r9
    5d54:	2800      	cmp	r0, #0
    5d56:	db8c      	blt.n	5c72 <cbvprintf+0xbf6>
    5d58:	9a03      	ldr	r2, [sp, #12]
    5d5a:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    5d5c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5d5e:	4437      	add	r7, r6
    5d60:	1bbb      	subs	r3, r7, r6
    5d62:	2b00      	cmp	r3, #0
    5d64:	dc01      	bgt.n	5d6a <cbvprintf+0xcee>
			OUTS(bps, bpe);
    5d66:	462b      	mov	r3, r5
    5d68:	e79e      	b.n	5ca8 <cbvprintf+0xc2c>
				OUTC('0');
    5d6a:	4651      	mov	r1, sl
    5d6c:	2030      	movs	r0, #48	; 0x30
    5d6e:	9203      	str	r2, [sp, #12]
    5d70:	47c8      	blx	r9
    5d72:	2800      	cmp	r0, #0
    5d74:	f6ff af7d 	blt.w	5c72 <cbvprintf+0xbf6>
    5d78:	9a03      	ldr	r2, [sp, #12]
    5d7a:	3601      	adds	r6, #1
    5d7c:	e7f0      	b.n	5d60 <cbvprintf+0xce4>
    5d7e:	bf00      	nop
    5d80:	000217d7 	.word	0x000217d7

00005d84 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    5d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d88:	4605      	mov	r5, r0
    5d8a:	f04f 0320 	mov.w	r3, #32
    5d8e:	f3ef 8611 	mrs	r6, BASEPRI
    5d92:	f383 8812 	msr	BASEPRI_MAX, r3
    5d96:	f3bf 8f6f 	isb	sy
	return list->head;
    5d9a:	4b0e      	ldr	r3, [pc, #56]	; (5dd4 <pm_state_notify+0x50>)
    5d9c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5d9e:	b19c      	cbz	r4, 5dc8 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    5da0:	4f0d      	ldr	r7, [pc, #52]	; (5dd8 <pm_state_notify+0x54>)
    5da2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 5ddc <pm_state_notify+0x58>
    5da6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    5daa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    5dae:	2d00      	cmp	r5, #0
    5db0:	bf08      	it	eq
    5db2:	4613      	moveq	r3, r2
		if (callback) {
    5db4:	b12b      	cbz	r3, 5dc2 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    5db6:	f898 2014 	ldrb.w	r2, [r8, #20]
    5dba:	fb09 f202 	mul.w	r2, r9, r2
    5dbe:	5cb8      	ldrb	r0, [r7, r2]
    5dc0:	4798      	blx	r3
	return node->next;
    5dc2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5dc4:	2c00      	cmp	r4, #0
    5dc6:	d1f0      	bne.n	5daa <pm_state_notify+0x26>
	__asm__ volatile(
    5dc8:	f386 8811 	msr	BASEPRI, r6
    5dcc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    5dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5dd4:	2000178c 	.word	0x2000178c
    5dd8:	20001794 	.word	0x20001794
    5ddc:	20002d00 	.word	0x20002d00

00005de0 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5de0:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    5de2:	2301      	movs	r3, #1
    5de4:	f000 001f 	and.w	r0, r0, #31
    5de8:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5dec:	4b07      	ldr	r3, [pc, #28]	; (5e0c <atomic_clear_bit.constprop.0+0x2c>)
    5dee:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5df2:	43c0      	mvns	r0, r0
    5df4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5df8:	e853 2f00 	ldrex	r2, [r3]
    5dfc:	4002      	ands	r2, r0
    5dfe:	e843 2100 	strex	r1, r2, [r3]
    5e02:	2900      	cmp	r1, #0
    5e04:	d1f8      	bne.n	5df8 <atomic_clear_bit.constprop.0+0x18>
    5e06:	f3bf 8f5b 	dmb	ish
}
    5e0a:	4770      	bx	lr
    5e0c:	200017a0 	.word	0x200017a0

00005e10 <pm_system_resume>:

void pm_system_resume(void)
{
    5e10:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    5e12:	4b1d      	ldr	r3, [pc, #116]	; (5e88 <pm_system_resume+0x78>)
    5e14:	7d1c      	ldrb	r4, [r3, #20]
    5e16:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    5e1a:	f004 031f 	and.w	r3, r4, #31
    5e1e:	2201      	movs	r2, #1
    5e20:	409a      	lsls	r2, r3
    5e22:	4b1a      	ldr	r3, [pc, #104]	; (5e8c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5e24:	0961      	lsrs	r1, r4, #5
{
    5e26:	b085      	sub	sp, #20
    5e28:	43d0      	mvns	r0, r2
    5e2a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5e2e:	e853 1f00 	ldrex	r1, [r3]
    5e32:	ea01 0500 	and.w	r5, r1, r0
    5e36:	e843 5c00 	strex	ip, r5, [r3]
    5e3a:	f1bc 0f00 	cmp.w	ip, #0
    5e3e:	d1f6      	bne.n	5e2e <pm_system_resume+0x1e>
    5e40:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    5e44:	4211      	tst	r1, r2
    5e46:	d017      	beq.n	5e78 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    5e48:	4d11      	ldr	r5, [pc, #68]	; (5e90 <pm_system_resume+0x80>)
    5e4a:	220c      	movs	r2, #12
    5e4c:	fb02 5204 	mla	r2, r2, r4, r5
    5e50:	ca07      	ldmia	r2, {r0, r1, r2}
    5e52:	ab01      	add	r3, sp, #4
    5e54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    5e58:	4a0e      	ldr	r2, [pc, #56]	; (5e94 <pm_system_resume+0x84>)
    5e5a:	b17a      	cbz	r2, 5e7c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    5e5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5e60:	f015 ff9c 	bl	1bd9c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    5e64:	2000      	movs	r0, #0
    5e66:	f7ff ff8d 	bl	5d84 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    5e6a:	230c      	movs	r3, #12
    5e6c:	435c      	muls	r4, r3
    5e6e:	192a      	adds	r2, r5, r4
    5e70:	2300      	movs	r3, #0
    5e72:	512b      	str	r3, [r5, r4]
    5e74:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    5e78:	b005      	add	sp, #20
    5e7a:	bd30      	pop	{r4, r5, pc}
    5e7c:	f382 8811 	msr	BASEPRI, r2
    5e80:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5e84:	e7ee      	b.n	5e64 <pm_system_resume+0x54>
    5e86:	bf00      	nop
    5e88:	20002d00 	.word	0x20002d00
    5e8c:	200017a4 	.word	0x200017a4
    5e90:	20001794 	.word	0x20001794
    5e94:	0001bd9d 	.word	0x0001bd9d

00005e98 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    5e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    5e9c:	4b35      	ldr	r3, [pc, #212]	; (5f74 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5e9e:	4a36      	ldr	r2, [pc, #216]	; (5f78 <pm_system_suspend+0xe0>)
    5ea0:	7d1c      	ldrb	r4, [r3, #20]
    5ea2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5ea6:	0963      	lsrs	r3, r4, #5
    5ea8:	ea4f 0983 	mov.w	r9, r3, lsl #2
    5eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5eb0:	4d32      	ldr	r5, [pc, #200]	; (5f7c <pm_system_suspend+0xe4>)
    5eb2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5eb6:	f004 081f 	and.w	r8, r4, #31
    5eba:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    5ebe:	f013 0f01 	tst.w	r3, #1
{
    5ec2:	b085      	sub	sp, #20
    5ec4:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    5ec6:	d10a      	bne.n	5ede <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    5ec8:	4601      	mov	r1, r0
    5eca:	4620      	mov	r0, r4
    5ecc:	f000 f876 	bl	5fbc <pm_policy_next_state>
		if (info != NULL) {
    5ed0:	b128      	cbz	r0, 5ede <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    5ed2:	c807      	ldmia	r0, {r0, r1, r2}
    5ed4:	230c      	movs	r3, #12
    5ed6:	fb03 5304 	mla	r3, r3, r4, r5
    5eda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    5ede:	230c      	movs	r3, #12
    5ee0:	4363      	muls	r3, r4
    5ee2:	18ea      	adds	r2, r5, r3
    5ee4:	5cee      	ldrb	r6, [r5, r3]
    5ee6:	b936      	cbnz	r6, 5ef6 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    5ee8:	4620      	mov	r0, r4
    5eea:	f7ff ff79 	bl	5de0 <atomic_clear_bit.constprop.0>
		ret = false;
    5eee:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    5ef0:	b005      	add	sp, #20
    5ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    5ef6:	1c7b      	adds	r3, r7, #1
    5ef8:	d00f      	beq.n	5f1a <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    5efa:	f8d2 c008 	ldr.w	ip, [r2, #8]
    5efe:	4820      	ldr	r0, [pc, #128]	; (5f80 <pm_system_suspend+0xe8>)
    5f00:	4a20      	ldr	r2, [pc, #128]	; (5f84 <pm_system_suspend+0xec>)
    5f02:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5f06:	2100      	movs	r1, #0
    5f08:	2300      	movs	r3, #0
    5f0a:	fbec 0106 	umlal	r0, r1, ip, r6
    5f0e:	f7fa fdfd 	bl	b0c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    5f12:	2101      	movs	r1, #1
    5f14:	1a38      	subs	r0, r7, r0
    5f16:	f019 fc64 	bl	1f7e2 <z_set_timeout_expiry>
	k_sched_lock();
    5f1a:	f014 fb85 	bl	1a628 <k_sched_lock>
	pm_state_notify(true);
    5f1e:	2001      	movs	r0, #1
    5f20:	f7ff ff30 	bl	5d84 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5f24:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5f28:	2301      	movs	r3, #1
    5f2a:	fa03 f808 	lsl.w	r8, r3, r8
    5f2e:	4b16      	ldr	r3, [pc, #88]	; (5f88 <pm_system_suspend+0xf0>)
    5f30:	4499      	add	r9, r3
    5f32:	e859 3f00 	ldrex	r3, [r9]
    5f36:	ea43 0308 	orr.w	r3, r3, r8
    5f3a:	e849 3200 	strex	r2, r3, [r9]
    5f3e:	2a00      	cmp	r2, #0
    5f40:	d1f7      	bne.n	5f32 <pm_system_suspend+0x9a>
    5f42:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    5f46:	230c      	movs	r3, #12
    5f48:	fb03 5504 	mla	r5, r3, r4, r5
    5f4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    5f50:	ab01      	add	r3, sp, #4
    5f52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    5f56:	4a0d      	ldr	r2, [pc, #52]	; (5f8c <pm_system_suspend+0xf4>)
    5f58:	b11a      	cbz	r2, 5f62 <pm_system_suspend+0xca>
		pm_power_state_set(info);
    5f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5f5e:	f015 ff0a 	bl	1bd76 <pm_power_state_set>
	pm_system_resume();
    5f62:	f7ff ff55 	bl	5e10 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    5f66:	4620      	mov	r0, r4
    5f68:	f7ff ff3a 	bl	5de0 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    5f6c:	f014 fce2 	bl	1a934 <k_sched_unlock>
	bool ret = true;
    5f70:	2001      	movs	r0, #1
    5f72:	e7bd      	b.n	5ef0 <pm_system_suspend+0x58>
    5f74:	20002d00 	.word	0x20002d00
    5f78:	200017a0 	.word	0x200017a0
    5f7c:	20001794 	.word	0x20001794
    5f80:	000f423f 	.word	0x000f423f
    5f84:	000f4240 	.word	0x000f4240
    5f88:	200017a4 	.word	0x200017a4
    5f8c:	0001bd77 	.word	0x0001bd77

00005f90 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f90:	4b05      	ldr	r3, [pc, #20]	; (5fa8 <pm_constraint_get+0x18>)
    5f92:	f3bf 8f5b 	dmb	ish
    5f96:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5f9a:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    5f9e:	fab0 f080 	clz	r0, r0
    5fa2:	0940      	lsrs	r0, r0, #5
    5fa4:	4770      	bx	lr
    5fa6:	bf00      	nop
    5fa8:	200017a8 	.word	0x200017a8

00005fac <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    5fac:	b908      	cbnz	r0, 5fb2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    5fae:	4b02      	ldr	r3, [pc, #8]	; (5fb8 <pm_state_cpu_get_all+0xc>)
    5fb0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    5fb2:	2000      	movs	r0, #0
    5fb4:	4770      	bx	lr
    5fb6:	bf00      	nop
    5fb8:	00020088 	.word	0x00020088

00005fbc <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    5fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fc0:	b085      	sub	sp, #20
    5fc2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5fc4:	a903      	add	r1, sp, #12
    5fc6:	f7ff fff1 	bl	5fac <pm_state_cpu_get_all>
    5fca:	f8df a074 	ldr.w	sl, [pc, #116]	; 6040 <pm_policy_next_state+0x84>
    5fce:	f8df 8074 	ldr.w	r8, [pc, #116]	; 6044 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5fd2:	1e44      	subs	r4, r0, #1
    5fd4:	b224      	sxth	r4, r4
    5fd6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5fda:	f04f 0900 	mov.w	r9, #0
    5fde:	1c63      	adds	r3, r4, #1
    5fe0:	d104      	bne.n	5fec <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    5fe2:	2500      	movs	r5, #0
}
    5fe4:	4628      	mov	r0, r5
    5fe6:	b005      	add	sp, #20
    5fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    5fec:	9a03      	ldr	r2, [sp, #12]
    5fee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    5ff2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    5ff6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    5ffa:	f7ff ffc9 	bl	5f90 <pm_constraint_get>
    5ffe:	b1e0      	cbz	r0, 603a <pm_policy_next_state+0x7e>
    6000:	6868      	ldr	r0, [r5, #4]
    6002:	f04f 0b00 	mov.w	fp, #0
    6006:	46d4      	mov	ip, sl
    6008:	4659      	mov	r1, fp
    600a:	fbe0 c107 	umlal	ip, r1, r0, r7
    600e:	4642      	mov	r2, r8
    6010:	464b      	mov	r3, r9
    6012:	4660      	mov	r0, ip
    6014:	f7fa fd7a 	bl	b0c <__aeabi_uldivmod>
    6018:	9001      	str	r0, [sp, #4]
    601a:	68a8      	ldr	r0, [r5, #8]
    601c:	46d4      	mov	ip, sl
    601e:	4659      	mov	r1, fp
    6020:	fbe0 c107 	umlal	ip, r1, r0, r7
    6024:	4642      	mov	r2, r8
    6026:	464b      	mov	r3, r9
    6028:	4660      	mov	r0, ip
    602a:	f7fa fd6f 	bl	b0c <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    602e:	1c72      	adds	r2, r6, #1
    6030:	d0d8      	beq.n	5fe4 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    6032:	9b01      	ldr	r3, [sp, #4]
    6034:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    6036:	42b0      	cmp	r0, r6
    6038:	d9d4      	bls.n	5fe4 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    603a:	3c01      	subs	r4, #1
    603c:	b224      	sxth	r4, r4
    603e:	e7ce      	b.n	5fde <pm_policy_next_state+0x22>
    6040:	000f423f 	.word	0x000f423f
    6044:	000f4240 	.word	0x000f4240

00006048 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    6048:	4904      	ldr	r1, [pc, #16]	; (605c <sub_bytes+0x14>)
    604a:	1e43      	subs	r3, r0, #1
    604c:	300f      	adds	r0, #15
    604e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6052:	5c8a      	ldrb	r2, [r1, r2]
    6054:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    6056:	4283      	cmp	r3, r0
    6058:	d1f9      	bne.n	604e <sub_bytes+0x6>
	}
}
    605a:	4770      	bx	lr
    605c:	000217d8 	.word	0x000217d8

00006060 <tc_aes128_set_encrypt_key>:
{
    6060:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    6062:	4e26      	ldr	r6, [pc, #152]	; (60fc <tc_aes128_set_encrypt_key+0x9c>)
{
    6064:	4607      	mov	r7, r0
    6066:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    6068:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    606a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    606c:	ad01      	add	r5, sp, #4
    606e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6070:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6074:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    6078:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    607c:	4638      	mov	r0, r7
    607e:	2f00      	cmp	r7, #0
    6080:	d038      	beq.n	60f4 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    6082:	2c00      	cmp	r4, #0
    6084:	d038      	beq.n	60f8 <tc_aes128_set_encrypt_key+0x98>
    6086:	1f38      	subs	r0, r7, #4
    6088:	4621      	mov	r1, r4
    608a:	4602      	mov	r2, r0
    608c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    608e:	784b      	ldrb	r3, [r1, #1]
    6090:	780d      	ldrb	r5, [r1, #0]
    6092:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6094:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6098:	78cd      	ldrb	r5, [r1, #3]
    609a:	432b      	orrs	r3, r5
    609c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    609e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    60a0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    60a4:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    60a6:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    60aa:	d1f0      	bne.n	608e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    60ac:	4c14      	ldr	r4, [pc, #80]	; (6100 <tc_aes128_set_encrypt_key+0xa0>)
    60ae:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    60b0:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    60b2:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    60b4:	d116      	bne.n	60e4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    60b6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    60ba:	5ca5      	ldrb	r5, [r4, r2]
    60bc:	0e1a      	lsrs	r2, r3, #24
    60be:	5ca2      	ldrb	r2, [r4, r2]
    60c0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    60c4:	f3c3 2507 	ubfx	r5, r3, #8, #8
    60c8:	b2db      	uxtb	r3, r3
    60ca:	5d65      	ldrb	r5, [r4, r5]
    60cc:	5ce3      	ldrb	r3, [r4, r3]
    60ce:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    60d2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    60d6:	ad0c      	add	r5, sp, #48	; 0x30
    60d8:	f021 0303 	bic.w	r3, r1, #3
    60dc:	442b      	add	r3, r5
    60de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    60e2:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    60e4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    60e8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    60ea:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    60ec:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    60ee:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    60f0:	d1de      	bne.n	60b0 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    60f2:	2001      	movs	r0, #1
}
    60f4:	b00d      	add	sp, #52	; 0x34
    60f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    60f8:	4620      	mov	r0, r4
    60fa:	e7fb      	b.n	60f4 <tc_aes128_set_encrypt_key+0x94>
    60fc:	00020014 	.word	0x00020014
    6100:	000217d8 	.word	0x000217d8

00006104 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    6104:	4901      	ldr	r1, [pc, #4]	; (610c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    6106:	2210      	movs	r2, #16
	str	r2, [r1]
    6108:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    610a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    610c:	e000ed10 	.word	0xe000ed10

00006110 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6110:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    6112:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    6114:	f380 8811 	msr	BASEPRI, r0
	isb
    6118:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    611c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    6120:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    6122:	b662      	cpsie	i
	isb
    6124:	f3bf 8f6f 	isb	sy

	bx	lr
    6128:	4770      	bx	lr
    612a:	bf00      	nop

0000612c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    612c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    612e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6130:	f381 8811 	msr	BASEPRI, r1

	wfe
    6134:	bf20      	wfe

	msr	BASEPRI, r0
    6136:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    613a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    613c:	4770      	bx	lr
    613e:	bf00      	nop

00006140 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6140:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6142:	2b00      	cmp	r3, #0
    6144:	db08      	blt.n	6158 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6146:	2201      	movs	r2, #1
    6148:	f000 001f 	and.w	r0, r0, #31
    614c:	fa02 f000 	lsl.w	r0, r2, r0
    6150:	095b      	lsrs	r3, r3, #5
    6152:	4a02      	ldr	r2, [pc, #8]	; (615c <arch_irq_enable+0x1c>)
    6154:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6158:	4770      	bx	lr
    615a:	bf00      	nop
    615c:	e000e100 	.word	0xe000e100

00006160 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6160:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6162:	2b00      	cmp	r3, #0
    6164:	db0d      	blt.n	6182 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6166:	2201      	movs	r2, #1
    6168:	095b      	lsrs	r3, r3, #5
    616a:	f000 001f 	and.w	r0, r0, #31
    616e:	fa02 f000 	lsl.w	r0, r2, r0
    6172:	3320      	adds	r3, #32
    6174:	4a03      	ldr	r2, [pc, #12]	; (6184 <arch_irq_disable+0x24>)
    6176:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    617a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    617e:	f3bf 8f6f 	isb	sy
}
    6182:	4770      	bx	lr
    6184:	e000e100 	.word	0xe000e100

00006188 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6188:	4b05      	ldr	r3, [pc, #20]	; (61a0 <arch_irq_is_enabled+0x18>)
    618a:	0942      	lsrs	r2, r0, #5
    618c:	f000 001f 	and.w	r0, r0, #31
    6190:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6194:	2301      	movs	r3, #1
    6196:	fa03 f000 	lsl.w	r0, r3, r0
}
    619a:	4010      	ands	r0, r2
    619c:	4770      	bx	lr
    619e:	bf00      	nop
    61a0:	e000e100 	.word	0xe000e100

000061a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    61a4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    61a6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    61a8:	bfa8      	it	ge
    61aa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    61ae:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    61b2:	bfb8      	it	lt
    61b4:	4b06      	ldrlt	r3, [pc, #24]	; (61d0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    61b6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    61ba:	bfac      	ite	ge
    61bc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    61c0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    61c4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    61c6:	bfb4      	ite	lt
    61c8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    61ca:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    61ce:	4770      	bx	lr
    61d0:	e000ed14 	.word	0xe000ed14

000061d4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    61d4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    61d6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    61d8:	4b04      	ldr	r3, [pc, #16]	; (61ec <_arch_isr_direct_pm+0x18>)
    61da:	699a      	ldr	r2, [r3, #24]
    61dc:	b11a      	cbz	r2, 61e6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    61de:	2200      	movs	r2, #0
    61e0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    61e2:	f019 f82f 	bl	1f244 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    61e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    61e8:	bd08      	pop	{r3, pc}
    61ea:	bf00      	nop
    61ec:	20002d00 	.word	0x20002d00

000061f0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    61f0:	bf30      	wfi
    b z_SysNmiOnReset
    61f2:	f7ff bffd 	b.w	61f0 <z_SysNmiOnReset>
    61f6:	bf00      	nop

000061f8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    61f8:	4a0f      	ldr	r2, [pc, #60]	; (6238 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    61fa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    61fc:	4b0f      	ldr	r3, [pc, #60]	; (623c <z_arm_prep_c+0x44>)
    61fe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6202:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6208:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    620c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6210:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    6218:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    621c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    6220:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    6224:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    6228:	f013 fdae 	bl	19d88 <z_bss_zero>
	z_data_copy();
    622c:	f014 fcc6 	bl	1abbc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    6230:	f000 f9ca 	bl	65c8 <z_arm_interrupt_init>
	z_cstart();
    6234:	f013 fdb2 	bl	19d9c <z_cstart>
    6238:	00000000 	.word	0x00000000
    623c:	e000ed00 	.word	0xe000ed00

00006240 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6240:	4a09      	ldr	r2, [pc, #36]	; (6268 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6242:	490a      	ldr	r1, [pc, #40]	; (626c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    6244:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    6246:	6809      	ldr	r1, [r1, #0]
    6248:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    624a:	4909      	ldr	r1, [pc, #36]	; (6270 <arch_swap+0x30>)
	_current->arch.basepri = key;
    624c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    624e:	684b      	ldr	r3, [r1, #4]
    6250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6254:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    6256:	2300      	movs	r3, #0
    6258:	f383 8811 	msr	BASEPRI, r3
    625c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6260:	6893      	ldr	r3, [r2, #8]
}
    6262:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    6264:	4770      	bx	lr
    6266:	bf00      	nop
    6268:	20002d00 	.word	0x20002d00
    626c:	00021378 	.word	0x00021378
    6270:	e000ed00 	.word	0xe000ed00

00006274 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6274:	4912      	ldr	r1, [pc, #72]	; (62c0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6276:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6278:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    627c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    627e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6282:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6286:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    6288:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    628c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6290:	4f0c      	ldr	r7, [pc, #48]	; (62c4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    6292:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    6296:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    6298:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    629a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    629c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    629e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    62a0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    62a2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    62a6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    62a8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    62aa:	f000 f9cf 	bl	664c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    62ae:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    62b2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    62b6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    62ba:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    62be:	4770      	bx	lr
    ldr r1, =_kernel
    62c0:	20002d00 	.word	0x20002d00
    ldr v4, =_SCS_ICSR
    62c4:	e000ed04 	.word	0xe000ed04

000062c8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    62c8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    62cc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    62ce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    62d2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    62d6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    62d8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    62dc:	2902      	cmp	r1, #2
    beq _oops
    62de:	d0ff      	beq.n	62e0 <_oops>

000062e0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    62e0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    62e2:	f015 fcdc 	bl	1bc9e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    62e6:	bd01      	pop	{r0, pc}

000062e8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    62e8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    62ec:	9b00      	ldr	r3, [sp, #0]
    62ee:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    62f2:	490a      	ldr	r1, [pc, #40]	; (631c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    62f4:	9b01      	ldr	r3, [sp, #4]
    62f6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    62fa:	9b02      	ldr	r3, [sp, #8]
    62fc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    6300:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6308:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    630c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    6310:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    6312:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6314:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    6316:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6318:	4770      	bx	lr
    631a:	bf00      	nop
    631c:	0001b2e3 	.word	0x0001b2e3

00006320 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    6320:	4a09      	ldr	r2, [pc, #36]	; (6348 <z_check_thread_stack_fail+0x28>)
{
    6322:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    6324:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    6326:	b170      	cbz	r0, 6346 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    6328:	f113 0f16 	cmn.w	r3, #22
    632c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    632e:	d005      	beq.n	633c <z_check_thread_stack_fail+0x1c>
    6330:	f1a0 0220 	sub.w	r2, r0, #32
    6334:	429a      	cmp	r2, r3
    6336:	d805      	bhi.n	6344 <z_check_thread_stack_fail+0x24>
    6338:	4283      	cmp	r3, r0
    633a:	d203      	bcs.n	6344 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    633c:	4281      	cmp	r1, r0
    633e:	bf28      	it	cs
    6340:	2000      	movcs	r0, #0
    6342:	4770      	bx	lr
    6344:	2000      	movs	r0, #0
}
    6346:	4770      	bx	lr
    6348:	20002d00 	.word	0x20002d00

0000634c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    634c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    634e:	4b09      	ldr	r3, [pc, #36]	; (6374 <arch_switch_to_main_thread+0x28>)
    6350:	6098      	str	r0, [r3, #8]
{
    6352:	460d      	mov	r5, r1
    6354:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    6356:	f000 f979 	bl	664c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    635a:	4620      	mov	r0, r4
    635c:	f385 8809 	msr	PSP, r5
    6360:	2100      	movs	r1, #0
    6362:	b663      	cpsie	if
    6364:	f381 8811 	msr	BASEPRI, r1
    6368:	f3bf 8f6f 	isb	sy
    636c:	2200      	movs	r2, #0
    636e:	2300      	movs	r3, #0
    6370:	f014 ffb7 	bl	1b2e2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6374:	20002d00 	.word	0x20002d00

00006378 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6378:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    637a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    637c:	4a0b      	ldr	r2, [pc, #44]	; (63ac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    637e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    6380:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6382:	bf1e      	ittt	ne
	movne	r1, #0
    6384:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6386:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    6388:	f018 ff5c 	blne	1f244 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    638c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    638e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6392:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6396:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    639a:	4905      	ldr	r1, [pc, #20]	; (63b0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    639c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    639e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    63a0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    63a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    63a6:	4903      	ldr	r1, [pc, #12]	; (63b4 <_isr_wrapper+0x3c>)
	bx r1
    63a8:	4708      	bx	r1
    63aa:	0000      	.short	0x0000
	ldr r2, =_kernel
    63ac:	20002d00 	.word	0x20002d00
	ldr r1, =_sw_isr_table
    63b0:	0001fdd8 	.word	0x0001fdd8
	ldr r1, =z_arm_int_exit
    63b4:	000063b9 	.word	0x000063b9

000063b8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    63b8:	4b04      	ldr	r3, [pc, #16]	; (63cc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    63ba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    63bc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    63be:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    63c0:	d003      	beq.n	63ca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    63c2:	4903      	ldr	r1, [pc, #12]	; (63d0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    63c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    63c8:	600a      	str	r2, [r1, #0]

000063ca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    63ca:	4770      	bx	lr
	ldr r3, =_kernel
    63cc:	20002d00 	.word	0x20002d00
	ldr r1, =_SCS_ICSR
    63d0:	e000ed04 	.word	0xe000ed04

000063d4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    63d4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    63d6:	4b19      	ldr	r3, [pc, #100]	; (643c <mem_manage_fault+0x68>)
{
    63d8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    63da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    63dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    63de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    63e0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    63e2:	0790      	lsls	r0, r2, #30
    63e4:	d519      	bpl.n	641a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    63e6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    63e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    63ea:	0612      	lsls	r2, r2, #24
    63ec:	d515      	bpl.n	641a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    63ee:	b119      	cbz	r1, 63f8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    63f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    63f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    63f6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    63f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    63fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    63fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    63fe:	06d1      	lsls	r1, r2, #27
    6400:	d40e      	bmi.n	6420 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6404:	079a      	lsls	r2, r3, #30
    6406:	d40b      	bmi.n	6420 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6408:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    640a:	4a0c      	ldr	r2, [pc, #48]	; (643c <mem_manage_fault+0x68>)
    640c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    640e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6412:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    6414:	2300      	movs	r3, #0
    6416:	7023      	strb	r3, [r4, #0]

	return reason;
}
    6418:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    641a:	f06f 0015 	mvn.w	r0, #21
    641e:	e7eb      	b.n	63f8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    6420:	4b06      	ldr	r3, [pc, #24]	; (643c <mem_manage_fault+0x68>)
    6422:	685b      	ldr	r3, [r3, #4]
    6424:	051b      	lsls	r3, r3, #20
    6426:	d5ef      	bpl.n	6408 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    6428:	4629      	mov	r1, r5
    642a:	f7ff ff79 	bl	6320 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    642e:	2800      	cmp	r0, #0
    6430:	d0ea      	beq.n	6408 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    6432:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    6436:	2002      	movs	r0, #2
    6438:	e7e7      	b.n	640a <mem_manage_fault+0x36>
    643a:	bf00      	nop
    643c:	e000ed00 	.word	0xe000ed00

00006440 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6440:	4b0d      	ldr	r3, [pc, #52]	; (6478 <bus_fault.constprop.0+0x38>)
    6442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6448:	0592      	lsls	r2, r2, #22
    644a:	d508      	bpl.n	645e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    644c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    644e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6450:	0412      	lsls	r2, r2, #16
    6452:	d504      	bpl.n	645e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    6454:	b118      	cbz	r0, 645e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    645c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    645e:	4b06      	ldr	r3, [pc, #24]	; (6478 <bus_fault.constprop.0+0x38>)
    6460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6464:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6466:	bf58      	it	pl
    6468:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    646a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    646c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    646e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    6472:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6474:	7008      	strb	r0, [r1, #0]

	return reason;
}
    6476:	4770      	bx	lr
    6478:	e000ed00 	.word	0xe000ed00

0000647c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    647c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    647e:	4b48      	ldr	r3, [pc, #288]	; (65a0 <z_arm_fault+0x124>)
    6480:	685b      	ldr	r3, [r3, #4]
{
    6482:	b08a      	sub	sp, #40	; 0x28
    6484:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6486:	f3c3 0308 	ubfx	r3, r3, #0, #9
    648a:	2600      	movs	r6, #0
    648c:	f386 8811 	msr	BASEPRI, r6
    6490:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6494:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    6498:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    649c:	d111      	bne.n	64c2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    649e:	f002 010c 	and.w	r1, r2, #12
    64a2:	2908      	cmp	r1, #8
    64a4:	d00d      	beq.n	64c2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    64a6:	0711      	lsls	r1, r2, #28
    64a8:	d401      	bmi.n	64ae <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    64aa:	4605      	mov	r5, r0
			*nested_exc = true;
    64ac:	2601      	movs	r6, #1
	*recoverable = false;
    64ae:	2200      	movs	r2, #0
	switch (fault) {
    64b0:	3b03      	subs	r3, #3
	*recoverable = false;
    64b2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    64b6:	2b03      	cmp	r3, #3
    64b8:	d86b      	bhi.n	6592 <z_arm_fault+0x116>
    64ba:	e8df f003 	tbb	[pc, r3]
    64be:	5504      	.short	0x5504
    64c0:	5d59      	.short	0x5d59
		return NULL;
    64c2:	4635      	mov	r5, r6
    64c4:	e7f3      	b.n	64ae <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    64c6:	4b36      	ldr	r3, [pc, #216]	; (65a0 <z_arm_fault+0x124>)
    64c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    64ca:	f014 0402 	ands.w	r4, r4, #2
    64ce:	d160      	bne.n	6592 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    64d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    64d2:	2a00      	cmp	r2, #0
    64d4:	db15      	blt.n	6502 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    64d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    64d8:	0052      	lsls	r2, r2, #1
    64da:	d512      	bpl.n	6502 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    64dc:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    64de:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    64e2:	f64d 7202 	movw	r2, #57090	; 0xdf02
    64e6:	4291      	cmp	r1, r2
    64e8:	d00a      	beq.n	6500 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    64ea:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    64ee:	b30a      	cbz	r2, 6534 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    64f0:	f10d 0207 	add.w	r2, sp, #7
    64f4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    64f6:	4628      	mov	r0, r5
    64f8:	f7ff ff6c 	bl	63d4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    64fc:	4604      	mov	r4, r0
		break;
    64fe:	e000      	b.n	6502 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    6500:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6502:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6506:	b99b      	cbnz	r3, 6530 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6508:	2220      	movs	r2, #32
    650a:	4629      	mov	r1, r5
    650c:	a802      	add	r0, sp, #8
    650e:	f015 fc0c 	bl	1bd2a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6512:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6514:	2e00      	cmp	r6, #0
    6516:	d03e      	beq.n	6596 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6518:	f3c3 0208 	ubfx	r2, r3, #0, #9
    651c:	b922      	cbnz	r2, 6528 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    651e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6522:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6526:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6528:	a902      	add	r1, sp, #8
    652a:	4620      	mov	r0, r4
    652c:	f015 fbb5 	bl	1bc9a <z_arm_fatal_error>
}
    6530:	b00a      	add	sp, #40	; 0x28
    6532:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    6534:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    6538:	b12a      	cbz	r2, 6546 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    653a:	f10d 0107 	add.w	r1, sp, #7
    653e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6540:	f7ff ff7e 	bl	6440 <bus_fault.constprop.0>
    6544:	e7da      	b.n	64fc <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    6546:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    6548:	b292      	uxth	r2, r2
    654a:	2a00      	cmp	r2, #0
    654c:	d0d9      	beq.n	6502 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    654e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    655a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    655c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    6560:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    6564:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    6566:	e7cc      	b.n	6502 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    6568:	f10d 0207 	add.w	r2, sp, #7
    656c:	2100      	movs	r1, #0
    656e:	e7c2      	b.n	64f6 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    6570:	f10d 0107 	add.w	r1, sp, #7
    6574:	2000      	movs	r0, #0
    6576:	e7e3      	b.n	6540 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6578:	4b09      	ldr	r3, [pc, #36]	; (65a0 <z_arm_fault+0x124>)
    657a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    657c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    657e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6588:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    658c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    6590:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6592:	2400      	movs	r4, #0
    6594:	e7b5      	b.n	6502 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6596:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    659a:	f023 0301 	bic.w	r3, r3, #1
    659e:	e7c2      	b.n	6526 <z_arm_fault+0xaa>
    65a0:	e000ed00 	.word	0xe000ed00

000065a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    65a4:	4a02      	ldr	r2, [pc, #8]	; (65b0 <z_arm_fault_init+0xc>)
    65a6:	6953      	ldr	r3, [r2, #20]
    65a8:	f043 0310 	orr.w	r3, r3, #16
    65ac:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    65ae:	4770      	bx	lr
    65b0:	e000ed00 	.word	0xe000ed00

000065b4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    65b4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    65b8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    65bc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    65be:	4672      	mov	r2, lr
	bl z_arm_fault
    65c0:	f7ff ff5c 	bl	647c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    65c4:	bd01      	pop	{r0, pc}
    65c6:	bf00      	nop

000065c8 <z_arm_interrupt_init>:
    65c8:	4804      	ldr	r0, [pc, #16]	; (65dc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    65ca:	2300      	movs	r3, #0
    65cc:	2120      	movs	r1, #32
    65ce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    65d0:	3301      	adds	r3, #1
    65d2:	2b27      	cmp	r3, #39	; 0x27
    65d4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    65d8:	d1f9      	bne.n	65ce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    65da:	4770      	bx	lr
    65dc:	e000e100 	.word	0xe000e100

000065e0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    65e0:	f019 faa4 	bl	1fb2c <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    65e4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    65e6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    65ea:	4808      	ldr	r0, [pc, #32]	; (660c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    65ec:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    65f0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    65f2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    65f6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    65fa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    65fc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    65fe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6602:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6606:	f7ff fdf7 	bl	61f8 <z_arm_prep_c>
    660a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    660c:	20004e00 	.word	0x20004e00

00006610 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6610:	4b06      	ldr	r3, [pc, #24]	; (662c <z_impl_k_thread_abort+0x1c>)
    6612:	689b      	ldr	r3, [r3, #8]
    6614:	4283      	cmp	r3, r0
    6616:	d107      	bne.n	6628 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6618:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    661c:	b123      	cbz	r3, 6628 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    661e:	4a04      	ldr	r2, [pc, #16]	; (6630 <z_impl_k_thread_abort+0x20>)
    6620:	6853      	ldr	r3, [r2, #4]
    6622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6626:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    6628:	f014 ba64 	b.w	1aaf4 <z_thread_abort>
    662c:	20002d00 	.word	0x20002d00
    6630:	e000ed00 	.word	0xe000ed00

00006634 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6634:	4b02      	ldr	r3, [pc, #8]	; (6640 <z_arm_configure_static_mpu_regions+0xc>)
    6636:	4a03      	ldr	r2, [pc, #12]	; (6644 <z_arm_configure_static_mpu_regions+0x10>)
    6638:	4803      	ldr	r0, [pc, #12]	; (6648 <z_arm_configure_static_mpu_regions+0x14>)
    663a:	2101      	movs	r1, #1
    663c:	f000 b86e 	b.w	671c <arm_core_mpu_configure_static_mpu_regions>
    6640:	20010000 	.word	0x20010000
    6644:	20000000 	.word	0x20000000
    6648:	00020088 	.word	0x00020088

0000664c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    664c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    664e:	4b05      	ldr	r3, [pc, #20]	; (6664 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    6650:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    6652:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    6654:	4a04      	ldr	r2, [pc, #16]	; (6668 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    6656:	2120      	movs	r1, #32
    6658:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    665c:	4618      	mov	r0, r3
    665e:	2101      	movs	r1, #1
    6660:	f000 b866 	b.w	6730 <arm_core_mpu_configure_dynamic_mpu_regions>
    6664:	200017c4 	.word	0x200017c4
    6668:	150b0000 	.word	0x150b0000

0000666c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    666c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    666e:	4f1f      	ldr	r7, [pc, #124]	; (66ec <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6670:	2600      	movs	r6, #0
    6672:	428e      	cmp	r6, r1
    6674:	db01      	blt.n	667a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6676:	4610      	mov	r0, r2
    6678:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    667a:	6844      	ldr	r4, [r0, #4]
    667c:	b39c      	cbz	r4, 66e6 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    667e:	b153      	cbz	r3, 6696 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    6680:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6684:	ea14 0f0c 	tst.w	r4, ip
    6688:	d118      	bne.n	66bc <mpu_configure_regions+0x50>
		&&
    668a:	2c1f      	cmp	r4, #31
    668c:	d916      	bls.n	66bc <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    668e:	6805      	ldr	r5, [r0, #0]
		&&
    6690:	ea1c 0f05 	tst.w	ip, r5
    6694:	d112      	bne.n	66bc <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    6696:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    6698:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    669a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    669e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    66a0:	d90f      	bls.n	66c2 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    66a2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    66a6:	d80e      	bhi.n	66c6 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    66a8:	3c01      	subs	r4, #1
    66aa:	fab4 f484 	clz	r4, r4
    66ae:	f1c4 041f 	rsb	r4, r4, #31
    66b2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    66b4:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    66b6:	ea4c 0404 	orr.w	r4, ip, r4
    66ba:	d906      	bls.n	66ca <mpu_configure_regions+0x5e>
			return -EINVAL;
    66bc:	f06f 0215 	mvn.w	r2, #21
    66c0:	e7d9      	b.n	6676 <mpu_configure_regions+0xa>
		return REGION_32B;
    66c2:	2408      	movs	r4, #8
    66c4:	e7f6      	b.n	66b4 <mpu_configure_regions+0x48>
		return REGION_4G;
    66c6:	243e      	movs	r4, #62	; 0x3e
    66c8:	e7f4      	b.n	66b4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    66ca:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    66ce:	4315      	orrs	r5, r2
    66d0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    66d4:	f044 0401 	orr.w	r4, r4, #1
    66d8:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    66dc:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    66e0:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    66e2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    66e6:	3601      	adds	r6, #1
    66e8:	300c      	adds	r0, #12
    66ea:	e7c2      	b.n	6672 <mpu_configure_regions+0x6>
    66ec:	e000ed00 	.word	0xe000ed00

000066f0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    66f0:	4b04      	ldr	r3, [pc, #16]	; (6704 <arm_core_mpu_enable+0x14>)
    66f2:	2205      	movs	r2, #5
    66f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    66f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    66fc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6700:	4770      	bx	lr
    6702:	bf00      	nop
    6704:	e000ed00 	.word	0xe000ed00

00006708 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6708:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    670c:	4b02      	ldr	r3, [pc, #8]	; (6718 <arm_core_mpu_disable+0x10>)
    670e:	2200      	movs	r2, #0
    6710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6714:	4770      	bx	lr
    6716:	bf00      	nop
    6718:	e000ed00 	.word	0xe000ed00

0000671c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    671c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    671e:	4c03      	ldr	r4, [pc, #12]	; (672c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6720:	2301      	movs	r3, #1
    6722:	7822      	ldrb	r2, [r4, #0]
    6724:	f7ff ffa2 	bl	666c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6728:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    672a:	bd10      	pop	{r4, pc}
    672c:	20002daf 	.word	0x20002daf

00006730 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6730:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    6732:	4a09      	ldr	r2, [pc, #36]	; (6758 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    6734:	2300      	movs	r3, #0
    6736:	7812      	ldrb	r2, [r2, #0]
    6738:	f7ff ff98 	bl	666c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    673c:	f110 0f16 	cmn.w	r0, #22
    6740:	d002      	beq.n	6748 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    6742:	4a06      	ldr	r2, [pc, #24]	; (675c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6744:	2807      	cmp	r0, #7
    6746:	dd00      	ble.n	674a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    6748:	bd08      	pop	{r3, pc}
    674a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    674e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    6752:	3001      	adds	r0, #1
    6754:	e7f6      	b.n	6744 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    6756:	bf00      	nop
    6758:	20002daf 	.word	0x20002daf
    675c:	e000ed00 	.word	0xe000ed00

00006760 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6760:	4914      	ldr	r1, [pc, #80]	; (67b4 <z_arm_mpu_init+0x54>)
    6762:	6808      	ldr	r0, [r1, #0]
    6764:	2808      	cmp	r0, #8
{
    6766:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6768:	d821      	bhi.n	67ae <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    676a:	f7ff ffcd 	bl	6708 <arm_core_mpu_disable>
    676e:	4c12      	ldr	r4, [pc, #72]	; (67b8 <z_arm_mpu_init+0x58>)
    6770:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6772:	2200      	movs	r2, #0
    6774:	4290      	cmp	r0, r2
    6776:	f101 010c 	add.w	r1, r1, #12
    677a:	d105      	bne.n	6788 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    677c:	4b0f      	ldr	r3, [pc, #60]	; (67bc <z_arm_mpu_init+0x5c>)
    677e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    6780:	f7ff ffb6 	bl	66f0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6784:	2000      	movs	r0, #0
}
    6786:	bd10      	pop	{r4, pc}
    6788:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    678c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    6790:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6794:	4313      	orrs	r3, r2
    6796:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    679a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    679e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    67a2:	f043 0301 	orr.w	r3, r3, #1
    67a6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    67aa:	3201      	adds	r2, #1
    67ac:	e7e2      	b.n	6774 <z_arm_mpu_init+0x14>
		return -1;
    67ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    67b2:	e7e8      	b.n	6786 <z_arm_mpu_init+0x26>
    67b4:	00020094 	.word	0x00020094
    67b8:	e000ed00 	.word	0xe000ed00
    67bc:	20002daf 	.word	0x20002daf

000067c0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    67c0:	4b01      	ldr	r3, [pc, #4]	; (67c8 <__stdout_hook_install+0x8>)
    67c2:	6018      	str	r0, [r3, #0]
}
    67c4:	4770      	bx	lr
    67c6:	bf00      	nop
    67c8:	20000270 	.word	0x20000270

000067cc <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    67cc:	3902      	subs	r1, #2
    67ce:	2901      	cmp	r1, #1
    67d0:	d802      	bhi.n	67d8 <z_impl_zephyr_fputc+0xc>
    67d2:	4b03      	ldr	r3, [pc, #12]	; (67e0 <z_impl_zephyr_fputc+0x14>)
    67d4:	681b      	ldr	r3, [r3, #0]
    67d6:	4718      	bx	r3
}
    67d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    67dc:	4770      	bx	lr
    67de:	bf00      	nop
    67e0:	20000270 	.word	0x20000270

000067e4 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    67e4:	b40c      	push	{r2, r3}
    67e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    67e8:	b909      	cbnz	r1, 67ee <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    67ea:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    67ee:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    67f2:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    67f4:	9a06      	ldr	r2, [sp, #24]
    67f6:	4806      	ldr	r0, [pc, #24]	; (6810 <snprintf+0x2c>)
	va_start(vargs, format);
    67f8:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    67fa:	a902      	add	r1, sp, #8
    67fc:	f7fe fc3e 	bl	507c <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    6800:	9b02      	ldr	r3, [sp, #8]
    6802:	2200      	movs	r2, #0
    6804:	701a      	strb	r2, [r3, #0]
	return r;
}
    6806:	b005      	add	sp, #20
    6808:	f85d eb04 	ldr.w	lr, [sp], #4
    680c:	b002      	add	sp, #8
    680e:	4770      	bx	lr
    6810:	0001bd5d 	.word	0x0001bd5d

00006814 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    6814:	b40f      	push	{r0, r1, r2, r3}
    6816:	b507      	push	{r0, r1, r2, lr}
    6818:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    681a:	2102      	movs	r1, #2
{
    681c:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    6820:	4804      	ldr	r0, [pc, #16]	; (6834 <printf+0x20>)
	va_start(vargs, format);
    6822:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    6824:	f7fe fc2a 	bl	507c <cbvprintf>
	va_end(vargs);

	return r;
}
    6828:	b003      	add	sp, #12
    682a:	f85d eb04 	ldr.w	lr, [sp], #4
    682e:	b004      	add	sp, #16
    6830:	4770      	bx	lr
    6832:	bf00      	nop
    6834:	0001bd59 	.word	0x0001bd59

00006838 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    6838:	f04f 0220 	mov.w	r2, #32
    683c:	f3ef 8311 	mrs	r3, BASEPRI
    6840:	f382 8812 	msr	BASEPRI_MAX, r2
    6844:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6848:	4a04      	ldr	r2, [pc, #16]	; (685c <nordicsemi_nrf52_init+0x24>)
    684a:	2101      	movs	r1, #1
    684c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    6850:	f383 8811 	msr	BASEPRI, r3
    6854:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6858:	2000      	movs	r0, #0
    685a:	4770      	bx	lr
    685c:	4001e000 	.word	0x4001e000

00006860 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6860:	b120      	cbz	r0, 686c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    6862:	4b03      	ldr	r3, [pc, #12]	; (6870 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6864:	0180      	lsls	r0, r0, #6
    6866:	f043 0301 	orr.w	r3, r3, #1
    686a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    686c:	4770      	bx	lr
    686e:	bf00      	nop
    6870:	00020060 	.word	0x00020060

00006874 <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    6874:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    6876:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    6878:	6820      	ldr	r0, [r4, #0]
    687a:	f013 fa15 	bl	19ca8 <z_impl_device_get_binding>
	if (!gpio) {
    687e:	b930      	cbnz	r0, 688e <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    6880:	480d      	ldr	r0, [pc, #52]	; (68b8 <pwr_ctrl_init+0x44>)
    6882:	6821      	ldr	r1, [r4, #0]
    6884:	f014 fc17 	bl	1b0b6 <printk>
		return -ENODEV;
    6888:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    688c:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    688e:	6861      	ldr	r1, [r4, #4]
	struct gpio_driver_data *data =
    6890:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    6892:	6885      	ldr	r5, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6894:	b2c9      	uxtb	r1, r1
    6896:	2301      	movs	r3, #1
    6898:	fa03 f201 	lsl.w	r2, r3, r1
    689c:	6823      	ldr	r3, [r4, #0]
    689e:	ea23 0302 	bic.w	r3, r3, r2
    68a2:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    68a4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    68a8:	682b      	ldr	r3, [r5, #0]
    68aa:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
    68ac:	2021      	movs	r0, #33	; 0x21
    68ae:	2100      	movs	r1, #0
    68b0:	f014 f8f0 	bl	1aa94 <z_impl_k_sleep>
	return 0;
    68b4:	2000      	movs	r0, #0
    68b6:	e7e9      	b.n	688c <pwr_ctrl_init+0x18>
    68b8:	000218e7 	.word	0x000218e7

000068bc <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    68bc:	b430      	push	{r4, r5}
    68be:	4603      	mov	r3, r0
    68c0:	4608      	mov	r0, r1
	switch (src->type) {
    68c2:	781a      	ldrb	r2, [r3, #0]
    68c4:	2a01      	cmp	r2, #1
    68c6:	d013      	beq.n	68f0 <uuid_to_uuid128+0x34>
    68c8:	2a02      	cmp	r2, #2
    68ca:	d026      	beq.n	691a <uuid_to_uuid128+0x5e>
    68cc:	b972      	cbnz	r2, 68ec <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    68ce:	4a15      	ldr	r2, [pc, #84]	; (6924 <uuid_to_uuid128+0x68>)
    68d0:	f102 0410 	add.w	r4, r2, #16
    68d4:	f852 5b04 	ldr.w	r5, [r2], #4
    68d8:	f841 5b04 	str.w	r5, [r1], #4
    68dc:	42a2      	cmp	r2, r4
    68de:	d1f9      	bne.n	68d4 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    68e0:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    68e2:	7812      	ldrb	r2, [r2, #0]
    68e4:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    68e6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    68e8:	0a1b      	lsrs	r3, r3, #8
    68ea:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    68ec:	bc30      	pop	{r4, r5}
    68ee:	4770      	bx	lr
		*dst = uuid128_base;
    68f0:	4a0c      	ldr	r2, [pc, #48]	; (6924 <uuid_to_uuid128+0x68>)
    68f2:	f102 0410 	add.w	r4, r2, #16
    68f6:	f852 5b04 	ldr.w	r5, [r2], #4
    68fa:	f841 5b04 	str.w	r5, [r1], #4
    68fe:	42a2      	cmp	r2, r4
    6900:	d1f9      	bne.n	68f6 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    6902:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    6904:	7812      	ldrb	r2, [r2, #0]
    6906:	700a      	strb	r2, [r1, #0]
    6908:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    690c:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    690e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    6910:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    6912:	0a1b      	lsrs	r3, r3, #8
    6914:	7382      	strb	r2, [r0, #14]
    6916:	7403      	strb	r3, [r0, #16]
}
    6918:	e7e8      	b.n	68ec <uuid_to_uuid128+0x30>
}
    691a:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    691c:	2211      	movs	r2, #17
    691e:	4619      	mov	r1, r3
    6920:	f015 ba03 	b.w	1bd2a <memcpy>
    6924:	00021912 	.word	0x00021912

00006928 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    6928:	b538      	push	{r3, r4, r5, lr}
    692a:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    692c:	4805      	ldr	r0, [pc, #20]	; (6944 <bt_buf_get_rx+0x1c>)
    692e:	f017 f9fd 	bl	1dd2c <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    6932:	4604      	mov	r4, r0
    6934:	b120      	cbz	r0, 6940 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    6936:	2100      	movs	r1, #0
    6938:	3008      	adds	r0, #8
    693a:	f017 fa16 	bl	1dd6a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    693e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6940:	4620      	mov	r0, r4
    6942:	bd38      	pop	{r3, r4, r5, pc}
    6944:	20000b38 	.word	0x20000b38

00006948 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    6948:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    694a:	490b      	ldr	r1, [pc, #44]	; (6978 <bt_buf_get_cmd_complete+0x30>)
{
    694c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    694e:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    6952:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    6954:	b920      	cbnz	r0, 6960 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    6956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    695a:	2001      	movs	r0, #1
    695c:	f7ff bfe4 	b.w	6928 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    6960:	f017 fa14 	bl	1dd8c <net_buf_ref>
    6964:	2301      	movs	r3, #1
		buf->len = 0U;
    6966:	2100      	movs	r1, #0
    6968:	7503      	strb	r3, [r0, #20]
    696a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    696c:	4604      	mov	r4, r0
    696e:	3008      	adds	r0, #8
    6970:	f017 f9fb 	bl	1dd6a <net_buf_simple_reserve>
}
    6974:	4620      	mov	r0, r4
    6976:	bd10      	pop	{r4, pc}
    6978:	200000f0 	.word	0x200000f0

0000697c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    697c:	b570      	push	{r4, r5, r6, lr}
    697e:	4604      	mov	r4, r0
	switch (evt) {
    6980:	2c0f      	cmp	r4, #15
{
    6982:	460d      	mov	r5, r1
    6984:	4610      	mov	r0, r2
    6986:	4619      	mov	r1, r3
	switch (evt) {
    6988:	d805      	bhi.n	6996 <bt_buf_get_evt+0x1a>
    698a:	2c0d      	cmp	r4, #13
    698c:	d912      	bls.n	69b4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    698e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    6992:	f7ff bfd9 	b.w	6948 <bt_buf_get_cmd_complete>
	switch (evt) {
    6996:	2c13      	cmp	r4, #19
    6998:	d10c      	bne.n	69b4 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    699a:	480b      	ldr	r0, [pc, #44]	; (69c8 <bt_buf_get_evt+0x4c>)
    699c:	f017 f9c6 	bl	1dd2c <net_buf_alloc_fixed>
			if (buf) {
    69a0:	4604      	mov	r4, r0
    69a2:	b128      	cbz	r0, 69b0 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    69a4:	2100      	movs	r1, #0
    69a6:	3008      	adds	r0, #8
    69a8:	f017 f9df 	bl	1dd6a <net_buf_simple_reserve>
    69ac:	2301      	movs	r3, #1
    69ae:	7523      	strb	r3, [r4, #20]
}
    69b0:	4620      	mov	r0, r4
    69b2:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    69b4:	4602      	mov	r2, r0
    69b6:	460b      	mov	r3, r1
		if (discardable) {
    69b8:	b10d      	cbz	r5, 69be <bt_buf_get_evt+0x42>
    69ba:	4804      	ldr	r0, [pc, #16]	; (69cc <bt_buf_get_evt+0x50>)
    69bc:	e7ee      	b.n	699c <bt_buf_get_evt+0x20>
}
    69be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    69c2:	2001      	movs	r0, #1
    69c4:	f7ff bfb0 	b.w	6928 <bt_buf_get_rx>
    69c8:	20000b64 	.word	0x20000b64
    69cc:	20000ab4 	.word	0x20000ab4

000069d0 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    69d0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    69d2:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    69d4:	781a      	ldrb	r2, [r3, #0]
    69d6:	b972      	cbnz	r2, 69f6 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    69d8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    69dc:	4620      	mov	r0, r4
    69de:	f001 fe6b 	bl	86b8 <bt_conn_lookup_handle>
	if (!conn) {
    69e2:	4605      	mov	r5, r0
    69e4:	b940      	cbnz	r0, 69f8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    69e6:	4b08      	ldr	r3, [pc, #32]	; (6a08 <hci_disconn_complete_prio+0x38>)
    69e8:	881a      	ldrh	r2, [r3, #0]
    69ea:	b922      	cbnz	r2, 69f6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    69ec:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    69f0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    69f4:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    69f6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    69f8:	2101      	movs	r1, #1
    69fa:	f001 fe65 	bl	86c8 <bt_conn_set_state>
	bt_conn_unref(conn);
    69fe:	4628      	mov	r0, r5
}
    6a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    6a04:	f015 bfd7 	b.w	1c9b6 <bt_conn_unref>
    6a08:	20002d44 	.word	0x20002d44

00006a0c <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    6a0c:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    6a0e:	2101      	movs	r1, #1
    6a10:	4604      	mov	r4, r0
    6a12:	3008      	adds	r0, #8
    6a14:	f017 fa13 	bl	1de3e <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6a18:	4621      	mov	r1, r4
    6a1a:	4a03      	ldr	r2, [pc, #12]	; (6a28 <hci_le_meta_event+0x1c>)
    6a1c:	7800      	ldrb	r0, [r0, #0]
}
    6a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    6a22:	2308      	movs	r3, #8
    6a24:	f015 ba75 	b.w	1bf12 <handle_event>
    6a28:	000200f4 	.word	0x000200f4

00006a2c <hci_cmd_done>:
{
    6a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a2e:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6a30:	7990      	ldrb	r0, [r2, #6]
{
    6a32:	460e      	mov	r6, r1
    6a34:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6a36:	f010 f953 	bl	16ce0 <net_buf_pool_get>
    6a3a:	4b2d      	ldr	r3, [pc, #180]	; (6af0 <hci_cmd_done+0xc4>)
    6a3c:	4283      	cmp	r3, r0
    6a3e:	d155      	bne.n	6aec <hci_cmd_done+0xc0>
	if (cmd(buf)->opcode != opcode) {
    6a40:	4620      	mov	r0, r4
    6a42:	f010 f955 	bl	16cf0 <net_buf_id>
    6a46:	4d2b      	ldr	r5, [pc, #172]	; (6af4 <hci_cmd_done+0xc8>)
    6a48:	230c      	movs	r3, #12
    6a4a:	fb03 5000 	mla	r0, r3, r0, r5
    6a4e:	8843      	ldrh	r3, [r0, #2]
    6a50:	42bb      	cmp	r3, r7
    6a52:	d14b      	bne.n	6aec <hci_cmd_done+0xc0>
	if (bt_dev.sent_cmd) {
    6a54:	4f28      	ldr	r7, [pc, #160]	; (6af8 <hci_cmd_done+0xcc>)
    6a56:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    6a5a:	b120      	cbz	r0, 6a66 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    6a5c:	f010 fa04 	bl	16e68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6a60:	2300      	movs	r3, #0
    6a62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    6a66:	4620      	mov	r0, r4
    6a68:	f010 f942 	bl	16cf0 <net_buf_id>
    6a6c:	270c      	movs	r7, #12
    6a6e:	fb07 5000 	mla	r0, r7, r0, r5
    6a72:	6843      	ldr	r3, [r0, #4]
    6a74:	b1a3      	cbz	r3, 6aa0 <hci_cmd_done+0x74>
    6a76:	b99e      	cbnz	r6, 6aa0 <hci_cmd_done+0x74>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    6a78:	4620      	mov	r0, r4
    6a7a:	f010 f939 	bl	16cf0 <net_buf_id>
    6a7e:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    6a82:	2301      	movs	r3, #1
    6a84:	6847      	ldr	r7, [r0, #4]
    6a86:	e9d7 2000 	ldrd	r2, r0, [r7]
    6a8a:	f000 011f 	and.w	r1, r0, #31
    6a8e:	fa03 f101 	lsl.w	r1, r3, r1

	if (val) {
    6a92:	7a3b      	ldrb	r3, [r7, #8]
    6a94:	0940      	lsrs	r0, r0, #5
    6a96:	b1d3      	cbz	r3, 6ace <hci_cmd_done+0xa2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6a98:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    6a9c:	f015 fa51 	bl	1bf42 <atomic_or>
	if (cmd(buf)->sync) {
    6aa0:	4620      	mov	r0, r4
    6aa2:	f010 f925 	bl	16cf0 <net_buf_id>
    6aa6:	270c      	movs	r7, #12
    6aa8:	fb07 5000 	mla	r0, r7, r0, r5
    6aac:	6883      	ldr	r3, [r0, #8]
    6aae:	b1eb      	cbz	r3, 6aec <hci_cmd_done+0xc0>
		cmd(buf)->status = status;
    6ab0:	4620      	mov	r0, r4
    6ab2:	f010 f91d 	bl	16cf0 <net_buf_id>
    6ab6:	4378      	muls	r0, r7
    6ab8:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    6aba:	4620      	mov	r0, r4
    6abc:	f010 f918 	bl	16cf0 <net_buf_id>
    6ac0:	fb07 5500 	mla	r5, r7, r0, r5
    6ac4:	68a8      	ldr	r0, [r5, #8]
}
    6ac6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
    6aca:	f013 bb47 	b.w	1a15c <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6ace:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6ad0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    6ad4:	f3bf 8f5b 	dmb	ish
    6ad8:	e852 1f00 	ldrex	r1, [r2]
    6adc:	4019      	ands	r1, r3
    6ade:	e842 1000 	strex	r0, r1, [r2]
    6ae2:	2800      	cmp	r0, #0
    6ae4:	d1f8      	bne.n	6ad8 <hci_cmd_done+0xac>
    6ae6:	f3bf 8f5b 	dmb	ish
    6aea:	e7d9      	b.n	6aa0 <hci_cmd_done+0x74>
    6aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6aee:	bf00      	nop
    6af0:	20000b0c 	.word	0x20000b0c
    6af4:	200017d4 	.word	0x200017d4
    6af8:	200000f0 	.word	0x200000f0

00006afc <hci_cmd_status>:
{
    6afc:	b538      	push	{r3, r4, r5, lr}
    6afe:	2104      	movs	r1, #4
    6b00:	4604      	mov	r4, r0
    6b02:	3008      	adds	r0, #8
    6b04:	f017 f99b 	bl	1de3e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    6b08:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    6b0a:	7801      	ldrb	r1, [r0, #0]
    6b0c:	8840      	ldrh	r0, [r0, #2]
    6b0e:	4622      	mov	r2, r4
    6b10:	f7ff ff8c 	bl	6a2c <hci_cmd_done>
	if (ncmd) {
    6b14:	b125      	cbz	r5, 6b20 <hci_cmd_status+0x24>
    6b16:	4803      	ldr	r0, [pc, #12]	; (6b24 <hci_cmd_status+0x28>)
}
    6b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6b1c:	f013 bb1e 	b.w	1a15c <z_impl_k_sem_give>
    6b20:	bd38      	pop	{r3, r4, r5, pc}
    6b22:	bf00      	nop
    6b24:	20000208 	.word	0x20000208

00006b28 <hci_cmd_complete>:
{
    6b28:	b538      	push	{r3, r4, r5, lr}
    6b2a:	2103      	movs	r1, #3
    6b2c:	4604      	mov	r4, r0
    6b2e:	3008      	adds	r0, #8
    6b30:	f017 f985 	bl	1de3e <net_buf_simple_pull_mem>
	status = buf->data[0];
    6b34:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    6b36:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    6b38:	7819      	ldrb	r1, [r3, #0]
    6b3a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    6b3e:	4622      	mov	r2, r4
    6b40:	f7ff ff74 	bl	6a2c <hci_cmd_done>
	if (ncmd) {
    6b44:	b125      	cbz	r5, 6b50 <hci_cmd_complete+0x28>
    6b46:	4803      	ldr	r0, [pc, #12]	; (6b54 <hci_cmd_complete+0x2c>)
}
    6b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6b4c:	f013 bb06 	b.w	1a15c <z_impl_k_sem_give>
    6b50:	bd38      	pop	{r3, r4, r5, pc}
    6b52:	bf00      	nop
    6b54:	20000208 	.word	0x20000208

00006b58 <bt_hci_cmd_state_set_init>:
{
    6b58:	b510      	push	{r4, lr}
	state->bit = bit;
    6b5a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    6b5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6b62:	720b      	strb	r3, [r1, #8]
{
    6b64:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    6b66:	f010 f8c3 	bl	16cf0 <net_buf_id>
    6b6a:	4b03      	ldr	r3, [pc, #12]	; (6b78 <bt_hci_cmd_state_set_init+0x20>)
    6b6c:	220c      	movs	r2, #12
    6b6e:	fb02 3300 	mla	r3, r2, r0, r3
    6b72:	605c      	str	r4, [r3, #4]
}
    6b74:	bd10      	pop	{r4, pc}
    6b76:	bf00      	nop
    6b78:	200017d4 	.word	0x200017d4

00006b7c <bt_hci_cmd_create>:
{
    6b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    6b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b88:	4606      	mov	r6, r0
    6b8a:	4817      	ldr	r0, [pc, #92]	; (6be8 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    6b8c:	4d17      	ldr	r5, [pc, #92]	; (6bec <bt_hci_cmd_create+0x70>)
{
    6b8e:	460f      	mov	r7, r1
    6b90:	f017 f8cc 	bl	1dd2c <net_buf_alloc_fixed>
    6b94:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    6b96:	f100 0a08 	add.w	sl, r0, #8
    6b9a:	2100      	movs	r1, #0
    6b9c:	f04f 0800 	mov.w	r8, #0
    6ba0:	4650      	mov	r0, sl
    6ba2:	f017 f8e2 	bl	1dd6a <net_buf_simple_reserve>
    6ba6:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    6baa:	4620      	mov	r0, r4
    6bac:	f010 f8a0 	bl	16cf0 <net_buf_id>
    6bb0:	f04f 090c 	mov.w	r9, #12
    6bb4:	fb09 5000 	mla	r0, r9, r0, r5
    6bb8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    6bba:	4620      	mov	r0, r4
    6bbc:	f010 f898 	bl	16cf0 <net_buf_id>
    6bc0:	fb09 5000 	mla	r0, r9, r0, r5
    6bc4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    6bc8:	4620      	mov	r0, r4
    6bca:	f010 f891 	bl	16cf0 <net_buf_id>
    6bce:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    6bd2:	2103      	movs	r1, #3
    6bd4:	f8c5 8004 	str.w	r8, [r5, #4]
    6bd8:	4650      	mov	r0, sl
    6bda:	f017 f909 	bl	1ddf0 <net_buf_simple_add>
	hdr->param_len = param_len;
    6bde:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    6be0:	8006      	strh	r6, [r0, #0]
}
    6be2:	4620      	mov	r0, r4
    6be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6be8:	20000b0c 	.word	0x20000b0c
    6bec:	200017d4 	.word	0x200017d4

00006bf0 <bt_hci_cmd_send_sync>:
{
    6bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bf2:	4615      	mov	r5, r2
    6bf4:	b087      	sub	sp, #28
	if (!buf) {
    6bf6:	460c      	mov	r4, r1
    6bf8:	b921      	cbnz	r1, 6c04 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    6bfa:	f7ff ffbf 	bl	6b7c <bt_hci_cmd_create>
		if (!buf) {
    6bfe:	4604      	mov	r4, r0
    6c00:	2800      	cmp	r0, #0
    6c02:	d048      	beq.n	6c96 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    6c04:	2201      	movs	r2, #1
    6c06:	2100      	movs	r1, #0
    6c08:	4668      	mov	r0, sp
    6c0a:	f018 fbef 	bl	1f3ec <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    6c0e:	4620      	mov	r0, r4
    6c10:	f010 f86e 	bl	16cf0 <net_buf_id>
    6c14:	4f21      	ldr	r7, [pc, #132]	; (6c9c <bt_hci_cmd_send_sync+0xac>)
    6c16:	230c      	movs	r3, #12
    6c18:	fb03 7000 	mla	r0, r3, r0, r7
    6c1c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    6c20:	4620      	mov	r0, r4
    6c22:	f017 f8b3 	bl	1dd8c <net_buf_ref>
    6c26:	4601      	mov	r1, r0
    6c28:	481d      	ldr	r0, [pc, #116]	; (6ca0 <bt_hci_cmd_send_sync+0xb0>)
    6c2a:	f017 f8a2 	bl	1dd72 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    6c2e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    6c32:	2300      	movs	r3, #0
    6c34:	4668      	mov	r0, sp
    6c36:	f013 fab7 	bl	1a1a8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    6c3a:	4606      	mov	r6, r0
    6c3c:	b180      	cbz	r0, 6c60 <bt_hci_cmd_send_sync+0x70>
    6c3e:	4a19      	ldr	r2, [pc, #100]	; (6ca4 <bt_hci_cmd_send_sync+0xb4>)
    6c40:	4919      	ldr	r1, [pc, #100]	; (6ca8 <bt_hci_cmd_send_sync+0xb8>)
    6c42:	481a      	ldr	r0, [pc, #104]	; (6cac <bt_hci_cmd_send_sync+0xbc>)
    6c44:	f240 1331 	movw	r3, #305	; 0x131
    6c48:	f014 fa35 	bl	1b0b6 <printk>
    6c4c:	4818      	ldr	r0, [pc, #96]	; (6cb0 <bt_hci_cmd_send_sync+0xc0>)
    6c4e:	4631      	mov	r1, r6
    6c50:	f014 fa31 	bl	1b0b6 <printk>
    6c54:	4040      	eors	r0, r0
    6c56:	f380 8811 	msr	BASEPRI, r0
    6c5a:	f04f 0003 	mov.w	r0, #3
    6c5e:	df02      	svc	2
	status = cmd(buf)->status;
    6c60:	4620      	mov	r0, r4
    6c62:	f010 f845 	bl	16cf0 <net_buf_id>
    6c66:	230c      	movs	r3, #12
    6c68:	4358      	muls	r0, r3
    6c6a:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    6c6c:	b156      	cbz	r6, 6c84 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    6c6e:	4620      	mov	r0, r4
    6c70:	f010 f8fa 	bl	16e68 <net_buf_unref>
			return -EIO;
    6c74:	2e09      	cmp	r6, #9
    6c76:	bf0c      	ite	eq
    6c78:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    6c7c:	f06f 0004 	mvnne.w	r0, #4
}
    6c80:	b007      	add	sp, #28
    6c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    6c84:	b115      	cbz	r5, 6c8c <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    6c86:	602c      	str	r4, [r5, #0]
	return 0;
    6c88:	4630      	mov	r0, r6
    6c8a:	e7f9      	b.n	6c80 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    6c8c:	4620      	mov	r0, r4
    6c8e:	f010 f8eb 	bl	16e68 <net_buf_unref>
	return 0;
    6c92:	4628      	mov	r0, r5
    6c94:	e7f4      	b.n	6c80 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    6c96:	f06f 0068 	mvn.w	r0, #104	; 0x68
    6c9a:	e7f1      	b.n	6c80 <bt_hci_cmd_send_sync+0x90>
    6c9c:	200017d4 	.word	0x200017d4
    6ca0:	20000224 	.word	0x20000224
    6ca4:	00021923 	.word	0x00021923
    6ca8:	00021957 	.word	0x00021957
    6cac:	00021960 	.word	0x00021960
    6cb0:	0002197d 	.word	0x0002197d

00006cb4 <bt_le_create_conn_legacy>:
{
    6cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cb6:	b087      	sub	sp, #28
    6cb8:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    6cba:	f10d 010b 	add.w	r1, sp, #11
    6cbe:	2000      	movs	r0, #0
    6cc0:	f000 ff14 	bl	7aec <bt_id_set_create_conn_own_addr>
	if (err) {
    6cc4:	4604      	mov	r4, r0
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d13c      	bne.n	6d44 <bt_le_create_conn_legacy+0x90>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    6cca:	2119      	movs	r1, #25
    6ccc:	f242 000d 	movw	r0, #8205	; 0x200d
    6cd0:	f7ff ff54 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
    6cd4:	4607      	mov	r7, r0
    6cd6:	b3c0      	cbz	r0, 6d4a <bt_le_create_conn_legacy+0x96>
    6cd8:	2119      	movs	r1, #25
    6cda:	3008      	adds	r0, #8
    6cdc:	f017 f888 	bl	1ddf0 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    6ce0:	2219      	movs	r2, #25
    6ce2:	4605      	mov	r5, r0
    6ce4:	4621      	mov	r1, r4
    6ce6:	f015 f82b 	bl	1bd40 <memset>
	cp->own_addr_type = own_addr_type;
    6cea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6cee:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    6cf0:	f106 0188 	add.w	r1, r6, #136	; 0x88
    6cf4:	1d68      	adds	r0, r5, #5
    6cf6:	f015 f921 	bl	1bf3c <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    6cfa:	4a15      	ldr	r2, [pc, #84]	; (6d50 <bt_le_create_conn_legacy+0x9c>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    6cfc:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    6cfe:	8993      	ldrh	r3, [r2, #12]
    6d00:	802b      	strh	r3, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    6d02:	89d3      	ldrh	r3, [r2, #14]
    6d04:	806b      	strh	r3, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    6d06:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    6d0a:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    6d0e:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    6d12:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    6d16:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    6d1a:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    6d1e:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    6d22:	f8a5 3013 	strh.w	r3, [r5, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    6d26:	2301      	movs	r3, #1
    6d28:	9300      	str	r3, [sp, #0]
    6d2a:	32cc      	adds	r2, #204	; 0xcc
    6d2c:	230b      	movs	r3, #11
    6d2e:	a903      	add	r1, sp, #12
    6d30:	4638      	mov	r0, r7
    6d32:	f7ff ff11 	bl	6b58 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    6d36:	4622      	mov	r2, r4
    6d38:	4639      	mov	r1, r7
    6d3a:	f242 000d 	movw	r0, #8205	; 0x200d
    6d3e:	f7ff ff57 	bl	6bf0 <bt_hci_cmd_send_sync>
    6d42:	4604      	mov	r4, r0
}
    6d44:	4620      	mov	r0, r4
    6d46:	b007      	add	sp, #28
    6d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    6d4a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6d4e:	e7f9      	b.n	6d44 <bt_le_create_conn_legacy+0x90>
    6d50:	200000f0 	.word	0x200000f0

00006d54 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    6d54:	4b02      	ldr	r3, [pc, #8]	; (6d60 <bt_send+0xc>)
    6d56:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    6d5a:	691b      	ldr	r3, [r3, #16]
    6d5c:	4718      	bx	r3
    6d5e:	bf00      	nop
    6d60:	200000f0 	.word	0x200000f0

00006d64 <bt_hci_cmd_send>:
{
    6d64:	b538      	push	{r3, r4, r5, lr}
    6d66:	4605      	mov	r5, r0
	if (!buf) {
    6d68:	460c      	mov	r4, r1
    6d6a:	b919      	cbnz	r1, 6d74 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    6d6c:	f7ff ff06 	bl	6b7c <bt_hci_cmd_create>
		if (!buf) {
    6d70:	4604      	mov	r4, r0
    6d72:	b198      	cbz	r0, 6d9c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6d74:	f640 4335 	movw	r3, #3125	; 0xc35
    6d78:	429d      	cmp	r5, r3
    6d7a:	d109      	bne.n	6d90 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    6d7c:	4620      	mov	r0, r4
    6d7e:	f7ff ffe9 	bl	6d54 <bt_send>
		if (err) {
    6d82:	4605      	mov	r5, r0
    6d84:	b110      	cbz	r0, 6d8c <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    6d86:	4620      	mov	r0, r4
    6d88:	f010 f86e 	bl	16e68 <net_buf_unref>
}
    6d8c:	4628      	mov	r0, r5
    6d8e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6d90:	4804      	ldr	r0, [pc, #16]	; (6da4 <bt_hci_cmd_send+0x40>)
    6d92:	4621      	mov	r1, r4
    6d94:	f016 ffed 	bl	1dd72 <net_buf_put>
	return 0;
    6d98:	2500      	movs	r5, #0
    6d9a:	e7f7      	b.n	6d8c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    6d9c:	f06f 0568 	mvn.w	r5, #104	; 0x68
    6da0:	e7f4      	b.n	6d8c <bt_hci_cmd_send+0x28>
    6da2:	bf00      	nop
    6da4:	20000224 	.word	0x20000224

00006da8 <conn_auto_initiate>:
{
    6da8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6daa:	7a83      	ldrb	r3, [r0, #10]
    6dac:	2b07      	cmp	r3, #7
{
    6dae:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6db0:	d157      	bne.n	6e62 <conn_auto_initiate+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6db2:	f3bf 8f5b 	dmb	ish
    6db6:	6843      	ldr	r3, [r0, #4]
    6db8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    6dbc:	049b      	lsls	r3, r3, #18
    6dbe:	f100 0604 	add.w	r6, r0, #4
    6dc2:	d41b      	bmi.n	6dfc <conn_auto_initiate+0x54>
    6dc4:	78c3      	ldrb	r3, [r0, #3]
    6dc6:	b123      	cbz	r3, 6dd2 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    6dc8:	4b27      	ldr	r3, [pc, #156]	; (6e68 <conn_auto_initiate+0xc0>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    6dca:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    6dce:	071d      	lsls	r5, r3, #28
    6dd0:	d514      	bpl.n	6dfc <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    6dd2:	2102      	movs	r1, #2
    6dd4:	f242 0016 	movw	r0, #8214	; 0x2016
    6dd8:	f7ff fed0 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
    6ddc:	4605      	mov	r5, r0
    6dde:	b168      	cbz	r0, 6dfc <conn_auto_initiate+0x54>
    6de0:	2102      	movs	r1, #2
    6de2:	3008      	adds	r0, #8
    6de4:	f017 f804 	bl	1ddf0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6de8:	8823      	ldrh	r3, [r4, #0]
    6dea:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6dec:	4629      	mov	r1, r5
    6dee:	f242 0016 	movw	r0, #8214	; 0x2016
}
    6df2:	b004      	add	sp, #16
    6df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6df8:	f7ff bfb4 	b.w	6d64 <bt_hci_cmd_send>
    6dfc:	f3bf 8f5b 	dmb	ish
    6e00:	6863      	ldr	r3, [r4, #4]
    6e02:	4d19      	ldr	r5, [pc, #100]	; (6e68 <conn_auto_initiate+0xc0>)
    6e04:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    6e08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    6e0c:	f3c3 3100 	ubfx	r1, r3, #12, #1
    6e10:	d111      	bne.n	6e36 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    6e12:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    6e16:	07d8      	lsls	r0, r3, #31
    6e18:	d50d      	bpl.n	6e36 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    6e1a:	2302      	movs	r3, #2
    6e1c:	9100      	str	r1, [sp, #0]
    6e1e:	461a      	mov	r2, r3
    6e20:	4620      	mov	r0, r4
    6e22:	f015 f9ed 	bl	1c200 <bt_le_set_phy>
		if (!err) {
    6e26:	b930      	cbnz	r0, 6e36 <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6e28:	2180      	movs	r1, #128	; 0x80
    6e2a:	4630      	mov	r0, r6
}
    6e2c:	b004      	add	sp, #16
    6e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e32:	f015 b886 	b.w	1bf42 <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    6e36:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    6e3a:	069a      	lsls	r2, r3, #26
    6e3c:	d511      	bpl.n	6e62 <conn_auto_initiate+0xba>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    6e3e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    6e42:	689b      	ldr	r3, [r3, #8]
    6e44:	079b      	lsls	r3, r3, #30
    6e46:	d50c      	bpl.n	6e62 <conn_auto_initiate+0xba>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    6e48:	f10d 010e 	add.w	r1, sp, #14
    6e4c:	a803      	add	r0, sp, #12
    6e4e:	f015 f964 	bl	1c11a <hci_le_read_max_data_len>
			if (!err) {
    6e52:	b930      	cbnz	r0, 6e62 <conn_auto_initiate+0xba>
				err = bt_le_set_data_len(conn,
    6e54:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6e58:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    6e5c:	4620      	mov	r0, r4
    6e5e:	f015 f9b2 	bl	1c1c6 <bt_le_set_data_len>
}
    6e62:	b004      	add	sp, #16
    6e64:	bd70      	pop	{r4, r5, r6, pc}
    6e66:	bf00      	nop
    6e68:	200000f0 	.word	0x200000f0

00006e6c <bt_hci_le_enh_conn_complete>:
{
    6e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6e70:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
    6e74:	4a5f      	ldr	r2, [pc, #380]	; (6ff4 <bt_hci_le_enh_conn_complete+0x188>)
	if (evt->status) {
    6e76:	7806      	ldrb	r6, [r0, #0]
		if (disconnected_handles[i] == handle) {
    6e78:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    6e7a:	ea6f 5308 	mvn.w	r3, r8, lsl #20
    6e7e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    6e82:	b29b      	uxth	r3, r3
    6e84:	4299      	cmp	r1, r3
    6e86:	f04f 0700 	mov.w	r7, #0
			disconnected_handles[i] = 0;
    6e8a:	bf08      	it	eq
    6e8c:	8017      	strheq	r7, [r2, #0]
{
    6e8e:	b085      	sub	sp, #20
    6e90:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6e92:	fa1f f988 	uxth.w	r9, r8
			return true;
    6e96:	bf08      	it	eq
    6e98:	2701      	moveq	r7, #1
	if (evt->status) {
    6e9a:	b306      	cbz	r6, 6ede <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6e9c:	2e02      	cmp	r6, #2
    6e9e:	d11b      	bne.n	6ed8 <bt_hci_le_enh_conn_complete+0x6c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    6ea0:	2100      	movs	r1, #0
    6ea2:	2206      	movs	r2, #6
    6ea4:	4608      	mov	r0, r1
    6ea6:	f001 fd9b 	bl	89e0 <bt_conn_lookup_state_le>
	if (!conn) {
    6eaa:	4604      	mov	r4, r0
    6eac:	b188      	cbz	r0, 6ed2 <bt_hci_le_enh_conn_complete+0x66>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    6eae:	7246      	strb	r6, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6eb0:	2100      	movs	r1, #0
    6eb2:	f001 fc09 	bl	86c8 <bt_conn_set_state>
    6eb6:	f3bf 8f5b 	dmb	ish
    6eba:	6863      	ldr	r3, [r4, #4]
    6ebc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    6ec0:	07db      	lsls	r3, r3, #31
    6ec2:	d503      	bpl.n	6ecc <bt_hci_le_enh_conn_complete+0x60>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6ec4:	4631      	mov	r1, r6
    6ec6:	4620      	mov	r0, r4
    6ec8:	f001 fbfe 	bl	86c8 <bt_conn_set_state>
	bt_conn_unref(conn);
    6ecc:	4620      	mov	r0, r4
    6ece:	f015 fd72 	bl	1c9b6 <bt_conn_unref>
			bt_le_scan_update(false);
    6ed2:	2000      	movs	r0, #0
    6ed4:	f001 f91c 	bl	8110 <bt_le_scan_update>
}
    6ed8:	b005      	add	sp, #20
    6eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6ede:	7903      	ldrb	r3, [r0, #4]
    6ee0:	3b02      	subs	r3, #2
    6ee2:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    6ee4:	f100 0404 	add.w	r4, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    6ee8:	d82e      	bhi.n	6f48 <bt_hci_le_enh_conn_complete+0xdc>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    6eea:	4621      	mov	r1, r4
    6eec:	a802      	add	r0, sp, #8
    6eee:	f015 f825 	bl	1bf3c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6ef2:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    6ef6:	2206      	movs	r2, #6
    6ef8:	3b02      	subs	r3, #2
    6efa:	f105 0111 	add.w	r1, r5, #17
    6efe:	f10d 0001 	add.w	r0, sp, #1
    6f02:	f88d 3008 	strb.w	r3, [sp, #8]
    6f06:	f014 ff10 	bl	1bd2a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    6f0a:	2301      	movs	r3, #1
    6f0c:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    6f10:	78e8      	ldrb	r0, [r5, #3]
    6f12:	b9a0      	cbnz	r0, 6f3e <bt_hci_le_enh_conn_complete+0xd2>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    6f14:	2206      	movs	r2, #6
    6f16:	a902      	add	r1, sp, #8
    6f18:	f001 fd62 	bl	89e0 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6f1c:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    6f1e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6f20:	b963      	cbnz	r3, 6f3c <bt_hci_le_enh_conn_complete+0xd0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6f22:	f3bf 8f5b 	dmb	ish
    6f26:	4b34      	ldr	r3, [pc, #208]	; (6ff8 <bt_hci_le_enh_conn_complete+0x18c>)
    6f28:	e853 2f00 	ldrex	r2, [r3]
    6f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    6f30:	e843 2100 	strex	r1, r2, [r3]
    6f34:	2900      	cmp	r1, #0
    6f36:	d1f7      	bne.n	6f28 <bt_hci_le_enh_conn_complete+0xbc>
    6f38:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    6f3c:	b9bc      	cbnz	r4, 6f6e <bt_hci_le_enh_conn_complete+0x102>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    6f3e:	211f      	movs	r1, #31
    6f40:	4648      	mov	r0, r9
    6f42:	f015 f904 	bl	1c14e <bt_hci_disconnect>
		return;
    6f46:	e7c7      	b.n	6ed8 <bt_hci_le_enh_conn_complete+0x6c>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    6f48:	78c3      	ldrb	r3, [r0, #3]
    6f4a:	2b01      	cmp	r3, #1
    6f4c:	bf04      	itt	eq
    6f4e:	4b2b      	ldreq	r3, [pc, #172]	; (6ffc <bt_hci_le_enh_conn_complete+0x190>)
    6f50:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    6f54:	4621      	mov	r1, r4
    6f56:	4630      	mov	r0, r6
    6f58:	f015 faac 	bl	1c4b4 <bt_lookup_id_addr>
    6f5c:	4601      	mov	r1, r0
    6f5e:	a802      	add	r0, sp, #8
    6f60:	f014 ffec 	bl	1bf3c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    6f64:	4621      	mov	r1, r4
    6f66:	4668      	mov	r0, sp
    6f68:	f014 ffe8 	bl	1bf3c <bt_addr_le_copy>
    6f6c:	e7d0      	b.n	6f10 <bt_hci_le_enh_conn_complete+0xa4>
	conn->handle = handle;
    6f6e:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    6f70:	a902      	add	r1, sp, #8
	conn->handle = handle;
    6f72:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    6f76:	f014 ffe1 	bl	1bf3c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    6f7a:	7e2a      	ldrb	r2, [r5, #24]
    6f7c:	7deb      	ldrb	r3, [r5, #23]
    6f7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6f82:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    6f86:	7eaa      	ldrb	r2, [r5, #26]
    6f88:	7e6b      	ldrb	r3, [r5, #25]
    6f8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6f8e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6f92:	7f2a      	ldrb	r2, [r5, #28]
    6f94:	7eeb      	ldrb	r3, [r5, #27]
    6f96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6f9a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    6f9e:	78eb      	ldrb	r3, [r5, #3]
    6fa0:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    6fa2:	2200      	movs	r2, #0
    6fa4:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6fa6:	b96b      	cbnz	r3, 6fc4 <bt_hci_le_enh_conn_complete+0x158>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    6fa8:	4669      	mov	r1, sp
    6faa:	f104 0096 	add.w	r0, r4, #150	; 0x96
    6fae:	f014 ffc5 	bl	1bf3c <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    6fb2:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    6fb4:	4b11      	ldr	r3, [pc, #68]	; (6ffc <bt_hci_le_enh_conn_complete+0x190>)
					&bt_dev.id_addr[conn->id]);
    6fb6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    6fba:	4419      	add	r1, r3
    6fbc:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    6fc0:	f014 ffbc 	bl	1bf3c <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    6fc4:	2107      	movs	r1, #7
    6fc6:	4620      	mov	r0, r4
    6fc8:	f001 fb7e 	bl	86c8 <bt_conn_set_state>
	if (is_disconnected) {
    6fcc:	b11f      	cbz	r7, 6fd6 <bt_hci_le_enh_conn_complete+0x16a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    6fce:	2101      	movs	r1, #1
    6fd0:	4620      	mov	r0, r4
    6fd2:	f001 fb79 	bl	86c8 <bt_conn_set_state>
	bt_conn_connected(conn);
    6fd6:	4620      	mov	r0, r4
    6fd8:	f015 fcf0 	bl	1c9bc <bt_conn_connected>
	conn_auto_initiate(conn);
    6fdc:	4620      	mov	r0, r4
    6fde:	f7ff fee3 	bl	6da8 <conn_auto_initiate>
	bt_conn_unref(conn);
    6fe2:	4620      	mov	r0, r4
    6fe4:	f015 fce7 	bl	1c9b6 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6fe8:	78e3      	ldrb	r3, [r4, #3]
    6fea:	2b00      	cmp	r3, #0
    6fec:	f47f af74 	bne.w	6ed8 <bt_hci_le_enh_conn_complete+0x6c>
    6ff0:	e76f      	b.n	6ed2 <bt_hci_le_enh_conn_complete+0x66>
    6ff2:	bf00      	nop
    6ff4:	20002d44 	.word	0x20002d44
    6ff8:	200001bc 	.word	0x200001bc
    6ffc:	200000f0 	.word	0x200000f0

00007000 <hci_tx_thread>:
{
    7000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    7004:	f8df 8108 	ldr.w	r8, [pc, #264]	; 7110 <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
    7008:	f8df a108 	ldr.w	sl, [pc, #264]	; 7114 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
    700c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7010:	4841      	ldr	r0, [pc, #260]	; (7118 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7012:	f36f 3352 	bfc	r3, #13, #6
    7016:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    701a:	f001 fb11 	bl	8640 <bt_conn_prepare_events>
    701e:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    7020:	483b      	ldr	r0, [pc, #236]	; (7110 <hci_tx_thread+0x110>)
    7022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    702a:	4629      	mov	r1, r5
    702c:	f013 ff18 	bl	1ae60 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    7030:	b160      	cbz	r0, 704c <hci_tx_thread+0x4c>
    7032:	493a      	ldr	r1, [pc, #232]	; (711c <hci_tx_thread+0x11c>)
    7034:	483a      	ldr	r0, [pc, #232]	; (7120 <hci_tx_thread+0x120>)
    7036:	f640 1393 	movw	r3, #2451	; 0x993
    703a:	4652      	mov	r2, sl
    703c:	f014 f83b 	bl	1b0b6 <printk>
    7040:	4040      	eors	r0, r0
    7042:	f380 8811 	msr	BASEPRI, r0
    7046:	f04f 0003 	mov.w	r0, #3
    704a:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    704c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 7124 <hci_tx_thread+0x124>
{
    7050:	4e2f      	ldr	r6, [pc, #188]	; (7110 <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
    7052:	f5a9 779a 	sub.w	r7, r9, #308	; 0x134
    7056:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    705a:	b915      	cbnz	r5, 7062 <hci_tx_thread+0x62>
	z_impl_k_yield();
    705c:	f013 fc92 	bl	1a984 <z_impl_k_yield>
	while (1) {
    7060:	e7d4      	b.n	700c <hci_tx_thread+0xc>
		switch (ev->state) {
    7062:	68f3      	ldr	r3, [r6, #12]
    7064:	f3c3 3345 	ubfx	r3, r3, #13, #6
    7068:	2b04      	cmp	r3, #4
    706a:	d147      	bne.n	70fc <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    706c:	7b33      	ldrb	r3, [r6, #12]
    706e:	2b00      	cmp	r3, #0
    7070:	d147      	bne.n	7102 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7072:	2200      	movs	r2, #0
    7074:	2300      	movs	r3, #0
    7076:	4648      	mov	r0, r9
    7078:	f016 fe5d 	bl	1dd36 <net_buf_get>
	BT_ASSERT(buf);
    707c:	4604      	mov	r4, r0
    707e:	b960      	cbnz	r0, 709a <hci_tx_thread+0x9a>
    7080:	4929      	ldr	r1, [pc, #164]	; (7128 <hci_tx_thread+0x128>)
    7082:	4827      	ldr	r0, [pc, #156]	; (7120 <hci_tx_thread+0x120>)
    7084:	f640 132a 	movw	r3, #2346	; 0x92a
    7088:	4652      	mov	r2, sl
    708a:	f014 f814 	bl	1b0b6 <printk>
    708e:	4040      	eors	r0, r0
    7090:	f380 8811 	msr	BASEPRI, r0
    7094:	f04f 0003 	mov.w	r0, #3
    7098:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    709a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    709e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    70a2:	4658      	mov	r0, fp
    70a4:	f013 f880 	bl	1a1a8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    70a8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    70ac:	b120      	cbz	r0, 70b8 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    70ae:	f00f fedb 	bl	16e68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    70b2:	2300      	movs	r3, #0
    70b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    70b8:	4620      	mov	r0, r4
    70ba:	f016 fe67 	bl	1dd8c <net_buf_ref>
    70be:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
    70c2:	4620      	mov	r0, r4
    70c4:	f7ff fe46 	bl	6d54 <bt_send>
	if (err) {
    70c8:	b1c0      	cbz	r0, 70fc <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
    70ca:	4818      	ldr	r0, [pc, #96]	; (712c <hci_tx_thread+0x12c>)
    70cc:	f013 f846 	bl	1a15c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    70d0:	4620      	mov	r0, r4
    70d2:	f00f fe0d 	bl	16cf0 <net_buf_id>
    70d6:	4b16      	ldr	r3, [pc, #88]	; (7130 <hci_tx_thread+0x130>)
    70d8:	220c      	movs	r2, #12
    70da:	fb02 3000 	mla	r0, r2, r0, r3
    70de:	211f      	movs	r1, #31
    70e0:	8840      	ldrh	r0, [r0, #2]
    70e2:	4622      	mov	r2, r4
    70e4:	f7ff fca2 	bl	6a2c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    70e8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    70ec:	f00f febc 	bl	16e68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    70f0:	2300      	movs	r3, #0
		net_buf_unref(buf);
    70f2:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    70f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
    70f8:	f00f feb6 	bl	16e68 <net_buf_unref>
	for (; count; ev++, count--) {
    70fc:	3614      	adds	r6, #20
    70fe:	3d01      	subs	r5, #1
    7100:	e7ab      	b.n	705a <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    7102:	2b01      	cmp	r3, #1
    7104:	d1fa      	bne.n	70fc <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
    7106:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    7108:	3838      	subs	r0, #56	; 0x38
    710a:	f001 fcc9 	bl	8aa0 <bt_conn_process_tx>
    710e:	e7f5      	b.n	70fc <hci_tx_thread+0xfc>
    7110:	20000274 	.word	0x20000274
    7114:	00021923 	.word	0x00021923
    7118:	20000288 	.word	0x20000288
    711c:	00021957 	.word	0x00021957
    7120:	00021960 	.word	0x00021960
    7124:	20000224 	.word	0x20000224
    7128:	0002199d 	.word	0x0002199d
    712c:	20000208 	.word	0x20000208
    7130:	200017d4 	.word	0x200017d4

00007134 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    7134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7138:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    713a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    713e:	4630      	mov	r0, r6
    7140:	f016 fe95 	bl	1de6e <net_buf_simple_headroom>
	state->len = buf->len;
    7144:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    7148:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    714c:	4605      	mov	r5, r0
    714e:	d80c      	bhi.n	716a <hci_event_prio+0x36>
    7150:	4a1c      	ldr	r2, [pc, #112]	; (71c4 <hci_event_prio+0x90>)
    7152:	491d      	ldr	r1, [pc, #116]	; (71c8 <hci_event_prio+0x94>)
    7154:	481d      	ldr	r0, [pc, #116]	; (71cc <hci_event_prio+0x98>)
    7156:	f640 532f 	movw	r3, #3375	; 0xd2f
    715a:	f013 ffac 	bl	1b0b6 <printk>
    715e:	4040      	eors	r0, r0
    7160:	f380 8811 	msr	BASEPRI, r0
    7164:	f04f 0003 	mov.w	r0, #3
    7168:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    716a:	4630      	mov	r0, r6
    716c:	2102      	movs	r1, #2
    716e:	f016 fe66 	bl	1de3e <net_buf_simple_pull_mem>
    7172:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    7174:	7800      	ldrb	r0, [r0, #0]
    7176:	f014 feba 	bl	1beee <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    717a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    717c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    717e:	d40c      	bmi.n	719a <hci_event_prio+0x66>
    7180:	4a10      	ldr	r2, [pc, #64]	; (71c4 <hci_event_prio+0x90>)
    7182:	4913      	ldr	r1, [pc, #76]	; (71d0 <hci_event_prio+0x9c>)
    7184:	4811      	ldr	r0, [pc, #68]	; (71cc <hci_event_prio+0x98>)
    7186:	f640 5333 	movw	r3, #3379	; 0xd33
    718a:	f013 ff94 	bl	1b0b6 <printk>
    718e:	4040      	eors	r0, r0
    7190:	f380 8811 	msr	BASEPRI, r0
    7194:	f04f 0003 	mov.w	r0, #3
    7198:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    719a:	2305      	movs	r3, #5
    719c:	4a0d      	ldr	r2, [pc, #52]	; (71d4 <hci_event_prio+0xa0>)
    719e:	7838      	ldrb	r0, [r7, #0]
    71a0:	4621      	mov	r1, r4
    71a2:	f014 feb6 	bl	1bf12 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    71a6:	07b3      	lsls	r3, r6, #30
    71a8:	d507      	bpl.n	71ba <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    71aa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    71ac:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    71b0:	fa10 f585 	uxtah	r5, r0, r5
    71b4:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    71b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    71ba:	4620      	mov	r0, r4
}
    71bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    71c0:	f00f be52 	b.w	16e68 <net_buf_unref>
    71c4:	00021923 	.word	0x00021923
    71c8:	000219a1 	.word	0x000219a1
    71cc:	00021960 	.word	0x00021960
    71d0:	000219ba 	.word	0x000219ba
    71d4:	00020164 	.word	0x00020164

000071d8 <bt_recv>:

k_tid_t bt_recv_thread_id;

int bt_recv(struct net_buf *buf)
{
    71d8:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
    71da:	4d3b      	ldr	r5, [pc, #236]	; (72c8 <bt_recv+0xf0>)
    71dc:	682b      	ldr	r3, [r5, #0]
{
    71de:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    71e0:	b913      	cbnz	r3, 71e8 <bt_recv+0x10>
	return z_impl_z_current_get();
    71e2:	f013 fc71 	bl	1aac8 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    71e6:	6028      	str	r0, [r5, #0]
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    71e8:	7d23      	ldrb	r3, [r4, #20]

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    71ea:	2b01      	cmp	r3, #1
    71ec:	d036      	beq.n	725c <bt_recv+0x84>
    71ee:	2b03      	cmp	r3, #3
    71f0:	d163      	bne.n	72ba <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    71f2:	89a3      	ldrh	r3, [r4, #12]
    71f4:	2b03      	cmp	r3, #3
    71f6:	d80c      	bhi.n	7212 <bt_recv+0x3a>
    71f8:	4a34      	ldr	r2, [pc, #208]	; (72cc <bt_recv+0xf4>)
    71fa:	4935      	ldr	r1, [pc, #212]	; (72d0 <bt_recv+0xf8>)
    71fc:	4835      	ldr	r0, [pc, #212]	; (72d4 <bt_recv+0xfc>)
    71fe:	f240 13b5 	movw	r3, #437	; 0x1b5
    7202:	f013 ff58 	bl	1b0b6 <printk>
    7206:	4040      	eors	r0, r0
    7208:	f380 8811 	msr	BASEPRI, r0
    720c:	f04f 0003 	mov.w	r0, #3
    7210:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    7212:	2104      	movs	r1, #4
    7214:	f104 0008 	add.w	r0, r4, #8
    7218:	f016 fe11 	bl	1de3e <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    721c:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    721e:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    7220:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    7222:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    7224:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    7226:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    722a:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    722c:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    722e:	d003      	beq.n	7238 <bt_recv+0x60>
	net_buf_unref(buf);
    7230:	4620      	mov	r0, r4
    7232:	f00f fe19 	bl	16e68 <net_buf_unref>
    7236:	e00f      	b.n	7258 <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    7238:	f001 fa3e 	bl	86b8 <bt_conn_lookup_handle>
	if (!conn) {
    723c:	4605      	mov	r5, r0
    723e:	2800      	cmp	r0, #0
    7240:	d0f6      	beq.n	7230 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
    7242:	f001 fb0d 	bl	8860 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    7246:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    7248:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    724a:	4621      	mov	r1, r4
    724c:	4628      	mov	r0, r5
    724e:	f015 fb2a 	bl	1c8a6 <bt_conn_recv>
	bt_conn_unref(conn);
    7252:	4628      	mov	r0, r5
    7254:	f015 fbaf 	bl	1c9b6 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    7258:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    725a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    725c:	89a3      	ldrh	r3, [r4, #12]
    725e:	2b01      	cmp	r3, #1
    7260:	d80c      	bhi.n	727c <bt_recv+0xa4>
    7262:	4a1a      	ldr	r2, [pc, #104]	; (72cc <bt_recv+0xf4>)
    7264:	491a      	ldr	r1, [pc, #104]	; (72d0 <bt_recv+0xf8>)
    7266:	481b      	ldr	r0, [pc, #108]	; (72d4 <bt_recv+0xfc>)
    7268:	f640 1317 	movw	r3, #2327	; 0x917
    726c:	f013 ff23 	bl	1b0b6 <printk>
    7270:	4040      	eors	r0, r0
    7272:	f380 8811 	msr	BASEPRI, r0
    7276:	f04f 0003 	mov.w	r0, #3
    727a:	df02      	svc	2
    727c:	2102      	movs	r1, #2
    727e:	f104 0008 	add.w	r0, r4, #8
    7282:	f016 fddc 	bl	1de3e <net_buf_simple_pull_mem>
    7286:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    7288:	7800      	ldrb	r0, [r0, #0]
    728a:	f014 fe30 	bl	1beee <bt_hci_evt_get_flags>
    728e:	0783      	lsls	r3, r0, #30
    7290:	d40c      	bmi.n	72ac <bt_recv+0xd4>
    7292:	4a0e      	ldr	r2, [pc, #56]	; (72cc <bt_recv+0xf4>)
    7294:	4910      	ldr	r1, [pc, #64]	; (72d8 <bt_recv+0x100>)
    7296:	480f      	ldr	r0, [pc, #60]	; (72d4 <bt_recv+0xfc>)
    7298:	f640 131b 	movw	r3, #2331	; 0x91b
    729c:	f013 ff0b 	bl	1b0b6 <printk>
    72a0:	4040      	eors	r0, r0
    72a2:	f380 8811 	msr	BASEPRI, r0
    72a6:	f04f 0003 	mov.w	r0, #3
    72aa:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    72ac:	4a0b      	ldr	r2, [pc, #44]	; (72dc <bt_recv+0x104>)
    72ae:	7828      	ldrb	r0, [r5, #0]
    72b0:	2304      	movs	r3, #4
    72b2:	4621      	mov	r1, r4
    72b4:	f014 fe2d 	bl	1bf12 <handle_event>
    72b8:	e7ba      	b.n	7230 <bt_recv+0x58>
		net_buf_unref(buf);
    72ba:	4620      	mov	r0, r4
    72bc:	f00f fdd4 	bl	16e68 <net_buf_unref>
		return -EINVAL;
    72c0:	f06f 0015 	mvn.w	r0, #21
    72c4:	e7c9      	b.n	725a <bt_recv+0x82>
    72c6:	bf00      	nop
    72c8:	200017d0 	.word	0x200017d0
    72cc:	00021923 	.word	0x00021923
    72d0:	000219a1 	.word	0x000219a1
    72d4:	00021960 	.word	0x00021960
    72d8:	000219d3 	.word	0x000219d3
    72dc:	00020144 	.word	0x00020144

000072e0 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    72e0:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    72e2:	7d03      	ldrb	r3, [r0, #20]
    72e4:	2b01      	cmp	r3, #1
{
    72e6:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    72e8:	d00c      	beq.n	7304 <bt_recv_prio+0x24>
    72ea:	4a09      	ldr	r2, [pc, #36]	; (7310 <bt_recv_prio+0x30>)
    72ec:	4909      	ldr	r1, [pc, #36]	; (7314 <bt_recv_prio+0x34>)
    72ee:	480a      	ldr	r0, [pc, #40]	; (7318 <bt_recv_prio+0x38>)
    72f0:	f640 537c 	movw	r3, #3452	; 0xd7c
    72f4:	f013 fedf 	bl	1b0b6 <printk>
    72f8:	4040      	eors	r0, r0
    72fa:	f380 8811 	msr	BASEPRI, r0
    72fe:	f04f 0003 	mov.w	r0, #3
    7302:	df02      	svc	2

	hci_event_prio(buf);
    7304:	4620      	mov	r0, r4
    7306:	f7ff ff15 	bl	7134 <hci_event_prio>

	return 0;
}
    730a:	2000      	movs	r0, #0
    730c:	bd10      	pop	{r4, pc}
    730e:	bf00      	nop
    7310:	00021923 	.word	0x00021923
    7314:	00021a01 	.word	0x00021a01
    7318:	00021960 	.word	0x00021960

0000731c <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    731c:	4a08      	ldr	r2, [pc, #32]	; (7340 <bt_hci_driver_register+0x24>)
{
    731e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    7320:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    7324:	b930      	cbnz	r0, 7334 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    7326:	68d9      	ldr	r1, [r3, #12]
    7328:	b139      	cbz	r1, 733a <bt_hci_driver_register+0x1e>
    732a:	6919      	ldr	r1, [r3, #16]
    732c:	b129      	cbz	r1, 733a <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    732e:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    7332:	4770      	bx	lr
		return -EALREADY;
    7334:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7338:	4770      	bx	lr
		return -EINVAL;
    733a:	f06f 0015 	mvn.w	r0, #21
}
    733e:	4770      	bx	lr
    7340:	200000f0 	.word	0x200000f0

00007344 <bt_finalize_init>:

void bt_finalize_init(void)
{
    7344:	b508      	push	{r3, lr}
    7346:	4804      	ldr	r0, [pc, #16]	; (7358 <bt_finalize_init+0x14>)
    7348:	2102      	movs	r1, #2
    734a:	f014 fdfa 	bl	1bf42 <atomic_or>
	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
	}

	bt_dev_show_info();
}
    734e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    7352:	2000      	movs	r0, #0
    7354:	f000 bedc 	b.w	8110 <bt_le_scan_update>
    7358:	200001bc 	.word	0x200001bc

0000735c <bt_init>:

static int bt_init(void)
{
    735c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    735e:	4d3f      	ldr	r5, [pc, #252]	; (745c <bt_init+0x100>)
    7360:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    7364:	6899      	ldr	r1, [r3, #8]
    7366:	f011 0101 	ands.w	r1, r1, #1
    736a:	d123      	bne.n	73b4 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    736c:	aa01      	add	r2, sp, #4
    736e:	f640 4003 	movw	r0, #3075	; 0xc03
    7372:	f7ff fc3d 	bl	6bf0 <bt_hci_cmd_send_sync>
		if (err) {
    7376:	4604      	mov	r4, r0
    7378:	2800      	cmp	r0, #0
    737a:	d16b      	bne.n	7454 <bt_init+0xf8>
	uint8_t status = buf->data[0];
    737c:	9b01      	ldr	r3, [sp, #4]
    737e:	689b      	ldr	r3, [r3, #8]
	if (status) {
    7380:	781b      	ldrb	r3, [r3, #0]
    7382:	b9a3      	cbnz	r3, 73ae <bt_init+0x52>
		bt_scan_reset();
    7384:	f000 febe 	bl	8104 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7388:	f3bf 8f5b 	dmb	ish
    738c:	462b      	mov	r3, r5
    738e:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    7392:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    7396:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    739a:	f3bf 8f5b 	dmb	ish
    739e:	e853 1f00 	ldrex	r1, [r3]
    73a2:	e843 2000 	strex	r0, r2, [r3]
    73a6:	2800      	cmp	r0, #0
    73a8:	d1f9      	bne.n	739e <bt_init+0x42>
    73aa:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    73ae:	9801      	ldr	r0, [sp, #4]
    73b0:	f00f fd5a 	bl	16e68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    73b4:	aa01      	add	r2, sp, #4
    73b6:	2100      	movs	r1, #0
    73b8:	f241 0003 	movw	r0, #4099	; 0x1003
    73bc:	f7ff fc18 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    73c0:	4604      	mov	r4, r0
    73c2:	2800      	cmp	r0, #0
    73c4:	d146      	bne.n	7454 <bt_init+0xf8>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    73c6:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    73c8:	4825      	ldr	r0, [pc, #148]	; (7460 <bt_init+0x104>)
    73ca:	6899      	ldr	r1, [r3, #8]
    73cc:	2208      	movs	r2, #8
    73ce:	3101      	adds	r1, #1
    73d0:	f014 fcab 	bl	1bd2a <memcpy>
	net_buf_unref(rsp);
    73d4:	9801      	ldr	r0, [sp, #4]
    73d6:	f00f fd47 	bl	16e68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    73da:	4621      	mov	r1, r4
    73dc:	aa01      	add	r2, sp, #4
    73de:	f241 0001 	movw	r0, #4097	; 0x1001
    73e2:	f7ff fc05 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    73e6:	4604      	mov	r4, r0
    73e8:	2800      	cmp	r0, #0
    73ea:	d133      	bne.n	7454 <bt_init+0xf8>
	read_local_ver_complete(rsp);
    73ec:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    73ee:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    73f0:	785a      	ldrb	r2, [r3, #1]
    73f2:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    73f6:	78d9      	ldrb	r1, [r3, #3]
    73f8:	789a      	ldrb	r2, [r3, #2]
    73fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    73fe:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    7402:	791a      	ldrb	r2, [r3, #4]
    7404:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    7408:	7a19      	ldrb	r1, [r3, #8]
    740a:	79da      	ldrb	r2, [r3, #7]
    740c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7410:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    7414:	795a      	ldrb	r2, [r3, #5]
    7416:	799b      	ldrb	r3, [r3, #6]
    7418:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    741c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    7420:	f00f fd22 	bl	16e68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    7424:	4621      	mov	r1, r4
    7426:	aa01      	add	r2, sp, #4
    7428:	f241 0002 	movw	r0, #4098	; 0x1002
    742c:	f7ff fbe0 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    7430:	4604      	mov	r4, r0
    7432:	b978      	cbnz	r0, 7454 <bt_init+0xf8>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    7434:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    7436:	480b      	ldr	r0, [pc, #44]	; (7464 <bt_init+0x108>)
    7438:	6899      	ldr	r1, [r3, #8]
    743a:	2240      	movs	r2, #64	; 0x40
    743c:	3101      	adds	r1, #1
    743e:	f014 fc74 	bl	1bd2a <memcpy>
	net_buf_unref(rsp);
    7442:	9801      	ldr	r0, [sp, #4]
    7444:	f00f fd10 	bl	16e68 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    7448:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    744c:	065e      	lsls	r6, r3, #25
    744e:	d40b      	bmi.n	7468 <bt_init+0x10c>
		return -ENODEV;
    7450:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    7454:	4620      	mov	r0, r4
    7456:	b002      	add	sp, #8
    7458:	bd70      	pop	{r4, r5, r6, pc}
    745a:	bf00      	nop
    745c:	200000f0 	.word	0x200000f0
    7460:	20000160 	.word	0x20000160
    7464:	20000168 	.word	0x20000168
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    7468:	4621      	mov	r1, r4
    746a:	aa01      	add	r2, sp, #4
    746c:	f242 0003 	movw	r0, #8195	; 0x2003
    7470:	f7ff fbbe 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    7474:	4604      	mov	r4, r0
    7476:	2800      	cmp	r0, #0
    7478:	d1ec      	bne.n	7454 <bt_init+0xf8>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    747a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    747c:	48a1      	ldr	r0, [pc, #644]	; (7704 <bt_init+0x3a8>)
    747e:	6899      	ldr	r1, [r3, #8]
    7480:	2208      	movs	r2, #8
    7482:	3101      	adds	r1, #1
    7484:	f014 fc51 	bl	1bd2a <memcpy>
	net_buf_unref(rsp);
    7488:	9801      	ldr	r0, [sp, #4]
    748a:	f00f fced 	bl	16e68 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    748e:	4621      	mov	r1, r4
    7490:	aa01      	add	r2, sp, #4
    7492:	f242 0002 	movw	r0, #8194	; 0x2002
    7496:	f7ff fbab 	bl	6bf0 <bt_hci_cmd_send_sync>
		if (err) {
    749a:	4604      	mov	r4, r0
    749c:	2800      	cmp	r0, #0
    749e:	d1d9      	bne.n	7454 <bt_init+0xf8>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    74a0:	9b01      	ldr	r3, [sp, #4]
    74a2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    74a4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    74a8:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    74ac:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    74ae:	b121      	cbz	r1, 74ba <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    74b0:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    74b2:	4895      	ldr	r0, [pc, #596]	; (7708 <bt_init+0x3ac>)
    74b4:	4611      	mov	r1, r2
    74b6:	f017 ff99 	bl	1f3ec <z_impl_k_sem_init>
		net_buf_unref(rsp);
    74ba:	9801      	ldr	r0, [sp, #4]
    74bc:	f00f fcd4 	bl	16e68 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    74c0:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    74c4:	f016 0620 	ands.w	r6, r6, #32
    74c8:	f000 80f9 	beq.w	76be <bt_init+0x362>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    74cc:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    74d0:	071c      	lsls	r4, r3, #28
    74d2:	d512      	bpl.n	74fa <bt_init+0x19e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    74d4:	aa01      	add	r2, sp, #4
    74d6:	2100      	movs	r1, #0
    74d8:	f242 001c 	movw	r0, #8220	; 0x201c
    74dc:	f7ff fb88 	bl	6bf0 <bt_hci_cmd_send_sync>
		if (err) {
    74e0:	4604      	mov	r4, r0
    74e2:	2800      	cmp	r0, #0
    74e4:	d1b6      	bne.n	7454 <bt_init+0xf8>
		le_read_supp_states_complete(rsp);
    74e6:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    74e8:	6883      	ldr	r3, [r0, #8]
    74ea:	f8d3 2001 	ldr.w	r2, [r3, #1]
    74ee:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    74f2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    74f6:	f00f fcb7 	bl	16e68 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    74fa:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    74fe:	0698      	lsls	r0, r3, #26
    7500:	d523      	bpl.n	754a <bt_init+0x1ee>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    7502:	f10d 0102 	add.w	r1, sp, #2
    7506:	4668      	mov	r0, sp
    7508:	f014 fe07 	bl	1c11a <hci_le_read_max_data_len>
		if (err) {
    750c:	4604      	mov	r4, r0
    750e:	2800      	cmp	r0, #0
    7510:	d1a0      	bne.n	7454 <bt_init+0xf8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    7512:	2104      	movs	r1, #4
    7514:	f242 0024 	movw	r0, #8228	; 0x2024
    7518:	f7ff fb30 	bl	6b7c <bt_hci_cmd_create>
		if (!buf) {
    751c:	4606      	mov	r6, r0
    751e:	2800      	cmp	r0, #0
    7520:	f000 80d4 	beq.w	76cc <bt_init+0x370>
	return net_buf_simple_add(&buf->b, len);
    7524:	2104      	movs	r1, #4
    7526:	3008      	adds	r0, #8
    7528:	f016 fc62 	bl	1ddf0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    752c:	f8bd 3000 	ldrh.w	r3, [sp]
    7530:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    7532:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7536:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    7538:	4622      	mov	r2, r4
    753a:	4631      	mov	r1, r6
    753c:	f242 0024 	movw	r0, #8228	; 0x2024
    7540:	f7ff fb56 	bl	6bf0 <bt_hci_cmd_send_sync>
		if (err) {
    7544:	4604      	mov	r4, r0
    7546:	2800      	cmp	r0, #0
    7548:	d184      	bne.n	7454 <bt_init+0xf8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    754a:	2108      	movs	r1, #8
    754c:	f242 0001 	movw	r0, #8193	; 0x2001
    7550:	f7ff fb14 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
    7554:	4604      	mov	r4, r0
    7556:	2800      	cmp	r0, #0
    7558:	f000 80b8 	beq.w	76cc <bt_init+0x370>
    755c:	2108      	movs	r1, #8
    755e:	4408      	add	r0, r1
    7560:	f016 fc46 	bl	1ddf0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    7564:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    7568:	f012 0f02 	tst.w	r2, #2
    756c:	bf14      	ite	ne
    756e:	232f      	movne	r3, #47	; 0x2f
    7570:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    7572:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    7574:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    7578:	bf48      	it	mi
    757a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    757e:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    7582:	bf18      	it	ne
    7584:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    7588:	2200      	movs	r2, #0
    758a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    758c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    7590:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    7592:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    7594:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    7596:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    7598:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    759a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    759c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    759e:	4621      	mov	r1, r4
    75a0:	f242 0001 	movw	r0, #8193	; 0x2001
    75a4:	f7ff fb24 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    75a8:	4604      	mov	r4, r0
    75aa:	2800      	cmp	r0, #0
    75ac:	f47f af52 	bne.w	7454 <bt_init+0xf8>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    75b0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    75b4:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    75b8:	069a      	lsls	r2, r3, #26
    75ba:	f100 809c 	bmi.w	76f6 <bt_init+0x39a>
	if (bt_dev.le.acl_mtu) {
    75be:	b9d9      	cbnz	r1, 75f8 <bt_init+0x29c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    75c0:	aa01      	add	r2, sp, #4
    75c2:	f241 0005 	movw	r0, #4101	; 0x1005
    75c6:	f7ff fb13 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    75ca:	4604      	mov	r4, r0
    75cc:	2800      	cmp	r0, #0
    75ce:	f47f af41 	bne.w	7454 <bt_init+0xf8>
	if (bt_dev.le.acl_mtu) {
    75d2:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    75d6:	b963      	cbnz	r3, 75f2 <bt_init+0x296>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    75d8:	9b01      	ldr	r3, [sp, #4]
    75da:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    75dc:	785a      	ldrb	r2, [r3, #1]
    75de:	7899      	ldrb	r1, [r3, #2]
    75e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    75e4:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    75e8:	889a      	ldrh	r2, [r3, #4]
    75ea:	4847      	ldr	r0, [pc, #284]	; (7708 <bt_init+0x3ac>)
    75ec:	4611      	mov	r1, r2
    75ee:	f017 fefd 	bl	1f3ec <z_impl_k_sem_init>
	net_buf_unref(rsp);
    75f2:	9801      	ldr	r0, [sp, #4]
    75f4:	f00f fc38 	bl	16e68 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    75f8:	2108      	movs	r1, #8
    75fa:	f640 4001 	movw	r0, #3073	; 0xc01
    75fe:	f7ff fabd 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
    7602:	4604      	mov	r4, r0
    7604:	2800      	cmp	r0, #0
    7606:	d061      	beq.n	76cc <bt_init+0x370>
    7608:	2108      	movs	r1, #8
    760a:	4408      	add	r0, r1
    760c:	f016 fbf0 	bl	1ddf0 <net_buf_simple_add>
	dst[0] = val;
    7610:	2310      	movs	r3, #16
    7612:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    7614:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    7616:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    7618:	7043      	strb	r3, [r0, #1]
    761a:	2602      	movs	r6, #2
    761c:	2320      	movs	r3, #32
	dst[0] = val;
    761e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    7620:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    7622:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    7624:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    7626:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    7628:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    762a:	4621      	mov	r1, r4
    762c:	f640 4001 	movw	r0, #3073	; 0xc01
    7630:	f7ff fade 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    7634:	4604      	mov	r4, r0
    7636:	2800      	cmp	r0, #0
    7638:	f47f af0c 	bne.w	7454 <bt_init+0xf8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    763c:	4601      	mov	r1, r0
    763e:	aa01      	add	r2, sp, #4
    7640:	f64f 4001 	movw	r0, #64513	; 0xfc01
    7644:	f7ff fad4 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    7648:	4604      	mov	r4, r0
    764a:	bb48      	cbnz	r0, 76a0 <bt_init+0x344>
	net_buf_unref(rsp);
    764c:	9801      	ldr	r0, [sp, #4]
    764e:	f00f fc0b 	bl	16e68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    7652:	4621      	mov	r1, r4
    7654:	aa01      	add	r2, sp, #4
    7656:	f64f 4002 	movw	r0, #64514	; 0xfc02
    765a:	f7ff fac9 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    765e:	4604      	mov	r4, r0
    7660:	b9f0      	cbnz	r0, 76a0 <bt_init+0x344>
	rp.cmds = (void *)rsp->data;
    7662:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    7664:	4829      	ldr	r0, [pc, #164]	; (770c <bt_init+0x3b0>)
    7666:	6899      	ldr	r1, [r3, #8]
    7668:	4632      	mov	r2, r6
    766a:	3101      	adds	r1, #1
    766c:	f014 fb5d 	bl	1bd2a <memcpy>
	net_buf_unref(rsp);
    7670:	9801      	ldr	r0, [sp, #4]
    7672:	f00f fbf9 	bl	16e68 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    7676:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    767a:	075b      	lsls	r3, r3, #29
    767c:	d510      	bpl.n	76a0 <bt_init+0x344>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    767e:	aa01      	add	r2, sp, #4
    7680:	4621      	mov	r1, r4
    7682:	f64f 4003 	movw	r0, #64515	; 0xfc03
    7686:	f7ff fab3 	bl	6bf0 <bt_hci_cmd_send_sync>
		if (err) {
    768a:	b948      	cbnz	r0, 76a0 <bt_init+0x344>
		rp.feat = (void *)rsp->data;
    768c:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    768e:	4820      	ldr	r0, [pc, #128]	; (7710 <bt_init+0x3b4>)
    7690:	6899      	ldr	r1, [r3, #8]
    7692:	2201      	movs	r2, #1
    7694:	4411      	add	r1, r2
    7696:	f014 fb48 	bl	1bd2a <memcpy>
		net_buf_unref(rsp);
    769a:	9801      	ldr	r0, [sp, #4]
    769c:	f00f fbe4 	bl	16e68 <net_buf_unref>
	err = bt_id_init();
    76a0:	f000 faba 	bl	7c18 <bt_id_init>
	if (err) {
    76a4:	4604      	mov	r4, r0
    76a6:	2800      	cmp	r0, #0
    76a8:	f47f aed4 	bne.w	7454 <bt_init+0xf8>
		err = bt_conn_init();
    76ac:	f001 fa5e 	bl	8b6c <bt_conn_init>
		if (err) {
    76b0:	4604      	mov	r4, r0
    76b2:	2800      	cmp	r0, #0
    76b4:	f47f aece 	bne.w	7454 <bt_init+0xf8>
	bt_finalize_init();
    76b8:	f7ff fe44 	bl	7344 <bt_finalize_init>
	return 0;
    76bc:	e6ca      	b.n	7454 <bt_init+0xf8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    76be:	2102      	movs	r1, #2
    76c0:	f640 406d 	movw	r0, #3181	; 0xc6d
    76c4:	f7ff fa5a 	bl	6b7c <bt_hci_cmd_create>
		if (!buf) {
    76c8:	4604      	mov	r4, r0
    76ca:	b910      	cbnz	r0, 76d2 <bt_init+0x376>
		return -ENOBUFS;
    76cc:	f06f 0468 	mvn.w	r4, #104	; 0x68
    76d0:	e6c0      	b.n	7454 <bt_init+0xf8>
    76d2:	2102      	movs	r1, #2
    76d4:	3008      	adds	r0, #8
    76d6:	f016 fb8b 	bl	1ddf0 <net_buf_simple_add>
		cp_le->le = 0x01;
    76da:	2301      	movs	r3, #1
    76dc:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    76de:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    76e0:	4621      	mov	r1, r4
    76e2:	4632      	mov	r2, r6
    76e4:	f640 406d 	movw	r0, #3181	; 0xc6d
    76e8:	f7ff fa82 	bl	6bf0 <bt_hci_cmd_send_sync>
		if (err) {
    76ec:	4604      	mov	r4, r0
    76ee:	2800      	cmp	r0, #0
    76f0:	f43f aeec 	beq.w	74cc <bt_init+0x170>
    76f4:	e6ae      	b.n	7454 <bt_init+0xf8>
	else if (!bt_dev.le.acl_mtu) {
    76f6:	2900      	cmp	r1, #0
    76f8:	f47f af7e 	bne.w	75f8 <bt_init+0x29c>
		return -EIO;
    76fc:	f06f 0404 	mvn.w	r4, #4
    7700:	e6a8      	b.n	7454 <bt_init+0xf8>
    7702:	bf00      	nop
    7704:	200001c0 	.word	0x200001c0
    7708:	200001f0 	.word	0x200001f0
    770c:	200001a9 	.word	0x200001a9
    7710:	200001a8 	.word	0x200001a8

00007714 <init_work>:

static void init_work(struct k_work *work)
{
    7714:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    7716:	f7ff fe21 	bl	735c <bt_init>
	if (ready_cb) {
    771a:	4b03      	ldr	r3, [pc, #12]	; (7728 <init_work+0x14>)
    771c:	681b      	ldr	r3, [r3, #0]
    771e:	b113      	cbz	r3, 7726 <init_work+0x12>
		ready_cb(err);
	}
}
    7720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    7724:	4718      	bx	r3
}
    7726:	bd10      	pop	{r4, pc}
    7728:	200017ec 	.word	0x200017ec

0000772c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    772c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    772e:	4d20      	ldr	r5, [pc, #128]	; (77b0 <bt_enable+0x84>)
    7730:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    7734:	b088      	sub	sp, #32
    7736:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    7738:	2b00      	cmp	r3, #0
    773a:	d032      	beq.n	77a2 <bt_enable+0x76>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    773c:	2101      	movs	r1, #1
    773e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    7742:	f014 fbfe 	bl	1bf42 <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7746:	ea10 0301 	ands.w	r3, r0, r1
    774a:	d12d      	bne.n	77a8 <bt_enable+0x7c>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    774c:	4a19      	ldr	r2, [pc, #100]	; (77b4 <bt_enable+0x88>)
    774e:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7750:	2000      	movs	r0, #0
    7752:	2100      	movs	r1, #0
    7754:	f06f 0208 	mvn.w	r2, #8
    7758:	e9cd 0106 	strd	r0, r1, [sp, #24]
    775c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7760:	e9cd 3300 	strd	r3, r3, [sp]
    7764:	9304      	str	r3, [sp, #16]
    7766:	4914      	ldr	r1, [pc, #80]	; (77b8 <bt_enable+0x8c>)
    7768:	4b14      	ldr	r3, [pc, #80]	; (77bc <bt_enable+0x90>)
    776a:	4815      	ldr	r0, [pc, #84]	; (77c0 <bt_enable+0x94>)
    776c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7770:	f012 fc1c 	bl	19fac <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    7774:	4913      	ldr	r1, [pc, #76]	; (77c4 <bt_enable+0x98>)
    7776:	4812      	ldr	r0, [pc, #72]	; (77c0 <bt_enable+0x94>)
    7778:	f017 fd5f 	bl	1f23a <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    777c:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    7780:	68db      	ldr	r3, [r3, #12]
    7782:	4798      	blx	r3
	if (err) {
    7784:	4604      	mov	r4, r0
    7786:	b948      	cbnz	r0, 779c <bt_enable+0x70>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    7788:	b926      	cbnz	r6, 7794 <bt_enable+0x68>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    778a:	b008      	add	sp, #32
    778c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    7790:	f7ff bde4 	b.w	735c <bt_init>
	k_work_submit(&bt_dev.init);
    7794:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    7798:	f012 fe4c 	bl	1a434 <k_work_submit>
}
    779c:	4620      	mov	r0, r4
    779e:	b008      	add	sp, #32
    77a0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    77a2:	f06f 0412 	mvn.w	r4, #18
    77a6:	e7f9      	b.n	779c <bt_enable+0x70>
		return -EALREADY;
    77a8:	f06f 0477 	mvn.w	r4, #119	; 0x77
    77ac:	e7f6      	b.n	779c <bt_enable+0x70>
    77ae:	bf00      	nop
    77b0:	200000f0 	.word	0x200000f0
    77b4:	200017ec 	.word	0x200017ec
    77b8:	20003e60 	.word	0x20003e60
    77bc:	00007001 	.word	0x00007001
    77c0:	20000dd8 	.word	0x20000dd8
    77c4:	00021a24 	.word	0x00021a24

000077c8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    77c8:	4800      	ldr	r0, [pc, #0]	; (77cc <bt_get_name+0x4>)
    77ca:	4770      	bx	lr
    77cc:	00021705 	.word	0x00021705

000077d0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    77d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    77d2:	4f0b      	ldr	r7, [pc, #44]	; (7800 <id_find+0x30>)
{
    77d4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    77d6:	2500      	movs	r5, #0
    77d8:	79fb      	ldrb	r3, [r7, #7]
    77da:	b2ec      	uxtb	r4, r5
    77dc:	42a3      	cmp	r3, r4
    77de:	d802      	bhi.n	77e6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    77e0:	f06f 0401 	mvn.w	r4, #1
    77e4:	e009      	b.n	77fa <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    77e6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    77ea:	2207      	movs	r2, #7
    77ec:	4439      	add	r1, r7
    77ee:	4630      	mov	r0, r6
    77f0:	f014 fa8a 	bl	1bd08 <memcmp>
    77f4:	3501      	adds	r5, #1
    77f6:	2800      	cmp	r0, #0
    77f8:	d1ee      	bne.n	77d8 <id_find+0x8>
}
    77fa:	4620      	mov	r0, r4
    77fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77fe:	bf00      	nop
    7800:	200000f0 	.word	0x200000f0

00007804 <set_random_address>:
{
    7804:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    7806:	4914      	ldr	r1, [pc, #80]	; (7858 <set_random_address+0x54>)
    7808:	2206      	movs	r2, #6
    780a:	4605      	mov	r5, r0
    780c:	f014 fa7c 	bl	1bd08 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    7810:	4604      	mov	r4, r0
    7812:	b1e0      	cbz	r0, 784e <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    7814:	2106      	movs	r1, #6
    7816:	f242 0005 	movw	r0, #8197	; 0x2005
    781a:	f7ff f9af 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
    781e:	4604      	mov	r4, r0
    7820:	b1b8      	cbz	r0, 7852 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7822:	2206      	movs	r2, #6
    7824:	4629      	mov	r1, r5
    7826:	3008      	adds	r0, #8
    7828:	f016 fae8 	bl	1ddfc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    782c:	4621      	mov	r1, r4
    782e:	2200      	movs	r2, #0
    7830:	f242 0005 	movw	r0, #8197	; 0x2005
    7834:	f7ff f9dc 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    7838:	4604      	mov	r4, r0
    783a:	b940      	cbnz	r0, 784e <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    783c:	2206      	movs	r2, #6
    783e:	4806      	ldr	r0, [pc, #24]	; (7858 <set_random_address+0x54>)
    7840:	4629      	mov	r1, r5
    7842:	f014 fa72 	bl	1bd2a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    7846:	4b05      	ldr	r3, [pc, #20]	; (785c <set_random_address+0x58>)
    7848:	2201      	movs	r2, #1
    784a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    784e:	4620      	mov	r0, r4
    7850:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    7852:	f06f 0468 	mvn.w	r4, #104	; 0x68
    7856:	e7fa      	b.n	784e <set_random_address+0x4a>
    7858:	20000151 	.word	0x20000151
    785c:	200000f0 	.word	0x200000f0

00007860 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    7860:	b530      	push	{r4, r5, lr}
    7862:	4604      	mov	r4, r0
    7864:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7866:	460d      	mov	r5, r1
    7868:	b1a1      	cbz	r1, 7894 <id_create.constprop.0+0x34>
    786a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    786c:	2207      	movs	r2, #7
    786e:	a902      	add	r1, sp, #8
    7870:	4628      	mov	r0, r5
    7872:	9302      	str	r3, [sp, #8]
    7874:	f8cd 300b 	str.w	r3, [sp, #11]
    7878:	f014 fa46 	bl	1bd08 <memcmp>
    787c:	b150      	cbz	r0, 7894 <id_create.constprop.0+0x34>
	memcpy(dst, src, sizeof(*dst));
    787e:	4812      	ldr	r0, [pc, #72]	; (78c8 <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    7880:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    7884:	2207      	movs	r2, #7
    7886:	4629      	mov	r1, r5
    7888:	4420      	add	r0, r4
    788a:	f014 fa4e 	bl	1bd2a <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    788e:	2000      	movs	r0, #0
}
    7890:	b005      	add	sp, #20
    7892:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    7894:	4668      	mov	r0, sp
    7896:	f014 fb1c 	bl	1bed2 <bt_addr_le_create_static>
			if (err) {
    789a:	2800      	cmp	r0, #0
    789c:	d1f8      	bne.n	7890 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
    789e:	4668      	mov	r0, sp
    78a0:	f7ff ff96 	bl	77d0 <id_find>
    78a4:	2800      	cmp	r0, #0
    78a6:	daf5      	bge.n	7894 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    78a8:	4807      	ldr	r0, [pc, #28]	; (78c8 <id_create.constprop.0+0x68>)
    78aa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    78ae:	4404      	add	r4, r0
    78b0:	2207      	movs	r2, #7
    78b2:	4669      	mov	r1, sp
    78b4:	4620      	mov	r0, r4
    78b6:	f014 fa38 	bl	1bd2a <memcpy>
		if (addr) {
    78ba:	2d00      	cmp	r5, #0
    78bc:	d0e7      	beq.n	788e <id_create.constprop.0+0x2e>
    78be:	2207      	movs	r2, #7
    78c0:	4621      	mov	r1, r4
    78c2:	4628      	mov	r0, r5
    78c4:	e7e1      	b.n	788a <id_create.constprop.0+0x2a>
    78c6:	bf00      	nop
    78c8:	200000f0 	.word	0x200000f0

000078cc <bt_id_adv_random_addr_check>:
{
    78cc:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    78ce:	4805      	ldr	r0, [pc, #20]	; (78e4 <bt_id_adv_random_addr_check+0x18>)
    78d0:	f014 fde0 	bl	1c494 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    78d4:	0503      	lsls	r3, r0, #20
    78d6:	d402      	bmi.n	78de <bt_id_adv_random_addr_check+0x12>
    78d8:	4802      	ldr	r0, [pc, #8]	; (78e4 <bt_id_adv_random_addr_check+0x18>)
    78da:	f014 fddb 	bl	1c494 <atomic_get>
}
    78de:	2001      	movs	r0, #1
    78e0:	bd08      	pop	{r3, pc}
    78e2:	bf00      	nop
    78e4:	200001bc 	.word	0x200001bc

000078e8 <bt_id_get>:
{
    78e8:	b538      	push	{r3, r4, r5, lr}
    78ea:	460d      	mov	r5, r1
		size_t to_copy = MIN(*count, bt_dev.id_count);
    78ec:	4906      	ldr	r1, [pc, #24]	; (7908 <bt_id_get+0x20>)
    78ee:	79cc      	ldrb	r4, [r1, #7]
	if (addrs) {
    78f0:	b138      	cbz	r0, 7902 <bt_id_get+0x1a>
		size_t to_copy = MIN(*count, bt_dev.id_count);
    78f2:	682b      	ldr	r3, [r5, #0]
    78f4:	429c      	cmp	r4, r3
    78f6:	bf28      	it	cs
    78f8:	461c      	movcs	r4, r3
		memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
    78fa:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    78fe:	f014 fa14 	bl	1bd2a <memcpy>
		*count = bt_dev.id_count;
    7902:	602c      	str	r4, [r5, #0]
}
    7904:	bd38      	pop	{r3, r4, r5, pc}
    7906:	bf00      	nop
    7908:	200000f0 	.word	0x200000f0

0000790c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    790c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    790e:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7910:	4605      	mov	r5, r0
    7912:	b918      	cbnz	r0, 791c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    7914:	b1ec      	cbz	r4, 7952 <bt_id_create+0x46>
		return -EINVAL;
    7916:	f06f 0015 	mvn.w	r0, #21
    791a:	e018      	b.n	794e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    791c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    791e:	2207      	movs	r2, #7
    7920:	4669      	mov	r1, sp
    7922:	9300      	str	r3, [sp, #0]
    7924:	f8cd 3003 	str.w	r3, [sp, #3]
    7928:	f014 f9ee 	bl	1bd08 <memcmp>
    792c:	2800      	cmp	r0, #0
    792e:	d0f1      	beq.n	7914 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    7930:	782b      	ldrb	r3, [r5, #0]
    7932:	2b01      	cmp	r3, #1
    7934:	d1ef      	bne.n	7916 <bt_id_create+0xa>
    7936:	79ab      	ldrb	r3, [r5, #6]
    7938:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    793c:	2bc0      	cmp	r3, #192	; 0xc0
    793e:	d1ea      	bne.n	7916 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    7940:	4628      	mov	r0, r5
    7942:	f7ff ff45 	bl	77d0 <id_find>
    7946:	2800      	cmp	r0, #0
    7948:	dbe4      	blt.n	7914 <bt_id_create+0x8>
			return -EALREADY;
    794a:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    794e:	b002      	add	sp, #8
    7950:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    7952:	4e12      	ldr	r6, [pc, #72]	; (799c <bt_id_create+0x90>)
    7954:	79f3      	ldrb	r3, [r6, #7]
    7956:	2b01      	cmp	r3, #1
    7958:	d01c      	beq.n	7994 <bt_id_create+0x88>
    795a:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    795e:	f014 fd99 	bl	1c494 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7962:	07c3      	lsls	r3, r0, #31
    7964:	d40b      	bmi.n	797e <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    7966:	2d00      	cmp	r5, #0
    7968:	d0d5      	beq.n	7916 <bt_id_create+0xa>
    796a:	2207      	movs	r2, #7
    796c:	4669      	mov	r1, sp
    796e:	4628      	mov	r0, r5
    7970:	9400      	str	r4, [sp, #0]
    7972:	f8cd 4003 	str.w	r4, [sp, #3]
    7976:	f014 f9c7 	bl	1bd08 <memcmp>
    797a:	2800      	cmp	r0, #0
    797c:	d0cb      	beq.n	7916 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    797e:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    7980:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    7982:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    7984:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    7986:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    7988:	f7ff ff6a 	bl	7860 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    798c:	2800      	cmp	r0, #0
    798e:	bf08      	it	eq
    7990:	4620      	moveq	r0, r4
    7992:	e7dc      	b.n	794e <bt_id_create+0x42>
		return -ENOMEM;
    7994:	f06f 000b 	mvn.w	r0, #11
    7998:	e7d9      	b.n	794e <bt_id_create+0x42>
    799a:	bf00      	nop
    799c:	200000f0 	.word	0x200000f0

000079a0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    79a0:	b570      	push	{r4, r5, r6, lr}
    79a2:	b086      	sub	sp, #24
    79a4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    79a6:	aa01      	add	r2, sp, #4
    79a8:	2100      	movs	r1, #0
    79aa:	f241 0009 	movw	r0, #4105	; 0x1009
    79ae:	f7ff f91f 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    79b2:	4604      	mov	r4, r0
    79b4:	b970      	cbnz	r0, 79d4 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    79b6:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    79b8:	9002      	str	r0, [sp, #8]
    79ba:	689d      	ldr	r5, [r3, #8]
    79bc:	f8ad 000c 	strh.w	r0, [sp, #12]
    79c0:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    79c2:	2206      	movs	r2, #6
    79c4:	a902      	add	r1, sp, #8
    79c6:	4628      	mov	r0, r5
    79c8:	f014 f99e 	bl	1bd08 <memcmp>
    79cc:	b920      	cbnz	r0, 79d8 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    79ce:	9801      	ldr	r0, [sp, #4]
    79d0:	f00f fa4a 	bl	16e68 <net_buf_unref>
		return 0U;
    79d4:	2000      	movs	r0, #0
    79d6:	e016      	b.n	7a06 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    79d8:	4b0c      	ldr	r3, [pc, #48]	; (7a0c <bt_id_read_public_addr+0x6c>)
    79da:	6818      	ldr	r0, [r3, #0]
    79dc:	9004      	str	r0, [sp, #16]
    79de:	889b      	ldrh	r3, [r3, #4]
    79e0:	f8ad 3014 	strh.w	r3, [sp, #20]
    79e4:	2206      	movs	r2, #6
    79e6:	a904      	add	r1, sp, #16
    79e8:	4628      	mov	r0, r5
    79ea:	f014 f98d 	bl	1bd08 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    79ee:	2800      	cmp	r0, #0
    79f0:	d0ed      	beq.n	79ce <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
    79f2:	2206      	movs	r2, #6
    79f4:	4629      	mov	r1, r5
    79f6:	1c70      	adds	r0, r6, #1
    79f8:	f014 f997 	bl	1bd2a <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
    79fc:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    79fe:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    7a00:	f00f fa32 	bl	16e68 <net_buf_unref>
	return 1U;
    7a04:	2001      	movs	r0, #1
}
    7a06:	b006      	add	sp, #24
    7a08:	bd70      	pop	{r4, r5, r6, pc}
    7a0a:	bf00      	nop
    7a0c:	0002004d 	.word	0x0002004d

00007a10 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    7a10:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    7a12:	4668      	mov	r0, sp
    7a14:	f7ff ffc4 	bl	79a0 <bt_id_read_public_addr>
    7a18:	4b04      	ldr	r3, [pc, #16]	; (7a2c <bt_setup_public_id_addr+0x1c>)
    7a1a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    7a1c:	b118      	cbz	r0, 7a26 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    7a1e:	4669      	mov	r1, sp
    7a20:	2000      	movs	r0, #0
    7a22:	f7ff ff1d 	bl	7860 <id_create.constprop.0>
}
    7a26:	b003      	add	sp, #12
    7a28:	f85d fb04 	ldr.w	pc, [sp], #4
    7a2c:	200000f0 	.word	0x200000f0

00007a30 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    7a30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7a34:	4b15      	ldr	r3, [pc, #84]	; (7a8c <bt_read_static_addr+0x5c>)
    7a36:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    7a3a:	f014 0401 	ands.w	r4, r4, #1
{
    7a3e:	4607      	mov	r7, r0
    7a40:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7a42:	d015      	beq.n	7a70 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    7a44:	aa01      	add	r2, sp, #4
    7a46:	2100      	movs	r1, #0
    7a48:	f64f 4009 	movw	r0, #64521	; 0xfc09
    7a4c:	f7ff f8d0 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    7a50:	4605      	mov	r5, r0
    7a52:	b9c8      	cbnz	r0, 7a88 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    7a54:	9b01      	ldr	r3, [sp, #4]
    7a56:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    7a58:	785c      	ldrb	r4, [r3, #1]
    7a5a:	42b4      	cmp	r4, r6
    7a5c:	bf28      	it	cs
    7a5e:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    7a60:	f04f 0816 	mov.w	r8, #22
    7a64:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    7a66:	42a5      	cmp	r5, r4
    7a68:	db06      	blt.n	7a78 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
    7a6a:	9801      	ldr	r0, [sp, #4]
    7a6c:	f00f f9fc 	bl	16e68 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    7a70:	4620      	mov	r0, r4
    7a72:	b002      	add	sp, #8
    7a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    7a78:	fb08 7005 	mla	r0, r8, r5, r7
    7a7c:	2216      	movs	r2, #22
    7a7e:	4631      	mov	r1, r6
    7a80:	f014 f953 	bl	1bd2a <memcpy>
	for (i = 0; i < cnt; i++) {
    7a84:	3501      	adds	r5, #1
    7a86:	e7ee      	b.n	7a66 <bt_read_static_addr+0x36>
		return 0;
    7a88:	2400      	movs	r4, #0
    7a8a:	e7f1      	b.n	7a70 <bt_read_static_addr+0x40>
    7a8c:	200000f0 	.word	0x200000f0

00007a90 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    7a90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    7a92:	4e15      	ldr	r6, [pc, #84]	; (7ae8 <bt_setup_random_id_addr+0x58>)
    7a94:	79f4      	ldrb	r4, [r6, #7]
{
    7a96:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    7a98:	b9f4      	cbnz	r4, 7ad8 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    7a9a:	2101      	movs	r1, #1
    7a9c:	a802      	add	r0, sp, #8
    7a9e:	f7ff ffc7 	bl	7a30 <bt_read_static_addr>
    7aa2:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    7aa4:	b1c0      	cbz	r0, 7ad8 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    7aa6:	2716      	movs	r7, #22
    7aa8:	ab02      	add	r3, sp, #8
    7aaa:	b2e5      	uxtb	r5, r4
    7aac:	fb07 3105 	mla	r1, r7, r5, r3
    7ab0:	2206      	movs	r2, #6
    7ab2:	f10d 0001 	add.w	r0, sp, #1
    7ab6:	f014 f938 	bl	1bd2a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    7aba:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    7abc:	4669      	mov	r1, sp
    7abe:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    7ac0:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    7ac4:	f7ff fecc 	bl	7860 <id_create.constprop.0>
				if (err) {
    7ac8:	b920      	cbnz	r0, 7ad4 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    7aca:	79f2      	ldrb	r2, [r6, #7]
    7acc:	3401      	adds	r4, #1
    7ace:	b2e3      	uxtb	r3, r4
    7ad0:	429a      	cmp	r2, r3
    7ad2:	d8e9      	bhi.n	7aa8 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    7ad4:	b009      	add	sp, #36	; 0x24
    7ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    7ad8:	2100      	movs	r1, #0
    7ada:	4608      	mov	r0, r1
}
    7adc:	b009      	add	sp, #36	; 0x24
    7ade:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    7ae2:	f7ff bf13 	b.w	790c <bt_id_create>
    7ae6:	bf00      	nop
    7ae8:	200000f0 	.word	0x200000f0

00007aec <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    7aec:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    7aee:	4c07      	ldr	r4, [pc, #28]	; (7b0c <bt_id_set_create_conn_own_addr+0x20>)
    7af0:	7823      	ldrb	r3, [r4, #0]
    7af2:	2b01      	cmp	r3, #1
{
    7af4:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
    7af6:	d003      	beq.n	7b00 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
    7af8:	7823      	ldrb	r3, [r4, #0]
    7afa:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    7afc:	2000      	movs	r0, #0
}
    7afe:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    7b00:	1c60      	adds	r0, r4, #1
    7b02:	f7ff fe7f 	bl	7804 <set_random_address>
			if (err) {
    7b06:	2800      	cmp	r0, #0
    7b08:	d0f6      	beq.n	7af8 <bt_id_set_create_conn_own_addr+0xc>
    7b0a:	e7f8      	b.n	7afe <bt_id_set_create_conn_own_addr+0x12>
    7b0c:	200000f0 	.word	0x200000f0

00007b10 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    7b10:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    7b12:	4b0b      	ldr	r3, [pc, #44]	; (7b40 <bt_id_set_scan_own_addr+0x30>)
    7b14:	781b      	ldrb	r3, [r3, #0]
    7b16:	700b      	strb	r3, [r1, #0]
{
    7b18:	4606      	mov	r6, r0
    7b1a:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    7b1c:	f014 fcc0 	bl	1c4a0 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    7b20:	b928      	cbnz	r0, 7b2e <bt_id_set_scan_own_addr+0x1e>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    7b22:	f014 fcc9 	bl	1c4b8 <bt_id_set_private_addr>
			if (err) {
    7b26:	4604      	mov	r4, r0
    7b28:	b918      	cbnz	r0, 7b32 <bt_id_set_scan_own_addr+0x22>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    7b2a:	2301      	movs	r3, #1
    7b2c:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    7b2e:	2400      	movs	r4, #0
    7b30:	e004      	b.n	7b3c <bt_id_set_scan_own_addr+0x2c>
				if (active_scan || !is_adv_using_rand_addr()) {
    7b32:	b91e      	cbnz	r6, 7b3c <bt_id_set_scan_own_addr+0x2c>
    7b34:	f014 fcb4 	bl	1c4a0 <is_adv_using_rand_addr>
    7b38:	2800      	cmp	r0, #0
    7b3a:	d1f6      	bne.n	7b2a <bt_id_set_scan_own_addr+0x1a>
}
    7b3c:	4620      	mov	r0, r4
    7b3e:	bd70      	pop	{r4, r5, r6, pc}
    7b40:	200000f0 	.word	0x200000f0

00007b44 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    7b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7b48:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    7b4c:	7806      	ldrb	r6, [r0, #0]
{
    7b4e:	4680      	mov	r8, r0
    7b50:	460d      	mov	r5, r1
    7b52:	4691      	mov	r9, r2
    7b54:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7b56:	d02b      	beq.n	7bb0 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    7b58:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 7c10 <bt_id_set_adv_own_addr+0xcc>
    7b5c:	b12a      	cbz	r2, 7b6a <bt_id_set_adv_own_addr+0x26>
    7b5e:	0688      	lsls	r0, r1, #26
    7b60:	d503      	bpl.n	7b6a <bt_id_set_adv_own_addr+0x26>
    7b62:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
    7b66:	0659      	lsls	r1, r3, #25
    7b68:	d54f      	bpl.n	7c0a <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7b6a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    7b6e:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    7b72:	f818 3003 	ldrb.w	r3, [r8, r3]
    7b76:	2b01      	cmp	r3, #1
    7b78:	d009      	beq.n	7b8e <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    7b7a:	ebaa 0606 	sub.w	r6, sl, r6
    7b7e:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    7b82:	f1b9 0f00 	cmp.w	r9, #0
    7b86:	d10e      	bne.n	7ba6 <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    7b88:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    7b8a:	2400      	movs	r4, #0
    7b8c:	e008      	b.n	7ba0 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    7b8e:	2007      	movs	r0, #7
    7b90:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    7b94:	4440      	add	r0, r8
    7b96:	f7ff fe35 	bl	7804 <set_random_address>
				if (err) {
    7b9a:	4604      	mov	r4, r0
    7b9c:	2800      	cmp	r0, #0
    7b9e:	d0ec      	beq.n	7b7a <bt_id_set_adv_own_addr+0x36>
}
    7ba0:	4620      	mov	r0, r4
    7ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    7ba6:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    7ba8:	bf48      	it	mi
    7baa:	f043 0302 	orrmi.w	r3, r3, #2
    7bae:	e7eb      	b.n	7b88 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    7bb0:	f011 0504 	ands.w	r5, r1, #4
    7bb4:	d014      	beq.n	7be0 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7bb6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 7c10 <bt_id_set_adv_own_addr+0xcc>
    7bba:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    7bbe:	00f5      	lsls	r5, r6, #3
    7bc0:	f818 3003 	ldrb.w	r3, [r8, r3]
    7bc4:	2b01      	cmp	r3, #1
    7bc6:	d106      	bne.n	7bd6 <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    7bc8:	2007      	movs	r0, #7
    7bca:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    7bce:	4440      	add	r0, r8
    7bd0:	f7ff fe18 	bl	7804 <set_random_address>
    7bd4:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    7bd6:	1bad      	subs	r5, r5, r6
    7bd8:	f818 3005 	ldrb.w	r3, [r8, r5]
    7bdc:	703b      	strb	r3, [r7, #0]
    7bde:	e7df      	b.n	7ba0 <bt_id_set_adv_own_addr+0x5c>
    7be0:	480c      	ldr	r0, [pc, #48]	; (7c14 <bt_id_set_adv_own_addr+0xd0>)
    7be2:	f014 fc57 	bl	1c494 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    7be6:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7be8:	f3c0 1640 	ubfx	r6, r0, #5, #1
    7bec:	d502      	bpl.n	7bf4 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    7bee:	4628      	mov	r0, r5
    7bf0:	f014 fdfb 	bl	1c7ea <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    7bf4:	4640      	mov	r0, r8
    7bf6:	f014 fc71 	bl	1c4dc <bt_id_set_adv_private_addr>
    7bfa:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7bfc:	2001      	movs	r0, #1
    7bfe:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    7c00:	2e00      	cmp	r6, #0
    7c02:	d0cd      	beq.n	7ba0 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    7c04:	f014 fdf1 	bl	1c7ea <bt_le_scan_set_enable>
		if (err) {
    7c08:	e7ca      	b.n	7ba0 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    7c0a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7c0e:	e7c7      	b.n	7ba0 <bt_id_set_adv_own_addr+0x5c>
    7c10:	200000f0 	.word	0x200000f0
    7c14:	200001bc 	.word	0x200001bc

00007c18 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    7c18:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    7c1a:	4c0a      	ldr	r4, [pc, #40]	; (7c44 <bt_id_init+0x2c>)
    7c1c:	79e3      	ldrb	r3, [r4, #7]
    7c1e:	b10b      	cbz	r3, 7c24 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    7c20:	2000      	movs	r0, #0
}
    7c22:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    7c24:	f7ff fef4 	bl	7a10 <bt_setup_public_id_addr>
		if (err) {
    7c28:	2800      	cmp	r0, #0
    7c2a:	d1fa      	bne.n	7c22 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    7c2c:	79e3      	ldrb	r3, [r4, #7]
    7c2e:	2b00      	cmp	r3, #0
    7c30:	d1f6      	bne.n	7c20 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    7c32:	f7ff ff2d 	bl	7a90 <bt_setup_random_id_addr>
		if (err) {
    7c36:	2800      	cmp	r0, #0
    7c38:	d1f3      	bne.n	7c22 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    7c3a:	1c60      	adds	r0, r4, #1
}
    7c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    7c40:	f7ff bde0 	b.w	7804 <set_random_address>
    7c44:	200000f0 	.word	0x200000f0

00007c48 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7c48:	6843      	ldr	r3, [r0, #4]
{
    7c4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7c4c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7c4e:	0558      	lsls	r0, r3, #21
    7c50:	d502      	bpl.n	7c58 <valid_adv_param+0x10>
		return false;
    7c52:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    7c54:	b003      	add	sp, #12
    7c56:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7c58:	6922      	ldr	r2, [r4, #16]
    7c5a:	b10a      	cbz	r2, 7c60 <valid_adv_param+0x18>
    7c5c:	07d9      	lsls	r1, r3, #31
    7c5e:	d5f8      	bpl.n	7c52 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    7c60:	4d1a      	ldr	r5, [pc, #104]	; (7ccc <valid_adv_param+0x84>)
    7c62:	7820      	ldrb	r0, [r4, #0]
    7c64:	79eb      	ldrb	r3, [r5, #7]
    7c66:	4283      	cmp	r3, r0
    7c68:	d9f3      	bls.n	7c52 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    7c6a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    7c6e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    7c70:	2207      	movs	r2, #7
    7c72:	4669      	mov	r1, sp
    7c74:	4428      	add	r0, r5
    7c76:	9300      	str	r3, [sp, #0]
    7c78:	f8cd 3003 	str.w	r3, [sp, #3]
    7c7c:	f014 f844 	bl	1bd08 <memcmp>
	if (param->id >= bt_dev.id_count ||
    7c80:	2800      	cmp	r0, #0
    7c82:	d0e6      	beq.n	7c52 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7c84:	6860      	ldr	r0, [r4, #4]
    7c86:	07c2      	lsls	r2, r0, #31
    7c88:	d406      	bmi.n	7c98 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    7c8a:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    7c8e:	2b08      	cmp	r3, #8
    7c90:	d802      	bhi.n	7c98 <valid_adv_param+0x50>
    7c92:	68a3      	ldr	r3, [r4, #8]
    7c94:	2b9f      	cmp	r3, #159	; 0x9f
    7c96:	d9dc      	bls.n	7c52 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    7c98:	f010 0f30 	tst.w	r0, #48	; 0x30
    7c9c:	d002      	beq.n	7ca4 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    7c9e:	6923      	ldr	r3, [r4, #16]
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	d0d6      	beq.n	7c52 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    7ca4:	06c3      	lsls	r3, r0, #27
    7ca6:	d401      	bmi.n	7cac <valid_adv_param+0x64>
    7ca8:	6923      	ldr	r3, [r4, #16]
    7caa:	b943      	cbnz	r3, 7cbe <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    7cac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    7cb0:	429a      	cmp	r2, r3
    7cb2:	d8ce      	bhi.n	7c52 <valid_adv_param+0xa>
    7cb4:	2a1f      	cmp	r2, #31
    7cb6:	d9cc      	bls.n	7c52 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    7cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    7cbc:	d8c9      	bhi.n	7c52 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    7cbe:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    7cc2:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    7cc6:	bf18      	it	ne
    7cc8:	2001      	movne	r0, #1
    7cca:	e7c3      	b.n	7c54 <valid_adv_param+0xc>
    7ccc:	200000f0 	.word	0x200000f0

00007cd0 <bt_le_adv_lookup_legacy>:
}
    7cd0:	4800      	ldr	r0, [pc, #0]	; (7cd4 <bt_le_adv_lookup_legacy+0x4>)
    7cd2:	4770      	bx	lr
    7cd4:	20000108 	.word	0x20000108

00007cd8 <bt_le_adv_update_data>:
	return 0;
}

int bt_le_adv_update_data(const struct bt_data *ad, size_t ad_len,
			  const struct bt_data *sd, size_t sd_len)
{
    7cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cda:	4605      	mov	r5, r0
    7cdc:	b085      	sub	sp, #20
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7cde:	480f      	ldr	r0, [pc, #60]	; (7d1c <bt_le_adv_update_data+0x44>)
    7ce0:	f014 fc26 	bl	1c530 <atomic_get>
    7ce4:	461f      	mov	r7, r3

	if (!adv) {
		return -EINVAL;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    7ce6:	0643      	lsls	r3, r0, #25
{
    7ce8:	4616      	mov	r6, r2
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    7cea:	d513      	bpl.n	7d14 <bt_le_adv_update_data+0x3c>
    7cec:	480b      	ldr	r0, [pc, #44]	; (7d1c <bt_le_adv_update_data+0x44>)
    7cee:	f014 fc1f 	bl	1c530 <atomic_get>
    7cf2:	4604      	mov	r4, r0
		return -EAGAIN;
	}

	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);

	return le_adv_update(adv, ad, ad_len, sd, sd_len, false, scannable,
    7cf4:	480a      	ldr	r0, [pc, #40]	; (7d20 <bt_le_adv_update_data+0x48>)
    7cf6:	f014 fd1f 	bl	1c738 <get_adv_name_type>
    7cfa:	f3c4 2480 	ubfx	r4, r4, #10, #1
    7cfe:	9002      	str	r0, [sp, #8]
    7d00:	460a      	mov	r2, r1
    7d02:	e9cd 7400 	strd	r7, r4, [sp]
    7d06:	4806      	ldr	r0, [pc, #24]	; (7d20 <bt_le_adv_update_data+0x48>)
    7d08:	4633      	mov	r3, r6
    7d0a:	4629      	mov	r1, r5
    7d0c:	f014 fc9d 	bl	1c64a <le_adv_update.constprop.0>
			     get_adv_name_type(adv));
}
    7d10:	b005      	add	sp, #20
    7d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EAGAIN;
    7d14:	f06f 000a 	mvn.w	r0, #10
    7d18:	e7fa      	b.n	7d10 <bt_le_adv_update_data+0x38>
    7d1a:	bf00      	nop
    7d1c:	20000118 	.word	0x20000118
    7d20:	20000108 	.word	0x20000108

00007d24 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    7d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    7d28:	690e      	ldr	r6, [r1, #16]
{
    7d2a:	b08d      	sub	sp, #52	; 0x34
	bool dir_adv = (param->peer != NULL), scannable = false;
    7d2c:	f1b6 0900 	subs.w	r9, r6, #0
{
    7d30:	4605      	mov	r5, r0
    7d32:	487b      	ldr	r0, [pc, #492]	; (7f20 <bt_le_adv_start_legacy+0x1fc>)
	bool dir_adv = (param->peer != NULL), scannable = false;
    7d34:	bf18      	it	ne
    7d36:	f04f 0901 	movne.w	r9, #1
    7d3a:	f014 fbf9 	bl	1c530 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7d3e:	0787      	lsls	r7, r0, #30
{
    7d40:	460c      	mov	r4, r1
    7d42:	4693      	mov	fp, r2
    7d44:	469a      	mov	sl, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7d46:	f140 80e2 	bpl.w	7f0e <bt_le_adv_start_legacy+0x1ea>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    7d4a:	4608      	mov	r0, r1
    7d4c:	f7ff ff7c 	bl	7c48 <valid_adv_param>
    7d50:	b928      	cbnz	r0, 7d5e <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
    7d52:	f06f 0315 	mvn.w	r3, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    7d56:	4618      	mov	r0, r3
    7d58:	b00d      	add	sp, #52	; 0x34
    7d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    7d5e:	4620      	mov	r0, r4
    7d60:	f7ff fdb4 	bl	78cc <bt_id_adv_random_addr_check>
    7d64:	4680      	mov	r8, r0
    7d66:	2800      	cmp	r0, #0
    7d68:	d0f3      	beq.n	7d52 <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    7d6a:	f105 0710 	add.w	r7, r5, #16
    7d6e:	4638      	mov	r0, r7
    7d70:	f014 fbde 	bl	1c530 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7d74:	f3c0 1180 	ubfx	r1, r0, #6, #1
    7d78:	0640      	lsls	r0, r0, #25
    7d7a:	f100 80cb 	bmi.w	7f14 <bt_le_adv_start_legacy+0x1f0>
	(void)memset(&set_param, 0, sizeof(set_param));
    7d7e:	220f      	movs	r2, #15
    7d80:	a808      	add	r0, sp, #32
    7d82:	9105      	str	r1, [sp, #20]
    7d84:	f013 ffdc 	bl	1bd40 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    7d88:	68a3      	ldr	r3, [r4, #8]
    7d8a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    7d8e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    7d90:	68e3      	ldr	r3, [r4, #12]
    7d92:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    7d96:	f014 fbbc 	bl	1c512 <get_adv_channel_map>
	if (adv->id != param->id) {
    7d9a:	782a      	ldrb	r2, [r5, #0]
    7d9c:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    7d9e:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    7da0:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    7da4:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    7da6:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    7daa:	d004      	beq.n	7db6 <bt_le_adv_start_legacy+0x92>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7dac:	485c      	ldr	r0, [pc, #368]	; (7f20 <bt_le_adv_start_legacy+0x1fc>)
    7dae:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    7db2:	f014 fbc3 	bl	1c53c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    7db6:	4a5b      	ldr	r2, [pc, #364]	; (7f24 <bt_le_adv_start_legacy+0x200>)
	adv->id = param->id;
    7db8:	7823      	ldrb	r3, [r4, #0]
    7dba:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    7dbc:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    7dc0:	6861      	ldr	r1, [r4, #4]
    7dc2:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    7dc6:	464a      	mov	r2, r9
    7dc8:	4628      	mov	r0, r5
    7dca:	f7ff febb 	bl	7b44 <bt_id_set_adv_own_addr>
	if (err) {
    7dce:	4603      	mov	r3, r0
    7dd0:	2800      	cmp	r0, #0
    7dd2:	d1c0      	bne.n	7d56 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    7dd4:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    7dd8:	2e00      	cmp	r6, #0
    7dda:	d06e      	beq.n	7eba <bt_le_adv_start_legacy+0x196>
	memcpy(dst, src, sizeof(*dst));
    7ddc:	6921      	ldr	r1, [r4, #16]
    7dde:	2207      	movs	r2, #7
    7de0:	f013 ffa3 	bl	1bd2a <memcpy>
	name_type = get_adv_name_type_param(param);
    7de4:	4620      	mov	r0, r4
    7de6:	f014 fcb7 	bl	1c758 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    7dea:	6863      	ldr	r3, [r4, #4]
    7dec:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
    7dee:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    7df0:	d56c      	bpl.n	7ecc <bt_le_adv_start_legacy+0x1a8>
		if (dir_adv) {
    7df2:	2e00      	cmp	r6, #0
    7df4:	d067      	beq.n	7ec6 <bt_le_adv_start_legacy+0x1a2>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    7df6:	f013 0f10 	tst.w	r3, #16
    7dfa:	bf14      	ite	ne
    7dfc:	2304      	movne	r3, #4
    7dfe:	2301      	moveq	r3, #1
    7e00:	6921      	ldr	r1, [r4, #16]
    7e02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    7e06:	2207      	movs	r2, #7
    7e08:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    7e0c:	f013 ff8d 	bl	1bd2a <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    7e10:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    7e14:	210f      	movs	r1, #15
    7e16:	f242 0006 	movw	r0, #8198	; 0x2006
    7e1a:	f7fe feaf 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
    7e1e:	4603      	mov	r3, r0
    7e20:	2800      	cmp	r0, #0
    7e22:	d07a      	beq.n	7f1a <bt_le_adv_start_legacy+0x1f6>
    7e24:	220f      	movs	r2, #15
    7e26:	a908      	add	r1, sp, #32
    7e28:	3008      	adds	r0, #8
    7e2a:	9305      	str	r3, [sp, #20]
    7e2c:	f015 ffe6 	bl	1ddfc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    7e30:	9b05      	ldr	r3, [sp, #20]
    7e32:	2200      	movs	r2, #0
    7e34:	4619      	mov	r1, r3
    7e36:	f242 0006 	movw	r0, #8198	; 0x2006
    7e3a:	f7fe fed9 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    7e3e:	4603      	mov	r3, r0
    7e40:	2800      	cmp	r0, #0
    7e42:	d188      	bne.n	7d56 <bt_le_adv_start_legacy+0x32>
	if (!dir_adv) {
    7e44:	2e00      	cmp	r6, #0
    7e46:	d052      	beq.n	7eee <bt_le_adv_start_legacy+0x1ca>
	return bt_le_adv_set_enable_legacy(adv, enable);
    7e48:	2101      	movs	r1, #1
    7e4a:	4628      	mov	r0, r5
    7e4c:	f014 fc94 	bl	1c778 <bt_le_adv_set_enable_legacy>
	if (err) {
    7e50:	4603      	mov	r3, r0
    7e52:	2800      	cmp	r0, #0
    7e54:	f47f af7f 	bne.w	7d56 <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7e58:	2e00      	cmp	r6, #0
    7e5a:	d156      	bne.n	7f0a <bt_le_adv_start_legacy+0x1e6>
    7e5c:	6862      	ldr	r2, [r4, #4]
    7e5e:	f082 0202 	eor.w	r2, r2, #2
    7e62:	f3c2 0240 	ubfx	r2, r2, #1, #1
    7e66:	210d      	movs	r1, #13
    7e68:	4638      	mov	r0, r7
    7e6a:	9305      	str	r3, [sp, #20]
    7e6c:	f014 fbd6 	bl	1c61c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    7e70:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    7e74:	425a      	negs	r2, r3
    7e76:	415a      	adcs	r2, r3
    7e78:	2107      	movs	r1, #7
    7e7a:	4638      	mov	r0, r7
    7e7c:	f014 fbce 	bl	1c61c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    7e80:	f1a9 0102 	sub.w	r1, r9, #2
    7e84:	424a      	negs	r2, r1
    7e86:	414a      	adcs	r2, r1
    7e88:	4638      	mov	r0, r7
    7e8a:	2108      	movs	r1, #8
    7e8c:	f014 fbc6 	bl	1c61c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    7e90:	6862      	ldr	r2, [r4, #4]
    7e92:	2109      	movs	r1, #9
    7e94:	f002 0201 	and.w	r2, r2, #1
    7e98:	4638      	mov	r0, r7
    7e9a:	f014 fbbf 	bl	1c61c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    7e9e:	4642      	mov	r2, r8
    7ea0:	210a      	movs	r1, #10
    7ea2:	4638      	mov	r0, r7
    7ea4:	f014 fbba 	bl	1c61c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    7ea8:	6862      	ldr	r2, [r4, #4]
    7eaa:	210c      	movs	r1, #12
    7eac:	f3c2 0280 	ubfx	r2, r2, #2, #1
    7eb0:	4638      	mov	r0, r7
    7eb2:	f014 fbb3 	bl	1c61c <atomic_set_bit_to>
	return 0;
    7eb6:	9b05      	ldr	r3, [sp, #20]
    7eb8:	e74d      	b.n	7d56 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    7eba:	9606      	str	r6, [sp, #24]
    7ebc:	2207      	movs	r2, #7
    7ebe:	f8cd 601b 	str.w	r6, [sp, #27]
    7ec2:	a906      	add	r1, sp, #24
    7ec4:	e78c      	b.n	7de0 <bt_le_adv_start_legacy+0xbc>
			set_param.type = BT_HCI_ADV_IND;
    7ec6:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    7eca:	e7a3      	b.n	7e14 <bt_le_adv_start_legacy+0xf0>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    7ecc:	0598      	lsls	r0, r3, #22
    7ece:	d404      	bmi.n	7eda <bt_le_adv_start_legacy+0x1b6>
    7ed0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7ed2:	b913      	cbnz	r3, 7eda <bt_le_adv_start_legacy+0x1b6>
    7ed4:	f1b9 0f02 	cmp.w	r9, #2
    7ed8:	d103      	bne.n	7ee2 <bt_le_adv_start_legacy+0x1be>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    7eda:	2302      	movs	r3, #2
    7edc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    7ee0:	e798      	b.n	7e14 <bt_le_adv_start_legacy+0xf0>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    7ee2:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    7ee4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    7ee8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    7eec:	e792      	b.n	7e14 <bt_le_adv_start_legacy+0xf0>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    7eee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7ef0:	9300      	str	r3, [sp, #0]
    7ef2:	e9cd 8901 	strd	r8, r9, [sp, #4]
    7ef6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7ef8:	4652      	mov	r2, sl
    7efa:	4659      	mov	r1, fp
    7efc:	4628      	mov	r0, r5
    7efe:	f014 fba4 	bl	1c64a <le_adv_update.constprop.0>
		if (err) {
    7f02:	4603      	mov	r3, r0
    7f04:	2800      	cmp	r0, #0
    7f06:	d09f      	beq.n	7e48 <bt_le_adv_start_legacy+0x124>
    7f08:	e725      	b.n	7d56 <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7f0a:	4602      	mov	r2, r0
    7f0c:	e7ab      	b.n	7e66 <bt_le_adv_start_legacy+0x142>
		return -EAGAIN;
    7f0e:	f06f 030a 	mvn.w	r3, #10
    7f12:	e720      	b.n	7d56 <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
    7f14:	f06f 0377 	mvn.w	r3, #119	; 0x77
    7f18:	e71d      	b.n	7d56 <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
    7f1a:	f06f 0368 	mvn.w	r3, #104	; 0x68
    7f1e:	e71a      	b.n	7d56 <bt_le_adv_start_legacy+0x32>
    7f20:	200001bc 	.word	0x200001bc
    7f24:	200000f0 	.word	0x200000f0

00007f28 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    7f28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7f2a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    7f2c:	9a06      	ldr	r2, [sp, #24]
{
    7f2e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    7f30:	e9cd 3200 	strd	r3, r2, [sp]
    7f34:	462b      	mov	r3, r5
    7f36:	460a      	mov	r2, r1
    7f38:	4601      	mov	r1, r0
    7f3a:	4811      	ldr	r0, [pc, #68]	; (7f80 <bt_le_adv_start+0x58>)
    7f3c:	f7ff fef2 	bl	7d24 <bt_le_adv_start_legacy>
    7f40:	4621      	mov	r1, r4
    7f42:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    7f44:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    7f46:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    7f4a:	429d      	cmp	r5, r3
    7f4c:	d102      	bne.n	7f54 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    7f4e:	4630      	mov	r0, r6
    7f50:	b002      	add	sp, #8
    7f52:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    7f54:	880a      	ldrh	r2, [r1, #0]
    7f56:	4282      	cmp	r2, r0
    7f58:	d104      	bne.n	7f64 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    7f5a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    7f5c:	b112      	cbz	r2, 7f64 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    7f5e:	7812      	ldrb	r2, [r2, #0]
    7f60:	07d2      	lsls	r2, r2, #31
    7f62:	d402      	bmi.n	7f6a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    7f64:	3301      	adds	r3, #1
    7f66:	3108      	adds	r1, #8
    7f68:	e7ef      	b.n	7f4a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    7f6a:	4906      	ldr	r1, [pc, #24]	; (7f84 <bt_le_adv_start+0x5c>)
    7f6c:	4806      	ldr	r0, [pc, #24]	; (7f88 <bt_le_adv_start+0x60>)
    7f6e:	f017 fada 	bl	1f526 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    7f72:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    7f76:	2300      	movs	r3, #0
    7f78:	4803      	ldr	r0, [pc, #12]	; (7f88 <bt_le_adv_start+0x60>)
    7f7a:	f012 faf7 	bl	1a56c <k_work_reschedule>
    7f7e:	e7e6      	b.n	7f4e <bt_le_adv_start+0x26>
    7f80:	20000108 	.word	0x20000108
    7f84:	0001c7c9 	.word	0x0001c7c9
    7f88:	20000120 	.word	0x20000120

00007f8c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    7f8c:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    7f8e:	4813      	ldr	r0, [pc, #76]	; (7fdc <bt_le_adv_stop+0x50>)
    7f90:	f014 fc17 	bl	1c7c2 <bt_le_lim_adv_cancel_timeout>
    7f94:	4812      	ldr	r0, [pc, #72]	; (7fe0 <bt_le_adv_stop+0x54>)
    7f96:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    7f9a:	f014 facf 	bl	1c53c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7f9e:	4810      	ldr	r0, [pc, #64]	; (7fe0 <bt_le_adv_stop+0x54>)
    7fa0:	f014 fac6 	bl	1c530 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    7fa4:	0642      	lsls	r2, r0, #25
    7fa6:	d402      	bmi.n	7fae <bt_le_adv_stop+0x22>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    7fa8:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    7faa:	4620      	mov	r0, r4
    7fac:	bd10      	pop	{r4, pc}
		err = bt_le_adv_set_enable_legacy(adv, false);
    7fae:	480b      	ldr	r0, [pc, #44]	; (7fdc <bt_le_adv_stop+0x50>)
    7fb0:	2100      	movs	r1, #0
    7fb2:	f014 fbe1 	bl	1c778 <bt_le_adv_set_enable_legacy>
		if (err) {
    7fb6:	4604      	mov	r4, r0
    7fb8:	2800      	cmp	r0, #0
    7fba:	d1f6      	bne.n	7faa <bt_le_adv_stop+0x1e>
    7fbc:	4809      	ldr	r0, [pc, #36]	; (7fe4 <bt_le_adv_stop+0x58>)
    7fbe:	f014 fab7 	bl	1c530 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    7fc2:	0683      	lsls	r3, r0, #26
    7fc4:	d5f0      	bpl.n	7fa8 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    7fc6:	4620      	mov	r0, r4
    7fc8:	f014 fc0f 	bl	1c7ea <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    7fcc:	4620      	mov	r0, r4
    7fce:	f014 fa73 	bl	1c4b8 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    7fd2:	2001      	movs	r0, #1
    7fd4:	f014 fc09 	bl	1c7ea <bt_le_scan_set_enable>
    7fd8:	e7e7      	b.n	7faa <bt_le_adv_stop+0x1e>
    7fda:	bf00      	nop
    7fdc:	20000108 	.word	0x20000108
    7fe0:	20000118 	.word	0x20000118
    7fe4:	200001bc 	.word	0x200001bc

00007fe8 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7fe8:	4b03      	ldr	r3, [pc, #12]	; (7ff8 <atomic_get.constprop.0+0x10>)
    7fea:	f3bf 8f5b 	dmb	ish
    7fee:	6818      	ldr	r0, [r3, #0]
    7ff0:	f3bf 8f5b 	dmb	ish
}
    7ff4:	4770      	bx	lr
    7ff6:	bf00      	nop
    7ff8:	200001bc 	.word	0x200001bc

00007ffc <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    7ffc:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    7ffe:	2102      	movs	r1, #2
{
    8000:	b087      	sub	sp, #28
    8002:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    8004:	f242 000c 	movw	r0, #8204	; 0x200c
    8008:	f7fe fdb8 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
    800c:	4605      	mov	r5, r0
    800e:	b308      	cbz	r0, 8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
	return net_buf_simple_add(&buf->b, len);
    8010:	2102      	movs	r1, #2
    8012:	3008      	adds	r0, #8
    8014:	f015 feec 	bl	1ddf0 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    8018:	2c01      	cmp	r4, #1
    801a:	4602      	mov	r2, r0
    801c:	d117      	bne.n	804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
    801e:	f7ff ffe3 	bl	7fe8 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8022:	f3c0 2000 	ubfx	r0, r0, #8, #1
    8026:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    8028:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    802a:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    802c:	425c      	negs	r4, r3
    802e:	415c      	adcs	r4, r3
    8030:	4a0a      	ldr	r2, [pc, #40]	; (805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>)
    8032:	9400      	str	r4, [sp, #0]
    8034:	a903      	add	r1, sp, #12
    8036:	4628      	mov	r0, r5
    8038:	2305      	movs	r3, #5
    803a:	f7fe fd8d 	bl	6b58 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    803e:	2200      	movs	r2, #0
    8040:	4629      	mov	r1, r5
    8042:	f242 000c 	movw	r0, #8204	; 0x200c
    8046:	f7fe fdd3 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    804a:	b007      	add	sp, #28
    804c:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    804e:	2300      	movs	r3, #0
    8050:	7043      	strb	r3, [r0, #1]
    8052:	e7e9      	b.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
		return -ENOBUFS;
    8054:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8058:	e7f7      	b.n	804a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a>
    805a:	bf00      	nop
    805c:	200001bc 	.word	0x200001bc

00008060 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    8060:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8062:	4605      	mov	r5, r0
    8064:	4614      	mov	r4, r2
    8066:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    8068:	2207      	movs	r2, #7
    806a:	2100      	movs	r1, #0
    806c:	4668      	mov	r0, sp
    806e:	f013 fe67 	bl	1bd40 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    8072:	2300      	movs	r3, #0
    8074:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    8078:	1e6b      	subs	r3, r5, #1
    807a:	4258      	negs	r0, r3
    807c:	f10d 0105 	add.w	r1, sp, #5
    8080:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
    8082:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
    8086:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    808a:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    808e:	f7ff fd3f 	bl	7b10 <bt_id_set_scan_own_addr>
	if (err) {
    8092:	4604      	mov	r4, r0
    8094:	bb38      	cbnz	r0, 80e6 <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    8096:	2107      	movs	r1, #7
    8098:	f242 000b 	movw	r0, #8203	; 0x200b
    809c:	f7fe fd6e 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
    80a0:	4606      	mov	r6, r0
    80a2:	b348      	cbz	r0, 80f8 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    80a4:	2207      	movs	r2, #7
    80a6:	4669      	mov	r1, sp
    80a8:	3008      	adds	r0, #8
    80aa:	f015 fea7 	bl	1ddfc <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    80ae:	4622      	mov	r2, r4
    80b0:	4631      	mov	r1, r6
    80b2:	f242 000b 	movw	r0, #8203	; 0x200b
    80b6:	f7fe fd9b 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
    80ba:	4604      	mov	r4, r0
    80bc:	b998      	cbnz	r0, 80e6 <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
    80be:	2001      	movs	r0, #1
    80c0:	f7ff ff9c 	bl	7ffc <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    80c4:	4604      	mov	r4, r0
    80c6:	b970      	cbnz	r0, 80e6 <start_le_scan_legacy+0x86>
	if (val) {
    80c8:	2d01      	cmp	r5, #1
    80ca:	d10f      	bne.n	80ec <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    80cc:	f3bf 8f5b 	dmb	ish
    80d0:	4b0b      	ldr	r3, [pc, #44]	; (8100 <start_le_scan_legacy+0xa0>)
    80d2:	e853 2f00 	ldrex	r2, [r3]
    80d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    80da:	e843 2100 	strex	r1, r2, [r3]
    80de:	2900      	cmp	r1, #0
    80e0:	d1f7      	bne.n	80d2 <start_le_scan_legacy+0x72>
    80e2:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    80e6:	4620      	mov	r0, r4
    80e8:	b002      	add	sp, #8
    80ea:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    80ec:	f06f 0180 	mvn.w	r1, #128	; 0x80
    80f0:	4803      	ldr	r0, [pc, #12]	; (8100 <start_le_scan_legacy+0xa0>)
    80f2:	f014 fb6b 	bl	1c7cc <atomic_and>
    80f6:	e7f6      	b.n	80e6 <start_le_scan_legacy+0x86>
		return -ENOBUFS;
    80f8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    80fc:	e7f3      	b.n	80e6 <start_le_scan_legacy+0x86>
    80fe:	bf00      	nop
    8100:	200001bc 	.word	0x200001bc

00008104 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    8104:	4b01      	ldr	r3, [pc, #4]	; (810c <bt_scan_reset+0x8>)
    8106:	2200      	movs	r2, #0
    8108:	601a      	str	r2, [r3, #0]
}
    810a:	4770      	bx	lr
    810c:	200017f8 	.word	0x200017f8

00008110 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    8110:	b538      	push	{r3, r4, r5, lr}
    8112:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8114:	f7ff ff68 	bl	7fe8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8118:	0641      	lsls	r1, r0, #25
    811a:	f3c0 1280 	ubfx	r2, r0, #6, #1
    811e:	d501      	bpl.n	8124 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    8120:	2000      	movs	r0, #0
    8122:	e031      	b.n	8188 <bt_le_scan_update+0x78>
    8124:	f7ff ff60 	bl	7fe8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    8128:	0683      	lsls	r3, r0, #26
    812a:	d428      	bmi.n	817e <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    812c:	2100      	movs	r1, #0
    812e:	2206      	movs	r2, #6
    8130:	4608      	mov	r0, r1
    8132:	f000 fc55 	bl	89e0 <bt_conn_lookup_state_le>
		if (conn) {
    8136:	4604      	mov	r4, r0
    8138:	bb38      	cbnz	r0, 818a <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    813a:	2202      	movs	r2, #2
    813c:	4601      	mov	r1, r0
    813e:	f000 fc4f 	bl	89e0 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    8142:	2800      	cmp	r0, #0
    8144:	d0ec      	beq.n	8120 <bt_le_scan_update+0x10>
    8146:	f3bf 8f5b 	dmb	ish
    814a:	4b11      	ldr	r3, [pc, #68]	; (8190 <bt_le_scan_update+0x80>)
    814c:	e853 2f00 	ldrex	r2, [r3]
    8150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    8154:	e843 2100 	strex	r1, r2, [r3]
    8158:	2900      	cmp	r1, #0
    815a:	d1f7      	bne.n	814c <bt_le_scan_update+0x3c>
    815c:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    8160:	f014 fc29 	bl	1c9b6 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    8164:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    8166:	4620      	mov	r0, r4
    8168:	bf18      	it	ne
    816a:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    816c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    8170:	bf0a      	itet	eq
    8172:	2212      	moveq	r2, #18
    8174:	2160      	movne	r1, #96	; 0x60
    8176:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    817a:	f7ff bf71 	b.w	8060 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    817e:	4610      	mov	r0, r2
    8180:	f7ff ff3c 	bl	7ffc <bt_le_scan_set_enable_legacy>
		if (err) {
    8184:	2800      	cmp	r0, #0
    8186:	d0d1      	beq.n	812c <bt_le_scan_update+0x1c>
}
    8188:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    818a:	f014 fc14 	bl	1c9b6 <bt_conn_unref>
    818e:	e7c7      	b.n	8120 <bt_le_scan_update+0x10>
    8190:	200001bc 	.word	0x200001bc

00008194 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    8194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    8198:	f100 0808 	add.w	r8, r0, #8
    819c:	b08d      	sub	sp, #52	; 0x34
    819e:	4604      	mov	r4, r0
    81a0:	4640      	mov	r0, r8
    81a2:	f015 fe54 	bl	1de4e <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    81a6:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8354 <bt_hci_le_adv_report+0x1c0>
    81aa:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    81ac:	b916      	cbnz	r6, 81b4 <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    81ae:	b00d      	add	sp, #52	; 0x34
    81b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    81b4:	89a3      	ldrh	r3, [r4, #12]
    81b6:	2b08      	cmp	r3, #8
    81b8:	d9f9      	bls.n	81ae <bt_hci_le_adv_report+0x1a>
	return net_buf_simple_pull_mem(&buf->b, len);
    81ba:	2109      	movs	r1, #9
    81bc:	4640      	mov	r0, r8
    81be:	f015 fe3e 	bl	1de3e <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    81c2:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    81c4:	237f      	movs	r3, #127	; 0x7f
    81c6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    81ca:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    81cc:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    81ce:	7a5b      	ldrb	r3, [r3, #9]
    81d0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    81d4:	23ff      	movs	r3, #255	; 0xff
    81d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    81da:	2300      	movs	r3, #0
    81dc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    81e0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    81e4:	7802      	ldrb	r2, [r0, #0]
    81e6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    81ea:	2a04      	cmp	r2, #4
    81ec:	bf9c      	itt	ls
    81ee:	4b5a      	ldrls	r3, [pc, #360]	; (8358 <bt_hci_le_adv_report+0x1c4>)
    81f0:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    81f2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    81f6:	b28b      	uxth	r3, r1
    81f8:	4605      	mov	r5, r0
    81fa:	f100 0901 	add.w	r9, r0, #1
    81fe:	9301      	str	r3, [sp, #4]
    8200:	f7ff fef2 	bl	7fe8 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    8204:	0647      	lsls	r7, r0, #25
    8206:	d50b      	bpl.n	8220 <bt_hci_le_adv_report+0x8c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    8208:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    820c:	0758      	lsls	r0, r3, #29
    820e:	d507      	bpl.n	8220 <bt_hci_le_adv_report+0x8c>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    8210:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    8212:	4640      	mov	r0, r8
    8214:	3101      	adds	r1, #1
    8216:	3e01      	subs	r6, #1
    8218:	f015 fe09 	bl	1de2e <net_buf_simple_pull>
    821c:	b2f6      	uxtb	r6, r6
    821e:	e7c5      	b.n	81ac <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    8220:	786b      	ldrb	r3, [r5, #1]
    8222:	1e9a      	subs	r2, r3, #2
    8224:	2a01      	cmp	r2, #1
    8226:	d848      	bhi.n	82ba <bt_hci_le_adv_report+0x126>
    8228:	2207      	movs	r2, #7
    822a:	4649      	mov	r1, r9
    822c:	a804      	add	r0, sp, #16
    822e:	f013 fd7c 	bl	1bd2a <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8232:	f89d 3010 	ldrb.w	r3, [sp, #16]
    8236:	3b02      	subs	r3, #2
    8238:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    823c:	ab04      	add	r3, sp, #16
    823e:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    8240:	f8da 3000 	ldr.w	r3, [sl]
    8244:	b1a3      	cbz	r3, 8270 <bt_hci_le_adv_report+0xdc>
	state->offset = net_buf_simple_headroom(buf);
    8246:	4640      	mov	r0, r8
    8248:	f015 fe11 	bl	1de6e <net_buf_simple_headroom>
		buf->len = len;
    824c:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    824e:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    8250:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    8254:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8256:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    8258:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    825c:	f8da c000 	ldr.w	ip, [sl]
    8260:	a804      	add	r0, sp, #16
    8262:	4643      	mov	r3, r8
    8264:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    8266:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8268:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    826a:	fa10 f08b 	uxtah	r0, r0, fp
    826e:	60a0      	str	r0, [r4, #8]
	return list->head;
    8270:	4b3a      	ldr	r3, [pc, #232]	; (835c <bt_hci_le_adv_report+0x1c8>)
    8272:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    8274:	2a00      	cmp	r2, #0
    8276:	d033      	beq.n	82e0 <bt_hci_le_adv_report+0x14c>
	return node->next;
    8278:	f852 7908 	ldr.w	r7, [r2], #-8
    827c:	b107      	cbz	r7, 8280 <bt_hci_le_adv_report+0xec>
    827e:	3f08      	subs	r7, #8
		if (listener->recv) {
    8280:	6813      	ldr	r3, [r2, #0]
    8282:	9203      	str	r2, [sp, #12]
    8284:	b193      	cbz	r3, 82ac <bt_hci_le_adv_report+0x118>
	state->offset = net_buf_simple_headroom(buf);
    8286:	4640      	mov	r0, r8
    8288:	f015 fdf1 	bl	1de6e <net_buf_simple_headroom>
	state->len = buf->len;
    828c:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
    828e:	9a03      	ldr	r2, [sp, #12]
    8290:	9302      	str	r3, [sp, #8]
			buf->len = len;
    8292:	9b01      	ldr	r3, [sp, #4]
    8294:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8296:	4683      	mov	fp, r0
			listener->recv(info, buf);
    8298:	6812      	ldr	r2, [r2, #0]
    829a:	a808      	add	r0, sp, #32
    829c:	4641      	mov	r1, r8
    829e:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    82a0:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    82a2:	9b02      	ldr	r3, [sp, #8]
    82a4:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    82a6:	fa10 f08b 	uxtah	r0, r0, fp
    82aa:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    82ac:	b1c7      	cbz	r7, 82e0 <bt_hci_le_adv_report+0x14c>
    82ae:	68bb      	ldr	r3, [r7, #8]
    82b0:	b103      	cbz	r3, 82b4 <bt_hci_le_adv_report+0x120>
    82b2:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    82b4:	463a      	mov	r2, r7
    82b6:	461f      	mov	r7, r3
    82b8:	e7e2      	b.n	8280 <bt_hci_le_adv_report+0xec>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    82ba:	2bff      	cmp	r3, #255	; 0xff
    82bc:	d109      	bne.n	82d2 <bt_hci_le_adv_report+0x13e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    82be:	2300      	movs	r3, #0
    82c0:	9306      	str	r3, [sp, #24]
    82c2:	2207      	movs	r2, #7
    82c4:	f8cd 301b 	str.w	r3, [sp, #27]
    82c8:	a906      	add	r1, sp, #24
    82ca:	a804      	add	r0, sp, #16
    82cc:	f013 fd2d 	bl	1bd2a <memcpy>
}
    82d0:	e7b4      	b.n	823c <bt_hci_le_adv_report+0xa8>
		bt_addr_le_copy(&id_addr,
    82d2:	4649      	mov	r1, r9
    82d4:	2000      	movs	r0, #0
    82d6:	f014 f8ed 	bl	1c4b4 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    82da:	2207      	movs	r2, #7
    82dc:	4601      	mov	r1, r0
    82de:	e7f4      	b.n	82ca <bt_hci_le_adv_report+0x136>
	check_pending_conn(&id_addr, addr, info->adv_props);
    82e0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    82e4:	f7ff fe80 	bl	7fe8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    82e8:	0641      	lsls	r1, r0, #25
    82ea:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    82ee:	d48f      	bmi.n	8210 <bt_hci_le_adv_report+0x7c>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    82f0:	07d2      	lsls	r2, r2, #31
    82f2:	d58d      	bpl.n	8210 <bt_hci_le_adv_report+0x7c>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    82f4:	2202      	movs	r2, #2
    82f6:	a904      	add	r1, sp, #16
    82f8:	4658      	mov	r0, fp
    82fa:	f000 fb71 	bl	89e0 <bt_conn_lookup_state_le>
	if (!conn) {
    82fe:	4607      	mov	r7, r0
    8300:	2800      	cmp	r0, #0
    8302:	d085      	beq.n	8210 <bt_hci_le_adv_report+0x7c>
    8304:	f7ff fe70 	bl	7fe8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8308:	0683      	lsls	r3, r0, #26
    830a:	d411      	bmi.n	8330 <bt_hci_le_adv_report+0x19c>
    830c:	2207      	movs	r2, #7
    830e:	4649      	mov	r1, r9
    8310:	f107 0096 	add.w	r0, r7, #150	; 0x96
    8314:	f013 fd09 	bl	1bd2a <memcpy>
	if (bt_le_create_conn(conn)) {
    8318:	4638      	mov	r0, r7
    831a:	f013 ff16 	bl	1c14a <bt_le_create_conn>
    831e:	b960      	cbnz	r0, 833a <bt_hci_le_adv_report+0x1a6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    8320:	4638      	mov	r0, r7
    8322:	2106      	movs	r1, #6
    8324:	f000 f9d0 	bl	86c8 <bt_conn_set_state>
	bt_conn_unref(conn);
    8328:	4638      	mov	r0, r7
    832a:	f014 fb44 	bl	1c9b6 <bt_conn_unref>
	return;
    832e:	e76f      	b.n	8210 <bt_hci_le_adv_report+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
    8330:	4658      	mov	r0, fp
    8332:	f7ff fe63 	bl	7ffc <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    8336:	2800      	cmp	r0, #0
    8338:	d0e8      	beq.n	830c <bt_hci_le_adv_report+0x178>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    833a:	231f      	movs	r3, #31
    833c:	727b      	strb	r3, [r7, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    833e:	2100      	movs	r1, #0
    8340:	4638      	mov	r0, r7
    8342:	f000 f9c1 	bl	86c8 <bt_conn_set_state>
	bt_conn_unref(conn);
    8346:	4638      	mov	r0, r7
    8348:	f014 fb35 	bl	1c9b6 <bt_conn_unref>
	bt_le_scan_update(false);
    834c:	2000      	movs	r0, #0
    834e:	f7ff fedf 	bl	8110 <bt_le_scan_update>
    8352:	e75d      	b.n	8210 <bt_hci_le_adv_report+0x7c>
    8354:	200017f8 	.word	0x200017f8
    8358:	00021a2a 	.word	0x00021a2a
    835c:	200017f0 	.word	0x200017f0

00008360 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    8360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8364:	4605      	mov	r5, r0
    8366:	f7ff fe3f 	bl	7fe8 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    836a:	0780      	lsls	r0, r0, #30
{
    836c:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    836e:	d56f      	bpl.n	8450 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    8370:	782a      	ldrb	r2, [r5, #0]
    8372:	2a01      	cmp	r2, #1
    8374:	d904      	bls.n	8380 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    8376:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    837a:	4620      	mov	r0, r4
    837c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    8380:	686b      	ldr	r3, [r5, #4]
    8382:	f033 030f 	bics.w	r3, r3, #15
    8386:	d1f6      	bne.n	8376 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    8388:	8928      	ldrh	r0, [r5, #8]
    838a:	1f03      	subs	r3, r0, #4
    838c:	b29b      	uxth	r3, r3
    838e:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    8392:	42a3      	cmp	r3, r4
    8394:	d8ef      	bhi.n	8376 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
    8396:	8969      	ldrh	r1, [r5, #10]
    8398:	1f0b      	subs	r3, r1, #4
    839a:	b29b      	uxth	r3, r3
    839c:	42a3      	cmp	r3, r4
    839e:	d8ea      	bhi.n	8376 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
    83a0:	4288      	cmp	r0, r1
    83a2:	d3e8      	bcc.n	8376 <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
    83a4:	b99a      	cbnz	r2, 83ce <bt_le_scan_start+0x6e>
    83a6:	f3bf 8f5b 	dmb	ish
    83aa:	4e2b      	ldr	r6, [pc, #172]	; (8458 <bt_le_scan_start+0xf8>)
    83ac:	e856 0f00 	ldrex	r0, [r6]
    83b0:	f040 0340 	orr.w	r3, r0, #64	; 0x40
    83b4:	e846 3200 	strex	r2, r3, [r6]
    83b8:	2a00      	cmp	r2, #0
    83ba:	d1f7      	bne.n	83ac <bt_le_scan_start+0x4c>
    83bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    83c0:	f010 0240 	ands.w	r2, r0, #64	; 0x40
    83c4:	46b0      	mov	r8, r6
    83c6:	d007      	beq.n	83d8 <bt_le_scan_start+0x78>
		return -EALREADY;
    83c8:	f06f 0477 	mvn.w	r4, #119	; 0x77
    83cc:	e7d5      	b.n	837a <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
    83ce:	f014 f897 	bl	1c500 <bt_id_scan_random_addr_check>
    83d2:	2800      	cmp	r0, #0
    83d4:	d1e7      	bne.n	83a6 <bt_le_scan_start+0x46>
    83d6:	e7ce      	b.n	8376 <bt_le_scan_start+0x16>
    83d8:	f7ff fe06 	bl	7fe8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    83dc:	0681      	lsls	r1, r0, #26
    83de:	d50a      	bpl.n	83f6 <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
    83e0:	4610      	mov	r0, r2
    83e2:	f7ff fe0b 	bl	7ffc <bt_le_scan_set_enable_legacy>
		if (err) {
    83e6:	4604      	mov	r4, r0
    83e8:	b128      	cbz	r0, 83f6 <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    83ea:	f06f 0140 	mvn.w	r1, #64	; 0x40
    83ee:	4630      	mov	r0, r6
    83f0:	f014 f9ec 	bl	1c7cc <atomic_and>
		return err;
    83f4:	e7c1      	b.n	837a <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    83f6:	686b      	ldr	r3, [r5, #4]
	if (val) {
    83f8:	07db      	lsls	r3, r3, #31
    83fa:	d515      	bpl.n	8428 <bt_le_scan_start+0xc8>
    83fc:	f3bf 8f5b 	dmb	ish
    8400:	e858 3f00 	ldrex	r3, [r8]
    8404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8408:	e848 3200 	strex	r2, r3, [r8]
    840c:	2a00      	cmp	r2, #0
    840e:	d1f7      	bne.n	8400 <bt_le_scan_start+0xa0>
    8410:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    8414:	89ab      	ldrh	r3, [r5, #12]
    8416:	b16b      	cbz	r3, 8434 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8418:	480f      	ldr	r0, [pc, #60]	; (8458 <bt_le_scan_start+0xf8>)
    841a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    841e:	f014 f9d5 	bl	1c7cc <atomic_and>
			return -ENOTSUP;
    8422:	f06f 0485 	mvn.w	r4, #133	; 0x85
    8426:	e7a8      	b.n	837a <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8428:	f46f 7180 	mvn.w	r1, #256	; 0x100
    842c:	480a      	ldr	r0, [pc, #40]	; (8458 <bt_le_scan_start+0xf8>)
    842e:	f014 f9cd 	bl	1c7cc <atomic_and>
    8432:	e7ef      	b.n	8414 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
    8434:	896a      	ldrh	r2, [r5, #10]
    8436:	8929      	ldrh	r1, [r5, #8]
    8438:	7828      	ldrb	r0, [r5, #0]
    843a:	f7ff fe11 	bl	8060 <start_le_scan_legacy>
	if (err) {
    843e:	4604      	mov	r4, r0
    8440:	b118      	cbz	r0, 844a <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8442:	4805      	ldr	r0, [pc, #20]	; (8458 <bt_le_scan_start+0xf8>)
    8444:	f06f 0140 	mvn.w	r1, #64	; 0x40
    8448:	e7d2      	b.n	83f0 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
    844a:	4b04      	ldr	r3, [pc, #16]	; (845c <bt_le_scan_start+0xfc>)
    844c:	601f      	str	r7, [r3, #0]
	return 0;
    844e:	e794      	b.n	837a <bt_le_scan_start+0x1a>
		return -EAGAIN;
    8450:	f06f 040a 	mvn.w	r4, #10
    8454:	e791      	b.n	837a <bt_le_scan_start+0x1a>
    8456:	bf00      	nop
    8458:	200001bc 	.word	0x200001bc
    845c:	200017f8 	.word	0x200017f8

00008460 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    8460:	2300      	movs	r3, #0
	tx->user_data = NULL;
    8462:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    8466:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    8468:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    846a:	4801      	ldr	r0, [pc, #4]	; (8470 <tx_free+0x10>)
    846c:	f016 bf6d 	b.w	1f34a <k_queue_append>
    8470:	20000a58 	.word	0x20000a58

00008474 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    8474:	4b0e      	ldr	r3, [pc, #56]	; (84b0 <notify_connected+0x3c>)
{
    8476:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    8478:	681d      	ldr	r5, [r3, #0]
{
    847a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    847c:	b955      	cbnz	r5, 8494 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    847e:	4d0d      	ldr	r5, [pc, #52]	; (84b4 <notify_connected+0x40>)
    8480:	4e0d      	ldr	r6, [pc, #52]	; (84b8 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    8482:	7a61      	ldrb	r1, [r4, #9]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    8484:	42b5      	cmp	r5, r6
    8486:	d30c      	bcc.n	84a2 <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    8488:	b989      	cbnz	r1, 84ae <notify_connected+0x3a>
		bt_gatt_connected(conn);
    848a:	4620      	mov	r0, r4
	}
}
    848c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    8490:	f001 bd20 	b.w	9ed4 <bt_gatt_connected>
		if (cb->connected) {
    8494:	682b      	ldr	r3, [r5, #0]
    8496:	b113      	cbz	r3, 849e <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    8498:	7a61      	ldrb	r1, [r4, #9]
    849a:	4620      	mov	r0, r4
    849c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    849e:	692d      	ldr	r5, [r5, #16]
    84a0:	e7ec      	b.n	847c <notify_connected+0x8>
		if (cb->connected) {
    84a2:	682b      	ldr	r3, [r5, #0]
    84a4:	b10b      	cbz	r3, 84aa <notify_connected+0x36>
			cb->connected(conn, conn->err);
    84a6:	4620      	mov	r0, r4
    84a8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    84aa:	3514      	adds	r5, #20
    84ac:	e7e9      	b.n	8482 <notify_connected+0xe>
}
    84ae:	bd70      	pop	{r4, r5, r6, pc}
    84b0:	200017fc 	.word	0x200017fc
    84b4:	0001ff34 	.word	0x0001ff34
    84b8:	0001ff34 	.word	0x0001ff34

000084bc <send_frag>:
{
    84bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    84c0:	694d      	ldr	r5, [r1, #20]
{
    84c2:	4604      	mov	r4, r0
    84c4:	460e      	mov	r6, r1
    84c6:	4690      	mov	r8, r2
    84c8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    84ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    84ce:	483e      	ldr	r0, [pc, #248]	; (85c8 <send_frag+0x10c>)
    84d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    84d4:	f011 fe68 	bl	1a1a8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    84d8:	7aa3      	ldrb	r3, [r4, #10]
    84da:	2b07      	cmp	r3, #7
    84dc:	d146      	bne.n	856c <send_frag+0xb0>
	__asm__ volatile(
    84de:	f04f 0320 	mov.w	r3, #32
    84e2:	f3ef 8211 	mrs	r2, BASEPRI
    84e6:	f383 8812 	msr	BASEPRI_MAX, r3
    84ea:	f3bf 8f6f 	isb	sy
	if (tx) {
    84ee:	69a3      	ldr	r3, [r4, #24]
    84f0:	2d00      	cmp	r5, #0
    84f2:	d04d      	beq.n	8590 <send_frag+0xd4>
	parent->next = child;
    84f4:	2100      	movs	r1, #0
    84f6:	6029      	str	r1, [r5, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    84f8:	2b00      	cmp	r3, #0
    84fa:	d146      	bne.n	858a <send_frag+0xce>
	list->head = node;
    84fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    8500:	f382 8811 	msr	BASEPRI, r2
    8504:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    8508:	2104      	movs	r1, #4
    850a:	f106 0008 	add.w	r0, r6, #8
    850e:	f015 fc86 	bl	1de1e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    8512:	8823      	ldrh	r3, [r4, #0]
    8514:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    8518:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    851c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    851e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    8522:	3b04      	subs	r3, #4
    8524:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    8526:	2302      	movs	r3, #2
    8528:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    852a:	4630      	mov	r0, r6
    852c:	f7fe fc12 	bl	6d54 <bt_send>
	if (err) {
    8530:	2800      	cmp	r0, #0
    8532:	d047      	beq.n	85c4 <send_frag+0x108>
	__asm__ volatile(
    8534:	f04f 0320 	mov.w	r3, #32
    8538:	f3ef 8011 	mrs	r0, BASEPRI
    853c:	f383 8812 	msr	BASEPRI_MAX, r3
    8540:	f3bf 8f6f 	isb	sy
		if (tx) {
    8544:	2d00      	cmp	r5, #0
    8546:	d037      	beq.n	85b8 <send_frag+0xfc>
	return list->head;
    8548:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    854a:	2200      	movs	r2, #0
    854c:	b153      	cbz	r3, 8564 <send_frag+0xa8>
    854e:	429d      	cmp	r5, r3
    8550:	d12f      	bne.n	85b2 <send_frag+0xf6>
	return node->next;
    8552:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    8554:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    8556:	bb3a      	cbnz	r2, 85a8 <send_frag+0xec>
    8558:	42a9      	cmp	r1, r5
	list->head = node;
    855a:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    855c:	d100      	bne.n	8560 <send_frag+0xa4>
	list->tail = node;
    855e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    8560:	2300      	movs	r3, #0
    8562:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    8564:	f380 8811 	msr	BASEPRI, r0
    8568:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    856c:	4816      	ldr	r0, [pc, #88]	; (85c8 <send_frag+0x10c>)
    856e:	f011 fdf5 	bl	1a15c <z_impl_k_sem_give>
	if (tx) {
    8572:	b115      	cbz	r5, 857a <send_frag+0xbe>
		tx_free(tx);
    8574:	4628      	mov	r0, r5
    8576:	f7ff ff73 	bl	8460 <tx_free>
	if (always_consume) {
    857a:	b11f      	cbz	r7, 8584 <send_frag+0xc8>
		net_buf_unref(buf);
    857c:	4630      	mov	r0, r6
    857e:	f00e fc73 	bl	16e68 <net_buf_unref>
	return false;
    8582:	2700      	movs	r7, #0
}
    8584:	4638      	mov	r0, r7
    8586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    858a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    858c:	61a5      	str	r5, [r4, #24]
}
    858e:	e7b7      	b.n	8500 <send_frag+0x44>
		if (tail_tx) {
    8590:	b133      	cbz	r3, 85a0 <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
    8592:	f103 090c 	add.w	r9, r3, #12
    8596:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    8598:	3301      	adds	r3, #1
    859a:	f8c9 3000 	str.w	r3, [r9]
    859e:	e7af      	b.n	8500 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    85a0:	69e3      	ldr	r3, [r4, #28]
    85a2:	f104 091c 	add.w	r9, r4, #28
    85a6:	e7f7      	b.n	8598 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
    85a8:	42a9      	cmp	r1, r5
	parent->next = child;
    85aa:	6013      	str	r3, [r2, #0]
	list->tail = node;
    85ac:	bf08      	it	eq
    85ae:	61a2      	streq	r2, [r4, #24]
}
    85b0:	e7d6      	b.n	8560 <send_frag+0xa4>
	return node->next;
    85b2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    85b4:	681b      	ldr	r3, [r3, #0]
    85b6:	e7c9      	b.n	854c <send_frag+0x90>
			(*pending_no_cb)--;
    85b8:	f8d9 3000 	ldr.w	r3, [r9]
    85bc:	3b01      	subs	r3, #1
    85be:	f8c9 3000 	str.w	r3, [r9]
    85c2:	e7cf      	b.n	8564 <send_frag+0xa8>
	return true;
    85c4:	2701      	movs	r7, #1
    85c6:	e7dd      	b.n	8584 <send_frag+0xc8>
    85c8:	200001f0 	.word	0x200001f0

000085cc <bt_conn_get_pkts>:
}
    85cc:	4800      	ldr	r0, [pc, #0]	; (85d0 <bt_conn_get_pkts+0x4>)
    85ce:	4770      	bx	lr
    85d0:	200001f0 	.word	0x200001f0

000085d4 <bt_conn_send_cb>:
{
    85d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85d6:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
    85d8:	7a83      	ldrb	r3, [r0, #10]
    85da:	2b07      	cmp	r3, #7
{
    85dc:	4604      	mov	r4, r0
    85de:	460d      	mov	r5, r1
    85e0:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    85e2:	d114      	bne.n	860e <bt_conn_send_cb+0x3a>
	if (cb) {
    85e4:	b312      	cbz	r2, 862c <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
    85e6:	f012 fa6f 	bl	1aac8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    85ea:	4b13      	ldr	r3, [pc, #76]	; (8638 <bt_conn_send_cb+0x64>)
    85ec:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    85ee:	4813      	ldr	r0, [pc, #76]	; (863c <bt_conn_send_cb+0x68>)
    85f0:	bf07      	ittee	eq
    85f2:	2200      	moveq	r2, #0
    85f4:	2300      	moveq	r3, #0
    85f6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    85fa:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    85fe:	f011 fd79 	bl	1a0f4 <z_impl_k_queue_get>
		if (!tx) {
    8602:	b1a8      	cbz	r0, 8630 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
    8604:	7aa3      	ldrb	r3, [r4, #10]
    8606:	2b07      	cmp	r3, #7
    8608:	d004      	beq.n	8614 <bt_conn_send_cb+0x40>
			tx_free(tx);
    860a:	f7ff ff29 	bl	8460 <tx_free>
		return -ENOTCONN;
    860e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8612:	e00a      	b.n	862a <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
    8614:	2300      	movs	r3, #0
		tx->user_data = user_data;
    8616:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    861a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    861c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    861e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8622:	4629      	mov	r1, r5
    8624:	f015 fba5 	bl	1dd72 <net_buf_put>
	return 0;
    8628:	2000      	movs	r0, #0
}
    862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
    862c:	614a      	str	r2, [r1, #20]
    862e:	e7f6      	b.n	861e <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
    8630:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8634:	e7f9      	b.n	862a <bt_conn_send_cb+0x56>
    8636:	bf00      	nop
    8638:	200016c8 	.word	0x200016c8
    863c:	20000a58 	.word	0x20000a58

00008640 <bt_conn_prepare_events>:
{
    8640:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
    8642:	4b1a      	ldr	r3, [pc, #104]	; (86ac <bt_conn_prepare_events+0x6c>)
    8644:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    8646:	2101      	movs	r1, #1
{
    8648:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    864a:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    864c:	f017 fa47 	bl	1fade <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    8650:	4b17      	ldr	r3, [pc, #92]	; (86b0 <bt_conn_prepare_events+0x70>)
    8652:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
    8656:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    865a:	f014 f8c8 	bl	1c7ee <atomic_get>
    865e:	b908      	cbnz	r0, 8664 <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    8660:	2001      	movs	r0, #1
}
    8662:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    8664:	7a9a      	ldrb	r2, [r3, #10]
    8666:	b99a      	cbnz	r2, 8690 <bt_conn_prepare_events+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8668:	f3bf 8f5b 	dmb	ish
    866c:	1d1a      	adds	r2, r3, #4
    866e:	e852 1f00 	ldrex	r1, [r2]
    8672:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    8676:	e842 0c00 	strex	ip, r0, [r2]
    867a:	f1bc 0f00 	cmp.w	ip, #0
    867e:	d1f6      	bne.n	866e <bt_conn_prepare_events+0x2e>
    8680:	f3bf 8f5b 	dmb	ish
    8684:	064a      	lsls	r2, r1, #25
    8686:	d503      	bpl.n	8690 <bt_conn_prepare_events+0x50>
		conn_cleanup(conn);
    8688:	4618      	mov	r0, r3
    868a:	f014 f8ee 	bl	1c86a <conn_cleanup>
    868e:	e7e7      	b.n	8660 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    8690:	7a9b      	ldrb	r3, [r3, #10]
    8692:	2b07      	cmp	r3, #7
    8694:	d1e4      	bne.n	8660 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    8696:	4b07      	ldr	r3, [pc, #28]	; (86b4 <bt_conn_prepare_events+0x74>)
    8698:	4628      	mov	r0, r5
    869a:	2200      	movs	r2, #0
    869c:	2104      	movs	r1, #4
    869e:	f017 fa1e 	bl	1fade <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    86a2:	2301      	movs	r3, #1
    86a4:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    86a8:	2002      	movs	r0, #2
	return ev_count;
    86aa:	e7da      	b.n	8662 <bt_conn_prepare_events+0x22>
    86ac:	200002b0 	.word	0x200002b0
    86b0:	20000e58 	.word	0x20000e58
    86b4:	20000e90 	.word	0x20000e90

000086b8 <bt_conn_lookup_handle>:
{
    86b8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    86ba:	2101      	movs	r1, #1
    86bc:	4801      	ldr	r0, [pc, #4]	; (86c4 <bt_conn_lookup_handle+0xc>)
    86be:	f014 b95a 	b.w	1c976 <conn_lookup_handle>
    86c2:	bf00      	nop
    86c4:	20000e58 	.word	0x20000e58

000086c8 <bt_conn_set_state>:
{
    86c8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    86ca:	7a85      	ldrb	r5, [r0, #10]
    86cc:	428d      	cmp	r5, r1
{
    86ce:	4604      	mov	r4, r0
	if (conn->state == state) {
    86d0:	d03e      	beq.n	8750 <bt_conn_set_state+0x88>
	conn->state = state;
    86d2:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    86d4:	b155      	cbz	r5, 86ec <bt_conn_set_state+0x24>
    86d6:	2d06      	cmp	r5, #6
    86d8:	d00e      	beq.n	86f8 <bt_conn_set_state+0x30>
	switch (conn->state) {
    86da:	7aa3      	ldrb	r3, [r4, #10]
    86dc:	2b07      	cmp	r3, #7
    86de:	d837      	bhi.n	8750 <bt_conn_set_state+0x88>
    86e0:	e8df f003 	tbb	[pc, r3]
    86e4:	36361137 	.word	0x36361137
    86e8:	28763636 	.word	0x28763636
		if (conn->type != BT_CONN_TYPE_ISO) {
    86ec:	7883      	ldrb	r3, [r0, #2]
    86ee:	2b08      	cmp	r3, #8
    86f0:	d0f3      	beq.n	86da <bt_conn_set_state+0x12>
			bt_conn_ref(conn);
    86f2:	f014 f925 	bl	1c940 <bt_conn_ref>
    86f6:	e7f0      	b.n	86da <bt_conn_set_state+0x12>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    86f8:	7883      	ldrb	r3, [r0, #2]
    86fa:	2b01      	cmp	r3, #1
    86fc:	d1ed      	bne.n	86da <bt_conn_set_state+0x12>
			k_work_cancel_delayable(&conn->deferred_work);
    86fe:	3058      	adds	r0, #88	; 0x58
    8700:	f016 ff1d 	bl	1f53e <k_work_cancel_delayable>
    8704:	e7e9      	b.n	86da <bt_conn_set_state+0x12>
	z_impl_k_sem_give(sem);
    8706:	4d53      	ldr	r5, [pc, #332]	; (8854 <bt_conn_set_state+0x18c>)
		tx->pending_no_cb = 0U;
    8708:	2600      	movs	r6, #0
	__asm__ volatile(
    870a:	f04f 0320 	mov.w	r3, #32
    870e:	f3ef 8211 	mrs	r2, BASEPRI
    8712:	f383 8812 	msr	BASEPRI_MAX, r3
    8716:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    871a:	69e3      	ldr	r3, [r4, #28]
    871c:	2b00      	cmp	r3, #0
    871e:	d079      	beq.n	8814 <bt_conn_set_state+0x14c>
			conn->pending_no_cb--;
    8720:	3b01      	subs	r3, #1
    8722:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    8724:	f382 8811 	msr	BASEPRI, r2
    8728:	f3bf 8f6f 	isb	sy
    872c:	4628      	mov	r0, r5
    872e:	f011 fd15 	bl	1a15c <z_impl_k_sem_give>
}
    8732:	e7ea      	b.n	870a <bt_conn_set_state+0x42>
		if (conn->type == BT_CONN_TYPE_SCO) {
    8734:	78a3      	ldrb	r3, [r4, #2]
    8736:	2b04      	cmp	r3, #4
    8738:	d00a      	beq.n	8750 <bt_conn_set_state+0x88>
	z_impl_k_queue_init(queue);
    873a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    873e:	f016 fdf8 	bl	1f332 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    8742:	4845      	ldr	r0, [pc, #276]	; (8858 <bt_conn_set_state+0x190>)
    8744:	2100      	movs	r1, #0
    8746:	f012 fbe7 	bl	1af18 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    874a:	2300      	movs	r3, #0
	list->tail = NULL;
    874c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
    8750:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    8752:	78a3      	ldrb	r3, [r4, #2]
    8754:	2b04      	cmp	r3, #4
    8756:	d105      	bne.n	8764 <bt_conn_set_state+0x9c>
	old = atomic_dec(&conn->ref);
    8758:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
}
    875c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	old = atomic_dec(&conn->ref);
    8760:	f014 b84b 	b.w	1c7fa <atomic_dec.isra.0>
		switch (old_state) {
    8764:	3d01      	subs	r5, #1
    8766:	2d05      	cmp	r5, #5
    8768:	d8f2      	bhi.n	8750 <bt_conn_set_state+0x88>
    876a:	a301      	add	r3, pc, #4	; (adr r3, 8770 <bt_conn_set_state+0xa8>)
    876c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    8770:	00008789 	.word	0x00008789
    8774:	000087c3 	.word	0x000087c3
    8778:	00008759 	.word	0x00008759
    877c:	00008759 	.word	0x00008759
    8780:	000087c3 	.word	0x000087c3
    8784:	000087c3 	.word	0x000087c3
			tx_notify(conn);
    8788:	4620      	mov	r0, r4
    878a:	f014 f842 	bl	1c812 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    878e:	78a3      	ldrb	r3, [r4, #2]
    8790:	2b01      	cmp	r3, #1
    8792:	d103      	bne.n	879c <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
    8794:	f104 0058 	add.w	r0, r4, #88	; 0x58
    8798:	f016 fed1 	bl	1f53e <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    879c:	f3bf 8f5b 	dmb	ish
    87a0:	3404      	adds	r4, #4
    87a2:	e854 3f00 	ldrex	r3, [r4]
    87a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    87aa:	e844 3200 	strex	r2, r3, [r4]
    87ae:	2a00      	cmp	r2, #0
    87b0:	d1f7      	bne.n	87a2 <bt_conn_set_state+0xda>
    87b2:	f3bf 8f5b 	dmb	ish
    87b6:	4828      	ldr	r0, [pc, #160]	; (8858 <bt_conn_set_state+0x190>)
}
    87b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87bc:	2100      	movs	r1, #0
    87be:	f012 bbab 	b.w	1af18 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    87c2:	7a63      	ldrb	r3, [r4, #9]
    87c4:	2b00      	cmp	r3, #0
    87c6:	d0c7      	beq.n	8758 <bt_conn_set_state+0x90>
				notify_connected(conn);
    87c8:	4620      	mov	r0, r4
    87ca:	f7ff fe53 	bl	8474 <notify_connected>
    87ce:	e7c3      	b.n	8758 <bt_conn_set_state+0x90>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    87d0:	78a3      	ldrb	r3, [r4, #2]
    87d2:	2b01      	cmp	r3, #1
    87d4:	d1bc      	bne.n	8750 <bt_conn_set_state+0x88>
					K_MSEC(10 * bt_dev.create_param.timeout));
    87d6:	4b21      	ldr	r3, [pc, #132]	; (885c <bt_conn_set_state+0x194>)
    87d8:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
    87da:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
    87dc:	b1c0      	cbz	r0, 8810 <bt_conn_set_state+0x148>
    87de:	230a      	movs	r3, #10
    87e0:	4358      	muls	r0, r3
    87e2:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
    87e4:	03c9      	lsls	r1, r1, #15
    87e6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    87ea:	f240 33e7 	movw	r3, #999	; 0x3e7
    87ee:	03c0      	lsls	r0, r0, #15
    87f0:	18c0      	adds	r0, r0, r3
    87f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    87f6:	f04f 0300 	mov.w	r3, #0
    87fa:	f141 0100 	adc.w	r1, r1, #0
    87fe:	f7f8 f985 	bl	b0c <__aeabi_uldivmod>
    8802:	4602      	mov	r2, r0
    8804:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    8806:	4620      	mov	r0, r4
}
    8808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    880c:	f011 be7a 	b.w	1a504 <k_work_schedule>
					K_MSEC(10 * bt_dev.create_param.timeout));
    8810:	4601      	mov	r1, r0
    8812:	e7e7      	b.n	87e4 <bt_conn_set_state+0x11c>
	return list->head;
    8814:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    8816:	b128      	cbz	r0, 8824 <bt_conn_set_state+0x15c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8818:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    881a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    881c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    881e:	4288      	cmp	r0, r1
	list->tail = node;
    8820:	bf08      	it	eq
    8822:	61a3      	streq	r3, [r4, #24]
    8824:	f382 8811 	msr	BASEPRI, r2
    8828:	f3bf 8f6f 	isb	sy
		if (!node) {
    882c:	2800      	cmp	r0, #0
    882e:	d08f      	beq.n	8750 <bt_conn_set_state+0x88>
	__asm__ volatile(
    8830:	f04f 0220 	mov.w	r2, #32
    8834:	f3ef 8311 	mrs	r3, BASEPRI
    8838:	f382 8812 	msr	BASEPRI_MAX, r2
    883c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    8840:	68c2      	ldr	r2, [r0, #12]
    8842:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    8844:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    8846:	f383 8811 	msr	BASEPRI, r3
    884a:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    884e:	f7ff fe07 	bl	8460 <tx_free>
    8852:	e76b      	b.n	872c <bt_conn_set_state+0x64>
    8854:	200001f0 	.word	0x200001f0
    8858:	200002b0 	.word	0x200002b0
    885c:	200000f0 	.word	0x200000f0

00008860 <bt_conn_index>:
		index = conn - acl_conns;
    8860:	4b03      	ldr	r3, [pc, #12]	; (8870 <bt_conn_index+0x10>)
    8862:	1ac0      	subs	r0, r0, r3
    8864:	4b03      	ldr	r3, [pc, #12]	; (8874 <bt_conn_index+0x14>)
    8866:	1180      	asrs	r0, r0, #6
    8868:	4358      	muls	r0, r3
}
    886a:	b2c0      	uxtb	r0, r0
    886c:	4770      	bx	lr
    886e:	bf00      	nop
    8870:	20000e58 	.word	0x20000e58
    8874:	aaaaaaab 	.word	0xaaaaaaab

00008878 <bt_conn_create_pdu_timeout>:
{
    8878:	b538      	push	{r3, r4, r5, lr}
    887a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    887c:	4906      	ldr	r1, [pc, #24]	; (8898 <bt_conn_create_pdu_timeout+0x20>)
    887e:	2800      	cmp	r0, #0
    8880:	bf08      	it	eq
    8882:	4608      	moveq	r0, r1
    8884:	f015 fa52 	bl	1dd2c <net_buf_alloc_fixed>
	if (!buf) {
    8888:	4604      	mov	r4, r0
    888a:	b118      	cbz	r0, 8894 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    888c:	1d29      	adds	r1, r5, #4
    888e:	3008      	adds	r0, #8
    8890:	f015 fa6b 	bl	1dd6a <net_buf_simple_reserve>
}
    8894:	4620      	mov	r0, r4
    8896:	bd38      	pop	{r3, r4, r5, pc}
    8898:	20000a88 	.word	0x20000a88

0000889c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    889e:	1d03      	adds	r3, r0, #4
{
    88a0:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    88a2:	4618      	mov	r0, r3
    88a4:	f013 ffa3 	bl	1c7ee <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    88a8:	0582      	lsls	r2, r0, #22
    88aa:	d519      	bpl.n	88e0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    88ac:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    88b0:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    88b4:	4291      	cmp	r1, r2
    88b6:	d813      	bhi.n	88e0 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    88b8:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    88bc:	4291      	cmp	r1, r2
    88be:	d30f      	bcc.n	88e0 <notify_le_param_updated+0x44>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    88c0:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    88c4:	4291      	cmp	r1, r2
    88c6:	d10b      	bne.n	88e0 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    88c8:	f3bf 8f5b 	dmb	ish
    88cc:	e853 2f00 	ldrex	r2, [r3]
    88d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    88d4:	e843 2100 	strex	r1, r2, [r3]
    88d8:	2900      	cmp	r1, #0
    88da:	d1f7      	bne.n	88cc <notify_le_param_updated+0x30>
    88dc:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    88e0:	4b0f      	ldr	r3, [pc, #60]	; (8920 <notify_le_param_updated+0x84>)
    88e2:	681d      	ldr	r5, [r3, #0]
    88e4:	b925      	cbnz	r5, 88f0 <notify_le_param_updated+0x54>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    88e6:	4d0f      	ldr	r5, [pc, #60]	; (8924 <notify_le_param_updated+0x88>)
    88e8:	4f0f      	ldr	r7, [pc, #60]	; (8928 <notify_le_param_updated+0x8c>)
    88ea:	42bd      	cmp	r5, r7
    88ec:	d30c      	bcc.n	8908 <notify_le_param_updated+0x6c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    88ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    88f0:	68ee      	ldr	r6, [r5, #12]
    88f2:	b13e      	cbz	r6, 8904 <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
    88f4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    88f8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    88fc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    8900:	4620      	mov	r0, r4
    8902:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    8904:	692d      	ldr	r5, [r5, #16]
    8906:	e7ed      	b.n	88e4 <notify_le_param_updated+0x48>
		if (cb->le_param_updated) {
    8908:	68ee      	ldr	r6, [r5, #12]
    890a:	b13e      	cbz	r6, 891c <notify_le_param_updated+0x80>
			cb->le_param_updated(conn, conn->le.interval,
    890c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8910:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    8914:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    8918:	4620      	mov	r0, r4
    891a:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    891c:	3514      	adds	r5, #20
    891e:	e7e4      	b.n	88ea <notify_le_param_updated+0x4e>
    8920:	200017fc 	.word	0x200017fc
    8924:	0001ff34 	.word	0x0001ff34
    8928:	0001ff34 	.word	0x0001ff34

0000892c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    892c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8930:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    8932:	4608      	mov	r0, r1
{
    8934:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    8936:	f013 fc25 	bl	1c184 <bt_le_conn_params_valid>
    893a:	4605      	mov	r5, r0
    893c:	b918      	cbnz	r0, 8946 <le_param_req+0x1a>
		return false;
    893e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    8940:	4628      	mov	r0, r5
    8942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    8946:	4b13      	ldr	r3, [pc, #76]	; (8994 <le_param_req+0x68>)
    8948:	681e      	ldr	r6, [r3, #0]
    894a:	b946      	cbnz	r6, 895e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    894c:	4e12      	ldr	r6, [pc, #72]	; (8998 <le_param_req+0x6c>)
    894e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 899c <le_param_req+0x70>
    8952:	4546      	cmp	r6, r8
    8954:	d2f4      	bcs.n	8940 <le_param_req+0x14>
		if (!cb->le_param_req) {
    8956:	68b3      	ldr	r3, [r6, #8]
    8958:	b983      	cbnz	r3, 897c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    895a:	3614      	adds	r6, #20
    895c:	e7f9      	b.n	8952 <le_param_req+0x26>
		if (!cb->le_param_req) {
    895e:	68b3      	ldr	r3, [r6, #8]
    8960:	b90b      	cbnz	r3, 8966 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    8962:	6936      	ldr	r6, [r6, #16]
    8964:	e7f1      	b.n	894a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    8966:	4621      	mov	r1, r4
    8968:	4638      	mov	r0, r7
    896a:	4798      	blx	r3
    896c:	2800      	cmp	r0, #0
    896e:	d0e6      	beq.n	893e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    8970:	4620      	mov	r0, r4
    8972:	f013 fc07 	bl	1c184 <bt_le_conn_params_valid>
    8976:	2800      	cmp	r0, #0
    8978:	d1f3      	bne.n	8962 <le_param_req+0x36>
    897a:	e7e0      	b.n	893e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    897c:	4621      	mov	r1, r4
    897e:	4638      	mov	r0, r7
    8980:	4798      	blx	r3
    8982:	2800      	cmp	r0, #0
    8984:	d0db      	beq.n	893e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    8986:	4620      	mov	r0, r4
    8988:	f013 fbfc 	bl	1c184 <bt_le_conn_params_valid>
    898c:	2800      	cmp	r0, #0
    898e:	d1e4      	bne.n	895a <le_param_req+0x2e>
    8990:	e7d5      	b.n	893e <le_param_req+0x12>
    8992:	bf00      	nop
    8994:	200017fc 	.word	0x200017fc
    8998:	0001ff34 	.word	0x0001ff34
    899c:	0001ff34 	.word	0x0001ff34

000089a0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    89a0:	b570      	push	{r4, r5, r6, lr}
    89a2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    89a4:	480d      	ldr	r0, [pc, #52]	; (89dc <bt_conn_lookup_addr_le+0x3c>)
{
    89a6:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    89a8:	f013 ffca 	bl	1c940 <bt_conn_ref>

		if (!conn) {
    89ac:	4604      	mov	r4, r0
    89ae:	b130      	cbz	r0, 89be <bt_conn_lookup_addr_le+0x1e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    89b0:	7883      	ldrb	r3, [r0, #2]
    89b2:	2b01      	cmp	r3, #1
    89b4:	d005      	beq.n	89c2 <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
    89b6:	30b8      	adds	r0, #184	; 0xb8
    89b8:	f013 ff1f 	bl	1c7fa <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    89bc:	2400      	movs	r4, #0
}
    89be:	4620      	mov	r0, r4
    89c0:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    89c2:	4629      	mov	r1, r5
    89c4:	4632      	mov	r2, r6
    89c6:	f014 f804 	bl	1c9d2 <bt_conn_is_peer_addr_le>
    89ca:	4601      	mov	r1, r0
    89cc:	2800      	cmp	r0, #0
    89ce:	d1f6      	bne.n	89be <bt_conn_lookup_addr_le+0x1e>
	old = atomic_dec(&conn->ref);
    89d0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    89d4:	f013 ff11 	bl	1c7fa <atomic_dec.isra.0>
	return NULL;
    89d8:	460c      	mov	r4, r1
			continue;
    89da:	e7f0      	b.n	89be <bt_conn_lookup_addr_le+0x1e>
    89dc:	20000e58 	.word	0x20000e58

000089e0 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    89e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89e2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    89e4:	480f      	ldr	r0, [pc, #60]	; (8a24 <bt_conn_lookup_state_le+0x44>)
{
    89e6:	460e      	mov	r6, r1
    89e8:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    89ea:	f013 ffa9 	bl	1c940 <bt_conn_ref>

		if (!conn) {
    89ee:	4604      	mov	r4, r0
    89f0:	b1a8      	cbz	r0, 8a1e <bt_conn_lookup_state_le+0x3e>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    89f2:	7883      	ldrb	r3, [r0, #2]
    89f4:	2b01      	cmp	r3, #1
    89f6:	d005      	beq.n	8a04 <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
    89f8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    89fc:	f013 fefd 	bl	1c7fa <atomic_dec.isra.0>
		}

		return conn;
	}

	return NULL;
    8a00:	2400      	movs	r4, #0
			continue;
    8a02:	e00c      	b.n	8a1e <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    8a04:	b12e      	cbz	r6, 8a12 <bt_conn_lookup_state_le+0x32>
    8a06:	4632      	mov	r2, r6
    8a08:	4629      	mov	r1, r5
    8a0a:	f013 ffe2 	bl	1c9d2 <bt_conn_is_peer_addr_le>
    8a0e:	2800      	cmp	r0, #0
    8a10:	d0f2      	beq.n	89f8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    8a12:	7aa3      	ldrb	r3, [r4, #10]
    8a14:	42bb      	cmp	r3, r7
    8a16:	d1ef      	bne.n	89f8 <bt_conn_lookup_state_le+0x18>
    8a18:	7a23      	ldrb	r3, [r4, #8]
    8a1a:	42ab      	cmp	r3, r5
    8a1c:	d1ec      	bne.n	89f8 <bt_conn_lookup_state_le+0x18>
}
    8a1e:	4620      	mov	r0, r4
    8a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a22:	bf00      	nop
    8a24:	20000e58 	.word	0x20000e58

00008a28 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    8a28:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    8a2a:	4801      	ldr	r0, [pc, #4]	; (8a30 <bt_conn_create_frag_timeout+0x8>)
    8a2c:	f7ff bf24 	b.w	8878 <bt_conn_create_pdu_timeout>
    8a30:	20000ae0 	.word	0x20000ae0

00008a34 <create_frag>:
{
    8a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a38:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    8a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8a42:	2000      	movs	r0, #0
{
    8a44:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    8a46:	f7ff ffef 	bl	8a28 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    8a4a:	7ab3      	ldrb	r3, [r6, #10]
    8a4c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    8a4e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    8a50:	f04f 0600 	mov.w	r6, #0
    8a54:	d005      	beq.n	8a62 <create_frag+0x2e>
		net_buf_unref(frag);
    8a56:	f00e fa07 	bl	16e68 <net_buf_unref>
		return NULL;
    8a5a:	4635      	mov	r5, r6
}
    8a5c:	4628      	mov	r0, r5
    8a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    8a62:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    8a64:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    8a68:	4e0c      	ldr	r6, [pc, #48]	; (8a9c <create_frag+0x68>)
    8a6a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8a6c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    8a70:	f015 fa01 	bl	1de76 <net_buf_simple_tailroom>
    8a74:	4580      	cmp	r8, r0
    8a76:	d20c      	bcs.n	8a92 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    8a78:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8a7c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    8a80:	4632      	mov	r2, r6
    8a82:	4638      	mov	r0, r7
    8a84:	f015 f9ba 	bl	1ddfc <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    8a88:	4631      	mov	r1, r6
    8a8a:	4620      	mov	r0, r4
    8a8c:	f015 f9cf 	bl	1de2e <net_buf_simple_pull>
    8a90:	e7e4      	b.n	8a5c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    8a92:	4638      	mov	r0, r7
    8a94:	f015 f9ef 	bl	1de76 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8a98:	b286      	uxth	r6, r0
    8a9a:	e7ef      	b.n	8a7c <create_frag+0x48>
    8a9c:	200000f0 	.word	0x200000f0

00008aa0 <bt_conn_process_tx>:
{
    8aa0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    8aa2:	7a83      	ldrb	r3, [r0, #10]
{
    8aa4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    8aa6:	b993      	cbnz	r3, 8ace <bt_conn_process_tx+0x2e>
    8aa8:	f3bf 8f5b 	dmb	ish
    8aac:	1d03      	adds	r3, r0, #4
    8aae:	e853 2f00 	ldrex	r2, [r3]
    8ab2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    8ab6:	e843 1500 	strex	r5, r1, [r3]
    8aba:	2d00      	cmp	r5, #0
    8abc:	d1f7      	bne.n	8aae <bt_conn_process_tx+0xe>
    8abe:	f3bf 8f5b 	dmb	ish
    8ac2:	0653      	lsls	r3, r2, #25
    8ac4:	d503      	bpl.n	8ace <bt_conn_process_tx+0x2e>
}
    8ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    8aca:	f013 bece 	b.w	1c86a <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    8ace:	2200      	movs	r2, #0
    8ad0:	2300      	movs	r3, #0
    8ad2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8ad6:	f015 f92e 	bl	1dd36 <net_buf_get>
	BT_ASSERT(buf);
    8ada:	4605      	mov	r5, r0
    8adc:	b960      	cbnz	r0, 8af8 <bt_conn_process_tx+0x58>
    8ade:	4a1f      	ldr	r2, [pc, #124]	; (8b5c <bt_conn_process_tx+0xbc>)
    8ae0:	491f      	ldr	r1, [pc, #124]	; (8b60 <bt_conn_process_tx+0xc0>)
    8ae2:	4820      	ldr	r0, [pc, #128]	; (8b64 <bt_conn_process_tx+0xc4>)
    8ae4:	f240 23e7 	movw	r3, #743	; 0x2e7
    8ae8:	f012 fae5 	bl	1b0b6 <printk>
    8aec:	4040      	eors	r0, r0
    8aee:	f380 8811 	msr	BASEPRI, r0
    8af2:	f04f 0003 	mov.w	r0, #3
    8af6:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    8af8:	4e1b      	ldr	r6, [pc, #108]	; (8b68 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    8afa:	89aa      	ldrh	r2, [r5, #12]
    8afc:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    8b00:	429a      	cmp	r2, r3
    8b02:	d807      	bhi.n	8b14 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    8b04:	2300      	movs	r3, #0
    8b06:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    8b08:	4629      	mov	r1, r5
    8b0a:	4620      	mov	r0, r4
    8b0c:	f7ff fcd6 	bl	84bc <send_frag>
	if (!send_buf(conn, buf)) {
    8b10:	b130      	cbz	r0, 8b20 <bt_conn_process_tx+0x80>
}
    8b12:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    8b14:	4629      	mov	r1, r5
    8b16:	4620      	mov	r0, r4
    8b18:	f7ff ff8c 	bl	8a34 <create_frag>
	if (!frag) {
    8b1c:	4601      	mov	r1, r0
    8b1e:	b920      	cbnz	r0, 8b2a <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    8b20:	4628      	mov	r0, r5
}
    8b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    8b26:	f00e b99f 	b.w	16e68 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    8b2a:	2301      	movs	r3, #1
    8b2c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    8b2e:	4620      	mov	r0, r4
    8b30:	f7ff fcc4 	bl	84bc <send_frag>
    8b34:	2800      	cmp	r0, #0
    8b36:	d0f3      	beq.n	8b20 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    8b38:	89aa      	ldrh	r2, [r5, #12]
    8b3a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    8b3e:	429a      	cmp	r2, r3
    8b40:	d802      	bhi.n	8b48 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    8b42:	2300      	movs	r3, #0
    8b44:	2203      	movs	r2, #3
    8b46:	e7df      	b.n	8b08 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    8b48:	4629      	mov	r1, r5
    8b4a:	4620      	mov	r0, r4
    8b4c:	f7ff ff72 	bl	8a34 <create_frag>
		if (!frag) {
    8b50:	4601      	mov	r1, r0
    8b52:	2800      	cmp	r0, #0
    8b54:	d0e4      	beq.n	8b20 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    8b56:	2301      	movs	r3, #1
    8b58:	461a      	mov	r2, r3
    8b5a:	e7e8      	b.n	8b2e <bt_conn_process_tx+0x8e>
    8b5c:	00021a2f 	.word	0x00021a2f
    8b60:	0002199d 	.word	0x0002199d
    8b64:	00021960 	.word	0x00021960
    8b68:	200000f0 	.word	0x200000f0

00008b6c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    8b6c:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    8b6e:	4914      	ldr	r1, [pc, #80]	; (8bc0 <bt_conn_init+0x54>)
    8b70:	4814      	ldr	r0, [pc, #80]	; (8bc4 <bt_conn_init+0x58>)
    8b72:	f016 fbea 	bl	1f34a <k_queue_append>
    8b76:	4914      	ldr	r1, [pc, #80]	; (8bc8 <bt_conn_init+0x5c>)
    8b78:	4812      	ldr	r0, [pc, #72]	; (8bc4 <bt_conn_init+0x58>)
    8b7a:	f016 fbe6 	bl	1f34a <k_queue_append>
    8b7e:	4913      	ldr	r1, [pc, #76]	; (8bcc <bt_conn_init+0x60>)
    8b80:	4810      	ldr	r0, [pc, #64]	; (8bc4 <bt_conn_init+0x58>)
    8b82:	f016 fbe2 	bl	1f34a <k_queue_append>
	}

	bt_att_init();
    8b86:	f014 fcf4 	bl	1d572 <bt_att_init>

	err = bt_smp_init();
    8b8a:	f015 f8cc 	bl	1dd26 <bt_smp_init>
	if (err) {
    8b8e:	4605      	mov	r5, r0
    8b90:	b9a0      	cbnz	r0, 8bbc <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    8b92:	f014 f892 	bl	1ccba <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    8b96:	480e      	ldr	r0, [pc, #56]	; (8bd0 <bt_conn_init+0x64>)
    8b98:	f013 fed2 	bl	1c940 <bt_conn_ref>

			if (!conn) {
    8b9c:	4604      	mov	r4, r0
    8b9e:	b168      	cbz	r0, 8bbc <bt_conn_init+0x50>
    8ba0:	3004      	adds	r0, #4
    8ba2:	f013 fe24 	bl	1c7ee <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
    8ba6:	07c3      	lsls	r3, r0, #31
    8ba8:	d504      	bpl.n	8bb4 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    8baa:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8bac:	2102      	movs	r1, #2
    8bae:	4620      	mov	r0, r4
    8bb0:	f7ff fd8a 	bl	86c8 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
    8bb4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    8bb8:	f013 fe1f 	bl	1c7fa <atomic_dec.isra.0>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    8bbc:	4628      	mov	r0, r5
    8bbe:	bd38      	pop	{r3, r4, r5, pc}
    8bc0:	20001800 	.word	0x20001800
    8bc4:	20000a58 	.word	0x20000a58
    8bc8:	20001810 	.word	0x20001810
    8bcc:	20001820 	.word	0x20001820
    8bd0:	20000e58 	.word	0x20000e58

00008bd4 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    8bd4:	4b04      	ldr	r3, [pc, #16]	; (8be8 <l2cap_accept+0x14>)
    8bd6:	6818      	ldr	r0, [r3, #0]
    8bd8:	b918      	cbnz	r0, 8be2 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    8bda:	4a04      	ldr	r2, [pc, #16]	; (8bec <l2cap_accept+0x18>)
    8bdc:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    8bde:	600b      	str	r3, [r1, #0]

		return 0;
    8be0:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    8be2:	f06f 000b 	mvn.w	r0, #11
}
    8be6:	4770      	bx	lr
    8be8:	20000f18 	.word	0x20000f18
    8bec:	000201ac 	.word	0x000201ac

00008bf0 <bt_l2cap_connected>:
{
    8bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8bf4:	4e29      	ldr	r6, [pc, #164]	; (8c9c <bt_l2cap_connected+0xac>)
    8bf6:	4f2a      	ldr	r7, [pc, #168]	; (8ca0 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8bf8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8ca4 <bt_l2cap_connected+0xb4>
{
    8bfc:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8bfe:	42be      	cmp	r6, r7
    8c00:	d302      	bcc.n	8c08 <bt_l2cap_connected+0x18>
}
    8c02:	b003      	add	sp, #12
    8c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    8c08:	6873      	ldr	r3, [r6, #4]
    8c0a:	a901      	add	r1, sp, #4
    8c0c:	4620      	mov	r0, r4
    8c0e:	4798      	blx	r3
    8c10:	2800      	cmp	r0, #0
    8c12:	db3d      	blt.n	8c90 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    8c14:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    8c16:	8833      	ldrh	r3, [r6, #0]
    8c18:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    8c1c:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8c20:	4641      	mov	r1, r8
    8c22:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    8c26:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    8c2a:	f016 fc7c 	bl	1f526 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8c2e:	f3bf 8f5b 	dmb	ish
    8c32:	f105 0368 	add.w	r3, r5, #104	; 0x68
    8c36:	2200      	movs	r2, #0
    8c38:	e853 1f00 	ldrex	r1, [r3]
    8c3c:	e843 2000 	strex	r0, r2, [r3]
    8c40:	2800      	cmp	r0, #0
    8c42:	d1f9      	bne.n	8c38 <bt_l2cap_connected+0x48>
    8c44:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    8c48:	60aa      	str	r2, [r5, #8]
	return list->tail;
    8c4a:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    8c4c:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    8c50:	bb02      	cbnz	r2, 8c94 <bt_l2cap_connected+0xa4>
	list->head = node;
    8c52:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    8c56:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    8c58:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    8c5a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    8c5c:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    8c60:	681b      	ldr	r3, [r3, #0]
    8c62:	b103      	cbz	r3, 8c66 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    8c64:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8c66:	9b01      	ldr	r3, [sp, #4]
    8c68:	f3bf 8f5b 	dmb	ish
    8c6c:	3368      	adds	r3, #104	; 0x68
    8c6e:	e853 2f00 	ldrex	r2, [r3]
    8c72:	f042 0201 	orr.w	r2, r2, #1
    8c76:	e843 2100 	strex	r1, r2, [r3]
    8c7a:	2900      	cmp	r1, #0
    8c7c:	d1f7      	bne.n	8c6e <bt_l2cap_connected+0x7e>
    8c7e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    8c82:	9801      	ldr	r0, [sp, #4]
    8c84:	6843      	ldr	r3, [r0, #4]
    8c86:	699b      	ldr	r3, [r3, #24]
    8c88:	b113      	cbz	r3, 8c90 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    8c8a:	f100 0168 	add.w	r1, r0, #104	; 0x68
    8c8e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8c90:	360c      	adds	r6, #12
    8c92:	e7b4      	b.n	8bfe <bt_l2cap_connected+0xe>
	parent->next = child;
    8c94:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8c96:	6563      	str	r3, [r4, #84]	; 0x54
}
    8c98:	e7dd      	b.n	8c56 <bt_l2cap_connected+0x66>
    8c9a:	bf00      	nop
    8c9c:	0001ff10 	.word	0x0001ff10
    8ca0:	0001ff34 	.word	0x0001ff34
    8ca4:	0001cafd 	.word	0x0001cafd

00008ca8 <bt_l2cap_update_conn_param>:
{
    8ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8caa:	460d      	mov	r5, r1
	ident++;
    8cac:	4916      	ldr	r1, [pc, #88]	; (8d08 <bt_l2cap_update_conn_param+0x60>)
    8cae:	780b      	ldrb	r3, [r1, #0]
    8cb0:	3301      	adds	r3, #1
	if (!ident) {
    8cb2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    8cb6:	bf08      	it	eq
    8cb8:	2301      	moveq	r3, #1
    8cba:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8cbc:	7809      	ldrb	r1, [r1, #0]
{
    8cbe:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8cc0:	2208      	movs	r2, #8
    8cc2:	2012      	movs	r0, #18
    8cc4:	f013 fed1 	bl	1ca6a <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    8cc8:	4604      	mov	r4, r0
    8cca:	b1d0      	cbz	r0, 8d02 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    8ccc:	2108      	movs	r1, #8
    8cce:	4408      	add	r0, r1
    8cd0:	f015 f88e 	bl	1ddf0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    8cd4:	882b      	ldrh	r3, [r5, #0]
    8cd6:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8cd8:	886b      	ldrh	r3, [r5, #2]
    8cda:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    8cdc:	88ab      	ldrh	r3, [r5, #4]
    8cde:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    8ce0:	88eb      	ldrh	r3, [r5, #6]
    8ce2:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    8ce4:	2300      	movs	r3, #0
    8ce6:	9300      	str	r3, [sp, #0]
    8ce8:	4622      	mov	r2, r4
    8cea:	2105      	movs	r1, #5
    8cec:	4630      	mov	r0, r6
    8cee:	f013 ff15 	bl	1cb1c <bt_l2cap_send_cb>
	if (err) {
    8cf2:	4605      	mov	r5, r0
    8cf4:	b110      	cbz	r0, 8cfc <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    8cf6:	4620      	mov	r0, r4
    8cf8:	f00e f8b6 	bl	16e68 <net_buf_unref>
}
    8cfc:	4628      	mov	r0, r5
    8cfe:	b002      	add	sp, #8
    8d00:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    8d02:	f06f 050b 	mvn.w	r5, #11
    8d06:	e7f9      	b.n	8cfc <bt_l2cap_update_conn_param+0x54>
    8d08:	20002db0 	.word	0x20002db0

00008d0c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    8d0c:	4b02      	ldr	r3, [pc, #8]	; (8d18 <att_cfm_sent+0xc>)
    8d0e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    8d12:	f013 bfe5 	b.w	1cce0 <att_sent>
    8d16:	bf00      	nop
    8d18:	0001d245 	.word	0x0001d245

00008d1c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    8d1c:	4b02      	ldr	r3, [pc, #8]	; (8d28 <att_rsp_sent+0xc>)
    8d1e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    8d22:	f013 bfdd 	b.w	1cce0 <att_sent>
    8d26:	bf00      	nop
    8d28:	0001d229 	.word	0x0001d229

00008d2c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    8d2c:	4b02      	ldr	r3, [pc, #8]	; (8d38 <att_req_sent+0xc>)
    8d2e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    8d32:	f013 bfd5 	b.w	1cce0 <att_sent>
    8d36:	bf00      	nop
    8d38:	0001cff9 	.word	0x0001cff9

00008d3c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    8d3c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    8d3e:	3808      	subs	r0, #8
    8d40:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    8d42:	a901      	add	r1, sp, #4
    8d44:	4802      	ldr	r0, [pc, #8]	; (8d50 <bt_att_released+0x14>)
    8d46:	f016 fa49 	bl	1f1dc <k_mem_slab_free>
}
    8d4a:	b003      	add	sp, #12
    8d4c:	f85d fb04 	ldr.w	pc, [sp], #4
    8d50:	200009d8 	.word	0x200009d8

00008d54 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    8d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8d56:	2300      	movs	r3, #0
{
    8d58:	4607      	mov	r7, r0
    8d5a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8d5c:	481e      	ldr	r0, [pc, #120]	; (8dd8 <bt_att_accept+0x84>)
    8d5e:	2200      	movs	r2, #0
    8d60:	4669      	mov	r1, sp
    8d62:	f011 f8c3 	bl	19eec <k_mem_slab_alloc>
    8d66:	4604      	mov	r4, r0
    8d68:	b120      	cbz	r0, 8d74 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    8d6a:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    8d6e:	4620      	mov	r0, r4
    8d70:	b003      	add	sp, #12
    8d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    8d74:	4601      	mov	r1, r0
    8d76:	222c      	movs	r2, #44	; 0x2c
    8d78:	9800      	ldr	r0, [sp, #0]
    8d7a:	f012 ffe1 	bl	1bd40 <memset>
	att->conn = conn;
    8d7e:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8d80:	4816      	ldr	r0, [pc, #88]	; (8ddc <bt_att_accept+0x88>)
	list->tail = NULL;
    8d82:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    8d84:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    8d88:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    8d8c:	2200      	movs	r2, #0
    8d8e:	2300      	movs	r3, #0
    8d90:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    8d92:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8d94:	f011 f8aa 	bl	19eec <k_mem_slab_alloc>
    8d98:	4604      	mov	r4, r0
    8d9a:	2800      	cmp	r0, #0
    8d9c:	d1e5      	bne.n	8d6a <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    8d9e:	4601      	mov	r1, r0
    8da0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    8da4:	9801      	ldr	r0, [sp, #4]
    8da6:	f012 ffcb 	bl	1bd40 <memset>
	chan->chan.chan.ops = &ops;
    8daa:	9801      	ldr	r0, [sp, #4]
    8dac:	4b0c      	ldr	r3, [pc, #48]	; (8de0 <bt_att_accept+0x8c>)
    8dae:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    8db0:	30f8      	adds	r0, #248	; 0xf8
    8db2:	f016 fabe 	bl	1f332 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8db6:	9b01      	ldr	r3, [sp, #4]
    8db8:	f3bf 8f5b 	dmb	ish
    8dbc:	33f0      	adds	r3, #240	; 0xf0
    8dbe:	e853 2f00 	ldrex	r2, [r3]
    8dc2:	e843 4100 	strex	r1, r4, [r3]
    8dc6:	2900      	cmp	r1, #0
    8dc8:	d1f9      	bne.n	8dbe <bt_att_accept+0x6a>
    8dca:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    8dce:	9b01      	ldr	r3, [sp, #4]
    8dd0:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    8dd4:	6033      	str	r3, [r6, #0]
	return 0;
    8dd6:	e7ca      	b.n	8d6e <bt_att_accept+0x1a>
    8dd8:	200009bc 	.word	0x200009bc
    8ddc:	200009d8 	.word	0x200009d8
    8de0:	200002c0 	.word	0x200002c0

00008de4 <read_group_cb>:
{
    8de4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8de8:	4605      	mov	r5, r0
    8dea:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8dec:	f04f 0800 	mov.w	r8, #0
    8df0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8df4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    8df6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8df8:	f88d 8008 	strb.w	r8, [sp, #8]
    8dfc:	a902      	add	r1, sp, #8
{
    8dfe:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8e00:	f8ad 300a 	strh.w	r3, [sp, #10]
    8e04:	f013 f81c 	bl	1be40 <bt_uuid_cmp>
    8e08:	b1a0      	cbz	r0, 8e34 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8e0a:	f642 0301 	movw	r3, #10241	; 0x2801
    8e0e:	6828      	ldr	r0, [r5, #0]
    8e10:	f88d 800c 	strb.w	r8, [sp, #12]
    8e14:	a903      	add	r1, sp, #12
    8e16:	f8ad 300e 	strh.w	r3, [sp, #14]
    8e1a:	f013 f811 	bl	1be40 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8e1e:	b148      	cbz	r0, 8e34 <read_group_cb+0x50>
		if (data->group &&
    8e20:	6923      	ldr	r3, [r4, #16]
    8e22:	b11b      	cbz	r3, 8e2c <read_group_cb+0x48>
    8e24:	885a      	ldrh	r2, [r3, #2]
    8e26:	42b2      	cmp	r2, r6
    8e28:	d200      	bcs.n	8e2c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8e2a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8e2c:	2001      	movs	r0, #1
}
    8e2e:	b004      	add	sp, #16
    8e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8e34:	6861      	ldr	r1, [r4, #4]
    8e36:	6828      	ldr	r0, [r5, #0]
    8e38:	f013 f802 	bl	1be40 <bt_uuid_cmp>
    8e3c:	b110      	cbz	r0, 8e44 <read_group_cb+0x60>
		data->group = NULL;
    8e3e:	2300      	movs	r3, #0
    8e40:	6123      	str	r3, [r4, #16]
    8e42:	e7f3      	b.n	8e2c <read_group_cb+0x48>
	if (data->rsp->len &&
    8e44:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8e46:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    8e48:	781a      	ldrb	r2, [r3, #0]
    8e4a:	b13a      	cbz	r2, 8e5c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8e4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    8e50:	8981      	ldrh	r1, [r0, #12]
    8e52:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8e54:	4293      	cmp	r3, r2
    8e56:	da01      	bge.n	8e5c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    8e58:	2000      	movs	r0, #0
    8e5a:	e7e8      	b.n	8e2e <read_group_cb+0x4a>
    8e5c:	2104      	movs	r1, #4
    8e5e:	3008      	adds	r0, #8
    8e60:	f014 ffc6 	bl	1ddf0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8e64:	4b09      	ldr	r3, [pc, #36]	; (8e8c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8e66:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8e68:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8e6a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8e6c:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8e6e:	4629      	mov	r1, r5
    8e70:	9300      	str	r3, [sp, #0]
    8e72:	9401      	str	r4, [sp, #4]
    8e74:	2300      	movs	r3, #0
    8e76:	4638      	mov	r0, r7
    8e78:	f014 f8fb 	bl	1d072 <att_chan_read>
	if (read < 0) {
    8e7c:	2800      	cmp	r0, #0
    8e7e:	dbeb      	blt.n	8e58 <read_group_cb+0x74>
	if (!data->group) {
    8e80:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8e82:	3800      	subs	r0, #0
    8e84:	bf18      	it	ne
    8e86:	2001      	movne	r0, #1
    8e88:	e7d1      	b.n	8e2e <read_group_cb+0x4a>
    8e8a:	bf00      	nop
    8e8c:	0001cfad 	.word	0x0001cfad

00008e90 <chan_send>:
{
    8e90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8e94:	688b      	ldr	r3, [r1, #8]
    8e96:	781b      	ldrb	r3, [r3, #0]
    8e98:	2bd2      	cmp	r3, #210	; 0xd2
{
    8e9a:	4606      	mov	r6, r0
    8e9c:	460c      	mov	r4, r1
    8e9e:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8ea0:	d10c      	bne.n	8ebc <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
    8ea2:	6803      	ldr	r3, [r0, #0]
    8ea4:	6818      	ldr	r0, [r3, #0]
    8ea6:	f014 ff3b 	bl	1dd20 <bt_smp_sign>
		if (err) {
    8eaa:	4605      	mov	r5, r0
    8eac:	b130      	cbz	r0, 8ebc <chan_send+0x2c>
			net_buf_unref(buf);
    8eae:	4620      	mov	r0, r4
    8eb0:	f00d ffda 	bl	16e68 <net_buf_unref>
}
    8eb4:	4628      	mov	r0, r5
    8eb6:	b003      	add	sp, #12
    8eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    8ebc:	f104 0008 	add.w	r0, r4, #8
    8ec0:	f014 ffd5 	bl	1de6e <net_buf_simple_headroom>
	state->len = buf->len;
    8ec4:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8ec8:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    8eca:	b957      	cbnz	r7, 8ee2 <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
    8ecc:	68a3      	ldr	r3, [r4, #8]
    8ece:	7818      	ldrb	r0, [r3, #0]
    8ed0:	f013 ff1e 	bl	1cd10 <att_op_get_type>
    8ed4:	3801      	subs	r0, #1
    8ed6:	b2c0      	uxtb	r0, r0
    8ed8:	2804      	cmp	r0, #4
    8eda:	bf9c      	itt	ls
    8edc:	4b13      	ldrls	r3, [pc, #76]	; (8f2c <chan_send+0x9c>)
    8ede:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8ee2:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    8ee4:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8ee8:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    8eea:	4b11      	ldr	r3, [pc, #68]	; (8f30 <chan_send+0xa0>)
    8eec:	429f      	cmp	r7, r3
    8eee:	d018      	beq.n	8f22 <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
    8ef0:	4b10      	ldr	r3, [pc, #64]	; (8f34 <chan_send+0xa4>)
    8ef2:	429f      	cmp	r7, r3
    8ef4:	d017      	beq.n	8f26 <chan_send+0x96>
		return att_sent;
    8ef6:	4910      	ldr	r1, [pc, #64]	; (8f38 <chan_send+0xa8>)
    8ef8:	4b10      	ldr	r3, [pc, #64]	; (8f3c <chan_send+0xac>)
    8efa:	4a11      	ldr	r2, [pc, #68]	; (8f40 <chan_send+0xb0>)
    8efc:	428f      	cmp	r7, r1
    8efe:	bf18      	it	ne
    8f00:	4613      	movne	r3, r2
			       &chan->chan.chan);
    8f02:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8f04:	9600      	str	r6, [sp, #0]
    8f06:	4622      	mov	r2, r4
    8f08:	2104      	movs	r1, #4
    8f0a:	f013 fe07 	bl	1cb1c <bt_l2cap_send_cb>
	if (err) {
    8f0e:	4605      	mov	r5, r0
    8f10:	2800      	cmp	r0, #0
    8f12:	d0cf      	beq.n	8eb4 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
    8f14:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8f16:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8f1a:	fa10 f088 	uxtah	r0, r0, r8
    8f1e:	60a0      	str	r0, [r4, #8]
}
    8f20:	e7c8      	b.n	8eb4 <chan_send+0x24>
		return att_rsp_sent;
    8f22:	4b08      	ldr	r3, [pc, #32]	; (8f44 <chan_send+0xb4>)
    8f24:	e7ed      	b.n	8f02 <chan_send+0x72>
		return att_cfm_sent;
    8f26:	4b08      	ldr	r3, [pc, #32]	; (8f48 <chan_send+0xb8>)
    8f28:	e7eb      	b.n	8f02 <chan_send+0x72>
    8f2a:	bf00      	nop
    8f2c:	000201d0 	.word	0x000201d0
    8f30:	0001d229 	.word	0x0001d229
    8f34:	0001d245 	.word	0x0001d245
    8f38:	0001cff9 	.word	0x0001cff9
    8f3c:	00008d2d 	.word	0x00008d2d
    8f40:	0001cce1 	.word	0x0001cce1
    8f44:	00008d1d 	.word	0x00008d1d
    8f48:	00008d0d 	.word	0x00008d0d

00008f4c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8f4c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    8f4e:	4a07      	ldr	r2, [pc, #28]	; (8f6c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    8f50:	4604      	mov	r4, r0
    8f52:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    8f54:	f7ff ff9c 	bl	8e90 <chan_send>
	if (err) {
    8f58:	b130      	cbz	r0, 8f68 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    8f5a:	4629      	mov	r1, r5
    8f5c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    8f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    8f64:	f014 bf05 	b.w	1dd72 <net_buf_put>
}
    8f68:	bd38      	pop	{r3, r4, r5, pc}
    8f6a:	bf00      	nop
    8f6c:	0001d229 	.word	0x0001d229

00008f70 <read_type_cb>:
{
    8f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    8f74:	f8d2 8000 	ldr.w	r8, [r2]
{
    8f78:	4606      	mov	r6, r0
    8f7a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8f7c:	6800      	ldr	r0, [r0, #0]
    8f7e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    8f80:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    8f84:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8f86:	f012 ff5b 	bl	1be40 <bt_uuid_cmp>
    8f8a:	4607      	mov	r7, r0
    8f8c:	2800      	cmp	r0, #0
    8f8e:	d13e      	bne.n	900e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8f90:	4628      	mov	r0, r5
    8f92:	2215      	movs	r2, #21
    8f94:	4631      	mov	r1, r6
    8f96:	f014 fe15 	bl	1dbc4 <bt_gatt_check_perm>
    8f9a:	4605      	mov	r5, r0
    8f9c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8f9e:	b148      	cbz	r0, 8fb4 <read_type_cb+0x44>
		if (data->rsp->len) {
    8fa0:	68e3      	ldr	r3, [r4, #12]
    8fa2:	781b      	ldrb	r3, [r3, #0]
    8fa4:	b923      	cbnz	r3, 8fb0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    8fa6:	2500      	movs	r5, #0
}
    8fa8:	4628      	mov	r0, r5
    8faa:	b003      	add	sp, #12
    8fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    8fb0:	7527      	strb	r7, [r4, #20]
    8fb2:	e7f8      	b.n	8fa6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8fb4:	68a0      	ldr	r0, [r4, #8]
    8fb6:	f014 feed 	bl	1dd94 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    8fba:	2102      	movs	r1, #2
    8fbc:	3008      	adds	r0, #8
    8fbe:	f014 ff17 	bl	1ddf0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8fc2:	4b14      	ldr	r3, [pc, #80]	; (9014 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8fc4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8fc6:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    8fc8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8fcc:	4631      	mov	r1, r6
    8fce:	9300      	str	r3, [sp, #0]
    8fd0:	9401      	str	r4, [sp, #4]
    8fd2:	462b      	mov	r3, r5
    8fd4:	4640      	mov	r0, r8
    8fd6:	f014 f84c 	bl	1d072 <att_chan_read>
	if (read < 0) {
    8fda:	2800      	cmp	r0, #0
    8fdc:	da07      	bge.n	8fee <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    8fde:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    8fe2:	bf26      	itte	cs
    8fe4:	4240      	negcs	r0, r0
    8fe6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    8fe8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    8fea:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8fec:	e7dc      	b.n	8fa8 <read_type_cb+0x38>
	if (!data->item) {
    8fee:	6923      	ldr	r3, [r4, #16]
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d0d8      	beq.n	8fa6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8ff4:	68a0      	ldr	r0, [r4, #8]
    8ff6:	f013 fe6b 	bl	1ccd0 <net_buf_frags_len>
    8ffa:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8ffe:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    9000:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9002:	7818      	ldrb	r0, [r3, #0]
    9004:	4285      	cmp	r5, r0
    9006:	bf94      	ite	ls
    9008:	2500      	movls	r5, #0
    900a:	2501      	movhi	r5, #1
    900c:	e7cc      	b.n	8fa8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    900e:	2501      	movs	r5, #1
    9010:	e7ca      	b.n	8fa8 <read_type_cb+0x38>
    9012:	bf00      	nop
    9014:	0001cced 	.word	0x0001cced

00009018 <bt_att_connected>:
{
    9018:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    901a:	4606      	mov	r6, r0
{
    901c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    901e:	2104      	movs	r1, #4
    9020:	f856 0908 	ldr.w	r0, [r6], #-8
    9024:	f013 fe18 	bl	1cc58 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    9028:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    902c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    902e:	b91b      	cbnz	r3, 9038 <bt_att_connected+0x20>
    9030:	f105 000c 	add.w	r0, r5, #12
    9034:	f016 f97d 	bl	1f332 <z_impl_k_queue_init>
	parent->next = child;
    9038:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    903a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    903e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    9040:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    9044:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    9046:	b902      	cbnz	r2, 904a <bt_att_connected+0x32>
	list->tail = node;
    9048:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    904a:	f3bf 8f5b 	dmb	ish
    904e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    9052:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    9056:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9058:	bf58      	it	pl
    905a:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    905c:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    905e:	bf5c      	itt	pl
    9060:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9064:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    9068:	f013 ff6a 	bl	1cf40 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    906c:	f504 7084 	add.w	r0, r4, #264	; 0x108
    9070:	4902      	ldr	r1, [pc, #8]	; (907c <bt_att_connected+0x64>)
}
    9072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    9076:	f016 ba56 	b.w	1f526 <k_work_init_delayable>
    907a:	bf00      	nop
    907c:	0001d581 	.word	0x0001d581

00009080 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    9080:	898b      	ldrh	r3, [r1, #12]
{
    9082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9086:	4604      	mov	r4, r0
    9088:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    908a:	2b00      	cmp	r3, #0
    908c:	d060      	beq.n	9150 <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
    908e:	2101      	movs	r1, #1
    9090:	f105 0008 	add.w	r0, r5, #8
    9094:	f014 fed3 	bl	1de3e <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    9098:	f854 3c08 	ldr.w	r3, [r4, #-8]
    909c:	4607      	mov	r7, r0
    909e:	2b00      	cmp	r3, #0
    90a0:	d056      	beq.n	9150 <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
    90a2:	7801      	ldrb	r1, [r0, #0]
    90a4:	4a2e      	ldr	r2, [pc, #184]	; (9160 <bt_att_recv+0xe0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    90a6:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    90aa:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    90ac:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    90b0:	4288      	cmp	r0, r1
    90b2:	d11b      	bne.n	90ec <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
    90b4:	00d9      	lsls	r1, r3, #3
    90b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    90ba:	f893 8002 	ldrb.w	r8, [r3, #2]
    90be:	f1b8 0f01 	cmp.w	r8, #1
    90c2:	d023      	beq.n	910c <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
    90c4:	f1b8 0f05 	cmp.w	r8, #5
    90c8:	d131      	bne.n	912e <bt_att_recv+0xae>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    90ca:	f3bf 8f5b 	dmb	ish
    90ce:	34e8      	adds	r4, #232	; 0xe8
    90d0:	e854 3f00 	ldrex	r3, [r4]
    90d4:	f043 0002 	orr.w	r0, r3, #2
    90d8:	e844 0c00 	strex	ip, r0, [r4]
    90dc:	f1bc 0f00 	cmp.w	ip, #0
    90e0:	d1f6      	bne.n	90d0 <bt_att_recv+0x50>
    90e2:	f3bf 8f5b 	dmb	ish
    90e6:	f013 0f02 	tst.w	r3, #2
    90ea:	e01f      	b.n	912c <bt_att_recv+0xac>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    90ec:	3301      	adds	r3, #1
    90ee:	2b0d      	cmp	r3, #13
    90f0:	d1dc      	bne.n	90ac <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    90f2:	4608      	mov	r0, r1
    90f4:	f013 fe0c 	bl	1cd10 <att_op_get_type>
    90f8:	b350      	cbz	r0, 9150 <bt_att_recv+0xd0>
    90fa:	2805      	cmp	r0, #5
    90fc:	d028      	beq.n	9150 <bt_att_recv+0xd0>
	if (!req) {
    90fe:	b339      	cbz	r1, 9150 <bt_att_recv+0xd0>
    9100:	2306      	movs	r3, #6
    9102:	2200      	movs	r2, #0
    9104:	4630      	mov	r0, r6
    9106:	f014 f983 	bl	1d410 <send_err_rsp.part.0>
    910a:	e021      	b.n	9150 <bt_att_recv+0xd0>
    910c:	34e8      	adds	r4, #232	; 0xe8
    910e:	f3bf 8f5b 	dmb	ish
    9112:	e854 3f00 	ldrex	r3, [r4]
    9116:	f043 0001 	orr.w	r0, r3, #1
    911a:	e844 0c00 	strex	ip, r0, [r4]
    911e:	f1bc 0f00 	cmp.w	ip, #0
    9122:	d1f6      	bne.n	9112 <bt_att_recv+0x92>
    9124:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    9128:	f013 0f01 	tst.w	r3, #1
    912c:	d110      	bne.n	9150 <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
    912e:	440a      	add	r2, r1
    9130:	89a9      	ldrh	r1, [r5, #12]
    9132:	7853      	ldrb	r3, [r2, #1]
    9134:	4299      	cmp	r1, r3
    9136:	d30e      	bcc.n	9156 <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
    9138:	6853      	ldr	r3, [r2, #4]
    913a:	4629      	mov	r1, r5
    913c:	4630      	mov	r0, r6
    913e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    9140:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    9144:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    9146:	d103      	bne.n	9150 <bt_att_recv+0xd0>
    9148:	b110      	cbz	r0, 9150 <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
    914a:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    914c:	2900      	cmp	r1, #0
    914e:	d1d8      	bne.n	9102 <bt_att_recv+0x82>
}
    9150:	2000      	movs	r0, #0
    9152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    9156:	f1b8 0f01 	cmp.w	r8, #1
    915a:	d1f9      	bne.n	9150 <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
    915c:	2304      	movs	r3, #4
    915e:	e7f4      	b.n	914a <bt_att_recv+0xca>
    9160:	000201e4 	.word	0x000201e4

00009164 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    9164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9168:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    916a:	6803      	ldr	r3, [r0, #0]
    916c:	460e      	mov	r6, r1
    916e:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    9170:	b087      	sub	sp, #28
    9172:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9174:	bf18      	it	ne
    9176:	2101      	movne	r1, #1
    9178:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    917a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    917c:	f014 fd78 	bl	1dc70 <bt_gatt_change_aware>
    9180:	2800      	cmp	r0, #0
    9182:	d04a      	beq.n	921a <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
    9184:	2f00      	cmp	r7, #0
    9186:	d04a      	beq.n	921e <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
    9188:	2218      	movs	r2, #24
    918a:	2100      	movs	r1, #0
    918c:	4668      	mov	r0, sp
    918e:	f012 fdd7 	bl	1bd40 <memset>
	if (rsp) {
    9192:	f1b8 0f00 	cmp.w	r8, #0
    9196:	d122      	bne.n	91de <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    9198:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    919a:	4a22      	ldr	r2, [pc, #136]	; (9224 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    919c:	681b      	ldr	r3, [r3, #0]
    919e:	9300      	str	r3, [sp, #0]
	data.value = value;
    91a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    91a2:	9303      	str	r3, [sp, #12]
	data.len = len;
    91a4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    91a8:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    91ac:	2301      	movs	r3, #1
    91ae:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    91b2:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    91b6:	466b      	mov	r3, sp
    91b8:	4639      	mov	r1, r7
    91ba:	4638      	mov	r0, r7
	data.req = req;
    91bc:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    91c0:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    91c4:	f013 fdd1 	bl	1cd6a <bt_gatt_foreach_attr>
	if (data.err) {
    91c8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    91cc:	b1f4      	cbz	r4, 920c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    91ce:	f1b8 0f00 	cmp.w	r8, #0
    91d2:	d10e      	bne.n	91f2 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    91d4:	2400      	movs	r4, #0
}
    91d6:	4620      	mov	r0, r4
    91d8:	b007      	add	sp, #28
    91da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    91de:	2200      	movs	r2, #0
    91e0:	4641      	mov	r1, r8
    91e2:	4628      	mov	r0, r5
    91e4:	f014 f8ef 	bl	1d3c6 <bt_att_chan_create_pdu>
    91e8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    91ea:	2800      	cmp	r0, #0
    91ec:	d1d4      	bne.n	9198 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    91ee:	240e      	movs	r4, #14
    91f0:	e7f1      	b.n	91d6 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    91f2:	9801      	ldr	r0, [sp, #4]
    91f4:	f00d fe38 	bl	16e68 <net_buf_unref>
	if (!req) {
    91f8:	2e00      	cmp	r6, #0
    91fa:	d0eb      	beq.n	91d4 <att_write_rsp.constprop.0+0x70>
    91fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9200:	463a      	mov	r2, r7
    9202:	4631      	mov	r1, r6
    9204:	4628      	mov	r0, r5
    9206:	f014 f903 	bl	1d410 <send_err_rsp.part.0>
    920a:	e7e3      	b.n	91d4 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    920c:	9901      	ldr	r1, [sp, #4]
    920e:	2900      	cmp	r1, #0
    9210:	d0e0      	beq.n	91d4 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9212:	4628      	mov	r0, r5
    9214:	f7ff fe9a 	bl	8f4c <bt_att_chan_send_rsp.constprop.0>
    9218:	e7dd      	b.n	91d6 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    921a:	2412      	movs	r4, #18
    921c:	e7db      	b.n	91d6 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    921e:	2401      	movs	r4, #1
    9220:	e7d9      	b.n	91d6 <att_write_rsp.constprop.0+0x72>
    9222:	bf00      	nop
    9224:	0001d00f 	.word	0x0001d00f

00009228 <att_read_group_req>:
{
    9228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    922c:	898c      	ldrh	r4, [r1, #12]
    922e:	3c04      	subs	r4, #4
    9230:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9232:	2c02      	cmp	r4, #2
{
    9234:	4605      	mov	r5, r0
    9236:	b08c      	sub	sp, #48	; 0x30
    9238:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    923a:	d001      	beq.n	9240 <att_read_group_req+0x18>
    923c:	2c10      	cmp	r4, #16
    923e:	d16e      	bne.n	931e <att_read_group_req+0xf6>
    9240:	2104      	movs	r1, #4
    9242:	3008      	adds	r0, #8
    9244:	f014 fdfb 	bl	1de3e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9248:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    924c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    924e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9250:	1d01      	adds	r1, r0, #4
    9252:	4622      	mov	r2, r4
    9254:	4640      	mov	r0, r8
    9256:	f012 fe21 	bl	1be9c <bt_uuid_create>
    925a:	2800      	cmp	r0, #0
    925c:	d061      	beq.n	9322 <att_read_group_req+0xfa>
	if (!start || !end) {
    925e:	2e00      	cmp	r6, #0
    9260:	d03a      	beq.n	92d8 <att_read_group_req+0xb0>
    9262:	2400      	movs	r4, #0
    9264:	2f00      	cmp	r7, #0
    9266:	d036      	beq.n	92d6 <att_read_group_req+0xae>
	if (start > end) {
    9268:	42be      	cmp	r6, r7
    926a:	d835      	bhi.n	92d8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    926c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9270:	a901      	add	r1, sp, #4
    9272:	4640      	mov	r0, r8
    9274:	f88d 4004 	strb.w	r4, [sp, #4]
    9278:	f8ad 3006 	strh.w	r3, [sp, #6]
    927c:	f012 fde0 	bl	1be40 <bt_uuid_cmp>
    9280:	2800      	cmp	r0, #0
    9282:	d134      	bne.n	92ee <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    9284:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    9286:	2214      	movs	r2, #20
    9288:	2100      	movs	r1, #0
    928a:	a807      	add	r0, sp, #28
    928c:	f012 fd58 	bl	1bd40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9290:	2201      	movs	r2, #1
    9292:	2111      	movs	r1, #17
    9294:	4620      	mov	r0, r4
    9296:	f014 f8fe 	bl	1d496 <bt_att_create_pdu>
    929a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    929c:	2800      	cmp	r0, #0
    929e:	d040      	beq.n	9322 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    92a0:	2101      	movs	r1, #1
    92a2:	3008      	adds	r0, #8
	data.uuid = uuid;
    92a4:	e9cd 5807 	strd	r5, r8, [sp, #28]
    92a8:	f014 fda2 	bl	1ddf0 <net_buf_simple_add>
	data.rsp->len = 0U;
    92ac:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    92b0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    92b2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    92b4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    92b8:	4a1b      	ldr	r2, [pc, #108]	; (9328 <att_read_group_req+0x100>)
	data.group = NULL;
    92ba:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    92be:	4639      	mov	r1, r7
    92c0:	4630      	mov	r0, r6
    92c2:	f013 fd52 	bl	1cd6a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    92c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    92c8:	781c      	ldrb	r4, [r3, #0]
    92ca:	bb1c      	cbnz	r4, 9314 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    92cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    92ce:	f00d fdcb 	bl	16e68 <net_buf_unref>
	if (!req) {
    92d2:	230a      	movs	r3, #10
    92d4:	e018      	b.n	9308 <att_read_group_req+0xe0>
			*err = 0U;
    92d6:	463e      	mov	r6, r7
	if (!req) {
    92d8:	2301      	movs	r3, #1
    92da:	4632      	mov	r2, r6
    92dc:	2110      	movs	r1, #16
    92de:	4628      	mov	r0, r5
    92e0:	f014 f896 	bl	1d410 <send_err_rsp.part.0>
		return 0;
    92e4:	2400      	movs	r4, #0
}
    92e6:	4620      	mov	r0, r4
    92e8:	b00c      	add	sp, #48	; 0x30
    92ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    92ee:	f642 0301 	movw	r3, #10241	; 0x2801
    92f2:	a907      	add	r1, sp, #28
    92f4:	4640      	mov	r0, r8
    92f6:	f88d 401c 	strb.w	r4, [sp, #28]
    92fa:	f8ad 301e 	strh.w	r3, [sp, #30]
    92fe:	f012 fd9f 	bl	1be40 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9302:	2800      	cmp	r0, #0
    9304:	d0be      	beq.n	9284 <att_read_group_req+0x5c>
	if (!req) {
    9306:	2310      	movs	r3, #16
    9308:	4632      	mov	r2, r6
    930a:	2110      	movs	r1, #16
    930c:	4628      	mov	r0, r5
    930e:	f014 f87f 	bl	1d410 <send_err_rsp.part.0>
		return 0;
    9312:	e7e8      	b.n	92e6 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9314:	9909      	ldr	r1, [sp, #36]	; 0x24
    9316:	4628      	mov	r0, r5
    9318:	f7ff fe18 	bl	8f4c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    931c:	e7e2      	b.n	92e4 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    931e:	2404      	movs	r4, #4
    9320:	e7e1      	b.n	92e6 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    9322:	240e      	movs	r4, #14
    9324:	e7df      	b.n	92e6 <att_read_group_req+0xbe>
    9326:	bf00      	nop
    9328:	00008de5 	.word	0x00008de5

0000932c <att_read_mult_req>:
{
    932c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    9330:	6886      	ldr	r6, [r0, #8]
{
    9332:	b085      	sub	sp, #20
    9334:	4604      	mov	r4, r0
    9336:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    9338:	4630      	mov	r0, r6
    933a:	2101      	movs	r1, #1
    933c:	f014 fc98 	bl	1dc70 <bt_gatt_change_aware>
    9340:	b3b8      	cbz	r0, 93b2 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
    9342:	2210      	movs	r2, #16
    9344:	2100      	movs	r1, #0
    9346:	4668      	mov	r0, sp
    9348:	f012 fcfa 	bl	1bd40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    934c:	2200      	movs	r2, #0
    934e:	210f      	movs	r1, #15
    9350:	4630      	mov	r0, r6
    9352:	f014 f8a0 	bl	1d496 <bt_att_create_pdu>
    9356:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9358:	b368      	cbz	r0, 93b6 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    935a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 93bc <att_read_mult_req+0x90>
	data.chan = chan;
    935e:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    9360:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9364:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    9368:	89ab      	ldrh	r3, [r5, #12]
    936a:	2b01      	cmp	r3, #1
    936c:	d804      	bhi.n	9378 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    936e:	9902      	ldr	r1, [sp, #8]
    9370:	4620      	mov	r0, r4
    9372:	f7ff fdeb 	bl	8f4c <bt_att_chan_send_rsp.constprop.0>
    9376:	e018      	b.n	93aa <att_read_mult_req+0x7e>
    9378:	4638      	mov	r0, r7
    937a:	f014 fd70 	bl	1de5e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    937e:	466b      	mov	r3, sp
    9380:	464a      	mov	r2, r9
    9382:	4601      	mov	r1, r0
    9384:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9386:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    938a:	f013 fcee 	bl	1cd6a <bt_gatt_foreach_attr>
		if (data.err) {
    938e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9392:	2b00      	cmp	r3, #0
    9394:	d0e8      	beq.n	9368 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
    9396:	9802      	ldr	r0, [sp, #8]
    9398:	f00d fd66 	bl	16e68 <net_buf_unref>
	if (!req) {
    939c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    93a0:	4632      	mov	r2, r6
    93a2:	210e      	movs	r1, #14
    93a4:	4620      	mov	r0, r4
    93a6:	f014 f833 	bl	1d410 <send_err_rsp.part.0>
	return 0;
    93aa:	2000      	movs	r0, #0
}
    93ac:	b005      	add	sp, #20
    93ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    93b2:	2012      	movs	r0, #18
    93b4:	e7fa      	b.n	93ac <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
    93b6:	200e      	movs	r0, #14
    93b8:	e7f8      	b.n	93ac <att_read_mult_req+0x80>
    93ba:	bf00      	nop
    93bc:	0001d261 	.word	0x0001d261

000093c0 <att_read_rsp>:
{
    93c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    93c4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    93c8:	4605      	mov	r5, r0
    93ca:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    93cc:	4640      	mov	r0, r8
    93ce:	2101      	movs	r1, #1
{
    93d0:	4614      	mov	r4, r2
    93d2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    93d4:	f014 fc4c 	bl	1dc70 <bt_gatt_change_aware>
    93d8:	b388      	cbz	r0, 943e <att_read_rsp+0x7e>
	if (!handle) {
    93da:	b396      	cbz	r6, 9442 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    93dc:	2210      	movs	r2, #16
    93de:	2100      	movs	r1, #0
    93e0:	4668      	mov	r0, sp
    93e2:	f012 fcad 	bl	1bd40 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    93e6:	2200      	movs	r2, #0
    93e8:	4621      	mov	r1, r4
    93ea:	4640      	mov	r0, r8
    93ec:	f014 f853 	bl	1d496 <bt_att_create_pdu>
    93f0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    93f2:	b340      	cbz	r0, 9446 <att_read_rsp+0x86>
	data.offset = offset;
    93f4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    93f8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    93fc:	2301      	movs	r3, #1
    93fe:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9402:	4a12      	ldr	r2, [pc, #72]	; (944c <att_read_rsp+0x8c>)
	data.chan = chan;
    9404:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9406:	466b      	mov	r3, sp
    9408:	4631      	mov	r1, r6
    940a:	4630      	mov	r0, r6
    940c:	f013 fcad 	bl	1cd6a <bt_gatt_foreach_attr>
	if (data.err) {
    9410:	f89d 400c 	ldrb.w	r4, [sp, #12]
    9414:	b174      	cbz	r4, 9434 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    9416:	9802      	ldr	r0, [sp, #8]
    9418:	f00d fd26 	bl	16e68 <net_buf_unref>
	if (!req) {
    941c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9420:	4632      	mov	r2, r6
    9422:	4639      	mov	r1, r7
    9424:	4628      	mov	r0, r5
    9426:	f013 fff3 	bl	1d410 <send_err_rsp.part.0>
		return 0;
    942a:	2400      	movs	r4, #0
}
    942c:	4620      	mov	r0, r4
    942e:	b004      	add	sp, #16
    9430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9434:	9902      	ldr	r1, [sp, #8]
    9436:	4628      	mov	r0, r5
    9438:	f7ff fd88 	bl	8f4c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    943c:	e7f6      	b.n	942c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    943e:	2412      	movs	r4, #18
    9440:	e7f4      	b.n	942c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    9442:	2401      	movs	r4, #1
    9444:	e7f2      	b.n	942c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    9446:	240e      	movs	r4, #14
    9448:	e7f0      	b.n	942c <att_read_rsp+0x6c>
    944a:	bf00      	nop
    944c:	0001d261 	.word	0x0001d261

00009450 <att_read_type_req>:
{
    9450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9454:	898c      	ldrh	r4, [r1, #12]
    9456:	3c04      	subs	r4, #4
    9458:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    945a:	2c02      	cmp	r4, #2
{
    945c:	4605      	mov	r5, r0
    945e:	b08c      	sub	sp, #48	; 0x30
    9460:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    9462:	d001      	beq.n	9468 <att_read_type_req+0x18>
    9464:	2c10      	cmp	r4, #16
    9466:	d14f      	bne.n	9508 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    9468:	2104      	movs	r1, #4
    946a:	3008      	adds	r0, #8
    946c:	f014 fce7 	bl	1de3e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9470:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    9474:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9476:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9478:	1d01      	adds	r1, r0, #4
    947a:	4622      	mov	r2, r4
    947c:	4640      	mov	r0, r8
    947e:	f012 fd0d 	bl	1be9c <bt_uuid_create>
    9482:	b188      	cbz	r0, 94a8 <att_read_type_req+0x58>
	if (!start || !end) {
    9484:	b19e      	cbz	r6, 94ae <att_read_type_req+0x5e>
    9486:	b18f      	cbz	r7, 94ac <att_read_type_req+0x5c>
	if (start > end) {
    9488:	42b7      	cmp	r7, r6
    948a:	d310      	bcc.n	94ae <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    948c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    948e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    9490:	2100      	movs	r1, #0
    9492:	eb0d 0002 	add.w	r0, sp, r2
    9496:	f012 fc53 	bl	1bd40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    949a:	2201      	movs	r2, #1
    949c:	2109      	movs	r1, #9
    949e:	4620      	mov	r0, r4
    94a0:	f013 fff9 	bl	1d496 <bt_att_create_pdu>
    94a4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    94a6:	b968      	cbnz	r0, 94c4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    94a8:	240e      	movs	r4, #14
    94aa:	e007      	b.n	94bc <att_read_type_req+0x6c>
			*err = 0U;
    94ac:	463e      	mov	r6, r7
	if (!req) {
    94ae:	2301      	movs	r3, #1
    94b0:	4632      	mov	r2, r6
    94b2:	2108      	movs	r1, #8
    94b4:	4628      	mov	r0, r5
    94b6:	f013 ffab 	bl	1d410 <send_err_rsp.part.0>
		return 0;
    94ba:	2400      	movs	r4, #0
}
    94bc:	4620      	mov	r0, r4
    94be:	b00c      	add	sp, #48	; 0x30
    94c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    94c4:	2101      	movs	r1, #1
    94c6:	3008      	adds	r0, #8
	data.uuid = uuid;
    94c8:	e9cd 5806 	strd	r5, r8, [sp, #24]
    94cc:	f014 fc90 	bl	1ddf0 <net_buf_simple_add>
	data.rsp->len = 0U;
    94d0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    94d4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    94d6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    94d8:	4a0c      	ldr	r2, [pc, #48]	; (950c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    94da:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    94de:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    94e0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    94e4:	4630      	mov	r0, r6
    94e6:	ab06      	add	r3, sp, #24
    94e8:	f013 fc3f 	bl	1cd6a <bt_gatt_foreach_attr>
	if (data.err) {
    94ec:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    94f0:	b12c      	cbz	r4, 94fe <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    94f2:	9808      	ldr	r0, [sp, #32]
    94f4:	f00d fcb8 	bl	16e68 <net_buf_unref>
	if (!req) {
    94f8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    94fc:	e7d8      	b.n	94b0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    94fe:	9908      	ldr	r1, [sp, #32]
    9500:	4628      	mov	r0, r5
    9502:	f7ff fd23 	bl	8f4c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    9506:	e7d9      	b.n	94bc <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    9508:	2404      	movs	r4, #4
    950a:	e7d7      	b.n	94bc <att_read_type_req+0x6c>
    950c:	00008f71 	.word	0x00008f71

00009510 <att_find_type_req>:
{
    9510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9514:	4688      	mov	r8, r1
    9516:	b086      	sub	sp, #24
    9518:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    951a:	2106      	movs	r1, #6
    951c:	f108 0008 	add.w	r0, r8, #8
    9520:	f014 fc8d 	bl	1de3e <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9524:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    9526:	b317      	cbz	r7, 956e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9528:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    952c:	f1b9 0f00 	cmp.w	r9, #0
    9530:	d01c      	beq.n	956c <att_find_type_req+0x5c>
	if (start > end) {
    9532:	454f      	cmp	r7, r9
    9534:	d81b      	bhi.n	956e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    9536:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9538:	f8ad 3002 	strh.w	r3, [sp, #2]
    953c:	2400      	movs	r4, #0
    953e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9542:	a901      	add	r1, sp, #4
    9544:	4668      	mov	r0, sp
	value = buf->data;
    9546:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    954a:	f88d 4000 	strb.w	r4, [sp]
    954e:	f88d 4004 	strb.w	r4, [sp, #4]
    9552:	f8ad 3006 	strh.w	r3, [sp, #6]
    9556:	f012 fc73 	bl	1be40 <bt_uuid_cmp>
    955a:	4606      	mov	r6, r0
    955c:	b190      	cbz	r0, 9584 <att_find_type_req+0x74>
	if (!req) {
    955e:	230a      	movs	r3, #10
    9560:	463a      	mov	r2, r7
    9562:	2106      	movs	r1, #6
    9564:	4628      	mov	r0, r5
    9566:	f013 ff53 	bl	1d410 <send_err_rsp.part.0>
		return 0;
    956a:	e007      	b.n	957c <att_find_type_req+0x6c>
			*err = 0U;
    956c:	464f      	mov	r7, r9
	if (!req) {
    956e:	2301      	movs	r3, #1
    9570:	463a      	mov	r2, r7
    9572:	2106      	movs	r1, #6
    9574:	4628      	mov	r0, r5
    9576:	f013 ff4b 	bl	1d410 <send_err_rsp.part.0>
		return 0;
    957a:	2400      	movs	r4, #0
}
    957c:	4620      	mov	r0, r4
    957e:	b006      	add	sp, #24
    9580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    9584:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    9588:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    958c:	4601      	mov	r1, r0
    958e:	2214      	movs	r2, #20
    9590:	a801      	add	r0, sp, #4
    9592:	f012 fbd5 	bl	1bd40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9596:	4632      	mov	r2, r6
    9598:	2107      	movs	r1, #7
    959a:	4640      	mov	r0, r8
    959c:	f013 ff7b 	bl	1d496 <bt_att_create_pdu>
    95a0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    95a2:	b1d8      	cbz	r0, 95dc <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    95a4:	230a      	movs	r3, #10
    95a6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    95aa:	4a0d      	ldr	r2, [pc, #52]	; (95e0 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    95ac:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    95b0:	ab01      	add	r3, sp, #4
    95b2:	4649      	mov	r1, r9
    95b4:	4638      	mov	r0, r7
	data.value = value;
    95b6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    95ba:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    95bc:	f013 fbd5 	bl	1cd6a <bt_gatt_foreach_attr>
	if (data.err) {
    95c0:	f89d 4015 	ldrb.w	r4, [sp, #21]
    95c4:	b12c      	cbz	r4, 95d2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    95c6:	9802      	ldr	r0, [sp, #8]
    95c8:	f00d fc4e 	bl	16e68 <net_buf_unref>
	if (!req) {
    95cc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    95d0:	e7ce      	b.n	9570 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    95d2:	9902      	ldr	r1, [sp, #8]
    95d4:	4628      	mov	r0, r5
    95d6:	f7ff fcb9 	bl	8f4c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    95da:	e7cf      	b.n	957c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    95dc:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    95de:	e7cd      	b.n	957c <att_find_type_req+0x6c>
    95e0:	0001cd81 	.word	0x0001cd81

000095e4 <att_find_info_req>:
{
    95e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    95e6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    95e8:	881e      	ldrh	r6, [r3, #0]
{
    95ea:	b085      	sub	sp, #20
    95ec:	4605      	mov	r5, r0
	if (!start || !end) {
    95ee:	b19e      	cbz	r6, 9618 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    95f0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    95f2:	b184      	cbz	r4, 9616 <att_find_info_req+0x32>
	if (start > end) {
    95f4:	42b4      	cmp	r4, r6
    95f6:	d30f      	bcc.n	9618 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    95f8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    95fa:	2210      	movs	r2, #16
    95fc:	2100      	movs	r1, #0
    95fe:	4668      	mov	r0, sp
    9600:	f012 fb9e 	bl	1bd40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9604:	2200      	movs	r2, #0
    9606:	2105      	movs	r1, #5
    9608:	4638      	mov	r0, r7
    960a:	f013 ff44 	bl	1d496 <bt_att_create_pdu>
    960e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9610:	b958      	cbnz	r0, 962a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9612:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    9614:	e007      	b.n	9626 <att_find_info_req+0x42>
			*err = 0U;
    9616:	4626      	mov	r6, r4
	if (!req) {
    9618:	2301      	movs	r3, #1
    961a:	4632      	mov	r2, r6
    961c:	2104      	movs	r1, #4
    961e:	4628      	mov	r0, r5
    9620:	f013 fef6 	bl	1d410 <send_err_rsp.part.0>
	return 0;
    9624:	2000      	movs	r0, #0
}
    9626:	b005      	add	sp, #20
    9628:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    962a:	4621      	mov	r1, r4
    962c:	4a08      	ldr	r2, [pc, #32]	; (9650 <att_find_info_req+0x6c>)
	data.chan = chan;
    962e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9630:	466b      	mov	r3, sp
    9632:	4630      	mov	r0, r6
    9634:	f013 fb99 	bl	1cd6a <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9638:	9c02      	ldr	r4, [sp, #8]
    963a:	b924      	cbnz	r4, 9646 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    963c:	9801      	ldr	r0, [sp, #4]
    963e:	f00d fc13 	bl	16e68 <net_buf_unref>
	if (!req) {
    9642:	230a      	movs	r3, #10
    9644:	e7e9      	b.n	961a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9646:	9901      	ldr	r1, [sp, #4]
    9648:	4628      	mov	r0, r5
    964a:	f7ff fc7f 	bl	8f4c <bt_att_chan_send_rsp.constprop.0>
    964e:	e7e9      	b.n	9624 <att_find_info_req+0x40>
    9650:	0001cea9 	.word	0x0001cea9

00009654 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    9654:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    9656:	2300      	movs	r3, #0
{
    9658:	4605      	mov	r5, r0
    965a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    965c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    965e:	f011 fa33 	bl	1aac8 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
    9662:	4b0b      	ldr	r3, [pc, #44]	; (9690 <bt_att_req_alloc+0x3c>)
    9664:	681b      	ldr	r3, [r3, #0]
    9666:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    9668:	bf04      	itt	eq
    966a:	2500      	moveq	r5, #0
    966c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    966e:	a901      	add	r1, sp, #4
    9670:	4808      	ldr	r0, [pc, #32]	; (9694 <bt_att_req_alloc+0x40>)
    9672:	462a      	mov	r2, r5
    9674:	4623      	mov	r3, r4
    9676:	f010 fc39 	bl	19eec <k_mem_slab_alloc>
    967a:	4601      	mov	r1, r0
    967c:	b930      	cbnz	r0, 968c <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    967e:	9801      	ldr	r0, [sp, #4]
    9680:	2210      	movs	r2, #16
    9682:	f012 fb5d 	bl	1bd40 <memset>

	return req;
    9686:	9801      	ldr	r0, [sp, #4]
}
    9688:	b003      	add	sp, #12
    968a:	bd30      	pop	{r4, r5, pc}
		return NULL;
    968c:	2000      	movs	r0, #0
    968e:	e7fb      	b.n	9688 <bt_att_req_alloc+0x34>
    9690:	200017d0 	.word	0x200017d0
    9694:	200009f4 	.word	0x200009f4

00009698 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    9698:	b507      	push	{r0, r1, r2, lr}
    969a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    969c:	6880      	ldr	r0, [r0, #8]
    969e:	b120      	cbz	r0, 96aa <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    96a0:	f00d fbe2 	bl	16e68 <net_buf_unref>
		req->buf = NULL;
    96a4:	9b01      	ldr	r3, [sp, #4]
    96a6:	2200      	movs	r2, #0
    96a8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    96aa:	4803      	ldr	r0, [pc, #12]	; (96b8 <bt_att_req_free+0x20>)
    96ac:	a901      	add	r1, sp, #4
    96ae:	f015 fd95 	bl	1f1dc <k_mem_slab_free>
}
    96b2:	b003      	add	sp, #12
    96b4:	f85d fb04 	ldr.w	pc, [sp], #4
    96b8:	200009f4 	.word	0x200009f4

000096bc <att_handle_rsp>:
{
    96bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    96c0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    96c2:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    96c6:	4688      	mov	r8, r1
    96c8:	4691      	mov	r9, r2
    96ca:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
    96cc:	f015 ff37 	bl	1f53e <k_work_cancel_delayable>
	if (!chan->req) {
    96d0:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    96d4:	2600      	movs	r6, #0
    96d6:	b1f0      	cbz	r0, 9716 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
    96d8:	4b10      	ldr	r3, [pc, #64]	; (971c <att_handle_rsp+0x60>)
    96da:	4298      	cmp	r0, r3
    96dc:	d112      	bne.n	9704 <att_handle_rsp+0x48>
		chan->req = NULL;
    96de:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    96e2:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
    96e4:	6820      	ldr	r0, [r4, #0]
    96e6:	f013 fe22 	bl	1d32e <att_req_send_process>
	if (func) {
    96ea:	b13d      	cbz	r5, 96fc <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
    96ec:	6820      	ldr	r0, [r4, #0]
    96ee:	f8cd a000 	str.w	sl, [sp]
    96f2:	6800      	ldr	r0, [r0, #0]
    96f4:	464b      	mov	r3, r9
    96f6:	4642      	mov	r2, r8
    96f8:	4639      	mov	r1, r7
    96fa:	47a8      	blx	r5
}
    96fc:	2000      	movs	r0, #0
    96fe:	b002      	add	sp, #8
    9700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
    9704:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    9706:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    9708:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    970c:	f7ff ffc4 	bl	9698 <bt_att_req_free>
	chan->req = NULL;
    9710:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
    9714:	e7e6      	b.n	96e4 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
    9716:	4605      	mov	r5, r0
    9718:	e7e4      	b.n	96e4 <att_handle_rsp+0x28>
    971a:	bf00      	nop
    971c:	20001830 	.word	0x20001830

00009720 <bt_att_disconnected>:
{
    9720:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    9722:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    9726:	b085      	sub	sp, #20
    9728:	4604      	mov	r4, r0
	if (!att_chan->att) {
    972a:	2d00      	cmp	r5, #0
    972c:	d04d      	beq.n	97ca <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    972e:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    9732:	f105 0024 	add.w	r0, r5, #36	; 0x24
    9736:	f013 fd5d 	bl	1d1f4 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    973a:	f1a4 0608 	sub.w	r6, r4, #8
    973e:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    9742:	2200      	movs	r2, #0
    9744:	2300      	movs	r3, #0
    9746:	4638      	mov	r0, r7
    9748:	f014 faf5 	bl	1dd36 <net_buf_get>
    974c:	4602      	mov	r2, r0
    974e:	bb18      	cbnz	r0, 9798 <bt_att_disconnected+0x78>
	if (chan->req) {
    9750:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    9754:	b123      	cbz	r3, 9760 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    9756:	4601      	mov	r1, r0
    9758:	230e      	movs	r3, #14
    975a:	4630      	mov	r0, r6
    975c:	f7ff ffae 	bl	96bc <att_handle_rsp>
	chan->att = NULL;
    9760:	2300      	movs	r3, #0
    9762:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    9766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9768:	2b00      	cmp	r3, #0
    976a:	d12e      	bne.n	97ca <bt_att_disconnected+0xaa>
	att_reset(att);
    976c:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    976e:	9803      	ldr	r0, [sp, #12]
    9770:	2200      	movs	r2, #0
    9772:	2300      	movs	r3, #0
    9774:	300c      	adds	r0, #12
    9776:	f014 fade 	bl	1dd36 <net_buf_get>
    977a:	b980      	cbnz	r0, 979e <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
    977c:	9803      	ldr	r0, [sp, #12]
	return list->head;
    977e:	6845      	ldr	r5, [r0, #4]
    9780:	b985      	cbnz	r5, 97a4 <bt_att_disconnected+0x84>
	att->conn = NULL;
    9782:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    9784:	a903      	add	r1, sp, #12
    9786:	4812      	ldr	r0, [pc, #72]	; (97d0 <bt_att_disconnected+0xb0>)
    9788:	f015 fd28 	bl	1f1dc <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    978c:	6820      	ldr	r0, [r4, #0]
}
    978e:	b005      	add	sp, #20
    9790:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    9794:	f000 bbf4 	b.w	9f80 <bt_gatt_disconnected>
		net_buf_unref(buf);
    9798:	f00d fb66 	bl	16e68 <net_buf_unref>
    979c:	e7d1      	b.n	9742 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    979e:	f00d fb63 	bl	16e68 <net_buf_unref>
    97a2:	e7e4      	b.n	976e <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    97a4:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
    97a6:	686e      	ldr	r6, [r5, #4]
	return node->next;
    97a8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    97aa:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    97ac:	4295      	cmp	r5, r2
	list->tail = node;
    97ae:	bf08      	it	eq
    97b0:	6083      	streq	r3, [r0, #8]
    97b2:	b136      	cbz	r6, 97c2 <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    97b4:	68eb      	ldr	r3, [r5, #12]
    97b6:	9300      	str	r3, [sp, #0]
    97b8:	2300      	movs	r3, #0
    97ba:	6800      	ldr	r0, [r0, #0]
    97bc:	461a      	mov	r2, r3
    97be:	210e      	movs	r1, #14
    97c0:	47b0      	blx	r6
		bt_att_req_free(req);
    97c2:	4628      	mov	r0, r5
    97c4:	f7ff ff68 	bl	9698 <bt_att_req_free>
    97c8:	e7d8      	b.n	977c <bt_att_disconnected+0x5c>
}
    97ca:	b005      	add	sp, #20
    97cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97ce:	bf00      	nop
    97d0:	200009bc 	.word	0x200009bc

000097d4 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    97d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    97d6:	4d0d      	ldr	r5, [pc, #52]	; (980c <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    97d8:	4604      	mov	r4, r0
    97da:	b968      	cbnz	r0, 97f8 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    97dc:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    97de:	2207      	movs	r2, #7
    97e0:	f8cd 0003 	str.w	r0, [sp, #3]
    97e4:	4669      	mov	r1, sp
    97e6:	1c68      	adds	r0, r5, #1
    97e8:	f012 fa8e 	bl	1bd08 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    97ec:	2800      	cmp	r0, #0
    97ee:	bf08      	it	eq
    97f0:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
    97f2:	4620      	mov	r0, r4
    97f4:	b003      	add	sp, #12
    97f6:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    97f8:	462a      	mov	r2, r5
    97fa:	f812 1b01 	ldrb.w	r1, [r2], #1
    97fe:	f013 f8e8 	bl	1c9d2 <bt_conn_is_peer_addr_le>
	return NULL;
    9802:	2800      	cmp	r0, #0
    9804:	bf14      	ite	ne
    9806:	462c      	movne	r4, r5
    9808:	2400      	moveq	r4, #0
    980a:	e7f2      	b.n	97f2 <find_cf_cfg+0x1e>
    980c:	20001848 	.word	0x20001848

00009810 <find_sc_cfg>:
{
    9810:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    9812:	4c06      	ldr	r4, [pc, #24]	; (982c <find_sc_cfg+0x1c>)
    9814:	7823      	ldrb	r3, [r4, #0]
    9816:	4283      	cmp	r3, r0
    9818:	d104      	bne.n	9824 <find_sc_cfg+0x14>
    981a:	2207      	movs	r2, #7
    981c:	1c60      	adds	r0, r4, #1
    981e:	f012 fa73 	bl	1bd08 <memcmp>
    9822:	b108      	cbz	r0, 9828 <find_sc_cfg+0x18>
	return NULL;
    9824:	2000      	movs	r0, #0
}
    9826:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    9828:	4620      	mov	r0, r4
    982a:	e7fc      	b.n	9826 <find_sc_cfg+0x16>
    982c:	20002d48 	.word	0x20002d48

00009830 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    9830:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9834:	4b23      	ldr	r3, [pc, #140]	; (98c4 <disconnected_cb+0x94>)
{
    9836:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9838:	6882      	ldr	r2, [r0, #8]
    983a:	429a      	cmp	r2, r3
{
    983c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    983e:	d102      	bne.n	9846 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    9840:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    9842:	8963      	ldrh	r3, [r4, #10]
    9844:	bb03      	cbnz	r3, 9888 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    9846:	2001      	movs	r0, #1
    9848:	b002      	add	sp, #8
    984a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    984e:	f105 0888 	add.w	r8, r5, #136	; 0x88
    9852:	7a28      	ldrb	r0, [r5, #8]
    9854:	4641      	mov	r1, r8
    9856:	f012 fde4 	bl	1c422 <bt_addr_le_is_bonded>
    985a:	b980      	cbnz	r0, 987e <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
    985c:	4b1a      	ldr	r3, [pc, #104]	; (98c8 <disconnected_cb+0x98>)
    985e:	429c      	cmp	r4, r3
    9860:	d102      	bne.n	9868 <disconnected_cb+0x38>
					sc_clear(conn);
    9862:	4628      	mov	r0, r5
    9864:	f014 f914 	bl	1da90 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    9868:	2500      	movs	r5, #0
    986a:	4669      	mov	r1, sp
    986c:	4630      	mov	r0, r6
    986e:	9500      	str	r5, [sp, #0]
    9870:	f8cd 5003 	str.w	r5, [sp, #3]
    9874:	f013 ff5a 	bl	1d72c <bt_addr_le_copy>
	cfg->id = 0U;
    9878:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    987a:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
    987c:	e019      	b.n	98b2 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    987e:	4641      	mov	r1, r8
    9880:	4630      	mov	r0, r6
    9882:	f013 ff53 	bl	1d72c <bt_addr_le_copy>
	if (!value_used) {
    9886:	e014      	b.n	98b2 <disconnected_cb+0x82>
		if (!cfg->value) {
    9888:	8923      	ldrh	r3, [r4, #8]
    988a:	b193      	cbz	r3, 98b2 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    988c:	4626      	mov	r6, r4
    988e:	4628      	mov	r0, r5
    9890:	f816 1b01 	ldrb.w	r1, [r6], #1
    9894:	4632      	mov	r2, r6
    9896:	f013 f89c 	bl	1c9d2 <bt_conn_is_peer_addr_le>
    989a:	2800      	cmp	r0, #0
    989c:	d1d7      	bne.n	984e <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    989e:	7820      	ldrb	r0, [r4, #0]
    98a0:	4631      	mov	r1, r6
    98a2:	f7ff f87d 	bl	89a0 <bt_conn_lookup_addr_le>
			if (tmp) {
    98a6:	b120      	cbz	r0, 98b2 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    98a8:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    98aa:	f013 f884 	bl	1c9b6 <bt_conn_unref>
	if (!value_used) {
    98ae:	2d07      	cmp	r5, #7
    98b0:	d0c9      	beq.n	9846 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    98b2:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    98b4:	2100      	movs	r1, #0
    98b6:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    98b8:	2b00      	cmp	r3, #0
    98ba:	d0c4      	beq.n	9846 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    98bc:	4638      	mov	r0, r7
    98be:	4798      	blx	r3
    98c0:	e7c1      	b.n	9846 <disconnected_cb+0x16>
    98c2:	bf00      	nop
    98c4:	0001d957 	.word	0x0001d957
    98c8:	2000030c 	.word	0x2000030c

000098cc <sc_indicate_rsp>:
{
    98cc:	b510      	push	{r4, lr}
    98ce:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    98d0:	4814      	ldr	r0, [pc, #80]	; (9924 <sc_indicate_rsp+0x58>)
    98d2:	f3bf 8f5b 	dmb	ish
    98d6:	f100 0350 	add.w	r3, r0, #80	; 0x50
    98da:	e853 2f00 	ldrex	r2, [r3]
    98de:	f022 0202 	bic.w	r2, r2, #2
    98e2:	e843 2100 	strex	r1, r2, [r3]
    98e6:	2900      	cmp	r1, #0
    98e8:	d1f7      	bne.n	98da <sc_indicate_rsp+0xe>
    98ea:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    98ee:	f3bf 8f5b 	dmb	ish
    98f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
    98f4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    98f8:	07da      	lsls	r2, r3, #31
    98fa:	d504      	bpl.n	9906 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
    98fc:	2200      	movs	r2, #0
    98fe:	2300      	movs	r3, #0
    9900:	3020      	adds	r0, #32
    9902:	f010 fe33 	bl	1a56c <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    9906:	4620      	mov	r0, r4
    9908:	f7ff ff64 	bl	97d4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    990c:	b140      	cbz	r0, 9920 <sc_indicate_rsp+0x54>
    990e:	7a03      	ldrb	r3, [r0, #8]
    9910:	07db      	lsls	r3, r3, #31
    9912:	d505      	bpl.n	9920 <sc_indicate_rsp+0x54>
}
    9914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9918:	2100      	movs	r1, #0
    991a:	300c      	adds	r0, #12
    991c:	f013 bf26 	b.w	1d76c <atomic_set_bit>
}
    9920:	bd10      	pop	{r4, pc}
    9922:	bf00      	nop
    9924:	20001068 	.word	0x20001068

00009928 <bt_gatt_init>:
{
    9928:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    992a:	4b20      	ldr	r3, [pc, #128]	; (99ac <bt_gatt_init+0x84>)
    992c:	f3bf 8f5b 	dmb	ish
    9930:	2201      	movs	r2, #1
    9932:	e853 1f00 	ldrex	r1, [r3]
    9936:	2900      	cmp	r1, #0
    9938:	d103      	bne.n	9942 <bt_gatt_init+0x1a>
    993a:	e843 2000 	strex	r0, r2, [r3]
    993e:	2800      	cmp	r0, #0
    9940:	d1f7      	bne.n	9932 <bt_gatt_init+0xa>
    9942:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    9946:	d130      	bne.n	99aa <bt_gatt_init+0x82>
    9948:	f3bf 8f5b 	dmb	ish
    994c:	4b18      	ldr	r3, [pc, #96]	; (99b0 <bt_gatt_init+0x88>)
    994e:	e853 1f00 	ldrex	r1, [r3]
    9952:	2900      	cmp	r1, #0
    9954:	d103      	bne.n	995e <bt_gatt_init+0x36>
    9956:	e843 2000 	strex	r0, r2, [r3]
    995a:	2800      	cmp	r0, #0
    995c:	d1f7      	bne.n	994e <bt_gatt_init+0x26>
    995e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    9962:	d108      	bne.n	9976 <bt_gatt_init+0x4e>
    9964:	4913      	ldr	r1, [pc, #76]	; (99b4 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9966:	4a14      	ldr	r2, [pc, #80]	; (99b8 <bt_gatt_init+0x90>)
    9968:	880b      	ldrh	r3, [r1, #0]
    996a:	4c14      	ldr	r4, [pc, #80]	; (99bc <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    996c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    996e:	42a2      	cmp	r2, r4
    9970:	d315      	bcc.n	999e <bt_gatt_init+0x76>
    9972:	b100      	cbz	r0, 9976 <bt_gatt_init+0x4e>
    9974:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    9976:	4b12      	ldr	r3, [pc, #72]	; (99c0 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    9978:	4912      	ldr	r1, [pc, #72]	; (99c4 <bt_gatt_init+0x9c>)
    997a:	4813      	ldr	r0, [pc, #76]	; (99c8 <bt_gatt_init+0xa0>)
    997c:	2200      	movs	r2, #0
	list->tail = NULL;
    997e:	e9c3 2200 	strd	r2, r2, [r3]
    9982:	f015 fdd0 	bl	1f526 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    9986:	4810      	ldr	r0, [pc, #64]	; (99c8 <bt_gatt_init+0xa0>)
    9988:	f44f 72a4 	mov.w	r2, #328	; 0x148
    998c:	2300      	movs	r3, #0
    998e:	f010 fdb9 	bl	1a504 <k_work_schedule>
}
    9992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    9996:	490d      	ldr	r1, [pc, #52]	; (99cc <bt_gatt_init+0xa4>)
    9998:	480d      	ldr	r0, [pc, #52]	; (99d0 <bt_gatt_init+0xa8>)
    999a:	f015 bdc4 	b.w	1f526 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    999e:	6850      	ldr	r0, [r2, #4]
    99a0:	4403      	add	r3, r0
    99a2:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    99a4:	3208      	adds	r2, #8
    99a6:	2001      	movs	r0, #1
    99a8:	e7e1      	b.n	996e <bt_gatt_init+0x46>
}
    99aa:	bd10      	pop	{r4, pc}
    99ac:	20001858 	.word	0x20001858
    99b0:	20001874 	.word	0x20001874
    99b4:	20002d46 	.word	0x20002d46
    99b8:	0001ff34 	.word	0x0001ff34
    99bc:	0001ff44 	.word	0x0001ff44
    99c0:	20001840 	.word	0x20001840
    99c4:	0001dbc1 	.word	0x0001dbc1
    99c8:	20001010 	.word	0x20001010
    99cc:	00009ce5 	.word	0x00009ce5
    99d0:	20001088 	.word	0x20001088

000099d4 <bt_gatt_attr_get_handle>:
{
    99d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    99d8:	4603      	mov	r3, r0
    99da:	b148      	cbz	r0, 99f0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    99dc:	8a00      	ldrh	r0, [r0, #16]
    99de:	b938      	cbnz	r0, 99f0 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    99e0:	4912      	ldr	r1, [pc, #72]	; (9a2c <bt_gatt_attr_get_handle+0x58>)
    99e2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 9a30 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    99e6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    99e8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    99ec:	4571      	cmp	r1, lr
    99ee:	d301      	bcc.n	99f4 <bt_gatt_attr_get_handle+0x20>
}
    99f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    99f4:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    99f8:	42bb      	cmp	r3, r7
    99fa:	d304      	bcc.n	9a06 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    99fc:	fb0c 7206 	mla	r2, ip, r6, r7
    9a00:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    9a02:	4293      	cmp	r3, r2
    9a04:	d90e      	bls.n	9a24 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    9a06:	19a2      	adds	r2, r4, r6
    9a08:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9a0a:	3108      	adds	r1, #8
    9a0c:	4614      	mov	r4, r2
    9a0e:	e7ed      	b.n	99ec <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    9a10:	fb0c 7805 	mla	r8, ip, r5, r7
    9a14:	4543      	cmp	r3, r8
    9a16:	d007      	beq.n	9a28 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    9a18:	3501      	adds	r5, #1
    9a1a:	1962      	adds	r2, r4, r5
    9a1c:	42b5      	cmp	r5, r6
    9a1e:	b292      	uxth	r2, r2
    9a20:	d1f6      	bne.n	9a10 <bt_gatt_attr_get_handle+0x3c>
    9a22:	e7f2      	b.n	9a0a <bt_gatt_attr_get_handle+0x36>
    9a24:	2500      	movs	r5, #0
    9a26:	e7f8      	b.n	9a1a <bt_gatt_attr_get_handle+0x46>
    9a28:	4610      	mov	r0, r2
    9a2a:	e7e1      	b.n	99f0 <bt_gatt_attr_get_handle+0x1c>
    9a2c:	0001ff34 	.word	0x0001ff34
    9a30:	0001ff44 	.word	0x0001ff44

00009a34 <bt_gatt_foreach_attr_type>:
{
    9a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a38:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    9a3c:	9100      	str	r1, [sp, #0]
    9a3e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    9a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9a44:	2d00      	cmp	r5, #0
    9a46:	bf08      	it	eq
    9a48:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    9a4a:	4b24      	ldr	r3, [pc, #144]	; (9adc <bt_gatt_foreach_attr_type+0xa8>)
    9a4c:	881b      	ldrh	r3, [r3, #0]
    9a4e:	4283      	cmp	r3, r0
{
    9a50:	4607      	mov	r7, r0
    9a52:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    9a54:	d23c      	bcs.n	9ad0 <bt_gatt_foreach_attr_type+0x9c>
}
    9a56:	b003      	add	sp, #12
    9a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    9a5c:	6873      	ldr	r3, [r6, #4]
    9a5e:	4423      	add	r3, r4
    9a60:	42bb      	cmp	r3, r7
    9a62:	d232      	bcs.n	9aca <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    9a64:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9a66:	3608      	adds	r6, #8
    9a68:	4b1d      	ldr	r3, [pc, #116]	; (9ae0 <bt_gatt_foreach_attr_type+0xac>)
    9a6a:	429e      	cmp	r6, r3
    9a6c:	d3f6      	bcc.n	9a5c <bt_gatt_foreach_attr_type+0x28>
    9a6e:	e7f2      	b.n	9a56 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9a70:	5889      	ldr	r1, [r1, r2]
    9a72:	9301      	str	r3, [sp, #4]
    9a74:	4640      	mov	r0, r8
    9a76:	f012 f9e3 	bl	1be40 <bt_uuid_cmp>
    9a7a:	9b01      	ldr	r3, [sp, #4]
    9a7c:	b190      	cbz	r0, 9aa4 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    9a7e:	3401      	adds	r4, #1
    9a80:	f10a 0a01 	add.w	sl, sl, #1
    9a84:	b2a4      	uxth	r4, r4
    9a86:	6873      	ldr	r3, [r6, #4]
    9a88:	4553      	cmp	r3, sl
    9a8a:	d9ec      	bls.n	9a66 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    9a8c:	9b00      	ldr	r3, [sp, #0]
    9a8e:	429c      	cmp	r4, r3
    9a90:	d8e1      	bhi.n	9a56 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    9a92:	42bc      	cmp	r4, r7
    9a94:	d3f3      	bcc.n	9a7e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9a96:	6831      	ldr	r1, [r6, #0]
    9a98:	fb0b f20a 	mul.w	r2, fp, sl
    9a9c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9a9e:	f1b8 0f00 	cmp.w	r8, #0
    9aa2:	d1e5      	bne.n	9a70 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    9aa4:	f1b9 0f00 	cmp.w	r9, #0
    9aa8:	d10b      	bne.n	9ac2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    9aaa:	3d01      	subs	r5, #1
    9aac:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    9aae:	4618      	mov	r0, r3
    9ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ab4:	4621      	mov	r1, r4
    9ab6:	4798      	blx	r3
	if (!*num_matches) {
    9ab8:	2d00      	cmp	r5, #0
    9aba:	d0cc      	beq.n	9a56 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9abc:	2800      	cmp	r0, #0
    9abe:	d1de      	bne.n	9a7e <bt_gatt_foreach_attr_type+0x4a>
    9ac0:	e7c9      	b.n	9a56 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    9ac2:	68da      	ldr	r2, [r3, #12]
    9ac4:	4591      	cmp	r9, r2
    9ac6:	d1da      	bne.n	9a7e <bt_gatt_foreach_attr_type+0x4a>
    9ac8:	e7ef      	b.n	9aaa <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    9aca:	f04f 0a00 	mov.w	sl, #0
    9ace:	e7da      	b.n	9a86 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9ad0:	4e04      	ldr	r6, [pc, #16]	; (9ae4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    9ad2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9ad4:	f04f 0b14 	mov.w	fp, #20
    9ad8:	e7c6      	b.n	9a68 <bt_gatt_foreach_attr_type+0x34>
    9ada:	bf00      	nop
    9adc:	20002d46 	.word	0x20002d46
    9ae0:	0001ff44 	.word	0x0001ff44
    9ae4:	0001ff34 	.word	0x0001ff34

00009ae8 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    9ae8:	b510      	push	{r4, lr}
    9aea:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    9aec:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9aee:	aa1c      	add	r2, sp, #112	; 0x70
    9af0:	4669      	mov	r1, sp
    9af2:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    9af4:	e9cd 3300 	strd	r3, r3, [sp]
    9af8:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9afc:	f012 f802 	bl	1bb04 <tc_cmac_setup>
    9b00:	b320      	cbz	r0, 9b4c <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    9b02:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9b06:	2001      	movs	r0, #1
    9b08:	4a11      	ldr	r2, [pc, #68]	; (9b50 <db_hash_gen.constprop.0+0x68>)
    9b0a:	ab04      	add	r3, sp, #16
    9b0c:	f014 f84d 	bl	1dbaa <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    9b10:	4810      	ldr	r0, [pc, #64]	; (9b54 <db_hash_gen.constprop.0+0x6c>)
    9b12:	a904      	add	r1, sp, #16
    9b14:	f012 f88c 	bl	1bc30 <tc_cmac_final>
    9b18:	b1c0      	cbz	r0, 9b4c <db_hash_gen.constprop.0+0x64>
    9b1a:	4b0e      	ldr	r3, [pc, #56]	; (9b54 <db_hash_gen.constprop.0+0x6c>)
    9b1c:	2208      	movs	r2, #8
    9b1e:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    9b22:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    9b24:	780c      	ldrb	r4, [r1, #0]
    9b26:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    9b2a:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    9b2c:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    9b30:	d1f7      	bne.n	9b22 <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9b32:	f3bf 8f5b 	dmb	ish
    9b36:	4b08      	ldr	r3, [pc, #32]	; (9b58 <db_hash_gen.constprop.0+0x70>)
    9b38:	e853 2f00 	ldrex	r2, [r3]
    9b3c:	f042 0204 	orr.w	r2, r2, #4
    9b40:	e843 2100 	strex	r1, r2, [r3]
    9b44:	2900      	cmp	r1, #0
    9b46:	d1f7      	bne.n	9b38 <db_hash_gen.constprop.0+0x50>
    9b48:	f3bf 8f5b 	dmb	ish
}
    9b4c:	b048      	add	sp, #288	; 0x120
    9b4e:	bd10      	pop	{r4, pc}
    9b50:	0001d683 	.word	0x0001d683
    9b54:	20001000 	.word	0x20001000
    9b58:	200010b8 	.word	0x200010b8

00009b5c <gatt_indicate>:
{
    9b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b60:	4615      	mov	r5, r2
    9b62:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    9b64:	2214      	movs	r2, #20
    9b66:	6869      	ldr	r1, [r5, #4]
{
    9b68:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    9b6a:	f014 f82b 	bl	1dbc4 <bt_gatt_check_perm>
    9b6e:	2800      	cmp	r0, #0
    9b70:	d139      	bne.n	9be6 <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9b72:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9b76:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    9b78:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9b7a:	f7ff fd6b 	bl	9654 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    9b7e:	3602      	adds	r6, #2
	if (!req) {
    9b80:	4604      	mov	r4, r0
    9b82:	b920      	cbnz	r0, 9b8e <gatt_indicate+0x32>
		return -ENOMEM;
    9b84:	f06f 050b 	mvn.w	r5, #11
}
    9b88:	4628      	mov	r0, r5
    9b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
    9b8e:	4b17      	ldr	r3, [pc, #92]	; (9bec <gatt_indicate+0x90>)
    9b90:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    9b92:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    9b94:	4632      	mov	r2, r6
    9b96:	211d      	movs	r1, #29
    9b98:	4640      	mov	r0, r8
    9b9a:	f013 fc7c 	bl	1d496 <bt_att_create_pdu>
	if (!buf) {
    9b9e:	4606      	mov	r6, r0
    9ba0:	b918      	cbnz	r0, 9baa <gatt_indicate+0x4e>
		bt_att_req_free(req);
    9ba2:	4620      	mov	r0, r4
    9ba4:	f7ff fd78 	bl	9698 <bt_att_req_free>
    9ba8:	e7ec      	b.n	9b84 <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
    9baa:	f100 0a08 	add.w	sl, r0, #8
    9bae:	2102      	movs	r1, #2
    9bb0:	4650      	mov	r0, sl
    9bb2:	f014 f91d 	bl	1ddf0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    9bb6:	4607      	mov	r7, r0
    9bb8:	8aa9      	ldrh	r1, [r5, #20]
    9bba:	f827 9b02 	strh.w	r9, [r7], #2
    9bbe:	4650      	mov	r0, sl
    9bc0:	f014 f916 	bl	1ddf0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    9bc4:	8aaa      	ldrh	r2, [r5, #20]
    9bc6:	6929      	ldr	r1, [r5, #16]
    9bc8:	4638      	mov	r0, r7
    9bca:	f012 f8ae 	bl	1bd2a <memcpy>
	req->buf = buf;
    9bce:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    9bd0:	4621      	mov	r1, r4
    9bd2:	4640      	mov	r0, r8
    9bd4:	f013 fd1f 	bl	1d616 <bt_att_req_send>
	if (err) {
    9bd8:	4605      	mov	r5, r0
    9bda:	2800      	cmp	r0, #0
    9bdc:	d0d4      	beq.n	9b88 <gatt_indicate+0x2c>
		bt_att_req_free(req);
    9bde:	4620      	mov	r0, r4
    9be0:	f7ff fd5a 	bl	9698 <bt_att_req_free>
    9be4:	e7d0      	b.n	9b88 <gatt_indicate+0x2c>
		return -EPERM;
    9be6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    9bea:	e7cd      	b.n	9b88 <gatt_indicate+0x2c>
    9bec:	0001d655 	.word	0x0001d655

00009bf0 <bt_gatt_indicate>:
{
    9bf0:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9bf2:	4b39      	ldr	r3, [pc, #228]	; (9cd8 <bt_gatt_indicate+0xe8>)
    9bf4:	f3bf 8f5b 	dmb	ish
    9bf8:	681b      	ldr	r3, [r3, #0]
    9bfa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9bfe:	079a      	lsls	r2, r3, #30
{
    9c00:	b08b      	sub	sp, #44	; 0x2c
    9c02:	4604      	mov	r4, r0
    9c04:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9c06:	d561      	bpl.n	9ccc <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    9c08:	b110      	cbz	r0, 9c10 <bt_gatt_indicate+0x20>
    9c0a:	7a83      	ldrb	r3, [r0, #10]
    9c0c:	2b07      	cmp	r3, #7
    9c0e:	d160      	bne.n	9cd2 <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
    9c10:	6868      	ldr	r0, [r5, #4]
    9c12:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9c14:	f7ff fede 	bl	99d4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    9c18:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9c1a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    9c1e:	b33a      	cbz	r2, 9c70 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9c20:	a905      	add	r1, sp, #20
    9c22:	9102      	str	r1, [sp, #8]
    9c24:	492d      	ldr	r1, [pc, #180]	; (9cdc <bt_gatt_indicate+0xec>)
    9c26:	9101      	str	r1, [sp, #4]
    9c28:	2101      	movs	r1, #1
	found->attr = NULL;
    9c2a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9c2c:	9100      	str	r1, [sp, #0]
    9c2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    9c32:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9c34:	f7ff fefe 	bl	9a34 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    9c38:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    9c3a:	b91b      	cbnz	r3, 9c44 <bt_gatt_indicate+0x54>
			return -ENOENT;
    9c3c:	f06f 0001 	mvn.w	r0, #1
}
    9c40:	b00b      	add	sp, #44	; 0x2c
    9c42:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    9c44:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    9c46:	9b05      	ldr	r3, [sp, #20]
    9c48:	6818      	ldr	r0, [r3, #0]
    9c4a:	2300      	movs	r3, #0
    9c4c:	f88d 3010 	strb.w	r3, [sp, #16]
    9c50:	a904      	add	r1, sp, #16
    9c52:	f642 0303 	movw	r3, #10243	; 0x2803
    9c56:	f8ad 3012 	strh.w	r3, [sp, #18]
    9c5a:	f012 f8f1 	bl	1be40 <bt_uuid_cmp>
    9c5e:	b970      	cbnz	r0, 9c7e <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    9c60:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    9c62:	68c3      	ldr	r3, [r0, #12]
    9c64:	799b      	ldrb	r3, [r3, #6]
    9c66:	069b      	lsls	r3, r3, #26
    9c68:	d405      	bmi.n	9c76 <bt_gatt_indicate+0x86>
			return -EINVAL;
    9c6a:	f06f 0015 	mvn.w	r0, #21
    9c6e:	e7e7      	b.n	9c40 <bt_gatt_indicate+0x50>
		if (!data.handle) {
    9c70:	2800      	cmp	r0, #0
    9c72:	d1e8      	bne.n	9c46 <bt_gatt_indicate+0x56>
    9c74:	e7e2      	b.n	9c3c <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    9c76:	f013 ff4a 	bl	1db0e <bt_gatt_attr_value_handle>
    9c7a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    9c7e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    9c82:	b13c      	cbz	r4, 9c94 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    9c84:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    9c86:	4601      	mov	r1, r0
		params->_ref = 1;
    9c88:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    9c8a:	462a      	mov	r2, r5
    9c8c:	4620      	mov	r0, r4
    9c8e:	f7ff ff65 	bl	9b5c <gatt_indicate>
    9c92:	e7d5      	b.n	9c40 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
    9c94:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9c98:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    9c9a:	2302      	movs	r3, #2
    9c9c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9ca0:	f642 1302 	movw	r3, #10498	; 0x2902
    9ca4:	f8ad 3012 	strh.w	r3, [sp, #18]
    9ca8:	ab05      	add	r3, sp, #20
    9caa:	9302      	str	r3, [sp, #8]
    9cac:	4b0c      	ldr	r3, [pc, #48]	; (9ce0 <bt_gatt_indicate+0xf0>)
    9cae:	9301      	str	r3, [sp, #4]
    9cb0:	2301      	movs	r3, #1
    9cb2:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    9cb4:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9cb6:	4623      	mov	r3, r4
    9cb8:	aa04      	add	r2, sp, #16
    9cba:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    9cbe:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9cc0:	f88d 4010 	strb.w	r4, [sp, #16]
    9cc4:	f7ff feb6 	bl	9a34 <bt_gatt_foreach_attr_type>
	return data.err;
    9cc8:	9807      	ldr	r0, [sp, #28]
    9cca:	e7b9      	b.n	9c40 <bt_gatt_indicate+0x50>
		return -EAGAIN;
    9ccc:	f06f 000a 	mvn.w	r0, #10
    9cd0:	e7b6      	b.n	9c40 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
    9cd2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9cd6:	e7b3      	b.n	9c40 <bt_gatt_indicate+0x50>
    9cd8:	200001bc 	.word	0x200001bc
    9cdc:	0001d67b 	.word	0x0001d67b
    9ce0:	00009d55 	.word	0x00009d55

00009ce4 <sc_process>:
{
    9ce4:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9ce6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    9cea:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    9cee:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    9cf2:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    9cf6:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9cf8:	f1a0 0120 	sub.w	r1, r0, #32
    9cfc:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9d00:	f3bf 8f5b 	dmb	ish
    9d04:	e854 2f00 	ldrex	r2, [r4]
    9d08:	f022 0201 	bic.w	r2, r2, #1
    9d0c:	e844 2000 	strex	r0, r2, [r4]
    9d10:	2800      	cmp	r0, #0
    9d12:	d1f7      	bne.n	9d04 <sc_process+0x20>
    9d14:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    9d18:	4a0c      	ldr	r2, [pc, #48]	; (9d4c <sc_process+0x68>)
    9d1a:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    9d1e:	4a0c      	ldr	r2, [pc, #48]	; (9d50 <sc_process+0x6c>)
    9d20:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    9d24:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    9d26:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    9d28:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    9d2c:	2204      	movs	r2, #4
	sc->start = 0U;
    9d2e:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    9d32:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    9d36:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9d3a:	f7ff ff59 	bl	9bf0 <bt_gatt_indicate>
    9d3e:	b918      	cbnz	r0, 9d48 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    9d40:	2101      	movs	r1, #1
    9d42:	4620      	mov	r0, r4
    9d44:	f013 fd12 	bl	1d76c <atomic_set_bit>
}
    9d48:	b002      	add	sp, #8
    9d4a:	bd10      	pop	{r4, pc}
    9d4c:	00020274 	.word	0x00020274
    9d50:	000098cd 	.word	0x000098cd

00009d54 <notify_cb>:
{
    9d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d56:	4b32      	ldr	r3, [pc, #200]	; (9e20 <notify_cb+0xcc>)
{
    9d58:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d5a:	6882      	ldr	r2, [r0, #8]
    9d5c:	429a      	cmp	r2, r3
{
    9d5e:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9d60:	d12e      	bne.n	9dc0 <notify_cb+0x6c>
	ccc = attr->user_data;
    9d62:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    9d64:	4b2f      	ldr	r3, [pc, #188]	; (9e24 <notify_cb+0xd0>)
    9d66:	429f      	cmp	r7, r3
    9d68:	d11a      	bne.n	9da0 <notify_cb+0x4c>
    9d6a:	4d2f      	ldr	r5, [pc, #188]	; (9e28 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9d6c:	2300      	movs	r3, #0
    9d6e:	2207      	movs	r2, #7
    9d70:	4669      	mov	r1, sp
    9d72:	1c68      	adds	r0, r5, #1
    9d74:	9300      	str	r3, [sp, #0]
    9d76:	f8cd 3003 	str.w	r3, [sp, #3]
    9d7a:	f011 ffc5 	bl	1bd08 <memcmp>
    9d7e:	b178      	cbz	r0, 9da0 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    9d80:	4629      	mov	r1, r5
    9d82:	2207      	movs	r2, #7
    9d84:	f811 0b01 	ldrb.w	r0, [r1], #1
    9d88:	f7fe fe2a 	bl	89e0 <bt_conn_lookup_state_le>
			if (!conn) {
    9d8c:	b9e0      	cbnz	r0, 9dc8 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
    9d8e:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    9d90:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    9d92:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    9d94:	f811 0b01 	ldrb.w	r0, [r1], #1
    9d98:	8853      	ldrh	r3, [r2, #2]
    9d9a:	8812      	ldrh	r2, [r2, #0]
    9d9c:	f013 fe51 	bl	1da42 <sc_save>
		if (cfg->value != data->type) {
    9da0:	893a      	ldrh	r2, [r7, #8]
    9da2:	89a3      	ldrh	r3, [r4, #12]
    9da4:	429a      	cmp	r2, r3
    9da6:	d10b      	bne.n	9dc0 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9da8:	4639      	mov	r1, r7
    9daa:	f811 0b01 	ldrb.w	r0, [r1], #1
    9dae:	f7fe fdf7 	bl	89a0 <bt_conn_lookup_addr_le>
		if (!conn) {
    9db2:	4605      	mov	r5, r0
    9db4:	b120      	cbz	r0, 9dc0 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    9db6:	7a83      	ldrb	r3, [r0, #10]
    9db8:	2b07      	cmp	r3, #7
    9dba:	d008      	beq.n	9dce <notify_cb+0x7a>
			bt_conn_unref(conn);
    9dbc:	f012 fdfb 	bl	1c9b6 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    9dc0:	2701      	movs	r7, #1
}
    9dc2:	4638      	mov	r0, r7
    9dc4:	b003      	add	sp, #12
    9dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    9dc8:	f012 fdf5 	bl	1c9b6 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9dcc:	e7e8      	b.n	9da0 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    9dce:	697b      	ldr	r3, [r7, #20]
    9dd0:	b123      	cbz	r3, 9ddc <notify_cb+0x88>
    9dd2:	4631      	mov	r1, r6
    9dd4:	4798      	blx	r3
    9dd6:	b908      	cbnz	r0, 9ddc <notify_cb+0x88>
			bt_conn_unref(conn);
    9dd8:	4628      	mov	r0, r5
    9dda:	e7ef      	b.n	9dbc <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
    9ddc:	2214      	movs	r2, #20
    9dde:	4631      	mov	r1, r6
    9de0:	4628      	mov	r0, r5
    9de2:	f013 feef 	bl	1dbc4 <bt_gatt_check_perm>
    9de6:	4607      	mov	r7, r0
    9de8:	2800      	cmp	r0, #0
    9dea:	d1e9      	bne.n	9dc0 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9dec:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    9dee:	88a1      	ldrh	r1, [r4, #4]
    9df0:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    9df2:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    9df4:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    9df6:	d10f      	bne.n	9e18 <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
    9df8:	f7ff feb0 	bl	9b5c <gatt_indicate>
			if (err == 0) {
    9dfc:	4606      	mov	r6, r0
    9dfe:	b918      	cbnz	r0, 9e08 <notify_cb+0xb4>
				data->ind_params->_ref++;
    9e00:	6922      	ldr	r2, [r4, #16]
    9e02:	7d93      	ldrb	r3, [r2, #22]
    9e04:	3301      	adds	r3, #1
    9e06:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    9e08:	4628      	mov	r0, r5
    9e0a:	f012 fdd4 	bl	1c9b6 <bt_conn_unref>
		if (err < 0) {
    9e0e:	2e00      	cmp	r6, #0
    9e10:	dbd7      	blt.n	9dc2 <notify_cb+0x6e>
		data->err = 0;
    9e12:	2300      	movs	r3, #0
    9e14:	60a3      	str	r3, [r4, #8]
    9e16:	e7d3      	b.n	9dc0 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    9e18:	f013 fef7 	bl	1dc0a <gatt_notify>
    9e1c:	4606      	mov	r6, r0
    9e1e:	e7f3      	b.n	9e08 <notify_cb+0xb4>
    9e20:	0001d957 	.word	0x0001d957
    9e24:	2000030c 	.word	0x2000030c
    9e28:	20002d48 	.word	0x20002d48

00009e2c <update_ccc>:
{
    9e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e2e:	4b24      	ldr	r3, [pc, #144]	; (9ec0 <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
    9e30:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e32:	6882      	ldr	r2, [r0, #8]
    9e34:	429a      	cmp	r2, r3
{
    9e36:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9e38:	d13f      	bne.n	9eba <update_ccc+0x8e>
	ccc = attr->user_data;
    9e3a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    9e3c:	8933      	ldrh	r3, [r6, #8]
    9e3e:	2b00      	cmp	r3, #0
    9e40:	d03b      	beq.n	9eba <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9e42:	4632      	mov	r2, r6
    9e44:	4620      	mov	r0, r4
    9e46:	f812 1b01 	ldrb.w	r1, [r2], #1
    9e4a:	f012 fdc2 	bl	1c9d2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    9e4e:	2800      	cmp	r0, #0
    9e50:	d033      	beq.n	9eba <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    9e52:	222a      	movs	r2, #42	; 0x2a
    9e54:	4629      	mov	r1, r5
    9e56:	4620      	mov	r0, r4
    9e58:	f013 feb4 	bl	1dbc4 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    9e5c:	2803      	cmp	r0, #3
    9e5e:	d02c      	beq.n	9eba <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
    9e60:	4631      	mov	r1, r6
    9e62:	4628      	mov	r0, r5
    9e64:	f013 fbec 	bl	1d640 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    9e68:	4b16      	ldr	r3, [pc, #88]	; (9ec4 <update_ccc+0x98>)
    9e6a:	429e      	cmp	r6, r3
    9e6c:	d125      	bne.n	9eba <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    9e6e:	7a20      	ldrb	r0, [r4, #8]
    9e70:	f104 0188 	add.w	r1, r4, #136	; 0x88
    9e74:	f7ff fccc 	bl	9810 <find_sc_cfg>
	if (!cfg) {
    9e78:	b1f8      	cbz	r0, 9eba <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
    9e7a:	8902      	ldrh	r2, [r0, #8]
    9e7c:	8943      	ldrh	r3, [r0, #10]
    9e7e:	ea53 0102 	orrs.w	r1, r3, r2
    9e82:	d01a      	beq.n	9eba <update_ccc+0x8e>
	index = bt_conn_index(conn);
    9e84:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    9e86:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    9e8a:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    9e8e:	f7fe fce7 	bl	8860 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9e92:	490d      	ldr	r1, [pc, #52]	; (9ec8 <update_ccc+0x9c>)
    9e94:	4a0d      	ldr	r2, [pc, #52]	; (9ecc <update_ccc+0xa0>)
    9e96:	2318      	movs	r3, #24
    9e98:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9e9c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9e9e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    9ea0:	4a0b      	ldr	r2, [pc, #44]	; (9ed0 <update_ccc+0xa4>)
    9ea2:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    9ea4:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9ea6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    9eaa:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    9eac:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9eae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    9eb2:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9eb4:	4620      	mov	r0, r4
    9eb6:	f7ff fe9b 	bl	9bf0 <bt_gatt_indicate>
}
    9eba:	2001      	movs	r0, #1
    9ebc:	b002      	add	sp, #8
    9ebe:	bd70      	pop	{r4, r5, r6, pc}
    9ec0:	0001d957 	.word	0x0001d957
    9ec4:	2000030c 	.word	0x2000030c
    9ec8:	2000185c 	.word	0x2000185c
    9ecc:	00020274 	.word	0x00020274
    9ed0:	0001dad7 	.word	0x0001dad7

00009ed4 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    9ed4:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9ed6:	4a06      	ldr	r2, [pc, #24]	; (9ef0 <bt_gatt_connected+0x1c>)
	data.conn = conn;
    9ed8:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9eda:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    9edc:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9ede:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    9ee2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9ee6:	f013 fe60 	bl	1dbaa <bt_gatt_foreach_attr>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    9eea:	b003      	add	sp, #12
    9eec:	f85d fb04 	ldr.w	pc, [sp], #4
    9ef0:	00009e2d 	.word	0x00009e2d

00009ef4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    9ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    9ef6:	4b08      	ldr	r3, [pc, #32]	; (9f18 <bt_gatt_att_max_mtu_changed+0x24>)
    9ef8:	681c      	ldr	r4, [r3, #0]
    9efa:	4605      	mov	r5, r0
    9efc:	460e      	mov	r6, r1
    9efe:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    9f00:	b14c      	cbz	r4, 9f16 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    9f02:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    9f06:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    9f08:	b11b      	cbz	r3, 9f12 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    9f0a:	463a      	mov	r2, r7
    9f0c:	4631      	mov	r1, r6
    9f0e:	4628      	mov	r0, r5
    9f10:	4798      	blx	r3
	return node->next;
    9f12:	6864      	ldr	r4, [r4, #4]
    9f14:	e7f4      	b.n	9f00 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    9f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f18:	20001840 	.word	0x20001840

00009f1c <db_hash_read>:
{
    9f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    9f1e:	4915      	ldr	r1, [pc, #84]	; (9f74 <db_hash_read+0x58>)
{
    9f20:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    9f24:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    9f26:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    9f2a:	461f      	mov	r7, r3
    9f2c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    9f2e:	f015 fb1a 	bl	1f566 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f32:	f3bf 8f5b 	dmb	ish
    9f36:	4b10      	ldr	r3, [pc, #64]	; (9f78 <db_hash_read+0x5c>)
    9f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    9f3a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    9f3e:	075b      	lsls	r3, r3, #29
    9f40:	d401      	bmi.n	9f46 <db_hash_read+0x2a>
		db_hash_gen(true);
    9f42:	f7ff fdd1 	bl	9ae8 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
    9f46:	2101      	movs	r1, #1
    9f48:	4620      	mov	r0, r4
    9f4a:	f013 fe91 	bl	1dc70 <bt_gatt_change_aware>
	if (offset > value_len) {
    9f4e:	2e10      	cmp	r6, #16
    9f50:	d80c      	bhi.n	9f6c <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
    9f52:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    9f56:	4909      	ldr	r1, [pc, #36]	; (9f7c <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
    9f58:	42bc      	cmp	r4, r7
    9f5a:	bfa8      	it	ge
    9f5c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    9f5e:	4622      	mov	r2, r4
    9f60:	4431      	add	r1, r6
    9f62:	4628      	mov	r0, r5
    9f64:	f011 fee1 	bl	1bd2a <memcpy>
}
    9f68:	4620      	mov	r0, r4
    9f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9f6c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    9f70:	e7fa      	b.n	9f68 <db_hash_read+0x4c>
    9f72:	bf00      	nop
    9f74:	20001040 	.word	0x20001040
    9f78:	20001068 	.word	0x20001068
    9f7c:	20001000 	.word	0x20001000

00009f80 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    9f80:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9f82:	4603      	mov	r3, r0
    9f84:	4a14      	ldr	r2, [pc, #80]	; (9fd8 <bt_gatt_disconnected+0x58>)
{
    9f86:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9f88:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9f8c:	2001      	movs	r0, #1
    9f8e:	f013 fe0c 	bl	1dbaa <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    9f92:	4628      	mov	r0, r5
    9f94:	f7ff fc1e 	bl	97d4 <find_cf_cfg>
	if (!cfg) {
    9f98:	4604      	mov	r4, r0
    9f9a:	b1e0      	cbz	r0, 9fd6 <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9f9c:	f105 0688 	add.w	r6, r5, #136	; 0x88
    9fa0:	7a28      	ldrb	r0, [r5, #8]
    9fa2:	4631      	mov	r1, r6
    9fa4:	f012 fa3d 	bl	1c422 <bt_addr_le_is_bonded>
    9fa8:	b920      	cbnz	r0, 9fb4 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    9faa:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    9fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    9fb0:	f013 bbbf 	b.w	1d732 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9fb4:	1c60      	adds	r0, r4, #1
    9fb6:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9fb8:	340c      	adds	r4, #12
    9fba:	f013 fbb7 	bl	1d72c <bt_addr_le_copy>
    9fbe:	f3bf 8f5b 	dmb	ish
    9fc2:	e854 3f00 	ldrex	r3, [r4]
    9fc6:	f023 0302 	bic.w	r3, r3, #2
    9fca:	e844 3200 	strex	r2, r3, [r4]
    9fce:	2a00      	cmp	r2, #0
    9fd0:	d1f7      	bne.n	9fc2 <bt_gatt_disconnected+0x42>
    9fd2:	f3bf 8f5b 	dmb	ish
}
    9fd6:	bd70      	pop	{r4, r5, r6, pc}
    9fd8:	00009831 	.word	0x00009831

00009fdc <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    9fdc:	4b04      	ldr	r3, [pc, #16]	; (9ff0 <bt_smp_accept+0x14>)
    9fde:	6818      	ldr	r0, [r3, #0]
    9fe0:	b918      	cbnz	r0, 9fea <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    9fe2:	4a04      	ldr	r2, [pc, #16]	; (9ff4 <bt_smp_accept+0x18>)
    9fe4:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    9fe6:	600b      	str	r3, [r1, #0]

		return 0;
    9fe8:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    9fea:	f06f 000b 	mvn.w	r0, #11
}
    9fee:	4770      	bx	lr
    9ff0:	200010c0 	.word	0x200010c0
    9ff4:	00020350 	.word	0x00020350

00009ff8 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    9ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ffc:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    9ffe:	1dc2      	adds	r2, r0, #7
    a000:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a004:	1e75      	subs	r5, r6, #1
{
    a006:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a008:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    a00a:	6018      	str	r0, [r3, #0]
{
    a00c:	b082      	sub	sp, #8
    a00e:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a010:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a012:	2100      	movs	r1, #0
    a014:	2204      	movs	r2, #4
    a016:	fb07 0005 	mla	r0, r7, r5, r0
    a01a:	f011 fe91 	bl	1bd40 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    a01e:	b1bd      	cbz	r5, a050 <mem_init+0x58>
    a020:	3e02      	subs	r6, #2
    a022:	b2b6      	uxth	r6, r6
    a024:	fb06 7307 	mla	r3, r6, r7, r7
    a028:	fb06 f807 	mul.w	r8, r6, r7
    a02c:	441c      	add	r4, r3
    a02e:	eba8 0803 	sub.w	r8, r8, r3
    a032:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    a034:	2204      	movs	r2, #4
    a036:	eb04 0008 	add.w	r0, r4, r8
    a03a:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    a03e:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    a040:	f011 fe73 	bl	1bd2a <memcpy>
	while (mem_count--) {
    a044:	42b5      	cmp	r5, r6
    a046:	eba4 0407 	sub.w	r4, r4, r7
    a04a:	f105 0501 	add.w	r5, r5, #1
    a04e:	d1f1      	bne.n	a034 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    a050:	b002      	add	sp, #8
    a052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a056:	bf00      	nop

0000a058 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    a058:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    a05a:	6805      	ldr	r5, [r0, #0]
{
    a05c:	b082      	sub	sp, #8
	if (*mem_head) {
    a05e:	b195      	cbz	r5, a086 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    a060:	1deb      	adds	r3, r5, #7
    a062:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    a066:	2204      	movs	r2, #4
    a068:	4604      	mov	r4, r0
    a06a:	4629      	mov	r1, r5
    a06c:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    a070:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    a072:	f011 fe5a 	bl	1bd2a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    a076:	9b01      	ldr	r3, [sp, #4]
    a078:	b123      	cbz	r3, a084 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    a07a:	1dda      	adds	r2, r3, #7
    a07c:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    a080:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    a082:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    a084:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    a086:	4628      	mov	r0, r5
    a088:	b002      	add	sp, #8
    a08a:	bd70      	pop	{r4, r5, r6, pc}

0000a08c <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    a08c:	680b      	ldr	r3, [r1, #0]
{
    a08e:	b570      	push	{r4, r5, r6, lr}
    a090:	460c      	mov	r4, r1
    a092:	4605      	mov	r5, r0
	if (*mem_head) {
    a094:	b183      	cbz	r3, a0b8 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    a096:	3307      	adds	r3, #7
    a098:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    a09c:	881e      	ldrh	r6, [r3, #0]
    a09e:	3601      	adds	r6, #1
    a0a0:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    a0a2:	2204      	movs	r2, #4
    a0a4:	4621      	mov	r1, r4
    a0a6:	4628      	mov	r0, r5
    a0a8:	f011 fe3f 	bl	1bd2a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    a0ac:	1deb      	adds	r3, r5, #7
    a0ae:	f023 0303 	bic.w	r3, r3, #3
    a0b2:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    a0b4:	6025      	str	r5, [r4, #0]
}
    a0b6:	bd70      	pop	{r4, r5, r6, pc}
    a0b8:	2601      	movs	r6, #1
    a0ba:	e7f2      	b.n	a0a2 <mem_release+0x16>

0000a0bc <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    a0bc:	fb02 0001 	mla	r0, r2, r1, r0
    a0c0:	4770      	bx	lr
    a0c2:	bf00      	nop

0000a0c4 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    a0c4:	1a40      	subs	r0, r0, r1
    a0c6:	b280      	uxth	r0, r0
}
    a0c8:	fbb0 f0f2 	udiv	r0, r0, r2
    a0cc:	4770      	bx	lr
    a0ce:	bf00      	nop

0000a0d0 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    a0d0:	1e53      	subs	r3, r2, #1
	src += len;
    a0d2:	4411      	add	r1, r2
	while (len--) {
    a0d4:	b29b      	uxth	r3, r3
    a0d6:	b142      	cbz	r2, a0ea <mem_rcopy+0x1a>
    a0d8:	43db      	mvns	r3, r3
    a0da:	3801      	subs	r0, #1
    a0dc:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    a0de:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    a0e2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    a0e6:	4291      	cmp	r1, r2
    a0e8:	d1f9      	bne.n	a0de <mem_rcopy+0xe>
	}
}
    a0ea:	4770      	bx	lr

0000a0ec <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    a0ec:	4401      	add	r1, r0
    a0ee:	e002      	b.n	a0f6 <mem_nz+0xa>
		if (*src++) {
    a0f0:	f810 3b01 	ldrb.w	r3, [r0], #1
    a0f4:	b91b      	cbnz	r3, a0fe <mem_nz+0x12>
	while (len--) {
    a0f6:	4288      	cmp	r0, r1
    a0f8:	d1fa      	bne.n	a0f0 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    a0fa:	2000      	movs	r0, #0
    a0fc:	4770      	bx	lr
			return 1;
    a0fe:	2001      	movs	r0, #1
}
    a100:	4770      	bx	lr
    a102:	bf00      	nop

0000a104 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    a104:	6010      	str	r0, [r2, #0]
    a106:	6008      	str	r0, [r1, #0]

	return link;
}
    a108:	4770      	bx	lr
    a10a:	bf00      	nop

0000a10c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    a10c:	680a      	ldr	r2, [r1, #0]
{
    a10e:	4603      	mov	r3, r0
	if (*head != *tail) {
    a110:	6800      	ldr	r0, [r0, #0]
    a112:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    a114:	bf05      	ittet	eq
    a116:	2200      	moveq	r2, #0
    a118:	600a      	streq	r2, [r1, #0]
		return NULL;
    a11a:	2000      	movne	r0, #0
	*head = *tail = NULL;
    a11c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    a11e:	4770      	bx	lr

0000a120 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    a120:	f8d2 c000 	ldr.w	ip, [r2]
    a124:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    a128:	f8d2 c000 	ldr.w	ip, [r2]
    a12c:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    a130:	6010      	str	r0, [r2, #0]

	return link;
}
    a132:	4770      	bx	lr

0000a134 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    a134:	4288      	cmp	r0, r1
    a136:	d003      	beq.n	a140 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    a138:	b11a      	cbz	r2, a142 <memq_peek+0xe>
		*mem = head->mem;
    a13a:	6843      	ldr	r3, [r0, #4]
    a13c:	6013      	str	r3, [r2, #0]
    a13e:	4770      	bx	lr
		return NULL;
    a140:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    a142:	4770      	bx	lr

0000a144 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    a144:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    a146:	4283      	cmp	r3, r0
    a148:	d009      	beq.n	a15e <memq_dequeue+0x1a>
	if (mem) {
    a14a:	b12a      	cbz	r2, a158 <memq_dequeue+0x14>
		*mem = head->mem;
    a14c:	6858      	ldr	r0, [r3, #4]
    a14e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    a150:	681a      	ldr	r2, [r3, #0]
    a152:	600a      	str	r2, [r1, #0]

	return old_head;
}
    a154:	4618      	mov	r0, r3
    a156:	4770      	bx	lr
	if (old_head == NULL) {
    a158:	2b00      	cmp	r3, #0
    a15a:	d1f9      	bne.n	a150 <memq_dequeue+0xc>
    a15c:	e7fa      	b.n	a154 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    a15e:	2300      	movs	r3, #0
    a160:	e7f8      	b.n	a154 <memq_dequeue+0x10>
    a162:	bf00      	nop

0000a164 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    a164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a168:	f8df 8030 	ldr.w	r8, [pc, #48]	; a19c <mayfly_init+0x38>
    a16c:	4e0c      	ldr	r6, [pc, #48]	; (a1a0 <mayfly_init+0x3c>)
    a16e:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    a170:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    a174:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    a176:	1d22      	adds	r2, r4, #4
    a178:	4621      	mov	r1, r4
    a17a:	4628      	mov	r0, r5
		while (caller_id--) {
    a17c:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    a17e:	f7ff ffc1 	bl	a104 <memq_init>
		while (caller_id--) {
    a182:	42b4      	cmp	r4, r6
    a184:	f1a5 0508 	sub.w	r5, r5, #8
    a188:	d1f5      	bne.n	a176 <mayfly_init+0x12>
	while (callee_id--) {
    a18a:	3f04      	subs	r7, #4
    a18c:	1d3b      	adds	r3, r7, #4
    a18e:	f1a8 0820 	sub.w	r8, r8, #32
    a192:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    a196:	d1eb      	bne.n	a170 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    a198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a19c:	200018f0 	.word	0x200018f0
    a1a0:	20001980 	.word	0x20001980

0000a1a4 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    a1a4:	b410      	push	{r4}
    a1a6:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    a1a8:	4c15      	ldr	r4, [pc, #84]	; (a200 <mayfly_enable+0x5c>)
{
    a1aa:	468c      	mov	ip, r1
	if (enable) {
    a1ac:	b192      	cbz	r2, a1d4 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    a1ae:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    a1b2:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    a1b6:	0100      	lsls	r0, r0, #4
    a1b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    a1bc:	4421      	add	r1, r4
    a1be:	7a48      	ldrb	r0, [r1, #9]
    a1c0:	7a0c      	ldrb	r4, [r1, #8]
    a1c2:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    a1c4:	bf04      	itt	eq
    a1c6:	3001      	addeq	r0, #1
    a1c8:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    a1ca:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    a1cc:	4661      	mov	r1, ip
    a1ce:	4618      	mov	r0, r3
    a1d0:	f00c bb6e 	b.w	168b0 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    a1d4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    a1d8:	0112      	lsls	r2, r2, #4
    a1da:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    a1de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a1e2:	4423      	add	r3, r4
    a1e4:	7a9c      	ldrb	r4, [r3, #10]
    a1e6:	7ada      	ldrb	r2, [r3, #11]
    a1e8:	42a2      	cmp	r2, r4
    a1ea:	d001      	beq.n	a1f0 <mayfly_enable+0x4c>
}
    a1ec:	bc10      	pop	{r4}
    a1ee:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    a1f0:	3201      	adds	r2, #1
    a1f2:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    a1f4:	4b03      	ldr	r3, [pc, #12]	; (a204 <mayfly_enable+0x60>)
    a1f6:	2201      	movs	r2, #1
    a1f8:	545a      	strb	r2, [r3, r1]
}
    a1fa:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    a1fc:	f00c bbae 	b.w	1695c <mayfly_pend>
    a200:	200018fc 	.word	0x200018fc
    a204:	200018f8 	.word	0x200018f8

0000a208 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    a208:	b570      	push	{r4, r5, r6, lr}
    a20a:	b082      	sub	sp, #8
    a20c:	4606      	mov	r6, r0
    a20e:	9101      	str	r1, [sp, #4]
    a210:	461c      	mov	r4, r3
    a212:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    a214:	b32a      	cbz	r2, a262 <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    a216:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    a218:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    a21a:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    a21c:	f012 0203 	ands.w	r2, r2, #3
    a220:	d005      	beq.n	a22e <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
    a222:	2a01      	cmp	r2, #1
    a224:	d042      	beq.n	a2ac <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    a226:	3301      	adds	r3, #1
    a228:	b2db      	uxtb	r3, r3
    a22a:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    a22c:	e00f      	b.n	a24e <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    a22e:	3301      	adds	r3, #1
    a230:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    a232:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
    a234:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    a236:	2304      	movs	r3, #4
    a238:	fb11 3105 	smlabb	r1, r1, r5, r3
    a23c:	4a1c      	ldr	r2, [pc, #112]	; (a2b0 <mayfly_enqueue+0xa8>)
    a23e:	6860      	ldr	r0, [r4, #4]
    a240:	230c      	movs	r3, #12
    a242:	fb13 1306 	smlabb	r3, r3, r6, r1
    a246:	441a      	add	r2, r3
    a248:	4621      	mov	r1, r4
    a24a:	f7ff ff69 	bl	a120 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    a24e:	4b19      	ldr	r3, [pc, #100]	; (a2b4 <mayfly_enqueue+0xac>)
    a250:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    a252:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    a254:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    a256:	4629      	mov	r1, r5
    a258:	f00c fb80 	bl	1695c <mayfly_pend>

	return 0;
    a25c:	2000      	movs	r0, #0
}
    a25e:	b002      	add	sp, #8
    a260:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a262:	f00c fb65 	bl	16930 <mayfly_prio_is_equal>
    a266:	2800      	cmp	r0, #0
    a268:	d0d5      	beq.n	a216 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
    a26a:	4629      	mov	r1, r5
    a26c:	4630      	mov	r0, r6
    a26e:	f00c fb3f 	bl	168f0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a272:	2800      	cmp	r0, #0
    a274:	d0cf      	beq.n	a216 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
    a276:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    a27a:	0112      	lsls	r2, r2, #4
    a27c:	490c      	ldr	r1, [pc, #48]	; (a2b0 <mayfly_enqueue+0xa8>)
    a27e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    a282:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a286:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    a288:	7a9a      	ldrb	r2, [r3, #10]
    a28a:	7adb      	ldrb	r3, [r3, #11]
    a28c:	429a      	cmp	r2, r3
    a28e:	d1c2      	bne.n	a216 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
    a290:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    a292:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    a294:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    a296:	0792      	lsls	r2, r2, #30
    a298:	d002      	beq.n	a2a0 <mayfly_enqueue+0x98>
		m->_req = ack + 2;
    a29a:	3302      	adds	r3, #2
    a29c:	b2db      	uxtb	r3, r3
    a29e:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    a2a0:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    a2a4:	4798      	blx	r3
		return 0;
    a2a6:	2000      	movs	r0, #0
}
    a2a8:	b002      	add	sp, #8
    a2aa:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    a2ac:	4610      	mov	r0, r2
    a2ae:	e7d6      	b.n	a25e <mayfly_enqueue+0x56>
    a2b0:	200018fc 	.word	0x200018fc
    a2b4:	200018f8 	.word	0x200018f8

0000a2b8 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    a2b8:	4a50      	ldr	r2, [pc, #320]	; (a3fc <mayfly_run+0x144>)
    a2ba:	5c13      	ldrb	r3, [r2, r0]
    a2bc:	2b00      	cmp	r3, #0
    a2be:	f000 809b 	beq.w	a3f8 <mayfly_run+0x140>
{
    a2c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
    a2c6:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a2c8:	4f4d      	ldr	r7, [pc, #308]	; (a400 <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
    a2ca:	5413      	strb	r3, [r2, r0]
{
    a2cc:	b087      	sub	sp, #28
	uint8_t enable = 0U;
    a2ce:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a2d0:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
    a2d4:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a2d8:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
    a2dc:	9303      	str	r3, [sp, #12]
    a2de:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a2e2:	f10b 0804 	add.w	r8, fp, #4
    a2e6:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
    a2ea:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
    a2ee:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    a2f0:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    a2f4:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    a2f6:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    a2f8:	f7ff ff1c 	bl	a134 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    a2fc:	f107 0624 	add.w	r6, r7, #36	; 0x24
    a300:	4683      	mov	fp, r0
    a302:	2800      	cmp	r0, #0
    a304:	d034      	beq.n	a370 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    a306:	9c05      	ldr	r4, [sp, #20]
    a308:	7863      	ldrb	r3, [r4, #1]
    a30a:	7825      	ldrb	r5, [r4, #0]
    a30c:	1aed      	subs	r5, r5, r3
    a30e:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    a312:	2d01      	cmp	r5, #1
    a314:	d106      	bne.n	a324 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    a316:	3b01      	subs	r3, #1
    a318:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    a31a:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    a31e:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    a320:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    a322:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    a324:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    a326:	1ac3      	subs	r3, r0, r3
    a328:	f003 0303 	and.w	r3, r3, #3
    a32c:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    a32e:	f04f 0200 	mov.w	r2, #0
    a332:	4631      	mov	r1, r6
	req = m->_req;
    a334:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    a338:	d00f      	beq.n	a35a <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
    a33a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    a33c:	f7ff ff02 	bl	a144 <memq_dequeue>
		ack = m->_ack;
    a340:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    a344:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    a346:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    a34a:	eba3 030c 	sub.w	r3, r3, ip
    a34e:	f003 0303 	and.w	r3, r3, #3
    a352:	2b01      	cmp	r3, #1
		m->_ack = req;
    a354:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    a358:	d046      	beq.n	a3e8 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    a35a:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    a35e:	aa05      	add	r2, sp, #20
    a360:	f7ff fee8 	bl	a134 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    a364:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    a366:	9000      	str	r0, [sp, #0]
    a368:	4683      	mov	fp, r0
			if (state == 1U) {
    a36a:	d02b      	beq.n	a3c4 <mayfly_run+0x10c>
		while (link) {
    a36c:	2800      	cmp	r0, #0
    a36e:	d1ca      	bne.n	a306 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    a370:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    a374:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    a378:	429a      	cmp	r2, r3
    a37a:	d003      	beq.n	a384 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    a37c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    a380:	2301      	movs	r3, #1
    a382:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    a384:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    a388:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    a38c:	429a      	cmp	r2, r3
    a38e:	d003      	beq.n	a398 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    a390:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    a394:	2301      	movs	r3, #1
    a396:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    a398:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a39c:	fa5f f989 	uxtb.w	r9, r9
    a3a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    a3a4:	f1a7 070c 	sub.w	r7, r7, #12
    a3a8:	d1a1      	bne.n	a2ee <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    a3aa:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    a3ae:	b1c3      	cbz	r3, a3e2 <mayfly_run+0x12a>
    a3b0:	9b03      	ldr	r3, [sp, #12]
    a3b2:	b9b3      	cbnz	r3, a3e2 <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
    a3b4:	461a      	mov	r2, r3
    a3b6:	4651      	mov	r1, sl
    a3b8:	4650      	mov	r0, sl
	}
}
    a3ba:	b007      	add	sp, #28
    a3bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    a3c0:	f00c ba76 	b.w	168b0 <mayfly_enable_cb>
				if (caller_id || link) {
    a3c4:	f1b9 0f00 	cmp.w	r9, #0
    a3c8:	d101      	bne.n	a3ce <mayfly_run+0x116>
    a3ca:	2800      	cmp	r0, #0
    a3cc:	d0d0      	beq.n	a370 <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
    a3ce:	f8dd a008 	ldr.w	sl, [sp, #8]
    a3d2:	4a0a      	ldr	r2, [pc, #40]	; (a3fc <mayfly_run+0x144>)
    a3d4:	2301      	movs	r3, #1
    a3d6:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    a3da:	4651      	mov	r1, sl
    a3dc:	4650      	mov	r0, sl
    a3de:	f00c fabd 	bl	1695c <mayfly_pend>
}
    a3e2:	b007      	add	sp, #28
    a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a3e8:	4642      	mov	r2, r8
    a3ea:	4621      	mov	r1, r4
    a3ec:	4658      	mov	r0, fp
			m->_ack = ack;
    a3ee:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    a3f2:	f7ff fe95 	bl	a120 <memq_enqueue>
    a3f6:	e7b0      	b.n	a35a <mayfly_run+0xa2>
    a3f8:	4770      	bx	lr
    a3fa:	bf00      	nop
    a3fc:	200018f8 	.word	0x200018f8
    a400:	200018fc 	.word	0x200018fc

0000a404 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    a404:	1e4b      	subs	r3, r1, #1
    a406:	b2db      	uxtb	r3, r3
    a408:	b171      	cbz	r1, a428 <util_ones_count_get+0x24>
    a40a:	1e41      	subs	r1, r0, #1
    a40c:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    a410:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    a412:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    a416:	b123      	cbz	r3, a422 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
    a418:	1e5a      	subs	r2, r3, #1
			one_count++;
    a41a:	3001      	adds	r0, #1
		while (bite) {
    a41c:	4013      	ands	r3, r2
			one_count++;
    a41e:	b2c0      	uxtb	r0, r0
		while (bite) {
    a420:	d1fa      	bne.n	a418 <util_ones_count_get+0x14>
	while (octets_len--) {
    a422:	4561      	cmp	r1, ip
    a424:	d1f5      	bne.n	a412 <util_ones_count_get+0xe>
    a426:	4770      	bx	lr
	uint8_t one_count = 0U;
    a428:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    a42a:	4770      	bx	lr

0000a42c <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
    a42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    a430:	4d48      	ldr	r5, [pc, #288]	; (a554 <util_aa_le32+0x128>)
{
    a432:	b083      	sub	sp, #12
    a434:	4607      	mov	r7, r0
    a436:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
    a438:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
    a43a:	2104      	movs	r1, #4
    a43c:	4638      	mov	r0, r7
    a43e:	f009 fcdf 	bl	13e00 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    a442:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
    a444:	231e      	movs	r3, #30
    a446:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
    a44a:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
    a44e:	f04f 0901 	mov.w	r9, #1
    a452:	e00c      	b.n	a46e <util_aa_le32+0x42>
			transitions++;
    a454:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
    a458:	2b1b      	cmp	r3, #27
			transitions++;
    a45a:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
    a45c:	d967      	bls.n	a52e <util_aa_le32+0x102>
				consecutive_cnt = 1U;
    a45e:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
    a462:	2919      	cmp	r1, #25
    a464:	d04e      	beq.n	a504 <util_aa_le32+0xd8>
    a466:	468e      	mov	lr, r1
    a468:	4694      	mov	ip, r2
	while (bit_idx--) {
    a46a:	3b01      	subs	r3, #1
    a46c:	d31e      	bcc.n	a4ac <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
    a46e:	fa20 f203 	lsr.w	r2, r0, r3
    a472:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
    a476:	4594      	cmp	ip, r2
    a478:	d1ec      	bne.n	a454 <util_aa_le32+0x28>
			consecutive_cnt++;
    a47a:	f109 0801 	add.w	r8, r9, #1
    a47e:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
    a482:	f1b8 0f06 	cmp.w	r8, #6
    a486:	d90d      	bls.n	a4a4 <util_aa_le32+0x78>
    a488:	4671      	mov	r1, lr
				aa &= ~BIT(bit_idx);
    a48a:	fa04 fc03 	lsl.w	ip, r4, r3
			if (consecutive_bit) {
    a48e:	b3a2      	cbz	r2, a4fa <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
    a490:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
    a494:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
    a498:	4571      	cmp	r1, lr
    a49a:	d1e6      	bne.n	a46a <util_aa_le32+0x3e>
				transitions++;
    a49c:	3101      	adds	r1, #1
    a49e:	b2c9      	uxtb	r1, r1
    a4a0:	4662      	mov	r2, ip
    a4a2:	e7dc      	b.n	a45e <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
    a4a4:	d149      	bne.n	a53a <util_aa_le32+0x10e>
		     (((bit_idx < 29) && (transitions < 1)) ||
    a4a6:	46c1      	mov	r9, r8
	while (bit_idx--) {
    a4a8:	3b01      	subs	r3, #1
    a4aa:	d2e0      	bcs.n	a46e <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
    a4ac:	ea80 0305 	eor.w	r3, r0, r5
    a4b0:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
    a4b2:	f10d 0c04 	add.w	ip, sp, #4
    a4b6:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
    a4ba:	2200      	movs	r2, #0
		bite = *octets;
    a4bc:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
    a4c0:	b123      	cbz	r3, a4cc <util_aa_le32+0xa0>
			bite &= (bite - 1);
    a4c2:	1e59      	subs	r1, r3, #1
			one_count++;
    a4c4:	3201      	adds	r2, #1
		while (bite) {
    a4c6:	400b      	ands	r3, r1
			one_count++;
    a4c8:	b2d2      	uxtb	r2, r2
		while (bite) {
    a4ca:	d1fa      	bne.n	a4c2 <util_aa_le32+0x96>
	while (octets_len--) {
    a4cc:	45e6      	cmp	lr, ip
    a4ce:	d1f5      	bne.n	a4bc <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
    a4d0:	2a01      	cmp	r2, #1
    a4d2:	d909      	bls.n	a4e8 <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    a4d4:	b283      	uxth	r3, r0
    a4d6:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    a4da:	ea4f 4210 	mov.w	r2, r0, lsr #16
    a4de:	d11b      	bne.n	a518 <util_aa_le32+0xec>
	    !((aa & 0xFF) ^ (aa >> 24))) {
    a4e0:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
    a4e2:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
    a4e6:	d117      	bne.n	a518 <util_aa_le32+0xec>
	if (!retry) {
    a4e8:	3e01      	subs	r6, #1
    a4ea:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    a4ee:	d1a4      	bne.n	a43a <util_aa_le32+0xe>
		return -EFAULT;
    a4f0:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
    a4f4:	b003      	add	sp, #12
    a4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
    a4fa:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
    a4fe:	f04f 0c01 	mov.w	ip, #1
    a502:	e7c9      	b.n	a498 <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
    a504:	3301      	adds	r3, #1
    a506:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
    a50a:	b112      	cbz	r2, a512 <util_aa_le32+0xe6>
				aa &= ~(BIT(bit_idx + 1) - 1);
    a50c:	425b      	negs	r3, r3
    a50e:	4018      	ands	r0, r3
    a510:	e7cc      	b.n	a4ac <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
    a512:	3b01      	subs	r3, #1
    a514:	4318      	orrs	r0, r3
    a516:	e7c9      	b.n	a4ac <util_aa_le32+0x80>
	dst[1] = val >> 8;
    a518:	f3c0 2107 	ubfx	r1, r0, #8, #8
    a51c:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
    a51e:	7038      	strb	r0, [r7, #0]
	return 0;
    a520:	2000      	movs	r0, #0
	dst[1] = val >> 8;
    a522:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
    a524:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
    a526:	70fb      	strb	r3, [r7, #3]
}
    a528:	b003      	add	sp, #12
    a52a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
    a52e:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
    a532:	2901      	cmp	r1, #1
    a534:	d9a9      	bls.n	a48a <util_aa_le32+0x5e>
    a536:	46c1      	mov	r9, r8
    a538:	e793      	b.n	a462 <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
    a53a:	2b1c      	cmp	r3, #28
    a53c:	d904      	bls.n	a548 <util_aa_le32+0x11c>
		     (((bit_idx < 29) && (transitions < 1)) ||
    a53e:	2b1b      	cmp	r3, #27
    a540:	d906      	bls.n	a550 <util_aa_le32+0x124>
    a542:	4694      	mov	ip, r2
    a544:	46c1      	mov	r9, r8
    a546:	e7af      	b.n	a4a8 <util_aa_le32+0x7c>
    a548:	f1be 0f00 	cmp.w	lr, #0
    a54c:	d09c      	beq.n	a488 <util_aa_le32+0x5c>
    a54e:	e7f6      	b.n	a53e <util_aa_le32+0x112>
    a550:	4671      	mov	r1, lr
    a552:	e7ee      	b.n	a532 <util_aa_le32+0x106>
    a554:	8e89bed6 	.word	0x8e89bed6

0000a558 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    a558:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    a55a:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
    a55c:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    a55e:	2bff      	cmp	r3, #255	; 0xff
    a560:	d014      	beq.n	a58c <ticker_dequeue+0x34>
		ticker_current = &node[current];
    a562:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    a566:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    a568:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    a56c:	d028      	beq.n	a5c0 <ticker_dequeue+0x68>
	total = 0U;
    a56e:	f04f 0c00 	mov.w	ip, #0
    a572:	e001      	b.n	a578 <ticker_dequeue+0x20>
		if (current == id) {
    a574:	4299      	cmp	r1, r3
    a576:	d00b      	beq.n	a590 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    a578:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    a57a:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    a57c:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    a57e:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    a580:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    a584:	44a4      	add	ip, r4
		ticker_current = &node[current];
    a586:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    a58a:	d1f3      	bne.n	a574 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    a58c:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    a58e:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    a590:	4571      	cmp	r1, lr
    a592:	d018      	beq.n	a5c6 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
    a594:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    a596:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    a598:	fa0f fe8e 	sxth.w	lr, lr
    a59c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    a5a0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    a5a4:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    a5a8:	7813      	ldrb	r3, [r2, #0]
    a5aa:	2bff      	cmp	r3, #255	; 0xff
    a5ac:	d006      	beq.n	a5bc <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
    a5ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a5b2:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    a5b6:	68ab      	ldr	r3, [r5, #8]
    a5b8:	4403      	add	r3, r0
    a5ba:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
    a5bc:	4460      	add	r0, ip
}
    a5be:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
    a5c0:	469e      	mov	lr, r3
	total = 0U;
    a5c2:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    a5c6:	7813      	ldrb	r3, [r2, #0]
    a5c8:	7743      	strb	r3, [r0, #29]
    a5ca:	e7e4      	b.n	a596 <ticker_dequeue+0x3e>

0000a5cc <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    a5cc:	eba2 0c01 	sub.w	ip, r2, r1
    a5d0:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    a5d4:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    a5d6:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    a5d8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    a5da:	d10a      	bne.n	a5f2 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a5dc:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    a5e0:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    a5e2:	42a3      	cmp	r3, r4
    a5e4:	d914      	bls.n	a610 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
    a5e6:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    a5e8:	2100      	movs	r1, #0
}
    a5ea:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    a5ec:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    a5ee:	6141      	str	r1, [r0, #20]
}
    a5f0:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a5f2:	1a89      	subs	r1, r1, r2
    a5f4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    a5f8:	428b      	cmp	r3, r1
    a5fa:	d806      	bhi.n	a60a <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
    a5fc:	4421      	add	r1, r4
    a5fe:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    a600:	2300      	movs	r3, #0
}
    a602:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    a604:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    a606:	6141      	str	r1, [r0, #20]
}
    a608:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    a60a:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    a60c:	42a3      	cmp	r3, r4
    a60e:	d8ea      	bhi.n	a5e6 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    a610:	1ae1      	subs	r1, r4, r3
    a612:	e7f5      	b.n	a600 <ticks_to_expire_prep+0x34>

0000a614 <ticker_job_list_insert>:
{
    a614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a618:	b087      	sub	sp, #28
    a61a:	4603      	mov	r3, r0
	count_user = instance->count_user;
    a61c:	7a42      	ldrb	r2, [r0, #9]
{
    a61e:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    a620:	6800      	ldr	r0, [r0, #0]
    a622:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    a624:	6858      	ldr	r0, [r3, #4]
    a626:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    a628:	2a00      	cmp	r2, #0
    a62a:	f000 80f4 	beq.w	a816 <ticker_job_list_insert+0x202>
    a62e:	1e53      	subs	r3, r2, #1
    a630:	b2db      	uxtb	r3, r3
    a632:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    a636:	460f      	mov	r7, r1
    a638:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    a63a:	9b03      	ldr	r3, [sp, #12]
    a63c:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    a63e:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    a640:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    a642:	2fff      	cmp	r7, #255	; 0xff
    a644:	d05e      	beq.n	a704 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    a646:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    a64a:	9b02      	ldr	r3, [sp, #8]
    a64c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    a650:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    a652:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    a656:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    a65a:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    a65c:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    a65e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    a662:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    a666:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    a66a:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    a66c:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a670:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    a672:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a676:	d10f      	bne.n	a698 <ticker_job_list_insert+0x84>
    a678:	e0c8      	b.n	a80c <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    a67a:	1a09      	subs	r1, r1, r0
    a67c:	d106      	bne.n	a68c <ticker_job_list_insert+0x78>
    a67e:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    a682:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    a686:	45e2      	cmp	sl, ip
    a688:	f200 8086 	bhi.w	a798 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    a68c:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a690:	2bff      	cmp	r3, #255	; 0xff
    a692:	4691      	mov	r9, r2
    a694:	d072      	beq.n	a77c <ticker_job_list_insert+0x168>
    a696:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    a698:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    a69c:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    a6a0:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    a6a2:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    a6a6:	4288      	cmp	r0, r1
    a6a8:	d9e7      	bls.n	a67a <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    a6aa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    a6ae:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    a6b2:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    a6b6:	d166      	bne.n	a786 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    a6b8:	9b01      	ldr	r3, [sp, #4]
    a6ba:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    a6be:	2aff      	cmp	r2, #255	; 0xff
    a6c0:	d008      	beq.n	a6d4 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    a6c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a6c6:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    a6ca:	f8de 3008 	ldr.w	r3, [lr, #8]
    a6ce:	1a5b      	subs	r3, r3, r1
    a6d0:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    a6d4:	78a3      	ldrb	r3, [r4, #2]
    a6d6:	3301      	adds	r3, #1
    a6d8:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    a6da:	2d00      	cmp	r5, #0
    a6dc:	d0b1      	beq.n	a642 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    a6de:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    a6e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    a6e4:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    a6e6:	2200      	movs	r2, #0
    a6e8:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    a6ea:	b113      	cbz	r3, a6f2 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    a6ec:	6b29      	ldr	r1, [r5, #48]	; 0x30
    a6ee:	4610      	mov	r0, r2
    a6f0:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    a6f2:	6863      	ldr	r3, [r4, #4]
    a6f4:	2b00      	cmp	r3, #0
    a6f6:	d1a4      	bne.n	a642 <ticker_job_list_insert+0x2e>
					ticker->op_context =
    a6f8:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    a6fc:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    a6fe:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    a702:	d1a0      	bne.n	a646 <ticker_job_list_insert+0x32>
    a704:	9b03      	ldr	r3, [sp, #12]
    a706:	7898      	ldrb	r0, [r3, #2]
    a708:	42b0      	cmp	r0, r6
    a70a:	d02f      	beq.n	a76c <ticker_job_list_insert+0x158>
    a70c:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    a710:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    a714:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
    a718:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    a71c:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
    a720:	3601      	adds	r6, #1
    a722:	b2f6      	uxtb	r6, r6
					first = 0U;
    a724:	42b1      	cmp	r1, r6
    a726:	bf08      	it	eq
    a728:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    a72a:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
    a72c:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    a730:	d11a      	bne.n	a768 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    a732:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    a736:	9902      	ldr	r1, [sp, #8]
    a738:	eb08 0348 	add.w	r3, r8, r8, lsl #1
    a73c:	eb01 1403 	add.w	r4, r1, r3, lsl #4
    a740:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    a744:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    a746:	7863      	ldrb	r3, [r4, #1]
    a748:	1a5b      	subs	r3, r3, r1
    a74a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    a74e:	d025      	beq.n	a79c <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    a750:	f04f 0300 	mov.w	r3, #0
    a754:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
    a758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    a75a:	2001      	movs	r0, #1
	user_op->status = status;
    a75c:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    a75e:	b10b      	cbz	r3, a764 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    a760:	6b29      	ldr	r1, [r5, #48]	; 0x30
    a762:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    a764:	f89b 0002 	ldrb.w	r0, [fp, #2]
    a768:	42b0      	cmp	r0, r6
    a76a:	d1d1      	bne.n	a710 <ticker_job_list_insert+0xfc>
	while (count_user--) {
    a76c:	9a03      	ldr	r2, [sp, #12]
    a76e:	9905      	ldr	r1, [sp, #20]
    a770:	4291      	cmp	r1, r2
    a772:	f1a2 0308 	sub.w	r3, r2, #8
    a776:	d04e      	beq.n	a816 <ticker_job_list_insert+0x202>
    a778:	9303      	str	r3, [sp, #12]
    a77a:	e75e      	b.n	a63a <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    a77c:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    a780:	f88b 3000 	strb.w	r3, [fp]
    a784:	461a      	mov	r2, r3
		node[previous].next = id;
    a786:	fa0f f989 	sxth.w	r9, r9
    a78a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    a78e:	ea4f 1909 	mov.w	r9, r9, lsl #4
    a792:	f80e 8009 	strb.w	r8, [lr, r9]
    a796:	e792      	b.n	a6be <ticker_job_list_insert+0xaa>
    a798:	4601      	mov	r1, r0
    a79a:	e786      	b.n	a6aa <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    a79c:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    a79e:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
    a7a0:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
    a7a4:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
    a7a6:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    a7aa:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    a7ae:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
    a7b0:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    a7b4:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    a7b8:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    a7bc:	d024      	beq.n	a808 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
    a7be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a7c2:	1ad3      	subs	r3, r2, r3
    a7c4:	fab3 f383 	clz	r3, r3
    a7c8:	095b      	lsrs	r3, r3, #5
    a7ca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    a7ce:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    a7d2:	429a      	cmp	r2, r3
    a7d4:	bf88      	it	hi
    a7d6:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
    a7d8:	69ab      	ldr	r3, [r5, #24]
    a7da:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    a7dc:	69eb      	ldr	r3, [r5, #28]
    a7de:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    a7e0:	6a2b      	ldr	r3, [r5, #32]
    a7e2:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    a7e4:	68ab      	ldr	r3, [r5, #8]
    a7e6:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    a7e8:	2300      	movs	r3, #0
	ticker->lazy_periodic =
    a7ea:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
    a7ec:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    a7ee:	686a      	ldr	r2, [r5, #4]
    a7f0:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    a7f2:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    a7f4:	f7ff feea 	bl	a5cc <ticks_to_expire_prep>
	ticker->force = 1U;
    a7f8:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    a7fc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    a800:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
    a804:	70e3      	strb	r3, [r4, #3]
}
    a806:	e729      	b.n	a65c <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
    a808:	461a      	mov	r2, r3
    a80a:	e7e5      	b.n	a7d8 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
    a80c:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    a810:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    a814:	e75e      	b.n	a6d4 <ticker_job_list_insert+0xc0>
}
    a816:	b007      	add	sp, #28
    a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a81c <ticker_worker>:
{
    a81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    a820:	7f82      	ldrb	r2, [r0, #30]
{
    a822:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    a824:	2301      	movs	r3, #1
	if (instance->job_guard) {
    a826:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    a828:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    a82a:	2a00      	cmp	r2, #0
    a82c:	d15b      	bne.n	a8e6 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
    a82e:	7f43      	ldrb	r3, [r0, #29]
    a830:	2bff      	cmp	r3, #255	; 0xff
    a832:	4681      	mov	r9, r0
    a834:	d056      	beq.n	a8e4 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    a836:	f00b fb59 	bl	15eec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a83a:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    a83e:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    a842:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a846:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    a848:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    a84a:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    a84e:	f000 813c 	beq.w	aaca <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    a852:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    a856:	42bb      	cmp	r3, r7
    a858:	bf94      	ite	ls
    a85a:	2300      	movls	r3, #0
    a85c:	2301      	movhi	r3, #1
    a85e:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    a860:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
    a864:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
    a868:	f000 8145 	beq.w	aaf6 <ticker_worker+0x2da>
	ticks_expired = 0U;
    a86c:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
    a870:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    a874:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    a878:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
    a87c:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    a880:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    a882:	42bb      	cmp	r3, r7
    a884:	d837      	bhi.n	a8f6 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    a886:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
    a888:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
    a88c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    a88e:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    a890:	7863      	ldrb	r3, [r4, #1]
    a892:	1a5b      	subs	r3, r3, r1
    a894:	b2db      	uxtb	r3, r3
    a896:	2b01      	cmp	r3, #1
    a898:	d12a      	bne.n	a8f0 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
    a89a:	69a6      	ldr	r6, [r4, #24]
    a89c:	2e00      	cmp	r6, #0
    a89e:	d054      	beq.n	a94a <ticker_worker+0x12e>
    a8a0:	9b03      	ldr	r3, [sp, #12]
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	d04c      	beq.n	a940 <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
    a8a6:	8be3      	ldrh	r3, [r4, #30]
    a8a8:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    a8aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    a8ac:	b13b      	cbz	r3, a8be <ticker_worker+0xa2>
    a8ae:	681a      	ldr	r2, [r3, #0]
    a8b0:	b11a      	cbz	r2, a8ba <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    a8b2:	7a1a      	ldrb	r2, [r3, #8]
    a8b4:	2a00      	cmp	r2, #0
    a8b6:	f000 80ef 	beq.w	aa98 <ticker_worker+0x27c>
				ext_data->reschedule_state =
    a8ba:	2200      	movs	r2, #0
    a8bc:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    a8be:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    a8c0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    a8c4:	3201      	adds	r2, #1
    a8c6:	b292      	uxth	r2, r2
    a8c8:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    a8ca:	b178      	cbz	r0, a8ec <ticker_worker+0xd0>
    a8cc:	8ba0      	ldrh	r0, [r4, #28]
    a8ce:	4290      	cmp	r0, r2
    a8d0:	d20c      	bcs.n	a8ec <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	f000 80fc 	beq.w	aad0 <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    a8d8:	7a1a      	ldrb	r2, [r3, #8]
    a8da:	2a01      	cmp	r2, #1
    a8dc:	d006      	beq.n	a8ec <ticker_worker+0xd0>
			must_expire_skip = 1U;
    a8de:	f04f 0c01 	mov.w	ip, #1
    a8e2:	e036      	b.n	a952 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    a8e4:	77c2      	strb	r2, [r0, #31]
}
    a8e6:	b00f      	add	sp, #60	; 0x3c
    a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    a8ec:	3901      	subs	r1, #1
    a8ee:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    a8f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    a8f4:	d1be      	bne.n	a874 <ticker_worker+0x58>
    a8f6:	f8dd 9010 	ldr.w	r9, [sp, #16]
    a8fa:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    a8fc:	f899 300b 	ldrb.w	r3, [r9, #11]
    a900:	f899 200a 	ldrb.w	r2, [r9, #10]
    a904:	429a      	cmp	r2, r3
    a906:	d10a      	bne.n	a91e <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
    a908:	3201      	adds	r2, #1
    a90a:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    a90c:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    a90e:	bf1c      	itt	ne
    a910:	4613      	movne	r3, r2
    a912:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    a914:	9a06      	ldr	r2, [sp, #24]
    a916:	f889 200b 	strb.w	r2, [r9, #11]
    a91a:	bf08      	it	eq
    a91c:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    a91e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a922:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    a926:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
    a928:	2200      	movs	r2, #0
    a92a:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a92e:	464b      	mov	r3, r9
    a930:	2201      	movs	r2, #1
    a932:	2104      	movs	r1, #4
    a934:	2003      	movs	r0, #3
    a936:	46a4      	mov	ip, r4
}
    a938:	b00f      	add	sp, #60	; 0x3c
    a93a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a93e:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    a940:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    a944:	9307      	str	r3, [sp, #28]
    a946:	3380      	adds	r3, #128	; 0x80
    a948:	d141      	bne.n	a9ce <ticker_worker+0x1b2>
		if (ticker->ext_data) {
    a94a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a94c:	b1f3      	cbz	r3, a98c <ticker_worker+0x170>
    a94e:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    a952:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    a954:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    a956:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    a958:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
    a95a:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
    a95c:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    a95e:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    a960:	2d00      	cmp	r5, #0
    a962:	d0c5      	beq.n	a8f0 <ticker_worker+0xd4>
					   ticks_expired -
    a964:	9b04      	ldr	r3, [sp, #16]
    a966:	6960      	ldr	r0, [r4, #20]
    a968:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    a96a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a96c:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    a96e:	ebaa 0000 	sub.w	r0, sl, r0
    a972:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    a974:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    a978:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
    a97a:	f1bc 0f00 	cmp.w	ip, #0
    a97e:	d016      	beq.n	a9ae <ticker_worker+0x192>
    a980:	e9cd 3600 	strd	r3, r6, [sp]
    a984:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a988:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    a98a:	e7b1      	b.n	a8f0 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
    a98c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    a98e:	3901      	subs	r1, #1
    a990:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    a992:	2d00      	cmp	r5, #0
    a994:	d0ac      	beq.n	a8f0 <ticker_worker+0xd4>
			ticks_drift = 0U;
    a996:	4619      	mov	r1, r3
					   ticks_expired -
    a998:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    a99a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a99c:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    a99e:	ebaa 0003 	sub.w	r0, sl, r3
    a9a2:	9b04      	ldr	r3, [sp, #16]
    a9a4:	695b      	ldr	r3, [r3, #20]
    a9a6:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
    a9a8:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
    a9aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    a9ae:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    a9b2:	e9cd 3600 	strd	r3, r6, [sp]
    a9b6:	4663      	mov	r3, ip
    a9b8:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    a9ba:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    a9bc:	2b00      	cmp	r3, #0
    a9be:	9b03      	ldr	r3, [sp, #12]
    a9c0:	bf18      	it	ne
    a9c2:	2301      	movne	r3, #1
    a9c4:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
    a9c6:	2300      	movs	r3, #0
    a9c8:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    a9ca:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    a9cc:	e790      	b.n	a8f0 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    a9ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    a9d2:	d0ba      	beq.n	a94a <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
    a9d4:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    a9d6:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    a9d8:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
    a9da:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    a9dc:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
    a9de:	bf28      	it	cs
    a9e0:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
    a9e2:	fb02 5005 	mla	r0, r2, r5, r5
    a9e6:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
    a9e8:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    a9ea:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
    a9ee:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
    a9f0:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
    a9f4:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
    a9f6:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
    a9f8:	46a0      	mov	r8, r4
    a9fa:	f04f 0c00 	mov.w	ip, #0
    a9fe:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
    aa00:	b21b      	sxth	r3, r3
    aa02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    aa06:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
    aa0a:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    aa0c:	f8d2 e008 	ldr.w	lr, [r2, #8]
    aa10:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    aa12:	4566      	cmp	r6, ip
    aa14:	d339      	bcc.n	aa8a <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
    aa16:	6991      	ldr	r1, [r2, #24]
    aa18:	b399      	cbz	r1, aa82 <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
    aa1a:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    aa1c:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    aa1e:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
    aa22:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    aa26:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
    aa28:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
    aa2a:	bf28      	it	cs
    aa2c:	1a0d      	subcs	r5, r1, r0
					  0U :
    aa2e:	f1b9 0f00 	cmp.w	r9, #0
    aa32:	d03e      	beq.n	aab2 <ticker_worker+0x296>
    aa34:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
    aa38:	b3bc      	cbz	r4, aaaa <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    aa3a:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
    aa3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
    aa42:	45f1      	cmp	r9, lr
    aa44:	bf8c      	ite	hi
    aa46:	f04f 0e01 	movhi.w	lr, #1
    aa4a:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    aa4e:	bf34      	ite	cc
    aa50:	f04f 0901 	movcc.w	r9, #1
    aa54:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
    aa58:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
    aa5a:	f892 a003 	ldrb.w	sl, [r2, #3]
    aa5e:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
    aa62:	d30e      	bcc.n	aa82 <ticker_worker+0x266>
    aa64:	4592      	cmp	sl, r2
    aa66:	d829      	bhi.n	aabc <ticker_worker+0x2a0>
			    (next_force ||
    aa68:	f117 0f80 	cmn.w	r7, #128	; 0x80
    aa6c:	d026      	beq.n	aabc <ticker_worker+0x2a0>
			     next_is_critical ||
    aa6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    aa70:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
    aa72:	4295      	cmp	r5, r2
    aa74:	dd02      	ble.n	aa7c <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
    aa76:	f1be 0f00 	cmp.w	lr, #0
    aa7a:	d01f      	beq.n	aabc <ticker_worker+0x2a0>
    aa7c:	9a07      	ldr	r2, [sp, #28]
    aa7e:	42ba      	cmp	r2, r7
    aa80:	d019      	beq.n	aab6 <ticker_worker+0x29a>
			id_head = ticker_next->next;
    aa82:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
    aa86:	2bff      	cmp	r3, #255	; 0xff
    aa88:	d1ba      	bne.n	aa00 <ticker_worker+0x1e4>
    aa8a:	4644      	mov	r4, r8
    aa8c:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    aa90:	990a      	ldr	r1, [sp, #40]	; 0x28
    aa92:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    aa96:	e758      	b.n	a94a <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
    aa98:	8ba2      	ldrh	r2, [r4, #28]
    aa9a:	9805      	ldr	r0, [sp, #20]
    aa9c:	4282      	cmp	r2, r0
    aa9e:	f63f af0c 	bhi.w	a8ba <ticker_worker+0x9e>
				ext_data->reschedule_state =
    aaa2:	f04f 0201 	mov.w	r2, #1
    aaa6:	721a      	strb	r2, [r3, #8]
    aaa8:	e709      	b.n	a8be <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
    aaaa:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
    aaae:	46a1      	mov	r9, r4
    aab0:	e7d2      	b.n	aa58 <ticker_worker+0x23c>
					  0U :
    aab2:	46ce      	mov	lr, r9
    aab4:	e7c0      	b.n	aa38 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
    aab6:	f1b9 0f00 	cmp.w	r9, #0
    aaba:	d0e2      	beq.n	aa82 <ticker_worker+0x266>
    aabc:	4644      	mov	r4, r8
    aabe:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    aac2:	990a      	ldr	r1, [sp, #40]	; 0x28
    aac4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    aac8:	e6ef      	b.n	a8aa <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    aaca:	9b06      	ldr	r3, [sp, #24]
    aacc:	9303      	str	r3, [sp, #12]
    aace:	e6c7      	b.n	a860 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    aad0:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    aad2:	3901      	subs	r1, #1
    aad4:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    aad6:	2d00      	cmp	r5, #0
    aad8:	f43f af0a 	beq.w	a8f0 <ticker_worker+0xd4>
			ticks_drift = 0U;
    aadc:	4619      	mov	r1, r3
					   ticks_expired -
    aade:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    aae0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    aae2:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    aae4:	ebaa 0003 	sub.w	r0, sl, r3
    aae8:	9b04      	ldr	r3, [sp, #16]
    aaea:	695b      	ldr	r3, [r3, #20]
    aaec:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    aaee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    aaf2:	78e3      	ldrb	r3, [r4, #3]
    aaf4:	e744      	b.n	a980 <ticker_worker+0x164>
	ticks_expired = 0U;
    aaf6:	2300      	movs	r3, #0
    aaf8:	4619      	mov	r1, r3
    aafa:	e6ff      	b.n	a8fc <ticker_worker+0xe0>

0000aafc <ticker_job>:
	if (instance->worker_trigger) {
    aafc:	7fc3      	ldrb	r3, [r0, #31]
    aafe:	2b00      	cmp	r3, #0
    ab00:	f040 8431 	bne.w	b366 <ticker_job+0x86a>
{
    ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    ab08:	7f82      	ldrb	r2, [r0, #30]
{
    ab0a:	b08d      	sub	sp, #52	; 0x34
    ab0c:	4683      	mov	fp, r0
	if (instance->job_guard) {
    ab0e:	2a00      	cmp	r2, #0
    ab10:	f040 808c 	bne.w	ac2c <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ab14:	7a83      	ldrb	r3, [r0, #10]
    ab16:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
    ab18:	2001      	movs	r0, #1
    ab1a:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ab1e:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    ab20:	f8db 0014 	ldr.w	r0, [fp, #20]
    ab24:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ab26:	f000 8440 	beq.w	b3aa <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
    ab2a:	3301      	adds	r3, #1
    ab2c:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    ab2e:	2b02      	cmp	r3, #2
		idx = 0U;
    ab30:	bf08      	it	eq
    ab32:	4613      	moveq	r3, r2
		ticks_elapsed =
    ab34:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    ab38:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
    ab3c:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
    ab40:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    ab42:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
    ab44:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
    ab46:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
    ab48:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    ab4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
    ab4e:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    ab52:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
    ab56:	f8db 3000 	ldr.w	r3, [fp]
    ab5a:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    ab5c:	f8db 3004 	ldr.w	r3, [fp, #4]
    ab60:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    ab62:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
    ab64:	9206      	str	r2, [sp, #24]
	while (count_user--) {
    ab66:	b2db      	uxtb	r3, r3
    ab68:	2a00      	cmp	r2, #0
    ab6a:	f000 81d5 	beq.w	af18 <ticker_job+0x41c>
		flag_elapsed = 1U;
    ab6e:	2201      	movs	r2, #1
    ab70:	920b      	str	r2, [sp, #44]	; 0x2c
    ab72:	9a05      	ldr	r2, [sp, #20]
    ab74:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
    ab78:	2300      	movs	r3, #0
    ab7a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    ab7c:	23ff      	movs	r3, #255	; 0xff
    ab7e:	9301      	str	r3, [sp, #4]
    ab80:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
    ab82:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
    ab86:	f89a c003 	ldrb.w	ip, [sl, #3]
    ab8a:	f89a 7002 	ldrb.w	r7, [sl, #2]
    ab8e:	4567      	cmp	r7, ip
    ab90:	d044      	beq.n	ac1c <ticker_job+0x120>
			if (middle == user->count_user_op) {
    ab92:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
    ab96:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
    ab98:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
    ab9a:	b2db      	uxtb	r3, r3
				middle = 0U;
    ab9c:	429a      	cmp	r2, r3
    ab9e:	bf08      	it	eq
    aba0:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
    aba2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    aba6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
    abaa:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    abae:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
    abb2:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
    abb4:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    abb8:	d942      	bls.n	ac40 <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    abba:	2808      	cmp	r0, #8
    abbc:	d842      	bhi.n	ac44 <ticker_job+0x148>
			ticker = &node[user_op->id];
    abbe:	7861      	ldrb	r1, [r4, #1]
    abc0:	9a00      	ldr	r2, [sp, #0]
    abc2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    abc6:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
    abca:	786a      	ldrb	r2, [r5, #1]
    abcc:	f895 e002 	ldrb.w	lr, [r5, #2]
    abd0:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    abd4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    abd8:	d034      	beq.n	ac44 <ticker_job+0x148>
			    (state == 0U) ||
    abda:	2805      	cmp	r0, #5
    abdc:	d041      	beq.n	ac62 <ticker_job+0x166>
			if (state == 1U) {
    abde:	2a01      	cmp	r2, #1
    abe0:	f040 8118 	bne.w	ae14 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    abe4:	2806      	cmp	r0, #6
    abe6:	d006      	beq.n	abf6 <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    abe8:	4658      	mov	r0, fp
    abea:	f7ff fcb5 	bl	a558 <ticker_dequeue>
			ticker->req = ticker->ack;
    abee:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    abf0:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    abf2:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    abf4:	7861      	ldrb	r1, [r4, #1]
    abf6:	f89b 301c 	ldrb.w	r3, [fp, #28]
    abfa:	428b      	cmp	r3, r1
    abfc:	f000 80d9 	beq.w	adb2 <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    ac00:	2000      	movs	r0, #0
    ac02:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    ac06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
    ac08:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    ac0a:	b10b      	cbz	r3, ac10 <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ac0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ac0e:	4798      	blx	r3
		while (user->middle != user->last) {
    ac10:	f89a c003 	ldrb.w	ip, [sl, #3]
    ac14:	f89a 7002 	ldrb.w	r7, [sl, #2]
    ac18:	4567      	cmp	r7, ip
    ac1a:	d1ba      	bne.n	ab92 <ticker_job+0x96>
	while (count_user--) {
    ac1c:	9a05      	ldr	r2, [sp, #20]
    ac1e:	4552      	cmp	r2, sl
    ac20:	f1aa 0308 	sub.w	r3, sl, #8
    ac24:	f000 8107 	beq.w	ae36 <ticker_job+0x33a>
    ac28:	469a      	mov	sl, r3
    ac2a:	e7aa      	b.n	ab82 <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    ac2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ac2e:	2104      	movs	r1, #4
    ac30:	4603      	mov	r3, r0
    ac32:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ac34:	2004      	movs	r0, #4
    ac36:	46a4      	mov	ip, r4
}
    ac38:	b00d      	add	sp, #52	; 0x34
    ac3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    ac3e:	4760      	bx	ip
    ac40:	461f      	mov	r7, r3
    ac42:	e7a4      	b.n	ab8e <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    ac44:	2200      	movs	r2, #0
    ac46:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    ac4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
    ac4c:	2001      	movs	r0, #1
    ac4e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    ac50:	2a00      	cmp	r2, #0
    ac52:	d0f5      	beq.n	ac40 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ac54:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ac56:	4790      	blx	r2
		while (user->middle != user->last) {
    ac58:	f89a c003 	ldrb.w	ip, [sl, #3]
    ac5c:	f89a 7002 	ldrb.w	r7, [sl, #2]
    ac60:	e795      	b.n	ab8e <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    ac62:	6860      	ldr	r0, [r4, #4]
    ac64:	b948      	cbnz	r0, ac7a <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    ac66:	68a0      	ldr	r0, [r4, #8]
    ac68:	b938      	cbnz	r0, ac7a <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    ac6a:	68e0      	ldr	r0, [r4, #12]
    ac6c:	b928      	cbnz	r0, ac7a <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    ac6e:	6920      	ldr	r0, [r4, #16]
    ac70:	b918      	cbnz	r0, ac7a <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
    ac72:	6960      	ldr	r0, [r4, #20]
    ac74:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    ac78:	d0e4      	beq.n	ac44 <ticker_job+0x148>
			if (state == 1U) {
    ac7a:	2a01      	cmp	r2, #1
    ac7c:	f040 80ca 	bne.w	ae14 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ac80:	4658      	mov	r0, fp
    ac82:	f7ff fc69 	bl	a558 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    ac86:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    ac8a:	60a8      	str	r0, [r5, #8]
    ac8c:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    ac8e:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
    ac90:	f00b f92c 	bl	15eec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ac94:	9b02      	ldr	r3, [sp, #8]
    ac96:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    ac98:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ac9a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    ac9e:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
    aca0:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
    aca2:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
    aca4:	f240 80af 	bls.w	ae06 <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
    aca8:	696b      	ldr	r3, [r5, #20]
    acaa:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
    acac:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
    acae:	f8d5 c004 	ldr.w	ip, [r5, #4]
    acb2:	f1bc 0f00 	cmp.w	ip, #0
    acb6:	d051      	beq.n	ad5c <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
    acb8:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
    acba:	2b00      	cmp	r3, #0
    acbc:	d04e      	beq.n	ad5c <ticker_job+0x260>
		user_op->params.update.lazy--;
    acbe:	3b01      	subs	r3, #1
    acc0:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    acc2:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
    acc4:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
    acc6:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    acc8:	d223      	bcs.n	ad12 <ticker_job+0x216>
    acca:	f10c 0e01 	add.w	lr, ip, #1
    acce:	f8cd 8018 	str.w	r8, [sp, #24]
    acd2:	940a      	str	r4, [sp, #40]	; 0x28
    acd4:	e018      	b.n	ad08 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
    acd6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    acd8:	f8df 8228 	ldr.w	r8, [pc, #552]	; af04 <ticker_job+0x408>
    acdc:	4c8a      	ldr	r4, [pc, #552]	; (af08 <ticker_job+0x40c>)
    acde:	4488      	add	r8, r1
    ace0:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    ace2:	bf84      	itt	hi
    ace4:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    ace8:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    acec:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
    acee:	6a2c      	ldr	r4, [r5, #32]
    acf0:	bf94      	ite	ls
    acf2:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    acf4:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
    acf8:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    acfa:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
    acfc:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
    acfe:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ad00:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
    ad02:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
    ad04:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ad06:	d201      	bcs.n	ad0c <ticker_job+0x210>
    ad08:	429f      	cmp	r7, r3
    ad0a:	d3e4      	bcc.n	acd6 <ticker_job+0x1da>
    ad0c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ad10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ad12:	42bb      	cmp	r3, r7
    ad14:	d221      	bcs.n	ad5a <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
    ad16:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    ad1a:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
    ad1e:	9006      	str	r0, [sp, #24]
    ad20:	940a      	str	r4, [sp, #40]	; 0x28
    ad22:	e005      	b.n	ad30 <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ad24:	3301      	adds	r3, #1
    ad26:	b29b      	uxth	r3, r3
    ad28:	4660      	mov	r0, ip
    ad2a:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
    ad2c:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ad2e:	d011      	beq.n	ad54 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
    ad30:	4874      	ldr	r0, [pc, #464]	; (af04 <ticker_job+0x408>)
    ad32:	4c75      	ldr	r4, [pc, #468]	; (af08 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
    ad34:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
    ad36:	1808      	adds	r0, r1, r0
    ad38:	42a0      	cmp	r0, r4
    ad3a:	d8f3      	bhi.n	ad24 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ad3c:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
    ad3e:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ad40:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ad44:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ad46:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ad4a:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    ad4c:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
    ad50:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    ad52:	d1ed      	bne.n	ad30 <ticker_job+0x234>
    ad54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ad56:	6269      	str	r1, [r5, #36]	; 0x24
    ad58:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    ad5a:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    ad5c:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
    ad5e:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
    ad60:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
    ad62:	440a      	add	r2, r1
    ad64:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    ad66:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    ad68:	4403      	add	r3, r0
    ad6a:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    ad6c:	b11a      	cbz	r2, ad76 <ticker_job+0x27a>
    ad6e:	6813      	ldr	r3, [r2, #0]
    ad70:	b10b      	cbz	r3, ad76 <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
    ad72:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    ad74:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    ad76:	464a      	mov	r2, r9
    ad78:	9902      	ldr	r1, [sp, #8]
    ad7a:	4628      	mov	r0, r5
    ad7c:	f7ff fc26 	bl	a5cc <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    ad80:	68e2      	ldr	r2, [r4, #12]
    ad82:	69ab      	ldr	r3, [r5, #24]
    ad84:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    ad86:	6922      	ldr	r2, [r4, #16]
    ad88:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    ad8a:	bf8c      	ite	hi
    ad8c:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    ad8e:	2300      	movls	r3, #0
    ad90:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    ad92:	7da3      	ldrb	r3, [r4, #22]
    ad94:	b103      	cbz	r3, ad98 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
    ad96:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    ad98:	7de3      	ldrb	r3, [r4, #23]
    ad9a:	b113      	cbz	r3, ada2 <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    ad9c:	3b01      	subs	r3, #1
    ad9e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    ada2:	9b01      	ldr	r3, [sp, #4]
    ada4:	702b      	strb	r3, [r5, #0]
		ticker->req++;
    ada6:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    ada8:	7862      	ldrb	r2, [r4, #1]
    adaa:	9201      	str	r2, [sp, #4]
		ticker->req++;
    adac:	3301      	adds	r3, #1
    adae:	706b      	strb	r3, [r5, #1]
    adb0:	e726      	b.n	ac00 <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
    adb2:	23ff      	movs	r3, #255	; 0xff
    adb4:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    adb8:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
    adbc:	2b06      	cmp	r3, #6
    adbe:	d013      	beq.n	ade8 <ticker_job+0x2ec>
    adc0:	2b08      	cmp	r3, #8
    adc2:	d011      	beq.n	ade8 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
    adc4:	f00b f892 	bl	15eec <cntr_cnt_get>
			ticks_current = instance->ticks_current;
    adc8:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    adcc:	1a83      	subs	r3, r0, r2
    adce:	021d      	lsls	r5, r3, #8
    add0:	d410      	bmi.n	adf4 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
    add2:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    add4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    add8:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    adda:	f8db 2018 	ldr.w	r2, [fp, #24]
    adde:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    ade0:	bf88      	it	hi
    ade2:	f8cb 3018 	strhi.w	r3, [fp, #24]
    ade6:	e70b      	b.n	ac00 <ticker_job+0x104>
				ticks_at_yield =
    ade8:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
    adea:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    adee:	1a83      	subs	r3, r0, r2
    adf0:	021d      	lsls	r5, r3, #8
    adf2:	d5ee      	bpl.n	add2 <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    adf4:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    adf6:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    adf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    adfc:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    adfe:	bf34      	ite	cc
    ae00:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
    ae02:	2300      	movcs	r3, #0
    ae04:	e7e9      	b.n	adda <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    ae06:	696b      	ldr	r3, [r5, #20]
    ae08:	1bda      	subs	r2, r3, r7
    ae0a:	1853      	adds	r3, r2, r1
    ae0c:	9304      	str	r3, [sp, #16]
    ae0e:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
    ae10:	2200      	movs	r2, #0
    ae12:	e74c      	b.n	acae <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    ae14:	2104      	movs	r1, #4
    ae16:	465b      	mov	r3, fp
    ae18:	2201      	movs	r2, #1
    ae1a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    ae1e:	4608      	mov	r0, r1
    ae20:	47a0      	blx	r4
	while (count_user--) {
    ae22:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
    ae24:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
    ae28:	2301      	movs	r3, #1
	while (count_user--) {
    ae2a:	4552      	cmp	r2, sl
				pending = 1U;
    ae2c:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    ae2e:	f1aa 0308 	sub.w	r3, sl, #8
    ae32:	f47f aef9 	bne.w	ac28 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    ae36:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
    ae3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ae3c:	1a9b      	subs	r3, r3, r2
    ae3e:	bf18      	it	ne
    ae40:	2301      	movne	r3, #1
    ae42:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    ae44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae46:	2b00      	cmp	r3, #0
    ae48:	d16a      	bne.n	af20 <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
    ae4a:	9901      	ldr	r1, [sp, #4]
    ae4c:	4658      	mov	r0, fp
    ae4e:	f7ff fbe1 	bl	a614 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    ae52:	f89b 301d 	ldrb.w	r3, [fp, #29]
    ae56:	9300      	str	r3, [sp, #0]
    ae58:	9b00      	ldr	r3, [sp, #0]
    ae5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ae5c:	4293      	cmp	r3, r2
    ae5e:	f000 826c 	beq.w	b33a <ticker_job+0x83e>
	if (!pending) {
    ae62:	9b08      	ldr	r3, [sp, #32]
    ae64:	2b00      	cmp	r3, #0
    ae66:	f000 81e6 	beq.w	b236 <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
    ae6a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    ae6e:	9300      	str	r3, [sp, #0]
    ae70:	9b00      	ldr	r3, [sp, #0]
    ae72:	2bff      	cmp	r3, #255	; 0xff
    ae74:	f000 82c4 	beq.w	b400 <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
    ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae7a:	2bff      	cmp	r3, #255	; 0xff
    ae7c:	f000 82cb 	beq.w	b416 <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
    ae80:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
    ae82:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    ae86:	f8df 9084 	ldr.w	r9, [pc, #132]	; af0c <ticker_job+0x410>
    ae8a:	f8df 8084 	ldr.w	r8, [pc, #132]	; af10 <ticker_job+0x414>
    ae8e:	4f21      	ldr	r7, [pc, #132]	; (af14 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
    ae90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    ae94:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    ae98:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    ae9a:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    ae9c:	f00b f826 	bl	15eec <cntr_cnt_get>
		cc = instance->ticks_current;
    aea0:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    aea4:	1b03      	subs	r3, r0, r4
    aea6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    aeaa:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    aeac:	42b3      	cmp	r3, r6
    aeae:	bf2c      	ite	cs
    aeb0:	18e4      	addcs	r4, r4, r3
    aeb2:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    aeb4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    aeb8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
    aebc:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    aebe:	4620      	mov	r0, r4
    aec0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    aec2:	f00b f813 	bl	15eec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    aec6:	eba0 030a 	sub.w	r3, r0, sl
    aeca:	eba4 040a 	sub.w	r4, r4, sl
    aece:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    aed2:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    aed4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    aed8:	42a3      	cmp	r3, r4
		i--;
    aeda:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    aede:	f240 8233 	bls.w	b348 <ticker_job+0x84c>
		LL_ASSERT(i);
    aee2:	2d00      	cmp	r5, #0
    aee4:	d1da      	bne.n	ae9c <ticker_job+0x3a0>
    aee6:	f640 133e 	movw	r3, #2366	; 0x93e
    aeea:	464a      	mov	r2, r9
    aeec:	4641      	mov	r1, r8
    aeee:	4638      	mov	r0, r7
    aef0:	f010 f8e1 	bl	1b0b6 <printk>
    aef4:	4040      	eors	r0, r0
    aef6:	f380 8811 	msr	BASEPRI, r0
    aefa:	f04f 0003 	mov.w	r0, #3
    aefe:	df02      	svc	2
    af00:	e7cc      	b.n	ae9c <ticker_job+0x3a0>
    af02:	bf00      	nop
    af04:	ff172b5a 	.word	0xff172b5a
    af08:	7f172b59 	.word	0x7f172b59
    af0c:	00020374 	.word	0x00020374
    af10:	00020420 	.word	0x00020420
    af14:	000203b4 	.word	0x000203b4
	pending = 0U;
    af18:	9b06      	ldr	r3, [sp, #24]
    af1a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    af1c:	23ff      	movs	r3, #255	; 0xff
    af1e:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    af20:	f00a ffe4 	bl	15eec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    af24:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    af26:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    af2a:	1ac3      	subs	r3, r0, r3
    af2c:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    af30:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    af32:	f8db 3000 	ldr.w	r3, [fp]
    af36:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
    af38:	d050      	beq.n	afdc <ticker_job+0x4e0>
	ticks_expired = 0U;
    af3a:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
    af3c:	f8df 8290 	ldr.w	r8, [pc, #656]	; b1d0 <ticker_job+0x6d4>
    af40:	f8df 9290 	ldr.w	r9, [pc, #656]	; b1d4 <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
    af44:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
    af46:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
    af48:	9a00      	ldr	r2, [sp, #0]
    af4a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    af4e:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    af52:	011b      	lsls	r3, r3, #4
    af54:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
    af56:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    af58:	429f      	cmp	r7, r3
    af5a:	f0c0 8243 	bcc.w	b3e4 <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
    af5e:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
    af60:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
    af64:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
    af68:	441a      	add	r2, r3
    af6a:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    af6c:	f8db 2018 	ldr.w	r2, [fp, #24]
    af70:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    af72:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
    af76:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    af7a:	bf25      	ittet	cs
    af7c:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    af80:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    af84:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    af86:	2300      	movcs	r3, #0
    af88:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    af8c:	78a2      	ldrb	r2, [r4, #2]
    af8e:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    af90:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    af92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
    af94:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
    af96:	1a9b      	subs	r3, r3, r2
    af98:	b2db      	uxtb	r3, r3
    af9a:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
    af9c:	9b00      	ldr	r3, [sp, #0]
    af9e:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    afa2:	b118      	cbz	r0, afac <ticker_job+0x4b0>
    afa4:	9b05      	ldr	r3, [sp, #20]
    afa6:	2b02      	cmp	r3, #2
    afa8:	f000 8135 	beq.w	b216 <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
    afac:	2300      	movs	r3, #0
    afae:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    afb0:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    afb4:	2d00      	cmp	r5, #0
    afb6:	f040 80da 	bne.w	b16e <ticker_job+0x672>
    afba:	b119      	cbz	r1, afc4 <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    afbc:	7a09      	ldrb	r1, [r1, #8]
    afbe:	2901      	cmp	r1, #1
    afc0:	f000 8111 	beq.w	b1e6 <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
    afc4:	9b05      	ldr	r3, [sp, #20]
    afc6:	b123      	cbz	r3, afd2 <ticker_job+0x4d6>
    afc8:	2b01      	cmp	r3, #1
    afca:	d045      	beq.n	b058 <ticker_job+0x55c>
    afcc:	f1be 0f00 	cmp.w	lr, #0
    afd0:	d142      	bne.n	b058 <ticker_job+0x55c>
			ticker->req = ticker->ack;
    afd2:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    afd4:	f89b 601d 	ldrb.w	r6, [fp, #29]
    afd8:	2eff      	cmp	r6, #255	; 0xff
    afda:	d1b5      	bne.n	af48 <ticker_job+0x44c>
			flag_compare_update = 1U;
    afdc:	9b06      	ldr	r3, [sp, #24]
    afde:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    afe0:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
    afe2:	4296      	cmp	r6, r2
    afe4:	bf18      	it	ne
    afe6:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    afe8:	4658      	mov	r0, fp
			flag_compare_update = 1U;
    afea:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
    afec:	f7ff fb12 	bl	a614 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    aff0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
    aff4:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
    aff8:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
    affc:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
    affe:	9b00      	ldr	r3, [sp, #0]
    b000:	2bff      	cmp	r3, #255	; 0xff
    b002:	d00f      	beq.n	b024 <ticker_job+0x528>
    b004:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
    b006:	b233      	sxth	r3, r6
    b008:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b00c:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
    b010:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    b012:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    b014:	b117      	cbz	r7, b01c <ticker_job+0x520>
    b016:	7a39      	ldrb	r1, [r7, #8]
    b018:	2901      	cmp	r1, #1
    b01a:	d025      	beq.n	b068 <ticker_job+0x56c>
			ticker_id_head = ticker->next;
    b01c:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
    b020:	2eff      	cmp	r6, #255	; 0xff
    b022:	d1f0      	bne.n	b006 <ticker_job+0x50a>
	return rescheduled;
    b024:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    b028:	2a00      	cmp	r2, #0
    b02a:	f43f af15 	beq.w	ae58 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    b02e:	9b00      	ldr	r3, [sp, #0]
    b030:	9909      	ldr	r1, [sp, #36]	; 0x24
    b032:	428b      	cmp	r3, r1
    b034:	f47f af15 	bne.w	ae62 <ticker_job+0x366>
	if (!pending) {
    b038:	9b08      	ldr	r3, [sp, #32]
    b03a:	2b00      	cmp	r3, #0
    b03c:	f47f af18 	bne.w	ae70 <ticker_job+0x374>
	users = &instance->users[0];
    b040:	f8db 3004 	ldr.w	r3, [fp, #4]
    b044:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
    b046:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
    b04a:	1e5f      	subs	r7, r3, #1
    b04c:	b2ff      	uxtb	r7, r7
    b04e:	2b00      	cmp	r3, #0
    b050:	f43f af0e 	beq.w	ae70 <ticker_job+0x374>
			flag_compare_update = 1U;
    b054:	9206      	str	r2, [sp, #24]
    b056:	e0fa      	b.n	b24e <ticker_job+0x752>
			    ticker->fp_op_func) {
    b058:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    b05a:	2b00      	cmp	r3, #0
    b05c:	d0b9      	beq.n	afd2 <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    b05e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b060:	2001      	movs	r0, #1
    b062:	4798      	blx	r3
			ticker->req = ticker->ack;
    b064:	78a2      	ldrb	r2, [r4, #2]
    b066:	e7b4      	b.n	afd2 <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b068:	9b01      	ldr	r3, [sp, #4]
    b06a:	7f1b      	ldrb	r3, [r3, #28]
    b06c:	2bff      	cmp	r3, #255	; 0xff
    b06e:	d04b      	beq.n	b108 <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
    b070:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b072:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
    b074:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    b076:	4293      	cmp	r3, r2
    b078:	d946      	bls.n	b108 <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
    b07a:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    b07e:	687a      	ldr	r2, [r7, #4]
    b080:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    b082:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    b086:	1ad3      	subs	r3, r2, r3
    b088:	9302      	str	r3, [sp, #8]
    b08a:	683b      	ldr	r3, [r7, #0]
    b08c:	429a      	cmp	r2, r3
    b08e:	f080 80bd 	bcs.w	b20c <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
    b092:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    b096:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
    b09a:	f000 80b7 	beq.w	b20c <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
    b09e:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
    b0a2:	45f0      	cmp	r8, lr
    b0a4:	f04f 0300 	mov.w	r3, #0
    b0a8:	d331      	bcc.n	b10e <ticker_job+0x612>
    b0aa:	46f1      	mov	r9, lr
    b0ac:	465a      	mov	r2, fp
    b0ae:	461c      	mov	r4, r3
    b0b0:	e01c      	b.n	b0ec <ticker_job+0x5f0>
			if (node->ticks_to_expire >
    b0b2:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
    b0b4:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
    b0b6:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
    b0b8:	4423      	add	r3, r4
			if (node->ticks_to_expire >
    b0ba:	d909      	bls.n	b0d0 <ticker_job+0x5d4>
				window_end_ticks =
    b0bc:	4543      	cmp	r3, r8
    b0be:	bf28      	it	cs
    b0c0:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
    b0c2:	4599      	cmp	r9, r3
    b0c4:	d204      	bcs.n	b0d0 <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
    b0c6:	ebb3 030e 	subs.w	r3, r3, lr
    b0ca:	d001      	beq.n	b0d0 <ticker_job+0x5d4>
    b0cc:	459c      	cmp	ip, r3
    b0ce:	d91e      	bls.n	b10e <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
    b0d0:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
    b0d2:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
    b0d6:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
    b0da:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
    b0dc:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
    b0e0:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    b0e2:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
    b0e6:	d012      	beq.n	b10e <ticker_job+0x612>
    b0e8:	45c8      	cmp	r8, r9
    b0ea:	d310      	bcc.n	b10e <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
    b0ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b0f0:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
    b0f4:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    b0f6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b0f8:	2900      	cmp	r1, #0
    b0fa:	d0da      	beq.n	b0b2 <ticker_job+0x5b6>
    b0fc:	7a09      	ldrb	r1, [r1, #8]
    b0fe:	2901      	cmp	r1, #1
    b100:	d1d7      	bne.n	b0b2 <ticker_job+0x5b6>
				ticker_id_iter = node->next;
    b102:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
    b106:	e7eb      	b.n	b0e0 <ticker_job+0x5e4>
		window_start_ticks = 0U;
    b108:	f04f 0c00 	mov.w	ip, #0
    b10c:	e7b7      	b.n	b07e <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    b10e:	9a02      	ldr	r2, [sp, #8]
    b110:	441a      	add	r2, r3
    b112:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    b114:	465c      	mov	r4, fp
    b116:	60ab      	str	r3, [r5, #8]
    b118:	f04f 0eff 	mov.w	lr, #255	; 0xff
    b11c:	e000      	b.n	b120 <ticker_job+0x624>
    b11e:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
    b120:	b221      	sxth	r1, r4
    b122:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    b126:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
    b12a:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    b12c:	f8dc 0008 	ldr.w	r0, [ip, #8]
    b130:	4298      	cmp	r0, r3
    b132:	f080 814d 	bcs.w	b3d0 <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
    b136:	1a1b      	subs	r3, r3, r0
    b138:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
    b13a:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
    b13e:	2aff      	cmp	r2, #255	; 0xff
    b140:	46a6      	mov	lr, r4
    b142:	d1ec      	bne.n	b11e <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    b144:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
    b146:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    b14a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b14e:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    b150:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    b154:	f81a 3001 	ldrb.w	r3, [sl, r1]
    b158:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    b15a:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
    b15e:	8beb      	ldrh	r3, [r5, #30]
    b160:	3b01      	subs	r3, #1
    b162:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
    b164:	f04f 0302 	mov.w	r3, #2
    b168:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
    b16a:	2201      	movs	r2, #1
    b16c:	e747      	b.n	affe <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    b16e:	b111      	cbz	r1, b176 <ticker_job+0x67a>
    b170:	7a0b      	ldrb	r3, [r1, #8]
    b172:	2b01      	cmp	r3, #1
    b174:	d037      	beq.n	b1e6 <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
    b176:	f1be 0f00 	cmp.w	lr, #0
    b17a:	d159      	bne.n	b230 <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
    b17c:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
    b180:	4672      	mov	r2, lr
				while (count--) {
    b182:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
    b184:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
    b188:	2100      	movs	r1, #0
    b18a:	9005      	str	r0, [sp, #20]
    b18c:	e004      	b.n	b198 <ticker_job+0x69c>
    b18e:	4628      	mov	r0, r5
				while (count--) {
    b190:	3a01      	subs	r2, #1
					ticks_to_expire +=
    b192:	4401      	add	r1, r0
				while (count--) {
    b194:	1c50      	adds	r0, r2, #1
    b196:	d00f      	beq.n	b1b8 <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
    b198:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    b19a:	eb03 0008 	add.w	r0, r3, r8
    b19e:	4548      	cmp	r0, r9
    b1a0:	d8f5      	bhi.n	b18e <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b1a2:	9805      	ldr	r0, [sp, #20]
    b1a4:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    b1a8:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b1aa:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
    b1ae:	4401      	add	r1, r0
				while (count--) {
    b1b0:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b1b2:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
    b1b6:	d1ef      	bne.n	b198 <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
    b1b8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    b1bc:	6263      	str	r3, [r4, #36]	; 0x24
    b1be:	2a00      	cmp	r2, #0
    b1c0:	f000 80d2 	beq.w	b368 <ticker_job+0x86c>
				lazy = 0U;
    b1c4:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    b1c6:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
    b1c8:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    b1ca:	83e2      	strh	r2, [r4, #30]
    b1cc:	e00d      	b.n	b1ea <ticker_job+0x6ee>
    b1ce:	bf00      	nop
    b1d0:	ff172b5a 	.word	0xff172b5a
    b1d4:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
    b1d8:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    b1dc:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    b1e0:	2d00      	cmp	r5, #0
    b1e2:	f43f aeeb 	beq.w	afbc <ticker_job+0x4c0>
				ticker->req = ticker->ack;
    b1e6:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
    b1e8:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    b1ea:	9b07      	ldr	r3, [sp, #28]
    b1ec:	9a02      	ldr	r2, [sp, #8]
    b1ee:	f8db 1014 	ldr.w	r1, [fp, #20]
    b1f2:	189a      	adds	r2, r3, r2
    b1f4:	4620      	mov	r0, r4
    b1f6:	f7ff f9e9 	bl	a5cc <ticks_to_expire_prep>
			ticker->next = *insert_head;
    b1fa:	9a00      	ldr	r2, [sp, #0]
    b1fc:	9904      	ldr	r1, [sp, #16]
    b1fe:	9b01      	ldr	r3, [sp, #4]
    b200:	5453      	strb	r3, [r2, r1]
			ticker->req++;
    b202:	7863      	ldrb	r3, [r4, #1]
    b204:	9601      	str	r6, [sp, #4]
    b206:	3301      	adds	r3, #1
    b208:	7063      	strb	r3, [r4, #1]
    b20a:	e6e3      	b.n	afd4 <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    b20c:	9b02      	ldr	r3, [sp, #8]
    b20e:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    b210:	2300      	movs	r3, #0
    b212:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
    b214:	e7a3      	b.n	b15e <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    b216:	f1be 0f00 	cmp.w	lr, #0
    b21a:	f47f aec7 	bne.w	afac <ticker_job+0x4b0>
    b21e:	b111      	cbz	r1, b226 <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    b220:	7a0b      	ldrb	r3, [r1, #8]
    b222:	2b01      	cmp	r3, #1
    b224:	d0d8      	beq.n	b1d8 <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
    b226:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
    b22a:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    b22e:	e6bd      	b.n	afac <ticker_job+0x4b0>
					ticker->req = ticker->ack;
    b230:	7062      	strb	r2, [r4, #1]
    b232:	2200      	movs	r2, #0
    b234:	e7a5      	b.n	b182 <ticker_job+0x686>
	count_user = instance->count_user;
    b236:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    b23a:	f8db 2004 	ldr.w	r2, [fp, #4]
    b23e:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    b240:	1e5f      	subs	r7, r3, #1
    b242:	b2ff      	uxtb	r7, r7
    b244:	2b00      	cmp	r3, #0
    b246:	f43f ae10 	beq.w	ae6a <ticker_job+0x36e>
		flag_compare_update = 1U;
    b24a:	2301      	movs	r3, #1
    b24c:	9306      	str	r3, [sp, #24]
    b24e:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
    b250:	2600      	movs	r6, #0
    b252:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
    b256:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
    b25a:	787b      	ldrb	r3, [r7, #1]
    b25c:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
    b25e:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
    b260:	429a      	cmp	r2, r3
    b262:	d10c      	bne.n	b27e <ticker_job+0x782>
    b264:	e05b      	b.n	b31e <ticker_job+0x822>
	switch (uop->op) {
    b266:	2b01      	cmp	r3, #1
    b268:	d053      	beq.n	b312 <ticker_job+0x816>
			first = user->first + 1;
    b26a:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
    b26c:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
    b26e:	3301      	adds	r3, #1
    b270:	b2db      	uxtb	r3, r3
				first = 0U;
    b272:	4299      	cmp	r1, r3
    b274:	bf08      	it	eq
    b276:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    b278:	429a      	cmp	r2, r3
			user->first = first;
    b27a:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
    b27c:	d04f      	beq.n	b31e <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    b27e:	b21b      	sxth	r3, r3
    b280:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    b284:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b288:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
    b28c:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    b290:	2b02      	cmp	r3, #2
    b292:	d017      	beq.n	b2c4 <ticker_job+0x7c8>
    b294:	2b03      	cmp	r3, #3
    b296:	d1e6      	bne.n	b266 <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
    b298:	7843      	ldrb	r3, [r0, #1]
    b29a:	f89b 2008 	ldrb.w	r2, [fp, #8]
    b29e:	429a      	cmp	r2, r3
    b2a0:	d93a      	bls.n	b318 <ticker_job+0x81c>
			node[uop->id].priority =
    b2a2:	f8db 2000 	ldr.w	r2, [fp]
    b2a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b2aa:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    b2ae:	7902      	ldrb	r2, [r0, #4]
    b2b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    b2b4:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    b2b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
    b2b8:	b113      	cbz	r3, b2c0 <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
    b2ba:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b2bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
    b2be:	4798      	blx	r3
    b2c0:	78fa      	ldrb	r2, [r7, #3]
    b2c2:	e7d2      	b.n	b26a <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
    b2c4:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
    b2c8:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
    b2cc:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
    b2d0:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
    b2d4:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    b2d8:	2aff      	cmp	r2, #255	; 0xff
    b2da:	d003      	beq.n	b2e4 <ticker_job+0x7e8>
    b2dc:	f8d1 8000 	ldr.w	r8, [r1]
    b2e0:	4598      	cmp	r8, r3
    b2e2:	d023      	beq.n	b32c <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
    b2e4:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    b2e8:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
    b2ea:	f04f 0800 	mov.w	r8, #0
    b2ee:	e00a      	b.n	b306 <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
    b2f0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    b2f4:	eb04 1103 	add.w	r1, r4, r3, lsl #4
    b2f8:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
    b2fa:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
    b2fe:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
    b300:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
    b302:	b911      	cbnz	r1, b30a <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
    b304:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    b306:	2aff      	cmp	r2, #255	; 0xff
    b308:	d1f2      	bne.n	b2f0 <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
    b30a:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
    b30e:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
    b312:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    b314:	6286      	str	r6, [r0, #40]	; 0x28
		break;
    b316:	e7cf      	b.n	b2b8 <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
    b318:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
    b31c:	e7cb      	b.n	b2b6 <ticker_job+0x7ba>
	while (count_user--) {
    b31e:	9a01      	ldr	r2, [sp, #4]
    b320:	42ba      	cmp	r2, r7
    b322:	f1a7 0308 	sub.w	r3, r7, #8
    b326:	d00b      	beq.n	b340 <ticker_job+0x844>
    b328:	461f      	mov	r7, r3
    b32a:	e796      	b.n	b25a <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
    b32c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b330:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    b332:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
    b336:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    b338:	e7e5      	b.n	b306 <ticker_job+0x80a>
	if (!pending) {
    b33a:	9b08      	ldr	r3, [sp, #32]
    b33c:	2b00      	cmp	r3, #0
    b33e:	d054      	beq.n	b3ea <ticker_job+0x8ee>
	if (flag_compare_update) {
    b340:	9b06      	ldr	r3, [sp, #24]
    b342:	2b00      	cmp	r3, #0
    b344:	f47f ad91 	bne.w	ae6a <ticker_job+0x36e>
	if (instance->worker_trigger) {
    b348:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    b34c:	2200      	movs	r2, #0
    b34e:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    b352:	b12b      	cbz	r3, b360 <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    b354:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    b358:	465b      	mov	r3, fp
    b35a:	2201      	movs	r2, #1
    b35c:	2103      	movs	r1, #3
    b35e:	e469      	b.n	ac34 <ticker_job+0x138>
}
    b360:	b00d      	add	sp, #52	; 0x34
    b362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b366:	4770      	bx	lr
					while (ticks_to_expire <
    b368:	458a      	cmp	sl, r1
    b36a:	f67f af2c 	bls.w	b1c6 <ticker_job+0x6ca>
    b36e:	1c68      	adds	r0, r5, #1
    b370:	9405      	str	r4, [sp, #20]
    b372:	4604      	mov	r4, r0
    b374:	e005      	b.n	b382 <ticker_job+0x886>
    b376:	4628      	mov	r0, r5
						ticks_to_expire +=
    b378:	4401      	add	r1, r0
						lazy++;
    b37a:	3201      	adds	r2, #1
					while (ticks_to_expire <
    b37c:	458a      	cmp	sl, r1
						lazy++;
    b37e:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    b380:	d910      	bls.n	b3a4 <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
    b382:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    b384:	eb03 0008 	add.w	r0, r3, r8
    b388:	4548      	cmp	r0, r9
    b38a:	d8f4      	bhi.n	b376 <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b38c:	4620      	mov	r0, r4
    b38e:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    b392:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b394:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    b398:	3201      	adds	r2, #1
					while (ticks_to_expire <
    b39a:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    b39c:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    b3a0:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    b3a2:	d8ee      	bhi.n	b382 <ticker_job+0x886>
    b3a4:	9c05      	ldr	r4, [sp, #20]
    b3a6:	6263      	str	r3, [r4, #36]	; 0x24
    b3a8:	e70d      	b.n	b1c6 <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
    b3aa:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
    b3ae:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    b3b2:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
    b3b4:	f8db 3000 	ldr.w	r3, [fp]
    b3b8:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    b3ba:	f8db 3004 	ldr.w	r3, [fp, #4]
    b3be:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    b3c0:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
    b3c2:	9108      	str	r1, [sp, #32]
	while (count_user--) {
    b3c4:	b2db      	uxtb	r3, r3
    b3c6:	b3a1      	cbz	r1, b432 <ticker_job+0x936>
		flag_elapsed = 0U;
    b3c8:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
    b3ca:	9203      	str	r2, [sp, #12]
    b3cc:	f7ff bbd1 	b.w	ab72 <ticker_job+0x76>
				node->ticks_to_expire -=
    b3d0:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
    b3d2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    b3d6:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
    b3da:	f43f aec0 	beq.w	b15e <ticker_job+0x662>
    b3de:	fa0f f18e 	sxth.w	r1, lr
    b3e2:	e6af      	b.n	b144 <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
    b3e4:	1bdb      	subs	r3, r3, r7
    b3e6:	60a3      	str	r3, [r4, #8]
			break;
    b3e8:	e5f8      	b.n	afdc <ticker_job+0x4e0>
	count_user = instance->count_user;
    b3ea:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    b3ee:	f8db 2004 	ldr.w	r2, [fp, #4]
    b3f2:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    b3f4:	1e5f      	subs	r7, r3, #1
    b3f6:	b2ff      	uxtb	r7, r7
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	f47f af28 	bne.w	b24e <ticker_job+0x752>
    b3fe:	e79f      	b.n	b340 <ticker_job+0x844>
		if (cntr_stop() == 0) {
    b400:	f00a fd4e 	bl	15ea0 <cntr_stop>
    b404:	2800      	cmp	r0, #0
    b406:	d19f      	bne.n	b348 <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
    b408:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    b40c:	f00a fd6e 	bl	15eec <cntr_cnt_get>
    b410:	f8cb 0014 	str.w	r0, [fp, #20]
    b414:	e798      	b.n	b348 <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
    b416:	f00a fd69 	bl	15eec <cntr_cnt_get>
    b41a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    b41c:	f00a fd30 	bl	15e80 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    b420:	f89b 301d 	ldrb.w	r3, [fp, #29]
    b424:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
    b426:	2800      	cmp	r0, #0
    b428:	f47f ad2a 	bne.w	ae80 <ticker_job+0x384>
			instance->ticks_current = ticks_current;
    b42c:	f8cb 4014 	str.w	r4, [fp, #20]
    b430:	e526      	b.n	ae80 <ticker_job+0x384>
	insert_head = TICKER_NULL;
    b432:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
    b434:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
    b436:	9301      	str	r3, [sp, #4]
    b438:	e507      	b.n	ae4a <ticker_job+0x34e>
    b43a:	bf00      	nop

0000b43c <ticker_init>:
{
    b43c:	b4f0      	push	{r4, r5, r6, r7}
    b43e:	9d04      	ldr	r5, [sp, #16]
    b440:	f89d 7014 	ldrb.w	r7, [sp, #20]
    b444:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    b446:	2800      	cmp	r0, #0
    b448:	d137      	bne.n	b4ba <ticker_init+0x7e>
	instance->count_node = count_node;
    b44a:	4e1d      	ldr	r6, [pc, #116]	; (b4c0 <ticker_init+0x84>)
	while (count_node--) {
    b44c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
    b450:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
    b452:	6032      	str	r2, [r6, #0]
	while (count_node--) {
    b454:	fa5f fc8c 	uxtb.w	ip, ip
    b458:	b149      	cbz	r1, b46e <ticker_init+0x32>
    b45a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    b45e:	eb02 110c 	add.w	r1, r2, ip, lsl #4
    b462:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    b464:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    b468:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    b46c:	d1f9      	bne.n	b462 <ticker_init+0x26>
	while (count_user--) {
    b46e:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    b470:	7273      	strb	r3, [r6, #9]
	instance->users = user;
    b472:	6075      	str	r5, [r6, #4]
	while (count_user--) {
    b474:	b2d2      	uxtb	r2, r2
    b476:	b183      	cbz	r3, b49a <ticker_init+0x5e>
    b478:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
    b47c:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    b47e:	4610      	mov	r0, r2
    b480:	f812 3908 	ldrb.w	r3, [r2], #-8
    b484:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    b488:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
    b48c:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
    b48e:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
    b492:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
    b496:	b2df      	uxtb	r7, r3
	while (count_user--) {
    b498:	d1f0      	bne.n	b47c <ticker_init+0x40>
	if (count_op) {
    b49a:	b977      	cbnz	r7, b4ba <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
    b49c:	9a07      	ldr	r2, [sp, #28]
    b49e:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
    b4a0:	9a08      	ldr	r2, [sp, #32]
    b4a2:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    b4a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    b4a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b4aa:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    b4ac:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
    b4ae:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    b4b2:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
    b4b4:	8177      	strh	r7, [r6, #10]
}
    b4b6:	bcf0      	pop	{r4, r5, r6, r7}
    b4b8:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    b4ba:	2001      	movs	r0, #1
}
    b4bc:	bcf0      	pop	{r4, r5, r6, r7}
    b4be:	4770      	bx	lr
    b4c0:	200019bc 	.word	0x200019bc

0000b4c4 <ticker_trigger>:
	if (instance->sched_cb) {
    b4c4:	4b0a      	ldr	r3, [pc, #40]	; (b4f0 <ticker_trigger+0x2c>)
    b4c6:	222c      	movs	r2, #44	; 0x2c
    b4c8:	fb02 3200 	mla	r2, r2, r0, r3
{
    b4cc:	b410      	push	{r4}
	if (instance->sched_cb) {
    b4ce:	6a54      	ldr	r4, [r2, #36]	; 0x24
    b4d0:	b15c      	cbz	r4, b4ea <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    b4d2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    b4d6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b4da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b4de:	46a4      	mov	ip, r4
    b4e0:	2201      	movs	r2, #1
}
    b4e2:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b4e4:	2103      	movs	r1, #3
    b4e6:	2002      	movs	r0, #2
    b4e8:	4760      	bx	ip
}
    b4ea:	bc10      	pop	{r4}
    b4ec:	4770      	bx	lr
    b4ee:	bf00      	nop
    b4f0:	200019bc 	.word	0x200019bc

0000b4f4 <ticker_start_ext>:
{
    b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    b4f8:	4e28      	ldr	r6, [pc, #160]	; (b59c <ticker_start_ext+0xa8>)
{
    b4fa:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    b4fe:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    b500:	252c      	movs	r5, #44	; 0x2c
    b502:	fb05 6504 	mla	r5, r5, r4, r6
{
    b506:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    b508:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    b50c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    b510:	6869      	ldr	r1, [r5, #4]
    b512:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    b516:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    b51a:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    b51e:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
    b522:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
    b524:	f10e 0c01 	add.w	ip, lr, #1
    b528:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    b52c:	4564      	cmp	r4, ip
    b52e:	bf98      	it	ls
    b530:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    b534:	4561      	cmp	r1, ip
    b536:	d02e      	beq.n	b596 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    b538:	6879      	ldr	r1, [r7, #4]
    b53a:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    b53e:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    b542:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    b546:	f04f 0904 	mov.w	r9, #4
    b54a:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    b54e:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    b550:	9b08      	ldr	r3, [sp, #32]
    b552:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    b554:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b556:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    b558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b55a:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    b55c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b55e:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    b560:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b562:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    b564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b566:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    b568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b56a:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    b56c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b56e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    b570:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b572:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    b574:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    b576:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b578:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
    b57a:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    b57e:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b582:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
    b586:	4798      	blx	r3
    b588:	4633      	mov	r3, r6
    b58a:	4649      	mov	r1, r9
    b58c:	2200      	movs	r2, #0
    b58e:	47a8      	blx	r5
	return user_op->status;
    b590:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    b592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    b596:	2001      	movs	r0, #1
}
    b598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b59c:	200019bc 	.word	0x200019bc

0000b5a0 <ticker_start>:
{
    b5a0:	b510      	push	{r4, lr}
    b5a2:	b08a      	sub	sp, #40	; 0x28
    b5a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b5a6:	9400      	str	r4, [sp, #0]
{
    b5a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b5aa:	9401      	str	r4, [sp, #4]
{
    b5ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b5ae:	9402      	str	r4, [sp, #8]
{
    b5b0:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b5b4:	9403      	str	r4, [sp, #12]
{
    b5b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b5b8:	9404      	str	r4, [sp, #16]
{
    b5ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b5bc:	9405      	str	r4, [sp, #20]
{
    b5be:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b5c0:	9406      	str	r4, [sp, #24]
{
    b5c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b5c4:	9407      	str	r4, [sp, #28]
{
    b5c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    b5c8:	9408      	str	r4, [sp, #32]
    b5ca:	2400      	movs	r4, #0
    b5cc:	9409      	str	r4, [sp, #36]	; 0x24
    b5ce:	f7ff ff91 	bl	b4f4 <ticker_start_ext>
}
    b5d2:	b00a      	add	sp, #40	; 0x28
    b5d4:	bd10      	pop	{r4, pc}
    b5d6:	bf00      	nop

0000b5d8 <ticker_update_ext>:
{
    b5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    b5dc:	4d28      	ldr	r5, [pc, #160]	; (b680 <ticker_update_ext+0xa8>)
{
    b5de:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    b5e2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    b5e6:	4604      	mov	r4, r0
    b5e8:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    b5ea:	212c      	movs	r1, #44	; 0x2c
    b5ec:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    b5f0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    b5f4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
    b5f8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    b5fc:	684c      	ldr	r4, [r1, #4]
    b5fe:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    b602:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
    b606:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    b60a:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
    b60c:	f10e 0c01 	add.w	ip, lr, #1
    b610:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    b614:	45e1      	cmp	r9, ip
    b616:	bf98      	it	ls
    b618:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    b61c:	4564      	cmp	r4, ip
{
    b61e:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
    b622:	d02a      	beq.n	b67a <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
    b624:	f8d6 a004 	ldr.w	sl, [r6, #4]
    b628:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    b62c:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    b630:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    b634:	f04f 0b05 	mov.w	fp, #5
    b638:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    b63c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    b63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b640:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    b642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b644:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    b646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b648:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    b64a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b64c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    b64e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b650:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    b652:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    b654:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b656:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
    b658:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
    b65a:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    b65e:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
    b662:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b666:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    b66a:	4798      	blx	r3
    b66c:	462b      	mov	r3, r5
    b66e:	2200      	movs	r2, #0
    b670:	2104      	movs	r1, #4
    b672:	47b0      	blx	r6
	return user_op->status;
    b674:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    b676:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    b67a:	2001      	movs	r0, #1
}
    b67c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b680:	200019bc 	.word	0x200019bc

0000b684 <ticker_update>:
{
    b684:	b510      	push	{r4, lr}
    b686:	b088      	sub	sp, #32
    b688:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b68a:	9400      	str	r4, [sp, #0]
{
    b68c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b68e:	9401      	str	r4, [sp, #4]
{
    b690:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b692:	9402      	str	r4, [sp, #8]
{
    b694:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b698:	9403      	str	r4, [sp, #12]
{
    b69a:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b69e:	9404      	str	r4, [sp, #16]
{
    b6a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b6a2:	9405      	str	r4, [sp, #20]
{
    b6a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    b6a6:	9406      	str	r4, [sp, #24]
    b6a8:	2400      	movs	r4, #0
    b6aa:	9407      	str	r4, [sp, #28]
    b6ac:	f7ff ff94 	bl	b5d8 <ticker_update_ext>
}
    b6b0:	b008      	add	sp, #32
    b6b2:	bd10      	pop	{r4, pc}

0000b6b4 <ticker_stop>:
{
    b6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    b6b8:	4c1e      	ldr	r4, [pc, #120]	; (b734 <ticker_stop+0x80>)
{
    b6ba:	4684      	mov	ip, r0
    b6bc:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    b6be:	212c      	movs	r1, #44	; 0x2c
    b6c0:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
    b6c4:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    b6c8:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
    b6cc:	684d      	ldr	r5, [r1, #4]
    b6ce:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    b6d2:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    b6d6:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    b6da:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    b6dc:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
    b6e0:	f10e 0c01 	add.w	ip, lr, #1
    b6e4:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    b6e8:	4567      	cmp	r7, ip
    b6ea:	bf98      	it	ls
    b6ec:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    b6f0:	4565      	cmp	r5, ip
    b6f2:	d01c      	beq.n	b72e <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
    b6f4:	6877      	ldr	r7, [r6, #4]
    b6f6:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    b6fa:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    b6fe:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    b702:	f04f 0807 	mov.w	r8, #7
    b706:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
    b70a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
    b70c:	9b06      	ldr	r3, [sp, #24]
    b70e:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    b710:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    b712:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b714:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
    b716:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b71a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    b71e:	4798      	blx	r3
    b720:	4623      	mov	r3, r4
    b722:	2200      	movs	r2, #0
    b724:	2104      	movs	r1, #4
    b726:	47b0      	blx	r6
	return user_op->status;
    b728:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
    b72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    b72e:	2001      	movs	r0, #1
}
    b730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b734:	200019bc 	.word	0x200019bc

0000b738 <ticker_next_slot_get>:
{
    b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    b73c:	4d20      	ldr	r5, [pc, #128]	; (b7c0 <ticker_next_slot_get+0x88>)
{
    b73e:	4684      	mov	ip, r0
    b740:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    b742:	212c      	movs	r1, #44	; 0x2c
    b744:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
    b748:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
    b74c:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
    b750:	684c      	ldr	r4, [r1, #4]
    b752:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    b756:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
    b75a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    b75e:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    b760:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
    b764:	f10e 0c01 	add.w	ip, lr, #1
    b768:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    b76c:	4567      	cmp	r7, ip
    b76e:	bf98      	it	ls
    b770:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    b774:	4564      	cmp	r4, ip
    b776:	d020      	beq.n	b7ba <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
    b778:	6877      	ldr	r7, [r6, #4]
    b77a:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    b77e:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    b782:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    b786:	f64f 7802 	movw	r8, #65282	; 0xff02
    b78a:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
    b78e:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    b792:	9b06      	ldr	r3, [sp, #24]
    b794:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    b796:	9b07      	ldr	r3, [sp, #28]
    b798:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    b79a:	9b08      	ldr	r3, [sp, #32]
    b79c:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    b79e:	2302      	movs	r3, #2
    b7a0:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
    b7a2:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b7a6:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    b7aa:	4798      	blx	r3
    b7ac:	462b      	mov	r3, r5
    b7ae:	2200      	movs	r2, #0
    b7b0:	2104      	movs	r1, #4
    b7b2:	47b0      	blx	r6
	return user_op->status;
    b7b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    b7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    b7ba:	2001      	movs	r0, #1
}
    b7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b7c0:	200019bc 	.word	0x200019bc

0000b7c4 <ticker_job_sched>:
{
    b7c4:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b7c6:	4d0a      	ldr	r5, [pc, #40]	; (b7f0 <ticker_job_sched+0x2c>)
    b7c8:	222c      	movs	r2, #44	; 0x2c
    b7ca:	fb02 5200 	mla	r2, r2, r0, r5
    b7ce:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
    b7d2:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b7d4:	4608      	mov	r0, r1
    b7d6:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
    b7d8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    b7dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b7e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    b7e4:	46b4      	mov	ip, r6
    b7e6:	2200      	movs	r2, #0
}
    b7e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b7ec:	2104      	movs	r1, #4
    b7ee:	4760      	bx	ip
    b7f0:	200019bc 	.word	0x200019bc

0000b7f4 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    b7f4:	f00a bb7a 	b.w	15eec <cntr_cnt_get>

0000b7f8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b7f8:	1a40      	subs	r0, r0, r1
}
    b7fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7fe:	4770      	bx	lr

0000b800 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    b800:	b570      	push	{r4, r5, r6, lr}
    b802:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    b804:	2000      	movs	r0, #0
{
    b806:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    b808:	f003 f96c 	bl	eae4 <ull_adv_is_enabled>
    b80c:	b998      	cbnz	r0, b836 <ll_addr_set+0x36>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    b80e:	f003 fb7b 	bl	ef08 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    b812:	f010 0606 	ands.w	r6, r0, #6
    b816:	d10e      	bne.n	b836 <ll_addr_set+0x36>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    b818:	b134      	cbz	r4, b828 <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    b81a:	2206      	movs	r2, #6
    b81c:	4629      	mov	r1, r5
    b81e:	4807      	ldr	r0, [pc, #28]	; (b83c <ll_addr_set+0x3c>)
    b820:	f010 fa83 	bl	1bd2a <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    b824:	4630      	mov	r0, r6
}
    b826:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    b828:	2206      	movs	r2, #6
    b82a:	4629      	mov	r1, r5
    b82c:	4804      	ldr	r0, [pc, #16]	; (b840 <ll_addr_set+0x40>)
    b82e:	f010 fa7c 	bl	1bd2a <memcpy>
	return 0;
    b832:	4620      	mov	r0, r4
}
    b834:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    b836:	200c      	movs	r0, #12
}
    b838:	bd70      	pop	{r4, r5, r6, pc}
    b83a:	bf00      	nop
    b83c:	200019f0 	.word	0x200019f0
    b840:	200019e8 	.word	0x200019e8

0000b844 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    b844:	2801      	cmp	r0, #1
{
    b846:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    b848:	d805      	bhi.n	b856 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
    b84a:	4a04      	ldr	r2, [pc, #16]	; (b85c <ll_addr_get+0x18>)
    b84c:	4804      	ldr	r0, [pc, #16]	; (b860 <ll_addr_get+0x1c>)
    b84e:	2b00      	cmp	r3, #0
    b850:	bf18      	it	ne
    b852:	4610      	movne	r0, r2
    b854:	4770      	bx	lr
		return NULL;
    b856:	2000      	movs	r0, #0
	}

	return pub_addr;
}
    b858:	4770      	bx	lr
    b85a:	bf00      	nop
    b85c:	200019f0 	.word	0x200019f0
    b860:	200019e8 	.word	0x200019e8

0000b864 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
    b864:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
    b866:	b510      	push	{r4, lr}
    b868:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    b86a:	d80b      	bhi.n	b884 <ll_addr_read+0x20>
	if (addr_type) {
    b86c:	4608      	mov	r0, r1
		return rnd_addr;
    b86e:	4c07      	ldr	r4, [pc, #28]	; (b88c <ll_addr_read+0x28>)
    b870:	4907      	ldr	r1, [pc, #28]	; (b890 <ll_addr_read+0x2c>)
    b872:	2b00      	cmp	r3, #0
    b874:	bf18      	it	ne
    b876:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
    b878:	2206      	movs	r2, #6
    b87a:	4621      	mov	r1, r4
    b87c:	f010 fa55 	bl	1bd2a <memcpy>
	}

	return addr;
}
    b880:	4620      	mov	r0, r4
    b882:	bd10      	pop	{r4, pc}
		return NULL;
    b884:	2400      	movs	r4, #0
}
    b886:	4620      	mov	r0, r4
    b888:	bd10      	pop	{r4, pc}
    b88a:	bf00      	nop
    b88c:	200019e8 	.word	0x200019e8
    b890:	200019f0 	.word	0x200019f0

0000b894 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    b894:	2802      	cmp	r0, #2
    b896:	d001      	beq.n	b89c <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    b898:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    b89a:	4770      	bx	lr
{
    b89c:	b538      	push	{r3, r4, r5, lr}
    b89e:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    b8a0:	4608      	mov	r0, r1
    b8a2:	461d      	mov	r5, r3
    b8a4:	f003 ff9e 	bl	f7e4 <ll_connected_get>
			if (!conn) {
    b8a8:	b110      	cbz	r0, b8b0 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    b8aa:	2000      	movs	r0, #0
    b8ac:	7028      	strb	r0, [r5, #0]
}
    b8ae:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b8b0:	4620      	mov	r0, r4
}
    b8b2:	bd38      	pop	{r3, r4, r5, pc}

0000b8b4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    b8b4:	2300      	movs	r3, #0
    b8b6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    b8b8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    b8ba:	4770      	bx	lr

0000b8bc <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    b8bc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    b8be:	4802      	ldr	r0, [pc, #8]	; (b8c8 <hci_driver_init+0xc>)
    b8c0:	f7fb fd2c 	bl	731c <bt_hci_driver_register>

	return 0;
}
    b8c4:	2000      	movs	r0, #0
    b8c6:	bd08      	pop	{r3, pc}
    b8c8:	00020438 	.word	0x00020438

0000b8cc <hci_driver_send>:
{
    b8cc:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    b8ce:	8983      	ldrh	r3, [r0, #12]
{
    b8d0:	b083      	sub	sp, #12
	if (!buf->len) {
    b8d2:	b123      	cbz	r3, b8de <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    b8d4:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    b8d6:	4604      	mov	r4, r0
    b8d8:	b1c3      	cbz	r3, b90c <hci_driver_send+0x40>
    b8da:	2b02      	cmp	r3, #2
    b8dc:	d004      	beq.n	b8e8 <hci_driver_send+0x1c>
    b8de:	f06f 0515 	mvn.w	r5, #21
}
    b8e2:	4628      	mov	r0, r5
    b8e4:	b003      	add	sp, #12
    b8e6:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    b8e8:	a901      	add	r1, sp, #4
    b8ea:	f000 ffbf 	bl	c86c <hci_acl_handle>
	if (evt) {
    b8ee:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    b8f0:	4605      	mov	r5, r0
	if (evt) {
    b8f2:	b113      	cbz	r3, b8fa <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    b8f4:	4618      	mov	r0, r3
    b8f6:	f7fb fcf3 	bl	72e0 <bt_recv_prio>
	if (!err) {
    b8fa:	2d00      	cmp	r5, #0
    b8fc:	d1f1      	bne.n	b8e2 <hci_driver_send+0x16>
		net_buf_unref(buf);
    b8fe:	4620      	mov	r0, r4
    b900:	f00b fab2 	bl	16e68 <net_buf_unref>
    b904:	2500      	movs	r5, #0
}
    b906:	4628      	mov	r0, r5
    b908:	b003      	add	sp, #12
    b90a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    b90c:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    b90e:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    b910:	f000 faa0 	bl	be54 <hci_cmd_handle>
	if (evt) {
    b914:	2800      	cmp	r0, #0
    b916:	d0f2      	beq.n	b8fe <hci_driver_send+0x32>
		bt_recv_prio(evt);
    b918:	f7fb fce2 	bl	72e0 <bt_recv_prio>
		if (node_rx) {
    b91c:	9d01      	ldr	r5, [sp, #4]
    b91e:	2d00      	cmp	r5, #0
    b920:	d0ed      	beq.n	b8fe <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    b922:	4628      	mov	r0, r5
    b924:	f001 fc7a 	bl	d21c <hci_get_class>
    b928:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    b92a:	9901      	ldr	r1, [sp, #4]
    b92c:	4801      	ldr	r0, [pc, #4]	; (b934 <hci_driver_send+0x68>)
    b92e:	f013 fd0c 	bl	1f34a <k_queue_append>
	if (!err) {
    b932:	e7e4      	b.n	b8fe <hci_driver_send+0x32>
    b934:	20000a70 	.word	0x20000a70

0000b938 <recv_thread>:
{
    b938:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    b93a:	4e41      	ldr	r6, [pc, #260]	; (ba40 <recv_thread+0x108>)
		LL_ASSERT(0);
    b93c:	4f41      	ldr	r7, [pc, #260]	; (ba44 <recv_thread+0x10c>)
{
    b93e:	b083      	sub	sp, #12
    b940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b948:	4630      	mov	r0, r6
    b94a:	f00e fbd3 	bl	1a0f4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    b94e:	2800      	cmp	r0, #0
    b950:	d0f6      	beq.n	b940 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    b952:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    b954:	9001      	str	r0, [sp, #4]
	switch (class) {
    b956:	2b04      	cmp	r3, #4
    b958:	d821      	bhi.n	b99e <recv_thread+0x66>
    b95a:	2b00      	cmp	r3, #0
    b95c:	d14b      	bne.n	b9f6 <recv_thread+0xbe>
		LL_ASSERT(0);
    b95e:	493a      	ldr	r1, [pc, #232]	; (ba48 <recv_thread+0x110>)
    b960:	483a      	ldr	r0, [pc, #232]	; (ba4c <recv_thread+0x114>)
    b962:	f44f 73cd 	mov.w	r3, #410	; 0x19a
    b966:	463a      	mov	r2, r7
    b968:	f00f fba5 	bl	1b0b6 <printk>
    b96c:	4040      	eors	r0, r0
    b96e:	f380 8811 	msr	BASEPRI, r0
    b972:	f04f 0003 	mov.w	r0, #3
    b976:	df02      	svc	2
	node_rx->hdr.next = NULL;
    b978:	9b01      	ldr	r3, [sp, #4]
    b97a:	2200      	movs	r2, #0
    b97c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    b97e:	a801      	add	r0, sp, #4
    b980:	f002 f8a2 	bl	dac8 <ll_rx_mem_release>
    b984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b98c:	4630      	mov	r0, r6
    b98e:	f00e fbb1 	bl	1a0f4 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    b992:	2800      	cmp	r0, #0
    b994:	d0d4      	beq.n	b940 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    b996:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    b998:	9001      	str	r0, [sp, #4]
	switch (class) {
    b99a:	2b04      	cmp	r3, #4
    b99c:	d9dd      	bls.n	b95a <recv_thread+0x22>
    b99e:	2b05      	cmp	r3, #5
    b9a0:	d1dd      	bne.n	b95e <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    b9a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b9a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b9aa:	2003      	movs	r0, #3
    b9ac:	f7fa ffbc 	bl	6928 <bt_buf_get_rx>
    b9b0:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    b9b2:	4621      	mov	r1, r4
    b9b4:	9801      	ldr	r0, [sp, #4]
    b9b6:	f000 ffe5 	bl	c984 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    b9ba:	9b01      	ldr	r3, [sp, #4]
    b9bc:	2200      	movs	r2, #0
    b9be:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    b9c0:	a801      	add	r0, sp, #4
    b9c2:	f002 f881 	bl	dac8 <ll_rx_mem_release>
		while (buf) {
    b9c6:	2c00      	cmp	r4, #0
    b9c8:	d0ba      	beq.n	b940 <recv_thread+0x8>
			frag = net_buf_ref(buf);
    b9ca:	4620      	mov	r0, r4
    b9cc:	f012 f9de 	bl	1dd8c <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    b9d0:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    b9d2:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    b9d4:	2000      	movs	r0, #0
    b9d6:	f012 f9ff 	bl	1ddd8 <net_buf_frag_del>
			if (frag->len) {
    b9da:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
    b9dc:	4604      	mov	r4, r0
				bt_recv(frag);
    b9de:	4628      	mov	r0, r5
			if (frag->len) {
    b9e0:	b133      	cbz	r3, b9f0 <recv_thread+0xb8>
				bt_recv(frag);
    b9e2:	f7fb fbf9 	bl	71d8 <bt_recv>
	z_impl_k_yield();
    b9e6:	f00e ffcd 	bl	1a984 <z_impl_k_yield>
		while (buf) {
    b9ea:	2c00      	cmp	r4, #0
    b9ec:	d1ed      	bne.n	b9ca <recv_thread+0x92>
    b9ee:	e7a7      	b.n	b940 <recv_thread+0x8>
				net_buf_unref(frag);
    b9f0:	f00b fa3a 	bl	16e68 <net_buf_unref>
    b9f4:	e7f7      	b.n	b9e6 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    b9f6:	2b02      	cmp	r3, #2
    b9f8:	d013      	beq.n	ba22 <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b9fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ba02:	2001      	movs	r0, #1
    ba04:	f7fa ff90 	bl	6928 <bt_buf_get_rx>
    ba08:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    ba0a:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    ba0c:	b19c      	cbz	r4, ba36 <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
    ba0e:	4621      	mov	r1, r4
    ba10:	f000 fff2 	bl	c9f8 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    ba14:	9b01      	ldr	r3, [sp, #4]
    ba16:	2200      	movs	r2, #0
    ba18:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    ba1a:	a801      	add	r0, sp, #4
    ba1c:	f002 f854 	bl	dac8 <ll_rx_mem_release>
		while (buf) {
    ba20:	e7d3      	b.n	b9ca <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    ba22:	2200      	movs	r2, #0
    ba24:	2300      	movs	r3, #0
    ba26:	2101      	movs	r1, #1
    ba28:	2000      	movs	r0, #0
    ba2a:	f7fa ffa7 	bl	697c <bt_buf_get_evt>
    ba2e:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    ba30:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    ba32:	2c00      	cmp	r4, #0
    ba34:	d1eb      	bne.n	ba0e <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
    ba36:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    ba38:	a801      	add	r0, sp, #4
    ba3a:	f002 f845 	bl	dac8 <ll_rx_mem_release>
		while (buf) {
    ba3e:	e77f      	b.n	b940 <recv_thread+0x8>
    ba40:	20000a70 	.word	0x20000a70
    ba44:	000203d4 	.word	0x000203d4
    ba48:	00020414 	.word	0x00020414
    ba4c:	000203b4 	.word	0x000203b4

0000ba50 <prio_recv_thread>:
{
    ba50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    ba54:	4f2e      	ldr	r7, [pc, #184]	; (bb10 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
    ba56:	4e2f      	ldr	r6, [pc, #188]	; (bb14 <prio_recv_thread+0xc4>)
{
    ba58:	b082      	sub	sp, #8
    ba5a:	e00c      	b.n	ba76 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ba5c:	f7fa ff8e 	bl	697c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ba60:	4622      	mov	r2, r4
    ba62:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ba66:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ba68:	f001 fbc0 	bl	d1ec <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    ba6c:	4620      	mov	r0, r4
    ba6e:	f7fb fc37 	bl	72e0 <bt_recv_prio>
	z_impl_k_yield();
    ba72:	f00e ff87 	bl	1a984 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    ba76:	f10d 0102 	add.w	r1, sp, #2
    ba7a:	a801      	add	r0, sp, #4
    ba7c:	f001 fec8 	bl	d810 <ll_rx_get>
    ba80:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ba82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ba86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ba8a:	2100      	movs	r1, #0
    ba8c:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    ba8e:	2c00      	cmp	r4, #0
    ba90:	d1e4      	bne.n	ba5c <prio_recv_thread+0xc>
		if (node_rx) {
    ba92:	9b01      	ldr	r3, [sp, #4]
    ba94:	b1b3      	cbz	r3, bac4 <prio_recv_thread+0x74>
			ll_rx_dequeue();
    ba96:	f001 ff9d 	bl	d9d4 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    ba9a:	f8dd 8004 	ldr.w	r8, [sp, #4]
    ba9e:	4640      	mov	r0, r8
    baa0:	f001 fbbc 	bl	d21c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    baa4:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    baa6:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    baaa:	796b      	ldrb	r3, [r5, #5]
    baac:	2b03      	cmp	r3, #3
    baae:	d102      	bne.n	bab6 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    bab0:	792b      	ldrb	r3, [r5, #4]
    bab2:	2b17      	cmp	r3, #23
    bab4:	d00e      	beq.n	bad4 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
    bab6:	4629      	mov	r1, r5
    bab8:	4630      	mov	r0, r6
    baba:	f013 fc46 	bl	1f34a <k_queue_append>
		if (iso_received || node_rx) {
    babe:	9b01      	ldr	r3, [sp, #4]
    bac0:	2b00      	cmp	r3, #0
    bac2:	d1d8      	bne.n	ba76 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
    bac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bacc:	4638      	mov	r0, r7
    bace:	f00e fb6b 	bl	1a1a8 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    bad2:	e7d0      	b.n	ba76 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    bad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bad8:	4621      	mov	r1, r4
    bada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bade:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    bae0:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    bae4:	f7fa ff4a 	bl	697c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    bae8:	4641      	mov	r1, r8
    baea:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    baec:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    baee:	f105 001c 	add.w	r0, r5, #28
    baf2:	f000 ff1f 	bl	c934 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    baf6:	4640      	mov	r0, r8
    baf8:	f000 ff3c 	bl	c974 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    bafc:	4620      	mov	r0, r4
			if (buf) {
    bafe:	b124      	cbz	r4, bb0a <prio_recv_thread+0xba>
				bt_recv_prio(buf);
    bb00:	f7fb fbee 	bl	72e0 <bt_recv_prio>
					net_buf_unref(buf);
    bb04:	4620      	mov	r0, r4
    bb06:	f00b f9af 	bl	16e68 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    bb0a:	9d01      	ldr	r5, [sp, #4]
    bb0c:	e7d3      	b.n	bab6 <prio_recv_thread+0x66>
    bb0e:	bf00      	nop
    bb10:	20000a40 	.word	0x20000a40
    bb14:	20000a70 	.word	0x20000a70

0000bb18 <hci_driver_open>:
{
    bb18:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    bb1a:	481a      	ldr	r0, [pc, #104]	; (bb84 <hci_driver_open+0x6c>)
{
    bb1c:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    bb1e:	f002 fc19 	bl	e354 <ll_init>
	if (err) {
    bb22:	4604      	mov	r4, r0
    bb24:	bb58      	cbnz	r0, bb7e <hci_driver_open+0x66>
	hci_init(NULL);
    bb26:	f001 fb8f 	bl	d248 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    bb2a:	2600      	movs	r6, #0
    bb2c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    bb2e:	f06f 0209 	mvn.w	r2, #9
    bb32:	e9cd 2403 	strd	r2, r4, [sp, #12]
    bb36:	e9cd 6706 	strd	r6, r7, [sp, #24]
    bb3a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    bb3e:	4b12      	ldr	r3, [pc, #72]	; (bb88 <hci_driver_open+0x70>)
    bb40:	4912      	ldr	r1, [pc, #72]	; (bb8c <hci_driver_open+0x74>)
    bb42:	9400      	str	r4, [sp, #0]
    bb44:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    bb48:	4811      	ldr	r0, [pc, #68]	; (bb90 <hci_driver_open+0x78>)
    bb4a:	f00e fa2f 	bl	19fac <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    bb4e:	4911      	ldr	r1, [pc, #68]	; (bb94 <hci_driver_open+0x7c>)
    bb50:	480f      	ldr	r0, [pc, #60]	; (bb90 <hci_driver_open+0x78>)
    bb52:	f013 fb72 	bl	1f23a <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    bb56:	f06f 0207 	mvn.w	r2, #7
    bb5a:	e9cd 2403 	strd	r2, r4, [sp, #12]
    bb5e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    bb62:	e9cd 4401 	strd	r4, r4, [sp, #4]
    bb66:	4b0c      	ldr	r3, [pc, #48]	; (bb98 <hci_driver_open+0x80>)
    bb68:	490c      	ldr	r1, [pc, #48]	; (bb9c <hci_driver_open+0x84>)
    bb6a:	9400      	str	r4, [sp, #0]
    bb6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bb70:	480b      	ldr	r0, [pc, #44]	; (bba0 <hci_driver_open+0x88>)
    bb72:	f00e fa1b 	bl	19fac <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    bb76:	490b      	ldr	r1, [pc, #44]	; (bba4 <hci_driver_open+0x8c>)
    bb78:	4809      	ldr	r0, [pc, #36]	; (bba0 <hci_driver_open+0x88>)
    bb7a:	f013 fb5e 	bl	1f23a <z_impl_k_thread_name_set>
}
    bb7e:	4620      	mov	r0, r4
    bb80:	b008      	add	sp, #32
    bb82:	bdd0      	pop	{r4, r6, r7, pc}
    bb84:	20000a40 	.word	0x20000a40
    bb88:	0000ba51 	.word	0x0000ba51
    bb8c:	20004280 	.word	0x20004280
    bb90:	200011a8 	.word	0x200011a8
    bb94:	00020418 	.word	0x00020418
    bb98:	0000b939 	.word	0x0000b939
    bb9c:	20004460 	.word	0x20004460
    bba0:	20001228 	.word	0x20001228
    bba4:	00020424 	.word	0x00020424

0000bba8 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
    bba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
    bbac:	f8df 90a8 	ldr.w	r9, [pc, #168]	; bc58 <dup_found.part.0+0xb0>
    bbb0:	f8d9 3000 	ldr.w	r3, [r9]
    bbb4:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
    bbb6:	4680      	mov	r8, r0
    bbb8:	460f      	mov	r7, r1
    bbba:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
    bbbc:	dd12      	ble.n	bbe4 <dup_found.part.0+0x3c>
    bbbe:	4c27      	ldr	r4, [pc, #156]	; (bc5c <dup_found.part.0+0xb4>)
    bbc0:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
    bbc2:	4621      	mov	r1, r4
    bbc4:	2206      	movs	r2, #6
    bbc6:	4630      	mov	r0, r6
    bbc8:	f010 f89e 	bl	1bd08 <memcmp>
    bbcc:	b918      	cbnz	r0, bbd6 <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
    bbce:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    bbd2:	42bb      	cmp	r3, r7
    bbd4:	d029      	beq.n	bc2a <dup_found.part.0+0x82>
		for (int32_t i = 0; i < dup_count; i++) {
    bbd6:	f8d9 3000 	ldr.w	r3, [r9]
    bbda:	3501      	adds	r5, #1
    bbdc:	429d      	cmp	r5, r3
    bbde:	f104 0408 	add.w	r4, r4, #8
    bbe2:	dbee      	blt.n	bbc2 <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
    bbe4:	4d1e      	ldr	r5, [pc, #120]	; (bc60 <dup_found.part.0+0xb8>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
    bbe6:	4c1f      	ldr	r4, [pc, #124]	; (bc64 <dup_found.part.0+0xbc>)
		dup = &dup_filter[dup_curr];
    bbe8:	f8d5 a000 	ldr.w	sl, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
    bbec:	4631      	mov	r1, r6
    bbee:	ea4f 06ca 	mov.w	r6, sl, lsl #3
    bbf2:	1c70      	adds	r0, r6, #1
    bbf4:	4420      	add	r0, r4
    bbf6:	2206      	movs	r2, #6
    bbf8:	f010 f897 	bl	1bd2a <memcpy>
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
    bbfc:	2301      	movs	r3, #1
    bbfe:	fa03 f808 	lsl.w	r8, r3, r8
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bc02:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
    bc06:	f804 703a 	strb.w	r7, [r4, sl, lsl #3]
		dup->mask = BIT(adv_type);
    bc0a:	4434      	add	r4, r6
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bc0c:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
    bc0e:	f884 8007 	strb.w	r8, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bc12:	dc1c      	bgt.n	bc4e <dup_found.part.0+0xa6>
			dup_count++;
    bc14:	3301      	adds	r3, #1
			dup_curr = dup_count;
    bc16:	461a      	mov	r2, r3
			dup_count++;
    bc18:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
    bc1c:	602b      	str	r3, [r5, #0]
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
			dup_curr = 0U;
    bc1e:	2000      	movs	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    bc20:	2a10      	cmp	r2, #16
			dup_curr = 0U;
    bc22:	bf08      	it	eq
    bc24:	6028      	streq	r0, [r5, #0]
		}
	}

	return false;
}
    bc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
    bc2a:	4b0e      	ldr	r3, [pc, #56]	; (bc64 <dup_found.part.0+0xbc>)
    bc2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
    bc30:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
    bc32:	79ea      	ldrb	r2, [r5, #7]
    bc34:	fa22 f308 	lsr.w	r3, r2, r8
    bc38:	f013 0301 	ands.w	r3, r3, #1
    bc3c:	d1f3      	bne.n	bc26 <dup_found.part.0+0x7e>
		dup->mask |= BIT(adv_type);
    bc3e:	fa00 f808 	lsl.w	r8, r0, r8
    bc42:	ea42 0208 	orr.w	r2, r2, r8
    bc46:	71ea      	strb	r2, [r5, #7]
		return false;
    bc48:	4618      	mov	r0, r3
}
    bc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    bc4e:	682a      	ldr	r2, [r5, #0]
    bc50:	3201      	adds	r2, #1
    bc52:	602a      	str	r2, [r5, #0]
    bc54:	e7e3      	b.n	bc1e <dup_found.part.0+0x76>
    bc56:	bf00      	nop
    bc58:	200019fc 	.word	0x200019fc
    bc5c:	20001a05 	.word	0x20001a05
    bc60:	20001a00 	.word	0x20001a00
    bc64:	20001a04 	.word	0x20001a04

0000bc68 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    bc6a:	4c19      	ldr	r4, [pc, #100]	; (bcd0 <le_remote_feat_complete+0x68>)
    bc6c:	6864      	ldr	r4, [r4, #4]
    bc6e:	00a4      	lsls	r4, r4, #2
    bc70:	d504      	bpl.n	bc7c <le_remote_feat_complete+0x14>
    bc72:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    bc74:	4a17      	ldr	r2, [pc, #92]	; (bcd4 <le_remote_feat_complete+0x6c>)
    bc76:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    bc78:	0712      	lsls	r2, r2, #28
    bc7a:	d400      	bmi.n	bc7e <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc7e:	f103 0408 	add.w	r4, r3, #8
    bc82:	4607      	mov	r7, r0
    bc84:	460e      	mov	r6, r1
    bc86:	4620      	mov	r0, r4
    bc88:	2102      	movs	r1, #2
    bc8a:	f012 f8b1 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    bc8e:	233e      	movs	r3, #62	; 0x3e
    bc90:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    bc92:	230c      	movs	r3, #12
    bc94:	7043      	strb	r3, [r0, #1]
    bc96:	2101      	movs	r1, #1
    bc98:	4620      	mov	r0, r4
    bc9a:	f012 f8a9 	bl	1ddf0 <net_buf_simple_add>
    bc9e:	4603      	mov	r3, r0
	me->subevent = subevt;
    bca0:	2204      	movs	r2, #4
    bca2:	701a      	strb	r2, [r3, #0]
    bca4:	4620      	mov	r0, r4
    bca6:	210b      	movs	r1, #11
    bca8:	f012 f8a2 	bl	1ddf0 <net_buf_simple_add>
		memcpy(&sep->features[0],
    bcac:	2208      	movs	r2, #8
	sep->status = status;
    bcae:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    bcb0:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    bcb4:	b92f      	cbnz	r7, bcc2 <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
    bcb6:	1d31      	adds	r1, r6, #4
    bcb8:	3003      	adds	r0, #3
}
    bcba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    bcbe:	f010 b834 	b.w	1bd2a <memcpy>
}
    bcc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    bcc6:	2100      	movs	r1, #0
    bcc8:	3003      	adds	r0, #3
    bcca:	f010 b839 	b.w	1bd40 <memset>
    bcce:	bf00      	nop
    bcd0:	20000240 	.word	0x20000240
    bcd4:	20000248 	.word	0x20000248

0000bcd8 <hci_vendor_cmd_handle_common>:
{
    bcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    bcda:	3801      	subs	r0, #1
{
    bcdc:	b087      	sub	sp, #28
    bcde:	4615      	mov	r5, r2
	switch (ocf) {
    bce0:	2809      	cmp	r0, #9
    bce2:	d806      	bhi.n	bcf2 <hci_vendor_cmd_handle_common+0x1a>
    bce4:	e8df f000 	tbb	[pc, r0]
    bce8:	05432609 	.word	0x05432609
    bcec:	6b055705 	.word	0x6b055705
    bcf0:	9d88      	.short	0x9d88
    bcf2:	f06f 0015 	mvn.w	r0, #21
}
    bcf6:	b007      	add	sp, #28
    bcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bcfa:	4b54      	ldr	r3, [pc, #336]	; (be4c <hci_vendor_cmd_handle_common+0x174>)
    bcfc:	210d      	movs	r1, #13
    bcfe:	8818      	ldrh	r0, [r3, #0]
    bd00:	f010 fba4 	bl	1c44c <bt_hci_cmd_complete_create>
    bd04:	210d      	movs	r1, #13
    bd06:	6028      	str	r0, [r5, #0]
    bd08:	3008      	adds	r0, #8
    bd0a:	f012 f871 	bl	1ddf0 <net_buf_simple_add>
    bd0e:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    bd10:	2202      	movs	r2, #2
	rp->status = 0x00;
    bd12:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    bd14:	2103      	movs	r1, #3
	rp->status = 0x00;
    bd16:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    bd18:	705a      	strb	r2, [r3, #1]
    bd1a:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    bd1c:	70da      	strb	r2, [r3, #3]
    bd1e:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    bd20:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    bd22:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    bd24:	71d8      	strb	r0, [r3, #7]
    bd26:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    bd28:	7258      	strb	r0, [r3, #9]
    bd2a:	7298      	strb	r0, [r3, #10]
    bd2c:	72d8      	strb	r0, [r3, #11]
    bd2e:	7318      	strb	r0, [r3, #12]
}
    bd30:	b007      	add	sp, #28
    bd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bd34:	4b45      	ldr	r3, [pc, #276]	; (be4c <hci_vendor_cmd_handle_common+0x174>)
    bd36:	2141      	movs	r1, #65	; 0x41
    bd38:	8818      	ldrh	r0, [r3, #0]
    bd3a:	f010 fb87 	bl	1c44c <bt_hci_cmd_complete_create>
    bd3e:	2141      	movs	r1, #65	; 0x41
    bd40:	6028      	str	r0, [r5, #0]
    bd42:	3008      	adds	r0, #8
    bd44:	f012 f854 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    bd48:	2400      	movs	r4, #0
    bd4a:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    bd4c:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    bd4e:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    bd52:	4621      	mov	r1, r4
    bd54:	f00f fff4 	bl	1bd40 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    bd58:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    bd5a:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    bd5c:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    bd60:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    bd64:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    bd66:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    bd68:	70ab      	strb	r3, [r5, #2]
}
    bd6a:	b007      	add	sp, #28
    bd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bd6e:	4b37      	ldr	r3, [pc, #220]	; (be4c <hci_vendor_cmd_handle_common+0x174>)
    bd70:	2109      	movs	r1, #9
    bd72:	8818      	ldrh	r0, [r3, #0]
    bd74:	f010 fb6a 	bl	1c44c <bt_hci_cmd_complete_create>
    bd78:	2109      	movs	r1, #9
    bd7a:	6028      	str	r0, [r5, #0]
    bd7c:	3008      	adds	r0, #8
    bd7e:	f012 f837 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    bd82:	2400      	movs	r4, #0
    bd84:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    bd88:	2208      	movs	r2, #8
    bd8a:	4621      	mov	r1, r4
    bd8c:	f00f ffd8 	bl	1bd40 <memset>
	return 0;
    bd90:	4620      	mov	r0, r4
}
    bd92:	b007      	add	sp, #28
    bd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    bd96:	6889      	ldr	r1, [r1, #8]
    bd98:	2000      	movs	r0, #0
    bd9a:	f7ff fd31 	bl	b800 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    bd9e:	4b2b      	ldr	r3, [pc, #172]	; (be4c <hci_vendor_cmd_handle_common+0x174>)
    bda0:	2101      	movs	r1, #1
    bda2:	8818      	ldrh	r0, [r3, #0]
    bda4:	f010 fb52 	bl	1c44c <bt_hci_cmd_complete_create>
    bda8:	2101      	movs	r1, #1
    bdaa:	4604      	mov	r4, r0
    bdac:	3008      	adds	r0, #8
    bdae:	f012 f81f 	bl	1ddf0 <net_buf_simple_add>
    bdb2:	4603      	mov	r3, r0
	ccst->status = status;
    bdb4:	2000      	movs	r0, #0
    bdb6:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
    bdb8:	602c      	str	r4, [r5, #0]
}
    bdba:	b007      	add	sp, #28
    bdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    bdbe:	4e24      	ldr	r6, [pc, #144]	; (be50 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bdc0:	4f22      	ldr	r7, [pc, #136]	; (be4c <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    bdc2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    bdc4:	f10d 0c04 	add.w	ip, sp, #4
    bdc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    bdcc:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bdce:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    bdd0:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bdd4:	2112      	movs	r1, #18
    bdd6:	f010 fb39 	bl	1c44c <bt_hci_cmd_complete_create>
    bdda:	2112      	movs	r1, #18
    bddc:	6028      	str	r0, [r5, #0]
    bdde:	3008      	adds	r0, #8
    bde0:	f012 f806 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    bde4:	2400      	movs	r4, #0
    bde6:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    bdea:	2211      	movs	r2, #17
    bdec:	a901      	add	r1, sp, #4
    bdee:	f00f ff9c 	bl	1bd2a <memcpy>
	return 0;
    bdf2:	4620      	mov	r0, r4
}
    bdf4:	b007      	add	sp, #28
    bdf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bdf8:	4b14      	ldr	r3, [pc, #80]	; (be4c <hci_vendor_cmd_handle_common+0x174>)
    bdfa:	2118      	movs	r1, #24
    bdfc:	8818      	ldrh	r0, [r3, #0]
    bdfe:	f010 fb25 	bl	1c44c <bt_hci_cmd_complete_create>
    be02:	2118      	movs	r1, #24
    be04:	6028      	str	r0, [r5, #0]
    be06:	3008      	adds	r0, #8
    be08:	f011 fff2 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    be0c:	2400      	movs	r4, #0
    be0e:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    be10:	2101      	movs	r1, #1
	rp->status = 0x00;
    be12:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    be16:	f00a fea7 	bl	16b68 <hci_vendor_read_static_addr>
    be1a:	7068      	strb	r0, [r5, #1]
	return 0;
    be1c:	4620      	mov	r0, r4
}
    be1e:	b007      	add	sp, #28
    be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    be22:	4b0a      	ldr	r3, [pc, #40]	; (be4c <hci_vendor_cmd_handle_common+0x174>)
    be24:	2121      	movs	r1, #33	; 0x21
    be26:	8818      	ldrh	r0, [r3, #0]
    be28:	f010 fb10 	bl	1c44c <bt_hci_cmd_complete_create>
    be2c:	2121      	movs	r1, #33	; 0x21
    be2e:	6028      	str	r0, [r5, #0]
    be30:	3008      	adds	r0, #8
    be32:	f011 ffdd 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    be36:	4601      	mov	r1, r0
    be38:	2400      	movs	r4, #0
    be3a:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    be3e:	3001      	adds	r0, #1
    be40:	f00a ff06 	bl	16c50 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    be44:	4620      	mov	r0, r4
}
    be46:	b007      	add	sp, #28
    be48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be4a:	bf00      	nop
    be4c:	20002d54 	.word	0x20002d54
    be50:	0002044c 	.word	0x0002044c

0000be54 <hci_cmd_handle>:
{
    be54:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    be56:	8983      	ldrh	r3, [r0, #12]
{
    be58:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    be5a:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    be5c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    be5e:	9209      	str	r2, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
    be60:	d930      	bls.n	bec4 <hci_cmd_handle+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
    be62:	4604      	mov	r4, r0
    be64:	460e      	mov	r6, r1
    be66:	3008      	adds	r0, #8
    be68:	2103      	movs	r1, #3
    be6a:	f011 ffe8 	bl	1de3e <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    be6e:	89a2      	ldrh	r2, [r4, #12]
    be70:	7883      	ldrb	r3, [r0, #2]
    be72:	429a      	cmp	r2, r3
    be74:	d326      	bcc.n	bec4 <hci_cmd_handle+0x70>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    be76:	8802      	ldrh	r2, [r0, #0]
    be78:	4fb5      	ldr	r7, [pc, #724]	; (c150 <hci_cmd_handle+0x2fc>)
	switch (BT_OGF(_opcode)) {
    be7a:	f3c2 2385 	ubfx	r3, r2, #10, #6
    be7e:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    be80:	b290      	uxth	r0, r2
    be82:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
    be84:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    be88:	d809      	bhi.n	be9e <hci_cmd_handle+0x4a>
    be8a:	b1a3      	cbz	r3, beb6 <hci_cmd_handle+0x62>
    be8c:	3b01      	subs	r3, #1
    be8e:	2b07      	cmp	r3, #7
    be90:	d811      	bhi.n	beb6 <hci_cmd_handle+0x62>
    be92:	e8df f003 	tbb	[pc, r3]
    be96:	101b      	.short	0x101b
    be98:	10104d2a 	.word	0x10104d2a
    be9c:	6510      	.short	0x6510
    be9e:	2b3f      	cmp	r3, #63	; 0x3f
    bea0:	d109      	bne.n	beb6 <hci_cmd_handle+0x62>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    bea2:	4621      	mov	r1, r4
    bea4:	aa09      	add	r2, sp, #36	; 0x24
    bea6:	4628      	mov	r0, r5
    bea8:	f7ff ff16 	bl	bcd8 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    beac:	3016      	adds	r0, #22
	return evt;
    beae:	bf18      	it	ne
    beb0:	9c09      	ldrne	r4, [sp, #36]	; 0x24
	if (err == -EINVAL) {
    beb2:	d104      	bne.n	bebe <hci_cmd_handle+0x6a>
	return bt_hci_cmd_status_create(_opcode, status);
    beb4:	8838      	ldrh	r0, [r7, #0]
    beb6:	2101      	movs	r1, #1
    beb8:	f010 fada 	bl	1c470 <bt_hci_cmd_status_create>
    bebc:	4604      	mov	r4, r0
}
    bebe:	4620      	mov	r0, r4
    bec0:	b00f      	add	sp, #60	; 0x3c
    bec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    bec4:	2400      	movs	r4, #0
}
    bec6:	4620      	mov	r0, r4
    bec8:	b00f      	add	sp, #60	; 0x3c
    beca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    becc:	2d06      	cmp	r5, #6
    bece:	f000 845a 	beq.w	c786 <hci_cmd_handle+0x932>
    bed2:	2d1d      	cmp	r5, #29
    bed4:	d1ef      	bne.n	beb6 <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
    bed6:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    bed8:	8818      	ldrh	r0, [r3, #0]
    beda:	f003 fdeb 	bl	fab4 <ll_version_ind_send>
    bede:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    bee0:	8838      	ldrh	r0, [r7, #0]
    bee2:	f010 fac5 	bl	1c470 <bt_hci_cmd_status_create>
    bee6:	4604      	mov	r4, r0
}
    bee8:	e7e9      	b.n	bebe <hci_cmd_handle+0x6a>
	switch (ocf) {
    beea:	2d63      	cmp	r5, #99	; 0x63
    beec:	f000 848a 	beq.w	c804 <hci_cmd_handle+0x9b0>
    bef0:	f200 80ec 	bhi.w	c0cc <hci_cmd_handle+0x278>
    bef4:	2d03      	cmp	r5, #3
    bef6:	f000 8452 	beq.w	c79e <hci_cmd_handle+0x94a>
    befa:	2d2d      	cmp	r5, #45	; 0x2d
    befc:	f040 80d2 	bne.w	c0a4 <hci_cmd_handle+0x250>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    bf00:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bf02:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    bf04:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    bf06:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    bf08:	f010 faa0 	bl	1c44c <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    bf0c:	2104      	movs	r1, #4
    bf0e:	9009      	str	r0, [sp, #36]	; 0x24
    bf10:	3008      	adds	r0, #8
    bf12:	f011 ff6d 	bl	1ddf0 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    bf16:	b2b4      	uxth	r4, r6
    bf18:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    bf1a:	1cc3      	adds	r3, r0, #3
    bf1c:	4621      	mov	r1, r4
    bf1e:	463a      	mov	r2, r7
    bf20:	2002      	movs	r0, #2
    bf22:	f7ff fcb7 	bl	b894 <ll_tx_pwr_lvl_get>
	rp->status = status;
    bf26:	7028      	strb	r0, [r5, #0]
	return evt;
    bf28:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    bf2a:	f8a5 6001 	strh.w	r6, [r5, #1]
}
    bf2e:	e7c6      	b.n	bebe <hci_cmd_handle+0x6a>
	switch (ocf) {
    bf30:	1e6a      	subs	r2, r5, #1
    bf32:	2a08      	cmp	r2, #8
    bf34:	d8bf      	bhi.n	beb6 <hci_cmd_handle+0x62>
    bf36:	a301      	add	r3, pc, #4	; (adr r3, bf3c <hci_cmd_handle+0xe8>)
    bf38:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    bf3c:	0000c20b 	.word	0x0000c20b
    bf40:	0000c159 	.word	0x0000c159
    bf44:	0000c127 	.word	0x0000c127
    bf48:	0000beb7 	.word	0x0000beb7
    bf4c:	0000beb7 	.word	0x0000beb7
    bf50:	0000beb7 	.word	0x0000beb7
    bf54:	0000beb7 	.word	0x0000beb7
    bf58:	0000beb7 	.word	0x0000beb7
    bf5c:	0000c105 	.word	0x0000c105
	switch (ocf) {
    bf60:	1e6a      	subs	r2, r5, #1
    bf62:	2a4d      	cmp	r2, #77	; 0x4d
    bf64:	d8a7      	bhi.n	beb6 <hci_cmd_handle+0x62>
    bf66:	a301      	add	r3, pc, #4	; (adr r3, bf6c <hci_cmd_handle+0x118>)
    bf68:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    bf6c:	0000c4e5 	.word	0x0000c4e5
    bf70:	0000c4c1 	.word	0x0000c4c1
    bf74:	0000c56d 	.word	0x0000c56d
    bf78:	0000beb7 	.word	0x0000beb7
    bf7c:	0000c563 	.word	0x0000c563
    bf80:	0000c547 	.word	0x0000c547
    bf84:	0000c52b 	.word	0x0000c52b
    bf88:	0000c51f 	.word	0x0000c51f
    bf8c:	0000c513 	.word	0x0000c513
    bf90:	0000c509 	.word	0x0000c509
    bf94:	0000c4f1 	.word	0x0000c4f1
    bf98:	0000c75b 	.word	0x0000c75b
    bf9c:	0000c725 	.word	0x0000c725
    bfa0:	0000c71d 	.word	0x0000c71d
    bfa4:	0000c6f9 	.word	0x0000c6f9
    bfa8:	0000c6f3 	.word	0x0000c6f3
    bfac:	0000c6eb 	.word	0x0000c6eb
    bfb0:	0000c6e3 	.word	0x0000c6e3
    bfb4:	0000c6bb 	.word	0x0000c6bb
    bfb8:	0000c6b3 	.word	0x0000c6b3
    bfbc:	0000c689 	.word	0x0000c689
    bfc0:	0000c675 	.word	0x0000c675
    bfc4:	0000c641 	.word	0x0000c641
    bfc8:	0000c61f 	.word	0x0000c61f
    bfcc:	0000c601 	.word	0x0000c601
    bfd0:	0000beb7 	.word	0x0000beb7
    bfd4:	0000beb7 	.word	0x0000beb7
    bfd8:	0000c5cb 	.word	0x0000c5cb
    bfdc:	0000beb7 	.word	0x0000beb7
    bfe0:	0000beb7 	.word	0x0000beb7
    bfe4:	0000beb7 	.word	0x0000beb7
    bfe8:	0000c5b5 	.word	0x0000c5b5
    bfec:	0000c47b 	.word	0x0000c47b
    bff0:	0000c46b 	.word	0x0000c46b
    bff4:	0000c435 	.word	0x0000c435
    bff8:	0000c429 	.word	0x0000c429
    bffc:	0000beb7 	.word	0x0000beb7
    c000:	0000beb7 	.word	0x0000beb7
    c004:	0000c41b 	.word	0x0000c41b
    c008:	0000c413 	.word	0x0000c413
    c00c:	0000c40d 	.word	0x0000c40d
    c010:	0000c3eb 	.word	0x0000c3eb
    c014:	0000c3bd 	.word	0x0000c3bd
    c018:	0000c38f 	.word	0x0000c38f
    c01c:	0000c385 	.word	0x0000c385
    c020:	0000c377 	.word	0x0000c377
    c024:	0000c32b 	.word	0x0000c32b
    c028:	0000c2d1 	.word	0x0000c2d1
    c02c:	0000c29d 	.word	0x0000c29d
    c030:	0000c241 	.word	0x0000c241
    c034:	0000beb7 	.word	0x0000beb7
    c038:	0000beb7 	.word	0x0000beb7
    c03c:	0000beb7 	.word	0x0000beb7
    c040:	0000beb7 	.word	0x0000beb7
    c044:	0000beb7 	.word	0x0000beb7
    c048:	0000beb7 	.word	0x0000beb7
    c04c:	0000beb7 	.word	0x0000beb7
    c050:	0000beb7 	.word	0x0000beb7
    c054:	0000beb7 	.word	0x0000beb7
    c058:	0000beb7 	.word	0x0000beb7
    c05c:	0000beb7 	.word	0x0000beb7
    c060:	0000beb7 	.word	0x0000beb7
    c064:	0000beb7 	.word	0x0000beb7
    c068:	0000beb7 	.word	0x0000beb7
    c06c:	0000beb7 	.word	0x0000beb7
    c070:	0000beb7 	.word	0x0000beb7
    c074:	0000beb7 	.word	0x0000beb7
    c078:	0000beb7 	.word	0x0000beb7
    c07c:	0000beb7 	.word	0x0000beb7
    c080:	0000beb7 	.word	0x0000beb7
    c084:	0000beb7 	.word	0x0000beb7
    c088:	0000beb7 	.word	0x0000beb7
    c08c:	0000beb7 	.word	0x0000beb7
    c090:	0000beb7 	.word	0x0000beb7
    c094:	0000c49d 	.word	0x0000c49d
    c098:	0000beb7 	.word	0x0000beb7
    c09c:	0000beb7 	.word	0x0000beb7
    c0a0:	0000c493 	.word	0x0000c493
	switch (ocf) {
    c0a4:	2d01      	cmp	r5, #1
    c0a6:	f47f af06 	bne.w	beb6 <hci_cmd_handle+0x62>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c0aa:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    c0ac:	4b29      	ldr	r3, [pc, #164]	; (c154 <hci_cmd_handle+0x300>)
    c0ae:	6811      	ldr	r1, [r2, #0]
    c0b0:	6852      	ldr	r2, [r2, #4]
    c0b2:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c0b4:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c0b6:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c0b8:	f010 f9c8 	bl	1c44c <bt_hci_cmd_complete_create>
    c0bc:	2101      	movs	r1, #1
    c0be:	4604      	mov	r4, r0
    c0c0:	3008      	adds	r0, #8
    c0c2:	f011 fe95 	bl	1ddf0 <net_buf_simple_add>
	ccst->status = status;
    c0c6:	2300      	movs	r3, #0
    c0c8:	7003      	strb	r3, [r0, #0]
}
    c0ca:	e6f8      	b.n	bebe <hci_cmd_handle+0x6a>
	switch (ocf) {
    c0cc:	2d7b      	cmp	r5, #123	; 0x7b
    c0ce:	f000 839c 	beq.w	c80a <hci_cmd_handle+0x9b6>
    c0d2:	2d7c      	cmp	r5, #124	; 0x7c
    c0d4:	f47f aeef 	bne.w	beb6 <hci_cmd_handle+0x62>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    c0d8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c0da:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    c0dc:	8859      	ldrh	r1, [r3, #2]
    c0de:	b2a8      	uxth	r0, r5
    c0e0:	f003 fe04 	bl	fcec <ll_apto_set>
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c0e4:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c0e6:	2103      	movs	r1, #3
    c0e8:	8838      	ldrh	r0, [r7, #0]
    c0ea:	f010 f9af 	bl	1c44c <bt_hci_cmd_complete_create>
    c0ee:	2103      	movs	r1, #3
    c0f0:	4603      	mov	r3, r0
    c0f2:	3008      	adds	r0, #8
    c0f4:	9309      	str	r3, [sp, #36]	; 0x24
    c0f6:	f011 fe7b 	bl	1ddf0 <net_buf_simple_add>
	rp->status = status;
    c0fa:	7004      	strb	r4, [r0, #0]
	return evt;
    c0fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_cpu_to_le16(handle);
    c0fe:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    c102:	e6dc      	b.n	bebe <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c104:	2107      	movs	r1, #7
    c106:	f010 f9a1 	bl	1c44c <bt_hci_cmd_complete_create>
    c10a:	2107      	movs	r1, #7
    c10c:	4603      	mov	r3, r0
    c10e:	3008      	adds	r0, #8
    c110:	9309      	str	r3, [sp, #36]	; 0x24
    c112:	f011 fe6d 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c116:	4601      	mov	r1, r0
    c118:	2000      	movs	r0, #0
    c11a:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    c11e:	f7ff fba1 	bl	b864 <ll_addr_read>
	return evt;
    c122:	9c09      	ldr	r4, [sp, #36]	; 0x24
}
    c124:	e6cb      	b.n	bebe <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c126:	2109      	movs	r1, #9
    c128:	f010 f990 	bl	1c44c <bt_hci_cmd_complete_create>
    c12c:	2109      	movs	r1, #9
    c12e:	4603      	mov	r3, r0
    c130:	3008      	adds	r0, #8
    c132:	9309      	str	r3, [sp, #36]	; 0x24
    c134:	f011 fe5c 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c138:	2100      	movs	r1, #0
    c13a:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c13c:	2208      	movs	r2, #8
	rp->status = 0x00;
    c13e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c142:	f00f fdfd 	bl	1bd40 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    c146:	2360      	movs	r3, #96	; 0x60
	return evt;
    c148:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->features[4] = (1 << 5) | (1 << 6);
    c14a:	716b      	strb	r3, [r5, #5]
}
    c14c:	e6b7      	b.n	bebe <hci_cmd_handle+0x6a>
    c14e:	bf00      	nop
    c150:	20002d54 	.word	0x20002d54
    c154:	20000240 	.word	0x20000240
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c158:	2141      	movs	r1, #65	; 0x41
    c15a:	f010 f977 	bl	1c44c <bt_hci_cmd_complete_create>
    c15e:	2141      	movs	r1, #65	; 0x41
    c160:	4603      	mov	r3, r0
    c162:	3008      	adds	r0, #8
    c164:	9309      	str	r3, [sp, #36]	; 0x24
    c166:	f011 fe43 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c16a:	2100      	movs	r1, #0
    c16c:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c16e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c170:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    c174:	f00f fde4 	bl	1bd40 <memset>
	rp->commands[0] |= BIT(5);
    c178:	7869      	ldrb	r1, [r5, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    c17a:	7beb      	ldrb	r3, [r5, #15]
	rp->commands[10] |= BIT(2);
    c17c:	7aea      	ldrb	r2, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
    c17e:	79a8      	ldrb	r0, [r5, #6]
	rp->commands[0] |= BIT(5);
    c180:	f041 0120 	orr.w	r1, r1, #32
    c184:	7069      	strb	r1, [r5, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
    c186:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
	return evt;
    c18a:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->commands[14] |= BIT(3) | BIT(5);
    c18c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    c190:	f061 010f 	orn	r1, r1, #15
    c194:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
    c198:	73eb      	strb	r3, [r5, #15]
	rp->commands[35] |= BIT(3);
    c19a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	rp->commands[15] |= BIT(1);
    c19e:	7c2b      	ldrb	r3, [r5, #16]
	rp->commands[10] |= BIT(2);
    c1a0:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c1a4:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[15] |= BIT(1);
    c1a8:	f043 0302 	orr.w	r3, r3, #2
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c1ac:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
	rp->commands[10] |= BIT(2);
    c1b0:	72ea      	strb	r2, [r5, #11]
	rp->commands[39] |= BIT(2);
    c1b2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	rp->commands[22] |= BIT(2);
    c1b6:	7dea      	ldrb	r2, [r5, #23]
	rp->commands[15] |= BIT(1);
    c1b8:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c1ba:	7eab      	ldrb	r3, [r5, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
    c1bc:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[39] |= BIT(2);
    c1c0:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[22] |= BIT(2);
    c1c4:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c1c8:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
    c1cc:	71a8      	strb	r0, [r5, #6]
	rp->commands[38] |= BIT(7);
    c1ce:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
	rp->commands[39] |= BIT(2);
    c1d2:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
	rp->commands[22] |= BIT(2);
    c1d6:	75ea      	strb	r2, [r5, #23]
	rp->commands[28] |= BIT(3);
    c1d8:	7f69      	ldrb	r1, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    c1da:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    c1de:	76ab      	strb	r3, [r5, #26]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c1e0:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
	rp->commands[38] |= BIT(7);
    c1e4:	f060 007f 	orn	r0, r0, #127	; 0x7f
    c1e8:	f885 0027 	strb.w	r0, [r5, #39]	; 0x27
	rp->commands[28] |= BIT(0);
    c1ec:	f041 0109 	orr.w	r1, r1, #9
	rp->commands[26] |= BIT(4) | BIT(5);
    c1f0:	20ff      	movs	r0, #255	; 0xff
	rp->commands[32] |= BIT(4) | BIT(5);
    c1f2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c1f6:	f063 0306 	orn	r3, r3, #6
	rp->commands[28] |= BIT(0);
    c1fa:	7769      	strb	r1, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    c1fc:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	rp->commands[26] |= BIT(4) | BIT(5);
    c200:	76e8      	strb	r0, [r5, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    c202:	7728      	strb	r0, [r5, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c204:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
}
    c208:	e659      	b.n	bebe <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c20a:	2109      	movs	r1, #9
    c20c:	f010 f91e 	bl	1c44c <bt_hci_cmd_complete_create>
    c210:	2109      	movs	r1, #9
    c212:	4603      	mov	r3, r0
    c214:	3008      	adds	r0, #8
    c216:	9309      	str	r3, [sp, #36]	; 0x24
    c218:	f011 fdea 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c21c:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
    c21e:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    c220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
    c224:	7003      	strb	r3, [r0, #0]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c226:	f06f 040e 	mvn.w	r4, #14
	rp->hci_version = LL_VERSION_NUMBER;
    c22a:	7041      	strb	r1, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    c22c:	7083      	strb	r3, [r0, #2]
    c22e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c230:	2305      	movs	r3, #5
    c232:	7144      	strb	r4, [r0, #5]
	rp->lmp_version = LL_VERSION_NUMBER;
    c234:	7101      	strb	r1, [r0, #4]
	return evt;
    c236:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    c238:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    c23a:	71c2      	strb	r2, [r0, #7]
    c23c:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    c23e:	e63e      	b.n	bebe <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    c240:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c242:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
    c244:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    c246:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    c248:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c24c:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
    c24e:	bf48      	it	mi
    c250:	f041 0103 	orrmi.w	r1, r1, #3
    c254:	7913      	ldrb	r3, [r2, #4]
    c256:	bf48      	it	mi
    c258:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    c25a:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
    c25c:	bf44      	itt	mi
    c25e:	f043 0303 	orrmi.w	r3, r3, #3
    c262:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    c264:	ea43 0201 	orr.w	r2, r3, r1
    c268:	f032 0203 	bics.w	r2, r2, #3
    c26c:	f040 82f3 	bne.w	c856 <hci_cmd_handle+0xa02>
	if (!(cmd->tx_phys & 0x07) ||
    c270:	074d      	lsls	r5, r1, #29
    c272:	f000 82ea 	beq.w	c84a <hci_cmd_handle+0x9f6>
    c276:	075a      	lsls	r2, r3, #29
    c278:	f000 82e7 	beq.w	c84a <hci_cmd_handle+0x9f6>
	if (phy_opts & 0x03) {
    c27c:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    c280:	bf1c      	itt	ne
    c282:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    c286:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    c28a:	4630      	mov	r0, r6
    c28c:	f003 fcc2 	bl	fc14 <ll_phy_req_send>
    c290:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c292:	8838      	ldrh	r0, [r7, #0]
    c294:	f010 f8ec 	bl	1c470 <bt_hci_cmd_status_create>
    c298:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    c29a:	e610      	b.n	bebe <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    c29c:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c29e:	781a      	ldrb	r2, [r3, #0]
    c2a0:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    c2a2:	bf4a      	itet	mi
    c2a4:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    c2a6:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
    c2a8:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    c2aa:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    c2ac:	bf4a      	itet	mi
    c2ae:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    c2b0:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
    c2b2:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    c2b4:	f003 fca4 	bl	fc00 <ll_phy_default_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    c2b8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c2ba:	8838      	ldrh	r0, [r7, #0]
    c2bc:	2101      	movs	r1, #1
    c2be:	f010 f8c5 	bl	1c44c <bt_hci_cmd_complete_create>
    c2c2:	2101      	movs	r1, #1
    c2c4:	4604      	mov	r4, r0
    c2c6:	3008      	adds	r0, #8
    c2c8:	f011 fd92 	bl	1ddf0 <net_buf_simple_add>
	ccst->status = status;
    c2cc:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
    c2ce:	e5f6      	b.n	bebe <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
    c2d0:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c2d2:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    c2d4:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c2d6:	f010 f8b9 	bl	1c44c <bt_hci_cmd_complete_create>
    c2da:	2105      	movs	r1, #5
    c2dc:	4603      	mov	r3, r0
    c2de:	3008      	adds	r0, #8
    c2e0:	9309      	str	r3, [sp, #36]	; 0x24
    c2e2:	f011 fd85 	bl	1ddf0 <net_buf_simple_add>
    c2e6:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    c2e8:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
    c2ea:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    c2ec:	1ce9      	adds	r1, r5, #3
    c2ee:	f003 fc69 	bl	fbc4 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    c2f2:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
    c2f4:	7028      	strb	r0, [r5, #0]
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	fa93 f2a3 	rbit	r2, r3
    c2fc:	792b      	ldrb	r3, [r5, #4]
    c2fe:	fab2 f282 	clz	r2, r2
    c302:	bf08      	it	eq
    c304:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    c308:	2b00      	cmp	r3, #0
    c30a:	fa93 f3a3 	rbit	r3, r3
    c30e:	fab3 f383 	clz	r3, r3
    c312:	f102 0201 	add.w	r2, r2, #1
    c316:	bf08      	it	eq
    c318:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    c31c:	70ea      	strb	r2, [r5, #3]
    c31e:	3301      	adds	r3, #1
	return evt;
    c320:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    c322:	712b      	strb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
    c324:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    c328:	e5c9      	b.n	bebe <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c32a:	2109      	movs	r1, #9
    c32c:	f010 f88e 	bl	1c44c <bt_hci_cmd_complete_create>
    c330:	2109      	movs	r1, #9
    c332:	4603      	mov	r3, r0
    c334:	3008      	adds	r0, #8
    c336:	9309      	str	r3, [sp, #36]	; 0x24
    c338:	f011 fd5a 	bl	1ddf0 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    c33c:	ab0a      	add	r3, sp, #40	; 0x28
    c33e:	4605      	mov	r5, r0
    c340:	f10d 0222 	add.w	r2, sp, #34	; 0x22
    c344:	a908      	add	r1, sp, #32
    c346:	f10d 001e 	add.w	r0, sp, #30
    c34a:	f003 fc2f 	bl	fbac <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c34e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    c352:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    c356:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c35a:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    c35e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    c362:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->status = 0x00;
    c366:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    c368:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    c36c:	702a      	strb	r2, [r5, #0]
	return evt;
    c36e:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    c370:	f8a5 3007 	strh.w	r3, [r5, #7]
	if (err == -EINVAL) {
    c374:	e5a3      	b.n	bebe <hci_cmd_handle+0x6a>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    c376:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    c378:	8818      	ldrh	r0, [r3, #0]
    c37a:	f006 fd8d 	bl	12e98 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c37e:	8838      	ldrh	r0, [r7, #0]
    c380:	2101      	movs	r1, #1
    c382:	e699      	b.n	c0b8 <hci_cmd_handle+0x264>
	status = ll_rl_enable(cmd->enable);
    c384:	68a3      	ldr	r3, [r4, #8]
    c386:	7818      	ldrb	r0, [r3, #0]
    c388:	f006 fd6a 	bl	12e60 <ll_rl_enable>
    c38c:	e794      	b.n	c2b8 <hci_cmd_handle+0x464>
	memcpy(dst, src, sizeof(*dst));
    c38e:	2207      	movs	r2, #7
    c390:	68a1      	ldr	r1, [r4, #8]
    c392:	a80a      	add	r0, sp, #40	; 0x28
    c394:	f00f fcc9 	bl	1bd2a <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c398:	2107      	movs	r1, #7
    c39a:	8838      	ldrh	r0, [r7, #0]
    c39c:	f010 f856 	bl	1c44c <bt_hci_cmd_complete_create>
    c3a0:	2107      	movs	r1, #7
    c3a2:	4603      	mov	r3, r0
    c3a4:	3008      	adds	r0, #8
    c3a6:	9309      	str	r3, [sp, #36]	; 0x24
    c3a8:	f011 fd22 	bl	1ddf0 <net_buf_simple_add>
    c3ac:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    c3ae:	1c41      	adds	r1, r0, #1
    c3b0:	a80a      	add	r0, sp, #40	; 0x28
    c3b2:	f006 fd23 	bl	12dfc <ll_rl_lrpa_get>
    c3b6:	7020      	strb	r0, [r4, #0]
	return evt;
    c3b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c3ba:	e580      	b.n	bebe <hci_cmd_handle+0x6a>
    c3bc:	2207      	movs	r2, #7
    c3be:	68a1      	ldr	r1, [r4, #8]
    c3c0:	a80a      	add	r0, sp, #40	; 0x28
    c3c2:	f00f fcb2 	bl	1bd2a <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c3c6:	2107      	movs	r1, #7
    c3c8:	8838      	ldrh	r0, [r7, #0]
    c3ca:	f010 f83f 	bl	1c44c <bt_hci_cmd_complete_create>
    c3ce:	2107      	movs	r1, #7
    c3d0:	4603      	mov	r3, r0
    c3d2:	3008      	adds	r0, #8
    c3d4:	9309      	str	r3, [sp, #36]	; 0x24
    c3d6:	f011 fd0b 	bl	1ddf0 <net_buf_simple_add>
    c3da:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    c3dc:	1c41      	adds	r1, r0, #1
    c3de:	a80a      	add	r0, sp, #40	; 0x28
    c3e0:	f006 fcd2 	bl	12d88 <ll_rl_crpa_get>
    c3e4:	7020      	strb	r0, [r4, #0]
	return evt;
    c3e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c3e8:	e569      	b.n	bebe <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c3ea:	2102      	movs	r1, #2
    c3ec:	f010 f82e 	bl	1c44c <bt_hci_cmd_complete_create>
    c3f0:	2102      	movs	r1, #2
    c3f2:	4603      	mov	r3, r0
    c3f4:	3008      	adds	r0, #8
    c3f6:	9309      	str	r3, [sp, #36]	; 0x24
    c3f8:	f011 fcfa 	bl	1ddf0 <net_buf_simple_add>
    c3fc:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    c3fe:	f006 fb7f 	bl	12b00 <ll_rl_size_get>
	rp->status = 0x00;
    c402:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    c404:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    c406:	7023      	strb	r3, [r4, #0]
	return evt;
    c408:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c40a:	e558      	b.n	bebe <hci_cmd_handle+0x6a>
	status = ll_rl_clear();
    c40c:	f006 fb7a 	bl	12b04 <ll_rl_clear>
    c410:	e752      	b.n	c2b8 <hci_cmd_handle+0x464>
	status = ll_rl_remove(&cmd->peer_id_addr);
    c412:	68a0      	ldr	r0, [r4, #8]
    c414:	f006 fbb8 	bl	12b88 <ll_rl_remove>
    c418:	e74e      	b.n	c2b8 <hci_cmd_handle+0x464>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    c41a:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    c41c:	f100 0217 	add.w	r2, r0, #23
    c420:	1dc1      	adds	r1, r0, #7
    c422:	f006 fffb 	bl	1341c <ll_rl_add>
    c426:	e747      	b.n	c2b8 <hci_cmd_handle+0x464>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    c428:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    c42a:	8859      	ldrh	r1, [r3, #2]
    c42c:	8818      	ldrh	r0, [r3, #0]
    c42e:	f003 fbb3 	bl	fb98 <ll_length_default_set>
    c432:	e741      	b.n	c2b8 <hci_cmd_handle+0x464>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c434:	2105      	movs	r1, #5
    c436:	f010 f809 	bl	1c44c <bt_hci_cmd_complete_create>
    c43a:	2105      	movs	r1, #5
    c43c:	4603      	mov	r3, r0
    c43e:	3008      	adds	r0, #8
    c440:	9309      	str	r3, [sp, #36]	; 0x24
    c442:	f011 fcd5 	bl	1ddf0 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    c446:	a90a      	add	r1, sp, #40	; 0x28
    c448:	4605      	mov	r5, r0
    c44a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
    c44e:	f003 fb97 	bl	fb80 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    c452:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    c456:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->status = 0x00;
    c45a:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c45c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
    c460:	702a      	strb	r2, [r5, #0]
	return evt;
    c462:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    c464:	f8a5 3003 	strh.w	r3, [r5, #3]
	if (err == -EINVAL) {
    c468:	e529      	b.n	bebe <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    c46a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c46c:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    c46e:	889a      	ldrh	r2, [r3, #4]
    c470:	8859      	ldrh	r1, [r3, #2]
    c472:	b2a8      	uxth	r0, r5
    c474:	f003 fb3a 	bl	faec <ll_length_req_send>
    c478:	e634      	b.n	c0e4 <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    c47a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    c47c:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
    c47e:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    c480:	7892      	ldrb	r2, [r2, #2]
    c482:	9300      	str	r3, [sp, #0]
    c484:	e9cd 3301 	strd	r3, r3, [sp, #4]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c488:	2102      	movs	r1, #2
    c48a:	b2a8      	uxth	r0, r5
    c48c:	f003 fa0a 	bl	f8a4 <ll_conn_update>
    c490:	e628      	b.n	c0e4 <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    c492:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    c494:	79c1      	ldrb	r1, [r0, #7]
    c496:	f006 fd09 	bl	12eac <ll_priv_mode_set>
    c49a:	e70d      	b.n	c2b8 <hci_cmd_handle+0x464>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c49c:	2103      	movs	r1, #3
    c49e:	f00f ffd5 	bl	1c44c <bt_hci_cmd_complete_create>
    c4a2:	2103      	movs	r1, #3
    c4a4:	4603      	mov	r3, r0
    c4a6:	3008      	adds	r0, #8
    c4a8:	9309      	str	r3, [sp, #36]	; 0x24
    c4aa:	f011 fca1 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c4ae:	4601      	mov	r1, r0
    c4b0:	2300      	movs	r3, #0
    c4b2:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    c4b6:	3001      	adds	r0, #1
    c4b8:	f7ff f9fc 	bl	b8b4 <ll_tx_pwr_get>
	return evt;
    c4bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c4be:	e4fe      	b.n	bebe <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c4c0:	2104      	movs	r1, #4
    c4c2:	f00f ffc3 	bl	1c44c <bt_hci_cmd_complete_create>
    c4c6:	2104      	movs	r1, #4
    c4c8:	4603      	mov	r3, r0
    c4ca:	3008      	adds	r0, #8
    c4cc:	9309      	str	r3, [sp, #36]	; 0x24
    c4ce:	f011 fc8f 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c4d2:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    c4d4:	2103      	movs	r1, #3
	rp->status = 0x00;
    c4d6:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    c4d8:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    c4da:	70c1      	strb	r1, [r0, #3]
	return evt;
    c4dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    c4de:	7042      	strb	r2, [r0, #1]
    c4e0:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    c4e2:	e4ec      	b.n	bebe <hci_cmd_handle+0x6a>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c4e4:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    c4e6:	4bc1      	ldr	r3, [pc, #772]	; (c7ec <hci_cmd_handle+0x998>)
    c4e8:	6811      	ldr	r1, [r2, #0]
    c4ea:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c4ec:	6019      	str	r1, [r3, #0]
    c4ee:	e5e1      	b.n	c0b4 <hci_cmd_handle+0x260>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    c4f0:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    c4f2:	7963      	ldrb	r3, [r4, #5]
    c4f4:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    c4f8:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    c4fc:	7820      	ldrb	r0, [r4, #0]
    c4fe:	79a4      	ldrb	r4, [r4, #6]
    c500:	9400      	str	r4, [sp, #0]
    c502:	f7f4 fdcd 	bl	10a0 <ll_scan_params_set>
    c506:	e6d7      	b.n	c2b8 <hci_cmd_handle+0x464>
	status = ll_adv_enable(cmd->enable);
    c508:	68a3      	ldr	r3, [r4, #8]
    c50a:	7818      	ldrb	r0, [r3, #0]
    c50c:	f7f4 fca8 	bl	e60 <ll_adv_enable>
    c510:	e6d2      	b.n	c2b8 <hci_cmd_handle+0x464>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    c512:	68a1      	ldr	r1, [r4, #8]
    c514:	f811 0b01 	ldrb.w	r0, [r1], #1
    c518:	f002 fbce 	bl	ecb8 <ll_adv_scan_rsp_set>
    c51c:	e6cc      	b.n	c2b8 <hci_cmd_handle+0x464>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    c51e:	68a1      	ldr	r1, [r4, #8]
    c520:	f811 0b01 	ldrb.w	r0, [r1], #1
    c524:	f002 fb7e 	bl	ec24 <ll_adv_data_set>
    c528:	e6c6      	b.n	c2b8 <hci_cmd_handle+0x464>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c52a:	2102      	movs	r1, #2
    c52c:	f00f ff8e 	bl	1c44c <bt_hci_cmd_complete_create>
    c530:	2102      	movs	r1, #2
    c532:	4603      	mov	r3, r0
    c534:	3008      	adds	r0, #8
    c536:	9309      	str	r3, [sp, #36]	; 0x24
    c538:	f011 fc5a 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c53c:	2300      	movs	r3, #0
    c53e:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    c540:	7043      	strb	r3, [r0, #1]
	return evt;
    c542:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c544:	e4bb      	b.n	bebe <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    c546:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    c548:	7ba5      	ldrb	r5, [r4, #14]
    c54a:	79a3      	ldrb	r3, [r4, #6]
    c54c:	7962      	ldrb	r2, [r4, #5]
    c54e:	7921      	ldrb	r1, [r4, #4]
    c550:	8820      	ldrh	r0, [r4, #0]
    c552:	9502      	str	r5, [sp, #8]
    c554:	7b65      	ldrb	r5, [r4, #13]
    c556:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    c558:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    c55a:	9400      	str	r4, [sp, #0]
    c55c:	f002 f9e2 	bl	e924 <ll_adv_params_set>
    c560:	e6aa      	b.n	c2b8 <hci_cmd_handle+0x464>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    c562:	68a1      	ldr	r1, [r4, #8]
    c564:	2001      	movs	r0, #1
    c566:	f7ff f94b 	bl	b800 <ll_addr_set>
    c56a:	e6a5      	b.n	c2b8 <hci_cmd_handle+0x464>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c56c:	2109      	movs	r1, #9
    c56e:	f00f ff6d 	bl	1c44c <bt_hci_cmd_complete_create>
    c572:	2109      	movs	r1, #9
    c574:	4603      	mov	r3, r0
    c576:	3008      	adds	r0, #8
    c578:	9309      	str	r3, [sp, #36]	; 0x24
    c57a:	f011 fc39 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c57e:	2100      	movs	r1, #0
    c580:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c582:	2208      	movs	r2, #8
	rp->status = 0x00;
    c584:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    c588:	f00f fbda 	bl	1bd40 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    c58c:	f000 fe8a 	bl	d2a4 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
    c590:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
    c592:	f3c0 2407 	ubfx	r4, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    c596:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
    c598:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    c59a:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
    c59c:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
    c59e:	70ac      	strb	r4, [r5, #2]
    c5a0:	f3c1 2007 	ubfx	r0, r1, #8, #8
    c5a4:	712b      	strb	r3, [r5, #4]
    c5a6:	0a13      	lsrs	r3, r2, #8
	return evt;
    c5a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
	dst[0] = val;
    c5aa:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
    c5ac:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
    c5ae:	71ea      	strb	r2, [r5, #7]
	dst[1] = val >> 8;
    c5b0:	722b      	strb	r3, [r5, #8]
	if (err == -EINVAL) {
    c5b2:	e484      	b.n	bebe <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    c5b4:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c5b6:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c5b8:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    c5ba:	8853      	ldrh	r3, [r2, #2]
    c5bc:	9102      	str	r1, [sp, #8]
    c5be:	88d1      	ldrh	r1, [r2, #6]
    c5c0:	9101      	str	r1, [sp, #4]
    c5c2:	8891      	ldrh	r1, [r2, #4]
    c5c4:	9100      	str	r1, [sp, #0]
    c5c6:	2200      	movs	r2, #0
    c5c8:	e75e      	b.n	c488 <hci_cmd_handle+0x634>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c5ca:	2109      	movs	r1, #9
    c5cc:	f00f ff3e 	bl	1c44c <bt_hci_cmd_complete_create>
    c5d0:	2109      	movs	r1, #9
    c5d2:	4603      	mov	r3, r0
    c5d4:	3008      	adds	r0, #8
    c5d6:	9309      	str	r3, [sp, #36]	; 0x24
    c5d8:	f011 fc0a 	bl	1ddf0 <net_buf_simple_add>
	dst[0] = val;
    c5dc:	2473      	movs	r4, #115	; 0x73
	rp->status = 0x00;
    c5de:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    c5e0:	2133      	movs	r1, #51	; 0x33
	dst[0] = val;
    c5e2:	220f      	movs	r2, #15
    c5e4:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    c5e6:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    c5e8:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    c5ea:	2413      	movs	r4, #19
    c5ec:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
    c5ee:	213f      	movs	r1, #63	; 0x3f
	dst[1] = val >> 8;
    c5f0:	2202      	movs	r2, #2
    c5f2:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    c5f4:	7141      	strb	r1, [r0, #5]
	return evt;
    c5f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
	dst[1] = val >> 8;
    c5f8:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    c5fa:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    c5fc:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    c5fe:	e45e      	b.n	bebe <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    c600:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
    c602:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
    c604:	f102 030c 	add.w	r3, r2, #12
    c608:	f831 0b02 	ldrh.w	r0, [r1], #2
    c60c:	320a      	adds	r2, #10
    c60e:	f005 fd17 	bl	12040 <ll_enc_req_send>
    c612:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c614:	8838      	ldrh	r0, [r7, #0]
    c616:	f00f ff2b 	bl	1c470 <bt_hci_cmd_status_create>
    c61a:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    c61c:	e44f      	b.n	bebe <hci_cmd_handle+0x6a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c61e:	2109      	movs	r1, #9
    c620:	f00f ff14 	bl	1c44c <bt_hci_cmd_complete_create>
    c624:	2109      	movs	r1, #9
    c626:	4603      	mov	r3, r0
    c628:	3008      	adds	r0, #8
    c62a:	9309      	str	r3, [sp, #36]	; 0x24
    c62c:	f011 fbe0 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c630:	2300      	movs	r3, #0
    c632:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    c636:	2108      	movs	r1, #8
    c638:	f007 fbe2 	bl	13e00 <lll_csrand_get>
	return evt;
    c63c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c63e:	e43e      	b.n	bebe <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    c640:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    c642:	aa0a      	add	r2, sp, #40	; 0x28
    c644:	2300      	movs	r3, #0
    c646:	f100 0110 	add.w	r1, r0, #16
    c64a:	f009 fc85 	bl	15f58 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c64e:	2111      	movs	r1, #17
    c650:	8838      	ldrh	r0, [r7, #0]
    c652:	f00f fefb 	bl	1c44c <bt_hci_cmd_complete_create>
    c656:	2111      	movs	r1, #17
    c658:	4603      	mov	r3, r0
    c65a:	3008      	adds	r0, #8
    c65c:	9309      	str	r3, [sp, #36]	; 0x24
    c65e:	f011 fbc7 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c662:	2300      	movs	r3, #0
    c664:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    c668:	2210      	movs	r2, #16
    c66a:	a90a      	add	r1, sp, #40	; 0x28
    c66c:	f00f fb5d 	bl	1bd2a <memcpy>
	return evt;
    c670:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c672:	e424      	b.n	bebe <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
    c674:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    c676:	8818      	ldrh	r0, [r3, #0]
    c678:	f003 fa00 	bl	fa7c <ll_feature_req_send>
    c67c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c67e:	8838      	ldrh	r0, [r7, #0]
    c680:	f00f fef6 	bl	1c470 <bt_hci_cmd_status_create>
    c684:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    c686:	e41a      	b.n	bebe <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
    c688:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c68a:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    c68c:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c68e:	f00f fedd 	bl	1c44c <bt_hci_cmd_complete_create>
    c692:	2108      	movs	r1, #8
    c694:	4603      	mov	r3, r0
    c696:	4408      	add	r0, r1
    c698:	9309      	str	r3, [sp, #36]	; 0x24
    c69a:	f011 fba9 	bl	1ddf0 <net_buf_simple_add>
    c69e:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
    c6a0:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
    c6a2:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    c6a4:	f003 f988 	bl	f9b8 <ll_chm_get>
	rp->status = status;
    c6a8:	7028      	strb	r0, [r5, #0]
	return evt;
    c6aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->handle = sys_le16_to_cpu(handle);
    c6ac:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    c6b0:	e405      	b.n	bebe <hci_cmd_handle+0x6a>
	status = ll_chm_update(&cmd->ch_map[0]);
    c6b2:	68a0      	ldr	r0, [r4, #8]
    c6b4:	f005 ff7a 	bl	125ac <ll_chm_update>
    c6b8:	e5fe      	b.n	c2b8 <hci_cmd_handle+0x464>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    c6ba:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    c6bc:	890a      	ldrh	r2, [r1, #8]
    c6be:	884b      	ldrh	r3, [r1, #2]
    c6c0:	8808      	ldrh	r0, [r1, #0]
    c6c2:	9202      	str	r2, [sp, #8]
    c6c4:	88ca      	ldrh	r2, [r1, #6]
    c6c6:	9201      	str	r2, [sp, #4]
    c6c8:	8889      	ldrh	r1, [r1, #4]
    c6ca:	9100      	str	r1, [sp, #0]
    c6cc:	2200      	movs	r2, #0
    c6ce:	4611      	mov	r1, r2
    c6d0:	f003 f8e8 	bl	f8a4 <ll_conn_update>
    c6d4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c6d6:	8838      	ldrh	r0, [r7, #0]
    c6d8:	f00f feca 	bl	1c470 <bt_hci_cmd_status_create>
    c6dc:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    c6de:	f7ff bbee 	b.w	bebe <hci_cmd_handle+0x6a>
	status = ll_fal_remove(&cmd->addr);
    c6e2:	68a0      	ldr	r0, [r4, #8]
    c6e4:	f006 f978 	bl	129d8 <ll_fal_remove>
    c6e8:	e5e6      	b.n	c2b8 <hci_cmd_handle+0x464>
	status = ll_fal_add(&cmd->addr);
    c6ea:	68a0      	ldr	r0, [r4, #8]
    c6ec:	f006 f8da 	bl	128a4 <ll_fal_add>
    c6f0:	e5e2      	b.n	c2b8 <hci_cmd_handle+0x464>
	status = ll_fal_clear();
    c6f2:	f006 f8ad 	bl	12850 <ll_fal_clear>
    c6f6:	e5df      	b.n	c2b8 <hci_cmd_handle+0x464>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c6f8:	2102      	movs	r1, #2
    c6fa:	f00f fea7 	bl	1c44c <bt_hci_cmd_complete_create>
    c6fe:	2102      	movs	r1, #2
    c700:	4603      	mov	r3, r0
    c702:	3008      	adds	r0, #8
    c704:	9309      	str	r3, [sp, #36]	; 0x24
    c706:	f011 fb73 	bl	1ddf0 <net_buf_simple_add>
	rp->status = 0x00;
    c70a:	2300      	movs	r3, #0
    c70c:	7003      	strb	r3, [r0, #0]
    c70e:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
    c710:	f006 f89c 	bl	1284c <ll_fal_size_get>
    c714:	7060      	strb	r0, [r4, #1]
	return evt;
    c716:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c718:	f7ff bbd1 	b.w	bebe <hci_cmd_handle+0x6a>
	status = ll_connect_disable(node_rx);
    c71c:	4630      	mov	r0, r6
    c71e:	f005 fc41 	bl	11fa4 <ll_connect_disable>
    c722:	e5c9      	b.n	c2b8 <hci_cmd_handle+0x464>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    c724:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    c726:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    c72a:	7963      	ldrb	r3, [r4, #5]
    c72c:	7922      	ldrb	r2, [r4, #4]
    c72e:	8861      	ldrh	r1, [r4, #2]
    c730:	8820      	ldrh	r0, [r4, #0]
    c732:	9504      	str	r5, [sp, #16]
    c734:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    c738:	9503      	str	r5, [sp, #12]
    c73a:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    c73e:	9502      	str	r5, [sp, #8]
    c740:	7b25      	ldrb	r5, [r4, #12]
    c742:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
    c744:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
    c746:	9400      	str	r4, [sp, #0]
    c748:	f7f6 fb32 	bl	2db0 <ll_create_connection>
    c74c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c74e:	8838      	ldrh	r0, [r7, #0]
    c750:	f00f fe8e 	bl	1c470 <bt_hci_cmd_status_create>
    c754:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    c756:	f7ff bbb2 	b.w	bebe <hci_cmd_handle+0x6a>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    c75a:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
    c75c:	7818      	ldrb	r0, [r3, #0]
    c75e:	2800      	cmp	r0, #0
    c760:	d06e      	beq.n	c840 <hci_cmd_handle+0x9ec>
    c762:	785b      	ldrb	r3, [r3, #1]
    c764:	2b00      	cmp	r3, #0
    c766:	d06b      	beq.n	c840 <hci_cmd_handle+0x9ec>
			dup_count = 0;
    c768:	4921      	ldr	r1, [pc, #132]	; (c7f0 <hci_cmd_handle+0x99c>)
			dup_curr = 0U;
    c76a:	4a22      	ldr	r2, [pc, #136]	; (c7f4 <hci_cmd_handle+0x9a0>)
			dup_count = 0;
    c76c:	2300      	movs	r3, #0
    c76e:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
    c770:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    c772:	f002 fb1b 	bl	edac <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
    c776:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
    c778:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c77a:	f04f 0101 	mov.w	r1, #1
    c77e:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
    c780:	bf08      	it	eq
    c782:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c784:	e59b      	b.n	c2be <hci_cmd_handle+0x46a>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    c786:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    c788:	7899      	ldrb	r1, [r3, #2]
    c78a:	8818      	ldrh	r0, [r3, #0]
    c78c:	f003 f934 	bl	f9f8 <ll_terminate_ind_send>
    c790:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    c792:	8838      	ldrh	r0, [r7, #0]
    c794:	f00f fe6c 	bl	1c470 <bt_hci_cmd_status_create>
    c798:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    c79a:	f7ff bb90 	b.w	bebe <hci_cmd_handle+0x6a>
	dup_count = DUP_FILTER_DISABLED;
    c79e:	4814      	ldr	r0, [pc, #80]	; (c7f0 <hci_cmd_handle+0x99c>)
	event_mask = DEFAULT_EVENT_MASK;
    c7a0:	4915      	ldr	r1, [pc, #84]	; (c7f8 <hci_cmd_handle+0x9a4>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    c7a2:	4a16      	ldr	r2, [pc, #88]	; (c7fc <hci_cmd_handle+0x9a8>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    c7a4:	4b11      	ldr	r3, [pc, #68]	; (c7ec <hci_cmd_handle+0x998>)
	dup_count = DUP_FILTER_DISABLED;
    c7a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    c7aa:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
    c7ac:	f641 75ff 	movw	r5, #8191	; 0x1fff
    c7b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    c7b4:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    c7b8:	2000      	movs	r0, #0
    c7ba:	2100      	movs	r1, #0
    c7bc:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    c7c0:	201f      	movs	r0, #31
    c7c2:	2100      	movs	r1, #0
    c7c4:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    c7c8:	f001 fe3c 	bl	e444 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    c7cc:	2101      	movs	r1, #1
    c7ce:	8838      	ldrh	r0, [r7, #0]
    c7d0:	f00f fe3c 	bl	1c44c <bt_hci_cmd_complete_create>
    c7d4:	2101      	movs	r1, #1
    c7d6:	4604      	mov	r4, r0
    c7d8:	3008      	adds	r0, #8
    c7da:	f011 fb09 	bl	1ddf0 <net_buf_simple_add>
	conn_count = 0U;
    c7de:	4a08      	ldr	r2, [pc, #32]	; (c800 <hci_cmd_handle+0x9ac>)
	ccst->status = status;
    c7e0:	2300      	movs	r3, #0
    c7e2:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    c7e4:	6013      	str	r3, [r2, #0]
}
    c7e6:	f7ff bb6a 	b.w	bebe <hci_cmd_handle+0x6a>
    c7ea:	bf00      	nop
    c7ec:	20000248 	.word	0x20000248
    c7f0:	200019fc 	.word	0x200019fc
    c7f4:	20001a00 	.word	0x20001a00
    c7f8:	20000240 	.word	0x20000240
    c7fc:	200012a8 	.word	0x200012a8
    c800:	200019f8 	.word	0x200019f8
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c804:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c806:	4b17      	ldr	r3, [pc, #92]	; (c864 <hci_cmd_handle+0xa10>)
    c808:	e66e      	b.n	c4e8 <hci_cmd_handle+0x694>
	handle = sys_le16_to_cpu(cmd->handle);
    c80a:	68a3      	ldr	r3, [r4, #8]
    c80c:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    c80e:	a90a      	add	r1, sp, #40	; 0x28
    c810:	b2a8      	uxth	r0, r5
    c812:	f003 fa47 	bl	fca4 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c816:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    c818:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    c81a:	8838      	ldrh	r0, [r7, #0]
    c81c:	f00f fe16 	bl	1c44c <bt_hci_cmd_complete_create>
    c820:	2105      	movs	r1, #5
    c822:	4603      	mov	r3, r0
    c824:	3008      	adds	r0, #8
    c826:	9309      	str	r3, [sp, #36]	; 0x24
    c828:	f011 fae2 	bl	1ddf0 <net_buf_simple_add>
	rp->status = status;
    c82c:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    c82e:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    c832:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
    c836:	9c09      	ldr	r4, [sp, #36]	; 0x24
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    c838:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    c83c:	f7ff bb3f 	b.w	bebe <hci_cmd_handle+0x6a>
		dup_count = DUP_FILTER_DISABLED;
    c840:	4b09      	ldr	r3, [pc, #36]	; (c868 <hci_cmd_handle+0xa14>)
    c842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c846:	601a      	str	r2, [r3, #0]
    c848:	e793      	b.n	c772 <hci_cmd_handle+0x91e>
	return bt_hci_cmd_status_create(_opcode, status);
    c84a:	2112      	movs	r1, #18
    c84c:	f00f fe10 	bl	1c470 <bt_hci_cmd_status_create>
    c850:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    c852:	f7ff bb34 	b.w	bebe <hci_cmd_handle+0x6a>
	return bt_hci_cmd_status_create(_opcode, status);
    c856:	2111      	movs	r1, #17
    c858:	f00f fe0a 	bl	1c470 <bt_hci_cmd_status_create>
    c85c:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    c85e:	f7ff bb2e 	b.w	bebe <hci_cmd_handle+0x6a>
    c862:	bf00      	nop
    c864:	200012a8 	.word	0x200012a8
    c868:	200019fc 	.word	0x200019fc

0000c86c <hci_acl_handle>:
{
    c86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
    c870:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    c872:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    c874:	2b03      	cmp	r3, #3
	*evt = NULL;
    c876:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    c878:	d918      	bls.n	c8ac <hci_acl_handle+0x40>
	return net_buf_simple_pull_mem(&buf->b, len);
    c87a:	4605      	mov	r5, r0
    c87c:	4688      	mov	r8, r1
    c87e:	3008      	adds	r0, #8
    c880:	2104      	movs	r1, #4
    c882:	f011 fadc 	bl	1de3e <net_buf_simple_pull_mem>
	if (buf->len < len) {
    c886:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    c888:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    c88a:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    c88e:	42b3      	cmp	r3, r6
    c890:	d30c      	bcc.n	c8ac <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
    c892:	2e1b      	cmp	r6, #27
    c894:	d80a      	bhi.n	c8ac <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
    c896:	f002 ffb7 	bl	f808 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    c89a:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
    c89e:	4604      	mov	r4, r0
    c8a0:	b318      	cbz	r0, c8ea <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    c8a2:	08bb      	lsrs	r3, r7, #2
    c8a4:	d102      	bne.n	c8ac <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
    c8a6:	b1d7      	cbz	r7, c8de <hci_acl_handle+0x72>
    c8a8:	2f01      	cmp	r7, #1
    c8aa:	d003      	beq.n	c8b4 <hci_acl_handle+0x48>
		return -EINVAL;
    c8ac:	f06f 0015 	mvn.w	r0, #21
}
    c8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    c8b4:	7903      	ldrb	r3, [r0, #4]
    c8b6:	f367 0301 	bfi	r3, r7, #0, #2
    c8ba:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
    c8bc:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    c8be:	68a9      	ldr	r1, [r5, #8]
    c8c0:	4632      	mov	r2, r6
    c8c2:	1de0      	adds	r0, r4, #7
    c8c4:	f00f fa31 	bl	1bd2a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    c8c8:	4621      	mov	r1, r4
    c8ca:	f3c9 000b 	ubfx	r0, r9, #0, #12
    c8ce:	f002 ffa7 	bl	f820 <ll_tx_mem_enqueue>
    c8d2:	2800      	cmp	r0, #0
    c8d4:	d0ec      	beq.n	c8b0 <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
    c8d6:	4620      	mov	r0, r4
    c8d8:	f002 ff9c 	bl	f814 <ll_tx_mem_release>
    c8dc:	e7e6      	b.n	c8ac <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    c8de:	7903      	ldrb	r3, [r0, #4]
    c8e0:	2202      	movs	r2, #2
    c8e2:	f362 0301 	bfi	r3, r2, #0, #2
    c8e6:	7103      	strb	r3, [r0, #4]
		break;
    c8e8:	e7e8      	b.n	c8bc <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    c8ea:	4b11      	ldr	r3, [pc, #68]	; (c930 <hci_acl_handle+0xc4>)
    c8ec:	681b      	ldr	r3, [r3, #0]
    c8ee:	019b      	lsls	r3, r3, #6
    c8f0:	d402      	bmi.n	c8f8 <hci_acl_handle+0x8c>
		return -ENOBUFS;
    c8f2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c8f6:	e7db      	b.n	c8b0 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c8f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c900:	2001      	movs	r0, #1
    c902:	f7fa f811 	bl	6928 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    c906:	2102      	movs	r1, #2
    c908:	f8c8 0000 	str.w	r0, [r8]
    c90c:	3008      	adds	r0, #8
    c90e:	f011 fa6f 	bl	1ddf0 <net_buf_simple_add>
	hdr->len = len;
    c912:	2401      	movs	r4, #1
	hdr->evt = evt;
    c914:	221a      	movs	r2, #26
    c916:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    c918:	7044      	strb	r4, [r0, #1]
    c91a:	f8d8 0000 	ldr.w	r0, [r8]
    c91e:	4621      	mov	r1, r4
    c920:	3008      	adds	r0, #8
    c922:	f011 fa65 	bl	1ddf0 <net_buf_simple_add>
    c926:	4603      	mov	r3, r0
		return -ENOBUFS;
    c928:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    c92c:	701c      	strb	r4, [r3, #0]
    c92e:	e7bf      	b.n	c8b0 <hci_acl_handle+0x44>
    c930:	20000240 	.word	0x20000240

0000c934 <hci_disconn_complete_encode>:
{
    c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    c936:	4b0e      	ldr	r3, [pc, #56]	; (c970 <hci_disconn_complete_encode+0x3c>)
    c938:	681b      	ldr	r3, [r3, #0]
    c93a:	06db      	lsls	r3, r3, #27
    c93c:	d400      	bmi.n	c940 <hci_disconn_complete_encode+0xc>
}
    c93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c940:	f102 0408 	add.w	r4, r2, #8
    c944:	4605      	mov	r5, r0
    c946:	460e      	mov	r6, r1
    c948:	4620      	mov	r0, r4
    c94a:	2102      	movs	r1, #2
    c94c:	f011 fa50 	bl	1ddf0 <net_buf_simple_add>
    c950:	4603      	mov	r3, r0
	hdr->len = len;
    c952:	2104      	movs	r1, #4
	hdr->evt = evt;
    c954:	2205      	movs	r2, #5
	hdr->len = len;
    c956:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
    c958:	701a      	strb	r2, [r3, #0]
    c95a:	4620      	mov	r0, r4
    c95c:	f011 fa48 	bl	1ddf0 <net_buf_simple_add>
    c960:	2700      	movs	r7, #0
	ep->status = 0x00;
    c962:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    c964:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    c968:	782b      	ldrb	r3, [r5, #0]
    c96a:	70c3      	strb	r3, [r0, #3]
}
    c96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c96e:	bf00      	nop
    c970:	20000240 	.word	0x20000240

0000c974 <hci_disconn_complete_process>:
	conn_count--;
    c974:	4a02      	ldr	r2, [pc, #8]	; (c980 <hci_disconn_complete_process+0xc>)
    c976:	6813      	ldr	r3, [r2, #0]
    c978:	3b01      	subs	r3, #1
    c97a:	6013      	str	r3, [r2, #0]
}
    c97c:	4770      	bx	lr
    c97e:	bf00      	nop
    c980:	200019f8 	.word	0x200019f8

0000c984 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    c984:	7f03      	ldrb	r3, [r0, #28]
    c986:	f003 0303 	and.w	r3, r3, #3
    c98a:	3b01      	subs	r3, #1
    c98c:	2b01      	cmp	r3, #1
{
    c98e:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    c990:	d90d      	bls.n	c9ae <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    c992:	4a16      	ldr	r2, [pc, #88]	; (c9ec <hci_acl_encode+0x68>)
    c994:	4916      	ldr	r1, [pc, #88]	; (c9f0 <hci_acl_encode+0x6c>)
    c996:	4817      	ldr	r0, [pc, #92]	; (c9f4 <hci_acl_encode+0x70>)
    c998:	f641 53bb 	movw	r3, #7611	; 0x1dbb
    c99c:	f00e fb8b 	bl	1b0b6 <printk>
    c9a0:	4040      	eors	r0, r0
    c9a2:	f380 8811 	msr	BASEPRI, r0
    c9a6:	f04f 0003 	mov.w	r0, #3
    c9aa:	df02      	svc	2
		break;
	}
}
    c9ac:	bd70      	pop	{r4, r5, r6, pc}
    c9ae:	4604      	mov	r4, r0
    c9b0:	f101 0508 	add.w	r5, r1, #8
    c9b4:	4628      	mov	r0, r5
    c9b6:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    c9b8:	88e6      	ldrh	r6, [r4, #6]
    c9ba:	f011 fa19 	bl	1ddf0 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    c9be:	7f23      	ldrb	r3, [r4, #28]
    c9c0:	f003 0303 	and.w	r3, r3, #3
    c9c4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    c9c6:	bf0c      	ite	eq
    c9c8:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    c9cc:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    c9d0:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    c9d2:	7f61      	ldrb	r1, [r4, #29]
    c9d4:	8041      	strh	r1, [r0, #2]
    c9d6:	4628      	mov	r0, r5
    c9d8:	f011 fa0a 	bl	1ddf0 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    c9dc:	7f62      	ldrb	r2, [r4, #29]
    c9de:	f104 011f 	add.w	r1, r4, #31
}
    c9e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    c9e6:	f00f b9a0 	b.w	1bd2a <memcpy>
    c9ea:	bf00      	nop
    c9ec:	00020460 	.word	0x00020460
    c9f0:	00020414 	.word	0x00020414
    c9f4:	000203b4 	.word	0x000203b4

0000c9f8 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    c9fc:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
    ca00:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ca02:	f1bc 0f03 	cmp.w	ip, #3
{
    ca06:	b089      	sub	sp, #36	; 0x24
    ca08:	4604      	mov	r4, r0
    ca0a:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    ca0c:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ca10:	d01e      	beq.n	ca50 <hci_evt_encode+0x58>
	switch (node_rx->hdr.type) {
    ca12:	f1ac 0c05 	sub.w	ip, ip, #5
    ca16:	f1bc 0f17 	cmp.w	ip, #23
    ca1a:	d833      	bhi.n	ca84 <hci_evt_encode+0x8c>
    ca1c:	e8df f01c 	tbh	[pc, ip, lsl #1]
    ca20:	00320042 	.word	0x00320042
    ca24:	00320032 	.word	0x00320032
    ca28:	00320032 	.word	0x00320032
    ca2c:	00320032 	.word	0x00320032
    ca30:	00320032 	.word	0x00320032
    ca34:	00320032 	.word	0x00320032
    ca38:	00320032 	.word	0x00320032
    ca3c:	00320032 	.word	0x00320032
    ca40:	00bf0032 	.word	0x00bf0032
    ca44:	0125011d 	.word	0x0125011d
    ca48:	016c0155 	.word	0x016c0155
    ca4c:	01b2017f 	.word	0x01b2017f
	switch (pdu_data->llctrl.opcode) {
    ca50:	7fc3      	ldrb	r3, [r0, #31]
    ca52:	3b03      	subs	r3, #3
    ca54:	2b12      	cmp	r3, #18
    ca56:	f200 81cd 	bhi.w	cdf4 <hci_evt_encode+0x3fc>
    ca5a:	e8df f013 	tbh	[pc, r3, lsl #1]
    ca5e:	024b      	.short	0x024b
    ca60:	01cb01cb 	.word	0x01cb01cb
    ca64:	0293027a 	.word	0x0293027a
    ca68:	020001cb 	.word	0x020001cb
    ca6c:	01cb01cb 	.word	0x01cb01cb
    ca70:	020901cb 	.word	0x020901cb
    ca74:	022401cb 	.word	0x022401cb
    ca78:	002001cb 	.word	0x002001cb
    ca7c:	01cb01cb 	.word	0x01cb01cb
    ca80:	01d901d9 	.word	0x01d901d9
		LL_ASSERT(0);
    ca84:	4ab6      	ldr	r2, [pc, #728]	; (cd60 <hci_evt_encode+0x368>)
    ca86:	49b7      	ldr	r1, [pc, #732]	; (cd64 <hci_evt_encode+0x36c>)
    ca88:	48b7      	ldr	r0, [pc, #732]	; (cd68 <hci_evt_encode+0x370>)
    ca8a:	f641 43af 	movw	r3, #7343	; 0x1caf
    ca8e:	f00e fb12 	bl	1b0b6 <printk>
    ca92:	4040      	eors	r0, r0
    ca94:	f380 8811 	msr	BASEPRI, r0
    ca98:	f04f 0003 	mov.w	r0, #3
    ca9c:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    ca9e:	b009      	add	sp, #36	; 0x24
    caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    caa4:	4ab1      	ldr	r2, [pc, #708]	; (cd6c <hci_evt_encode+0x374>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    caa6:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
    caa8:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
    caaa:	f894 8019 	ldrb.w	r8, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    caae:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    cab2:	425b      	negs	r3, r3
    cab4:	b25f      	sxtb	r7, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cab6:	0c0b      	lsrs	r3, r1, #16
    cab8:	f88d 301e 	strb.w	r3, [sp, #30]
	if (adv->tx_addr) {
    cabc:	7f23      	ldrb	r3, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cabe:	9006      	str	r0, [sp, #24]
	if (adv->tx_addr) {
    cac0:	065a      	lsls	r2, r3, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cac2:	f8ad 101c 	strh.w	r1, [sp, #28]
	direct_report = node_rx->hdr.rx_ftr.direct;
    cac6:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
    caca:	f100 827c 	bmi.w	cfc6 <hci_evt_encode+0x5ce>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cace:	4ba8      	ldr	r3, [pc, #672]	; (cd70 <hci_evt_encode+0x378>)
    cad0:	685b      	ldr	r3, [r3, #4]
    cad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
    cad6:	2e00      	cmp	r6, #0
    cad8:	f040 82b0 	bne.w	d03c <hci_evt_encode+0x644>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cadc:	2b00      	cmp	r3, #0
    cade:	d0de      	beq.n	ca9e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    cae0:	4ba4      	ldr	r3, [pc, #656]	; (cd74 <hci_evt_encode+0x37c>)
    cae2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cae4:	079e      	lsls	r6, r3, #30
    cae6:	d5da      	bpl.n	ca9e <hci_evt_encode+0xa6>
	if (dup_count >= 0) {
    cae8:	4ba3      	ldr	r3, [pc, #652]	; (cd78 <hci_evt_encode+0x380>)
    caea:	681b      	ldr	r3, [r3, #0]
    caec:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    caee:	f104 0a1e 	add.w	sl, r4, #30
	if (dup_count >= 0) {
    caf2:	db09      	blt.n	cb08 <hci_evt_encode+0x110>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    caf4:	7f20      	ldrb	r0, [r4, #28]
    caf6:	4652      	mov	r2, sl
    caf8:	f3c0 1180 	ubfx	r1, r0, #6, #1
    cafc:	f000 000f 	and.w	r0, r0, #15
    cb00:	f7ff f852 	bl	bba8 <dup_found.part.0>
	if (dup_scan &&
    cb04:	2800      	cmp	r0, #0
    cb06:	d1ca      	bne.n	ca9e <hci_evt_encode+0xa6>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    cb08:	7f23      	ldrb	r3, [r4, #28]
    cb0a:	f003 030f 	and.w	r3, r3, #15
    cb0e:	2b01      	cmp	r3, #1
    cb10:	f000 834e 	beq.w	d1b0 <hci_evt_encode+0x7b8>
		data_len = (adv->len - BDADDR_SIZE);
    cb14:	7f63      	ldrb	r3, [r4, #29]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cb16:	f103 0b06 	add.w	fp, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
    cb1a:	f1a3 0906 	sub.w	r9, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cb1e:	fa5f f28b 	uxtb.w	r2, fp
		data_len = (adv->len - BDADDR_SIZE);
    cb22:	fa5f f989 	uxtb.w	r9, r9
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    cb26:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cb28:	9205      	str	r2, [sp, #20]
	return net_buf_add(buf, melen);
    cb2a:	fa5f fb83 	uxtb.w	fp, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    cb2e:	464e      	mov	r6, r9
    cb30:	3508      	adds	r5, #8
    cb32:	2102      	movs	r1, #2
    cb34:	4628      	mov	r0, r5
    cb36:	f011 f95b 	bl	1ddf0 <net_buf_simple_add>
	hdr->len = len;
    cb3a:	9b05      	ldr	r3, [sp, #20]
    cb3c:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
    cb3e:	223e      	movs	r2, #62	; 0x3e
    cb40:	7002      	strb	r2, [r0, #0]
    cb42:	2101      	movs	r1, #1
    cb44:	4628      	mov	r0, r5
    cb46:	f011 f953 	bl	1ddf0 <net_buf_simple_add>
    cb4a:	4602      	mov	r2, r0
	me->subevent = subevt;
    cb4c:	2302      	movs	r3, #2
    cb4e:	7013      	strb	r3, [r2, #0]
    cb50:	4659      	mov	r1, fp
    cb52:	4628      	mov	r0, r5
    cb54:	f011 f94c 	bl	1ddf0 <net_buf_simple_add>
	sep->num_reports = 1U;
    cb58:	2301      	movs	r3, #1
    cb5a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    cb5c:	7f23      	ldrb	r3, [r4, #28]
    cb5e:	aa08      	add	r2, sp, #32
    cb60:	f003 030f 	and.w	r3, r3, #15
    cb64:	4413      	add	r3, r2
    cb66:	4605      	mov	r5, r0
    cb68:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    cb6c:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
    cb6e:	f005 ffc7 	bl	12b00 <ll_rl_size_get>
    cb72:	4580      	cmp	r8, r0
    cb74:	f080 82ed 	bcs.w	d152 <hci_evt_encode+0x75a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    cb78:	4640      	mov	r0, r8
    cb7a:	1cea      	adds	r2, r5, #3
    cb7c:	1ca9      	adds	r1, r5, #2
    cb7e:	f005 ff79 	bl	12a74 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
    cb82:	78ab      	ldrb	r3, [r5, #2]
    cb84:	3302      	adds	r3, #2
    cb86:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    cb88:	f885 9009 	strb.w	r9, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    cb8c:	350a      	adds	r5, #10
    cb8e:	f104 0124 	add.w	r1, r4, #36	; 0x24
    cb92:	4632      	mov	r2, r6
    cb94:	4628      	mov	r0, r5
    cb96:	f00f f8c8 	bl	1bd2a <memcpy>
	*prssi = rssi;
    cb9a:	55af      	strb	r7, [r5, r6]
    cb9c:	e77f      	b.n	ca9e <hci_evt_encode+0xa6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    cb9e:	07f8      	lsls	r0, r7, #31
    cba0:	f100 8203 	bmi.w	cfaa <hci_evt_encode+0x5b2>
	status = cc->status;
    cba4:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
    cba6:	2f00      	cmp	r7, #0
    cba8:	f000 81f6 	beq.w	cf98 <hci_evt_encode+0x5a0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cbac:	4b70      	ldr	r3, [pc, #448]	; (cd70 <hci_evt_encode+0x378>)
    cbae:	685b      	ldr	r3, [r3, #4]
    cbb0:	0099      	lsls	r1, r3, #2
    cbb2:	f57f af74 	bpl.w	ca9e <hci_evt_encode+0xa6>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cbb6:	4b6f      	ldr	r3, [pc, #444]	; (cd74 <hci_evt_encode+0x37c>)
    cbb8:	681b      	ldr	r3, [r3, #0]
    cbba:	f240 2201 	movw	r2, #513	; 0x201
    cbbe:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    cbc0:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cbc4:	f43f af6b 	beq.w	ca9e <hci_evt_encode+0xa6>
    cbc8:	3508      	adds	r5, #8
	if (!status) {
    cbca:	2f00      	cmp	r7, #0
    cbcc:	f040 820d 	bne.w	cfea <hci_evt_encode+0x5f2>
		conn_count++;
    cbd0:	4a6a      	ldr	r2, [pc, #424]	; (cd7c <hci_evt_encode+0x384>)
    cbd2:	6813      	ldr	r3, [r2, #0]
    cbd4:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
    cbd6:	f104 091f 	add.w	r9, r4, #31
		conn_count++;
    cbda:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    cbdc:	f1b8 0f00 	cmp.w	r8, #0
    cbe0:	f000 8288 	beq.w	d0f4 <hci_evt_encode+0x6fc>
    cbe4:	2102      	movs	r1, #2
    cbe6:	4628      	mov	r0, r5
    cbe8:	f011 f902 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    cbec:	233e      	movs	r3, #62	; 0x3e
    cbee:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cbf0:	231f      	movs	r3, #31
    cbf2:	7043      	strb	r3, [r0, #1]
    cbf4:	2101      	movs	r1, #1
    cbf6:	4628      	mov	r0, r5
    cbf8:	f011 f8fa 	bl	1ddf0 <net_buf_simple_add>
    cbfc:	4603      	mov	r3, r0
	me->subevent = subevt;
    cbfe:	220a      	movs	r2, #10
    cc00:	701a      	strb	r2, [r3, #0]
    cc02:	4628      	mov	r0, r5
    cc04:	211e      	movs	r1, #30
    cc06:	f011 f8f3 	bl	1ddf0 <net_buf_simple_add>
		leecc->status = 0x00;
    cc0a:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    cc0c:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
    cc10:	7f63      	ldrb	r3, [r4, #29]
    cc12:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    cc14:	7fa3      	ldrb	r3, [r4, #30]
    cc16:	7103      	strb	r3, [r0, #4]
    cc18:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
    cc1a:	4649      	mov	r1, r9
    cc1c:	2206      	movs	r2, #6
    cc1e:	3005      	adds	r0, #5
    cc20:	f00f f883 	bl	1bd2a <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
    cc24:	2206      	movs	r2, #6
    cc26:	f104 012b 	add.w	r1, r4, #43	; 0x2b
    cc2a:	f105 000b 	add.w	r0, r5, #11
    cc2e:	f00f f87c 	bl	1bd2a <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
    cc32:	2206      	movs	r2, #6
    cc34:	f104 0125 	add.w	r1, r4, #37	; 0x25
    cc38:	f105 0011 	add.w	r0, r5, #17
    cc3c:	f00f f875 	bl	1bd2a <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    cc40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    cc42:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    cc44:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    cc46:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    cc4a:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    cc4e:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
    cc52:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    cc56:	776b      	strb	r3, [r5, #29]
		return;
    cc58:	e721      	b.n	ca9e <hci_evt_encode+0xa6>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    cc5a:	460a      	mov	r2, r1
    cc5c:	4638      	mov	r0, r7
    cc5e:	4631      	mov	r1, r6
}
    cc60:	b009      	add	sp, #36	; 0x24
    cc62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    cc66:	f7ff be65 	b.w	c934 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cc6a:	4b41      	ldr	r3, [pc, #260]	; (cd70 <hci_evt_encode+0x378>)
    cc6c:	685b      	ldr	r3, [r3, #4]
    cc6e:	009a      	lsls	r2, r3, #2
    cc70:	f57f af15 	bpl.w	ca9e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    cc74:	4b3f      	ldr	r3, [pc, #252]	; (cd74 <hci_evt_encode+0x37c>)
    cc76:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cc78:	075b      	lsls	r3, r3, #29
    cc7a:	f57f af10 	bpl.w	ca9e <hci_evt_encode+0xa6>
    cc7e:	3508      	adds	r5, #8
    cc80:	2102      	movs	r1, #2
    cc82:	4628      	mov	r0, r5
    cc84:	f011 f8b4 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    cc88:	233e      	movs	r3, #62	; 0x3e
    cc8a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cc8c:	230a      	movs	r3, #10
    cc8e:	7043      	strb	r3, [r0, #1]
    cc90:	2101      	movs	r1, #1
    cc92:	4628      	mov	r0, r5
    cc94:	f011 f8ac 	bl	1ddf0 <net_buf_simple_add>
    cc98:	4603      	mov	r3, r0
	me->subevent = subevt;
    cc9a:	2203      	movs	r2, #3
    cc9c:	4628      	mov	r0, r5
    cc9e:	701a      	strb	r2, [r3, #0]
    cca0:	2109      	movs	r1, #9
    cca2:	f011 f8a5 	bl	1ddf0 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    cca6:	07ff      	lsls	r7, r7, #31
    cca8:	4605      	mov	r5, r0
    ccaa:	f100 8273 	bmi.w	d194 <hci_evt_encode+0x79c>
	sep->status = cu->status;
    ccae:	7f23      	ldrb	r3, [r4, #28]
    ccb0:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    ccb2:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    ccb4:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    ccb6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    ccb8:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
    ccbc:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    ccc0:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    ccc4:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    ccc8:	e6e9      	b.n	ca9e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    ccca:	4b29      	ldr	r3, [pc, #164]	; (cd70 <hci_evt_encode+0x378>)
    cccc:	685b      	ldr	r3, [r3, #4]
    ccce:	0418      	lsls	r0, r3, #16
    ccd0:	f04f 0400 	mov.w	r4, #0
    ccd4:	f57f aee3 	bpl.w	ca9e <hci_evt_encode+0xa6>
    ccd8:	3508      	adds	r5, #8
    ccda:	2102      	movs	r1, #2
    ccdc:	4628      	mov	r0, r5
    ccde:	f011 f887 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    cce2:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
    cce4:	2103      	movs	r1, #3
	hdr->evt = evt;
    cce6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cce8:	7041      	strb	r1, [r0, #1]
    ccea:	4628      	mov	r0, r5
    ccec:	f011 f880 	bl	1ddf0 <net_buf_simple_add>
	ep->status = 0x00;
    ccf0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ccf2:	f8a0 6001 	strh.w	r6, [r0, #1]
    ccf6:	e6d2      	b.n	ca9e <hci_evt_encode+0xa6>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    ccf8:	4b21      	ldr	r3, [pc, #132]	; (cd80 <hci_evt_encode+0x388>)
    ccfa:	681b      	ldr	r3, [r3, #0]
    ccfc:	0219      	lsls	r1, r3, #8
    ccfe:	f57f aece 	bpl.w	ca9e <hci_evt_encode+0xa6>
    cd02:	3508      	adds	r5, #8
    cd04:	2102      	movs	r1, #2
    cd06:	4628      	mov	r0, r5
    cd08:	f011 f872 	bl	1ddf0 <net_buf_simple_add>
	hdr->len = len;
    cd0c:	2102      	movs	r1, #2
	hdr->evt = evt;
    cd0e:	2357      	movs	r3, #87	; 0x57
    cd10:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cd12:	7041      	strb	r1, [r0, #1]
    cd14:	4628      	mov	r0, r5
    cd16:	f011 f86b 	bl	1ddf0 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    cd1a:	8006      	strh	r6, [r0, #0]
    cd1c:	e6bf      	b.n	ca9e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd1e:	4b14      	ldr	r3, [pc, #80]	; (cd70 <hci_evt_encode+0x378>)
    cd20:	685b      	ldr	r3, [r3, #4]
    cd22:	009a      	lsls	r2, r3, #2
    cd24:	f57f aebb 	bpl.w	ca9e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    cd28:	4b12      	ldr	r3, [pc, #72]	; (cd74 <hci_evt_encode+0x37c>)
    cd2a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd2c:	031b      	lsls	r3, r3, #12
    cd2e:	f57f aeb6 	bpl.w	ca9e <hci_evt_encode+0xa6>
    cd32:	3508      	adds	r5, #8
    cd34:	2102      	movs	r1, #2
    cd36:	4628      	mov	r0, r5
    cd38:	f011 f85a 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    cd3c:	233e      	movs	r3, #62	; 0x3e
    cd3e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cd40:	2304      	movs	r3, #4
    cd42:	7043      	strb	r3, [r0, #1]
    cd44:	2101      	movs	r1, #1
    cd46:	4628      	mov	r0, r5
    cd48:	f011 f852 	bl	1ddf0 <net_buf_simple_add>
	me->subevent = subevt;
    cd4c:	2314      	movs	r3, #20
    cd4e:	7003      	strb	r3, [r0, #0]
    cd50:	2103      	movs	r1, #3
    cd52:	4628      	mov	r0, r5
    cd54:	f011 f84c 	bl	1ddf0 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    cd58:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    cd5a:	7f23      	ldrb	r3, [r4, #28]
    cd5c:	7083      	strb	r3, [r0, #2]
    cd5e:	e69e      	b.n	ca9e <hci_evt_encode+0xa6>
    cd60:	00020460 	.word	0x00020460
    cd64:	00020414 	.word	0x00020414
    cd68:	000203b4 	.word	0x000203b4
    cd6c:	00020040 	.word	0x00020040
    cd70:	20000240 	.word	0x20000240
    cd74:	20000248 	.word	0x20000248
    cd78:	200019fc 	.word	0x200019fc
    cd7c:	200019f8 	.word	0x200019f8
    cd80:	200012a8 	.word	0x200012a8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd84:	4ba7      	ldr	r3, [pc, #668]	; (d024 <hci_evt_encode+0x62c>)
    cd86:	685b      	ldr	r3, [r3, #4]
    cd88:	009f      	lsls	r7, r3, #2
    cd8a:	f57f ae88 	bpl.w	ca9e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    cd8e:	4ba6      	ldr	r3, [pc, #664]	; (d028 <hci_evt_encode+0x630>)
    cd90:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd92:	0518      	lsls	r0, r3, #20
    cd94:	f57f ae83 	bpl.w	ca9e <hci_evt_encode+0xa6>
    cd98:	3508      	adds	r5, #8
    cd9a:	2102      	movs	r1, #2
    cd9c:	4628      	mov	r0, r5
    cd9e:	f011 f827 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    cda2:	233e      	movs	r3, #62	; 0x3e
    cda4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cda6:	2306      	movs	r3, #6
    cda8:	7043      	strb	r3, [r0, #1]
    cdaa:	2101      	movs	r1, #1
    cdac:	4628      	mov	r0, r5
    cdae:	f011 f81f 	bl	1ddf0 <net_buf_simple_add>
	me->subevent = subevt;
    cdb2:	230c      	movs	r3, #12
    cdb4:	7003      	strb	r3, [r0, #0]
    cdb6:	2105      	movs	r1, #5
    cdb8:	4628      	mov	r0, r5
    cdba:	f011 f819 	bl	1ddf0 <net_buf_simple_add>
	sep->status = pu->status;
    cdbe:	7f23      	ldrb	r3, [r4, #28]
    cdc0:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    cdc2:	f8a0 6001 	strh.w	r6, [r0, #1]
    cdc6:	7f62      	ldrb	r2, [r4, #29]
    cdc8:	2a00      	cmp	r2, #0
    cdca:	fa92 f3a2 	rbit	r3, r2
    cdce:	fab3 f383 	clz	r3, r3
    cdd2:	bf08      	it	eq
    cdd4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    cdd8:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    cdda:	70c3      	strb	r3, [r0, #3]
    cddc:	7fa2      	ldrb	r2, [r4, #30]
    cdde:	fa92 f3a2 	rbit	r3, r2
    cde2:	2a00      	cmp	r2, #0
    cde4:	fab3 f383 	clz	r3, r3
    cde8:	bf08      	it	eq
    cdea:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    cdee:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    cdf0:	7103      	strb	r3, [r0, #4]
    cdf2:	e654      	b.n	ca9e <hci_evt_encode+0xa6>
		LL_ASSERT(0);
    cdf4:	4a8d      	ldr	r2, [pc, #564]	; (d02c <hci_evt_encode+0x634>)
    cdf6:	498e      	ldr	r1, [pc, #568]	; (d030 <hci_evt_encode+0x638>)
    cdf8:	488e      	ldr	r0, [pc, #568]	; (d034 <hci_evt_encode+0x63c>)
    cdfa:	f641 538f 	movw	r3, #7567	; 0x1d8f
    cdfe:	f00e f95a 	bl	1b0b6 <printk>
    ce02:	4040      	eors	r0, r0
    ce04:	f380 8811 	msr	BASEPRI, r0
    ce08:	f04f 0003 	mov.w	r0, #3
    ce0c:	df02      	svc	2
}
    ce0e:	e646      	b.n	ca9e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ce10:	4b84      	ldr	r3, [pc, #528]	; (d024 <hci_evt_encode+0x62c>)
    ce12:	685b      	ldr	r3, [r3, #4]
    ce14:	009a      	lsls	r2, r3, #2
    ce16:	f57f ae42 	bpl.w	ca9e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    ce1a:	4b83      	ldr	r3, [pc, #524]	; (d028 <hci_evt_encode+0x630>)
    ce1c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ce1e:	065b      	lsls	r3, r3, #25
    ce20:	f57f ae3d 	bpl.w	ca9e <hci_evt_encode+0xa6>
    ce24:	3508      	adds	r5, #8
    ce26:	2102      	movs	r1, #2
    ce28:	4628      	mov	r0, r5
    ce2a:	f010 ffe1 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    ce2e:	233e      	movs	r3, #62	; 0x3e
    ce30:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    ce32:	230b      	movs	r3, #11
    ce34:	7043      	strb	r3, [r0, #1]
    ce36:	2101      	movs	r1, #1
    ce38:	4628      	mov	r0, r5
    ce3a:	f010 ffd9 	bl	1ddf0 <net_buf_simple_add>
	me->subevent = subevt;
    ce3e:	2307      	movs	r3, #7
    ce40:	7003      	strb	r3, [r0, #0]
    ce42:	210a      	movs	r1, #10
    ce44:	4628      	mov	r0, r5
    ce46:	f010 ffd3 	bl	1ddf0 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    ce4a:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    ce4c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    ce4e:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    ce50:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    ce52:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    ce54:	8c23      	ldrh	r3, [r4, #32]
    ce56:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    ce58:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    ce5a:	8103      	strh	r3, [r0, #8]
    ce5c:	e61f      	b.n	ca9e <hci_evt_encode+0xa6>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    ce5e:	460b      	mov	r3, r1
    ce60:	4632      	mov	r2, r6
    ce62:	4639      	mov	r1, r7
    ce64:	2000      	movs	r0, #0
}
    ce66:	b009      	add	sp, #36	; 0x24
    ce68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    ce6c:	f7fe befc 	b.w	bc68 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ce70:	4b6c      	ldr	r3, [pc, #432]	; (d024 <hci_evt_encode+0x62c>)
    ce72:	681b      	ldr	r3, [r3, #0]
    ce74:	061f      	lsls	r7, r3, #24
    ce76:	f57f ae12 	bpl.w	ca9e <hci_evt_encode+0xa6>
    ce7a:	3508      	adds	r5, #8
    ce7c:	2102      	movs	r1, #2
    ce7e:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    ce80:	f894 4020 	ldrb.w	r4, [r4, #32]
    ce84:	f010 ffb4 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    ce88:	2308      	movs	r3, #8
	hdr->len = len;
    ce8a:	2104      	movs	r1, #4
	hdr->evt = evt;
    ce8c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    ce8e:	7041      	strb	r1, [r0, #1]
    ce90:	4628      	mov	r0, r5
    ce92:	f010 ffad 	bl	1ddf0 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    ce96:	fab4 f384 	clz	r3, r4
    ce9a:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    ce9c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ce9e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    cea2:	70c3      	strb	r3, [r0, #3]
    cea4:	e5fb      	b.n	ca9e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cea6:	4b5f      	ldr	r3, [pc, #380]	; (d024 <hci_evt_encode+0x62c>)
    cea8:	685b      	ldr	r3, [r3, #4]
    ceaa:	0098      	lsls	r0, r3, #2
    ceac:	f140 8093 	bpl.w	cfd6 <hci_evt_encode+0x5de>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    ceb0:	4b5d      	ldr	r3, [pc, #372]	; (d028 <hci_evt_encode+0x630>)
    ceb2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ceb4:	0699      	lsls	r1, r3, #26
    ceb6:	f140 808e 	bpl.w	cfd6 <hci_evt_encode+0x5de>
    ceba:	3508      	adds	r5, #8
    cebc:	2102      	movs	r1, #2
    cebe:	4628      	mov	r0, r5
    cec0:	f010 ff96 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    cec4:	233e      	movs	r3, #62	; 0x3e
    cec6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cec8:	230b      	movs	r3, #11
    ceca:	7043      	strb	r3, [r0, #1]
    cecc:	2101      	movs	r1, #1
    cece:	4628      	mov	r0, r5
    ced0:	f010 ff8e 	bl	1ddf0 <net_buf_simple_add>
	me->subevent = subevt;
    ced4:	2306      	movs	r3, #6
    ced6:	7003      	strb	r3, [r0, #0]
    ced8:	210a      	movs	r1, #10
    ceda:	4628      	mov	r0, r5
    cedc:	f010 ff88 	bl	1ddf0 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    cee0:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    cee2:	8c23      	ldrh	r3, [r4, #32]
    cee4:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    cee6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    cee8:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    ceea:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    ceec:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    ceee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    cef0:	8103      	strh	r3, [r0, #8]
    cef2:	e5d4      	b.n	ca9e <hci_evt_encode+0xa6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cef4:	4b4b      	ldr	r3, [pc, #300]	; (d024 <hci_evt_encode+0x62c>)
    cef6:	685b      	ldr	r3, [r3, #4]
    cef8:	0099      	lsls	r1, r3, #2
    cefa:	f57f add0 	bpl.w	ca9e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    cefe:	4b4a      	ldr	r3, [pc, #296]	; (d028 <hci_evt_encode+0x630>)
    cf00:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf02:	06da      	lsls	r2, r3, #27
    cf04:	f57f adcb 	bpl.w	ca9e <hci_evt_encode+0xa6>
    cf08:	3508      	adds	r5, #8
    cf0a:	2102      	movs	r1, #2
    cf0c:	4628      	mov	r0, r5
    cf0e:	f010 ff6f 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    cf12:	233e      	movs	r3, #62	; 0x3e
    cf14:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cf16:	230d      	movs	r3, #13
    cf18:	7043      	strb	r3, [r0, #1]
    cf1a:	2101      	movs	r1, #1
    cf1c:	4628      	mov	r0, r5
    cf1e:	f010 ff67 	bl	1ddf0 <net_buf_simple_add>
	me->subevent = subevt;
    cf22:	2305      	movs	r3, #5
    cf24:	7003      	strb	r3, [r0, #0]
    cf26:	210c      	movs	r1, #12
    cf28:	4628      	mov	r0, r5
    cf2a:	f010 ff61 	bl	1ddf0 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    cf2e:	f104 0120 	add.w	r1, r4, #32
    cf32:	4605      	mov	r5, r0
    cf34:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    cf36:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    cf3a:	f00e fef6 	bl	1bd2a <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    cf3e:	2202      	movs	r2, #2
    cf40:	f104 0128 	add.w	r1, r4, #40	; 0x28
    cf44:	f105 000a 	add.w	r0, r5, #10
}
    cf48:	b009      	add	sp, #36	; 0x24
    cf4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    cf4e:	f00e beec 	b.w	1bd2a <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    cf52:	4b34      	ldr	r3, [pc, #208]	; (d024 <hci_evt_encode+0x62c>)
    cf54:	681b      	ldr	r3, [r3, #0]
    cf56:	061b      	lsls	r3, r3, #24
    cf58:	f04f 0400 	mov.w	r4, #0
    cf5c:	f57f ad9f 	bpl.w	ca9e <hci_evt_encode+0xa6>
    cf60:	3508      	adds	r5, #8
    cf62:	2102      	movs	r1, #2
    cf64:	4628      	mov	r0, r5
    cf66:	f010 ff43 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    cf6a:	2308      	movs	r3, #8
	hdr->len = len;
    cf6c:	2104      	movs	r1, #4
	hdr->evt = evt;
    cf6e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cf70:	7041      	strb	r1, [r0, #1]
    cf72:	4628      	mov	r0, r5
    cf74:	f010 ff3c 	bl	1ddf0 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    cf78:	2301      	movs	r3, #1
	ep->status = err;
    cf7a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cf7c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    cf80:	70c3      	strb	r3, [r0, #3]
    cf82:	e58c      	b.n	ca9e <hci_evt_encode+0xa6>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    cf84:	f890 3020 	ldrb.w	r3, [r0, #32]
    cf88:	2b0e      	cmp	r3, #14
    cf8a:	f47f ad88 	bne.w	ca9e <hci_evt_encode+0xa6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    cf8e:	460b      	mov	r3, r1
    cf90:	4632      	mov	r2, r6
    cf92:	2100      	movs	r1, #0
    cf94:	201a      	movs	r0, #26
    cf96:	e766      	b.n	ce66 <hci_evt_encode+0x46e>
		ll_rl_crpa_set(cc->peer_addr_type,
    cf98:	7fa0      	ldrb	r0, [r4, #30]
    cf9a:	f104 0325 	add.w	r3, r4, #37	; 0x25
    cf9e:	22ff      	movs	r2, #255	; 0xff
    cfa0:	f104 011f 	add.w	r1, r4, #31
    cfa4:	f005 feaa 	bl	12cfc <ll_rl_crpa_set>
    cfa8:	e600      	b.n	cbac <hci_evt_encode+0x1b4>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    cfaa:	4a20      	ldr	r2, [pc, #128]	; (d02c <hci_evt_encode+0x634>)
    cfac:	4922      	ldr	r1, [pc, #136]	; (d038 <hci_evt_encode+0x640>)
    cfae:	4821      	ldr	r0, [pc, #132]	; (d034 <hci_evt_encode+0x63c>)
    cfb0:	f641 23f5 	movw	r3, #6901	; 0x1af5
    cfb4:	f00e f87f 	bl	1b0b6 <printk>
    cfb8:	4040      	eors	r0, r0
    cfba:	f380 8811 	msr	BASEPRI, r0
    cfbe:	f04f 0003 	mov.w	r0, #3
    cfc2:	df02      	svc	2
    cfc4:	e5ee      	b.n	cba4 <hci_evt_encode+0x1ac>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    cfc6:	2100      	movs	r1, #0
    cfc8:	f104 031e 	add.w	r3, r4, #30
    cfcc:	4642      	mov	r2, r8
    cfce:	4608      	mov	r0, r1
    cfd0:	f005 fe94 	bl	12cfc <ll_rl_crpa_set>
    cfd4:	e57b      	b.n	cace <hci_evt_encode+0xd6>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    cfd6:	2300      	movs	r3, #0
    cfd8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    cfdc:	9300      	str	r3, [sp, #0]
    cfde:	221a      	movs	r2, #26
    cfe0:	2102      	movs	r1, #2
    cfe2:	4630      	mov	r0, r6
    cfe4:	f002 fc5e 	bl	f8a4 <ll_conn_update>
		return;
    cfe8:	e559      	b.n	ca9e <hci_evt_encode+0xa6>
    cfea:	2102      	movs	r1, #2
    cfec:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    cfee:	f1b8 0f00 	cmp.w	r8, #0
    cff2:	f040 80b8 	bne.w	d166 <hci_evt_encode+0x76e>
    cff6:	f010 fefb 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    cffa:	233e      	movs	r3, #62	; 0x3e
    cffc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    cffe:	2313      	movs	r3, #19
    d000:	7043      	strb	r3, [r0, #1]
    d002:	2101      	movs	r1, #1
    d004:	4628      	mov	r0, r5
    d006:	f010 fef3 	bl	1ddf0 <net_buf_simple_add>
	me->subevent = subevt;
    d00a:	2301      	movs	r3, #1
    d00c:	7003      	strb	r3, [r0, #0]
    d00e:	2112      	movs	r1, #18
    d010:	4628      	mov	r0, r5
    d012:	f010 feed 	bl	1ddf0 <net_buf_simple_add>
    d016:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    d018:	2212      	movs	r2, #18
    d01a:	4641      	mov	r1, r8
    d01c:	f00e fe90 	bl	1bd40 <memset>
		lecc->status = status;
    d020:	7027      	strb	r7, [r4, #0]
		return;
    d022:	e53c      	b.n	ca9e <hci_evt_encode+0xa6>
    d024:	20000240 	.word	0x20000240
    d028:	20000248 	.word	0x20000248
    d02c:	00020460 	.word	0x00020460
    d030:	00020414 	.word	0x00020414
    d034:	000203b4 	.word	0x000203b4
    d038:	000204c4 	.word	0x000204c4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d03c:	2b00      	cmp	r3, #0
    d03e:	f43f ad2e 	beq.w	ca9e <hci_evt_encode+0xa6>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    d042:	4b64      	ldr	r3, [pc, #400]	; (d1d4 <hci_evt_encode+0x7dc>)
    d044:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d046:	055b      	lsls	r3, r3, #21
    d048:	f57f ad29 	bpl.w	ca9e <hci_evt_encode+0xa6>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    d04c:	7f23      	ldrb	r3, [r4, #28]
    d04e:	f003 030f 	and.w	r3, r3, #15
    d052:	2b01      	cmp	r3, #1
    d054:	d00c      	beq.n	d070 <hci_evt_encode+0x678>
    d056:	4a60      	ldr	r2, [pc, #384]	; (d1d8 <hci_evt_encode+0x7e0>)
    d058:	4960      	ldr	r1, [pc, #384]	; (d1dc <hci_evt_encode+0x7e4>)
    d05a:	4861      	ldr	r0, [pc, #388]	; (d1e0 <hci_evt_encode+0x7e8>)
    d05c:	f241 435a 	movw	r3, #5210	; 0x145a
    d060:	f00e f829 	bl	1b0b6 <printk>
    d064:	4040      	eors	r0, r0
    d066:	f380 8811 	msr	BASEPRI, r0
    d06a:	f04f 0003 	mov.w	r0, #3
    d06e:	df02      	svc	2
	if (dup_count >= 0) {
    d070:	4b5c      	ldr	r3, [pc, #368]	; (d1e4 <hci_evt_encode+0x7ec>)
    d072:	681b      	ldr	r3, [r3, #0]
    d074:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    d076:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
    d07a:	db0a      	blt.n	d092 <hci_evt_encode+0x69a>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    d07c:	7f20      	ldrb	r0, [r4, #28]
    d07e:	4632      	mov	r2, r6
    d080:	f3c0 1180 	ubfx	r1, r0, #6, #1
    d084:	f000 000f 	and.w	r0, r0, #15
    d088:	f7fe fd8e 	bl	bba8 <dup_found.part.0>
	if (dup_scan &&
    d08c:	2800      	cmp	r0, #0
    d08e:	f47f ad06 	bne.w	ca9e <hci_evt_encode+0xa6>
    d092:	3508      	adds	r5, #8
    d094:	2102      	movs	r1, #2
    d096:	4628      	mov	r0, r5
    d098:	f010 feaa 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    d09c:	233e      	movs	r3, #62	; 0x3e
    d09e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d0a0:	2312      	movs	r3, #18
    d0a2:	7043      	strb	r3, [r0, #1]
    d0a4:	2101      	movs	r1, #1
    d0a6:	4628      	mov	r0, r5
    d0a8:	f010 fea2 	bl	1ddf0 <net_buf_simple_add>
    d0ac:	4603      	mov	r3, r0
	me->subevent = subevt;
    d0ae:	220b      	movs	r2, #11
    d0b0:	701a      	strb	r2, [r3, #0]
    d0b2:	4628      	mov	r0, r5
    d0b4:	2111      	movs	r1, #17
    d0b6:	f010 fe9b 	bl	1ddf0 <net_buf_simple_add>
	drp->num_reports = 1U;
    d0ba:	2301      	movs	r3, #1
    d0bc:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    d0be:	7043      	strb	r3, [r0, #1]
    d0c0:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
    d0c2:	f005 fd1d 	bl	12b00 <ll_rl_size_get>
    d0c6:	4580      	cmp	r8, r0
    d0c8:	d279      	bcs.n	d1be <hci_evt_encode+0x7c6>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    d0ca:	1cea      	adds	r2, r5, #3
    d0cc:	4640      	mov	r0, r8
    d0ce:	1ca9      	adds	r1, r5, #2
    d0d0:	f005 fcd0 	bl	12a74 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
    d0d4:	78ab      	ldrb	r3, [r5, #2]
    d0d6:	3302      	adds	r3, #2
    d0d8:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
    d0da:	7f23      	ldrb	r3, [r4, #28]
    d0dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
    d0e0:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
    d0e2:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
    d0e4:	f104 0124 	add.w	r1, r4, #36	; 0x24
    d0e8:	f105 000a 	add.w	r0, r5, #10
    d0ec:	f00e fe1d 	bl	1bd2a <memcpy>
	dir_info->rssi = rssi;
    d0f0:	742f      	strb	r7, [r5, #16]
    d0f2:	e4d4      	b.n	ca9e <hci_evt_encode+0xa6>
    d0f4:	2102      	movs	r1, #2
    d0f6:	4628      	mov	r0, r5
    d0f8:	f010 fe7a 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    d0fc:	233e      	movs	r3, #62	; 0x3e
    d0fe:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d100:	2313      	movs	r3, #19
    d102:	7043      	strb	r3, [r0, #1]
    d104:	2101      	movs	r1, #1
    d106:	4628      	mov	r0, r5
    d108:	f010 fe72 	bl	1ddf0 <net_buf_simple_add>
    d10c:	4603      	mov	r3, r0
	me->subevent = subevt;
    d10e:	2201      	movs	r2, #1
    d110:	701a      	strb	r2, [r3, #0]
    d112:	4628      	mov	r0, r5
    d114:	2112      	movs	r1, #18
    d116:	f010 fe6b 	bl	1ddf0 <net_buf_simple_add>
	lecc->status = 0x00;
    d11a:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    d11c:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    d120:	7f63      	ldrb	r3, [r4, #29]
    d122:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    d124:	7fa3      	ldrb	r3, [r4, #30]
    d126:	f003 0301 	and.w	r3, r3, #1
    d12a:	4605      	mov	r5, r0
    d12c:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    d12e:	4649      	mov	r1, r9
    d130:	2206      	movs	r2, #6
    d132:	3005      	adds	r0, #5
    d134:	f00e fdf9 	bl	1bd2a <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d138:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    d13a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    d13c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    d13e:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    d142:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    d146:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    d14a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    d14e:	746b      	strb	r3, [r5, #17]
    d150:	e4a5      	b.n	ca9e <hci_evt_encode+0xa6>
		adv_info->addr.type = adv->tx_addr;
    d152:	7f23      	ldrb	r3, [r4, #28]
    d154:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    d158:	4651      	mov	r1, sl
		adv_info->addr.type = adv->tx_addr;
    d15a:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    d15c:	2206      	movs	r2, #6
    d15e:	1ce8      	adds	r0, r5, #3
    d160:	f00e fde3 	bl	1bd2a <memcpy>
    d164:	e510      	b.n	cb88 <hci_evt_encode+0x190>
    d166:	f010 fe43 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    d16a:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
    d16c:	231f      	movs	r3, #31
	hdr->evt = evt;
    d16e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    d170:	7043      	strb	r3, [r0, #1]
    d172:	2101      	movs	r1, #1
    d174:	4628      	mov	r0, r5
    d176:	f010 fe3b 	bl	1ddf0 <net_buf_simple_add>
	me->subevent = subevt;
    d17a:	230a      	movs	r3, #10
    d17c:	7003      	strb	r3, [r0, #0]
    d17e:	211e      	movs	r1, #30
    d180:	4628      	mov	r0, r5
    d182:	f010 fe35 	bl	1ddf0 <net_buf_simple_add>
    d186:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
    d188:	221e      	movs	r2, #30
    d18a:	2100      	movs	r1, #0
    d18c:	f00e fdd8 	bl	1bd40 <memset>
			leecc->status = status;
    d190:	7027      	strb	r7, [r4, #0]
			return;
    d192:	e484      	b.n	ca9e <hci_evt_encode+0xa6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    d194:	4a10      	ldr	r2, [pc, #64]	; (d1d8 <hci_evt_encode+0x7e0>)
    d196:	4914      	ldr	r1, [pc, #80]	; (d1e8 <hci_evt_encode+0x7f0>)
    d198:	4811      	ldr	r0, [pc, #68]	; (d1e0 <hci_evt_encode+0x7e8>)
    d19a:	f641 337a 	movw	r3, #7034	; 0x1b7a
    d19e:	f00d ff8a 	bl	1b0b6 <printk>
    d1a2:	4040      	eors	r0, r0
    d1a4:	f380 8811 	msr	BASEPRI, r0
    d1a8:	f04f 0003 	mov.w	r0, #3
    d1ac:	df02      	svc	2
    d1ae:	e57e      	b.n	ccae <hci_evt_encode+0x2b6>
    d1b0:	2600      	movs	r6, #0
    d1b2:	230c      	movs	r3, #12
    d1b4:	f04f 0b0b 	mov.w	fp, #11
    d1b8:	9305      	str	r3, [sp, #20]
		data_len = 0U;
    d1ba:	46b1      	mov	r9, r6
    d1bc:	e4b8      	b.n	cb30 <hci_evt_encode+0x138>
		dir_info->addr.type = adv->tx_addr;
    d1be:	7f23      	ldrb	r3, [r4, #28]
    d1c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    d1c4:	4631      	mov	r1, r6
		dir_info->addr.type = adv->tx_addr;
    d1c6:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
    d1c8:	2206      	movs	r2, #6
    d1ca:	1ce8      	adds	r0, r5, #3
    d1cc:	f00e fdad 	bl	1bd2a <memcpy>
    d1d0:	e783      	b.n	d0da <hci_evt_encode+0x6e2>
    d1d2:	bf00      	nop
    d1d4:	20000248 	.word	0x20000248
    d1d8:	00020460 	.word	0x00020460
    d1dc:	0002049c 	.word	0x0002049c
    d1e0:	000203b4 	.word	0x000203b4
    d1e4:	200019fc 	.word	0x200019fc
    d1e8:	00020500 	.word	0x00020500

0000d1ec <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    d1ec:	b570      	push	{r4, r5, r6, lr}
    d1ee:	f100 0408 	add.w	r4, r0, #8
    d1f2:	460e      	mov	r6, r1
    d1f4:	4620      	mov	r0, r4
    d1f6:	2102      	movs	r1, #2
    d1f8:	4615      	mov	r5, r2
    d1fa:	f010 fdf9 	bl	1ddf0 <net_buf_simple_add>
	hdr->evt = evt;
    d1fe:	2313      	movs	r3, #19
	hdr->len = len;
    d200:	2105      	movs	r1, #5
	hdr->evt = evt;
    d202:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d204:	7041      	strb	r1, [r0, #1]
    d206:	4620      	mov	r0, r4
    d208:	f010 fdf2 	bl	1ddf0 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    d20c:	2301      	movs	r3, #1
    d20e:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    d210:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    d214:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    d218:	bd70      	pop	{r4, r5, r6, pc}
    d21a:	bf00      	nop

0000d21c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d21c:	7903      	ldrb	r3, [r0, #4]
    d21e:	2b03      	cmp	r3, #3
    d220:	d008      	beq.n	d234 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
    d222:	3b05      	subs	r3, #5
    d224:	b2db      	uxtb	r3, r3
    d226:	2b17      	cmp	r3, #23
    d228:	d901      	bls.n	d22e <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d22a:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    d22c:	4770      	bx	lr
    d22e:	4a05      	ldr	r2, [pc, #20]	; (d244 <hci_get_class+0x28>)
    d230:	5cd0      	ldrb	r0, [r2, r3]
    d232:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    d234:	7f03      	ldrb	r3, [r0, #28]
    d236:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
    d23a:	2b03      	cmp	r3, #3
    d23c:	bf0c      	ite	eq
    d23e:	2004      	moveq	r0, #4
    d240:	2005      	movne	r0, #5
    d242:	4770      	bx	lr
    d244:	0002053c 	.word	0x0002053c

0000d248 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    d248:	480d      	ldr	r0, [pc, #52]	; (d280 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d24a:	4a0e      	ldr	r2, [pc, #56]	; (d284 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d24c:	490e      	ldr	r1, [pc, #56]	; (d288 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
    d24e:	4b0f      	ldr	r3, [pc, #60]	; (d28c <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
    d250:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    d252:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d256:	f641 75ff 	movw	r5, #8191	; 0x1fff
    d25a:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d25e:	2400      	movs	r4, #0
    d260:	2500      	movs	r5, #0
    d262:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
    d266:	4a0a      	ldr	r2, [pc, #40]	; (d290 <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d268:	241f      	movs	r4, #31
    d26a:	2500      	movs	r5, #0
    d26c:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    d270:	2100      	movs	r1, #0
    d272:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
    d274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    d278:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
    d27a:	601a      	str	r2, [r3, #0]
}
    d27c:	4770      	bx	lr
    d27e:	bf00      	nop
    d280:	20000240 	.word	0x20000240
    d284:	200012a8 	.word	0x200012a8
    d288:	20000248 	.word	0x20000248
    d28c:	200019fc 	.word	0x200019fc
    d290:	200019f8 	.word	0x200019f8

0000d294 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    d294:	f006 bdb4 	b.w	13e00 <lll_csrand_get>

0000d298 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    d298:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    d29a:	2300      	movs	r3, #0
    d29c:	f008 fe5c 	bl	15f58 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    d2a0:	2000      	movs	r0, #0
    d2a2:	bd08      	pop	{r3, pc}

0000d2a4 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    d2a4:	4801      	ldr	r0, [pc, #4]	; (d2ac <ll_feat_get+0x8>)
    d2a6:	2100      	movs	r1, #0
    d2a8:	4770      	bx	lr
    d2aa:	bf00      	nop
    d2ac:	000141ff 	.word	0x000141ff

0000d2b0 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    d2b0:	b510      	push	{r4, lr}
    d2b2:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    d2b4:	f006 fdda 	bl	13e6c <lll_reset>
	LL_ASSERT(!err);
    d2b8:	b970      	cbnz	r0, d2d8 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    d2ba:	f007 f9ab 	bl	14614 <lll_adv_reset>
	LL_ASSERT(!err);
    d2be:	b9e0      	cbnz	r0, d2fa <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    d2c0:	f008 f80a 	bl	152d8 <lll_scan_reset>
	LL_ASSERT(!err);
    d2c4:	bb50      	cbnz	r0, d31c <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    d2c6:	f008 f921 	bl	1550c <lll_conn_reset>
	LL_ASSERT(!err);
    d2ca:	2800      	cmp	r0, #0
    d2cc:	d137      	bne.n	d33e <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
    d2ce:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    d2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d2d4:	f00c bf42 	b.w	1a15c <z_impl_k_sem_give>
	LL_ASSERT(!err);
    d2d8:	4a22      	ldr	r2, [pc, #136]	; (d364 <perform_lll_reset+0xb4>)
    d2da:	4923      	ldr	r1, [pc, #140]	; (d368 <perform_lll_reset+0xb8>)
    d2dc:	4823      	ldr	r0, [pc, #140]	; (d36c <perform_lll_reset+0xbc>)
    d2de:	f640 0324 	movw	r3, #2084	; 0x824
    d2e2:	f00d fee8 	bl	1b0b6 <printk>
    d2e6:	4040      	eors	r0, r0
    d2e8:	f380 8811 	msr	BASEPRI, r0
    d2ec:	f04f 0003 	mov.w	r0, #3
    d2f0:	df02      	svc	2
	err = lll_adv_reset();
    d2f2:	f007 f98f 	bl	14614 <lll_adv_reset>
	LL_ASSERT(!err);
    d2f6:	2800      	cmp	r0, #0
    d2f8:	d0e2      	beq.n	d2c0 <perform_lll_reset+0x10>
    d2fa:	4a1a      	ldr	r2, [pc, #104]	; (d364 <perform_lll_reset+0xb4>)
    d2fc:	491a      	ldr	r1, [pc, #104]	; (d368 <perform_lll_reset+0xb8>)
    d2fe:	481b      	ldr	r0, [pc, #108]	; (d36c <perform_lll_reset+0xbc>)
    d300:	f640 0329 	movw	r3, #2089	; 0x829
    d304:	f00d fed7 	bl	1b0b6 <printk>
    d308:	4040      	eors	r0, r0
    d30a:	f380 8811 	msr	BASEPRI, r0
    d30e:	f04f 0003 	mov.w	r0, #3
    d312:	df02      	svc	2
	err = lll_scan_reset();
    d314:	f007 ffe0 	bl	152d8 <lll_scan_reset>
	LL_ASSERT(!err);
    d318:	2800      	cmp	r0, #0
    d31a:	d0d4      	beq.n	d2c6 <perform_lll_reset+0x16>
    d31c:	4a11      	ldr	r2, [pc, #68]	; (d364 <perform_lll_reset+0xb4>)
    d31e:	4912      	ldr	r1, [pc, #72]	; (d368 <perform_lll_reset+0xb8>)
    d320:	4812      	ldr	r0, [pc, #72]	; (d36c <perform_lll_reset+0xbc>)
    d322:	f640 032f 	movw	r3, #2095	; 0x82f
    d326:	f00d fec6 	bl	1b0b6 <printk>
    d32a:	4040      	eors	r0, r0
    d32c:	f380 8811 	msr	BASEPRI, r0
    d330:	f04f 0003 	mov.w	r0, #3
    d334:	df02      	svc	2
	err = lll_conn_reset();
    d336:	f008 f8e9 	bl	1550c <lll_conn_reset>
	LL_ASSERT(!err);
    d33a:	2800      	cmp	r0, #0
    d33c:	d0c7      	beq.n	d2ce <perform_lll_reset+0x1e>
    d33e:	4a09      	ldr	r2, [pc, #36]	; (d364 <perform_lll_reset+0xb4>)
    d340:	4909      	ldr	r1, [pc, #36]	; (d368 <perform_lll_reset+0xb8>)
    d342:	480a      	ldr	r0, [pc, #40]	; (d36c <perform_lll_reset+0xbc>)
    d344:	f640 0335 	movw	r3, #2101	; 0x835
    d348:	f00d feb5 	bl	1b0b6 <printk>
    d34c:	4040      	eors	r0, r0
    d34e:	f380 8811 	msr	BASEPRI, r0
    d352:	f04f 0003 	mov.w	r0, #3
    d356:	df02      	svc	2
    d358:	4620      	mov	r0, r4
}
    d35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d35e:	f00c befd 	b.w	1a15c <z_impl_k_sem_give>
    d362:	bf00      	nop
    d364:	00020554 	.word	0x00020554
    d368:	00020590 	.word	0x00020590
    d36c:	000203b4 	.word	0x000203b4

0000d370 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    d370:	6008      	str	r0, [r1, #0]
    d372:	4801      	ldr	r0, [pc, #4]	; (d378 <ull_ticker_status_give+0x8>)
    d374:	f00c bef2 	b.w	1a15c <z_impl_k_sem_give>
    d378:	20001d78 	.word	0x20001d78

0000d37c <disabled_cb>:
    d37c:	f00c beee 	b.w	1a15c <z_impl_k_sem_give>

0000d380 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    d380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    d384:	4d2c      	ldr	r5, [pc, #176]	; (d438 <tx_cmplt_get+0xb8>)
{
    d386:	460c      	mov	r4, r1
    d388:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    d38a:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    d38c:	7822      	ldrb	r2, [r4, #0]
    d38e:	782b      	ldrb	r3, [r5, #0]
    d390:	4291      	cmp	r1, r2
    d392:	bf9c      	itt	ls
    d394:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
    d396:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
    d398:	4591      	cmp	r9, r2
{
    d39a:	4682      	mov	sl, r0
    d39c:	d042      	beq.n	d424 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    d39e:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
    d3a2:	3201      	adds	r2, #1
    d3a4:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    d3a6:	4f25      	ldr	r7, [pc, #148]	; (d43c <tx_cmplt_get+0xbc>)
		i = 0U;
    d3a8:	4291      	cmp	r1, r2
    d3aa:	bf08      	it	eq
    d3ac:	2200      	moveq	r2, #0

	*idx = i;
    d3ae:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
    d3b0:	5afa      	ldrh	r2, [r7, r3]
    d3b2:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
    d3b4:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
    d3b6:	443b      	add	r3, r7
    d3b8:	f04f 0b01 	mov.w	fp, #1
    d3bc:	f04f 0802 	mov.w	r8, #2
    d3c0:	e021      	b.n	d406 <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    d3c2:	b362      	cbz	r2, d41e <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    d3c4:	7902      	ldrb	r2, [r0, #4]
    d3c6:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
    d3ca:	3a01      	subs	r2, #1
    d3cc:	2a01      	cmp	r2, #1
    d3ce:	d92d      	bls.n	d42c <tx_cmplt_get+0xac>
    d3d0:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
    d3d4:	f002 fa1e 	bl	f814 <ll_tx_mem_release>
	if (*idx >= count) {
    d3d8:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    d3da:	7869      	ldrb	r1, [r5, #1]
    d3dc:	7828      	ldrb	r0, [r5, #0]
    d3de:	4299      	cmp	r1, r3
    d3e0:	bf9c      	itt	ls
    d3e2:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
    d3e4:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
    d3e6:	454b      	cmp	r3, r9
    d3e8:	d01d      	beq.n	d426 <tx_cmplt_get+0xa6>
	i = *idx + 1;
    d3ea:	1c5a      	adds	r2, r3, #1
    d3ec:	b2d2      	uxtb	r2, r2
		i = 0U;
    d3ee:	4291      	cmp	r1, r2
    d3f0:	bf08      	it	eq
    d3f2:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    d3f4:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
    d3f8:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    d3fa:	5af9      	ldrh	r1, [r7, r3]
    d3fc:	f8ba 2000 	ldrh.w	r2, [sl]
    d400:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
    d402:	443b      	add	r3, r7
    d404:	d10f      	bne.n	d426 <tx_cmplt_get+0xa6>
		node_tx = tx->node;
    d406:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    d408:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
    d40a:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
    d40e:	d8d8      	bhi.n	d3c2 <tx_cmplt_get+0x42>
			cmplt++;
    d410:	3601      	adds	r6, #1
    d412:	b2f6      	uxtb	r6, r6
    d414:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
    d418:	2a00      	cmp	r2, #0
    d41a:	d0dd      	beq.n	d3d8 <tx_cmplt_get+0x58>
    d41c:	e7da      	b.n	d3d4 <tx_cmplt_get+0x54>
    d41e:	f8c3 8004 	str.w	r8, [r3, #4]
    d422:	e7d9      	b.n	d3d8 <tx_cmplt_get+0x58>
		return 0;
    d424:	2600      	movs	r6, #0

	return cmplt;
}
    d426:	4630      	mov	r0, r6
    d428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    d42c:	3601      	adds	r6, #1
    d42e:	f8c3 b004 	str.w	fp, [r3, #4]
    d432:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
    d434:	e7ce      	b.n	d3d4 <tx_cmplt_get+0x54>
    d436:	bf00      	nop
    d438:	20000510 	.word	0x20000510
    d43c:	20000514 	.word	0x20000514

0000d440 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    d440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d444:	4e3c      	ldr	r6, [pc, #240]	; (d538 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    d446:	f8df 80f4 	ldr.w	r8, [pc, #244]	; d53c <ull_done+0xfc>
    d44a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; d540 <ull_done+0x100>
{
    d44e:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    d450:	e9d6 0100 	ldrd	r0, r1, [r6]
    d454:	aa01      	add	r2, sp, #4
    d456:	f7fc fe6d 	bl	a134 <memq_peek>
		if (link) {
    d45a:	4604      	mov	r4, r0
    d45c:	2800      	cmp	r0, #0
    d45e:	d03e      	beq.n	d4de <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
    d460:	6870      	ldr	r0, [r6, #4]
    d462:	2200      	movs	r2, #0
    d464:	4631      	mov	r1, r6
    d466:	f7fc fe6d 	bl	a144 <memq_dequeue>
			rx_demux_event_done(link, done);
    d46a:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
    d46c:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
    d46e:	b135      	cbz	r5, d47e <ull_done+0x3e>
	return hdr->ref;
    d470:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    d472:	2b00      	cmp	r3, #0
    d474:	d052      	beq.n	d51c <ull_done+0xdc>
	return hdr->ref--;
    d476:	782b      	ldrb	r3, [r5, #0]
    d478:	3b01      	subs	r3, #1
    d47a:	b2db      	uxtb	r3, r3
    d47c:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    d47e:	f897 3020 	ldrb.w	r3, [r7, #32]
    d482:	b123      	cbz	r3, d48e <ull_done+0x4e>
    d484:	2b01      	cmp	r3, #1
    d486:	d13b      	bne.n	d500 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    d488:	4638      	mov	r0, r7
    d48a:	f004 f841 	bl	11510 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
    d48e:	4a2d      	ldr	r2, [pc, #180]	; (d544 <ull_done+0x104>)
	last = last + 1;
    d490:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
    d492:	f892 c001 	ldrb.w	ip, [r2, #1]
    d496:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
    d498:	3301      	adds	r3, #1
	done->extra.type = 0U;
    d49a:	2000      	movs	r0, #0
    d49c:	b2db      	uxtb	r3, r3
		last = 0U;
    d49e:	459c      	cmp	ip, r3
    d4a0:	bf08      	it	eq
    d4a2:	4603      	moveq	r3, r0
	if (last == first) {
    d4a4:	4299      	cmp	r1, r3
    d4a6:	f887 0020 	strb.w	r0, [r7, #32]
    d4aa:	d01b      	beq.n	d4e4 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
    d4ac:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
    d4ae:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    d4b0:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    d4b2:	fb00 2101 	mla	r1, r0, r1, r2
    d4b6:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
    d4b8:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    d4ba:	2d00      	cmp	r5, #0
    d4bc:	d0c8      	beq.n	d450 <ull_done+0x10>
	return hdr->ref;
    d4be:	782b      	ldrb	r3, [r5, #0]
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	d1c5      	bne.n	d450 <ull_done+0x10>
    d4c4:	696b      	ldr	r3, [r5, #20]
    d4c6:	2b00      	cmp	r3, #0
    d4c8:	d0c2      	beq.n	d450 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    d4ca:	69a8      	ldr	r0, [r5, #24]
    d4cc:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    d4ce:	e9d6 0100 	ldrd	r0, r1, [r6]
    d4d2:	aa01      	add	r2, sp, #4
    d4d4:	f7fc fe2e 	bl	a134 <memq_peek>
		if (link) {
    d4d8:	4604      	mov	r4, r0
    d4da:	2800      	cmp	r0, #0
    d4dc:	d1c0      	bne.n	d460 <ull_done+0x20>
}
    d4de:	b003      	add	sp, #12
    d4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    d4e4:	4918      	ldr	r1, [pc, #96]	; (d548 <ull_done+0x108>)
    d4e6:	4819      	ldr	r0, [pc, #100]	; (d54c <ull_done+0x10c>)
    d4e8:	f44f 6327 	mov.w	r3, #2672	; 0xa70
    d4ec:	4642      	mov	r2, r8
    d4ee:	f00d fde2 	bl	1b0b6 <printk>
    d4f2:	4040      	eors	r0, r0
    d4f4:	f380 8811 	msr	BASEPRI, r0
    d4f8:	f04f 0003 	mov.w	r0, #3
    d4fc:	df02      	svc	2
    d4fe:	e7dc      	b.n	d4ba <ull_done+0x7a>
		LL_ASSERT(0);
    d500:	4913      	ldr	r1, [pc, #76]	; (d550 <ull_done+0x110>)
    d502:	4812      	ldr	r0, [pc, #72]	; (d54c <ull_done+0x10c>)
    d504:	f640 2369 	movw	r3, #2665	; 0xa69
    d508:	4642      	mov	r2, r8
    d50a:	f00d fdd4 	bl	1b0b6 <printk>
    d50e:	4040      	eors	r0, r0
    d510:	f380 8811 	msr	BASEPRI, r0
    d514:	f04f 0003 	mov.w	r0, #3
    d518:	df02      	svc	2
		break;
    d51a:	e7b8      	b.n	d48e <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
    d51c:	480b      	ldr	r0, [pc, #44]	; (d54c <ull_done+0x10c>)
    d51e:	f640 2312 	movw	r3, #2578	; 0xa12
    d522:	4642      	mov	r2, r8
    d524:	4649      	mov	r1, r9
    d526:	f00d fdc6 	bl	1b0b6 <printk>
    d52a:	4040      	eors	r0, r0
    d52c:	f380 8811 	msr	BASEPRI, r0
    d530:	f04f 0003 	mov.w	r0, #3
    d534:	df02      	svc	2
    d536:	e79e      	b.n	d476 <ull_done+0x36>
    d538:	20001d64 	.word	0x20001d64
    d53c:	00020554 	.word	0x00020554
    d540:	00020598 	.word	0x00020598
    d544:	200003cc 	.word	0x200003cc
    d548:	000205b0 	.word	0x000205b0
    d54c:	000203b4 	.word	0x000203b4
    d550:	00020414 	.word	0x00020414

0000d554 <rx_alloc>:
{
    d554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
    d558:	4f33      	ldr	r7, [pc, #204]	; (d628 <rx_alloc+0xd4>)
    d55a:	783e      	ldrb	r6, [r7, #0]
    d55c:	4286      	cmp	r6, r0
    d55e:	bf28      	it	cs
    d560:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d562:	b34e      	cbz	r6, d5b8 <rx_alloc+0x64>
    d564:	4d31      	ldr	r5, [pc, #196]	; (d62c <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
    d566:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d630 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d56a:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
    d56c:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
    d570:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d572:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    d574:	3401      	adds	r4, #1
    d576:	b2e4      	uxtb	r4, r4
		last = 0U;
    d578:	42a2      	cmp	r2, r4
    d57a:	bf08      	it	eq
    d57c:	2400      	moveq	r4, #0
	if (last == first) {
    d57e:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    d580:	4640      	mov	r0, r8
    d582:	d01b      	beq.n	d5bc <rx_alloc+0x68>
    d584:	f7fc fd68 	bl	a058 <mem_acquire>
    d588:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    d58a:	4648      	mov	r0, r9
		if (!link) {
    d58c:	f1ba 0f00 	cmp.w	sl, #0
    d590:	d012      	beq.n	d5b8 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    d592:	f7fc fd61 	bl	a058 <mem_acquire>
		if (!rx) {
    d596:	2800      	cmp	r0, #0
    d598:	d03f      	beq.n	d61a <rx_alloc+0xc6>
		rx->link = link;
    d59a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    d59e:	78ea      	ldrb	r2, [r5, #3]
    d5a0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    d5a2:	fb02 5303 	mla	r3, r2, r3, r5
    d5a6:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    d5a8:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    d5aa:	70ec      	strb	r4, [r5, #3]
		max--;
    d5ac:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    d5ae:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d5b0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    d5b4:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d5b6:	d1db      	bne.n	d570 <rx_alloc+0x1c>
}
    d5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
    d5bc:	783b      	ldrb	r3, [r7, #0]
    d5be:	2b00      	cmp	r3, #0
    d5c0:	d0fa      	beq.n	d5b8 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    d5c2:	4d1c      	ldr	r5, [pc, #112]	; (d634 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
    d5c4:	4e1c      	ldr	r6, [pc, #112]	; (d638 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    d5c6:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    d5c8:	f8df 8064 	ldr.w	r8, [pc, #100]	; d630 <rx_alloc+0xdc>
		link->mem = NULL;
    d5cc:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    d5d0:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    d5d2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    d5d4:	3401      	adds	r4, #1
    d5d6:	b2e4      	uxtb	r4, r4
		last = 0U;
    d5d8:	42a2      	cmp	r2, r4
    d5da:	bf08      	it	eq
    d5dc:	2400      	moveq	r4, #0
	if (last == first) {
    d5de:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    d5e0:	4630      	mov	r0, r6
    d5e2:	d0e9      	beq.n	d5b8 <rx_alloc+0x64>
    d5e4:	f7fc fd38 	bl	a058 <mem_acquire>
    d5e8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    d5ea:	4640      	mov	r0, r8
		if (!link) {
    d5ec:	f1ba 0f00 	cmp.w	sl, #0
    d5f0:	d0e2      	beq.n	d5b8 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    d5f2:	f7fc fd31 	bl	a058 <mem_acquire>
		if (!rx) {
    d5f6:	b180      	cbz	r0, d61a <rx_alloc+0xc6>
		link->mem = NULL;
    d5f8:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    d5fc:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    d600:	78ea      	ldrb	r2, [r5, #3]
    d602:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    d604:	fb02 5303 	mla	r3, r2, r3, r5
    d608:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    d60a:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    d60c:	70ec      	strb	r4, [r5, #3]
    d60e:	3b01      	subs	r3, #1
    d610:	b2db      	uxtb	r3, r3
    d612:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    d614:	2b00      	cmp	r3, #0
    d616:	d1db      	bne.n	d5d0 <rx_alloc+0x7c>
    d618:	e7ce      	b.n	d5b8 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
    d61a:	4650      	mov	r0, sl
    d61c:	4906      	ldr	r1, [pc, #24]	; (d638 <rx_alloc+0xe4>)
}
    d61e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
    d622:	f7fc bd33 	b.w	a08c <mem_release>
    d626:	bf00      	nop
    d628:	20001ae0 	.word	0x20001ae0
    d62c:	200003f4 	.word	0x200003f4
    d630:	20001b38 	.word	0x20001b38
    d634:	200003e4 	.word	0x200003e4
    d638:	20001ae4 	.word	0x20001ae4

0000d63c <rx_demux>:
{
    d63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d640:	f8df 81ac 	ldr.w	r8, [pc, #428]	; d7f0 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
    d644:	f8df 91ac 	ldr.w	r9, [pc, #428]	; d7f4 <rx_demux+0x1b8>
		LL_ASSERT(0);
    d648:	f8df a1ac 	ldr.w	sl, [pc, #428]	; d7f8 <rx_demux+0x1bc>
    d64c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; d7fc <rx_demux+0x1c0>
{
    d650:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    d652:	e9d8 0100 	ldrd	r0, r1, [r8]
    d656:	aa03      	add	r2, sp, #12
    d658:	f7fc fd6c 	bl	a134 <memq_peek>
		if (link) {
    d65c:	4605      	mov	r5, r0
    d65e:	2800      	cmp	r0, #0
    d660:	d035      	beq.n	d6ce <rx_demux+0x92>
			LL_ASSERT(rx);
    d662:	9b03      	ldr	r3, [sp, #12]
    d664:	2b00      	cmp	r3, #0
    d666:	f000 80a6 	beq.w	d7b6 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    d66a:	7818      	ldrb	r0, [r3, #0]
    d66c:	aa04      	add	r2, sp, #16
    d66e:	a902      	add	r1, sp, #8
    d670:	f004 f9e0 	bl	11a34 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    d674:	4604      	mov	r4, r0
    d676:	2800      	cmp	r0, #0
    d678:	d055      	beq.n	d726 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    d67a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    d67e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    d682:	780f      	ldrb	r7, [r1, #0]
    d684:	f8ad 200a 	strh.w	r2, [sp, #10]
    d688:	ae05      	add	r6, sp, #20
    d68a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    d68c:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    d690:	f004 f9ea 	bl	11a68 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    d694:	4621      	mov	r1, r4
    d696:	9a05      	ldr	r2, [sp, #20]
    d698:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    d69c:	f004 fa2e 	bl	11afc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    d6a0:	4620      	mov	r0, r4
    d6a2:	f004 f99f 	bl	119e4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    d6a6:	4632      	mov	r2, r6
    d6a8:	4629      	mov	r1, r5
    d6aa:	4638      	mov	r0, r7
    d6ac:	f004 f9c2 	bl	11a34 <ull_conn_ack_by_last_peek>
	} while (link);
    d6b0:	4604      	mov	r4, r0
    d6b2:	2800      	cmp	r0, #0
    d6b4:	d1ec      	bne.n	d690 <rx_demux+0x54>
	k_sem_give(sem_recv);
    d6b6:	f8d9 0000 	ldr.w	r0, [r9]
    d6ba:	f00c fd4f 	bl	1a15c <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    d6be:	e9d8 0100 	ldrd	r0, r1, [r8]
    d6c2:	aa03      	add	r2, sp, #12
    d6c4:	f7fc fd36 	bl	a134 <memq_peek>
		if (link) {
    d6c8:	4605      	mov	r5, r0
    d6ca:	2800      	cmp	r0, #0
    d6cc:	d1c9      	bne.n	d662 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    d6ce:	aa04      	add	r2, sp, #16
    d6d0:	a902      	add	r1, sp, #8
    d6d2:	f10d 0007 	add.w	r0, sp, #7
    d6d6:	f004 f991 	bl	119fc <ull_conn_ack_peek>
			if (link) {
    d6da:	4604      	mov	r4, r0
    d6dc:	2800      	cmp	r0, #0
    d6de:	d067      	beq.n	d7b0 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
    d6e0:	9b04      	ldr	r3, [sp, #16]
    d6e2:	9305      	str	r3, [sp, #20]
    d6e4:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    d6e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    d6ec:	f8ad 300a 	strh.w	r3, [sp, #10]
    d6f0:	ae05      	add	r6, sp, #20
    d6f2:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    d6f6:	f004 f9b7 	bl	11a68 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    d6fa:	4621      	mov	r1, r4
    d6fc:	9a05      	ldr	r2, [sp, #20]
    d6fe:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    d702:	f004 f9fb 	bl	11afc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    d706:	4620      	mov	r0, r4
    d708:	f004 f96c 	bl	119e4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    d70c:	4632      	mov	r2, r6
    d70e:	4629      	mov	r1, r5
    d710:	4638      	mov	r0, r7
    d712:	f004 f98f 	bl	11a34 <ull_conn_ack_by_last_peek>
	} while (link);
    d716:	4604      	mov	r4, r0
    d718:	2800      	cmp	r0, #0
    d71a:	d1ec      	bne.n	d6f6 <rx_demux+0xba>
	k_sem_give(sem_recv);
    d71c:	f8d9 0000 	ldr.w	r0, [r9]
    d720:	f00c fd1c 	bl	1a15c <z_impl_k_sem_give>
			if (nack) {
    d724:	e7cb      	b.n	d6be <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    d726:	9b03      	ldr	r3, [sp, #12]
    d728:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    d72a:	791b      	ldrb	r3, [r3, #4]
    d72c:	3b01      	subs	r3, #1
    d72e:	2b16      	cmp	r3, #22
    d730:	d80d      	bhi.n	d74e <rx_demux+0x112>
    d732:	e8df f003 	tbb	[pc, r3]
    d736:	0c1a      	.short	0x0c1a
    d738:	0c1a0c38 	.word	0x0c1a0c38
    d73c:	0c0c0c0c 	.word	0x0c0c0c0c
    d740:	0c0c0c0c 	.word	0x0c0c0c0c
    d744:	0c0c0c0c 	.word	0x0c0c0c0c
    d748:	2d0c0c0c 	.word	0x2d0c0c0c
    d74c:	1a          	.byte	0x1a
    d74d:	00          	.byte	0x00
		LL_ASSERT(0);
    d74e:	482c      	ldr	r0, [pc, #176]	; (d800 <rx_demux+0x1c4>)
    d750:	f640 13ff 	movw	r3, #2559	; 0x9ff
    d754:	4652      	mov	r2, sl
    d756:	4659      	mov	r1, fp
    d758:	f00d fcad 	bl	1b0b6 <printk>
    d75c:	4040      	eors	r0, r0
    d75e:	f380 8811 	msr	BASEPRI, r0
    d762:	f04f 0003 	mov.w	r0, #3
    d766:	df02      	svc	2
			if (nack) {
    d768:	e773      	b.n	d652 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    d76a:	4921      	ldr	r1, [pc, #132]	; (d7f0 <rx_demux+0x1b4>)
    d76c:	f8d8 0004 	ldr.w	r0, [r8, #4]
    d770:	2200      	movs	r2, #0
    d772:	f7fc fce7 	bl	a144 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    d776:	4b23      	ldr	r3, [pc, #140]	; (d804 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
    d778:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    d77a:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    d77c:	4628      	mov	r0, r5
    d77e:	4a22      	ldr	r2, [pc, #136]	; (d808 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    d780:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    d782:	f7fc fccd 	bl	a120 <memq_enqueue>
	k_sem_give(sem_recv);
    d786:	f8d9 0000 	ldr.w	r0, [r9]
    d78a:	f00c fce7 	bl	1a15c <z_impl_k_sem_give>
			if (nack) {
    d78e:	e796      	b.n	d6be <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    d790:	4917      	ldr	r1, [pc, #92]	; (d7f0 <rx_demux+0x1b4>)
    d792:	f8d8 0004 	ldr.w	r0, [r8, #4]
    d796:	2200      	movs	r2, #0
    d798:	f7fc fcd4 	bl	a144 <memq_dequeue>
		ull_conn_setup(link, rx);
    d79c:	9905      	ldr	r1, [sp, #20]
    d79e:	4628      	mov	r0, r5
    d7a0:	f002 fb20 	bl	fde4 <ull_conn_setup>
			if (nack) {
    d7a4:	e755      	b.n	d652 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    d7a6:	a905      	add	r1, sp, #20
    d7a8:	4628      	mov	r0, r5
    d7aa:	f002 fb43 	bl	fe34 <ull_conn_rx>
		if (nack) {
    d7ae:	b188      	cbz	r0, d7d4 <rx_demux+0x198>
}
    d7b0:	b007      	add	sp, #28
    d7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    d7b6:	4915      	ldr	r1, [pc, #84]	; (d80c <rx_demux+0x1d0>)
    d7b8:	4811      	ldr	r0, [pc, #68]	; (d800 <rx_demux+0x1c4>)
    d7ba:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
    d7be:	4652      	mov	r2, sl
    d7c0:	f00d fc79 	bl	1b0b6 <printk>
    d7c4:	4040      	eors	r0, r0
    d7c6:	f380 8811 	msr	BASEPRI, r0
    d7ca:	f04f 0003 	mov.w	r0, #3
    d7ce:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    d7d0:	9b03      	ldr	r3, [sp, #12]
    d7d2:	e74a      	b.n	d66a <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    d7d4:	4906      	ldr	r1, [pc, #24]	; (d7f0 <rx_demux+0x1b4>)
    d7d6:	4602      	mov	r2, r0
    d7d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    d7dc:	f7fc fcb2 	bl	a144 <memq_dequeue>
		if (rx) {
    d7e0:	9905      	ldr	r1, [sp, #20]
    d7e2:	2900      	cmp	r1, #0
    d7e4:	f43f af35 	beq.w	d652 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    d7e8:	4b06      	ldr	r3, [pc, #24]	; (d804 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    d7ea:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    d7ec:	78db      	ldrb	r3, [r3, #3]
    d7ee:	e7c6      	b.n	d77e <rx_demux+0x142>
    d7f0:	20001d6c 	.word	0x20001d6c
    d7f4:	20001d74 	.word	0x20001d74
    d7f8:	00020554 	.word	0x00020554
    d7fc:	00020414 	.word	0x00020414
    d800:	000203b4 	.word	0x000203b4
    d804:	20000510 	.word	0x20000510
    d808:	20001d60 	.word	0x20001d60
    d80c:	000205c0 	.word	0x000205c0

0000d810 <ll_rx_get>:
{
    d810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d814:	b085      	sub	sp, #20
    d816:	e9cd 0100 	strd	r0, r1, [sp]
    d81a:	4c63      	ldr	r4, [pc, #396]	; (d9a8 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
    d81c:	4d63      	ldr	r5, [pc, #396]	; (d9ac <ll_rx_get+0x19c>)
    d81e:	4e64      	ldr	r6, [pc, #400]	; (d9b0 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
    d820:	9a00      	ldr	r2, [sp, #0]
    d822:	2300      	movs	r3, #0
    d824:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    d826:	e9d6 0100 	ldrd	r0, r1, [r6]
    d82a:	aa03      	add	r2, sp, #12
    d82c:	f7fc fc82 	bl	a134 <memq_peek>
	if (link) {
    d830:	4680      	mov	r8, r0
    d832:	2800      	cmp	r0, #0
    d834:	f000 809f 	beq.w	d976 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    d838:	9b03      	ldr	r3, [sp, #12]
    d83a:	495e      	ldr	r1, [pc, #376]	; (d9b4 <ll_rx_get+0x1a4>)
    d83c:	781a      	ldrb	r2, [r3, #0]
    d83e:	9801      	ldr	r0, [sp, #4]
    d840:	f7ff fd9e 	bl	d380 <tx_cmplt_get>
		if (!cmplt) {
    d844:	2800      	cmp	r0, #0
    d846:	f040 809b 	bne.w	d980 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
    d84a:	78a3      	ldrb	r3, [r4, #2]
    d84c:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    d850:	78e2      	ldrb	r2, [r4, #3]
    d852:	4607      	mov	r7, r0
    d854:	f10d 0109 	add.w	r1, sp, #9
    d858:	f10d 000a 	add.w	r0, sp, #10
    d85c:	f7ff fd90 	bl	d380 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
    d860:	ea47 0200 	orr.w	r2, r7, r0
    d864:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    d868:	d1f2      	bne.n	d850 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    d86a:	9b03      	ldr	r3, [sp, #12]
    d86c:	7919      	ldrb	r1, [r3, #4]
    d86e:	2901      	cmp	r1, #1
    d870:	f040 8093 	bne.w	d99a <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
    d874:	494e      	ldr	r1, [pc, #312]	; (d9b0 <ll_rx_get+0x1a0>)
    d876:	6870      	ldr	r0, [r6, #4]
    d878:	f7fc fc64 	bl	a144 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    d87c:	494e      	ldr	r1, [pc, #312]	; (d9b8 <ll_rx_get+0x1a8>)
    d87e:	4640      	mov	r0, r8
    d880:	f7fc fc04 	bl	a08c <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    d884:	782b      	ldrb	r3, [r5, #0]
    d886:	2b05      	cmp	r3, #5
    d888:	d866      	bhi.n	d958 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
    d88a:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    d88c:	494b      	ldr	r1, [pc, #300]	; (d9bc <ll_rx_get+0x1ac>)
    d88e:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    d890:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    d892:	f7fc fbfb 	bl	a08c <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d896:	782b      	ldrb	r3, [r5, #0]
    d898:	2b00      	cmp	r3, #0
    d89a:	d0c1      	beq.n	d820 <ll_rx_get+0x10>
    d89c:	f8df 8120 	ldr.w	r8, [pc, #288]	; d9c0 <ll_rx_get+0x1b0>
	last = last + 1;
    d8a0:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
    d8a4:	f898 2001 	ldrb.w	r2, [r8, #1]
    d8a8:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    d8ac:	3701      	adds	r7, #1
    d8ae:	b2ff      	uxtb	r7, r7
		last = 0U;
    d8b0:	42ba      	cmp	r2, r7
    d8b2:	bf08      	it	eq
    d8b4:	2700      	moveq	r7, #0
	if (last == first) {
    d8b6:	429f      	cmp	r7, r3
    d8b8:	d019      	beq.n	d8ee <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
    d8ba:	483f      	ldr	r0, [pc, #252]	; (d9b8 <ll_rx_get+0x1a8>)
    d8bc:	f7fc fbcc 	bl	a058 <mem_acquire>
		if (!link) {
    d8c0:	4681      	mov	r9, r0
    d8c2:	2800      	cmp	r0, #0
    d8c4:	d0ac      	beq.n	d820 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    d8c6:	483d      	ldr	r0, [pc, #244]	; (d9bc <ll_rx_get+0x1ac>)
    d8c8:	f7fc fbc6 	bl	a058 <mem_acquire>
		if (!rx) {
    d8cc:	2800      	cmp	r0, #0
    d8ce:	d05a      	beq.n	d986 <ll_rx_get+0x176>
		rx->link = link;
    d8d0:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    d8d4:	f898 2003 	ldrb.w	r2, [r8, #3]
    d8d8:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    d8dc:	fb02 8303 	mla	r3, r2, r3, r8
    d8e0:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    d8e2:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    d8e4:	f888 7003 	strb.w	r7, [r8, #3]
    d8e8:	3b01      	subs	r3, #1
    d8ea:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    d8ec:	e798      	b.n	d820 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    d8ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	; d9c4 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
    d8f2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; d9b8 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    d8f6:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    d8fa:	f8df a0c0 	ldr.w	sl, [pc, #192]	; d9bc <ll_rx_get+0x1ac>
	if (last == count) {
    d8fe:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    d902:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    d906:	3701      	adds	r7, #1
    d908:	b2ff      	uxtb	r7, r7
		last = 0U;
    d90a:	42ba      	cmp	r2, r7
    d90c:	bf08      	it	eq
    d90e:	2700      	moveq	r7, #0
	if (last == first) {
    d910:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
    d912:	4648      	mov	r0, r9
    d914:	d084      	beq.n	d820 <ll_rx_get+0x10>
    d916:	f7fc fb9f 	bl	a058 <mem_acquire>
    d91a:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    d91c:	4650      	mov	r0, sl
		if (!link) {
    d91e:	f1bb 0f00 	cmp.w	fp, #0
    d922:	f43f af7d 	beq.w	d820 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    d926:	f7fc fb97 	bl	a058 <mem_acquire>
		if (!rx) {
    d92a:	2800      	cmp	r0, #0
    d92c:	d030      	beq.n	d990 <ll_rx_get+0x180>
		link->mem = NULL;
    d92e:	2300      	movs	r3, #0
    d930:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    d934:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    d938:	f898 2003 	ldrb.w	r2, [r8, #3]
    d93c:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    d940:	fb02 8303 	mla	r3, r2, r3, r8
    d944:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    d946:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    d948:	f888 7003 	strb.w	r7, [r8, #3]
    d94c:	3b01      	subs	r3, #1
    d94e:	b2db      	uxtb	r3, r3
    d950:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    d952:	2b00      	cmp	r3, #0
    d954:	d1d3      	bne.n	d8fe <ll_rx_get+0xee>
    d956:	e763      	b.n	d820 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    d958:	4a1b      	ldr	r2, [pc, #108]	; (d9c8 <ll_rx_get+0x1b8>)
    d95a:	491c      	ldr	r1, [pc, #112]	; (d9cc <ll_rx_get+0x1bc>)
    d95c:	481c      	ldr	r0, [pc, #112]	; (d9d0 <ll_rx_get+0x1c0>)
    d95e:	f240 6306 	movw	r3, #1542	; 0x606
    d962:	f00d fba8 	bl	1b0b6 <printk>
    d966:	4040      	eors	r0, r0
    d968:	f380 8811 	msr	BASEPRI, r0
    d96c:	f04f 0003 	mov.w	r0, #3
    d970:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    d972:	782b      	ldrb	r3, [r5, #0]
    d974:	e789      	b.n	d88a <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    d976:	78e2      	ldrb	r2, [r4, #3]
    d978:	490e      	ldr	r1, [pc, #56]	; (d9b4 <ll_rx_get+0x1a4>)
    d97a:	9801      	ldr	r0, [sp, #4]
    d97c:	f7ff fd00 	bl	d380 <tx_cmplt_get>
}
    d980:	b005      	add	sp, #20
    d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    d986:	490c      	ldr	r1, [pc, #48]	; (d9b8 <ll_rx_get+0x1a8>)
    d988:	4648      	mov	r0, r9
    d98a:	f7fc fb7f 	bl	a08c <mem_release>
			return;
    d98e:	e747      	b.n	d820 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
    d990:	4909      	ldr	r1, [pc, #36]	; (d9b8 <ll_rx_get+0x1a8>)
    d992:	4658      	mov	r0, fp
    d994:	f7fc fb7a 	bl	a08c <mem_release>
			return;
    d998:	e742      	b.n	d820 <ll_rx_get+0x10>
			*node_rx = rx;
    d99a:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    d99c:	4610      	mov	r0, r2
			*node_rx = rx;
    d99e:	600b      	str	r3, [r1, #0]
}
    d9a0:	b005      	add	sp, #20
    d9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9a6:	bf00      	nop
    d9a8:	20000510 	.word	0x20000510
    d9ac:	20001ae0 	.word	0x20001ae0
    d9b0:	20001d5c 	.word	0x20001d5c
    d9b4:	20000512 	.word	0x20000512
    d9b8:	20001ae4 	.word	0x20001ae4
    d9bc:	20001b38 	.word	0x20001b38
    d9c0:	200003f4 	.word	0x200003f4
    d9c4:	200003e4 	.word	0x200003e4
    d9c8:	00020554 	.word	0x00020554
    d9cc:	000205c4 	.word	0x000205c4
    d9d0:	000203b4 	.word	0x000203b4

0000d9d4 <ll_rx_dequeue>:
{
    d9d4:	b530      	push	{r4, r5, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    d9d6:	4935      	ldr	r1, [pc, #212]	; (daac <ll_rx_dequeue+0xd8>)
{
    d9d8:	b083      	sub	sp, #12
	struct node_rx_hdr *rx = NULL;
    d9da:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    d9dc:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    d9de:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    d9e0:	aa01      	add	r2, sp, #4
    d9e2:	f7fc fbaf 	bl	a144 <memq_dequeue>
	LL_ASSERT(link);
    d9e6:	4604      	mov	r4, r0
    d9e8:	2800      	cmp	r0, #0
    d9ea:	d050      	beq.n	da8e <ll_rx_dequeue+0xba>
	mem_release(link, &mem_link_rx.free);
    d9ec:	4930      	ldr	r1, [pc, #192]	; (dab0 <ll_rx_dequeue+0xdc>)
    d9ee:	4620      	mov	r0, r4
    d9f0:	f7fc fb4c 	bl	a08c <mem_release>
	switch (rx->type) {
    d9f4:	9a01      	ldr	r2, [sp, #4]
    d9f6:	7913      	ldrb	r3, [r2, #4]
    d9f8:	2b1c      	cmp	r3, #28
    d9fa:	d810      	bhi.n	da1e <ll_rx_dequeue+0x4a>
    d9fc:	e8df f003 	tbb	[pc, r3]
    da00:	1e0f0f1e 	.word	0x1e0f0f1e
    da04:	0f0f1e0f 	.word	0x0f0f1e0f
    da08:	0f0f0f0f 	.word	0x0f0f0f0f
    da0c:	0f0f0f0f 	.word	0x0f0f0f0f
    da10:	0f0f0f0f 	.word	0x0f0f0f0f
    da14:	1e2f0f0f 	.word	0x1e2f0f0f
    da18:	1e1e1e1e 	.word	0x1e1e1e1e
    da1c:	1e          	.byte	0x1e
    da1d:	00          	.byte	0x00
		LL_ASSERT(0);
    da1e:	4a25      	ldr	r2, [pc, #148]	; (dab4 <ll_rx_dequeue+0xe0>)
    da20:	4925      	ldr	r1, [pc, #148]	; (dab8 <ll_rx_dequeue+0xe4>)
    da22:	4826      	ldr	r0, [pc, #152]	; (dabc <ll_rx_dequeue+0xe8>)
    da24:	f240 43c7 	movw	r3, #1223	; 0x4c7
    da28:	f00d fb45 	bl	1b0b6 <printk>
    da2c:	4040      	eors	r0, r0
    da2e:	f380 8811 	msr	BASEPRI, r0
    da32:	f04f 0003 	mov.w	r0, #3
    da36:	df02      	svc	2
}
    da38:	b003      	add	sp, #12
    da3a:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    da3c:	2b00      	cmp	r3, #0
    da3e:	d1fb      	bne.n	da38 <ll_rx_dequeue+0x64>
    da40:	4a1c      	ldr	r2, [pc, #112]	; (dab4 <ll_rx_dequeue+0xe0>)
    da42:	491f      	ldr	r1, [pc, #124]	; (dac0 <ll_rx_dequeue+0xec>)
    da44:	481d      	ldr	r0, [pc, #116]	; (dabc <ll_rx_dequeue+0xe8>)
    da46:	f240 43c3 	movw	r3, #1219	; 0x4c3
    da4a:	f00d fb34 	bl	1b0b6 <printk>
    da4e:	4040      	eors	r0, r0
    da50:	f380 8811 	msr	BASEPRI, r0
    da54:	f04f 0003 	mov.w	r0, #3
    da58:	df02      	svc	2
}
    da5a:	b003      	add	sp, #12
    da5c:	bd30      	pop	{r4, r5, pc}
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
    da5e:	6893      	ldr	r3, [r2, #8]
    da60:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
    da62:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
			scan->lll.conn = NULL;
    da66:	2500      	movs	r5, #0
			scan->is_enabled = 0U;
    da68:	f365 0200 	bfi	r2, r5, #0, #1
			scan->lll.conn = NULL;
    da6c:	621d      	str	r5, [r3, #32]
			scan->is_enabled = 0U;
    da6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			      (ull_scan_is_enabled(0) << 1)) |
    da72:	4628      	mov	r0, r5
    da74:	f001 fa48 	bl	ef08 <ull_scan_is_enabled>
    da78:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
    da7a:	4628      	mov	r0, r5
    da7c:	f001 f832 	bl	eae4 <ull_adv_is_enabled>
			if (!bm) {
    da80:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
    da84:	d1d8      	bne.n	da38 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
    da86:	f005 fad9 	bl	1303c <ull_filter_adv_scan_state_cb>
}
    da8a:	b003      	add	sp, #12
    da8c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(link);
    da8e:	4a09      	ldr	r2, [pc, #36]	; (dab4 <ll_rx_dequeue+0xe0>)
    da90:	490c      	ldr	r1, [pc, #48]	; (dac4 <ll_rx_dequeue+0xf0>)
    da92:	480a      	ldr	r0, [pc, #40]	; (dabc <ll_rx_dequeue+0xe8>)
    da94:	f240 33a1 	movw	r3, #929	; 0x3a1
    da98:	f00d fb0d 	bl	1b0b6 <printk>
    da9c:	4040      	eors	r0, r0
    da9e:	f380 8811 	msr	BASEPRI, r0
    daa2:	f04f 0003 	mov.w	r0, #3
    daa6:	df02      	svc	2
    daa8:	e7a0      	b.n	d9ec <ll_rx_dequeue+0x18>
    daaa:	bf00      	nop
    daac:	20001d5c 	.word	0x20001d5c
    dab0:	20001ae4 	.word	0x20001ae4
    dab4:	00020554 	.word	0x00020554
    dab8:	00020414 	.word	0x00020414
    dabc:	000203b4 	.word	0x000203b4
    dac0:	00020604 	.word	0x00020604
    dac4:	00020858 	.word	0x00020858

0000dac8 <ll_rx_mem_release>:
{
    dac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    dacc:	6804      	ldr	r4, [r0, #0]
{
    dace:	4680      	mov	r8, r0
	while (rx) {
    dad0:	b344      	cbz	r4, db24 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    dad2:	4f59      	ldr	r7, [pc, #356]	; (dc38 <ll_rx_mem_release+0x170>)
    dad4:	f8df 9164 	ldr.w	r9, [pc, #356]	; dc3c <ll_rx_mem_release+0x174>
    dad8:	4e59      	ldr	r6, [pc, #356]	; (dc40 <ll_rx_mem_release+0x178>)
		rx = rx->next;
    dada:	4625      	mov	r5, r4
    dadc:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    dade:	792b      	ldrb	r3, [r5, #4]
    dae0:	2b1c      	cmp	r3, #28
    dae2:	d810      	bhi.n	db06 <ll_rx_mem_release+0x3e>
    dae4:	e8df f003 	tbb	[pc, r3]
    dae8:	380f0f38 	.word	0x380f0f38
    daec:	0f0f380f 	.word	0x0f0f380f
    daf0:	0f0f0f0f 	.word	0x0f0f0f0f
    daf4:	0f0f0f0f 	.word	0x0f0f0f0f
    daf8:	0f0f0f0f 	.word	0x0f0f0f0f
    dafc:	56260f0f 	.word	0x56260f0f
    db00:	38383838 	.word	0x38383838
    db04:	38          	.byte	0x38
    db05:	00          	.byte	0x00
			LL_ASSERT(0);
    db06:	f240 53fa 	movw	r3, #1530	; 0x5fa
    db0a:	463a      	mov	r2, r7
    db0c:	4649      	mov	r1, r9
    db0e:	4630      	mov	r0, r6
    db10:	f00d fad1 	bl	1b0b6 <printk>
    db14:	4040      	eors	r0, r0
    db16:	f380 8811 	msr	BASEPRI, r0
    db1a:	f04f 0003 	mov.w	r0, #3
    db1e:	df02      	svc	2
	while (rx) {
    db20:	2c00      	cmp	r4, #0
    db22:	d1da      	bne.n	dada <ll_rx_mem_release+0x12>
	*node_rx = rx;
    db24:	2300      	movs	r3, #0
    db26:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
    db2a:	20ff      	movs	r0, #255	; 0xff
}
    db2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
    db30:	f7ff bd10 	b.w	d554 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
    db34:	7f2b      	ldrb	r3, [r5, #28]
    db36:	2b02      	cmp	r3, #2
    db38:	d062      	beq.n	dc00 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
    db3a:	b1db      	cbz	r3, db74 <ll_rx_mem_release+0xac>
    db3c:	4941      	ldr	r1, [pc, #260]	; (dc44 <ll_rx_mem_release+0x17c>)
    db3e:	f240 532b 	movw	r3, #1323	; 0x52b
    db42:	463a      	mov	r2, r7
    db44:	4630      	mov	r0, r6
    db46:	f00d fab6 	bl	1b0b6 <printk>
    db4a:	4040      	eors	r0, r0
    db4c:	f380 8811 	msr	BASEPRI, r0
    db50:	f04f 0003 	mov.w	r0, #3
    db54:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    db56:	792b      	ldrb	r3, [r5, #4]
    db58:	b963      	cbnz	r3, db74 <ll_rx_mem_release+0xac>
    db5a:	493b      	ldr	r1, [pc, #236]	; (dc48 <ll_rx_mem_release+0x180>)
    db5c:	f240 537d 	movw	r3, #1405	; 0x57d
    db60:	463a      	mov	r2, r7
    db62:	4630      	mov	r0, r6
    db64:	f00d faa7 	bl	1b0b6 <printk>
    db68:	4040      	eors	r0, r0
    db6a:	f380 8811 	msr	BASEPRI, r0
    db6e:	f04f 0003 	mov.w	r0, #3
    db72:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    db74:	f8df a0d4 	ldr.w	sl, [pc, #212]	; dc4c <ll_rx_mem_release+0x184>
    db78:	f89a 3000 	ldrb.w	r3, [sl]
    db7c:	2b05      	cmp	r3, #5
    db7e:	d82f      	bhi.n	dbe0 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
    db80:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    db82:	4933      	ldr	r1, [pc, #204]	; (dc50 <ll_rx_mem_release+0x188>)
	mem_link_rx.quota_pdu += delta;
    db84:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
    db88:	4628      	mov	r0, r5
    db8a:	f7fc fa7f 	bl	a08c <mem_release>
	while (rx) {
    db8e:	2c00      	cmp	r4, #0
    db90:	d1a3      	bne.n	dada <ll_rx_mem_release+0x12>
    db92:	e7c7      	b.n	db24 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
    db94:	88e8      	ldrh	r0, [r5, #6]
    db96:	2800      	cmp	r0, #0
    db98:	d1c2      	bne.n	db20 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
    db9a:	f001 fe1b 	bl	f7d4 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
    db9e:	6d83      	ldr	r3, [r0, #88]	; 0x58
				conn = ll_conn_get(rx_free->handle);
    dba0:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
    dba2:	b163      	cbz	r3, dbbe <ll_rx_mem_release+0xf6>
    dba4:	492b      	ldr	r1, [pc, #172]	; (dc54 <ll_rx_mem_release+0x18c>)
    dba6:	f240 53ec 	movw	r3, #1516	; 0x5ec
    dbaa:	463a      	mov	r2, r7
    dbac:	4630      	mov	r0, r6
    dbae:	f00d fa82 	bl	1b0b6 <printk>
    dbb2:	4040      	eors	r0, r0
    dbb4:	f380 8811 	msr	BASEPRI, r0
    dbb8:	f04f 0003 	mov.w	r0, #3
    dbbc:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
    dbbe:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    dbc2:	f105 0048 	add.w	r0, r5, #72	; 0x48
    dbc6:	f7fc faa1 	bl	a10c <memq_deinit>
				LL_ASSERT(link);
    dbca:	4682      	mov	sl, r0
    dbcc:	b330      	cbz	r0, dc1c <ll_rx_mem_release+0x154>
				conn->lll.link_tx_free = link;
    dbce:	f8c5 a058 	str.w	sl, [r5, #88]	; 0x58
				ll_conn_release(conn);
    dbd2:	4628      	mov	r0, r5
    dbd4:	f001 fdf0 	bl	f7b8 <ll_conn_release>
	while (rx) {
    dbd8:	2c00      	cmp	r4, #0
    dbda:	f47f af7e 	bne.w	dada <ll_rx_mem_release+0x12>
    dbde:	e7a1      	b.n	db24 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    dbe0:	491d      	ldr	r1, [pc, #116]	; (dc58 <ll_rx_mem_release+0x190>)
    dbe2:	f240 6306 	movw	r3, #1542	; 0x606
    dbe6:	463a      	mov	r2, r7
    dbe8:	4630      	mov	r0, r6
    dbea:	f00d fa64 	bl	1b0b6 <printk>
    dbee:	4040      	eors	r0, r0
    dbf0:	f380 8811 	msr	BASEPRI, r0
    dbf4:	f04f 0003 	mov.w	r0, #3
    dbf8:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    dbfa:	f89a 3000 	ldrb.w	r3, [sl]
    dbfe:	e7bf      	b.n	db80 <ll_rx_mem_release+0xb8>
				ull_central_cleanup(rx_free);
    dc00:	4628      	mov	r0, r5
    dc02:	f004 fac3 	bl	1218c <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
    dc06:	2000      	movs	r0, #0
    dc08:	f000 ff5e 	bl	eac8 <ull_adv_is_enabled_get>
    dc0c:	2800      	cmp	r0, #0
    dc0e:	d187      	bne.n	db20 <ll_rx_mem_release+0x58>
					ull_filter_adv_scan_state_cb(0);
    dc10:	f005 fa14 	bl	1303c <ull_filter_adv_scan_state_cb>
	while (rx) {
    dc14:	2c00      	cmp	r4, #0
    dc16:	f47f af60 	bne.w	dada <ll_rx_mem_release+0x12>
    dc1a:	e783      	b.n	db24 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
    dc1c:	490f      	ldr	r1, [pc, #60]	; (dc5c <ll_rx_mem_release+0x194>)
    dc1e:	f240 53ef 	movw	r3, #1519	; 0x5ef
    dc22:	463a      	mov	r2, r7
    dc24:	4630      	mov	r0, r6
    dc26:	f00d fa46 	bl	1b0b6 <printk>
    dc2a:	4040      	eors	r0, r0
    dc2c:	f380 8811 	msr	BASEPRI, r0
    dc30:	f04f 0003 	mov.w	r0, #3
    dc34:	df02      	svc	2
    dc36:	e7ca      	b.n	dbce <ll_rx_mem_release+0x106>
    dc38:	00020554 	.word	0x00020554
    dc3c:	00020414 	.word	0x00020414
    dc40:	000203b4 	.word	0x000203b4
    dc44:	00020624 	.word	0x00020624
    dc48:	00020630 	.word	0x00020630
    dc4c:	20001ae0 	.word	0x20001ae0
    dc50:	20001b38 	.word	0x20001b38
    dc54:	00020654 	.word	0x00020654
    dc58:	000205c4 	.word	0x000205c4
    dc5c:	00020858 	.word	0x00020858

0000dc60 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    dc60:	4801      	ldr	r0, [pc, #4]	; (dc68 <ll_rx_link_alloc+0x8>)
    dc62:	f7fc b9f9 	b.w	a058 <mem_acquire>
    dc66:	bf00      	nop
    dc68:	20001ae4 	.word	0x20001ae4

0000dc6c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    dc6c:	4901      	ldr	r1, [pc, #4]	; (dc74 <ll_rx_link_release+0x8>)
    dc6e:	f7fc ba0d 	b.w	a08c <mem_release>
    dc72:	bf00      	nop
    dc74:	20001ae4 	.word	0x20001ae4

0000dc78 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dc78:	4b02      	ldr	r3, [pc, #8]	; (dc84 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    dc7a:	4a03      	ldr	r2, [pc, #12]	; (dc88 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    dc7c:	78db      	ldrb	r3, [r3, #3]
    dc7e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    dc80:	f7fc ba4e 	b.w	a120 <memq_enqueue>
    dc84:	20000510 	.word	0x20000510
    dc88:	20001d60 	.word	0x20001d60

0000dc8c <ll_rx_sched>:
	k_sem_give(sem_recv);
    dc8c:	4b01      	ldr	r3, [pc, #4]	; (dc94 <ll_rx_sched+0x8>)
    dc8e:	6818      	ldr	r0, [r3, #0]
    dc90:	f00c ba64 	b.w	1a15c <z_impl_k_sem_give>
    dc94:	20001d74 	.word	0x20001d74

0000dc98 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    dc98:	4b0d      	ldr	r3, [pc, #52]	; (dcd0 <ll_pdu_rx_alloc_peek+0x38>)
    dc9a:	7899      	ldrb	r1, [r3, #2]
    dc9c:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
    dc9e:	4291      	cmp	r1, r2
    dca0:	d80a      	bhi.n	dcb8 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    dca2:	eba2 0c01 	sub.w	ip, r2, r1
    dca6:	fa5f fc8c 	uxtb.w	ip, ip
    dcaa:	4560      	cmp	r0, ip
    dcac:	d802      	bhi.n	dcb4 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    dcae:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    dcb0:	7818      	ldrb	r0, [r3, #0]
    dcb2:	d109      	bne.n	dcc8 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
    dcb4:	2000      	movs	r0, #0
}
    dcb6:	4770      	bx	lr
		return count - first + last;
    dcb8:	f893 c001 	ldrb.w	ip, [r3, #1]
    dcbc:	4462      	add	r2, ip
    dcbe:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    dcc0:	b2d2      	uxtb	r2, r2
    dcc2:	4290      	cmp	r0, r2
    dcc4:	d8f6      	bhi.n	dcb4 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    dcc6:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    dcc8:	fb01 3300 	mla	r3, r1, r0, r3
    dccc:	6858      	ldr	r0, [r3, #4]
    dcce:	4770      	bx	lr
    dcd0:	200003e4 	.word	0x200003e4

0000dcd4 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    dcd4:	4b09      	ldr	r3, [pc, #36]	; (dcfc <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    dcd6:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    dcd8:	78da      	ldrb	r2, [r3, #3]
    dcda:	7818      	ldrb	r0, [r3, #0]
    dcdc:	f893 c001 	ldrb.w	ip, [r3, #1]
    dce0:	428a      	cmp	r2, r1
    dce2:	d009      	beq.n	dcf8 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    dce4:	1c4a      	adds	r2, r1, #1
    dce6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    dce8:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
    dcec:	4594      	cmp	ip, r2
    dcee:	bf08      	it	eq
    dcf0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    dcf2:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    dcf4:	709a      	strb	r2, [r3, #2]

	return mem;
    dcf6:	4770      	bx	lr
		return NULL;
    dcf8:	2000      	movs	r0, #0
}
    dcfa:	4770      	bx	lr
    dcfc:	200003e4 	.word	0x200003e4

0000dd00 <ll_tx_ack_put>:
{
    dd00:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    dd02:	4a15      	ldr	r2, [pc, #84]	; (dd58 <ll_tx_ack_put+0x58>)
    dd04:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
    dd08:	7854      	ldrb	r4, [r2, #1]
    dd0a:	f892 e002 	ldrb.w	lr, [r2, #2]
    dd0e:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
    dd10:	f10c 0301 	add.w	r3, ip, #1
    dd14:	b2db      	uxtb	r3, r3
		last = 0U;
    dd16:	429c      	cmp	r4, r3
    dd18:	bf08      	it	eq
    dd1a:	2300      	moveq	r3, #0
	if (last == first) {
    dd1c:	459e      	cmp	lr, r3
    dd1e:	d00a      	beq.n	dd36 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    dd20:	fb1c fc05 	smulbb	ip, ip, r5
    dd24:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
    dd28:	f82e 000c 	strh.w	r0, [lr, ip]
    dd2c:	44f4      	add	ip, lr
	tx->node = node_tx;
    dd2e:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
    dd32:	70d3      	strb	r3, [r2, #3]
}
    dd34:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
    dd36:	4a09      	ldr	r2, [pc, #36]	; (dd5c <ll_tx_ack_put+0x5c>)
    dd38:	4909      	ldr	r1, [pc, #36]	; (dd60 <ll_tx_ack_put+0x60>)
    dd3a:	480a      	ldr	r0, [pc, #40]	; (dd64 <ll_tx_ack_put+0x64>)
    dd3c:	f240 634e 	movw	r3, #1614	; 0x64e
    dd40:	f00d f9b9 	bl	1b0b6 <printk>
    dd44:	4040      	eors	r0, r0
    dd46:	f380 8811 	msr	BASEPRI, r0
    dd4a:	f04f 0003 	mov.w	r0, #3
    dd4e:	df02      	svc	2
	tx->handle = handle;
    dd50:	2300      	movs	r3, #0
    dd52:	801b      	strh	r3, [r3, #0]
    dd54:	deff      	udf	#255	; 0xff
    dd56:	bf00      	nop
    dd58:	20000510 	.word	0x20000510
    dd5c:	00020554 	.word	0x00020554
    dd60:	0002084c 	.word	0x0002084c
    dd64:	000203b4 	.word	0x000203b4

0000dd68 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    dd68:	f030 0302 	bics.w	r3, r0, #2
{
    dd6c:	b510      	push	{r4, lr}
    dd6e:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    dd70:	d002      	beq.n	dd78 <ull_ticker_status_take+0x10>
    dd72:	680b      	ldr	r3, [r1, #0]
    dd74:	2b02      	cmp	r3, #2
    dd76:	d008      	beq.n	dd8a <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    dd78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dd80:	4809      	ldr	r0, [pc, #36]	; (dda8 <ull_ticker_status_take+0x40>)
    dd82:	f00c fa11 	bl	1a1a8 <z_impl_k_sem_take>
	return *ret_cb;
    dd86:	6820      	ldr	r0, [r4, #0]
}
    dd88:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    dd8a:	4a08      	ldr	r2, [pc, #32]	; (ddac <ull_ticker_status_take+0x44>)
    dd8c:	4908      	ldr	r1, [pc, #32]	; (ddb0 <ull_ticker_status_take+0x48>)
    dd8e:	4809      	ldr	r0, [pc, #36]	; (ddb4 <ull_ticker_status_take+0x4c>)
    dd90:	f240 6382 	movw	r3, #1666	; 0x682
    dd94:	f00d f98f 	bl	1b0b6 <printk>
    dd98:	4040      	eors	r0, r0
    dd9a:	f380 8811 	msr	BASEPRI, r0
    dd9e:	f04f 0003 	mov.w	r0, #3
    dda2:	df02      	svc	2
    dda4:	e7e8      	b.n	dd78 <ull_ticker_status_take+0x10>
    dda6:	bf00      	nop
    dda8:	20001d78 	.word	0x20001d78
    ddac:	00020554 	.word	0x00020554
    ddb0:	00020674 	.word	0x00020674
    ddb4:	000203b4 	.word	0x000203b4

0000ddb8 <ull_disable_mark>:
	if (!*m) {
    ddb8:	4a03      	ldr	r2, [pc, #12]	; (ddc8 <ull_disable_mark+0x10>)
{
    ddba:	4603      	mov	r3, r0
	if (!*m) {
    ddbc:	6810      	ldr	r0, [r2, #0]
    ddbe:	b100      	cbz	r0, ddc2 <ull_disable_mark+0xa>
}
    ddc0:	4770      	bx	lr
		*m = param;
    ddc2:	6013      	str	r3, [r2, #0]
    ddc4:	4618      	mov	r0, r3
}
    ddc6:	4770      	bx	lr
    ddc8:	20001aac 	.word	0x20001aac

0000ddcc <ull_disable_unmark>:
	if (*m && *m == param) {
    ddcc:	4a04      	ldr	r2, [pc, #16]	; (dde0 <ull_disable_unmark+0x14>)
    ddce:	6813      	ldr	r3, [r2, #0]
    ddd0:	b123      	cbz	r3, dddc <ull_disable_unmark+0x10>
    ddd2:	4298      	cmp	r0, r3
		*m = NULL;
    ddd4:	bf06      	itte	eq
    ddd6:	2100      	moveq	r1, #0
    ddd8:	6011      	streq	r1, [r2, #0]
	return NULL;
    ddda:	2300      	movne	r3, #0
}
    dddc:	4618      	mov	r0, r3
    ddde:	4770      	bx	lr
    dde0:	20001aac 	.word	0x20001aac

0000dde4 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    dde4:	4b01      	ldr	r3, [pc, #4]	; (ddec <ull_disable_mark_get+0x8>)
}
    dde6:	6818      	ldr	r0, [r3, #0]
    dde8:	4770      	bx	lr
    ddea:	bf00      	nop
    ddec:	20001aac 	.word	0x20001aac

0000ddf0 <ull_update_mark>:
	if (!*m) {
    ddf0:	4a03      	ldr	r2, [pc, #12]	; (de00 <ull_update_mark+0x10>)
{
    ddf2:	4603      	mov	r3, r0
	if (!*m) {
    ddf4:	6810      	ldr	r0, [r2, #0]
    ddf6:	b100      	cbz	r0, ddfa <ull_update_mark+0xa>
}
    ddf8:	4770      	bx	lr
		*m = param;
    ddfa:	6013      	str	r3, [r2, #0]
    ddfc:	4618      	mov	r0, r3
}
    ddfe:	4770      	bx	lr
    de00:	20001ab0 	.word	0x20001ab0

0000de04 <ull_update_unmark>:
	if (*m && *m == param) {
    de04:	4a04      	ldr	r2, [pc, #16]	; (de18 <ull_update_unmark+0x14>)
    de06:	6813      	ldr	r3, [r2, #0]
    de08:	b123      	cbz	r3, de14 <ull_update_unmark+0x10>
    de0a:	4298      	cmp	r0, r3
		*m = NULL;
    de0c:	bf06      	itte	eq
    de0e:	2100      	moveq	r1, #0
    de10:	6011      	streq	r1, [r2, #0]
	return NULL;
    de12:	2300      	movne	r3, #0
}
    de14:	4618      	mov	r0, r3
    de16:	4770      	bx	lr
    de18:	20001ab0 	.word	0x20001ab0

0000de1c <ull_update_mark_get>:
	return mark_get(mark_update);
    de1c:	4b01      	ldr	r3, [pc, #4]	; (de24 <ull_update_mark_get+0x8>)
}
    de1e:	6818      	ldr	r0, [r3, #0]
    de20:	4770      	bx	lr
    de22:	bf00      	nop
    de24:	20001ab0 	.word	0x20001ab0

0000de28 <ull_disable>:
{
    de28:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    de2a:	6805      	ldr	r5, [r0, #0]
    de2c:	782b      	ldrb	r3, [r5, #0]
{
    de2e:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
    de30:	b353      	cbz	r3, de88 <ull_disable+0x60>
	compiler_barrier();
    de32:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    de34:	2201      	movs	r2, #1
    de36:	2100      	movs	r1, #0
    de38:	4668      	mov	r0, sp
    de3a:	f011 fad7 	bl	1f3ec <z_impl_k_sem_init>
    de3e:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
    de40:	4a13      	ldr	r2, [pc, #76]	; (de90 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    de42:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    de46:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    de48:	b1f3      	cbz	r3, de88 <ull_disable+0x60>
	mfy.param = lll;
    de4a:	4b12      	ldr	r3, [pc, #72]	; (de94 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    de4c:	2200      	movs	r2, #0
    de4e:	4611      	mov	r1, r2
    de50:	2003      	movs	r0, #3
	mfy.param = lll;
    de52:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    de54:	f7fc f9d8 	bl	a208 <mayfly_enqueue>
	LL_ASSERT(!ret);
    de58:	b940      	cbnz	r0, de6c <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
    de5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    de5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    de62:	4668      	mov	r0, sp
    de64:	f00c f9a0 	bl	1a1a8 <z_impl_k_sem_take>
}
    de68:	b007      	add	sp, #28
    de6a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    de6c:	4a0a      	ldr	r2, [pc, #40]	; (de98 <ull_disable+0x70>)
    de6e:	490b      	ldr	r1, [pc, #44]	; (de9c <ull_disable+0x74>)
    de70:	480b      	ldr	r0, [pc, #44]	; (dea0 <ull_disable+0x78>)
    de72:	f240 63ff 	movw	r3, #1791	; 0x6ff
    de76:	f00d f91e 	bl	1b0b6 <printk>
    de7a:	4040      	eors	r0, r0
    de7c:	f380 8811 	msr	BASEPRI, r0
    de80:	f04f 0003 	mov.w	r0, #3
    de84:	df02      	svc	2
    de86:	e7e8      	b.n	de5a <ull_disable+0x32>
		return -EALREADY;
    de88:	f06f 0077 	mvn.w	r0, #119	; 0x77
    de8c:	e7ec      	b.n	de68 <ull_disable+0x40>
    de8e:	bf00      	nop
    de90:	0000d37d 	.word	0x0000d37d
    de94:	20000574 	.word	0x20000574
    de98:	00020554 	.word	0x00020554
    de9c:	0002066c 	.word	0x0002066c
    dea0:	000203b4 	.word	0x000203b4

0000dea4 <ull_ticker_stop_with_mark>:
{
    dea4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    dea6:	4e20      	ldr	r6, [pc, #128]	; (df28 <ull_ticker_stop_with_mark+0x84>)
    dea8:	6833      	ldr	r3, [r6, #0]
{
    deaa:	b085      	sub	sp, #20
    deac:	460c      	mov	r4, r1
    deae:	4617      	mov	r7, r2
	if (!*m) {
    deb0:	b353      	cbz	r3, df08 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
    deb2:	4299      	cmp	r1, r3
    deb4:	d113      	bne.n	dede <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    deb6:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    deb8:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    deba:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    debc:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    debe:	9500      	str	r5, [sp, #0]
    dec0:	4b1a      	ldr	r3, [pc, #104]	; (df2c <ull_ticker_stop_with_mark+0x88>)
    dec2:	2103      	movs	r1, #3
    dec4:	2000      	movs	r0, #0
    dec6:	f7fd fbf5 	bl	b6b4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    deca:	4629      	mov	r1, r5
    decc:	f7ff ff4c 	bl	dd68 <ull_ticker_status_take>
	if (ret) {
    ded0:	4605      	mov	r5, r0
    ded2:	b140      	cbz	r0, dee6 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
    ded4:	6833      	ldr	r3, [r6, #0]
    ded6:	b10b      	cbz	r3, dedc <ull_ticker_stop_with_mark+0x38>
    ded8:	429c      	cmp	r4, r3
    deda:	d017      	beq.n	df0c <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
    dedc:	b304      	cbz	r4, df20 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
    dede:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    dee2:	b005      	add	sp, #20
    dee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
    dee6:	4638      	mov	r0, r7
    dee8:	f7ff ff9e 	bl	de28 <ull_disable>
	if (*m && *m == param) {
    deec:	6833      	ldr	r3, [r6, #0]
    deee:	b10b      	cbz	r3, def4 <ull_ticker_stop_with_mark+0x50>
    def0:	429c      	cmp	r4, r3
    def2:	d011      	beq.n	df18 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
    def4:	2c00      	cmp	r4, #0
    def6:	d1f2      	bne.n	dede <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
    def8:	2800      	cmp	r0, #0
    defa:	d0f2      	beq.n	dee2 <ull_ticker_stop_with_mark+0x3e>
	return 0;
    defc:	f110 0f78 	cmn.w	r0, #120	; 0x78
    df00:	bf08      	it	eq
    df02:	2000      	moveq	r0, #0
}
    df04:	b005      	add	sp, #20
    df06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    df08:	6031      	str	r1, [r6, #0]
	if (mark != param) {
    df0a:	e7d4      	b.n	deb6 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    df0c:	2300      	movs	r3, #0
		return -EALREADY;
    df0e:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    df12:	6033      	str	r3, [r6, #0]
}
    df14:	b005      	add	sp, #20
    df16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    df18:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
    df1a:	2800      	cmp	r0, #0
    df1c:	d0e1      	beq.n	dee2 <ull_ticker_stop_with_mark+0x3e>
    df1e:	e7ed      	b.n	defc <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
    df20:	f06f 0077 	mvn.w	r0, #119	; 0x77
    df24:	e7dd      	b.n	dee2 <ull_ticker_stop_with_mark+0x3e>
    df26:	bf00      	nop
    df28:	20001aac 	.word	0x20001aac
    df2c:	0000d371 	.word	0x0000d371

0000df30 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    df30:	4b0d      	ldr	r3, [pc, #52]	; (df68 <ull_pdu_rx_alloc_peek+0x38>)
    df32:	7899      	ldrb	r1, [r3, #2]
    df34:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
    df36:	4291      	cmp	r1, r2
    df38:	d80a      	bhi.n	df50 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    df3a:	eba2 0c01 	sub.w	ip, r2, r1
    df3e:	fa5f fc8c 	uxtb.w	ip, ip
    df42:	4560      	cmp	r0, ip
    df44:	d802      	bhi.n	df4c <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    df46:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    df48:	7818      	ldrb	r0, [r3, #0]
    df4a:	d109      	bne.n	df60 <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
    df4c:	2000      	movs	r0, #0
}
    df4e:	4770      	bx	lr
		return count - first + last;
    df50:	f893 c001 	ldrb.w	ip, [r3, #1]
    df54:	4462      	add	r2, ip
    df56:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    df58:	b2d2      	uxtb	r2, r2
    df5a:	4290      	cmp	r0, r2
    df5c:	d8f6      	bhi.n	df4c <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    df5e:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    df60:	fb01 3300 	mla	r3, r1, r0, r3
    df64:	6858      	ldr	r0, [r3, #4]
    df66:	4770      	bx	lr
    df68:	200003f4 	.word	0x200003f4

0000df6c <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    df6c:	4b09      	ldr	r3, [pc, #36]	; (df94 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    df6e:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    df70:	78da      	ldrb	r2, [r3, #3]
    df72:	7818      	ldrb	r0, [r3, #0]
    df74:	f893 c001 	ldrb.w	ip, [r3, #1]
    df78:	428a      	cmp	r2, r1
    df7a:	d009      	beq.n	df90 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    df7c:	1c4a      	adds	r2, r1, #1
    df7e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    df80:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    df84:	4594      	cmp	ip, r2
    df86:	bf08      	it	eq
    df88:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    df8a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    df8c:	709a      	strb	r2, [r3, #2]
	return mem;
    df8e:	4770      	bx	lr
		return NULL;
    df90:	2000      	movs	r0, #0
}
    df92:	4770      	bx	lr
    df94:	200003f4 	.word	0x200003f4

0000df98 <ull_rx_put>:
{
    df98:	b538      	push	{r3, r4, r5, lr}
    df9a:	460c      	mov	r4, r1
    df9c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    df9e:	f003 fd27 	bl	119f0 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    dfa2:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    dfa4:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    dfa6:	4a03      	ldr	r2, [pc, #12]	; (dfb4 <ull_rx_put+0x1c>)
    dfa8:	4628      	mov	r0, r5
}
    dfaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    dfae:	f7fc b8b7 	b.w	a120 <memq_enqueue>
    dfb2:	bf00      	nop
    dfb4:	20001d70 	.word	0x20001d70

0000dfb8 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    dfb8:	2201      	movs	r2, #1
    dfba:	4b02      	ldr	r3, [pc, #8]	; (dfc4 <ull_rx_sched+0xc>)
    dfbc:	4611      	mov	r1, r2
    dfbe:	2000      	movs	r0, #0
    dfc0:	f7fc b922 	b.w	a208 <mayfly_enqueue>
    dfc4:	20000564 	.word	0x20000564

0000dfc8 <ull_prepare_enqueue>:
{
    dfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    dfcc:	4e15      	ldr	r6, [pc, #84]	; (e024 <ull_prepare_enqueue+0x5c>)
{
    dfce:	f89d a020 	ldrb.w	sl, [sp, #32]
    dfd2:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    dfd4:	78f3      	ldrb	r3, [r6, #3]
{
    dfd6:	460f      	mov	r7, r1
	last = last + 1;
    dfd8:	1c5d      	adds	r5, r3, #1
    dfda:	4611      	mov	r1, r2
	if (last == count) {
    dfdc:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
    dfde:	b2ed      	uxtb	r5, r5
		last = 0U;
    dfe0:	42aa      	cmp	r2, r5
    dfe2:	bf08      	it	eq
    dfe4:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    dfe6:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
    dfe8:	42aa      	cmp	r2, r5
{
    dfea:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    dfec:	7830      	ldrb	r0, [r6, #0]
    dfee:	d015      	beq.n	e01c <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    dff0:	1d34      	adds	r4, r6, #4
    dff2:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    dff6:	2210      	movs	r2, #16
    dff8:	4620      	mov	r0, r4
    dffa:	f00d fe96 	bl	1bd2a <memcpy>
	e->is_resume = is_resume;
    dffe:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    e000:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    e002:	f00a 0a01 	and.w	sl, sl, #1
    e006:	f023 0303 	bic.w	r3, r3, #3
    e00a:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    e00e:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    e012:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    e014:	70f5      	strb	r5, [r6, #3]
}
    e016:	4620      	mov	r0, r4
    e018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    e01c:	2400      	movs	r4, #0
}
    e01e:	4620      	mov	r0, r4
    e020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e024:	2000040c 	.word	0x2000040c

0000e028 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    e028:	4b05      	ldr	r3, [pc, #20]	; (e040 <ull_prepare_dequeue_get+0x18>)
    e02a:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
    e02c:	78da      	ldrb	r2, [r3, #3]
    e02e:	7819      	ldrb	r1, [r3, #0]
    e030:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
    e032:	bf1a      	itte	ne
    e034:	3304      	addne	r3, #4
    e036:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
    e03a:	2000      	moveq	r0, #0
}
    e03c:	4770      	bx	lr
    e03e:	bf00      	nop
    e040:	2000040c 	.word	0x2000040c

0000e044 <ull_prepare_dequeue_iter>:
{
    e044:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    e046:	4b0d      	ldr	r3, [pc, #52]	; (e07c <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    e048:	7802      	ldrb	r2, [r0, #0]
    e04a:	7859      	ldrb	r1, [r3, #1]
    e04c:	f893 c003 	ldrb.w	ip, [r3, #3]
    e050:	f893 e000 	ldrb.w	lr, [r3]
    e054:	4291      	cmp	r1, r2
    e056:	bf9c      	itt	ls
    e058:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    e05a:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    e05c:	4594      	cmp	ip, r2
    e05e:	d00a      	beq.n	e076 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    e060:	1c53      	adds	r3, r2, #1
    e062:	b2db      	uxtb	r3, r3
		i = 0U;
    e064:	4299      	cmp	r1, r3
    e066:	bf08      	it	eq
    e068:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    e06a:	4905      	ldr	r1, [pc, #20]	; (e080 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    e06c:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    e06e:	fb02 100e 	mla	r0, r2, lr, r1
}
    e072:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    e076:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    e078:	e7fb      	b.n	e072 <ull_prepare_dequeue_iter+0x2e>
    e07a:	bf00      	nop
    e07c:	2000040c 	.word	0x2000040c
    e080:	20000410 	.word	0x20000410

0000e084 <ull_prepare_dequeue>:
{
    e084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    e088:	4c23      	ldr	r4, [pc, #140]	; (e118 <ull_prepare_dequeue+0x94>)
    e08a:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
    e08c:	78e1      	ldrb	r1, [r4, #3]
    e08e:	7823      	ldrb	r3, [r4, #0]
    e090:	4291      	cmp	r1, r2
    e092:	d027      	beq.n	e0e4 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    e094:	1d27      	adds	r7, r4, #4
			mfy.param = next;
    e096:	f8df 9084 	ldr.w	r9, [pc, #132]	; e11c <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
    e09a:	f8df b084 	ldr.w	fp, [pc, #132]	; e120 <ull_prepare_dequeue+0x9c>
    e09e:	f8df a084 	ldr.w	sl, [pc, #132]	; e124 <ull_prepare_dequeue+0xa0>
    e0a2:	4680      	mov	r8, r0
    e0a4:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
    e0a8:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
    e0aa:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
    e0ac:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    e0b0:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
    e0b4:	d518      	bpl.n	e0e8 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
    e0b6:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
    e0b8:	78e1      	ldrb	r1, [r4, #3]
    e0ba:	7820      	ldrb	r0, [r4, #0]
    e0bc:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
    e0c0:	1c53      	adds	r3, r2, #1
	if (_first == last) {
    e0c2:	4291      	cmp	r1, r2
	_first += 1U;
    e0c4:	b2db      	uxtb	r3, r3
	if (_first == last) {
    e0c6:	d00d      	beq.n	e0e4 <ull_prepare_dequeue+0x60>
		_first = 0U;
    e0c8:	459c      	cmp	ip, r3
    e0ca:	bf08      	it	eq
    e0cc:	2300      	moveq	r3, #0
	if (first == last) {
    e0ce:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    e0d0:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    e0d2:	d007      	beq.n	e0e4 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    e0d4:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    e0d8:	2d00      	cmp	r5, #0
    e0da:	d1e5      	bne.n	e0a8 <ull_prepare_dequeue+0x24>
    e0dc:	b116      	cbz	r6, e0e4 <ull_prepare_dequeue+0x60>
    e0de:	7f03      	ldrb	r3, [r0, #28]
    e0e0:	07db      	lsls	r3, r3, #31
    e0e2:	d5e1      	bpl.n	e0a8 <ull_prepare_dequeue+0x24>
}
    e0e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    e0e8:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    e0ec:	4b0b      	ldr	r3, [pc, #44]	; (e11c <ull_prepare_dequeue+0x98>)
    e0ee:	462a      	mov	r2, r5
    e0f0:	4629      	mov	r1, r5
    e0f2:	4640      	mov	r0, r8
    e0f4:	f7fc f888 	bl	a208 <mayfly_enqueue>
			LL_ASSERT(!ret);
    e0f8:	2800      	cmp	r0, #0
    e0fa:	d0dc      	beq.n	e0b6 <ull_prepare_dequeue+0x32>
    e0fc:	480a      	ldr	r0, [pc, #40]	; (e128 <ull_prepare_dequeue+0xa4>)
    e0fe:	f240 7376 	movw	r3, #1910	; 0x776
    e102:	465a      	mov	r2, fp
    e104:	4651      	mov	r1, sl
    e106:	f00c ffd6 	bl	1b0b6 <printk>
    e10a:	4040      	eors	r0, r0
    e10c:	f380 8811 	msr	BASEPRI, r0
    e110:	f04f 0003 	mov.w	r0, #3
    e114:	df02      	svc	2
    e116:	e7ce      	b.n	e0b6 <ull_prepare_dequeue+0x32>
    e118:	2000040c 	.word	0x2000040c
    e11c:	20000534 	.word	0x20000534
    e120:	00020554 	.word	0x00020554
    e124:	0002066c 	.word	0x0002066c
    e128:	000203b4 	.word	0x000203b4

0000e12c <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    e12c:	4b06      	ldr	r3, [pc, #24]	; (e148 <ull_event_done_extra_get+0x1c>)
    e12e:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    e130:	78d9      	ldrb	r1, [r3, #3]
    e132:	7818      	ldrb	r0, [r3, #0]
    e134:	4291      	cmp	r1, r2
    e136:	d005      	beq.n	e144 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    e138:	fb02 3300 	mla	r3, r2, r0, r3
    e13c:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    e13e:	b110      	cbz	r0, e146 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    e140:	3020      	adds	r0, #32
    e142:	4770      	bx	lr
		return NULL;
    e144:	2000      	movs	r0, #0
}
    e146:	4770      	bx	lr
    e148:	200003cc 	.word	0x200003cc

0000e14c <ull_event_done>:
{
    e14c:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    e14e:	4a13      	ldr	r2, [pc, #76]	; (e19c <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    e150:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    e152:	78d4      	ldrb	r4, [r2, #3]
    e154:	7811      	ldrb	r1, [r2, #0]
    e156:	429c      	cmp	r4, r3
{
    e158:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
    e15a:	7850      	ldrb	r0, [r2, #1]
    e15c:	d01b      	beq.n	e196 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    e15e:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    e162:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    e164:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    e166:	b2db      	uxtb	r3, r3
		_first = 0U;
    e168:	4298      	cmp	r0, r3
    e16a:	bf08      	it	eq
    e16c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    e16e:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    e170:	b17c      	cbz	r4, e192 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    e172:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    e174:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    e176:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    e178:	4a09      	ldr	r2, [pc, #36]	; (e1a0 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    e17a:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
    e17c:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
    e17e:	6025      	str	r5, [r4, #0]
	evdone->param = param;
    e180:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
    e182:	f7fb ffcd 	bl	a120 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    e186:	2201      	movs	r2, #1
    e188:	4b06      	ldr	r3, [pc, #24]	; (e1a4 <ull_event_done+0x58>)
    e18a:	4611      	mov	r1, r2
    e18c:	4628      	mov	r0, r5
    e18e:	f7fc f83b 	bl	a208 <mayfly_enqueue>
}
    e192:	4620      	mov	r0, r4
    e194:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    e196:	2400      	movs	r4, #0
    e198:	e7fb      	b.n	e192 <ull_event_done+0x46>
    e19a:	bf00      	nop
    e19c:	200003cc 	.word	0x200003cc
    e1a0:	20001d68 	.word	0x20001d68
    e1a4:	20000554 	.word	0x20000554

0000e1a8 <ull_rxfifo_alloc>:
{
    e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1ac:	b083      	sub	sp, #12
    e1ae:	461d      	mov	r5, r3
    e1b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e1b2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    e1b6:	e9cd 0400 	strd	r0, r4, [sp]
    e1ba:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    e1be:	b33b      	cbz	r3, e210 <ull_rxfifo_alloc+0x68>
    e1c0:	1e5c      	subs	r4, r3, #1
    e1c2:	f895 b000 	ldrb.w	fp, [r5]
    e1c6:	4688      	mov	r8, r1
    e1c8:	4617      	mov	r7, r2
    e1ca:	b2e4      	uxtb	r4, r4
	last = last + 1;
    e1cc:	f10b 0301 	add.w	r3, fp, #1
    e1d0:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
    e1d4:	45d8      	cmp	r8, fp
    e1d6:	bf08      	it	eq
    e1d8:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
    e1dc:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
    e1de:	4648      	mov	r0, r9
    e1e0:	d016      	beq.n	e210 <ull_rxfifo_alloc+0x68>
    e1e2:	f7fb ff39 	bl	a058 <mem_acquire>
    e1e6:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
    e1e8:	4650      	mov	r0, sl
		if (!link) {
    e1ea:	b18e      	cbz	r6, e210 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
    e1ec:	f7fb ff34 	bl	a058 <mem_acquire>
		if (!rx) {
    e1f0:	b188      	cbz	r0, e216 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
    e1f2:	2300      	movs	r3, #0
    e1f4:	6073      	str	r3, [r6, #4]
		rx->link = link;
    e1f6:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e1f8:	782a      	ldrb	r2, [r5, #0]
    e1fa:	9b00      	ldr	r3, [sp, #0]
    e1fc:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e200:	9b01      	ldr	r3, [sp, #4]
    e202:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    e204:	3c01      	subs	r4, #1
    e206:	b2e4      	uxtb	r4, r4
    e208:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
    e20a:	f885 b000 	strb.w	fp, [r5]
    e20e:	d1dd      	bne.n	e1cc <ull_rxfifo_alloc+0x24>
}
    e210:	b003      	add	sp, #12
    e212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
    e216:	4649      	mov	r1, r9
    e218:	4630      	mov	r0, r6
}
    e21a:	b003      	add	sp, #12
    e21c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
    e220:	f7fb bf34 	b.w	a08c <mem_release>

0000e224 <init_reset>:
{
    e224:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
    e226:	4c3f      	ldr	r4, [pc, #252]	; (e324 <init_reset+0x100>)
    e228:	4d3f      	ldr	r5, [pc, #252]	; (e328 <init_reset+0x104>)
    e22a:	79a2      	ldrb	r2, [r4, #6]
    e22c:	88a1      	ldrh	r1, [r4, #4]
    e22e:	4e3f      	ldr	r6, [pc, #252]	; (e32c <init_reset+0x108>)
    e230:	2000      	movs	r0, #0
{
    e232:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
    e234:	4623      	mov	r3, r4
    e236:	8068      	strh	r0, [r5, #2]
    e238:	f104 0008 	add.w	r0, r4, #8
    e23c:	f7fb fedc 	bl	9ff8 <mem_init>
    e240:	79e3      	ldrb	r3, [r4, #7]
    e242:	79a2      	ldrb	r2, [r4, #6]
    e244:	1d30      	adds	r0, r6, #4
    e246:	441a      	add	r2, r3
    e248:	2108      	movs	r1, #8
    e24a:	4633      	mov	r3, r6
    e24c:	f7fb fed4 	bl	9ff8 <mem_init>
    e250:	9602      	str	r6, [sp, #8]
    e252:	462e      	mov	r6, r5
    e254:	79a3      	ldrb	r3, [r4, #6]
    e256:	f816 0b04 	ldrb.w	r0, [r6], #4
    e25a:	78aa      	ldrb	r2, [r5, #2]
    e25c:	7869      	ldrb	r1, [r5, #1]
    e25e:	9303      	str	r3, [sp, #12]
    e260:	e9cd 6400 	strd	r6, r4, [sp]
    e264:	1ceb      	adds	r3, r5, #3
    e266:	f7ff ff9f 	bl	e1a8 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    e26a:	4b31      	ldr	r3, [pc, #196]	; (e330 <init_reset+0x10c>)
    e26c:	2208      	movs	r2, #8
    e26e:	1d18      	adds	r0, r3, #4
    e270:	2144      	movs	r1, #68	; 0x44
    e272:	f7fb fec1 	bl	9ff8 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    e276:	4b2f      	ldr	r3, [pc, #188]	; (e334 <init_reset+0x110>)
    e278:	220a      	movs	r2, #10
    e27a:	1d18      	adds	r0, r3, #4
    e27c:	2108      	movs	r1, #8
    e27e:	f7fb febb 	bl	9ff8 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    e282:	482c      	ldr	r0, [pc, #176]	; (e334 <init_reset+0x110>)
    e284:	f7fb fee8 	bl	a058 <mem_acquire>
	LL_ASSERT(link);
    e288:	4604      	mov	r4, r0
    e28a:	b308      	cbz	r0, e2d0 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
    e28c:	4a2a      	ldr	r2, [pc, #168]	; (e338 <init_reset+0x114>)
    e28e:	4620      	mov	r0, r4
    e290:	1f11      	subs	r1, r2, #4
    e292:	f7fb ff37 	bl	a104 <memq_init>
	link = mem_acquire(&mem_link_done.free);
    e296:	4825      	ldr	r0, [pc, #148]	; (e32c <init_reset+0x108>)
    e298:	f7fb fede 	bl	a058 <mem_acquire>
	LL_ASSERT(link);
    e29c:	4604      	mov	r4, r0
    e29e:	b328      	cbz	r0, e2ec <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
    e2a0:	4a26      	ldr	r2, [pc, #152]	; (e33c <init_reset+0x118>)
    e2a2:	4620      	mov	r0, r4
    e2a4:	1f11      	subs	r1, r2, #4
    e2a6:	f7fb ff2d 	bl	a104 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    e2aa:	4822      	ldr	r0, [pc, #136]	; (e334 <init_reset+0x110>)
    e2ac:	f7fb fed4 	bl	a058 <mem_acquire>
	LL_ASSERT(link);
    e2b0:	4604      	mov	r4, r0
    e2b2:	b348      	cbz	r0, e308 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
    e2b4:	4a22      	ldr	r2, [pc, #136]	; (e340 <init_reset+0x11c>)
    e2b6:	4620      	mov	r0, r4
    e2b8:	1f11      	subs	r1, r2, #4
    e2ba:	f7fb ff23 	bl	a104 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    e2be:	4b21      	ldr	r3, [pc, #132]	; (e344 <init_reset+0x120>)
    e2c0:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
    e2c2:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    e2c4:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
    e2c6:	f7ff f945 	bl	d554 <rx_alloc>
}
    e2ca:	2000      	movs	r0, #0
    e2cc:	b004      	add	sp, #16
    e2ce:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    e2d0:	4a1d      	ldr	r2, [pc, #116]	; (e348 <init_reset+0x124>)
    e2d2:	491e      	ldr	r1, [pc, #120]	; (e34c <init_reset+0x128>)
    e2d4:	481e      	ldr	r0, [pc, #120]	; (e350 <init_reset+0x12c>)
    e2d6:	f640 0302 	movw	r3, #2050	; 0x802
    e2da:	f00c feec 	bl	1b0b6 <printk>
    e2de:	4040      	eors	r0, r0
    e2e0:	f380 8811 	msr	BASEPRI, r0
    e2e4:	f04f 0003 	mov.w	r0, #3
    e2e8:	df02      	svc	2
    e2ea:	e7cf      	b.n	e28c <init_reset+0x68>
	LL_ASSERT(link);
    e2ec:	4a16      	ldr	r2, [pc, #88]	; (e348 <init_reset+0x124>)
    e2ee:	4917      	ldr	r1, [pc, #92]	; (e34c <init_reset+0x128>)
    e2f0:	4817      	ldr	r0, [pc, #92]	; (e350 <init_reset+0x12c>)
    e2f2:	f640 030a 	movw	r3, #2058	; 0x80a
    e2f6:	f00c fede 	bl	1b0b6 <printk>
    e2fa:	4040      	eors	r0, r0
    e2fc:	f380 8811 	msr	BASEPRI, r0
    e300:	f04f 0003 	mov.w	r0, #3
    e304:	df02      	svc	2
    e306:	e7cb      	b.n	e2a0 <init_reset+0x7c>
	LL_ASSERT(link);
    e308:	4a0f      	ldr	r2, [pc, #60]	; (e348 <init_reset+0x124>)
    e30a:	4910      	ldr	r1, [pc, #64]	; (e34c <init_reset+0x128>)
    e30c:	4810      	ldr	r0, [pc, #64]	; (e350 <init_reset+0x12c>)
    e30e:	f640 0312 	movw	r3, #2066	; 0x812
    e312:	f00c fed0 	bl	1b0b6 <printk>
    e316:	4040      	eors	r0, r0
    e318:	f380 8811 	msr	BASEPRI, r0
    e31c:	f04f 0003 	mov.w	r0, #3
    e320:	df02      	svc	2
    e322:	e7c7      	b.n	e2b4 <init_reset+0x90>
    e324:	20000324 	.word	0x20000324
    e328:	200003cc 	.word	0x200003cc
    e32c:	20001ab4 	.word	0x20001ab4
    e330:	20001b38 	.word	0x20001b38
    e334:	20001ae4 	.word	0x20001ae4
    e338:	20001d70 	.word	0x20001d70
    e33c:	20001d68 	.word	0x20001d68
    e340:	20001d60 	.word	0x20001d60
    e344:	20001ae0 	.word	0x20001ae0
    e348:	00020554 	.word	0x00020554
    e34c:	00020858 	.word	0x00020858
    e350:	000203b4 	.word	0x000203b4

0000e354 <ll_init>:
{
    e354:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
    e356:	4b30      	ldr	r3, [pc, #192]	; (e418 <ll_init+0xc4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e358:	4d30      	ldr	r5, [pc, #192]	; (e41c <ll_init+0xc8>)
	sem_recv = sem_rx;
    e35a:	6018      	str	r0, [r3, #0]
{
    e35c:	b087      	sub	sp, #28
	cntr_init();
    e35e:	f007 fd81 	bl	15e64 <cntr_init>
	mayfly_init();
    e362:	f7fb feff 	bl	a164 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e366:	4a2e      	ldr	r2, [pc, #184]	; (e420 <ll_init+0xcc>)
    e368:	4c2e      	ldr	r4, [pc, #184]	; (e424 <ll_init+0xd0>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e36a:	492f      	ldr	r1, [pc, #188]	; (e428 <ll_init+0xd4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e36c:	e9cd 2504 	strd	r2, r5, [sp, #16]
    e370:	4a2e      	ldr	r2, [pc, #184]	; (e42c <ll_init+0xd8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e372:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e374:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e378:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e37a:	240c      	movs	r4, #12
    e37c:	e9cd 1400 	strd	r1, r4, [sp]
    e380:	4a2b      	ldr	r2, [pc, #172]	; (e430 <ll_init+0xdc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e382:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    e384:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e386:	700b      	strb	r3, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    e388:	720b      	strb	r3, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e38a:	2000      	movs	r0, #0
    e38c:	2106      	movs	r1, #6
    e38e:	f7fd f855 	bl	b43c <ticker_init>
	LL_ASSERT(!err);
    e392:	2800      	cmp	r0, #0
    e394:	d132      	bne.n	e3fc <ll_init+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e396:	2201      	movs	r2, #1
    e398:	2100      	movs	r1, #0
    e39a:	4826      	ldr	r0, [pc, #152]	; (e434 <ll_init+0xe0>)
    e39c:	f011 f826 	bl	1f3ec <z_impl_k_sem_init>
	err = lll_init();
    e3a0:	f005 fcfa 	bl	13d98 <lll_init>
	if (err) {
    e3a4:	4604      	mov	r4, r0
    e3a6:	b110      	cbz	r0, e3ae <ll_init+0x5a>
}
    e3a8:	4620      	mov	r0, r4
    e3aa:	b007      	add	sp, #28
    e3ac:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
    e3ae:	f7ff ff39 	bl	e224 <init_reset>
	if (err) {
    e3b2:	4604      	mov	r4, r0
    e3b4:	2800      	cmp	r0, #0
    e3b6:	d1f7      	bne.n	e3a8 <ll_init+0x54>
	err = lll_adv_init();
    e3b8:	f006 f914 	bl	145e4 <lll_adv_init>
	if (err) {
    e3bc:	4604      	mov	r4, r0
    e3be:	2800      	cmp	r0, #0
    e3c0:	d1f2      	bne.n	e3a8 <ll_init+0x54>
	err = ull_adv_init();
    e3c2:	f000 fb45 	bl	ea50 <ull_adv_init>
	if (err) {
    e3c6:	4604      	mov	r4, r0
    e3c8:	2800      	cmp	r0, #0
    e3ca:	d1ed      	bne.n	e3a8 <ll_init+0x54>
	err = lll_scan_init();
    e3cc:	f006 ff82 	bl	152d4 <lll_scan_init>
	if (err) {
    e3d0:	4604      	mov	r4, r0
    e3d2:	2800      	cmp	r0, #0
    e3d4:	d1e8      	bne.n	e3a8 <ll_init+0x54>
	err = ull_scan_init();
    e3d6:	f000 fcc5 	bl	ed64 <ull_scan_init>
	if (err) {
    e3da:	4604      	mov	r4, r0
    e3dc:	2800      	cmp	r0, #0
    e3de:	d1e3      	bne.n	e3a8 <ll_init+0x54>
	err = lll_conn_init();
    e3e0:	f007 f888 	bl	154f4 <lll_conn_init>
	if (err) {
    e3e4:	4604      	mov	r4, r0
    e3e6:	2800      	cmp	r0, #0
    e3e8:	d1de      	bne.n	e3a8 <ll_init+0x54>
	err = ull_conn_init();
    e3ea:	f001 fca1 	bl	fd30 <ull_conn_init>
	if (err) {
    e3ee:	4604      	mov	r4, r0
    e3f0:	2800      	cmp	r0, #0
    e3f2:	d1d9      	bne.n	e3a8 <ll_init+0x54>
		ull_filter_reset(true);
    e3f4:	2001      	movs	r0, #1
    e3f6:	f004 fda1 	bl	12f3c <ull_filter_reset>
	return  0;
    e3fa:	e7d5      	b.n	e3a8 <ll_init+0x54>
	LL_ASSERT(!err);
    e3fc:	4a0e      	ldr	r2, [pc, #56]	; (e438 <ll_init+0xe4>)
    e3fe:	490f      	ldr	r1, [pc, #60]	; (e43c <ll_init+0xe8>)
    e400:	480f      	ldr	r0, [pc, #60]	; (e440 <ll_init+0xec>)
    e402:	f240 230d 	movw	r3, #525	; 0x20d
    e406:	f00c fe56 	bl	1b0b6 <printk>
    e40a:	4040      	eors	r0, r0
    e40c:	f380 8811 	msr	BASEPRI, r0
    e410:	f04f 0003 	mov.w	r0, #3
    e414:	df02      	svc	2
    e416:	e7be      	b.n	e396 <ll_init+0x42>
    e418:	20001d74 	.word	0x20001d74
    e41c:	00016b61 	.word	0x00016b61
    e420:	00016a11 	.word	0x00016a11
    e424:	000169ad 	.word	0x000169ad
    e428:	20002120 	.word	0x20002120
    e42c:	20001eb0 	.word	0x20001eb0
    e430:	20001d90 	.word	0x20001d90
    e434:	20001d78 	.word	0x20001d78
    e438:	00020554 	.word	0x00020554
    e43c:	00020590 	.word	0x00020590
    e440:	000203b4 	.word	0x000203b4

0000e444 <ll_reset>:
{
    e444:	b510      	push	{r4, lr}
    e446:	b086      	sub	sp, #24
	err = ull_adv_reset();
    e448:	f000 fb12 	bl	ea70 <ull_adv_reset>
	LL_ASSERT(!err);
    e44c:	2800      	cmp	r0, #0
    e44e:	d133      	bne.n	e4b8 <ll_reset+0x74>
	err = ull_scan_reset();
    e450:	f000 fd08 	bl	ee64 <ull_scan_reset>
	LL_ASSERT(!err);
    e454:	2800      	cmp	r0, #0
    e456:	d140      	bne.n	e4da <ll_reset+0x96>
	err = ull_conn_reset();
    e458:	f001 fc6c 	bl	fd34 <ull_conn_reset>
	LL_ASSERT(!err);
    e45c:	2800      	cmp	r0, #0
    e45e:	d14d      	bne.n	e4fc <ll_reset+0xb8>
	MFIFO_INIT(tx_ack);
    e460:	4b43      	ldr	r3, [pc, #268]	; (e570 <ll_reset+0x12c>)
    e462:	2400      	movs	r4, #0
    e464:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    e466:	4620      	mov	r0, r4
    e468:	f004 fd68 	bl	12f3c <ull_filter_reset>
	MFIFO_INIT(prep);
    e46c:	4941      	ldr	r1, [pc, #260]	; (e574 <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
    e46e:	4a42      	ldr	r2, [pc, #264]	; (e578 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
    e470:	4b42      	ldr	r3, [pc, #264]	; (e57c <ll_reset+0x138>)
	MFIFO_INIT(prep);
    e472:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
    e474:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    e476:	805c      	strh	r4, [r3, #2]
    e478:	2201      	movs	r2, #1
    e47a:	4621      	mov	r1, r4
    e47c:	4668      	mov	r0, sp
    e47e:	f010 ffb5 	bl	1f3ec <z_impl_k_sem_init>
		mfy.param = &sem;
    e482:	4b3f      	ldr	r3, [pc, #252]	; (e580 <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    e484:	4622      	mov	r2, r4
    e486:	4621      	mov	r1, r4
    e488:	2003      	movs	r0, #3
		mfy.param = &sem;
    e48a:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    e48e:	f7fb febb 	bl	a208 <mayfly_enqueue>
		LL_ASSERT(!retval);
    e492:	2800      	cmp	r0, #0
    e494:	d15d      	bne.n	e552 <ll_reset+0x10e>
	return z_impl_k_sem_take(sem, timeout);
    e496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e49a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e49e:	4668      	mov	r0, sp
    e4a0:	f00b fe82 	bl	1a1a8 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    e4a4:	f000 faea 	bl	ea7c <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    e4a8:	2800      	cmp	r0, #0
    e4aa:	d144      	bne.n	e536 <ll_reset+0xf2>
	err = init_reset();
    e4ac:	f7ff feba 	bl	e224 <init_reset>
	LL_ASSERT(!err);
    e4b0:	2800      	cmp	r0, #0
    e4b2:	d131      	bne.n	e518 <ll_reset+0xd4>
}
    e4b4:	b006      	add	sp, #24
    e4b6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    e4b8:	4a32      	ldr	r2, [pc, #200]	; (e584 <ll_reset+0x140>)
    e4ba:	4933      	ldr	r1, [pc, #204]	; (e588 <ll_reset+0x144>)
    e4bc:	4833      	ldr	r0, [pc, #204]	; (e58c <ll_reset+0x148>)
    e4be:	f240 23ad 	movw	r3, #685	; 0x2ad
    e4c2:	f00c fdf8 	bl	1b0b6 <printk>
    e4c6:	4040      	eors	r0, r0
    e4c8:	f380 8811 	msr	BASEPRI, r0
    e4cc:	f04f 0003 	mov.w	r0, #3
    e4d0:	df02      	svc	2
	err = ull_scan_reset();
    e4d2:	f000 fcc7 	bl	ee64 <ull_scan_reset>
	LL_ASSERT(!err);
    e4d6:	2800      	cmp	r0, #0
    e4d8:	d0be      	beq.n	e458 <ll_reset+0x14>
    e4da:	4a2a      	ldr	r2, [pc, #168]	; (e584 <ll_reset+0x140>)
    e4dc:	492a      	ldr	r1, [pc, #168]	; (e588 <ll_reset+0x144>)
    e4de:	482b      	ldr	r0, [pc, #172]	; (e58c <ll_reset+0x148>)
    e4e0:	f240 23b3 	movw	r3, #691	; 0x2b3
    e4e4:	f00c fde7 	bl	1b0b6 <printk>
    e4e8:	4040      	eors	r0, r0
    e4ea:	f380 8811 	msr	BASEPRI, r0
    e4ee:	f04f 0003 	mov.w	r0, #3
    e4f2:	df02      	svc	2
	err = ull_conn_reset();
    e4f4:	f001 fc1e 	bl	fd34 <ull_conn_reset>
	LL_ASSERT(!err);
    e4f8:	2800      	cmp	r0, #0
    e4fa:	d0b1      	beq.n	e460 <ll_reset+0x1c>
    e4fc:	4a21      	ldr	r2, [pc, #132]	; (e584 <ll_reset+0x140>)
    e4fe:	4922      	ldr	r1, [pc, #136]	; (e588 <ll_reset+0x144>)
    e500:	4822      	ldr	r0, [pc, #136]	; (e58c <ll_reset+0x148>)
    e502:	f240 23de 	movw	r3, #734	; 0x2de
    e506:	f00c fdd6 	bl	1b0b6 <printk>
    e50a:	4040      	eors	r0, r0
    e50c:	f380 8811 	msr	BASEPRI, r0
    e510:	f04f 0003 	mov.w	r0, #3
    e514:	df02      	svc	2
    e516:	e7a3      	b.n	e460 <ll_reset+0x1c>
	LL_ASSERT(!err);
    e518:	4a1a      	ldr	r2, [pc, #104]	; (e584 <ll_reset+0x140>)
    e51a:	491b      	ldr	r1, [pc, #108]	; (e588 <ll_reset+0x144>)
    e51c:	481b      	ldr	r0, [pc, #108]	; (e58c <ll_reset+0x148>)
    e51e:	f240 3327 	movw	r3, #807	; 0x327
    e522:	f00c fdc8 	bl	1b0b6 <printk>
    e526:	4040      	eors	r0, r0
    e528:	f380 8811 	msr	BASEPRI, r0
    e52c:	f04f 0003 	mov.w	r0, #3
    e530:	df02      	svc	2
}
    e532:	b006      	add	sp, #24
    e534:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    e536:	4a13      	ldr	r2, [pc, #76]	; (e584 <ll_reset+0x140>)
    e538:	4913      	ldr	r1, [pc, #76]	; (e588 <ll_reset+0x144>)
    e53a:	4814      	ldr	r0, [pc, #80]	; (e58c <ll_reset+0x148>)
    e53c:	f240 331a 	movw	r3, #794	; 0x31a
    e540:	f00c fdb9 	bl	1b0b6 <printk>
    e544:	4040      	eors	r0, r0
    e546:	f380 8811 	msr	BASEPRI, r0
    e54a:	f04f 0003 	mov.w	r0, #3
    e54e:	df02      	svc	2
    e550:	e7ac      	b.n	e4ac <ll_reset+0x68>
		LL_ASSERT(!retval);
    e552:	4a0c      	ldr	r2, [pc, #48]	; (e584 <ll_reset+0x140>)
    e554:	490e      	ldr	r1, [pc, #56]	; (e590 <ll_reset+0x14c>)
    e556:	480d      	ldr	r0, [pc, #52]	; (e58c <ll_reset+0x148>)
    e558:	f240 330d 	movw	r3, #781	; 0x30d
    e55c:	f00c fdab 	bl	1b0b6 <printk>
    e560:	4040      	eors	r0, r0
    e562:	f380 8811 	msr	BASEPRI, r0
    e566:	f04f 0003 	mov.w	r0, #3
    e56a:	df02      	svc	2
    e56c:	e793      	b.n	e496 <ll_reset+0x52>
    e56e:	bf00      	nop
    e570:	20000510 	.word	0x20000510
    e574:	2000040c 	.word	0x2000040c
    e578:	200003f4 	.word	0x200003f4
    e57c:	200003e4 	.word	0x200003e4
    e580:	20000544 	.word	0x20000544
    e584:	00020554 	.word	0x00020554
    e588:	00020590 	.word	0x00020590
    e58c:	000203b4 	.word	0x000203b4
    e590:	00020694 	.word	0x00020694

0000e594 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    e594:	b510      	push	{r4, lr}
    e596:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    e598:	2400      	movs	r4, #0
    e59a:	e9cd 4400 	strd	r4, r4, [sp]
    e59e:	9b04      	ldr	r3, [sp, #16]
    e5a0:	f005 fe1c 	bl	141dc <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    e5a4:	b002      	add	sp, #8
    e5a6:	bd10      	pop	{r4, pc}

0000e5a8 <lll_resume>:

void lll_resume(void *param)
{
    e5a8:	b510      	push	{r4, lr}
    e5aa:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    e5ac:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    e5ae:	691a      	ldr	r2, [r3, #16]
    e5b0:	6999      	ldr	r1, [r3, #24]
    e5b2:	2401      	movs	r4, #1
{
    e5b4:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    e5b6:	4020      	ands	r0, r4
    e5b8:	e9cd 0400 	strd	r0, r4, [sp]
    e5bc:	6958      	ldr	r0, [r3, #20]
    e5be:	f005 fe0d 	bl	141dc <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    e5c2:	b108      	cbz	r0, e5c8 <lll_resume+0x20>
    e5c4:	3077      	adds	r0, #119	; 0x77
    e5c6:	d101      	bne.n	e5cc <lll_resume+0x24>
}
    e5c8:	b002      	add	sp, #8
    e5ca:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    e5cc:	4a06      	ldr	r2, [pc, #24]	; (e5e8 <lll_resume+0x40>)
    e5ce:	4907      	ldr	r1, [pc, #28]	; (e5ec <lll_resume+0x44>)
    e5d0:	4807      	ldr	r0, [pc, #28]	; (e5f0 <lll_resume+0x48>)
    e5d2:	234f      	movs	r3, #79	; 0x4f
    e5d4:	f00c fd6f 	bl	1b0b6 <printk>
    e5d8:	4040      	eors	r0, r0
    e5da:	f380 8811 	msr	BASEPRI, r0
    e5de:	f04f 0003 	mov.w	r0, #3
    e5e2:	df02      	svc	2
}
    e5e4:	b002      	add	sp, #8
    e5e6:	bd10      	pop	{r4, pc}
    e5e8:	0002069c 	.word	0x0002069c
    e5ec:	000206e0 	.word	0x000206e0
    e5f0:	000203b4 	.word	0x000203b4

0000e5f4 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    e5f4:	b900      	cbnz	r0, e5f8 <ticker_update_op_cb+0x4>
    e5f6:	4770      	bx	lr
{
    e5f8:	b510      	push	{r4, lr}
    e5fa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    e5fc:	f7ff fbf2 	bl	dde4 <ull_disable_mark_get>
    e600:	4284      	cmp	r4, r0
    e602:	d00c      	beq.n	e61e <ticker_update_op_cb+0x2a>
    e604:	4a06      	ldr	r2, [pc, #24]	; (e620 <ticker_update_op_cb+0x2c>)
    e606:	4907      	ldr	r1, [pc, #28]	; (e624 <ticker_update_op_cb+0x30>)
    e608:	4807      	ldr	r0, [pc, #28]	; (e628 <ticker_update_op_cb+0x34>)
    e60a:	f640 03bf 	movw	r3, #2239	; 0x8bf
    e60e:	f00c fd52 	bl	1b0b6 <printk>
    e612:	4040      	eors	r0, r0
    e614:	f380 8811 	msr	BASEPRI, r0
    e618:	f04f 0003 	mov.w	r0, #3
    e61c:	df02      	svc	2
}
    e61e:	bd10      	pop	{r4, pc}
    e620:	000206f4 	.word	0x000206f4
    e624:	00020734 	.word	0x00020734
    e628:	000203b4 	.word	0x000203b4

0000e62c <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
    e62c:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    e62e:	4b13      	ldr	r3, [pc, #76]	; (e67c <init_set.constprop.0+0x50>)
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    e630:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    e634:	f893 2020 	ldrb.w	r2, [r3, #32]
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    e638:	f893 c03e 	ldrb.w	ip, [r3, #62]	; 0x3e
    e63c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    e640:	f002 0238 	and.w	r2, r2, #56	; 0x38
    e644:	6a89      	ldr	r1, [r1, #40]	; 0x28
    e646:	f042 0207 	orr.w	r2, r2, #7
    e64a:	f883 2020 	strb.w	r2, [r3, #32]
	pdu->len = BDADDR_SIZE;
    e64e:	2006      	movs	r0, #6
	pdu->type = pdu_type;
    e650:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    e652:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    e656:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    e65a:	f8a3 e03c 	strh.w	lr, [r3, #60]	; 0x3c
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    e65e:	f883 c03e 	strb.w	ip, [r3, #62]	; 0x3e
	pdu->len = BDADDR_SIZE;
    e662:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
    e664:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    e666:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    e66a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e66e:	2204      	movs	r2, #4
    e670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	pdu->len = BDADDR_SIZE;
    e672:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
    e674:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
    e676:	f85d fb04 	ldr.w	pc, [sp], #4
    e67a:	bf00      	nop
    e67c:	20002148 	.word	0x20002148

0000e680 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
    e680:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
    e682:	4c3d      	ldr	r4, [pc, #244]	; (e778 <disable.constprop.0+0xf8>)
    e684:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    e688:	07db      	lsls	r3, r3, #31
static inline uint8_t disable(uint8_t handle)
    e68a:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
    e68c:	d542      	bpl.n	e714 <disable.constprop.0+0x94>
	mark = ull_disable_mark(adv);
    e68e:	4620      	mov	r0, r4
    e690:	f7ff fb92 	bl	ddb8 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    e694:	4284      	cmp	r4, r0
    e696:	d00c      	beq.n	e6b2 <disable.constprop.0+0x32>
    e698:	4a38      	ldr	r2, [pc, #224]	; (e77c <disable.constprop.0+0xfc>)
    e69a:	4939      	ldr	r1, [pc, #228]	; (e780 <disable.constprop.0+0x100>)
    e69c:	4839      	ldr	r0, [pc, #228]	; (e784 <disable.constprop.0+0x104>)
    e69e:	f640 13ff 	movw	r3, #2559	; 0x9ff
    e6a2:	f00c fd08 	bl	1b0b6 <printk>
    e6a6:	4040      	eors	r0, r0
    e6a8:	f380 8811 	msr	BASEPRI, r0
    e6ac:	f04f 0003 	mov.w	r0, #3
    e6b0:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e6b2:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    e6b4:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e6b6:	2103      	movs	r1, #3
    e6b8:	4b33      	ldr	r3, [pc, #204]	; (e788 <disable.constprop.0+0x108>)
    e6ba:	9500      	str	r5, [sp, #0]
    e6bc:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    e6be:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    e6c0:	f7fc fff8 	bl	b6b4 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    e6c4:	4629      	mov	r1, r5
    e6c6:	f7ff fb4f 	bl	dd68 <ull_ticker_status_take>
	if (ret) {
    e6ca:	2800      	cmp	r0, #0
    e6cc:	d138      	bne.n	e740 <disable.constprop.0+0xc0>
	err = ull_disable(&adv->lll);
    e6ce:	482f      	ldr	r0, [pc, #188]	; (e78c <disable.constprop.0+0x10c>)
    e6d0:	f7ff fbaa 	bl	de28 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
    e6d4:	b108      	cbz	r0, e6da <disable.constprop.0+0x5a>
    e6d6:	3078      	adds	r0, #120	; 0x78
    e6d8:	d11f      	bne.n	e71a <disable.constprop.0+0x9a>
	mark = ull_disable_unmark(adv);
    e6da:	4827      	ldr	r0, [pc, #156]	; (e778 <disable.constprop.0+0xf8>)
    e6dc:	f7ff fb76 	bl	ddcc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    e6e0:	4284      	cmp	r4, r0
    e6e2:	d00c      	beq.n	e6fe <disable.constprop.0+0x7e>
    e6e4:	4a25      	ldr	r2, [pc, #148]	; (e77c <disable.constprop.0+0xfc>)
    e6e6:	4926      	ldr	r1, [pc, #152]	; (e780 <disable.constprop.0+0x100>)
    e6e8:	4826      	ldr	r0, [pc, #152]	; (e784 <disable.constprop.0+0x104>)
    e6ea:	f640 2321 	movw	r3, #2593	; 0xa21
    e6ee:	f00c fce2 	bl	1b0b6 <printk>
    e6f2:	4040      	eors	r0, r0
    e6f4:	f380 8811 	msr	BASEPRI, r0
    e6f8:	f04f 0003 	mov.w	r0, #3
    e6fc:	df02      	svc	2
	adv->is_enabled = 0U;
    e6fe:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    e702:	f36f 0300 	bfc	r3, #0, #1
    e706:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    e70a:	2000      	movs	r0, #0
    e70c:	f000 fbe2 	bl	eed4 <ull_scan_is_enabled_get>
    e710:	4604      	mov	r4, r0
    e712:	b348      	cbz	r0, e768 <disable.constprop.0+0xe8>
			return 0;
    e714:	2000      	movs	r0, #0
}
    e716:	b005      	add	sp, #20
    e718:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
    e71a:	4a18      	ldr	r2, [pc, #96]	; (e77c <disable.constprop.0+0xfc>)
    e71c:	491c      	ldr	r1, [pc, #112]	; (e790 <disable.constprop.0+0x110>)
    e71e:	4819      	ldr	r0, [pc, #100]	; (e784 <disable.constprop.0+0x104>)
    e720:	f640 231e 	movw	r3, #2590	; 0xa1e
    e724:	f00c fcc7 	bl	1b0b6 <printk>
    e728:	4040      	eors	r0, r0
    e72a:	f380 8811 	msr	BASEPRI, r0
    e72e:	f04f 0003 	mov.w	r0, #3
    e732:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    e734:	4810      	ldr	r0, [pc, #64]	; (e778 <disable.constprop.0+0xf8>)
    e736:	f7ff fb49 	bl	ddcc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    e73a:	4284      	cmp	r4, r0
    e73c:	d1d2      	bne.n	e6e4 <disable.constprop.0+0x64>
    e73e:	e7de      	b.n	e6fe <disable.constprop.0+0x7e>
		mark = ull_disable_unmark(adv);
    e740:	480d      	ldr	r0, [pc, #52]	; (e778 <disable.constprop.0+0xf8>)
    e742:	f7ff fb43 	bl	ddcc <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    e746:	4284      	cmp	r4, r0
    e748:	d013      	beq.n	e772 <disable.constprop.0+0xf2>
    e74a:	4a0c      	ldr	r2, [pc, #48]	; (e77c <disable.constprop.0+0xfc>)
    e74c:	490c      	ldr	r1, [pc, #48]	; (e780 <disable.constprop.0+0x100>)
    e74e:	480d      	ldr	r0, [pc, #52]	; (e784 <disable.constprop.0+0x104>)
    e750:	f640 2318 	movw	r3, #2584	; 0xa18
    e754:	f00c fcaf 	bl	1b0b6 <printk>
    e758:	4040      	eors	r0, r0
    e75a:	f380 8811 	msr	BASEPRI, r0
    e75e:	f04f 0003 	mov.w	r0, #3
    e762:	df02      	svc	2
    e764:	200c      	movs	r0, #12
    e766:	e7d6      	b.n	e716 <disable.constprop.0+0x96>
		ull_filter_adv_scan_state_cb(0);
    e768:	f004 fc68 	bl	1303c <ull_filter_adv_scan_state_cb>
	return 0;
    e76c:	4620      	mov	r0, r4
}
    e76e:	b005      	add	sp, #20
    e770:	bd30      	pop	{r4, r5, pc}
    e772:	200c      	movs	r0, #12
    e774:	e7cf      	b.n	e716 <disable.constprop.0+0x96>
    e776:	bf00      	nop
    e778:	20002148 	.word	0x20002148
    e77c:	000206f4 	.word	0x000206f4
    e780:	00020764 	.word	0x00020764
    e784:	000203b4 	.word	0x000203b4
    e788:	0000d371 	.word	0x0000d371
    e78c:	20002164 	.word	0x20002164
    e790:	00020770 	.word	0x00020770

0000e794 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
    e794:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    e796:	7804      	ldrb	r4, [r0, #0]
    e798:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
    e79c:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    e79e:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    e7a0:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    e7a4:	d01f      	beq.n	e7e6 <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    e7a6:	2c01      	cmp	r4, #1
    e7a8:	d009      	beq.n	e7be <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    e7aa:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
    e7ac:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
    e7ae:	b18c      	cbz	r4, e7d4 <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
    e7b0:	2c06      	cmp	r4, #6
    e7b2:	d00f      	beq.n	e7d4 <adv_time_get.constprop.0.isra.0+0x40>
    e7b4:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    e7b8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
    e7bc:	e003      	b.n	e7c6 <adv_time_get.constprop.0.isra.0+0x32>
    e7be:	f44f 6387 	mov.w	r3, #1080	; 0x438
    e7c2:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
    e7c6:	fb0c 3302 	mla	r3, ip, r2, r3
    e7ca:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    e7ce:	4018      	ands	r0, r3
}
    e7d0:	bc10      	pop	{r4}
    e7d2:	4770      	bx	lr
				adv_size += pdu->len;
    e7d4:	7843      	ldrb	r3, [r0, #1]
    e7d6:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
    e7d8:	00db      	lsls	r3, r3, #3
    e7da:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    e7de:	f503 72b3 	add.w	r2, r3, #358	; 0x166
    e7e2:	440b      	add	r3, r1
    e7e4:	e7ef      	b.n	e7c6 <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
    e7e6:	7840      	ldrb	r0, [r0, #1]
}
    e7e8:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    e7ea:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    e7ee:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    e7f2:	3010      	adds	r0, #16
    e7f4:	005b      	lsls	r3, r3, #1
    e7f6:	00c1      	lsls	r1, r0, #3
    e7f8:	f503 70c8 	add.w	r0, r3, #400	; 0x190
    e7fc:	fb01 0002 	mla	r0, r1, r2, r0
    e800:	b280      	uxth	r0, r0
}
    e802:	4770      	bx	lr

0000e804 <ticker_cb>:
{
    e804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e808:	461d      	mov	r5, r3
    e80a:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    e80c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e810:	429d      	cmp	r5, r3
{
    e812:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    e816:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    e818:	d019      	beq.n	e84e <ticker_cb+0x4a>
	return ++hdr->ref;
    e81a:	7823      	ldrb	r3, [r4, #0]
    e81c:	3301      	adds	r3, #1
    e81e:	b2db      	uxtb	r3, r3
    e820:	4607      	mov	r7, r0
    e822:	4616      	mov	r6, r2
    e824:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
    e826:	2b00      	cmp	r3, #0
    e828:	d058      	beq.n	e8dc <ticker_cb+0xd8>
		p.ticks_at_expire = ticks_at_expire;
    e82a:	4933      	ldr	r1, [pc, #204]	; (e8f8 <ticker_cb+0xf4>)
		mfy.param = &p;
    e82c:	4b33      	ldr	r3, [pc, #204]	; (e8fc <ticker_cb+0xf8>)
		p.lazy = lazy;
    e82e:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
    e830:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e834:	2200      	movs	r2, #0
		p.param = lll;
    e836:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
    e838:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
    e83c:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
    e840:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e842:	2001      	movs	r0, #1
    e844:	4611      	mov	r1, r2
    e846:	f7fb fcdf 	bl	a208 <mayfly_enqueue>
		LL_ASSERT(!ret);
    e84a:	2800      	cmp	r0, #0
    e84c:	d138      	bne.n	e8c0 <ticker_cb+0xbc>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
    e84e:	2104      	movs	r1, #4
    e850:	a809      	add	r0, sp, #36	; 0x24
    e852:	f005 faf7 	bl	13e44 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
    e856:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e858:	4929      	ldr	r1, [pc, #164]	; (e900 <ticker_cb+0xfc>)
    e85a:	fba1 2103 	umull	r2, r1, r1, r3
    e85e:	1a5d      	subs	r5, r3, r1
    e860:	eb01 0155 	add.w	r1, r1, r5, lsr #1
    e864:	f240 1047 	movw	r0, #327	; 0x147
    e868:	0a09      	lsrs	r1, r1, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    e86a:	4a26      	ldr	r2, [pc, #152]	; (e904 <ticker_cb+0x100>)
	random_delay %= ticks_delay_window;
    e86c:	fb00 3311 	mls	r3, r0, r1, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    e870:	4925      	ldr	r1, [pc, #148]	; (e908 <ticker_cb+0x104>)
    e872:	1aa2      	subs	r2, r4, r2
    e874:	fba1 1202 	umull	r1, r2, r1, r2
    e878:	0912      	lsrs	r2, r2, #4
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    e87a:	4924      	ldr	r1, [pc, #144]	; (e90c <ticker_cb+0x108>)
    e87c:	2000      	movs	r0, #0
    e87e:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
    e880:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    e882:	e9cd 1405 	strd	r1, r4, [sp, #20]
    e886:	e9cd 0003 	strd	r0, r0, [sp, #12]
    e88a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e88e:	9000      	str	r0, [sp, #0]
    e890:	b2d2      	uxtb	r2, r2
    e892:	2101      	movs	r1, #1
	random_delay += (ticks_delay_window_offset + 1);
    e894:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    e896:	f7fc fef5 	bl	b684 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    e89a:	f030 0302 	bics.w	r3, r0, #2
    e89e:	d00c      	beq.n	e8ba <ticker_cb+0xb6>
    e8a0:	4a1b      	ldr	r2, [pc, #108]	; (e910 <ticker_cb+0x10c>)
    e8a2:	491c      	ldr	r1, [pc, #112]	; (e914 <ticker_cb+0x110>)
    e8a4:	481c      	ldr	r0, [pc, #112]	; (e918 <ticker_cb+0x114>)
    e8a6:	f240 732c 	movw	r3, #1836	; 0x72c
    e8aa:	f00c fc04 	bl	1b0b6 <printk>
    e8ae:	4040      	eors	r0, r0
    e8b0:	f380 8811 	msr	BASEPRI, r0
    e8b4:	f04f 0003 	mov.w	r0, #3
    e8b8:	df02      	svc	2
}
    e8ba:	b00a      	add	sp, #40	; 0x28
    e8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    e8c0:	4a13      	ldr	r2, [pc, #76]	; (e910 <ticker_cb+0x10c>)
    e8c2:	4916      	ldr	r1, [pc, #88]	; (e91c <ticker_cb+0x118>)
    e8c4:	4814      	ldr	r0, [pc, #80]	; (e918 <ticker_cb+0x114>)
    e8c6:	f640 0392 	movw	r3, #2194	; 0x892
    e8ca:	f00c fbf4 	bl	1b0b6 <printk>
    e8ce:	4040      	eors	r0, r0
    e8d0:	f380 8811 	msr	BASEPRI, r0
    e8d4:	f04f 0003 	mov.w	r0, #3
    e8d8:	df02      	svc	2
    e8da:	e7b8      	b.n	e84e <ticker_cb+0x4a>
		LL_ASSERT(ref);
    e8dc:	4a0c      	ldr	r2, [pc, #48]	; (e910 <ticker_cb+0x10c>)
    e8de:	4910      	ldr	r1, [pc, #64]	; (e920 <ticker_cb+0x11c>)
    e8e0:	480d      	ldr	r0, [pc, #52]	; (e918 <ticker_cb+0x114>)
    e8e2:	f640 0385 	movw	r3, #2181	; 0x885
    e8e6:	f00c fbe6 	bl	1b0b6 <printk>
    e8ea:	4040      	eors	r0, r0
    e8ec:	f380 8811 	msr	BASEPRI, r0
    e8f0:	f04f 0003 	mov.w	r0, #3
    e8f4:	df02      	svc	2
    e8f6:	e798      	b.n	e82a <ticker_cb+0x26>
    e8f8:	2000219c 	.word	0x2000219c
    e8fc:	20000584 	.word	0x20000584
    e900:	90d4f121 	.word	0x90d4f121
    e904:	20002148 	.word	0x20002148
    e908:	38e38e39 	.word	0x38e38e39
    e90c:	0000e5f5 	.word	0x0000e5f5
    e910:	000206f4 	.word	0x000206f4
    e914:	0002078c 	.word	0x0002078c
    e918:	000203b4 	.word	0x000203b4
    e91c:	0002066c 	.word	0x0002066c
    e920:	00020788 	.word	0x00020788

0000e924 <ll_adv_params_set>:
{
    e924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv || adv->is_enabled) {
    e928:	4c47      	ldr	r4, [pc, #284]	; (ea48 <ll_adv_params_set+0x124>)
{
    e92a:	4698      	mov	r8, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    e92c:	4b47      	ldr	r3, [pc, #284]	; (ea4c <ll_adv_params_set+0x128>)
	if (!adv || adv->is_enabled) {
    e92e:	f894 603e 	ldrb.w	r6, [r4, #62]	; 0x3e
{
    e932:	4686      	mov	lr, r0
    e934:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    e936:	e893 0003 	ldmia.w	r3, {r0, r1}
{
    e93a:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
    e93c:	f016 0601 	ands.w	r6, r6, #1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    e940:	f88d 1004 	strb.w	r1, [sp, #4]
{
    e944:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
    e948:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    e94c:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
    e94e:	d167      	bne.n	ea20 <ll_adv_params_set+0xfc>
	pdu->type = pdu_adv_type[adv_type];
    e950:	ab02      	add	r3, sp, #8
		adv->interval = 0;
    e952:	f1bc 0f01 	cmp.w	ip, #1
	pdu->type = pdu_adv_type[adv_type];
    e956:	449c      	add	ip, r3
	adv->lll.chan_map = chan_map;
    e958:	f007 0307 	and.w	r3, r7, #7
    e95c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    e960:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    e964:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    e968:	4615      	mov	r5, r2
    e96a:	6a8f      	ldr	r7, [r1, #40]	; 0x28
    e96c:	f894 1020 	ldrb.w	r1, [r4, #32]
	pdu->type = pdu_adv_type[adv_type];
    e970:	f81c 2c08 	ldrb.w	r2, [ip, #-8]
	adv->lll.chan_map = chan_map;
    e974:	f001 0138 	and.w	r1, r1, #56	; 0x38
    e978:	ea43 0301 	orr.w	r3, r3, r1
    e97c:	f884 3020 	strb.w	r3, [r4, #32]
	pdu->type = pdu_adv_type[adv_type];
    e980:	783b      	ldrb	r3, [r7, #0]
		adv->interval = 0;
    e982:	bf08      	it	eq
    e984:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
    e988:	f023 031f 	bic.w	r3, r3, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    e98c:	f012 0f0e 	tst.w	r2, #14
	pdu->type = pdu_adv_type[adv_type];
    e990:	f002 020f 	and.w	r2, r2, #15
    e994:	ea43 0302 	orr.w	r3, r3, r2
	adv->own_addr_type = own_addr_type;
    e998:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
    e99c:	f8a4 e03c 	strh.w	lr, [r4, #60]	; 0x3c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    e9a0:	bf0c      	ite	eq
    e9a2:	2101      	moveq	r1, #1
    e9a4:	2100      	movne	r1, #0
	adv->own_addr_type = own_addr_type;
    e9a6:	f365 0242 	bfi	r2, r5, #1, #2
    e9aa:	f361 1345 	bfi	r3, r1, #5, #1
    e9ae:	703b      	strb	r3, [r7, #0]
    e9b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    e9b4:	b2d3      	uxtb	r3, r2
    e9b6:	0752      	lsls	r2, r2, #29
    e9b8:	d509      	bpl.n	e9ce <ll_adv_params_set+0xaa>
		adv->peer_addr_type = direct_addr_type;
    e9ba:	f368 03c3 	bfi	r3, r8, #3, #1
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
    e9be:	9908      	ldr	r1, [sp, #32]
		adv->peer_addr_type = direct_addr_type;
    e9c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
    e9c4:	2206      	movs	r2, #6
    e9c6:	f104 003f 	add.w	r0, r4, #63	; 0x3f
    e9ca:	f00d f9ae 	bl	1bd2a <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    e9ce:	783a      	ldrb	r2, [r7, #0]
    e9d0:	f002 030f 	and.w	r3, r2, #15
    e9d4:	2b01      	cmp	r3, #1
		pdu->tx_addr = own_addr_type & 0x1;
    e9d6:	f005 0101 	and.w	r1, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    e9da:	d026      	beq.n	ea2a <ll_adv_params_set+0x106>
	} else if (pdu->len == 0) {
    e9dc:	787b      	ldrb	r3, [r7, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    e9de:	f361 1286 	bfi	r2, r1, #6, #1
	} else if (pdu->len == 0) {
    e9e2:	b1bb      	cbz	r3, ea14 <ll_adv_params_set+0xf0>
		pdu->rx_addr = 0;
    e9e4:	f36f 12c7 	bfc	r2, #7, #1
    e9e8:	703a      	strb	r2, [r7, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    e9ea:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	hdr->parent = parent;
    e9ee:	61e4      	str	r4, [r4, #28]
    e9f0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    e9f4:	01ad      	lsls	r5, r5, #6
    e9f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e9f8:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
    e9fc:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    e9fe:	f045 0504 	orr.w	r5, r5, #4
    ea02:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
    ea04:	b912      	cbnz	r2, ea0c <ll_adv_params_set+0xe8>
			pdu->len = BDADDR_SIZE;
    ea06:	2106      	movs	r1, #6
    ea08:	7059      	strb	r1, [r3, #1]
	return 0;
    ea0a:	4616      	mov	r6, r2
}
    ea0c:	4630      	mov	r0, r6
    ea0e:	b002      	add	sp, #8
    ea10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->rx_addr = 0;
    ea14:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu->len = BDADDR_SIZE;
    ea18:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
    ea1a:	703a      	strb	r2, [r7, #0]
		pdu->len = BDADDR_SIZE;
    ea1c:	707b      	strb	r3, [r7, #1]
    ea1e:	e7e4      	b.n	e9ea <ll_adv_params_set+0xc6>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ea20:	260c      	movs	r6, #12
}
    ea22:	4630      	mov	r0, r6
    ea24:	b002      	add	sp, #8
    ea26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->tx_addr = own_addr_type & 0x1;
    ea2a:	f361 1286 	bfi	r2, r1, #6, #1
		pdu->rx_addr = direct_addr_type;
    ea2e:	4638      	mov	r0, r7
    ea30:	f368 12c7 	bfi	r2, r8, #7, #1
    ea34:	f800 2b08 	strb.w	r2, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    ea38:	9908      	ldr	r1, [sp, #32]
    ea3a:	2206      	movs	r2, #6
    ea3c:	f00d f975 	bl	1bd2a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    ea40:	230c      	movs	r3, #12
    ea42:	707b      	strb	r3, [r7, #1]
    ea44:	e7d1      	b.n	e9ea <ll_adv_params_set+0xc6>
    ea46:	bf00      	nop
    ea48:	20002148 	.word	0x20002148
    ea4c:	00020048 	.word	0x00020048

0000ea50 <ull_adv_init>:
{
    ea50:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    ea52:	4c06      	ldr	r4, [pc, #24]	; (ea6c <ull_adv_init+0x1c>)
    ea54:	f104 0024 	add.w	r0, r4, #36	; 0x24
    ea58:	f005 fdf4 	bl	14644 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    ea5c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ea60:	f005 fdf0 	bl	14644 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    ea64:	f7ff fde2 	bl	e62c <init_set.constprop.0>
}
    ea68:	2000      	movs	r0, #0
    ea6a:	bd10      	pop	{r4, pc}
    ea6c:	20002148 	.word	0x20002148

0000ea70 <ull_adv_reset>:
{
    ea70:	b508      	push	{r3, lr}
		(void)disable(handle);
    ea72:	f7ff fe05 	bl	e680 <disable.constprop.0>
}
    ea76:	2000      	movs	r0, #0
    ea78:	bd08      	pop	{r3, pc}
    ea7a:	bf00      	nop

0000ea7c <ull_adv_reset_finalize>:
{
    ea7c:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
    ea7e:	4c0a      	ldr	r4, [pc, #40]	; (eaa8 <ull_adv_reset_finalize+0x2c>)
    ea80:	f104 0524 	add.w	r5, r4, #36	; 0x24
    ea84:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
    ea86:	3430      	adds	r4, #48	; 0x30
		lll_adv_data_reset(&lll->adv_data);
    ea88:	f005 fdec 	bl	14664 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
    ea8c:	4620      	mov	r0, r4
    ea8e:	f005 fde9 	bl	14664 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    ea92:	4628      	mov	r0, r5
    ea94:	f005 fdd6 	bl	14644 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    ea98:	4620      	mov	r0, r4
    ea9a:	f005 fdd3 	bl	14644 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    ea9e:	f7ff fdc5 	bl	e62c <init_set.constprop.0>
}
    eaa2:	2000      	movs	r0, #0
    eaa4:	bd38      	pop	{r3, r4, r5, pc}
    eaa6:	bf00      	nop
    eaa8:	20002148 	.word	0x20002148

0000eaac <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    eaac:	4a04      	ldr	r2, [pc, #16]	; (eac0 <ull_adv_lll_handle_get+0x14>)
    eaae:	6800      	ldr	r0, [r0, #0]
    eab0:	4b04      	ldr	r3, [pc, #16]	; (eac4 <ull_adv_lll_handle_get+0x18>)
    eab2:	1a80      	subs	r0, r0, r2
    eab4:	fba3 3000 	umull	r3, r0, r3, r0
}
    eab8:	f3c0 100f 	ubfx	r0, r0, #4, #16
    eabc:	4770      	bx	lr
    eabe:	bf00      	nop
    eac0:	20002148 	.word	0x20002148
    eac4:	38e38e39 	.word	0x38e38e39

0000eac8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    eac8:	b938      	cbnz	r0, eada <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    eaca:	4805      	ldr	r0, [pc, #20]	; (eae0 <ull_adv_is_enabled_get+0x18>)
    eacc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
	return &ll_adv[handle];
    ead0:	f013 0f01 	tst.w	r3, #1
    ead4:	bf08      	it	eq
    ead6:	2000      	moveq	r0, #0
    ead8:	4770      	bx	lr
		return NULL;
    eada:	2000      	movs	r0, #0
}
    eadc:	4770      	bx	lr
    eade:	bf00      	nop
    eae0:	20002148 	.word	0x20002148

0000eae4 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    eae4:	b928      	cbnz	r0, eaf2 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    eae6:	4b04      	ldr	r3, [pc, #16]	; (eaf8 <ull_adv_is_enabled+0x14>)
    eae8:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
    eaec:	f000 0001 	and.w	r0, r0, #1
    eaf0:	4770      	bx	lr
    eaf2:	2000      	movs	r0, #0
}
    eaf4:	4770      	bx	lr
    eaf6:	bf00      	nop
    eaf8:	20002148 	.word	0x20002148

0000eafc <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    eafc:	b948      	cbnz	r0, eb12 <ull_adv_filter_pol_get+0x16>
	if (!adv || !adv->is_enabled) {
    eafe:	4b06      	ldr	r3, [pc, #24]	; (eb18 <ull_adv_filter_pol_get+0x1c>)
    eb00:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
    eb04:	f010 0001 	ands.w	r0, r0, #1
    eb08:	d004      	beq.n	eb14 <ull_adv_filter_pol_get+0x18>
	return adv->lll.filter_policy;
    eb0a:	f893 0020 	ldrb.w	r0, [r3, #32]
    eb0e:	0980      	lsrs	r0, r0, #6
    eb10:	4770      	bx	lr
		return 0;
    eb12:	2000      	movs	r0, #0
}
    eb14:	4770      	bx	lr
    eb16:	bf00      	nop
    eb18:	20002148 	.word	0x20002148

0000eb1c <ull_adv_pdu_update_addrs>:
{
    eb1c:	b570      	push	{r4, r5, r6, lr}
    eb1e:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
    eb20:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
{
    eb24:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
    eb26:	f004 fbf9 	bl	1331c <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
    eb2a:	b310      	cbz	r0, eb72 <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
    eb2c:	7823      	ldrb	r3, [r4, #0]
    eb2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eb32:	4601      	mov	r1, r0
    eb34:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
    eb36:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    eb38:	2206      	movs	r2, #6
    eb3a:	4630      	mov	r0, r6
    eb3c:	f00d f8f5 	bl	1bd2a <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    eb40:	7823      	ldrb	r3, [r4, #0]
    eb42:	f003 030f 	and.w	r3, r3, #15
    eb46:	2b01      	cmp	r3, #1
    eb48:	d001      	beq.n	eb4e <ull_adv_pdu_update_addrs+0x32>
}
    eb4a:	4630      	mov	r0, r6
    eb4c:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
    eb4e:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
    eb52:	f004 fc11 	bl	13378 <ull_filter_tgta_get>
	if (rx_addr) {
    eb56:	4601      	mov	r1, r0
    eb58:	2800      	cmp	r0, #0
    eb5a:	d0f6      	beq.n	eb4a <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
    eb5c:	7823      	ldrb	r3, [r4, #0]
    eb5e:	4620      	mov	r0, r4
    eb60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    eb64:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
    eb68:	2206      	movs	r2, #6
    eb6a:	f00d f8de 	bl	1bd2a <memcpy>
}
    eb6e:	4630      	mov	r0, r6
    eb70:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
    eb72:	7820      	ldrb	r0, [r4, #0]
    eb74:	f3c0 1080 	ubfx	r0, r0, #6, #1
    eb78:	f7fc fe64 	bl	b844 <ll_addr_get>
    eb7c:	4601      	mov	r1, r0
	if (rpa) {
    eb7e:	e7da      	b.n	eb36 <ull_adv_pdu_update_addrs+0x1a>

0000eb80 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    eb80:	291f      	cmp	r1, #31
    eb82:	d849      	bhi.n	ec18 <ull_adv_data_set+0x98>
{
    eb84:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    eb86:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    eb8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    eb8e:	b083      	sub	sp, #12
    eb90:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    eb92:	7833      	ldrb	r3, [r6, #0]
    eb94:	f003 030f 	and.w	r3, r3, #15
    eb98:	2b01      	cmp	r3, #1
    eb9a:	4604      	mov	r4, r0
    eb9c:	d03e      	beq.n	ec1c <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    eb9e:	460d      	mov	r5, r1
    eba0:	3024      	adds	r0, #36	; 0x24
    eba2:	f10d 0107 	add.w	r1, sp, #7
    eba6:	4617      	mov	r7, r2
    eba8:	f005 fddc 	bl	14764 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
    ebac:	4631      	mov	r1, r6
    ebae:	4606      	mov	r6, r0
    ebb0:	f811 2b02 	ldrb.w	r2, [r1], #2
    ebb4:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
    ebb8:	f3c2 0303 	ubfx	r3, r2, #0, #4
    ebbc:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
    ebc0:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
    ebc4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
    ebc8:	f002 0280 	and.w	r2, r2, #128	; 0x80
    ebcc:	4630      	mov	r0, r6
    ebce:	4313      	orrs	r3, r2
    ebd0:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    ebd4:	2206      	movs	r2, #6
    ebd6:	f00d f8a8 	bl	1bd2a <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    ebda:	462a      	mov	r2, r5
    ebdc:	4639      	mov	r1, r7
    ebde:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
    ebe2:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    ebe4:	f00d f8a1 	bl	1bd2a <memcpy>
	pdu->len = BDADDR_SIZE + len;
    ebe8:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
    ebea:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    ebee:	07db      	lsls	r3, r3, #31
    ebf0:	d406      	bmi.n	ec00 <ull_adv_data_set+0x80>
	pdu->last = idx;
    ebf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ebf6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	return 0;
    ebfa:	2000      	movs	r0, #0
}
    ebfc:	b003      	add	sp, #12
    ebfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    ec00:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    ec04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
    ec08:	4631      	mov	r1, r6
    ec0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    ec0c:	4620      	mov	r0, r4
    ec0e:	f7f2 f9ef 	bl	ff0 <ull_adv_time_update>
		if (err) {
    ec12:	2800      	cmp	r0, #0
    ec14:	d0ed      	beq.n	ebf2 <ull_adv_data_set+0x72>
    ec16:	e7f1      	b.n	ebfc <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
    ec18:	2012      	movs	r0, #18
}
    ec1a:	4770      	bx	lr
		return BT_HCI_ERR_CMD_DISALLOWED;
    ec1c:	200c      	movs	r0, #12
}
    ec1e:	b003      	add	sp, #12
    ec20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec22:	bf00      	nop

0000ec24 <ll_adv_data_set>:
{
    ec24:	4603      	mov	r3, r0
    ec26:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    ec28:	4801      	ldr	r0, [pc, #4]	; (ec30 <ll_adv_data_set+0xc>)
    ec2a:	4619      	mov	r1, r3
    ec2c:	f7ff bfa8 	b.w	eb80 <ull_adv_data_set>
    ec30:	20002148 	.word	0x20002148

0000ec34 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
    ec34:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec36:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    ec3a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ec3e:	b083      	sub	sp, #12
    ec40:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    ec42:	460e      	mov	r6, r1
    ec44:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    ec46:	f10d 0107 	add.w	r1, sp, #7
    ec4a:	3030      	adds	r0, #48	; 0x30
    ec4c:	4617      	mov	r7, r2
    ec4e:	f005 fd89 	bl	14764 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
    ec52:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    ec54:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
    ec56:	f811 3b02 	ldrb.w	r3, [r1], #2
    ec5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ec5e:	019b      	lsls	r3, r3, #6
    ec60:	f043 0304 	orr.w	r3, r3, #4
    ec64:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
    ec66:	1db3      	adds	r3, r6, #6
    ec68:	7043      	strb	r3, [r0, #1]
    ec6a:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    ec6c:	3002      	adds	r0, #2
    ec6e:	f00d f85c 	bl	1bd2a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    ec72:	4632      	mov	r2, r6
    ec74:	4639      	mov	r1, r7
    ec76:	f105 0008 	add.w	r0, r5, #8
    ec7a:	f00d f856 	bl	1bd2a <memcpy>
	if (adv->is_enabled) {
    ec7e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    ec82:	07db      	lsls	r3, r3, #31
    ec84:	d50a      	bpl.n	ec9c <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    ec86:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    ec8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ec8e:	6a99      	ldr	r1, [r3, #40]	; 0x28
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
    ec90:	780b      	ldrb	r3, [r1, #0]
    ec92:	f013 030f 	ands.w	r3, r3, #15
    ec96:	d008      	beq.n	ecaa <ull_scan_rsp_set.part.0+0x76>
    ec98:	2b06      	cmp	r3, #6
    ec9a:	d006      	beq.n	ecaa <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
    ec9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eca0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	return 0;
    eca4:	2000      	movs	r0, #0
}
    eca6:	b003      	add	sp, #12
    eca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
    ecaa:	462a      	mov	r2, r5
    ecac:	4620      	mov	r0, r4
    ecae:	f7f2 f99f 	bl	ff0 <ull_adv_time_update>
			if (err) {
    ecb2:	2800      	cmp	r0, #0
    ecb4:	d0f2      	beq.n	ec9c <ull_scan_rsp_set.part.0+0x68>
    ecb6:	e7f6      	b.n	eca6 <ull_scan_rsp_set.part.0+0x72>

0000ecb8 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    ecb8:	281f      	cmp	r0, #31
{
    ecba:	4603      	mov	r3, r0
    ecbc:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
    ecbe:	d803      	bhi.n	ecc8 <ll_adv_scan_rsp_set+0x10>
    ecc0:	4802      	ldr	r0, [pc, #8]	; (eccc <ll_adv_scan_rsp_set+0x14>)
    ecc2:	4619      	mov	r1, r3
    ecc4:	f7ff bfb6 	b.w	ec34 <ull_scan_rsp_set.part.0>
}
    ecc8:	2012      	movs	r0, #18
    ecca:	4770      	bx	lr
    eccc:	20002148 	.word	0x20002148

0000ecd0 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
    ecd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ecd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ecd6:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
    ecda:	4625      	mov	r5, r4
{
    ecdc:	4680      	mov	r8, r0
    ecde:	f815 1b1c 	ldrb.w	r1, [r5], #28
    ece2:	3101      	adds	r1, #1
    ece4:	b2c9      	uxtb	r1, r1
    ece6:	4617      	mov	r7, r2
    ece8:	461e      	mov	r6, r3
    ecea:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
    ecec:	b181      	cbz	r1, ed10 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
    ecee:	4c17      	ldr	r4, [pc, #92]	; (ed4c <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
    ecf0:	4b17      	ldr	r3, [pc, #92]	; (ed50 <ticker_cb+0x80>)
	p.lazy = lazy;
    ecf2:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    ecf4:	2200      	movs	r2, #0
    ecf6:	4611      	mov	r1, r2
    ecf8:	2001      	movs	r0, #1
	p.remainder = remainder;
    ecfa:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
    ecfe:	60e5      	str	r5, [r4, #12]
	p.force = force;
    ed00:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
    ed04:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    ed06:	f7fb fa7f 	bl	a208 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    ed0a:	b978      	cbnz	r0, ed2c <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
    ed0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
    ed10:	4a10      	ldr	r2, [pc, #64]	; (ed54 <ticker_cb+0x84>)
    ed12:	4911      	ldr	r1, [pc, #68]	; (ed58 <ticker_cb+0x88>)
    ed14:	4811      	ldr	r0, [pc, #68]	; (ed5c <ticker_cb+0x8c>)
    ed16:	f240 23db 	movw	r3, #731	; 0x2db
    ed1a:	f00c f9cc 	bl	1b0b6 <printk>
    ed1e:	4040      	eors	r0, r0
    ed20:	f380 8811 	msr	BASEPRI, r0
    ed24:	f04f 0003 	mov.w	r0, #3
    ed28:	df02      	svc	2
    ed2a:	e7e0      	b.n	ecee <ticker_cb+0x1e>
	LL_ASSERT(!ret);
    ed2c:	4a09      	ldr	r2, [pc, #36]	; (ed54 <ticker_cb+0x84>)
    ed2e:	490c      	ldr	r1, [pc, #48]	; (ed60 <ticker_cb+0x90>)
    ed30:	480a      	ldr	r0, [pc, #40]	; (ed5c <ticker_cb+0x8c>)
    ed32:	f44f 733a 	mov.w	r3, #744	; 0x2e8
    ed36:	f00c f9be 	bl	1b0b6 <printk>
    ed3a:	4040      	eors	r0, r0
    ed3c:	f380 8811 	msr	BASEPRI, r0
    ed40:	f04f 0003 	mov.w	r0, #3
    ed44:	df02      	svc	2
}
    ed46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ed4a:	bf00      	nop
    ed4c:	200021fc 	.word	0x200021fc
    ed50:	20000594 	.word	0x20000594
    ed54:	000207a8 	.word	0x000207a8
    ed58:	00020788 	.word	0x00020788
    ed5c:	000203b4 	.word	0x000203b4
    ed60:	0002066c 	.word	0x0002066c

0000ed64 <ull_scan_init>:
}
    ed64:	2000      	movs	r0, #0
    ed66:	4770      	bx	lr

0000ed68 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    ed68:	3004      	adds	r0, #4
{
    ed6a:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    ed6c:	f101 021c 	add.w	r2, r1, #28
    ed70:	b2c0      	uxtb	r0, r0
    ed72:	f7ff f897 	bl	dea4 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    ed76:	b110      	cbz	r0, ed7e <ull_scan_disable+0x16>
    ed78:	3078      	adds	r0, #120	; 0x78
    ed7a:	d101      	bne.n	ed80 <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ed7c:	200c      	movs	r0, #12
}
    ed7e:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
    ed80:	4a07      	ldr	r2, [pc, #28]	; (eda0 <ull_scan_disable+0x38>)
    ed82:	4908      	ldr	r1, [pc, #32]	; (eda4 <ull_scan_disable+0x3c>)
    ed84:	4808      	ldr	r0, [pc, #32]	; (eda8 <ull_scan_disable+0x40>)
    ed86:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    ed8a:	f00c f994 	bl	1b0b6 <printk>
    ed8e:	4040      	eors	r0, r0
    ed90:	f380 8811 	msr	BASEPRI, r0
    ed94:	f04f 0003 	mov.w	r0, #3
    ed98:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    ed9a:	200c      	movs	r0, #12
}
    ed9c:	bd08      	pop	{r3, pc}
    ed9e:	bf00      	nop
    eda0:	000207a8 	.word	0x000207a8
    eda4:	000207e8 	.word	0x000207e8
    eda8:	000203b4 	.word	0x000203b4

0000edac <ll_scan_enable>:
{
    edac:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
    edae:	4c2c      	ldr	r4, [pc, #176]	; (ee60 <ll_scan_enable+0xb4>)
    edb0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    edb4:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
    edb8:	b358      	cbz	r0, ee12 <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
    edba:	bb5a      	cbnz	r2, ee14 <ll_scan_enable+0x68>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
    edbc:	079a      	lsls	r2, r3, #30
    edbe:	f3c3 0541 	ubfx	r5, r3, #1, #2
    edc2:	d50b      	bpl.n	eddc <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
    edc4:	2001      	movs	r0, #1
    edc6:	f7fc fd3d 	bl	b844 <ll_addr_get>
    edca:	2106      	movs	r1, #6
    edcc:	f7fb f98e 	bl	a0ec <mem_nz>
    edd0:	2800      	cmp	r0, #0
    edd2:	d042      	beq.n	ee5a <ll_scan_enable+0xae>
		own_addr_type = scan->own_addr_type;
    edd4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
    edd8:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
    eddc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ede0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    ede4:	f004 f96a 	bl	130bc <ull_filter_scan_update>
	lll->rpa_gen = 0;
    ede8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    edec:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
    edf0:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
    edf4:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
    edf6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
    edfa:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
    edfc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
    ee00:	d502      	bpl.n	ee08 <ll_scan_enable+0x5c>
    ee02:	3d02      	subs	r5, #2
    ee04:	2d01      	cmp	r5, #1
    ee06:	d91e      	bls.n	ee46 <ll_scan_enable+0x9a>
}
    ee08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
    ee0c:	4814      	ldr	r0, [pc, #80]	; (ee60 <ll_scan_enable+0xb4>)
    ee0e:	f7f2 b9ab 	b.w	1168 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
    ee12:	b912      	cbnz	r2, ee1a <ll_scan_enable+0x6e>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    ee14:	250c      	movs	r5, #12
}
    ee16:	4628      	mov	r0, r5
    ee18:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
    ee1a:	6a23      	ldr	r3, [r4, #32]
    ee1c:	2b00      	cmp	r3, #0
    ee1e:	d1f9      	bne.n	ee14 <ll_scan_enable+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
    ee20:	4621      	mov	r1, r4
    ee22:	f7ff ffa1 	bl	ed68 <ull_scan_disable>
	if (ret) {
    ee26:	4605      	mov	r5, r0
    ee28:	2800      	cmp	r0, #0
    ee2a:	d1f4      	bne.n	ee16 <ll_scan_enable+0x6a>
		return ret;
	}

	scan->is_enabled = 0U;
    ee2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    ee30:	f360 0300 	bfi	r3, r0, #0, #1
    ee34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
    ee38:	f7ff fe46 	bl	eac8 <ull_adv_is_enabled_get>
    ee3c:	2800      	cmp	r0, #0
    ee3e:	d1ea      	bne.n	ee16 <ll_scan_enable+0x6a>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
    ee40:	f004 f8fc 	bl	1303c <ull_filter_adv_scan_state_cb>
    ee44:	e7e7      	b.n	ee16 <ll_scan_enable+0x6a>
		ull_filter_rpa_update(false);
    ee46:	2000      	movs	r0, #0
    ee48:	f004 f95c 	bl	13104 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    ee4c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    ee50:	f043 0302 	orr.w	r3, r3, #2
    ee54:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    ee58:	e7d6      	b.n	ee08 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
    ee5a:	2512      	movs	r5, #18
    ee5c:	e7db      	b.n	ee16 <ll_scan_enable+0x6a>
    ee5e:	bf00      	nop
    ee60:	200021b4 	.word	0x200021b4

0000ee64 <ull_scan_reset>:
{
    ee64:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
    ee66:	4c0d      	ldr	r4, [pc, #52]	; (ee9c <ull_scan_reset+0x38>)
    ee68:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    ee6c:	07db      	lsls	r3, r3, #31
    ee6e:	d501      	bpl.n	ee74 <ull_scan_reset+0x10>
	if (scan->lll.conn) {
    ee70:	6a20      	ldr	r0, [r4, #32]
    ee72:	b108      	cbz	r0, ee78 <ull_scan_reset+0x14>
}
    ee74:	2000      	movs	r0, #0
    ee76:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
    ee78:	4621      	mov	r1, r4
    ee7a:	f7ff ff75 	bl	ed68 <ull_scan_disable>
	if (ret) {
    ee7e:	2800      	cmp	r0, #0
    ee80:	d1f8      	bne.n	ee74 <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
    ee82:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    ee86:	f360 0200 	bfi	r2, r0, #0, #1
    ee8a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
    ee8e:	f7ff fe1b 	bl	eac8 <ull_adv_is_enabled_get>
    ee92:	2800      	cmp	r0, #0
    ee94:	d1ee      	bne.n	ee74 <ull_scan_reset+0x10>
		ull_filter_adv_scan_state_cb(0);
    ee96:	f004 f8d1 	bl	1303c <ull_filter_adv_scan_state_cb>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
    ee9a:	e7eb      	b.n	ee74 <ull_scan_reset+0x10>
    ee9c:	200021b4 	.word	0x200021b4

0000eea0 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    eea0:	4a03      	ldr	r2, [pc, #12]	; (eeb0 <ull_scan_handle_get+0x10>)
    eea2:	4b04      	ldr	r3, [pc, #16]	; (eeb4 <ull_scan_handle_get+0x14>)
    eea4:	1a80      	subs	r0, r0, r2
    eea6:	fba3 3000 	umull	r3, r0, r3, r0
}
    eeaa:	f3c0 1007 	ubfx	r0, r0, #4, #8
    eeae:	4770      	bx	lr
    eeb0:	200021b4 	.word	0x200021b4
    eeb4:	38e38e39 	.word	0x38e38e39

0000eeb8 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    eeb8:	4a04      	ldr	r2, [pc, #16]	; (eecc <ull_scan_lll_handle_get+0x14>)
    eeba:	6800      	ldr	r0, [r0, #0]
    eebc:	4b04      	ldr	r3, [pc, #16]	; (eed0 <ull_scan_lll_handle_get+0x18>)
    eebe:	1a80      	subs	r0, r0, r2
    eec0:	fba3 3000 	umull	r3, r0, r3, r0
}
    eec4:	f3c0 1007 	ubfx	r0, r0, #4, #8
    eec8:	4770      	bx	lr
    eeca:	bf00      	nop
    eecc:	200021b4 	.word	0x200021b4
    eed0:	38e38e39 	.word	0x38e38e39

0000eed4 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    eed4:	b938      	cbnz	r0, eee6 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
    eed6:	4805      	ldr	r0, [pc, #20]	; (eeec <ull_scan_is_enabled_get+0x18>)
    eed8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
    eedc:	f013 0f01 	tst.w	r3, #1
    eee0:	bf08      	it	eq
    eee2:	2000      	moveq	r0, #0
    eee4:	4770      	bx	lr
		return NULL;
    eee6:	2000      	movs	r0, #0
}
    eee8:	4770      	bx	lr
    eeea:	bf00      	nop
    eeec:	200021b4 	.word	0x200021b4

0000eef0 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
    eef0:	4a04      	ldr	r2, [pc, #16]	; (ef04 <ull_scan_is_disabled_get+0x14>)
    eef2:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    eef6:	f003 0301 	and.w	r3, r3, #1
		return NULL;
    eefa:	4303      	orrs	r3, r0
}
    eefc:	bf0c      	ite	eq
    eefe:	4610      	moveq	r0, r2
    ef00:	2000      	movne	r0, #0
    ef02:	4770      	bx	lr
    ef04:	200021b4 	.word	0x200021b4

0000ef08 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
    ef08:	b990      	cbnz	r0, ef30 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
    ef0a:	4a0a      	ldr	r2, [pc, #40]	; (ef34 <ull_scan_is_enabled+0x2c>)
    ef0c:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    ef10:	f013 0001 	ands.w	r0, r3, #1
    ef14:	d00d      	beq.n	ef32 <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    ef16:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
    ef1a:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
    ef1c:	f003 0301 	and.w	r3, r3, #1
    ef20:	f3c0 1040 	ubfx	r0, r0, #5, #1
    ef24:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
    ef28:	b11a      	cbz	r2, ef32 <ull_scan_is_enabled+0x2a>
    ef2a:	f040 0004 	orr.w	r0, r0, #4
    ef2e:	4770      	bx	lr
		return 0U;
    ef30:	2000      	movs	r0, #0
}
    ef32:	4770      	bx	lr
    ef34:	200021b4 	.word	0x200021b4

0000ef38 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    ef38:	b950      	cbnz	r0, ef50 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
    ef3a:	4b06      	ldr	r3, [pc, #24]	; (ef54 <ull_scan_filter_pol_get+0x1c>)
    ef3c:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
    ef40:	f010 0001 	ands.w	r0, r0, #1
    ef44:	d005      	beq.n	ef52 <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
    ef46:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
    ef4a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    ef4e:	4770      	bx	lr
		return 0;
    ef50:	2000      	movs	r0, #0
}
    ef52:	4770      	bx	lr
    ef54:	200021b4 	.word	0x200021b4

0000ef58 <init_reset>:
{
    ef58:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    ef5a:	4b15      	ldr	r3, [pc, #84]	; (efb0 <init_reset+0x58>)
    ef5c:	4815      	ldr	r0, [pc, #84]	; (efb4 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    ef5e:	4c16      	ldr	r4, [pc, #88]	; (efb8 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
    ef60:	2201      	movs	r2, #1
    ef62:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    ef66:	f7fb f847 	bl	9ff8 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
    ef6a:	4b14      	ldr	r3, [pc, #80]	; (efbc <init_reset+0x64>)
    ef6c:	2203      	movs	r2, #3
    ef6e:	1d18      	adds	r0, r3, #4
    ef70:	2124      	movs	r1, #36	; 0x24
    ef72:	f7fb f841 	bl	9ff8 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    ef76:	4b12      	ldr	r3, [pc, #72]	; (efc0 <init_reset+0x68>)
    ef78:	2204      	movs	r2, #4
    ef7a:	1898      	adds	r0, r3, r2
    ef7c:	212c      	movs	r1, #44	; 0x2c
    ef7e:	f7fb f83b 	bl	9ff8 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    ef82:	4b10      	ldr	r3, [pc, #64]	; (efc4 <init_reset+0x6c>)
    ef84:	2207      	movs	r2, #7
    ef86:	1d18      	adds	r0, r3, #4
    ef88:	2108      	movs	r1, #8
    ef8a:	f7fb f835 	bl	9ff8 <mem_init>
	default_phy_tx |= PHY_2M;
    ef8e:	490e      	ldr	r1, [pc, #56]	; (efc8 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
    ef90:	4a0e      	ldr	r2, [pc, #56]	; (efcc <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    ef92:	480f      	ldr	r0, [pc, #60]	; (efd0 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
    ef94:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    ef96:	f04f 0c1b 	mov.w	ip, #27
    ef9a:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
    ef9e:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    efa0:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
    efa4:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    efa6:	f8a0 c000 	strh.w	ip, [r0]
}
    efaa:	2000      	movs	r0, #0
    efac:	bd10      	pop	{r4, pc}
    efae:	bf00      	nop
    efb0:	2000220c 	.word	0x2000220c
    efb4:	200012b0 	.word	0x200012b0
    efb8:	20002d56 	.word	0x20002d56
    efbc:	20002234 	.word	0x20002234
    efc0:	200022a4 	.word	0x200022a4
    efc4:	20002358 	.word	0x20002358
    efc8:	20002db2 	.word	0x20002db2
    efcc:	20002db1 	.word	0x20002db1
    efd0:	20002d58 	.word	0x20002d58

0000efd4 <ctrl_tx_pause_enqueue>:
{
    efd4:	b538      	push	{r3, r4, r5, lr}
    efd6:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
    efd8:	e9d0 3067 	ldrd	r3, r0, [r0, #412]	; 0x19c
{
    efdc:	460d      	mov	r5, r1
	if (
    efde:	b11b      	cbz	r3, efe8 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    efe0:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	    conn->tx_head &&
    efe4:	0789      	lsls	r1, r1, #30
    efe6:	d50c      	bpl.n	f002 <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
    efe8:	b340      	cbz	r0, f03c <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
    efea:	2a00      	cmp	r2, #0
    efec:	d130      	bne.n	f050 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
    efee:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    eff2:	681a      	ldr	r2, [r3, #0]
    eff4:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    eff6:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    eff8:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    effa:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	if (!tx->next) {
    effe:	b1d3      	cbz	r3, f036 <ctrl_tx_pause_enqueue+0x62>
}
    f000:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    f002:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
    f006:	07c9      	lsls	r1, r1, #31
    f008:	d4ee      	bmi.n	efe8 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    f00a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    f00e:	428b      	cmp	r3, r1
    f010:	d02c      	beq.n	f06c <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
    f012:	2800      	cmp	r0, #0
    f014:	d036      	beq.n	f084 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
    f016:	2a00      	cmp	r2, #0
    f018:	d0e9      	beq.n	efee <ctrl_tx_pause_enqueue+0x1a>
    f01a:	4a22      	ldr	r2, [pc, #136]	; (f0a4 <ctrl_tx_pause_enqueue+0xd0>)
    f01c:	4922      	ldr	r1, [pc, #136]	; (f0a8 <ctrl_tx_pause_enqueue+0xd4>)
    f01e:	4823      	ldr	r0, [pc, #140]	; (f0ac <ctrl_tx_pause_enqueue+0xd8>)
    f020:	f640 236e 	movw	r3, #2670	; 0xa6e
    f024:	f00c f847 	bl	1b0b6 <printk>
    f028:	4040      	eors	r0, r0
    f02a:	f380 8811 	msr	BASEPRI, r0
    f02e:	f04f 0003 	mov.w	r0, #3
    f032:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
    f034:	e7db      	b.n	efee <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
    f036:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
}
    f03a:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    f03c:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    f03e:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
			if (!pause) {
    f042:	2a00      	cmp	r2, #0
    f044:	d1db      	bne.n	effe <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
    f046:	e9c4 5568 	strd	r5, r5, [r4, #416]	; 0x1a0
	if (!tx->next) {
    f04a:	2b00      	cmp	r3, #0
    f04c:	d1d8      	bne.n	f000 <ctrl_tx_pause_enqueue+0x2c>
    f04e:	e7f2      	b.n	f036 <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
    f050:	4a14      	ldr	r2, [pc, #80]	; (f0a4 <ctrl_tx_pause_enqueue+0xd0>)
    f052:	4915      	ldr	r1, [pc, #84]	; (f0a8 <ctrl_tx_pause_enqueue+0xd4>)
    f054:	4815      	ldr	r0, [pc, #84]	; (f0ac <ctrl_tx_pause_enqueue+0xd8>)
    f056:	f44f 6328 	mov.w	r3, #2688	; 0xa80
    f05a:	f00c f82c 	bl	1b0b6 <printk>
    f05e:	4040      	eors	r0, r0
    f060:	f380 8811 	msr	BASEPRI, r0
    f064:	f04f 0003 	mov.w	r0, #3
    f068:	df02      	svc	2
    f06a:	e7c0      	b.n	efee <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
    f06c:	6819      	ldr	r1, [r3, #0]
    f06e:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    f072:	2800      	cmp	r0, #0
    f074:	d1cf      	bne.n	f016 <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
    f076:	6819      	ldr	r1, [r3, #0]
    f078:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    f07a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    f07c:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
    f07e:	2a00      	cmp	r2, #0
    f080:	d0e1      	beq.n	f046 <ctrl_tx_pause_enqueue+0x72>
    f082:	e7bc      	b.n	effe <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f084:	7919      	ldrb	r1, [r3, #4]
    f086:	f001 0103 	and.w	r1, r1, #3
    f08a:	2903      	cmp	r1, #3
    f08c:	d004      	beq.n	f098 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f08e:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
			LL_ASSERT(!pause);
    f092:	2a00      	cmp	r2, #0
    f094:	d0ab      	beq.n	efee <ctrl_tx_pause_enqueue+0x1a>
    f096:	e7c0      	b.n	f01a <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
    f098:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f09a:	2903      	cmp	r1, #3
    f09c:	d0eb      	beq.n	f076 <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f09e:	290a      	cmp	r1, #10
    f0a0:	d1f5      	bne.n	f08e <ctrl_tx_pause_enqueue+0xba>
    f0a2:	e7e8      	b.n	f076 <ctrl_tx_pause_enqueue+0xa2>
    f0a4:	00020800 	.word	0x00020800
    f0a8:	00020840 	.word	0x00020840
    f0ac:	000203b4 	.word	0x000203b4

0000f0b0 <tx_lll_flush>:
{
    f0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
    f0b4:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    f0b8:	4934      	ldr	r1, [pc, #208]	; (f18c <tx_lll_flush+0xdc>)
{
    f0ba:	b083      	sub	sp, #12
    f0bc:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    f0be:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    f0c2:	4640      	mov	r0, r8
    f0c4:	f7fa fffe 	bl	a0c4 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    f0c8:	f105 062c 	add.w	r6, r5, #44	; 0x2c
	lll_conn_flush(handle, lll);
    f0cc:	4629      	mov	r1, r5
    f0ce:	f006 fa1f 	bl	15510 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    f0d2:	6b28      	ldr	r0, [r5, #48]	; 0x30
    f0d4:	aa01      	add	r2, sp, #4
    f0d6:	4631      	mov	r1, r6
    f0d8:	f7fb f834 	bl	a144 <memq_dequeue>
	while (link) {
    f0dc:	b328      	cbz	r0, f12a <tx_lll_flush+0x7a>
    f0de:	4c2c      	ldr	r4, [pc, #176]	; (f190 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
    f0e0:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f0e4:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    f0e8:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
    f0ea:	f894 c001 	ldrb.w	ip, [r4, #1]
    f0ee:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
    f0f0:	1c53      	adds	r3, r2, #1
    f0f2:	b2db      	uxtb	r3, r3
		last = 0U;
    f0f4:	459c      	cmp	ip, r3
    f0f6:	bf08      	it	eq
    f0f8:	2300      	moveq	r3, #0
	if (last == first) {
    f0fa:	4299      	cmp	r1, r3
    f0fc:	f894 c000 	ldrb.w	ip, [r4]
    f100:	d033      	beq.n	f16a <tx_lll_flush+0xba>
		lll_tx->node = tx;
    f102:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f104:	fb12 f20c 	smulbb	r2, r2, ip
    f108:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
    f10c:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    f110:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
    f112:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    f116:	6002      	str	r2, [r0, #0]
		tx->next = link;
    f118:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    f11a:	6b28      	ldr	r0, [r5, #48]	; 0x30
	*last = idx; /* Commit: Update write index */
    f11c:	70e3      	strb	r3, [r4, #3]
    f11e:	aa01      	add	r2, sp, #4
    f120:	4631      	mov	r1, r6
    f122:	f7fb f80f 	bl	a144 <memq_dequeue>
	while (link) {
    f126:	2800      	cmp	r0, #0
    f128:	d1de      	bne.n	f0e8 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    f12a:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
	rx = (void *)&conn->llcp_terminate.node_rx;
    f12e:	f508 748e 	add.w	r4, r8, #284	; 0x11c
	LL_ASSERT(rx->hdr.link);
    f132:	b150      	cbz	r0, f14a <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
    f134:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    f136:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    f138:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
	ull_rx_put(link, rx);
    f13c:	f7fe ff2c 	bl	df98 <ull_rx_put>
	ull_rx_sched();
    f140:	f7fe ff3a 	bl	dfb8 <ull_rx_sched>
}
    f144:	b003      	add	sp, #12
    f146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    f14a:	4a12      	ldr	r2, [pc, #72]	; (f194 <tx_lll_flush+0xe4>)
    f14c:	4912      	ldr	r1, [pc, #72]	; (f198 <tx_lll_flush+0xe8>)
    f14e:	4813      	ldr	r0, [pc, #76]	; (f19c <tx_lll_flush+0xec>)
    f150:	f640 13da 	movw	r3, #2522	; 0x9da
    f154:	f00b ffaf 	bl	1b0b6 <printk>
    f158:	4040      	eors	r0, r0
    f15a:	f380 8811 	msr	BASEPRI, r0
    f15e:	f04f 0003 	mov.w	r0, #3
    f162:	df02      	svc	2
	link = rx->hdr.link;
    f164:	f8d8 011c 	ldr.w	r0, [r8, #284]	; 0x11c
    f168:	e7e4      	b.n	f134 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
    f16a:	4a0a      	ldr	r2, [pc, #40]	; (f194 <tx_lll_flush+0xe4>)
    f16c:	490c      	ldr	r1, [pc, #48]	; (f1a0 <tx_lll_flush+0xf0>)
    f16e:	480b      	ldr	r0, [pc, #44]	; (f19c <tx_lll_flush+0xec>)
    f170:	f640 13c6 	movw	r3, #2502	; 0x9c6
    f174:	f00b ff9f 	bl	1b0b6 <printk>
    f178:	4040      	eors	r0, r0
    f17a:	f380 8811 	msr	BASEPRI, r0
    f17e:	f04f 0003 	mov.w	r0, #3
    f182:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
    f184:	2300      	movs	r3, #0
    f186:	801b      	strh	r3, [r3, #0]
    f188:	deff      	udf	#255	; 0xff
    f18a:	bf00      	nop
    f18c:	200012b0 	.word	0x200012b0
    f190:	200005a4 	.word	0x200005a4
    f194:	00020800 	.word	0x00020800
    f198:	00020850 	.word	0x00020850
    f19c:	000203b4 	.word	0x000203b4
    f1a0:	00020848 	.word	0x00020848

0000f1a4 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
    f1a4:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
    f1a8:	f012 0202 	ands.w	r2, r2, #2
    f1ac:	d00a      	beq.n	f1c4 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
    f1ae:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
    f1b2:	b1d3      	cbz	r3, f1ea <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
    f1b4:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
    f1b8:	681a      	ldr	r2, [r3, #0]
    f1ba:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    f1bc:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    f1be:	680b      	ldr	r3, [r1, #0]
    f1c0:	b1d3      	cbz	r3, f1f8 <ctrl_tx_sec_enqueue+0x54>
    f1c2:	4770      	bx	lr
		if (conn->tx_head) {
    f1c4:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    f1c8:	b1cb      	cbz	r3, f1fe <ctrl_tx_sec_enqueue+0x5a>
{
    f1ca:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
    f1cc:	f890 c0bc 	ldrb.w	ip, [r0, #188]	; 0xbc
    f1d0:	f890 e0bb 	ldrb.w	lr, [r0, #187]	; 0xbb
    f1d4:	45e6      	cmp	lr, ip
    f1d6:	d004      	beq.n	f1e2 <ctrl_tx_sec_enqueue+0x3e>
    f1d8:	f890 c0bd 	ldrb.w	ip, [r0, #189]	; 0xbd
    f1dc:	f1bc 0f03 	cmp.w	ip, #3
    f1e0:	d010      	beq.n	f204 <ctrl_tx_sec_enqueue+0x60>
}
    f1e2:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
    f1e6:	f7ff bef5 	b.w	efd4 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
    f1ea:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    f1ee:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    f1f0:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
		if (!tx->next) {
    f1f4:	2b00      	cmp	r3, #0
    f1f6:	d1e4      	bne.n	f1c2 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
    f1f8:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
    f1fc:	4770      	bx	lr
	bool pause = false;
    f1fe:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
    f200:	f7ff bee8 	b.w	efd4 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    f204:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    f208:	f00c 0c03 	and.w	ip, ip, #3
    f20c:	f1bc 0f03 	cmp.w	ip, #3
    f210:	d1e7      	bne.n	f1e2 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
    f212:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    f214:	2a03      	cmp	r2, #3
    f216:	d005      	beq.n	f224 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    f218:	f1a2 020a 	sub.w	r2, r2, #10
    f21c:	fab2 f282 	clz	r2, r2
    f220:	0952      	lsrs	r2, r2, #5
    f222:	e7de      	b.n	f1e2 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
    f224:	2201      	movs	r2, #1
    f226:	e7dc      	b.n	f1e2 <ctrl_tx_sec_enqueue+0x3e>

0000f228 <ticker_stop_op_cb>:
{
    f228:	b510      	push	{r4, lr}
    f22a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f22c:	b9b0      	cbnz	r0, f25c <ticker_stop_op_cb+0x34>
	mfy.param = param;
    f22e:	4b12      	ldr	r3, [pc, #72]	; (f278 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f230:	2200      	movs	r2, #0
    f232:	2101      	movs	r1, #1
    f234:	2002      	movs	r0, #2
	mfy.param = param;
    f236:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f238:	f7fa ffe6 	bl	a208 <mayfly_enqueue>
	LL_ASSERT(!ret);
    f23c:	b900      	cbnz	r0, f240 <ticker_stop_op_cb+0x18>
}
    f23e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    f240:	4a0e      	ldr	r2, [pc, #56]	; (f27c <ticker_stop_op_cb+0x54>)
    f242:	490f      	ldr	r1, [pc, #60]	; (f280 <ticker_stop_op_cb+0x58>)
    f244:	480f      	ldr	r0, [pc, #60]	; (f284 <ticker_stop_op_cb+0x5c>)
    f246:	f44f 6318 	mov.w	r3, #2432	; 0x980
    f24a:	f00b ff34 	bl	1b0b6 <printk>
    f24e:	4040      	eors	r0, r0
    f250:	f380 8811 	msr	BASEPRI, r0
    f254:	f04f 0003 	mov.w	r0, #3
    f258:	df02      	svc	2
}
    f25a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f25c:	4a07      	ldr	r2, [pc, #28]	; (f27c <ticker_stop_op_cb+0x54>)
    f25e:	490a      	ldr	r1, [pc, #40]	; (f288 <ticker_stop_op_cb+0x60>)
    f260:	4808      	ldr	r0, [pc, #32]	; (f284 <ticker_stop_op_cb+0x5c>)
    f262:	f640 137a 	movw	r3, #2426	; 0x97a
    f266:	f00b ff26 	bl	1b0b6 <printk>
    f26a:	4040      	eors	r0, r0
    f26c:	f380 8811 	msr	BASEPRI, r0
    f270:	f04f 0003 	mov.w	r0, #3
    f274:	df02      	svc	2
    f276:	e7da      	b.n	f22e <ticker_stop_op_cb+0x6>
    f278:	2000063c 	.word	0x2000063c
    f27c:	00020800 	.word	0x00020800
    f280:	0002066c 	.word	0x0002066c
    f284:	000203b4 	.word	0x000203b4
    f288:	00020860 	.word	0x00020860

0000f28c <disabled_cb>:
{
    f28c:	b508      	push	{r3, lr}
	mfy.param = param;
    f28e:	4b0b      	ldr	r3, [pc, #44]	; (f2bc <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f290:	2200      	movs	r2, #0
	mfy.param = param;
    f292:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f294:	4611      	mov	r1, r2
    f296:	2001      	movs	r0, #1
    f298:	f7fa ffb6 	bl	a208 <mayfly_enqueue>
	LL_ASSERT(!ret);
    f29c:	b900      	cbnz	r0, f2a0 <disabled_cb+0x14>
}
    f29e:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    f2a0:	4a07      	ldr	r2, [pc, #28]	; (f2c0 <disabled_cb+0x34>)
    f2a2:	4908      	ldr	r1, [pc, #32]	; (f2c4 <disabled_cb+0x38>)
    f2a4:	4808      	ldr	r0, [pc, #32]	; (f2c8 <disabled_cb+0x3c>)
    f2a6:	f640 13ac 	movw	r3, #2476	; 0x9ac
    f2aa:	f00b ff04 	bl	1b0b6 <printk>
    f2ae:	4040      	eors	r0, r0
    f2b0:	f380 8811 	msr	BASEPRI, r0
    f2b4:	f04f 0003 	mov.w	r0, #3
    f2b8:	df02      	svc	2
}
    f2ba:	bd08      	pop	{r3, pc}
    f2bc:	2000060c 	.word	0x2000060c
    f2c0:	00020800 	.word	0x00020800
    f2c4:	0002066c 	.word	0x0002066c
    f2c8:	000203b4 	.word	0x000203b4

0000f2cc <conn_disable>:
{
    f2cc:	b538      	push	{r3, r4, r5, lr}
    f2ce:	4604      	mov	r4, r0
	return hdr->ref;
    f2d0:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    f2d4:	b353      	cbz	r3, f32c <conn_disable+0x60>
		mfy.param = &conn->lll;
    f2d6:	4d17      	ldr	r5, [pc, #92]	; (f334 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    f2d8:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
    f2da:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    f2dc:	b16b      	cbz	r3, f2fa <conn_disable+0x2e>
    f2de:	4a16      	ldr	r2, [pc, #88]	; (f338 <conn_disable+0x6c>)
    f2e0:	4916      	ldr	r1, [pc, #88]	; (f33c <conn_disable+0x70>)
    f2e2:	4817      	ldr	r0, [pc, #92]	; (f340 <conn_disable+0x74>)
    f2e4:	f640 1395 	movw	r3, #2453	; 0x995
    f2e8:	f00b fee5 	bl	1b0b6 <printk>
    f2ec:	4040      	eors	r0, r0
    f2ee:	f380 8811 	msr	BASEPRI, r0
    f2f2:	f04f 0003 	mov.w	r0, #3
    f2f6:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    f2f8:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    f2fa:	4912      	ldr	r1, [pc, #72]	; (f344 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f2fc:	4b0d      	ldr	r3, [pc, #52]	; (f334 <conn_disable+0x68>)
    f2fe:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    f300:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f304:	4611      	mov	r1, r2
    f306:	2001      	movs	r0, #1
    f308:	f7fa ff7e 	bl	a208 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f30c:	b900      	cbnz	r0, f310 <conn_disable+0x44>
}
    f30e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    f310:	4a09      	ldr	r2, [pc, #36]	; (f338 <conn_disable+0x6c>)
    f312:	490d      	ldr	r1, [pc, #52]	; (f348 <conn_disable+0x7c>)
    f314:	480a      	ldr	r0, [pc, #40]	; (f340 <conn_disable+0x74>)
    f316:	f640 139c 	movw	r3, #2460	; 0x99c
    f31a:	f00b fecc 	bl	1b0b6 <printk>
    f31e:	4040      	eors	r0, r0
    f320:	f380 8811 	msr	BASEPRI, r0
    f324:	f04f 0003 	mov.w	r0, #3
    f328:	df02      	svc	2
}
    f32a:	bd38      	pop	{r3, r4, r5, pc}
    f32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
    f330:	f7ff bfac 	b.w	f28c <disabled_cb>
    f334:	2000062c 	.word	0x2000062c
    f338:	00020800 	.word	0x00020800
    f33c:	0002086c 	.word	0x0002086c
    f340:	000203b4 	.word	0x000203b4
    f344:	0000f28d 	.word	0x0000f28d
    f348:	0002066c 	.word	0x0002066c

0000f34c <conn_setup_adv_scan_disabled_cb>:
{
    f34c:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    f34e:	6883      	ldr	r3, [r0, #8]
    f350:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    f352:	7f53      	ldrb	r3, [r2, #29]
    f354:	09db      	lsrs	r3, r3, #7
    f356:	d105      	bne.n	f364 <conn_setup_adv_scan_disabled_cb+0x18>
		ull_central_setup(rx, ftr, lll);
    f358:	4601      	mov	r1, r0
}
    f35a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_central_setup(rx, ftr, lll);
    f35e:	3108      	adds	r1, #8
    f360:	f7f3 bf5e 	b.w	3220 <ull_central_setup>
		LL_ASSERT(0);
    f364:	4a06      	ldr	r2, [pc, #24]	; (f380 <conn_setup_adv_scan_disabled_cb+0x34>)
    f366:	4907      	ldr	r1, [pc, #28]	; (f384 <conn_setup_adv_scan_disabled_cb+0x38>)
    f368:	4807      	ldr	r0, [pc, #28]	; (f388 <conn_setup_adv_scan_disabled_cb+0x3c>)
    f36a:	f640 03d5 	movw	r3, #2261	; 0x8d5
    f36e:	f00b fea2 	bl	1b0b6 <printk>
    f372:	4040      	eors	r0, r0
    f374:	f380 8811 	msr	BASEPRI, r0
    f378:	f04f 0003 	mov.w	r0, #3
    f37c:	df02      	svc	2
}
    f37e:	bd08      	pop	{r3, pc}
    f380:	00020800 	.word	0x00020800
    f384:	00020414 	.word	0x00020414
    f388:	000203b4 	.word	0x000203b4

0000f38c <ticker_start_conn_op_cb>:
{
    f38c:	b510      	push	{r4, lr}
    f38e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f390:	b990      	cbnz	r0, f3b8 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    f392:	4620      	mov	r0, r4
    f394:	f7fe fd36 	bl	de04 <ull_update_unmark>
	LL_ASSERT(p == param);
    f398:	4284      	cmp	r4, r0
    f39a:	d00c      	beq.n	f3b6 <ticker_start_conn_op_cb+0x2a>
    f39c:	4a0d      	ldr	r2, [pc, #52]	; (f3d4 <ticker_start_conn_op_cb+0x48>)
    f39e:	490e      	ldr	r1, [pc, #56]	; (f3d8 <ticker_start_conn_op_cb+0x4c>)
    f3a0:	480e      	ldr	r0, [pc, #56]	; (f3dc <ticker_start_conn_op_cb+0x50>)
    f3a2:	f640 03b7 	movw	r3, #2231	; 0x8b7
    f3a6:	f00b fe86 	bl	1b0b6 <printk>
    f3aa:	4040      	eors	r0, r0
    f3ac:	f380 8811 	msr	BASEPRI, r0
    f3b0:	f04f 0003 	mov.w	r0, #3
    f3b4:	df02      	svc	2
}
    f3b6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f3b8:	4a06      	ldr	r2, [pc, #24]	; (f3d4 <ticker_start_conn_op_cb+0x48>)
    f3ba:	4909      	ldr	r1, [pc, #36]	; (f3e0 <ticker_start_conn_op_cb+0x54>)
    f3bc:	4807      	ldr	r0, [pc, #28]	; (f3dc <ticker_start_conn_op_cb+0x50>)
    f3be:	f640 03b4 	movw	r3, #2228	; 0x8b4
    f3c2:	f00b fe78 	bl	1b0b6 <printk>
    f3c6:	4040      	eors	r0, r0
    f3c8:	f380 8811 	msr	BASEPRI, r0
    f3cc:	f04f 0003 	mov.w	r0, #3
    f3d0:	df02      	svc	2
    f3d2:	e7de      	b.n	f392 <ticker_start_conn_op_cb+0x6>
    f3d4:	00020800 	.word	0x00020800
    f3d8:	00020880 	.word	0x00020880
    f3dc:	000203b4 	.word	0x000203b4
    f3e0:	00020860 	.word	0x00020860

0000f3e4 <ticker_stop_conn_op_cb>:
{
    f3e4:	b510      	push	{r4, lr}
    f3e6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f3e8:	b990      	cbnz	r0, f410 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    f3ea:	4620      	mov	r0, r4
    f3ec:	f7fe fd00 	bl	ddf0 <ull_update_mark>
	LL_ASSERT(p == param);
    f3f0:	4284      	cmp	r4, r0
    f3f2:	d00c      	beq.n	f40e <ticker_stop_conn_op_cb+0x2a>
    f3f4:	4a0d      	ldr	r2, [pc, #52]	; (f42c <ticker_stop_conn_op_cb+0x48>)
    f3f6:	490e      	ldr	r1, [pc, #56]	; (f430 <ticker_stop_conn_op_cb+0x4c>)
    f3f8:	480e      	ldr	r0, [pc, #56]	; (f434 <ticker_stop_conn_op_cb+0x50>)
    f3fa:	f640 03ad 	movw	r3, #2221	; 0x8ad
    f3fe:	f00b fe5a 	bl	1b0b6 <printk>
    f402:	4040      	eors	r0, r0
    f404:	f380 8811 	msr	BASEPRI, r0
    f408:	f04f 0003 	mov.w	r0, #3
    f40c:	df02      	svc	2
}
    f40e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f410:	4a06      	ldr	r2, [pc, #24]	; (f42c <ticker_stop_conn_op_cb+0x48>)
    f412:	4909      	ldr	r1, [pc, #36]	; (f438 <ticker_stop_conn_op_cb+0x54>)
    f414:	4807      	ldr	r0, [pc, #28]	; (f434 <ticker_stop_conn_op_cb+0x50>)
    f416:	f640 03aa 	movw	r3, #2218	; 0x8aa
    f41a:	f00b fe4c 	bl	1b0b6 <printk>
    f41e:	4040      	eors	r0, r0
    f420:	f380 8811 	msr	BASEPRI, r0
    f424:	f04f 0003 	mov.w	r0, #3
    f428:	df02      	svc	2
    f42a:	e7de      	b.n	f3ea <ticker_stop_conn_op_cb+0x6>
    f42c:	00020800 	.word	0x00020800
    f430:	00020880 	.word	0x00020880
    f434:	000203b4 	.word	0x000203b4
    f438:	00020860 	.word	0x00020860

0000f43c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    f43c:	b900      	cbnz	r0, f440 <ticker_update_conn_op_cb+0x4>
    f43e:	4770      	bx	lr
{
    f440:	b510      	push	{r4, lr}
    f442:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    f444:	f7fe fcea 	bl	de1c <ull_update_mark_get>
    f448:	4284      	cmp	r4, r0
    f44a:	d010      	beq.n	f46e <ticker_update_conn_op_cb+0x32>
    f44c:	f7fe fcca 	bl	dde4 <ull_disable_mark_get>
    f450:	4284      	cmp	r4, r0
    f452:	d00c      	beq.n	f46e <ticker_update_conn_op_cb+0x32>
    f454:	4a06      	ldr	r2, [pc, #24]	; (f470 <__kernel_ram_size>)
    f456:	4907      	ldr	r1, [pc, #28]	; (f474 <__kernel_ram_size+0x4>)
    f458:	4807      	ldr	r0, [pc, #28]	; (f478 <__kernel_ram_size+0x8>)
    f45a:	f640 03a1 	movw	r3, #2209	; 0x8a1
    f45e:	f00b fe2a 	bl	1b0b6 <printk>
    f462:	4040      	eors	r0, r0
    f464:	f380 8811 	msr	BASEPRI, r0
    f468:	f04f 0003 	mov.w	r0, #3
    f46c:	df02      	svc	2
}
    f46e:	bd10      	pop	{r4, pc}
    f470:	00020800 	.word	0x00020800
    f474:	0002088c 	.word	0x0002088c
    f478:	000203b4 	.word	0x000203b4

0000f47c <tx_ull_dequeue>:
{
    f47c:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    f47e:	e9d0 2467 	ldrd	r2, r4, [r0, #412]	; 0x19c
{
    f482:	4603      	mov	r3, r0
    f484:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    f486:	b164      	cbz	r4, f4a2 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
    f488:	4294      	cmp	r4, r2
    f48a:	d021      	beq.n	f4d0 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    f48c:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
		if (conn->tx_head == conn->tx_data) {
    f490:	428a      	cmp	r2, r1
    f492:	d00b      	beq.n	f4ac <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
    f494:	6811      	ldr	r1, [r2, #0]
    f496:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
		tx->next = NULL;
    f49a:	2200      	movs	r2, #0
}
    f49c:	bc10      	pop	{r4}
		tx->next = NULL;
    f49e:	6002      	str	r2, [r0, #0]
}
    f4a0:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    f4a2:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
    f4a6:	4291      	cmp	r1, r2
    f4a8:	d104      	bne.n	f4b4 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
    f4aa:	b18a      	cbz	r2, f4d0 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
    f4ac:	6809      	ldr	r1, [r1, #0]
    f4ae:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    f4b2:	e7ef      	b.n	f494 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f4b4:	7911      	ldrb	r1, [r2, #4]
    f4b6:	f001 0103 	and.w	r1, r1, #3
    f4ba:	2903      	cmp	r1, #3
    f4bc:	d013      	beq.n	f4e6 <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
    f4be:	6812      	ldr	r2, [r2, #0]
    f4c0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
			conn->tx_ctrl = NULL;
    f4c4:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    f4c6:	e9c3 2268 	strd	r2, r2, [r3, #416]	; 0x1a0
}
    f4ca:	bc10      	pop	{r4}
		tx->next = tx;
    f4cc:	6000      	str	r0, [r0, #0]
}
    f4ce:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    f4d0:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
		conn->tx_head = conn->tx_head->next;
    f4d4:	6812      	ldr	r2, [r2, #0]
    f4d6:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    f4da:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
    f4dc:	bf18      	it	ne
    f4de:	f8c3 21a0 	strne.w	r2, [r3, #416]	; 0x1a0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    f4e2:	d1f2      	bne.n	f4ca <tx_ull_dequeue+0x4e>
    f4e4:	e7ee      	b.n	f4c4 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
    f4e6:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f4e8:	2903      	cmp	r1, #3
    f4ea:	d0d3      	beq.n	f494 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f4ec:	290a      	cmp	r1, #10
    f4ee:	d1e6      	bne.n	f4be <tx_ull_dequeue+0x42>
    f4f0:	e7d0      	b.n	f494 <tx_ull_dequeue+0x18>
    f4f2:	bf00      	nop

0000f4f4 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
    f4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4f6:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
    f4f8:	f890 00ba 	ldrb.w	r0, [r0, #186]	; 0xba
    f4fc:	0787      	lsls	r7, r0, #30
{
    f4fe:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
    f500:	d433      	bmi.n	f56a <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f502:	482e      	ldr	r0, [pc, #184]	; (f5bc <reject_ext_ind_send+0xc8>)
    f504:	4617      	mov	r7, r2
    f506:	461e      	mov	r6, r3
    f508:	f7fa fda6 	bl	a058 <mem_acquire>
	if (!tx) {
    f50c:	2800      	cmp	r0, #0
    f50e:	d038      	beq.n	f582 <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
    f510:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    f514:	f043 0302 	orr.w	r3, r3, #2
    f518:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    f51c:	2303      	movs	r3, #3
    f51e:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    f520:	2211      	movs	r2, #17
	    conn->tx_head &&
    f522:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    f526:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f528:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
    f52a:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    f52e:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f530:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    f534:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f536:	7102      	strb	r2, [r0, #4]
	if (
    f538:	b1db      	cbz	r3, f572 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
    f53a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    f53e:	0796      	lsls	r6, r2, #30
    f540:	d417      	bmi.n	f572 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
    f542:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    f546:	07d2      	lsls	r2, r2, #31
    f548:	d413      	bmi.n	f572 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
    f54a:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    f54e:	4293      	cmp	r3, r2
    f550:	d022      	beq.n	f598 <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
    f552:	b1c9      	cbz	r1, f588 <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
    f554:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    f558:	681a      	ldr	r2, [r3, #0]
    f55a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    f55c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    f55e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    f560:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    f564:	b90b      	cbnz	r3, f56a <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
    f566:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    f56a:	2301      	movs	r3, #1
    f56c:	712b      	strb	r3, [r5, #4]
		*err = 0U;
    f56e:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
    f570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
    f572:	2900      	cmp	r1, #0
    f574:	d1ee      	bne.n	f554 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
    f576:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    f578:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    f57c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    f580:	e7f0      	b.n	f564 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
    f582:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    f586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f588:	791a      	ldrb	r2, [r3, #4]
    f58a:	f002 0203 	and.w	r2, r2, #3
    f58e:	2a03      	cmp	r2, #3
    f590:	d00e      	beq.n	f5b0 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f592:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    f596:	e7df      	b.n	f558 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
    f598:	681a      	ldr	r2, [r3, #0]
    f59a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    f59e:	2900      	cmp	r1, #0
    f5a0:	d1d8      	bne.n	f554 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
    f5a2:	681a      	ldr	r2, [r3, #0]
    f5a4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    f5a6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    f5a8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    f5aa:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    f5ae:	e7d9      	b.n	f564 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
    f5b0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f5b2:	2a03      	cmp	r2, #3
    f5b4:	d0f5      	beq.n	f5a2 <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f5b6:	2a0a      	cmp	r2, #10
    f5b8:	d1eb      	bne.n	f592 <reject_ext_ind_send+0x9e>
    f5ba:	e7f2      	b.n	f5a2 <reject_ext_ind_send+0xae>
    f5bc:	200022a4 	.word	0x200022a4

0000f5c0 <event_len_prep>:
{
    f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
    f5c2:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
    f5c6:	f003 0207 	and.w	r2, r3, #7
{
    f5ca:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
    f5cc:	2a06      	cmp	r2, #6
    f5ce:	f200 80d4 	bhi.w	f77a <event_len_prep+0x1ba>
    f5d2:	e8df f002 	tbb	[pc, r2]
    f5d6:	4704      	.short	0x4704
    f5d8:	48484747 	.word	0x48484747
    f5dc:	47          	.byte	0x47
    f5dd:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f5de:	486e      	ldr	r0, [pc, #440]	; (f798 <event_len_prep+0x1d8>)
    f5e0:	f7fa fd3a 	bl	a058 <mem_acquire>
		if (!tx) {
    f5e4:	2800      	cmp	r0, #0
    f5e6:	d03d      	beq.n	f664 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    f5e8:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    f5ec:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->default_tx_time = conn->llcp_length.tx_time;
    f5f0:	f8b4 518e 	ldrh.w	r5, [r4, #398]	; 0x18e
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    f5f4:	f8a4 20b6 	strh.w	r2, [r4, #182]	; 0xb6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    f5f8:	2301      	movs	r3, #1
    f5fa:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
    f5fe:	f8a4 50b8 	strh.w	r5, [r4, #184]	; 0xb8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    f602:	f884 1186 	strb.w	r1, [r4, #390]	; 0x186
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    f606:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    f608:	72c3      	strb	r3, [r0, #11]
    f60a:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    f60c:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
    f60e:	2309      	movs	r3, #9
    f610:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    f612:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    f614:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    f616:	2214      	movs	r2, #20
	    conn->tx_head &&
    f618:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    f61c:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    f61e:	2100      	movs	r1, #0
    f620:	221b      	movs	r2, #27
    f622:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
    f624:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    f628:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f62a:	7902      	ldrb	r2, [r0, #4]
    f62c:	f042 0203 	orr.w	r2, r2, #3
    f630:	7102      	strb	r2, [r0, #4]
	if (
    f632:	b13b      	cbz	r3, f644 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
    f634:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
    f638:	0795      	lsls	r5, r2, #30
    f63a:	d403      	bmi.n	f644 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
    f63c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
    f640:	07d2      	lsls	r2, r2, #31
    f642:	d573      	bpl.n	f72c <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
    f644:	2900      	cmp	r1, #0
    f646:	d07f      	beq.n	f748 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
    f648:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    f64c:	681a      	ldr	r2, [r3, #0]
    f64e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    f650:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    f652:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    f654:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    f658:	2b00      	cmp	r3, #0
    f65a:	d056      	beq.n	f70a <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
    f65c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    f660:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
}
    f664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    f666:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    f66a:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
		lll->max_rx_time = conn->llcp_length.rx_time;
    f66e:	f8b0 118c 	ldrh.w	r1, [r0, #396]	; 0x18c
		tx_octets = conn->llcp_length.tx_octets;
    f672:	f8b0 718a 	ldrh.w	r7, [r0, #394]	; 0x18a
		uint16_t tx_time = conn->llcp_length.tx_time;
    f676:	f8b0 618e 	ldrh.w	r6, [r0, #398]	; 0x18e
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    f67a:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    f67e:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    f680:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    f684:	d024      	beq.n	f6d0 <event_len_prep+0x110>
			conn->llcp_length.state =
    f686:	2206      	movs	r2, #6
    f688:	f362 0302 	bfi	r3, r2, #0, #3
    f68c:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
		rx = conn->llcp_rx;
    f690:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
		LL_ASSERT(rx && rx->hdr.link);
    f694:	b335      	cbz	r5, f6e4 <event_len_prep+0x124>
    f696:	6828      	ldr	r0, [r5, #0]
    f698:	b320      	cbz	r0, f6e4 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    f69a:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    f69c:	6842      	ldr	r2, [r0, #4]
    f69e:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    f6a2:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
    f6a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    f6a8:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
    f6aa:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
    f6ac:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
    f6ae:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f6b0:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f6b2:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    f6b4:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    f6b6:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f6ba:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    f6bc:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    f6be:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f6c0:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f6c2:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
    f6c4:	f7fe fad8 	bl	dc78 <ll_rx_put>
}
    f6c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
    f6cc:	f7fe bade 	b.w	dc8c <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
    f6d0:	f8b0 2190 	ldrh.w	r2, [r0, #400]	; 0x190
    f6d4:	b9e2      	cbnz	r2, f710 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
    f6d6:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
				conn->procedure_expire = 0U;
    f6da:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
				conn->llcp_length.ack = conn->llcp_length.req;
    f6de:	f880 3185 	strb.w	r3, [r0, #389]	; 0x185
				conn->procedure_expire = 0U;
    f6e2:	e7d5      	b.n	f690 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
    f6e4:	4a2d      	ldr	r2, [pc, #180]	; (f79c <event_len_prep+0x1dc>)
    f6e6:	492e      	ldr	r1, [pc, #184]	; (f7a0 <event_len_prep+0x1e0>)
    f6e8:	482e      	ldr	r0, [pc, #184]	; (f7a4 <event_len_prep+0x1e4>)
    f6ea:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
    f6ee:	f00b fce2 	bl	1b0b6 <printk>
    f6f2:	4040      	eors	r0, r0
    f6f4:	f380 8811 	msr	BASEPRI, r0
    f6f8:	f04f 0003 	mov.w	r0, #3
    f6fc:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    f6fe:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    f700:	f8b4 c040 	ldrh.w	ip, [r4, #64]	; 0x40
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    f704:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
    f708:	e7c7      	b.n	f69a <event_len_prep+0xda>
		conn->tx_data_last = tx;
    f70a:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    f70e:	e7a5      	b.n	f65c <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
    f710:	f8a0 218a 	strh.w	r2, [r0, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
    f714:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    f716:	f362 0302 	bfi	r3, r2, #0, #3
    f71a:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
				conn->llcp_length.tx_time =
    f71e:	f8b0 3192 	ldrh.w	r3, [r0, #402]	; 0x192
				conn->llcp_length.cache.tx_octets = 0;
    f722:	f8a0 2190 	strh.w	r2, [r0, #400]	; 0x190
				conn->llcp_length.tx_time =
    f726:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    f72a:	e7b1      	b.n	f690 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
    f72c:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    f730:	4293      	cmp	r3, r2
    f732:	d00f      	beq.n	f754 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
    f734:	2900      	cmp	r1, #0
    f736:	d187      	bne.n	f648 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f738:	791a      	ldrb	r2, [r3, #4]
    f73a:	f002 0203 	and.w	r2, r2, #3
    f73e:	2a03      	cmp	r2, #3
    f740:	d015      	beq.n	f76e <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f742:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    f746:	e781      	b.n	f64c <event_len_prep+0x8c>
			tx->next = conn->tx_head;
    f748:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    f74a:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
    f74e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
    f752:	e781      	b.n	f658 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
    f754:	681a      	ldr	r2, [r3, #0]
    f756:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
    f75a:	2900      	cmp	r1, #0
    f75c:	f47f af74 	bne.w	f648 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
    f760:	681a      	ldr	r2, [r3, #0]
    f762:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    f764:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    f766:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    f768:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
    f76c:	e774      	b.n	f658 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
    f76e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f770:	2a03      	cmp	r2, #3
    f772:	d0f5      	beq.n	f760 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f774:	2a0a      	cmp	r2, #10
    f776:	d1e4      	bne.n	f742 <event_len_prep+0x182>
    f778:	e7f2      	b.n	f760 <event_len_prep+0x1a0>
		LL_ASSERT(0);
    f77a:	4a08      	ldr	r2, [pc, #32]	; (f79c <event_len_prep+0x1dc>)
    f77c:	490a      	ldr	r1, [pc, #40]	; (f7a8 <event_len_prep+0x1e8>)
    f77e:	4809      	ldr	r0, [pc, #36]	; (f7a4 <event_len_prep+0x1e4>)
    f780:	f241 03ea 	movw	r3, #4330	; 0x10ea
    f784:	f00b fc97 	bl	1b0b6 <printk>
    f788:	4040      	eors	r0, r0
    f78a:	f380 8811 	msr	BASEPRI, r0
    f78e:	f04f 0003 	mov.w	r0, #3
    f792:	df02      	svc	2
}
    f794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f796:	bf00      	nop
    f798:	200022a4 	.word	0x200022a4
    f79c:	00020800 	.word	0x00020800
    f7a0:	000208e0 	.word	0x000208e0
    f7a4:	000203b4 	.word	0x000203b4
    f7a8:	00020414 	.word	0x00020414

0000f7ac <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    f7ac:	4801      	ldr	r0, [pc, #4]	; (f7b4 <ll_conn_acquire+0x8>)
    f7ae:	f7fa bc53 	b.w	a058 <mem_acquire>
    f7b2:	bf00      	nop
    f7b4:	2000220c 	.word	0x2000220c

0000f7b8 <ll_conn_release>:
	mem_release(conn, &conn_free);
    f7b8:	4901      	ldr	r1, [pc, #4]	; (f7c0 <ll_conn_release+0x8>)
    f7ba:	f7fa bc67 	b.w	a08c <mem_release>
    f7be:	bf00      	nop
    f7c0:	2000220c 	.word	0x2000220c

0000f7c4 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    f7c4:	4902      	ldr	r1, [pc, #8]	; (f7d0 <ll_conn_handle_get+0xc>)
    f7c6:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
    f7ca:	f7fa bc7b 	b.w	a0c4 <mem_index_get>
    f7ce:	bf00      	nop
    f7d0:	200012b0 	.word	0x200012b0

0000f7d4 <ll_conn_get>:
{
    f7d4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f7d6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    f7da:	4801      	ldr	r0, [pc, #4]	; (f7e0 <ll_conn_get+0xc>)
    f7dc:	f7fa bc6e 	b.w	a0bc <mem_get>
    f7e0:	200012b0 	.word	0x200012b0

0000f7e4 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    f7e4:	b958      	cbnz	r0, f7fe <ll_connected_get+0x1a>
{
    f7e6:	b508      	push	{r3, lr}
    f7e8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f7ea:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    f7ee:	4805      	ldr	r0, [pc, #20]	; (f804 <ll_connected_get+0x20>)
    f7f0:	f7fa fc64 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
    f7f4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    f7f6:	b903      	cbnz	r3, f7fa <ll_connected_get+0x16>
}
    f7f8:	bd08      	pop	{r3, pc}
		return NULL;
    f7fa:	2000      	movs	r0, #0
}
    f7fc:	bd08      	pop	{r3, pc}
		return NULL;
    f7fe:	2000      	movs	r0, #0
}
    f800:	4770      	bx	lr
    f802:	bf00      	nop
    f804:	200012b0 	.word	0x200012b0

0000f808 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    f808:	4801      	ldr	r0, [pc, #4]	; (f810 <ll_tx_mem_acquire+0x8>)
    f80a:	f7fa bc25 	b.w	a058 <mem_acquire>
    f80e:	bf00      	nop
    f810:	20002234 	.word	0x20002234

0000f814 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    f814:	4901      	ldr	r1, [pc, #4]	; (f81c <ll_tx_mem_release+0x8>)
    f816:	f7fa bc39 	b.w	a08c <mem_release>
    f81a:	bf00      	nop
    f81c:	20002234 	.word	0x20002234

0000f820 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    f820:	2800      	cmp	r0, #0
    f822:	d136      	bne.n	f892 <ll_tx_mem_enqueue+0x72>
{
    f824:	b570      	push	{r4, r5, r6, lr}
    f826:	4602      	mov	r2, r0
    f828:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f82a:	481b      	ldr	r0, [pc, #108]	; (f898 <ll_tx_mem_enqueue+0x78>)
    f82c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    f830:	f7fa fc44 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
    f834:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f836:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
    f838:	bb2e      	cbnz	r6, f886 <ll_tx_mem_enqueue+0x66>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    f83a:	4c18      	ldr	r4, [pc, #96]	; (f89c <ll_tx_mem_enqueue+0x7c>)
    f83c:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
    f840:	7862      	ldrb	r2, [r4, #1]
    f842:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
    f844:	f10c 0301 	add.w	r3, ip, #1
    f848:	b2db      	uxtb	r3, r3
		last = 0U;
    f84a:	429a      	cmp	r2, r3
    f84c:	bf08      	it	eq
    f84e:	2300      	moveq	r3, #0
    f850:	78a2      	ldrb	r2, [r4, #2]
	if (last == first) {
    f852:	429a      	cmp	r2, r3
    f854:	d01a      	beq.n	f88c <ll_tx_mem_enqueue+0x6c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f856:	fb1c fc00 	smulbb	ip, ip, r0
    f85a:	f104 0e04 	add.w	lr, r4, #4
	lll_tx->handle = handle;
    f85e:	f82e 600c 	strh.w	r6, [lr, ip]
    f862:	44f4      	add	ip, lr
	lll_tx->node = tx;
    f864:	f8cc 5004 	str.w	r5, [ip, #4]
	*last = idx; /* Commit: Update write index */
    f868:	70e3      	strb	r3, [r4, #3]
    f86a:	780b      	ldrb	r3, [r1, #0]
	if (ull_ref_get(&conn->ull)) {
    f86c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f870:	b903      	cbnz	r3, f874 <ll_tx_mem_enqueue+0x54>
}
    f872:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
    f874:	4b0a      	ldr	r3, [pc, #40]	; (f8a0 <ll_tx_mem_enqueue+0x80>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    f876:	4632      	mov	r2, r6
		mfy.param = conn;
    f878:	6099      	str	r1, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    f87a:	2003      	movs	r0, #3
    f87c:	2101      	movs	r1, #1
    f87e:	f7fa fcc3 	bl	a208 <mayfly_enqueue>
	return 0;
    f882:	4630      	mov	r0, r6
}
    f884:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    f886:	f06f 0015 	mvn.w	r0, #21
}
    f88a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f88c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    f890:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    f892:	f06f 0015 	mvn.w	r0, #21
}
    f896:	4770      	bx	lr
    f898:	200012b0 	.word	0x200012b0
    f89c:	200005e8 	.word	0x200005e8
    f8a0:	2000061c 	.word	0x2000061c

0000f8a4 <ll_conn_update>:
{
    f8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f8a8:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    f8ac:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    f8b0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
    f8b4:	2800      	cmp	r0, #0
    f8b6:	d151      	bne.n	f95c <ll_conn_update+0xb8>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f8b8:	460c      	mov	r4, r1
    f8ba:	4615      	mov	r5, r2
    f8bc:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    f8c0:	4602      	mov	r2, r0
    f8c2:	483c      	ldr	r0, [pc, #240]	; (f9b4 <ll_conn_update+0x110>)
    f8c4:	461e      	mov	r6, r3
    f8c6:	f7fa fbf9 	bl	a0bc <mem_get>
    f8ca:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
    f8cc:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    f8ce:	2800      	cmp	r0, #0
    f8d0:	d144      	bne.n	f95c <ll_conn_update+0xb8>
	if (!cmd) {
    f8d2:	bb1c      	cbnz	r4, f91c <ll_conn_update+0x78>
		if (!conn->llcp_conn_param.disabled &&
    f8d4:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
    f8d8:	0699      	lsls	r1, r3, #26
    f8da:	d446      	bmi.n	f96a <ll_conn_update+0xc6>
		    (!conn->common.fex_valid ||
    f8dc:	f89c 30ba 	ldrb.w	r3, [ip, #186]	; 0xba
		if (!conn->llcp_conn_param.disabled &&
    f8e0:	07da      	lsls	r2, r3, #31
    f8e2:	d43e      	bmi.n	f962 <ll_conn_update+0xbe>
			if (conn->llcp_conn_param.req !=
    f8e4:	f89c 215c 	ldrb.w	r2, [ip, #348]	; 0x15c
    f8e8:	f89c 315d 	ldrb.w	r3, [ip, #349]	; 0x15d
    f8ec:	4293      	cmp	r3, r2
    f8ee:	d132      	bne.n	f956 <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
    f8f0:	f8bc 215e 	ldrh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
    f8f4:	f8ac 6160 	strh.w	r6, [ip, #352]	; 0x160
			conn->llcp_conn_param.state = cmd;
    f8f8:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
    f8fc:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
    f8fe:	f042 0210 	orr.w	r2, r2, #16
    f902:	f8ac 215e 	strh.w	r2, [ip, #350]	; 0x15e
			conn->llcp_conn_param.req++;
    f906:	f88c 315c 	strb.w	r3, [ip, #348]	; 0x15c
			conn->llcp_conn_param.interval_max = interval_max;
    f90a:	f8ac 9162 	strh.w	r9, [ip, #354]	; 0x162
			conn->llcp_conn_param.latency = latency;
    f90e:	f8ac 8164 	strh.w	r8, [ip, #356]	; 0x164
			conn->llcp_conn_param.timeout = timeout;
    f912:	f8ac 7166 	strh.w	r7, [ip, #358]	; 0x166
	return 0;
    f916:	2000      	movs	r0, #0
}
    f918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
    f91c:	3c01      	subs	r4, #1
		if (cmd) {
    f91e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    f922:	d0df      	beq.n	f8e4 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
    f924:	f89c 215d 	ldrb.w	r2, [ip, #349]	; 0x15d
    f928:	f89c 315c 	ldrb.w	r3, [ip, #348]	; 0x15c
    f92c:	429a      	cmp	r2, r3
    f92e:	d012      	beq.n	f956 <ll_conn_update+0xb2>
			    (conn->llcp_conn_param.state !=
    f930:	f89c 315e 	ldrb.w	r3, [ip, #350]	; 0x15e
			     conn->llcp_conn_param.ack) ||
    f934:	f003 020f 	and.w	r2, r3, #15
    f938:	2a03      	cmp	r2, #3
    f93a:	d10c      	bne.n	f956 <ll_conn_update+0xb2>
			conn->llcp_conn_param.state = cmd;
    f93c:	f004 040f 	and.w	r4, r4, #15
    f940:	f023 031f 	bic.w	r3, r3, #31
    f944:	f044 0410 	orr.w	r4, r4, #16
    f948:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
    f94a:	f88c 515f 	strb.w	r5, [ip, #351]	; 0x15f
			conn->llcp_conn_param.state = cmd;
    f94e:	f88c 415e 	strb.w	r4, [ip, #350]	; 0x15e
}
    f952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    f956:	200c      	movs	r0, #12
}
    f958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f95c:	2002      	movs	r0, #2
}
    f95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
    f962:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
		    (!conn->common.fex_valid ||
    f966:	079b      	lsls	r3, r3, #30
    f968:	d4bc      	bmi.n	f8e4 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
    f96a:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
    f96e:	2b00      	cmp	r3, #0
    f970:	db1e      	blt.n	f9b0 <ll_conn_update+0x10c>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
    f972:	f89c 20e4 	ldrb.w	r2, [ip, #228]	; 0xe4
    f976:	f89c 30e5 	ldrb.w	r3, [ip, #229]	; 0xe5
    f97a:	4293      	cmp	r3, r2
    f97c:	d1eb      	bne.n	f956 <ll_conn_update+0xb2>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f97e:	f89c 20e6 	ldrb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.interval = interval_max;
    f982:	f8ac 90e8 	strh.w	r9, [ip, #232]	; 0xe8
		conn->llcp_cu.req++;
    f986:	3301      	adds	r3, #1
    f988:	f88c 30e4 	strb.w	r3, [ip, #228]	; 0xe4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f98c:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
    f990:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f992:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
    f996:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
    f998:	f88c 30f4 	strb.w	r3, [ip, #244]	; 0xf4
		conn->llcp_cu.latency = latency;
    f99c:	f8ac 80ea 	strh.w	r8, [ip, #234]	; 0xea
		conn->llcp_cu.timeout = timeout;
    f9a0:	f8ac 70ec 	strh.w	r7, [ip, #236]	; 0xec
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    f9a4:	f88c 20e6 	strb.w	r2, [ip, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
    f9a8:	f8cc 00f0 	str.w	r0, [ip, #240]	; 0xf0
}
    f9ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    f9b0:	201a      	movs	r0, #26
    f9b2:	e7d1      	b.n	f958 <ll_conn_update+0xb4>
    f9b4:	200012b0 	.word	0x200012b0

0000f9b8 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    f9b8:	b9d0      	cbnz	r0, f9f0 <ll_chm_get+0x38>
{
    f9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9bc:	4602      	mov	r2, r0
    f9be:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f9c0:	480c      	ldr	r0, [pc, #48]	; (f9f4 <ll_chm_get+0x3c>)
    f9c2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    f9c6:	f7fa fb79 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
    f9ca:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f9cc:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    f9ce:	b96e      	cbnz	r6, f9ec <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
    f9d0:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
    f9d4:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
		memcpy(chm, conn->lll.data_chan_map,
    f9d8:	2205      	movs	r2, #5
    f9da:	4639      	mov	r1, r7
    f9dc:	4628      	mov	r0, r5
    f9de:	f00c f9a4 	bl	1bd2a <memcpy>
	} while (conn->chm_updated);
    f9e2:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    f9e6:	2800      	cmp	r0, #0
    f9e8:	d1f4      	bne.n	f9d4 <ll_chm_get+0x1c>
}
    f9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f9ec:	2002      	movs	r0, #2
}
    f9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f9f0:	2002      	movs	r0, #2
}
    f9f2:	4770      	bx	lr
    f9f4:	200012b0 	.word	0x200012b0

0000f9f8 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    f9f8:	2800      	cmp	r0, #0
    f9fa:	d13a      	bne.n	fa72 <ll_terminate_ind_send+0x7a>
{
    f9fc:	b510      	push	{r4, lr}
    f9fe:	4602      	mov	r2, r0
    fa00:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fa02:	481d      	ldr	r0, [pc, #116]	; (fa78 <ll_terminate_ind_send+0x80>)
    fa04:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fa08:	f7fa fb58 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
    fa0c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    fa0e:	bb73      	cbnz	r3, fa6e <ll_terminate_ind_send+0x76>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
    fa10:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    fa14:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
    fa18:	429a      	cmp	r2, r3
    fa1a:	d126      	bne.n	fa6a <ll_terminate_ind_send+0x72>
	switch (reason) {
    fa1c:	2c29      	cmp	r4, #41	; 0x29
    fa1e:	d819      	bhi.n	fa54 <ll_terminate_ind_send+0x5c>
    fa20:	2c04      	cmp	r4, #4
    fa22:	d919      	bls.n	fa58 <ll_terminate_ind_send+0x60>
    fa24:	1f62      	subs	r2, r4, #5
    fa26:	2a24      	cmp	r2, #36	; 0x24
    fa28:	d816      	bhi.n	fa58 <ll_terminate_ind_send+0x60>
    fa2a:	e8df f002 	tbb	[pc, r2]
    fa2e:	1517      	.short	0x1517
    fa30:	15151515 	.word	0x15151515
    fa34:	15151515 	.word	0x15151515
    fa38:	15151515 	.word	0x15151515
    fa3c:	15171717 	.word	0x15171717
    fa40:	17151515 	.word	0x17151515
    fa44:	15151515 	.word	0x15151515
    fa48:	15151515 	.word	0x15151515
    fa4c:	15151515 	.word	0x15151515
    fa50:	1515      	.short	0x1515
    fa52:	17          	.byte	0x17
    fa53:	00          	.byte	0x00
    fa54:	2c3b      	cmp	r4, #59	; 0x3b
    fa56:	d001      	beq.n	fa5c <ll_terminate_ind_send+0x64>
    fa58:	2012      	movs	r0, #18
}
    fa5a:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    fa5c:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
    fa5e:	f880 411a 	strb.w	r4, [r0, #282]	; 0x11a
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    fa62:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	return 0;
    fa66:	2000      	movs	r0, #0
}
    fa68:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    fa6a:	200c      	movs	r0, #12
}
    fa6c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fa6e:	2002      	movs	r0, #2
}
    fa70:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fa72:	2002      	movs	r0, #2
}
    fa74:	4770      	bx	lr
    fa76:	bf00      	nop
    fa78:	200012b0 	.word	0x200012b0

0000fa7c <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    fa7c:	b9b0      	cbnz	r0, faac <ll_feature_req_send+0x30>
{
    fa7e:	b508      	push	{r3, lr}
    fa80:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fa82:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fa86:	480a      	ldr	r0, [pc, #40]	; (fab0 <ll_feature_req_send+0x34>)
    fa88:	f7fa fb18 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
    fa8c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    fa8e:	b95b      	cbnz	r3, faa8 <ll_feature_req_send+0x2c>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
    fa90:	f890 20f9 	ldrb.w	r2, [r0, #249]	; 0xf9
    fa94:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
    fa98:	428a      	cmp	r2, r1
	conn->llcp_feature.req++;
    fa9a:	bf05      	ittet	eq
    fa9c:	3201      	addeq	r2, #1
    fa9e:	f880 20f8 	strbeq.w	r2, [r0, #248]	; 0xf8
		return BT_HCI_ERR_CMD_DISALLOWED;
    faa2:	200c      	movne	r0, #12
	return 0;
    faa4:	4618      	moveq	r0, r3
}
    faa6:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    faa8:	2002      	movs	r0, #2
}
    faaa:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    faac:	2002      	movs	r0, #2
}
    faae:	4770      	bx	lr
    fab0:	200012b0 	.word	0x200012b0

0000fab4 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    fab4:	b9b0      	cbnz	r0, fae4 <ll_version_ind_send+0x30>
{
    fab6:	b508      	push	{r3, lr}
    fab8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    faba:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fabe:	480a      	ldr	r0, [pc, #40]	; (fae8 <ll_version_ind_send+0x34>)
    fac0:	f7fa fafc 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
    fac4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    fac6:	b95b      	cbnz	r3, fae0 <ll_version_ind_send+0x2c>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
    fac8:	f890 2111 	ldrb.w	r2, [r0, #273]	; 0x111
    facc:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    fad0:	428a      	cmp	r2, r1
	conn->llcp_version.req++;
    fad2:	bf05      	ittet	eq
    fad4:	3201      	addeq	r2, #1
    fad6:	f880 2110 	strbeq.w	r2, [r0, #272]	; 0x110
		return BT_HCI_ERR_CMD_DISALLOWED;
    fada:	200c      	movne	r0, #12
	return 0;
    fadc:	4618      	moveq	r0, r3
}
    fade:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fae0:	2002      	movs	r0, #2
}
    fae2:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fae4:	2002      	movs	r0, #2
}
    fae6:	4770      	bx	lr
    fae8:	200012b0 	.word	0x200012b0

0000faec <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    faec:	2800      	cmp	r0, #0
    faee:	d143      	bne.n	fb78 <ll_length_req_send+0x8c>
{
    faf0:	b538      	push	{r3, r4, r5, lr}
    faf2:	460d      	mov	r5, r1
    faf4:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    faf6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fafa:	4602      	mov	r2, r0
    fafc:	481f      	ldr	r0, [pc, #124]	; (fb7c <ll_length_req_send+0x90>)
    fafe:	f7fa fadd 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
    fb02:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    fb04:	bba3      	cbnz	r3, fb70 <ll_length_req_send+0x84>
	if (conn->llcp_length.disabled ||
    fb06:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
    fb0a:	071a      	lsls	r2, r3, #28
    fb0c:	d42e      	bmi.n	fb6c <ll_length_req_send+0x80>
	    (conn->common.fex_valid &&
    fb0e:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
	if (conn->llcp_length.disabled ||
    fb12:	07d1      	lsls	r1, r2, #31
    fb14:	d503      	bpl.n	fb1e <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
    fb16:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
	    (conn->common.fex_valid &&
    fb1a:	0692      	lsls	r2, r2, #26
    fb1c:	d526      	bpl.n	fb6c <ll_length_req_send+0x80>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
    fb1e:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
    fb22:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
    fb26:	428a      	cmp	r2, r1
    fb28:	d011      	beq.n	fb4e <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
    fb2a:	f003 0307 	and.w	r3, r3, #7
    fb2e:	2b03      	cmp	r3, #3
    fb30:	d004      	beq.n	fb3c <ll_length_req_send+0x50>
    fb32:	3303      	adds	r3, #3
    fb34:	f003 0307 	and.w	r3, r3, #7
    fb38:	2b01      	cmp	r3, #1
    fb3a:	d81b      	bhi.n	fb74 <ll_length_req_send+0x88>
			if (!conn->llcp_length.cache.tx_octets) {
    fb3c:	f8b0 3190 	ldrh.w	r3, [r0, #400]	; 0x190
    fb40:	b9c3      	cbnz	r3, fb74 <ll_length_req_send+0x88>
				conn->llcp_length.cache.tx_octets = tx_octets;
    fb42:	f8a0 5190 	strh.w	r5, [r0, #400]	; 0x190
				conn->llcp_length.cache.tx_time = tx_time;
    fb46:	f8a0 4192 	strh.w	r4, [r0, #402]	; 0x192
				return 0;
    fb4a:	4618      	mov	r0, r3
}
    fb4c:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    fb4e:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_octets = tx_octets;
    fb52:	f8a0 518a 	strh.w	r5, [r0, #394]	; 0x18a
	conn->llcp_length.req++;
    fb56:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    fb58:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
    fb5c:	f880 2184 	strb.w	r2, [r0, #388]	; 0x184
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    fb60:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
	conn->llcp_length.tx_time = tx_time;
    fb64:	f8a0 418e 	strh.w	r4, [r0, #398]	; 0x18e
	return 0;
    fb68:	2000      	movs	r0, #0
}
    fb6a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    fb6c:	201a      	movs	r0, #26
}
    fb6e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fb70:	2002      	movs	r0, #2
}
    fb72:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    fb74:	200c      	movs	r0, #12
}
    fb76:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fb78:	2002      	movs	r0, #2
}
    fb7a:	4770      	bx	lr
    fb7c:	200012b0 	.word	0x200012b0

0000fb80 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    fb80:	4a03      	ldr	r2, [pc, #12]	; (fb90 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    fb82:	4b04      	ldr	r3, [pc, #16]	; (fb94 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    fb84:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    fb86:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    fb88:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    fb8a:	800b      	strh	r3, [r1, #0]
}
    fb8c:	4770      	bx	lr
    fb8e:	bf00      	nop
    fb90:	20002d56 	.word	0x20002d56
    fb94:	20002d58 	.word	0x20002d58

0000fb98 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    fb98:	4a02      	ldr	r2, [pc, #8]	; (fba4 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    fb9a:	4b03      	ldr	r3, [pc, #12]	; (fba8 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    fb9c:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    fb9e:	8019      	strh	r1, [r3, #0]
}
    fba0:	2000      	movs	r0, #0
    fba2:	4770      	bx	lr
    fba4:	20002d56 	.word	0x20002d56
    fba8:	20002d58 	.word	0x20002d58

0000fbac <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    fbac:	f04f 0c1b 	mov.w	ip, #27
    fbb0:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    fbb4:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    fbb8:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    fbbc:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    fbbe:	8018      	strh	r0, [r3, #0]
}
    fbc0:	4770      	bx	lr
    fbc2:	bf00      	nop

0000fbc4 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    fbc4:	b9c0      	cbnz	r0, fbf8 <ll_phy_get+0x34>
{
    fbc6:	b538      	push	{r3, r4, r5, lr}
    fbc8:	460d      	mov	r5, r1
    fbca:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fbcc:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fbd0:	4602      	mov	r2, r0
    fbd2:	480a      	ldr	r0, [pc, #40]	; (fbfc <ll_phy_get+0x38>)
    fbd4:	f7fa fa72 	bl	a0bc <mem_get>
    fbd8:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    fbda:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    fbdc:	b950      	cbnz	r0, fbf4 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    fbde:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    fbe2:	f3c2 0202 	ubfx	r2, r2, #0, #3
    fbe6:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    fbe8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
    fbec:	f3c3 0302 	ubfx	r3, r3, #0, #3
    fbf0:	7023      	strb	r3, [r4, #0]
}
    fbf2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fbf4:	2002      	movs	r0, #2
}
    fbf6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fbf8:	2002      	movs	r0, #2
}
    fbfa:	4770      	bx	lr
    fbfc:	200012b0 	.word	0x200012b0

0000fc00 <ll_phy_default_set>:
	default_phy_tx = tx;
    fc00:	4a02      	ldr	r2, [pc, #8]	; (fc0c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    fc02:	4b03      	ldr	r3, [pc, #12]	; (fc10 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    fc04:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    fc06:	7019      	strb	r1, [r3, #0]
}
    fc08:	2000      	movs	r0, #0
    fc0a:	4770      	bx	lr
    fc0c:	20002db2 	.word	0x20002db2
    fc10:	20002db1 	.word	0x20002db1

0000fc14 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    fc14:	2800      	cmp	r0, #0
    fc16:	d141      	bne.n	fc9c <ll_phy_req_send+0x88>
{
    fc18:	b570      	push	{r4, r5, r6, lr}
    fc1a:	460c      	mov	r4, r1
    fc1c:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fc1e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fc22:	4602      	mov	r2, r0
    fc24:	481e      	ldr	r0, [pc, #120]	; (fca0 <ll_phy_req_send+0x8c>)
    fc26:	461e      	mov	r6, r3
    fc28:	f7fa fa48 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
    fc2c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fc2e:	4601      	mov	r1, r0
	if (conn->lll.handle != handle) {
    fc30:	bb93      	cbnz	r3, fc98 <ll_phy_req_send+0x84>
	if (conn->llcp_phy.disabled ||
    fc32:	f890 0197 	ldrb.w	r0, [r0, #407]	; 0x197
    fc36:	f010 0008 	ands.w	r0, r0, #8
    fc3a:	d12b      	bne.n	fc94 <ll_phy_req_send+0x80>
	    (conn->common.fex_valid &&
    fc3c:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
	if (conn->llcp_phy.disabled ||
    fc40:	07db      	lsls	r3, r3, #31
    fc42:	d504      	bpl.n	fc4e <ll_phy_req_send+0x3a>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
    fc44:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    fc48:	f413 6f10 	tst.w	r3, #2304	; 0x900
    fc4c:	d022      	beq.n	fc94 <ll_phy_req_send+0x80>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
    fc4e:	f891 3194 	ldrb.w	r3, [r1, #404]	; 0x194
    fc52:	f891 c195 	ldrb.w	ip, [r1, #405]	; 0x195
    fc56:	459c      	cmp	ip, r3
    fc58:	d11a      	bne.n	fc90 <ll_phy_req_send+0x7c>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    fc5a:	f004 0407 	and.w	r4, r4, #7
    fc5e:	f8b1 2196 	ldrh.w	r2, [r1, #406]	; 0x196
    fc62:	00a4      	lsls	r4, r4, #2
    fc64:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    fc68:	f006 0307 	and.w	r3, r6, #7
    fc6c:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
    fc70:	f005 0501 	and.w	r5, r5, #1
    fc74:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
    fc78:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
	conn->llcp_phy.req++;
    fc7c:	f10c 0c01 	add.w	ip, ip, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    fc80:	f022 0207 	bic.w	r2, r2, #7
    fc84:	4313      	orrs	r3, r2
	conn->llcp_phy.req++;
    fc86:	f881 c194 	strb.w	ip, [r1, #404]	; 0x194
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    fc8a:	f8a1 3196 	strh.w	r3, [r1, #406]	; 0x196
}
    fc8e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    fc90:	200c      	movs	r0, #12
}
    fc92:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    fc94:	201a      	movs	r0, #26
}
    fc96:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fc98:	2002      	movs	r0, #2
}
    fc9a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fc9c:	2002      	movs	r0, #2
}
    fc9e:	4770      	bx	lr
    fca0:	200012b0 	.word	0x200012b0

0000fca4 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    fca4:	b9d8      	cbnz	r0, fcde <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fca6:	4602      	mov	r2, r0
{
    fca8:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fcaa:	480e      	ldr	r0, [pc, #56]	; (fce4 <ll_apto_get+0x40>)
    fcac:	460c      	mov	r4, r1
    fcae:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fcb2:	f7fa fa03 	bl	a0bc <mem_get>
    fcb6:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    fcb8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    fcba:	b970      	cbnz	r0, fcda <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    fcbc:	f8b2 30b2 	ldrh.w	r3, [r2, #178]	; 0xb2
    fcc0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    fcc2:	fb02 f303 	mul.w	r3, r2, r3
    fcc6:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    fcca:	4a07      	ldr	r2, [pc, #28]	; (fce8 <ll_apto_get+0x44>)
    fccc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    fcd0:	fba2 2303 	umull	r2, r3, r2, r3
    fcd4:	099b      	lsrs	r3, r3, #6
    fcd6:	8023      	strh	r3, [r4, #0]
}
    fcd8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fcda:	2002      	movs	r0, #2
}
    fcdc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fcde:	2002      	movs	r0, #2
}
    fce0:	4770      	bx	lr
    fce2:	bf00      	nop
    fce4:	200012b0 	.word	0x200012b0
    fce8:	10624dd3 	.word	0x10624dd3

0000fcec <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    fcec:	b9e0      	cbnz	r0, fd28 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fcee:	4602      	mov	r2, r0
{
    fcf0:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fcf2:	480e      	ldr	r0, [pc, #56]	; (fd2c <ll_apto_set+0x40>)
    fcf4:	460c      	mov	r4, r1
    fcf6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fcfa:	f7fa f9df 	bl	a0bc <mem_get>
    fcfe:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    fd00:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    fd02:	b978      	cbnz	r0, fd24 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    fd04:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
    fd08:	f240 43e2 	movw	r3, #1250	; 0x4e2
    fd0c:	fb03 fc0c 	mul.w	ip, r3, ip
    fd10:	f242 7310 	movw	r3, #10000	; 0x2710
    fd14:	fb03 c304 	mla	r3, r3, r4, ip
    fd18:	3b01      	subs	r3, #1
    fd1a:	fbb3 f3fc 	udiv	r3, r3, ip
    fd1e:	f8a2 30b2 	strh.w	r3, [r2, #178]	; 0xb2
}
    fd22:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fd24:	2002      	movs	r0, #2
}
    fd26:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fd28:	2002      	movs	r0, #2
}
    fd2a:	4770      	bx	lr
    fd2c:	200012b0 	.word	0x200012b0

0000fd30 <ull_conn_init>:
	err = init_reset();
    fd30:	f7ff b912 	b.w	ef58 <init_reset>

0000fd34 <ull_conn_reset>:
{
    fd34:	b510      	push	{r4, lr}
	(void)ull_central_reset();
    fd36:	f002 f9fb 	bl	12130 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fd3a:	2200      	movs	r2, #0
    fd3c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fd40:	4815      	ldr	r0, [pc, #84]	; (fd98 <ull_conn_reset+0x64>)
    fd42:	f7fa f9bb 	bl	a0bc <mem_get>
    fd46:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    fd48:	f100 021c 	add.w	r2, r0, #28
    fd4c:	4601      	mov	r1, r0
    fd4e:	2005      	movs	r0, #5
    fd50:	f7fe f8a8 	bl	dea4 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    fd54:	b108      	cbz	r0, fd5a <ull_conn_reset+0x26>
    fd56:	3078      	adds	r0, #120	; 0x78
    fd58:	d10f      	bne.n	fd7a <ull_conn_reset+0x46>
	MFIFO_INIT(conn_tx);
    fd5a:	4810      	ldr	r0, [pc, #64]	; (fd9c <ull_conn_reset+0x68>)
	MFIFO_INIT(conn_ack);
    fd5c:	4910      	ldr	r1, [pc, #64]	; (fda0 <ull_conn_reset+0x6c>)
	conn_upd_curr = NULL;
    fd5e:	4a11      	ldr	r2, [pc, #68]	; (fda4 <ull_conn_reset+0x70>)
	conn->lll.link_tx_free = NULL;
    fd60:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
    fd62:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
    fd66:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
    fd68:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
    fd6a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
    fd6e:	65a3      	str	r3, [r4, #88]	; 0x58
}
    fd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
    fd74:	6013      	str	r3, [r2, #0]
	err = init_reset();
    fd76:	f7ff b8ef 	b.w	ef58 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
    fd7a:	4a0b      	ldr	r2, [pc, #44]	; (fda8 <ull_conn_reset+0x74>)
    fd7c:	490b      	ldr	r1, [pc, #44]	; (fdac <ull_conn_reset+0x78>)
    fd7e:	480c      	ldr	r0, [pc, #48]	; (fdb0 <ull_conn_reset+0x7c>)
    fd80:	f640 03e3 	movw	r3, #2275	; 0x8e3
    fd84:	f00b f997 	bl	1b0b6 <printk>
    fd88:	4040      	eors	r0, r0
    fd8a:	f380 8811 	msr	BASEPRI, r0
    fd8e:	f04f 0003 	mov.w	r0, #3
    fd92:	df02      	svc	2
    fd94:	e7e1      	b.n	fd5a <ull_conn_reset+0x26>
    fd96:	bf00      	nop
    fd98:	200012b0 	.word	0x200012b0
    fd9c:	200005e8 	.word	0x200005e8
    fda0:	200005a4 	.word	0x200005a4
    fda4:	20002210 	.word	0x20002210
    fda8:	00020800 	.word	0x00020800
    fdac:	000207e8 	.word	0x000207e8
    fdb0:	000203b4 	.word	0x000203b4

0000fdb4 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
    fdb4:	4b01      	ldr	r3, [pc, #4]	; (fdbc <ull_conn_default_tx_octets_get+0x8>)
}
    fdb6:	8818      	ldrh	r0, [r3, #0]
    fdb8:	4770      	bx	lr
    fdba:	bf00      	nop
    fdbc:	20002d56 	.word	0x20002d56

0000fdc0 <ull_conn_default_tx_time_get>:
	return default_tx_time;
    fdc0:	4b01      	ldr	r3, [pc, #4]	; (fdc8 <ull_conn_default_tx_time_get+0x8>)
}
    fdc2:	8818      	ldrh	r0, [r3, #0]
    fdc4:	4770      	bx	lr
    fdc6:	bf00      	nop
    fdc8:	20002d58 	.word	0x20002d58

0000fdcc <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    fdcc:	4b01      	ldr	r3, [pc, #4]	; (fdd4 <ull_conn_default_phy_tx_get+0x8>)
}
    fdce:	7818      	ldrb	r0, [r3, #0]
    fdd0:	4770      	bx	lr
    fdd2:	bf00      	nop
    fdd4:	20002db2 	.word	0x20002db2

0000fdd8 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    fdd8:	4b01      	ldr	r3, [pc, #4]	; (fde0 <ull_conn_default_phy_rx_get+0x8>)
}
    fdda:	7818      	ldrb	r0, [r3, #0]
    fddc:	4770      	bx	lr
    fdde:	bf00      	nop
    fde0:	20002db1 	.word	0x20002db1

0000fde4 <ull_conn_setup>:
{
    fde4:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
    fde6:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
    fde8:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
    fdea:	681d      	ldr	r5, [r3, #0]
    fdec:	782b      	ldrb	r3, [r5, #0]
{
    fdee:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
    fdf0:	b193      	cbz	r3, fe18 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
    fdf2:	696b      	ldr	r3, [r5, #20]
    fdf4:	b163      	cbz	r3, fe10 <ull_conn_setup+0x2c>
    fdf6:	4a0b      	ldr	r2, [pc, #44]	; (fe24 <ull_conn_setup+0x40>)
    fdf8:	490b      	ldr	r1, [pc, #44]	; (fe28 <ull_conn_setup+0x44>)
    fdfa:	480c      	ldr	r0, [pc, #48]	; (fe2c <ull_conn_setup+0x48>)
    fdfc:	f240 33ed 	movw	r3, #1005	; 0x3ed
    fe00:	f00b f959 	bl	1b0b6 <printk>
    fe04:	4040      	eors	r0, r0
    fe06:	f380 8811 	msr	BASEPRI, r0
    fe0a:	f04f 0003 	mov.w	r0, #3
    fe0e:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
    fe10:	4b07      	ldr	r3, [pc, #28]	; (fe30 <ull_conn_setup+0x4c>)
    fe12:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
    fe16:	bd38      	pop	{r3, r4, r5, pc}
    fe18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
    fe1c:	4608      	mov	r0, r1
    fe1e:	f7ff ba95 	b.w	f34c <conn_setup_adv_scan_disabled_cb>
    fe22:	bf00      	nop
    fe24:	00020800 	.word	0x00020800
    fe28:	0002086c 	.word	0x0002086c
    fe2c:	000203b4 	.word	0x000203b4
    fe30:	0000f34d 	.word	0x0000f34d

0000fe34 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    fe34:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    fe36:	88da      	ldrh	r2, [r3, #6]
    fe38:	2a00      	cmp	r2, #0
    fe3a:	f040 80ce 	bne.w	ffda <ull_conn_rx+0x1a6>
{
    fe3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe42:	460e      	mov	r6, r1
    fe44:	b083      	sub	sp, #12
    fe46:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fe48:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    fe4c:	48a4      	ldr	r0, [pc, #656]	; (100e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe1>)
    fe4e:	f7fa f935 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
    fe52:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fe54:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    fe56:	2b00      	cmp	r3, #0
    fe58:	f040 80b8 	bne.w	ffcc <ull_conn_rx+0x198>
	pdu_rx = (void *)(*rx)->pdu;
    fe5c:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    fe5e:	f890 213e 	ldrb.w	r2, [r0, #318]	; 0x13e
	switch (pdu_rx->ll_id) {
    fe62:	7f29      	ldrb	r1, [r5, #28]
    fe64:	f001 0103 	and.w	r1, r1, #3
    fe68:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    fe6a:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
    fe6e:	d129      	bne.n	fec4 <ull_conn_rx+0x90>
	opcode = pdu_rx->llctrl.opcode;
    fe70:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
    fe74:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    fe78:	b3d0      	cbz	r0, fef0 <ull_conn_rx+0xbc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    fe7a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    fe7e:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
    fe80:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    fe84:	f2c0 80ad 	blt.w	ffe2 <ull_conn_rx+0x1ae>
	return (!conn->lll.role &&
    fe88:	2900      	cmp	r1, #0
    fe8a:	f040 80be 	bne.w	1000a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb>
		((!conn->llcp_enc.refresh &&
    fe8e:	f1b8 0f02 	cmp.w	r8, #2
    fe92:	f000 80af 	beq.w	fff4 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fe96:	f1b8 0f05 	cmp.w	r8, #5
    fe9a:	f000 8462 	beq.w	10762 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x763>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    fe9e:	f1b8 0f06 	cmp.w	r8, #6
    fea2:	f000 83cd 	beq.w	10640 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x641>
    fea6:	f1b8 0f0d 	cmp.w	r8, #13
    feaa:	f000 8190 	beq.w	101ce <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1cf>
    feae:	f1b8 0f11 	cmp.w	r8, #17
    feb2:	f000 823b 	beq.w	1032c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x32d>
		conn->llcp_terminate.reason_final =
    feb6:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    feb8:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
    feba:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b

		return 0;
    febe:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    fec0:	712b      	strb	r3, [r5, #4]
		return 0;
    fec2:	e007      	b.n	fed4 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
    fec4:	b949      	cbnz	r1, feda <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
    fec6:	b110      	cbz	r0, fece <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_final =
    fec8:	233d      	movs	r3, #61	; 0x3d
    feca:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    fece:	2301      	movs	r3, #1
    fed0:	712b      	strb	r3, [r5, #4]
	return 0;
    fed2:	2000      	movs	r0, #0
}
    fed4:	b003      	add	sp, #12
    fed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
    feda:	2800      	cmp	r0, #0
    fedc:	d0f9      	beq.n	fed2 <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_final =
    fede:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    fee0:	2201      	movs	r2, #1
	return 0;
    fee2:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
    fee4:	f884 111b 	strb.w	r1, [r4, #283]	; 0x11b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    fee8:	712a      	strb	r2, [r5, #4]
}
    feea:	b003      	add	sp, #12
    feec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
    fef0:	f1a8 0302 	sub.w	r3, r8, #2
    fef4:	2b17      	cmp	r3, #23
    fef6:	d81d      	bhi.n	ff34 <ull_conn_rx+0x100>
    fef8:	e8df f013 	tbh	[pc, r3, lsl #1]
    fefc:	001c007c 	.word	0x001c007c
    ff00:	042e0427 	.word	0x042e0427
    ff04:	037203a2 	.word	0x037203a2
    ff08:	01db001c 	.word	0x01db001c
    ff0c:	044d001c 	.word	0x044d001c
    ff10:	016901ac 	.word	0x016901ac
    ff14:	02e002f5 	.word	0x02e002f5
    ff18:	0218024e 	.word	0x0218024e
    ff1c:	03cd0402 	.word	0x03cd0402
    ff20:	00b900b9 	.word	0x00b900b9
    ff24:	012c03d7 	.word	0x012c03d7
    ff28:	00f6001c 	.word	0x00f6001c
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    ff2c:	7f6b      	ldrb	r3, [r5, #29]
    ff2e:	2b01      	cmp	r3, #1
    ff30:	f000 843a 	beq.w	107a8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7a9>
	if (conn->common.txn_lock) {
    ff34:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    ff38:	0798      	lsls	r0, r3, #30
    ff3a:	d4c8      	bmi.n	fece <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ff3c:	4869      	ldr	r0, [pc, #420]	; (100e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe5>)
    ff3e:	f7fa f88b 	bl	a058 <mem_acquire>
	if (!tx) {
    ff42:	2800      	cmp	r0, #0
    ff44:	f000 851b 	beq.w	1097e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97f>
	conn->common.txn_lock = 1U;
    ff48:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    ff4c:	f043 0302 	orr.w	r3, r3, #2
    ff50:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ff54:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
    ff56:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ff5a:	f043 0303 	orr.w	r3, r3, #3
    ff5e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    ff60:	2302      	movs	r3, #2
    ff62:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    ff64:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    ff68:	2307      	movs	r3, #7
    ff6a:	71c3      	strb	r3, [r0, #7]
	if (
    ff6c:	b1f2      	cbz	r2, ffac <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
    ff6e:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	    conn->tx_head &&
    ff72:	0799      	lsls	r1, r3, #30
    ff74:	d41a      	bmi.n	ffac <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
    ff76:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
    ff7a:	07db      	lsls	r3, r3, #31
    ff7c:	d416      	bmi.n	ffac <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
    ff7e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    ff82:	429a      	cmp	r2, r3
    ff84:	f000 84ff 	beq.w	10986 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x987>
		} else if (!conn->tx_ctrl) {
    ff88:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    ff8c:	2b00      	cmp	r3, #0
    ff8e:	f000 8542 	beq.w	10a16 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa17>
	tx->next = conn->tx_ctrl_last->next;
    ff92:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    ff96:	6813      	ldr	r3, [r2, #0]
    ff98:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    ff9a:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    ff9c:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    ff9e:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    ffa2:	2a00      	cmp	r2, #0
    ffa4:	d193      	bne.n	fece <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
    ffa6:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    ffaa:	e790      	b.n	fece <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
    ffac:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    ffb0:	2b00      	cmp	r3, #0
    ffb2:	f000 84da 	beq.w	1096a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x96b>
	tx->next = conn->tx_ctrl_last->next;
    ffb6:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
    ffba:	681a      	ldr	r2, [r3, #0]
    ffbc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    ffbe:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    ffc0:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    ffc2:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
    ffc6:	2a00      	cmp	r2, #0
    ffc8:	d181      	bne.n	fece <ull_conn_rx+0x9a>
    ffca:	e7ec      	b.n	ffa6 <ull_conn_rx+0x172>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ffcc:	6833      	ldr	r3, [r6, #0]
    ffce:	2201      	movs	r2, #1
		return 0;
    ffd0:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ffd2:	711a      	strb	r2, [r3, #4]
}
    ffd4:	b003      	add	sp, #12
    ffd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ffda:	2201      	movs	r2, #1
    ffdc:	711a      	strb	r2, [r3, #4]
		return 0;
    ffde:	2000      	movs	r0, #0
}
    ffe0:	4770      	bx	lr
	       (conn->lll.role &&
    ffe2:	bbc1      	cbnz	r1, 10056 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x57>
		((!conn->llcp_enc.refresh &&
    ffe4:	f1b8 0f07 	cmp.w	r8, #7
    ffe8:	f000 82fa 	beq.w	105e0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5e1>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    ffec:	f1b8 0f02 	cmp.w	r8, #2
    fff0:	f47f af55 	bne.w	fe9e <ull_conn_rx+0x6a>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
    fff4:	7f6b      	ldrb	r3, [r5, #29]
    fff6:	2b02      	cmp	r3, #2
    fff8:	d19c      	bne.n	ff34 <ull_conn_rx+0x100>
	conn->llcp_terminate.reason_final =
    fffa:	f895 2020 	ldrb.w	r2, [r5, #32]
    fffe:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10002:	2301      	movs	r3, #1
	int nack = 0;
   10004:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10006:	712b      	strb	r3, [r5, #4]
}
   10008:	e764      	b.n	fed4 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   1000a:	f1b8 0f02 	cmp.w	r8, #2
   1000e:	d0f1      	beq.n	fff4 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10010:	f1b8 0f0b 	cmp.w	r8, #11
   10014:	d08a      	beq.n	ff2c <ull_conn_rx+0xf8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   10016:	f1b8 0f04 	cmp.w	r8, #4
   1001a:	f47f af3c 	bne.w	fe96 <ull_conn_rx+0x62>
		if (conn->lll.role ||
   1001e:	7f6b      	ldrb	r3, [r5, #29]
   10020:	2b0d      	cmp	r3, #13
   10022:	d187      	bne.n	ff34 <ull_conn_rx+0x100>
		memcpy(&conn->llcp.encryption.skd[8],
   10024:	2208      	movs	r2, #8
   10026:	f105 0120 	add.w	r1, r5, #32
   1002a:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
   1002e:	f00b fe7c 	bl	1bd2a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   10032:	2204      	movs	r2, #4
   10034:	f105 0128 	add.w	r1, r5, #40	; 0x28
   10038:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   1003c:	f00b fe75 	bl	1bd2a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   10040:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10044:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   10046:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1004a:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   1004c:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	int nack = 0;
   10050:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10052:	7111      	strb	r1, [r2, #4]
		break;
   10054:	e73e      	b.n	fed4 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   10056:	f1b8 0f02 	cmp.w	r8, #2
   1005a:	d0cb      	beq.n	fff4 <ull_conn_rx+0x1c0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1005c:	f1b8 0f0b 	cmp.w	r8, #11
   10060:	f000 84a4 	beq.w	109ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9ad>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   10064:	f1b8 0f03 	cmp.w	r8, #3
   10068:	f47f af19 	bne.w	fe9e <ull_conn_rx+0x6a>
   1006c:	e762      	b.n	ff34 <ull_conn_rx+0x100>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   1006e:	7f6b      	ldrb	r3, [r5, #29]
   10070:	2b09      	cmp	r3, #9
   10072:	f47f af5f 	bne.w	ff34 <ull_conn_rx+0x100>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   10076:	f1b8 0f14 	cmp.w	r8, #20
   1007a:	f000 84db 	beq.w	10a34 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa35>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1007e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   10082:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   10086:	4293      	cmp	r3, r2
   10088:	f000 87e2 	beq.w	11050 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1051>
	eff_rx_octets = conn->lll.max_rx_octets;
   1008c:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   10090:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   10094:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   10098:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1009c:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	struct node_tx *tx = NULL;
   100a0:	2300      	movs	r3, #0
	       tx) ||
   100a2:	f001 0107 	and.w	r1, r1, #7
   100a6:	2902      	cmp	r1, #2
   100a8:	f000 84e4 	beq.w	10a74 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa75>
   100ac:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   100b0:	f1b8 0f15 	cmp.w	r8, #21
   100b4:	f43f af0d 	beq.w	fed2 <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   100b8:	4618      	mov	r0, r3
   100ba:	490a      	ldr	r1, [pc, #40]	; (100e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe5>)
   100bc:	f7f9 ffe6 	bl	a08c <mem_release>
			if (conn->llcp_length.state ==
   100c0:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->common.txn_lock = 0U;
   100c4:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   100c8:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   100cc:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   100d0:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   100d2:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
			if (conn->llcp_length.state ==
   100d6:	f47f aefc 	bne.w	fed2 <ull_conn_rx+0x9e>
				return -EBUSY;
   100da:	f06f 000f 	mvn.w	r0, #15
   100de:	e6f9      	b.n	fed4 <ull_conn_rx+0xa0>
   100e0:	200012b0 	.word	0x200012b0
   100e4:	200022a4 	.word	0x200022a4
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   100e8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   100ec:	2b00      	cmp	r3, #0
   100ee:	f6ff af21 	blt.w	ff34 <ull_conn_rx+0x100>
   100f2:	7f6b      	ldrb	r3, [r5, #29]
   100f4:	2b03      	cmp	r3, #3
   100f6:	f47f af1d 	bne.w	ff34 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   100fa:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
					 conn->lll.phy_rx))) {
   100fe:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
			if (!(p->phys & (conn->lll.phy_tx |
   10102:	f895 2020 	ldrb.w	r2, [r5, #32]
   10106:	430b      	orrs	r3, r1
   10108:	f003 0307 	and.w	r3, r3, #7
   1010c:	4213      	tst	r3, r2
   1010e:	f43f aee0 	beq.w	fed2 <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   10112:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   10116:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   1011a:	1a9b      	subs	r3, r3, r2
   1011c:	f003 0303 	and.w	r3, r3, #3
   10120:	2b02      	cmp	r3, #2
   10122:	f43f aed6 	beq.w	fed2 <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   10126:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   1012a:	f002 fa55 	bl	125d8 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   1012e:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.chan_map.initiate = 1U;
   10132:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
			conn->llcp_type = LLCP_CHAN_MAP;
   10136:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   10138:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   1013a:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   1013e:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10142:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   10144:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10148:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   1014a:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	int nack = 0;
   1014e:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10150:	7111      	strb	r1, [r2, #4]

		break;
   10152:	e6bf      	b.n	fed4 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   10154:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10158:	2b00      	cmp	r3, #0
   1015a:	f6ff aeeb 	blt.w	ff34 <ull_conn_rx+0x100>
   1015e:	7f6b      	ldrb	r3, [r5, #29]
   10160:	2b03      	cmp	r3, #3
   10162:	f47f aee7 	bne.w	ff34 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   10166:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   1016a:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   1016e:	429a      	cmp	r2, r3
   10170:	f43f aead 	beq.w	fece <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   10174:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   10178:	f002 0303 	and.w	r3, r2, #3
   1017c:	2b02      	cmp	r3, #2
   1017e:	f47f aea6 	bne.w	fece <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
   10182:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   10186:	f3c2 0182 	ubfx	r1, r2, #2, #3
   1018a:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   1018c:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   10190:	009b      	lsls	r3, r3, #2
   10192:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   10196:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1019a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1019e:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   101a2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   101a6:	d002      	beq.n	101ae <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1af>
   101a8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   101ac:	d105      	bne.n	101ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1bb>
				conn->llcp_phy.tx = 0;
   101ae:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   101b2:	f003 0303 	and.w	r3, r3, #3
   101b6:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			conn->llcp_phy.pause_tx = 1U;
   101ba:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   101be:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   101c0:	f043 0301 	orr.w	r3, r3, #1
   101c4:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			conn->procedure_expire = 0U;
   101c8:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   101cc:	e67f      	b.n	fece <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   101ce:	7f6b      	ldrb	r3, [r5, #29]
   101d0:	2b02      	cmp	r3, #2
   101d2:	f47f aeaf 	bne.w	ff34 <ull_conn_rx+0x100>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   101d6:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   101da:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   101de:	4293      	cmp	r3, r2
   101e0:	d004      	beq.n	101ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1ed>
   101e2:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   101e6:	2b03      	cmp	r3, #3
   101e8:	f000 86de 	beq.w	10fa8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfa9>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   101ec:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   101f0:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   101f4:	4293      	cmp	r3, r2
   101f6:	f000 852f 	beq.w	10c58 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc59>
		rej_ext_ind->error_code = rej_ind->error_code;
   101fa:	f895 1020 	ldrb.w	r1, [r5, #32]
   101fe:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   10202:	2923      	cmp	r1, #35	; 0x23
   10204:	d012      	beq.n	1022c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x22d>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   10206:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   1020a:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1020e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   10212:	f36f 0200 	bfc	r2, #0, #1
   10216:	f884 2197 	strb.w	r2, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   1021a:	2200      	movs	r2, #0
   1021c:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   10220:	f3c3 0202 	ubfx	r2, r3, #0, #3
   10224:	f362 1306 	bfi	r3, r2, #4, #3
   10228:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   1022c:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   10230:	0758      	lsls	r0, r3, #29
   10232:	f57f ae4c 	bpl.w	fece <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10236:	231c      	movs	r3, #28
   10238:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1023a:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   1023c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   10240:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10244:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   10246:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   1024a:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   1024e:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   10250:	77ab      	strb	r3, [r5, #30]
	if (err) {
   10252:	e63f      	b.n	fed4 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   10254:	7f6e      	ldrb	r6, [r5, #29]
   10256:	2e06      	cmp	r6, #6
   10258:	f47f ae6c 	bne.w	ff34 <ull_conn_rx+0x100>
	if (!conn->llcp_version.tx) {
   1025c:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   10260:	07df      	lsls	r7, r3, #31
   10262:	f140 85dc 	bpl.w	10e1e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe1f>
	} else if (!conn->llcp_version.rx) {
   10266:	f013 0302 	ands.w	r3, r3, #2
   1026a:	f47f ae30 	bne.w	fece <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   1026e:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   10272:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
		conn->procedure_expire = 0U;
   10276:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_version.version_number = v->version_number;
   1027a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1027e:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   10282:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   10286:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   1028a:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1028e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10292:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		sys_le16_to_cpu(v->sub_version_number);
   10296:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   1029a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1029e:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   102a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   102a6:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
	conn->llcp_version.rx = 1U;
   102aa:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	return 0;
   102ae:	2000      	movs	r0, #0
   102b0:	e610      	b.n	fed4 <ull_conn_rx+0xa0>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   102b2:	7f6b      	ldrb	r3, [r5, #29]
   102b4:	2b09      	cmp	r3, #9
   102b6:	f47f ae3d 	bne.w	ff34 <ull_conn_rx+0x100>
   102ba:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   102bc:	49dd      	ldr	r1, [pc, #884]	; (10634 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x635>)
   102be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   102c0:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   102c2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   102c6:	400a      	ands	r2, r1
   102c8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   102cc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   102d0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   102d4:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   102d8:	4013      	ands	r3, r2
   102da:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   102de:	6a2e      	ldr	r6, [r5, #32]
   102e0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   102e2:	f7fc ffdf 	bl	d2a4 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   102e6:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   102ea:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   102ee:	4ad1      	ldr	r2, [pc, #836]	; (10634 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x635>)
	conn->llcp_feature.features_peer =
   102f0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	conn->common.fex_valid = 1U;
   102f4:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   102f8:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   102fa:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   102fe:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   10300:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	conn->llcp_feature.ack = conn->llcp_feature.req;
   10304:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   10308:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
	feat_result &= 0xFF;
   1030c:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   10310:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   10314:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   10316:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   1031a:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1031c:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   10320:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	conn->procedure_expire = 0U;
   10324:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   10328:	4618      	mov	r0, r3
}
   1032a:	e5d3      	b.n	fed4 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   1032c:	7f6b      	ldrb	r3, [r5, #29]
   1032e:	2b03      	cmp	r3, #3
   10330:	f47f ae00 	bne.w	ff34 <ull_conn_rx+0x100>
	switch (rej_ext_ind->reject_opcode) {
   10334:	f895 3020 	ldrb.w	r3, [r5, #32]
   10338:	3b03      	subs	r3, #3
   1033a:	2b13      	cmp	r3, #19
   1033c:	f63f adc7 	bhi.w	fece <ull_conn_rx+0x9a>
   10340:	a201      	add	r2, pc, #4	; (adr r2, 10348 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x349>)
   10342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10346:	bf00      	nop
   10348:	0001092b 	.word	0x0001092b
   1034c:	0000fecf 	.word	0x0000fecf
   10350:	0000fecf 	.word	0x0000fecf
   10354:	0000fecf 	.word	0x0000fecf
   10358:	0000fecf 	.word	0x0000fecf
   1035c:	0000fecf 	.word	0x0000fecf
   10360:	0000fecf 	.word	0x0000fecf
   10364:	0000fecf 	.word	0x0000fecf
   10368:	0000fecf 	.word	0x0000fecf
   1036c:	0000fecf 	.word	0x0000fecf
   10370:	0000fecf 	.word	0x0000fecf
   10374:	0000fecf 	.word	0x0000fecf
   10378:	000108b3 	.word	0x000108b3
   1037c:	0000fecf 	.word	0x0000fecf
   10380:	0000fecf 	.word	0x0000fecf
   10384:	0000fecf 	.word	0x0000fecf
   10388:	0000fecf 	.word	0x0000fecf
   1038c:	00010829 	.word	0x00010829
   10390:	0000fecf 	.word	0x0000fecf
   10394:	00010865 	.word	0x00010865
		if (conn->lll.role ||
   10398:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1039c:	2b00      	cmp	r3, #0
   1039e:	f6ff adc9 	blt.w	ff34 <ull_conn_rx+0x100>
   103a2:	7f6b      	ldrb	r3, [r5, #29]
   103a4:	2b18      	cmp	r3, #24
   103a6:	f47f adc5 	bne.w	ff34 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   103aa:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   103ae:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   103b2:	429a      	cmp	r2, r3
   103b4:	f43f ad8b 	beq.w	fece <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
   103b8:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		     conn->llcp_conn_param.ack) &&
   103bc:	f003 030f 	and.w	r3, r3, #15
   103c0:	2b04      	cmp	r3, #4
   103c2:	f47f ad84 	bne.w	fece <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   103c6:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   103ca:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   103ce:	2b05      	cmp	r3, #5
   103d0:	f240 85ad 	bls.w	10f2e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf2f>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   103d4:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   103d6:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   103d8:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   103dc:	f200 85a7 	bhi.w	10f2e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf2f>
			    (interval_max > 3200) ||
   103e0:	428b      	cmp	r3, r1
   103e2:	f200 85a4 	bhi.w	10f2e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf2f>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   103e6:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   103e8:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   103ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   103ee:	f080 859e 	bcs.w	10f2e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf2f>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   103f2:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   103f4:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   103f8:	f1ae 020a 	sub.w	r2, lr, #10
   103fc:	f640 4876 	movw	r8, #3190	; 0xc76
   10400:	b292      	uxth	r2, r2
   10402:	4542      	cmp	r2, r8
   10404:	f200 8593 	bhi.w	10f2e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf2f>
			     ((latency + 1) * interval_max)) ||
   10408:	3301      	adds	r3, #1
   1040a:	b29b      	uxth	r3, r3
   1040c:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   10410:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   10414:	f080 858b 	bcs.w	10f2e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf2f>
			     ((latency + 1) * interval_max)) ||
   10418:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   1041c:	4291      	cmp	r1, r2
   1041e:	f0c0 8586 	bcc.w	10f2e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf2f>
			conn->llcp_conn_param.preferred_periodicity =
   10422:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   10426:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.interval_min = interval_min;
   1042a:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1042e:	2301      	movs	r3, #1
   10430:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   10434:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   10436:	f8a4 7162 	strh.w	r7, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   1043a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   1043e:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   10442:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   10446:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   1044a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1044e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   10452:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   10456:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   1045a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1045e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   10462:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   10466:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   1046a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1046e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   10472:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   10476:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   1047a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1047e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   10482:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   10486:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   1048a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1048e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   10492:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   10496:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   1049a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1049e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   104a2:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   104a6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   104aa:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   104ae:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				sys_le16_to_cpu(cpr->offset5);
   104b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   104b6:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   104ba:	e508      	b.n	fece <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   104bc:	7f6b      	ldrb	r3, [r5, #29]
   104be:	2b18      	cmp	r3, #24
   104c0:	f47f ad38 	bne.w	ff34 <ull_conn_rx+0x100>
	return conn_upd_curr && (conn_upd_curr != conn);
   104c4:	485c      	ldr	r0, [pc, #368]	; (10638 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x639>)
   104c6:	6803      	ldr	r3, [r0, #0]
   104c8:	2b00      	cmp	r3, #0
   104ca:	f000 827b 	beq.w	109c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9c5>
   104ce:	429c      	cmp	r4, r3
   104d0:	f000 8278 	beq.w	109c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9c5>
			nack = reject_ext_ind_send(conn, *rx,
   104d4:	2320      	movs	r3, #32
   104d6:	220f      	movs	r2, #15
   104d8:	4629      	mov	r1, r5
   104da:	4620      	mov	r0, r4
}
   104dc:	b003      	add	sp, #12
   104de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   104e2:	f7ff b807 	b.w	f4f4 <reject_ext_ind_send>
		if (conn->lll.role ||
   104e6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   104ea:	2b00      	cmp	r3, #0
   104ec:	f6ff ad22 	blt.w	ff34 <ull_conn_rx+0x100>
   104f0:	f895 901d 	ldrb.w	r9, [r5, #29]
   104f4:	f1b9 0f09 	cmp.w	r9, #9
   104f8:	f47f ad1c 	bne.w	ff34 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   104fc:	f894 00ba 	ldrb.w	r0, [r4, #186]	; 0xba
   10500:	f010 0602 	ands.w	r6, r0, #2
   10504:	f47f ace3 	bne.w	fece <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10508:	484c      	ldr	r0, [pc, #304]	; (1063c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x63d>)
   1050a:	f7f9 fda5 	bl	a058 <mem_acquire>
	if (!tx) {
   1050e:	4607      	mov	r7, r0
   10510:	2800      	cmp	r0, #0
   10512:	f000 8234 	beq.w	1097e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97f>
	conn->common.txn_lock = 1U;
   10516:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	feat &= LL_FEAT_BIT_MASK;
   1051a:	4946      	ldr	r1, [pc, #280]	; (10634 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x635>)
	conn->common.txn_lock = 1U;
   1051c:	f043 0302 	orr.w	r3, r3, #2
   10520:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
   10524:	6a2a      	ldr	r2, [r5, #32]
   10526:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   10528:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1052a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1052e:	400a      	ands	r2, r1
   10530:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	feat &= LL_FEAT_BIT_MASK;
   10534:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   10538:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
	feat &= LL_FEAT_BIT_MASK;
   1053c:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   10540:	4013      	ands	r3, r2
   10542:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   10546:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   1054a:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   1054e:	f7fc fea9 	bl	d2a4 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   10552:	f008 03ff 	and.w	r3, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   10556:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   1055a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
	feat &= LL_FEAT_BIT_MASK;
   1055e:	4b35      	ldr	r3, [pc, #212]	; (10634 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x635>)
   10560:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   10564:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   10566:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1056a:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   1056e:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   10572:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   10576:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1057a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	conn->common.fex_valid = 1U;
   1057e:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   10582:	f043 0301 	orr.w	r3, r3, #1
   10586:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1058a:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1058c:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   10590:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   10594:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   10596:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   10598:	18b8      	adds	r0, r7, r2
   1059a:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1059c:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   105a0:	f00b fbce 	bl	1bd40 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   105a4:	f7fc fe7e 	bl	d2a4 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   105a8:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	dst[0] = val;
   105ac:	7339      	strb	r1, [r7, #12]
   105ae:	4002      	ands	r2, r0
	feat_result &= 0xFF;
   105b0:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   105b4:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
   105b8:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   105ba:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   105bc:	723b      	strb	r3, [r7, #8]
   105be:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   105c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   105c4:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
   105c6:	4620      	mov	r0, r4
   105c8:	727b      	strb	r3, [r7, #9]
   105ca:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   105cc:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   105ce:	73fe      	strb	r6, [r7, #15]
   105d0:	72fa      	strb	r2, [r7, #11]
   105d2:	4639      	mov	r1, r7
   105d4:	f7fe fde6 	bl	f1a4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   105d8:	2301      	movs	r3, #1
   105da:	712b      	strb	r3, [r5, #4]
	return 0;
   105dc:	4630      	mov	r0, r6
   105de:	e479      	b.n	fed4 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   105e0:	7f6b      	ldrb	r3, [r5, #29]
   105e2:	2b02      	cmp	r3, #2
   105e4:	f47f aca6 	bne.w	ff34 <ull_conn_rx+0x100>
			    conn->llcp_conn_param.req) &&
   105e8:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
		} else if ((conn->llcp_conn_param.ack !=
   105ec:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
	return ((uint16_t)src[1] << 8) | src[0];
   105f0:	f895 3020 	ldrb.w	r3, [r5, #32]
   105f4:	4291      	cmp	r1, r2
   105f6:	d002      	beq.n	105fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5ff>
			    conn->llcp_conn_param.req) &&
   105f8:	2b0f      	cmp	r3, #15
   105fa:	f000 83c5 	beq.w	10d88 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd89>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   105fe:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   10602:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   10606:	4291      	cmp	r1, r2
   10608:	d002      	beq.n	10610 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x611>
   1060a:	2b14      	cmp	r3, #20
   1060c:	f000 8439 	beq.w	10e82 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe83>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   10610:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   10614:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
   10618:	4291      	cmp	r1, r2
   1061a:	d002      	beq.n	10622 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x623>
   1061c:	2b16      	cmp	r3, #22
   1061e:	f000 8498 	beq.w	10f52 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf53>
			switch (llctrl->unknown_rsp.type) {
   10622:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10624:	bf04      	itt	eq
   10626:	2301      	moveq	r3, #1
   10628:	712b      	strbeq	r3, [r5, #4]
		conn->procedure_expire = 0U;
   1062a:	2300      	movs	r3, #0
   1062c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   10630:	4618      	mov	r0, r3
		break;
   10632:	e44f      	b.n	fed4 <ull_conn_rx+0xa0>
   10634:	087830d0 	.word	0x087830d0
   10638:	20002210 	.word	0x20002210
   1063c:	200022a4 	.word	0x200022a4
		if ((conn->llcp_req == conn->llcp_ack) ||
   10640:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   10644:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   10648:	4299      	cmp	r1, r3
   1064a:	f43f ac73 	beq.w	ff34 <ull_conn_rx+0x100>
   1064e:	f894 10bd 	ldrb.w	r1, [r4, #189]	; 0xbd
   10652:	2903      	cmp	r1, #3
   10654:	f47f ac6e 	bne.w	ff34 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   10658:	7f69      	ldrb	r1, [r5, #29]
   1065a:	2901      	cmp	r1, #1
   1065c:	f47f ac6a 	bne.w	ff34 <ull_conn_rx+0x100>
		if (conn->lll.role) {
   10660:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   10664:	2900      	cmp	r1, #0
   10666:	f2c0 846a 	blt.w	10f3e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf3f>
			conn->llcp_enc.pause_rx = 0U;
   1066a:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
			conn->llcp_ack = conn->llcp_req;
   1066e:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
			conn->procedure_expire = 0U;
   10672:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   10674:	f022 0203 	bic.w	r2, r2, #3
   10678:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
			conn->procedure_expire = 0U;
   1067c:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		if (conn->llcp_enc.refresh) {
   10680:	0750      	lsls	r0, r2, #29
   10682:	f57f ac26 	bpl.w	fed2 <ull_conn_rx+0x9e>
			conn->llcp_enc.refresh = 0U;
   10686:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1068a:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   1068c:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	int nack = 0;
   10690:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   10692:	712b      	strb	r3, [r5, #4]
   10694:	e41e      	b.n	fed4 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   10696:	7f6a      	ldrb	r2, [r5, #29]
   10698:	2a01      	cmp	r2, #1
   1069a:	f47f ac4b 	bne.w	ff34 <ull_conn_rx+0x100>
		conn->procedure_expire = 0U;
   1069e:	2300      	movs	r3, #0
   106a0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   106a4:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   106a6:	712a      	strb	r2, [r5, #4]
		break;
   106a8:	e414      	b.n	fed4 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   106aa:	7f6b      	ldrb	r3, [r5, #29]
   106ac:	2b03      	cmp	r3, #3
   106ae:	f47f ac41 	bne.w	ff34 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
   106b2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   106b6:	2b00      	cmp	r3, #0
   106b8:	f2c0 82e1 	blt.w	10c7e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7f>
			if ((conn->llcp_phy.ack !=
   106bc:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
			     conn->llcp_phy.req) &&
   106c0:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
			if ((conn->llcp_phy.ack !=
   106c4:	4281      	cmp	r1, r0
   106c6:	d007      	beq.n	106d8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6d9>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   106c8:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   106cc:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   106d0:	3a01      	subs	r2, #1
   106d2:	2a02      	cmp	r2, #2
   106d4:	f240 842f 	bls.w	10f36 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf37>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   106d8:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   106dc:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
   106e0:	1a9b      	subs	r3, r3, r2
   106e2:	f003 0303 	and.w	r3, r3, #3
   106e6:	2b02      	cmp	r3, #2
   106e8:	f000 83c2 	beq.w	10e70 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe71>
				     LLCP_ENCRYPTION)) ||
   106ec:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   106f0:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   106f4:	429a      	cmp	r2, r3
   106f6:	f000 83d7 	beq.w	10ea8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xea9>
				nack = reject_ext_ind_send(conn, *rx,
   106fa:	232a      	movs	r3, #42	; 0x2a
   106fc:	2216      	movs	r2, #22
   106fe:	e6eb      	b.n	104d8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d9>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   10700:	7f6f      	ldrb	r7, [r5, #29]
   10702:	2f01      	cmp	r7, #1
   10704:	f47f ac16 	bne.w	ff34 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   10708:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   1070c:	f013 0602 	ands.w	r6, r3, #2
   10710:	f040 83aa 	bne.w	10e68 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe69>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10714:	48c5      	ldr	r0, [pc, #788]	; (10a2c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa2d>)
   10716:	f7f9 fc9f 	bl	a058 <mem_acquire>
	if (!tx) {
   1071a:	4601      	mov	r1, r0
   1071c:	2800      	cmp	r0, #0
   1071e:	f000 812e 	beq.w	1097e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97f>
	conn->common.txn_lock = 1U;
   10722:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   10726:	f043 0302 	orr.w	r3, r3, #2
   1072a:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1072e:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   10730:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   10732:	f043 0303 	orr.w	r3, r3, #3
   10736:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   10738:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   1073a:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1073c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1073e:	f7fe fd31 	bl	f1a4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10742:	712f      	strb	r7, [r5, #4]
	return 0;
   10744:	4630      	mov	r0, r6
   10746:	f7ff bbc5 	b.w	fed4 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   1074a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1074e:	2b00      	cmp	r3, #0
   10750:	f6bf ac65 	bge.w	1001e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1f>
   10754:	f7ff bbee 	b.w	ff34 <ull_conn_rx+0x100>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   10758:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1075c:	2b00      	cmp	r3, #0
   1075e:	f6ff abe9 	blt.w	ff34 <ull_conn_rx+0x100>
   10762:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   10766:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   1076a:	429a      	cmp	r2, r3
   1076c:	f43f abe2 	beq.w	ff34 <ull_conn_rx+0x100>
   10770:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   10774:	2b03      	cmp	r3, #3
   10776:	f47f abdd 	bne.w	ff34 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   1077a:	7f6b      	ldrb	r3, [r5, #29]
   1077c:	2b01      	cmp	r3, #1
   1077e:	f47f abd9 	bne.w	ff34 <ull_conn_rx+0x100>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   10782:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
   10786:	f36f 0201 	bfc	r2, #0, #2
   1078a:	f884 20cc 	strb.w	r2, [r4, #204]	; 0xcc
	int nack = 0;
   1078e:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10790:	712b      	strb	r3, [r5, #4]
		break;
   10792:	f7ff bb9f 	b.w	fed4 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   10796:	7f6b      	ldrb	r3, [r5, #29]
   10798:	2b01      	cmp	r3, #1
   1079a:	f47f abcb 	bne.w	ff34 <ull_conn_rx+0x100>
	} else if (!conn->lll.role) {
   1079e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   107a2:	2b00      	cmp	r3, #0
   107a4:	f2c0 8106 	blt.w	109b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9b5>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   107a8:	48a0      	ldr	r0, [pc, #640]	; (10a2c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa2d>)
   107aa:	f7f9 fc55 	bl	a058 <mem_acquire>
		if (!tx) {
   107ae:	2800      	cmp	r0, #0
   107b0:	f000 80e5 	beq.w	1097e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97f>
	conn->lll.enc_rx = 0;
   107b4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   107b8:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->lll.enc_rx = 0;
   107bc:	f023 0318 	bic.w	r3, r3, #24
   107c0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_enc.pause_rx = 1U;
   107c4:	f042 0201 	orr.w	r2, r2, #1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   107c8:	7903      	ldrb	r3, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   107ca:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   107ce:	2201      	movs	r2, #1
   107d0:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   107d2:	f043 0303 	orr.w	r3, r3, #3
   107d6:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   107d8:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   107dc:	220b      	movs	r2, #11
   107de:	71c2      	strb	r2, [r0, #7]
	if (
   107e0:	2b00      	cmp	r3, #0
   107e2:	f000 819f 	beq.w	10b24 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb25>
	    !conn->llcp_enc.pause_tx &&
   107e6:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	    conn->tx_head &&
   107ea:	0791      	lsls	r1, r2, #30
   107ec:	f100 819a 	bmi.w	10b24 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb25>
	    !conn->llcp_phy.pause_tx &&
   107f0:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   107f4:	07d2      	lsls	r2, r2, #31
   107f6:	f100 8195 	bmi.w	10b24 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb25>
		if (conn->tx_head == conn->tx_data) {
   107fa:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   107fe:	4293      	cmp	r3, r2
   10800:	f000 8506 	beq.w	11210 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1211>
		} else if (!conn->tx_ctrl) {
   10804:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   10808:	2a00      	cmp	r2, #0
   1080a:	f000 8545 	beq.w	11298 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1299>
	tx->next = conn->tx_ctrl_last->next;
   1080e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   10812:	681a      	ldr	r2, [r3, #0]
   10814:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10816:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   10818:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   1081c:	6803      	ldr	r3, [r0, #0]
   1081e:	2b00      	cmp	r3, #0
   10820:	f47f ab55 	bne.w	fece <ull_conn_rx+0x9a>
   10824:	f7ff bbbf 	b.w	ffa6 <ull_conn_rx+0x172>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   10828:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1082c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   10830:	4293      	cmp	r3, r2
   10832:	f43f ab4c 	beq.w	fece <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   10836:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   10838:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   1083a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn->procedure_expire = 0U;
   1083e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   10842:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   10844:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   10848:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1084a:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1084c:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1084e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10852:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   10854:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
   10858:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1085a:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1085c:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   1085e:	4618      	mov	r0, r3
   10860:	f7ff bb38 	b.w	fed4 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   10864:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   10868:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   1086c:	428b      	cmp	r3, r1
   1086e:	f43f ab2e 	beq.w	fece <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   10872:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   10876:	2a23      	cmp	r2, #35	; 0x23
   10878:	d012      	beq.n	108a0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8a1>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1087a:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.pause_tx = 0U;
   1087e:	f894 1197 	ldrb.w	r1, [r4, #407]	; 0x197
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   10882:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   10886:	f36f 0100 	bfc	r1, #0, #1
   1088a:	f884 1197 	strb.w	r1, [r4, #407]	; 0x197
		conn->procedure_expire = 0U;
   1088e:	2100      	movs	r1, #0
   10890:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   10894:	f3c3 0102 	ubfx	r1, r3, #0, #3
   10898:	f361 1306 	bfi	r3, r1, #4, #3
   1089c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (!conn->llcp_phy.cmd) {
   108a0:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   108a4:	0759      	lsls	r1, r3, #29
   108a6:	f57f ab12 	bpl.w	fece <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   108aa:	231c      	movs	r3, #28
   108ac:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   108ae:	772a      	strb	r2, [r5, #28]
   108b0:	e4c4      	b.n	1023c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x23d>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   108b2:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   108b6:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   108ba:	4293      	cmp	r3, r2
   108bc:	f43f ab07 	beq.w	fece <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   108c0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   108c4:	2b00      	cmp	r3, #0
   108c6:	db04      	blt.n	108d2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8d3>
   108c8:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   108cc:	2b1a      	cmp	r3, #26
   108ce:	f000 8510 	beq.w	112f2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12f3>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   108d2:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   108d6:	f003 010f 	and.w	r1, r3, #15
   108da:	2904      	cmp	r1, #4
   108dc:	d106      	bne.n	108ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8ed>
	conn_upd_curr = NULL;
   108de:	4954      	ldr	r1, [pc, #336]	; (10a30 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa31>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   108e0:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   108e4:	2200      	movs	r2, #0
   108e6:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   108e8:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	if (!conn->llcp_conn_param.cmd) {
   108ec:	06da      	lsls	r2, r3, #27
   108ee:	f57f aaee 	bpl.w	fece <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   108f2:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   108f4:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   108f8:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   108fa:	f040 83ac 	bne.w	11056 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1057>
	cu->status = rej_ext_ind->error_code;
   108fe:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   10902:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   10904:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   10906:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	cu->latency = lll->latency;
   1090a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1090c:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   1090e:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   10910:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   10914:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   10918:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   1091a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1091e:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   10922:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   10924:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   10926:	f7ff bad5 	b.w	fed4 <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   1092a:	f894 10bb 	ldrb.w	r1, [r4, #187]	; 0xbb
   1092e:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   10932:	428b      	cmp	r3, r1
   10934:	f43f aacb 	beq.w	fece <ull_conn_rx+0x9a>
   10938:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   1093c:	2b03      	cmp	r3, #3
   1093e:	f47f aac6 	bne.w	fece <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   10942:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   10946:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   1094a:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1094c:	f022 0203 	bic.w	r2, r2, #3
   10950:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   10954:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   10958:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1095c:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   10960:	210d      	movs	r1, #13
   10962:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   10964:	4618      	mov	r0, r3
   10966:	f7ff bab5 	b.w	fed4 <ull_conn_rx+0xa0>
			tx->next = conn->tx_head;
   1096a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1096c:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   10970:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
	if (!tx->next) {
   10974:	2a00      	cmp	r2, #0
   10976:	f47f aaaa 	bne.w	fece <ull_conn_rx+0x9a>
   1097a:	f7ff bb14 	b.w	ffa6 <ull_conn_rx+0x172>
		*err = -ENOBUFS;
   1097e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10982:	f7ff baa7 	b.w	fed4 <ull_conn_rx+0xa0>
			conn->tx_data = conn->tx_data->next;
   10986:	6813      	ldr	r3, [r2, #0]
   10988:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   1098c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   10990:	2b00      	cmp	r3, #0
   10992:	f47f aafe 	bne.w	ff92 <ull_conn_rx+0x15e>
			tx->next = conn->tx_head->next;
   10996:	6813      	ldr	r3, [r2, #0]
   10998:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1099a:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   1099c:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   1099e:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
	if (!tx->next) {
   109a2:	2a00      	cmp	r2, #0
   109a4:	f47f aa93 	bne.w	fece <ull_conn_rx+0x9a>
   109a8:	f7ff bafd 	b.w	ffa6 <ull_conn_rx+0x172>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   109ac:	7f6b      	ldrb	r3, [r5, #29]
   109ae:	2b01      	cmp	r3, #1
   109b0:	f47f aac0 	bne.w	ff34 <ull_conn_rx+0x100>
		conn->lll.enc_tx = 0;
   109b4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   109b8:	f36f 1304 	bfc	r3, #4, #1
   109bc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		goto pause_enc_rsp_send_exit;
   109c0:	f7ff ba85 	b.w	fece <ull_conn_rx+0x9a>
		if (!conn->lll.role) {
   109c4:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   109c8:	f894 615c 	ldrb.w	r6, [r4, #348]	; 0x15c
					conn->llcp_conn_param.ack) &&
   109cc:	f894 115d 	ldrb.w	r1, [r4, #349]	; 0x15d
		if (!conn->lll.role) {
   109d0:	2f00      	cmp	r7, #0
   109d2:	f2c0 80b2 	blt.w	10b3a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb3b>
			if ((conn->llcp_conn_param.req !=
   109d6:	42b1      	cmp	r1, r6
   109d8:	d00a      	beq.n	109f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9f1>
			    ((conn->llcp_conn_param.state ==
   109da:	f894 615e 	ldrb.w	r6, [r4, #350]	; 0x15e
					conn->llcp_conn_param.ack) &&
   109de:	f016 0f0b 	tst.w	r6, #11
   109e2:	f000 824b 	beq.w	10e7c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe7d>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   109e6:	f006 060f 	and.w	r6, r6, #15
   109ea:	2e06      	cmp	r6, #6
   109ec:	f000 8246 	beq.w	10e7c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe7d>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   109f0:	f894 60bb 	ldrb.w	r6, [r4, #187]	; 0xbb
   109f4:	f894 70bc 	ldrb.w	r7, [r4, #188]	; 0xbc
   109f8:	1bf6      	subs	r6, r6, r7
   109fa:	f006 0603 	and.w	r6, r6, #3
   109fe:	2e02      	cmp	r6, #2
   10a00:	f000 8320 	beq.w	11044 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1045>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   10a04:	f894 7194 	ldrb.w	r7, [r4, #404]	; 0x194
   10a08:	f894 6195 	ldrb.w	r6, [r4, #405]	; 0x195
   10a0c:	42b7      	cmp	r7, r6
   10a0e:	f000 835b 	beq.w	110c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10c9>
				nack = reject_ext_ind_send(conn, *rx,
   10a12:	232a      	movs	r3, #42	; 0x2a
   10a14:	e55f      	b.n	104d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d7>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10a16:	7913      	ldrb	r3, [r2, #4]
   10a18:	f003 0303 	and.w	r3, r3, #3
   10a1c:	2b03      	cmp	r3, #3
   10a1e:	f000 82bb 	beq.w	10f98 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf99>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   10a22:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
   10a26:	f7ff bab6 	b.w	ff96 <ull_conn_rx+0x162>
   10a2a:	bf00      	nop
   10a2c:	200022a4 	.word	0x200022a4
   10a30:	20002210 	.word	0x20002210
	if (conn->common.txn_lock) {
   10a34:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   10a38:	079b      	lsls	r3, r3, #30
   10a3a:	f53f aa48 	bmi.w	fece <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10a3e:	48d1      	ldr	r0, [pc, #836]	; (10d84 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd85>)
   10a40:	f7f9 fb0a 	bl	a058 <mem_acquire>
	if (!tx) {
   10a44:	4603      	mov	r3, r0
   10a46:	2800      	cmp	r0, #0
   10a48:	d099      	beq.n	1097e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97f>
	conn->common.txn_lock = 1U;
   10a4a:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   10a4e:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	eff_rx_octets = conn->lll.max_rx_octets;
   10a52:	f8b4 8040 	ldrh.w	r8, [r4, #64]	; 0x40
	eff_tx_octets = conn->lll.max_tx_octets;
   10a56:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
	eff_rx_time = conn->lll.max_rx_time;
   10a5a:	f8b4 a044 	ldrh.w	sl, [r4, #68]	; 0x44
	eff_tx_time = conn->lll.max_tx_time;
   10a5e:	f8b4 b042 	ldrh.w	fp, [r4, #66]	; 0x42
	conn->common.txn_lock = 1U;
   10a62:	f042 0202 	orr.w	r2, r2, #2
   10a66:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   10a6a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (/* Local idle, and Peer request then complete the Peer procedure
   10a6e:	428a      	cmp	r2, r1
   10a70:	f040 8431 	bne.w	112d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d7>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   10a74:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   10a76:	291a      	cmp	r1, #26
   10a78:	f240 8269 	bls.w	10f4e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf4f>
			eff_tx_octets = MIN(max_rx_octets,
   10a7c:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	; 0xb6
   10a80:	4281      	cmp	r1, r0
   10a82:	bf28      	it	cs
   10a84:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   10a86:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   10a88:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   10a8c:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   10a8e:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   10a90:	bf34      	ite	cc
   10a92:	46c6      	movcc	lr, r8
   10a94:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   10a98:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   10a9c:	bf34      	ite	cc
   10a9e:	4658      	movcc	r0, fp
   10aa0:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   10aa4:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   10aa8:	bf34      	ite	cc
   10aaa:	46d4      	movcc	ip, sl
   10aac:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   10ab0:	45c6      	cmp	lr, r8
   10ab2:	f000 8287 	beq.w	10fc4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfc5>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   10ab6:	3a01      	subs	r2, #1
   10ab8:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.rx_octets = eff_rx_octets;
   10abc:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
			conn->llcp_length.tx_octets = eff_tx_octets;
   10ac0:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
			conn->llcp_length.rx_time = eff_rx_time;
   10ac4:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
			conn->llcp_length.tx_time = eff_tx_time;
   10ac8:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			if (tx) {
   10acc:	2b00      	cmp	r3, #0
   10ace:	f000 82ae 	beq.w	1102e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x102f>
				conn->llcp_length.state =
   10ad2:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   10ad6:	2505      	movs	r5, #5
   10ad8:	f365 0202 	bfi	r2, r5, #0, #3
   10adc:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			link->mem = conn->llcp_rx;
   10ae0:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   10ae4:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   10ae6:	6832      	ldr	r2, [r6, #0]
   10ae8:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   10aea:	6832      	ldr	r2, [r6, #0]
   10aec:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
			*rx = NULL;
   10af0:	2200      	movs	r2, #0
   10af2:	6032      	str	r2, [r6, #0]
	if (tx) {
   10af4:	2b00      	cmp	r3, #0
   10af6:	f43f a9ec 	beq.w	fed2 <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   10afa:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   10afc:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   10afe:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   10b02:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   10b04:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   10b06:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10b08:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   10b0a:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   10b0c:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   10b10:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   10b14:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   10b16:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10b18:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   10b1a:	f7fe fb43 	bl	f1a4 <ctrl_tx_sec_enqueue>
	return 0;
   10b1e:	2000      	movs	r0, #0
}
   10b20:	f7ff b9d8 	b.w	fed4 <ull_conn_rx+0xa0>
		if (!conn->tx_ctrl) {
   10b24:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   10b28:	2a00      	cmp	r2, #0
   10b2a:	f47f ae70 	bne.w	1080e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x80f>
			tx->next = conn->tx_head;
   10b2e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   10b30:	e9c4 0067 	strd	r0, r0, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   10b34:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
   10b38:	e670      	b.n	1081c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x81d>
		} else if ((conn->llcp_conn_param.req ==
   10b3a:	42b1      	cmp	r1, r6
   10b3c:	d005      	beq.n	10b4a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb4b>
			    conn->llcp_conn_param.ack) ||
   10b3e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   10b42:	f012 0f0b 	tst.w	r2, #11
   10b46:	f47f a9c2 	bne.w	fece <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   10b4a:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   10b4e:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   10b52:	2a05      	cmp	r2, #5
   10b54:	f240 8091 	bls.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   10b58:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   10b5c:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   10b60:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   10b64:	f200 8089 	bhi.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
			    (interval_max > 3200) ||
   10b68:	42b2      	cmp	r2, r6
   10b6a:	f200 8086 	bhi.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   10b6e:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   10b72:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   10b76:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   10b7a:	d27e      	bcs.n	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   10b7c:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   10b80:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   10b84:	f1a2 070a 	sub.w	r7, r2, #10
   10b88:	f640 4b76 	movw	fp, #3190	; 0xc76
   10b8c:	b2bf      	uxth	r7, r7
   10b8e:	455f      	cmp	r7, fp
   10b90:	d873      	bhi.n	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
			     ((latency + 1) * interval_max)) ||
   10b92:	f10c 0701 	add.w	r7, ip, #1
   10b96:	b2bf      	uxth	r7, r7
   10b98:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   10b9c:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   10ba0:	d26b      	bcs.n	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
			     ((latency + 1) * interval_max)) ||
   10ba2:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   10ba6:	455e      	cmp	r6, fp
   10ba8:	d367      	bcc.n	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
			conn->llcp_conn_param.interval_min = interval_min;
   10baa:	f8a4 a160 	strh.w	sl, [r4, #352]	; 0x160
			conn->llcp_conn_param.interval_max = interval_max;
   10bae:	f8a4 9162 	strh.w	r9, [r4, #354]	; 0x162
			conn->llcp_conn_param.latency =	latency;
   10bb2:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
			conn->llcp_conn_param.timeout =	timeout;
   10bb6:	f8a4 e166 	strh.w	lr, [r4, #358]	; 0x166
			conn->llcp_conn_param.preferred_periodicity =
   10bba:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   10bbe:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   10bc2:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   10bc6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   10bca:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
				sys_le16_to_cpu(cpr->offset0);
   10bce:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   10bd2:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   10bd6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   10bda:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
				sys_le16_to_cpu(cpr->offset1);
   10bde:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   10be2:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   10be6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   10bea:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
				sys_le16_to_cpu(cpr->offset2);
   10bee:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   10bf2:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   10bf6:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   10bfa:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
				sys_le16_to_cpu(cpr->offset3);
   10bfe:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   10c02:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   10c06:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   10c0a:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->offset4);
   10c0e:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   10c12:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   10c16:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   10c1a:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
				sys_le16_to_cpu(cpr->offset5);
   10c1e:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   10c22:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   10c26:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   10c2a:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
			     lll->interval) ||
   10c2e:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   10c30:	42be      	cmp	r6, r7
   10c32:	f000 833a 	beq.w	112aa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12ab>
				conn->llcp_conn_param.state =
   10c36:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   10c3a:	2503      	movs	r5, #3
   10c3c:	f365 0203 	bfi	r2, r5, #0, #4
   10c40:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
			conn->llcp_conn_param.ack--;
   10c44:	3901      	subs	r1, #1
   10c46:	f884 115d 	strb.w	r1, [r4, #349]	; 0x15d
	if (!conn_upd_curr) {
   10c4a:	2b00      	cmp	r3, #0
   10c4c:	f47f a941 	bne.w	fed2 <ull_conn_rx+0x9e>
		conn_upd_curr = conn;
   10c50:	6004      	str	r4, [r0, #0]
	int nack = 0;
   10c52:	4618      	mov	r0, r3
   10c54:	f7ff b93e 	b.w	fed4 <ull_conn_rx+0xa0>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   10c58:	f894 215c 	ldrb.w	r2, [r4, #348]	; 0x15c
   10c5c:	f894 315d 	ldrb.w	r3, [r4, #349]	; 0x15d
   10c60:	4293      	cmp	r3, r2
   10c62:	f43f ade1 	beq.w	10828 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x829>
		rej_ext_ind->error_code = rej_ind->error_code;
   10c66:	f895 3020 	ldrb.w	r3, [r5, #32]
   10c6a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   10c6e:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   10c72:	2900      	cmp	r1, #0
   10c74:	f6bf ae2a 	bge.w	108cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8cd>
   10c78:	e62b      	b.n	108d2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8d3>
				nack = reject_ext_ind_send(conn, *rx,
   10c7a:	231e      	movs	r3, #30
   10c7c:	e42b      	b.n	104d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d7>
	if (conn->common.txn_lock) {
   10c7e:	f894 70ba 	ldrb.w	r7, [r4, #186]	; 0xba
   10c82:	f017 0702 	ands.w	r7, r7, #2
   10c86:	f47f a922 	bne.w	fece <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10c8a:	483e      	ldr	r0, [pc, #248]	; (10d84 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd85>)
   10c8c:	f7f9 f9e4 	bl	a058 <mem_acquire>
	if (!tx) {
   10c90:	4602      	mov	r2, r0
   10c92:	2800      	cmp	r0, #0
   10c94:	f43f ae73 	beq.w	1097e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97f>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   10c98:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->common.txn_lock = 1U;
   10c9c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
	if (conn->llcp_phy.ack ==
   10ca0:	f894 e195 	ldrb.w	lr, [r4, #405]	; 0x195
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   10ca4:	2002      	movs	r0, #2
   10ca6:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   10caa:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   10cae:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
	if (conn->llcp_phy.ack ==
   10cb2:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
	conn->common.txn_lock = 1U;
   10cb6:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
			conn->phy_pref_tx;
   10cba:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
	if (conn->llcp_phy.ack ==
   10cbe:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   10cc0:	f3c3 0602 	ubfx	r6, r3, #0, #3
   10cc4:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   10cc8:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   10ccc:	d114      	bne.n	10cf8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcf9>
		conn->llcp_phy.ack--;
   10cce:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   10cd0:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
		conn->llcp_phy.ack--;
   10cd4:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
		conn->llcp_phy.tx =
   10cd8:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
		conn->llcp_phy.cmd = 0U;
   10cdc:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   10ce0:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   10ce4:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   10ce8:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		conn->procedure_expire =
   10cec:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
		conn->llcp_phy.rx =
   10cf0:	f884 1196 	strb.w	r1, [r4, #406]	; 0x196
		conn->procedure_expire =
   10cf4:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->llcp_phy.rx &= p->tx_phys;
   10cf8:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
	conn->llcp_phy.tx &= p->rx_phys;
   10cfc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   10d00:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   10d04:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   10d08:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   10d0c:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   10d10:	009b      	lsls	r3, r3, #2
   10d12:	f001 0103 	and.w	r1, r1, #3
   10d16:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   10d1a:	430b      	orrs	r3, r1
   10d1c:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   10d20:	2303      	movs	r3, #3
   10d22:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   10d24:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10d26:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   10d28:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   10d2c:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   10d2e:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10d30:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   10d34:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   10d36:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10d3a:	7110      	strb	r0, [r2, #4]
	if (
   10d3c:	2b00      	cmp	r3, #0
   10d3e:	f000 80aa 	beq.w	10e96 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe97>
	    !conn->llcp_enc.pause_tx &&
   10d42:	f894 013e 	ldrb.w	r0, [r4, #318]	; 0x13e
	    conn->tx_head &&
   10d46:	0787      	lsls	r7, r0, #30
   10d48:	f100 80a5 	bmi.w	10e96 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe97>
	    !conn->llcp_phy.pause_tx &&
   10d4c:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
   10d50:	07c6      	lsls	r6, r0, #31
   10d52:	f100 80a0 	bmi.w	10e96 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe97>
		if (conn->tx_head == conn->tx_data) {
   10d56:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
   10d5a:	4283      	cmp	r3, r0
   10d5c:	f000 824c 	beq.w	111f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11f9>
		} else if (!conn->tx_ctrl) {
   10d60:	2900      	cmp	r1, #0
   10d62:	f000 8291 	beq.w	11288 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1289>
	tx->next = conn->tx_ctrl_last->next;
   10d66:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
   10d6a:	6819      	ldr	r1, [r3, #0]
   10d6c:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   10d6e:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   10d70:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
	if (!tx->next) {
   10d74:	6813      	ldr	r3, [r2, #0]
   10d76:	2b00      	cmp	r3, #0
   10d78:	f47f a8a9 	bne.w	fece <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   10d7c:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10d80:	f7ff b8a5 	b.w	fece <ull_conn_rx+0x9a>
   10d84:	200022a4 	.word	0x200022a4
			conn->llcp_conn_param.disabled = 1U;
   10d88:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   10d8c:	f043 0320 	orr.w	r3, r3, #32
   10d90:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
			if (!conn->lll.role) {
   10d94:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   10d98:	2b00      	cmp	r3, #0
   10d9a:	f2c0 8139 	blt.w	11010 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1011>
				LL_ASSERT(conn->llcp_cu.req ==
   10d9e:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   10da2:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   10da6:	429a      	cmp	r2, r3
   10da8:	d00e      	beq.n	10dc8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xdc9>
   10daa:	4ac1      	ldr	r2, [pc, #772]	; (110b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10b1>)
   10dac:	49c1      	ldr	r1, [pc, #772]	; (110b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10b5>)
   10dae:	48c2      	ldr	r0, [pc, #776]	; (110b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10b9>)
   10db0:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   10db4:	f00a f97f 	bl	1b0b6 <printk>
   10db8:	4040      	eors	r0, r0
   10dba:	f380 8811 	msr	BASEPRI, r0
   10dbe:	f04f 0003 	mov.w	r0, #3
   10dc2:	df02      	svc	2
   10dc4:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_conn_param.state =
   10dc8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   10dcc:	2106      	movs	r1, #6
   10dce:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   10dd2:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   10dd4:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   10dd6:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
				conn->llcp_cu.win_size = 1U;
   10dda:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10dde:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   10de0:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   10de4:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10de8:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   10dec:	00db      	lsls	r3, r3, #3
   10dee:	f022 020f 	bic.w	r2, r2, #15
   10df2:	430b      	orrs	r3, r1
   10df4:	4313      	orrs	r3, r2
   10df6:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
				conn->llcp_cu.latency =
   10dfa:	f8b4 3164 	ldrh.w	r3, [r4, #356]	; 0x164
				conn->llcp_cu.interval =
   10dfe:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
				conn->llcp_cu.latency =
   10e02:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
				conn->llcp_cu.win_offset_us = 0U;
   10e06:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   10e08:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
				conn->llcp_cu.interval =
   10e0c:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
				conn->llcp_cu.timeout =
   10e10:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
				conn->llcp_cu.win_offset_us = 0U;
   10e14:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10e18:	7129      	strb	r1, [r5, #4]
				break;
   10e1a:	f7ff b85b 	b.w	fed4 <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10e1e:	48a7      	ldr	r0, [pc, #668]	; (110bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10bd>)
   10e20:	f7f9 f91a 	bl	a058 <mem_acquire>
		if (!tx) {
   10e24:	4601      	mov	r1, r0
   10e26:	2800      	cmp	r0, #0
   10e28:	f43f ada9 	beq.w	1097e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97f>
		conn->llcp_version.tx = 1U;
   10e2c:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
   10e30:	f043 0301 	orr.w	r3, r3, #1
   10e34:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   10e38:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   10e3a:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   10e3c:	220c      	movs	r2, #12
   10e3e:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   10e40:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   10e42:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   10e46:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   10e4a:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   10e4c:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   10e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   10e52:	2205      	movs	r2, #5
		v->sub_version_number =
   10e54:	72c3      	strb	r3, [r0, #11]
   10e56:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   10e58:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   10e5a:	4620      	mov	r0, r4
   10e5c:	f7fe f9a2 	bl	f1a4 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10e60:	2301      	movs	r3, #1
   10e62:	712b      	strb	r3, [r5, #4]
   10e64:	f7ff ba09 	b.w	1027a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x27b>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10e68:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   10e6a:	2000      	movs	r0, #0
   10e6c:	f7ff b832 	b.w	fed4 <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   10e70:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
   10e74:	2b03      	cmp	r3, #3
   10e76:	f47f ac40 	bne.w	106fa <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6fb>
   10e7a:	e437      	b.n	106ec <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6ed>
				nack = reject_ext_ind_send(conn, *rx,
   10e7c:	2323      	movs	r3, #35	; 0x23
   10e7e:	f7ff bb2a 	b.w	104d6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d7>
			conn->llcp_length.disabled = 1U;
   10e82:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   10e86:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->llcp_length.disabled = 1U;
   10e8a:	f043 0308 	orr.w	r3, r3, #8
   10e8e:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			conn->llcp_length.ack = conn->llcp_length.req;
   10e92:	f7ff bbca 	b.w	1062a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x62b>
		if (!conn->tx_ctrl) {
   10e96:	2900      	cmp	r1, #0
   10e98:	f47f af65 	bne.w	10d66 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd67>
			tx->next = conn->tx_head;
   10e9c:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   10e9e:	e9c4 2267 	strd	r2, r2, [r4, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   10ea2:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
   10ea6:	e765      	b.n	10d74 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd75>
				conn->llcp_phy.state =
   10ea8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   10eac:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   10eae:	f043 0303 	orr.w	r3, r3, #3
   10eb2:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (conn->llcp_phy.ack ==
   10eb6:	d111      	bne.n	10edc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xedd>
					conn->llcp_phy.tx =
   10eb8:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
						conn->phy_pref_rx;
   10ebc:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
					conn->llcp_phy.ack--;
   10ec0:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   10ec2:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   10ec6:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
					conn->llcp_phy.tx =
   10eca:	f240 43fc 	movw	r3, #1276	; 0x4fc
   10ece:	f022 0204 	bic.w	r2, r2, #4
   10ed2:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   10ed6:	4313      	orrs	r3, r2
   10ed8:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.rx &= p->tx_phys;
   10edc:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   10ee0:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   10ee4:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   10ee8:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   10eec:	f003 0203 	and.w	r2, r3, #3
   10ef0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   10ef4:	4003      	ands	r3, r0
   10ef6:	009b      	lsls	r3, r3, #2
   10ef8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   10efc:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   10efe:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   10f02:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   10f06:	d002      	beq.n	10f0e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf0f>
   10f08:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   10f0c:	d105      	bne.n	10f1a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf1b>
					conn->llcp_phy.tx = 0;
   10f0e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   10f12:	f003 0303 	and.w	r3, r3, #3
   10f16:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
				conn->llcp_phy.pause_tx = 1U;
   10f1a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10f1e:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   10f20:	4313      	orrs	r3, r2
   10f22:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
	int nack = 0;
   10f26:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   10f28:	712a      	strb	r2, [r5, #4]
   10f2a:	f7fe bfd3 	b.w	fed4 <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   10f2e:	231e      	movs	r3, #30
   10f30:	2210      	movs	r2, #16
   10f32:	f7ff bad1 	b.w	104d8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d9>
				nack = reject_ext_ind_send(conn, *rx,
   10f36:	2323      	movs	r3, #35	; 0x23
   10f38:	2216      	movs	r2, #22
   10f3a:	f7ff bacd 	b.w	104d8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d9>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   10f3e:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   10f42:	f36f 0301 	bfc	r3, #0, #2
   10f46:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
   10f4a:	f7ff bb99 	b.w	10680 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x681>
   10f4e:	4649      	mov	r1, r9
   10f50:	e599      	b.n	10a86 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa87>
			lll->phy_tx_time = lll->phy_tx;
   10f52:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
			conn->llcp_phy.pause_tx = 0U;
   10f56:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
			conn->llcp_phy.ack = conn->llcp_phy.req;
   10f5a:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->llcp_phy.pause_tx = 0U;
   10f5e:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   10f62:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   10f64:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   10f68:	f361 1206 	bfi	r2, r1, #4, #3
   10f6c:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
			if (conn->llcp_phy.cmd) {
   10f70:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   10f74:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
			lll->phy_tx_time = lll->phy_tx;
   10f78:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10f7c:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   10f7e:	d078      	beq.n	11072 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1073>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10f80:	221c      	movs	r2, #28
   10f82:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   10f84:	2300      	movs	r3, #0
   10f86:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   10f88:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   10f8a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   10f8e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10f92:	77ab      	strb	r3, [r5, #30]
   10f94:	f7ff bb49 	b.w	1062a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x62b>
	    ((pdu_data_tx->llctrl.opcode !=
   10f98:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10f9a:	2b03      	cmp	r3, #3
   10f9c:	f43f acfb 	beq.w	10996 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x997>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   10fa0:	2b0a      	cmp	r3, #10
   10fa2:	f47f ad3e 	bne.w	10a22 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa23>
   10fa6:	e4f6      	b.n	10996 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x997>
	conn->llcp_enc.pause_rx = 0U;
   10fa8:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
	conn->llcp_ack = conn->llcp_req;
   10fac:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
	conn->procedure_expire = 0U;
   10fb0:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   10fb2:	f021 0103 	bic.w	r1, r1, #3
   10fb6:	f884 113e 	strb.w	r1, [r4, #318]	; 0x13e
	conn->procedure_expire = 0U;
   10fba:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	int nack = 0;
   10fbe:	4618      	mov	r0, r3
   10fc0:	f7fe bf88 	b.w	fed4 <ull_conn_rx+0xa0>
			conn->procedure_expire = 0U;
   10fc4:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   10fc6:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   10fc8:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   10fcc:	f8a4 70ac 	strh.w	r7, [r4, #172]	; 0xac
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   10fd0:	f000 8108 	beq.w	111e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11e5>
			conn->lll.max_rx_time = eff_rx_time;
   10fd4:	f8a4 c044 	strh.w	ip, [r4, #68]	; 0x44
			if (tx) {
   10fd8:	2b00      	cmp	r3, #0
   10fda:	f000 80ff 	beq.w	111dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11dd>
					(conn->llcp_length.req - 1);
   10fde:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   10fe0:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
				conn->llcp_length.state =
   10fe4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->llcp_length.rx_octets = eff_rx_octets;
   10fe8:	f8a4 e188 	strh.w	lr, [r4, #392]	; 0x188
				conn->llcp_length.state =
   10fec:	2603      	movs	r6, #3
   10fee:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   10ff2:	f8a4 118a 	strh.w	r1, [r4, #394]	; 0x18a
				conn->llcp_length.rx_time = eff_rx_time;
   10ff6:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_length.tx_time = eff_tx_time;
   10ffa:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
				conn->llcp_length.state =
   10ffe:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   11002:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   11006:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   11008:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1100c:	84e8      	strh	r0, [r5, #38]	; 0x26
   1100e:	e571      	b.n	10af4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaf5>
	conn_upd_curr = NULL;
   11010:	4b2b      	ldr	r3, [pc, #172]	; (110c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10c1>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11012:	f884 215d 	strb.w	r2, [r4, #349]	; 0x15d
	conn_upd_curr = NULL;
   11016:	2200      	movs	r2, #0
   11018:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   1101a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1101e:	f013 0310 	ands.w	r3, r3, #16
   11022:	d12a      	bne.n	1107a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x107b>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11024:	2201      	movs	r2, #1
   11026:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   11028:	4618      	mov	r0, r3
				break;
   1102a:	f7fe bf53 	b.w	fed4 <ull_conn_rx+0xa0>
				conn->llcp_length.state =
   1102e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				conn->lll.max_tx_octets = eff_tx_octets;
   11032:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->llcp_length.state =
   11034:	2504      	movs	r5, #4
   11036:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   1103a:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
				conn->llcp_length.state =
   1103e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
   11042:	e54d      	b.n	10ae0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xae1>
				      0x03) == 0x02) &&
   11044:	f894 60bd 	ldrb.w	r6, [r4, #189]	; 0xbd
   11048:	2e03      	cmp	r6, #3
   1104a:	f47f ace2 	bne.w	10a12 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa13>
   1104e:	e4d9      	b.n	10a04 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa05>
	struct node_tx *tx = NULL;
   11050:	2300      	movs	r3, #0
   11052:	f7ff b82d 	b.w	100b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb1>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   11056:	4a16      	ldr	r2, [pc, #88]	; (110b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10b1>)
   11058:	491a      	ldr	r1, [pc, #104]	; (110c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10c5>)
   1105a:	4817      	ldr	r0, [pc, #92]	; (110b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10b9>)
   1105c:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   11060:	f00a f829 	bl	1b0b6 <printk>
   11064:	4040      	eors	r0, r0
   11066:	f380 8811 	msr	BASEPRI, r0
   1106a:	f04f 0003 	mov.w	r0, #3
   1106e:	df02      	svc	2
   11070:	e445      	b.n	108fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8ff>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11072:	2201      	movs	r2, #1
   11074:	711a      	strb	r2, [r3, #4]
   11076:	f7ff bad8 	b.w	1062a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x62b>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1107a:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1107c:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11080:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   11082:	f040 80d4 	bne.w	1122e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x122f>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11086:	231a      	movs	r3, #26
   11088:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   1108a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   1108c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
			cu->latency = lll->latency;
   11090:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   11092:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   11094:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   11098:	227d      	movs	r2, #125	; 0x7d
   1109a:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   1109e:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   110a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   110a4:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   110a8:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   110aa:	f7ff babe 	b.w	1062a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x62b>
   110ae:	bf00      	nop
   110b0:	00020800 	.word	0x00020800
   110b4:	000208f4 	.word	0x000208f4
   110b8:	000203b4 	.word	0x000203b4
   110bc:	200022a4 	.word	0x200022a4
   110c0:	20002210 	.word	0x20002210
   110c4:	00020500 	.word	0x00020500
				uint16_t interval_min =
   110c8:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   110cc:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   110d0:	2e05      	cmp	r6, #5
   110d2:	f67f add2 	bls.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
				uint16_t interval_max =
   110d6:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   110da:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   110de:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   110e2:	f63f adca 	bhi.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
				    (interval_max > 3200) ||
   110e6:	4576      	cmp	r6, lr
   110e8:	f63f adc7 	bhi.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
				uint16_t latency =
   110ec:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   110ee:	f8ad 6006 	strh.w	r6, [sp, #6]
   110f2:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
   110f4:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   110f8:	f4bf adbf 	bcs.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
				uint16_t timeout =
   110fc:	8cef      	ldrh	r7, [r5, #38]	; 0x26
   110fe:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
   11102:	f1ac 0a0a 	sub.w	sl, ip, #10
   11106:	f640 4b76 	movw	fp, #3190	; 0xc76
   1110a:	fa1f fa8a 	uxth.w	sl, sl
   1110e:	45da      	cmp	sl, fp
   11110:	f63f adb3 	bhi.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
				     ((latency + 1) * interval_max)) ||
   11114:	f106 0a01 	add.w	sl, r6, #1
   11118:	fa1f fa8a 	uxth.w	sl, sl
   1111c:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   11120:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
   11124:	f4bf ada9 	bcs.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
				     ((latency + 1) * interval_max)) ||
   11128:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1112c:	45de      	cmp	lr, fp
   1112e:	f4ff ada4 	bcc.w	10c7a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc7b>
				conn->llcp_conn_param.interval_max =
   11132:	f8a4 8162 	strh.w	r8, [r4, #354]	; 0x162
				conn->llcp_conn_param.latency =	latency;
   11136:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
   1113a:	f8a4 9160 	strh.w	r9, [r4, #352]	; 0x160
				conn->llcp_conn_param.latency =	latency;
   1113e:	f8a4 8164 	strh.w	r8, [r4, #356]	; 0x164
				conn->llcp_conn_param.timeout =	timeout;
   11142:	f8a4 7166 	strh.w	r7, [r4, #358]	; 0x166
				conn->llcp_conn_param.preferred_periodicity =
   11146:	f884 b168 	strb.w	fp, [r4, #360]	; 0x168
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1114a:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   1114e:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   11152:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   11156:	f8a4 716a 	strh.w	r7, [r4, #362]	; 0x16a
					sys_le16_to_cpu(cpr->offset0);
   1115a:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   1115e:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   11162:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   11166:	f8a4 716c 	strh.w	r7, [r4, #364]	; 0x16c
					sys_le16_to_cpu(cpr->offset1);
   1116a:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   1116e:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   11172:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   11176:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
					sys_le16_to_cpu(cpr->offset2);
   1117a:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   1117e:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   11182:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   11186:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
					sys_le16_to_cpu(cpr->offset3);
   1118a:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   1118e:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   11192:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   11196:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
					sys_le16_to_cpu(cpr->offset4);
   1119a:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   1119e:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   111a2:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   111a6:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
					sys_le16_to_cpu(cpr->offset5);
   111aa:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   111ae:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   111b2:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   111b6:	f8a4 7176 	strh.w	r7, [r4, #374]	; 0x176
				     lll->interval) ||
   111ba:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   111bc:	45be      	cmp	lr, r7
   111be:	d044      	beq.n	1124a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x124b>
					if (conn->llcp_enc.pause_tx) {
   111c0:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   111c4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
					if (conn->llcp_enc.pause_tx) {
   111c8:	f43f ad37 	beq.w	10c3a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc3b>
						conn->llcp_conn_param.state =
   111cc:	2602      	movs	r6, #2
   111ce:	f366 0203 	bfi	r2, r6, #0, #4
   111d2:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
						(*rx)->hdr.type =
   111d6:	2201      	movs	r2, #1
   111d8:	712a      	strb	r2, [r5, #4]
   111da:	e533      	b.n	10c44 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc45>
				conn->lll.max_tx_octets = eff_tx_octets;
   111dc:	87e1      	strh	r1, [r4, #62]	; 0x3e
				conn->lll.max_tx_time = eff_tx_time;
   111de:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
   111e2:	e70e      	b.n	11002 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1003>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   111e4:	4558      	cmp	r0, fp
   111e6:	f47f aef5 	bne.w	10fd4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd5>
			    eff_rx_time == conn->lll.max_rx_time &&
   111ea:	45d4      	cmp	ip, sl
   111ec:	f47f aef2 	bne.w	10fd4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd5>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   111f0:	6832      	ldr	r2, [r6, #0]
   111f2:	2501      	movs	r5, #1
   111f4:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   111f6:	e47d      	b.n	10af4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xaf5>
			conn->tx_data = conn->tx_data->next;
   111f8:	6818      	ldr	r0, [r3, #0]
   111fa:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   111fe:	2900      	cmp	r1, #0
   11200:	f47f adb1 	bne.w	10d66 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd67>
			tx->next = conn->tx_head->next;
   11204:	6819      	ldr	r1, [r3, #0]
   11206:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   11208:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1120a:	e9c4 2268 	strd	r2, r2, [r4, #416]	; 0x1a0
   1120e:	e5b1      	b.n	10d74 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd75>
			conn->tx_data = conn->tx_data->next;
   11210:	681a      	ldr	r2, [r3, #0]
   11212:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   11216:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   1121a:	2a00      	cmp	r2, #0
   1121c:	f47f aaf7 	bne.w	1080e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x80f>
			tx->next = conn->tx_head->next;
   11220:	681a      	ldr	r2, [r3, #0]
   11222:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   11224:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   11226:	e9c4 0068 	strd	r0, r0, [r4, #416]	; 0x1a0
   1122a:	f7ff baf7 	b.w	1081c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x81d>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1122e:	4a53      	ldr	r2, [pc, #332]	; (1137c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x137d>)
   11230:	4953      	ldr	r1, [pc, #332]	; (11380 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1381>)
   11232:	4854      	ldr	r0, [pc, #336]	; (11384 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1385>)
   11234:	f641 4322 	movw	r3, #7202	; 0x1c22
   11238:	f009 ff3d 	bl	1b0b6 <printk>
   1123c:	4040      	eors	r0, r0
   1123e:	f380 8811 	msr	BASEPRI, r0
   11242:	f04f 0003 	mov.w	r0, #3
   11246:	df02      	svc	2
   11248:	e71d      	b.n	11086 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1087>
				     lll->interval) ||
   1124a:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   1124e:	45b6      	cmp	lr, r6
   11250:	d1b6      	bne.n	111c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11c1>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   11252:	f240 46e2 	movw	r6, #1250	; 0x4e2
   11256:	fb06 f707 	mul.w	r7, r6, r7
   1125a:	f242 7610 	movw	r6, #10000	; 0x2710
   1125e:	fb06 760c 	mla	r6, r6, ip, r7
   11262:	3e01      	subs	r6, #1
   11264:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
   11268:	f8b4 70a6 	ldrh.w	r7, [r4, #166]	; 0xa6
   1126c:	b2b6      	uxth	r6, r6
   1126e:	42b7      	cmp	r7, r6
   11270:	d1a6      	bne.n	111c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11c1>
				conn->llcp_conn_param.state =
   11272:	f8b4 215e 	ldrh.w	r2, [r4, #350]	; 0x15e
   11276:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   1127a:	f042 0201 	orr.w	r2, r2, #1
   1127e:	f8a4 215e 	strh.w	r2, [r4, #350]	; 0x15e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11282:	2201      	movs	r2, #1
   11284:	712a      	strb	r2, [r5, #4]
   11286:	e4dd      	b.n	10c44 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc45>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11288:	7919      	ldrb	r1, [r3, #4]
   1128a:	f001 0103 	and.w	r1, r1, #3
   1128e:	2903      	cmp	r1, #3
   11290:	d029      	beq.n	112e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12e7>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11292:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   11296:	e566      	b.n	10d66 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd67>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11298:	791a      	ldrb	r2, [r3, #4]
   1129a:	f002 0203 	and.w	r2, r2, #3
   1129e:	2a03      	cmp	r2, #3
   112a0:	d065      	beq.n	1136e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x136f>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   112a2:	e9c4 3368 	strd	r3, r3, [r4, #416]	; 0x1a0
   112a6:	f7ff bab2 	b.w	1080e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x80f>
			     lll->interval) ||
   112aa:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   112ac:	4567      	cmp	r7, ip
   112ae:	f47f acc2 	bne.w	10c36 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc37>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   112b2:	f240 47e2 	movw	r7, #1250	; 0x4e2
   112b6:	fb07 f606 	mul.w	r6, r7, r6
   112ba:	f242 7710 	movw	r7, #10000	; 0x2710
   112be:	fb07 6202 	mla	r2, r7, r2, r6
   112c2:	3a01      	subs	r2, #1
   112c4:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   112c8:	f8b4 60a6 	ldrh.w	r6, [r4, #166]	; 0xa6
   112cc:	b292      	uxth	r2, r2
   112ce:	4296      	cmp	r6, r2
   112d0:	f47f acb1 	bne.w	10c36 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc37>
   112d4:	e7cd      	b.n	11272 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1273>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   112d6:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   112da:	f011 0f06 	tst.w	r1, #6
   112de:	f43f abc9 	beq.w	10a74 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa75>
   112e2:	f7fe bede 	b.w	100a2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa3>
	    ((pdu_data_tx->llctrl.opcode !=
   112e6:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   112e8:	2903      	cmp	r1, #3
   112ea:	d08b      	beq.n	11204 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1205>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   112ec:	290a      	cmp	r1, #10
   112ee:	d1d0      	bne.n	11292 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1293>
   112f0:	e788      	b.n	11204 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1205>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   112f2:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   112f6:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   112fa:	429a      	cmp	r2, r3
   112fc:	d00e      	beq.n	1131c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x131d>
   112fe:	4a1f      	ldr	r2, [pc, #124]	; (1137c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x137d>)
   11300:	4921      	ldr	r1, [pc, #132]	; (11388 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1389>)
   11302:	4820      	ldr	r0, [pc, #128]	; (11384 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1385>)
   11304:	f241 43af 	movw	r3, #5295	; 0x14af
   11308:	f009 fed5 	bl	1b0b6 <printk>
   1130c:	4040      	eors	r0, r0
   1130e:	f380 8811 	msr	BASEPRI, r0
   11312:	f04f 0003 	mov.w	r0, #3
   11316:	df02      	svc	2
   11318:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1131c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   11320:	2106      	movs	r1, #6
   11322:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   11326:	3b01      	subs	r3, #1
   11328:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1132c:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   11330:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11334:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
		conn->llcp_cu.win_size = 1U;
   11338:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1133a:	00db      	lsls	r3, r3, #3
   1133c:	430b      	orrs	r3, r1
   1133e:	f022 020f 	bic.w	r2, r2, #15
   11342:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   11344:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   11348:	f8b4 2164 	ldrh.w	r2, [r4, #356]	; 0x164
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1134c:	f8b4 1162 	ldrh.w	r1, [r4, #354]	; 0x162
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11350:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		conn->llcp_cu.win_offset_us = 0U;
   11354:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   11356:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
		conn->llcp_cu.win_offset_us = 0U;
   1135a:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1135e:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   11362:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   11366:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
	if (err) {
   1136a:	f7fe bdb0 	b.w	fece <ull_conn_rx+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   1136e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11370:	2a03      	cmp	r2, #3
   11372:	f43f af55 	beq.w	11220 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1221>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11376:	2a0a      	cmp	r2, #10
   11378:	d193      	bne.n	112a2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12a3>
   1137a:	e751      	b.n	11220 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1221>
   1137c:	00020800 	.word	0x00020800
   11380:	00020500 	.word	0x00020500
   11384:	000203b4 	.word	0x000203b4
   11388:	000208f4 	.word	0x000208f4

0001138c <ull_conn_tx_demux>:
{
   1138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   11390:	4c24      	ldr	r4, [pc, #144]	; (11424 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11392:	4f25      	ldr	r7, [pc, #148]	; (11428 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   11394:	78e2      	ldrb	r2, [r4, #3]
{
   11396:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   11398:	1d26      	adds	r6, r4, #4
   1139a:	e021      	b.n	113e0 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1139c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   113a0:	4638      	mov	r0, r7
   113a2:	f7f8 fe8b 	bl	a0bc <mem_get>
	if (conn->lll.handle != handle) {
   113a6:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   113a8:	bb2a      	cbnz	r2, 113f6 <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   113aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   113ae:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
			tx->next = NULL;
   113b2:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   113b4:	b351      	cbz	r1, 1140c <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   113b6:	f8d0 21ac 	ldr.w	r2, [r0, #428]	; 0x1ac
   113ba:	b102      	cbz	r2, 113be <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   113bc:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   113be:	f8c0 31ac 	str.w	r3, [r0, #428]	; 0x1ac
		MFIFO_DEQUEUE(conn_tx);
   113c2:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   113c4:	78a3      	ldrb	r3, [r4, #2]
   113c6:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   113c8:	429a      	cmp	r2, r3
   113ca:	d005      	beq.n	113d8 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   113cc:	3301      	adds	r3, #1
   113ce:	b2db      	uxtb	r3, r3
		_first = 0U;
   113d0:	4299      	cmp	r1, r3
   113d2:	bf08      	it	eq
   113d4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   113d6:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   113d8:	3d01      	subs	r5, #1
   113da:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   113de:	d01e      	beq.n	1141e <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   113e0:	78a3      	ldrb	r3, [r4, #2]
   113e2:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   113e4:	4293      	cmp	r3, r2
   113e6:	d01a      	beq.n	1141e <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   113e8:	fb13 f301 	smulbb	r3, r3, r1
   113ec:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   113f0:	5af2      	ldrh	r2, [r6, r3]
   113f2:	2a00      	cmp	r2, #0
   113f4:	d0d2      	beq.n	1139c <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   113f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   113fa:	790b      	ldrb	r3, [r1, #4]
   113fc:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   11400:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   11404:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   11406:	f7fc fc7b 	bl	dd00 <ll_tx_ack_put>
   1140a:	e7da      	b.n	113c2 <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   1140c:	f8d0 219c 	ldr.w	r2, [r0, #412]	; 0x19c
				conn->tx_data = tx;
   11410:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
				if (!conn->tx_head) {
   11414:	2a00      	cmp	r2, #0
   11416:	d1ce      	bne.n	113b6 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   11418:	f8c0 319c 	str.w	r3, [r0, #412]	; 0x19c
			if (conn->tx_data_last) {
   1141c:	e7cf      	b.n	113be <ull_conn_tx_demux+0x32>
}
   1141e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11422:	bf00      	nop
   11424:	200005e8 	.word	0x200005e8
   11428:	200012b0 	.word	0x200012b0

0001142c <conn_cleanup_finalize>:
{
   1142c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   11430:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
{
   11434:	b082      	sub	sp, #8
   11436:	4606      	mov	r6, r0
	while (rx) {
   11438:	b144      	cbz	r4, 1144c <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   1143a:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   1143c:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1143e:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   11440:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   11442:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   11444:	f7fc fc18 	bl	dc78 <ll_rx_put>
	while (rx) {
   11448:	2c00      	cmp	r4, #0
   1144a:	d1f7      	bne.n	1143c <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   1144c:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   11450:	b381      	cbz	r1, 114b4 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   11452:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 114f8 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   11456:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 114fc <conn_cleanup_finalize+0xd0>
   1145a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 11500 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1145e:	f106 074c 	add.w	r7, r6, #76	; 0x4c
   11462:	e007      	b.n	11474 <conn_cleanup_finalize+0x48>
   11464:	4629      	mov	r1, r5
   11466:	463a      	mov	r2, r7
   11468:	4620      	mov	r0, r4
   1146a:	f7f8 fe59 	bl	a120 <memq_enqueue>
	while (conn->tx_head) {
   1146e:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   11472:	b1f9      	cbz	r1, 114b4 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   11474:	4630      	mov	r0, r6
   11476:	f7fe f801 	bl	f47c <tx_ull_dequeue>
   1147a:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   1147c:	4640      	mov	r0, r8
   1147e:	f7f8 fdeb 	bl	a058 <mem_acquire>
		LL_ASSERT(link);
   11482:	4604      	mov	r4, r0
   11484:	2800      	cmp	r0, #0
   11486:	d1ed      	bne.n	11464 <conn_cleanup_finalize+0x38>
   11488:	481e      	ldr	r0, [pc, #120]	; (11504 <conn_cleanup_finalize+0xd8>)
   1148a:	f640 135e 	movw	r3, #2398	; 0x95e
   1148e:	4652      	mov	r2, sl
   11490:	4649      	mov	r1, r9
   11492:	f009 fe10 	bl	1b0b6 <printk>
   11496:	4040      	eors	r0, r0
   11498:	f380 8811 	msr	BASEPRI, r0
   1149c:	f04f 0003 	mov.w	r0, #3
   114a0:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   114a2:	4629      	mov	r1, r5
   114a4:	463a      	mov	r2, r7
   114a6:	4620      	mov	r0, r4
   114a8:	f7f8 fe3a 	bl	a120 <memq_enqueue>
	while (conn->tx_head) {
   114ac:	f8d6 119c 	ldr.w	r1, [r6, #412]	; 0x19c
   114b0:	2900      	cmp	r1, #0
   114b2:	d1df      	bne.n	11474 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   114b4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   114b6:	4b14      	ldr	r3, [pc, #80]	; (11508 <conn_cleanup_finalize+0xdc>)
   114b8:	9600      	str	r6, [sp, #0]
   114ba:	3205      	adds	r2, #5
   114bc:	b2d2      	uxtb	r2, r2
   114be:	2101      	movs	r1, #1
   114c0:	2000      	movs	r0, #0
   114c2:	f7fa f8f7 	bl	b6b4 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   114c6:	f030 0302 	bics.w	r3, r0, #2
   114ca:	d00c      	beq.n	114e6 <conn_cleanup_finalize+0xba>
   114cc:	4a0b      	ldr	r2, [pc, #44]	; (114fc <conn_cleanup_finalize+0xd0>)
   114ce:	490f      	ldr	r1, [pc, #60]	; (1150c <conn_cleanup_finalize+0xe0>)
   114d0:	480c      	ldr	r0, [pc, #48]	; (11504 <conn_cleanup_finalize+0xd8>)
   114d2:	f640 1323 	movw	r3, #2339	; 0x923
   114d6:	f009 fdee 	bl	1b0b6 <printk>
   114da:	4040      	eors	r0, r0
   114dc:	f380 8811 	msr	BASEPRI, r0
   114e0:	f04f 0003 	mov.w	r0, #3
   114e4:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   114e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   114ea:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   114ec:	8533      	strh	r3, [r6, #40]	; 0x28
}
   114ee:	b002      	add	sp, #8
   114f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   114f4:	f7ff bf4a 	b.w	1138c <ull_conn_tx_demux>
   114f8:	20002358 	.word	0x20002358
   114fc:	00020800 	.word	0x00020800
   11500:	00020858 	.word	0x00020858
   11504:	000203b4 	.word	0x000203b4
   11508:	0000f229 	.word	0x0000f229
   1150c:	0002091c 	.word	0x0002091c

00011510 <ull_conn_done>:
{
   11510:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   11512:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   11514:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   11516:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1151a:	4299      	cmp	r1, r3
{
   1151c:	b089      	sub	sp, #36	; 0x24
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1151e:	d054      	beq.n	115ca <ull_conn_done+0xba>
	switch (done->extra.mic_state) {
   11520:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   11524:	2b01      	cmp	r3, #1
   11526:	f000 80e0 	beq.w	116ea <ull_conn_done+0x1da>
   1152a:	2b02      	cmp	r3, #2
   1152c:	d04f      	beq.n	115ce <ull_conn_done+0xbe>
   1152e:	2b00      	cmp	r3, #0
   11530:	f000 80c1 	beq.w	116b6 <ull_conn_done+0x1a6>
	reason_final = conn->llcp_terminate.reason_final;
   11534:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
	if (reason_final && (
   11538:	2b00      	cmp	r3, #0
   1153a:	d14b      	bne.n	115d4 <ull_conn_done+0xc4>
	latency_event = lll->latency_event;
   1153c:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   1153e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   11540:	1c77      	adds	r7, r6, #1
   11542:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   11544:	2b00      	cmp	r3, #0
   11546:	d15d      	bne.n	11604 <ull_conn_done+0xf4>
	if (done->extra.crc_valid) {
   11548:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1154c:	f013 0301 	ands.w	r3, r3, #1
   11550:	f000 80d1 	beq.w	116f6 <ull_conn_done+0x1e6>
		conn->supervision_expire = 0U;
   11554:	2500      	movs	r5, #0
   11556:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->procedure_expire != 0U) {
   1155a:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   1155e:	b12b      	cbz	r3, 1156c <ull_conn_done+0x5c>
		if (conn->procedure_expire > elapsed_event) {
   11560:	429f      	cmp	r7, r3
   11562:	f080 810f 	bcs.w	11784 <ull_conn_done+0x274>
			conn->procedure_expire -= elapsed_event;
   11566:	1bdb      	subs	r3, r3, r7
   11568:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	if (conn->apto_expire != 0U) {
   1156c:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
   11570:	b12b      	cbz	r3, 1157e <ull_conn_done+0x6e>
		if (conn->apto_expire > elapsed_event) {
   11572:	429f      	cmp	r7, r3
   11574:	f080 80e1 	bcs.w	1173a <ull_conn_done+0x22a>
			conn->apto_expire -= elapsed_event;
   11578:	1bdb      	subs	r3, r3, r7
   1157a:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	if (conn->appto_expire != 0U) {
   1157e:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
			    (conn->llcp_req == conn->llcp_ack)) {
   11582:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   11586:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
	if (conn->appto_expire != 0U) {
   1158a:	b15a      	cbz	r2, 115a4 <ull_conn_done+0x94>
		if (conn->appto_expire > elapsed_event) {
   1158c:	4297      	cmp	r7, r2
   1158e:	f0c0 80be 	bcc.w	1170e <ull_conn_done+0x1fe>
			if ((conn->procedure_expire == 0U) &&
   11592:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
			conn->appto_expire = 0U;
   11596:	2000      	movs	r0, #0
   11598:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
			if ((conn->procedure_expire == 0U) &&
   1159c:	b912      	cbnz	r2, 115a4 <ull_conn_done+0x94>
   1159e:	428b      	cmp	r3, r1
   115a0:	f000 80fd 	beq.w	1179e <ull_conn_done+0x28e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   115a4:	1a5b      	subs	r3, r3, r1
   115a6:	f003 0303 	and.w	r3, r3, #3
   115aa:	2b02      	cmp	r3, #2
   115ac:	f000 80b8 	beq.w	11720 <ull_conn_done+0x210>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   115b0:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   115b4:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   115b8:	429a      	cmp	r2, r3
   115ba:	f000 80cf 	beq.w	1175c <ull_conn_done+0x24c>
		lll->latency_event = 0U;
   115be:	2300      	movs	r3, #0
   115c0:	8623      	strh	r3, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   115c2:	2d00      	cmp	r5, #0
   115c4:	d13d      	bne.n	11642 <ull_conn_done+0x132>
   115c6:	2e00      	cmp	r6, #0
   115c8:	d13b      	bne.n	11642 <ull_conn_done+0x132>
}
   115ca:	b009      	add	sp, #36	; 0x24
   115cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   115ce:	233d      	movs	r3, #61	; 0x3d
   115d0:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
			       conn->llcp_terminate.ack) & 0xFF) ==
   115d4:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   115d8:	f894 5119 	ldrb.w	r5, [r4, #281]	; 0x119
   115dc:	1b52      	subs	r2, r2, r5
	if (reason_final && (
   115de:	b2d2      	uxtb	r2, r2
   115e0:	2a03      	cmp	r2, #3
   115e2:	d055      	beq.n	11690 <ull_conn_done+0x180>
			     TERM_ACKED) ||
   115e4:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
   115e8:	0755      	lsls	r5, r2, #29
   115ea:	d451      	bmi.n	11690 <ull_conn_done+0x180>
			    conn->central.terminate_ack ||
   115ec:	2b3d      	cmp	r3, #61	; 0x3d
   115ee:	d04f      	beq.n	11690 <ull_conn_done+0x180>
	latency_event = lll->latency_event;
   115f0:	8e26      	ldrh	r6, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   115f2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
	elapsed_event = latency_event + 1;
   115f4:	1c77      	adds	r7, r6, #1
   115f6:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   115f8:	2b00      	cmp	r3, #0
   115fa:	d0a5      	beq.n	11548 <ull_conn_done+0x38>
			conn->central.terminate_ack = 1;
   115fc:	f042 0204 	orr.w	r2, r2, #4
   11600:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
	if (done->extra.crc_valid) {
   11604:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
		conn->connect_expire = 0U;
   11608:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   1160a:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   1160c:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	if (done->extra.crc_valid) {
   11610:	d4a0      	bmi.n	11554 <ull_conn_done+0x44>
		if (!conn->supervision_expire) {
   11612:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
   11616:	b92d      	cbnz	r5, 11624 <ull_conn_done+0x114>
			conn->supervision_expire = conn->supervision_reload;
   11618:	f8b4 50a6 	ldrh.w	r5, [r4, #166]	; 0xa6
   1161c:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
	if (conn->supervision_expire) {
   11620:	2d00      	cmp	r5, #0
   11622:	d09a      	beq.n	1155a <ull_conn_done+0x4a>
		if (conn->supervision_expire > elapsed_event) {
   11624:	42bd      	cmp	r5, r7
   11626:	f240 80a4 	bls.w	11772 <ull_conn_done+0x262>
			conn->supervision_expire -= elapsed_event;
   1162a:	1bed      	subs	r5, r5, r7
   1162c:	b2ad      	uxth	r5, r5
	force = 0U;
   1162e:	2d06      	cmp	r5, #6
			lll->latency_event = 0U;
   11630:	f04f 0300 	mov.w	r3, #0
			conn->supervision_expire -= elapsed_event;
   11634:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
			lll->latency_event = 0U;
   11638:	8623      	strh	r3, [r4, #48]	; 0x30
	force = 0U;
   1163a:	bf8c      	ite	hi
   1163c:	2500      	movhi	r5, #0
   1163e:	2501      	movls	r5, #1
   11640:	e78b      	b.n	1155a <ull_conn_done+0x4a>
		lazy = lll->latency_event + 1U;
   11642:	2101      	movs	r1, #1
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   11644:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   11646:	4b62      	ldr	r3, [pc, #392]	; (117d0 <ull_conn_done+0x2c0>)
		struct ll_conn *conn = lll->hdr.parent;
   11648:	69e4      	ldr	r4, [r4, #28]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1164a:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1164c:	e9cd 3405 	strd	r3, r4, [sp, #20]
   11650:	2300      	movs	r3, #0
   11652:	e9cd 1503 	strd	r1, r5, [sp, #12]
   11656:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1165a:	9300      	str	r3, [sp, #0]
   1165c:	4618      	mov	r0, r3
   1165e:	b2d2      	uxtb	r2, r2
   11660:	2101      	movs	r1, #1
   11662:	f7fa f80f 	bl	b684 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11666:	f030 0302 	bics.w	r3, r0, #2
   1166a:	d0ae      	beq.n	115ca <ull_conn_done+0xba>
   1166c:	f7fc fbba 	bl	dde4 <ull_disable_mark_get>
   11670:	4284      	cmp	r4, r0
   11672:	d0aa      	beq.n	115ca <ull_conn_done+0xba>
   11674:	4a57      	ldr	r2, [pc, #348]	; (117d4 <ull_conn_done+0x2c4>)
   11676:	4958      	ldr	r1, [pc, #352]	; (117d8 <ull_conn_done+0x2c8>)
   11678:	4858      	ldr	r0, [pc, #352]	; (117dc <ull_conn_done+0x2cc>)
   1167a:	f240 63cd 	movw	r3, #1741	; 0x6cd
   1167e:	f009 fd1a 	bl	1b0b6 <printk>
   11682:	4040      	eors	r0, r0
   11684:	f380 8811 	msr	BASEPRI, r0
   11688:	f04f 0003 	mov.w	r0, #3
   1168c:	df02      	svc	2
   1168e:	e79c      	b.n	115ca <ull_conn_done+0xba>
	if (conn == conn_upd_curr) {
   11690:	4a53      	ldr	r2, [pc, #332]	; (117e0 <ull_conn_done+0x2d0>)
   11692:	6810      	ldr	r0, [r2, #0]
   11694:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   11696:	bf04      	itt	eq
   11698:	2000      	moveq	r0, #0
   1169a:	6010      	streq	r0, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1169c:	2217      	movs	r2, #23
	conn_cleanup_finalize(conn);
   1169e:	4620      	mov	r0, r4
	rx->hdr.handle = conn->lll.handle;
   116a0:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   116a4:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
	*((uint8_t *)rx->pdu) = reason;
   116a8:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
}
   116ac:	b009      	add	sp, #36	; 0x24
   116ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
   116b2:	f7ff bebb 	b.w	1142c <conn_cleanup_finalize>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   116b6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   116ba:	071f      	lsls	r7, r3, #28
   116bc:	d537      	bpl.n	1172e <ull_conn_done+0x21e>
					    (lll->latency + 6)) ?
   116be:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   116c0:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
					    (lll->latency + 6)) ?
   116c4:	1dab      	adds	r3, r5, #6
			appto_reload_new = (conn->apto_reload >
   116c6:	429a      	cmp	r2, r3
   116c8:	bfc4      	itt	gt
   116ca:	1f93      	subgt	r3, r2, #6
   116cc:	1b5b      	subgt	r3, r3, r5
			if (conn->appto_reload != appto_reload_new) {
   116ce:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
			appto_reload_new = (conn->apto_reload >
   116d2:	bfcc      	ite	gt
   116d4:	b29b      	uxthgt	r3, r3
   116d6:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   116d8:	429d      	cmp	r5, r3
   116da:	d044      	beq.n	11766 <ull_conn_done+0x256>
				conn->appto_reload = appto_reload_new;
   116dc:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
				conn->appto_expire = conn->appto_reload;
   116e0:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
				conn->apto_expire = conn->apto_reload;
   116e4:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
   116e8:	e724      	b.n	11534 <ull_conn_done+0x24>
		conn->appto_expire = conn->apto_expire = 0U;
   116ea:	2300      	movs	r3, #0
   116ec:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   116f0:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
		break;
   116f4:	e71e      	b.n	11534 <ull_conn_done+0x24>
	else if (conn->connect_expire) {
   116f6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   116fa:	2a00      	cmp	r2, #0
   116fc:	d089      	beq.n	11612 <ull_conn_done+0x102>
		if (conn->connect_expire > elapsed_event) {
   116fe:	42ba      	cmp	r2, r7
   11700:	d954      	bls.n	117ac <ull_conn_done+0x29c>
			conn->connect_expire -= elapsed_event;
   11702:	1bd2      	subs	r2, r2, r7
	if (conn->supervision_expire) {
   11704:	f8b4 50a8 	ldrh.w	r5, [r4, #168]	; 0xa8
			conn->connect_expire -= elapsed_event;
   11708:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
   1170c:	e788      	b.n	11620 <ull_conn_done+0x110>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1170e:	1a5b      	subs	r3, r3, r1
   11710:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   11714:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   11716:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   11718:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1171c:	f47f af48 	bne.w	115b0 <ull_conn_done+0xa0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   11720:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   11724:	3b01      	subs	r3, #1
   11726:	2b01      	cmp	r3, #1
   11728:	f63f af42 	bhi.w	115b0 <ull_conn_done+0xa0>
   1172c:	e747      	b.n	115be <ull_conn_done+0xae>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1172e:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   11732:	07de      	lsls	r6, r3, #31
   11734:	f57f aefe 	bpl.w	11534 <ull_conn_done+0x24>
   11738:	e7c1      	b.n	116be <ull_conn_done+0x1ae>
			rx = ll_pdu_rx_alloc();
   1173a:	f7fc facb 	bl	dcd4 <ll_pdu_rx_alloc>
			if (rx) {
   1173e:	4601      	mov	r1, r0
   11740:	b348      	cbz	r0, 11796 <ull_conn_done+0x286>
				rx->handle = lll->handle;
   11742:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   11744:	2200      	movs	r2, #0
   11746:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
				rx->handle = lll->handle;
   1174a:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   1174c:	231a      	movs	r3, #26
   1174e:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   11750:	6800      	ldr	r0, [r0, #0]
   11752:	f7fc fa91 	bl	dc78 <ll_rx_put>
				ll_rx_sched();
   11756:	f7fc fa99 	bl	dc8c <ll_rx_sched>
   1175a:	e710      	b.n	1157e <ull_conn_done+0x6e>
	if ((force) || (latency_event != lll->latency_event)) {
   1175c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1175e:	b36d      	cbz	r5, 117bc <ull_conn_done+0x2ac>
		lazy = lll->latency_event + 1U;
   11760:	3101      	adds	r1, #1
   11762:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   11764:	e76e      	b.n	11644 <ull_conn_done+0x134>
			if (conn->apto_expire == 0U) {
   11766:	f8b4 50b4 	ldrh.w	r5, [r4, #180]	; 0xb4
   1176a:	2d00      	cmp	r5, #0
   1176c:	f47f aee2 	bne.w	11534 <ull_conn_done+0x24>
   11770:	e7b6      	b.n	116e0 <ull_conn_done+0x1d0>
	if (conn == conn_upd_curr) {
   11772:	4b1b      	ldr	r3, [pc, #108]	; (117e0 <ull_conn_done+0x2d0>)
   11774:	681a      	ldr	r2, [r3, #0]
   11776:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   11778:	bf04      	itt	eq
   1177a:	2200      	moveq	r2, #0
   1177c:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1177e:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   11780:	2308      	movs	r3, #8
   11782:	e78c      	b.n	1169e <ull_conn_done+0x18e>
	if (conn == conn_upd_curr) {
   11784:	4b16      	ldr	r3, [pc, #88]	; (117e0 <ull_conn_done+0x2d0>)
   11786:	681a      	ldr	r2, [r3, #0]
   11788:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1178a:	bf04      	itt	eq
   1178c:	2200      	moveq	r2, #0
   1178e:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   11790:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   11792:	2322      	movs	r3, #34	; 0x22
   11794:	e783      	b.n	1169e <ull_conn_done+0x18e>
				conn->apto_expire = 1U;
   11796:	2301      	movs	r3, #1
   11798:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
   1179c:	e6ef      	b.n	1157e <ull_conn_done+0x6e>
				conn->llcp_type = LLCP_PING;
   1179e:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   117a0:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   117a2:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
				conn->llcp_ack -= 2U;
   117a6:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   117aa:	e701      	b.n	115b0 <ull_conn_done+0xa0>
	if (conn == conn_upd_curr) {
   117ac:	4a0c      	ldr	r2, [pc, #48]	; (117e0 <ull_conn_done+0x2d0>)
   117ae:	6810      	ldr	r0, [r2, #0]
   117b0:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   117b2:	bf08      	it	eq
   117b4:	6013      	streq	r3, [r2, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   117b6:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   117b8:	233e      	movs	r3, #62	; 0x3e
   117ba:	e770      	b.n	1169e <ull_conn_done+0x18e>
	if ((force) || (latency_event != lll->latency_event)) {
   117bc:	42b1      	cmp	r1, r6
   117be:	f43f af04 	beq.w	115ca <ull_conn_done+0xba>
		lazy = lll->latency_event + 1U;
   117c2:	3101      	adds	r1, #1
   117c4:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   117c6:	2900      	cmp	r1, #0
   117c8:	f43f aeff 	beq.w	115ca <ull_conn_done+0xba>
   117cc:	e73a      	b.n	11644 <ull_conn_done+0x134>
   117ce:	bf00      	nop
   117d0:	0000f43d 	.word	0x0000f43d
   117d4:	00020800 	.word	0x00020800
   117d8:	0002094c 	.word	0x0002094c
   117dc:	000203b4 	.word	0x000203b4
   117e0:	20002210 	.word	0x20002210

000117e4 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   117e4:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
   117e8:	2b00      	cmp	r3, #0
   117ea:	f000 80e5 	beq.w	119b8 <ull_conn_tx_lll_enqueue+0x1d4>
   117ee:	3901      	subs	r1, #1
{
   117f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   117f4:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 119bc <ull_conn_tx_lll_enqueue+0x1d8>
		LL_ASSERT(link);
   117f8:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 119c0 <ull_conn_tx_lll_enqueue+0x1dc>
   117fc:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 119c4 <ull_conn_tx_lll_enqueue+0x1e0>
   11800:	4604      	mov	r4, r0
   11802:	b2cd      	uxtb	r5, r1
   11804:	e012      	b.n	1182c <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   11806:	4640      	mov	r0, r8
   11808:	f7f8 fc26 	bl	a058 <mem_acquire>
		LL_ASSERT(link);
   1180c:	4607      	mov	r7, r0
   1180e:	2800      	cmp	r0, #0
   11810:	d064      	beq.n	118dc <ull_conn_tx_lll_enqueue+0xf8>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   11812:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   11816:	4631      	mov	r1, r6
   11818:	4638      	mov	r0, r7
   1181a:	f7f8 fc81 	bl	a120 <memq_enqueue>
	while (conn->tx_head &&
   1181e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
   11822:	3d01      	subs	r5, #1
   11824:	b2ed      	uxtb	r5, r5
   11826:	2b00      	cmp	r3, #0
   11828:	f000 8080 	beq.w	1192c <ull_conn_tx_lll_enqueue+0x148>
		 !conn->llcp_phy.pause_tx &&
   1182c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
	while (conn->tx_head &&
   11830:	07d1      	lsls	r1, r2, #31
   11832:	d403      	bmi.n	1183c <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   11834:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
		 !conn->llcp_phy.pause_tx &&
   11838:	0792      	lsls	r2, r2, #30
   1183a:	d55d      	bpl.n	118f8 <ull_conn_tx_lll_enqueue+0x114>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1183c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   11840:	4293      	cmp	r3, r2
   11842:	d173      	bne.n	1192c <ull_conn_tx_lll_enqueue+0x148>
   11844:	2dff      	cmp	r5, #255	; 0xff
   11846:	d071      	beq.n	1192c <ull_conn_tx_lll_enqueue+0x148>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   11848:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
   1184c:	4620      	mov	r0, r4
   1184e:	f7fd fe15 	bl	f47c <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   11852:	7903      	ldrb	r3, [r0, #4]
   11854:	f003 0303 	and.w	r3, r3, #3
   11858:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1185a:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1185c:	d1d3      	bne.n	11806 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   1185e:	79c3      	ldrb	r3, [r0, #7]
   11860:	3b03      	subs	r3, #3
   11862:	2b13      	cmp	r3, #19
   11864:	d8cf      	bhi.n	11806 <ull_conn_tx_lll_enqueue+0x22>
   11866:	a201      	add	r2, pc, #4	; (adr r2, 1186c <ull_conn_tx_lll_enqueue+0x88>)
   11868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1186c:	000118c5 	.word	0x000118c5
   11870:	00011807 	.word	0x00011807
   11874:	00011807 	.word	0x00011807
   11878:	00011807 	.word	0x00011807
   1187c:	00011807 	.word	0x00011807
   11880:	00011807 	.word	0x00011807
   11884:	00011807 	.word	0x00011807
   11888:	000118c5 	.word	0x000118c5
   1188c:	000118bd 	.word	0x000118bd
   11890:	00011807 	.word	0x00011807
   11894:	00011807 	.word	0x00011807
   11898:	00011807 	.word	0x00011807
   1189c:	00011807 	.word	0x00011807
   118a0:	00011807 	.word	0x00011807
   118a4:	00011807 	.word	0x00011807
   118a8:	00011807 	.word	0x00011807
   118ac:	00011807 	.word	0x00011807
   118b0:	00011807 	.word	0x00011807
   118b4:	00011807 	.word	0x00011807
   118b8:	00011931 	.word	0x00011931
		if (!conn->lll.role) {
   118bc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   118c0:	2b00      	cmp	r3, #0
   118c2:	daa0      	bge.n	11806 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   118c4:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
   118c8:	f043 0302 	orr.w	r3, r3, #2
   118cc:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
		link = mem_acquire(&mem_link_tx.free);
   118d0:	4640      	mov	r0, r8
   118d2:	f7f8 fbc1 	bl	a058 <mem_acquire>
		LL_ASSERT(link);
   118d6:	4607      	mov	r7, r0
   118d8:	2800      	cmp	r0, #0
   118da:	d19a      	bne.n	11812 <ull_conn_tx_lll_enqueue+0x2e>
   118dc:	483a      	ldr	r0, [pc, #232]	; (119c8 <ull_conn_tx_lll_enqueue+0x1e4>)
   118de:	f240 7326 	movw	r3, #1830	; 0x726
   118e2:	4652      	mov	r2, sl
   118e4:	4649      	mov	r1, r9
   118e6:	f009 fbe6 	bl	1b0b6 <printk>
   118ea:	4040      	eors	r0, r0
   118ec:	f380 8811 	msr	BASEPRI, r0
   118f0:	f04f 0003 	mov.w	r0, #3
   118f4:	df02      	svc	2
   118f6:	e78c      	b.n	11812 <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   118f8:	791a      	ldrb	r2, [r3, #4]
   118fa:	f002 0203 	and.w	r2, r2, #3
   118fe:	2a03      	cmp	r2, #3
   11900:	d1a0      	bne.n	11844 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   11902:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   11904:	2a03      	cmp	r2, #3
   11906:	d001      	beq.n	1190c <ull_conn_tx_lll_enqueue+0x128>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   11908:	2a0a      	cmp	r2, #10
   1190a:	d19b      	bne.n	11844 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1190c:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
   11910:	f894 20bb 	ldrb.w	r2, [r4, #187]	; 0xbb
   11914:	428a      	cmp	r2, r1
   11916:	d012      	beq.n	1193e <ull_conn_tx_lll_enqueue+0x15a>
   11918:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
   1191c:	2a03      	cmp	r2, #3
   1191e:	d091      	beq.n	11844 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   11920:	681a      	ldr	r2, [r3, #0]
   11922:	b11a      	cbz	r2, 1192c <ull_conn_tx_lll_enqueue+0x148>
   11924:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
   11928:	428a      	cmp	r2, r1
   1192a:	d034      	beq.n	11996 <ull_conn_tx_lll_enqueue+0x1b2>
}
   1192c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   11930:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   11934:	f043 0301 	orr.w	r3, r3, #1
   11938:	f884 3197 	strb.w	r3, [r4, #407]	; 0x197
		break;
   1193c:	e763      	b.n	11806 <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   1193e:	f894 00f9 	ldrb.w	r0, [r4, #249]	; 0xf9
   11942:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   11946:	4288      	cmp	r0, r1
   11948:	d1ea      	bne.n	11920 <ull_conn_tx_lll_enqueue+0x13c>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1194a:	f894 0111 	ldrb.w	r0, [r4, #273]	; 0x111
   1194e:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
   11952:	4288      	cmp	r0, r1
   11954:	d1e4      	bne.n	11920 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   11956:	f894 015d 	ldrb.w	r0, [r4, #349]	; 0x15d
   1195a:	f894 115c 	ldrb.w	r1, [r4, #348]	; 0x15c
   1195e:	4288      	cmp	r0, r1
   11960:	d1de      	bne.n	11920 <ull_conn_tx_lll_enqueue+0x13c>
		       conn->llcp_conn_param.req) ||
   11962:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   11966:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   1196a:	4288      	cmp	r0, r1
   1196c:	d1d8      	bne.n	11920 <ull_conn_tx_lll_enqueue+0x13c>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1196e:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   11972:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   11976:	4288      	cmp	r0, r1
   11978:	d1d2      	bne.n	11920 <ull_conn_tx_lll_enqueue+0x13c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1197a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_ack -= 2U;
   1197e:	3a02      	subs	r2, #2
   11980:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   11984:	2201      	movs	r2, #1
   11986:	f362 0301 	bfi	r3, r2, #0, #2
   1198a:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
			conn->llcp_type = LLCP_ENCRYPTION;
   1198e:	2303      	movs	r3, #3
   11990:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
			conn->llcp_ack -= 2U;
   11994:	e756      	b.n	11844 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   11996:	f8c4 219c 	str.w	r2, [r4, #412]	; 0x19c
				tx->next = conn->tx_ctrl_last->next;
   1199a:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
				if (!conn->tx_data_last) {
   1199e:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
				tx->next = conn->tx_ctrl_last->next;
   119a2:	6810      	ldr	r0, [r2, #0]
   119a4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   119a6:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   119a8:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
				if (!conn->tx_data_last) {
   119ac:	2900      	cmp	r1, #0
   119ae:	f47f af49 	bne.w	11844 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   119b2:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
   119b6:	e745      	b.n	11844 <ull_conn_tx_lll_enqueue+0x60>
   119b8:	4770      	bx	lr
   119ba:	bf00      	nop
   119bc:	20002358 	.word	0x20002358
   119c0:	00020800 	.word	0x00020800
   119c4:	00020858 	.word	0x00020858
   119c8:	000203b4 	.word	0x000203b4

000119cc <tx_demux>:
{
   119cc:	b510      	push	{r4, lr}
   119ce:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   119d0:	2001      	movs	r0, #1
   119d2:	f7ff fcdb 	bl	1138c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   119d6:	4620      	mov	r0, r4
   119d8:	2101      	movs	r1, #1
}
   119da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   119de:	f7ff bf01 	b.w	117e4 <ull_conn_tx_lll_enqueue>
   119e2:	bf00      	nop

000119e4 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   119e4:	4901      	ldr	r1, [pc, #4]	; (119ec <ull_conn_link_tx_release+0x8>)
   119e6:	f7f8 bb51 	b.w	a08c <mem_release>
   119ea:	bf00      	nop
   119ec:	20002358 	.word	0x20002358

000119f0 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   119f0:	4b01      	ldr	r3, [pc, #4]	; (119f8 <ull_conn_ack_last_idx_get+0x8>)
}
   119f2:	78d8      	ldrb	r0, [r3, #3]
   119f4:	4770      	bx	lr
   119f6:	bf00      	nop
   119f8:	200005a4 	.word	0x200005a4

000119fc <ull_conn_ack_peek>:
{
   119fc:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   119fe:	4b0c      	ldr	r3, [pc, #48]	; (11a30 <ull_conn_ack_peek+0x34>)
   11a00:	f893 c002 	ldrb.w	ip, [r3, #2]
   11a04:	f893 e003 	ldrb.w	lr, [r3, #3]
   11a08:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   11a0a:	45f4      	cmp	ip, lr
   11a0c:	d00d      	beq.n	11a2a <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   11a0e:	fb1c fc04 	smulbb	ip, ip, r4
   11a12:	3304      	adds	r3, #4
   11a14:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   11a18:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   11a1c:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   11a20:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   11a22:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   11a24:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   11a26:	6818      	ldr	r0, [r3, #0]
}
   11a28:	bd10      	pop	{r4, pc}
		return NULL;
   11a2a:	2000      	movs	r0, #0
}
   11a2c:	bd10      	pop	{r4, pc}
   11a2e:	bf00      	nop
   11a30:	200005a4 	.word	0x200005a4

00011a34 <ull_conn_ack_by_last_peek>:
{
   11a34:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   11a36:	4b0b      	ldr	r3, [pc, #44]	; (11a64 <ull_conn_ack_by_last_peek+0x30>)
   11a38:	f893 c002 	ldrb.w	ip, [r3, #2]
   11a3c:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   11a40:	4584      	cmp	ip, r0
   11a42:	d00d      	beq.n	11a60 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   11a44:	3304      	adds	r3, #4
   11a46:	fb1c fc0e 	smulbb	ip, ip, lr
   11a4a:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   11a4e:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   11a52:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   11a56:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   11a58:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   11a5a:	6818      	ldr	r0, [r3, #0]
}
   11a5c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   11a60:	2000      	movs	r0, #0
   11a62:	e7fb      	b.n	11a5c <ull_conn_ack_by_last_peek+0x28>
   11a64:	200005a4 	.word	0x200005a4

00011a68 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   11a68:	4b09      	ldr	r3, [pc, #36]	; (11a90 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   11a6a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   11a6c:	78da      	ldrb	r2, [r3, #3]
   11a6e:	7818      	ldrb	r0, [r3, #0]
   11a70:	f893 c001 	ldrb.w	ip, [r3, #1]
   11a74:	428a      	cmp	r2, r1
   11a76:	d009      	beq.n	11a8c <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   11a78:	1c4a      	adds	r2, r1, #1
   11a7a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   11a7c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   11a80:	4594      	cmp	ip, r2
   11a82:	bf08      	it	eq
   11a84:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   11a86:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   11a88:	709a      	strb	r2, [r3, #2]
	return mem;
   11a8a:	4770      	bx	lr
		return NULL;
   11a8c:	2000      	movs	r0, #0
}
   11a8e:	4770      	bx	lr
   11a90:	200005a4 	.word	0x200005a4

00011a94 <ull_conn_lll_ack_enqueue>:
{
   11a94:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   11a96:	4a15      	ldr	r2, [pc, #84]	; (11aec <ull_conn_lll_ack_enqueue+0x58>)
   11a98:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   11a9c:	7854      	ldrb	r4, [r2, #1]
   11a9e:	f892 e002 	ldrb.w	lr, [r2, #2]
   11aa2:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   11aa4:	f10c 0301 	add.w	r3, ip, #1
   11aa8:	b2db      	uxtb	r3, r3
		last = 0U;
   11aaa:	429c      	cmp	r4, r3
   11aac:	bf08      	it	eq
   11aae:	2300      	moveq	r3, #0
	if (last == first) {
   11ab0:	459e      	cmp	lr, r3
   11ab2:	d00a      	beq.n	11aca <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   11ab4:	fb1c fc05 	smulbb	ip, ip, r5
   11ab8:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   11abc:	f82e 000c 	strh.w	r0, [lr, ip]
   11ac0:	44f4      	add	ip, lr
	lll_tx->node = tx;
   11ac2:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   11ac6:	70d3      	strb	r3, [r2, #3]
}
   11ac8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   11aca:	4a09      	ldr	r2, [pc, #36]	; (11af0 <ull_conn_lll_ack_enqueue+0x5c>)
   11acc:	4909      	ldr	r1, [pc, #36]	; (11af4 <ull_conn_lll_ack_enqueue+0x60>)
   11ace:	480a      	ldr	r0, [pc, #40]	; (11af8 <ull_conn_lll_ack_enqueue+0x64>)
   11ad0:	f240 7376 	movw	r3, #1910	; 0x776
   11ad4:	f009 faef 	bl	1b0b6 <printk>
   11ad8:	4040      	eors	r0, r0
   11ada:	f380 8811 	msr	BASEPRI, r0
   11ade:	f04f 0003 	mov.w	r0, #3
   11ae2:	df02      	svc	2
	lll_tx->handle = handle;
   11ae4:	2300      	movs	r3, #0
   11ae6:	801b      	strh	r3, [r3, #0]
   11ae8:	deff      	udf	#255	; 0xff
   11aea:	bf00      	nop
   11aec:	200005a4 	.word	0x200005a4
   11af0:	00020800 	.word	0x00020800
   11af4:	00020848 	.word	0x00020848
   11af8:	000203b4 	.word	0x000203b4

00011afc <ull_conn_tx_ack>:
{
   11afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   11afe:	7953      	ldrb	r3, [r2, #5]
{
   11b00:	4614      	mov	r4, r2
   11b02:	4605      	mov	r5, r0
   11b04:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   11b06:	b36b      	cbz	r3, 11b64 <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   11b08:	7923      	ldrb	r3, [r4, #4]
   11b0a:	f003 0203 	and.w	r2, r3, #3
   11b0e:	2a03      	cmp	r2, #3
   11b10:	d00c      	beq.n	11b2c <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
   11b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11b16:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   11b18:	bf04      	itt	eq
   11b1a:	f36f 0301 	bfceq	r3, #0, #2
   11b1e:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   11b20:	4621      	mov	r1, r4
   11b22:	4628      	mov	r0, r5
}
   11b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   11b28:	f7fc b8ea 	b.w	dd00 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   11b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b30:	429d      	cmp	r5, r3
   11b32:	d125      	bne.n	11b80 <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
   11b34:	6830      	ldr	r0, [r6, #0]
   11b36:	4284      	cmp	r4, r0
   11b38:	d049      	beq.n	11bce <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
   11b3a:	2800      	cmp	r0, #0
   11b3c:	d0f0      	beq.n	11b20 <ull_conn_tx_ack+0x24>
   11b3e:	4ab3      	ldr	r2, [pc, #716]	; (11e0c <ull_conn_tx_ack+0x310>)
   11b40:	49b3      	ldr	r1, [pc, #716]	; (11e10 <ull_conn_tx_ack+0x314>)
   11b42:	48b4      	ldr	r0, [pc, #720]	; (11e14 <ull_conn_tx_ack+0x318>)
   11b44:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   11b48:	f009 fab5 	bl	1b0b6 <printk>
   11b4c:	4040      	eors	r0, r0
   11b4e:	f380 8811 	msr	BASEPRI, r0
   11b52:	f04f 0003 	mov.w	r0, #3
   11b56:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   11b58:	4621      	mov	r1, r4
   11b5a:	4628      	mov	r0, r5
}
   11b5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   11b60:	f7fc b8ce 	b.w	dd00 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   11b64:	4aa9      	ldr	r2, [pc, #676]	; (11e0c <ull_conn_tx_ack+0x310>)
   11b66:	49ac      	ldr	r1, [pc, #688]	; (11e18 <ull_conn_tx_ack+0x31c>)
   11b68:	48aa      	ldr	r0, [pc, #680]	; (11e14 <ull_conn_tx_ack+0x318>)
   11b6a:	f240 7383 	movw	r3, #1923	; 0x783
   11b6e:	f009 faa2 	bl	1b0b6 <printk>
   11b72:	4040      	eors	r0, r0
   11b74:	f380 8811 	msr	BASEPRI, r0
   11b78:	f04f 0003 	mov.w	r0, #3
   11b7c:	df02      	svc	2
   11b7e:	e7c3      	b.n	11b08 <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11b80:	48a6      	ldr	r0, [pc, #664]	; (11e1c <ull_conn_tx_ack+0x320>)
   11b82:	462a      	mov	r2, r5
   11b84:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   11b88:	f7f8 fa98 	bl	a0bc <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   11b8c:	79e3      	ldrb	r3, [r4, #7]
   11b8e:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11b90:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   11b92:	2b16      	cmp	r3, #22
   11b94:	d820      	bhi.n	11bd8 <ull_conn_tx_ack+0xdc>
   11b96:	e8df f003 	tbb	[pc, r3]
   11b9a:	516d      	.short	0x516d
   11b9c:	288b1f1f 	.word	0x288b1f1f
   11ba0:	7984281f 	.word	0x7984281f
   11ba4:	1f1f471f 	.word	0x1f1f471f
   11ba8:	281f251f 	.word	0x281f251f
   11bac:	1f2f96c3 	.word	0x1f2f96c3
   11bb0:	36          	.byte	0x36
   11bb1:	00          	.byte	0x00
			LL_ASSERT(link->next);
   11bb2:	4a96      	ldr	r2, [pc, #600]	; (11e0c <ull_conn_tx_ack+0x310>)
   11bb4:	499a      	ldr	r1, [pc, #616]	; (11e20 <ull_conn_tx_ack+0x324>)
   11bb6:	4897      	ldr	r0, [pc, #604]	; (11e14 <ull_conn_tx_ack+0x318>)
   11bb8:	f240 7392 	movw	r3, #1938	; 0x792
   11bbc:	f009 fa7b 	bl	1b0b6 <printk>
   11bc0:	4040      	eors	r0, r0
   11bc2:	f380 8811 	msr	BASEPRI, r0
   11bc6:	f04f 0003 	mov.w	r0, #3
   11bca:	df02      	svc	2
   11bcc:	2000      	movs	r0, #0
}
   11bce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   11bd2:	4994      	ldr	r1, [pc, #592]	; (11e24 <ull_conn_tx_ack+0x328>)
   11bd4:	f7f8 ba5a 	b.w	a08c <mem_release>
		if (link->next == (void *)tx) {
   11bd8:	6830      	ldr	r0, [r6, #0]
   11bda:	42a0      	cmp	r0, r4
   11bdc:	d0f7      	beq.n	11bce <ull_conn_tx_ack+0xd2>
		LL_ASSERT(!link->next);
   11bde:	2800      	cmp	r0, #0
   11be0:	d1ad      	bne.n	11b3e <ull_conn_tx_ack+0x42>
   11be2:	e79d      	b.n	11b20 <ull_conn_tx_ack+0x24>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   11be4:	7a23      	ldrb	r3, [r4, #8]
   11be6:	2b03      	cmp	r3, #3
   11be8:	d01e      	beq.n	11c28 <ull_conn_tx_ack+0x12c>
			conn->common.txn_lock = 0U;
   11bea:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
   11bee:	f36f 0341 	bfc	r3, #1, #1
   11bf2:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			break;
   11bf6:	e79d      	b.n	11b34 <ull_conn_tx_ack+0x38>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11bf8:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   11bfc:	2202      	movs	r2, #2
   11bfe:	f362 0301 	bfi	r3, r2, #0, #2
   11c02:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   11c06:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
   11c0a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   11c0e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   11c12:	f363 1206 	bfi	r2, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   11c16:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   11c1a:	f887 2046 	strb.w	r2, [r7, #70]	; 0x46
		conn->llcp_phy.pause_tx = 0U;
   11c1e:	f36f 0300 	bfc	r3, #0, #1
   11c22:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		break;
   11c26:	e785      	b.n	11b34 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_rx = 0U;
   11c28:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   11c2c:	f023 0303 	bic.w	r3, r3, #3
   11c30:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = 0U;
   11c34:	2300      	movs	r3, #0
   11c36:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		break;
   11c3a:	e77b      	b.n	11b34 <ull_conn_tx_ack+0x38>
		memcpy(&conn->llcp.encryption.skd[0],
   11c3c:	2208      	movs	r2, #8
   11c3e:	f104 0112 	add.w	r1, r4, #18
   11c42:	30ce      	adds	r0, #206	; 0xce
   11c44:	f00a f871 	bl	1bd2a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   11c48:	2204      	movs	r2, #4
   11c4a:	f104 011a 	add.w	r1, r4, #26
   11c4e:	f107 0078 	add.w	r0, r7, #120	; 0x78
   11c52:	f00a f86a 	bl	1bd2a <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   11c56:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
   11c5a:	f043 0302 	orr.w	r3, r3, #2
		conn->llcp_enc.pause_tx = 1U;
   11c5e:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
		conn->procedure_expire = conn->procedure_reload;
   11c62:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
   11c66:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		conn->llcp_enc.ack = conn->llcp_enc.req;
   11c6a:	f897 313c 	ldrb.w	r3, [r7, #316]	; 0x13c
   11c6e:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
		break;
   11c72:	e75f      	b.n	11b34 <ull_conn_tx_ack+0x38>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   11c74:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   11c76:	2b13      	cmp	r3, #19
   11c78:	bf08      	it	eq
   11c7a:	2316      	moveq	r3, #22
   11c7c:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
		conn->llcp_terminate.ack--;
   11c80:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   11c84:	3b01      	subs	r3, #1
   11c86:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
	break;
   11c8a:	e753      	b.n	11b34 <ull_conn_tx_ack+0x38>
		if (!conn->lll.role) {
   11c8c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   11c90:	2b00      	cmp	r3, #0
   11c92:	da52      	bge.n	11d3a <ull_conn_tx_ack+0x23e>
			conn->llcp_enc.pause_tx = 1U;
   11c94:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   11c98:	f043 0302 	orr.w	r3, r3, #2
   11c9c:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
   11ca0:	e748      	b.n	11b34 <ull_conn_tx_ack+0x38>
		conn->llcp_enc.pause_tx = 1U;
   11ca2:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   11ca6:	f023 0306 	bic.w	r3, r3, #6
   11caa:	f043 0306 	orr.w	r3, r3, #6
   11cae:	e7d6      	b.n	11c5e <ull_conn_tx_ack+0x162>
		if (conn->lll.role) {
   11cb0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   11cb4:	2b00      	cmp	r3, #0
   11cb6:	db7d      	blt.n	11db4 <ull_conn_tx_ack+0x2b8>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   11cb8:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
   11cbc:	f043 0303 	orr.w	r3, r3, #3
   11cc0:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
   11cc4:	e736      	b.n	11b34 <ull_conn_tx_ack+0x38>
		conn->common.txn_lock = 0U;
   11cc6:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   11cca:	f890 1184 	ldrb.w	r1, [r0, #388]	; 0x184
		conn->common.txn_lock = 0U;
   11cce:	f36f 0341 	bfc	r3, #1, #1
   11cd2:	f880 30ba 	strb.w	r3, [r0, #186]	; 0xba
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   11cd6:	f890 3185 	ldrb.w	r3, [r0, #389]	; 0x185
   11cda:	428b      	cmp	r3, r1
   11cdc:	f43f af2a 	beq.w	11b34 <ull_conn_tx_ack+0x38>
			switch (conn->llcp_length.state) {
   11ce0:	f890 2186 	ldrb.w	r2, [r0, #390]	; 0x186
   11ce4:	f002 0307 	and.w	r3, r2, #7
   11ce8:	2b03      	cmp	r3, #3
   11cea:	d005      	beq.n	11cf8 <ull_conn_tx_ack+0x1fc>
   11cec:	3303      	adds	r3, #3
   11cee:	f003 0307 	and.w	r3, r3, #7
   11cf2:	2b01      	cmp	r3, #1
   11cf4:	f63f af70 	bhi.w	11bd8 <ull_conn_tx_ack+0xdc>
				conn->lll.max_tx_octets =
   11cf8:	f8b7 318a 	ldrh.w	r3, [r7, #394]	; 0x18a
   11cfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
				conn->lll.max_tx_time =
   11cfe:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
   11d02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				if (conn->llcp_length.state ==
   11d06:	f002 0307 	and.w	r3, r2, #7
   11d0a:	2b05      	cmp	r3, #5
   11d0c:	d078      	beq.n	11e00 <ull_conn_tx_ack+0x304>
				if (!conn->llcp_length.cache.tx_octets) {
   11d0e:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
   11d12:	2b00      	cmp	r3, #0
   11d14:	d166      	bne.n	11de4 <ull_conn_tx_ack+0x2e8>
					conn->llcp_length.ack =
   11d16:	f887 1185 	strb.w	r1, [r7, #389]	; 0x185
					conn->procedure_expire = 0U;
   11d1a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
					break;
   11d1e:	e709      	b.n	11b34 <ull_conn_tx_ack+0x38>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   11d20:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   11d24:	f003 0207 	and.w	r2, r3, #7
   11d28:	2a01      	cmp	r2, #1
   11d2a:	f47f af03 	bne.w	11b34 <ull_conn_tx_ack+0x38>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   11d2e:	2202      	movs	r2, #2
   11d30:	f362 0302 	bfi	r3, r2, #0, #3
   11d34:	f880 3186 	strb.w	r3, [r0, #390]	; 0x186
   11d38:	e6fc      	b.n	11b34 <ull_conn_tx_ack+0x38>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d3a:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   11d3c:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d3e:	f043 0303 	orr.w	r3, r3, #3
   11d42:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   11d44:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   11d46:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   11d48:	2208      	movs	r2, #8
   11d4a:	f200 1141 	addw	r1, r0, #321	; 0x141
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   11d4e:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   11d50:	18a0      	adds	r0, r4, r2
   11d52:	f009 ffea 	bl	1bd2a <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   11d56:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
   11d5a:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   11d5c:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
   11d60:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   11d62:	210c      	movs	r1, #12
   11d64:	f104 0012 	add.w	r0, r4, #18
   11d68:	f002 f858 	bl	13e1c <lll_csrand_isr_get>
	    conn->tx_head &&
   11d6c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
	if (
   11d70:	b373      	cbz	r3, 11dd0 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_enc.pause_tx &&
   11d72:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
	    conn->tx_head &&
   11d76:	0791      	lsls	r1, r2, #30
   11d78:	d42a      	bmi.n	11dd0 <ull_conn_tx_ack+0x2d4>
	    !conn->llcp_phy.pause_tx &&
   11d7a:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
   11d7e:	07d2      	lsls	r2, r2, #31
   11d80:	d426      	bmi.n	11dd0 <ull_conn_tx_ack+0x2d4>
		if (conn->tx_head == conn->tx_data) {
   11d82:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   11d86:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
		if (conn->tx_head == conn->tx_data) {
   11d8a:	428b      	cmp	r3, r1
   11d8c:	d04c      	beq.n	11e28 <ull_conn_tx_ack+0x32c>
		} else if (!conn->tx_ctrl) {
   11d8e:	2a00      	cmp	r2, #0
   11d90:	d056      	beq.n	11e40 <ull_conn_tx_ack+0x344>
	tx->next = conn->tx_ctrl_last->next;
   11d92:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
   11d96:	681a      	ldr	r2, [r3, #0]
   11d98:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   11d9a:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   11d9c:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   11d9e:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
		if (link->next == (void *)tx) {
   11da2:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
   11da4:	b11b      	cbz	r3, 11dae <ull_conn_tx_ack+0x2b2>
		if (link->next == (void *)tx) {
   11da6:	2a00      	cmp	r2, #0
   11da8:	f43f af03 	beq.w	11bb2 <ull_conn_tx_ack+0xb6>
}
   11dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		conn->tx_data_last = tx;
   11dae:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
   11db2:	e7f8      	b.n	11da6 <ull_conn_tx_ack+0x2aa>
			conn->llcp_enc.pause_rx = 0U;
   11db4:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
   11db8:	f023 0303 	bic.w	r3, r3, #3
   11dbc:	f880 313e 	strb.w	r3, [r0, #318]	; 0x13e
			conn->procedure_expire = 0U;
   11dc0:	2300      	movs	r3, #0
   11dc2:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
			conn->llcp_ack = conn->llcp_req;
   11dc6:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   11dca:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
   11dce:	e6b1      	b.n	11b34 <ull_conn_tx_ack+0x38>
		if (!conn->tx_ctrl) {
   11dd0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
   11dd4:	2a00      	cmp	r2, #0
   11dd6:	d1dc      	bne.n	11d92 <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head;
   11dd8:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   11dda:	e9c7 4467 	strd	r4, r4, [r7, #412]	; 0x19c
				conn->tx_ctrl_last = tx;
   11dde:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
   11de2:	e7de      	b.n	11da2 <ull_conn_tx_ack+0x2a6>
				conn->llcp_length.tx_octets =
   11de4:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
				conn->llcp_length.cache.tx_octets = 0;
   11de8:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11dea:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   11dee:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
				conn->llcp_length.tx_time =
   11df2:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11df6:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
				conn->llcp_length.tx_time =
   11dfa:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
				break;
   11dfe:	e699      	b.n	11b34 <ull_conn_tx_ack+0x38>
					conn->llcp_length.state =
   11e00:	2304      	movs	r3, #4
   11e02:	f363 0202 	bfi	r2, r3, #0, #3
   11e06:	f887 2186 	strb.w	r2, [r7, #390]	; 0x186
					break;
   11e0a:	e693      	b.n	11b34 <ull_conn_tx_ack+0x38>
   11e0c:	00020800 	.word	0x00020800
   11e10:	000209b4 	.word	0x000209b4
   11e14:	000203b4 	.word	0x000203b4
   11e18:	000209a8 	.word	0x000209a8
   11e1c:	200012b0 	.word	0x200012b0
   11e20:	000209c0 	.word	0x000209c0
   11e24:	200022a4 	.word	0x200022a4
			conn->tx_data = conn->tx_data->next;
   11e28:	6819      	ldr	r1, [r3, #0]
   11e2a:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
		if (!conn->tx_ctrl) {
   11e2e:	2a00      	cmp	r2, #0
   11e30:	d1af      	bne.n	11d92 <ull_conn_tx_ack+0x296>
			tx->next = conn->tx_head->next;
   11e32:	681a      	ldr	r2, [r3, #0]
   11e34:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   11e36:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   11e38:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   11e3a:	e9c7 4468 	strd	r4, r4, [r7, #416]	; 0x1a0
   11e3e:	e7b0      	b.n	11da2 <ull_conn_tx_ack+0x2a6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11e40:	791a      	ldrb	r2, [r3, #4]
   11e42:	f002 0203 	and.w	r2, r2, #3
   11e46:	2a03      	cmp	r2, #3
   11e48:	d002      	beq.n	11e50 <ull_conn_tx_ack+0x354>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   11e4a:	e9c7 3368 	strd	r3, r3, [r7, #416]	; 0x1a0
   11e4e:	e7a0      	b.n	11d92 <ull_conn_tx_ack+0x296>
	    ((pdu_data_tx->llctrl.opcode !=
   11e50:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   11e52:	2a03      	cmp	r2, #3
   11e54:	d0ed      	beq.n	11e32 <ull_conn_tx_ack+0x336>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   11e56:	2a0a      	cmp	r2, #10
   11e58:	d1f7      	bne.n	11e4a <ull_conn_tx_ack+0x34e>
   11e5a:	e7ea      	b.n	11e32 <ull_conn_tx_ack+0x336>

00011e5c <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   11e5c:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   11e60:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   11e64:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   11e66:	bf03      	ittte	eq
   11e68:	3301      	addeq	r3, #1
   11e6a:	f880 30bb 	strbeq.w	r3, [r0, #187]	; 0xbb
	return 0;
   11e6e:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   11e70:	200c      	movne	r0, #12
}
   11e72:	4770      	bx	lr

00011e74 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   11e74:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   11e78:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
	switch (lll->phy_tx_time) {
   11e7a:	f3c2 1202 	ubfx	r2, r2, #4, #3
   11e7e:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   11e80:	bf14      	ite	ne
   11e82:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   11e84:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   11e86:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
	return max_tx_octets;
   11e8a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   11e8c:	bf14      	ite	ne
   11e8e:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   11e90:	3b0b      	subeq	r3, #11
   11e92:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   11e94:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   11e96:	bf44      	itt	mi
   11e98:	3b04      	submi	r3, #4
   11e9a:	b29b      	uxthmi	r3, r3
}
   11e9c:	4298      	cmp	r0, r3
   11e9e:	bf28      	it	cs
   11ea0:	4618      	movcs	r0, r3
   11ea2:	4770      	bx	lr

00011ea4 <ull_pdu_data_init>:
}
   11ea4:	4770      	bx	lr
   11ea6:	bf00      	nop

00011ea8 <ticker_op_stop_scan_cb>:
}
   11ea8:	4770      	bx	lr
   11eaa:	bf00      	nop

00011eac <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11eac:	b900      	cbnz	r0, 11eb0 <ticker_op_cb+0x4>
   11eae:	4770      	bx	lr
{
   11eb0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11eb2:	4a07      	ldr	r2, [pc, #28]	; (11ed0 <ticker_op_cb+0x24>)
   11eb4:	4907      	ldr	r1, [pc, #28]	; (11ed4 <ticker_op_cb+0x28>)
   11eb6:	4808      	ldr	r0, [pc, #32]	; (11ed8 <ticker_op_cb+0x2c>)
   11eb8:	f240 43ad 	movw	r3, #1197	; 0x4ad
   11ebc:	f009 f8fb 	bl	1b0b6 <printk>
   11ec0:	4040      	eors	r0, r0
   11ec2:	f380 8811 	msr	BASEPRI, r0
   11ec6:	f04f 0003 	mov.w	r0, #3
   11eca:	df02      	svc	2
}
   11ecc:	bd08      	pop	{r3, pc}
   11ece:	bf00      	nop
   11ed0:	000209cc 	.word	0x000209cc
   11ed4:	00020860 	.word	0x00020860
   11ed8:	000203b4 	.word	0x000203b4

00011edc <ull_central_ticker_cb>:
{
   11edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ee0:	9c07      	ldr	r4, [sp, #28]
   11ee2:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   11ee6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   11ee8:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   11eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11eee:	4299      	cmp	r1, r3
   11ef0:	d02d      	beq.n	11f4e <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   11ef2:	4606      	mov	r6, r0
   11ef4:	4617      	mov	r7, r2
   11ef6:	4601      	mov	r1, r0
   11ef8:	462a      	mov	r2, r5
   11efa:	4620      	mov	r0, r4
   11efc:	f7ef f9f0 	bl	12e0 <ull_conn_llcp>
		if (ret) {
   11f00:	bb28      	cbnz	r0, 11f4e <ull_central_ticker_cb+0x72>
	return ++hdr->ref;
   11f02:	7823      	ldrb	r3, [r4, #0]
   11f04:	3301      	adds	r3, #1
   11f06:	b2db      	uxtb	r3, r3
   11f08:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   11f0a:	b383      	cbz	r3, 11f6e <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   11f0c:	2002      	movs	r0, #2
   11f0e:	f7ff fa3d 	bl	1138c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   11f12:	2102      	movs	r1, #2
   11f14:	4620      	mov	r0, r4
   11f16:	f7ff fc65 	bl	117e4 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   11f1a:	491c      	ldr	r1, [pc, #112]	; (11f8c <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   11f1c:	4b1c      	ldr	r3, [pc, #112]	; (11f90 <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   11f1e:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   11f20:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11f24:	2200      	movs	r2, #0
	p.param = &conn->lll;
   11f26:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   11f28:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   11f2c:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   11f30:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11f32:	2001      	movs	r0, #1
   11f34:	4611      	mov	r1, r2
   11f36:	f7f8 f967 	bl	a208 <mayfly_enqueue>
	LL_ASSERT(!err);
   11f3a:	b950      	cbnz	r0, 11f52 <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   11f3c:	20ff      	movs	r0, #255	; 0xff
   11f3e:	f7ff fa25 	bl	1138c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   11f42:	4620      	mov	r0, r4
   11f44:	21ff      	movs	r1, #255	; 0xff
}
   11f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   11f4a:	f7ff bc4b 	b.w	117e4 <ull_conn_tx_lll_enqueue>
}
   11f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   11f52:	4a10      	ldr	r2, [pc, #64]	; (11f94 <ull_central_ticker_cb+0xb8>)
   11f54:	4910      	ldr	r1, [pc, #64]	; (11f98 <ull_central_ticker_cb+0xbc>)
   11f56:	4811      	ldr	r0, [pc, #68]	; (11f9c <ull_central_ticker_cb+0xc0>)
   11f58:	f240 434d 	movw	r3, #1101	; 0x44d
   11f5c:	f009 f8ab 	bl	1b0b6 <printk>
   11f60:	4040      	eors	r0, r0
   11f62:	f380 8811 	msr	BASEPRI, r0
   11f66:	f04f 0003 	mov.w	r0, #3
   11f6a:	df02      	svc	2
   11f6c:	e7e6      	b.n	11f3c <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   11f6e:	4a09      	ldr	r2, [pc, #36]	; (11f94 <ull_central_ticker_cb+0xb8>)
   11f70:	490b      	ldr	r1, [pc, #44]	; (11fa0 <ull_central_ticker_cb+0xc4>)
   11f72:	480a      	ldr	r0, [pc, #40]	; (11f9c <ull_central_ticker_cb+0xc0>)
   11f74:	f240 433a 	movw	r3, #1082	; 0x43a
   11f78:	f009 f89d 	bl	1b0b6 <printk>
   11f7c:	4040      	eors	r0, r0
   11f7e:	f380 8811 	msr	BASEPRI, r0
   11f82:	f04f 0003 	mov.w	r0, #3
   11f86:	df02      	svc	2
   11f88:	e7c0      	b.n	11f0c <ull_central_ticker_cb+0x30>
   11f8a:	bf00      	nop
   11f8c:	200023ac 	.word	0x200023ac
   11f90:	2000066c 	.word	0x2000066c
   11f94:	000209cc 	.word	0x000209cc
   11f98:	00020590 	.word	0x00020590
   11f9c:	000203b4 	.word	0x000203b4
   11fa0:	00020788 	.word	0x00020788

00011fa4 <ll_connect_disable>:
{
   11fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11fa8:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   11faa:	2000      	movs	r0, #0
   11fac:	f7fc ff92 	bl	eed4 <ull_scan_is_enabled_get>
	if (!scan) {
   11fb0:	b368      	cbz	r0, 1200e <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   11fb2:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   11fb4:	4604      	mov	r4, r0
   11fb6:	b353      	cbz	r3, 1200e <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   11fb8:	f893 2020 	ldrb.w	r2, [r3, #32]
   11fbc:	f042 0202 	orr.w	r2, r2, #2
   11fc0:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   11fc4:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   11fc6:	b317      	cbz	r7, 1200e <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   11fc8:	4601      	mov	r1, r0
   11fca:	2000      	movs	r0, #0
   11fcc:	f7fc fecc 	bl	ed68 <ull_scan_disable>
	if (!err) {
   11fd0:	4605      	mov	r5, r0
   11fd2:	b9c8      	cbnz	r0, 12008 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   11fd4:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   11fd6:	f8d7 811c 	ldr.w	r8, [r7, #284]	; 0x11c
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   11fda:	f507 798e 	add.w	r9, r7, #284	; 0x11c
		LL_ASSERT(link);
   11fde:	f1b8 0f00 	cmp.w	r8, #0
   11fe2:	d018      	beq.n	12016 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   11fe4:	4640      	mov	r0, r8
   11fe6:	f7fb fe41 	bl	dc6c <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   11fea:	2316      	movs	r3, #22
   11fec:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
		node_rx->hdr.handle = 0xffff;
   11ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11ff4:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
		scan_lll = &scan->lll;
   11ff8:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   11ffa:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   11ffc:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   12000:	f887 3138 	strb.w	r3, [r7, #312]	; 0x138
		*rx = node_rx;
   12004:	f8c6 9000 	str.w	r9, [r6]
}
   12008:	4628      	mov	r0, r5
   1200a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1200e:	250c      	movs	r5, #12
}
   12010:	4628      	mov	r0, r5
   12012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   12016:	4a07      	ldr	r2, [pc, #28]	; (12034 <ll_connect_disable+0x90>)
   12018:	4907      	ldr	r1, [pc, #28]	; (12038 <ll_connect_disable+0x94>)
   1201a:	4808      	ldr	r0, [pc, #32]	; (1203c <ll_connect_disable+0x98>)
   1201c:	f240 235b 	movw	r3, #603	; 0x25b
   12020:	f009 f849 	bl	1b0b6 <printk>
   12024:	4040      	eors	r0, r0
   12026:	f380 8811 	msr	BASEPRI, r0
   1202a:	f04f 0003 	mov.w	r0, #3
   1202e:	df02      	svc	2
   12030:	e7d8      	b.n	11fe4 <ll_connect_disable+0x40>
   12032:	bf00      	nop
   12034:	000209cc 	.word	0x000209cc
   12038:	00020858 	.word	0x00020858
   1203c:	000203b4 	.word	0x000203b4

00012040 <ll_enc_req_send>:
{
   12040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12044:	4607      	mov	r7, r0
   12046:	4688      	mov	r8, r1
   12048:	4691      	mov	r9, r2
   1204a:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   1204c:	f7fd fbca 	bl	f7e4 <ll_connected_get>
	if (!conn) {
   12050:	2800      	cmp	r0, #0
   12052:	d06a      	beq.n	1212a <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   12054:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
   12058:	f890 313d 	ldrb.w	r3, [r0, #317]	; 0x13d
   1205c:	429a      	cmp	r2, r3
   1205e:	4604      	mov	r4, r0
   12060:	d142      	bne.n	120e8 <ll_enc_req_send+0xa8>
   12062:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
   12066:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
   1206a:	429a      	cmp	r2, r3
   1206c:	d003      	beq.n	12076 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   1206e:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
   12072:	2b03      	cmp	r3, #3
   12074:	d038      	beq.n	120e8 <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   12076:	f7fd fbc7 	bl	f808 <ll_tx_mem_acquire>
	if (tx) {
   1207a:	4605      	mov	r5, r0
   1207c:	b3a0      	cbz	r0, 120e8 <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   1207e:	3004      	adds	r0, #4
   12080:	f7ff ff10 	bl	11ea4 <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   12084:	4631      	mov	r1, r6
   12086:	2210      	movs	r2, #16
   12088:	f204 1049 	addw	r0, r4, #329	; 0x149
   1208c:	f009 fe4d 	bl	1bd2a <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   12090:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12094:	f013 0318 	ands.w	r3, r3, #24
   12098:	d029      	beq.n	120ee <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   1209a:	2b18      	cmp	r3, #24
   1209c:	d121      	bne.n	120e2 <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   1209e:	2208      	movs	r2, #8
   120a0:	4641      	mov	r1, r8
   120a2:	f204 1041 	addw	r0, r4, #321	; 0x141
   120a6:	f009 fe40 	bl	1bd2a <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   120aa:	f899 3000 	ldrb.w	r3, [r9]
   120ae:	f884 313f 	strb.w	r3, [r4, #319]	; 0x13f
			conn->llcp_enc.ediv[1] = ediv[1];
   120b2:	f899 3001 	ldrb.w	r3, [r9, #1]
   120b6:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   120ba:	792b      	ldrb	r3, [r5, #4]
   120bc:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   120c0:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   120c2:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   120c4:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   120c6:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   120c8:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   120ca:	4629      	mov	r1, r5
   120cc:	4638      	mov	r0, r7
   120ce:	f7fd fba7 	bl	f820 <ll_tx_mem_enqueue>
   120d2:	b930      	cbnz	r0, 120e2 <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   120d4:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
   120d8:	3301      	adds	r3, #1
   120da:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
}
   120de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   120e2:	4628      	mov	r0, r5
   120e4:	f7fd fb96 	bl	f814 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   120e8:	200c      	movs	r0, #12
}
   120ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   120ee:	792b      	ldrb	r3, [r5, #4]
   120f0:	f043 0303 	orr.w	r3, r3, #3
   120f4:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   120f6:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   120f8:	2208      	movs	r2, #8
			pdu_data_tx->len =
   120fa:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   120fc:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   120fe:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   12100:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   12102:	18a8      	adds	r0, r5, r2
   12104:	f009 fe11 	bl	1bd2a <memcpy>
			enc_req->ediv[0] = ediv[0];
   12108:	f899 3000 	ldrb.w	r3, [r9]
   1210c:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   1210e:	f899 3001 	ldrb.w	r3, [r9, #1]
   12112:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   12114:	2108      	movs	r1, #8
   12116:	f105 0012 	add.w	r0, r5, #18
   1211a:	f001 fe71 	bl	13e00 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   1211e:	2104      	movs	r1, #4
   12120:	f105 001a 	add.w	r0, r5, #26
   12124:	f001 fe6c 	bl	13e00 <lll_csrand_get>
   12128:	e7cf      	b.n	120ca <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1212a:	2002      	movs	r0, #2
}
   1212c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00012130 <ull_central_reset>:
{
   12130:	b530      	push	{r4, r5, lr}
   12132:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   12134:	a801      	add	r0, sp, #4
   12136:	f7ff ff35 	bl	11fa4 <ll_connect_disable>
	if (!err) {
   1213a:	4604      	mov	r4, r0
   1213c:	b110      	cbz	r0, 12144 <ull_central_reset+0x14>
}
   1213e:	4620      	mov	r0, r4
   12140:	b003      	add	sp, #12
   12142:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   12144:	f7fc fec6 	bl	eed4 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   12148:	4605      	mov	r5, r0
   1214a:	b150      	cbz	r0, 12162 <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   1214c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   12150:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   12152:	f36f 0300 	bfc	r3, #0, #1
}
   12156:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   12158:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1215c:	622a      	str	r2, [r5, #32]
}
   1215e:	b003      	add	sp, #12
   12160:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   12162:	4a07      	ldr	r2, [pc, #28]	; (12180 <ull_central_reset+0x50>)
   12164:	4907      	ldr	r1, [pc, #28]	; (12184 <ull_central_reset+0x54>)
   12166:	4808      	ldr	r0, [pc, #32]	; (12188 <ull_central_reset+0x58>)
   12168:	f240 23e9 	movw	r3, #745	; 0x2e9
   1216c:	f008 ffa3 	bl	1b0b6 <printk>
   12170:	4040      	eors	r0, r0
   12172:	f380 8811 	msr	BASEPRI, r0
   12176:	f04f 0003 	mov.w	r0, #3
   1217a:	df02      	svc	2
   1217c:	e7e6      	b.n	1214c <ull_central_reset+0x1c>
   1217e:	bf00      	nop
   12180:	000209cc 	.word	0x000209cc
   12184:	00020a24 	.word	0x00020a24
   12188:	000203b4 	.word	0x000203b4

0001218c <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1218c:	6883      	ldr	r3, [r0, #8]
{
   1218e:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   12190:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   12192:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   12194:	b31c      	cbz	r4, 121de <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   12196:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	scan->lll.conn = NULL;
   12198:	2200      	movs	r2, #0
   1219a:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   1219c:	b163      	cbz	r3, 121b8 <ull_central_cleanup+0x2c>
   1219e:	4a1e      	ldr	r2, [pc, #120]	; (12218 <ull_central_cleanup+0x8c>)
   121a0:	491e      	ldr	r1, [pc, #120]	; (1221c <ull_central_cleanup+0x90>)
   121a2:	481f      	ldr	r0, [pc, #124]	; (12220 <ull_central_cleanup+0x94>)
   121a4:	f240 3305 	movw	r3, #773	; 0x305
   121a8:	f008 ff85 	bl	1b0b6 <printk>
   121ac:	4040      	eors	r0, r0
   121ae:	f380 8811 	msr	BASEPRI, r0
   121b2:	f04f 0003 	mov.w	r0, #3
   121b6:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   121b8:	f104 0130 	add.w	r1, r4, #48	; 0x30
   121bc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   121c0:	f7f7 ffa4 	bl	a10c <memq_deinit>
	LL_ASSERT(link);
   121c4:	4606      	mov	r6, r0
   121c6:	b1c0      	cbz	r0, 121fa <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   121c8:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   121ca:	63e6      	str	r6, [r4, #60]	; 0x3c
	ll_conn_release(conn);
   121cc:	f7fd faf4 	bl	f7b8 <ll_conn_release>
	scan->is_enabled = 0U;
   121d0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   121d4:	f36f 0300 	bfc	r3, #0, #1
   121d8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   121dc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   121de:	4a0e      	ldr	r2, [pc, #56]	; (12218 <ull_central_cleanup+0x8c>)
   121e0:	4910      	ldr	r1, [pc, #64]	; (12224 <ull_central_cleanup+0x98>)
   121e2:	480f      	ldr	r0, [pc, #60]	; (12220 <ull_central_cleanup+0x94>)
   121e4:	f240 3302 	movw	r3, #770	; 0x302
   121e8:	f008 ff65 	bl	1b0b6 <printk>
   121ec:	4040      	eors	r0, r0
   121ee:	f380 8811 	msr	BASEPRI, r0
   121f2:	f04f 0003 	mov.w	r0, #3
   121f6:	df02      	svc	2
   121f8:	e7cd      	b.n	12196 <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   121fa:	4a07      	ldr	r2, [pc, #28]	; (12218 <ull_central_cleanup+0x8c>)
   121fc:	490a      	ldr	r1, [pc, #40]	; (12228 <ull_central_cleanup+0x9c>)
   121fe:	4808      	ldr	r0, [pc, #32]	; (12220 <ull_central_cleanup+0x94>)
   12200:	f44f 7342 	mov.w	r3, #776	; 0x308
   12204:	f008 ff57 	bl	1b0b6 <printk>
   12208:	4040      	eors	r0, r0
   1220a:	f380 8811 	msr	BASEPRI, r0
   1220e:	f04f 0003 	mov.w	r0, #3
   12212:	df02      	svc	2
   12214:	e7d8      	b.n	121c8 <ull_central_cleanup+0x3c>
   12216:	bf00      	nop
   12218:	000209cc 	.word	0x000209cc
   1221c:	00020a38 	.word	0x00020a38
   12220:	000203b4 	.word	0x000203b4
   12224:	00020a2c 	.word	0x00020a2c
   12228:	00020858 	.word	0x00020858

0001222c <ull_central_chm_update>:
{
   1222c:	b538      	push	{r3, r4, r5, lr}
		conn = ll_connected_get(handle);
   1222e:	2000      	movs	r0, #0
   12230:	f7fd fad8 	bl	f7e4 <ll_connected_get>
		if (!conn || conn->lll.role) {
   12234:	4604      	mov	r4, r0
   12236:	b1d8      	cbz	r0, 12270 <ull_central_chm_update+0x44>
   12238:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1223c:	2b00      	cmp	r3, #0
   1223e:	db17      	blt.n	12270 <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
   12240:	f7ff fe0c 	bl	11e5c <ull_conn_llcp_req>
		if (ret) {
   12244:	4605      	mov	r5, r0
   12246:	b988      	cbnz	r0, 1226c <ull_central_chm_update+0x40>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   12248:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
   1224c:	f000 f9c4 	bl	125d8 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   12250:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_req++;
   12254:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
		conn->llcp.chan_map.initiate = 1U;
   12258:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1225c:	2102      	movs	r1, #2
		conn->llcp_req++;
   1225e:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   12260:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		conn->llcp_type = LLCP_CHAN_MAP;
   12264:	f884 10bd 	strb.w	r1, [r4, #189]	; 0xbd
		conn->llcp_req++;
   12268:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
}
   1226c:	4628      	mov	r0, r5
   1226e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   12270:	2500      	movs	r5, #0
}
   12272:	4628      	mov	r0, r5
   12274:	bd38      	pop	{r3, r4, r5, pc}
   12276:	bf00      	nop

00012278 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   12278:	6008      	str	r0, [r1, #0]
}
   1227a:	4770      	bx	lr

0001227c <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12280:	b091      	sub	sp, #68	; 0x44
   12282:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   12286:	9306      	str	r3, [sp, #24]
	if (conn_curr->lll.role) {
   12288:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1228c:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1228e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   12290:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
   12294:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   12296:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   12298:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   1229a:	da02      	bge.n	122a2 <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   1229c:	4613      	mov	r3, r2
   1229e:	3314      	adds	r3, #20
   122a0:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   122a2:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   122a4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   122a8:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   122ac:	f8df b254 	ldr.w	fp, [pc, #596]	; 12504 <win_offset_calc.constprop.0+0x288>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   122b0:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   122b4:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   122b6:	f8cd 8014 	str.w	r8, [sp, #20]
		ticks_anchor_prev = offset_index = offset = 0U;
   122ba:	46b2      	mov	sl, r6
	ticks_slot_abs_prev = 0U;
   122bc:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   122be:	4635      	mov	r5, r6
   122c0:	e044      	b.n	1234c <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   122c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   122c6:	2bff      	cmp	r3, #255	; 0xff
   122c8:	d064      	beq.n	12394 <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   122ca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   122ce:	d011      	beq.n	122f4 <win_offset_calc.constprop.0+0x78>
   122d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   122d2:	4552      	cmp	r2, sl
   122d4:	d00e      	beq.n	122f4 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   122d6:	498c      	ldr	r1, [pc, #560]	; (12508 <win_offset_calc.constprop.0+0x28c>)
   122d8:	488c      	ldr	r0, [pc, #560]	; (1250c <win_offset_calc.constprop.0+0x290>)
   122da:	f240 13c3 	movw	r3, #451	; 0x1c3
   122de:	465a      	mov	r2, fp
   122e0:	f008 fee9 	bl	1b0b6 <printk>
   122e4:	4040      	eors	r0, r0
   122e6:	f380 8811 	msr	BASEPRI, r0
   122ea:	f04f 0003 	mov.w	r0, #3
   122ee:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   122f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   122f4:	1e9a      	subs	r2, r3, #2
   122f6:	2a03      	cmp	r2, #3
   122f8:	d825      	bhi.n	12346 <win_offset_calc.constprop.0+0xca>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   122fa:	2b05      	cmp	r3, #5
   122fc:	d17f      	bne.n	123fe <win_offset_calc.constprop.0+0x182>
		if (ticker_id_other != 0xff) {
   122fe:	9b05      	ldr	r3, [sp, #20]
   12300:	2bff      	cmp	r3, #255	; 0xff
   12302:	d178      	bne.n	123f6 <win_offset_calc.constprop.0+0x17a>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   12304:	2000      	movs	r0, #0
   12306:	f7fd fa65 	bl	f7d4 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   1230a:	9b07      	ldr	r3, [sp, #28]
   1230c:	4283      	cmp	r3, r0
   1230e:	d01a      	beq.n	12346 <win_offset_calc.constprop.0+0xca>
   12310:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12312:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   12316:	2a00      	cmp	r2, #0
   12318:	f040 808a 	bne.w	12430 <win_offset_calc.constprop.0+0x1b4>
   1231c:	2b00      	cmp	r3, #0
   1231e:	db12      	blt.n	12346 <win_offset_calc.constprop.0+0xca>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   12320:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   12322:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   12326:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1232a:	3328      	adds	r3, #40	; 0x28
   1232c:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1232e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12330:	681b      	ldr	r3, [r3, #0]
   12332:	4543      	cmp	r3, r8
   12334:	f0c0 808b 	bcc.w	1244e <win_offset_calc.constprop.0+0x1d2>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   12338:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   1233a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1233e:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   12340:	4645      	mov	r5, r8
   12342:	f89d 8033 	ldrb.w	r8, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   12346:	783b      	ldrb	r3, [r7, #0]
   12348:	42a3      	cmp	r3, r4
   1234a:	d95c      	bls.n	12406 <win_offset_calc.constprop.0+0x18a>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1234c:	ab0f      	add	r3, sp, #60	; 0x3c
   1234e:	9302      	str	r3, [sp, #8]
   12350:	4b6f      	ldr	r3, [pc, #444]	; (12510 <win_offset_calc.constprop.0+0x294>)
   12352:	9301      	str	r3, [sp, #4]
   12354:	ab0d      	add	r3, sp, #52	; 0x34
   12356:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   12358:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1235a:	ab0e      	add	r3, sp, #56	; 0x38
   1235c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   12360:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   12362:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   12364:	f7f9 f9e8 	bl	b738 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12368:	2802      	cmp	r0, #2
   1236a:	d056      	beq.n	1241a <win_offset_calc.constprop.0+0x19e>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   1236c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   1236e:	2b00      	cmp	r3, #0
   12370:	d0a7      	beq.n	122c2 <win_offset_calc.constprop.0+0x46>
   12372:	4968      	ldr	r1, [pc, #416]	; (12514 <win_offset_calc.constprop.0+0x298>)
   12374:	4865      	ldr	r0, [pc, #404]	; (1250c <win_offset_calc.constprop.0+0x290>)
   12376:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   1237a:	465a      	mov	r2, fp
   1237c:	f008 fe9b 	bl	1b0b6 <printk>
   12380:	4040      	eors	r0, r0
   12382:	f380 8811 	msr	BASEPRI, r0
   12386:	f04f 0003 	mov.w	r0, #3
   1238a:	df02      	svc	2
		if (ticker_id == 0xff) {
   1238c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   12390:	2bff      	cmp	r3, #255	; 0xff
   12392:	d19a      	bne.n	122ca <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12396:	681b      	ldr	r3, [r3, #0]
   12398:	429d      	cmp	r5, r3
   1239a:	bf38      	it	cc
   1239c:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1239e:	783b      	ldrb	r3, [r7, #0]
   123a0:	42a3      	cmp	r3, r4
   123a2:	d926      	bls.n	123f2 <win_offset_calc.constprop.0+0x176>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   123a4:	9b04      	ldr	r3, [sp, #16]
   123a6:	495c      	ldr	r1, [pc, #368]	; (12518 <win_offset_calc.constprop.0+0x29c>)
			if (offset >= conn_interval) {
   123a8:	9806      	ldr	r0, [sp, #24]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   123aa:	442b      	add	r3, r5
   123ac:	fba1 2303 	umull	r2, r3, r1, r3
   123b0:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   123b4:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   123b6:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   123ba:	f240 809a 	bls.w	124f2 <win_offset_calc.constprop.0+0x276>
   123be:	9e04      	ldr	r6, [sp, #16]
   123c0:	f8dd c018 	ldr.w	ip, [sp, #24]
   123c4:	e002      	b.n	123cc <win_offset_calc.constprop.0+0x150>
   123c6:	4594      	cmp	ip, r2
   123c8:	f240 8093 	bls.w	124f2 <win_offset_calc.constprop.0+0x276>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   123cc:	eb09 0044 	add.w	r0, r9, r4, lsl #1
	dst[0] = val;
   123d0:	f809 3014 	strb.w	r3, [r9, r4, lsl #1]
	dst[1] = val >> 8;
   123d4:	0a12      	lsrs	r2, r2, #8
   123d6:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   123d8:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   123da:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   123dc:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   123de:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   123e0:	1973      	adds	r3, r6, r5
   123e2:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   123e6:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   123e8:	f3c3 124f 	ubfx	r2, r3, #5, #16
   123ec:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   123f0:	d8e9      	bhi.n	123c6 <win_offset_calc.constprop.0+0x14a>
		*ticks_to_offset_next = ticks_to_expire_prev;
   123f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   123f4:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   123f6:	703c      	strb	r4, [r7, #0]
}
   123f8:	b011      	add	sp, #68	; 0x44
   123fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123fe:	9305      	str	r3, [sp, #20]
	} while (offset_index < *offset_max);
   12400:	783b      	ldrb	r3, [r7, #0]
   12402:	42a3      	cmp	r3, r4
   12404:	d8a2      	bhi.n	1234c <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   12406:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1240a:	2bff      	cmp	r3, #255	; 0xff
   1240c:	d1f3      	bne.n	123f6 <win_offset_calc.constprop.0+0x17a>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1240e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12410:	681b      	ldr	r3, [r3, #0]
   12412:	429d      	cmp	r5, r3
   12414:	bf38      	it	cc
   12416:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   12418:	e7eb      	b.n	123f2 <win_offset_calc.constprop.0+0x176>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1241a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1241c:	2b02      	cmp	r3, #2
   1241e:	d1a5      	bne.n	1236c <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   12420:	2102      	movs	r1, #2
   12422:	2000      	movs	r0, #0
   12424:	f7f9 f9ce 	bl	b7c4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1242a:	2b02      	cmp	r3, #2
   1242c:	d0f8      	beq.n	12420 <win_offset_calc.constprop.0+0x1a4>
   1242e:	e79d      	b.n	1236c <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   12430:	2b00      	cmp	r3, #0
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   12432:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   12434:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			if (conn->lll.role) {
   12438:	da4f      	bge.n	124da <win_offset_calc.constprop.0+0x25e>
				ticks_slot_abs_curr += ticks_slot_margin;
   1243a:	f101 033c 	add.w	r3, r1, #60	; 0x3c
   1243e:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   12440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12442:	681b      	ldr	r3, [r3, #0]
   12444:	4543      	cmp	r3, r8
				ticks_slot_margin =
   12446:	f04f 0a14 	mov.w	sl, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1244a:	f4bf af75 	bcs.w	12338 <win_offset_calc.constprop.0+0xbc>
				if (ticks_to_expire_prev <
   1244e:	429d      	cmp	r5, r3
   12450:	bf38      	it	cc
   12452:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   12454:	783b      	ldrb	r3, [r7, #0]
   12456:	42a3      	cmp	r3, r4
   12458:	d930      	bls.n	124bc <win_offset_calc.constprop.0+0x240>
					(ticks_slot_abs_prev + ticks_slot_abs +
   1245a:	9b04      	ldr	r3, [sp, #16]
   1245c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1245e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   12462:	4413      	add	r3, r2
   12464:	449a      	add	sl, r3
   12466:	46b1      	mov	r9, r6
   12468:	462e      	mov	r6, r5
   1246a:	4655      	mov	r5, sl
   1246c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
   12470:	e014      	b.n	1249c <win_offset_calc.constprop.0+0x220>
					if (offset >= conn_interval) {
   12472:	9a06      	ldr	r2, [sp, #24]
					offset = (ticks_to_expire_prev +
   12474:	f3c3 194f 	ubfx	r9, r3, #5, #16
					if (offset >= conn_interval) {
   12478:	4591      	cmp	r9, r2
					ticks_to_expire_prev +=
   1247a:	f106 0628 	add.w	r6, r6, #40	; 0x28
					offset_index++;
   1247e:	f104 0001 	add.w	r0, r4, #1
						  ticks_slot_abs_prev) /
   12482:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   12486:	d238      	bcs.n	124fa <win_offset_calc.constprop.0+0x27e>
	dst[0] = val;
   12488:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   1248c:	ea4f 2319 	mov.w	r3, r9, lsr #8
   12490:	f88c 3001 	strb.w	r3, [ip, #1]
				while ((offset_index < *offset_max) &&
   12494:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   12496:	b2c4      	uxtb	r4, r0
				while ((offset_index < *offset_max) &&
   12498:	42a3      	cmp	r3, r4
   1249a:	d924      	bls.n	124e6 <win_offset_calc.constprop.0+0x26a>
				       (ticker_ticks_diff_get(
   1249c:	4631      	mov	r1, r6
   1249e:	4640      	mov	r0, r8
   124a0:	f7f9 f9aa 	bl	b7f8 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   124a4:	9b04      	ldr	r3, [sp, #16]
   124a6:	4a1c      	ldr	r2, [pc, #112]	; (12518 <win_offset_calc.constprop.0+0x29c>)
   124a8:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   124aa:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   124ac:	eb0a 0c44 	add.w	ip, sl, r4, lsl #1
						  ticks_slot_abs_prev) /
   124b0:	fba2 2303 	umull	r2, r3, r2, r3
				while ((offset_index < *offset_max) &&
   124b4:	d2dd      	bcs.n	12472 <win_offset_calc.constprop.0+0x1f6>
   124b6:	4635      	mov	r5, r6
   124b8:	464e      	mov	r6, r9
   124ba:	46d1      	mov	r9, sl
				*ticks_to_offset_next = ticks_to_expire_prev;
   124bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   124be:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   124c0:	9b06      	ldr	r3, [sp, #24]
   124c2:	42b3      	cmp	r3, r6
   124c4:	f63f af38 	bhi.w	12338 <win_offset_calc.constprop.0+0xbc>
	if (ticker_id == 0xff) {
   124c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   124cc:	2bff      	cmp	r3, #255	; 0xff
   124ce:	f43f af61 	beq.w	12394 <win_offset_calc.constprop.0+0x118>
	*offset_max = offset_index;
   124d2:	703c      	strb	r4, [r7, #0]
}
   124d4:	b011      	add	sp, #68	; 0x44
   124d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   124da:	f101 0328 	add.w	r3, r1, #40	; 0x28
   124de:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   124e0:	f04f 0a00 	mov.w	sl, #0
   124e4:	e723      	b.n	1232e <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
   124e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   124e8:	4635      	mov	r5, r6
   124ea:	601d      	str	r5, [r3, #0]
   124ec:	464e      	mov	r6, r9
   124ee:	46d1      	mov	r9, sl
				if (offset >= conn_interval) {
   124f0:	e722      	b.n	12338 <win_offset_calc.constprop.0+0xbc>
		*ticks_to_offset_next = ticks_to_expire_prev;
   124f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   124f4:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   124f6:	601d      	str	r5, [r3, #0]
   124f8:	e77d      	b.n	123f6 <win_offset_calc.constprop.0+0x17a>
				*ticks_to_offset_next = ticks_to_expire_prev;
   124fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   124fc:	2500      	movs	r5, #0
   124fe:	46d1      	mov	r9, sl
   12500:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   12502:	e7e1      	b.n	124c8 <win_offset_calc.constprop.0+0x24c>
   12504:	00020a50 	.word	0x00020a50
   12508:	00020414 	.word	0x00020414
   1250c:	000203b4 	.word	0x000203b4
   12510:	00012279 	.word	0x00012279
   12514:	00020a94 	.word	0x00020a94
   12518:	cccccccd 	.word	0xcccccccd

0001251c <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   1251c:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1251e:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   12520:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   12522:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   12524:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   12526:	89c0      	ldrh	r0, [r0, #14]
   12528:	6909      	ldr	r1, [r1, #16]
   1252a:	3310      	adds	r3, #16
   1252c:	f7f1 b85c 	b.w	35e8 <after_mstr_offset_get>

00012530 <ull_sched_mfy_win_offset_use>:
{
   12530:	b510      	push	{r4, lr}
   12532:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   12534:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
   12538:	6901      	ldr	r1, [r0, #16]
   1253a:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
   1253e:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   12540:	f7f1 f852 	bl	35e8 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   12544:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   12548:	4908      	ldr	r1, [pc, #32]	; (1256c <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   1254a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1254e:	fba1 1303 	umull	r1, r3, r1, r3
   12552:	0a9b      	lsrs	r3, r3, #10
   12554:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   12558:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   1255a:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   1255c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   12560:	2204      	movs	r2, #4
   12562:	f362 0302 	bfi	r3, r2, #0, #3
   12566:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
}
   1256a:	bd10      	pop	{r4, pc}
   1256c:	d1b71759 	.word	0xd1b71759

00012570 <ull_sched_mfy_free_win_offset_calc>:
{
   12570:	b510      	push	{r4, lr}
   12572:	b084      	sub	sp, #16
   12574:	4604      	mov	r4, r0
	win_offset_calc(conn, 0, ticks_to_offset_next,
   12576:	f8d0 c178 	ldr.w	ip, [r0, #376]	; 0x178
   1257a:	f8cd c004 	str.w	ip, [sp, #4]
   1257e:	f10d 030b 	add.w	r3, sp, #11
	uint8_t offset_max = 6U;
   12582:	2206      	movs	r2, #6
	uint32_t ticks_to_offset_default = 0U;
   12584:	2100      	movs	r1, #0
	uint8_t offset_max = 6U;
   12586:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1258a:	9300      	str	r3, [sp, #0]
   1258c:	aa03      	add	r2, sp, #12
   1258e:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
	uint32_t ticks_to_offset_default = 0U;
   12592:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   12594:	f7ff fe72 	bl	1227c <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   12598:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1259c:	2208      	movs	r2, #8
   1259e:	f362 0303 	bfi	r3, r2, #0, #4
   125a2:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
}
   125a6:	b004      	add	sp, #16
   125a8:	bd10      	pop	{r4, pc}
   125aa:	bf00      	nop

000125ac <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   125ac:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   125ae:	4c08      	ldr	r4, [pc, #32]	; (125d0 <ll_chm_update+0x24>)
   125b0:	2205      	movs	r2, #5
{
   125b2:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   125b4:	4620      	mov	r0, r4
   125b6:	f009 fbb8 	bl	1bd2a <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   125ba:	2105      	movs	r1, #5
   125bc:	4620      	mov	r0, r4
   125be:	f7f7 ff21 	bl	a404 <util_ones_count_get>
   125c2:	4b04      	ldr	r3, [pc, #16]	; (125d4 <ll_chm_update+0x28>)
   125c4:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   125c6:	f7ff fe31 	bl	1222c <ull_central_chm_update>
}
   125ca:	2000      	movs	r0, #0
   125cc:	bd10      	pop	{r4, pc}
   125ce:	bf00      	nop
   125d0:	2000067c 	.word	0x2000067c
   125d4:	200008df 	.word	0x200008df

000125d8 <ull_chan_map_get>:
{
   125d8:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   125da:	4903      	ldr	r1, [pc, #12]	; (125e8 <ull_chan_map_get+0x10>)
   125dc:	2205      	movs	r2, #5
   125de:	f009 fba4 	bl	1bd2a <memcpy>
	return count;
   125e2:	4b02      	ldr	r3, [pc, #8]	; (125ec <ull_chan_map_get+0x14>)
}
   125e4:	7818      	ldrb	r0, [r3, #0]
   125e6:	bd08      	pop	{r3, pc}
   125e8:	2000067c 	.word	0x2000067c
   125ec:	200008df 	.word	0x200008df

000125f0 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   125f0:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   125f2:	fb02 1c01 	mla	ip, r2, r1, r1
   125f6:	7802      	ldrb	r2, [r0, #0]
   125f8:	491c      	ldr	r1, [pc, #112]	; (1266c <lll_chan_sel_1+0x7c>)
{
   125fa:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   125fe:	4494      	add	ip, r2
   12600:	fb81 210c 	smull	r2, r1, r1, ip
   12604:	4461      	add	r1, ip
   12606:	1149      	asrs	r1, r1, #5
   12608:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   1260c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   12610:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   12612:	ebac 0101 	sub.w	r1, ip, r1
   12616:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   12618:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1261a:	08c4      	lsrs	r4, r0, #3
   1261c:	f001 0107 	and.w	r1, r1, #7
   12620:	f813 c004 	ldrb.w	ip, [r3, r4]
   12624:	fa4c f101 	asr.w	r1, ip, r1
   12628:	f011 0101 	ands.w	r1, r1, #1
   1262c:	d11d      	bne.n	1266a <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1262e:	fbb0 f2f5 	udiv	r2, r0, r5
   12632:	fb05 0212 	mls	r2, r5, r2, r0
   12636:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   12638:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   1263c:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   1263e:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   12640:	f100 0c08 	add.w	ip, r0, #8
   12644:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   12648:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   1264c:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   12650:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   12654:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   12658:	d002      	beq.n	12660 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1265a:	b132      	cbz	r2, 1266a <lll_chan_sel_1+0x7a>
				chan_index--;
   1265c:	3a01      	subs	r2, #1
   1265e:	b2d2      	uxtb	r2, r2
			chan_next++;
   12660:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   12662:	4584      	cmp	ip, r0
   12664:	d1f2      	bne.n	1264c <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   12666:	45a6      	cmp	lr, r4
   12668:	d1ea      	bne.n	12640 <lll_chan_sel_1+0x50>
}
   1266a:	bd30      	pop	{r4, r5, pc}
   1266c:	dd67c8a7 	.word	0xdd67c8a7

00012670 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   12670:	8842      	ldrh	r2, [r0, #2]
   12672:	8800      	ldrh	r0, [r0, #0]
}
   12674:	4050      	eors	r0, r2
   12676:	4770      	bx	lr

00012678 <lll_chan_sel_2>:
{
   12678:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1267a:	4d2f      	ldr	r5, [pc, #188]	; (12738 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1267c:	4c2f      	ldr	r4, [pc, #188]	; (1273c <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   1267e:	4048      	eors	r0, r1
   12680:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   12684:	0a07      	lsrs	r7, r0, #8
   12686:	b2c0      	uxtb	r0, r0
   12688:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   1268c:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   12690:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   12694:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   12698:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   1269c:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   126a0:	433e      	orrs	r6, r7
   126a2:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   126a6:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   126aa:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   126ae:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   126b2:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   126b6:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   126b8:	f3c0 4007 	ubfx	r0, r0, #16, #8
   126bc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   126c0:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   126c4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   126c8:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   126ca:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   126ce:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   126d0:	d1d8      	bne.n	12684 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   126d2:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   126d4:	481a      	ldr	r0, [pc, #104]	; (12740 <lll_chan_sel_2+0xc8>)
   126d6:	fba0 4001 	umull	r4, r0, r0, r1
   126da:	1a0c      	subs	r4, r1, r0
   126dc:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   126e0:	0940      	lsrs	r0, r0, #5
   126e2:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   126e6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   126ea:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   126ec:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   126f0:	f000 0507 	and.w	r5, r0, #7
   126f4:	5d14      	ldrb	r4, [r2, r4]
   126f6:	412c      	asrs	r4, r5
   126f8:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   126fa:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   126fc:	d41a      	bmi.n	12734 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   126fe:	fb01 f303 	mul.w	r3, r1, r3
   12702:	1e56      	subs	r6, r2, #1
   12704:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   12708:	3204      	adds	r2, #4
	chan_next = 0U;
   1270a:	4660      	mov	r0, ip
		bite = *chan_map;
   1270c:	f100 0508 	add.w	r5, r0, #8
   12710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   12714:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   12716:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1271a:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   1271e:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   12722:	d002      	beq.n	1272a <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   12724:	b133      	cbz	r3, 12734 <lll_chan_sel_2+0xbc>
				chan_index--;
   12726:	3b01      	subs	r3, #1
   12728:	b2db      	uxtb	r3, r3
			chan_next++;
   1272a:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   1272c:	42a8      	cmp	r0, r5
   1272e:	d1f2      	bne.n	12716 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   12730:	42b2      	cmp	r2, r6
   12732:	d1eb      	bne.n	1270c <lll_chan_sel_2+0x94>
}
   12734:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12736:	bf00      	nop
   12738:	00022110 	.word	0x00022110
   1273c:	00088440 	.word	0x00088440
   12740:	bacf914d 	.word	0xbacf914d

00012744 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   12744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12748:	4d18      	ldr	r5, [pc, #96]	; (127ac <rl_update+0x68>)
   1274a:	4e19      	ldr	r6, [pc, #100]	; (127b0 <rl_update+0x6c>)
   1274c:	2400      	movs	r4, #0
   1274e:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   12752:	1eaf      	subs	r7, r5, #2
   12754:	f04f 0801 	mov.w	r8, #1
   12758:	e006      	b.n	12768 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1275a:	3401      	adds	r4, #1
   1275c:	2c08      	cmp	r4, #8
   1275e:	f105 0506 	add.w	r5, r5, #6
   12762:	f106 0628 	add.w	r6, r6, #40	; 0x28
   12766:	d01e      	beq.n	127a6 <rl_update+0x62>
		if (rl[i].taken) {
   12768:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1276c:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   12770:	07da      	lsls	r2, r3, #31
   12772:	d5f2      	bpl.n	1275a <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   12774:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12776:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   12778:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1277c:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12780:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   12782:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12786:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12788:	4631      	mov	r1, r6
   1278a:	4628      	mov	r0, r5
   1278c:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1278e:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   12790:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12794:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   12796:	f009 fac8 	bl	1bd2a <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1279a:	2c08      	cmp	r4, #8
   1279c:	f105 0506 	add.w	r5, r5, #6
   127a0:	f106 0628 	add.w	r6, r6, #40	; 0x28
   127a4:	d1e0      	bne.n	12768 <rl_update+0x24>
}
   127a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   127aa:	bf00      	nop
   127ac:	2000262a 	.word	0x2000262a
   127b0:	200024e9 	.word	0x200024e9

000127b4 <fal_update>:
{
   127b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127b8:	4e20      	ldr	r6, [pc, #128]	; (1283c <fal_update+0x88>)
   127ba:	4d21      	ldr	r5, [pc, #132]	; (12840 <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   127bc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 12844 <fal_update+0x90>
   127c0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 12848 <fal_update+0x94>
{
   127c4:	2400      	movs	r4, #0
   127c6:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   127ca:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   127cc:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   127d0:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   127d4:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   127d8:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   127da:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   127de:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   127e0:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   127e4:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   127e8:	d021      	beq.n	1282e <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   127ea:	f898 3000 	ldrb.w	r3, [r8]
   127ee:	b163      	cbz	r3, 1280a <fal_update+0x56>
		j = fal[i].rl_idx;
   127f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   127f4:	2b07      	cmp	r3, #7
   127f6:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   127fa:	d806      	bhi.n	1280a <fal_update+0x56>
   127fc:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   12800:	f013 0f04 	tst.w	r3, #4
   12804:	d001      	beq.n	1280a <fal_update+0x56>
   12806:	06db      	lsls	r3, r3, #27
   12808:	d511      	bpl.n	1282e <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1280a:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1280e:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   12812:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   12816:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1281a:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   1281e:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   12822:	40a3      	lsls	r3, r4
   12824:	ea4e 0303 	orr.w	r3, lr, r3
   12828:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1282a:	f009 fa7e 	bl	1bd2a <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   1282e:	3401      	adds	r4, #1
   12830:	2c08      	cmp	r4, #8
   12832:	f105 0508 	add.w	r5, r5, #8
   12836:	d1c9      	bne.n	127cc <fal_update+0x18>
}
   12838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1283c:	200023fe 	.word	0x200023fe
   12840:	200023be 	.word	0x200023be
   12844:	20002db4 	.word	0x20002db4
   12848:	200024e8 	.word	0x200024e8

0001284c <ll_fal_size_get>:
}
   1284c:	2008      	movs	r0, #8
   1284e:	4770      	bx	lr

00012850 <ll_fal_clear>:
{
   12850:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   12852:	2000      	movs	r0, #0
   12854:	f7fc f952 	bl	eafc <ull_adv_filter_pol_get>
   12858:	b9f0      	cbnz	r0, 12898 <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1285a:	f7fc fb6d 	bl	ef38 <ull_scan_filter_pol_get>
   1285e:	f010 0001 	ands.w	r0, r0, #1
   12862:	d119      	bne.n	12898 <ll_fal_clear+0x48>
   12864:	4a0d      	ldr	r2, [pc, #52]	; (1289c <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   12866:	4c0e      	ldr	r4, [pc, #56]	; (128a0 <ll_fal_clear+0x50>)
		uint8_t j = fal[i].rl_idx;
   12868:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1286c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1286e:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   12870:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   12874:	d805      	bhi.n	12882 <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   12876:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1287a:	f36f 1345 	bfc	r3, #5, #1
   1287e:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   12882:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   12886:	f36f 0300 	bfc	r3, #0, #1
   1288a:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1288e:	3001      	adds	r0, #1
   12890:	2808      	cmp	r0, #8
   12892:	d1e9      	bne.n	12868 <ll_fal_clear+0x18>
	return 0;
   12894:	2000      	movs	r0, #0
}
   12896:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12898:	200c      	movs	r0, #12
}
   1289a:	bd10      	pop	{r4, pc}
   1289c:	200023bc 	.word	0x200023bc
   128a0:	200024e8 	.word	0x200024e8

000128a4 <ll_fal_add>:
{
   128a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128a8:	4607      	mov	r7, r0
   128aa:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   128ac:	2000      	movs	r0, #0
   128ae:	f7fc f925 	bl	eafc <ull_adv_filter_pol_get>
   128b2:	2800      	cmp	r0, #0
   128b4:	d16f      	bne.n	12996 <ll_fal_add+0xf2>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   128b6:	f7fc fb3f 	bl	ef38 <ull_scan_filter_pol_get>
   128ba:	f010 0401 	ands.w	r4, r0, #1
   128be:	d16a      	bne.n	12996 <ll_fal_add+0xf2>
	if (addr->type == ADDR_TYPE_ANON) {
   128c0:	f897 a000 	ldrb.w	sl, [r7]
   128c4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   128c8:	d069      	beq.n	1299e <ll_fal_add+0xfa>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   128ca:	4e41      	ldr	r6, [pc, #260]	; (129d0 <ll_fal_add+0x12c>)
   128cc:	f107 0b01 	add.w	fp, r7, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   128d0:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   128d4:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   128d8:	4625      	mov	r5, r4
   128da:	f1a6 0802 	sub.w	r8, r6, #2
   128de:	e009      	b.n	128f4 <ll_fal_add+0x50>
		} else if (free_idx && !fal[i].taken &&
   128e0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   128e4:	d101      	bne.n	128ea <ll_fal_add+0x46>
			*free_idx = i;
   128e6:	fa5f f985 	uxtb.w	r9, r5
	for (i = 0; i < FAL_SIZE; i++) {
   128ea:	3501      	adds	r5, #1
   128ec:	2d08      	cmp	r5, #8
   128ee:	f106 0608 	add.w	r6, r6, #8
   128f2:	d017      	beq.n	12924 <ll_fal_add+0x80>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   128f4:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   128f8:	07d8      	lsls	r0, r3, #31
   128fa:	f3c3 0240 	ubfx	r2, r3, #1, #1
   128fe:	d5ef      	bpl.n	128e0 <ll_fal_add+0x3c>
   12900:	4552      	cmp	r2, sl
   12902:	d1f2      	bne.n	128ea <ll_fal_add+0x46>
   12904:	2206      	movs	r2, #6
   12906:	4630      	mov	r0, r6
   12908:	4659      	mov	r1, fp
   1290a:	f009 f9fd 	bl	1bd08 <memcmp>
   1290e:	2800      	cmp	r0, #0
   12910:	d03e      	beq.n	12990 <ll_fal_add+0xec>
		} else if (free_idx && !fal[i].taken &&
   12912:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   12916:	07d9      	lsls	r1, r3, #31
   12918:	d5e2      	bpl.n	128e0 <ll_fal_add+0x3c>
	for (i = 0; i < FAL_SIZE; i++) {
   1291a:	3501      	adds	r5, #1
   1291c:	2d08      	cmp	r5, #8
   1291e:	f106 0608 	add.w	r6, r6, #8
   12922:	d1e7      	bne.n	128f4 <ll_fal_add+0x50>
	} else if (j >= ARRAY_SIZE(fal)) {
   12924:	f1b9 0f07 	cmp.w	r9, #7
   12928:	d83d      	bhi.n	129a6 <ll_fal_add+0x102>
	fal[i].id_addr_type = id_addr->type & 0x1;
   1292a:	783a      	ldrb	r2, [r7, #0]
   1292c:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   12930:	4e28      	ldr	r6, [pc, #160]	; (129d4 <ll_fal_add+0x130>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   12932:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   12934:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   12938:	fb15 0009 	smlabb	r0, r5, r9, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   1293c:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   12940:	4440      	add	r0, r8
   12942:	2206      	movs	r2, #6
   12944:	4659      	mov	r1, fp
   12946:	f009 f9f0 	bl	1bd2a <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1294a:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1294c:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1294e:	f003 0301 	and.w	r3, r3, #1
   12952:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   12956:	fa5f fa84 	uxtb.w	sl, r4
   1295a:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
   1295e:	f3c2 1180 	ubfx	r1, r2, #6, #1
   12962:	07d2      	lsls	r2, r2, #31
   12964:	f104 0401 	add.w	r4, r4, #1
   12968:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1296c:	d501      	bpl.n	12972 <ll_fal_add+0xce>
   1296e:	4299      	cmp	r1, r3
   12970:	d01b      	beq.n	129aa <ll_fal_add+0x106>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12972:	2c08      	cmp	r4, #8
   12974:	f106 0628 	add.w	r6, r6, #40	; 0x28
   12978:	d1eb      	bne.n	12952 <ll_fal_add+0xae>
		fal[i].rl_idx = FILTER_IDX_NONE;
   1297a:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1297e:	22ff      	movs	r2, #255	; 0xff
   12980:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   12982:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   12986:	f043 0301 	orr.w	r3, r3, #1
   1298a:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	return 0;
   1298e:	2000      	movs	r0, #0
}
   12990:	b003      	add	sp, #12
   12992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12996:	200c      	movs	r0, #12
}
   12998:	b003      	add	sp, #12
   1299a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   1299e:	4620      	mov	r0, r4
}
   129a0:	b003      	add	sp, #12
   129a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129a6:	2007      	movs	r0, #7
	return fal_add(addr);
   129a8:	e7f2      	b.n	12990 <ll_fal_add+0xec>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   129aa:	4630      	mov	r0, r6
   129ac:	2206      	movs	r2, #6
   129ae:	4659      	mov	r1, fp
   129b0:	9301      	str	r3, [sp, #4]
   129b2:	f009 f9a9 	bl	1bd08 <memcmp>
   129b6:	9b01      	ldr	r3, [sp, #4]
   129b8:	2800      	cmp	r0, #0
   129ba:	d1da      	bne.n	12972 <ll_fal_add+0xce>
		rl[j].fal = 1U;
   129bc:	5d7b      	ldrb	r3, [r7, r5]
   129be:	f043 0320 	orr.w	r3, r3, #32
   129c2:	557b      	strb	r3, [r7, r5]
		fal[i].rl_idx = j;
   129c4:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   129c8:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   129cc:	e7d9      	b.n	12982 <ll_fal_add+0xde>
   129ce:	bf00      	nop
   129d0:	200023be 	.word	0x200023be
   129d4:	200024e9 	.word	0x200024e9

000129d8 <ll_fal_remove>:
{
   129d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129dc:	4606      	mov	r6, r0
	if (ull_adv_filter_pol_get(0)) {
   129de:	2000      	movs	r0, #0
   129e0:	f7fc f88c 	bl	eafc <ull_adv_filter_pol_get>
   129e4:	b9f0      	cbnz	r0, 12a24 <ll_fal_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   129e6:	f7fc faa7 	bl	ef38 <ull_scan_filter_pol_get>
   129ea:	f010 0401 	ands.w	r4, r0, #1
   129ee:	d119      	bne.n	12a24 <ll_fal_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   129f0:	f896 8000 	ldrb.w	r8, [r6]
   129f4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   129f8:	d035      	beq.n	12a66 <ll_fal_remove+0x8e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   129fa:	4d1c      	ldr	r5, [pc, #112]	; (12a6c <ll_fal_remove+0x94>)
   129fc:	3601      	adds	r6, #1
	for (i = 0; i < FAL_SIZE; i++) {
   129fe:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   12a00:	f008 0801 	and.w	r8, r8, #1
   12a04:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   12a08:	f3c3 0240 	ubfx	r2, r3, #1, #1
   12a0c:	07db      	lsls	r3, r3, #31
   12a0e:	d501      	bpl.n	12a14 <ll_fal_remove+0x3c>
   12a10:	4542      	cmp	r2, r8
   12a12:	d00a      	beq.n	12a2a <ll_fal_remove+0x52>
	for (i = 0; i < FAL_SIZE; i++) {
   12a14:	3401      	adds	r4, #1
   12a16:	2c08      	cmp	r4, #8
   12a18:	f105 0508 	add.w	r5, r5, #8
   12a1c:	d1f2      	bne.n	12a04 <ll_fal_remove+0x2c>
   12a1e:	2002      	movs	r0, #2
}
   12a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12a24:	200c      	movs	r0, #12
}
   12a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   12a2a:	2206      	movs	r2, #6
   12a2c:	4628      	mov	r0, r5
   12a2e:	4631      	mov	r1, r6
   12a30:	f009 f96a 	bl	1bd08 <memcmp>
   12a34:	2800      	cmp	r0, #0
   12a36:	d1ed      	bne.n	12a14 <ll_fal_remove+0x3c>
		uint8_t j = fal[i].rl_idx;
   12a38:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   12a3c:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   12a3e:	2b07      	cmp	r3, #7
   12a40:	d808      	bhi.n	12a54 <ll_fal_remove+0x7c>
			rl[j].fal = 0U;
   12a42:	4a0b      	ldr	r2, [pc, #44]	; (12a70 <ll_fal_remove+0x98>)
   12a44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12a48:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12a4c:	f360 1145 	bfi	r1, r0, #5, #1
   12a50:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   12a54:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   12a58:	f36f 0300 	bfc	r3, #0, #1
   12a5c:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
		return 0;
   12a60:	2000      	movs	r0, #0
}
   12a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   12a66:	4620      	mov	r0, r4
}
   12a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a6c:	200023be 	.word	0x200023be
   12a70:	200024e8 	.word	0x200024e8

00012a74 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   12a74:	2807      	cmp	r0, #7
{
   12a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a7a:	4604      	mov	r4, r0
   12a7c:	460e      	mov	r6, r1
   12a7e:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   12a80:	d817      	bhi.n	12ab2 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   12a82:	4d1a      	ldr	r5, [pc, #104]	; (12aec <ll_rl_id_addr_get+0x78>)
   12a84:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12a88:	00a7      	lsls	r7, r4, #2
   12a8a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   12a8e:	07db      	lsls	r3, r3, #31
   12a90:	d51d      	bpl.n	12ace <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   12a92:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   12a94:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   12a96:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   12a9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   12a9e:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   12aa2:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   12aa4:	4640      	mov	r0, r8
   12aa6:	2206      	movs	r2, #6
}
   12aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   12aac:	3101      	adds	r1, #1
   12aae:	f009 b93c 	b.w	1bd2a <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   12ab2:	4a0f      	ldr	r2, [pc, #60]	; (12af0 <ll_rl_id_addr_get+0x7c>)
   12ab4:	490f      	ldr	r1, [pc, #60]	; (12af4 <ll_rl_id_addr_get+0x80>)
   12ab6:	4810      	ldr	r0, [pc, #64]	; (12af8 <ll_rl_id_addr_get+0x84>)
   12ab8:	f44f 7389 	mov.w	r3, #274	; 0x112
   12abc:	f008 fafb 	bl	1b0b6 <printk>
   12ac0:	4040      	eors	r0, r0
   12ac2:	f380 8811 	msr	BASEPRI, r0
   12ac6:	f04f 0003 	mov.w	r0, #3
   12aca:	df02      	svc	2
   12acc:	e7d9      	b.n	12a82 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   12ace:	4a08      	ldr	r2, [pc, #32]	; (12af0 <ll_rl_id_addr_get+0x7c>)
   12ad0:	490a      	ldr	r1, [pc, #40]	; (12afc <ll_rl_id_addr_get+0x88>)
   12ad2:	4809      	ldr	r0, [pc, #36]	; (12af8 <ll_rl_id_addr_get+0x84>)
   12ad4:	f240 1313 	movw	r3, #275	; 0x113
   12ad8:	f008 faed 	bl	1b0b6 <printk>
   12adc:	4040      	eors	r0, r0
   12ade:	f380 8811 	msr	BASEPRI, r0
   12ae2:	f04f 0003 	mov.w	r0, #3
   12ae6:	df02      	svc	2
   12ae8:	e7d3      	b.n	12a92 <ll_rl_id_addr_get+0x1e>
   12aea:	bf00      	nop
   12aec:	200024e8 	.word	0x200024e8
   12af0:	00020a9c 	.word	0x00020a9c
   12af4:	00020ae0 	.word	0x00020ae0
   12af8:	000203b4 	.word	0x000203b4
   12afc:	00020aec 	.word	0x00020aec

00012b00 <ll_rl_size_get>:
   12b00:	2008      	movs	r0, #8
   12b02:	4770      	bx	lr

00012b04 <ll_rl_clear>:
{
   12b04:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   12b06:	2000      	movs	r0, #0
   12b08:	f7fb ffec 	bl	eae4 <ull_adv_is_enabled>
		? 0 : 1;
   12b0c:	b108      	cbz	r0, 12b12 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12b0e:	200c      	movs	r0, #12
}
   12b10:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   12b12:	f7fc f9f9 	bl	ef08 <ull_scan_is_enabled>
		? 0 : 1;
   12b16:	f030 0001 	bics.w	r0, r0, #1
   12b1a:	d1f8      	bne.n	12b0e <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   12b1c:	4b18      	ldr	r3, [pc, #96]	; (12b80 <ll_rl_clear+0x7c>)
	peer_irk_count = 0U;
   12b1e:	4c19      	ldr	r4, [pc, #100]	; (12b84 <ll_rl_clear+0x80>)
		rl[i].taken = 0U;
   12b20:	7819      	ldrb	r1, [r3, #0]
   12b22:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   12b26:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   12b28:	f360 0100 	bfi	r1, r0, #0, #1
   12b2c:	f360 0200 	bfi	r2, r0, #0, #1
   12b30:	7019      	strb	r1, [r3, #0]
   12b32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   12b36:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   12b3a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   12b3e:	f360 0100 	bfi	r1, r0, #0, #1
   12b42:	f360 0200 	bfi	r2, r0, #0, #1
   12b46:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   12b4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   12b4e:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   12b52:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   12b56:	f360 0100 	bfi	r1, r0, #0, #1
   12b5a:	f360 0200 	bfi	r2, r0, #0, #1
   12b5e:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   12b62:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   12b66:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   12b6a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   12b6e:	f360 0100 	bfi	r1, r0, #0, #1
   12b72:	f360 0200 	bfi	r2, r0, #0, #1
   12b76:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   12b7a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   12b7e:	bd10      	pop	{r4, pc}
   12b80:	200024e8 	.word	0x200024e8
   12b84:	20002db3 	.word	0x20002db3

00012b88 <ll_rl_remove>:
{
   12b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b8c:	b083      	sub	sp, #12
   12b8e:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   12b90:	2000      	movs	r0, #0
{
   12b92:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   12b94:	f7fb ffa6 	bl	eae4 <ull_adv_is_enabled>
		? 0 : 1;
   12b98:	b118      	cbz	r0, 12ba2 <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12b9a:	200c      	movs	r0, #12
}
   12b9c:	b003      	add	sp, #12
   12b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   12ba2:	f7fc f9b1 	bl	ef08 <ull_scan_is_enabled>
		? 0 : 1;
   12ba6:	f030 0b01 	bics.w	fp, r0, #1
   12baa:	d1f6      	bne.n	12b9a <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   12bac:	9b00      	ldr	r3, [sp, #0]
   12bae:	f8df 8134 	ldr.w	r8, [pc, #308]	; 12ce4 <ll_rl_remove+0x15c>
   12bb2:	f813 ab01 	ldrb.w	sl, [r3], #1
   12bb6:	465c      	mov	r4, fp
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12bb8:	f00a 0a01 	and.w	sl, sl, #1
   12bbc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   12bc0:	461e      	mov	r6, r3
   12bc2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   12bc6:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   12bca:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   12bce:	f3c3 1280 	ubfx	r2, r3, #6, #1
   12bd2:	07db      	lsls	r3, r3, #31
   12bd4:	ea4f 0984 	mov.w	r9, r4, lsl #2
   12bd8:	d501      	bpl.n	12bde <ll_rl_remove+0x56>
   12bda:	4552      	cmp	r2, sl
   12bdc:	d008      	beq.n	12bf0 <ll_rl_remove+0x68>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12bde:	3401      	adds	r4, #1
   12be0:	2c08      	cmp	r4, #8
   12be2:	f108 0828 	add.w	r8, r8, #40	; 0x28
   12be6:	d1ec      	bne.n	12bc2 <ll_rl_remove+0x3a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12be8:	2002      	movs	r0, #2
}
   12bea:	b003      	add	sp, #12
   12bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12bf0:	4640      	mov	r0, r8
   12bf2:	2206      	movs	r2, #6
   12bf4:	4631      	mov	r1, r6
   12bf6:	f009 f887 	bl	1bd08 <memcmp>
   12bfa:	2800      	cmp	r0, #0
   12bfc:	d1ef      	bne.n	12bde <ll_rl_remove+0x56>
		if (rl[i].pirk) {
   12bfe:	782a      	ldrb	r2, [r5, #0]
   12c00:	0752      	lsls	r2, r2, #29
   12c02:	4633      	mov	r3, r6
   12c04:	4606      	mov	r6, r0
   12c06:	d535      	bpl.n	12c74 <ll_rl_remove+0xec>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12c08:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 12ce8 <ll_rl_remove+0x160>
   12c0c:	f89a 8000 	ldrb.w	r8, [sl]
   12c10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   12c14:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   12c18:	d02a      	beq.n	12c70 <ll_rl_remove+0xe8>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12c1a:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   12c1c:	4545      	cmp	r5, r8
   12c1e:	d027      	beq.n	12c70 <ll_rl_remove+0xe8>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   12c20:	4832      	ldr	r0, [pc, #200]	; (12cec <ll_rl_remove+0x164>)
   12c22:	9301      	str	r3, [sp, #4]
   12c24:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   12c28:	2210      	movs	r2, #16
   12c2a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   12c2e:	f009 f87c 	bl	1bd2a <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   12c32:	482f      	ldr	r0, [pc, #188]	; (12cf0 <ll_rl_remove+0x168>)
   12c34:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   12c36:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   12c3a:	fa5f fc8b 	uxtb.w	ip, fp
   12c3e:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   12c42:	f011 0f01 	tst.w	r1, #1
   12c46:	f10b 0b01 	add.w	fp, fp, #1
   12c4a:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   12c4e:	d004      	beq.n	12c5a <ll_rl_remove+0xd2>
   12c50:	0749      	lsls	r1, r1, #29
   12c52:	d502      	bpl.n	12c5a <ll_rl_remove+0xd2>
   12c54:	7dc1      	ldrb	r1, [r0, #23]
   12c56:	4541      	cmp	r1, r8
   12c58:	d039      	beq.n	12cce <ll_rl_remove+0x146>
				for (k = 0U;
   12c5a:	f1bb 0f08 	cmp.w	fp, #8
   12c5e:	f100 0028 	add.w	r0, r0, #40	; 0x28
   12c62:	d1e8      	bne.n	12c36 <ll_rl_remove+0xae>
			peer_irk_count--;
   12c64:	f89a 8000 	ldrb.w	r8, [sl]
   12c68:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   12c6c:	fa5f f888 	uxtb.w	r8, r8
   12c70:	f88a 8000 	strb.w	r8, [sl]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   12c74:	9a00      	ldr	r2, [sp, #0]
   12c76:	4d1f      	ldr	r5, [pc, #124]	; (12cf4 <ll_rl_remove+0x16c>)
   12c78:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   12c7c:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   12c80:	f00a 0a01 	and.w	sl, sl, #1
   12c84:	469b      	mov	fp, r3
   12c86:	f818 2036 	ldrb.w	r2, [r8, r6, lsl #3]
   12c8a:	07d1      	lsls	r1, r2, #31
   12c8c:	f3c2 0040 	ubfx	r0, r2, #1, #1
   12c90:	d501      	bpl.n	12c96 <ll_rl_remove+0x10e>
   12c92:	4550      	cmp	r0, sl
   12c94:	d00f      	beq.n	12cb6 <ll_rl_remove+0x12e>
	for (i = 0; i < FAL_SIZE; i++) {
   12c96:	3601      	adds	r6, #1
   12c98:	2e08      	cmp	r6, #8
   12c9a:	f105 0508 	add.w	r5, r5, #8
   12c9e:	d1f2      	bne.n	12c86 <ll_rl_remove+0xfe>
		rl[i].taken = 0U;
   12ca0:	444c      	add	r4, r9
		return 0;
   12ca2:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   12ca4:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   12ca8:	f36f 0300 	bfc	r3, #0, #1
   12cac:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
}
   12cb0:	b003      	add	sp, #12
   12cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   12cb6:	2206      	movs	r2, #6
   12cb8:	4628      	mov	r0, r5
   12cba:	4659      	mov	r1, fp
   12cbc:	f009 f824 	bl	1bd08 <memcmp>
   12cc0:	2800      	cmp	r0, #0
   12cc2:	d1e8      	bne.n	12c96 <ll_rl_remove+0x10e>
			fal[j].rl_idx = FILTER_IDX_NONE;
   12cc4:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
   12cc8:	23ff      	movs	r3, #255	; 0xff
   12cca:	7073      	strb	r3, [r6, #1]
   12ccc:	e7e8      	b.n	12ca0 <ll_rl_remove+0x118>
			peer_irk_count--;
   12cce:	f89a 8000 	ldrb.w	r8, [sl]
						rl[k].pirk_idx = pi;
   12cd2:	75d5      	strb	r5, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   12cd4:	4a08      	ldr	r2, [pc, #32]	; (12cf8 <ll_rl_remove+0x170>)
			peer_irk_count--;
   12cd6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   12cda:	f802 c005 	strb.w	ip, [r2, r5]
			peer_irk_count--;
   12cde:	fa5f f888 	uxtb.w	r8, r8
						break;
   12ce2:	e7c5      	b.n	12c70 <ll_rl_remove+0xe8>
   12ce4:	200024e9 	.word	0x200024e9
   12ce8:	20002db3 	.word	0x20002db3
   12cec:	20002468 	.word	0x20002468
   12cf0:	200024e8 	.word	0x200024e8
   12cf4:	200023be 	.word	0x200023be
   12cf8:	20002460 	.word	0x20002460

00012cfc <ll_rl_crpa_set>:
{
   12cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   12d00:	795c      	ldrb	r4, [r3, #5]
   12d02:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   12d06:	2c40      	cmp	r4, #64	; 0x40
   12d08:	d001      	beq.n	12d0e <ll_rl_crpa_set+0x12>
}
   12d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   12d0e:	461e      	mov	r6, r3
   12d10:	460f      	mov	r7, r1
   12d12:	b301      	cbz	r1, 12d56 <ll_rl_crpa_set+0x5a>
   12d14:	f8df 9068 	ldr.w	r9, [pc, #104]	; 12d80 <ll_rl_crpa_set+0x84>
   12d18:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12d1a:	f000 0a01 	and.w	sl, r0, #1
   12d1e:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   12d22:	e003      	b.n	12d2c <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12d24:	2c08      	cmp	r4, #8
   12d26:	f109 0928 	add.w	r9, r9, #40	; 0x28
   12d2a:	d0ee      	beq.n	12d0a <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12d2c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12d30:	4625      	mov	r5, r4
   12d32:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   12d36:	f3c2 1380 	ubfx	r3, r2, #6, #1
   12d3a:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12d3c:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12d40:	d5f0      	bpl.n	12d24 <ll_rl_crpa_set+0x28>
   12d42:	4553      	cmp	r3, sl
   12d44:	d1ee      	bne.n	12d24 <ll_rl_crpa_set+0x28>
   12d46:	4648      	mov	r0, r9
   12d48:	2206      	movs	r2, #6
   12d4a:	4639      	mov	r1, r7
   12d4c:	f008 ffdc 	bl	1bd08 <memcmp>
   12d50:	2800      	cmp	r0, #0
   12d52:	d1e7      	bne.n	12d24 <ll_rl_crpa_set+0x28>
   12d54:	e004      	b.n	12d60 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   12d56:	2a07      	cmp	r2, #7
   12d58:	d8d7      	bhi.n	12d0a <ll_rl_crpa_set+0xe>
   12d5a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 12d84 <ll_rl_crpa_set+0x88>
   12d5e:	4615      	mov	r5, r2
   12d60:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   12d64:	00e8      	lsls	r0, r5, #3
   12d66:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   12d6a:	07db      	lsls	r3, r3, #31
   12d6c:	d5cd      	bpl.n	12d0a <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12d6e:	3018      	adds	r0, #24
   12d70:	4631      	mov	r1, r6
   12d72:	4440      	add	r0, r8
   12d74:	2206      	movs	r2, #6
}
   12d76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   12d7a:	f008 bfd6 	b.w	1bd2a <memcpy>
   12d7e:	bf00      	nop
   12d80:	200024e9 	.word	0x200024e9
   12d84:	200024e8 	.word	0x200024e8

00012d88 <ll_rl_crpa_get>:
{
   12d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   12d8c:	4682      	mov	sl, r0
   12d8e:	4e1a      	ldr	r6, [pc, #104]	; (12df8 <ll_rl_crpa_get+0x70>)
   12d90:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   12d94:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   12d96:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12d98:	f008 0801 	and.w	r8, r8, #1
   12d9c:	1e77      	subs	r7, r6, #1
   12d9e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   12da2:	00d5      	lsls	r5, r2, #3
   12da4:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   12da8:	f3c3 1280 	ubfx	r2, r3, #6, #1
   12dac:	07db      	lsls	r3, r3, #31
   12dae:	f104 0401 	add.w	r4, r4, #1
   12db2:	d501      	bpl.n	12db8 <ll_rl_crpa_get+0x30>
   12db4:	4542      	cmp	r2, r8
   12db6:	d006      	beq.n	12dc6 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12db8:	2c08      	cmp	r4, #8
   12dba:	f106 0628 	add.w	r6, r6, #40	; 0x28
   12dbe:	d1ee      	bne.n	12d9e <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12dc0:	2002      	movs	r0, #2
}
   12dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12dc6:	4630      	mov	r0, r6
   12dc8:	2206      	movs	r2, #6
   12dca:	4651      	mov	r1, sl
   12dcc:	f008 ff9c 	bl	1bd08 <memcmp>
   12dd0:	4683      	mov	fp, r0
   12dd2:	2800      	cmp	r0, #0
   12dd4:	d1f0      	bne.n	12db8 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   12dd6:	f105 0218 	add.w	r2, r5, #24
   12dda:	4417      	add	r7, r2
   12ddc:	2106      	movs	r1, #6
   12dde:	4638      	mov	r0, r7
   12de0:	f7f7 f984 	bl	a0ec <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   12de4:	2800      	cmp	r0, #0
   12de6:	d0eb      	beq.n	12dc0 <ll_rl_crpa_get+0x38>
   12de8:	2206      	movs	r2, #6
   12dea:	4639      	mov	r1, r7
   12dec:	4648      	mov	r0, r9
   12dee:	f008 ff9c 	bl	1bd2a <memcpy>
		return 0;
   12df2:	4658      	mov	r0, fp
}
   12df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12df8:	200024e9 	.word	0x200024e9

00012dfc <ll_rl_lrpa_get>:
{
   12dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   12e00:	4681      	mov	r9, r0
   12e02:	4e16      	ldr	r6, [pc, #88]	; (12e5c <ll_rl_lrpa_get+0x60>)
   12e04:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   12e08:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   12e0a:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12e0c:	f008 0801 	and.w	r8, r8, #1
   12e10:	1e77      	subs	r7, r6, #1
   12e12:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   12e16:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   12e1a:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   12e1e:	f3c3 1280 	ubfx	r2, r3, #6, #1
   12e22:	07db      	lsls	r3, r3, #31
   12e24:	f104 0401 	add.w	r4, r4, #1
   12e28:	d501      	bpl.n	12e2e <ll_rl_lrpa_get+0x32>
   12e2a:	4542      	cmp	r2, r8
   12e2c:	d006      	beq.n	12e3c <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12e2e:	2c08      	cmp	r4, #8
   12e30:	f106 0628 	add.w	r6, r6, #40	; 0x28
   12e34:	d1ed      	bne.n	12e12 <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12e36:	2002      	movs	r0, #2
}
   12e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12e3c:	4630      	mov	r0, r6
   12e3e:	2206      	movs	r2, #6
   12e40:	4649      	mov	r1, r9
   12e42:	f008 ff61 	bl	1bd08 <memcmp>
   12e46:	4683      	mov	fp, r0
   12e48:	2800      	cmp	r0, #0
   12e4a:	d1f0      	bne.n	12e2e <ll_rl_lrpa_get+0x32>
   12e4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   12e4e:	2206      	movs	r2, #6
   12e50:	4650      	mov	r0, sl
   12e52:	f008 ff6a 	bl	1bd2a <memcpy>
		return 0;
   12e56:	4658      	mov	r0, fp
}
   12e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e5c:	200024e9 	.word	0x200024e9

00012e60 <ll_rl_enable>:
{
   12e60:	b510      	push	{r4, lr}
   12e62:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   12e64:	2000      	movs	r0, #0
   12e66:	f7fb fe3d 	bl	eae4 <ull_adv_is_enabled>
		? 0 : 1;
   12e6a:	b108      	cbz	r0, 12e70 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12e6c:	200c      	movs	r0, #12
}
   12e6e:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   12e70:	f7fc f84a 	bl	ef08 <ull_scan_is_enabled>
		? 0 : 1;
   12e74:	f030 0001 	bics.w	r0, r0, #1
   12e78:	d1f8      	bne.n	12e6c <ll_rl_enable+0xc>
	switch (enable) {
   12e7a:	b134      	cbz	r4, 12e8a <ll_rl_enable+0x2a>
   12e7c:	2c01      	cmp	r4, #1
   12e7e:	d102      	bne.n	12e86 <ll_rl_enable+0x26>
		rl_enable = 1U;
   12e80:	4b04      	ldr	r3, [pc, #16]	; (12e94 <ll_rl_enable+0x34>)
   12e82:	701c      	strb	r4, [r3, #0]
}
   12e84:	bd10      	pop	{r4, pc}
	switch (enable) {
   12e86:	2012      	movs	r0, #18
}
   12e88:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   12e8a:	4b02      	ldr	r3, [pc, #8]	; (12e94 <ll_rl_enable+0x34>)
   12e8c:	701c      	strb	r4, [r3, #0]
	return 0;
   12e8e:	4620      	mov	r0, r4
}
   12e90:	bd10      	pop	{r4, pc}
   12e92:	bf00      	nop
   12e94:	20002db4 	.word	0x20002db4

00012e98 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   12e98:	4b03      	ldr	r3, [pc, #12]	; (12ea8 <ll_rl_timeout_set+0x10>)
   12e9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12e9e:	fb02 f000 	mul.w	r0, r2, r0
   12ea2:	6018      	str	r0, [r3, #0]
}
   12ea4:	4770      	bx	lr
   12ea6:	bf00      	nop
   12ea8:	2000265c 	.word	0x2000265c

00012eac <ll_priv_mode_set>:
{
   12eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12eb0:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   12eb2:	2000      	movs	r0, #0
{
   12eb4:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   12eb6:	f7fb fe15 	bl	eae4 <ull_adv_is_enabled>
		? 0 : 1;
   12eba:	b110      	cbz	r0, 12ec2 <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12ebc:	200c      	movs	r0, #12
}
   12ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   12ec2:	f7fc f821 	bl	ef08 <ull_scan_is_enabled>
		? 0 : 1;
   12ec6:	f030 0401 	bics.w	r4, r0, #1
   12eca:	d1f7      	bne.n	12ebc <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   12ecc:	4e1a      	ldr	r6, [pc, #104]	; (12f38 <ll_priv_mode_set+0x8c>)
   12ece:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12ed2:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12ed4:	f009 0901 	and.w	r9, r9, #1
   12ed8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   12edc:	00d5      	lsls	r5, r2, #3
   12ede:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   12ee2:	f3c3 1280 	ubfx	r2, r3, #6, #1
   12ee6:	07db      	lsls	r3, r3, #31
   12ee8:	f104 0401 	add.w	r4, r4, #1
   12eec:	d501      	bpl.n	12ef2 <ll_priv_mode_set+0x46>
   12eee:	454a      	cmp	r2, r9
   12ef0:	d006      	beq.n	12f00 <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12ef2:	2c08      	cmp	r4, #8
   12ef4:	f106 0628 	add.w	r6, r6, #40	; 0x28
   12ef8:	d1ee      	bne.n	12ed8 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12efa:	2002      	movs	r0, #2
}
   12efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   12f00:	4630      	mov	r0, r6
   12f02:	2206      	movs	r2, #6
   12f04:	4651      	mov	r1, sl
   12f06:	f008 feff 	bl	1bd08 <memcmp>
   12f0a:	2800      	cmp	r0, #0
   12f0c:	d1f1      	bne.n	12ef2 <ll_priv_mode_set+0x46>
		switch (mode) {
   12f0e:	f1b8 0f00 	cmp.w	r8, #0
   12f12:	d00b      	beq.n	12f2c <ll_priv_mode_set+0x80>
   12f14:	f1b8 0f01 	cmp.w	r8, #1
   12f18:	d105      	bne.n	12f26 <ll_priv_mode_set+0x7a>
			rl[i].dev = 1U;
   12f1a:	5d7b      	ldrb	r3, [r7, r5]
   12f1c:	f043 0310 	orr.w	r3, r3, #16
   12f20:	557b      	strb	r3, [r7, r5]
}
   12f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   12f26:	2012      	movs	r0, #18
}
   12f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   12f2c:	5d7b      	ldrb	r3, [r7, r5]
   12f2e:	f368 1304 	bfi	r3, r8, #4, #1
   12f32:	557b      	strb	r3, [r7, r5]
	return 0;
   12f34:	4640      	mov	r0, r8
			break;
   12f36:	e7c2      	b.n	12ebe <ll_priv_mode_set+0x12>
   12f38:	200024e9 	.word	0x200024e9

00012f3c <ull_filter_reset>:
{
   12f3c:	b4d0      	push	{r4, r6, r7}
   12f3e:	4930      	ldr	r1, [pc, #192]	; (13000 <ull_filter_reset+0xc4>)
   12f40:	4c30      	ldr	r4, [pc, #192]	; (13004 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   12f42:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   12f44:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   12f48:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   12f4a:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   12f4c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   12f50:	d805      	bhi.n	12f5e <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   12f52:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   12f56:	f36f 1245 	bfc	r2, #5, #1
   12f5a:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   12f5e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   12f62:	f36f 0200 	bfc	r2, #0, #1
   12f66:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   12f6a:	3301      	adds	r3, #1
   12f6c:	2b08      	cmp	r3, #8
   12f6e:	d1e9      	bne.n	12f44 <ull_filter_reset+0x8>
	rl_enable = 0U;
   12f70:	4a25      	ldr	r2, [pc, #148]	; (13008 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12f72:	4c26      	ldr	r4, [pc, #152]	; (1300c <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   12f74:	2300      	movs	r3, #0
   12f76:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   12f78:	780a      	ldrb	r2, [r1, #0]
   12f7a:	f363 0200 	bfi	r2, r3, #0, #1
   12f7e:	700a      	strb	r2, [r1, #0]
   12f80:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   12f84:	f363 0200 	bfi	r2, r3, #0, #1
   12f88:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   12f8c:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   12f90:	f363 0200 	bfi	r2, r3, #0, #1
   12f94:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   12f98:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   12f9c:	f363 0200 	bfi	r2, r3, #0, #1
   12fa0:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   12fa4:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   12fa8:	f363 0200 	bfi	r2, r3, #0, #1
   12fac:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   12fb0:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   12fb4:	f363 0200 	bfi	r2, r3, #0, #1
   12fb8:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   12fbc:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   12fc0:	f363 0200 	bfi	r2, r3, #0, #1
   12fc4:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   12fc8:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   12fcc:	f363 0200 	bfi	r2, r3, #0, #1
   12fd0:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   12fd4:	4a0e      	ldr	r2, [pc, #56]	; (13010 <ull_filter_reset+0xd4>)
   12fd6:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   12fd8:	4b0e      	ldr	r3, [pc, #56]	; (13014 <ull_filter_reset+0xd8>)
   12fda:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   12fde:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12fe2:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12fe6:	4b0c      	ldr	r3, [pc, #48]	; (13018 <ull_filter_reset+0xdc>)
   12fe8:	6023      	str	r3, [r4, #0]
	if (init) {
   12fea:	b120      	cbz	r0, 12ff6 <ull_filter_reset+0xba>
}
   12fec:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   12fee:	490b      	ldr	r1, [pc, #44]	; (1301c <ull_filter_reset+0xe0>)
   12ff0:	480b      	ldr	r0, [pc, #44]	; (13020 <ull_filter_reset+0xe4>)
   12ff2:	f00c ba98 	b.w	1f526 <k_work_init_delayable>
}
   12ff6:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   12ff8:	4809      	ldr	r0, [pc, #36]	; (13020 <ull_filter_reset+0xe4>)
   12ffa:	f00c baa0 	b.w	1f53e <k_work_cancel_delayable>
   12ffe:	bf00      	nop
   13000:	200024e8 	.word	0x200024e8
   13004:	200023bc 	.word	0x200023bc
   13008:	20002db4 	.word	0x20002db4
   1300c:	2000265c 	.word	0x2000265c
   13010:	20002db3 	.word	0x20002db3
   13014:	20001468 	.word	0x20001468
   13018:	000dbba0 	.word	0x000dbba0
   1301c:	000132e1 	.word	0x000132e1
   13020:	20001470 	.word	0x20001470

00013024 <ull_filter_lll_get>:
		return &fal_filter;
   13024:	4a03      	ldr	r2, [pc, #12]	; (13034 <ull_filter_lll_get+0x10>)
   13026:	4b04      	ldr	r3, [pc, #16]	; (13038 <ull_filter_lll_get+0x14>)
}
   13028:	2800      	cmp	r0, #0
   1302a:	bf0c      	ite	eq
   1302c:	4610      	moveq	r0, r2
   1302e:	4618      	movne	r0, r3
   13030:	4770      	bx	lr
   13032:	bf00      	nop
   13034:	20002628 	.word	0x20002628
   13038:	200023fc 	.word	0x200023fc

0001303c <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1303c:	b1a8      	cbz	r0, 1306a <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1303e:	4a0c      	ldr	r2, [pc, #48]	; (13070 <ull_filter_adv_scan_state_cb+0x34>)
   13040:	6812      	ldr	r2, [r2, #0]
{
   13042:	b510      	push	{r4, lr}
   13044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13048:	f240 30e7 	movw	r0, #999	; 0x3e7
   1304c:	2100      	movs	r1, #0
   1304e:	fbe2 0103 	umlal	r0, r1, r2, r3
   13052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13056:	2300      	movs	r3, #0
   13058:	f7ed fd58 	bl	b0c <__aeabi_uldivmod>
}
   1305c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13060:	4602      	mov	r2, r0
   13062:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   13064:	4803      	ldr	r0, [pc, #12]	; (13074 <ull_filter_adv_scan_state_cb+0x38>)
   13066:	f007 ba4d 	b.w	1a504 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   1306a:	4802      	ldr	r0, [pc, #8]	; (13074 <ull_filter_adv_scan_state_cb+0x38>)
   1306c:	f00c ba67 	b.w	1f53e <k_work_cancel_delayable>
   13070:	2000265c 	.word	0x2000265c
   13074:	20001470 	.word	0x20001470

00013078 <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   13078:	4a0d      	ldr	r2, [pc, #52]	; (130b0 <ull_filter_adv_update+0x38>)
{
   1307a:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1307c:	2300      	movs	r3, #0
   1307e:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   13080:	b970      	cbnz	r0, 130a0 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   13082:	4b0c      	ldr	r3, [pc, #48]	; (130b4 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   13084:	4a0c      	ldr	r2, [pc, #48]	; (130b8 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   13086:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   13088:	2000      	movs	r0, #0
   1308a:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   1308c:	b903      	cbnz	r3, 13090 <ull_filter_adv_update+0x18>
}
   1308e:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   13090:	f7fb ff3a 	bl	ef08 <ull_scan_is_enabled>
	if (rl_enable &&
   13094:	2800      	cmp	r0, #0
   13096:	d1fa      	bne.n	1308e <ull_filter_adv_update+0x16>
}
   13098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1309c:	f7ff bb52 	b.w	12744 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   130a0:	4618      	mov	r0, r3
   130a2:	f7fb ff49 	bl	ef38 <ull_scan_filter_pol_get>
	if (adv_fp &&
   130a6:	07c3      	lsls	r3, r0, #31
   130a8:	d4eb      	bmi.n	13082 <ull_filter_adv_update+0xa>
		fal_update();
   130aa:	f7ff fb83 	bl	127b4 <fal_update>
   130ae:	e7e8      	b.n	13082 <ull_filter_adv_update+0xa>
   130b0:	200023fc 	.word	0x200023fc
   130b4:	20002db4 	.word	0x20002db4
   130b8:	20002628 	.word	0x20002628

000130bc <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   130bc:	4a0e      	ldr	r2, [pc, #56]	; (130f8 <ull_filter_scan_update+0x3c>)
{
   130be:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   130c0:	2300      	movs	r3, #0
   130c2:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   130c4:	07c2      	lsls	r2, r0, #31
   130c6:	d40e      	bmi.n	130e6 <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   130c8:	4b0c      	ldr	r3, [pc, #48]	; (130fc <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   130ca:	4a0d      	ldr	r2, [pc, #52]	; (13100 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   130cc:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   130ce:	2000      	movs	r0, #0
   130d0:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   130d2:	b903      	cbnz	r3, 130d6 <ull_filter_scan_update+0x1a>
}
   130d4:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   130d6:	f7fb fd05 	bl	eae4 <ull_adv_is_enabled>
	if (rl_enable &&
   130da:	2800      	cmp	r0, #0
   130dc:	d1fa      	bne.n	130d4 <ull_filter_scan_update+0x18>
}
   130de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   130e2:	f7ff bb2f 	b.w	12744 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   130e6:	4618      	mov	r0, r3
   130e8:	f7fb fd08 	bl	eafc <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   130ec:	2800      	cmp	r0, #0
   130ee:	d1eb      	bne.n	130c8 <ull_filter_scan_update+0xc>
		fal_update();
   130f0:	f7ff fb60 	bl	127b4 <fal_update>
   130f4:	e7e8      	b.n	130c8 <ull_filter_scan_update+0xc>
   130f6:	bf00      	nop
   130f8:	200023fc 	.word	0x200023fc
   130fc:	20002db4 	.word	0x20002db4
   13100:	20002628 	.word	0x20002628

00013104 <ull_filter_rpa_update>:
{
   13104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13108:	4683      	mov	fp, r0
   1310a:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1310c:	f00c fb87 	bl	1f81e <z_impl_k_uptime_ticks>
   13110:	014b      	lsls	r3, r1, #5
   13112:	0142      	lsls	r2, r0, #5
   13114:	1a12      	subs	r2, r2, r0
   13116:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1311a:	eb63 0301 	sbc.w	r3, r3, r1
   1311e:	009b      	lsls	r3, r3, #2
   13120:	ea4f 0982 	mov.w	r9, r2, lsl #2
   13124:	eb19 0900 	adds.w	r9, r9, r0
   13128:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1312c:	eb41 0103 	adc.w	r1, r1, r3
   13130:	00cb      	lsls	r3, r1, #3
   13132:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   13136:	0bd9      	lsrs	r1, r3, #15
   13138:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1313c:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   13140:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   13142:	f1bb 0f00 	cmp.w	fp, #0
   13146:	d117      	bne.n	13178 <ull_filter_rpa_update+0x74>
   13148:	4a5d      	ldr	r2, [pc, #372]	; (132c0 <ull_filter_rpa_update+0x1bc>)
   1314a:	e9d2 3200 	ldrd	r3, r2, [r2]
   1314e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   13152:	bf08      	it	eq
   13154:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   13158:	d00e      	beq.n	13178 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1315a:	ebb9 0303 	subs.w	r3, r9, r3
   1315e:	eb61 0202 	sbc.w	r2, r1, r2
   13162:	4958      	ldr	r1, [pc, #352]	; (132c4 <ull_filter_rpa_update+0x1c0>)
   13164:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   13166:	428b      	cmp	r3, r1
   13168:	f172 0300 	sbcs.w	r3, r2, #0
   1316c:	bfac      	ite	ge
   1316e:	f04f 0a01 	movge.w	sl, #1
   13172:	f04f 0a00 	movlt.w	sl, #0
   13176:	e001      	b.n	1317c <ull_filter_rpa_update+0x78>
   13178:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1317c:	4e52      	ldr	r6, [pc, #328]	; (132c8 <ull_filter_rpa_update+0x1c4>)
   1317e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 132cc <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   13182:	2400      	movs	r4, #0
   13184:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   13188:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1318c:	00a5      	lsls	r5, r4, #2
   1318e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   13192:	07da      	lsls	r2, r3, #31
   13194:	d515      	bpl.n	131c2 <ull_filter_rpa_update+0xbe>
   13196:	f1ba 0f00 	cmp.w	sl, #0
   1319a:	d101      	bne.n	131a0 <ull_filter_rpa_update+0x9c>
   1319c:	0798      	lsls	r0, r3, #30
   1319e:	d410      	bmi.n	131c2 <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   131a0:	192b      	adds	r3, r5, r4
   131a2:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   131a6:	0759      	lsls	r1, r3, #29
   131a8:	d432      	bmi.n	13210 <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   131aa:	192b      	adds	r3, r5, r4
   131ac:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   131b0:	071a      	lsls	r2, r3, #28
   131b2:	d41b      	bmi.n	131ec <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   131b4:	4425      	add	r5, r4
   131b6:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   131ba:	f043 0302 	orr.w	r3, r3, #2
   131be:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   131c2:	3401      	adds	r4, #1
   131c4:	2c08      	cmp	r4, #8
   131c6:	f108 0806 	add.w	r8, r8, #6
   131ca:	f106 0628 	add.w	r6, r6, #40	; 0x28
   131ce:	d1db      	bne.n	13188 <ull_filter_rpa_update+0x84>
	if (all) {
   131d0:	f1ba 0f00 	cmp.w	sl, #0
   131d4:	d004      	beq.n	131e0 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   131d6:	4b3a      	ldr	r3, [pc, #232]	; (132c0 <ull_filter_rpa_update+0x1bc>)
   131d8:	9a01      	ldr	r2, [sp, #4]
   131da:	f8c3 9000 	str.w	r9, [r3]
   131de:	605a      	str	r2, [r3, #4]
	if (timeout) {
   131e0:	f1bb 0f00 	cmp.w	fp, #0
   131e4:	d138      	bne.n	13258 <ull_filter_rpa_update+0x154>
}
   131e6:	b007      	add	sp, #28
   131e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   131ec:	a902      	add	r1, sp, #8
   131ee:	f1a6 0017 	sub.w	r0, r6, #23
   131f2:	f008 fe0e 	bl	1be12 <bt_rpa_create>
				LL_ASSERT(!err);
   131f6:	2800      	cmp	r0, #0
   131f8:	d154      	bne.n	132a4 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   131fa:	ab02      	add	r3, sp, #8
   131fc:	f8c6 3006 	str.w	r3, [r6, #6]
   13200:	4619      	mov	r1, r3
   13202:	2206      	movs	r2, #6
   13204:	4640      	mov	r0, r8
   13206:	f008 fd90 	bl	1bd2a <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1320a:	f8c6 8006 	str.w	r8, [r6, #6]
   1320e:	e7d1      	b.n	131b4 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   13210:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   13214:	4a2e      	ldr	r2, [pc, #184]	; (132d0 <ull_filter_rpa_update+0x1cc>)
   13216:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1321a:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1321c:	f10d 0307 	add.w	r3, sp, #7
   13220:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   13224:	f812 1901 	ldrb.w	r1, [r2], #-1
   13228:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1322c:	4283      	cmp	r3, r0
   1322e:	d1f9      	bne.n	13224 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   13230:	4631      	mov	r1, r6
   13232:	a802      	add	r0, sp, #8
   13234:	f008 fded 	bl	1be12 <bt_rpa_create>
				LL_ASSERT(!err);
   13238:	2800      	cmp	r0, #0
   1323a:	d0b6      	beq.n	131aa <ull_filter_rpa_update+0xa6>
   1323c:	4a25      	ldr	r2, [pc, #148]	; (132d4 <ull_filter_rpa_update+0x1d0>)
   1323e:	4926      	ldr	r1, [pc, #152]	; (132d8 <ull_filter_rpa_update+0x1d4>)
   13240:	4826      	ldr	r0, [pc, #152]	; (132dc <ull_filter_rpa_update+0x1d8>)
   13242:	f240 23eb 	movw	r3, #747	; 0x2eb
   13246:	f007 ff36 	bl	1b0b6 <printk>
   1324a:	4040      	eors	r0, r0
   1324c:	f380 8811 	msr	BASEPRI, r0
   13250:	f04f 0003 	mov.w	r0, #3
   13254:	df02      	svc	2
   13256:	e7a8      	b.n	131aa <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   13258:	2000      	movs	r0, #0
   1325a:	f7fb fc35 	bl	eac8 <ull_adv_is_enabled_get>
		if (adv) {
   1325e:	4604      	mov	r4, r0
   13260:	2800      	cmp	r0, #0
   13262:	d0c0      	beq.n	131e6 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   13264:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   13268:	075b      	lsls	r3, r3, #29
   1326a:	d5bc      	bpl.n	131e6 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1326c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   13270:	2b07      	cmp	r3, #7
   13272:	d8b8      	bhi.n	131e6 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   13274:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   13278:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1327c:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1327e:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   13280:	3024      	adds	r0, #36	; 0x24
   13282:	f001 fa6f 	bl	14764 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   13286:	7872      	ldrb	r2, [r6, #1]
   13288:	4605      	mov	r5, r0
   1328a:	3202      	adds	r2, #2
   1328c:	4631      	mov	r1, r6
   1328e:	f008 fd4c 	bl	1bd2a <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   13292:	4629      	mov	r1, r5
   13294:	4620      	mov	r0, r4
   13296:	f7fb fc41 	bl	eb1c <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   1329a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1329e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   132a2:	e7a0      	b.n	131e6 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   132a4:	4a0b      	ldr	r2, [pc, #44]	; (132d4 <ull_filter_rpa_update+0x1d0>)
   132a6:	490c      	ldr	r1, [pc, #48]	; (132d8 <ull_filter_rpa_update+0x1d4>)
   132a8:	480c      	ldr	r0, [pc, #48]	; (132dc <ull_filter_rpa_update+0x1d8>)
   132aa:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   132ae:	f007 ff02 	bl	1b0b6 <printk>
   132b2:	4040      	eors	r0, r0
   132b4:	f380 8811 	msr	BASEPRI, r0
   132b8:	f04f 0003 	mov.w	r0, #3
   132bc:	df02      	svc	2
   132be:	e79c      	b.n	131fa <ull_filter_rpa_update+0xf6>
   132c0:	20001468 	.word	0x20001468
   132c4:	2000265c 	.word	0x2000265c
   132c8:	20002506 	.word	0x20002506
   132cc:	20002430 	.word	0x20002430
   132d0:	20002468 	.word	0x20002468
   132d4:	00020a9c 	.word	0x00020a9c
   132d8:	00020590 	.word	0x00020590
   132dc:	000203b4 	.word	0x000203b4

000132e0 <rpa_timeout>:
{
   132e0:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   132e2:	2001      	movs	r0, #1
   132e4:	f7ff ff0e 	bl	13104 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   132e8:	4a0a      	ldr	r2, [pc, #40]	; (13314 <rpa_timeout+0x34>)
   132ea:	6812      	ldr	r2, [r2, #0]
   132ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   132f0:	f240 30e7 	movw	r0, #999	; 0x3e7
   132f4:	2100      	movs	r1, #0
   132f6:	fbe2 0103 	umlal	r0, r1, r2, r3
   132fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   132fe:	2300      	movs	r3, #0
   13300:	f7ed fc04 	bl	b0c <__aeabi_uldivmod>
}
   13304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13308:	4602      	mov	r2, r0
   1330a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1330c:	4802      	ldr	r0, [pc, #8]	; (13318 <rpa_timeout+0x38>)
   1330e:	f007 b8f9 	b.w	1a504 <k_work_schedule>
   13312:	bf00      	nop
   13314:	2000265c 	.word	0x2000265c
   13318:	20001470 	.word	0x20001470

0001331c <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   1331c:	2807      	cmp	r0, #7
   1331e:	d813      	bhi.n	13348 <ull_filter_adva_get+0x2c>
{
   13320:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   13322:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   13326:	4d10      	ldr	r5, [pc, #64]	; (13368 <ull_filter_adva_get+0x4c>)
   13328:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1332c:	071a      	lsls	r2, r3, #28
   1332e:	4604      	mov	r4, r0
   13330:	ea4f 0680 	mov.w	r6, r0, lsl #2
   13334:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   13338:	d505      	bpl.n	13346 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1333a:	079b      	lsls	r3, r3, #30
   1333c:	d506      	bpl.n	1334c <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   1333e:	4434      	add	r4, r6
   13340:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   13344:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   13346:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   13348:	2000      	movs	r0, #0
}
   1334a:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1334c:	4a07      	ldr	r2, [pc, #28]	; (1336c <ull_filter_adva_get+0x50>)
   1334e:	4908      	ldr	r1, [pc, #32]	; (13370 <ull_filter_adva_get+0x54>)
   13350:	4808      	ldr	r0, [pc, #32]	; (13374 <ull_filter_adva_get+0x58>)
   13352:	f44f 7347 	mov.w	r3, #796	; 0x31c
   13356:	f007 feae 	bl	1b0b6 <printk>
   1335a:	4040      	eors	r0, r0
   1335c:	f380 8811 	msr	BASEPRI, r0
   13360:	f04f 0003 	mov.w	r0, #3
   13364:	df02      	svc	2
   13366:	e7ea      	b.n	1333e <ull_filter_adva_get+0x22>
   13368:	200024e8 	.word	0x200024e8
   1336c:	00020a9c 	.word	0x00020a9c
   13370:	00020b00 	.word	0x00020b00
   13374:	000203b4 	.word	0x000203b4

00013378 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   13378:	2807      	cmp	r0, #7
   1337a:	d80b      	bhi.n	13394 <ull_filter_tgta_get+0x1c>
   1337c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   13380:	4a05      	ldr	r2, [pc, #20]	; (13398 <ull_filter_tgta_get+0x20>)
   13382:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   13386:	074b      	lsls	r3, r1, #29
   13388:	d504      	bpl.n	13394 <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   1338a:	2328      	movs	r3, #40	; 0x28
   1338c:	fb03 2000 	mla	r0, r3, r0, r2
   13390:	301e      	adds	r0, #30
   13392:	4770      	bx	lr
	return NULL;
   13394:	2000      	movs	r0, #0
   13396:	4770      	bx	lr
   13398:	200024e8 	.word	0x200024e8

0001339c <ull_filter_rl_find>:
{
   1339c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133a0:	468b      	mov	fp, r1
	if (free_idx) {
   133a2:	4617      	mov	r7, r2
   133a4:	b10a      	cbz	r2, 133aa <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   133a6:	23ff      	movs	r3, #255	; 0xff
   133a8:	7013      	strb	r3, [r2, #0]
   133aa:	4d1b      	ldr	r5, [pc, #108]	; (13418 <ull_filter_rl_find+0x7c>)
{
   133ac:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   133ae:	f000 0a01 	and.w	sl, r0, #1
   133b2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   133b6:	e006      	b.n	133c6 <ull_filter_rl_find+0x2a>
   133b8:	4552      	cmp	r2, sl
   133ba:	d01f      	beq.n	133fc <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   133bc:	3401      	adds	r4, #1
   133be:	2c08      	cmp	r4, #8
   133c0:	f105 0528 	add.w	r5, r5, #40	; 0x28
   133c4:	d015      	beq.n	133f2 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   133c6:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   133ca:	fa5f f884 	uxtb.w	r8, r4
   133ce:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   133d2:	07d9      	lsls	r1, r3, #31
   133d4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   133d8:	d4ee      	bmi.n	133b8 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   133da:	2f00      	cmp	r7, #0
   133dc:	d0ee      	beq.n	133bc <ull_filter_rl_find+0x20>
   133de:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   133e0:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   133e2:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   133e4:	bf08      	it	eq
   133e6:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   133ea:	2c08      	cmp	r4, #8
   133ec:	f105 0528 	add.w	r5, r5, #40	; 0x28
   133f0:	d1e9      	bne.n	133c6 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   133f2:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   133f6:	4640      	mov	r0, r8
   133f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   133fc:	4628      	mov	r0, r5
   133fe:	2206      	movs	r2, #6
   13400:	4659      	mov	r1, fp
   13402:	f008 fc81 	bl	1bd08 <memcmp>
   13406:	2800      	cmp	r0, #0
   13408:	d0f5      	beq.n	133f6 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   1340a:	2f00      	cmp	r7, #0
   1340c:	d0d6      	beq.n	133bc <ull_filter_rl_find+0x20>
   1340e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   13412:	07db      	lsls	r3, r3, #31
   13414:	d4d2      	bmi.n	133bc <ull_filter_rl_find+0x20>
   13416:	e7e2      	b.n	133de <ull_filter_rl_find+0x42>
   13418:	200024e9 	.word	0x200024e9

0001341c <ll_rl_add>:
{
   1341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13420:	4680      	mov	r8, r0
   13422:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   13424:	2000      	movs	r0, #0
{
   13426:	460e      	mov	r6, r1
   13428:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1342a:	f7fb fb5b 	bl	eae4 <ull_adv_is_enabled>
		? 0 : 1;
   1342e:	b118      	cbz	r0, 13438 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13430:	200c      	movs	r0, #12
}
   13432:	b005      	add	sp, #20
   13434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int rl_access_check(bool check_ar)
   13438:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1343a:	f7fb fd65 	bl	ef08 <ull_scan_is_enabled>
		? 0 : 1;
   1343e:	f030 0301 	bics.w	r3, r0, #1
   13442:	d1f5      	bne.n	13430 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   13444:	46c2      	mov	sl, r8
   13446:	f10d 020f 	add.w	r2, sp, #15
   1344a:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1344e:	4651      	mov	r1, sl
   13450:	f7ff ffa4 	bl	1339c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   13454:	2807      	cmp	r0, #7
   13456:	f240 80b1 	bls.w	135bc <ll_rl_add+0x1a0>
	} else if (j >= ARRAY_SIZE(rl)) {
   1345a:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1345e:	2f07      	cmp	r7, #7
   13460:	f200 80a8 	bhi.w	135b4 <ll_rl_add+0x198>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   13464:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   13468:	4d56      	ldr	r5, [pc, #344]	; (135c4 <ll_rl_add+0x1a8>)
   1346a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1346e:	1c58      	adds	r0, r3, #1
   13470:	2206      	movs	r2, #6
   13472:	4651      	mov	r1, sl
   13474:	4428      	add	r0, r5
   13476:	9300      	str	r3, [sp, #0]
   13478:	f008 fc57 	bl	1bd2a <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1347c:	f898 3000 	ldrb.w	r3, [r8]
   13480:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   13484:	465a      	mov	r2, fp
   13486:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   1348a:	f363 1186 	bfi	r1, r3, #6, #1
   1348e:	f805 100b 	strb.w	r1, [r5, fp]
   13492:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   13496:	2110      	movs	r1, #16
   13498:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   1349a:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1349c:	f7f6 fe26 	bl	a0ec <mem_nz>
   134a0:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   134a4:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   134a6:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   134aa:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   134ac:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   134b0:	f7f6 fe1c 	bl	a0ec <mem_nz>
   134b4:	f815 200b 	ldrb.w	r2, [r5, fp]
   134b8:	f000 0001 	and.w	r0, r0, #1
   134bc:	f360 02c3 	bfi	r2, r0, #3, #1
   134c0:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   134c4:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   134c6:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   134ca:	d44b      	bmi.n	13564 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   134cc:	2800      	cmp	r0, #0
   134ce:	d163      	bne.n	13598 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   134d0:	9800      	ldr	r0, [sp, #0]
   134d2:	4e3d      	ldr	r6, [pc, #244]	; (135c8 <ll_rl_add+0x1ac>)
   134d4:	3018      	adds	r0, #24
   134d6:	2206      	movs	r2, #6
   134d8:	2100      	movs	r1, #0
   134da:	4428      	add	r0, r5
   134dc:	f008 fc30 	bl	1bd40 <memset>
	rl[i].dev = 0U;
   134e0:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   134e4:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   134e8:	f021 0112 	bic.w	r1, r1, #18
   134ec:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   134f0:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < FAL_SIZE; i++) {
   134f4:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   134f8:	f009 0901 	and.w	r9, r9, #1
   134fc:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   13500:	07d3      	lsls	r3, r2, #31
   13502:	f3c2 0140 	ubfx	r1, r2, #1, #1
   13506:	d501      	bpl.n	1350c <ll_rl_add+0xf0>
   13508:	4549      	cmp	r1, r9
   1350a:	d018      	beq.n	1353e <ll_rl_add+0x122>
	for (i = 0; i < FAL_SIZE; i++) {
   1350c:	3401      	adds	r4, #1
   1350e:	2c08      	cmp	r4, #8
   13510:	f106 0608 	add.w	r6, r6, #8
   13514:	d1f2      	bne.n	134fc <ll_rl_add+0xe0>
		rl[i].fal = 0U;
   13516:	eb0b 0207 	add.w	r2, fp, r7
   1351a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1351e:	f36f 1145 	bfc	r1, #5, #1
   13522:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   13526:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   1352a:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1352c:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   13530:	f042 0201 	orr.w	r2, r2, #1
   13534:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   13538:	b005      	add	sp, #20
   1353a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1353e:	2206      	movs	r2, #6
   13540:	4630      	mov	r0, r6
   13542:	4651      	mov	r1, sl
   13544:	f008 fbe0 	bl	1bd08 <memcmp>
   13548:	2800      	cmp	r0, #0
   1354a:	d1df      	bne.n	1350c <ll_rl_add+0xf0>
		rl[i].fal = 1U;
   1354c:	eb0b 0207 	add.w	r2, fp, r7
		fal[j].rl_idx = i;
   13550:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   13554:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   13558:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   1355a:	f041 0120 	orr.w	r1, r1, #32
   1355e:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   13562:	e7e0      	b.n	13526 <ll_rl_add+0x10a>
		rl[i].pirk_idx = peer_irk_count;
   13564:	4b19      	ldr	r3, [pc, #100]	; (135cc <ll_rl_add+0x1b0>)
		peer_irk_rl_ids[peer_irk_count] = i;
   13566:	4a1a      	ldr	r2, [pc, #104]	; (135d0 <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   13568:	7819      	ldrb	r1, [r3, #0]
   1356a:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   1356e:	5457      	strb	r7, [r2, r1]
   13570:	4a18      	ldr	r2, [pc, #96]	; (135d4 <ll_rl_add+0x1b8>)
		rl[i].pirk_idx = peer_irk_count;
   13572:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   13576:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1357a:	3101      	adds	r1, #1
	psrc += length - 1;
   1357c:	f106 020f 	add.w	r2, r6, #15
   13580:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   13582:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   13586:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   13588:	f812 1901 	ldrb.w	r1, [r2], #-1
   1358c:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   13590:	4296      	cmp	r6, r2
   13592:	d1f9      	bne.n	13588 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   13594:	2800      	cmp	r0, #0
   13596:	d09b      	beq.n	134d0 <ll_rl_add+0xb4>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   13598:	9b00      	ldr	r3, [sp, #0]
   1359a:	1dd8      	adds	r0, r3, #7
   1359c:	4649      	mov	r1, r9
   1359e:	2210      	movs	r2, #16
   135a0:	4428      	add	r0, r5
   135a2:	f008 fbc2 	bl	1bd2a <memcpy>
		rl[i].local_rpa = NULL;
   135a6:	eb0b 0207 	add.w	r2, fp, r7
   135aa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   135ae:	2100      	movs	r1, #0
   135b0:	6251      	str	r1, [r2, #36]	; 0x24
   135b2:	e78d      	b.n	134d0 <ll_rl_add+0xb4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   135b4:	2007      	movs	r0, #7
}
   135b6:	b005      	add	sp, #20
   135b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   135bc:	2012      	movs	r0, #18
}
   135be:	b005      	add	sp, #20
   135c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c4:	200024e8 	.word	0x200024e8
   135c8:	200023be 	.word	0x200023be
   135cc:	20002db3 	.word	0x20002db3
   135d0:	20002460 	.word	0x20002460
   135d4:	20002468 	.word	0x20002468

000135d8 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   135d8:	2807      	cmp	r0, #7
   135da:	d812      	bhi.n	13602 <ull_filter_lll_lrpa_get+0x2a>
   135dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   135e0:	4a09      	ldr	r2, [pc, #36]	; (13608 <ull_filter_lll_lrpa_get+0x30>)
   135e2:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   135e6:	f013 0f08 	tst.w	r3, #8
   135ea:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   135ee:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   135f2:	d007      	beq.n	13604 <ull_filter_lll_lrpa_get+0x2c>
   135f4:	f3c3 0040 	ubfx	r0, r3, #1, #1
   135f8:	079b      	lsls	r3, r3, #30
   135fa:	d503      	bpl.n	13604 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   135fc:	440a      	add	r2, r1
   135fe:	6a50      	ldr	r0, [r2, #36]	; 0x24
   13600:	4770      	bx	lr
		return NULL;
   13602:	2000      	movs	r0, #0
}
   13604:	4770      	bx	lr
   13606:	bf00      	nop
   13608:	200024e8 	.word	0x200024e8

0001360c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1360c:	4b02      	ldr	r3, [pc, #8]	; (13618 <ull_filter_lll_irks_get+0xc>)
   1360e:	781b      	ldrb	r3, [r3, #0]
   13610:	7003      	strb	r3, [r0, #0]
}
   13612:	4802      	ldr	r0, [pc, #8]	; (1361c <ull_filter_lll_irks_get+0x10>)
   13614:	4770      	bx	lr
   13616:	bf00      	nop
   13618:	20002db3 	.word	0x20002db3
   1361c:	20002468 	.word	0x20002468

00013620 <ull_filter_lll_rl_idx>:
{
   13620:	b538      	push	{r3, r4, r5, lr}
   13622:	460c      	mov	r4, r1
	if (filter) {
   13624:	b150      	cbz	r0, 1363c <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   13626:	2907      	cmp	r1, #7
   13628:	d822      	bhi.n	13670 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   1362a:	4d2a      	ldr	r5, [pc, #168]	; (136d4 <ull_filter_lll_rl_idx+0xb4>)
   1362c:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   13630:	07da      	lsls	r2, r3, #31
   13632:	d52f      	bpl.n	13694 <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   13634:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   13638:	7860      	ldrb	r0, [r4, #1]
}
   1363a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1363c:	2907      	cmp	r1, #7
   1363e:	d83a      	bhi.n	136b6 <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   13640:	4b25      	ldr	r3, [pc, #148]	; (136d8 <ull_filter_lll_rl_idx+0xb8>)
   13642:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   13646:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1364a:	07db      	lsls	r3, r3, #31
   1364c:	d501      	bpl.n	13652 <ull_filter_lll_rl_idx+0x32>
   1364e:	4620      	mov	r0, r4
}
   13650:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   13652:	4a22      	ldr	r2, [pc, #136]	; (136dc <ull_filter_lll_rl_idx+0xbc>)
   13654:	4922      	ldr	r1, [pc, #136]	; (136e0 <ull_filter_lll_rl_idx+0xc0>)
   13656:	4823      	ldr	r0, [pc, #140]	; (136e4 <ull_filter_lll_rl_idx+0xc4>)
   13658:	f240 3363 	movw	r3, #867	; 0x363
   1365c:	f007 fd2b 	bl	1b0b6 <printk>
   13660:	4040      	eors	r0, r0
   13662:	f380 8811 	msr	BASEPRI, r0
   13666:	f04f 0003 	mov.w	r0, #3
   1366a:	df02      	svc	2
   1366c:	4620      	mov	r0, r4
}
   1366e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   13670:	4a1a      	ldr	r2, [pc, #104]	; (136dc <ull_filter_lll_rl_idx+0xbc>)
   13672:	491d      	ldr	r1, [pc, #116]	; (136e8 <ull_filter_lll_rl_idx+0xc8>)
   13674:	481b      	ldr	r0, [pc, #108]	; (136e4 <ull_filter_lll_rl_idx+0xc4>)
   13676:	f240 335d 	movw	r3, #861	; 0x35d
   1367a:	f007 fd1c 	bl	1b0b6 <printk>
   1367e:	4040      	eors	r0, r0
   13680:	f380 8811 	msr	BASEPRI, r0
   13684:	f04f 0003 	mov.w	r0, #3
   13688:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   1368a:	4d12      	ldr	r5, [pc, #72]	; (136d4 <ull_filter_lll_rl_idx+0xb4>)
   1368c:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   13690:	07da      	lsls	r2, r3, #31
   13692:	d4cf      	bmi.n	13634 <ull_filter_lll_rl_idx+0x14>
   13694:	4a11      	ldr	r2, [pc, #68]	; (136dc <ull_filter_lll_rl_idx+0xbc>)
   13696:	4915      	ldr	r1, [pc, #84]	; (136ec <ull_filter_lll_rl_idx+0xcc>)
   13698:	4812      	ldr	r0, [pc, #72]	; (136e4 <ull_filter_lll_rl_idx+0xc4>)
   1369a:	f240 335e 	movw	r3, #862	; 0x35e
   1369e:	f007 fd0a 	bl	1b0b6 <printk>
   136a2:	4040      	eors	r0, r0
   136a4:	f380 8811 	msr	BASEPRI, r0
   136a8:	f04f 0003 	mov.w	r0, #3
   136ac:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   136ae:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   136b2:	7860      	ldrb	r0, [r4, #1]
   136b4:	e7c1      	b.n	1363a <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   136b6:	4a09      	ldr	r2, [pc, #36]	; (136dc <ull_filter_lll_rl_idx+0xbc>)
   136b8:	490d      	ldr	r1, [pc, #52]	; (136f0 <ull_filter_lll_rl_idx+0xd0>)
   136ba:	480a      	ldr	r0, [pc, #40]	; (136e4 <ull_filter_lll_rl_idx+0xc4>)
   136bc:	f240 3361 	movw	r3, #865	; 0x361
   136c0:	f007 fcf9 	bl	1b0b6 <printk>
   136c4:	4040      	eors	r0, r0
   136c6:	f380 8811 	msr	BASEPRI, r0
   136ca:	f04f 0003 	mov.w	r0, #3
   136ce:	df02      	svc	2
   136d0:	e7b6      	b.n	13640 <ull_filter_lll_rl_idx+0x20>
   136d2:	bf00      	nop
   136d4:	200023bc 	.word	0x200023bc
   136d8:	200024e8 	.word	0x200024e8
   136dc:	00020a9c 	.word	0x00020a9c
   136e0:	00020c7c 	.word	0x00020c7c
   136e4:	000203b4 	.word	0x000203b4
   136e8:	00020b18 	.word	0x00020b18
   136ec:	00020bc0 	.word	0x00020bc0
   136f0:	00020bd8 	.word	0x00020bd8

000136f4 <ull_filter_lll_rl_irk_idx>:
{
   136f4:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   136f6:	4b20      	ldr	r3, [pc, #128]	; (13778 <ull_filter_lll_rl_irk_idx+0x84>)
   136f8:	781b      	ldrb	r3, [r3, #0]
   136fa:	4283      	cmp	r3, r0
{
   136fc:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   136fe:	d90c      	bls.n	1371a <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   13700:	4b1e      	ldr	r3, [pc, #120]	; (1377c <ull_filter_lll_rl_irk_idx+0x88>)
   13702:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   13704:	2c07      	cmp	r4, #7
   13706:	d819      	bhi.n	1373c <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   13708:	4b1d      	ldr	r3, [pc, #116]	; (13780 <ull_filter_lll_rl_irk_idx+0x8c>)
   1370a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1370e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   13712:	07db      	lsls	r3, r3, #31
   13714:	d520      	bpl.n	13758 <ull_filter_lll_rl_irk_idx+0x64>
}
   13716:	4620      	mov	r0, r4
   13718:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1371a:	4a1a      	ldr	r2, [pc, #104]	; (13784 <ull_filter_lll_rl_irk_idx+0x90>)
   1371c:	491a      	ldr	r1, [pc, #104]	; (13788 <ull_filter_lll_rl_irk_idx+0x94>)
   1371e:	481b      	ldr	r0, [pc, #108]	; (1378c <ull_filter_lll_rl_irk_idx+0x98>)
   13720:	f240 336d 	movw	r3, #877	; 0x36d
   13724:	f007 fcc7 	bl	1b0b6 <printk>
   13728:	4040      	eors	r0, r0
   1372a:	f380 8811 	msr	BASEPRI, r0
   1372e:	f04f 0003 	mov.w	r0, #3
   13732:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   13734:	4b11      	ldr	r3, [pc, #68]	; (1377c <ull_filter_lll_rl_irk_idx+0x88>)
   13736:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   13738:	2c07      	cmp	r4, #7
   1373a:	d9e5      	bls.n	13708 <ull_filter_lll_rl_irk_idx+0x14>
   1373c:	4a11      	ldr	r2, [pc, #68]	; (13784 <ull_filter_lll_rl_irk_idx+0x90>)
   1373e:	4914      	ldr	r1, [pc, #80]	; (13790 <ull_filter_lll_rl_irk_idx+0x9c>)
   13740:	4812      	ldr	r0, [pc, #72]	; (1378c <ull_filter_lll_rl_irk_idx+0x98>)
   13742:	f240 336f 	movw	r3, #879	; 0x36f
   13746:	f007 fcb6 	bl	1b0b6 <printk>
   1374a:	4040      	eors	r0, r0
   1374c:	f380 8811 	msr	BASEPRI, r0
   13750:	f04f 0003 	mov.w	r0, #3
   13754:	df02      	svc	2
   13756:	e7d7      	b.n	13708 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   13758:	4a0a      	ldr	r2, [pc, #40]	; (13784 <ull_filter_lll_rl_irk_idx+0x90>)
   1375a:	490e      	ldr	r1, [pc, #56]	; (13794 <ull_filter_lll_rl_irk_idx+0xa0>)
   1375c:	480b      	ldr	r0, [pc, #44]	; (1378c <ull_filter_lll_rl_irk_idx+0x98>)
   1375e:	f44f 735c 	mov.w	r3, #880	; 0x370
   13762:	f007 fca8 	bl	1b0b6 <printk>
   13766:	4040      	eors	r0, r0
   13768:	f380 8811 	msr	BASEPRI, r0
   1376c:	f04f 0003 	mov.w	r0, #3
   13770:	df02      	svc	2
}
   13772:	4620      	mov	r0, r4
   13774:	bd10      	pop	{r4, pc}
   13776:	bf00      	nop
   13778:	20002db3 	.word	0x20002db3
   1377c:	20002460 	.word	0x20002460
   13780:	200024e8 	.word	0x200024e8
   13784:	00020a9c 	.word	0x00020a9c
   13788:	00020c88 	.word	0x00020c88
   1378c:	000203b4 	.word	0x000203b4
   13790:	00020ca8 	.word	0x00020ca8
   13794:	00020c7c 	.word	0x00020c7c

00013798 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   13798:	2807      	cmp	r0, #7
   1379a:	d823      	bhi.n	137e4 <ull_filter_lll_irk_in_fal+0x4c>
{
   1379c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1379e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   137a2:	4e11      	ldr	r6, [pc, #68]	; (137e8 <ull_filter_lll_irk_in_fal+0x50>)
   137a4:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   137a8:	07db      	lsls	r3, r3, #31
   137aa:	4604      	mov	r4, r0
   137ac:	ea4f 0580 	mov.w	r5, r0, lsl #2
   137b0:	d505      	bpl.n	137be <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   137b2:	442c      	add	r4, r5
   137b4:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   137b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   137bc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   137be:	4a0b      	ldr	r2, [pc, #44]	; (137ec <ull_filter_lll_irk_in_fal+0x54>)
   137c0:	490b      	ldr	r1, [pc, #44]	; (137f0 <ull_filter_lll_irk_in_fal+0x58>)
   137c2:	480c      	ldr	r0, [pc, #48]	; (137f4 <ull_filter_lll_irk_in_fal+0x5c>)
   137c4:	f240 337b 	movw	r3, #891	; 0x37b
   137c8:	f007 fc75 	bl	1b0b6 <printk>
   137cc:	4040      	eors	r0, r0
   137ce:	f380 8811 	msr	BASEPRI, r0
   137d2:	f04f 0003 	mov.w	r0, #3
   137d6:	df02      	svc	2
	return rl[rl_idx].fal;
   137d8:	442c      	add	r4, r5
   137da:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   137de:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   137e2:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   137e4:	2000      	movs	r0, #0
}
   137e6:	4770      	bx	lr
   137e8:	200024e8 	.word	0x200024e8
   137ec:	00020a9c 	.word	0x00020a9c
   137f0:	00020aec 	.word	0x00020aec
   137f4:	000203b4 	.word	0x000203b4

000137f8 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   137f8:	4b14      	ldr	r3, [pc, #80]	; (1384c <ull_filter_lll_rl_idx_allowed+0x54>)
   137fa:	781b      	ldrb	r3, [r3, #0]
   137fc:	b19b      	cbz	r3, 13826 <ull_filter_lll_rl_idx_allowed+0x2e>
   137fe:	2907      	cmp	r1, #7
{
   13800:	b570      	push	{r4, r5, r6, lr}
   13802:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   13804:	d80d      	bhi.n	13822 <ull_filter_lll_rl_idx_allowed+0x2a>
   13806:	b960      	cbnz	r0, 13822 <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   13808:	4e11      	ldr	r6, [pc, #68]	; (13850 <ull_filter_lll_rl_idx_allowed+0x58>)
   1380a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1380e:	008d      	lsls	r5, r1, #2
   13810:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   13814:	07da      	lsls	r2, r3, #31
   13816:	d50b      	bpl.n	13830 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   13818:	442c      	add	r4, r5
   1381a:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1381e:	0743      	lsls	r3, r0, #29
   13820:	d403      	bmi.n	1382a <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   13822:	2001      	movs	r0, #1
}
   13824:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   13826:	2001      	movs	r0, #1
}
   13828:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1382a:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1382e:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   13830:	4a08      	ldr	r2, [pc, #32]	; (13854 <ull_filter_lll_rl_idx_allowed+0x5c>)
   13832:	4909      	ldr	r1, [pc, #36]	; (13858 <ull_filter_lll_rl_idx_allowed+0x60>)
   13834:	4809      	ldr	r0, [pc, #36]	; (1385c <ull_filter_lll_rl_idx_allowed+0x64>)
   13836:	f44f 7365 	mov.w	r3, #916	; 0x394
   1383a:	f007 fc3c 	bl	1b0b6 <printk>
   1383e:	4040      	eors	r0, r0
   13840:	f380 8811 	msr	BASEPRI, r0
   13844:	f04f 0003 	mov.w	r0, #3
   13848:	df02      	svc	2
   1384a:	e7e5      	b.n	13818 <ull_filter_lll_rl_idx_allowed+0x20>
   1384c:	20002db4 	.word	0x20002db4
   13850:	200024e8 	.word	0x200024e8
   13854:	00020a9c 	.word	0x00020a9c
   13858:	00020aec 	.word	0x00020aec
   1385c:	000203b4 	.word	0x000203b4

00013860 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   13860:	7813      	ldrb	r3, [r2, #0]
   13862:	2bff      	cmp	r3, #255	; 0xff
   13864:	d11b      	bne.n	1389e <ull_filter_lll_rl_addr_allowed+0x3e>
{
   13866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1386a:	4d19      	ldr	r5, [pc, #100]	; (138d0 <ull_filter_lll_rl_addr_allowed+0x70>)
   1386c:	4604      	mov	r4, r0
   1386e:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   13870:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   13872:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   13876:	b2df      	uxtb	r7, r3
   13878:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1387c:	f01c 0001 	ands.w	r0, ip, #1
   13880:	ea4f 0683 	mov.w	r6, r3, lsl #2
   13884:	d003      	beq.n	1388e <ull_filter_lll_rl_addr_allowed+0x2e>
   13886:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1388a:	45a4      	cmp	ip, r4
   1388c:	d009      	beq.n	138a2 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1388e:	3301      	adds	r3, #1
   13890:	2b08      	cmp	r3, #8
   13892:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   13896:	d1ec      	bne.n	13872 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   13898:	2001      	movs	r0, #1
}
   1389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1389e:	2001      	movs	r0, #1
}
   138a0:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   138a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   138a6:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   138a8:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   138ac:	f81c af01 	ldrb.w	sl, [ip, #1]!
   138b0:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   138b4:	45ca      	cmp	sl, r9
   138b6:	d1ea      	bne.n	1388e <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   138b8:	45dc      	cmp	ip, fp
   138ba:	d1f7      	bne.n	138ac <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   138bc:	4433      	add	r3, r6
				*rl_idx = i;
   138be:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   138c0:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   138c4:	075a      	lsls	r2, r3, #29
   138c6:	d5e8      	bpl.n	1389a <ull_filter_lll_rl_addr_allowed+0x3a>
   138c8:	f3c3 1000 	ubfx	r0, r3, #4, #1
   138cc:	e7e5      	b.n	1389a <ull_filter_lll_rl_addr_allowed+0x3a>
   138ce:	bf00      	nop
   138d0:	200024e8 	.word	0x200024e8

000138d4 <ull_filter_lll_rl_addr_resolve>:
{
   138d4:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   138d6:	4b0e      	ldr	r3, [pc, #56]	; (13910 <ull_filter_lll_rl_addr_resolve+0x3c>)
   138d8:	781c      	ldrb	r4, [r3, #0]
   138da:	b17c      	cbz	r4, 138fc <ull_filter_lll_rl_addr_resolve+0x28>
   138dc:	2a07      	cmp	r2, #7
   138de:	d80d      	bhi.n	138fc <ull_filter_lll_rl_addr_resolve+0x28>
   138e0:	4c0c      	ldr	r4, [pc, #48]	; (13914 <ull_filter_lll_rl_addr_resolve+0x40>)
   138e2:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   138e6:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   138ea:	f01c 0f08 	tst.w	ip, #8
   138ee:	d005      	beq.n	138fc <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   138f0:	b120      	cbz	r0, 138fc <ull_filter_lll_rl_addr_resolve+0x28>
   138f2:	794b      	ldrb	r3, [r1, #5]
   138f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   138f8:	2b40      	cmp	r3, #64	; 0x40
   138fa:	d002      	beq.n	13902 <ull_filter_lll_rl_addr_resolve+0x2e>
}
   138fc:	2000      	movs	r0, #0
   138fe:	bc10      	pop	{r4}
   13900:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   13902:	2028      	movs	r0, #40	; 0x28
   13904:	fb00 4002 	mla	r0, r0, r2, r4
   13908:	3007      	adds	r0, #7
}
   1390a:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1390c:	f008 ba6e 	b.w	1bdec <bt_rpa_irk_matches>
   13910:	20002db4 	.word	0x20002db4
   13914:	200024e8 	.word	0x200024e8

00013918 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   13918:	4b02      	ldr	r3, [pc, #8]	; (13924 <ull_filter_lll_rl_enabled+0xc>)
   1391a:	7818      	ldrb	r0, [r3, #0]
}
   1391c:	3800      	subs	r0, #0
   1391e:	bf18      	it	ne
   13920:	2001      	movne	r0, #1
   13922:	4770      	bx	lr
   13924:	20002db4 	.word	0x20002db4

00013928 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   13928:	4668      	mov	r0, sp
   1392a:	f020 0107 	bic.w	r1, r0, #7
   1392e:	468d      	mov	sp, r1
   13930:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   13932:	f002 fb33 	bl	15f9c <isr_radio>

	ISR_DIRECT_PM();
   13936:	f7f2 fc4d 	bl	61d4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1393a:	f7f2 fd3d 	bl	63b8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1393e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   13942:	4685      	mov	sp, r0
   13944:	4770      	bx	lr
   13946:	bf00      	nop

00013948 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   13948:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1394a:	4b09      	ldr	r3, [pc, #36]	; (13970 <rtc0_nrf5_isr+0x28>)
   1394c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   13950:	b93a      	cbnz	r2, 13962 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   13952:	2001      	movs	r0, #1
   13954:	f7f6 fcb0 	bl	a2b8 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   13958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1395c:	2002      	movs	r0, #2
   1395e:	f7f6 bcab 	b.w	a2b8 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   13962:	2000      	movs	r0, #0
   13964:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   13968:	f7f7 fdac 	bl	b4c4 <ticker_trigger>
   1396c:	e7f1      	b.n	13952 <rtc0_nrf5_isr+0xa>
   1396e:	bf00      	nop
   13970:	4000b000 	.word	0x4000b000

00013974 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   13974:	2000      	movs	r0, #0
   13976:	f7f6 bc9f 	b.w	a2b8 <mayfly_run>
   1397a:	bf00      	nop

0001397c <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1397c:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1397e:	4b0e      	ldr	r3, [pc, #56]	; (139b8 <ticker_stop_op_cb+0x3c>)
   13980:	4c0e      	ldr	r4, [pc, #56]	; (139bc <ticker_stop_op_cb+0x40>)
   13982:	781a      	ldrb	r2, [r3, #0]
   13984:	7823      	ldrb	r3, [r4, #0]
   13986:	429a      	cmp	r2, r3
   13988:	d006      	beq.n	13998 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1398a:	490d      	ldr	r1, [pc, #52]	; (139c0 <ticker_stop_op_cb+0x44>)
   1398c:	4a0d      	ldr	r2, [pc, #52]	; (139c4 <ticker_stop_op_cb+0x48>)
   1398e:	7809      	ldrb	r1, [r1, #0]
   13990:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   13992:	3301      	adds	r3, #1
   13994:	7023      	strb	r3, [r4, #0]
}
   13996:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   13998:	4a0b      	ldr	r2, [pc, #44]	; (139c8 <ticker_stop_op_cb+0x4c>)
   1399a:	490c      	ldr	r1, [pc, #48]	; (139cc <ticker_stop_op_cb+0x50>)
   1399c:	480c      	ldr	r0, [pc, #48]	; (139d0 <ticker_stop_op_cb+0x54>)
   1399e:	f240 3301 	movw	r3, #769	; 0x301
   139a2:	f007 fb88 	bl	1b0b6 <printk>
   139a6:	4040      	eors	r0, r0
   139a8:	f380 8811 	msr	BASEPRI, r0
   139ac:	f04f 0003 	mov.w	r0, #3
   139b0:	df02      	svc	2
	preempt_stop_ack++;
   139b2:	7823      	ldrb	r3, [r4, #0]
   139b4:	e7e9      	b.n	1398a <ticker_stop_op_cb+0xe>
   139b6:	bf00      	nop
   139b8:	20002dba 	.word	0x20002dba
   139bc:	20002db9 	.word	0x20002db9
   139c0:	20002db5 	.word	0x20002db5
   139c4:	20002db6 	.word	0x20002db6
   139c8:	00020cb0 	.word	0x00020cb0
   139cc:	00020cf8 	.word	0x00020cf8
   139d0:	000203b4 	.word	0x000203b4

000139d4 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   139d4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   139d6:	b9f8      	cbnz	r0, 13a18 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   139d8:	4b1e      	ldr	r3, [pc, #120]	; (13a54 <ticker_start_op_cb+0x80>)
   139da:	4d1f      	ldr	r5, [pc, #124]	; (13a58 <ticker_start_op_cb+0x84>)
   139dc:	781a      	ldrb	r2, [r3, #0]
   139de:	782b      	ldrb	r3, [r5, #0]
   139e0:	429a      	cmp	r2, r3
   139e2:	d027      	beq.n	13a34 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   139e4:	4a1d      	ldr	r2, [pc, #116]	; (13a5c <ticker_start_op_cb+0x88>)
   139e6:	4c1e      	ldr	r4, [pc, #120]	; (13a60 <ticker_start_op_cb+0x8c>)
   139e8:	7812      	ldrb	r2, [r2, #0]
   139ea:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   139ec:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   139ee:	4291      	cmp	r1, r2
	preempt_start_ack++;
   139f0:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   139f2:	b2d3      	uxtb	r3, r2
   139f4:	d00d      	beq.n	13a12 <ticker_start_op_cb+0x3e>
   139f6:	4a1b      	ldr	r2, [pc, #108]	; (13a64 <ticker_start_op_cb+0x90>)
   139f8:	491b      	ldr	r1, [pc, #108]	; (13a68 <ticker_start_op_cb+0x94>)
   139fa:	481c      	ldr	r0, [pc, #112]	; (13a6c <ticker_start_op_cb+0x98>)
   139fc:	f240 330f 	movw	r3, #783	; 0x30f
   13a00:	f007 fb59 	bl	1b0b6 <printk>
   13a04:	4040      	eors	r0, r0
   13a06:	f380 8811 	msr	BASEPRI, r0
   13a0a:	f04f 0003 	mov.w	r0, #3
   13a0e:	df02      	svc	2
	preempt_req++;
   13a10:	7823      	ldrb	r3, [r4, #0]
   13a12:	3301      	adds	r3, #1
   13a14:	7023      	strb	r3, [r4, #0]
}
   13a16:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13a18:	4a12      	ldr	r2, [pc, #72]	; (13a64 <ticker_start_op_cb+0x90>)
   13a1a:	4915      	ldr	r1, [pc, #84]	; (13a70 <ticker_start_op_cb+0x9c>)
   13a1c:	4813      	ldr	r0, [pc, #76]	; (13a6c <ticker_start_op_cb+0x98>)
   13a1e:	f240 330a 	movw	r3, #778	; 0x30a
   13a22:	f007 fb48 	bl	1b0b6 <printk>
   13a26:	4040      	eors	r0, r0
   13a28:	f380 8811 	msr	BASEPRI, r0
   13a2c:	f04f 0003 	mov.w	r0, #3
   13a30:	df02      	svc	2
   13a32:	e7d1      	b.n	139d8 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   13a34:	4a0b      	ldr	r2, [pc, #44]	; (13a64 <ticker_start_op_cb+0x90>)
   13a36:	490f      	ldr	r1, [pc, #60]	; (13a74 <ticker_start_op_cb+0xa0>)
   13a38:	480c      	ldr	r0, [pc, #48]	; (13a6c <ticker_start_op_cb+0x98>)
   13a3a:	f44f 7343 	mov.w	r3, #780	; 0x30c
   13a3e:	f007 fb3a 	bl	1b0b6 <printk>
   13a42:	4040      	eors	r0, r0
   13a44:	f380 8811 	msr	BASEPRI, r0
   13a48:	f04f 0003 	mov.w	r0, #3
   13a4c:	df02      	svc	2
	preempt_start_ack++;
   13a4e:	782b      	ldrb	r3, [r5, #0]
   13a50:	e7c8      	b.n	139e4 <ticker_start_op_cb+0x10>
   13a52:	bf00      	nop
   13a54:	20002db8 	.word	0x20002db8
   13a58:	20002db7 	.word	0x20002db7
   13a5c:	20002db5 	.word	0x20002db5
   13a60:	20002db6 	.word	0x20002db6
   13a64:	00020cb0 	.word	0x00020cb0
   13a68:	00020d48 	.word	0x00020d48
   13a6c:	000203b4 	.word	0x000203b4
   13a70:	00020860 	.word	0x00020860
   13a74:	00020d20 	.word	0x00020d20

00013a78 <isr_race>:
	radio_status_reset();
   13a78:	f002 bbae 	b.w	161d8 <radio_status_reset>

00013a7c <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   13a7c:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   13a7e:	4a18      	ldr	r2, [pc, #96]	; (13ae0 <preempt_ticker_cb+0x64>)
   13a80:	4c18      	ldr	r4, [pc, #96]	; (13ae4 <preempt_ticker_cb+0x68>)
   13a82:	7812      	ldrb	r2, [r2, #0]
   13a84:	7823      	ldrb	r3, [r4, #0]
   13a86:	429a      	cmp	r2, r3
   13a88:	d01b      	beq.n	13ac2 <preempt_ticker_cb+0x46>
	preempt_ack++;
   13a8a:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   13a8c:	4b16      	ldr	r3, [pc, #88]	; (13ae8 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   13a8e:	3101      	adds	r1, #1
   13a90:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   13a92:	2200      	movs	r2, #0
	preempt_ack++;
   13a94:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   13a96:	9903      	ldr	r1, [sp, #12]
   13a98:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   13a9a:	2001      	movs	r0, #1
   13a9c:	4611      	mov	r1, r2
   13a9e:	f7f6 fbb3 	bl	a208 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   13aa2:	b900      	cbnz	r0, 13aa6 <preempt_ticker_cb+0x2a>
}
   13aa4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   13aa6:	4a11      	ldr	r2, [pc, #68]	; (13aec <preempt_ticker_cb+0x70>)
   13aa8:	4911      	ldr	r1, [pc, #68]	; (13af0 <preempt_ticker_cb+0x74>)
   13aaa:	4812      	ldr	r0, [pc, #72]	; (13af4 <preempt_ticker_cb+0x78>)
   13aac:	f240 3376 	movw	r3, #886	; 0x376
   13ab0:	f007 fb01 	bl	1b0b6 <printk>
   13ab4:	4040      	eors	r0, r0
   13ab6:	f380 8811 	msr	BASEPRI, r0
   13aba:	f04f 0003 	mov.w	r0, #3
   13abe:	df02      	svc	2
}
   13ac0:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   13ac2:	4a0a      	ldr	r2, [pc, #40]	; (13aec <preempt_ticker_cb+0x70>)
   13ac4:	490c      	ldr	r1, [pc, #48]	; (13af8 <preempt_ticker_cb+0x7c>)
   13ac6:	480b      	ldr	r0, [pc, #44]	; (13af4 <preempt_ticker_cb+0x78>)
   13ac8:	f44f 735c 	mov.w	r3, #880	; 0x370
   13acc:	f007 faf3 	bl	1b0b6 <printk>
   13ad0:	4040      	eors	r0, r0
   13ad2:	f380 8811 	msr	BASEPRI, r0
   13ad6:	f04f 0003 	mov.w	r0, #3
   13ada:	df02      	svc	2
   13adc:	e7d5      	b.n	13a8a <preempt_ticker_cb+0xe>
   13ade:	bf00      	nop
   13ae0:	20002db6 	.word	0x20002db6
   13ae4:	20002db5 	.word	0x20002db5
   13ae8:	20000684 	.word	0x20000684
   13aec:	00020cb0 	.word	0x00020cb0
   13af0:	0002066c 	.word	0x0002066c
   13af4:	000203b4 	.word	0x000203b4
   13af8:	00020d64 	.word	0x00020d64

00013afc <preempt_ticker_stop>:
{
   13afc:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   13afe:	4917      	ldr	r1, [pc, #92]	; (13b5c <preempt_ticker_stop+0x60>)
   13b00:	4a17      	ldr	r2, [pc, #92]	; (13b60 <preempt_ticker_stop+0x64>)
   13b02:	780b      	ldrb	r3, [r1, #0]
   13b04:	7812      	ldrb	r2, [r2, #0]
   13b06:	429a      	cmp	r2, r3
{
   13b08:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   13b0a:	d122      	bne.n	13b52 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   13b0c:	4b15      	ldr	r3, [pc, #84]	; (13b64 <preempt_ticker_stop+0x68>)
   13b0e:	4a16      	ldr	r2, [pc, #88]	; (13b68 <preempt_ticker_stop+0x6c>)
   13b10:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   13b12:	7812      	ldrb	r2, [r2, #0]
   13b14:	429a      	cmp	r2, r3
   13b16:	d01c      	beq.n	13b52 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   13b18:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13b1a:	4b14      	ldr	r3, [pc, #80]	; (13b6c <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   13b1c:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13b1e:	2200      	movs	r2, #0
	preempt_stop_req++;
   13b20:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13b22:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   13b24:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13b26:	4611      	mov	r1, r2
   13b28:	4610      	mov	r0, r2
   13b2a:	f7f7 fdc3 	bl	b6b4 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13b2e:	4604      	mov	r4, r0
   13b30:	b178      	cbz	r0, 13b52 <preempt_ticker_stop+0x56>
   13b32:	2802      	cmp	r0, #2
   13b34:	d00e      	beq.n	13b54 <preempt_ticker_stop+0x58>
   13b36:	4a0e      	ldr	r2, [pc, #56]	; (13b70 <preempt_ticker_stop+0x74>)
   13b38:	490e      	ldr	r1, [pc, #56]	; (13b74 <preempt_ticker_stop+0x78>)
   13b3a:	480f      	ldr	r0, [pc, #60]	; (13b78 <preempt_ticker_stop+0x7c>)
   13b3c:	f240 3362 	movw	r3, #866	; 0x362
   13b40:	f007 fab9 	bl	1b0b6 <printk>
   13b44:	4040      	eors	r0, r0
   13b46:	f380 8811 	msr	BASEPRI, r0
   13b4a:	f04f 0003 	mov.w	r0, #3
   13b4e:	df02      	svc	2
   13b50:	e000      	b.n	13b54 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   13b52:	2400      	movs	r4, #0
}
   13b54:	4620      	mov	r0, r4
   13b56:	b002      	add	sp, #8
   13b58:	bd10      	pop	{r4, pc}
   13b5a:	bf00      	nop
   13b5c:	20002dba 	.word	0x20002dba
   13b60:	20002db9 	.word	0x20002db9
   13b64:	20002db5 	.word	0x20002db5
   13b68:	20002db6 	.word	0x20002db6
   13b6c:	0001397d 	.word	0x0001397d
   13b70:	00020cb0 	.word	0x00020cb0
   13b74:	0002078c 	.word	0x0002078c
   13b78:	000203b4 	.word	0x000203b4

00013b7c <preempt_ticker_start>:
{
   13b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   13b80:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   13b82:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   13b86:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   13b88:	4b2a      	ldr	r3, [pc, #168]	; (13c34 <preempt_ticker_start+0xb8>)
   13b8a:	4f2b      	ldr	r7, [pc, #172]	; (13c38 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   13b8c:	68d6      	ldr	r6, [r2, #12]
{
   13b8e:	460d      	mov	r5, r1
   13b90:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   13b92:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   13b94:	6890      	ldr	r0, [r2, #8]
   13b96:	6853      	ldr	r3, [r2, #4]
   13b98:	4298      	cmp	r0, r3
   13b9a:	bf2c      	ite	cs
   13b9c:	ebc6 0600 	rsbcs	r6, r6, r0
   13ba0:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   13ba4:	783b      	ldrb	r3, [r7, #0]
   13ba6:	4299      	cmp	r1, r3
{
   13ba8:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   13baa:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   13bae:	d033      	beq.n	13c18 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   13bb0:	2c00      	cmp	r4, #0
   13bb2:	d03a      	beq.n	13c2a <preempt_ticker_start+0xae>
   13bb4:	7f23      	ldrb	r3, [r4, #28]
   13bb6:	079b      	lsls	r3, r3, #30
   13bb8:	d437      	bmi.n	13c2a <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   13bba:	f8df a080 	ldr.w	sl, [pc, #128]	; 13c3c <preempt_ticker_start+0xc0>
   13bbe:	f8da 0000 	ldr.w	r0, [sl]
   13bc2:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   13bc6:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   13bca:	d022      	beq.n	13c12 <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   13bcc:	f7ff ff96 	bl	13afc <preempt_ticker_stop>
		prev->is_aborted = 1U;
   13bd0:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   13bd2:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   13bd4:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   13bd8:	f043 0302 	orr.w	r3, r3, #2
   13bdc:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   13bde:	4620      	mov	r0, r4
   13be0:	69a3      	ldr	r3, [r4, #24]
   13be2:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   13be4:	4b16      	ldr	r3, [pc, #88]	; (13c40 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   13be6:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   13be8:	9600      	str	r6, [sp, #0]
   13bea:	e9cd 3507 	strd	r3, r5, [sp, #28]
   13bee:	4b15      	ldr	r3, [pc, #84]	; (13c44 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   13bf0:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   13bf4:	2200      	movs	r2, #0
	preempt_start_req++;
   13bf6:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   13bf8:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   13bfc:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   13bfe:	e9cd 2203 	strd	r2, r2, [sp, #12]
   13c02:	e9cd 2201 	strd	r2, r2, [sp, #4]
   13c06:	4643      	mov	r3, r8
   13c08:	4611      	mov	r1, r2
   13c0a:	4610      	mov	r0, r2
	preempt_start_req++;
   13c0c:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   13c0e:	f7f7 fcc7 	bl	b5a0 <ticker_start>
}
   13c12:	b00a      	add	sp, #40	; 0x28
   13c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   13c18:	4b0b      	ldr	r3, [pc, #44]	; (13c48 <preempt_ticker_start+0xcc>)
   13c1a:	4a0c      	ldr	r2, [pc, #48]	; (13c4c <preempt_ticker_start+0xd0>)
   13c1c:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   13c1e:	7812      	ldrb	r2, [r2, #0]
   13c20:	429a      	cmp	r2, r3
   13c22:	d1c5      	bne.n	13bb0 <preempt_ticker_start+0x34>
   13c24:	f8df a014 	ldr.w	sl, [pc, #20]	; 13c3c <preempt_ticker_start+0xc0>
   13c28:	e7dc      	b.n	13be4 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   13c2a:	2000      	movs	r0, #0
}
   13c2c:	b00a      	add	sp, #40	; 0x28
   13c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c32:	bf00      	nop
   13c34:	20002db7 	.word	0x20002db7
   13c38:	20002db8 	.word	0x20002db8
   13c3c:	20002678 	.word	0x20002678
   13c40:	000139d5 	.word	0x000139d5
   13c44:	00013a7d 	.word	0x00013a7d
   13c48:	20002db5 	.word	0x20002db5
   13c4c:	20002db6 	.word	0x20002db6

00013c50 <preempt>:

static void preempt(void *param)
{
   13c50:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   13c52:	4e4b      	ldr	r6, [pc, #300]	; (13d80 <preempt+0x130>)
   13c54:	68b3      	ldr	r3, [r6, #8]
{
   13c56:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   13c58:	b1b3      	cbz	r3, 13c88 <preempt+0x38>
   13c5a:	6833      	ldr	r3, [r6, #0]
   13c5c:	b1a3      	cbz	r3, 13c88 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   13c5e:	23ff      	movs	r3, #255	; 0xff
   13c60:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   13c62:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   13c66:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   13c6a:	f7fa f9eb 	bl	e044 <ull_prepare_dequeue_iter>
	if (!next) {
   13c6e:	4601      	mov	r1, r0
   13c70:	b150      	cbz	r0, 13c88 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   13c72:	7f0b      	ldrb	r3, [r1, #28]
   13c74:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   13c78:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   13c7c:	d006      	beq.n	13c8c <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   13c7e:	f7fa f9e1 	bl	e044 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   13c82:	4601      	mov	r1, r0
   13c84:	2800      	cmp	r0, #0
   13c86:	d1f4      	bne.n	13c72 <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   13c88:	b009      	add	sp, #36	; 0x24
   13c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   13c8c:	428d      	cmp	r5, r1
   13c8e:	d126      	bne.n	13cde <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   13c90:	6873      	ldr	r3, [r6, #4]
   13c92:	6831      	ldr	r1, [r6, #0]
   13c94:	68e8      	ldr	r0, [r5, #12]
   13c96:	aa03      	add	r2, sp, #12
   13c98:	4798      	blx	r3
	if (!err) {
   13c9a:	4607      	mov	r7, r0
   13c9c:	b1b0      	cbz	r0, 13ccc <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   13c9e:	68b3      	ldr	r3, [r6, #8]
   13ca0:	6831      	ldr	r1, [r6, #0]
   13ca2:	4620      	mov	r0, r4
   13ca4:	4798      	blx	r3
	if (err == -EAGAIN) {
   13ca6:	f117 0f0b 	cmn.w	r7, #11
   13caa:	d02c      	beq.n	13d06 <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   13cac:	378c      	adds	r7, #140	; 0x8c
   13cae:	d0eb      	beq.n	13c88 <preempt+0x38>
   13cb0:	4a34      	ldr	r2, [pc, #208]	; (13d84 <preempt+0x134>)
   13cb2:	4935      	ldr	r1, [pc, #212]	; (13d88 <preempt+0x138>)
   13cb4:	4835      	ldr	r0, [pc, #212]	; (13d8c <preempt+0x13c>)
   13cb6:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   13cba:	f007 f9fc 	bl	1b0b6 <printk>
   13cbe:	4040      	eors	r0, r0
   13cc0:	f380 8811 	msr	BASEPRI, r0
   13cc4:	f04f 0003 	mov.w	r0, #3
   13cc8:	df02      	svc	2
   13cca:	e7dd      	b.n	13c88 <preempt+0x38>
		next->is_aborted = 1;
   13ccc:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   13cce:	69aa      	ldr	r2, [r5, #24]
   13cd0:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   13cd2:	f043 0302 	orr.w	r3, r3, #2
   13cd6:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   13cd8:	4628      	mov	r0, r5
   13cda:	4790      	blx	r2
		return;
   13cdc:	e7d4      	b.n	13c88 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   13cde:	4620      	mov	r0, r4
   13ce0:	f7ff ff4c 	bl	13b7c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13ce4:	f030 0302 	bics.w	r3, r0, #2
   13ce8:	d0ce      	beq.n	13c88 <preempt+0x38>
   13cea:	4a26      	ldr	r2, [pc, #152]	; (13d84 <preempt+0x134>)
   13cec:	4928      	ldr	r1, [pc, #160]	; (13d90 <preempt+0x140>)
   13cee:	4827      	ldr	r0, [pc, #156]	; (13d8c <preempt+0x13c>)
   13cf0:	f44f 7367 	mov.w	r3, #924	; 0x39c
   13cf4:	f007 f9df 	bl	1b0b6 <printk>
   13cf8:	4040      	eors	r0, r0
   13cfa:	f380 8811 	msr	BASEPRI, r0
   13cfe:	f04f 0003 	mov.w	r0, #3
   13d02:	df02      	svc	2
   13d04:	e7c0      	b.n	13c88 <preempt+0x38>
		iter_idx = UINT8_MAX;
   13d06:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   13d08:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   13d0c:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   13d10:	f7fa f998 	bl	e044 <ull_prepare_dequeue_iter>
		while (iter) {
   13d14:	b928      	cbnz	r0, 13d22 <preempt+0xd2>
   13d16:	e013      	b.n	13d40 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   13d18:	f10d 000b 	add.w	r0, sp, #11
   13d1c:	f7fa f992 	bl	e044 <ull_prepare_dequeue_iter>
		while (iter) {
   13d20:	b170      	cbz	r0, 13d40 <preempt+0xf0>
			if (!iter->is_aborted &&
   13d22:	7f03      	ldrb	r3, [r0, #28]
   13d24:	079a      	lsls	r2, r3, #30
   13d26:	d4f7      	bmi.n	13d18 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   13d28:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   13d2a:	6831      	ldr	r1, [r6, #0]
   13d2c:	4291      	cmp	r1, r2
   13d2e:	d1f3      	bne.n	13d18 <preempt+0xc8>
				iter->is_aborted = 1;
   13d30:	f043 0302 	orr.w	r3, r3, #2
   13d34:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   13d36:	6983      	ldr	r3, [r0, #24]
   13d38:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   13d3a:	f88d 400b 	strb.w	r4, [sp, #11]
   13d3e:	e7eb      	b.n	13d18 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   13d40:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   13d42:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   13d44:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   13d46:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   13d48:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   13d4c:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   13d4e:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   13d50:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   13d52:	9b03      	ldr	r3, [sp, #12]
   13d54:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   13d58:	aa04      	add	r2, sp, #16
   13d5a:	f7fa f935 	bl	dfc8 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   13d5e:	2800      	cmp	r0, #0
   13d60:	d192      	bne.n	13c88 <preempt+0x38>
   13d62:	4a08      	ldr	r2, [pc, #32]	; (13d84 <preempt+0x134>)
   13d64:	490b      	ldr	r1, [pc, #44]	; (13d94 <preempt+0x144>)
   13d66:	4809      	ldr	r0, [pc, #36]	; (13d8c <preempt+0x13c>)
   13d68:	f240 33ce 	movw	r3, #974	; 0x3ce
   13d6c:	f007 f9a3 	bl	1b0b6 <printk>
   13d70:	4040      	eors	r0, r0
   13d72:	f380 8811 	msr	BASEPRI, r0
   13d76:	f04f 0003 	mov.w	r0, #3
   13d7a:	df02      	svc	2
   13d7c:	e784      	b.n	13c88 <preempt+0x38>
   13d7e:	bf00      	nop
   13d80:	20002664 	.word	0x20002664
   13d84:	00020cb0 	.word	0x00020cb0
   13d88:	00020d88 	.word	0x00020d88
   13d8c:	000203b4 	.word	0x000203b4
   13d90:	0002078c 	.word	0x0002078c
   13d94:	00020d80 	.word	0x00020d80

00013d98 <lll_init>:
{
   13d98:	b510      	push	{r4, lr}
   13d9a:	4816      	ldr	r0, [pc, #88]	; (13df4 <lll_init+0x5c>)
   13d9c:	f005 ff84 	bl	19ca8 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   13da0:	4b15      	ldr	r3, [pc, #84]	; (13df8 <lll_init+0x60>)
   13da2:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   13da4:	b310      	cbz	r0, 13dec <lll_init+0x54>
	event.curr.abort_cb = NULL;
   13da6:	4b15      	ldr	r3, [pc, #84]	; (13dfc <lll_init+0x64>)
   13da8:	2400      	movs	r4, #0
   13daa:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   13dac:	f000 fb08 	bl	143c0 <lll_clock_init>
	if (err < 0) {
   13db0:	2800      	cmp	r0, #0
   13db2:	db1a      	blt.n	13dea <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   13db4:	4621      	mov	r1, r4
   13db6:	2001      	movs	r0, #1
   13db8:	4622      	mov	r2, r4
   13dba:	f7f2 f9f3 	bl	61a4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   13dbe:	4622      	mov	r2, r4
   13dc0:	200b      	movs	r0, #11
   13dc2:	2101      	movs	r1, #1
   13dc4:	f7f2 f9ee 	bl	61a4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   13dc8:	4622      	mov	r2, r4
   13dca:	4621      	mov	r1, r4
   13dcc:	2018      	movs	r0, #24
   13dce:	f7f2 f9e9 	bl	61a4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   13dd2:	2001      	movs	r0, #1
   13dd4:	f7f2 f9b4 	bl	6140 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   13dd8:	200b      	movs	r0, #11
   13dda:	f7f2 f9b1 	bl	6140 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   13dde:	2018      	movs	r0, #24
   13de0:	f7f2 f9ae 	bl	6140 <arch_irq_enable>
	radio_setup();
   13de4:	f002 f90a 	bl	15ffc <radio_setup>
	return 0;
   13de8:	4620      	mov	r0, r4
}
   13dea:	bd10      	pop	{r4, pc}
		return -ENODEV;
   13dec:	f06f 0012 	mvn.w	r0, #18
}
   13df0:	bd10      	pop	{r4, pc}
   13df2:	bf00      	nop
   13df4:	00020d94 	.word	0x00020d94
   13df8:	20002660 	.word	0x20002660
   13dfc:	20002664 	.word	0x20002664

00013e00 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   13e00:	4a05      	ldr	r2, [pc, #20]	; (13e18 <lll_csrand_get+0x18>)
{
   13e02:	b410      	push	{r4}
   13e04:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   13e06:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   13e08:	6884      	ldr	r4, [r0, #8]
   13e0a:	6824      	ldr	r4, [r4, #0]
   13e0c:	b28a      	uxth	r2, r1
   13e0e:	4619      	mov	r1, r3
   13e10:	4623      	mov	r3, r4
}
   13e12:	bc10      	pop	{r4}
   13e14:	4718      	bx	r3
   13e16:	bf00      	nop
   13e18:	20002660 	.word	0x20002660

00013e1c <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   13e1c:	4b08      	ldr	r3, [pc, #32]	; (13e40 <lll_csrand_isr_get+0x24>)
{
   13e1e:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   13e20:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   13e22:	68ab      	ldr	r3, [r5, #8]
   13e24:	685c      	ldr	r4, [r3, #4]
   13e26:	b13c      	cbz	r4, 13e38 <lll_csrand_isr_get+0x1c>
   13e28:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   13e2a:	46a4      	mov	ip, r4
   13e2c:	4601      	mov	r1, r0
   13e2e:	b292      	uxth	r2, r2
   13e30:	4628      	mov	r0, r5
   13e32:	2300      	movs	r3, #0
}
   13e34:	bc30      	pop	{r4, r5}
   13e36:	4760      	bx	ip
   13e38:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13e3c:	bc30      	pop	{r4, r5}
   13e3e:	4770      	bx	lr
   13e40:	20002660 	.word	0x20002660

00013e44 <lll_rand_isr_get>:
   13e44:	4b08      	ldr	r3, [pc, #32]	; (13e68 <lll_rand_isr_get+0x24>)
   13e46:	b430      	push	{r4, r5}
   13e48:	681d      	ldr	r5, [r3, #0]
   13e4a:	68ab      	ldr	r3, [r5, #8]
   13e4c:	685c      	ldr	r4, [r3, #4]
   13e4e:	b13c      	cbz	r4, 13e60 <lll_rand_isr_get+0x1c>
   13e50:	460a      	mov	r2, r1
   13e52:	46a4      	mov	ip, r4
   13e54:	4601      	mov	r1, r0
   13e56:	b292      	uxth	r2, r2
   13e58:	4628      	mov	r0, r5
   13e5a:	2300      	movs	r3, #0
   13e5c:	bc30      	pop	{r4, r5}
   13e5e:	4760      	bx	ip
   13e60:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13e64:	bc30      	pop	{r4, r5}
   13e66:	4770      	bx	lr
   13e68:	20002660 	.word	0x20002660

00013e6c <lll_reset>:
}
   13e6c:	2000      	movs	r0, #0
   13e6e:	4770      	bx	lr

00013e70 <lll_disable>:
{
   13e70:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   13e72:	4604      	mov	r4, r0
{
   13e74:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   13e76:	b378      	cbz	r0, 13ed8 <lll_disable+0x68>
   13e78:	4b23      	ldr	r3, [pc, #140]	; (13f08 <lll_disable+0x98>)
   13e7a:	681a      	ldr	r2, [r3, #0]
   13e7c:	4282      	cmp	r2, r0
   13e7e:	d025      	beq.n	13ecc <lll_disable+0x5c>
		idx = UINT8_MAX;
   13e80:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   13e82:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   13e86:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   13e8a:	f7fa f8db 	bl	e044 <ull_prepare_dequeue_iter>
		while (next) {
   13e8e:	b938      	cbnz	r0, 13ea0 <lll_disable+0x30>
   13e90:	e01a      	b.n	13ec8 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   13e92:	428c      	cmp	r4, r1
   13e94:	d00a      	beq.n	13eac <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   13e96:	f10d 0007 	add.w	r0, sp, #7
   13e9a:	f7fa f8d3 	bl	e044 <ull_prepare_dequeue_iter>
		while (next) {
   13e9e:	b198      	cbz	r0, 13ec8 <lll_disable+0x58>
			if (!next->is_aborted &&
   13ea0:	7f03      	ldrb	r3, [r0, #28]
   13ea2:	079b      	lsls	r3, r3, #30
   13ea4:	d4f7      	bmi.n	13e96 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   13ea6:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   13ea8:	2c00      	cmp	r4, #0
   13eaa:	d1f2      	bne.n	13e92 <lll_disable+0x22>
				next->is_aborted = 1;
   13eac:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   13eae:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   13eb0:	f043 0302 	orr.w	r3, r3, #2
   13eb4:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   13eb6:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   13eb8:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   13ebc:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   13ec0:	f7fa f8c0 	bl	e044 <ull_prepare_dequeue_iter>
		while (next) {
   13ec4:	2800      	cmp	r0, #0
   13ec6:	d1eb      	bne.n	13ea0 <lll_disable+0x30>
}
   13ec8:	b003      	add	sp, #12
   13eca:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   13ecc:	689b      	ldr	r3, [r3, #8]
   13ece:	b16b      	cbz	r3, 13eec <lll_disable+0x7c>
   13ed0:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   13ed2:	2000      	movs	r0, #0
   13ed4:	4798      	blx	r3
   13ed6:	e7d3      	b.n	13e80 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   13ed8:	4a0b      	ldr	r2, [pc, #44]	; (13f08 <lll_disable+0x98>)
   13eda:	6893      	ldr	r3, [r2, #8]
   13edc:	2b00      	cmp	r3, #0
   13ede:	d0cf      	beq.n	13e80 <lll_disable+0x10>
   13ee0:	6811      	ldr	r1, [r2, #0]
   13ee2:	2900      	cmp	r1, #0
   13ee4:	d0cc      	beq.n	13e80 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   13ee6:	2000      	movs	r0, #0
   13ee8:	4798      	blx	r3
   13eea:	e7c9      	b.n	13e80 <lll_disable+0x10>
			LL_ASSERT(!param);
   13eec:	4a07      	ldr	r2, [pc, #28]	; (13f0c <lll_disable+0x9c>)
   13eee:	4908      	ldr	r1, [pc, #32]	; (13f10 <lll_disable+0xa0>)
   13ef0:	4808      	ldr	r0, [pc, #32]	; (13f14 <lll_disable+0xa4>)
   13ef2:	23fd      	movs	r3, #253	; 0xfd
   13ef4:	f007 f8df 	bl	1b0b6 <printk>
   13ef8:	4040      	eors	r0, r0
   13efa:	f380 8811 	msr	BASEPRI, r0
   13efe:	f04f 0003 	mov.w	r0, #3
   13f02:	df02      	svc	2
   13f04:	e7bc      	b.n	13e80 <lll_disable+0x10>
   13f06:	bf00      	nop
   13f08:	20002664 	.word	0x20002664
   13f0c:	00020cb0 	.word	0x00020cb0
   13f10:	00020d98 	.word	0x00020d98
   13f14:	000203b4 	.word	0x000203b4

00013f18 <lll_prepare_done>:
}
   13f18:	2000      	movs	r0, #0
   13f1a:	4770      	bx	lr

00013f1c <lll_done>:
{
   13f1c:	b538      	push	{r3, r4, r5, lr}
   13f1e:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   13f20:	f7fa f882 	bl	e028 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   13f24:	b154      	cbz	r4, 13f3c <lll_done+0x20>
   13f26:	b310      	cbz	r0, 13f6e <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   13f28:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   13f2a:	2000      	movs	r0, #0
   13f2c:	f7fa f8aa 	bl	e084 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   13f30:	4620      	mov	r0, r4
   13f32:	f7fa f90b 	bl	e14c <ull_event_done>
	LL_ASSERT(evdone);
   13f36:	b158      	cbz	r0, 13f50 <lll_done+0x34>
}
   13f38:	2000      	movs	r0, #0
   13f3a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   13f3c:	4d1a      	ldr	r5, [pc, #104]	; (13fa8 <lll_done+0x8c>)
   13f3e:	68ab      	ldr	r3, [r5, #8]
   13f40:	b31b      	cbz	r3, 13f8a <lll_done+0x6e>
		param = event.curr.param;
   13f42:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   13f44:	2300      	movs	r3, #0
   13f46:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   13f48:	602b      	str	r3, [r5, #0]
		if (param) {
   13f4a:	2c00      	cmp	r4, #0
   13f4c:	d1ec      	bne.n	13f28 <lll_done+0xc>
   13f4e:	e7ec      	b.n	13f2a <lll_done+0xe>
	LL_ASSERT(evdone);
   13f50:	4a16      	ldr	r2, [pc, #88]	; (13fac <lll_done+0x90>)
   13f52:	4917      	ldr	r1, [pc, #92]	; (13fb0 <lll_done+0x94>)
   13f54:	4817      	ldr	r0, [pc, #92]	; (13fb4 <lll_done+0x98>)
   13f56:	f240 136d 	movw	r3, #365	; 0x16d
   13f5a:	f007 f8ac 	bl	1b0b6 <printk>
   13f5e:	4040      	eors	r0, r0
   13f60:	f380 8811 	msr	BASEPRI, r0
   13f64:	f04f 0003 	mov.w	r0, #3
   13f68:	df02      	svc	2
}
   13f6a:	2000      	movs	r0, #0
   13f6c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   13f6e:	4a0f      	ldr	r2, [pc, #60]	; (13fac <lll_done+0x90>)
   13f70:	4911      	ldr	r1, [pc, #68]	; (13fb8 <lll_done+0x9c>)
   13f72:	4810      	ldr	r0, [pc, #64]	; (13fb4 <lll_done+0x98>)
   13f74:	f240 1337 	movw	r3, #311	; 0x137
   13f78:	f007 f89d 	bl	1b0b6 <printk>
   13f7c:	4040      	eors	r0, r0
   13f7e:	f380 8811 	msr	BASEPRI, r0
   13f82:	f04f 0003 	mov.w	r0, #3
   13f86:	df02      	svc	2
   13f88:	e7ce      	b.n	13f28 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   13f8a:	4a08      	ldr	r2, [pc, #32]	; (13fac <lll_done+0x90>)
   13f8c:	490b      	ldr	r1, [pc, #44]	; (13fbc <lll_done+0xa0>)
   13f8e:	4809      	ldr	r0, [pc, #36]	; (13fb4 <lll_done+0x98>)
   13f90:	f240 133d 	movw	r3, #317	; 0x13d
   13f94:	f007 f88f 	bl	1b0b6 <printk>
   13f98:	4040      	eors	r0, r0
   13f9a:	f380 8811 	msr	BASEPRI, r0
   13f9e:	f04f 0003 	mov.w	r0, #3
   13fa2:	df02      	svc	2
   13fa4:	e7cd      	b.n	13f42 <lll_done+0x26>
   13fa6:	bf00      	nop
   13fa8:	20002664 	.word	0x20002664
   13fac:	00020cb0 	.word	0x00020cb0
   13fb0:	00020dc4 	.word	0x00020dc4
   13fb4:	000203b4 	.word	0x000203b4
   13fb8:	00020da0 	.word	0x00020da0
   13fbc:	00020db0 	.word	0x00020db0

00013fc0 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   13fc0:	4a05      	ldr	r2, [pc, #20]	; (13fd8 <lll_is_done+0x18>)
   13fc2:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   13fc4:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   13fc6:	1a1b      	subs	r3, r3, r0
   13fc8:	bf18      	it	ne
   13fca:	2301      	movne	r3, #1
}
   13fcc:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   13fd0:	700b      	strb	r3, [r1, #0]
}
   13fd2:	0940      	lsrs	r0, r0, #5
   13fd4:	4770      	bx	lr
   13fd6:	bf00      	nop
   13fd8:	20002664 	.word	0x20002664

00013fdc <lll_is_abort_cb>:
}
   13fdc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   13fe0:	4770      	bx	lr
   13fe2:	bf00      	nop

00013fe4 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   13fe4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   13fe8:	2a00      	cmp	r2, #0
   13fea:	db04      	blt.n	13ff6 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   13fec:	429a      	cmp	r2, r3
   13fee:	bf38      	it	cc
   13ff0:	461a      	movcc	r2, r3
   13ff2:	4610      	mov	r0, r2
}
   13ff4:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   13ff6:	68c0      	ldr	r0, [r0, #12]
   13ff8:	4298      	cmp	r0, r3
   13ffa:	bf38      	it	cc
   13ffc:	4618      	movcc	r0, r3
   13ffe:	4770      	bx	lr

00014000 <lll_preempt_calc>:
{
   14000:	b510      	push	{r4, lr}
   14002:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   14004:	f7f7 fbf6 	bl	b7f4 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   14008:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1400a:	0203      	lsls	r3, r0, #8
   1400c:	d405      	bmi.n	1401a <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1400e:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   14010:	2809      	cmp	r0, #9
   14012:	bf94      	ite	ls
   14014:	2000      	movls	r0, #0
   14016:	2001      	movhi	r0, #1
}
   14018:	bd10      	pop	{r4, pc}
		return 0;
   1401a:	2000      	movs	r0, #0
}
   1401c:	bd10      	pop	{r4, pc}
   1401e:	bf00      	nop

00014020 <lll_chan_set>:
	switch (chan) {
   14020:	2826      	cmp	r0, #38	; 0x26
{
   14022:	b510      	push	{r4, lr}
   14024:	4604      	mov	r4, r0
	switch (chan) {
   14026:	d01c      	beq.n	14062 <lll_chan_set+0x42>
   14028:	2827      	cmp	r0, #39	; 0x27
   1402a:	d012      	beq.n	14052 <lll_chan_set+0x32>
   1402c:	2825      	cmp	r0, #37	; 0x25
   1402e:	d008      	beq.n	14042 <lll_chan_set+0x22>
		if (chan < 11) {
   14030:	280a      	cmp	r0, #10
   14032:	d91e      	bls.n	14072 <lll_chan_set+0x52>
		} else if (chan < 40) {
   14034:	2827      	cmp	r0, #39	; 0x27
   14036:	d821      	bhi.n	1407c <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   14038:	3003      	adds	r0, #3
   1403a:	0040      	lsls	r0, r0, #1
   1403c:	f002 f83a 	bl	160b4 <radio_freq_chan_set>
   14040:	e002      	b.n	14048 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   14042:	2002      	movs	r0, #2
   14044:	f002 f836 	bl	160b4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   14048:	4620      	mov	r0, r4
}
   1404a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1404e:	f002 b837 	b.w	160c0 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   14052:	2050      	movs	r0, #80	; 0x50
   14054:	f002 f82e 	bl	160b4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   14058:	4620      	mov	r0, r4
}
   1405a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1405e:	f002 b82f 	b.w	160c0 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   14062:	201a      	movs	r0, #26
   14064:	f002 f826 	bl	160b4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   14068:	4620      	mov	r0, r4
}
   1406a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1406e:	f002 b827 	b.w	160c0 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   14072:	3002      	adds	r0, #2
   14074:	0040      	lsls	r0, r0, #1
   14076:	f002 f81d 	bl	160b4 <radio_freq_chan_set>
   1407a:	e7e5      	b.n	14048 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1407c:	4a06      	ldr	r2, [pc, #24]	; (14098 <lll_chan_set+0x78>)
   1407e:	4907      	ldr	r1, [pc, #28]	; (1409c <lll_chan_set+0x7c>)
   14080:	4807      	ldr	r0, [pc, #28]	; (140a0 <lll_chan_set+0x80>)
   14082:	f240 13df 	movw	r3, #479	; 0x1df
   14086:	f007 f816 	bl	1b0b6 <printk>
   1408a:	4040      	eors	r0, r0
   1408c:	f380 8811 	msr	BASEPRI, r0
   14090:	f04f 0003 	mov.w	r0, #3
   14094:	df02      	svc	2
   14096:	e7d7      	b.n	14048 <lll_chan_set+0x28>
   14098:	00020cb0 	.word	0x00020cb0
   1409c:	00020414 	.word	0x00020414
   140a0:	000203b4 	.word	0x000203b4

000140a4 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   140a4:	f002 b86a 	b.w	1617c <radio_tx_ready_delay_get>

000140a8 <lll_isr_tx_status_reset>:
{
   140a8:	b508      	push	{r3, lr}
	radio_status_reset();
   140aa:	f002 f895 	bl	161d8 <radio_status_reset>
}
   140ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   140b2:	f002 b9f9 	b.w	164a8 <radio_tmr_status_reset>
   140b6:	bf00      	nop

000140b8 <lll_isr_rx_status_reset>:
{
   140b8:	b508      	push	{r3, lr}
	radio_status_reset();
   140ba:	f002 f88d 	bl	161d8 <radio_status_reset>
	radio_tmr_status_reset();
   140be:	f002 f9f3 	bl	164a8 <radio_tmr_status_reset>
}
   140c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   140c6:	f002 b99b 	b.w	16400 <radio_rssi_status_reset>
   140ca:	bf00      	nop

000140cc <lll_isr_status_reset>:
{
   140cc:	b508      	push	{r3, lr}
	radio_status_reset();
   140ce:	f002 f883 	bl	161d8 <radio_status_reset>
	radio_tmr_status_reset();
   140d2:	f002 f9e9 	bl	164a8 <radio_tmr_status_reset>
	radio_filter_status_reset();
   140d6:	f002 f9cf 	bl	16478 <radio_filter_status_reset>
	radio_ar_status_reset();
   140da:	f002 fbbf 	bl	1685c <radio_ar_status_reset>
}
   140de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   140e2:	f002 b98d 	b.w	16400 <radio_rssi_status_reset>
   140e6:	bf00      	nop

000140e8 <lll_isr_cleanup>:
{
   140e8:	b508      	push	{r3, lr}
   140ea:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   140ec:	4815      	ldr	r0, [pc, #84]	; (14144 <lll_isr_cleanup+0x5c>)
   140ee:	f001 ff65 	bl	15fbc <radio_isr_set>
	if (!radio_is_idle()) {
   140f2:	f002 f891 	bl	16218 <radio_is_idle>
   140f6:	b150      	cbz	r0, 1410e <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   140f8:	f002 faac 	bl	16654 <radio_tmr_stop>
	err = lll_hfclock_off();
   140fc:	f000 f9a4 	bl	14448 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   14100:	2800      	cmp	r0, #0
   14102:	db0c      	blt.n	1411e <lll_isr_cleanup+0x36>
}
   14104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   14108:	2000      	movs	r0, #0
   1410a:	f7ff bf07 	b.w	13f1c <lll_done>
		radio_disable();
   1410e:	f002 f84f 	bl	161b0 <radio_disable>
	radio_tmr_stop();
   14112:	f002 fa9f 	bl	16654 <radio_tmr_stop>
	err = lll_hfclock_off();
   14116:	f000 f997 	bl	14448 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1411a:	2800      	cmp	r0, #0
   1411c:	daf2      	bge.n	14104 <lll_isr_cleanup+0x1c>
   1411e:	4a0a      	ldr	r2, [pc, #40]	; (14148 <lll_isr_cleanup+0x60>)
   14120:	490a      	ldr	r1, [pc, #40]	; (1414c <lll_isr_cleanup+0x64>)
   14122:	480b      	ldr	r0, [pc, #44]	; (14150 <lll_isr_cleanup+0x68>)
   14124:	f240 2342 	movw	r3, #578	; 0x242
   14128:	f006 ffc5 	bl	1b0b6 <printk>
   1412c:	4040      	eors	r0, r0
   1412e:	f380 8811 	msr	BASEPRI, r0
   14132:	f04f 0003 	mov.w	r0, #3
   14136:	df02      	svc	2
	lll_done(NULL);
   14138:	2000      	movs	r0, #0
}
   1413a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1413e:	f7ff beed 	b.w	13f1c <lll_done>
   14142:	bf00      	nop
   14144:	00013a79 	.word	0x00013a79
   14148:	00020cb0 	.word	0x00020cb0
   1414c:	00020dcc 	.word	0x00020dcc
   14150:	000203b4 	.word	0x000203b4

00014154 <lll_isr_abort>:
{
   14154:	b510      	push	{r4, lr}
   14156:	4604      	mov	r4, r0
	radio_status_reset();
   14158:	f002 f83e 	bl	161d8 <radio_status_reset>
	radio_tmr_status_reset();
   1415c:	f002 f9a4 	bl	164a8 <radio_tmr_status_reset>
	radio_filter_status_reset();
   14160:	f002 f98a 	bl	16478 <radio_filter_status_reset>
	radio_ar_status_reset();
   14164:	f002 fb7a 	bl	1685c <radio_ar_status_reset>
	radio_rssi_status_reset();
   14168:	f002 f94a 	bl	16400 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1416c:	4620      	mov	r0, r4
}
   1416e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   14172:	f7ff bfb9 	b.w	140e8 <lll_isr_cleanup>
   14176:	bf00      	nop

00014178 <lll_isr_early_abort>:
{
   14178:	b508      	push	{r3, lr}
   1417a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1417c:	4813      	ldr	r0, [pc, #76]	; (141cc <lll_isr_early_abort+0x54>)
   1417e:	f001 ff1d 	bl	15fbc <radio_isr_set>
	if (!radio_is_idle()) {
   14182:	f002 f849 	bl	16218 <radio_is_idle>
   14186:	b140      	cbz	r0, 1419a <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   14188:	f000 f95e 	bl	14448 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1418c:	2800      	cmp	r0, #0
   1418e:	db0a      	blt.n	141a6 <lll_isr_early_abort+0x2e>
}
   14190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   14194:	2000      	movs	r0, #0
   14196:	f7ff bec1 	b.w	13f1c <lll_done>
		radio_disable();
   1419a:	f002 f809 	bl	161b0 <radio_disable>
	err = lll_hfclock_off();
   1419e:	f000 f953 	bl	14448 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   141a2:	2800      	cmp	r0, #0
   141a4:	daf4      	bge.n	14190 <lll_isr_early_abort+0x18>
   141a6:	4a0a      	ldr	r2, [pc, #40]	; (141d0 <lll_isr_early_abort+0x58>)
   141a8:	490a      	ldr	r1, [pc, #40]	; (141d4 <lll_isr_early_abort+0x5c>)
   141aa:	480b      	ldr	r0, [pc, #44]	; (141d8 <lll_isr_early_abort+0x60>)
   141ac:	f240 2351 	movw	r3, #593	; 0x251
   141b0:	f006 ff81 	bl	1b0b6 <printk>
   141b4:	4040      	eors	r0, r0
   141b6:	f380 8811 	msr	BASEPRI, r0
   141ba:	f04f 0003 	mov.w	r0, #3
   141be:	df02      	svc	2
	lll_done(NULL);
   141c0:	2000      	movs	r0, #0
}
   141c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   141c6:	f7ff bea9 	b.w	13f1c <lll_done>
   141ca:	bf00      	nop
   141cc:	00013a79 	.word	0x00013a79
   141d0:	00020cb0 	.word	0x00020cb0
   141d4:	00020dcc 	.word	0x00020dcc
   141d8:	000203b4 	.word	0x000203b4

000141dc <lll_prepare_resolve>:
{
   141dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   141e0:	b084      	sub	sp, #16
   141e2:	4606      	mov	r6, r0
   141e4:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   141e6:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   141ea:	23ff      	movs	r3, #255	; 0xff
{
   141ec:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   141f0:	f88d 300f 	strb.w	r3, [sp, #15]
{
   141f4:	460f      	mov	r7, r1
   141f6:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   141f8:	f7f9 ff24 	bl	e044 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   141fc:	4604      	mov	r4, r0
   141fe:	b920      	cbnz	r0, 1420a <lll_prepare_resolve+0x2e>
   14200:	e032      	b.n	14268 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   14202:	f7f9 ff1f 	bl	e044 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   14206:	4604      	mov	r4, r0
   14208:	b370      	cbz	r0, 14268 <lll_prepare_resolve+0x8c>
   1420a:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1420e:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   14212:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   14216:	d1f4      	bne.n	14202 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   14218:	f8df a130 	ldr.w	sl, [pc, #304]	; 1434c <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1421c:	f8da 3008 	ldr.w	r3, [sl, #8]
   14220:	bb4b      	cbnz	r3, 14276 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   14222:	f1b9 0f00 	cmp.w	r9, #0
   14226:	d048      	beq.n	142ba <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   14228:	f8cd 9000 	str.w	r9, [sp]
   1422c:	4643      	mov	r3, r8
   1422e:	462a      	mov	r2, r5
   14230:	4639      	mov	r1, r7
   14232:	4630      	mov	r0, r6
   14234:	f7f9 fec8 	bl	dfc8 <ull_prepare_enqueue>
		LL_ASSERT(next);
   14238:	b980      	cbnz	r0, 1425c <lll_prepare_resolve+0x80>
   1423a:	4a45      	ldr	r2, [pc, #276]	; (14350 <lll_prepare_resolve+0x174>)
   1423c:	4945      	ldr	r1, [pc, #276]	; (14354 <lll_prepare_resolve+0x178>)
   1423e:	4846      	ldr	r0, [pc, #280]	; (14358 <lll_prepare_resolve+0x17c>)
   14240:	f240 238d 	movw	r3, #653	; 0x28d
   14244:	f006 ff37 	bl	1b0b6 <printk>
   14248:	4040      	eors	r0, r0
   1424a:	f380 8811 	msr	BASEPRI, r0
   1424e:	f04f 0003 	mov.w	r0, #3
   14252:	df02      	svc	2
   14254:	2000      	movs	r0, #0
		if (is_resume) {
   14256:	f1b9 0f00 	cmp.w	r9, #0
   1425a:	d019      	beq.n	14290 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   1425c:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   14260:	4620      	mov	r0, r4
   14262:	b004      	add	sp, #16
   14264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   14268:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1434c <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1426c:	f8da 3008 	ldr.w	r3, [sl, #8]
   14270:	2b00      	cmp	r3, #0
   14272:	d031      	beq.n	142d8 <lll_prepare_resolve+0xfc>
   14274:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   14276:	f8cd 9000 	str.w	r9, [sp]
   1427a:	4643      	mov	r3, r8
   1427c:	462a      	mov	r2, r5
   1427e:	4639      	mov	r1, r7
   14280:	4630      	mov	r0, r6
   14282:	f7f9 fea1 	bl	dfc8 <ull_prepare_enqueue>
		LL_ASSERT(next);
   14286:	2800      	cmp	r0, #0
   14288:	d0d7      	beq.n	1423a <lll_prepare_resolve+0x5e>
		if (is_resume) {
   1428a:	f1b9 0f00 	cmp.w	r9, #0
   1428e:	d1e5      	bne.n	1425c <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   14290:	4601      	mov	r1, r0
   14292:	4620      	mov	r0, r4
   14294:	f7ff fc72 	bl	13b7c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14298:	f030 0302 	bics.w	r3, r0, #2
   1429c:	d0de      	beq.n	1425c <lll_prepare_resolve+0x80>
   1429e:	4a2c      	ldr	r2, [pc, #176]	; (14350 <lll_prepare_resolve+0x174>)
   142a0:	492e      	ldr	r1, [pc, #184]	; (1435c <lll_prepare_resolve+0x180>)
   142a2:	482d      	ldr	r0, [pc, #180]	; (14358 <lll_prepare_resolve+0x17c>)
   142a4:	f44f 7326 	mov.w	r3, #664	; 0x298
   142a8:	f006 ff05 	bl	1b0b6 <printk>
   142ac:	4040      	eors	r0, r0
   142ae:	f380 8811 	msr	BASEPRI, r0
   142b2:	f04f 0003 	mov.w	r0, #3
   142b6:	df02      	svc	2
   142b8:	e7d0      	b.n	1425c <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   142ba:	42ac      	cmp	r4, r5
   142bc:	d00c      	beq.n	142d8 <lll_prepare_resolve+0xfc>
   142be:	4a24      	ldr	r2, [pc, #144]	; (14350 <lll_prepare_resolve+0x174>)
   142c0:	4927      	ldr	r1, [pc, #156]	; (14360 <lll_prepare_resolve+0x184>)
   142c2:	4825      	ldr	r0, [pc, #148]	; (14358 <lll_prepare_resolve+0x17c>)
   142c4:	f240 23be 	movw	r3, #702	; 0x2be
   142c8:	f006 fef5 	bl	1b0b6 <printk>
   142cc:	4040      	eors	r0, r0
   142ce:	f380 8811 	msr	BASEPRI, r0
   142d2:	f04f 0003 	mov.w	r0, #3
   142d6:	df02      	svc	2
	event.curr.param = prepare_param->param;
   142d8:	68eb      	ldr	r3, [r5, #12]
   142da:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   142de:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   142e2:	4628      	mov	r0, r5
   142e4:	47c0      	blx	r8
   142e6:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   142e8:	f7ff fc08 	bl	13afc <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   142ec:	f030 0302 	bics.w	r3, r0, #2
   142f0:	d11e      	bne.n	14330 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   142f2:	f10d 000f 	add.w	r0, sp, #15
   142f6:	f7f9 fea5 	bl	e044 <ull_prepare_dequeue_iter>
		if (!p) {
   142fa:	2800      	cmp	r0, #0
   142fc:	d0b0      	beq.n	14260 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   142fe:	7f03      	ldrb	r3, [r0, #28]
   14300:	f013 0303 	ands.w	r3, r3, #3
   14304:	d1f5      	bne.n	142f2 <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   14306:	4601      	mov	r1, r0
   14308:	4618      	mov	r0, r3
   1430a:	f7ff fc37 	bl	13b7c <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1430e:	f030 0302 	bics.w	r3, r0, #2
   14312:	d0a5      	beq.n	14260 <lll_prepare_resolve+0x84>
   14314:	4a0e      	ldr	r2, [pc, #56]	; (14350 <lll_prepare_resolve+0x174>)
   14316:	4911      	ldr	r1, [pc, #68]	; (1435c <lll_prepare_resolve+0x180>)
   14318:	480f      	ldr	r0, [pc, #60]	; (14358 <lll_prepare_resolve+0x17c>)
   1431a:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   1431e:	f006 feca 	bl	1b0b6 <printk>
   14322:	4040      	eors	r0, r0
   14324:	f380 8811 	msr	BASEPRI, r0
   14328:	f04f 0003 	mov.w	r0, #3
   1432c:	df02      	svc	2
   1432e:	e797      	b.n	14260 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14330:	4a07      	ldr	r2, [pc, #28]	; (14350 <lll_prepare_resolve+0x174>)
   14332:	490a      	ldr	r1, [pc, #40]	; (1435c <lll_prepare_resolve+0x180>)
   14334:	4808      	ldr	r0, [pc, #32]	; (14358 <lll_prepare_resolve+0x17c>)
   14336:	f240 23cb 	movw	r3, #715	; 0x2cb
   1433a:	f006 febc 	bl	1b0b6 <printk>
   1433e:	4040      	eors	r0, r0
   14340:	f380 8811 	msr	BASEPRI, r0
   14344:	f04f 0003 	mov.w	r0, #3
   14348:	df02      	svc	2
   1434a:	e7d2      	b.n	142f2 <lll_prepare_resolve+0x116>
   1434c:	20002664 	.word	0x20002664
   14350:	00020cb0 	.word	0x00020cb0
   14354:	00020dd8 	.word	0x00020dd8
   14358:	000203b4 	.word	0x000203b4
   1435c:	0002078c 	.word	0x0002078c
   14360:	00020de0 	.word	0x00020de0

00014364 <clock_ready>:
	z_impl_k_sem_give(sem);
   14364:	f101 0010 	add.w	r0, r1, #16
   14368:	f005 bef8 	b.w	1a15c <z_impl_k_sem_give>

0001436c <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1436c:	b570      	push	{r4, r5, r6, lr}
   1436e:	4605      	mov	r5, r0
   14370:	b08a      	sub	sp, #40	; 0x28
   14372:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   14374:	2201      	movs	r2, #1
   14376:	2100      	movs	r1, #0
   14378:	a804      	add	r0, sp, #16
   1437a:	f00b f837 	bl	1f3ec <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1437e:	4b0f      	ldr	r3, [pc, #60]	; (143bc <blocking_on+0x50>)
   14380:	9301      	str	r3, [sp, #4]
   14382:	2600      	movs	r6, #0
   14384:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   14386:	4669      	mov	r1, sp
   14388:	4628      	mov	r0, r5
   1438a:	9603      	str	r6, [sp, #12]
   1438c:	9302      	str	r3, [sp, #8]
   1438e:	f006 ff0e 	bl	1b1ae <onoff_request>
	if (err < 0) {
   14392:	2800      	cmp	r0, #0
   14394:	db10      	blt.n	143b8 <blocking_on+0x4c>
   14396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1439a:	4631      	mov	r1, r6
   1439c:	f240 30e7 	movw	r0, #999	; 0x3e7
   143a0:	fbe4 0103 	umlal	r0, r1, r4, r3
   143a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   143a8:	2300      	movs	r3, #0
   143aa:	f7ec fbaf 	bl	b0c <__aeabi_uldivmod>
   143ae:	4602      	mov	r2, r0
   143b0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   143b2:	a804      	add	r0, sp, #16
   143b4:	f005 fef8 	bl	1a1a8 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   143b8:	b00a      	add	sp, #40	; 0x28
   143ba:	bd70      	pop	{r4, r5, r6, pc}
   143bc:	00014365 	.word	0x00014365

000143c0 <lll_clock_init>:

int lll_clock_init(void)
{
   143c0:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   143c2:	2001      	movs	r0, #1
   143c4:	f002 fe8c 	bl	170e0 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   143c8:	4904      	ldr	r1, [pc, #16]	; (143dc <lll_clock_init+0x1c>)
   143ca:	2300      	movs	r3, #0
   143cc:	2401      	movs	r4, #1
   143ce:	608c      	str	r4, [r1, #8]
   143d0:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   143d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   143d6:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   143d8:	f006 bee9 	b.w	1b1ae <onoff_request>
   143dc:	20002680 	.word	0x20002680

000143e0 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   143e0:	4b0c      	ldr	r3, [pc, #48]	; (14414 <lll_clock_wait+0x34>)
   143e2:	781a      	ldrb	r2, [r3, #0]
   143e4:	b10a      	cbz	r2, 143ea <lll_clock_wait+0xa>
		return 0;
   143e6:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   143e8:	4770      	bx	lr
{
   143ea:	b510      	push	{r4, lr}
	done = true;
   143ec:	2001      	movs	r0, #1
   143ee:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   143f0:	f002 fe76 	bl	170e0 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   143f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   143f8:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   143fa:	f7ff ffb7 	bl	1436c <blocking_on>
	if (err) {
   143fe:	b938      	cbnz	r0, 14410 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   14400:	4620      	mov	r0, r4
   14402:	f006 ff1d 	bl	1b240 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   14406:	2802      	cmp	r0, #2
		return 0;
   14408:	bf0c      	ite	eq
   1440a:	2000      	moveq	r0, #0
		return -EIO;
   1440c:	f06f 0004 	mvnne.w	r0, #4
}
   14410:	bd10      	pop	{r4, pc}
   14412:	bf00      	nop
   14414:	20002dbb 	.word	0x20002dbb

00014418 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   14418:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1441a:	4b0a      	ldr	r3, [pc, #40]	; (14444 <lll_hfclock_on+0x2c>)
   1441c:	f3bf 8f5b 	dmb	ish
   14420:	e853 2f00 	ldrex	r2, [r3]
   14424:	1c51      	adds	r1, r2, #1
   14426:	e843 1000 	strex	r0, r1, [r3]
   1442a:	2800      	cmp	r0, #0
   1442c:	d1f8      	bne.n	14420 <lll_hfclock_on+0x8>
   1442e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   14432:	2a00      	cmp	r2, #0
   14434:	dd01      	ble.n	1443a <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   14436:	2000      	movs	r0, #0
   14438:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1443a:	f002 fe59 	bl	170f0 <z_nrf_clock_bt_ctlr_hf_request>
}
   1443e:	2000      	movs	r0, #0
   14440:	bd08      	pop	{r3, pc}
   14442:	bf00      	nop
   14444:	2000267c 	.word	0x2000267c

00014448 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   14448:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1444a:	4b0d      	ldr	r3, [pc, #52]	; (14480 <lll_hfclock_off+0x38>)
   1444c:	681a      	ldr	r2, [r3, #0]
   1444e:	2a00      	cmp	r2, #0
   14450:	dd12      	ble.n	14478 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14452:	f3bf 8f5b 	dmb	ish
   14456:	e853 2f00 	ldrex	r2, [r3]
   1445a:	1e51      	subs	r1, r2, #1
   1445c:	e843 1000 	strex	r0, r1, [r3]
   14460:	2800      	cmp	r0, #0
   14462:	d1f8      	bne.n	14456 <lll_hfclock_off+0xe>
   14464:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   14468:	2a01      	cmp	r2, #1
   1446a:	dd01      	ble.n	14470 <lll_hfclock_off+0x28>
		return 0;
   1446c:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1446e:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   14470:	f002 fe54 	bl	1711c <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   14474:	2000      	movs	r0, #0
}
   14476:	bd08      	pop	{r3, pc}
		return -EALREADY;
   14478:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1447c:	bd08      	pop	{r3, pc}
   1447e:	bf00      	nop
   14480:	2000267c 	.word	0x2000267c

00014484 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   14484:	2005      	movs	r0, #5
   14486:	4770      	bx	lr

00014488 <is_abort_cb>:
		return 0;
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return -ECANCELED;
}
   14488:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1448c:	4770      	bx	lr
   1448e:	bf00      	nop

00014490 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   14490:	b510      	push	{r4, lr}
   14492:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   14494:	f7ff fe1a 	bl	140cc <lll_isr_status_reset>

	radio_filter_disable();
   14498:	f001 ffe4 	bl	16464 <radio_filter_disable>

	lll_isr_cleanup(param);
   1449c:	4620      	mov	r0, r4
}
   1449e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   144a2:	f7ff be21 	b.w	140e8 <lll_isr_cleanup>
   144a6:	bf00      	nop

000144a8 <isr_tx>:
{
   144a8:	b530      	push	{r4, r5, lr}
   144aa:	b083      	sub	sp, #12
   144ac:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   144ae:	f7ff fdfb 	bl	140a8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   144b2:	2096      	movs	r0, #150	; 0x96
   144b4:	f002 f808 	bl	164c8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   144b8:	2300      	movs	r3, #0
   144ba:	4618      	mov	r0, r3
   144bc:	461a      	mov	r2, r3
   144be:	4619      	mov	r1, r3
   144c0:	f001 ff1e 	bl	16300 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   144c4:	2001      	movs	r0, #1
   144c6:	f7f9 fd33 	bl	df30 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   144ca:	4604      	mov	r4, r0
   144cc:	2800      	cmp	r0, #0
   144ce:	d043      	beq.n	14558 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   144d0:	f104 001c 	add.w	r0, r4, #28
   144d4:	f001 fe46 	bl	16164 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   144d8:	f001 fe8a 	bl	161f0 <radio_is_ready>
   144dc:	b9e0      	cbnz	r0, 14518 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   144de:	4825      	ldr	r0, [pc, #148]	; (14574 <isr_tx+0xcc>)
   144e0:	4629      	mov	r1, r5
   144e2:	f001 fd6b 	bl	15fbc <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   144e6:	f7ff fa17 	bl	13918 <ull_filter_lll_rl_enabled>
   144ea:	bb50      	cbnz	r0, 14542 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   144ec:	f002 f8ec 	bl	166c8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   144f0:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   144f2:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   144f4:	4608      	mov	r0, r1
   144f6:	f001 fe49 	bl	1618c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   144fa:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   144fc:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   144fe:	4608      	mov	r0, r1
   14500:	f001 fe42 	bl	16188 <radio_tx_chain_delay_get>
   14504:	442c      	add	r4, r5
   14506:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   14508:	1a20      	subs	r0, r4, r0
   1450a:	f002 f8af 	bl	1666c <radio_tmr_hcto_configure>
}
   1450e:	b003      	add	sp, #12
   14510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   14514:	f002 b8ca 	b.w	166ac <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   14518:	4a17      	ldr	r2, [pc, #92]	; (14578 <isr_tx+0xd0>)
   1451a:	4918      	ldr	r1, [pc, #96]	; (1457c <isr_tx+0xd4>)
   1451c:	4818      	ldr	r0, [pc, #96]	; (14580 <isr_tx+0xd8>)
   1451e:	f240 4345 	movw	r3, #1093	; 0x445
   14522:	f006 fdc8 	bl	1b0b6 <printk>
   14526:	4040      	eors	r0, r0
   14528:	f380 8811 	msr	BASEPRI, r0
   1452c:	f04f 0003 	mov.w	r0, #3
   14530:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   14532:	4810      	ldr	r0, [pc, #64]	; (14574 <isr_tx+0xcc>)
   14534:	4629      	mov	r1, r5
   14536:	f001 fd41 	bl	15fbc <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1453a:	f7ff f9ed 	bl	13918 <ull_filter_lll_rl_enabled>
   1453e:	2800      	cmp	r0, #0
   14540:	d0d4      	beq.n	144ec <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   14542:	f10d 0007 	add.w	r0, sp, #7
   14546:	f7ff f861 	bl	1360c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1454a:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1454c:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1454e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14552:	f002 f949 	bl	167e8 <radio_ar_configure>
   14556:	e7c9      	b.n	144ec <isr_tx+0x44>
	LL_ASSERT(node_rx);
   14558:	4a07      	ldr	r2, [pc, #28]	; (14578 <isr_tx+0xd0>)
   1455a:	490a      	ldr	r1, [pc, #40]	; (14584 <isr_tx+0xdc>)
   1455c:	4808      	ldr	r0, [pc, #32]	; (14580 <isr_tx+0xd8>)
   1455e:	f240 4341 	movw	r3, #1089	; 0x441
   14562:	f006 fda8 	bl	1b0b6 <printk>
   14566:	4040      	eors	r0, r0
   14568:	f380 8811 	msr	BASEPRI, r0
   1456c:	f04f 0003 	mov.w	r0, #3
   14570:	df02      	svc	2
   14572:	e7ad      	b.n	144d0 <isr_tx+0x28>
   14574:	00014b51 	.word	0x00014b51
   14578:	00020e0c 	.word	0x00020e0c
   1457c:	00020e60 	.word	0x00020e60
   14580:	000203b4 	.word	0x000203b4
   14584:	00020e58 	.word	0x00020e58

00014588 <abort_cb>:
{
   14588:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1458a:	b1d8      	cbz	r0, 145c4 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1458c:	460c      	mov	r4, r1
   1458e:	f7ff ff5b 	bl	14448 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   14592:	2800      	cmp	r0, #0
   14594:	db04      	blt.n	145a0 <abort_cb+0x18>
	lll_done(param);
   14596:	4620      	mov	r0, r4
}
   14598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1459c:	f7ff bcbe 	b.w	13f1c <lll_done>
	LL_ASSERT(err >= 0);
   145a0:	4a0c      	ldr	r2, [pc, #48]	; (145d4 <abort_cb+0x4c>)
   145a2:	490d      	ldr	r1, [pc, #52]	; (145d8 <abort_cb+0x50>)
   145a4:	480d      	ldr	r0, [pc, #52]	; (145dc <abort_cb+0x54>)
   145a6:	f44f 6384 	mov.w	r3, #1056	; 0x420
   145aa:	f006 fd84 	bl	1b0b6 <printk>
   145ae:	4040      	eors	r0, r0
   145b0:	f380 8811 	msr	BASEPRI, r0
   145b4:	f04f 0003 	mov.w	r0, #3
   145b8:	df02      	svc	2
	lll_done(param);
   145ba:	4620      	mov	r0, r4
}
   145bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   145c0:	f7ff bcac 	b.w	13f1c <lll_done>
		radio_isr_set(isr_abort, param);
   145c4:	4806      	ldr	r0, [pc, #24]	; (145e0 <abort_cb+0x58>)
   145c6:	f001 fcf9 	bl	15fbc <radio_isr_set>
}
   145ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   145ce:	f001 bdef 	b.w	161b0 <radio_disable>
   145d2:	bf00      	nop
   145d4:	00020e0c 	.word	0x00020e0c
   145d8:	00020dcc 	.word	0x00020dcc
   145dc:	000203b4 	.word	0x000203b4
   145e0:	00014491 	.word	0x00014491

000145e4 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   145e4:	4b08      	ldr	r3, [pc, #32]	; (14608 <lll_adv_init+0x24>)
   145e6:	2204      	movs	r2, #4
{
   145e8:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   145ea:	1898      	adds	r0, r3, r2
   145ec:	2128      	movs	r1, #40	; 0x28
   145ee:	f7f5 fd03 	bl	9ff8 <mem_init>
	MFIFO_INIT(pdu_free);
   145f2:	4b06      	ldr	r3, [pc, #24]	; (1460c <lll_adv_init+0x28>)
   145f4:	2400      	movs	r4, #0
   145f6:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   145f8:	2202      	movs	r2, #2
   145fa:	4621      	mov	r1, r4
   145fc:	4804      	ldr	r0, [pc, #16]	; (14610 <lll_adv_init+0x2c>)
   145fe:	f00a fef5 	bl	1f3ec <z_impl_k_sem_init>
}
   14602:	4620      	mov	r0, r4
   14604:	bd10      	pop	{r4, pc}
   14606:	bf00      	nop
   14608:	20002690 	.word	0x20002690
   1460c:	20000694 	.word	0x20000694
   14610:	20002734 	.word	0x20002734

00014614 <lll_adv_reset>:
   14614:	4b08      	ldr	r3, [pc, #32]	; (14638 <lll_adv_reset+0x24>)
   14616:	2204      	movs	r2, #4
   14618:	b510      	push	{r4, lr}
   1461a:	1898      	adds	r0, r3, r2
   1461c:	2128      	movs	r1, #40	; 0x28
   1461e:	f7f5 fceb 	bl	9ff8 <mem_init>
   14622:	4b06      	ldr	r3, [pc, #24]	; (1463c <lll_adv_reset+0x28>)
   14624:	2400      	movs	r4, #0
   14626:	805c      	strh	r4, [r3, #2]
   14628:	2202      	movs	r2, #2
   1462a:	4621      	mov	r1, r4
   1462c:	4804      	ldr	r0, [pc, #16]	; (14640 <lll_adv_reset+0x2c>)
   1462e:	f00a fedd 	bl	1f3ec <z_impl_k_sem_init>
   14632:	4620      	mov	r0, r4
   14634:	bd10      	pop	{r4, pc}
   14636:	bf00      	nop
   14638:	20002690 	.word	0x20002690
   1463c:	20000694 	.word	0x20000694
   14640:	20002734 	.word	0x20002734

00014644 <lll_adv_data_init>:
{
   14644:	b510      	push	{r4, lr}
   14646:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   14648:	4805      	ldr	r0, [pc, #20]	; (14660 <lll_adv_data_init+0x1c>)
   1464a:	f7f5 fd05 	bl	a058 <mem_acquire>
	if (!p) {
   1464e:	b120      	cbz	r0, 1465a <lll_adv_data_init+0x16>
   14650:	4603      	mov	r3, r0
	p->len = 0U;
   14652:	2000      	movs	r0, #0
   14654:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   14656:	6063      	str	r3, [r4, #4]
}
   14658:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1465a:	f06f 000b 	mvn.w	r0, #11
}
   1465e:	bd10      	pop	{r4, pc}
   14660:	20002690 	.word	0x20002690

00014664 <lll_adv_data_reset>:
{
   14664:	4603      	mov	r3, r0
	pdu->first = 0U;
   14666:	2000      	movs	r0, #0
   14668:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1466a:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1466c:	6098      	str	r0, [r3, #8]
}
   1466e:	4770      	bx	lr

00014670 <lll_adv_pdu_alloc_pdu_adv>:
{
   14670:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   14672:	4c35      	ldr	r4, [pc, #212]	; (14748 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   14674:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   14676:	78e1      	ldrb	r1, [r4, #3]
   14678:	7823      	ldrb	r3, [r4, #0]
   1467a:	4291      	cmp	r1, r2
   1467c:	d003      	beq.n	14686 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   1467e:	fb02 4303 	mla	r3, r2, r3, r4
   14682:	685d      	ldr	r5, [r3, #4]
	if (p) {
   14684:	b935      	cbnz	r5, 14694 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   14686:	4831      	ldr	r0, [pc, #196]	; (1474c <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   14688:	f7f5 fce6 	bl	a058 <mem_acquire>
	if (p) {
   1468c:	4605      	mov	r5, r0
   1468e:	b1a0      	cbz	r0, 146ba <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   14690:	4628      	mov	r0, r5
   14692:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   14694:	482e      	ldr	r0, [pc, #184]	; (14750 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   14696:	2200      	movs	r2, #0
   14698:	2300      	movs	r3, #0
   1469a:	f005 fd85 	bl	1a1a8 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1469e:	bb40      	cbnz	r0, 146f2 <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   146a0:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   146a2:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   146a4:	7861      	ldrb	r1, [r4, #1]
   146a6:	429a      	cmp	r2, r3
   146a8:	d0f2      	beq.n	14690 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   146aa:	3301      	adds	r3, #1
   146ac:	b2db      	uxtb	r3, r3
		_first = 0U;
   146ae:	4299      	cmp	r1, r3
   146b0:	bf08      	it	eq
   146b2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   146b4:	70a3      	strb	r3, [r4, #2]
}
   146b6:	4628      	mov	r0, r5
   146b8:	bd38      	pop	{r3, r4, r5, pc}
   146ba:	4825      	ldr	r0, [pc, #148]	; (14750 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   146bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   146c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146c4:	f005 fd70 	bl	1a1a8 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   146c8:	2800      	cmp	r0, #0
   146ca:	d12e      	bne.n	1472a <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   146cc:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   146ce:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   146d0:	7822      	ldrb	r2, [r4, #0]
   146d2:	7860      	ldrb	r0, [r4, #1]
   146d4:	4299      	cmp	r1, r3
   146d6:	d01a      	beq.n	1470e <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   146d8:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   146dc:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   146de:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   146e0:	b2db      	uxtb	r3, r3
		_first = 0U;
   146e2:	4298      	cmp	r0, r3
   146e4:	bf08      	it	eq
   146e6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   146e8:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   146ea:	b182      	cbz	r2, 1470e <lll_adv_pdu_alloc_pdu_adv+0x9e>
   146ec:	4615      	mov	r5, r2
}
   146ee:	4628      	mov	r0, r5
   146f0:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   146f2:	4a18      	ldr	r2, [pc, #96]	; (14754 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   146f4:	4918      	ldr	r1, [pc, #96]	; (14758 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   146f6:	4819      	ldr	r0, [pc, #100]	; (1475c <lll_adv_pdu_alloc_pdu_adv+0xec>)
   146f8:	f240 1397 	movw	r3, #407	; 0x197
   146fc:	f006 fcdb 	bl	1b0b6 <printk>
   14700:	4040      	eors	r0, r0
   14702:	f380 8811 	msr	BASEPRI, r0
   14706:	f04f 0003 	mov.w	r0, #3
   1470a:	df02      	svc	2
   1470c:	e7c8      	b.n	146a0 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   1470e:	4a11      	ldr	r2, [pc, #68]	; (14754 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   14710:	4913      	ldr	r1, [pc, #76]	; (14760 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   14712:	4812      	ldr	r0, [pc, #72]	; (1475c <lll_adv_pdu_alloc_pdu_adv+0xec>)
   14714:	f240 13ad 	movw	r3, #429	; 0x1ad
   14718:	f006 fccd 	bl	1b0b6 <printk>
   1471c:	4040      	eors	r0, r0
   1471e:	f380 8811 	msr	BASEPRI, r0
   14722:	f04f 0003 	mov.w	r0, #3
   14726:	df02      	svc	2
   14728:	e7b2      	b.n	14690 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   1472a:	4a0a      	ldr	r2, [pc, #40]	; (14754 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1472c:	490a      	ldr	r1, [pc, #40]	; (14758 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1472e:	480b      	ldr	r0, [pc, #44]	; (1475c <lll_adv_pdu_alloc_pdu_adv+0xec>)
   14730:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   14734:	f006 fcbf 	bl	1b0b6 <printk>
   14738:	4040      	eors	r0, r0
   1473a:	f380 8811 	msr	BASEPRI, r0
   1473e:	f04f 0003 	mov.w	r0, #3
   14742:	df02      	svc	2
   14744:	e7c2      	b.n	146cc <lll_adv_pdu_alloc_pdu_adv+0x5c>
   14746:	bf00      	nop
   14748:	20000694 	.word	0x20000694
   1474c:	20002690 	.word	0x20002690
   14750:	20002734 	.word	0x20002734
   14754:	00020e0c 	.word	0x00020e0c
   14758:	00020590 	.word	0x00020590
   1475c:	000203b4 	.word	0x000203b4
   14760:	00020e74 	.word	0x00020e74

00014764 <lll_adv_pdu_alloc>:
{
   14764:	b510      	push	{r4, lr}
	first = pdu->first;
   14766:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   14768:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1476a:	429a      	cmp	r2, r3
   1476c:	d014      	beq.n	14798 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   1476e:	b2d4      	uxtb	r4, r2
   14770:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   14772:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   14774:	4294      	cmp	r4, r2
   14776:	d004      	beq.n	14782 <lll_adv_pdu_alloc+0x1e>
			last++;
   14778:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   1477a:	7043      	strb	r3, [r0, #1]
			last++;
   1477c:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   1477e:	2b02      	cmp	r3, #2
   14780:	d00e      	beq.n	147a0 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   14782:	461c      	mov	r4, r3
	*idx = last;
   14784:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   14788:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1478a:	6860      	ldr	r0, [r4, #4]
	if (p) {
   1478c:	b100      	cbz	r0, 14790 <lll_adv_pdu_alloc+0x2c>
}
   1478e:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   14790:	f7ff ff6e 	bl	14670 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   14794:	6060      	str	r0, [r4, #4]
}
   14796:	bd10      	pop	{r4, pc}
		last++;
   14798:	3301      	adds	r3, #1
   1479a:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1479c:	2b02      	cmp	r3, #2
   1479e:	d1f0      	bne.n	14782 <lll_adv_pdu_alloc+0x1e>
{
   147a0:	2400      	movs	r4, #0
			last = 0U;
   147a2:	4623      	mov	r3, r4
   147a4:	e7ee      	b.n	14784 <lll_adv_pdu_alloc+0x20>
   147a6:	bf00      	nop

000147a8 <lll_adv_pdu_latest_get>:
{
   147a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   147aa:	4604      	mov	r4, r0
	first = pdu->first;
   147ac:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   147ae:	7840      	ldrb	r0, [r0, #1]
   147b0:	4298      	cmp	r0, r3
   147b2:	d028      	beq.n	14806 <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   147b4:	4a16      	ldr	r2, [pc, #88]	; (14810 <lll_adv_pdu_latest_get+0x68>)
   147b6:	460e      	mov	r6, r1
   147b8:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   147ba:	f892 c001 	ldrb.w	ip, [r2, #1]
   147be:	b2dd      	uxtb	r5, r3
	last = last + 1;
   147c0:	1c4b      	adds	r3, r1, #1
   147c2:	b2db      	uxtb	r3, r3
		last = 0U;
   147c4:	459c      	cmp	ip, r3
   147c6:	bf08      	it	eq
   147c8:	2300      	moveq	r3, #0
   147ca:	f892 c002 	ldrb.w	ip, [r2, #2]
   147ce:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   147d2:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   147d4:	6878      	ldr	r0, [r7, #4]
   147d6:	d009      	beq.n	147ec <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   147d8:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   147dc:	fb0c 2101 	mla	r1, ip, r1, r2
   147e0:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   147e2:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   147e4:	480b      	ldr	r0, [pc, #44]	; (14814 <lll_adv_pdu_latest_get+0x6c>)
   147e6:	f005 fcb9 	bl	1a15c <z_impl_k_sem_give>
			p = next;
   147ea:	2000      	movs	r0, #0
		first += 1U;
   147ec:	1c6b      	adds	r3, r5, #1
   147ee:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   147f0:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   147f2:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   147f4:	bf04      	itt	eq
   147f6:	2000      	moveq	r0, #0
			first = 0U;
   147f8:	4603      	moveq	r3, r0
		*is_modified = 1U;
   147fa:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   147fe:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   14800:	bf18      	it	ne
   14802:	4618      	movne	r0, r3
		*is_modified = 1U;
   14804:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   14806:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   1480a:	6860      	ldr	r0, [r4, #4]
   1480c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1480e:	bf00      	nop
   14810:	20000694 	.word	0x20000694
   14814:	20002734 	.word	0x20002734

00014818 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   14818:	7903      	ldrb	r3, [r0, #4]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1481a:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1481c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   14820:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   14822:	4604      	mov	r4, r0
   14824:	fa93 f0a3 	rbit	r0, r3
   14828:	fab0 f080 	clz	r0, r0
   1482c:	bf08      	it	eq
   1482e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   14832:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   14834:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   14836:	d043      	beq.n	148c0 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   14838:	7921      	ldrb	r1, [r4, #4]
   1483a:	1e5a      	subs	r2, r3, #1
   1483c:	4013      	ands	r3, r2
   1483e:	f363 01c5 	bfi	r1, r3, #3, #3

	lll_chan_set(36 + chan);
   14842:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   14846:	7121      	strb	r1, [r4, #4]
	lll_chan_set(36 + chan);
   14848:	f7ff fbea 	bl	14020 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1484c:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1484e:	f10d 0107 	add.w	r1, sp, #7
   14852:	f104 0008 	add.w	r0, r4, #8
   14856:	f88d 3007 	strb.w	r3, [sp, #7]
   1485a:	f7ff ffa5 	bl	147a8 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   1485e:	4605      	mov	r5, r0
   14860:	2800      	cmp	r0, #0
   14862:	d03e      	beq.n	148e2 <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   14864:	4628      	mov	r0, r5
   14866:	f001 fc83 	bl	16170 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1486a:	782b      	ldrb	r3, [r5, #0]
   1486c:	f003 030f 	and.w	r3, r3, #15
   14870:	2b02      	cmp	r3, #2
   14872:	d01d      	beq.n	148b0 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   14874:	f10d 0107 	add.w	r1, sp, #7
   14878:	f104 0014 	add.w	r0, r4, #20
   1487c:	f7ff ff94 	bl	147a8 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   14880:	4606      	mov	r6, r0
   14882:	2800      	cmp	r0, #0
   14884:	d03b      	beq.n	148fe <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   14886:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1488a:	b95b      	cbnz	r3, 148a4 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1488c:	4621      	mov	r1, r4
   1488e:	4823      	ldr	r0, [pc, #140]	; (1491c <chan_prepare.isra.0+0x104>)
   14890:	f001 fb94 	bl	15fbc <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   14894:	2096      	movs	r0, #150	; 0x96
   14896:	f001 fe17 	bl	164c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1489a:	2000      	movs	r0, #0
   1489c:	f001 fce8 	bl	16270 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   148a0:	b002      	add	sp, #8
   148a2:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   148a4:	2206      	movs	r2, #6
   148a6:	1ca9      	adds	r1, r5, #2
   148a8:	1cb0      	adds	r0, r6, #2
   148aa:	f007 fa3e 	bl	1bd2a <memcpy>
   148ae:	e7ed      	b.n	1488c <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   148b0:	481b      	ldr	r0, [pc, #108]	; (14920 <chan_prepare.isra.0+0x108>)
   148b2:	4621      	mov	r1, r4
   148b4:	f001 fb82 	bl	15fbc <radio_isr_set>
		radio_switch_complete_and_disable();
   148b8:	f001 fd82 	bl	163c0 <radio_switch_complete_and_disable>
}
   148bc:	b002      	add	sp, #8
   148be:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   148c0:	4a18      	ldr	r2, [pc, #96]	; (14924 <chan_prepare.isra.0+0x10c>)
   148c2:	4919      	ldr	r1, [pc, #100]	; (14928 <chan_prepare.isra.0+0x110>)
   148c4:	4819      	ldr	r0, [pc, #100]	; (1492c <chan_prepare.isra.0+0x114>)
   148c6:	f240 5337 	movw	r3, #1335	; 0x537
   148ca:	f006 fbf4 	bl	1b0b6 <printk>
   148ce:	4040      	eors	r0, r0
   148d0:	f380 8811 	msr	BASEPRI, r0
   148d4:	f04f 0003 	mov.w	r0, #3
   148d8:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   148da:	7923      	ldrb	r3, [r4, #4]
   148dc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   148e0:	e7aa      	b.n	14838 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   148e2:	4a10      	ldr	r2, [pc, #64]	; (14924 <chan_prepare.isra.0+0x10c>)
   148e4:	4912      	ldr	r1, [pc, #72]	; (14930 <chan_prepare.isra.0+0x118>)
   148e6:	4811      	ldr	r0, [pc, #68]	; (1492c <chan_prepare.isra.0+0x114>)
   148e8:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   148ec:	f006 fbe3 	bl	1b0b6 <printk>
   148f0:	4040      	eors	r0, r0
   148f2:	f380 8811 	msr	BASEPRI, r0
   148f6:	f04f 0003 	mov.w	r0, #3
   148fa:	df02      	svc	2
   148fc:	e7b2      	b.n	14864 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   148fe:	4a09      	ldr	r2, [pc, #36]	; (14924 <chan_prepare.isra.0+0x10c>)
   14900:	490c      	ldr	r1, [pc, #48]	; (14934 <chan_prepare.isra.0+0x11c>)
   14902:	480a      	ldr	r0, [pc, #40]	; (1492c <chan_prepare.isra.0+0x114>)
   14904:	f240 534a 	movw	r3, #1354	; 0x54a
   14908:	f006 fbd5 	bl	1b0b6 <printk>
   1490c:	4040      	eors	r0, r0
   1490e:	f380 8811 	msr	BASEPRI, r0
   14912:	f04f 0003 	mov.w	r0, #3
   14916:	df02      	svc	2
   14918:	e7b5      	b.n	14886 <chan_prepare.isra.0+0x6e>
   1491a:	bf00      	nop
   1491c:	000144a9 	.word	0x000144a9
   14920:	00014939 	.word	0x00014939
   14924:	00020e0c 	.word	0x00020e0c
   14928:	00020e78 	.word	0x00020e78
   1492c:	000203b4 	.word	0x000203b4
   14930:	00020e80 	.word	0x00020e80
   14934:	00020e84 	.word	0x00020e84

00014938 <isr_done>:
{
   14938:	b510      	push	{r4, lr}
   1493a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1493c:	f7ff fbc6 	bl	140cc <lll_isr_status_reset>
	if (lll->chan_map_curr &&
   14940:	7923      	ldrb	r3, [r4, #4]
   14942:	f013 0f38 	tst.w	r3, #56	; 0x38
   14946:	d106      	bne.n	14956 <isr_done+0x1e>
	radio_filter_disable();
   14948:	f001 fd8c 	bl	16464 <radio_filter_disable>
	lll_isr_cleanup(param);
   1494c:	4620      	mov	r0, r4
}
   1494e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   14952:	f7ff bbc9 	b.w	140e8 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   14956:	4620      	mov	r0, r4
   14958:	f7ff ff5e 	bl	14818 <chan_prepare.isra.0>
		radio_tx_enable();
   1495c:	f001 fc22 	bl	161a4 <radio_tx_enable>
}
   14960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   14964:	f001 bea2 	b.w	166ac <radio_tmr_end_capture>

00014968 <prepare_cb>:
{
   14968:	b5f0      	push	{r4, r5, r6, r7, lr}
   1496a:	b083      	sub	sp, #12
	lll = p->param;
   1496c:	68c4      	ldr	r4, [r0, #12]
{
   1496e:	4605      	mov	r5, r0
	radio_reset();
   14970:	f001 fb66 	bl	16040 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   14974:	2000      	movs	r0, #0
   14976:	f001 fb97 	bl	160a8 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1497a:	2100      	movs	r1, #0
   1497c:	4608      	mov	r0, r1
   1497e:	f001 fb83 	bl	16088 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   14982:	2200      	movs	r2, #0
   14984:	2125      	movs	r1, #37	; 0x25
   14986:	2008      	movs	r0, #8
   14988:	f001 fbc4 	bl	16114 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1498c:	4b2f      	ldr	r3, [pc, #188]	; (14a4c <prepare_cb+0xe4>)
   1498e:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   14990:	a801      	add	r0, sp, #4
   14992:	f001 fba7 	bl	160e4 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   14996:	492e      	ldr	r1, [pc, #184]	; (14a50 <prepare_cb+0xe8>)
   14998:	f240 605b 	movw	r0, #1627	; 0x65b
   1499c:	f001 fc46 	bl	1622c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   149a0:	7923      	ldrb	r3, [r4, #4]
   149a2:	f3c3 0202 	ubfx	r2, r3, #0, #3
   149a6:	f362 03c5 	bfi	r3, r2, #3, #3
   149aa:	7123      	strb	r3, [r4, #4]
	pdu = chan_prepare(lll);
   149ac:	4620      	mov	r0, r4
   149ae:	f7ff ff33 	bl	14818 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   149b2:	f7fe ffb1 	bl	13918 <ull_filter_lll_rl_enabled>
			ull_filter_lll_get(!!(lll->filter_policy));
   149b6:	7923      	ldrb	r3, [r4, #4]
	if (ull_filter_lll_rl_enabled()) {
   149b8:	2800      	cmp	r0, #0
   149ba:	d141      	bne.n	14a40 <prepare_cb+0xd8>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   149bc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   149c0:	d135      	bne.n	14a2e <prepare_cb+0xc6>
	ull = HDR_LLL2ULL(lll);
   149c2:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   149c4:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   149c6:	4638      	mov	r0, r7
   149c8:	f7ff fb0c 	bl	13fe4 <lll_event_offset_get>
   149cc:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   149ce:	686a      	ldr	r2, [r5, #4]
   149d0:	f106 0109 	add.w	r1, r6, #9
   149d4:	2001      	movs	r0, #1
   149d6:	f001 fd83 	bl	164e0 <radio_tmr_start>
	radio_tmr_end_capture();
   149da:	f001 fe67 	bl	166ac <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   149de:	4620      	mov	r0, r4
   149e0:	f7fa f864 	bl	eaac <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   149e4:	1c81      	adds	r1, r0, #2
   149e6:	4632      	mov	r2, r6
   149e8:	b2c9      	uxtb	r1, r1
   149ea:	4638      	mov	r0, r7
   149ec:	f7ff fb08 	bl	14000 <lll_preempt_calc>
   149f0:	b140      	cbz	r0, 14a04 <prepare_cb+0x9c>
		radio_isr_set(isr_abort, lll);
   149f2:	4818      	ldr	r0, [pc, #96]	; (14a54 <prepare_cb+0xec>)
   149f4:	4621      	mov	r1, r4
   149f6:	f001 fae1 	bl	15fbc <radio_isr_set>
		radio_disable();
   149fa:	f001 fbd9 	bl	161b0 <radio_disable>
}
   149fe:	2000      	movs	r0, #0
   14a00:	b003      	add	sp, #12
   14a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = lll_prepare_done(lll);
   14a04:	4620      	mov	r0, r4
   14a06:	f7ff fa87 	bl	13f18 <lll_prepare_done>
		LL_ASSERT(!ret);
   14a0a:	2800      	cmp	r0, #0
   14a0c:	d0f7      	beq.n	149fe <prepare_cb+0x96>
   14a0e:	4a12      	ldr	r2, [pc, #72]	; (14a58 <prepare_cb+0xf0>)
   14a10:	4912      	ldr	r1, [pc, #72]	; (14a5c <prepare_cb+0xf4>)
   14a12:	4813      	ldr	r0, [pc, #76]	; (14a60 <prepare_cb+0xf8>)
   14a14:	f240 33d1 	movw	r3, #977	; 0x3d1
   14a18:	f006 fb4d 	bl	1b0b6 <printk>
   14a1c:	4040      	eors	r0, r0
   14a1e:	f380 8811 	msr	BASEPRI, r0
   14a22:	f04f 0003 	mov.w	r0, #3
   14a26:	df02      	svc	2
}
   14a28:	2000      	movs	r0, #0
   14a2a:	b003      	add	sp, #12
   14a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   14a2e:	2001      	movs	r0, #1
   14a30:	f7fe faf8 	bl	13024 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   14a34:	7841      	ldrb	r1, [r0, #1]
   14a36:	1c82      	adds	r2, r0, #2
   14a38:	7800      	ldrb	r0, [r0, #0]
   14a3a:	f001 fcf3 	bl	16424 <radio_filter_configure>
   14a3e:	e7c0      	b.n	149c2 <prepare_cb+0x5a>
			ull_filter_lll_get(!!(lll->filter_policy));
   14a40:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   14a44:	bf14      	ite	ne
   14a46:	2001      	movne	r0, #1
   14a48:	2000      	moveq	r0, #0
   14a4a:	e7f1      	b.n	14a30 <prepare_cb+0xc8>
   14a4c:	8e89bed6 	.word	0x8e89bed6
   14a50:	00555555 	.word	0x00555555
   14a54:	00014491 	.word	0x00014491
   14a58:	00020e0c 	.word	0x00020e0c
   14a5c:	0002066c 	.word	0x0002066c
   14a60:	000203b4 	.word	0x000203b4

00014a64 <lll_adv_prepare>:
{
   14a64:	b510      	push	{r4, lr}
   14a66:	b082      	sub	sp, #8
   14a68:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   14a6a:	f7ff fcd5 	bl	14418 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   14a6e:	2800      	cmp	r0, #0
   14a70:	db1a      	blt.n	14aa8 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   14a72:	4a14      	ldr	r2, [pc, #80]	; (14ac4 <lll_adv_prepare+0x60>)
   14a74:	4914      	ldr	r1, [pc, #80]	; (14ac8 <lll_adv_prepare+0x64>)
   14a76:	4815      	ldr	r0, [pc, #84]	; (14acc <lll_adv_prepare+0x68>)
   14a78:	9400      	str	r4, [sp, #0]
   14a7a:	2300      	movs	r3, #0
   14a7c:	f7f9 fd8a 	bl	e594 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14a80:	b108      	cbz	r0, 14a86 <lll_adv_prepare+0x22>
   14a82:	3077      	adds	r0, #119	; 0x77
   14a84:	d101      	bne.n	14a8a <lll_adv_prepare+0x26>
}
   14a86:	b002      	add	sp, #8
   14a88:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   14a8a:	4a11      	ldr	r2, [pc, #68]	; (14ad0 <lll_adv_prepare+0x6c>)
   14a8c:	4911      	ldr	r1, [pc, #68]	; (14ad4 <lll_adv_prepare+0x70>)
   14a8e:	4812      	ldr	r0, [pc, #72]	; (14ad8 <lll_adv_prepare+0x74>)
   14a90:	f240 239d 	movw	r3, #669	; 0x29d
   14a94:	f006 fb0f 	bl	1b0b6 <printk>
   14a98:	4040      	eors	r0, r0
   14a9a:	f380 8811 	msr	BASEPRI, r0
   14a9e:	f04f 0003 	mov.w	r0, #3
   14aa2:	df02      	svc	2
}
   14aa4:	b002      	add	sp, #8
   14aa6:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   14aa8:	4a09      	ldr	r2, [pc, #36]	; (14ad0 <lll_adv_prepare+0x6c>)
   14aaa:	490c      	ldr	r1, [pc, #48]	; (14adc <lll_adv_prepare+0x78>)
   14aac:	480a      	ldr	r0, [pc, #40]	; (14ad8 <lll_adv_prepare+0x74>)
   14aae:	f240 239a 	movw	r3, #666	; 0x29a
   14ab2:	f006 fb00 	bl	1b0b6 <printk>
   14ab6:	4040      	eors	r0, r0
   14ab8:	f380 8811 	msr	BASEPRI, r0
   14abc:	f04f 0003 	mov.w	r0, #3
   14ac0:	df02      	svc	2
   14ac2:	e7d6      	b.n	14a72 <lll_adv_prepare+0xe>
   14ac4:	00014969 	.word	0x00014969
   14ac8:	00014589 	.word	0x00014589
   14acc:	00014489 	.word	0x00014489
   14ad0:	00020e0c 	.word	0x00020e0c
   14ad4:	00020e90 	.word	0x00020e90
   14ad8:	000203b4 	.word	0x000203b4
   14adc:	00020dcc 	.word	0x00020dcc

00014ae0 <lll_adv_scan_req_check>:
{
   14ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   14ae4:	f890 c004 	ldrb.w	ip, [r0, #4]
{
   14ae8:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   14aec:	f01c 0f40 	tst.w	ip, #64	; 0x40
{
   14af0:	460f      	mov	r7, r1
   14af2:	4616      	mov	r6, r2
   14af4:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   14af6:	d009      	beq.n	14b0c <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   14af8:	f1b8 0f00 	cmp.w	r8, #0
   14afc:	d016      	beq.n	14b2c <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   14afe:	783b      	ldrb	r3, [r7, #0]
   14b00:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   14b04:	d019      	beq.n	14b3a <lll_adv_scan_req_check+0x5a>
{
   14b06:	2000      	movs	r0, #0
}
   14b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b0c:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   14b0e:	f811 0b02 	ldrb.w	r0, [r1], #2
   14b12:	9a07      	ldr	r2, [sp, #28]
   14b14:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14b18:	f7fe fea2 	bl	13860 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   14b1c:	2800      	cmp	r0, #0
   14b1e:	d1ee      	bne.n	14afe <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   14b20:	7923      	ldrb	r3, [r4, #4]
						rl_idx)) ||
   14b22:	065b      	lsls	r3, r3, #25
   14b24:	d5ef      	bpl.n	14b06 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   14b26:	f1b8 0f00 	cmp.w	r8, #0
   14b2a:	d1e8      	bne.n	14afe <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   14b2c:	9b07      	ldr	r3, [sp, #28]
   14b2e:	7818      	ldrb	r0, [r3, #0]
   14b30:	f7fe fe32 	bl	13798 <ull_filter_lll_irk_in_fal>
   14b34:	2800      	cmp	r0, #0
   14b36:	d1e2      	bne.n	14afe <lll_adv_scan_req_check+0x1e>
   14b38:	e7e5      	b.n	14b06 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   14b3a:	2206      	movs	r2, #6
   14b3c:	f107 0108 	add.w	r1, r7, #8
   14b40:	4628      	mov	r0, r5
   14b42:	f007 f8e1 	bl	1bd08 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   14b46:	fab0 f080 	clz	r0, r0
   14b4a:	0940      	lsrs	r0, r0, #5
}
   14b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014b50 <isr_rx>:
{
   14b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b54:	b084      	sub	sp, #16
   14b56:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   14b58:	f001 fb54 	bl	16204 <radio_is_done>
	if (trx_done) {
   14b5c:	b2c0      	uxtb	r0, r0
   14b5e:	b950      	cbnz	r0, 14b76 <isr_rx+0x26>
	lll_isr_status_reset();
   14b60:	f7ff fab4 	bl	140cc <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   14b64:	483e      	ldr	r0, [pc, #248]	; (14c60 <isr_rx+0x110>)
   14b66:	4621      	mov	r1, r4
   14b68:	f001 fa28 	bl	15fbc <radio_isr_set>
}
   14b6c:	b004      	add	sp, #16
   14b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   14b72:	f001 bb1d 	b.w	161b0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   14b76:	f001 fb65 	bl	16244 <radio_crc_is_valid>
   14b7a:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   14b7c:	f001 fc84 	bl	16488 <radio_filter_has_match>
   14b80:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   14b82:	f001 fc8b 	bl	1649c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   14b86:	f001 fe7f 	bl	16888 <radio_ar_has_match>
   14b8a:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   14b8c:	f001 fe60 	bl	16850 <radio_ar_match_get>
	if (crc_ok) {
   14b90:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   14b92:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   14b94:	f001 fc3c 	bl	16410 <radio_rssi_is_ready>
	lll_isr_status_reset();
   14b98:	f7ff fa98 	bl	140cc <lll_isr_status_reset>
	if (crc_ok) {
   14b9c:	2d00      	cmp	r5, #0
   14b9e:	d0e1      	beq.n	14b64 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   14ba0:	b2f6      	uxtb	r6, r6
   14ba2:	2e00      	cmp	r6, #0
   14ba4:	d13a      	bne.n	14c1c <isr_rx+0xcc>
   14ba6:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   14ba8:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   14baa:	f88d 300f 	strb.w	r3, [sp, #15]
	node_rx = ull_pdu_rx_alloc_peek(1);
   14bae:	f7f9 f9bf 	bl	df30 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   14bb2:	4605      	mov	r5, r0
   14bb4:	2800      	cmp	r0, #0
   14bb6:	d045      	beq.n	14c44 <isr_rx+0xf4>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   14bb8:	7a23      	ldrb	r3, [r4, #8]
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   14bba:	7f28      	ldrb	r0, [r5, #28]
   14bbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   14bc0:	f105 011c 	add.w	r1, r5, #28
	addr = pdu_adv->adv_ind.addr;
   14bc4:	68db      	ldr	r3, [r3, #12]
	tx_addr = pdu_adv->tx_addr;
   14bc6:	f813 2b02 	ldrb.w	r2, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   14bca:	f002 060f 	and.w	r6, r2, #15
   14bce:	2e01      	cmp	r6, #1
	tx_addr = pdu_adv->tx_addr;
   14bd0:	f3c2 1280 	ubfx	r2, r2, #6, #1
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   14bd4:	d0c6      	beq.n	14b64 <isr_rx+0x14>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   14bd6:	f000 000f 	and.w	r0, r0, #15
   14bda:	2803      	cmp	r0, #3
   14bdc:	d1c2      	bne.n	14b64 <isr_rx+0x14>
   14bde:	7f68      	ldrb	r0, [r5, #29]
   14be0:	280c      	cmp	r0, #12
   14be2:	d1bf      	bne.n	14b64 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   14be4:	b2ff      	uxtb	r7, r7
   14be6:	f10d 050f 	add.w	r5, sp, #15
   14bea:	9700      	str	r7, [sp, #0]
   14bec:	4620      	mov	r0, r4
   14bee:	9501      	str	r5, [sp, #4]
   14bf0:	f7ff ff76 	bl	14ae0 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   14bf4:	2800      	cmp	r0, #0
   14bf6:	d0b5      	beq.n	14b64 <isr_rx+0x14>
		radio_isr_set(isr_done, lll);
   14bf8:	4621      	mov	r1, r4
   14bfa:	4819      	ldr	r0, [pc, #100]	; (14c60 <isr_rx+0x110>)
   14bfc:	f001 f9de 	bl	15fbc <radio_isr_set>
		radio_switch_complete_and_disable();
   14c00:	f001 fbde 	bl	163c0 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   14c04:	7d20      	ldrb	r0, [r4, #20]
   14c06:	eb04 0480 	add.w	r4, r4, r0, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   14c0a:	69a0      	ldr	r0, [r4, #24]
   14c0c:	f001 fab0 	bl	16170 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   14c10:	f001 faee 	bl	161f0 <radio_is_ready>
   14c14:	b940      	cbnz	r0, 14c28 <isr_rx+0xd8>
}
   14c16:	b004      	add	sp, #16
   14c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   14c1c:	fa5f f088 	uxtb.w	r0, r8
   14c20:	f7fe fd68 	bl	136f4 <ull_filter_lll_rl_irk_idx>
   14c24:	4603      	mov	r3, r0
   14c26:	e7bf      	b.n	14ba8 <isr_rx+0x58>
		LL_ASSERT(!radio_is_ready());
   14c28:	4a0e      	ldr	r2, [pc, #56]	; (14c64 <isr_rx+0x114>)
   14c2a:	490f      	ldr	r1, [pc, #60]	; (14c68 <isr_rx+0x118>)
   14c2c:	480f      	ldr	r0, [pc, #60]	; (14c6c <isr_rx+0x11c>)
   14c2e:	f240 5393 	movw	r3, #1427	; 0x593
   14c32:	f006 fa40 	bl	1b0b6 <printk>
   14c36:	4040      	eors	r0, r0
   14c38:	f380 8811 	msr	BASEPRI, r0
   14c3c:	f04f 0003 	mov.w	r0, #3
   14c40:	df02      	svc	2
		if (!err) {
   14c42:	e7e8      	b.n	14c16 <isr_rx+0xc6>
	LL_ASSERT(node_rx);
   14c44:	4a07      	ldr	r2, [pc, #28]	; (14c64 <isr_rx+0x114>)
   14c46:	490a      	ldr	r1, [pc, #40]	; (14c70 <isr_rx+0x120>)
   14c48:	4808      	ldr	r0, [pc, #32]	; (14c6c <isr_rx+0x11c>)
   14c4a:	f240 537a 	movw	r3, #1402	; 0x57a
   14c4e:	f006 fa32 	bl	1b0b6 <printk>
   14c52:	4040      	eors	r0, r0
   14c54:	f380 8811 	msr	BASEPRI, r0
   14c58:	f04f 0003 	mov.w	r0, #3
   14c5c:	df02      	svc	2
   14c5e:	e7ab      	b.n	14bb8 <isr_rx+0x68>
   14c60:	00014939 	.word	0x00014939
   14c64:	00020e0c 	.word	0x00020e0c
   14c68:	00020e60 	.word	0x00020e60
   14c6c:	000203b4 	.word	0x000203b4
   14c70:	00020e58 	.word	0x00020e58

00014c74 <common_prepare_cb>:
{
   14c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   14c78:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   14c7a:	f994 3016 	ldrsb.w	r3, [r4, #22]
   14c7e:	2b00      	cmp	r3, #0
{
   14c80:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   14c82:	f2c0 810e 	blt.w	14ea2 <common_prepare_cb+0x22e>
   14c86:	6863      	ldr	r3, [r4, #4]
   14c88:	4605      	mov	r5, r0
   14c8a:	460f      	mov	r7, r1
   14c8c:	2b00      	cmp	r3, #0
   14c8e:	f040 80fd 	bne.w	14e8c <common_prepare_cb+0x218>
	lll->state = 0U;
   14c92:	7da3      	ldrb	r3, [r4, #22]
   14c94:	f36f 0300 	bfc	r3, #0, #1
   14c98:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   14c9a:	f001 f9d1 	bl	16040 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   14c9e:	2000      	movs	r0, #0
   14ca0:	f001 fa02 	bl	160a8 <radio_tx_power_set>
	radio_phy_set(0, 0);
   14ca4:	2100      	movs	r1, #0
   14ca6:	4608      	mov	r0, r1
   14ca8:	f001 f9ee 	bl	16088 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   14cac:	2200      	movs	r2, #0
   14cae:	2125      	movs	r1, #37	; 0x25
   14cb0:	2008      	movs	r0, #8
   14cb2:	f001 fa2f 	bl	16114 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   14cb6:	2001      	movs	r0, #1
   14cb8:	f7f9 f93a 	bl	df30 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   14cbc:	4606      	mov	r6, r0
   14cbe:	2800      	cmp	r0, #0
   14cc0:	f000 80d6 	beq.w	14e70 <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   14cc4:	f106 001c 	add.w	r0, r6, #28
   14cc8:	f001 fa4c 	bl	16164 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   14ccc:	4b7a      	ldr	r3, [pc, #488]	; (14eb8 <common_prepare_cb+0x244>)
   14cce:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   14cd0:	a80b      	add	r0, sp, #44	; 0x2c
   14cd2:	f001 fa07 	bl	160e4 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   14cd6:	4979      	ldr	r1, [pc, #484]	; (14ebc <common_prepare_cb+0x248>)
   14cd8:	f240 605b 	movw	r0, #1627	; 0x65b
   14cdc:	f001 faa6 	bl	1622c <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   14ce0:	7da0      	ldrb	r0, [r4, #22]
   14ce2:	f3c0 0041 	ubfx	r0, r0, #1, #2
   14ce6:	3025      	adds	r0, #37	; 0x25
   14ce8:	f7ff f99a 	bl	14020 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   14cec:	4874      	ldr	r0, [pc, #464]	; (14ec0 <common_prepare_cb+0x24c>)
   14cee:	4621      	mov	r1, r4
   14cf0:	f001 f964 	bl	15fbc <radio_isr_set>
	} else if (lll->type ||
   14cf4:	7da3      	ldrb	r3, [r4, #22]
   14cf6:	069b      	lsls	r3, r3, #26
   14cf8:	d403      	bmi.n	14d02 <common_prepare_cb+0x8e>
		   lll->conn) {
   14cfa:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   14cfc:	2b00      	cmp	r3, #0
   14cfe:	f000 8091 	beq.w	14e24 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   14d02:	2096      	movs	r0, #150	; 0x96
   14d04:	f001 fbe0 	bl	164c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   14d08:	2300      	movs	r3, #0
   14d0a:	461a      	mov	r2, r3
   14d0c:	4619      	mov	r1, r3
   14d0e:	4618      	mov	r0, r3
   14d10:	f001 faf6 	bl	16300 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   14d14:	f7fe fe00 	bl	13918 <ull_filter_lll_rl_enabled>
   14d18:	2800      	cmp	r0, #0
   14d1a:	d135      	bne.n	14d88 <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   14d1c:	7da3      	ldrb	r3, [r4, #22]
   14d1e:	f013 0f18 	tst.w	r3, #24
   14d22:	d152      	bne.n	14dca <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   14d24:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   14d28:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   14d2a:	4640      	mov	r0, r8
   14d2c:	f7ff f95a 	bl	13fe4 <lll_event_offset_get>
   14d30:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   14d32:	686a      	ldr	r2, [r5, #4]
   14d34:	f106 0109 	add.w	r1, r6, #9
   14d38:	2000      	movs	r0, #0
   14d3a:	f001 fbd1 	bl	164e0 <radio_tmr_start>
	radio_tmr_end_capture();
   14d3e:	f001 fcb5 	bl	166ac <radio_tmr_end_capture>
	radio_rssi_measure();
   14d42:	f001 fb4d 	bl	163e0 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   14d46:	4620      	mov	r0, r4
   14d48:	f7fa f8b6 	bl	eeb8 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   14d4c:	1d01      	adds	r1, r0, #4
   14d4e:	b2c9      	uxtb	r1, r1
   14d50:	4640      	mov	r0, r8
   14d52:	4632      	mov	r2, r6
   14d54:	f7ff f954 	bl	14000 <lll_preempt_calc>
   14d58:	bb68      	cbnz	r0, 14db6 <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   14d5a:	b917      	cbnz	r7, 14d62 <common_prepare_cb+0xee>
   14d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14d5e:	2b00      	cmp	r3, #0
   14d60:	d163      	bne.n	14e2a <common_prepare_cb+0x1b6>
		if (lll->conn) {
   14d62:	6863      	ldr	r3, [r4, #4]
   14d64:	b143      	cbz	r3, 14d78 <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   14d66:	4b57      	ldr	r3, [pc, #348]	; (14ec4 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   14d68:	2201      	movs	r2, #1
   14d6a:	2102      	movs	r1, #2
   14d6c:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   14d6e:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   14d70:	f7f5 fa4a 	bl	a208 <mayfly_enqueue>
			LL_ASSERT(!retval);
   14d74:	2800      	cmp	r0, #0
   14d76:	d142      	bne.n	14dfe <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   14d78:	4620      	mov	r0, r4
   14d7a:	f7ff f8cd 	bl	13f18 <lll_prepare_done>
		LL_ASSERT(!ret);
   14d7e:	bb68      	cbnz	r0, 14ddc <common_prepare_cb+0x168>
}
   14d80:	2000      	movs	r0, #0
   14d82:	b00c      	add	sp, #48	; 0x30
   14d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   14d88:	7da0      	ldrb	r0, [r4, #22]
   14d8a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   14d8e:	f7fe f949 	bl	13024 <ull_filter_lll_get>
   14d92:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   14d94:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   14d98:	f7fe fc38 	bl	1360c <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   14d9c:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   14d9e:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   14da0:	1cb2      	adds	r2, r6, #2
   14da2:	7830      	ldrb	r0, [r6, #0]
   14da4:	f001 fb3e 	bl	16424 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   14da8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14dac:	2200      	movs	r2, #0
   14dae:	4641      	mov	r1, r8
   14db0:	f001 fd1a 	bl	167e8 <radio_ar_configure>
   14db4:	e7b6      	b.n	14d24 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   14db6:	4844      	ldr	r0, [pc, #272]	; (14ec8 <common_prepare_cb+0x254>)
   14db8:	4621      	mov	r1, r4
   14dba:	f001 f8ff 	bl	15fbc <radio_isr_set>
		radio_disable();
   14dbe:	f001 f9f7 	bl	161b0 <radio_disable>
}
   14dc2:	2000      	movs	r0, #0
   14dc4:	b00c      	add	sp, #48	; 0x30
   14dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   14dca:	2001      	movs	r0, #1
   14dcc:	f7fe f92a 	bl	13024 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   14dd0:	7841      	ldrb	r1, [r0, #1]
   14dd2:	1c82      	adds	r2, r0, #2
   14dd4:	7800      	ldrb	r0, [r0, #0]
   14dd6:	f001 fb25 	bl	16424 <radio_filter_configure>
   14dda:	e7a3      	b.n	14d24 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   14ddc:	4a3b      	ldr	r2, [pc, #236]	; (14ecc <common_prepare_cb+0x258>)
   14dde:	493c      	ldr	r1, [pc, #240]	; (14ed0 <common_prepare_cb+0x25c>)
   14de0:	483c      	ldr	r0, [pc, #240]	; (14ed4 <common_prepare_cb+0x260>)
   14de2:	f44f 7305 	mov.w	r3, #532	; 0x214
   14de6:	f006 f966 	bl	1b0b6 <printk>
   14dea:	4040      	eors	r0, r0
   14dec:	f380 8811 	msr	BASEPRI, r0
   14df0:	f04f 0003 	mov.w	r0, #3
   14df4:	df02      	svc	2
}
   14df6:	2000      	movs	r0, #0
   14df8:	b00c      	add	sp, #48	; 0x30
   14dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   14dfe:	4a33      	ldr	r2, [pc, #204]	; (14ecc <common_prepare_cb+0x258>)
   14e00:	4935      	ldr	r1, [pc, #212]	; (14ed8 <common_prepare_cb+0x264>)
   14e02:	4834      	ldr	r0, [pc, #208]	; (14ed4 <common_prepare_cb+0x260>)
   14e04:	f240 230f 	movw	r3, #527	; 0x20f
   14e08:	f006 f955 	bl	1b0b6 <printk>
   14e0c:	4040      	eors	r0, r0
   14e0e:	f380 8811 	msr	BASEPRI, r0
   14e12:	f04f 0003 	mov.w	r0, #3
   14e16:	df02      	svc	2
		ret = lll_prepare_done(lll);
   14e18:	4620      	mov	r0, r4
   14e1a:	f7ff f87d 	bl	13f18 <lll_prepare_done>
		LL_ASSERT(!ret);
   14e1e:	2800      	cmp	r0, #0
   14e20:	d0ae      	beq.n	14d80 <common_prepare_cb+0x10c>
   14e22:	e7db      	b.n	14ddc <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   14e24:	f001 facc 	bl	163c0 <radio_switch_complete_and_disable>
   14e28:	e774      	b.n	14d14 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   14e2a:	4a2c      	ldr	r2, [pc, #176]	; (14edc <common_prepare_cb+0x268>)
   14e2c:	9207      	str	r2, [sp, #28]
   14e2e:	4a2c      	ldr	r2, [pc, #176]	; (14ee0 <common_prepare_cb+0x26c>)
   14e30:	9205      	str	r2, [sp, #20]
   14e32:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   14e36:	9300      	str	r3, [sp, #0]
   14e38:	9208      	str	r2, [sp, #32]
   14e3a:	4633      	mov	r3, r6
   14e3c:	e9cd 7703 	strd	r7, r7, [sp, #12]
   14e40:	e9cd 7701 	strd	r7, r7, [sp, #4]
   14e44:	9406      	str	r4, [sp, #24]
   14e46:	4639      	mov	r1, r7
   14e48:	2203      	movs	r2, #3
   14e4a:	f7f6 fba9 	bl	b5a0 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14e4e:	f030 0302 	bics.w	r3, r0, #2
   14e52:	d086      	beq.n	14d62 <common_prepare_cb+0xee>
   14e54:	4a1d      	ldr	r2, [pc, #116]	; (14ecc <common_prepare_cb+0x258>)
   14e56:	4923      	ldr	r1, [pc, #140]	; (14ee4 <common_prepare_cb+0x270>)
   14e58:	481e      	ldr	r0, [pc, #120]	; (14ed4 <common_prepare_cb+0x260>)
   14e5a:	f240 13fb 	movw	r3, #507	; 0x1fb
   14e5e:	f006 f92a 	bl	1b0b6 <printk>
   14e62:	4040      	eors	r0, r0
   14e64:	f380 8811 	msr	BASEPRI, r0
   14e68:	f04f 0003 	mov.w	r0, #3
   14e6c:	df02      	svc	2
   14e6e:	e778      	b.n	14d62 <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   14e70:	4a16      	ldr	r2, [pc, #88]	; (14ecc <common_prepare_cb+0x258>)
   14e72:	491d      	ldr	r1, [pc, #116]	; (14ee8 <common_prepare_cb+0x274>)
   14e74:	4817      	ldr	r0, [pc, #92]	; (14ed4 <common_prepare_cb+0x260>)
   14e76:	f240 138d 	movw	r3, #397	; 0x18d
   14e7a:	f006 f91c 	bl	1b0b6 <printk>
   14e7e:	4040      	eors	r0, r0
   14e80:	f380 8811 	msr	BASEPRI, r0
   14e84:	f04f 0003 	mov.w	r0, #3
   14e88:	df02      	svc	2
   14e8a:	e71b      	b.n	14cc4 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   14e8c:	6863      	ldr	r3, [r4, #4]
   14e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
   14e92:	07d9      	lsls	r1, r3, #31
   14e94:	d405      	bmi.n	14ea2 <common_prepare_cb+0x22e>
   14e96:	6863      	ldr	r3, [r4, #4]
   14e98:	f893 3020 	ldrb.w	r3, [r3, #32]
   14e9c:	079a      	lsls	r2, r3, #30
   14e9e:	f57f aef8 	bpl.w	14c92 <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   14ea2:	4812      	ldr	r0, [pc, #72]	; (14eec <common_prepare_cb+0x278>)
   14ea4:	4621      	mov	r1, r4
   14ea6:	f001 f889 	bl	15fbc <radio_isr_set>
		radio_disable();
   14eaa:	f001 f981 	bl	161b0 <radio_disable>
}
   14eae:	2000      	movs	r0, #0
   14eb0:	b00c      	add	sp, #48	; 0x30
   14eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14eb6:	bf00      	nop
   14eb8:	8e89bed6 	.word	0x8e89bed6
   14ebc:	00555555 	.word	0x00555555
   14ec0:	00003859 	.word	0x00003859
   14ec4:	200006b4 	.word	0x200006b4
   14ec8:	00014f99 	.word	0x00014f99
   14ecc:	00020ea4 	.word	0x00020ea4
   14ed0:	0002066c 	.word	0x0002066c
   14ed4:	000203b4 	.word	0x000203b4
   14ed8:	00020694 	.word	0x00020694
   14edc:	000150bd 	.word	0x000150bd
   14ee0:	00015165 	.word	0x00015165
   14ee4:	0002078c 	.word	0x0002078c
   14ee8:	00020e58 	.word	0x00020e58
   14eec:	00014179 	.word	0x00014179

00014ef0 <prepare_cb>:
	return common_prepare_cb(p, false);
   14ef0:	2100      	movs	r1, #0
   14ef2:	f7ff bebf 	b.w	14c74 <common_prepare_cb>
   14ef6:	bf00      	nop

00014ef8 <isr_common_done>:
{
   14ef8:	b530      	push	{r4, r5, lr}
   14efa:	4604      	mov	r4, r0
   14efc:	b083      	sub	sp, #12
	lll_isr_status_reset();
   14efe:	f7ff f8e5 	bl	140cc <lll_isr_status_reset>
	lll->state = 0U;
   14f02:	7da3      	ldrb	r3, [r4, #22]
   14f04:	f36f 0300 	bfc	r3, #0, #1
   14f08:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   14f0a:	069b      	lsls	r3, r3, #26
   14f0c:	d401      	bmi.n	14f12 <isr_common_done+0x1a>
		   lll->conn) {
   14f0e:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   14f10:	b3b3      	cbz	r3, 14f80 <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   14f12:	2096      	movs	r0, #150	; 0x96
   14f14:	f001 fad8 	bl	164c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   14f18:	2300      	movs	r3, #0
   14f1a:	461a      	mov	r2, r3
   14f1c:	4619      	mov	r1, r3
   14f1e:	4618      	mov	r0, r3
   14f20:	f001 f9ee 	bl	16300 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   14f24:	2001      	movs	r0, #1
   14f26:	f7f9 f803 	bl	df30 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   14f2a:	4605      	mov	r5, r0
   14f2c:	b1d0      	cbz	r0, 14f64 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   14f2e:	f105 001c 	add.w	r0, r5, #28
   14f32:	f001 f917 	bl	16164 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   14f36:	f7fe fcef 	bl	13918 <ull_filter_lll_rl_enabled>
   14f3a:	b940      	cbnz	r0, 14f4e <isr_common_done+0x56>
	radio_rssi_measure();
   14f3c:	f001 fa50 	bl	163e0 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   14f40:	4811      	ldr	r0, [pc, #68]	; (14f88 <isr_common_done+0x90>)
   14f42:	4621      	mov	r1, r4
}
   14f44:	b003      	add	sp, #12
   14f46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   14f4a:	f001 b837 	b.w	15fbc <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   14f4e:	f10d 0007 	add.w	r0, sp, #7
   14f52:	f7fe fb5b 	bl	1360c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   14f56:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   14f58:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   14f5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14f5e:	f001 fc43 	bl	167e8 <radio_ar_configure>
   14f62:	e7eb      	b.n	14f3c <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   14f64:	4a09      	ldr	r2, [pc, #36]	; (14f8c <isr_common_done+0x94>)
   14f66:	490a      	ldr	r1, [pc, #40]	; (14f90 <isr_common_done+0x98>)
   14f68:	480a      	ldr	r0, [pc, #40]	; (14f94 <isr_common_done+0x9c>)
   14f6a:	f44f 7352 	mov.w	r3, #840	; 0x348
   14f6e:	f006 f8a2 	bl	1b0b6 <printk>
   14f72:	4040      	eors	r0, r0
   14f74:	f380 8811 	msr	BASEPRI, r0
   14f78:	f04f 0003 	mov.w	r0, #3
   14f7c:	df02      	svc	2
   14f7e:	e7d6      	b.n	14f2e <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   14f80:	f001 fa1e 	bl	163c0 <radio_switch_complete_and_disable>
   14f84:	e7ce      	b.n	14f24 <isr_common_done+0x2c>
   14f86:	bf00      	nop
   14f88:	00003859 	.word	0x00003859
   14f8c:	00020ea4 	.word	0x00020ea4
   14f90:	00020e58 	.word	0x00020e58
   14f94:	000203b4 	.word	0x000203b4

00014f98 <isr_abort>:
{
   14f98:	b510      	push	{r4, lr}
   14f9a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   14f9c:	f7ff f896 	bl	140cc <lll_isr_status_reset>
	radio_filter_disable();
   14fa0:	f001 fa60 	bl	16464 <radio_filter_disable>
	lll_isr_cleanup(param);
   14fa4:	4620      	mov	r0, r4
}
   14fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   14faa:	f7ff b89d 	b.w	140e8 <lll_isr_cleanup>
   14fae:	bf00      	nop

00014fb0 <isr_done>:
{
   14fb0:	b508      	push	{r3, lr}
	isr_common_done(param);
   14fb2:	f7ff ffa1 	bl	14ef8 <isr_common_done>
	radio_rx_enable();
   14fb6:	f001 f8ef 	bl	16198 <radio_rx_enable>
}
   14fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   14fbe:	f001 bb75 	b.w	166ac <radio_tmr_end_capture>
   14fc2:	bf00      	nop

00014fc4 <isr_tx>:
{
   14fc4:	b570      	push	{r4, r5, r6, lr}
   14fc6:	b082      	sub	sp, #8
   14fc8:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   14fca:	f7ff f86d 	bl	140a8 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   14fce:	f001 f9f7 	bl	163c0 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   14fd2:	2001      	movs	r0, #1
   14fd4:	f7f8 ffac 	bl	df30 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   14fd8:	4604      	mov	r4, r0
   14fda:	2800      	cmp	r0, #0
   14fdc:	d03f      	beq.n	1505e <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   14fde:	f104 001c 	add.w	r0, r4, #28
   14fe2:	f001 f8bf 	bl	16164 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   14fe6:	f001 f903 	bl	161f0 <radio_is_ready>
   14fea:	b9e0      	cbnz	r0, 15026 <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   14fec:	f7fe fc94 	bl	13918 <ull_filter_lll_rl_enabled>
   14ff0:	bb50      	cbnz	r0, 15048 <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   14ff2:	f001 fb69 	bl	166c8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   14ff6:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   14ff8:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   14ffa:	4608      	mov	r0, r1
   14ffc:	f001 f8c6 	bl	1618c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   15000:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   15002:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   15004:	4608      	mov	r0, r1
   15006:	f001 f8bf 	bl	16188 <radio_tx_chain_delay_get>
   1500a:	4434      	add	r4, r6
   1500c:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1500e:	1a20      	subs	r0, r4, r0
   15010:	f001 fb2c 	bl	1666c <radio_tmr_hcto_configure>
	radio_rssi_measure();
   15014:	f001 f9e4 	bl	163e0 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   15018:	4818      	ldr	r0, [pc, #96]	; (1507c <isr_tx+0xb8>)
   1501a:	4629      	mov	r1, r5
}
   1501c:	b002      	add	sp, #8
   1501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   15022:	f000 bfcb 	b.w	15fbc <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   15026:	4a16      	ldr	r2, [pc, #88]	; (15080 <isr_tx+0xbc>)
   15028:	4916      	ldr	r1, [pc, #88]	; (15084 <isr_tx+0xc0>)
   1502a:	4817      	ldr	r0, [pc, #92]	; (15088 <isr_tx+0xc4>)
   1502c:	f240 3306 	movw	r3, #774	; 0x306
   15030:	f006 f841 	bl	1b0b6 <printk>
   15034:	4040      	eors	r0, r0
   15036:	f380 8811 	msr	BASEPRI, r0
   1503a:	f04f 0003 	mov.w	r0, #3
   1503e:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   15040:	f7fe fc6a 	bl	13918 <ull_filter_lll_rl_enabled>
   15044:	2800      	cmp	r0, #0
   15046:	d0d4      	beq.n	14ff2 <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   15048:	f10d 0007 	add.w	r0, sp, #7
   1504c:	f7fe fade 	bl	1360c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   15050:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   15052:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   15054:	f89d 0007 	ldrb.w	r0, [sp, #7]
   15058:	f001 fbc6 	bl	167e8 <radio_ar_configure>
   1505c:	e7c9      	b.n	14ff2 <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   1505e:	4a08      	ldr	r2, [pc, #32]	; (15080 <isr_tx+0xbc>)
   15060:	490a      	ldr	r1, [pc, #40]	; (1508c <isr_tx+0xc8>)
   15062:	4809      	ldr	r0, [pc, #36]	; (15088 <isr_tx+0xc4>)
   15064:	f240 3302 	movw	r3, #770	; 0x302
   15068:	f006 f825 	bl	1b0b6 <printk>
   1506c:	4040      	eors	r0, r0
   1506e:	f380 8811 	msr	BASEPRI, r0
   15072:	f04f 0003 	mov.w	r0, #3
   15076:	df02      	svc	2
   15078:	e7b1      	b.n	14fde <isr_tx+0x1a>
   1507a:	bf00      	nop
   1507c:	00003859 	.word	0x00003859
   15080:	00020ea4 	.word	0x00020ea4
   15084:	00020e60 	.word	0x00020e60
   15088:	000203b4 	.word	0x000203b4
   1508c:	00020e58 	.word	0x00020e58

00015090 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   15090:	68c3      	ldr	r3, [r0, #12]
{
   15092:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   15094:	681e      	ldr	r6, [r3, #0]
{
   15096:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   15098:	f7f6 fbac 	bl	b7f4 <ticker_ticks_now_get>
   1509c:	4605      	mov	r5, r0
   1509e:	4630      	mov	r0, r6
   150a0:	f7fe ffa0 	bl	13fe4 <lll_event_offset_get>
	p->remainder = 0;
   150a4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   150a6:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   150a8:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   150ac:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   150ae:	4620      	mov	r0, r4
   150b0:	2101      	movs	r1, #1
}
   150b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   150b6:	f7ff bddd 	b.w	14c74 <common_prepare_cb>
   150ba:	bf00      	nop

000150bc <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   150bc:	b900      	cbnz	r0, 150c0 <ticker_op_start_cb+0x4>
   150be:	4770      	bx	lr
{
   150c0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   150c2:	4a07      	ldr	r2, [pc, #28]	; (150e0 <ticker_op_start_cb+0x24>)
   150c4:	4907      	ldr	r1, [pc, #28]	; (150e4 <ticker_op_start_cb+0x28>)
   150c6:	4808      	ldr	r0, [pc, #32]	; (150e8 <ticker_op_start_cb+0x2c>)
   150c8:	f44f 7324 	mov.w	r3, #656	; 0x290
   150cc:	f005 fff3 	bl	1b0b6 <printk>
   150d0:	4040      	eors	r0, r0
   150d2:	f380 8811 	msr	BASEPRI, r0
   150d6:	f04f 0003 	mov.w	r0, #3
   150da:	df02      	svc	2
}
   150dc:	bd08      	pop	{r3, pc}
   150de:	bf00      	nop
   150e0:	00020ea4 	.word	0x00020ea4
   150e4:	00020860 	.word	0x00020860
   150e8:	000203b4 	.word	0x000203b4

000150ec <is_abort_cb>:
	if (next != curr) {
   150ec:	4281      	cmp	r1, r0
{
   150ee:	b508      	push	{r3, lr}
	if (next != curr) {
   150f0:	d00d      	beq.n	1510e <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   150f2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   150f4:	b113      	cbz	r3, 150fc <is_abort_cb+0x10>
			return -ECANCELED;
   150f6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   150fa:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   150fc:	4b14      	ldr	r3, [pc, #80]	; (15150 <is_abort_cb+0x64>)
   150fe:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   15100:	f7ff f98a 	bl	14418 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   15104:	2800      	cmp	r0, #0
   15106:	db12      	blt.n	1512e <is_abort_cb+0x42>
   15108:	f06f 000a 	mvn.w	r0, #10
}
   1510c:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   1510e:	684b      	ldr	r3, [r1, #4]
   15110:	b123      	cbz	r3, 1511c <is_abort_cb+0x30>
   15112:	684b      	ldr	r3, [r1, #4]
   15114:	f893 3020 	ldrb.w	r3, [r3, #32]
   15118:	07db      	lsls	r3, r3, #31
   1511a:	d406      	bmi.n	1512a <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   1511c:	480d      	ldr	r0, [pc, #52]	; (15154 <is_abort_cb+0x68>)
   1511e:	f000 ff4d 	bl	15fbc <radio_isr_set>
	radio_disable();
   15122:	f001 f845 	bl	161b0 <radio_disable>
	return 0;
   15126:	2000      	movs	r0, #0
}
   15128:	bd08      	pop	{r3, pc}
		return 0;
   1512a:	2000      	movs	r0, #0
}
   1512c:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   1512e:	4a0a      	ldr	r2, [pc, #40]	; (15158 <is_abort_cb+0x6c>)
   15130:	490a      	ldr	r1, [pc, #40]	; (1515c <is_abort_cb+0x70>)
   15132:	480b      	ldr	r0, [pc, #44]	; (15160 <is_abort_cb+0x74>)
   15134:	f240 2332 	movw	r3, #562	; 0x232
   15138:	f005 ffbd 	bl	1b0b6 <printk>
   1513c:	4040      	eors	r0, r0
   1513e:	f380 8811 	msr	BASEPRI, r0
   15142:	f04f 0003 	mov.w	r0, #3
   15146:	df02      	svc	2
   15148:	f06f 000a 	mvn.w	r0, #10
}
   1514c:	bd08      	pop	{r3, pc}
   1514e:	bf00      	nop
   15150:	00015091 	.word	0x00015091
   15154:	000037b9 	.word	0x000037b9
   15158:	00020ea4 	.word	0x00020ea4
   1515c:	00020dcc 	.word	0x00020dcc
   15160:	000203b4 	.word	0x000203b4

00015164 <ticker_stop_cb>:
{
   15164:	b508      	push	{r3, lr}
	mfy.param = param;
   15166:	4b0c      	ldr	r3, [pc, #48]	; (15198 <ticker_stop_cb+0x34>)
{
   15168:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   1516a:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1516c:	2200      	movs	r2, #0
   1516e:	4611      	mov	r1, r2
   15170:	2001      	movs	r0, #1
   15172:	f7f5 f849 	bl	a208 <mayfly_enqueue>
	LL_ASSERT(!ret);
   15176:	b900      	cbnz	r0, 1517a <ticker_stop_cb+0x16>
}
   15178:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1517a:	4a08      	ldr	r2, [pc, #32]	; (1519c <ticker_stop_cb+0x38>)
   1517c:	4908      	ldr	r1, [pc, #32]	; (151a0 <ticker_stop_cb+0x3c>)
   1517e:	4809      	ldr	r0, [pc, #36]	; (151a4 <ticker_stop_cb+0x40>)
   15180:	f240 2389 	movw	r3, #649	; 0x289
   15184:	f005 ff97 	bl	1b0b6 <printk>
   15188:	4040      	eors	r0, r0
   1518a:	f380 8811 	msr	BASEPRI, r0
   1518e:	f04f 0003 	mov.w	r0, #3
   15192:	df02      	svc	2
}
   15194:	bd08      	pop	{r3, pc}
   15196:	bf00      	nop
   15198:	200006a4 	.word	0x200006a4
   1519c:	00020ea4 	.word	0x00020ea4
   151a0:	0002066c 	.word	0x0002066c
   151a4:	000203b4 	.word	0x000203b4

000151a8 <isr_done_cleanup>:
{
   151a8:	b530      	push	{r4, r5, lr}
   151aa:	4604      	mov	r4, r0
   151ac:	b085      	sub	sp, #20
	lll_isr_status_reset();
   151ae:	f7fe ff8d 	bl	140cc <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   151b2:	f10d 010f 	add.w	r1, sp, #15
   151b6:	4620      	mov	r0, r4
   151b8:	f7fe ff02 	bl	13fc0 <lll_is_done>
   151bc:	b9c8      	cbnz	r0, 151f2 <isr_done_cleanup+0x4a>
	radio_filter_disable();
   151be:	4605      	mov	r5, r0
   151c0:	f001 f950 	bl	16464 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   151c4:	7da2      	ldrb	r2, [r4, #22]
   151c6:	f3c2 0341 	ubfx	r3, r2, #1, #2
   151ca:	3301      	adds	r3, #1
   151cc:	f003 0303 	and.w	r3, r3, #3
   151d0:	2b03      	cmp	r3, #3
   151d2:	bf14      	ite	ne
   151d4:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   151d8:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   151dc:	2300      	movs	r3, #0
		lll->chan = 0U;
   151de:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   151e0:	4619      	mov	r1, r3
   151e2:	9300      	str	r3, [sp, #0]
   151e4:	2203      	movs	r2, #3
   151e6:	4618      	mov	r0, r3
   151e8:	f7f6 fa64 	bl	b6b4 <ticker_stop>
	lll_isr_cleanup(param);
   151ec:	4620      	mov	r0, r4
   151ee:	f7fe ff7b 	bl	140e8 <lll_isr_cleanup>
}
   151f2:	b005      	add	sp, #20
   151f4:	bd30      	pop	{r4, r5, pc}
   151f6:	bf00      	nop

000151f8 <isr_scan_tgta_check>:
{
   151f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   151fc:	f89d 9020 	ldrb.w	r9, [sp, #32]
   15200:	4616      	mov	r6, r2
   15202:	4680      	mov	r8, r0
   15204:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   15206:	464a      	mov	r2, r9
   15208:	4619      	mov	r1, r3
   1520a:	4630      	mov	r0, r6
{
   1520c:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1520e:	f7fe fb61 	bl	138d4 <ull_filter_lll_rl_addr_resolve>
   15212:	4604      	mov	r4, r0
   15214:	b9a0      	cbnz	r0, 15240 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   15216:	b11d      	cbz	r5, 15220 <isr_scan_tgta_check+0x28>
   15218:	f898 3017 	ldrb.w	r3, [r8, #23]
   1521c:	079a      	lsls	r2, r3, #30
   1521e:	d41c      	bmi.n	1525a <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   15220:	f898 5016 	ldrb.w	r5, [r8, #22]
   15224:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   15228:	42b3      	cmp	r3, r6
   1522a:	d00c      	beq.n	15246 <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1522c:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   15230:	07ab      	lsls	r3, r5, #30
   15232:	d505      	bpl.n	15240 <isr_scan_tgta_check+0x48>
   15234:	b126      	cbz	r6, 15240 <isr_scan_tgta_check+0x48>
   15236:	797b      	ldrb	r3, [r7, #5]
   15238:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1523c:	2b40      	cmp	r3, #64	; 0x40
   1523e:	d014      	beq.n	1526a <isr_scan_tgta_check+0x72>
}
   15240:	4620      	mov	r0, r4
   15242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   15246:	2206      	movs	r2, #6
   15248:	4639      	mov	r1, r7
   1524a:	f108 0019 	add.w	r0, r8, #25
   1524e:	f006 fd5b 	bl	1bd08 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   15252:	b140      	cbz	r0, 15266 <isr_scan_tgta_check+0x6e>
   15254:	f898 5016 	ldrb.w	r5, [r8, #22]
   15258:	e7e8      	b.n	1522c <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1525a:	4648      	mov	r0, r9
   1525c:	f7fe f9bc 	bl	135d8 <ull_filter_lll_lrpa_get>
   15260:	2800      	cmp	r0, #0
   15262:	d1ed      	bne.n	15240 <isr_scan_tgta_check+0x48>
   15264:	e7dc      	b.n	15220 <isr_scan_tgta_check+0x28>
			*dir_report = true;
   15266:	2401      	movs	r4, #1
   15268:	e7ea      	b.n	15240 <isr_scan_tgta_check+0x48>
		if (dir_report) {
   1526a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1526c:	2b00      	cmp	r3, #0
   1526e:	d0fa      	beq.n	15266 <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   15270:	2401      	movs	r4, #1
   15272:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   15274:	e7e4      	b.n	15240 <isr_scan_tgta_check+0x48>
   15276:	bf00      	nop

00015278 <abort_cb>:
{
   15278:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1527a:	b1d8      	cbz	r0, 152b4 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1527c:	460c      	mov	r4, r1
   1527e:	f7ff f8e3 	bl	14448 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   15282:	2800      	cmp	r0, #0
   15284:	db04      	blt.n	15290 <abort_cb+0x18>
	lll_done(param);
   15286:	4620      	mov	r0, r4
}
   15288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1528c:	f7fe be46 	b.w	13f1c <lll_done>
	LL_ASSERT(err >= 0);
   15290:	4a0c      	ldr	r2, [pc, #48]	; (152c4 <abort_cb+0x4c>)
   15292:	490d      	ldr	r1, [pc, #52]	; (152c8 <abort_cb+0x50>)
   15294:	480d      	ldr	r0, [pc, #52]	; (152cc <abort_cb+0x54>)
   15296:	f240 2379 	movw	r3, #633	; 0x279
   1529a:	f005 ff0c 	bl	1b0b6 <printk>
   1529e:	4040      	eors	r0, r0
   152a0:	f380 8811 	msr	BASEPRI, r0
   152a4:	f04f 0003 	mov.w	r0, #3
   152a8:	df02      	svc	2
	lll_done(param);
   152aa:	4620      	mov	r0, r4
}
   152ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   152b0:	f7fe be34 	b.w	13f1c <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   152b4:	4806      	ldr	r0, [pc, #24]	; (152d0 <abort_cb+0x58>)
   152b6:	f000 fe81 	bl	15fbc <radio_isr_set>
}
   152ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   152be:	f000 bf77 	b.w	161b0 <radio_disable>
   152c2:	bf00      	nop
   152c4:	00020ea4 	.word	0x00020ea4
   152c8:	00020dcc 	.word	0x00020dcc
   152cc:	000203b4 	.word	0x000203b4
   152d0:	000151a9 	.word	0x000151a9

000152d4 <lll_scan_init>:
}
   152d4:	2000      	movs	r0, #0
   152d6:	4770      	bx	lr

000152d8 <lll_scan_reset>:
   152d8:	2000      	movs	r0, #0
   152da:	4770      	bx	lr

000152dc <lll_scan_prepare>:
{
   152dc:	b510      	push	{r4, lr}
   152de:	b082      	sub	sp, #8
   152e0:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   152e2:	f7ff f899 	bl	14418 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   152e6:	2800      	cmp	r0, #0
   152e8:	db19      	blt.n	1531e <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   152ea:	4a13      	ldr	r2, [pc, #76]	; (15338 <lll_scan_prepare+0x5c>)
   152ec:	4913      	ldr	r1, [pc, #76]	; (1533c <lll_scan_prepare+0x60>)
   152ee:	4814      	ldr	r0, [pc, #80]	; (15340 <lll_scan_prepare+0x64>)
   152f0:	9400      	str	r4, [sp, #0]
   152f2:	2300      	movs	r3, #0
   152f4:	f7f9 f94e 	bl	e594 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   152f8:	b108      	cbz	r0, 152fe <lll_scan_prepare+0x22>
   152fa:	3077      	adds	r0, #119	; 0x77
   152fc:	d101      	bne.n	15302 <lll_scan_prepare+0x26>
}
   152fe:	b002      	add	sp, #8
   15300:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   15302:	4a10      	ldr	r2, [pc, #64]	; (15344 <lll_scan_prepare+0x68>)
   15304:	4910      	ldr	r1, [pc, #64]	; (15348 <lll_scan_prepare+0x6c>)
   15306:	4811      	ldr	r0, [pc, #68]	; (1534c <lll_scan_prepare+0x70>)
   15308:	238b      	movs	r3, #139	; 0x8b
   1530a:	f005 fed4 	bl	1b0b6 <printk>
   1530e:	4040      	eors	r0, r0
   15310:	f380 8811 	msr	BASEPRI, r0
   15314:	f04f 0003 	mov.w	r0, #3
   15318:	df02      	svc	2
}
   1531a:	b002      	add	sp, #8
   1531c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1531e:	4a09      	ldr	r2, [pc, #36]	; (15344 <lll_scan_prepare+0x68>)
   15320:	490b      	ldr	r1, [pc, #44]	; (15350 <lll_scan_prepare+0x74>)
   15322:	480a      	ldr	r0, [pc, #40]	; (1534c <lll_scan_prepare+0x70>)
   15324:	2388      	movs	r3, #136	; 0x88
   15326:	f005 fec6 	bl	1b0b6 <printk>
   1532a:	4040      	eors	r0, r0
   1532c:	f380 8811 	msr	BASEPRI, r0
   15330:	f04f 0003 	mov.w	r0, #3
   15334:	df02      	svc	2
   15336:	e7d8      	b.n	152ea <lll_scan_prepare+0xe>
   15338:	00014ef1 	.word	0x00014ef1
   1533c:	00015279 	.word	0x00015279
   15340:	000150ed 	.word	0x000150ed
   15344:	00020ea4 	.word	0x00020ea4
   15348:	00020e90 	.word	0x00020e90
   1534c:	000203b4 	.word	0x000203b4
   15350:	00020dcc 	.word	0x00020dcc

00015354 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   15354:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   15358:	f01c 0f08 	tst.w	ip, #8
   1535c:	d002      	beq.n	15364 <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1535e:	b162      	cbz	r2, 1537a <lll_scan_isr_rx_check+0x26>
{
   15360:	2001      	movs	r0, #1
}
   15362:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   15364:	2a00      	cmp	r2, #0
   15366:	d0fb      	beq.n	15360 <lll_scan_isr_rx_check+0xc>
{
   15368:	b510      	push	{r4, lr}
   1536a:	4604      	mov	r4, r0
   1536c:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   1536e:	4619      	mov	r1, r3
   15370:	f7fe fa42 	bl	137f8 <ull_filter_lll_rl_idx_allowed>
   15374:	b120      	cbz	r0, 15380 <lll_scan_isr_rx_check+0x2c>
{
   15376:	2001      	movs	r0, #1
}
   15378:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   1537a:	4618      	mov	r0, r3
   1537c:	f7fe ba0c 	b.w	13798 <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   15380:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   15382:	071b      	lsls	r3, r3, #28
   15384:	d4f7      	bmi.n	15376 <lll_scan_isr_rx_check+0x22>
}
   15386:	bd10      	pop	{r4, pc}

00015388 <lll_scan_prepare_connect_req>:
{
   15388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1538c:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   15390:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   15392:	01ad      	lsls	r5, r5, #6
   15394:	f005 0540 	and.w	r5, r5, #64	; 0x40
   15398:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   1539c:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   153a0:	780b      	ldrb	r3, [r1, #0]
   153a2:	f003 0310 	and.w	r3, r3, #16
{
   153a6:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   153a8:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   153aa:	2322      	movs	r3, #34	; 0x22
   153ac:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   153ae:	700d      	strb	r5, [r1, #0]
{
   153b0:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   153b2:	9908      	ldr	r1, [sp, #32]
   153b4:	2206      	movs	r2, #6
{
   153b6:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   153b8:	1ca0      	adds	r0, r4, #2
   153ba:	f006 fcb6 	bl	1bd2a <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   153be:	9906      	ldr	r1, [sp, #24]
   153c0:	2206      	movs	r2, #6
   153c2:	f104 0008 	add.w	r0, r4, #8
   153c6:	f006 fcb0 	bl	1bd2a <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   153ca:	2204      	movs	r2, #4
   153cc:	18b1      	adds	r1, r6, r2
   153ce:	f104 000e 	add.w	r0, r4, #14
   153d2:	f006 fcaa 	bl	1bd2a <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   153d6:	2203      	movs	r2, #3
   153d8:	f106 0108 	add.w	r1, r6, #8
   153dc:	f104 0012 	add.w	r0, r4, #18
   153e0:	f006 fca3 	bl	1bd2a <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   153e4:	2301      	movs	r3, #1
   153e6:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   153e8:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   153ea:	f001 f967 	bl	166bc <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   153ee:	f1b8 0f00 	cmp.w	r8, #0
   153f2:	d044      	beq.n	1547e <lll_scan_prepare_connect_req+0xf6>
   153f4:	f008 0203 	and.w	r2, r8, #3
   153f8:	322b      	adds	r2, #43	; 0x2b
   153fa:	00d2      	lsls	r2, r2, #3
   153fc:	f3c8 0840 	ubfx	r8, r8, #1, #1
   15400:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   15404:	693b      	ldr	r3, [r7, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   15406:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   1540a:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   1540c:	b393      	cbz	r3, 15474 <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1540e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15412:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   15416:	2b00      	cmp	r3, #0
   15418:	db01      	blt.n	1541e <lll_scan_prepare_connect_req+0x96>
   1541a:	4293      	cmp	r3, r2
   1541c:	d201      	bcs.n	15422 <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   1541e:	442b      	add	r3, r5
   15420:	e7f9      	b.n	15416 <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   15422:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   15424:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   15426:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   15428:	4b16      	ldr	r3, [pc, #88]	; (15484 <lll_scan_prepare_connect_req+0xfc>)
   1542a:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   1542e:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   15430:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   15432:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   15434:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   15436:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   15438:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1543a:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   1543c:	8abb      	ldrh	r3, [r7, #20]
   1543e:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   15440:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   15442:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   15444:	f106 0118 	add.w	r1, r6, #24
   15448:	2205      	movs	r2, #5
   1544a:	f104 001e 	add.w	r0, r4, #30
   1544e:	f006 fc6c 	bl	1bd2a <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   15452:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   15456:	7fb2      	ldrb	r2, [r6, #30]
   15458:	f362 0304 	bfi	r3, r2, #0, #5
   1545c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   15460:	f7ff f810 	bl	14484 <lll_clock_sca_local_get>
   15464:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   15468:	f360 1347 	bfi	r3, r0, #5, #3
   1546c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   15470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   15474:	9909      	ldr	r1, [sp, #36]	; 0x24
   15476:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   15478:	75a3      	strb	r3, [r4, #22]
   1547a:	75e3      	strb	r3, [r4, #23]
   1547c:	e7dc      	b.n	15438 <lll_scan_prepare_connect_req+0xb0>
   1547e:	f44f 78b0 	mov.w	r8, #352	; 0x160
   15482:	e7bf      	b.n	15404 <lll_scan_prepare_connect_req+0x7c>
   15484:	d1b71759 	.word	0xd1b71759

00015488 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   15488:	b538      	push	{r3, r4, r5, lr}
   1548a:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1548c:	f7fe fe1e 	bl	140cc <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   15490:	f7f8 fe4c 	bl	e12c <ull_event_done_extra_get>
	LL_ASSERT(e);
   15494:	4604      	mov	r4, r0
   15496:	b190      	cbz	r0, 154be <isr_done+0x36>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   15498:	4910      	ldr	r1, [pc, #64]	; (154dc <isr_done+0x54>)
	e->trx_cnt = trx_cnt;
   1549a:	4a11      	ldr	r2, [pc, #68]	; (154e0 <isr_done+0x58>)
	e->crc_valid = crc_valid;
   1549c:	7923      	ldrb	r3, [r4, #4]
   1549e:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   154a0:	8812      	ldrh	r2, [r2, #0]
   154a2:	8062      	strh	r2, [r4, #2]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   154a4:	4a0f      	ldr	r2, [pc, #60]	; (154e4 <isr_done+0x5c>)
	e->crc_valid = crc_valid;
   154a6:	f360 0300 	bfi	r3, r0, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   154aa:	2101      	movs	r1, #1
	e->crc_valid = crc_valid;
   154ac:	7123      	strb	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   154ae:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   154b0:	7813      	ldrb	r3, [r2, #0]
   154b2:	7163      	strb	r3, [r4, #5]
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   154b4:	4628      	mov	r0, r5
}
   154b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   154ba:	f7fe be15 	b.w	140e8 <lll_isr_cleanup>
	LL_ASSERT(e);
   154be:	4a0a      	ldr	r2, [pc, #40]	; (154e8 <isr_done+0x60>)
   154c0:	490a      	ldr	r1, [pc, #40]	; (154ec <isr_done+0x64>)
   154c2:	480b      	ldr	r0, [pc, #44]	; (154f0 <isr_done+0x68>)
   154c4:	f240 3317 	movw	r3, #791	; 0x317
   154c8:	f005 fdf5 	bl	1b0b6 <printk>
   154cc:	4040      	eors	r0, r0
   154ce:	f380 8811 	msr	BASEPRI, r0
   154d2:	f04f 0003 	mov.w	r0, #3
   154d6:	df02      	svc	2
   154d8:	e7de      	b.n	15498 <isr_done+0x10>
   154da:	bf00      	nop
   154dc:	20002dbd 	.word	0x20002dbd
   154e0:	20002d5a 	.word	0x20002d5a
   154e4:	20002dbe 	.word	0x20002dbe
   154e8:	00020ef0 	.word	0x00020ef0
   154ec:	00020f3c 	.word	0x00020f3c
   154f0:	000203b4 	.word	0x000203b4

000154f4 <lll_conn_init>:
{
   154f4:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   154f6:	f000 feaf 	bl	16258 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   154fa:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   154fc:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   154fe:	2101      	movs	r1, #1
   15500:	f361 0201 	bfi	r2, r1, #0, #2
}
   15504:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   15506:	701a      	strb	r2, [r3, #0]
}
   15508:	bd08      	pop	{r3, pc}
   1550a:	bf00      	nop

0001550c <lll_conn_reset>:
}
   1550c:	2000      	movs	r0, #0
   1550e:	4770      	bx	lr

00015510 <lll_conn_flush>:
}
   15510:	4770      	bx	lr
   15512:	bf00      	nop

00015514 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   15514:	4805      	ldr	r0, [pc, #20]	; (1552c <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   15516:	4906      	ldr	r1, [pc, #24]	; (15530 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   15518:	4a06      	ldr	r2, [pc, #24]	; (15534 <lll_conn_prepare_reset+0x20>)
{
   1551a:	b410      	push	{r4}
	trx_cnt = 0U;
   1551c:	2300      	movs	r3, #0
   1551e:	4c06      	ldr	r4, [pc, #24]	; (15538 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   15520:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   15522:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   15524:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   15526:	8023      	strh	r3, [r4, #0]
}
   15528:	bc10      	pop	{r4}
   1552a:	4770      	bx	lr
   1552c:	20002dbd 	.word	0x20002dbd
   15530:	20002dbc 	.word	0x20002dbc
   15534:	20002dbe 	.word	0x20002dbe
   15538:	20002d5a 	.word	0x20002d5a

0001553c <lll_conn_abort_cb>:
{
   1553c:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1553e:	b1e8      	cbz	r0, 1557c <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   15540:	460d      	mov	r5, r1
   15542:	4604      	mov	r4, r0
   15544:	f7fe ff80 	bl	14448 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   15548:	2800      	cmp	r0, #0
   1554a:	db0a      	blt.n	15562 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   1554c:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1554e:	8923      	ldrh	r3, [r4, #8]
   15550:	8a51      	ldrh	r1, [r2, #18]
   15552:	3301      	adds	r3, #1
   15554:	440b      	add	r3, r1
   15556:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   15558:	4628      	mov	r0, r5
}
   1555a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1555e:	f7fe bcdd 	b.w	13f1c <lll_done>
	LL_ASSERT(err >= 0);
   15562:	4a0a      	ldr	r2, [pc, #40]	; (1558c <lll_conn_abort_cb+0x50>)
   15564:	490a      	ldr	r1, [pc, #40]	; (15590 <lll_conn_abort_cb+0x54>)
   15566:	480b      	ldr	r0, [pc, #44]	; (15594 <lll_conn_abort_cb+0x58>)
   15568:	23aa      	movs	r3, #170	; 0xaa
   1556a:	f005 fda4 	bl	1b0b6 <printk>
   1556e:	4040      	eors	r0, r0
   15570:	f380 8811 	msr	BASEPRI, r0
   15574:	f04f 0003 	mov.w	r0, #3
   15578:	df02      	svc	2
   1557a:	e7e7      	b.n	1554c <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   1557c:	4806      	ldr	r0, [pc, #24]	; (15598 <lll_conn_abort_cb+0x5c>)
   1557e:	f000 fd1d 	bl	15fbc <radio_isr_set>
}
   15582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   15586:	f000 be13 	b.w	161b0 <radio_disable>
   1558a:	bf00      	nop
   1558c:	00020ef0 	.word	0x00020ef0
   15590:	00020dcc 	.word	0x00020dcc
   15594:	000203b4 	.word	0x000203b4
   15598:	00015489 	.word	0x00015489

0001559c <lll_conn_rx_pkt_set>:
{
   1559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1559e:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   155a0:	2001      	movs	r0, #1
   155a2:	f7f8 fcc5 	bl	df30 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   155a6:	4607      	mov	r7, r0
   155a8:	b350      	cbz	r0, 15600 <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   155aa:	f894 502b 	ldrb.w	r5, [r4, #43]	; 0x2b
	max_rx_octets = lll->max_rx_octets;
   155ae:	8ca6      	ldrh	r6, [r4, #36]	; 0x24
	phy = lll->phy_rx;
   155b0:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   155b4:	2100      	movs	r1, #0
   155b6:	4628      	mov	r0, r5
   155b8:	f000 fd66 	bl	16088 <radio_phy_set>
	} else if (lll->enc_rx) {
   155bc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   155c0:	006a      	lsls	r2, r5, #1
	} else if (lll->enc_rx) {
   155c2:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   155c4:	b2f1      	uxtb	r1, r6
   155c6:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_rx) {
   155ca:	d510      	bpl.n	155ee <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   155cc:	3104      	adds	r1, #4
   155ce:	b2c9      	uxtb	r1, r1
   155d0:	2008      	movs	r0, #8
   155d2:	f000 fd9f 	bl	16114 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   155d6:	f000 fe47 	bl	16268 <radio_pkt_decrypt_get>
   155da:	4629      	mov	r1, r5
   155dc:	4602      	mov	r2, r0
   155de:	f104 0043 	add.w	r0, r4, #67	; 0x43
   155e2:	f001 f877 	bl	166d4 <radio_ccm_rx_pkt_set>
}
   155e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   155ea:	f000 bdbb 	b.w	16164 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   155ee:	2008      	movs	r0, #8
   155f0:	f000 fd90 	bl	16114 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   155f4:	f107 001c 	add.w	r0, r7, #28
}
   155f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   155fc:	f000 bdb2 	b.w	16164 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   15600:	4a06      	ldr	r2, [pc, #24]	; (1561c <lll_conn_rx_pkt_set+0x80>)
   15602:	4907      	ldr	r1, [pc, #28]	; (15620 <lll_conn_rx_pkt_set+0x84>)
   15604:	4807      	ldr	r0, [pc, #28]	; (15624 <lll_conn_rx_pkt_set+0x88>)
   15606:	f240 235a 	movw	r3, #602	; 0x25a
   1560a:	f005 fd54 	bl	1b0b6 <printk>
   1560e:	4040      	eors	r0, r0
   15610:	f380 8811 	msr	BASEPRI, r0
   15614:	f04f 0003 	mov.w	r0, #3
   15618:	df02      	svc	2
   1561a:	e7c6      	b.n	155aa <lll_conn_rx_pkt_set+0xe>
   1561c:	00020ef0 	.word	0x00020ef0
   15620:	00020e58 	.word	0x00020e58
   15624:	000203b4 	.word	0x000203b4

00015628 <lll_conn_isr_tx>:
{
   15628:	b538      	push	{r3, r4, r5, lr}
   1562a:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1562c:	f7fe fd3c 	bl	140a8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   15630:	2096      	movs	r0, #150	; 0x96
   15632:	f000 ff49 	bl	164c8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   15636:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   1563a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1563e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   15642:	f000 0007 	and.w	r0, r0, #7
   15646:	f002 0207 	and.w	r2, r2, #7
   1564a:	2100      	movs	r1, #0
   1564c:	f000 fe58 	bl	16300 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   15650:	4620      	mov	r0, r4
   15652:	f7ff ffa3 	bl	1559c <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   15656:	f000 fdcb 	bl	161f0 <radio_is_ready>
   1565a:	bb58      	cbnz	r0, 156b4 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1565c:	f001 f834 	bl	166c8 <radio_tmr_tifs_base_get>
   15660:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   15662:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   15666:	2101      	movs	r1, #1
   15668:	f000 0007 	and.w	r0, r0, #7
   1566c:	f000 fd8e 	bl	1618c <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   15670:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   15674:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   15678:	4405      	add	r5, r0
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1567a:	2b02      	cmp	r3, #2
   1567c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   15680:	d016      	beq.n	156b0 <lll_conn_isr_tx+0x88>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   15682:	2b04      	cmp	r3, #4
   15684:	bf14      	ite	ne
   15686:	2328      	movne	r3, #40	; 0x28
   15688:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1568c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   15690:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   15694:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   15698:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1569a:	f000 fd75 	bl	16188 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1569e:	1a28      	subs	r0, r5, r0
   156a0:	f000 ffe4 	bl	1666c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   156a4:	4621      	mov	r1, r4
   156a6:	480a      	ldr	r0, [pc, #40]	; (156d0 <lll_conn_isr_tx+0xa8>)
}
   156a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   156ac:	f000 bc86 	b.w	15fbc <radio_isr_set>
	switch (phy) {
   156b0:	2318      	movs	r3, #24
   156b2:	e7eb      	b.n	1568c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   156b4:	4a07      	ldr	r2, [pc, #28]	; (156d4 <lll_conn_isr_tx+0xac>)
   156b6:	4908      	ldr	r1, [pc, #32]	; (156d8 <lll_conn_isr_tx+0xb0>)
   156b8:	4808      	ldr	r0, [pc, #32]	; (156dc <lll_conn_isr_tx+0xb4>)
   156ba:	f240 2313 	movw	r3, #531	; 0x213
   156be:	f005 fcfa 	bl	1b0b6 <printk>
   156c2:	4040      	eors	r0, r0
   156c4:	f380 8811 	msr	BASEPRI, r0
   156c8:	f04f 0003 	mov.w	r0, #3
   156cc:	df02      	svc	2
   156ce:	e7c5      	b.n	1565c <lll_conn_isr_tx+0x34>
   156d0:	00015819 	.word	0x00015819
   156d4:	00020ef0 	.word	0x00020ef0
   156d8:	00020e60 	.word	0x00020e60
   156dc:	000203b4 	.word	0x000203b4

000156e0 <lll_conn_tx_pkt_set>:
{
   156e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   156e2:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   156e4:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
	max_tx_octets = lll->max_tx_octets;
   156e8:	8c46      	ldrh	r6, [r0, #34]	; 0x22
	phy = lll->phy_tx;
   156ea:	f001 0407 	and.w	r4, r1, #7
{
   156ee:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   156f0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   156f4:	4620      	mov	r0, r4
   156f6:	f000 fcc7 	bl	16088 <radio_phy_set>
	} else if (lll->enc_tx) {
   156fa:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   156fe:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   15700:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   15702:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   15706:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   15708:	d50d      	bpl.n	15726 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1570a:	3104      	adds	r1, #4
   1570c:	b2c9      	uxtb	r1, r1
   1570e:	2008      	movs	r0, #8
   15710:	f000 fd00 	bl	16114 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   15714:	4639      	mov	r1, r7
   15716:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1571a:	f001 f811 	bl	16740 <radio_ccm_tx_pkt_set>
}
   1571e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   15722:	f000 bd25 	b.w	16170 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   15726:	2008      	movs	r0, #8
   15728:	f000 fcf4 	bl	16114 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1572c:	4638      	mov	r0, r7
}
   1572e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   15732:	f000 bd1d 	b.w	16170 <radio_pkt_tx_set>
   15736:	bf00      	nop

00015738 <lll_conn_pdu_tx_prep>:
{
   15738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1573c:	4604      	mov	r4, r0
   1573e:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   15740:	aa01      	add	r2, sp, #4
   15742:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   15744:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   15746:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15748:	f7f4 fcf4 	bl	a134 <memq_peek>
	if (lll->empty || !link) {
   1574c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15750:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   15752:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   15754:	d432      	bmi.n	157bc <lll_conn_pdu_tx_prep+0x84>
   15756:	2800      	cmp	r0, #0
   15758:	d04e      	beq.n	157f8 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1575a:	9b01      	ldr	r3, [sp, #4]
   1575c:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
   15760:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   15764:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   15768:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1576c:	b913      	cbnz	r3, 15774 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1576e:	786b      	ldrb	r3, [r5, #1]
   15770:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if (lll->packet_tx_head_offset) {
   15774:	b137      	cbz	r7, 15784 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   15776:	f818 2007 	ldrb.w	r2, [r8, r7]
   1577a:	2101      	movs	r1, #1
   1577c:	f361 0201 	bfi	r2, r1, #0, #2
   15780:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   15784:	1bdb      	subs	r3, r3, r7
   15786:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   15788:	4620      	mov	r0, r4
   1578a:	f7fc fb73 	bl	11e74 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1578e:	786b      	ldrb	r3, [r5, #1]
   15790:	4283      	cmp	r3, r0
   15792:	d924      	bls.n	157de <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   15794:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   15796:	f818 3007 	ldrb.w	r3, [r8, r7]
   1579a:	f043 0310 	orr.w	r3, r3, #16
   1579e:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   157a2:	f818 3007 	ldrb.w	r3, [r8, r7]
   157a6:	f36f 1347 	bfc	r3, #5, #3
   157aa:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   157ae:	2300      	movs	r3, #0
   157b0:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   157b2:	f8c9 5000 	str.w	r5, [r9]
}
   157b6:	b003      	add	sp, #12
   157b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   157bc:	f043 0304 	orr.w	r3, r3, #4
   157c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   157c4:	f000 fd48 	bl	16258 <radio_pkt_empty_get>
   157c8:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   157ca:	b1e6      	cbz	r6, 15806 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   157cc:	7803      	ldrb	r3, [r0, #0]
   157ce:	f043 0310 	orr.w	r3, r3, #16
   157d2:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   157d4:	f8c9 5000 	str.w	r5, [r9]
}
   157d8:	b003      	add	sp, #12
   157da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   157de:	6b23      	ldr	r3, [r4, #48]	; 0x30
   157e0:	6832      	ldr	r2, [r6, #0]
   157e2:	429a      	cmp	r2, r3
			p->md = 1U;
   157e4:	f818 3007 	ldrb.w	r3, [r8, r7]
   157e8:	bf14      	ite	ne
   157ea:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   157ee:	f36f 1304 	bfceq	r3, #4, #1
   157f2:	f808 3007 	strb.w	r3, [r8, r7]
   157f6:	e7d4      	b.n	157a2 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   157f8:	f043 0304 	orr.w	r3, r3, #4
   157fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		p = (void *)radio_pkt_empty_get();
   15800:	f000 fd2a 	bl	16258 <radio_pkt_empty_get>
   15804:	4605      	mov	r5, r0
			p->md = 0U;
   15806:	782b      	ldrb	r3, [r5, #0]
   15808:	f36f 1304 	bfc	r3, #4, #1
   1580c:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1580e:	f8c9 5000 	str.w	r5, [r9]
}
   15812:	b003      	add	sp, #12
   15814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00015818 <lll_conn_isr_rx>:
{
   15818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1581c:	b082      	sub	sp, #8
   1581e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   15820:	f000 fcf0 	bl	16204 <radio_is_done>
	if (trx_done) {
   15824:	b2c0      	uxtb	r0, r0
   15826:	b950      	cbnz	r0, 1583e <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   15828:	f7fe fc46 	bl	140b8 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1582c:	48b4      	ldr	r0, [pc, #720]	; (15b00 <lll_conn_isr_rx+0x2e8>)
   1582e:	4621      	mov	r1, r4
   15830:	f000 fbc4 	bl	15fbc <radio_isr_set>
}
   15834:	b002      	add	sp, #8
   15836:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		radio_disable();
   1583a:	f000 bcb9 	b.w	161b0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1583e:	f000 fd01 	bl	16244 <radio_crc_is_valid>
   15842:	b2c6      	uxtb	r6, r0
		rssi_ready = radio_rssi_is_ready();
   15844:	f000 fde4 	bl	16410 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   15848:	f7fe fc36 	bl	140b8 <lll_isr_rx_status_reset>
	trx_cnt++;
   1584c:	4aad      	ldr	r2, [pc, #692]	; (15b04 <lll_conn_isr_rx+0x2ec>)
   1584e:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   15850:	2001      	movs	r0, #1
	trx_cnt++;
   15852:	4403      	add	r3, r0
   15854:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   15856:	f7f8 fb6b 	bl	df30 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1585a:	4605      	mov	r5, r0
   1585c:	2800      	cmp	r0, #0
   1585e:	f000 80db 	beq.w	15a18 <lll_conn_isr_rx+0x200>
	if (crc_ok) {
   15862:	2e00      	cmp	r6, #0
   15864:	d158      	bne.n	15918 <lll_conn_isr_rx+0x100>
		if (crc_expire == 0U) {
   15866:	4ba8      	ldr	r3, [pc, #672]	; (15b08 <lll_conn_isr_rx+0x2f0>)
   15868:	781f      	ldrb	r7, [r3, #0]
   1586a:	2f00      	cmp	r7, #0
   1586c:	f000 80be 	beq.w	159ec <lll_conn_isr_rx+0x1d4>
		crc_expire--;
   15870:	3f01      	subs	r7, #1
   15872:	b2ff      	uxtb	r7, r7
   15874:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   15876:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1587a:	a901      	add	r1, sp, #4
   1587c:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   1587e:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   15882:	f7ff ff59 	bl	15738 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   15886:	2f00      	cmp	r7, #0
   15888:	f040 8172 	bne.w	15b70 <lll_conn_isr_rx+0x358>
		radio_isr_set(isr_done, param);
   1588c:	489c      	ldr	r0, [pc, #624]	; (15b00 <lll_conn_isr_rx+0x2e8>)
   1588e:	4621      	mov	r1, r4
   15890:	f000 fb94 	bl	15fbc <radio_isr_set>
		} else if (!lll->role) {
   15894:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15898:	2b00      	cmp	r3, #0
   1589a:	f280 8124 	bge.w	15ae6 <lll_conn_isr_rx+0x2ce>
	pdu_data_tx->sn = lll->sn;
   1589e:	9901      	ldr	r1, [sp, #4]
   158a0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
	pdu_data_tx->nesn = lll->nesn;
   158a4:	780b      	ldrb	r3, [r1, #0]
   158a6:	f023 000c 	bic.w	r0, r3, #12
   158aa:	f3c2 0340 	ubfx	r3, r2, #1, #1
   158ae:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   158b0:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   158b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   158b8:	4303      	orrs	r3, r0
   158ba:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   158bc:	4620      	mov	r0, r4
   158be:	f7ff ff0f 	bl	156e0 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   158c2:	f000 fc95 	bl	161f0 <radio_is_ready>
   158c6:	2800      	cmp	r0, #0
   158c8:	f040 80e7 	bne.w	15a9a <lll_conn_isr_rx+0x282>
	if (!radio_tmr_aa_restore()) {
   158cc:	f000 fee8 	bl	166a0 <radio_tmr_aa_restore>
   158d0:	2800      	cmp	r0, #0
   158d2:	f000 8081 	beq.w	159d8 <lll_conn_isr_rx+0x1c0>
	if (tx_release) {
   158d6:	2e00      	cmp	r6, #0
   158d8:	f000 8085 	beq.w	159e6 <lll_conn_isr_rx+0x1ce>
		LL_ASSERT(lll->handle != 0xFFFF);
   158dc:	89a0      	ldrh	r0, [r4, #12]
   158de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   158e2:	4298      	cmp	r0, r3
   158e4:	f000 80f0 	beq.w	15ac8 <lll_conn_isr_rx+0x2b0>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   158e8:	4631      	mov	r1, r6
   158ea:	f7fc f8d3 	bl	11a94 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   158ee:	b177      	cbz	r7, 1590e <lll_conn_isr_rx+0xf6>
		if (lll->enc_rx) {
   158f0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   158f4:	071b      	lsls	r3, r3, #28
   158f6:	f100 80de 	bmi.w	15ab6 <lll_conn_isr_rx+0x29e>
		ull_pdu_rx_alloc();
   158fa:	f7f8 fb37 	bl	df6c <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   158fe:	2303      	movs	r3, #3
   15900:	712b      	strb	r3, [r5, #4]
		node_rx->hdr.handle = lll->handle;
   15902:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   15904:	6828      	ldr	r0, [r5, #0]
		node_rx->hdr.handle = lll->handle;
   15906:	80eb      	strh	r3, [r5, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   15908:	4629      	mov	r1, r5
   1590a:	f7f8 fb45 	bl	df98 <ull_rx_put>
		ull_rx_sched();
   1590e:	f7f8 fb53 	bl	dfb8 <ull_rx_sched>
}
   15912:	b002      	add	sp, #8
   15914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (lll->enc_rx) {
   15918:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1591c:	0718      	lsls	r0, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   1591e:	f105 071c 	add.w	r7, r5, #28
	if (lll->enc_rx) {
   15922:	f100 80b0 	bmi.w	15a86 <lll_conn_isr_rx+0x26e>
	if (pdu_data_rx->nesn != lll->sn) {
   15926:	7f2a      	ldrb	r2, [r5, #28]
   15928:	f003 0101 	and.w	r1, r3, #1
   1592c:	f3c2 0080 	ubfx	r0, r2, #2, #1
   15930:	4288      	cmp	r0, r1
   15932:	f000 8081 	beq.w	15a38 <lll_conn_isr_rx+0x220>
		lll->sn++;
   15936:	f081 0101 	eor.w	r1, r1, #1
   1593a:	f361 0300 	bfi	r3, r1, #0, #1
		if (!lll->empty) {
   1593e:	f013 0804 	ands.w	r8, r3, #4
		lll->sn++;
   15942:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (!lll->empty) {
   15946:	b2da      	uxtb	r2, r3
   15948:	f040 80f0 	bne.w	15b2c <lll_conn_isr_rx+0x314>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1594c:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
   15950:	aa01      	add	r2, sp, #4
   15952:	f7f4 fbef 	bl	a134 <memq_peek>
		if (link) {
   15956:	4606      	mov	r6, r0
   15958:	2800      	cmp	r0, #0
   1595a:	f000 80fe 	beq.w	15b5a <lll_conn_isr_rx+0x342>
			pdu_data_tx = (void *)(tx->pdu +
   1595e:	9b01      	ldr	r3, [sp, #4]
					       lll->packet_tx_head_offset);
   15960:	f894 a041 	ldrb.w	sl, [r4, #65]	; 0x41
			pdu_data_tx = (void *)(tx->pdu +
   15964:	f103 0904 	add.w	r9, r3, #4
   15968:	eb09 030a 	add.w	r3, r9, sl
			pdu_data_tx_len = pdu_data_tx->len;
   1596c:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   1596e:	b152      	cbz	r2, 15986 <lll_conn_isr_rx+0x16e>
				if (lll->enc_tx) {
   15970:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15974:	06d9      	lsls	r1, r3, #27
   15976:	d506      	bpl.n	15986 <lll_conn_isr_rx+0x16e>
					lll->ccm_tx.counter++;
   15978:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1597a:	3301      	adds	r3, #1
   1597c:	6763      	str	r3, [r4, #116]	; 0x74
   1597e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   15980:	f143 0300 	adc.w	r3, r3, #0
   15984:	67a3      	str	r3, [r4, #120]	; 0x78
			if (offset < lll->packet_tx_head_len) {
   15986:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1598a:	4452      	add	r2, sl
   1598c:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1598e:	429a      	cmp	r2, r3
   15990:	f0c0 80ea 	bcc.w	15b68 <lll_conn_isr_rx+0x350>
			} else if (offset == lll->packet_tx_head_len) {
   15994:	f000 8115 	beq.w	15bc2 <lll_conn_isr_rx+0x3aa>
				LL_ASSERT(0);
   15998:	4a5c      	ldr	r2, [pc, #368]	; (15b0c <lll_conn_isr_rx+0x2f4>)
   1599a:	495d      	ldr	r1, [pc, #372]	; (15b10 <lll_conn_isr_rx+0x2f8>)
   1599c:	485d      	ldr	r0, [pc, #372]	; (15b14 <lll_conn_isr_rx+0x2fc>)
   1599e:	f240 33a3 	movw	r3, #931	; 0x3a3
   159a2:	f005 fb88 	bl	1b0b6 <printk>
   159a6:	4040      	eors	r0, r0
   159a8:	f380 8811 	msr	BASEPRI, r0
   159ac:	f04f 0003 	mov.w	r0, #3
   159b0:	df02      	svc	2
	tx_release = NULL;
   159b2:	2600      	movs	r6, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   159b4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   159b8:	2b00      	cmp	r3, #0
   159ba:	f2c0 80fe 	blt.w	15bba <lll_conn_isr_rx+0x3a2>
			    !pdu_data_rx->md) {
   159be:	7f2a      	ldrb	r2, [r5, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   159c0:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   159c2:	bf58      	it	pl
   159c4:	f819 800a 	ldrbpl.w	r8, [r9, sl]
   159c8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   159cc:	bf5c      	itt	pl
   159ce:	f088 0810 	eorpl.w	r8, r8, #16
   159d2:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   159d6:	e032      	b.n	15a3e <lll_conn_isr_rx+0x226>
		radio_tmr_aa_save(radio_tmr_aa_get());
   159d8:	f000 fe56 	bl	16688 <radio_tmr_aa_get>
   159dc:	f000 fe5a 	bl	16694 <radio_tmr_aa_save>
	if (tx_release) {
   159e0:	2e00      	cmp	r6, #0
   159e2:	f47f af7b 	bne.w	158dc <lll_conn_isr_rx+0xc4>
	if (is_rx_enqueue) {
   159e6:	2f00      	cmp	r7, #0
   159e8:	d182      	bne.n	158f0 <lll_conn_isr_rx+0xd8>
   159ea:	e792      	b.n	15912 <lll_conn_isr_rx+0xfa>
		crc_expire--;
   159ec:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   159ee:	a901      	add	r1, sp, #4
   159f0:	4620      	mov	r0, r4
		crc_expire--;
   159f2:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   159f4:	f7ff fea0 	bl	15738 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   159f8:	2096      	movs	r0, #150	; 0x96
   159fa:	f000 fd65 	bl	164c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   159fe:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   15a02:	f000 0007 	and.w	r0, r0, #7
   15a06:	f000 fc33 	bl	16270 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   15a0a:	4843      	ldr	r0, [pc, #268]	; (15b18 <lll_conn_isr_rx+0x300>)
   15a0c:	4621      	mov	r1, r4
   15a0e:	f000 fad5 	bl	15fbc <radio_isr_set>
		radio_tmr_end_capture();
   15a12:	f000 fe4b 	bl	166ac <radio_tmr_end_capture>
   15a16:	e742      	b.n	1589e <lll_conn_isr_rx+0x86>
	LL_ASSERT(node_rx);
   15a18:	4a3c      	ldr	r2, [pc, #240]	; (15b0c <lll_conn_isr_rx+0x2f4>)
   15a1a:	4940      	ldr	r1, [pc, #256]	; (15b1c <lll_conn_isr_rx+0x304>)
   15a1c:	483d      	ldr	r0, [pc, #244]	; (15b14 <lll_conn_isr_rx+0x2fc>)
   15a1e:	23f2      	movs	r3, #242	; 0xf2
   15a20:	f005 fb49 	bl	1b0b6 <printk>
   15a24:	4040      	eors	r0, r0
   15a26:	f380 8811 	msr	BASEPRI, r0
   15a2a:	f04f 0003 	mov.w	r0, #3
   15a2e:	df02      	svc	2
	if (crc_ok) {
   15a30:	2e00      	cmp	r6, #0
   15a32:	f43f af18 	beq.w	15866 <lll_conn_isr_rx+0x4e>
   15a36:	e76f      	b.n	15918 <lll_conn_isr_rx+0x100>
	is_done = 0U;
   15a38:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   15a3c:	4646      	mov	r6, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   15a3e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   15a42:	f3c3 0140 	ubfx	r1, r3, #1, #1
   15a46:	428a      	cmp	r2, r1
   15a48:	f000 8094 	beq.w	15b74 <lll_conn_isr_rx+0x35c>
	is_rx_enqueue = 0U;
   15a4c:	2700      	movs	r7, #0
		crc_expire = 0U;
   15a4e:	4a2e      	ldr	r2, [pc, #184]	; (15b08 <lll_conn_isr_rx+0x2f0>)
   15a50:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   15a52:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   15a56:	4b32      	ldr	r3, [pc, #200]	; (15b20 <lll_conn_isr_rx+0x308>)
		crc_expire = 0U;
   15a58:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   15a5a:	4620      	mov	r0, r4
		crc_valid = 1U;
   15a5c:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   15a5e:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   15a60:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   15a62:	f7ff fe69 	bl	15738 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   15a66:	f1b8 0f00 	cmp.w	r8, #0
   15a6a:	f47f af0f 	bne.w	1588c <lll_conn_isr_rx+0x74>
   15a6e:	7f2b      	ldrb	r3, [r5, #28]
   15a70:	06d9      	lsls	r1, r3, #27
   15a72:	d4c1      	bmi.n	159f8 <lll_conn_isr_rx+0x1e0>
			      (pdu_data_tx->md == 0) &&
   15a74:	9b01      	ldr	r3, [sp, #4]
   15a76:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   15a78:	06d2      	lsls	r2, r2, #27
   15a7a:	d4bd      	bmi.n	159f8 <lll_conn_isr_rx+0x1e0>
			      (pdu_data_tx->md == 0) &&
   15a7c:	785b      	ldrb	r3, [r3, #1]
   15a7e:	2b00      	cmp	r3, #0
   15a80:	f43f af04 	beq.w	1588c <lll_conn_isr_rx+0x74>
   15a84:	e7b8      	b.n	159f8 <lll_conn_isr_rx+0x1e0>
		pkt_decrypt = radio_pkt_decrypt_get();
   15a86:	f000 fbef 	bl	16268 <radio_pkt_decrypt_get>
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   15a8a:	2203      	movs	r2, #3
		pkt_decrypt = radio_pkt_decrypt_get();
   15a8c:	4601      	mov	r1, r0
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   15a8e:	4638      	mov	r0, r7
   15a90:	f006 f94b 	bl	1bd2a <memcpy>
   15a94:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15a98:	e745      	b.n	15926 <lll_conn_isr_rx+0x10e>
	LL_ASSERT(!radio_is_ready());
   15a9a:	4a1c      	ldr	r2, [pc, #112]	; (15b0c <lll_conn_isr_rx+0x2f4>)
   15a9c:	4921      	ldr	r1, [pc, #132]	; (15b24 <lll_conn_isr_rx+0x30c>)
   15a9e:	481d      	ldr	r0, [pc, #116]	; (15b14 <lll_conn_isr_rx+0x2fc>)
   15aa0:	f240 1369 	movw	r3, #361	; 0x169
   15aa4:	f005 fb07 	bl	1b0b6 <printk>
   15aa8:	4040      	eors	r0, r0
   15aaa:	f380 8811 	msr	BASEPRI, r0
   15aae:	f04f 0003 	mov.w	r0, #3
   15ab2:	df02      	svc	2
   15ab4:	e70a      	b.n	158cc <lll_conn_isr_rx+0xb4>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   15ab6:	f000 fbd7 	bl	16268 <radio_pkt_decrypt_get>
			memcpy((void *)pdu_data_rx->lldata,
   15aba:	7f6a      	ldrb	r2, [r5, #29]
   15abc:	1cc1      	adds	r1, r0, #3
   15abe:	f105 001f 	add.w	r0, r5, #31
   15ac2:	f006 f932 	bl	1bd2a <memcpy>
   15ac6:	e718      	b.n	158fa <lll_conn_isr_rx+0xe2>
		LL_ASSERT(lll->handle != 0xFFFF);
   15ac8:	4a10      	ldr	r2, [pc, #64]	; (15b0c <lll_conn_isr_rx+0x2f4>)
   15aca:	4917      	ldr	r1, [pc, #92]	; (15b28 <lll_conn_isr_rx+0x310>)
   15acc:	4811      	ldr	r0, [pc, #68]	; (15b14 <lll_conn_isr_rx+0x2fc>)
   15ace:	f44f 73bc 	mov.w	r3, #376	; 0x178
   15ad2:	f005 faf0 	bl	1b0b6 <printk>
   15ad6:	4040      	eors	r0, r0
   15ad8:	f380 8811 	msr	BASEPRI, r0
   15adc:	f04f 0003 	mov.w	r0, #3
   15ae0:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   15ae2:	89a0      	ldrh	r0, [r4, #12]
   15ae4:	e700      	b.n	158e8 <lll_conn_isr_rx+0xd0>
			radio_disable();
   15ae6:	f000 fb63 	bl	161b0 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   15aea:	f000 fb81 	bl	161f0 <radio_is_ready>
   15aee:	2800      	cmp	r0, #0
   15af0:	d155      	bne.n	15b9e <lll_conn_isr_rx+0x386>
			lll->empty = is_empty_pdu_tx_retry;
   15af2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15af6:	f369 0382 	bfi	r3, r9, #2, #1
   15afa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			goto lll_conn_isr_rx_exit;
   15afe:	e6e5      	b.n	158cc <lll_conn_isr_rx+0xb4>
   15b00:	00015489 	.word	0x00015489
   15b04:	20002d5a 	.word	0x20002d5a
   15b08:	20002dbc 	.word	0x20002dbc
   15b0c:	00020ef0 	.word	0x00020ef0
   15b10:	00020414 	.word	0x00020414
   15b14:	000203b4 	.word	0x000203b4
   15b18:	00015629 	.word	0x00015629
   15b1c:	00020e58 	.word	0x00020e58
   15b20:	20002dbd 	.word	0x20002dbd
   15b24:	00020e60 	.word	0x00020e60
   15b28:	00020f48 	.word	0x00020f48
			lll->empty = 0;
   15b2c:	f36f 0282 	bfc	r2, #2, #1
   15b30:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			pdu_data_tx = (void *)radio_pkt_empty_get();
   15b34:	f000 fb90 	bl	16258 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   15b38:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15b3c:	2b00      	cmp	r3, #0
   15b3e:	db0c      	blt.n	15b5a <lll_conn_isr_rx+0x342>
			    !pdu_data_rx->md) {
   15b40:	7f2a      	ldrb	r2, [r5, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   15b42:	f012 0610 	ands.w	r6, r2, #16
   15b46:	d109      	bne.n	15b5c <lll_conn_isr_rx+0x344>
				*is_done = !pdu_data_tx->md;
   15b48:	f890 8000 	ldrb.w	r8, [r0]
   15b4c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15b50:	f088 0810 	eor.w	r8, r8, #16
   15b54:	f3c8 1800 	ubfx	r8, r8, #4, #1
   15b58:	e771      	b.n	15a3e <lll_conn_isr_rx+0x226>
   15b5a:	7f2a      	ldrb	r2, [r5, #28]
   15b5c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	is_done = 0U;
   15b60:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   15b64:	4646      	mov	r6, r8
   15b66:	e76a      	b.n	15a3e <lll_conn_isr_rx+0x226>
				lll->packet_tx_head_offset = offset;
   15b68:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	tx_release = NULL;
   15b6c:	2600      	movs	r6, #0
   15b6e:	e721      	b.n	159b4 <lll_conn_isr_rx+0x19c>
	is_rx_enqueue = 0U;
   15b70:	4637      	mov	r7, r6
   15b72:	e741      	b.n	159f8 <lll_conn_isr_rx+0x1e0>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   15b74:	2003      	movs	r0, #3
   15b76:	f7f8 f9db 	bl	df30 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   15b7a:	b168      	cbz	r0, 15b98 <lll_conn_isr_rx+0x380>
		lll->nesn++;
   15b7c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15b80:	f083 0302 	eor.w	r3, r3, #2
   15b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if (pdu_data_rx->len != 0) {
   15b88:	7f6b      	ldrb	r3, [r5, #29]
   15b8a:	b12b      	cbz	r3, 15b98 <lll_conn_isr_rx+0x380>
			if (lll->enc_rx) {
   15b8c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15b90:	0718      	lsls	r0, r3, #28
   15b92:	d424      	bmi.n	15bde <lll_conn_isr_rx+0x3c6>
			*is_rx_enqueue = 1U;
   15b94:	2701      	movs	r7, #1
   15b96:	e75a      	b.n	15a4e <lll_conn_isr_rx+0x236>
   15b98:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15b9c:	e756      	b.n	15a4c <lll_conn_isr_rx+0x234>
			LL_ASSERT(!radio_is_ready());
   15b9e:	4a36      	ldr	r2, [pc, #216]	; (15c78 <lll_conn_isr_rx+0x460>)
   15ba0:	4936      	ldr	r1, [pc, #216]	; (15c7c <lll_conn_isr_rx+0x464>)
   15ba2:	4837      	ldr	r0, [pc, #220]	; (15c80 <lll_conn_isr_rx+0x468>)
   15ba4:	f44f 7398 	mov.w	r3, #304	; 0x130
   15ba8:	f005 fa85 	bl	1b0b6 <printk>
   15bac:	4040      	eors	r0, r0
   15bae:	f380 8811 	msr	BASEPRI, r0
   15bb2:	f04f 0003 	mov.w	r0, #3
   15bb6:	df02      	svc	2
   15bb8:	e79b      	b.n	15af2 <lll_conn_isr_rx+0x2da>
   15bba:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15bbe:	7f2a      	ldrb	r2, [r5, #28]
   15bc0:	e73d      	b.n	15a3e <lll_conn_isr_rx+0x226>
				lll->packet_tx_head_len = 0;
   15bc2:	2200      	movs	r2, #0
   15bc4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
				memq_dequeue(lll->memq_tx.tail,
   15bc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   15bca:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   15bce:	f7f4 fab9 	bl	a144 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   15bd2:	9b01      	ldr	r3, [sp, #4]
   15bd4:	681a      	ldr	r2, [r3, #0]
   15bd6:	6032      	str	r2, [r6, #0]
				tx->next = link;
   15bd8:	601e      	str	r6, [r3, #0]
				*tx_release = tx;
   15bda:	9e01      	ldr	r6, [sp, #4]
				FORCE_MD_CNT_SET();
   15bdc:	e6ea      	b.n	159b4 <lll_conn_isr_rx+0x19c>
				done = radio_ccm_is_done();
   15bde:	f000 fdd7 	bl	16790 <radio_ccm_is_done>
				LL_ASSERT(done);
   15be2:	2800      	cmp	r0, #0
   15be4:	d03a      	beq.n	15c5c <lll_conn_isr_rx+0x444>
				bool mic_failure = !radio_ccm_mic_is_valid();
   15be6:	f000 fdf5 	bl	167d4 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   15bea:	bb28      	cbnz	r0, 15c38 <lll_conn_isr_rx+0x420>
				    lll->ccm_rx.counter == 0 &&
   15bec:	f8d4 2053 	ldr.w	r2, [r4, #83]	; 0x53
   15bf0:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
				if (mic_failure &&
   15bf4:	4313      	orrs	r3, r2
   15bf6:	d104      	bne.n	15c02 <lll_conn_isr_rx+0x3ea>
				    (pdu_data_rx->ll_id ==
   15bf8:	7f2b      	ldrb	r3, [r5, #28]
				    lll->ccm_rx.counter == 0 &&
   15bfa:	f003 0303 	and.w	r3, r3, #3
   15bfe:	2b03      	cmp	r3, #3
   15c00:	d004      	beq.n	15c0c <lll_conn_isr_rx+0x3f4>
					mic_state = LLL_CONN_MIC_FAIL;
   15c02:	4b20      	ldr	r3, [pc, #128]	; (15c84 <lll_conn_isr_rx+0x46c>)
   15c04:	2202      	movs	r2, #2
   15c06:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   15c08:	2700      	movs	r7, #0
   15c0a:	e65f      	b.n	158cc <lll_conn_isr_rx+0xb4>
						radio_pkt_scratch_get();
   15c0c:	f000 fb28 	bl	16260 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   15c10:	7843      	ldrb	r3, [r0, #1]
   15c12:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   15c14:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   15c16:	d8f4      	bhi.n	15c02 <lll_conn_isr_rx+0x3ea>
						memcpy(pdu_data_rx,
   15c18:	3303      	adds	r3, #3
   15c1a:	b2da      	uxtb	r2, r3
   15c1c:	4638      	mov	r0, r7
   15c1e:	f006 f884 	bl	1bd2a <memcpy>
						lll->ccm_rx.counter--;
   15c22:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   15c26:	3b01      	subs	r3, #1
   15c28:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   15c2c:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
   15c30:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   15c34:	f8c4 3057 	str.w	r3, [r4, #87]	; 0x57
				lll->ccm_rx.counter++;
   15c38:	f8d4 3053 	ldr.w	r3, [r4, #83]	; 0x53
   15c3c:	3301      	adds	r3, #1
   15c3e:	f8c4 3053 	str.w	r3, [r4, #83]	; 0x53
   15c42:	f8d4 3057 	ldr.w	r3, [r4, #87]	; 0x57
						lll->ccm_rx.counter--;
   15c46:	f104 0253 	add.w	r2, r4, #83	; 0x53
				lll->ccm_rx.counter++;
   15c4a:	f143 0300 	adc.w	r3, r3, #0
   15c4e:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   15c50:	4b0c      	ldr	r3, [pc, #48]	; (15c84 <lll_conn_isr_rx+0x46c>)
   15c52:	2701      	movs	r7, #1
   15c54:	701f      	strb	r7, [r3, #0]
		if (err) {
   15c56:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   15c5a:	e6f8      	b.n	15a4e <lll_conn_isr_rx+0x236>
				LL_ASSERT(done);
   15c5c:	4a06      	ldr	r2, [pc, #24]	; (15c78 <lll_conn_isr_rx+0x460>)
   15c5e:	490a      	ldr	r1, [pc, #40]	; (15c88 <lll_conn_isr_rx+0x470>)
   15c60:	4807      	ldr	r0, [pc, #28]	; (15c80 <lll_conn_isr_rx+0x468>)
   15c62:	f240 33be 	movw	r3, #958	; 0x3be
   15c66:	f005 fa26 	bl	1b0b6 <printk>
   15c6a:	4040      	eors	r0, r0
   15c6c:	f380 8811 	msr	BASEPRI, r0
   15c70:	f04f 0003 	mov.w	r0, #3
   15c74:	df02      	svc	2
   15c76:	e7b6      	b.n	15be6 <lll_conn_isr_rx+0x3ce>
   15c78:	00020ef0 	.word	0x00020ef0
   15c7c:	00020e60 	.word	0x00020e60
   15c80:	000203b4 	.word	0x000203b4
   15c84:	20002dbe 	.word	0x20002dbe
   15c88:	00020f40 	.word	0x00020f40

00015c8c <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   15c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   15c8e:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   15c90:	89a2      	ldrh	r2, [r4, #12]
   15c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15c96:	429a      	cmp	r2, r3
{
   15c98:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   15c9a:	f000 8091 	beq.w	15dc0 <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   15c9e:	4605      	mov	r5, r0
   15ca0:	f7ff fc38 	bl	15514 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   15ca4:	892b      	ldrh	r3, [r5, #8]
   15ca6:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   15ca8:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   15caa:	441a      	add	r2, r3
   15cac:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   15cae:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   15cb0:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   15cb2:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   15cb4:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   15cb6:	1c41      	adds	r1, r0, #1
   15cb8:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   15cba:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   15cbc:	f04f 0100 	mov.w	r1, #0
   15cc0:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   15cc2:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   15cc6:	d45f      	bmi.n	15d88 <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   15cc8:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   15ccc:	460b      	mov	r3, r1
   15cce:	7fa1      	ldrb	r1, [r4, #30]
   15cd0:	9000      	str	r0, [sp, #0]
   15cd2:	f104 001f 	add.w	r0, r4, #31
   15cd6:	f7fc fc8b 	bl	125f0 <lll_chan_sel_1>
   15cda:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   15cdc:	4620      	mov	r0, r4
   15cde:	a903      	add	r1, sp, #12
   15ce0:	f7ff fd2a 	bl	15738 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   15ce4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
   15ce8:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   15cea:	f3c2 0340 	ubfx	r3, r2, #1, #1
   15cee:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   15cf0:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   15cf4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   15cf8:	780a      	ldrb	r2, [r1, #0]
   15cfa:	f022 020c 	bic.w	r2, r2, #12
   15cfe:	4313      	orrs	r3, r2
   15d00:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   15d02:	f000 f99d 	bl	16040 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   15d06:	2000      	movs	r0, #0
   15d08:	f000 f9ce 	bl	160a8 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   15d0c:	1d20      	adds	r0, r4, #4
   15d0e:	f000 f9e9 	bl	160e4 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   15d12:	8923      	ldrh	r3, [r4, #8]
   15d14:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   15d16:	f240 605b 	movw	r0, #1627	; 0x65b
   15d1a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   15d1e:	f000 fa85 	bl	1622c <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   15d22:	4630      	mov	r0, r6
   15d24:	f7fe f97c 	bl	14020 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   15d28:	9903      	ldr	r1, [sp, #12]
   15d2a:	4620      	mov	r0, r4
   15d2c:	f7ff fcd8 	bl	156e0 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   15d30:	4621      	mov	r1, r4
   15d32:	4828      	ldr	r0, [pc, #160]	; (15dd4 <prepare_cb+0x148>)
   15d34:	f000 f942 	bl	15fbc <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   15d38:	2096      	movs	r0, #150	; 0x96
   15d3a:	f000 fbc5 	bl	164c8 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   15d3e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   15d42:	f000 0007 	and.w	r0, r0, #7
   15d46:	f000 fa93 	bl	16270 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   15d4a:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   15d4c:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   15d4e:	4638      	mov	r0, r7
   15d50:	f7fe f948 	bl	13fe4 <lll_event_offset_get>
   15d54:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   15d56:	686a      	ldr	r2, [r5, #4]
   15d58:	f106 0109 	add.w	r1, r6, #9
   15d5c:	2001      	movs	r0, #1
   15d5e:	f000 fbbf 	bl	164e0 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   15d62:	f000 fca3 	bl	166ac <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   15d66:	89a1      	ldrh	r1, [r4, #12]
   15d68:	3105      	adds	r1, #5
   15d6a:	4632      	mov	r2, r6
   15d6c:	b2c9      	uxtb	r1, r1
   15d6e:	4638      	mov	r0, r7
   15d70:	f7fe f946 	bl	14000 <lll_preempt_calc>
   15d74:	b180      	cbz	r0, 15d98 <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   15d76:	4818      	ldr	r0, [pc, #96]	; (15dd8 <prepare_cb+0x14c>)
   15d78:	4621      	mov	r1, r4
   15d7a:	f000 f91f 	bl	15fbc <radio_isr_set>
		radio_disable();
   15d7e:	f000 fa17 	bl	161b0 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   15d82:	2000      	movs	r0, #0
   15d84:	b005      	add	sp, #20
   15d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   15d88:	460a      	mov	r2, r1
   15d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15d8e:	8be1      	ldrh	r1, [r4, #30]
   15d90:	f7fc fc72 	bl	12678 <lll_chan_sel_2>
   15d94:	4606      	mov	r6, r0
   15d96:	e7a1      	b.n	15cdc <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   15d98:	4620      	mov	r0, r4
   15d9a:	f7fe f8bd 	bl	13f18 <lll_prepare_done>
		LL_ASSERT(!ret);
   15d9e:	2800      	cmp	r0, #0
   15da0:	d0ef      	beq.n	15d82 <prepare_cb+0xf6>
   15da2:	4a0e      	ldr	r2, [pc, #56]	; (15ddc <prepare_cb+0x150>)
   15da4:	490e      	ldr	r1, [pc, #56]	; (15de0 <prepare_cb+0x154>)
   15da6:	480f      	ldr	r0, [pc, #60]	; (15de4 <prepare_cb+0x158>)
   15da8:	23fd      	movs	r3, #253	; 0xfd
   15daa:	f005 f984 	bl	1b0b6 <printk>
   15dae:	4040      	eors	r0, r0
   15db0:	f380 8811 	msr	BASEPRI, r0
   15db4:	f04f 0003 	mov.w	r0, #3
   15db8:	df02      	svc	2
}
   15dba:	2000      	movs	r0, #0
   15dbc:	b005      	add	sp, #20
   15dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   15dc0:	4809      	ldr	r0, [pc, #36]	; (15de8 <prepare_cb+0x15c>)
   15dc2:	4621      	mov	r1, r4
   15dc4:	f000 f8fa 	bl	15fbc <radio_isr_set>
		radio_disable();
   15dc8:	f000 f9f2 	bl	161b0 <radio_disable>
}
   15dcc:	2000      	movs	r0, #0
   15dce:	b005      	add	sp, #20
   15dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15dd2:	bf00      	nop
   15dd4:	00015629 	.word	0x00015629
   15dd8:	00014155 	.word	0x00014155
   15ddc:	00020f60 	.word	0x00020f60
   15de0:	0002066c 	.word	0x0002066c
   15de4:	000203b4 	.word	0x000203b4
   15de8:	00014179 	.word	0x00014179

00015dec <lll_central_prepare>:
{
   15dec:	b510      	push	{r4, lr}
   15dee:	b082      	sub	sp, #8
   15df0:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   15df2:	f7fe fb11 	bl	14418 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   15df6:	2800      	cmp	r0, #0
   15df8:	db19      	blt.n	15e2e <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   15dfa:	4a13      	ldr	r2, [pc, #76]	; (15e48 <lll_central_prepare+0x5c>)
   15dfc:	4913      	ldr	r1, [pc, #76]	; (15e4c <lll_central_prepare+0x60>)
   15dfe:	4814      	ldr	r0, [pc, #80]	; (15e50 <lll_central_prepare+0x64>)
   15e00:	9400      	str	r4, [sp, #0]
   15e02:	2300      	movs	r3, #0
   15e04:	f7f8 fbc6 	bl	e594 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   15e08:	b108      	cbz	r0, 15e0e <lll_central_prepare+0x22>
   15e0a:	3077      	adds	r0, #119	; 0x77
   15e0c:	d101      	bne.n	15e12 <lll_central_prepare+0x26>
}
   15e0e:	b002      	add	sp, #8
   15e10:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   15e12:	4a10      	ldr	r2, [pc, #64]	; (15e54 <lll_central_prepare+0x68>)
   15e14:	4910      	ldr	r1, [pc, #64]	; (15e58 <lll_central_prepare+0x6c>)
   15e16:	4811      	ldr	r0, [pc, #68]	; (15e5c <lll_central_prepare+0x70>)
   15e18:	2351      	movs	r3, #81	; 0x51
   15e1a:	f005 f94c 	bl	1b0b6 <printk>
   15e1e:	4040      	eors	r0, r0
   15e20:	f380 8811 	msr	BASEPRI, r0
   15e24:	f04f 0003 	mov.w	r0, #3
   15e28:	df02      	svc	2
}
   15e2a:	b002      	add	sp, #8
   15e2c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   15e2e:	4a09      	ldr	r2, [pc, #36]	; (15e54 <lll_central_prepare+0x68>)
   15e30:	490b      	ldr	r1, [pc, #44]	; (15e60 <lll_central_prepare+0x74>)
   15e32:	480a      	ldr	r0, [pc, #40]	; (15e5c <lll_central_prepare+0x70>)
   15e34:	234c      	movs	r3, #76	; 0x4c
   15e36:	f005 f93e 	bl	1b0b6 <printk>
   15e3a:	4040      	eors	r0, r0
   15e3c:	f380 8811 	msr	BASEPRI, r0
   15e40:	f04f 0003 	mov.w	r0, #3
   15e44:	df02      	svc	2
   15e46:	e7d8      	b.n	15dfa <lll_central_prepare+0xe>
   15e48:	00015c8d 	.word	0x00015c8d
   15e4c:	0001553d 	.word	0x0001553d
   15e50:	00013fdd 	.word	0x00013fdd
   15e54:	00020f60 	.word	0x00020f60
   15e58:	00020e90 	.word	0x00020e90
   15e5c:	000203b4 	.word	0x000203b4
   15e60:	00020dcc 	.word	0x00020dcc

00015e64 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   15e64:	4b05      	ldr	r3, [pc, #20]	; (15e7c <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   15e66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15e6a:	2100      	movs	r1, #0
   15e6c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   15e70:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   15e74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   15e78:	4770      	bx	lr
   15e7a:	bf00      	nop
   15e7c:	4000b000 	.word	0x4000b000

00015e80 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   15e80:	4b05      	ldr	r3, [pc, #20]	; (15e98 <cntr_start+0x18>)
   15e82:	7818      	ldrb	r0, [r3, #0]
   15e84:	1c42      	adds	r2, r0, #1
   15e86:	701a      	strb	r2, [r3, #0]
   15e88:	b918      	cbnz	r0, 15e92 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   15e8a:	4b04      	ldr	r3, [pc, #16]	; (15e9c <cntr_start+0x1c>)
   15e8c:	2201      	movs	r2, #1
   15e8e:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   15e90:	4770      	bx	lr
		return 1;
   15e92:	2001      	movs	r0, #1
}
   15e94:	4770      	bx	lr
   15e96:	bf00      	nop
   15e98:	20002dbf 	.word	0x20002dbf
   15e9c:	4000b000 	.word	0x4000b000

00015ea0 <cntr_stop>:

uint32_t cntr_stop(void)
{
   15ea0:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   15ea2:	4c0d      	ldr	r4, [pc, #52]	; (15ed8 <cntr_stop+0x38>)
   15ea4:	7820      	ldrb	r0, [r4, #0]
   15ea6:	b148      	cbz	r0, 15ebc <cntr_stop+0x1c>

	if (--_refcount) {
   15ea8:	3801      	subs	r0, #1
   15eaa:	b2c0      	uxtb	r0, r0
   15eac:	7020      	strb	r0, [r4, #0]
   15eae:	b918      	cbnz	r0, 15eb8 <cntr_stop+0x18>
   15eb0:	4b0a      	ldr	r3, [pc, #40]	; (15edc <cntr_stop+0x3c>)
   15eb2:	2201      	movs	r2, #1
   15eb4:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   15eb6:	bd10      	pop	{r4, pc}
		return 1;
   15eb8:	2001      	movs	r0, #1
}
   15eba:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   15ebc:	4a08      	ldr	r2, [pc, #32]	; (15ee0 <cntr_stop+0x40>)
   15ebe:	4909      	ldr	r1, [pc, #36]	; (15ee4 <cntr_stop+0x44>)
   15ec0:	4809      	ldr	r0, [pc, #36]	; (15ee8 <cntr_stop+0x48>)
   15ec2:	232d      	movs	r3, #45	; 0x2d
   15ec4:	f005 f8f7 	bl	1b0b6 <printk>
   15ec8:	4040      	eors	r0, r0
   15eca:	f380 8811 	msr	BASEPRI, r0
   15ece:	f04f 0003 	mov.w	r0, #3
   15ed2:	df02      	svc	2
	if (--_refcount) {
   15ed4:	7820      	ldrb	r0, [r4, #0]
   15ed6:	e7e7      	b.n	15ea8 <cntr_stop+0x8>
   15ed8:	20002dbf 	.word	0x20002dbf
   15edc:	4000b000 	.word	0x4000b000
   15ee0:	00020fb0 	.word	0x00020fb0
   15ee4:	00020ffc 	.word	0x00020ffc
   15ee8:	000203b4 	.word	0x000203b4

00015eec <cntr_cnt_get>:
     return p_reg->COUNTER;
   15eec:	4b01      	ldr	r3, [pc, #4]	; (15ef4 <cntr_cnt_get+0x8>)
   15eee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   15ef2:	4770      	bx	lr
   15ef4:	4000b000 	.word	0x4000b000

00015ef8 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   15ef8:	4b02      	ldr	r3, [pc, #8]	; (15f04 <cntr_cmp_set+0xc>)
   15efa:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   15efe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   15f02:	4770      	bx	lr
   15f04:	4000b000 	.word	0x4000b000

00015f08 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f08:	4b12      	ldr	r3, [pc, #72]	; (15f54 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   15f0a:	b430      	push	{r4, r5}
   15f0c:	2101      	movs	r1, #1
   15f0e:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   15f10:	2000      	movs	r0, #0
   15f12:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   15f14:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   15f18:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   15f1c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   15f20:	6019      	str	r1, [r3, #0]
}
   15f22:	e005      	b.n	15f30 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   15f24:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   15f28:	b932      	cbnz	r2, 15f38 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   15f2a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   15f2e:	b11a      	cbz	r2, 15f38 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   15f30:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   15f34:	2a00      	cmp	r2, #0
   15f36:	d0f5      	beq.n	15f24 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f38:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   15f3a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   15f3e:	2a00      	cmp	r2, #0
   15f40:	d1e7      	bne.n	15f12 <do_ecb+0xa>
   15f42:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   15f46:	2d00      	cmp	r5, #0
   15f48:	d0e3      	beq.n	15f12 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   15f4a:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   15f4c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   15f50:	4770      	bx	lr
   15f52:	bf00      	nop
   15f54:	4000e000 	.word	0x4000e000

00015f58 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   15f58:	b570      	push	{r4, r5, r6, lr}
   15f5a:	b08c      	sub	sp, #48	; 0x30
   15f5c:	460e      	mov	r6, r1
   15f5e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   15f60:	4601      	mov	r1, r0
   15f62:	2210      	movs	r2, #16
   15f64:	4668      	mov	r0, sp
{
   15f66:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   15f68:	f7f4 f8b2 	bl	a0d0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   15f6c:	2210      	movs	r2, #16
   15f6e:	eb0d 0002 	add.w	r0, sp, r2
   15f72:	4631      	mov	r1, r6
   15f74:	f7f4 f8ac 	bl	a0d0 <mem_rcopy>

	do_ecb(&ecb);
   15f78:	4668      	mov	r0, sp
   15f7a:	f7ff ffc5 	bl	15f08 <do_ecb>

	if (cipher_text_le) {
   15f7e:	b125      	cbz	r5, 15f8a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   15f80:	2210      	movs	r2, #16
   15f82:	a908      	add	r1, sp, #32
   15f84:	4628      	mov	r0, r5
   15f86:	f7f4 f8a3 	bl	a0d0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   15f8a:	b124      	cbz	r4, 15f96 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   15f8c:	2210      	movs	r2, #16
   15f8e:	a908      	add	r1, sp, #32
   15f90:	4620      	mov	r0, r4
   15f92:	f005 feca 	bl	1bd2a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   15f96:	b00c      	add	sp, #48	; 0x30
   15f98:	bd70      	pop	{r4, r5, r6, pc}
   15f9a:	bf00      	nop

00015f9c <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   15f9c:	4b04      	ldr	r3, [pc, #16]	; (15fb0 <isr_radio+0x14>)
   15f9e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   15fa2:	b123      	cbz	r3, 15fae <isr_radio+0x12>
		isr_cb(isr_cb_param);
   15fa4:	4a03      	ldr	r2, [pc, #12]	; (15fb4 <isr_radio+0x18>)
   15fa6:	4b04      	ldr	r3, [pc, #16]	; (15fb8 <isr_radio+0x1c>)
   15fa8:	6810      	ldr	r0, [r2, #0]
   15faa:	681b      	ldr	r3, [r3, #0]
   15fac:	4718      	bx	r3
}
   15fae:	4770      	bx	lr
   15fb0:	40001000 	.word	0x40001000
   15fb4:	20002a7c 	.word	0x20002a7c
   15fb8:	20002a78 	.word	0x20002a78

00015fbc <radio_isr_set>:
{
   15fbc:	b538      	push	{r3, r4, r5, lr}
   15fbe:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   15fc0:	2001      	movs	r0, #1
{
   15fc2:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   15fc4:	f7f0 f8cc 	bl	6160 <arch_irq_disable>
	isr_cb = cb;
   15fc8:	4b08      	ldr	r3, [pc, #32]	; (15fec <radio_isr_set+0x30>)
	isr_cb_param = param;
   15fca:	4a09      	ldr	r2, [pc, #36]	; (15ff0 <radio_isr_set+0x34>)
	isr_cb = cb;
   15fcc:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15fce:	4909      	ldr	r1, [pc, #36]	; (15ff4 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15fd0:	4b09      	ldr	r3, [pc, #36]	; (15ff8 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   15fd2:	6015      	str	r5, [r2, #0]
   15fd4:	2010      	movs	r0, #16
   15fd6:	2202      	movs	r2, #2
   15fd8:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   15fdc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   15fe0:	2001      	movs	r0, #1
}
   15fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   15fe6:	f7f0 b8ab 	b.w	6140 <arch_irq_enable>
   15fea:	bf00      	nop
   15fec:	20002a78 	.word	0x20002a78
   15ff0:	20002a7c 	.word	0x20002a7c
   15ff4:	40001000 	.word	0x40001000
   15ff8:	e000e100 	.word	0xe000e100

00015ffc <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   15ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   16004:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   16006:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1600a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1600e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   16012:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   16016:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1601a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1601e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   16022:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   16026:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1602a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1602e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   16032:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   16036:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1603a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1603e:	4770      	bx	lr

00016040 <radio_reset>:
{
   16040:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   16042:	2001      	movs	r0, #1
   16044:	f7f0 f88c 	bl	6160 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   16048:	4a0d      	ldr	r2, [pc, #52]	; (16080 <radio_reset+0x40>)
   1604a:	2100      	movs	r1, #0
   1604c:	2301      	movs	r3, #1
   1604e:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   16052:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   16056:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1605a:	490a      	ldr	r1, [pc, #40]	; (16084 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1605c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   16060:	f023 0301 	bic.w	r3, r3, #1
   16064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   16068:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1606c:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   16070:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   16074:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   16078:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1607c:	bd10      	pop	{r4, pc}
   1607e:	bf00      	nop
   16080:	40001000 	.word	0x40001000
   16084:	4001f000 	.word	0x4001f000

00016088 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   16088:	4b06      	ldr	r3, [pc, #24]	; (160a4 <radio_phy_set+0x1c>)
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1608a:	2802      	cmp	r0, #2
   1608c:	bf14      	ite	ne
   1608e:	2203      	movne	r2, #3
   16090:	2204      	moveq	r2, #4
   16092:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   16096:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1609a:	f042 0201 	orr.w	r2, r2, #1
   1609e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   160a2:	4770      	bx	lr
   160a4:	40001000 	.word	0x40001000

000160a8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   160a8:	4b01      	ldr	r3, [pc, #4]	; (160b0 <radio_tx_power_set+0x8>)
   160aa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   160ae:	4770      	bx	lr
   160b0:	40001000 	.word	0x40001000

000160b4 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   160b4:	4b01      	ldr	r3, [pc, #4]	; (160bc <radio_freq_chan_set+0x8>)
   160b6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   160ba:	4770      	bx	lr
   160bc:	40001000 	.word	0x40001000

000160c0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   160c0:	4b07      	ldr	r3, [pc, #28]	; (160e0 <radio_whiten_iv_set+0x20>)
   160c2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   160c6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   160ca:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   160ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   160d2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   160d6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   160da:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   160de:	4770      	bx	lr
   160e0:	40001000 	.word	0x40001000

000160e4 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   160e4:	4a0a      	ldr	r2, [pc, #40]	; (16110 <radio_aa_set+0x2c>)
   160e6:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   160e8:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   160ea:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   160ee:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   160f2:	78c3      	ldrb	r3, [r0, #3]
   160f4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   160f8:	7843      	ldrb	r3, [r0, #1]
   160fa:	f890 c002 	ldrb.w	ip, [r0, #2]
   160fe:	7801      	ldrb	r1, [r0, #0]
   16100:	041b      	lsls	r3, r3, #16
   16102:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   16106:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1610a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1610e:	4770      	bx	lr
   16110:	40001000 	.word	0x40001000

00016114 <radio_pkt_configure>:
	switch (phy) {
   16114:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   16118:	2b02      	cmp	r3, #2
   1611a:	bf14      	ite	ne
   1611c:	f04f 0c00 	movne.w	ip, #0
   16120:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   16124:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   16126:	bf48      	it	mi
   16128:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1612c:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   16130:	4b0a      	ldr	r3, [pc, #40]	; (1615c <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   16132:	4a0b      	ldr	r2, [pc, #44]	; (16160 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   16134:	ea40 000c 	orr.w	r0, r0, ip
   16138:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   1613c:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   16140:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   16144:	4002      	ands	r2, r0
   16146:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   1614a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1614e:	4311      	orrs	r1, r2
   16150:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   16154:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   16158:	4770      	bx	lr
   1615a:	bf00      	nop
   1615c:	40001000 	.word	0x40001000
   16160:	fef80000 	.word	0xfef80000

00016164 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   16164:	4b01      	ldr	r3, [pc, #4]	; (1616c <radio_pkt_rx_set+0x8>)
   16166:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1616a:	4770      	bx	lr
   1616c:	40001000 	.word	0x40001000

00016170 <radio_pkt_tx_set>:
   16170:	4b01      	ldr	r3, [pc, #4]	; (16178 <radio_pkt_tx_set+0x8>)
   16172:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   16176:	4770      	bx	lr
   16178:	40001000 	.word	0x40001000

0001617c <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_US;
   1617c:	2802      	cmp	r0, #2
}
   1617e:	bf14      	ite	ne
   16180:	2029      	movne	r0, #41	; 0x29
   16182:	2028      	moveq	r0, #40	; 0x28
   16184:	4770      	bx	lr
   16186:	bf00      	nop

00016188 <radio_tx_chain_delay_get>:
}
   16188:	2001      	movs	r0, #1
   1618a:	4770      	bx	lr

0001618c <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_US;
   1618c:	2802      	cmp	r0, #2
}
   1618e:	bf14      	ite	ne
   16190:	200a      	movne	r0, #10
   16192:	2006      	moveq	r0, #6
   16194:	4770      	bx	lr
   16196:	bf00      	nop

00016198 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16198:	4b01      	ldr	r3, [pc, #4]	; (161a0 <radio_rx_enable+0x8>)
   1619a:	2201      	movs	r2, #1
   1619c:	605a      	str	r2, [r3, #4]
}
   1619e:	4770      	bx	lr
   161a0:	40001000 	.word	0x40001000

000161a4 <radio_tx_enable>:
   161a4:	4b01      	ldr	r3, [pc, #4]	; (161ac <radio_tx_enable+0x8>)
   161a6:	2201      	movs	r2, #1
   161a8:	601a      	str	r2, [r3, #0]
}
   161aa:	4770      	bx	lr
   161ac:	40001000 	.word	0x40001000

000161b0 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   161b0:	4a07      	ldr	r2, [pc, #28]	; (161d0 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   161b2:	4908      	ldr	r1, [pc, #32]	; (161d4 <radio_disable+0x24>)
{
   161b4:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   161b6:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   161b8:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   161bc:	2000      	movs	r0, #0
   161be:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   161c2:	6053      	str	r3, [r2, #4]
}
   161c4:	bc10      	pop	{r4}
   161c6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   161c8:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   161cc:	610b      	str	r3, [r1, #16]
}
   161ce:	4770      	bx	lr
   161d0:	4001f000 	.word	0x4001f000
   161d4:	40001000 	.word	0x40001000

000161d8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   161d8:	4b04      	ldr	r3, [pc, #16]	; (161ec <radio_status_reset+0x14>)
   161da:	2200      	movs	r2, #0
   161dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   161e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   161e4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   161e8:	4770      	bx	lr
   161ea:	bf00      	nop
   161ec:	40001000 	.word	0x40001000

000161f0 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   161f0:	4b03      	ldr	r3, [pc, #12]	; (16200 <radio_is_ready+0x10>)
   161f2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   161f6:	3800      	subs	r0, #0
   161f8:	bf18      	it	ne
   161fa:	2001      	movne	r0, #1
   161fc:	4770      	bx	lr
   161fe:	bf00      	nop
   16200:	40001000 	.word	0x40001000

00016204 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   16204:	4b03      	ldr	r3, [pc, #12]	; (16214 <radio_is_done+0x10>)
   16206:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1620a:	3800      	subs	r0, #0
   1620c:	bf18      	it	ne
   1620e:	2001      	movne	r0, #1
   16210:	4770      	bx	lr
   16212:	bf00      	nop
   16214:	40001000 	.word	0x40001000

00016218 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   16218:	4b03      	ldr	r3, [pc, #12]	; (16228 <radio_is_idle+0x10>)
   1621a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1621e:	fab0 f080 	clz	r0, r0
   16222:	0940      	lsrs	r0, r0, #5
   16224:	4770      	bx	lr
   16226:	bf00      	nop
   16228:	40001000 	.word	0x40001000

0001622c <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1622c:	4b04      	ldr	r3, [pc, #16]	; (16240 <radio_crc_configure+0x14>)
   1622e:	f240 1203 	movw	r2, #259	; 0x103
   16232:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   16236:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1623a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1623e:	4770      	bx	lr
   16240:	40001000 	.word	0x40001000

00016244 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   16244:	4b03      	ldr	r3, [pc, #12]	; (16254 <radio_crc_is_valid+0x10>)
   16246:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1624a:	3800      	subs	r0, #0
   1624c:	bf18      	it	ne
   1624e:	2001      	movne	r0, #1
   16250:	4770      	bx	lr
   16252:	bf00      	nop
   16254:	40001000 	.word	0x40001000

00016258 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   16258:	4800      	ldr	r0, [pc, #0]	; (1625c <radio_pkt_empty_get+0x4>)
   1625a:	4770      	bx	lr
   1625c:	20002970 	.word	0x20002970

00016260 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   16260:	4800      	ldr	r0, [pc, #0]	; (16264 <radio_pkt_scratch_get+0x4>)
   16262:	4770      	bx	lr
   16264:	20002974 	.word	0x20002974

00016268 <radio_pkt_decrypt_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_decrypt_get(void)
{
	return _pkt_decrypt;
}
   16268:	4800      	ldr	r0, [pc, #0]	; (1626c <radio_pkt_decrypt_get+0x4>)
   1626a:	4770      	bx	lr
   1626c:	2000286c 	.word	0x2000286c

00016270 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   16270:	4b1d      	ldr	r3, [pc, #116]	; (162e8 <radio_switch_complete_and_rx+0x78>)
{
   16272:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   16274:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   16276:	4d1d      	ldr	r5, [pc, #116]	; (162ec <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   16278:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1627c:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1627e:	4e1c      	ldr	r6, [pc, #112]	; (162f0 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   16280:	4c1c      	ldr	r4, [pc, #112]	; (162f4 <radio_switch_complete_and_rx+0x84>)
   16282:	4f1d      	ldr	r7, [pc, #116]	; (162f8 <radio_switch_complete_and_rx+0x88>)
   16284:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   16288:	f102 030c 	add.w	r3, r2, #12
   1628c:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1628e:	00d0      	lsls	r0, r2, #3
   16290:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   16292:	0091      	lsls	r1, r2, #2
   16294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   16298:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1629c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   162a0:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   162a4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   162a8:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   162ac:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   162b0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   162b4:	4811      	ldr	r0, [pc, #68]	; (162fc <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   162b6:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   162ba:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   162be:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   162c2:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   162c4:	bf8a      	itet	hi
   162c6:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   162ca:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   162cc:	3b2d      	subhi	r3, #45	; 0x2d
   162ce:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   162d2:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   162d4:	4b06      	ldr	r3, [pc, #24]	; (162f0 <radio_switch_complete_and_rx+0x80>)
   162d6:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   162da:	f002 0201 	and.w	r2, r2, #1
   162de:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   162e2:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   162e4:	bcf0      	pop	{r4, r5, r6, r7}
   162e6:	4770      	bx	lr
   162e8:	40001000 	.word	0x40001000
   162ec:	20002dc0 	.word	0x20002dc0
   162f0:	4001f000 	.word	0x4001f000
   162f4:	40009140 	.word	0x40009140
   162f8:	4000110c 	.word	0x4000110c
   162fc:	40001004 	.word	0x40001004

00016300 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   16300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   16304:	4e28      	ldr	r6, [pc, #160]	; (163a8 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   16306:	4c29      	ldr	r4, [pc, #164]	; (163ac <radio_switch_complete_and_tx+0xac>)
   16308:	4f29      	ldr	r7, [pc, #164]	; (163b0 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1630a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 163b4 <radio_switch_complete_and_tx+0xb4>
   1630e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 163b8 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   16312:	2303      	movs	r3, #3
   16314:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   16318:	7821      	ldrb	r1, [r4, #0]
   1631a:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1631e:	f101 030c 	add.w	r3, r1, #12
   16322:	b2db      	uxtb	r3, r3
   16324:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   16326:	00cd      	lsls	r5, r1, #3
   16328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1632c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   16330:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   16334:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   16338:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1633c:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16340:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   16344:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16348:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1634c:	f24a 234e 	movw	r3, #41550	; 0xa24e
   16350:	2a02      	cmp	r2, #2
   16352:	bf08      	it	eq
   16354:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   16356:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1635a:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1635e:	f241 554a 	movw	r5, #5450	; 0x154a
   16362:	2802      	cmp	r0, #2
   16364:	bf08      	it	eq
   16366:	462a      	moveq	r2, r5
   16368:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1636c:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   16370:	4413      	add	r3, r2
   16372:	4a12      	ldr	r2, [pc, #72]	; (163bc <radio_switch_complete_and_tx+0xbc>)
   16374:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   16378:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   1637c:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   16380:	bf85      	ittet	hi
   16382:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   16384:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   16388:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1638a:	1a1b      	subhi	r3, r3, r0
   1638c:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   16390:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   16392:	4b08      	ldr	r3, [pc, #32]	; (163b4 <radio_switch_complete_and_tx+0xb4>)
   16394:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   16398:	f001 0101 	and.w	r1, r1, #1
   1639c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   163a0:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   163a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   163a6:	bf00      	nop
   163a8:	40001000 	.word	0x40001000
   163ac:	20002dc0 	.word	0x20002dc0
   163b0:	40009140 	.word	0x40009140
   163b4:	4001f000 	.word	0x4001f000
   163b8:	4000110c 	.word	0x4000110c
   163bc:	10624dd3 	.word	0x10624dd3

000163c0 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   163c0:	4904      	ldr	r1, [pc, #16]	; (163d4 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   163c2:	4b05      	ldr	r3, [pc, #20]	; (163d8 <radio_switch_complete_and_disable+0x18>)
   163c4:	2003      	movs	r0, #3
   163c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
   163ca:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   163ce:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   163d2:	4770      	bx	lr
   163d4:	40001000 	.word	0x40001000
   163d8:	4001f000 	.word	0x4001f000

000163dc <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   163dc:	2000      	movs	r0, #0
   163de:	4770      	bx	lr

000163e0 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   163e0:	4a03      	ldr	r2, [pc, #12]	; (163f0 <radio_rssi_measure+0x10>)
   163e2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   163e6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   163ea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   163ee:	4770      	bx	lr
   163f0:	40001000 	.word	0x40001000

000163f4 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   163f4:	4b01      	ldr	r3, [pc, #4]	; (163fc <radio_rssi_get+0x8>)
   163f6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   163fa:	4770      	bx	lr
   163fc:	40001000 	.word	0x40001000

00016400 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   16400:	4b02      	ldr	r3, [pc, #8]	; (1640c <radio_rssi_status_reset+0xc>)
   16402:	2200      	movs	r2, #0
   16404:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   16408:	4770      	bx	lr
   1640a:	bf00      	nop
   1640c:	40001000 	.word	0x40001000

00016410 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   16410:	4b03      	ldr	r3, [pc, #12]	; (16420 <radio_rssi_is_ready+0x10>)
   16412:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   16416:	3800      	subs	r0, #0
   16418:	bf18      	it	ne
   1641a:	2001      	movne	r0, #1
   1641c:	4770      	bx	lr
   1641e:	bf00      	nop
   16420:	40001000 	.word	0x40001000

00016424 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   16424:	b410      	push	{r4}
   16426:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1642a:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1642e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   16436:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   16438:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1643c:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   16440:	8894      	ldrh	r4, [r2, #4]
   16442:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   16446:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1644a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1644e:	d1ec      	bne.n	1642a <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   16450:	4b03      	ldr	r3, [pc, #12]	; (16460 <radio_filter_configure+0x3c>)
}
   16452:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   16454:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   16458:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1645c:	4770      	bx	lr
   1645e:	bf00      	nop
   16460:	40001000 	.word	0x40001000

00016464 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   16464:	4a03      	ldr	r2, [pc, #12]	; (16474 <radio_filter_disable+0x10>)
   16466:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1646a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1646e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   16472:	4770      	bx	lr
   16474:	40001000 	.word	0x40001000

00016478 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   16478:	4b02      	ldr	r3, [pc, #8]	; (16484 <radio_filter_status_reset+0xc>)
   1647a:	2200      	movs	r2, #0
   1647c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   16480:	4770      	bx	lr
   16482:	bf00      	nop
   16484:	40001000 	.word	0x40001000

00016488 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   16488:	4b03      	ldr	r3, [pc, #12]	; (16498 <radio_filter_has_match+0x10>)
   1648a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1648e:	3800      	subs	r0, #0
   16490:	bf18      	it	ne
   16492:	2001      	movne	r0, #1
   16494:	4770      	bx	lr
   16496:	bf00      	nop
   16498:	40001000 	.word	0x40001000

0001649c <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1649c:	4b01      	ldr	r3, [pc, #4]	; (164a4 <radio_filter_match_get+0x8>)
   1649e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   164a2:	4770      	bx	lr
   164a4:	40001000 	.word	0x40001000

000164a8 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   164a8:	4904      	ldr	r1, [pc, #16]	; (164bc <radio_tmr_status_reset+0x14>)
   164aa:	4b05      	ldr	r3, [pc, #20]	; (164c0 <radio_tmr_status_reset+0x18>)
   164ac:	4a05      	ldr	r2, [pc, #20]	; (164c4 <radio_tmr_status_reset+0x1c>)
   164ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   164b2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   164b6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   164ba:	4770      	bx	lr
   164bc:	4000b000 	.word	0x4000b000
   164c0:	4001f000 	.word	0x4001f000
   164c4:	0e7000c0 	.word	0x0e7000c0

000164c8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   164c8:	4b03      	ldr	r3, [pc, #12]	; (164d8 <radio_tmr_tifs_set+0x10>)
   164ca:	4a04      	ldr	r2, [pc, #16]	; (164dc <radio_tmr_tifs_set+0x14>)
   164cc:	781b      	ldrb	r3, [r3, #0]
   164ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   164d2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   164d6:	4770      	bx	lr
   164d8:	20002dc0 	.word	0x20002dc0
   164dc:	40009000 	.word	0x40009000

000164e0 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   164e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   164e4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   164e8:	4d31      	ldr	r5, [pc, #196]	; (165b0 <radio_tmr_start+0xd0>)
   164ea:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   164ee:	42ab      	cmp	r3, r5
{
   164f0:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   164f2:	d906      	bls.n	16502 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   164f4:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   164f8:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   164fc:	3901      	subs	r1, #1
		remainder += 30517578UL;
   164fe:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16502:	4b2c      	ldr	r3, [pc, #176]	; (165b4 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   16504:	482c      	ldr	r0, [pc, #176]	; (165b8 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   16506:	4d2d      	ldr	r5, [pc, #180]	; (165bc <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16508:	4e2d      	ldr	r6, [pc, #180]	; (165c0 <radio_tmr_start+0xe0>)
   1650a:	2701      	movs	r7, #1
   1650c:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1650e:	2700      	movs	r7, #0
   16510:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   16514:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   16518:	2704      	movs	r7, #4
   1651a:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1651e:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   16520:	2702      	movs	r7, #2
   16522:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   16526:	4a27      	ldr	r2, [pc, #156]	; (165c4 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   16528:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1652c:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   16530:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   16534:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   16538:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1653a:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1653e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   16542:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   16546:	bb64      	cbnz	r4, 165a2 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   16548:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1654c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   16550:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   16554:	4b1b      	ldr	r3, [pc, #108]	; (165c4 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16556:	4a1c      	ldr	r2, [pc, #112]	; (165c8 <radio_tmr_start+0xe8>)
   16558:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1655c:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1655e:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16560:	f8df 8068 	ldr.w	r8, [pc, #104]	; 165cc <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16564:	f8df e068 	ldr.w	lr, [pc, #104]	; 165d0 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16568:	f8df c068 	ldr.w	ip, [pc, #104]	; 165d4 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1656c:	4f1a      	ldr	r7, [pc, #104]	; (165d8 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1656e:	4e1b      	ldr	r6, [pc, #108]	; (165dc <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16570:	4d1b      	ldr	r5, [pc, #108]	; (165e0 <radio_tmr_start+0x100>)
   16572:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   16574:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   16578:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1657c:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   16580:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   16584:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16586:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1658a:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1658e:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16592:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16596:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1659a:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1659e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   165a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   165a6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   165aa:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   165ae:	e7d1      	b.n	16554 <radio_tmr_start+0x74>
   165b0:	7ff0bdbf 	.word	0x7ff0bdbf
   165b4:	40008000 	.word	0x40008000
   165b8:	431bde83 	.word	0x431bde83
   165bc:	4000b000 	.word	0x4000b000
   165c0:	4000b148 	.word	0x4000b148
   165c4:	4001f000 	.word	0x4001f000
   165c8:	40009000 	.word	0x40009000
   165cc:	4000110c 	.word	0x4000110c
   165d0:	4000900c 	.word	0x4000900c
   165d4:	40009140 	.word	0x40009140
   165d8:	4001f004 	.word	0x4001f004
   165dc:	40009144 	.word	0x40009144
   165e0:	4001f00c 	.word	0x4001f00c

000165e4 <radio_tmr_start_tick>:
   165e4:	4a15      	ldr	r2, [pc, #84]	; (1663c <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   165e6:	b430      	push	{r4, r5}
   165e8:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   165ea:	4c15      	ldr	r4, [pc, #84]	; (16640 <radio_tmr_start_tick+0x5c>)
   165ec:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   165ee:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   165f2:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   165f4:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   165f8:	4b12      	ldr	r3, [pc, #72]	; (16644 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   165fa:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   165fe:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   16602:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16604:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   16608:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1660c:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   16610:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   16614:	b158      	cbz	r0, 1662e <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   16616:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1661a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1661e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   16622:	4a08      	ldr	r2, [pc, #32]	; (16644 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   16624:	2001      	movs	r0, #1
   16626:	bc30      	pop	{r4, r5}
   16628:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1662c:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1662e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   16632:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   16636:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1663a:	e7f2      	b.n	16622 <radio_tmr_start_tick+0x3e>
   1663c:	40008000 	.word	0x40008000
   16640:	4000b000 	.word	0x4000b000
   16644:	4001f000 	.word	0x4001f000

00016648 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   16648:	4b01      	ldr	r3, [pc, #4]	; (16650 <radio_tmr_start_get+0x8>)
   1664a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1664e:	4770      	bx	lr
   16650:	4000b000 	.word	0x4000b000

00016654 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16654:	4903      	ldr	r1, [pc, #12]	; (16664 <radio_tmr_stop+0x10>)
   16656:	4a04      	ldr	r2, [pc, #16]	; (16668 <radio_tmr_stop+0x14>)
   16658:	2301      	movs	r3, #1
   1665a:	604b      	str	r3, [r1, #4]
   1665c:	610b      	str	r3, [r1, #16]
   1665e:	6053      	str	r3, [r2, #4]
   16660:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   16662:	4770      	bx	lr
   16664:	40008000 	.word	0x40008000
   16668:	40009000 	.word	0x40009000

0001666c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1666c:	4904      	ldr	r1, [pc, #16]	; (16680 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1666e:	4b05      	ldr	r3, [pc, #20]	; (16684 <radio_tmr_hcto_configure+0x18>)
   16670:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   16674:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   16678:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1667c:	4770      	bx	lr
   1667e:	bf00      	nop
   16680:	40008000 	.word	0x40008000
   16684:	4001f000 	.word	0x4001f000

00016688 <radio_tmr_aa_get>:
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   16688:	4b01      	ldr	r3, [pc, #4]	; (16690 <radio_tmr_aa_get+0x8>)
   1668a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1668e:	4770      	bx	lr
   16690:	40008000 	.word	0x40008000

00016694 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   16694:	4b01      	ldr	r3, [pc, #4]	; (1669c <radio_tmr_aa_save+0x8>)
   16696:	6018      	str	r0, [r3, #0]
}
   16698:	4770      	bx	lr
   1669a:	bf00      	nop
   1669c:	20002a80 	.word	0x20002a80

000166a0 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   166a0:	4b01      	ldr	r3, [pc, #4]	; (166a8 <radio_tmr_aa_restore+0x8>)
}
   166a2:	6818      	ldr	r0, [r3, #0]
   166a4:	4770      	bx	lr
   166a6:	bf00      	nop
   166a8:	20002a80 	.word	0x20002a80

000166ac <radio_tmr_end_capture>:
   166ac:	4b02      	ldr	r3, [pc, #8]	; (166b8 <radio_tmr_end_capture+0xc>)
   166ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   166b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   166b6:	4770      	bx	lr
   166b8:	4001f000 	.word	0x4001f000

000166bc <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   166bc:	4b01      	ldr	r3, [pc, #4]	; (166c4 <radio_tmr_end_get+0x8>)
   166be:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   166c2:	4770      	bx	lr
   166c4:	40008000 	.word	0x40008000

000166c8 <radio_tmr_tifs_base_get>:
   166c8:	4b01      	ldr	r3, [pc, #4]	; (166d0 <radio_tmr_tifs_base_get+0x8>)
   166ca:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   166ce:	4770      	bx	lr
   166d0:	40008000 	.word	0x40008000

000166d4 <radio_ccm_rx_pkt_set>:
#endif /* HAL_RADIO_GPIO_HAVE_PA_PIN || HAL_RADIO_GPIO_HAVE_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   166d4:	b4f0      	push	{r4, r5, r6, r7}
   166d6:	4605      	mov	r5, r0
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   166d8:	4e13      	ldr	r6, [pc, #76]	; (16728 <radio_ccm_rx_pkt_set+0x54>)
   166da:	4814      	ldr	r0, [pc, #80]	; (1672c <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   166dc:	4b14      	ldr	r3, [pc, #80]	; (16730 <radio_ccm_rx_pkt_set+0x5c>)

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   166de:	4f15      	ldr	r7, [pc, #84]	; (16734 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   166e0:	2400      	movs	r4, #0
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   166e2:	2902      	cmp	r1, #2
   166e4:	bf08      	it	eq
   166e6:	4606      	moveq	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   166e8:	f04f 0c02 	mov.w	ip, #2
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   166ec:	4812      	ldr	r0, [pc, #72]	; (16738 <radio_ccm_rx_pkt_set+0x64>)
   166ee:	4913      	ldr	r1, [pc, #76]	; (1673c <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   166f0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   166f4:	f8c3 c500 	str.w	ip, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   166f8:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   166fc:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   16700:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   16704:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   16708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1670c:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   16710:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   16714:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   16718:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1671c:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16720:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   16722:	bcf0      	pop	{r4, r5, r6, r7}
   16724:	601a      	str	r2, [r3, #0]
   16726:	4770      	bx	lr
   16728:	01000001 	.word	0x01000001
   1672c:	01010001 	.word	0x01010001
   16730:	4000f000 	.word	0x4000f000
   16734:	20002760 	.word	0x20002760
   16738:	20002974 	.word	0x20002974
   1673c:	4001f000 	.word	0x4001f000

00016740 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   16740:	4b0f      	ldr	r3, [pc, #60]	; (16780 <radio_ccm_tx_pkt_set+0x40>)
{
   16742:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   16744:	2200      	movs	r2, #0
{
   16746:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   16748:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1674a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1674e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   16752:	480c      	ldr	r0, [pc, #48]	; (16784 <radio_ccm_tx_pkt_set+0x44>)
   16754:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   16758:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1675c:	480a      	ldr	r0, [pc, #40]	; (16788 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1675e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   16762:	4c0a      	ldr	r4, [pc, #40]	; (1678c <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   16764:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   16768:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1676a:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1676e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   16772:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   16774:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   16778:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1677c:	6019      	str	r1, [r3, #0]
}
   1677e:	4770      	bx	lr
   16780:	4000f000 	.word	0x4000f000
   16784:	01010000 	.word	0x01010000
   16788:	20002974 	.word	0x20002974
   1678c:	20002760 	.word	0x20002760

00016790 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16790:	4a0e      	ldr	r2, [pc, #56]	; (167cc <radio_ccm_is_done+0x3c>)
   16792:	2302      	movs	r3, #2
   16794:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   16798:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1679c:	b933      	cbnz	r3, 167ac <radio_ccm_is_done+0x1c>
		__WFE();
   1679e:	bf20      	wfe
		__SEV();
   167a0:	bf40      	sev
		__WFE();
   167a2:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   167a4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   167a8:	2b00      	cmp	r3, #0
   167aa:	d0f8      	beq.n	1679e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   167ac:	4b07      	ldr	r3, [pc, #28]	; (167cc <radio_ccm_is_done+0x3c>)
   167ae:	4a08      	ldr	r2, [pc, #32]	; (167d0 <radio_ccm_is_done+0x40>)
   167b0:	2002      	movs	r0, #2
   167b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   167b6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   167ba:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   167be:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   167c2:	fab0 f080 	clz	r0, r0
   167c6:	0940      	lsrs	r0, r0, #5
   167c8:	4770      	bx	lr
   167ca:	bf00      	nop
   167cc:	4000f000 	.word	0x4000f000
   167d0:	e000e100 	.word	0xe000e100

000167d4 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   167d4:	4b03      	ldr	r3, [pc, #12]	; (167e4 <radio_ccm_mic_is_valid+0x10>)
   167d6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   167da:	3800      	subs	r0, #0
   167dc:	bf18      	it	ne
   167de:	2001      	movne	r0, #1
   167e0:	4770      	bx	lr
   167e2:	bf00      	nop
   167e4:	4000f000 	.word	0x4000f000

000167e8 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   167e8:	4a15      	ldr	r2, [pc, #84]	; (16840 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   167ea:	4b16      	ldr	r3, [pc, #88]	; (16844 <radio_ar_configure+0x5c>)
{
   167ec:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   167ee:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   167f2:	4e15      	ldr	r6, [pc, #84]	; (16848 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   167f4:	2703      	movs	r7, #3
   167f6:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   167fa:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   167fc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   16800:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   16802:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   16806:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   16808:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1680c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   16810:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   16814:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   16818:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1681c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   16820:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   16824:	4909      	ldr	r1, [pc, #36]	; (1684c <radio_ar_configure+0x64>)
   16826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1682a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1682e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   16832:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   16836:	bcf0      	pop	{r4, r5, r6, r7}
   16838:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1683c:	4770      	bx	lr
   1683e:	bf00      	nop
   16840:	40001000 	.word	0x40001000
   16844:	4000f000 	.word	0x4000f000
   16848:	2000275c 	.word	0x2000275c
   1684c:	4001f000 	.word	0x4001f000

00016850 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   16850:	4b01      	ldr	r3, [pc, #4]	; (16858 <radio_ar_match_get+0x8>)
   16852:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   16856:	4770      	bx	lr
   16858:	4000f000 	.word	0x4000f000

0001685c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1685c:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1685e:	4807      	ldr	r0, [pc, #28]	; (1687c <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   16860:	4c07      	ldr	r4, [pc, #28]	; (16880 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   16862:	4a08      	ldr	r2, [pc, #32]	; (16884 <radio_ar_status_reset+0x28>)
   16864:	2300      	movs	r3, #0
   16866:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1686a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1686e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   16872:	bc10      	pop	{r4}
   16874:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   16878:	4770      	bx	lr
   1687a:	bf00      	nop
   1687c:	4000f000 	.word	0x4000f000
   16880:	40001000 	.word	0x40001000
   16884:	4001f000 	.word	0x4001f000

00016888 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   16888:	4b08      	ldr	r3, [pc, #32]	; (168ac <radio_ar_has_match+0x24>)
   1688a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1688e:	b160      	cbz	r0, 168aa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   16890:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   16894:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   16898:	b138      	cbz	r0, 168aa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1689a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1689e:	b120      	cbz	r0, 168aa <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   168a0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   168a4:	fab0 f080 	clz	r0, r0
   168a8:	0940      	lsrs	r0, r0, #5
}
   168aa:	4770      	bx	lr
   168ac:	40001000 	.word	0x40001000

000168b0 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   168b0:	2902      	cmp	r1, #2
{
   168b2:	b510      	push	{r4, lr}
   168b4:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   168b6:	d00b      	beq.n	168d0 <mayfly_enable_cb+0x20>
   168b8:	4a0a      	ldr	r2, [pc, #40]	; (168e4 <mayfly_enable_cb+0x34>)
   168ba:	490b      	ldr	r1, [pc, #44]	; (168e8 <mayfly_enable_cb+0x38>)
   168bc:	480b      	ldr	r0, [pc, #44]	; (168ec <mayfly_enable_cb+0x3c>)
   168be:	231e      	movs	r3, #30
   168c0:	f004 fbf9 	bl	1b0b6 <printk>
   168c4:	4040      	eors	r0, r0
   168c6:	f380 8811 	msr	BASEPRI, r0
   168ca:	f04f 0003 	mov.w	r0, #3
   168ce:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   168d0:	200b      	movs	r0, #11
	if (enable) {
   168d2:	b11c      	cbz	r4, 168dc <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   168d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   168d8:	f7ef bc32 	b.w	6140 <arch_irq_enable>
}
   168dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   168e0:	f7ef bc3e 	b.w	6160 <arch_irq_disable>
   168e4:	00021008 	.word	0x00021008
   168e8:	00021058 	.word	0x00021058
   168ec:	000203b4 	.word	0x000203b4

000168f0 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   168f0:	b129      	cbz	r1, 168fe <mayfly_is_enabled+0xe>
   168f2:	3901      	subs	r1, #1
   168f4:	2901      	cmp	r1, #1
   168f6:	d805      	bhi.n	16904 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   168f8:	200b      	movs	r0, #11
   168fa:	f7ef bc45 	b.w	6188 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   168fe:	2018      	movs	r0, #24
   16900:	f7ef bc42 	b.w	6188 <arch_irq_is_enabled>
{
   16904:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   16906:	4a07      	ldr	r2, [pc, #28]	; (16924 <mayfly_is_enabled+0x34>)
   16908:	4907      	ldr	r1, [pc, #28]	; (16928 <mayfly_is_enabled+0x38>)
   1690a:	4808      	ldr	r0, [pc, #32]	; (1692c <mayfly_is_enabled+0x3c>)
   1690c:	2336      	movs	r3, #54	; 0x36
   1690e:	f004 fbd2 	bl	1b0b6 <printk>
   16912:	4040      	eors	r0, r0
   16914:	f380 8811 	msr	BASEPRI, r0
   16918:	f04f 0003 	mov.w	r0, #3
   1691c:	df02      	svc	2
		break;
	}

	return 0;
}
   1691e:	2000      	movs	r0, #0
   16920:	bd08      	pop	{r3, pc}
   16922:	bf00      	nop
   16924:	00021008 	.word	0x00021008
   16928:	00020414 	.word	0x00020414
   1692c:	000203b4 	.word	0x000203b4

00016930 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   16930:	4288      	cmp	r0, r1
   16932:	d00b      	beq.n	1694c <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   16934:	2801      	cmp	r0, #1
   16936:	d003      	beq.n	16940 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   16938:	2802      	cmp	r0, #2
   1693a:	d009      	beq.n	16950 <mayfly_prio_is_equal+0x20>
   1693c:	2000      	movs	r0, #0
#endif
	       0;
}
   1693e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   16940:	f1a1 0002 	sub.w	r0, r1, #2
   16944:	fab0 f080 	clz	r0, r0
   16948:	0940      	lsrs	r0, r0, #5
   1694a:	4770      	bx	lr
   1694c:	2001      	movs	r0, #1
   1694e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   16950:	f1a1 0001 	sub.w	r0, r1, #1
   16954:	fab0 f080 	clz	r0, r0
   16958:	0940      	lsrs	r0, r0, #5
   1695a:	4770      	bx	lr

0001695c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1695c:	2901      	cmp	r1, #1
{
   1695e:	b508      	push	{r3, lr}
	switch (callee_id) {
   16960:	d00f      	beq.n	16982 <mayfly_pend+0x26>
   16962:	2902      	cmp	r1, #2
   16964:	d00d      	beq.n	16982 <mayfly_pend+0x26>
   16966:	b191      	cbz	r1, 1698e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   16968:	4a0c      	ldr	r2, [pc, #48]	; (1699c <mayfly_pend+0x40>)
   1696a:	490d      	ldr	r1, [pc, #52]	; (169a0 <mayfly_pend+0x44>)
   1696c:	480d      	ldr	r0, [pc, #52]	; (169a4 <mayfly_pend+0x48>)
   1696e:	2367      	movs	r3, #103	; 0x67
   16970:	f004 fba1 	bl	1b0b6 <printk>
   16974:	4040      	eors	r0, r0
   16976:	f380 8811 	msr	BASEPRI, r0
   1697a:	f04f 0003 	mov.w	r0, #3
   1697e:	df02      	svc	2
		break;
	}
}
   16980:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16982:	4b09      	ldr	r3, [pc, #36]	; (169a8 <mayfly_pend+0x4c>)
   16984:	f44f 6200 	mov.w	r2, #2048	; 0x800
   16988:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1698c:	bd08      	pop	{r3, pc}
   1698e:	4b06      	ldr	r3, [pc, #24]	; (169a8 <mayfly_pend+0x4c>)
   16990:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   16994:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16998:	bd08      	pop	{r3, pc}
   1699a:	bf00      	nop
   1699c:	00021008 	.word	0x00021008
   169a0:	00020414 	.word	0x00020414
   169a4:	000203b4 	.word	0x000203b4
   169a8:	e000e100 	.word	0xe000e100

000169ac <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   169ac:	2803      	cmp	r0, #3
{
   169ae:	b510      	push	{r4, lr}
   169b0:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   169b2:	d804      	bhi.n	169be <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   169b4:	4b11      	ldr	r3, [pc, #68]	; (169fc <hal_ticker_instance0_caller_id_get+0x50>)
   169b6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   169b8:	b18c      	cbz	r4, 169de <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   169ba:	4620      	mov	r0, r4
   169bc:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   169be:	4a10      	ldr	r2, [pc, #64]	; (16a00 <hal_ticker_instance0_caller_id_get+0x54>)
   169c0:	4910      	ldr	r1, [pc, #64]	; (16a04 <hal_ticker_instance0_caller_id_get+0x58>)
   169c2:	4811      	ldr	r0, [pc, #68]	; (16a08 <hal_ticker_instance0_caller_id_get+0x5c>)
   169c4:	232b      	movs	r3, #43	; 0x2b
   169c6:	f004 fb76 	bl	1b0b6 <printk>
   169ca:	4040      	eors	r0, r0
   169cc:	f380 8811 	msr	BASEPRI, r0
   169d0:	f04f 0003 	mov.w	r0, #3
   169d4:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   169d6:	4b09      	ldr	r3, [pc, #36]	; (169fc <hal_ticker_instance0_caller_id_get+0x50>)
   169d8:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   169da:	2c00      	cmp	r4, #0
   169dc:	d1ed      	bne.n	169ba <hal_ticker_instance0_caller_id_get+0xe>
   169de:	4a08      	ldr	r2, [pc, #32]	; (16a00 <hal_ticker_instance0_caller_id_get+0x54>)
   169e0:	490a      	ldr	r1, [pc, #40]	; (16a0c <hal_ticker_instance0_caller_id_get+0x60>)
   169e2:	4809      	ldr	r0, [pc, #36]	; (16a08 <hal_ticker_instance0_caller_id_get+0x5c>)
   169e4:	232e      	movs	r3, #46	; 0x2e
   169e6:	f004 fb66 	bl	1b0b6 <printk>
   169ea:	4040      	eors	r0, r0
   169ec:	f380 8811 	msr	BASEPRI, r0
   169f0:	f04f 0003 	mov.w	r0, #3
   169f4:	df02      	svc	2
}
   169f6:	4620      	mov	r0, r4
   169f8:	bd10      	pop	{r4, pc}
   169fa:	bf00      	nop
   169fc:	000210e8 	.word	0x000210e8
   16a00:	00021068 	.word	0x00021068
   16a04:	000210b8 	.word	0x000210b8
   16a08:	000203b4 	.word	0x000203b4
   16a0c:	000210d8 	.word	0x000210d8

00016a10 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   16a10:	3801      	subs	r0, #1
{
   16a12:	b510      	push	{r4, lr}
   16a14:	461c      	mov	r4, r3
	switch (caller_id) {
   16a16:	2804      	cmp	r0, #4
   16a18:	f200 8082 	bhi.w	16b20 <hal_ticker_instance0_sched+0x110>
   16a1c:	e8df f000 	tbb	[pc, r0]
   16a20:	3f302112 	.word	0x3f302112
   16a24:	03          	.byte	0x03
   16a25:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   16a26:	2904      	cmp	r1, #4
   16a28:	d04a      	beq.n	16ac0 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   16a2a:	4a44      	ldr	r2, [pc, #272]	; (16b3c <hal_ticker_instance0_sched+0x12c>)
   16a2c:	4944      	ldr	r1, [pc, #272]	; (16b40 <hal_ticker_instance0_sched+0x130>)
   16a2e:	4845      	ldr	r0, [pc, #276]	; (16b44 <hal_ticker_instance0_sched+0x134>)
   16a30:	23ba      	movs	r3, #186	; 0xba
   16a32:	f004 fb40 	bl	1b0b6 <printk>
   16a36:	4040      	eors	r0, r0
   16a38:	f380 8811 	msr	BASEPRI, r0
   16a3c:	f04f 0003 	mov.w	r0, #3
   16a40:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   16a42:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   16a44:	2904      	cmp	r1, #4
   16a46:	d043      	beq.n	16ad0 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   16a48:	4a3c      	ldr	r2, [pc, #240]	; (16b3c <hal_ticker_instance0_sched+0x12c>)
   16a4a:	493d      	ldr	r1, [pc, #244]	; (16b40 <hal_ticker_instance0_sched+0x130>)
   16a4c:	483d      	ldr	r0, [pc, #244]	; (16b44 <hal_ticker_instance0_sched+0x134>)
   16a4e:	234e      	movs	r3, #78	; 0x4e
   16a50:	f004 fb31 	bl	1b0b6 <printk>
   16a54:	4040      	eors	r0, r0
   16a56:	f380 8811 	msr	BASEPRI, r0
   16a5a:	f04f 0003 	mov.w	r0, #3
   16a5e:	df02      	svc	2
}
   16a60:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   16a62:	2903      	cmp	r1, #3
   16a64:	d03c      	beq.n	16ae0 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   16a66:	4a35      	ldr	r2, [pc, #212]	; (16b3c <hal_ticker_instance0_sched+0x12c>)
   16a68:	4935      	ldr	r1, [pc, #212]	; (16b40 <hal_ticker_instance0_sched+0x130>)
   16a6a:	4836      	ldr	r0, [pc, #216]	; (16b44 <hal_ticker_instance0_sched+0x134>)
   16a6c:	2365      	movs	r3, #101	; 0x65
   16a6e:	f004 fb22 	bl	1b0b6 <printk>
   16a72:	4040      	eors	r0, r0
   16a74:	f380 8811 	msr	BASEPRI, r0
   16a78:	f04f 0003 	mov.w	r0, #3
   16a7c:	df02      	svc	2
}
   16a7e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   16a80:	2904      	cmp	r1, #4
   16a82:	d035      	beq.n	16af0 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   16a84:	4a2d      	ldr	r2, [pc, #180]	; (16b3c <hal_ticker_instance0_sched+0x12c>)
   16a86:	492e      	ldr	r1, [pc, #184]	; (16b40 <hal_ticker_instance0_sched+0x130>)
   16a88:	482e      	ldr	r0, [pc, #184]	; (16b44 <hal_ticker_instance0_sched+0x134>)
   16a8a:	237c      	movs	r3, #124	; 0x7c
   16a8c:	f004 fb13 	bl	1b0b6 <printk>
   16a90:	4040      	eors	r0, r0
   16a92:	f380 8811 	msr	BASEPRI, r0
   16a96:	f04f 0003 	mov.w	r0, #3
   16a9a:	df02      	svc	2
}
   16a9c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   16a9e:	2903      	cmp	r1, #3
   16aa0:	d036      	beq.n	16b10 <hal_ticker_instance0_sched+0x100>
   16aa2:	2904      	cmp	r1, #4
   16aa4:	d02c      	beq.n	16b00 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   16aa6:	4a25      	ldr	r2, [pc, #148]	; (16b3c <hal_ticker_instance0_sched+0x12c>)
   16aa8:	4925      	ldr	r1, [pc, #148]	; (16b40 <hal_ticker_instance0_sched+0x130>)
   16aaa:	4826      	ldr	r0, [pc, #152]	; (16b44 <hal_ticker_instance0_sched+0x134>)
   16aac:	23a2      	movs	r3, #162	; 0xa2
   16aae:	f004 fb02 	bl	1b0b6 <printk>
   16ab2:	4040      	eors	r0, r0
   16ab4:	f380 8811 	msr	BASEPRI, r0
   16ab8:	f04f 0003 	mov.w	r0, #3
   16abc:	df02      	svc	2
}
   16abe:	bd10      	pop	{r4, pc}
			m.param = instance;
   16ac0:	4b21      	ldr	r3, [pc, #132]	; (16b48 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16ac2:	2102      	movs	r1, #2
			m.param = instance;
   16ac4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16ac6:	2003      	movs	r0, #3
}
   16ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16acc:	f7f3 bb9c 	b.w	a208 <mayfly_enqueue>
			m.param = instance;
   16ad0:	4b1e      	ldr	r3, [pc, #120]	; (16b4c <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   16ad2:	2102      	movs	r1, #2
			m.param = instance;
   16ad4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   16ad6:	2000      	movs	r0, #0
}
   16ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   16adc:	f7f3 bb94 	b.w	a208 <mayfly_enqueue>
			m.param = instance;
   16ae0:	4b1b      	ldr	r3, [pc, #108]	; (16b50 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   16ae2:	2101      	movs	r1, #1
			m.param = instance;
   16ae4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   16ae6:	4608      	mov	r0, r1
}
   16ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   16aec:	f7f3 bb8c 	b.w	a208 <mayfly_enqueue>
			m.param = instance;
   16af0:	4b18      	ldr	r3, [pc, #96]	; (16b54 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16af2:	2102      	movs	r1, #2
			m.param = instance;
   16af4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16af6:	2001      	movs	r0, #1
}
   16af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16afc:	f7f3 bb84 	b.w	a208 <mayfly_enqueue>
			m.param = instance;
   16b00:	4b15      	ldr	r3, [pc, #84]	; (16b58 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16b02:	2102      	movs	r1, #2
			m.param = instance;
   16b04:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16b06:	4608      	mov	r0, r1
}
   16b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16b0c:	f7f3 bb7c 	b.w	a208 <mayfly_enqueue>
			m.param = instance;
   16b10:	4b12      	ldr	r3, [pc, #72]	; (16b5c <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16b12:	2101      	movs	r1, #1
			m.param = instance;
   16b14:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16b16:	2002      	movs	r0, #2
}
   16b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16b1c:	f7f3 bb74 	b.w	a208 <mayfly_enqueue>
		LL_ASSERT(0);
   16b20:	4a06      	ldr	r2, [pc, #24]	; (16b3c <hal_ticker_instance0_sched+0x12c>)
   16b22:	4907      	ldr	r1, [pc, #28]	; (16b40 <hal_ticker_instance0_sched+0x130>)
   16b24:	4807      	ldr	r0, [pc, #28]	; (16b44 <hal_ticker_instance0_sched+0x134>)
   16b26:	23c0      	movs	r3, #192	; 0xc0
   16b28:	f004 fac5 	bl	1b0b6 <printk>
   16b2c:	4040      	eors	r0, r0
   16b2e:	f380 8811 	msr	BASEPRI, r0
   16b32:	f04f 0003 	mov.w	r0, #3
   16b36:	df02      	svc	2
}
   16b38:	bd10      	pop	{r4, pc}
   16b3a:	bf00      	nop
   16b3c:	00021068 	.word	0x00021068
   16b40:	00020414 	.word	0x00020414
   16b44:	000203b4 	.word	0x000203b4
   16b48:	200006e4 	.word	0x200006e4
   16b4c:	200006d4 	.word	0x200006d4
   16b50:	200006c4 	.word	0x200006c4
   16b54:	20000714 	.word	0x20000714
   16b58:	200006f4 	.word	0x200006f4
   16b5c:	20000704 	.word	0x20000704

00016b60 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   16b60:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   16b62:	2000      	movs	r0, #0
   16b64:	f7ff b9c8 	b.w	15ef8 <cntr_cmp_set>

00016b68 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   16b68:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   16b6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16b6e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   16b72:	3201      	adds	r2, #1
   16b74:	d008      	beq.n	16b88 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   16b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16b7a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   16b7e:	f013 0301 	ands.w	r3, r3, #1
   16b82:	d10a      	bne.n	16b9a <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   16b84:	4618      	mov	r0, r3
}
   16b86:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   16b88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   16b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16b90:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   16b92:	4293      	cmp	r3, r2
   16b94:	d1ef      	bne.n	16b76 <hci_vendor_read_static_addr+0xe>
	return 0;
   16b96:	2000      	movs	r0, #0
}
   16b98:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   16b9a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   16b9e:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   16ba0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   16ba2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   16ba6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   16baa:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   16bac:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   16bae:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   16bb2:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   16bb6:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   16bb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   16bbc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   16bc0:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   16bc2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   16bc6:	3301      	adds	r3, #1
   16bc8:	d03b      	beq.n	16c42 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   16bca:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   16bce:	3301      	adds	r3, #1
   16bd0:	d037      	beq.n	16c42 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   16bd2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   16bd6:	3301      	adds	r3, #1
   16bd8:	d033      	beq.n	16c42 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   16bda:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   16bde:	3301      	adds	r3, #1
   16be0:	d02f      	beq.n	16c42 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   16be2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   16be6:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   16be8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   16bea:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   16bee:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   16bf2:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   16bf4:	f880 c009 	strb.w	ip, [r0, #9]
   16bf8:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   16bfa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   16bfe:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   16c00:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   16c02:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   16c06:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   16c0a:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   16c0c:	f880 c00d 	strb.w	ip, [r0, #13]
   16c10:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   16c12:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   16c16:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   16c18:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   16c1a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   16c1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   16c22:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   16c24:	73c3      	strb	r3, [r0, #15]
   16c26:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   16c2a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   16c2e:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   16c30:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   16c32:	0a11      	lsrs	r1, r2, #8
   16c34:	f3c3 2307 	ubfx	r3, r3, #8, #8
   16c38:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   16c3a:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   16c3c:	7541      	strb	r1, [r0, #21]
		return 1;
   16c3e:	2001      	movs	r0, #1
}
   16c40:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   16c42:	2210      	movs	r2, #16
   16c44:	2100      	movs	r1, #0
   16c46:	3006      	adds	r0, #6
   16c48:	f005 f87a 	bl	1bd40 <memset>
		return 1;
   16c4c:	2001      	movs	r0, #1
}
   16c4e:	bd08      	pop	{r3, pc}

00016c50 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   16c50:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   16c52:	2210      	movs	r2, #16
{
   16c54:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   16c56:	2100      	movs	r1, #0
   16c58:	f005 f872 	bl	1bd40 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   16c5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16c60:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   16c64:	3201      	adds	r2, #1
   16c66:	d034      	beq.n	16cd2 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   16c68:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   16c6c:	3201      	adds	r2, #1
   16c6e:	d030      	beq.n	16cd2 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   16c70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   16c74:	3201      	adds	r2, #1
   16c76:	d02c      	beq.n	16cd2 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   16c78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   16c7c:	3201      	adds	r2, #1
   16c7e:	d028      	beq.n	16cd2 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   16c80:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   16c84:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   16c86:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   16c88:	0a08      	lsrs	r0, r1, #8
   16c8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   16c8e:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   16c90:	70e0      	strb	r0, [r4, #3]
   16c92:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   16c94:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   16c98:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   16c9a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   16c9c:	0a08      	lsrs	r0, r1, #8
   16c9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   16ca2:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   16ca4:	71e0      	strb	r0, [r4, #7]
   16ca6:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   16ca8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   16cac:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   16cae:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   16cb0:	0a08      	lsrs	r0, r1, #8
   16cb2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   16cb6:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   16cb8:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   16cba:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   16cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   16cc0:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   16cc2:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   16cc4:	0a11      	lsrs	r1, r2, #8
   16cc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   16cca:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   16ccc:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   16cce:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   16cd0:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   16cd2:	4620      	mov	r0, r4
   16cd4:	2210      	movs	r2, #16
}
   16cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   16cda:	2100      	movs	r1, #0
   16cdc:	f005 b830 	b.w	1bd40 <memset>

00016ce0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   16ce0:	4b02      	ldr	r3, [pc, #8]	; (16cec <net_buf_pool_get+0xc>)
   16ce2:	222c      	movs	r2, #44	; 0x2c
   16ce4:	fb02 3000 	mla	r0, r2, r0, r3
   16ce8:	4770      	bx	lr
   16cea:	bf00      	nop
   16cec:	20000a88 	.word	0x20000a88

00016cf0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16cf0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   16cf2:	4b06      	ldr	r3, [pc, #24]	; (16d0c <net_buf_id+0x1c>)
   16cf4:	212c      	movs	r1, #44	; 0x2c
   16cf6:	fb01 3302 	mla	r3, r1, r2, r3
   16cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   16cfc:	7f1b      	ldrb	r3, [r3, #28]
   16cfe:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   16d00:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   16d02:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   16d06:	fbb0 f0f3 	udiv	r0, r0, r3
   16d0a:	4770      	bx	lr
   16d0c:	20000a88 	.word	0x20000a88

00016d10 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   16d10:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16d12:	4b0a      	ldr	r3, [pc, #40]	; (16d3c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16d14:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16d16:	242c      	movs	r4, #44	; 0x2c
   16d18:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   16d1c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16d20:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   16d22:	6823      	ldr	r3, [r4, #0]
   16d24:	429a      	cmp	r2, r3
   16d26:	bf94      	ite	ls
   16d28:	600a      	strls	r2, [r1, #0]
   16d2a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   16d2c:	f7ff ffe0 	bl	16cf0 <net_buf_id>
   16d30:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   16d34:	fb02 3000 	mla	r0, r2, r0, r3
   16d38:	bd10      	pop	{r4, pc}
   16d3a:	bf00      	nop
   16d3c:	20000a88 	.word	0x20000a88

00016d40 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   16d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d44:	4605      	mov	r5, r0
   16d46:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   16d48:	4610      	mov	r0, r2
   16d4a:	4619      	mov	r1, r3
{
   16d4c:	4691      	mov	r9, r2
   16d4e:	4698      	mov	r8, r3
   16d50:	4617      	mov	r7, r2
   16d52:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   16d54:	f008 fd69 	bl	1f82a <sys_clock_timeout_end_calc>
   16d58:	4682      	mov	sl, r0
   16d5a:	468b      	mov	fp, r1
	__asm__ volatile(
   16d5c:	f04f 0320 	mov.w	r3, #32
   16d60:	f3ef 8111 	mrs	r1, BASEPRI
   16d64:	f383 8812 	msr	BASEPRI_MAX, r3
   16d68:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16d6c:	8b6b      	ldrh	r3, [r5, #26]
   16d6e:	2b00      	cmp	r3, #0
   16d70:	d05a      	beq.n	16e28 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   16d72:	8b2a      	ldrh	r2, [r5, #24]
   16d74:	429a      	cmp	r2, r3
   16d76:	d93e      	bls.n	16df6 <net_buf_alloc_len+0xb6>
   16d78:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   16d7a:	2200      	movs	r2, #0
   16d7c:	2300      	movs	r3, #0
   16d7e:	4628      	mov	r0, r5
   16d80:	f003 f9b8 	bl	1a0f4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   16d84:	9900      	ldr	r1, [sp, #0]
   16d86:	4604      	mov	r4, r0
   16d88:	2800      	cmp	r0, #0
   16d8a:	d034      	beq.n	16df6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   16d8c:	f381 8811 	msr	BASEPRI, r1
   16d90:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   16d94:	9b01      	ldr	r3, [sp, #4]
   16d96:	2b00      	cmp	r3, #0
   16d98:	d056      	beq.n	16e48 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   16d9a:	ea58 0309 	orrs.w	r3, r8, r9
   16d9e:	d00f      	beq.n	16dc0 <net_buf_alloc_len+0x80>
   16da0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   16da4:	bf08      	it	eq
   16da6:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   16daa:	d009      	beq.n	16dc0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   16dac:	f004 f840 	bl	1ae30 <sys_clock_tick_get>
   16db0:	ebba 0700 	subs.w	r7, sl, r0
   16db4:	eb6b 0601 	sbc.w	r6, fp, r1
   16db8:	2e00      	cmp	r6, #0
   16dba:	bfbc      	itt	lt
   16dbc:	2700      	movlt	r7, #0
   16dbe:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16dc0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16dc2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 16e60 <net_buf_alloc_len+0x120>
   16dc6:	f04f 092c 	mov.w	r9, #44	; 0x2c
   16dca:	fb09 8303 	mla	r3, r9, r3, r8
   16dce:	463a      	mov	r2, r7
   16dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16dd2:	681b      	ldr	r3, [r3, #0]
   16dd4:	a901      	add	r1, sp, #4
   16dd6:	681d      	ldr	r5, [r3, #0]
   16dd8:	4620      	mov	r0, r4
   16dda:	4633      	mov	r3, r6
   16ddc:	47a8      	blx	r5
   16dde:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16de0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16de2:	2800      	cmp	r0, #0
   16de4:	d131      	bne.n	16e4a <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   16de6:	79a0      	ldrb	r0, [r4, #6]
   16de8:	4621      	mov	r1, r4
   16dea:	fb00 8009 	mla	r0, r0, r9, r8
   16dee:	f008 fab7 	bl	1f360 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   16df2:	462c      	mov	r4, r5
}
   16df4:	e024      	b.n	16e40 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   16df6:	8b68      	ldrh	r0, [r5, #26]
   16df8:	1e43      	subs	r3, r0, #1
   16dfa:	836b      	strh	r3, [r5, #26]
   16dfc:	f381 8811 	msr	BASEPRI, r1
   16e00:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   16e04:	7f2a      	ldrb	r2, [r5, #28]
   16e06:	f102 0417 	add.w	r4, r2, #23
   16e0a:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   16e0e:	8b2c      	ldrh	r4, [r5, #24]
   16e10:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   16e12:	6aac      	ldr	r4, [r5, #40]	; 0x28
   16e14:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   16e18:	4811      	ldr	r0, [pc, #68]	; (16e60 <net_buf_alloc_len+0x120>)
   16e1a:	4b12      	ldr	r3, [pc, #72]	; (16e64 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   16e1c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   16e1e:	1a2d      	subs	r5, r5, r0
   16e20:	10ad      	asrs	r5, r5, #2
   16e22:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   16e24:	71a5      	strb	r5, [r4, #6]
		goto success;
   16e26:	e7b5      	b.n	16d94 <net_buf_alloc_len+0x54>
   16e28:	f381 8811 	msr	BASEPRI, r1
   16e2c:	f3bf 8f6f 	isb	sy
   16e30:	464a      	mov	r2, r9
   16e32:	4643      	mov	r3, r8
   16e34:	4628      	mov	r0, r5
   16e36:	f003 f95d 	bl	1a0f4 <z_impl_k_queue_get>
	if (!buf) {
   16e3a:	4604      	mov	r4, r0
   16e3c:	2800      	cmp	r0, #0
   16e3e:	d1a9      	bne.n	16d94 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   16e40:	4620      	mov	r0, r4
   16e42:	b003      	add	sp, #12
   16e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   16e48:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   16e4a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   16e4c:	2201      	movs	r2, #1
	buf->frags = NULL;
   16e4e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   16e50:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   16e52:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   16e54:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   16e56:	6923      	ldr	r3, [r4, #16]
   16e58:	81e2      	strh	r2, [r4, #14]
   16e5a:	60a3      	str	r3, [r4, #8]
	return buf;
   16e5c:	e7f0      	b.n	16e40 <net_buf_alloc_len+0x100>
   16e5e:	bf00      	nop
   16e60:	20000a88 	.word	0x20000a88
   16e64:	ba2e8ba3 	.word	0xba2e8ba3

00016e68 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e6c:	4d16      	ldr	r5, [pc, #88]	; (16ec8 <net_buf_unref+0x60>)
   16e6e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16e70:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   16e72:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   16e74:	b90c      	cbnz	r4, 16e7a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   16e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   16e7a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   16e7c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   16e80:	3b01      	subs	r3, #1
   16e82:	b2db      	uxtb	r3, r3
   16e84:	7123      	strb	r3, [r4, #4]
   16e86:	2b00      	cmp	r3, #0
   16e88:	d1f5      	bne.n	16e76 <net_buf_unref+0xe>
		if (buf->__buf) {
   16e8a:	6921      	ldr	r1, [r4, #16]
   16e8c:	b159      	cbz	r1, 16ea6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   16e8e:	7963      	ldrb	r3, [r4, #5]
   16e90:	079b      	lsls	r3, r3, #30
   16e92:	d407      	bmi.n	16ea4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16e94:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   16e96:	fb07 5303 	mla	r3, r7, r3, r5
   16e9a:	4620      	mov	r0, r4
   16e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16e9e:	681b      	ldr	r3, [r3, #0]
   16ea0:	689b      	ldr	r3, [r3, #8]
   16ea2:	4798      	blx	r3
			buf->__buf = NULL;
   16ea4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   16ea6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16ea8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   16eaa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   16eae:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16eb0:	6a1b      	ldr	r3, [r3, #32]
   16eb2:	b11b      	cbz	r3, 16ebc <net_buf_unref+0x54>
			pool->destroy(buf);
   16eb4:	4620      	mov	r0, r4
   16eb6:	4798      	blx	r3
{
   16eb8:	4644      	mov	r4, r8
   16eba:	e7db      	b.n	16e74 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   16ebc:	4621      	mov	r1, r4
   16ebe:	fb00 5007 	mla	r0, r0, r7, r5
   16ec2:	f008 fa4d 	bl	1f360 <k_queue_prepend>
}
   16ec6:	e7f7      	b.n	16eb8 <net_buf_unref+0x50>
   16ec8:	20000a88 	.word	0x20000a88

00016ecc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   16ecc:	4b08      	ldr	r3, [pc, #32]	; (16ef0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   16ece:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   16ed0:	1ac3      	subs	r3, r0, r3
{
   16ed2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   16ed4:	4907      	ldr	r1, [pc, #28]	; (16ef4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   16ed6:	109b      	asrs	r3, r3, #2
{
   16ed8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   16eda:	4359      	muls	r1, r3
   16edc:	4806      	ldr	r0, [pc, #24]	; (16ef8 <onoff_stop+0x2c>)
   16ede:	2240      	movs	r2, #64	; 0x40
   16ee0:	f006 ffed 	bl	1debe <stop>
	notify(mgr, res);
   16ee4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   16ee6:	4601      	mov	r1, r0
	notify(mgr, res);
   16ee8:	4620      	mov	r0, r4
}
   16eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   16eee:	4718      	bx	r3
   16ef0:	20002ac4 	.word	0x20002ac4
   16ef4:	b6db6db7 	.word	0xb6db6db7
   16ef8:	0001fc10 	.word	0x0001fc10

00016efc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   16efc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   16efe:	4c0c      	ldr	r4, [pc, #48]	; (16f30 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   16f00:	4a0c      	ldr	r2, [pc, #48]	; (16f34 <onoff_start+0x38>)
   16f02:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   16f04:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   16f06:	9300      	str	r3, [sp, #0]
{
   16f08:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   16f0a:	460b      	mov	r3, r1
   16f0c:	490a      	ldr	r1, [pc, #40]	; (16f38 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   16f0e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   16f10:	4361      	muls	r1, r4
{
   16f12:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   16f14:	4809      	ldr	r0, [pc, #36]	; (16f3c <onoff_start+0x40>)
   16f16:	f006 fffe 	bl	1df16 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   16f1a:	1e01      	subs	r1, r0, #0
   16f1c:	da05      	bge.n	16f2a <onoff_start+0x2e>
		notify(mgr, err);
   16f1e:	4630      	mov	r0, r6
   16f20:	462b      	mov	r3, r5
	}
}
   16f22:	b002      	add	sp, #8
   16f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   16f28:	4718      	bx	r3
}
   16f2a:	b002      	add	sp, #8
   16f2c:	bd70      	pop	{r4, r5, r6, pc}
   16f2e:	bf00      	nop
   16f30:	20002ac4 	.word	0x20002ac4
   16f34:	0001df87 	.word	0x0001df87
   16f38:	b6db6db7 	.word	0xb6db6db7
   16f3c:	0001fc10 	.word	0x0001fc10

00016f40 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16f40:	2200      	movs	r2, #0
{
   16f42:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16f44:	2101      	movs	r1, #1
{
   16f46:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   16f48:	4610      	mov	r0, r2
   16f4a:	f7ef f92b 	bl	61a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   16f4e:	2000      	movs	r0, #0
   16f50:	f7ef f8f6 	bl	6140 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   16f54:	480f      	ldr	r0, [pc, #60]	; (16f94 <clk_init+0x54>)
   16f56:	f001 fe05 	bl	18b64 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   16f5a:	4b0f      	ldr	r3, [pc, #60]	; (16f98 <clk_init+0x58>)
   16f5c:	4298      	cmp	r0, r3
   16f5e:	d115      	bne.n	16f8c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   16f60:	f007 ffc9 	bl	1eef6 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   16f64:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   16f66:	490d      	ldr	r1, [pc, #52]	; (16f9c <clk_init+0x5c>)
   16f68:	4630      	mov	r0, r6
   16f6a:	f004 f90d 	bl	1b188 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   16f6e:	2800      	cmp	r0, #0
   16f70:	db0b      	blt.n	16f8a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   16f72:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   16f74:	4909      	ldr	r1, [pc, #36]	; (16f9c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   16f76:	2501      	movs	r5, #1
   16f78:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   16f7a:	f104 001c 	add.w	r0, r4, #28
   16f7e:	f004 f903 	bl	1b188 <onoff_manager_init>
		if (err < 0) {
   16f82:	2800      	cmp	r0, #0
   16f84:	db01      	blt.n	16f8a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   16f86:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   16f88:	2000      	movs	r0, #0
}
   16f8a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   16f8c:	f06f 0004 	mvn.w	r0, #4
   16f90:	e7fb      	b.n	16f8a <clk_init+0x4a>
   16f92:	bf00      	nop
   16f94:	00016fd5 	.word	0x00016fd5
   16f98:	0bad0000 	.word	0x0bad0000
   16f9c:	00021120 	.word	0x00021120

00016fa0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   16fa0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   16fa2:	230c      	movs	r3, #12
   16fa4:	4809      	ldr	r0, [pc, #36]	; (16fcc <clkstarted_handle.constprop.0+0x2c>)
   16fa6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   16fa8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   16faa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   16fac:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   16fb0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   16fb2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   16fb4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   16fb6:	4418      	add	r0, r3
   16fb8:	f006 ff6e 	bl	1de98 <set_on_state>
	if (callback) {
   16fbc:	b12d      	cbz	r5, 16fca <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   16fbe:	4632      	mov	r2, r6
   16fc0:	462b      	mov	r3, r5
   16fc2:	4803      	ldr	r0, [pc, #12]	; (16fd0 <clkstarted_handle.constprop.0+0x30>)
}
   16fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   16fc8:	4718      	bx	r3
}
   16fca:	bd70      	pop	{r4, r5, r6, pc}
   16fcc:	20002ac4 	.word	0x20002ac4
   16fd0:	0001fc10 	.word	0x0001fc10

00016fd4 <clock_event_handler>:
	switch (event) {
   16fd4:	b110      	cbz	r0, 16fdc <clock_event_handler+0x8>
   16fd6:	2801      	cmp	r0, #1
   16fd8:	d004      	beq.n	16fe4 <clock_event_handler+0x10>
   16fda:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   16fdc:	4b03      	ldr	r3, [pc, #12]	; (16fec <clock_event_handler+0x18>)
   16fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16fe0:	075b      	lsls	r3, r3, #29
   16fe2:	d101      	bne.n	16fe8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   16fe4:	f7ff bfdc 	b.w	16fa0 <clkstarted_handle.constprop.0>
}
   16fe8:	4770      	bx	lr
   16fea:	bf00      	nop
   16fec:	20002ac4 	.word	0x20002ac4

00016ff0 <generic_hfclk_start>:
{
   16ff0:	b508      	push	{r3, lr}
	__asm__ volatile(
   16ff2:	f04f 0320 	mov.w	r3, #32
   16ff6:	f3ef 8111 	mrs	r1, BASEPRI
   16ffa:	f383 8812 	msr	BASEPRI_MAX, r3
   16ffe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   17002:	4a12      	ldr	r2, [pc, #72]	; (1704c <generic_hfclk_start+0x5c>)
   17004:	6813      	ldr	r3, [r2, #0]
   17006:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1700a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1700e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   17010:	d00c      	beq.n	1702c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17016:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1701a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1701e:	f013 0301 	ands.w	r3, r3, #1
   17022:	d003      	beq.n	1702c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   17024:	480a      	ldr	r0, [pc, #40]	; (17050 <generic_hfclk_start+0x60>)
   17026:	f006 ff37 	bl	1de98 <set_on_state>
			already_started = true;
   1702a:	2301      	movs	r3, #1
	__asm__ volatile(
   1702c:	f381 8811 	msr	BASEPRI, r1
   17030:	f3bf 8f6f 	isb	sy
	if (already_started) {
   17034:	b123      	cbz	r3, 17040 <generic_hfclk_start+0x50>
}
   17036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1703a:	2000      	movs	r0, #0
   1703c:	f7ff bfb0 	b.w	16fa0 <clkstarted_handle.constprop.0>
}
   17040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   17044:	2001      	movs	r0, #1
   17046:	f001 bd9d 	b.w	18b84 <nrfx_clock_start>
   1704a:	bf00      	nop
   1704c:	20002b14 	.word	0x20002b14
   17050:	20002b04 	.word	0x20002b04

00017054 <api_blocking_start>:
{
   17054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17056:	2200      	movs	r2, #0
   17058:	2301      	movs	r3, #1
   1705a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1705e:	ab04      	add	r3, sp, #16
   17060:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17064:	4a09      	ldr	r2, [pc, #36]	; (1708c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17066:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1706a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1706c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17070:	f006 ff82 	bl	1df78 <api_start>
	if (err < 0) {
   17074:	2800      	cmp	r0, #0
   17076:	db05      	blt.n	17084 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   17078:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1707c:	2300      	movs	r3, #0
   1707e:	4668      	mov	r0, sp
   17080:	f003 f892 	bl	1a1a8 <z_impl_k_sem_take>
}
   17084:	b007      	add	sp, #28
   17086:	f85d fb04 	ldr.w	pc, [sp], #4
   1708a:	bf00      	nop
   1708c:	0001df9f 	.word	0x0001df9f

00017090 <lfclk_start>:
{
   17090:	b510      	push	{r4, lr}
	if (!once) {
   17092:	4c07      	ldr	r4, [pc, #28]	; (170b0 <lfclk_start+0x20>)
   17094:	7823      	ldrb	r3, [r4, #0]
   17096:	b92b      	cbnz	r3, 170a4 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   17098:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1709c:	f008 fbc1 	bl	1f822 <z_impl_k_busy_wait>
		once = true;
   170a0:	2301      	movs	r3, #1
   170a2:	7023      	strb	r3, [r4, #0]
}
   170a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   170a8:	2000      	movs	r0, #0
   170aa:	f001 bd6b 	b.w	18b84 <nrfx_clock_start>
   170ae:	bf00      	nop
   170b0:	20002dc1 	.word	0x20002dc1

000170b4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   170b4:	4b09      	ldr	r3, [pc, #36]	; (170dc <generic_hfclk_stop+0x28>)
   170b6:	f3bf 8f5b 	dmb	ish
   170ba:	e853 2f00 	ldrex	r2, [r3]
   170be:	f022 0102 	bic.w	r1, r2, #2
   170c2:	e843 1000 	strex	r0, r1, [r3]
   170c6:	2800      	cmp	r0, #0
   170c8:	d1f7      	bne.n	170ba <generic_hfclk_stop+0x6>
   170ca:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   170ce:	07d3      	lsls	r3, r2, #31
   170d0:	d402      	bmi.n	170d8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   170d2:	2001      	movs	r0, #1
   170d4:	f001 bd9e 	b.w	18c14 <nrfx_clock_stop>
}
   170d8:	4770      	bx	lr
   170da:	bf00      	nop
   170dc:	20002b14 	.word	0x20002b14

000170e0 <z_nrf_clock_control_get_onoff>:
}
   170e0:	4a02      	ldr	r2, [pc, #8]	; (170ec <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   170e2:	b2c3      	uxtb	r3, r0
}
   170e4:	201c      	movs	r0, #28
   170e6:	fb03 2000 	mla	r0, r3, r0, r2
   170ea:	4770      	bx	lr
   170ec:	20002ac4 	.word	0x20002ac4

000170f0 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   170f0:	4b09      	ldr	r3, [pc, #36]	; (17118 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   170f2:	f3bf 8f5b 	dmb	ish
   170f6:	e853 2f00 	ldrex	r2, [r3]
   170fa:	f042 0101 	orr.w	r1, r2, #1
   170fe:	e843 1000 	strex	r0, r1, [r3]
   17102:	2800      	cmp	r0, #0
   17104:	d1f7      	bne.n	170f6 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   17106:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   1710a:	0793      	lsls	r3, r2, #30
   1710c:	d402      	bmi.n	17114 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1710e:	2001      	movs	r0, #1
   17110:	f001 bd38 	b.w	18b84 <nrfx_clock_start>
}
   17114:	4770      	bx	lr
   17116:	bf00      	nop
   17118:	20002b14 	.word	0x20002b14

0001711c <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1711c:	4b09      	ldr	r3, [pc, #36]	; (17144 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   1711e:	f3bf 8f5b 	dmb	ish
   17122:	e853 2f00 	ldrex	r2, [r3]
   17126:	f022 0101 	bic.w	r1, r2, #1
   1712a:	e843 1000 	strex	r0, r1, [r3]
   1712e:	2800      	cmp	r0, #0
   17130:	d1f7      	bne.n	17122 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   17132:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   17136:	0793      	lsls	r3, r2, #30
   17138:	d402      	bmi.n	17140 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1713a:	2001      	movs	r0, #1
   1713c:	f001 bd6a 	b.w	18c14 <nrfx_clock_stop>
}
   17140:	4770      	bx	lr
   17142:	bf00      	nop
   17144:	20002b14 	.word	0x20002b14

00017148 <z_nrf_clock_control_lf_on>:
{
   17148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1714c:	4939      	ldr	r1, [pc, #228]	; (17234 <z_nrf_clock_control_lf_on+0xec>)
   1714e:	f3bf 8f5b 	dmb	ish
   17152:	4607      	mov	r7, r0
   17154:	2201      	movs	r2, #1
   17156:	e851 3f00 	ldrex	r3, [r1]
   1715a:	e841 2000 	strex	r0, r2, [r1]
   1715e:	2800      	cmp	r0, #0
   17160:	d1f9      	bne.n	17156 <z_nrf_clock_control_lf_on+0xe>
   17162:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   17166:	b933      	cbnz	r3, 17176 <z_nrf_clock_control_lf_on+0x2e>
   17168:	4933      	ldr	r1, [pc, #204]	; (17238 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   1716a:	4834      	ldr	r0, [pc, #208]	; (1723c <z_nrf_clock_control_lf_on+0xf4>)
   1716c:	604b      	str	r3, [r1, #4]
   1716e:	60cb      	str	r3, [r1, #12]
   17170:	608a      	str	r2, [r1, #8]
   17172:	f004 f81c 	bl	1b1ae <onoff_request>
	switch (start_mode) {
   17176:	1e7b      	subs	r3, r7, #1
   17178:	2b01      	cmp	r3, #1
   1717a:	d82f      	bhi.n	171dc <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1717c:	2f01      	cmp	r7, #1
   1717e:	d107      	bne.n	17190 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   17180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17184:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   17188:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1718c:	2b01      	cmp	r3, #1
   1718e:	d025      	beq.n	171dc <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17190:	f008 f84d 	bl	1f22e <k_is_in_isr>
   17194:	4604      	mov	r4, r0
   17196:	b918      	cbnz	r0, 171a0 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   17198:	4b29      	ldr	r3, [pc, #164]	; (17240 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   1719a:	781b      	ldrb	r3, [r3, #0]
   1719c:	2b00      	cmp	r3, #0
   1719e:	d141      	bne.n	17224 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   171a0:	f04f 0320 	mov.w	r3, #32
   171a4:	f3ef 8611 	mrs	r6, BASEPRI
   171a8:	f383 8812 	msr	BASEPRI_MAX, r3
   171ac:	f3bf 8f6f 	isb	sy
   171b0:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   171b2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 17244 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   171b6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   171ba:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   171be:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   171c2:	03d2      	lsls	r2, r2, #15
   171c4:	d50c      	bpl.n	171e0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   171c6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   171ca:	2b01      	cmp	r3, #1
   171cc:	d001      	beq.n	171d2 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   171ce:	2f01      	cmp	r7, #1
   171d0:	d106      	bne.n	171e0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   171d2:	b30c      	cbz	r4, 17218 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   171d4:	f386 8811 	msr	BASEPRI, r6
   171d8:	f3bf 8f6f 	isb	sy
}
   171dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   171e0:	b1ac      	cbz	r4, 1720e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   171e2:	4630      	mov	r0, r6
   171e4:	f7ee ffa2 	bl	612c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   171e8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   171ec:	2b00      	cmp	r3, #0
   171ee:	d1e4      	bne.n	171ba <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   171f0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   171f4:	2a00      	cmp	r2, #0
   171f6:	d0e0      	beq.n	171ba <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171f8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   171fc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   17200:	2301      	movs	r3, #1
   17202:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   17206:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1720a:	60ab      	str	r3, [r5, #8]
}
   1720c:	e7d5      	b.n	171ba <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   1720e:	2100      	movs	r1, #0
   17210:	2021      	movs	r0, #33	; 0x21
   17212:	f003 fc3f 	bl	1aa94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17216:	e7e7      	b.n	171e8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   17218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1721c:	2202      	movs	r2, #2
   1721e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   17222:	e7db      	b.n	171dc <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   17224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17228:	2202      	movs	r2, #2
   1722a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1722e:	4606      	mov	r6, r0
}
   17230:	e7bf      	b.n	171b2 <z_nrf_clock_control_lf_on+0x6a>
   17232:	bf00      	nop
   17234:	20002b18 	.word	0x20002b18
   17238:	20002ab4 	.word	0x20002ab4
   1723c:	20002ae0 	.word	0x20002ae0
   17240:	200031f3 	.word	0x200031f3
   17244:	e000e100 	.word	0xe000e100

00017248 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   17248:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1724a:	4c04      	ldr	r4, [pc, #16]	; (1725c <rtt_console_init+0x14>)
   1724c:	4620      	mov	r0, r4
   1724e:	f7ed fe0d 	bl	4e6c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   17252:	4620      	mov	r0, r4
   17254:	f7ef fab4 	bl	67c0 <__stdout_hook_install>

	return 0;
}
   17258:	2000      	movs	r0, #0
   1725a:	bd10      	pop	{r4, pc}
   1725c:	00017261 	.word	0x00017261

00017260 <rtt_console_out>:
{
   17260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17262:	4e14      	ldr	r6, [pc, #80]	; (172b4 <rtt_console_out+0x54>)
	char c = (char)character;
   17264:	f88d 0007 	strb.w	r0, [sp, #7]
{
   17268:	4604      	mov	r4, r0
	char c = (char)character;
   1726a:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   1726c:	f3ef 8711 	mrs	r7, BASEPRI
   17270:	f04f 0120 	mov.w	r1, #32
   17274:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   17278:	2201      	movs	r2, #1
   1727a:	f10d 0107 	add.w	r1, sp, #7
   1727e:	2000      	movs	r0, #0
   17280:	f002 fcc2 	bl	19c08 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   17284:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   17288:	b120      	cbz	r0, 17294 <rtt_console_out+0x34>
			host_present = true;
   1728a:	2301      	movs	r3, #1
   1728c:	7033      	strb	r3, [r6, #0]
}
   1728e:	4620      	mov	r0, r4
   17290:	b003      	add	sp, #12
   17292:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   17294:	7833      	ldrb	r3, [r6, #0]
   17296:	2b00      	cmp	r3, #0
   17298:	d0f9      	beq.n	1728e <rtt_console_out+0x2e>
			if (max_cnt) {
   1729a:	3d01      	subs	r5, #1
   1729c:	d008      	beq.n	172b0 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1729e:	f007 ffc6 	bl	1f22e <k_is_in_isr>
   172a2:	2800      	cmp	r0, #0
   172a4:	d1e2      	bne.n	1726c <rtt_console_out+0xc>
   172a6:	2100      	movs	r1, #0
   172a8:	2042      	movs	r0, #66	; 0x42
   172aa:	f003 fbf3 	bl	1aa94 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   172ae:	e7dd      	b.n	1726c <rtt_console_out+0xc>
				host_present = false;
   172b0:	7035      	strb	r5, [r6, #0]
   172b2:	e7ec      	b.n	1728e <rtt_console_out+0x2e>
   172b4:	20002dc2 	.word	0x20002dc2

000172b8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   172b8:	b530      	push	{r4, r5, lr}
	return port->config;
   172ba:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   172bc:	7b04      	ldrb	r4, [r0, #12]
   172be:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   172c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   172c6:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   172ca:	b085      	sub	sp, #20
   172cc:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   172d0:	d104      	bne.n	172dc <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   172d2:	4628      	mov	r0, r5
   172d4:	f001 ff3c 	bl	19150 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   172d8:	2000      	movs	r0, #0
   172da:	e02e      	b.n	1733a <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
   172dc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   172e0:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   172e4:	d12b      	bne.n	1733e <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   172e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   172ea:	bf0c      	ite	eq
   172ec:	2304      	moveq	r3, #4
   172ee:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   172f0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   172f4:	6883      	ldr	r3, [r0, #8]
   172f6:	fa23 f101 	lsr.w	r1, r3, r1
   172fa:	07c9      	lsls	r1, r1, #31
   172fc:	d42b      	bmi.n	17356 <gpio_nrfx_pin_interrupt_configure+0x9e>
   172fe:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   17302:	d128      	bne.n	17356 <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   17304:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17308:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1730c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   17314:	07db      	lsls	r3, r3, #31
   17316:	d41e      	bmi.n	17356 <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   17318:	f10d 0407 	add.w	r4, sp, #7
   1731c:	4621      	mov	r1, r4
   1731e:	4628      	mov	r0, r5
   17320:	f001 fe7e 	bl	19020 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   17324:	4b14      	ldr	r3, [pc, #80]	; (17378 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   17326:	4298      	cmp	r0, r3
   17328:	d114      	bne.n	17354 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1732a:	4620      	mov	r0, r4
   1732c:	f001 fec6 	bl	190bc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   17330:	4b12      	ldr	r3, [pc, #72]	; (1737c <gpio_nrfx_pin_interrupt_configure+0xc4>)
   17332:	4298      	cmp	r0, r3
   17334:	d00e      	beq.n	17354 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   17336:	f06f 000b 	mvn.w	r0, #11
}
   1733a:	b005      	add	sp, #20
   1733c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1733e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   17342:	d005      	beq.n	17350 <gpio_nrfx_pin_interrupt_configure+0x98>
   17344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   17348:	bf0c      	ite	eq
   1734a:	2302      	moveq	r3, #2
   1734c:	2301      	movne	r3, #1
   1734e:	e7cf      	b.n	172f0 <gpio_nrfx_pin_interrupt_configure+0x38>
   17350:	2303      	movs	r3, #3
   17352:	e7cd      	b.n	172f0 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   17354:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17356:	2300      	movs	r3, #0
   17358:	4619      	mov	r1, r3
   1735a:	aa02      	add	r2, sp, #8
   1735c:	4628      	mov	r0, r5
   1735e:	f001 fd37 	bl	18dd0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17362:	4b06      	ldr	r3, [pc, #24]	; (1737c <gpio_nrfx_pin_interrupt_configure+0xc4>)
   17364:	4298      	cmp	r0, r3
   17366:	d104      	bne.n	17372 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   17368:	2101      	movs	r1, #1
   1736a:	4628      	mov	r0, r5
   1736c:	f001 feac 	bl	190c8 <nrfx_gpiote_trigger_enable>
   17370:	e7b2      	b.n	172d8 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   17372:	f06f 0004 	mvn.w	r0, #4
   17376:	e7e0      	b.n	1733a <gpio_nrfx_pin_interrupt_configure+0x82>
   17378:	0bad0004 	.word	0x0bad0004
   1737c:	0bad0000 	.word	0x0bad0000

00017380 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17380:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   17382:	f001 fe8b 	bl	1909c <nrfx_gpiote_is_init>
   17386:	4604      	mov	r4, r0
   17388:	b968      	cbnz	r0, 173a6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1738a:	f001 fe5f 	bl	1904c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1738e:	4b08      	ldr	r3, [pc, #32]	; (173b0 <gpio_nrfx_init+0x30>)
   17390:	4298      	cmp	r0, r3
   17392:	d10a      	bne.n	173aa <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   17394:	4807      	ldr	r0, [pc, #28]	; (173b4 <gpio_nrfx_init+0x34>)
   17396:	4621      	mov	r1, r4
   17398:	f001 fe3c 	bl	19014 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1739c:	4622      	mov	r2, r4
   1739e:	2105      	movs	r1, #5
   173a0:	2006      	movs	r0, #6
   173a2:	f7ee feff 	bl	61a4 <z_arm_irq_priority_set>
		return 0;
   173a6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   173a8:	bd10      	pop	{r4, pc}
		return -EIO;
   173aa:	f06f 0004 	mvn.w	r0, #4
   173ae:	e7fb      	b.n	173a8 <gpio_nrfx_init+0x28>
   173b0:	0bad0000 	.word	0x0bad0000
   173b4:	000173b9 	.word	0x000173b9

000173b8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   173b8:	0943      	lsrs	r3, r0, #5
{
   173ba:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   173bc:	d110      	bne.n	173e0 <nrfx_gpio_handler+0x28>
	return list->head;
   173be:	4b09      	ldr	r3, [pc, #36]	; (173e4 <nrfx_gpio_handler+0x2c>)
   173c0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   173c2:	b169      	cbz	r1, 173e0 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
   173c4:	2501      	movs	r5, #1
	return node->next;
   173c6:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   173c8:	4e07      	ldr	r6, [pc, #28]	; (173e8 <nrfx_gpio_handler+0x30>)
   173ca:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
   173cc:	688a      	ldr	r2, [r1, #8]
   173ce:	402a      	ands	r2, r5
   173d0:	d002      	beq.n	173d8 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
   173d2:	684b      	ldr	r3, [r1, #4]
   173d4:	4630      	mov	r0, r6
   173d6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   173d8:	b114      	cbz	r4, 173e0 <nrfx_gpio_handler+0x28>
   173da:	4621      	mov	r1, r4
   173dc:	6824      	ldr	r4, [r4, #0]
   173de:	e7f5      	b.n	173cc <nrfx_gpio_handler+0x14>
}
   173e0:	bd70      	pop	{r4, r5, r6, pc}
   173e2:	bf00      	nop
   173e4:	20002b1c 	.word	0x20002b1c
   173e8:	0001fc28 	.word	0x0001fc28

000173ec <gpio_nrfx_pin_configure>:
{
   173ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   173f0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   173f2:	7b3b      	ldrb	r3, [r7, #12]
   173f4:	f001 051f 	and.w	r5, r1, #31
{
   173f8:	b085      	sub	sp, #20
   173fa:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   173fc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   17400:	4614      	mov	r4, r2
   17402:	b9ca      	cbnz	r2, 17438 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   17404:	a902      	add	r1, sp, #8
   17406:	4628      	mov	r0, r5
   17408:	f001 fe0a 	bl	19020 <nrfx_gpiote_channel_get>
   1740c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1740e:	4628      	mov	r0, r5
   17410:	f001 fec6 	bl	191a0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   17414:	4b48      	ldr	r3, [pc, #288]	; (17538 <gpio_nrfx_pin_configure+0x14c>)
   17416:	4298      	cmp	r0, r3
   17418:	d004      	beq.n	17424 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1741a:	f06f 0004 	mvn.w	r0, #4
}
   1741e:	b005      	add	sp, #20
   17420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   17424:	4284      	cmp	r4, r0
   17426:	d105      	bne.n	17434 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   17428:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1742c:	f001 fe40 	bl	190b0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   17430:	42a0      	cmp	r0, r4
   17432:	d1f2      	bne.n	1741a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17434:	2000      	movs	r0, #0
   17436:	e7f2      	b.n	1741e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   17438:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1743c:	f10d 0103 	add.w	r1, sp, #3
   17440:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   17442:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   17446:	f001 fdeb 	bl	19020 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1744a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1744c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1744e:	aa02      	add	r2, sp, #8
   17450:	4649      	mov	r1, r9
   17452:	4628      	mov	r0, r5
   17454:	f001 fcbc 	bl	18dd0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17458:	4b37      	ldr	r3, [pc, #220]	; (17538 <gpio_nrfx_pin_configure+0x14c>)
   1745a:	4298      	cmp	r0, r3
   1745c:	d002      	beq.n	17464 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1745e:	f06f 0015 	mvn.w	r0, #21
   17462:	e7dc      	b.n	1741e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   17464:	4580      	cmp	r8, r0
   17466:	d103      	bne.n	17470 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   17468:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1746c:	f001 fe20 	bl	190b0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   17470:	05a3      	lsls	r3, r4, #22
   17472:	d54e      	bpl.n	17512 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17474:	4b31      	ldr	r3, [pc, #196]	; (1753c <gpio_nrfx_pin_configure+0x150>)
   17476:	4a32      	ldr	r2, [pc, #200]	; (17540 <gpio_nrfx_pin_configure+0x154>)
   17478:	4023      	ands	r3, r4
   1747a:	4293      	cmp	r3, r2
   1747c:	d03a      	beq.n	174f4 <gpio_nrfx_pin_configure+0x108>
   1747e:	d80c      	bhi.n	1749a <gpio_nrfx_pin_configure+0xae>
   17480:	2b06      	cmp	r3, #6
   17482:	d014      	beq.n	174ae <gpio_nrfx_pin_configure+0xc2>
   17484:	d804      	bhi.n	17490 <gpio_nrfx_pin_configure+0xa4>
   17486:	b193      	cbz	r3, 174ae <gpio_nrfx_pin_configure+0xc2>
   17488:	2b02      	cmp	r3, #2
   1748a:	d1e8      	bne.n	1745e <gpio_nrfx_pin_configure+0x72>
   1748c:	2304      	movs	r3, #4
   1748e:	e00e      	b.n	174ae <gpio_nrfx_pin_configure+0xc2>
   17490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   17494:	d1e3      	bne.n	1745e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   17496:	2301      	movs	r3, #1
   17498:	e009      	b.n	174ae <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1749a:	4a2a      	ldr	r2, [pc, #168]	; (17544 <gpio_nrfx_pin_configure+0x158>)
   1749c:	4293      	cmp	r3, r2
   1749e:	d02b      	beq.n	174f8 <gpio_nrfx_pin_configure+0x10c>
   174a0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   174a4:	d02a      	beq.n	174fc <gpio_nrfx_pin_configure+0x110>
   174a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   174aa:	d1d8      	bne.n	1745e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   174ac:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   174ae:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   174b2:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   174b6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   174ba:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   174bc:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   174c0:	bf54      	ite	pl
   174c2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   174c6:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   174c8:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   174ca:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   174ce:	d517      	bpl.n	17500 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   174d0:	687b      	ldr	r3, [r7, #4]
   174d2:	2101      	movs	r1, #1
   174d4:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   174d8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   174dc:	2200      	movs	r2, #0
   174de:	a901      	add	r1, sp, #4
   174e0:	4628      	mov	r0, r5
   174e2:	f001 fd1f 	bl	18f24 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   174e6:	4b14      	ldr	r3, [pc, #80]	; (17538 <gpio_nrfx_pin_configure+0x14c>)
   174e8:	4298      	cmp	r0, r3
   174ea:	bf14      	ite	ne
   174ec:	f06f 0015 	mvnne.w	r0, #21
   174f0:	2000      	moveq	r0, #0
   174f2:	e794      	b.n	1741e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   174f4:	2307      	movs	r3, #7
   174f6:	e7da      	b.n	174ae <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   174f8:	2305      	movs	r3, #5
   174fa:	e7d8      	b.n	174ae <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   174fc:	2303      	movs	r3, #3
   174fe:	e7d6      	b.n	174ae <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   17500:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   17502:	bf41      	itttt	mi
   17504:	687b      	ldrmi	r3, [r7, #4]
   17506:	2101      	movmi	r1, #1
   17508:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1750c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   17510:	e7e4      	b.n	174dc <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   17512:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17514:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   17518:	bf54      	ite	pl
   1751a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1751e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17520:	461a      	mov	r2, r3
   17522:	a901      	add	r1, sp, #4
   17524:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   17526:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1752a:	f001 fc51 	bl	18dd0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1752e:	4b02      	ldr	r3, [pc, #8]	; (17538 <gpio_nrfx_pin_configure+0x14c>)
   17530:	4298      	cmp	r0, r3
   17532:	f43f af7f 	beq.w	17434 <gpio_nrfx_pin_configure+0x48>
   17536:	e792      	b.n	1745e <gpio_nrfx_pin_configure+0x72>
   17538:	0bad0000 	.word	0x0bad0000
   1753c:	00f00006 	.word	0x00f00006
   17540:	00100006 	.word	0x00100006
   17544:	00400002 	.word	0x00400002

00017548 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   17548:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1754a:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1754c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   17550:	f002 fadc 	bl	19b0c <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   17554:	4b03      	ldr	r3, [pc, #12]	; (17564 <i2c_nrfx_twim_recover_bus+0x1c>)
   17556:	4298      	cmp	r0, r3
}
   17558:	bf14      	ite	ne
   1755a:	f06f 000f 	mvnne.w	r0, #15
   1755e:	2000      	moveq	r0, #0
   17560:	bd08      	pop	{r3, pc}
   17562:	bf00      	nop
   17564:	0bad0000 	.word	0x0bad0000

00017568 <init_twim>:
{
   17568:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1756a:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   1756c:	4a08      	ldr	r2, [pc, #32]	; (17590 <init_twim+0x28>)
   1756e:	6840      	ldr	r0, [r0, #4]
   17570:	4623      	mov	r3, r4
   17572:	f104 0130 	add.w	r1, r4, #48	; 0x30
   17576:	f002 f887 	bl	19688 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1757a:	4b06      	ldr	r3, [pc, #24]	; (17594 <init_twim+0x2c>)
   1757c:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
   1757e:	bf03      	ittte	eq
   17580:	2301      	moveq	r3, #1
   17582:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
	return 0;
   17586:	2000      	moveq	r0, #0
		return -EIO;
   17588:	f06f 0004 	mvnne.w	r0, #4
}
   1758c:	bd10      	pop	{r4, pc}
   1758e:	bf00      	nop
   17590:	00017599 	.word	0x00017599
   17594:	0bad0000 	.word	0x0bad0000

00017598 <event_handler>:
	switch (p_event->type) {
   17598:	7803      	ldrb	r3, [r0, #0]
   1759a:	2b01      	cmp	r3, #1
   1759c:	d008      	beq.n	175b0 <event_handler+0x18>
   1759e:	2b02      	cmp	r3, #2
   175a0:	d008      	beq.n	175b4 <event_handler+0x1c>
   175a2:	b94b      	cbnz	r3, 175b8 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   175a4:	4b05      	ldr	r3, [pc, #20]	; (175bc <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   175a6:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   175a8:	f101 0018 	add.w	r0, r1, #24
   175ac:	f002 bdd6 	b.w	1a15c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   175b0:	4b03      	ldr	r3, [pc, #12]	; (175c0 <event_handler+0x28>)
   175b2:	e7f8      	b.n	175a6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   175b4:	4b03      	ldr	r3, [pc, #12]	; (175c4 <event_handler+0x2c>)
   175b6:	e7f6      	b.n	175a6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   175b8:	4b03      	ldr	r3, [pc, #12]	; (175c8 <event_handler+0x30>)
   175ba:	e7f4      	b.n	175a6 <event_handler+0xe>
   175bc:	0bad0000 	.word	0x0bad0000
   175c0:	0bae0001 	.word	0x0bae0001
   175c4:	0bae0002 	.word	0x0bae0002
   175c8:	0bad0001 	.word	0x0bad0001

000175cc <i2c_nrfx_twim_transfer>:
{
   175cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   175d0:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   175d2:	6906      	ldr	r6, [r0, #16]
{
   175d4:	b089      	sub	sp, #36	; 0x24
   175d6:	4698      	mov	r8, r3
   175d8:	4605      	mov	r5, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   175da:	893b      	ldrh	r3, [r7, #8]
   175dc:	9300      	str	r3, [sp, #0]
{
   175de:	460c      	mov	r4, r1
   175e0:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   175e2:	2100      	movs	r1, #0
   175e4:	2214      	movs	r2, #20
   175e6:	a803      	add	r0, sp, #12
	uint8_t *msg_buf = dev_data->msg_buf;
   175e8:	f8d6 9048 	ldr.w	r9, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   175ec:	f004 fba8 	bl	1bd40 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   175f0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   175f4:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   175f8:	b1bb      	cbz	r3, 1762a <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   175fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   175fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17602:	4630      	mov	r0, r6
   17604:	f002 fdd0 	bl	1a1a8 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   17608:	f106 0a18 	add.w	sl, r6, #24
   1760c:	2200      	movs	r2, #0
   1760e:	2300      	movs	r3, #0
   17610:	4650      	mov	r0, sl
   17612:	f002 fdc9 	bl	1a1a8 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   17616:	4638      	mov	r0, r7
   17618:	f002 f886 	bl	19728 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1761c:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   17620:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   17622:	45d8      	cmp	r8, fp
   17624:	d309      	bcc.n	1763a <i2c_nrfx_twim_transfer+0x6e>
   17626:	2400      	movs	r4, #0
   17628:	e051      	b.n	176ce <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   1762a:	4628      	mov	r0, r5
   1762c:	f7ff ff9c 	bl	17568 <init_twim>
   17630:	2800      	cmp	r0, #0
   17632:	dae2      	bge.n	175fa <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
   17634:	f06f 0404 	mvn.w	r4, #4
   17638:	e04f      	b.n	176da <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1763a:	7a21      	ldrb	r1, [r4, #8]
   1763c:	070a      	lsls	r2, r1, #28
   1763e:	f100 808f 	bmi.w	17760 <i2c_nrfx_twim_transfer+0x194>
		bool concat_next = ((i + 1) < num_msgs)
   17642:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   17646:	45d8      	cmp	r8, fp
   17648:	6862      	ldr	r2, [r4, #4]
   1764a:	d20a      	bcs.n	17662 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1764c:	078b      	lsls	r3, r1, #30
   1764e:	d408      	bmi.n	17662 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   17650:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   17652:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   17656:	f000 0001 	and.w	r0, r0, #1
   1765a:	f003 0304 	and.w	r3, r3, #4
   1765e:	4303      	orrs	r3, r0
   17660:	d016      	beq.n	17690 <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
   17662:	b1bd      	cbz	r5, 17694 <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
   17664:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   17666:	f8dd c000 	ldr.w	ip, [sp]
   1766a:	18a8      	adds	r0, r5, r2
   1766c:	4560      	cmp	r0, ip
   1766e:	d87a      	bhi.n	17766 <i2c_nrfx_twim_transfer+0x19a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   17670:	07c8      	lsls	r0, r1, #31
   17672:	d406      	bmi.n	17682 <i2c_nrfx_twim_transfer+0xb6>
				memcpy(msg_buf + msg_buf_used,
   17674:	6821      	ldr	r1, [r4, #0]
   17676:	9301      	str	r3, [sp, #4]
   17678:	eb09 0005 	add.w	r0, r9, r5
   1767c:	f004 fb55 	bl	1bd2a <memcpy>
   17680:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
   17682:	6862      	ldr	r2, [r4, #4]
   17684:	4415      	add	r5, r2
   17686:	b2ad      	uxth	r5, r5
		if (concat_next) {
   17688:	2b00      	cmp	r3, #0
   1768a:	d037      	beq.n	176fc <i2c_nrfx_twim_transfer+0x130>
   1768c:	340c      	adds	r4, #12
   1768e:	e7c8      	b.n	17622 <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
   17690:	2301      	movs	r3, #1
   17692:	e7e8      	b.n	17666 <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   17694:	07c9      	lsls	r1, r1, #31
   17696:	d524      	bpl.n	176e2 <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
   17698:	6823      	ldr	r3, [r4, #0]
   1769a:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   1769c:	6863      	ldr	r3, [r4, #4]
   1769e:	9304      	str	r3, [sp, #16]
   176a0:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   176a2:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   176a4:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   176a8:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   176ac:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   176b0:	a903      	add	r1, sp, #12
   176b2:	bf0c      	ite	eq
   176b4:	2220      	moveq	r2, #32
   176b6:	2200      	movne	r2, #0
   176b8:	4638      	mov	r0, r7
   176ba:	f002 f899 	bl	197f0 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   176be:	4b2e      	ldr	r3, [pc, #184]	; (17778 <i2c_nrfx_twim_transfer+0x1ac>)
   176c0:	4298      	cmp	r0, r3
   176c2:	d021      	beq.n	17708 <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
   176c4:	330b      	adds	r3, #11
   176c6:	4298      	cmp	r0, r3
   176c8:	d053      	beq.n	17772 <i2c_nrfx_twim_transfer+0x1a6>
			ret = -EIO;
   176ca:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
   176ce:	4638      	mov	r0, r7
   176d0:	f002 f83a 	bl	19748 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   176d4:	4630      	mov	r0, r6
   176d6:	f002 fd41 	bl	1a15c <z_impl_k_sem_give>
}
   176da:	4620      	mov	r0, r4
   176dc:	b009      	add	sp, #36	; 0x24
   176de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
   176e2:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   176e4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   176e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   176ec:	d0d4      	beq.n	17698 <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   176ee:	897b      	ldrh	r3, [r7, #10]
   176f0:	4293      	cmp	r3, r2
   176f2:	d33b      	bcc.n	1776c <i2c_nrfx_twim_transfer+0x1a0>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   176f4:	4648      	mov	r0, r9
   176f6:	f004 fb18 	bl	1bd2a <memcpy>
			msg_buf_used = msgs[i].len;
   176fa:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   176fc:	2d00      	cmp	r5, #0
   176fe:	d0cb      	beq.n	17698 <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
   17700:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
   17704:	9504      	str	r5, [sp, #16]
   17706:	e7cc      	b.n	176a2 <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
   17708:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1770c:	2300      	movs	r3, #0
   1770e:	4650      	mov	r0, sl
   17710:	f002 fd4a 	bl	1a1a8 <z_impl_k_sem_take>
		if (ret != 0) {
   17714:	b138      	cbz	r0, 17726 <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
   17716:	4638      	mov	r0, r7
   17718:	f002 f816 	bl	19748 <nrfx_twim_disable>
   1771c:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   17720:	f002 f9f4 	bl	19b0c <nrfx_twi_twim_bus_recover>
   17724:	e7d1      	b.n	176ca <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
   17726:	6c73      	ldr	r3, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   17728:	4a13      	ldr	r2, [pc, #76]	; (17778 <i2c_nrfx_twim_transfer+0x1ac>)
   1772a:	4293      	cmp	r3, r2
   1772c:	d1cd      	bne.n	176ca <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
   1772e:	7a23      	ldrb	r3, [r4, #8]
   17730:	07db      	lsls	r3, r3, #31
   17732:	d401      	bmi.n	17738 <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
   17734:	2500      	movs	r5, #0
   17736:	e7a9      	b.n	1768c <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
   17738:	9b06      	ldr	r3, [sp, #24]
   1773a:	4599      	cmp	r9, r3
   1773c:	d1fa      	bne.n	17734 <i2c_nrfx_twim_transfer+0x168>
   1773e:	4623      	mov	r3, r4
   17740:	e008      	b.n	17754 <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
   17742:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
   17744:	68d8      	ldr	r0, [r3, #12]
   17746:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
   17748:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   1774a:	fa19 f181 	uxtah	r1, r9, r1
   1774e:	f004 faec 	bl	1bd2a <memcpy>
				j--;
   17752:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
   17754:	685a      	ldr	r2, [r3, #4]
   17756:	4295      	cmp	r5, r2
   17758:	f1a3 030c 	sub.w	r3, r3, #12
   1775c:	d2f1      	bcs.n	17742 <i2c_nrfx_twim_transfer+0x176>
   1775e:	e7e9      	b.n	17734 <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
   17760:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17764:	e7b3      	b.n	176ce <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
   17766:	f06f 041b 	mvn.w	r4, #27
   1776a:	e7b0      	b.n	176ce <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
   1776c:	f06f 0415 	mvn.w	r4, #21
   17770:	e7ad      	b.n	176ce <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
   17772:	f06f 040f 	mvn.w	r4, #15
   17776:	e7aa      	b.n	176ce <i2c_nrfx_twim_transfer+0x102>
   17778:	0bad0000 	.word	0x0bad0000

0001777c <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   1777c:	4802      	ldr	r0, [pc, #8]	; (17788 <pwm_nrfx_get_cycles_per_sec+0xc>)
   1777e:	2100      	movs	r1, #0
   17780:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   17784:	2000      	movs	r0, #0
   17786:	4770      	bx	lr
   17788:	00f42400 	.word	0x00f42400

0001778c <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   1778c:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
   1778e:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   17790:	6912      	ldr	r2, [r2, #16]
{
   17792:	b538      	push	{r3, r4, r5, lr}
   17794:	f100 0308 	add.w	r3, r0, #8
   17798:	3204      	adds	r2, #4
   1779a:	f100 040c 	add.w	r4, r0, #12
   1779e:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
   177a0:	f913 5b01 	ldrsb.w	r5, [r3], #1
   177a4:	2d00      	cmp	r5, #0
   177a6:	bfb4      	ite	lt
   177a8:	2500      	movlt	r5, #0
   177aa:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   177ae:	42a3      	cmp	r3, r4

		data->current[i] = value;
   177b0:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   177b4:	d1f4      	bne.n	177a0 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   177b6:	2300      	movs	r3, #0
   177b8:	461a      	mov	r2, r3
   177ba:	f001 fdc1 	bl	19340 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   177be:	4b03      	ldr	r3, [pc, #12]	; (177cc <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
   177c0:	4298      	cmp	r0, r3
	}

	return 0;
}
   177c2:	bf14      	ite	ne
   177c4:	f06f 000f 	mvnne.w	r0, #15
   177c8:	2000      	moveq	r0, #0
   177ca:	bd38      	pop	{r3, r4, r5, pc}
   177cc:	0bad0000 	.word	0x0bad0000

000177d0 <ccs811_channel_get>:
{
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_result_type *rp = &drv_data->result;
	uint32_t uval;

	switch (chan) {
   177d0:	391b      	subs	r1, #27
	struct ccs811_data *drv_data = dev->data;
   177d2:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   177d4:	2904      	cmp	r1, #4
   177d6:	d820      	bhi.n	1781a <ccs811_channel_get+0x4a>
   177d8:	e8df f001 	tbb	[pc, r1]
   177dc:	0a1f0803 	.word	0x0a1f0803
   177e0:	19          	.byte	0x19
   177e1:	00          	.byte	0x00
	case SENSOR_CHAN_CO2:
		val->val1 = rp->co2;
   177e2:	8a1b      	ldrh	r3, [r3, #16]
		val->val2 = 0;

		break;
	case SENSOR_CHAN_VOC:
		val->val1 = rp->voc;
   177e4:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
   177e6:	2000      	movs	r0, #0
   177e8:	6050      	str	r0, [r2, #4]

		break;
   177ea:	4770      	bx	lr
		val->val1 = rp->voc;
   177ec:	8a5b      	ldrh	r3, [r3, #18]
   177ee:	e7f9      	b.n	177e4 <ccs811_channel_get+0x14>
	case SENSOR_CHAN_VOLTAGE:
		/*
		 * Raw ADC readings are contained in least significant 10 bits
		 */
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   177f0:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
   177f2:	480b      	ldr	r0, [pc, #44]	; (17820 <ccs811_channel_get+0x50>)
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   177f4:	f240 614c 	movw	r1, #1612	; 0x64c
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   177f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   177fc:	434b      	muls	r3, r1
		val->val1 = uval / 1000000U;
   177fe:	fbb3 f1f0 	udiv	r1, r3, r0
		val->val2 = uval % 1000000;
   17802:	fb00 3311 	mls	r3, r0, r1, r3
		val->val1 = uval / 1000000U;
   17806:	6011      	str	r1, [r2, #0]
		val->val2 = uval % 1000000;
   17808:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   1780a:	2000      	movs	r0, #0
		break;
   1780c:	4770      	bx	lr
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   1780e:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
   17810:	2000      	movs	r0, #0
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   17812:	0a9b      	lsrs	r3, r3, #10
		val->val2 = uval % 1000000;
   17814:	e9c2 0300 	strd	r0, r3, [r2]
		break;
   17818:	4770      	bx	lr
	switch (chan) {
   1781a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1781e:	4770      	bx	lr
   17820:	000f4240 	.word	0x000f4240

00017824 <ccs811_init>:
}

#endif /* CONFIG_CCS811_TRIGGER */

static int ccs811_init(const struct device *dev)
{
   17824:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct ccs811_data *drv_data = dev->data;
   17826:	6904      	ldr	r4, [r0, #16]
	int status;
	uint16_t fw_ver;
	uint8_t cmd;
	uint8_t hw_id;

	*drv_data = (struct ccs811_data){ 0 };
   17828:	221c      	movs	r2, #28
   1782a:	2100      	movs	r1, #0
   1782c:	4620      	mov	r0, r4
   1782e:	f004 fa87 	bl	1bd40 <memset>
   17832:	485a      	ldr	r0, [pc, #360]	; (1799c <ccs811_init+0x178>)
   17834:	f002 fa38 	bl	19ca8 <z_impl_device_get_binding>
	drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
   17838:	6020      	str	r0, [r4, #0]
	if (drv_data->i2c == NULL) {
   1783a:	b920      	cbnz	r0, 17846 <ccs811_init+0x22>
		LOG_ERR("Failed to get pointer to %s device!",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
   1783c:	f06f 0515 	mvn.w	r5, #21
#endif

out:
	set_wake(drv_data, false);
	return ret;
}
   17840:	4628      	mov	r0, r5
   17842:	b003      	add	sp, #12
   17844:	bd30      	pop	{r4, r5, pc}
   17846:	4856      	ldr	r0, [pc, #344]	; (179a0 <ccs811_init+0x17c>)
   17848:	f002 fa2e 	bl	19ca8 <z_impl_device_get_binding>
	drv_data->wake_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, wake_gpios));
   1784c:	60e0      	str	r0, [r4, #12]
	if (drv_data->wake_gpio == NULL) {
   1784e:	2800      	cmp	r0, #0
   17850:	d0f4      	beq.n	1783c <ccs811_init+0x18>
	struct gpio_driver_data *data =
   17852:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   17854:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   17856:	6813      	ldr	r3, [r2, #0]
   17858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1785c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1785e:	680b      	ldr	r3, [r1, #0]
   17860:	f640 2201 	movw	r2, #2561	; 0xa01
   17864:	210c      	movs	r1, #12
   17866:	4798      	blx	r3
	set_wake(drv_data, true);
   17868:	68e0      	ldr	r0, [r4, #12]
   1786a:	2101      	movs	r1, #1
   1786c:	f006 ff52 	bl	1e714 <set_wake.isra.0>
	k_msleep(1);
   17870:	2001      	movs	r0, #1
   17872:	f006 ff08 	bl	1e686 <k_msleep.isra.0>
   17876:	484a      	ldr	r0, [pc, #296]	; (179a0 <ccs811_init+0x17c>)
   17878:	f002 fa16 	bl	19ca8 <z_impl_device_get_binding>
	drv_data->reset_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, reset_gpios));
   1787c:	60a0      	str	r0, [r4, #8]
	if (drv_data->reset_gpio == NULL) {
   1787e:	2800      	cmp	r0, #0
   17880:	d0dc      	beq.n	1783c <ccs811_init+0x18>
	struct gpio_driver_data *data =
   17882:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   17884:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   17886:	6813      	ldr	r3, [r2, #0]
   17888:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1788c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1788e:	680b      	ldr	r3, [r1, #0]
   17890:	f240 6201 	movw	r2, #1537	; 0x601
   17894:	210b      	movs	r1, #11
   17896:	4798      	blx	r3
	k_msleep(1);
   17898:	2001      	movs	r0, #1
   1789a:	f006 fef4 	bl	1e686 <k_msleep.isra.0>
   1789e:	4841      	ldr	r0, [pc, #260]	; (179a4 <ccs811_init+0x180>)
   178a0:	f002 fa02 	bl	19ca8 <z_impl_device_get_binding>
	drv_data->irq_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, irq_gpios));
   178a4:	6060      	str	r0, [r4, #4]
	if (drv_data->irq_gpio == NULL) {
   178a6:	2800      	cmp	r0, #0
   178a8:	d0c8      	beq.n	1783c <ccs811_init+0x18>
	k_msleep(20);            /* t_START assuming recent power-on */
   178aa:	2014      	movs	r0, #20
   178ac:	f006 feeb 	bl	1e686 <k_msleep.isra.0>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 1);
   178b0:	68a0      	ldr	r0, [r4, #8]
   178b2:	2201      	movs	r2, #1
   178b4:	210b      	movs	r1, #11
   178b6:	f006 fed6 	bl	1e666 <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
   178ba:	200f      	movs	r0, #15
   178bc:	f007 ffb1 	bl	1f822 <z_impl_k_busy_wait>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 0);
   178c0:	2200      	movs	r2, #0
   178c2:	210b      	movs	r1, #11
   178c4:	68a0      	ldr	r0, [r4, #8]
   178c6:	f006 fece 	bl	1e666 <gpio_pin_set.isra.0>
	k_msleep(2);             /* t_START after reset */
   178ca:	2002      	movs	r0, #2
   178cc:	f006 fedb 	bl	1e686 <k_msleep.isra.0>
	ret = switch_to_app_mode(drv_data->i2c);
   178d0:	6825      	ldr	r5, [r4, #0]
	status = fetch_status(i2c);
   178d2:	4628      	mov	r0, r5
   178d4:	f006 fef5 	bl	1e6c2 <fetch_status>
	if (status < 0) {
   178d8:	2800      	cmp	r0, #0
   178da:	da06      	bge.n	178ea <ccs811_init+0xc6>
		ret = -EIO;
   178dc:	f06f 0504 	mvn.w	r5, #4
	set_wake(drv_data, false);
   178e0:	68e0      	ldr	r0, [r4, #12]
   178e2:	2100      	movs	r1, #0
   178e4:	f006 ff16 	bl	1e714 <set_wake.isra.0>
	return ret;
   178e8:	e7aa      	b.n	17840 <ccs811_init+0x1c>
	if (!(status & CCS811_STATUS_APP_VALID)) {
   178ea:	06c1      	lsls	r1, r0, #27
   178ec:	d516      	bpl.n	1791c <ccs811_init+0xf8>
	if (status & CCS811_STATUS_FW_MODE) {
   178ee:	0602      	lsls	r2, r0, #24
   178f0:	d417      	bmi.n	17922 <ccs811_init+0xfe>
	buf = CCS811_REG_APP_START;
   178f2:	23f4      	movs	r3, #244	; 0xf4
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
   178f4:	2201      	movs	r2, #1
   178f6:	f10d 0106 	add.w	r1, sp, #6
   178fa:	4628      	mov	r0, r5
	buf = CCS811_REG_APP_START;
   178fc:	f88d 3006 	strb.w	r3, [sp, #6]
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
   17900:	f006 fed1 	bl	1e6a6 <i2c_write.constprop.0>
   17904:	2800      	cmp	r0, #0
   17906:	dbe9      	blt.n	178dc <ccs811_init+0xb8>
	k_msleep(1);             /* t_APP_START */
   17908:	2001      	movs	r0, #1
   1790a:	f006 febc 	bl	1e686 <k_msleep.isra.0>
	status = fetch_status(i2c);
   1790e:	4628      	mov	r0, r5
   17910:	f006 fed7 	bl	1e6c2 <fetch_status>
	if (status < 0) {
   17914:	2800      	cmp	r0, #0
   17916:	dbe1      	blt.n	178dc <ccs811_init+0xb8>
	if (!(status & CCS811_STATUS_FW_MODE)) {
   17918:	0603      	lsls	r3, r0, #24
   1791a:	d402      	bmi.n	17922 <ccs811_init+0xfe>
		ret = -EINVAL;
   1791c:	f06f 0515 	mvn.w	r5, #21
   17920:	e7de      	b.n	178e0 <ccs811_init+0xbc>
	if (i2c_reg_read_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   17922:	2320      	movs	r3, #32
   17924:	6820      	ldr	r0, [r4, #0]
   17926:	f88d 3006 	strb.w	r3, [sp, #6]
 */
static inline int i2c_reg_read_byte(const struct device *dev,
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
   1792a:	f10d 0203 	add.w	r2, sp, #3
   1792e:	2301      	movs	r3, #1
   17930:	f10d 0106 	add.w	r1, sp, #6
   17934:	f006 fe82 	bl	1e63c <i2c_write_read.constprop.0>
   17938:	2800      	cmp	r0, #0
   1793a:	dbcf      	blt.n	178dc <ccs811_init+0xb8>
	if (hw_id != CCS881_HW_ID) {
   1793c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17940:	2b81      	cmp	r3, #129	; 0x81
   17942:	d1eb      	bne.n	1791c <ccs811_init+0xf8>
	cmd = CCS811_REG_FW_APP_VERSION;
   17944:	2324      	movs	r3, #36	; 0x24
   17946:	f88d 3002 	strb.w	r3, [sp, #2]
	if (i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1794a:	2302      	movs	r3, #2
   1794c:	6820      	ldr	r0, [r4, #0]
   1794e:	f10d 0206 	add.w	r2, sp, #6
   17952:	eb0d 0103 	add.w	r1, sp, r3
   17956:	f006 fe71 	bl	1e63c <i2c_write_read.constprop.0>
   1795a:	2800      	cmp	r0, #0
   1795c:	dbbe      	blt.n	178dc <ccs811_init+0xb8>
	fw_ver = sys_be16_to_cpu(fw_ver);
   1795e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   17962:	6820      	ldr	r0, [r4, #0]
   17964:	ba5b      	rev16	r3, r3
	fw_ver = sys_be16_to_cpu(fw_ver);
   17966:	f8ad 3006 	strh.w	r3, [sp, #6]
	drv_data->app_fw_ver = fw_ver >> 8U;
   1796a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1796e:	7663      	strb	r3, [r4, #25]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   17970:	2510      	movs	r5, #16
   17972:	2301      	movs	r3, #1

	return i2c_write(dev, tx_buf, 2, dev_addr);
   17974:	2202      	movs	r2, #2
   17976:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
   17978:	f88d 3004 	strb.w	r3, [sp, #4]
   1797c:	f88d 5005 	strb.w	r5, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   17980:	f006 fe91 	bl	1e6a6 <i2c_write.constprop.0>
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   17984:	2800      	cmp	r0, #0
   17986:	dba9      	blt.n	178dc <ccs811_init+0xb8>
	status = fetch_status(drv_data->i2c);
   17988:	6820      	ldr	r0, [r4, #0]
	drv_data->mode = meas_mode;
   1798a:	7625      	strb	r5, [r4, #24]
	status = fetch_status(drv_data->i2c);
   1798c:	f006 fe99 	bl	1e6c2 <fetch_status>
	if (status < 0) {
   17990:	2800      	cmp	r0, #0
   17992:	dba3      	blt.n	178dc <ccs811_init+0xb8>
	if (status & CCS811_STATUS_ERROR) {
   17994:	f010 0501 	ands.w	r5, r0, #1
   17998:	d0a2      	beq.n	178e0 <ccs811_init+0xbc>
   1799a:	e7bf      	b.n	1791c <ccs811_init+0xf8>
   1799c:	00021a65 	.word	0x00021a65
   179a0:	00021903 	.word	0x00021903
   179a4:	0002190b 	.word	0x0002190b

000179a8 <hts221_channel_get>:

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   179a8:	290d      	cmp	r1, #13
{
   179aa:	b570      	push	{r4, r5, r6, lr}
	struct hts221_data *data = dev->data;
   179ac:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   179ae:	d120      	bne.n	179f2 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   179b0:	88c5      	ldrh	r5, [r0, #6]
			   (data->t_sample - data->t0_out) /
   179b2:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   179b6:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
   179b8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
			   (data->t1_out - data->t0_out) +
   179bc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   179c0:	1b5b      	subs	r3, r3, r5
			   (data->t_sample - data->t0_out) /
   179c2:	1ba4      	subs	r4, r4, r6
			   (data->t1_out - data->t0_out) +
   179c4:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   179c6:	4363      	muls	r3, r4
			   (data->t_sample - data->t0_out) /
   179c8:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   179cc:	442b      	add	r3, r5
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
   179ce:	2b00      	cmp	r3, #0
   179d0:	4619      	mov	r1, r3
   179d2:	bfb8      	it	lt
   179d4:	1dd9      	addlt	r1, r3, #7
   179d6:	10c9      	asrs	r1, r1, #3
   179d8:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 8) * (1000000 / 8);
   179da:	4259      	negs	r1, r3
   179dc:	f001 0107 	and.w	r1, r1, #7
   179e0:	f003 0307 	and.w	r3, r3, #7
   179e4:	bf58      	it	pl
   179e6:	424b      	negpl	r3, r1
   179e8:	4911      	ldr	r1, [pc, #68]	; (17a30 <hts221_channel_get+0x88>)
			   (data->h1_t0_out - data->h0_t0_out) +
			   data->h0_rh_x2;

		/* convert humidity x2 to percent */
		val->val1 = conv_val / 2;
		val->val2 = (conv_val % 2) * 500000;
   179ea:	434b      	muls	r3, r1
   179ec:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
   179ee:	2000      	movs	r0, #0
}
   179f0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   179f2:	2910      	cmp	r1, #16
   179f4:	d119      	bne.n	17a2a <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   179f6:	7905      	ldrb	r5, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
   179f8:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   179fc:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
   179fe:	f9b0 4000 	ldrsh.w	r4, [r0]
			   (data->h1_t0_out - data->h0_t0_out) +
   17a02:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   17a06:	1b5b      	subs	r3, r3, r5
			   (data->rh_sample - data->h0_t0_out) /
   17a08:	1ba4      	subs	r4, r4, r6
			   (data->h1_t0_out - data->h0_t0_out) +
   17a0a:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   17a0c:	4363      	muls	r3, r4
			   (data->rh_sample - data->h0_t0_out) /
   17a0e:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   17a12:	442b      	add	r3, r5
		val->val1 = conv_val / 2;
   17a14:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   17a18:	1049      	asrs	r1, r1, #1
		val->val2 = (conv_val % 2) * 500000;
   17a1a:	2b00      	cmp	r3, #0
   17a1c:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
   17a20:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 2) * 500000;
   17a22:	bfb8      	it	lt
   17a24:	425b      	neglt	r3, r3
   17a26:	4903      	ldr	r1, [pc, #12]	; (17a34 <hts221_channel_get+0x8c>)
   17a28:	e7df      	b.n	179ea <hts221_channel_get+0x42>
		return -ENOTSUP;
   17a2a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17a2e:	e7df      	b.n	179f0 <hts221_channel_get+0x48>
   17a30:	0001e848 	.word	0x0001e848
   17a34:	0007a120 	.word	0x0007a120

00017a38 <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
   17a38:	b530      	push	{r4, r5, lr}
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
   17a3a:	6844      	ldr	r4, [r0, #4]
{
   17a3c:	b087      	sub	sp, #28
   17a3e:	4605      	mov	r5, r0
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
   17a40:	f10d 0107 	add.w	r1, sp, #7
   17a44:	4620      	mov	r0, r4
   17a46:	f003 fee2 	bl	1b80e <hts221_device_id_get>
	if (status < 0) {
   17a4a:	2800      	cmp	r0, #0
   17a4c:	db05      	blt.n	17a5a <hts221_init+0x22>
		LOG_ERR("Failed to read chip ID.");
		return status;
	}

	if (id != HTS221_ID) {
   17a4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17a52:	2bbc      	cmp	r3, #188	; 0xbc
   17a54:	d003      	beq.n	17a5e <hts221_init+0x26>
		LOG_ERR("Invalid chip ID.");
		return -EINVAL;
   17a56:	f06f 0015 	mvn.w	r0, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
   17a5a:	b007      	add	sp, #28
   17a5c:	bd30      	pop	{r4, r5, pc}
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   17a5e:	492c      	ldr	r1, [pc, #176]	; (17b10 <hts221_init+0xd8>)
   17a60:	4608      	mov	r0, r1
   17a62:	f004 f945 	bl	1bcf0 <strcmp>
   17a66:	b168      	cbz	r0, 17a84 <hts221_init+0x4c>
   17a68:	4929      	ldr	r1, [pc, #164]	; (17b10 <hts221_init+0xd8>)
   17a6a:	482a      	ldr	r0, [pc, #168]	; (17b14 <hts221_init+0xdc>)
   17a6c:	f004 f940 	bl	1bcf0 <strcmp>
   17a70:	b138      	cbz	r0, 17a82 <hts221_init+0x4a>
   17a72:	4927      	ldr	r1, [pc, #156]	; (17b10 <hts221_init+0xd8>)
   17a74:	4828      	ldr	r0, [pc, #160]	; (17b18 <hts221_init+0xe0>)
   17a76:	f004 f93b 	bl	1bcf0 <strcmp>
   17a7a:	2800      	cmp	r0, #0
   17a7c:	d1eb      	bne.n	17a56 <hts221_init+0x1e>
   17a7e:	2002      	movs	r0, #2
   17a80:	e000      	b.n	17a84 <hts221_init+0x4c>
   17a82:	2001      	movs	r0, #1
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
   17a84:	4b25      	ldr	r3, [pc, #148]	; (17b1c <hts221_init+0xe4>)
   17a86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   17a8a:	7901      	ldrb	r1, [r0, #4]
   17a8c:	4620      	mov	r0, r4
   17a8e:	f003 fe90 	bl	1b7b2 <hts221_data_rate_set>
	if (status < 0) {
   17a92:	2800      	cmp	r0, #0
   17a94:	dbe1      	blt.n	17a5a <hts221_init+0x22>
	status = hts221_block_data_update_set(ctx, 1);
   17a96:	2101      	movs	r1, #1
   17a98:	4620      	mov	r0, r4
   17a9a:	f003 fea1 	bl	1b7e0 <hts221_block_data_update_set>
	if (status < 0) {
   17a9e:	2800      	cmp	r0, #0
   17aa0:	dbdb      	blt.n	17a5a <hts221_init+0x22>
	status = hts221_power_on_set(ctx, 1);
   17aa2:	2101      	movs	r1, #1
   17aa4:	4620      	mov	r0, r4
   17aa6:	f003 feb7 	bl	1b818 <hts221_power_on_set>
	if (status < 0) {
   17aaa:	2800      	cmp	r0, #0
   17aac:	dbd5      	blt.n	17a5a <hts221_init+0x22>
	return z_impl_k_sleep(timeout);
   17aae:	2100      	movs	r1, #0
   17ab0:	2063      	movs	r0, #99	; 0x63
   17ab2:	f002 ffef 	bl	1aa94 <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   17ab6:	6868      	ldr	r0, [r5, #4]
	struct hts221_data *data = dev->data;
   17ab8:	692c      	ldr	r4, [r5, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   17aba:	2310      	movs	r3, #16
   17abc:	aa02      	add	r2, sp, #8
   17abe:	21b0      	movs	r1, #176	; 0xb0
   17ac0:	f003 fe6b 	bl	1b79a <hts221_read_reg>
	if (status < 0) {
   17ac4:	2800      	cmp	r0, #0
   17ac6:	dbc8      	blt.n	17a5a <hts221_init+0x22>
	data->h0_rh_x2 = buf[0];
   17ac8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17acc:	7123      	strb	r3, [r4, #4]
	data->h1_rh_x2 = buf[1];
   17ace:	f89d 3009 	ldrb.w	r3, [sp, #9]
   17ad2:	7163      	strb	r3, [r4, #5]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
   17ad4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   17ad8:	021a      	lsls	r2, r3, #8
   17ada:	f402 7140 	and.w	r1, r2, #768	; 0x300
   17ade:	f89d 200a 	ldrb.w	r2, [sp, #10]
   17ae2:	430a      	orrs	r2, r1
   17ae4:	80e2      	strh	r2, [r4, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
   17ae6:	019b      	lsls	r3, r3, #6
   17ae8:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
   17af0:	4313      	orrs	r3, r2
   17af2:	8123      	strh	r3, [r4, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
   17af4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   17af8:	8163      	strh	r3, [r4, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
   17afa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   17afe:	81a3      	strh	r3, [r4, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
   17b00:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   17b04:	81e3      	strh	r3, [r4, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
   17b06:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   17b0a:	8223      	strh	r3, [r4, #16]
	return 0;
   17b0c:	2000      	movs	r0, #0
   17b0e:	e7a4      	b.n	17a5a <hts221_init+0x22>
   17b10:	00021583 	.word	0x00021583
   17b14:	00021a71 	.word	0x00021a71
   17b18:	00021a73 	.word	0x00021a73
   17b1c:	0002122c 	.word	0x0002122c

00017b20 <lis2dh_channel_get>:
	struct lis2dh_data *lis2dh = dev->data;
   17b20:	2903      	cmp	r1, #3
{
   17b22:	b570      	push	{r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
   17b24:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
   17b26:	d81c      	bhi.n	17b62 <lis2dh_channel_get+0x42>
   17b28:	4b0f      	ldr	r3, [pc, #60]	; (17b68 <lis2dh_channel_get+0x48>)
   17b2a:	5658      	ldrsb	r0, [r3, r1]
   17b2c:	4b0f      	ldr	r3, [pc, #60]	; (17b6c <lis2dh_channel_get+0x4c>)
   17b2e:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
   17b30:	490f      	ldr	r1, [pc, #60]	; (17b70 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   17b32:	42b0      	cmp	r0, r6
   17b34:	f102 0208 	add.w	r2, r2, #8
   17b38:	dd01      	ble.n	17b3e <lis2dh_channel_get+0x1e>
	return 0;
   17b3a:	2000      	movs	r0, #0
}
   17b3c:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
   17b3e:	1d03      	adds	r3, r0, #4
   17b40:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
   17b44:	6925      	ldr	r5, [r4, #16]
   17b46:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
   17b4a:	111b      	asrs	r3, r3, #4
   17b4c:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
   17b4e:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
   17b52:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
   17b56:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
   17b5a:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   17b5e:	3001      	adds	r0, #1
   17b60:	e7e7      	b.n	17b32 <lis2dh_channel_get+0x12>
		return -ENOTSUP;
   17b62:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17b66:	e7e9      	b.n	17b3c <lis2dh_channel_get+0x1c>
   17b68:	00021a87 	.word	0x00021a87
   17b6c:	00021a8b 	.word	0x00021a8b
   17b70:	000f4240 	.word	0x000f4240

00017b74 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
   17b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
   17b76:	6846      	ldr	r6, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
   17b78:	6905      	ldr	r5, [r0, #16]
{
   17b7a:	4604      	mov	r4, r0
	int status;
	uint8_t id;
	uint8_t raw[6];

	lis2dh->bus = device_get_binding(cfg->bus_name);
   17b7c:	6830      	ldr	r0, [r6, #0]
   17b7e:	f002 f893 	bl	19ca8 <z_impl_device_get_binding>
   17b82:	6028      	str	r0, [r5, #0]
	if (!lis2dh->bus) {
   17b84:	b918      	cbnz	r0, 17b8e <lis2dh_init+0x1a>
		LOG_ERR("master not found: %s", cfg->bus_name);
		return -EINVAL;
   17b86:	f06f 0015 	mvn.w	r0, #21

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
   17b8a:	b004      	add	sp, #16
   17b8c:	bd70      	pop	{r4, r5, r6, pc}
	cfg->bus_init(dev);
   17b8e:	6873      	ldr	r3, [r6, #4]
   17b90:	4620      	mov	r0, r4
   17b92:	4798      	blx	r3
	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
   17b94:	686b      	ldr	r3, [r5, #4]
   17b96:	f10d 0207 	add.w	r2, sp, #7
   17b9a:	689b      	ldr	r3, [r3, #8]
   17b9c:	210f      	movs	r1, #15
   17b9e:	4620      	mov	r0, r4
   17ba0:	4798      	blx	r3
	if (status < 0) {
   17ba2:	2800      	cmp	r0, #0
   17ba4:	dbf1      	blt.n	17b8a <lis2dh_init+0x16>
	if (id != LIS2DH_CHIP_ID) {
   17ba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17baa:	2b33      	cmp	r3, #51	; 0x33
   17bac:	d1eb      	bne.n	17b86 <lis2dh_init+0x12>
	if (cfg->is_lsm303agr_dev) {
   17bae:	7ab3      	ldrb	r3, [r6, #10]
   17bb0:	b15b      	cbz	r3, 17bca <lis2dh_init+0x56>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
   17bb2:	4b1d      	ldr	r3, [pc, #116]	; (17c28 <lis2dh_init+0xb4>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
   17bb4:	f644 1216 	movw	r2, #18710	; 0x4916
   17bb8:	f242 418b 	movw	r1, #9355	; 0x248b
   17bbc:	e9c3 1200 	strd	r1, r2, [r3]
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
   17bc0:	4a1a      	ldr	r2, [pc, #104]	; (17c2c <lis2dh_init+0xb8>)
   17bc2:	f249 202d 	movw	r0, #37421	; 0x922d
   17bc6:	e9c3 0202 	strd	r0, r2, [r3, #8]
	if (cfg->disc_pull_up) {
   17bca:	7af3      	ldrb	r3, [r6, #11]
   17bcc:	bb13      	cbnz	r3, 17c14 <lis2dh_init+0xa0>
	(void)memset(raw, 0, sizeof(raw));
   17bce:	2206      	movs	r2, #6
   17bd0:	2100      	movs	r1, #0
   17bd2:	a802      	add	r0, sp, #8
   17bd4:	f004 f8b4 	bl	1bd40 <memset>
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   17bd8:	2307      	movs	r3, #7
   17bda:	f88d 3008 	strb.w	r3, [sp, #8]
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
   17bde:	686b      	ldr	r3, [r5, #4]
   17be0:	aa02      	add	r2, sp, #8
   17be2:	685e      	ldr	r6, [r3, #4]
   17be4:	2120      	movs	r1, #32
   17be6:	2306      	movs	r3, #6
   17be8:	4620      	mov	r0, r4
   17bea:	47b0      	blx	r6
	if (status < 0) {
   17bec:	2800      	cmp	r0, #0
   17bee:	dbcc      	blt.n	17b8a <lis2dh_init+0x16>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
   17bf0:	4b0d      	ldr	r3, [pc, #52]	; (17c28 <lis2dh_init+0xb4>)
   17bf2:	681b      	ldr	r3, [r3, #0]
   17bf4:	612b      	str	r3, [r5, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
   17bf6:	686b      	ldr	r3, [r5, #4]
   17bf8:	2200      	movs	r2, #0
   17bfa:	68db      	ldr	r3, [r3, #12]
   17bfc:	2123      	movs	r1, #35	; 0x23
   17bfe:	4620      	mov	r0, r4
   17c00:	4798      	blx	r3
	if (status < 0) {
   17c02:	2800      	cmp	r0, #0
   17c04:	dbc1      	blt.n	17b8a <lis2dh_init+0x16>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   17c06:	686b      	ldr	r3, [r5, #4]
   17c08:	2247      	movs	r2, #71	; 0x47
   17c0a:	68db      	ldr	r3, [r3, #12]
   17c0c:	2120      	movs	r1, #32
   17c0e:	4620      	mov	r0, r4
   17c10:	4798      	blx	r3
   17c12:	e7ba      	b.n	17b8a <lis2dh_init+0x16>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
   17c14:	686b      	ldr	r3, [r5, #4]
   17c16:	691e      	ldr	r6, [r3, #16]
   17c18:	2380      	movs	r3, #128	; 0x80
   17c1a:	461a      	mov	r2, r3
   17c1c:	211e      	movs	r1, #30
   17c1e:	4620      	mov	r0, r4
   17c20:	47b0      	blx	r6
		if (status < 0) {
   17c22:	2800      	cmp	r0, #0
   17c24:	dad3      	bge.n	17bce <lis2dh_init+0x5a>
   17c26:	e7b0      	b.n	17b8a <lis2dh_init+0x16>
   17c28:	200007f4 	.word	0x200007f4
   17c2c:	0001b694 	.word	0x0001b694

00017c30 <lis2dh_i2c_init>:

int lis2dh_i2c_init(const struct device *dev)
{
	struct lis2dh_data *data = dev->data;

	data->hw_tf = &lis2dh_i2c_transfer_fn;
   17c30:	6903      	ldr	r3, [r0, #16]
   17c32:	4a02      	ldr	r2, [pc, #8]	; (17c3c <lis2dh_i2c_init+0xc>)
   17c34:	605a      	str	r2, [r3, #4]

	return 0;
}
   17c36:	2000      	movs	r0, #0
   17c38:	4770      	bx	lr
   17c3a:	bf00      	nop
   17c3c:	00021264 	.word	0x00021264

00017c40 <lps22hb_channel_get>:
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
   17c40:	290e      	cmp	r1, #14
{
   17c42:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;
   17c44:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PRESS) {
   17c46:	d111      	bne.n	17c6c <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
   17c48:	6859      	ldr	r1, [r3, #4]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   17c4a:	4811      	ldr	r0, [pc, #68]	; (17c90 <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
   17c4c:	130b      	asrs	r3, r1, #12
   17c4e:	250a      	movs	r5, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   17c50:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
   17c54:	fb93 f4f5 	sdiv	r4, r3, r5
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   17c58:	fb05 3314 	mls	r3, r5, r4, r3
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   17c5c:	4341      	muls	r1, r0
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   17c5e:	4343      	muls	r3, r0
	val->val1 = (raw_val >> 12) / 10;
   17c60:	6014      	str	r4, [r2, #0]
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   17c62:	eb03 3311 	add.w	r3, r3, r1, lsr #12
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   17c66:	6053      	str	r3, [r2, #4]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
   17c68:	2000      	movs	r0, #0
}
   17c6a:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   17c6c:	290d      	cmp	r1, #13
   17c6e:	d10c      	bne.n	17c8a <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
   17c70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	val->val1 = raw_val / 100;
   17c74:	2064      	movs	r0, #100	; 0x64
   17c76:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   17c7a:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = raw_val / 100;
   17c7e:	6011      	str	r1, [r2, #0]
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   17c80:	f242 7110 	movw	r1, #10000	; 0x2710
   17c84:	fb13 f301 	smulbb	r3, r3, r1
   17c88:	e7ed      	b.n	17c66 <lps22hb_channel_get+0x26>
		return -ENOTSUP;
   17c8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17c8e:	e7ec      	b.n	17c6a <lps22hb_channel_get+0x2a>
   17c90:	000186a0 	.word	0x000186a0

00017c94 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
   17c94:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
   17c96:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
   17c98:	4908      	ldr	r1, [pc, #32]	; (17cbc <regulator_fixed_init_onoff+0x28>)
{
   17c9a:	4604      	mov	r4, r0
	data->dev = dev;
   17c9c:	4628      	mov	r0, r5
   17c9e:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
   17ca2:	f003 fa71 	bl	1b188 <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
   17ca6:	4906      	ldr	r1, [pc, #24]	; (17cc0 <regulator_fixed_init_onoff+0x2c>)
   17ca8:	f105 0020 	add.w	r0, r5, #32
   17cac:	f007 fc3b 	bl	1f526 <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
   17cb0:	6860      	ldr	r0, [r4, #4]
   17cb2:	f006 ffee 	bl	1ec92 <common_init.isra.0>
	}

	LOG_INF("%s onoff: %d", dev->name, rc);

	return rc;
}
   17cb6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   17cba:	bd38      	pop	{r3, r4, r5, pc}
   17cbc:	0002131c 	.word	0x0002131c
   17cc0:	0001ecfd 	.word	0x0001ecfd

00017cc4 <finalize_transition>:
{
   17cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
   17cc8:	1e1c      	subs	r4, r3, #0
{
   17cca:	4605      	mov	r5, r0
   17ccc:	460f      	mov	r7, r1
   17cce:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
   17cd0:	db10      	blt.n	17cf4 <finalize_transition+0x30>
   17cd2:	b17a      	cbz	r2, 17cf4 <finalize_transition+0x30>
			return (uint32_t)((t * to_hz + off) / from_hz);
   17cd4:	ea4f 4952 	mov.w	r9, r2, lsr #17
   17cd8:	03d6      	lsls	r6, r2, #15
   17cda:	2300      	movs	r3, #0
   17cdc:	4a14      	ldr	r2, [pc, #80]	; (17d30 <finalize_transition+0x6c>)
   17cde:	4630      	mov	r0, r6
   17ce0:	4649      	mov	r1, r9
   17ce2:	f7e8 ff13 	bl	b0c <__aeabi_uldivmod>
		    || k_is_pre_kernel()
   17ce6:	b110      	cbz	r0, 17cee <finalize_transition+0x2a>
	return !z_sys_post_kernel;
   17ce8:	4b12      	ldr	r3, [pc, #72]	; (17d34 <finalize_transition+0x70>)
   17cea:	781b      	ldrb	r3, [r3, #0]
   17cec:	b943      	cbnz	r3, 17d00 <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
   17cee:	4640      	mov	r0, r8
   17cf0:	f007 fd97 	bl	1f822 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
   17cf4:	4621      	mov	r1, r4
   17cf6:	1d28      	adds	r0, r5, #4
   17cf8:	463b      	mov	r3, r7
}
   17cfa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
   17cfe:	4718      	bx	r3
			return ((t * to_hz + off) / from_hz);
   17d00:	480d      	ldr	r0, [pc, #52]	; (17d38 <finalize_transition+0x74>)
   17d02:	4a0b      	ldr	r2, [pc, #44]	; (17d30 <finalize_transition+0x6c>)
			data->notify = notify;
   17d04:	652f      	str	r7, [r5, #80]	; 0x50
   17d06:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
   17d08:	f04f 0303 	mov.w	r3, #3
   17d0c:	f149 0100 	adc.w	r1, r9, #0
   17d10:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
   17d14:	2300      	movs	r3, #0
   17d16:	f7e8 fef9 	bl	b0c <__aeabi_uldivmod>
   17d1a:	4602      	mov	r2, r0
   17d1c:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
   17d1e:	f105 0020 	add.w	r0, r5, #32
   17d22:	f002 fbef 	bl	1a504 <k_work_schedule>
			if (rc >= 0) {
   17d26:	1e04      	subs	r4, r0, #0
   17d28:	dbe4      	blt.n	17cf4 <finalize_transition+0x30>
}
   17d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17d2e:	bf00      	nop
   17d30:	000f4240 	.word	0x000f4240
   17d34:	200031f3 	.word	0x200031f3
   17d38:	000f423f 	.word	0x000f423f

00017d3c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   17d3c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   17d3e:	794b      	ldrb	r3, [r1, #5]
   17d40:	2b01      	cmp	r3, #1
   17d42:	d120      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   17d44:	798b      	ldrb	r3, [r1, #6]
   17d46:	2b03      	cmp	r3, #3
   17d48:	d11d      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   17d4a:	79cc      	ldrb	r4, [r1, #7]
   17d4c:	b10c      	cbz	r4, 17d52 <uarte_nrfx_configure+0x16>
   17d4e:	2c01      	cmp	r4, #1
   17d50:	d119      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   17d52:	790a      	ldrb	r2, [r1, #4]
   17d54:	b112      	cbz	r2, 17d5c <uarte_nrfx_configure+0x20>
   17d56:	2a02      	cmp	r2, #2
   17d58:	d115      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
   17d5a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   17d5c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   17d5e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   17d60:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   17d64:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   17d66:	d062      	beq.n	17e2e <uarte_nrfx_configure+0xf2>
   17d68:	d82b      	bhi.n	17dc2 <uarte_nrfx_configure+0x86>
   17d6a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   17d6e:	d061      	beq.n	17e34 <uarte_nrfx_configure+0xf8>
   17d70:	d814      	bhi.n	17d9c <uarte_nrfx_configure+0x60>
   17d72:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   17d76:	d05f      	beq.n	17e38 <uarte_nrfx_configure+0xfc>
   17d78:	d808      	bhi.n	17d8c <uarte_nrfx_configure+0x50>
   17d7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   17d7e:	d05e      	beq.n	17e3e <uarte_nrfx_configure+0x102>
   17d80:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   17d84:	d05e      	beq.n	17e44 <uarte_nrfx_configure+0x108>
   17d86:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17d8a:	e04f      	b.n	17e2c <uarte_nrfx_configure+0xf0>
   17d8c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   17d90:	d05b      	beq.n	17e4a <uarte_nrfx_configure+0x10e>
   17d92:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   17d96:	d1f6      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   17d98:	4b36      	ldr	r3, [pc, #216]	; (17e74 <uarte_nrfx_configure+0x138>)
   17d9a:	e03c      	b.n	17e16 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   17d9c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   17da0:	d056      	beq.n	17e50 <uarte_nrfx_configure+0x114>
   17da2:	d807      	bhi.n	17db4 <uarte_nrfx_configure+0x78>
   17da4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   17da8:	d054      	beq.n	17e54 <uarte_nrfx_configure+0x118>
   17daa:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   17dae:	d1ea      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   17db0:	4b31      	ldr	r3, [pc, #196]	; (17e78 <uarte_nrfx_configure+0x13c>)
   17db2:	e030      	b.n	17e16 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   17db4:	f647 2612 	movw	r6, #31250	; 0x7a12
   17db8:	42b3      	cmp	r3, r6
   17dba:	d1e4      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   17dbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   17dc0:	e029      	b.n	17e16 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   17dc2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   17dc6:	d047      	beq.n	17e58 <uarte_nrfx_configure+0x11c>
   17dc8:	d813      	bhi.n	17df2 <uarte_nrfx_configure+0xb6>
   17dca:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   17dce:	d046      	beq.n	17e5e <uarte_nrfx_configure+0x122>
   17dd0:	d809      	bhi.n	17de6 <uarte_nrfx_configure+0xaa>
   17dd2:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   17dd6:	42b3      	cmp	r3, r6
   17dd8:	d043      	beq.n	17e62 <uarte_nrfx_configure+0x126>
   17dda:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   17dde:	d1d2      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   17de0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   17de4:	e017      	b.n	17e16 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   17de6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   17dea:	d1cc      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   17dec:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   17df0:	e011      	b.n	17e16 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   17df2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   17df6:	d037      	beq.n	17e68 <uarte_nrfx_configure+0x12c>
   17df8:	d808      	bhi.n	17e0c <uarte_nrfx_configure+0xd0>
   17dfa:	4e20      	ldr	r6, [pc, #128]	; (17e7c <uarte_nrfx_configure+0x140>)
   17dfc:	42b3      	cmp	r3, r6
   17dfe:	d036      	beq.n	17e6e <uarte_nrfx_configure+0x132>
   17e00:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   17e04:	d1bf      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   17e06:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   17e0a:	e004      	b.n	17e16 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   17e0c:	4e1c      	ldr	r6, [pc, #112]	; (17e80 <uarte_nrfx_configure+0x144>)
   17e0e:	42b3      	cmp	r3, r6
   17e10:	d1b9      	bne.n	17d86 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   17e12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   17e16:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   17e18:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   17e1c:	1d03      	adds	r3, r0, #4
   17e1e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   17e20:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   17e22:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   17e26:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   17e2a:	2000      	movs	r0, #0
}
   17e2c:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   17e2e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   17e32:	e7f0      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   17e34:	4b13      	ldr	r3, [pc, #76]	; (17e84 <uarte_nrfx_configure+0x148>)
   17e36:	e7ee      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   17e38:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   17e3c:	e7eb      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   17e3e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   17e42:	e7e8      	b.n	17e16 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   17e44:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   17e48:	e7e5      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   17e4a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   17e4e:	e7e2      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   17e50:	4b0d      	ldr	r3, [pc, #52]	; (17e88 <uarte_nrfx_configure+0x14c>)
   17e52:	e7e0      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   17e54:	4b0d      	ldr	r3, [pc, #52]	; (17e8c <uarte_nrfx_configure+0x150>)
   17e56:	e7de      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   17e58:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   17e5c:	e7db      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   17e5e:	4b0c      	ldr	r3, [pc, #48]	; (17e90 <uarte_nrfx_configure+0x154>)
   17e60:	e7d9      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   17e62:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   17e66:	e7d6      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   17e68:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17e6c:	e7d3      	b.n	17e16 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   17e6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17e72:	e7d0      	b.n	17e16 <uarte_nrfx_configure+0xda>
   17e74:	0013b000 	.word	0x0013b000
   17e78:	004ea000 	.word	0x004ea000
   17e7c:	0003d090 	.word	0x0003d090
   17e80:	000f4240 	.word	0x000f4240
   17e84:	00275000 	.word	0x00275000
   17e88:	0075c000 	.word	0x0075c000
   17e8c:	003af000 	.word	0x003af000
   17e90:	013a9000 	.word	0x013a9000

00017e94 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   17e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   17e96:	6906      	ldr	r6, [r0, #16]
{
   17e98:	4605      	mov	r5, r0
   17e9a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17e9c:	f007 f9c7 	bl	1f22e <k_is_in_isr>
   17ea0:	b910      	cbnz	r0, 17ea8 <uarte_nrfx_poll_out+0x14>
   17ea2:	4b2c      	ldr	r3, [pc, #176]	; (17f54 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   17ea4:	781b      	ldrb	r3, [r3, #0]
   17ea6:	b983      	cbnz	r3, 17eca <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   17ea8:	f04f 0320 	mov.w	r3, #32
   17eac:	f3ef 8411 	mrs	r4, BASEPRI
   17eb0:	f383 8812 	msr	BASEPRI_MAX, r3
   17eb4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   17eb8:	6868      	ldr	r0, [r5, #4]
   17eba:	f006 ffbd 	bl	1ee38 <is_tx_ready.isra.0>
   17ebe:	bb28      	cbnz	r0, 17f0c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   17ec0:	f384 8811 	msr	BASEPRI, r4
   17ec4:	f3bf 8f6f 	isb	sy
}
   17ec8:	e7ee      	b.n	17ea8 <uarte_nrfx_poll_out+0x14>
{
   17eca:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   17ecc:	6868      	ldr	r0, [r5, #4]
   17ece:	f006 ffb3 	bl	1ee38 <is_tx_ready.isra.0>
   17ed2:	b970      	cbnz	r0, 17ef2 <uarte_nrfx_poll_out+0x5e>
   17ed4:	2001      	movs	r0, #1
   17ed6:	f007 f80c 	bl	1eef2 <nrfx_busy_wait>
   17eda:	3c01      	subs	r4, #1
   17edc:	d1f6      	bne.n	17ecc <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   17ede:	2100      	movs	r1, #0
   17ee0:	2021      	movs	r0, #33	; 0x21
   17ee2:	f002 fdd7 	bl	1aa94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17ee6:	e7f0      	b.n	17eca <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   17ee8:	f384 8811 	msr	BASEPRI, r4
   17eec:	f3bf 8f6f 	isb	sy
}
   17ef0:	e7f5      	b.n	17ede <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   17ef2:	f04f 0320 	mov.w	r3, #32
   17ef6:	f3ef 8411 	mrs	r4, BASEPRI
   17efa:	f383 8812 	msr	BASEPRI_MAX, r3
   17efe:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   17f02:	6868      	ldr	r0, [r5, #4]
   17f04:	f006 ff98 	bl	1ee38 <is_tx_ready.isra.0>
   17f08:	2800      	cmp	r0, #0
   17f0a:	d0ed      	beq.n	17ee8 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   17f0c:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   17f10:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   17f12:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   17f14:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17f16:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17f1a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17f1e:	2200      	movs	r2, #0
   17f20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   17f24:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   17f28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   17f2c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17f30:	684a      	ldr	r2, [r1, #4]
   17f32:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17f34:	bf41      	itttt	mi
   17f36:	2208      	movmi	r2, #8
   17f38:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   17f3c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   17f40:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17f44:	2201      	movs	r2, #1
   17f46:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   17f48:	f384 8811 	msr	BASEPRI, r4
   17f4c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   17f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f52:	bf00      	nop
   17f54:	200031f3 	.word	0x200031f3

00017f58 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   17f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17f5c:	2101      	movs	r1, #1
   17f5e:	4606      	mov	r6, r0
   17f60:	2200      	movs	r2, #0
   17f62:	2002      	movs	r0, #2
   17f64:	f7ee f91e 	bl	61a4 <z_arm_irq_priority_set>
   17f68:	2002      	movs	r0, #2
   17f6a:	f7ee f8e9 	bl	6140 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   17f6e:	6877      	ldr	r7, [r6, #4]
	struct uarte_nrfx_data *data = dev->data;
   17f70:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
   17f72:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   17f74:	2300      	movs	r3, #0
   17f76:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   17f7a:	602e      	str	r6, [r5, #0]
	uarte_nrfx_pins_configure(dev, false);
   17f7c:	6873      	ldr	r3, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   17f7e:	68d8      	ldr	r0, [r3, #12]
   17f80:	1c41      	adds	r1, r0, #1
   17f82:	d00c      	beq.n	17f9e <uarte_0_init+0x46>
    *p_pin = pin_number & 0x1F;
   17f84:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
   17f88:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   17f8c:	2101      	movs	r1, #1
   17f8e:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
   17f90:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   17f94:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   17f98:	2103      	movs	r1, #3
   17f9a:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   17f9e:	6919      	ldr	r1, [r3, #16]
   17fa0:	1c4a      	adds	r2, r1, #1
   17fa2:	d010      	beq.n	17fc6 <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   17fa4:	7f1a      	ldrb	r2, [r3, #28]
   17fa6:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   17fa8:	f001 021f 	and.w	r2, r1, #31
   17fac:	bf14      	ite	ne
   17fae:	f04f 0c03 	movne.w	ip, #3
   17fb2:	f04f 0c00 	moveq.w	ip, #0
    reg->PIN_CNF[pin_number] = cnf;
   17fb6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   17fba:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   17fbe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   17fc2:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   17fc6:	f8d3 c014 	ldr.w	ip, [r3, #20]
   17fca:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   17fce:	d00f      	beq.n	17ff0 <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
   17fd0:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
   17fd4:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   17fd8:	f04f 0e01 	mov.w	lr, #1
   17fdc:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
   17fe0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   17fe4:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   17fe8:	f04f 0e03 	mov.w	lr, #3
   17fec:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   17ff0:	f8d3 e018 	ldr.w	lr, [r3, #24]
   17ff4:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   17ff8:	d010      	beq.n	1801c <uarte_0_init+0xc4>
			nrf_gpio_cfg_input(cfg->cts_pin,
   17ffa:	7f5a      	ldrb	r2, [r3, #29]
   17ffc:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   17ffe:	f00e 021f 	and.w	r2, lr, #31
   18002:	bf14      	ite	ne
   18004:	f04f 0803 	movne.w	r8, #3
   18008:	f04f 0800 	moveq.w	r8, #0
    reg->PIN_CNF[pin_number] = cnf;
   1800c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   18010:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   18014:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   18018:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1801c:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
   1801e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   18022:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &data->uart_config);
   18026:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   18028:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
   1802c:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
   1802e:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
   18032:	f7ff fe83 	bl	17d3c <uarte_nrfx_configure>
	if (err) {
   18036:	4606      	mov	r6, r0
   18038:	2800      	cmp	r0, #0
   1803a:	d143      	bne.n	180c4 <uarte_0_init+0x16c>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1803c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1803e:	0799      	lsls	r1, r3, #30
   18040:	d519      	bpl.n	18076 <uarte_0_init+0x11e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   18042:	f105 0012 	add.w	r0, r5, #18
   18046:	f001 f975 	bl	19334 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1804a:	4b21      	ldr	r3, [pc, #132]	; (180d0 <uarte_0_init+0x178>)
   1804c:	4298      	cmp	r0, r3
   1804e:	d13c      	bne.n	180ca <uarte_0_init+0x172>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   18050:	7ca8      	ldrb	r0, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18052:	00c3      	lsls	r3, r0, #3
   18054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18058:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1805c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18060:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18064:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18068:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1806c:	4a19      	ldr	r2, [pc, #100]	; (180d4 <uarte_0_init+0x17c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1806e:	2301      	movs	r3, #1
   18070:	4083      	lsls	r3, r0
   18072:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18076:	2308      	movs	r3, #8
   18078:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1807c:	7a3b      	ldrb	r3, [r7, #8]
   1807e:	b95b      	cbnz	r3, 18098 <uarte_0_init+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18080:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18084:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   18088:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1808c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   18090:	2301      	movs	r3, #1
   18092:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18096:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   18098:	687b      	ldr	r3, [r7, #4]
   1809a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1809c:	bf5c      	itt	pl
   1809e:	f44f 7280 	movpl.w	r2, #256	; 0x100
   180a2:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   180a6:	06db      	lsls	r3, r3, #27
   180a8:	bf44      	itt	mi
   180aa:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   180ae:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   180b2:	3510      	adds	r5, #16
    p_reg->TXD.MAXCNT = length;
   180b4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   180b6:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   180ba:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   180be:	2301      	movs	r3, #1
   180c0:	60a3      	str	r3, [r4, #8]
   180c2:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   180c4:	4630      	mov	r0, r6
   180c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   180ca:	f06f 0604 	mvn.w	r6, #4
UART_NRF_UARTE_DEVICE(0);
   180ce:	e7f9      	b.n	180c4 <uarte_0_init+0x16c>
   180d0:	0bad0000 	.word	0x0bad0000
   180d4:	4001f000 	.word	0x4001f000

000180d8 <random_byte_get>:
	__asm__ volatile(
   180d8:	f04f 0320 	mov.w	r3, #32
   180dc:	f3ef 8211 	mrs	r2, BASEPRI
   180e0:	f383 8812 	msr	BASEPRI_MAX, r3
   180e4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   180e8:	4b09      	ldr	r3, [pc, #36]	; (18110 <random_byte_get+0x38>)
   180ea:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   180ee:	b161      	cbz	r1, 1810a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   180f0:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   180f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   180f6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   180fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   180fe:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   18100:	f382 8811 	msr	BASEPRI, r2
   18104:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18108:	4770      	bx	lr
	int retval = -EAGAIN;
   1810a:	f06f 000a 	mvn.w	r0, #10
   1810e:	e7f7      	b.n	18100 <random_byte_get+0x28>
   18110:	4000d000 	.word	0x4000d000

00018114 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   18114:	b5f0      	push	{r4, r5, r6, r7, lr}
   18116:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   18118:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1811a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1811c:	f04f 0020 	mov.w	r0, #32
   18120:	f3ef 8e11 	mrs	lr, BASEPRI
   18124:	f380 8812 	msr	BASEPRI_MAX, r0
   18128:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1812c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1812e:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   18132:	1ba4      	subs	r4, r4, r6
   18134:	403c      	ands	r4, r7
	if (available < len) {
   18136:	42a2      	cmp	r2, r4
		len = available;
   18138:	bf88      	it	hi
   1813a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1813c:	18b0      	adds	r0, r6, r2
   1813e:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   18140:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   18142:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   18144:	f38e 8811 	msr	BASEPRI, lr
   18148:	f3bf 8f6f 	isb	sy
   1814c:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1814e:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   18150:	4290      	cmp	r0, r2
   18152:	d119      	bne.n	18188 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   18154:	4566      	cmp	r6, ip
   18156:	d10d      	bne.n	18174 <rng_pool_get+0x60>
	__asm__ volatile(
   18158:	f04f 0520 	mov.w	r5, #32
   1815c:	f3ef 8011 	mrs	r0, BASEPRI
   18160:	f385 8812 	msr	BASEPRI_MAX, r5
   18164:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   18168:	781d      	ldrb	r5, [r3, #0]
   1816a:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1816c:	f380 8811 	msr	BASEPRI, r0
   18170:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   18174:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   18176:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   18178:	b290      	uxth	r0, r2
	available = available - len;
   1817a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1817c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1817e:	bf22      	ittt	cs
   18180:	4b06      	ldrcs	r3, [pc, #24]	; (1819c <rng_pool_get+0x88>)
   18182:	2201      	movcs	r2, #1
   18184:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   18186:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   18188:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1818c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1818e:	f89e e005 	ldrb.w	lr, [lr, #5]
   18192:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   18196:	403d      	ands	r5, r7
   18198:	e7da      	b.n	18150 <rng_pool_get+0x3c>
   1819a:	bf00      	nop
   1819c:	4000d000 	.word	0x4000d000

000181a0 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   181a0:	43db      	mvns	r3, r3
{
   181a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   181a6:	f013 0501 	ands.w	r5, r3, #1
{
   181aa:	460e      	mov	r6, r1
   181ac:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   181ae:	d004      	beq.n	181ba <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   181b0:	4821      	ldr	r0, [pc, #132]	; (18238 <entropy_nrf5_get_entropy_isr+0x98>)
   181b2:	f7ff ffaf 	bl	18114 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   181b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   181ba:	b3a2      	cbz	r2, 18226 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   181bc:	f04f 0320 	mov.w	r3, #32
   181c0:	f3ef 8811 	mrs	r8, BASEPRI
   181c4:	f383 8812 	msr	BASEPRI_MAX, r3
   181c8:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   181cc:	200d      	movs	r0, #13
   181ce:	f7ed ffdb 	bl	6188 <arch_irq_is_enabled>
   181d2:	4607      	mov	r7, r0
		irq_disable(IRQN);
   181d4:	200d      	movs	r0, #13
   181d6:	f7ed ffc3 	bl	6160 <arch_irq_disable>
	__asm__ volatile(
   181da:	f388 8811 	msr	BASEPRI, r8
   181de:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   181e2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1823c <entropy_nrf5_get_entropy_isr+0x9c>
   181e6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 18240 <entropy_nrf5_get_entropy_isr+0xa0>
   181ea:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   181ee:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   181f2:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   181f6:	2301      	movs	r3, #1
   181f8:	f8c8 3000 	str.w	r3, [r8]
   181fc:	4625      	mov	r5, r4
   181fe:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18202:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   18206:	b183      	cbz	r3, 1822a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   18208:	f7ff ff66 	bl	180d8 <random_byte_get>
			if (byte < 0) {
   1820c:	1e03      	subs	r3, r0, #0
   1820e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   18212:	dbf6      	blt.n	18202 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   18214:	3d01      	subs	r5, #1
   18216:	b2ad      	uxth	r5, r5
   18218:	5573      	strb	r3, [r6, r5]
		} while (len);
   1821a:	2d00      	cmp	r5, #0
   1821c:	d1f1      	bne.n	18202 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1821e:	b117      	cbz	r7, 18226 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   18220:	200d      	movs	r0, #13
   18222:	f7ed ff8d 	bl	6140 <arch_irq_enable>
	return cnt;
   18226:	4620      	mov	r0, r4
   18228:	e7c5      	b.n	181b6 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1822a:	f3bf 8f4f 	dsb	sy
				__WFE();
   1822e:	bf20      	wfe
				__SEV();
   18230:	bf40      	sev
				__WFE();
   18232:	bf20      	wfe
   18234:	e7e5      	b.n	18202 <entropy_nrf5_get_entropy_isr+0x62>
   18236:	bf00      	nop
   18238:	20002bac 	.word	0x20002bac
   1823c:	4000d000 	.word	0x4000d000
   18240:	e000e100 	.word	0xe000e100

00018244 <entropy_nrf5_get_entropy>:
{
   18244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   18248:	4f13      	ldr	r7, [pc, #76]	; (18298 <entropy_nrf5_get_entropy+0x54>)
   1824a:	460d      	mov	r5, r1
   1824c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1824e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   18252:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   18256:	b914      	cbnz	r4, 1825e <entropy_nrf5_get_entropy+0x1a>
}
   18258:	4620      	mov	r0, r4
   1825a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1825e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18266:	4638      	mov	r0, r7
   18268:	f001 ff9e 	bl	1a1a8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1826c:	4622      	mov	r2, r4
   1826e:	4629      	mov	r1, r5
   18270:	4640      	mov	r0, r8
   18272:	f7ff ff4f 	bl	18114 <rng_pool_get>
   18276:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   18278:	4638      	mov	r0, r7
   1827a:	f001 ff6f 	bl	1a15c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1827e:	b93e      	cbnz	r6, 18290 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   18280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18288:	4648      	mov	r0, r9
   1828a:	f001 ff8d 	bl	1a1a8 <z_impl_k_sem_take>
			continue;
   1828e:	e7e2      	b.n	18256 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   18290:	1ba4      	subs	r4, r4, r6
   18292:	b2a4      	uxth	r4, r4
		buf += bytes;
   18294:	4435      	add	r5, r6
   18296:	e7de      	b.n	18256 <entropy_nrf5_get_entropy+0x12>
   18298:	20002b7c 	.word	0x20002b7c

0001829c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1829c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1829e:	4c19      	ldr	r4, [pc, #100]	; (18304 <entropy_nrf5_init+0x68>)
   182a0:	2201      	movs	r2, #1
   182a2:	4611      	mov	r1, r2
   182a4:	4620      	mov	r0, r4
   182a6:	f007 f8a1 	bl	1f3ec <z_impl_k_sem_init>
   182aa:	2201      	movs	r2, #1
   182ac:	2100      	movs	r1, #0
   182ae:	f104 0018 	add.w	r0, r4, #24
   182b2:	f007 f89b 	bl	1f3ec <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   182b6:	f240 4307 	movw	r3, #1031	; 0x407
   182ba:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   182be:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   182c2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   182c4:	230c      	movs	r3, #12
   182c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   182ca:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   182cc:	4b0e      	ldr	r3, [pc, #56]	; (18308 <entropy_nrf5_init+0x6c>)
   182ce:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   182d2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   182d6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   182da:	f042 0201 	orr.w	r2, r2, #1
   182de:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   182e2:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   182e4:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   182e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   182ec:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   182f0:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   182f2:	6019      	str	r1, [r3, #0]
   182f4:	200d      	movs	r0, #13
   182f6:	f7ed ff55 	bl	61a4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   182fa:	200d      	movs	r0, #13
   182fc:	f7ed ff20 	bl	6140 <arch_irq_enable>

	return 0;
}
   18300:	4628      	mov	r0, r5
   18302:	bd38      	pop	{r3, r4, r5, pc}
   18304:	20002b7c 	.word	0x20002b7c
   18308:	4000d000 	.word	0x4000d000

0001830c <isr>:
{
   1830c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1830e:	f7ff fee3 	bl	180d8 <random_byte_get>
	if (byte < 0) {
   18312:	2800      	cmp	r0, #0
   18314:	db20      	blt.n	18358 <isr+0x4c>
	uint8_t last  = rngp->last;
   18316:	4b17      	ldr	r3, [pc, #92]	; (18374 <isr+0x68>)
   18318:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1831c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   18320:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   18324:	1a51      	subs	r1, r2, r1
   18326:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1832a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1832c:	d10d      	bne.n	1834a <isr+0x3e>
	uint8_t last  = rngp->last;
   1832e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   18332:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   18336:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1833a:	1a51      	subs	r1, r2, r1
   1833c:	ea34 0101 	bics.w	r1, r4, r1
   18340:	d10b      	bne.n	1835a <isr+0x4e>
   18342:	4b0d      	ldr	r3, [pc, #52]	; (18378 <isr+0x6c>)
   18344:	2201      	movs	r2, #1
   18346:	605a      	str	r2, [r3, #4]
}
   18348:	e00e      	b.n	18368 <isr+0x5c>
	rngp->buffer[last] = byte;
   1834a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1834c:	3201      	adds	r2, #1
   1834e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18350:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   18354:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   18358:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1835a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1835c:	3201      	adds	r2, #1
   1835e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18360:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   18364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   18368:	4804      	ldr	r0, [pc, #16]	; (1837c <isr+0x70>)
}
   1836a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1836e:	f001 bef5 	b.w	1a15c <z_impl_k_sem_give>
   18372:	bf00      	nop
   18374:	20002b7c 	.word	0x20002b7c
   18378:	4000d000 	.word	0x4000d000
   1837c:	20002b94 	.word	0x20002b94

00018380 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   18380:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   18382:	2301      	movs	r3, #1
   18384:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18386:	4a11      	ldr	r2, [pc, #68]	; (183cc <compare_int_lock+0x4c>)
   18388:	f3bf 8f5b 	dmb	ish
   1838c:	43dc      	mvns	r4, r3
   1838e:	e852 1f00 	ldrex	r1, [r2]
   18392:	ea01 0c04 	and.w	ip, r1, r4
   18396:	e842 ce00 	strex	lr, ip, [r2]
   1839a:	f1be 0f00 	cmp.w	lr, #0
   1839e:	d1f6      	bne.n	1838e <compare_int_lock+0xe>
   183a0:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   183a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   183a8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   183ac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   183b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   183b4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   183b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   183bc:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   183c0:	420b      	tst	r3, r1
}
   183c2:	bf14      	ite	ne
   183c4:	2001      	movne	r0, #1
   183c6:	2000      	moveq	r0, #0
   183c8:	bd10      	pop	{r4, pc}
   183ca:	bf00      	nop
   183cc:	20002bd4 	.word	0x20002bd4

000183d0 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   183d0:	4919      	ldr	r1, [pc, #100]	; (18438 <sys_clock_timeout_handler+0x68>)
{
   183d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   183d4:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   183d6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   183da:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   183dc:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   183e0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   183e4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   183e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   183ea:	d222      	bcs.n	18432 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   183ec:	4b13      	ldr	r3, [pc, #76]	; (1843c <sys_clock_timeout_handler+0x6c>)
   183ee:	681b      	ldr	r3, [r3, #0]
   183f0:	0a1a      	lsrs	r2, r3, #8
   183f2:	061b      	lsls	r3, r3, #24
   183f4:	195e      	adds	r6, r3, r5
   183f6:	4b12      	ldr	r3, [pc, #72]	; (18440 <sys_clock_timeout_handler+0x70>)
   183f8:	f142 0700 	adc.w	r7, r2, #0
   183fc:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   18400:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   18402:	f002 fcb9 	bl	1ad78 <sys_clock_announce>
    return p_reg->CC[ch];
   18406:	00a3      	lsls	r3, r4, #2
   18408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1840c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   18410:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   18414:	42aa      	cmp	r2, r5
   18416:	d10b      	bne.n	18430 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   18418:	b91e      	cbnz	r6, 18422 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1841a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1841e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   18422:	4b08      	ldr	r3, [pc, #32]	; (18444 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18424:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   18428:	fa00 f404 	lsl.w	r4, r0, r4
   1842c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   18430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   18432:	2600      	movs	r6, #0
   18434:	e7e5      	b.n	18402 <sys_clock_timeout_handler+0x32>
   18436:	bf00      	nop
   18438:	200015c0 	.word	0x200015c0
   1843c:	20002bd8 	.word	0x20002bd8
   18440:	200015a8 	.word	0x200015a8
   18444:	40011000 	.word	0x40011000

00018448 <compare_int_unlock>:
	if (key) {
   18448:	b319      	cbz	r1, 18492 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1844a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1844e:	2301      	movs	r3, #1
   18450:	4a10      	ldr	r2, [pc, #64]	; (18494 <compare_int_unlock+0x4c>)
   18452:	4083      	lsls	r3, r0
   18454:	e852 1f00 	ldrex	r1, [r2]
   18458:	4319      	orrs	r1, r3
   1845a:	e842 1c00 	strex	ip, r1, [r2]
   1845e:	f1bc 0f00 	cmp.w	ip, #0
   18462:	d1f7      	bne.n	18454 <compare_int_unlock+0xc>
   18464:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   18468:	4a0b      	ldr	r2, [pc, #44]	; (18498 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1846a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1846e:	4083      	lsls	r3, r0
   18470:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18474:	4b09      	ldr	r3, [pc, #36]	; (1849c <compare_int_unlock+0x54>)
   18476:	f3bf 8f5b 	dmb	ish
   1847a:	681b      	ldr	r3, [r3, #0]
   1847c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   18480:	fa23 f000 	lsr.w	r0, r3, r0
   18484:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18486:	bf42      	ittt	mi
   18488:	4b05      	ldrmi	r3, [pc, #20]	; (184a0 <compare_int_unlock+0x58>)
   1848a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1848e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   18492:	4770      	bx	lr
   18494:	20002bd4 	.word	0x20002bd4
   18498:	40011000 	.word	0x40011000
   1849c:	20002bd0 	.word	0x20002bd0
   184a0:	e000e100 	.word	0xe000e100

000184a4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   184a4:	4b0d      	ldr	r3, [pc, #52]	; (184dc <z_nrf_rtc_timer_read+0x38>)
   184a6:	6818      	ldr	r0, [r3, #0]
   184a8:	0a01      	lsrs	r1, r0, #8
   184aa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   184ac:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   184b0:	4b0b      	ldr	r3, [pc, #44]	; (184e0 <z_nrf_rtc_timer_read+0x3c>)
   184b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   184b6:	1818      	adds	r0, r3, r0
   184b8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   184bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   184c0:	d20a      	bcs.n	184d8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   184c2:	4b08      	ldr	r3, [pc, #32]	; (184e4 <z_nrf_rtc_timer_read+0x40>)
   184c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   184c8:	4290      	cmp	r0, r2
   184ca:	eb71 0303 	sbcs.w	r3, r1, r3
   184ce:	d203      	bcs.n	184d8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   184d0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   184d4:	f141 0100 	adc.w	r1, r1, #0
}
   184d8:	4770      	bx	lr
   184da:	bf00      	nop
   184dc:	20002bd8 	.word	0x20002bd8
   184e0:	40011000 	.word	0x40011000
   184e4:	200015a8 	.word	0x200015a8

000184e8 <compare_set>:
{
   184e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184ec:	b085      	sub	sp, #20
   184ee:	4616      	mov	r6, r2
   184f0:	4698      	mov	r8, r3
   184f2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   184f4:	f7ff ff44 	bl	18380 <compare_int_lock>
   184f8:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   184fa:	f7ff ffd3 	bl	184a4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   184fe:	42b0      	cmp	r0, r6
   18500:	eb71 0308 	sbcs.w	r3, r1, r8
   18504:	d278      	bcs.n	185f8 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   18506:	4b46      	ldr	r3, [pc, #280]	; (18620 <compare_set+0x138>)
   18508:	1a30      	subs	r0, r6, r0
   1850a:	eb68 0101 	sbc.w	r1, r8, r1
   1850e:	4298      	cmp	r0, r3
   18510:	f171 0300 	sbcs.w	r3, r1, #0
   18514:	f080 8081 	bcs.w	1861a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   18518:	4b42      	ldr	r3, [pc, #264]	; (18624 <compare_set+0x13c>)
   1851a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1851e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   18522:	45d8      	cmp	r8, fp
   18524:	bf08      	it	eq
   18526:	4556      	cmpeq	r6, sl
   18528:	d051      	beq.n	185ce <compare_set+0xe6>
   1852a:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1852e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18532:	f105 0750 	add.w	r7, r5, #80	; 0x50
   18536:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1853a:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1853c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18540:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18544:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   18546:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1854a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1854e:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   18550:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   18554:	4b34      	ldr	r3, [pc, #208]	; (18628 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18556:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1855a:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   1855c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18560:	1a40      	subs	r0, r0, r1
   18562:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   18566:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1856a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1856c:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   18570:	d107      	bne.n	18582 <compare_set+0x9a>
   18572:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   18576:	2013      	movs	r0, #19
   18578:	f007 f953 	bl	1f822 <z_impl_k_busy_wait>
   1857c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   18580:	4b29      	ldr	r3, [pc, #164]	; (18628 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   18582:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   18586:	eba4 000c 	sub.w	r0, r4, ip
   1858a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1858e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18592:	bf88      	it	hi
   18594:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18596:	2000      	movs	r0, #0
   18598:	6038      	str	r0, [r7, #0]
   1859a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   1859c:	9801      	ldr	r0, [sp, #4]
   1859e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   185a2:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   185a6:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   185aa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   185ae:	4281      	cmp	r1, r0
   185b0:	d006      	beq.n	185c0 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   185b2:	1a20      	subs	r0, r4, r0
   185b4:	3802      	subs	r0, #2
   185b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   185ba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   185be:	d819      	bhi.n	185f4 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   185c0:	1aa4      	subs	r4, r4, r2
   185c2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   185c6:	eb14 0a06 	adds.w	sl, r4, r6
   185ca:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   185ce:	4915      	ldr	r1, [pc, #84]	; (18624 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   185d0:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   185d2:	012b      	lsls	r3, r5, #4
   185d4:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   185d8:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   185dc:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   185de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   185e0:	6053      	str	r3, [r2, #4]
	return ret;
   185e2:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   185e4:	4628      	mov	r0, r5
   185e6:	9900      	ldr	r1, [sp, #0]
   185e8:	f7ff ff2e 	bl	18448 <compare_int_unlock>
}
   185ec:	4620      	mov	r0, r4
   185ee:	b005      	add	sp, #20
   185f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185f4:	4620      	mov	r0, r4
   185f6:	e7b1      	b.n	1855c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   185f8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   185fa:	4a0c      	ldr	r2, [pc, #48]	; (1862c <compare_set+0x144>)
   185fc:	f3bf 8f5b 	dmb	ish
   18600:	40ab      	lsls	r3, r5
   18602:	e852 1f00 	ldrex	r1, [r2]
   18606:	4319      	orrs	r1, r3
   18608:	e842 1000 	strex	r0, r1, [r2]
   1860c:	2800      	cmp	r0, #0
   1860e:	d1f8      	bne.n	18602 <compare_set+0x11a>
   18610:	f3bf 8f5b 	dmb	ish
   18614:	46b2      	mov	sl, r6
   18616:	46c3      	mov	fp, r8
   18618:	e7d9      	b.n	185ce <compare_set+0xe6>
			return -EINVAL;
   1861a:	f06f 0415 	mvn.w	r4, #21
   1861e:	e7e1      	b.n	185e4 <compare_set+0xfc>
   18620:	01000001 	.word	0x01000001
   18624:	200015b0 	.word	0x200015b0
   18628:	40011000 	.word	0x40011000
   1862c:	20002bd0 	.word	0x20002bd0

00018630 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   18630:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   18632:	4b19      	ldr	r3, [pc, #100]	; (18698 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   18634:	4d19      	ldr	r5, [pc, #100]	; (1869c <sys_clock_driver_init+0x6c>)
   18636:	2400      	movs	r4, #0
   18638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1863c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18640:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   18644:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   18648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1864c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18650:	4b13      	ldr	r3, [pc, #76]	; (186a0 <sys_clock_driver_init+0x70>)
   18652:	2602      	movs	r6, #2
   18654:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   18658:	2101      	movs	r1, #1
   1865a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1865e:	2011      	movs	r0, #17
   18660:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   18664:	4622      	mov	r2, r4
   18666:	f7ed fd9d 	bl	61a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1866a:	2011      	movs	r0, #17
   1866c:	f7ed fd68 	bl	6140 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   18670:	4a0c      	ldr	r2, [pc, #48]	; (186a4 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18672:	2301      	movs	r3, #1
   18674:	60ab      	str	r3, [r5, #8]
   18676:	602b      	str	r3, [r5, #0]
   18678:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1867a:	4b0b      	ldr	r3, [pc, #44]	; (186a8 <sys_clock_driver_init+0x78>)
   1867c:	4a0b      	ldr	r2, [pc, #44]	; (186ac <sys_clock_driver_init+0x7c>)
   1867e:	9300      	str	r3, [sp, #0]
   18680:	9401      	str	r4, [sp, #4]
   18682:	2300      	movs	r3, #0
   18684:	4620      	mov	r0, r4
   18686:	f7ff ff2f 	bl	184e8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1868a:	4630      	mov	r0, r6
   1868c:	f7fe fd5c 	bl	17148 <z_nrf_clock_control_lf_on>

	return 0;
}
   18690:	4620      	mov	r0, r4
   18692:	b002      	add	sp, #8
   18694:	bd70      	pop	{r4, r5, r6, pc}
   18696:	bf00      	nop
   18698:	200015b0 	.word	0x200015b0
   1869c:	40011000 	.word	0x40011000
   186a0:	e000e100 	.word	0xe000e100
   186a4:	20002bd4 	.word	0x20002bd4
   186a8:	000183d1 	.word	0x000183d1
   186ac:	007fffff 	.word	0x007fffff

000186b0 <rtc_nrf_isr>:
{
   186b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   186b4:	4c35      	ldr	r4, [pc, #212]	; (1878c <rtc_nrf_isr+0xdc>)
   186b6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   186ba:	079a      	lsls	r2, r3, #30
   186bc:	d50b      	bpl.n	186d6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   186be:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   186c2:	b143      	cbz	r3, 186d6 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   186c4:	4a32      	ldr	r2, [pc, #200]	; (18790 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   186c6:	2300      	movs	r3, #0
   186c8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   186cc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   186d0:	6813      	ldr	r3, [r2, #0]
   186d2:	3301      	adds	r3, #1
   186d4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   186d6:	f04f 0320 	mov.w	r3, #32
   186da:	f3ef 8211 	mrs	r2, BASEPRI
   186de:	f383 8812 	msr	BASEPRI_MAX, r3
   186e2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   186e6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   186ea:	03db      	lsls	r3, r3, #15
   186ec:	d512      	bpl.n	18714 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   186ee:	f3bf 8f5b 	dmb	ish
   186f2:	4b28      	ldr	r3, [pc, #160]	; (18794 <rtc_nrf_isr+0xe4>)
   186f4:	e853 1f00 	ldrex	r1, [r3]
   186f8:	f021 0001 	bic.w	r0, r1, #1
   186fc:	e843 0600 	strex	r6, r0, [r3]
   18700:	2e00      	cmp	r6, #0
   18702:	d1f7      	bne.n	186f4 <rtc_nrf_isr+0x44>
   18704:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   18708:	2900      	cmp	r1, #0
   1870a:	d136      	bne.n	1877a <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1870c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   18710:	2b00      	cmp	r3, #0
   18712:	d132      	bne.n	1877a <rtc_nrf_isr+0xca>
{
   18714:	2300      	movs	r3, #0
	__asm__ volatile(
   18716:	f382 8811 	msr	BASEPRI, r2
   1871a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   1871e:	b34b      	cbz	r3, 18774 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   18720:	f7ff fec0 	bl	184a4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   18724:	f04f 0320 	mov.w	r3, #32
   18728:	f3ef 8c11 	mrs	ip, BASEPRI
   1872c:	f383 8812 	msr	BASEPRI_MAX, r3
   18730:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   18734:	4b18      	ldr	r3, [pc, #96]	; (18798 <rtc_nrf_isr+0xe8>)
   18736:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1873a:	42b0      	cmp	r0, r6
   1873c:	eb71 0207 	sbcs.w	r2, r1, r7
   18740:	f04f 0200 	mov.w	r2, #0
   18744:	d320      	bcc.n	18788 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18746:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1874a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   1874e:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18752:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   18756:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   18758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1875c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   18760:	f38c 8811 	msr	BASEPRI, ip
   18764:	f3bf 8f6f 	isb	sy
		if (handler) {
   18768:	b121      	cbz	r1, 18774 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   1876a:	9500      	str	r5, [sp, #0]
   1876c:	4632      	mov	r2, r6
   1876e:	463b      	mov	r3, r7
   18770:	2000      	movs	r0, #0
   18772:	4788      	blx	r1
}
   18774:	b003      	add	sp, #12
   18776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1877a:	2300      	movs	r3, #0
   1877c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   18780:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   18784:	2301      	movs	r3, #1
}
   18786:	e7c6      	b.n	18716 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   18788:	4611      	mov	r1, r2
   1878a:	e7e9      	b.n	18760 <rtc_nrf_isr+0xb0>
   1878c:	40011000 	.word	0x40011000
   18790:	20002bd8 	.word	0x20002bd8
   18794:	20002bd0 	.word	0x20002bd0
   18798:	200015b0 	.word	0x200015b0

0001879c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1879c:	1c43      	adds	r3, r0, #1
{
   1879e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   187a0:	d021      	beq.n	187e6 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   187a2:	2801      	cmp	r0, #1
   187a4:	dd21      	ble.n	187ea <sys_clock_set_timeout+0x4e>
   187a6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   187aa:	da20      	bge.n	187ee <sys_clock_set_timeout+0x52>
   187ac:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   187ae:	f7ff fe79 	bl	184a4 <z_nrf_rtc_timer_read>
   187b2:	4b10      	ldr	r3, [pc, #64]	; (187f4 <sys_clock_set_timeout+0x58>)
   187b4:	e9d3 1300 	ldrd	r1, r3, [r3]
   187b8:	1a40      	subs	r0, r0, r1
		ticks = 0;
   187ba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   187be:	bf28      	it	cs
   187c0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   187c2:	3001      	adds	r0, #1
   187c4:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   187c6:	480c      	ldr	r0, [pc, #48]	; (187f8 <sys_clock_set_timeout+0x5c>)
   187c8:	4282      	cmp	r2, r0
   187ca:	bf28      	it	cs
   187cc:	4602      	movcs	r2, r0
   187ce:	1852      	adds	r2, r2, r1
   187d0:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   187d4:	4909      	ldr	r1, [pc, #36]	; (187fc <sys_clock_set_timeout+0x60>)
   187d6:	9001      	str	r0, [sp, #4]
   187d8:	9100      	str	r1, [sp, #0]
   187da:	f143 0300 	adc.w	r3, r3, #0
   187de:	f7ff fe83 	bl	184e8 <compare_set>
}
   187e2:	b002      	add	sp, #8
   187e4:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   187e6:	4804      	ldr	r0, [pc, #16]	; (187f8 <sys_clock_set_timeout+0x5c>)
   187e8:	e7e0      	b.n	187ac <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   187ea:	2400      	movs	r4, #0
   187ec:	e7df      	b.n	187ae <sys_clock_set_timeout+0x12>
   187ee:	4c02      	ldr	r4, [pc, #8]	; (187f8 <sys_clock_set_timeout+0x5c>)
   187f0:	e7dd      	b.n	187ae <sys_clock_set_timeout+0x12>
   187f2:	bf00      	nop
   187f4:	200015c0 	.word	0x200015c0
   187f8:	007fffff 	.word	0x007fffff
   187fc:	000183d1 	.word	0x000183d1

00018800 <sys_clock_elapsed>:
{
   18800:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   18802:	f7ff fe4f 	bl	184a4 <z_nrf_rtc_timer_read>
   18806:	4b02      	ldr	r3, [pc, #8]	; (18810 <sys_clock_elapsed+0x10>)
   18808:	681b      	ldr	r3, [r3, #0]
}
   1880a:	1ac0      	subs	r0, r0, r3
   1880c:	bd08      	pop	{r3, pc}
   1880e:	bf00      	nop
   18810:	200015c0 	.word	0x200015c0

00018814 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18814:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18818:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1881c:	2a06      	cmp	r2, #6
   1881e:	d109      	bne.n	18834 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18820:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   18824:	f3c3 1303 	ubfx	r3, r3, #4, #4
   18828:	3b03      	subs	r3, #3
   1882a:	2b04      	cmp	r3, #4
   1882c:	d802      	bhi.n	18834 <nrf52_errata_16+0x20>
   1882e:	4a02      	ldr	r2, [pc, #8]	; (18838 <nrf52_errata_16+0x24>)
   18830:	5cd0      	ldrb	r0, [r2, r3]
   18832:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18834:	2000      	movs	r0, #0
    #endif
}
   18836:	4770      	bx	lr
   18838:	00021aea 	.word	0x00021aea

0001883c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1883c:	4a02      	ldr	r2, [pc, #8]	; (18848 <nvmc_wait+0xc>)
   1883e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   18842:	2b00      	cmp	r3, #0
   18844:	d0fb      	beq.n	1883e <nvmc_wait+0x2>
}
   18846:	4770      	bx	lr
   18848:	4001e000 	.word	0x4001e000

0001884c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1884c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1884e:	f006 fb41 	bl	1eed4 <nrf52_errata_108>
   18852:	b140      	cbz	r0, 18866 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   18854:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18858:	4a90      	ldr	r2, [pc, #576]	; (18a9c <SystemInit+0x250>)
   1885a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1885e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   18862:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   18866:	f7ff ffd5 	bl	18814 <nrf52_errata_16>
   1886a:	b110      	cbz	r0, 18872 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1886c:	4b8c      	ldr	r3, [pc, #560]	; (18aa0 <SystemInit+0x254>)
   1886e:	4a8d      	ldr	r2, [pc, #564]	; (18aa4 <SystemInit+0x258>)
   18870:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   18872:	f006 fb2f 	bl	1eed4 <nrf52_errata_108>
   18876:	b148      	cbz	r0, 1888c <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   18878:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1887c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18880:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   18884:	f3c3 3342 	ubfx	r3, r3, #13, #3
   18888:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1888c:	f7ff ffc2 	bl	18814 <nrf52_errata_16>
   18890:	b130      	cbz	r0, 188a0 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   18892:	4a85      	ldr	r2, [pc, #532]	; (18aa8 <SystemInit+0x25c>)
   18894:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   18898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1889c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   188a0:	f006 fb18 	bl	1eed4 <nrf52_errata_108>
   188a4:	b140      	cbz	r0, 188b8 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   188a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   188aa:	2200      	movs	r2, #0
   188ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   188b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   188b4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   188b8:	f7ff ffac 	bl	18814 <nrf52_errata_16>
   188bc:	b120      	cbz	r0, 188c8 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   188be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   188c2:	2203      	movs	r2, #3
   188c4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   188c8:	f7ff ffa4 	bl	18814 <nrf52_errata_16>
   188cc:	b160      	cbz	r0, 188e8 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   188ce:	4b77      	ldr	r3, [pc, #476]	; (18aac <SystemInit+0x260>)
   188d0:	2205      	movs	r2, #5
   188d2:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   188d6:	2201      	movs	r2, #1
   188d8:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   188dc:	2200      	movs	r2, #0
   188de:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   188e2:	223f      	movs	r2, #63	; 0x3f
   188e4:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   188e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   188ec:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   188f0:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   188f2:	bf09      	itett	eq
   188f4:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   188f8:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   188fc:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18900:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   18904:	bf08      	it	eq
   18906:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1890a:	2a06      	cmp	r2, #6
   1890c:	d14d      	bne.n	189aa <SystemInit+0x15e>
            {
                switch(var2)
   1890e:	3b03      	subs	r3, #3
   18910:	2b04      	cmp	r3, #4
   18912:	d803      	bhi.n	1891c <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   18914:	4a66      	ldr	r2, [pc, #408]	; (18ab0 <SystemInit+0x264>)
   18916:	5cd3      	ldrb	r3, [r2, r3]
   18918:	2b00      	cmp	r3, #0
   1891a:	d046      	beq.n	189aa <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1891c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18920:	4b64      	ldr	r3, [pc, #400]	; (18ab4 <SystemInit+0x268>)
   18922:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   18926:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1892a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1892e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   18932:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   18936:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1893a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1893e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   18942:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   18946:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1894a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1894e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   18952:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   18956:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1895a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1895e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   18962:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   18966:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1896a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1896e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   18972:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   18976:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1897a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1897e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   18982:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   18986:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1898a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1898e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   18992:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   18996:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1899a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1899e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   189a2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   189a6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   189aa:	f006 fa93 	bl	1eed4 <nrf52_errata_108>
   189ae:	b148      	cbz	r0, 189c4 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   189b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   189b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   189b8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   189bc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   189c0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   189c4:	f006 fa86 	bl	1eed4 <nrf52_errata_108>
   189c8:	b148      	cbz	r0, 189de <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   189ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   189ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   189d2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   189d4:	bf44      	itt	mi
   189d6:	f06f 0201 	mvnmi.w	r2, #1
   189da:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   189de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   189e2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   189e6:	2a06      	cmp	r2, #6
   189e8:	d126      	bne.n	18a38 <SystemInit+0x1ec>
            {
                switch(var2)
   189ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   189ee:	3b03      	subs	r3, #3
   189f0:	2b04      	cmp	r3, #4
   189f2:	d802      	bhi.n	189fa <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   189f4:	4a30      	ldr	r2, [pc, #192]	; (18ab8 <SystemInit+0x26c>)
   189f6:	5cd3      	ldrb	r3, [r2, r3]
   189f8:	b163      	cbz	r3, 18a14 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   189fa:	4a30      	ldr	r2, [pc, #192]	; (18abc <SystemInit+0x270>)
   189fc:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   18a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   18a04:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18a08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18a0c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18a10:	2b06      	cmp	r3, #6
   18a12:	d111      	bne.n	18a38 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18a18:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   18a1c:	3b03      	subs	r3, #3
   18a1e:	2b04      	cmp	r3, #4
   18a20:	d802      	bhi.n	18a28 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   18a22:	4a27      	ldr	r2, [pc, #156]	; (18ac0 <SystemInit+0x274>)
   18a24:	5cd3      	ldrb	r3, [r2, r3]
   18a26:	b13b      	cbz	r3, 18a38 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   18a28:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18a2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   18a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18a34:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18a38:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18a3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   18a40:	2a00      	cmp	r2, #0
   18a42:	db03      	blt.n	18a4c <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   18a44:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18a48:	2b00      	cmp	r3, #0
   18a4a:	da22      	bge.n	18a92 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18a4c:	491d      	ldr	r1, [pc, #116]	; (18ac4 <SystemInit+0x278>)
   18a4e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   18a50:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18a54:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   18a58:	2415      	movs	r4, #21
    nvmc_wait();
   18a5a:	f7ff feef 	bl	1883c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   18a5e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   18a62:	f7ff feeb 	bl	1883c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   18a66:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   18a6a:	f7ff fee7 	bl	1883c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18a6e:	2300      	movs	r3, #0
   18a70:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   18a74:	f7ff fee2 	bl	1883c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   18a78:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   18a7c:	490a      	ldr	r1, [pc, #40]	; (18aa8 <SystemInit+0x25c>)
   18a7e:	4b12      	ldr	r3, [pc, #72]	; (18ac8 <SystemInit+0x27c>)
   18a80:	68ca      	ldr	r2, [r1, #12]
   18a82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   18a86:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   18a88:	60cb      	str	r3, [r1, #12]
   18a8a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   18a8e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   18a90:	e7fd      	b.n	18a8e <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   18a92:	4b0e      	ldr	r3, [pc, #56]	; (18acc <SystemInit+0x280>)
   18a94:	4a0e      	ldr	r2, [pc, #56]	; (18ad0 <SystemInit+0x284>)
   18a96:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   18a98:	bd10      	pop	{r4, pc}
   18a9a:	bf00      	nop
   18a9c:	40013000 	.word	0x40013000
   18aa0:	4007c000 	.word	0x4007c000
   18aa4:	baadf00d 	.word	0xbaadf00d
   18aa8:	e000ed00 	.word	0xe000ed00
   18aac:	40005000 	.word	0x40005000
   18ab0:	00021adb 	.word	0x00021adb
   18ab4:	4000c000 	.word	0x4000c000
   18ab8:	00021ae0 	.word	0x00021ae0
   18abc:	40001000 	.word	0x40001000
   18ac0:	00021ae5 	.word	0x00021ae5
   18ac4:	4001e000 	.word	0x4001e000
   18ac8:	05fa0004 	.word	0x05fa0004
   18acc:	20000818 	.word	0x20000818
   18ad0:	03d09000 	.word	0x03d09000

00018ad4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   18ad4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   18ad6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   18ad8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   18ada:	fab2 f382 	clz	r3, r2
   18ade:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   18ae2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   18ae4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   18ae6:	d014      	beq.n	18b12 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18ae8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   18aec:	fa05 f303 	lsl.w	r3, r5, r3
   18af0:	ea22 0303 	bic.w	r3, r2, r3
   18af4:	e850 6f00 	ldrex	r6, [r0]
   18af8:	4296      	cmp	r6, r2
   18afa:	d104      	bne.n	18b06 <nrfx_flag32_alloc+0x32>
   18afc:	e840 3c00 	strex	ip, r3, [r0]
   18b00:	f1bc 0f00 	cmp.w	ip, #0
   18b04:	d1f6      	bne.n	18af4 <nrfx_flag32_alloc+0x20>
   18b06:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   18b0a:	d1e5      	bne.n	18ad8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   18b0c:	4802      	ldr	r0, [pc, #8]	; (18b18 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   18b0e:	700c      	strb	r4, [r1, #0]
}
   18b10:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   18b12:	4802      	ldr	r0, [pc, #8]	; (18b1c <nrfx_flag32_alloc+0x48>)
   18b14:	e7fc      	b.n	18b10 <nrfx_flag32_alloc+0x3c>
   18b16:	bf00      	nop
   18b18:	0bad0000 	.word	0x0bad0000
   18b1c:	0bad0002 	.word	0x0bad0002

00018b20 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   18b20:	6803      	ldr	r3, [r0, #0]
   18b22:	40cb      	lsrs	r3, r1
   18b24:	07db      	lsls	r3, r3, #31
{
   18b26:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   18b28:	d415      	bmi.n	18b56 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   18b2a:	2301      	movs	r3, #1
   18b2c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   18b30:	6803      	ldr	r3, [r0, #0]
   18b32:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   18b36:	ea41 0203 	orr.w	r2, r1, r3
   18b3a:	e850 4f00 	ldrex	r4, [r0]
   18b3e:	429c      	cmp	r4, r3
   18b40:	d104      	bne.n	18b4c <nrfx_flag32_free+0x2c>
   18b42:	e840 2c00 	strex	ip, r2, [r0]
   18b46:	f1bc 0f00 	cmp.w	ip, #0
   18b4a:	d1f6      	bne.n	18b3a <nrfx_flag32_free+0x1a>
   18b4c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   18b50:	d1ee      	bne.n	18b30 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   18b52:	4802      	ldr	r0, [pc, #8]	; (18b5c <nrfx_flag32_free+0x3c>)
}
   18b54:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   18b56:	4802      	ldr	r0, [pc, #8]	; (18b60 <nrfx_flag32_free+0x40>)
   18b58:	e7fc      	b.n	18b54 <nrfx_flag32_free+0x34>
   18b5a:	bf00      	nop
   18b5c:	0bad0000 	.word	0x0bad0000
   18b60:	0bad0004 	.word	0x0bad0004

00018b64 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   18b64:	4b04      	ldr	r3, [pc, #16]	; (18b78 <nrfx_clock_init+0x14>)
   18b66:	791a      	ldrb	r2, [r3, #4]
   18b68:	b922      	cbnz	r2, 18b74 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   18b6a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   18b6c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   18b6e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   18b70:	4802      	ldr	r0, [pc, #8]	; (18b7c <nrfx_clock_init+0x18>)
   18b72:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   18b74:	4802      	ldr	r0, [pc, #8]	; (18b80 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18b76:	4770      	bx	lr
   18b78:	20002bdc 	.word	0x20002bdc
   18b7c:	0bad0000 	.word	0x0bad0000
   18b80:	0bad000c 	.word	0x0bad000c

00018b84 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   18b84:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   18b86:	b110      	cbz	r0, 18b8e <nrfx_clock_start+0xa>
   18b88:	2801      	cmp	r0, #1
   18b8a:	d034      	beq.n	18bf6 <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   18b8c:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18b92:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18b96:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   18b9a:	03c9      	lsls	r1, r1, #15
   18b9c:	d529      	bpl.n	18bf2 <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   18b9e:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   18ba2:	2a01      	cmp	r2, #1
   18ba4:	d125      	bne.n	18bf2 <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18ba6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18bae:	2200      	movs	r2, #0
   18bb0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18bb4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   18bb8:	2202      	movs	r2, #2
   18bba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   18bbe:	4a13      	ldr	r2, [pc, #76]	; (18c0c <nrfx_clock_start+0x88>)
   18bc0:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   18bc4:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   18bc8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   18bcc:	4b10      	ldr	r3, [pc, #64]	; (18c10 <nrfx_clock_start+0x8c>)
   18bce:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   18bd0:	f044 0101 	orr.w	r1, r4, #1
   18bd4:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   18bd6:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   18bd8:	6859      	ldr	r1, [r3, #4]
   18bda:	1b49      	subs	r1, r1, r5
   18bdc:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   18be0:	d3fa      	bcc.n	18bd8 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
   18be2:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   18be8:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   18bec:	2201      	movs	r2, #1
   18bee:	609a      	str	r2, [r3, #8]
}
   18bf0:	e7cc      	b.n	18b8c <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18bf2:	2200      	movs	r2, #0
   18bf4:	e7d7      	b.n	18ba6 <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18bfa:	2200      	movs	r2, #0
   18bfc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18c00:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   18c04:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c08:	6018      	str	r0, [r3, #0]
}
   18c0a:	e7bf      	b.n	18b8c <nrfx_clock_start+0x8>
   18c0c:	e000ed00 	.word	0xe000ed00
   18c10:	e0001000 	.word	0xe0001000

00018c14 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   18c14:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   18c16:	b110      	cbz	r0, 18c1e <nrfx_clock_stop+0xa>
   18c18:	2801      	cmp	r0, #1
   18c1a:	d017      	beq.n	18c4c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   18c1c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   18c1e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   18c22:	2302      	movs	r3, #2
   18c24:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c28:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   18c2c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c30:	2301      	movs	r3, #1
   18c32:	60e3      	str	r3, [r4, #12]
   18c34:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18c38:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   18c3c:	03db      	lsls	r3, r3, #15
   18c3e:	d5ed      	bpl.n	18c1c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   18c40:	2001      	movs	r0, #1
   18c42:	f006 f956 	bl	1eef2 <nrfx_busy_wait>
   18c46:	3d01      	subs	r5, #1
   18c48:	d1f6      	bne.n	18c38 <nrfx_clock_stop+0x24>
   18c4a:	e7e7      	b.n	18c1c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   18c4c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c50:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   18c52:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c56:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   18c5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c5e:	6060      	str	r0, [r4, #4]
   18c60:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18c64:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18c68:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   18c6c:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18c6e:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18c72:	d505      	bpl.n	18c80 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   18c74:	b123      	cbz	r3, 18c80 <nrfx_clock_stop+0x6c>
   18c76:	2001      	movs	r0, #1
   18c78:	f006 f93b 	bl	1eef2 <nrfx_busy_wait>
   18c7c:	3d01      	subs	r5, #1
   18c7e:	d1f1      	bne.n	18c64 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   18c80:	4b01      	ldr	r3, [pc, #4]	; (18c88 <nrfx_clock_stop+0x74>)
   18c82:	2200      	movs	r2, #0
   18c84:	715a      	strb	r2, [r3, #5]
   18c86:	e7c9      	b.n	18c1c <nrfx_clock_stop+0x8>
   18c88:	20002bdc 	.word	0x20002bdc

00018c8c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   18c90:	b510      	push	{r4, lr}
   18c92:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   18c96:	b16a      	cbz	r2, 18cb4 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18c98:	2200      	movs	r2, #0
   18c9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18c9e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   18ca2:	2201      	movs	r2, #1
   18ca4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   18ca8:	4b11      	ldr	r3, [pc, #68]	; (18cf0 <nrfx_power_clock_irq_handler+0x64>)
   18caa:	7958      	ldrb	r0, [r3, #5]
   18cac:	b910      	cbnz	r0, 18cb4 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   18cae:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   18cb0:	681b      	ldr	r3, [r3, #0]
   18cb2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18cb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18cb8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   18cbc:	b172      	cbz	r2, 18cdc <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18cbe:	2200      	movs	r2, #0
   18cc0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   18cc4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18cc8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18ccc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   18cd0:	0792      	lsls	r2, r2, #30
   18cd2:	d104      	bne.n	18cde <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18cd4:	2201      	movs	r2, #1
   18cd6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18cda:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   18cdc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   18cde:	2202      	movs	r2, #2
   18ce0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18ce4:	4b02      	ldr	r3, [pc, #8]	; (18cf0 <nrfx_power_clock_irq_handler+0x64>)
}
   18ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18cea:	681b      	ldr	r3, [r3, #0]
   18cec:	2001      	movs	r0, #1
   18cee:	4718      	bx	r3
   18cf0:	20002bdc 	.word	0x20002bdc

00018cf4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   18cf4:	4b03      	ldr	r3, [pc, #12]	; (18d04 <pin_in_use_by_te+0x10>)
   18cf6:	3008      	adds	r0, #8
   18cf8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   18cfc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   18d00:	4770      	bx	lr
   18d02:	bf00      	nop
   18d04:	2000081c 	.word	0x2000081c

00018d08 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   18d08:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18d0a:	f100 0308 	add.w	r3, r0, #8
   18d0e:	4c0c      	ldr	r4, [pc, #48]	; (18d40 <call_handler+0x38>)
   18d10:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   18d14:	05da      	lsls	r2, r3, #23
{
   18d16:	4605      	mov	r5, r0
   18d18:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18d1a:	d507      	bpl.n	18d2c <call_handler+0x24>
   18d1c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   18d20:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   18d24:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   18d28:	6852      	ldr	r2, [r2, #4]
   18d2a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   18d2c:	68a3      	ldr	r3, [r4, #8]
   18d2e:	b12b      	cbz	r3, 18d3c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   18d30:	68e2      	ldr	r2, [r4, #12]
   18d32:	4631      	mov	r1, r6
   18d34:	4628      	mov	r0, r5
    }
}
   18d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   18d3a:	4718      	bx	r3
}
   18d3c:	bd70      	pop	{r4, r5, r6, pc}
   18d3e:	bf00      	nop
   18d40:	2000081c 	.word	0x2000081c

00018d44 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18d44:	4a12      	ldr	r2, [pc, #72]	; (18d90 <release_handler+0x4c>)
   18d46:	3008      	adds	r0, #8
{
   18d48:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   18d4a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   18d4e:	05d9      	lsls	r1, r3, #23
   18d50:	d51b      	bpl.n	18d8a <release_handler+0x46>
   18d52:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   18d56:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   18d5a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   18d5e:	f102 0410 	add.w	r4, r2, #16
   18d62:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   18d64:	f834 3b02 	ldrh.w	r3, [r4], #2
   18d68:	f413 7f80 	tst.w	r3, #256	; 0x100
   18d6c:	d003      	beq.n	18d76 <release_handler+0x32>
   18d6e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   18d72:	4299      	cmp	r1, r3
   18d74:	d009      	beq.n	18d8a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   18d76:	3001      	adds	r0, #1
   18d78:	2820      	cmp	r0, #32
   18d7a:	d1f3      	bne.n	18d64 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   18d7c:	2300      	movs	r3, #0
   18d7e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   18d82:	4804      	ldr	r0, [pc, #16]	; (18d94 <release_handler+0x50>)
}
   18d84:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   18d86:	f7ff becb 	b.w	18b20 <nrfx_flag32_free>
}
   18d8a:	bc10      	pop	{r4}
   18d8c:	4770      	bx	lr
   18d8e:	bf00      	nop
   18d90:	2000081c 	.word	0x2000081c
   18d94:	20000870 	.word	0x20000870

00018d98 <pin_handler_trigger_uninit>:
{
   18d98:	b538      	push	{r3, r4, r5, lr}
   18d9a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   18d9c:	f7ff ffaa 	bl	18cf4 <pin_in_use_by_te>
   18da0:	4c09      	ldr	r4, [pc, #36]	; (18dc8 <pin_handler_trigger_uninit+0x30>)
   18da2:	f102 0508 	add.w	r5, r2, #8
   18da6:	b140      	cbz	r0, 18dba <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   18da8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   18dac:	4907      	ldr	r1, [pc, #28]	; (18dcc <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   18dae:	0b5b      	lsrs	r3, r3, #13
   18db0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   18db4:	2000      	movs	r0, #0
   18db6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   18dba:	4610      	mov	r0, r2
   18dbc:	f7ff ffc2 	bl	18d44 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   18dc0:	2300      	movs	r3, #0
   18dc2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   18dc6:	bd38      	pop	{r3, r4, r5, pc}
   18dc8:	2000081c 	.word	0x2000081c
   18dcc:	40006000 	.word	0x40006000

00018dd0 <nrfx_gpiote_input_configure>:
{
   18dd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18dd4:	4604      	mov	r4, r0
   18dd6:	461e      	mov	r6, r3
    if (p_input_config)
   18dd8:	b309      	cbz	r1, 18e1e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18dda:	4f4d      	ldr	r7, [pc, #308]	; (18f10 <nrfx_gpiote_input_configure+0x140>)
   18ddc:	f100 0808 	add.w	r8, r0, #8
   18de0:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   18de4:	07ab      	lsls	r3, r5, #30
   18de6:	d506      	bpl.n	18df6 <nrfx_gpiote_input_configure+0x26>
   18de8:	f7ff ff84 	bl	18cf4 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   18dec:	b118      	cbz	r0, 18df6 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   18dee:	4849      	ldr	r0, [pc, #292]	; (18f14 <nrfx_gpiote_input_configure+0x144>)
}
   18df0:	b002      	add	sp, #8
   18df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
   18df6:	f004 001f 	and.w	r0, r4, #31
   18dfa:	0080      	lsls	r0, r0, #2
   18dfc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18e00:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18e02:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   18e06:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
   18e0a:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   18e0e:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18e12:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
   18e16:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   18e1a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
   18e1e:	b192      	cbz	r2, 18e46 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18e20:	4b3b      	ldr	r3, [pc, #236]	; (18f10 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   18e22:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   18e24:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18e26:	f104 0008 	add.w	r0, r4, #8
   18e2a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   18e2e:	078f      	lsls	r7, r1, #30
   18e30:	d50c      	bpl.n	18e4c <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
   18e32:	2a00      	cmp	r2, #0
   18e34:	d1db      	bne.n	18dee <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   18e36:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   18e3a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   18e3e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
   18e42:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   18e46:	bbce      	cbnz	r6, 18ebc <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
   18e48:	4833      	ldr	r0, [pc, #204]	; (18f18 <nrfx_gpiote_input_configure+0x148>)
   18e4a:	e7d1      	b.n	18df0 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   18e4c:	f021 0120 	bic.w	r1, r1, #32
   18e50:	04c9      	lsls	r1, r1, #19
   18e52:	0cc9      	lsrs	r1, r1, #19
   18e54:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   18e58:	2a00      	cmp	r2, #0
   18e5a:	d0ec      	beq.n	18e36 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
   18e5c:	2d03      	cmp	r5, #3
   18e5e:	d8c6      	bhi.n	18dee <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   18e60:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   18e62:	b92d      	cbnz	r5, 18e70 <nrfx_gpiote_input_configure+0xa0>
   18e64:	4a2d      	ldr	r2, [pc, #180]	; (18f1c <nrfx_gpiote_input_configure+0x14c>)
   18e66:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   18e6a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   18e6e:	e7e2      	b.n	18e36 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   18e70:	00ba      	lsls	r2, r7, #2
   18e72:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18e76:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   18e7a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   18e7e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   18e82:	f02c 0c03 	bic.w	ip, ip, #3
   18e86:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   18e8a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   18e8e:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
   18e92:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   18e96:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18e9a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   18e9e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   18ea2:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
   18ea6:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
   18eaa:	ea4c 0c0e 	orr.w	ip, ip, lr
   18eae:	f041 0120 	orr.w	r1, r1, #32
   18eb2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   18eb6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   18eba:	e7bc      	b.n	18e36 <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   18ebc:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
   18ec0:	4620      	mov	r0, r4
   18ec2:	f7ff ff3f 	bl	18d44 <release_handler>
    if (!handler)
   18ec6:	2f00      	cmp	r7, #0
   18ec8:	d0be      	beq.n	18e48 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   18eca:	4d11      	ldr	r5, [pc, #68]	; (18f10 <nrfx_gpiote_input_configure+0x140>)
   18ecc:	682b      	ldr	r3, [r5, #0]
   18ece:	429f      	cmp	r7, r3
   18ed0:	d104      	bne.n	18edc <nrfx_gpiote_input_configure+0x10c>
   18ed2:	686b      	ldr	r3, [r5, #4]
   18ed4:	429e      	cmp	r6, r3
   18ed6:	d101      	bne.n	18edc <nrfx_gpiote_input_configure+0x10c>
   18ed8:	2200      	movs	r2, #0
   18eda:	e009      	b.n	18ef0 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   18edc:	4810      	ldr	r0, [pc, #64]	; (18f20 <nrfx_gpiote_input_configure+0x150>)
   18ede:	f10d 0107 	add.w	r1, sp, #7
   18ee2:	f7ff fdf7 	bl	18ad4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   18ee6:	4b0c      	ldr	r3, [pc, #48]	; (18f18 <nrfx_gpiote_input_configure+0x148>)
   18ee8:	4298      	cmp	r0, r3
   18eea:	d181      	bne.n	18df0 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   18eec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   18ef0:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   18ef4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   18ef8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   18efa:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   18efc:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   18f00:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   18f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18f08:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   18f0c:	e79c      	b.n	18e48 <nrfx_gpiote_input_configure+0x78>
   18f0e:	bf00      	nop
   18f10:	2000081c 	.word	0x2000081c
   18f14:	0bad0004 	.word	0x0bad0004
   18f18:	0bad0000 	.word	0x0bad0000
   18f1c:	40006000 	.word	0x40006000
   18f20:	20000870 	.word	0x20000870

00018f24 <nrfx_gpiote_output_configure>:
{
   18f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f26:	4604      	mov	r4, r0
    if (p_config)
   18f28:	b371      	cbz	r1, 18f88 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18f2a:	4e37      	ldr	r6, [pc, #220]	; (19008 <nrfx_gpiote_output_configure+0xe4>)
   18f2c:	f100 0708 	add.w	r7, r0, #8
   18f30:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   18f34:	07ab      	lsls	r3, r5, #30
   18f36:	d404      	bmi.n	18f42 <nrfx_gpiote_output_configure+0x1e>
   18f38:	f7ff fedc 	bl	18cf4 <pin_in_use_by_te>
   18f3c:	b108      	cbz	r0, 18f42 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
   18f3e:	4833      	ldr	r0, [pc, #204]	; (1900c <nrfx_gpiote_output_configure+0xe8>)
}
   18f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   18f42:	f015 0f1c 	tst.w	r5, #28
   18f46:	784b      	ldrb	r3, [r1, #1]
   18f48:	d001      	beq.n	18f4e <nrfx_gpiote_output_configure+0x2a>
   18f4a:	2b01      	cmp	r3, #1
   18f4c:	d0f7      	beq.n	18f3e <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
   18f4e:	f004 001f 	and.w	r0, r4, #31
   18f52:	0080      	lsls	r0, r0, #2
   18f54:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   18f58:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   18f5c:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   18f60:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   18f62:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   18f64:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
   18f68:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   18f6c:	f02c 0c07 	bic.w	ip, ip, #7
   18f70:	ea43 030c 	orr.w	r3, r3, ip
   18f74:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   18f78:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   18f7c:	f043 0301 	orr.w	r3, r3, #1
   18f80:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   18f84:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
   18f88:	b90a      	cbnz	r2, 18f8e <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
   18f8a:	4821      	ldr	r0, [pc, #132]	; (19010 <nrfx_gpiote_output_configure+0xec>)
   18f8c:	e7d8      	b.n	18f40 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   18f8e:	4e1e      	ldr	r6, [pc, #120]	; (19008 <nrfx_gpiote_output_configure+0xe4>)
   18f90:	f104 0708 	add.w	r7, r4, #8
   18f94:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   18f98:	0783      	lsls	r3, r0, #30
   18f9a:	d5d0      	bpl.n	18f3e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   18f9c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   18fa0:	4661      	mov	r1, ip
   18fa2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   18fa4:	f020 0020 	bic.w	r0, r0, #32
   18fa8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   18fac:	04c0      	lsls	r0, r0, #19
   18fae:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   18fb2:	0cc0      	lsrs	r0, r0, #19
   18fb4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   18fb8:	2300      	movs	r3, #0
   18fba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   18fbe:	7855      	ldrb	r5, [r2, #1]
   18fc0:	2d00      	cmp	r5, #0
   18fc2:	d0e2      	beq.n	18f8a <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   18fc4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   18fc8:	7892      	ldrb	r2, [r2, #2]
   18fca:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   18fce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   18fd2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18fd6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   18fda:	0223      	lsls	r3, r4, #8
   18fdc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   18fe0:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18fe2:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   18fe6:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   18fea:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18fec:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   18fee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   18ff2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18ff6:	4313      	orrs	r3, r2
   18ff8:	f040 0020 	orr.w	r0, r0, #32
   18ffc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   19000:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   19004:	e7c1      	b.n	18f8a <nrfx_gpiote_output_configure+0x66>
   19006:	bf00      	nop
   19008:	2000081c 	.word	0x2000081c
   1900c:	0bad0004 	.word	0x0bad0004
   19010:	0bad0000 	.word	0x0bad0000

00019014 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   19014:	4b01      	ldr	r3, [pc, #4]	; (1901c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   19016:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1901a:	4770      	bx	lr
   1901c:	2000081c 	.word	0x2000081c

00019020 <nrfx_gpiote_channel_get>:
{
   19020:	b508      	push	{r3, lr}
   19022:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   19024:	f7ff fe66 	bl	18cf4 <pin_in_use_by_te>
   19028:	b138      	cbz	r0, 1903a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1902a:	4b05      	ldr	r3, [pc, #20]	; (19040 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1902c:	4805      	ldr	r0, [pc, #20]	; (19044 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1902e:	3208      	adds	r2, #8
   19030:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   19034:	0b5b      	lsrs	r3, r3, #13
   19036:	700b      	strb	r3, [r1, #0]
}
   19038:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1903a:	4803      	ldr	r0, [pc, #12]	; (19048 <nrfx_gpiote_channel_get+0x28>)
   1903c:	e7fc      	b.n	19038 <nrfx_gpiote_channel_get+0x18>
   1903e:	bf00      	nop
   19040:	2000081c 	.word	0x2000081c
   19044:	0bad0000 	.word	0x0bad0000
   19048:	0bad0004 	.word	0x0bad0004

0001904c <nrfx_gpiote_init>:
{
   1904c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1904e:	4c0f      	ldr	r4, [pc, #60]	; (1908c <nrfx_gpiote_init+0x40>)
   19050:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   19054:	b9bd      	cbnz	r5, 19086 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   19056:	2240      	movs	r2, #64	; 0x40
   19058:	4629      	mov	r1, r5
   1905a:	f104 0010 	add.w	r0, r4, #16
   1905e:	f002 fe6f 	bl	1bd40 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   19062:	2006      	movs	r0, #6
   19064:	f7ed f86c 	bl	6140 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19068:	4b09      	ldr	r3, [pc, #36]	; (19090 <nrfx_gpiote_init+0x44>)
    return err_code;
   1906a:	480a      	ldr	r0, [pc, #40]	; (19094 <nrfx_gpiote_init+0x48>)
   1906c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   19070:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   19074:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19078:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1907c:	2301      	movs	r3, #1
   1907e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   19082:	6563      	str	r3, [r4, #84]	; 0x54
}
   19084:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   19086:	4804      	ldr	r0, [pc, #16]	; (19098 <nrfx_gpiote_init+0x4c>)
   19088:	e7fc      	b.n	19084 <nrfx_gpiote_init+0x38>
   1908a:	bf00      	nop
   1908c:	2000081c 	.word	0x2000081c
   19090:	40006000 	.word	0x40006000
   19094:	0bad0000 	.word	0x0bad0000
   19098:	0bad0005 	.word	0x0bad0005

0001909c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1909c:	4b03      	ldr	r3, [pc, #12]	; (190ac <nrfx_gpiote_is_init+0x10>)
   1909e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   190a2:	3800      	subs	r0, #0
   190a4:	bf18      	it	ne
   190a6:	2001      	movne	r0, #1
   190a8:	4770      	bx	lr
   190aa:	bf00      	nop
   190ac:	2000081c 	.word	0x2000081c

000190b0 <nrfx_gpiote_channel_free>:
{
   190b0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   190b2:	4801      	ldr	r0, [pc, #4]	; (190b8 <nrfx_gpiote_channel_free+0x8>)
   190b4:	f7ff bd34 	b.w	18b20 <nrfx_flag32_free>
   190b8:	2000086c 	.word	0x2000086c

000190bc <nrfx_gpiote_channel_alloc>:
{
   190bc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   190be:	4801      	ldr	r0, [pc, #4]	; (190c4 <nrfx_gpiote_channel_alloc+0x8>)
   190c0:	f7ff bd08 	b.w	18ad4 <nrfx_flag32_alloc>
   190c4:	2000086c 	.word	0x2000086c

000190c8 <nrfx_gpiote_trigger_enable>:
{
   190c8:	b510      	push	{r4, lr}
   190ca:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   190cc:	f7ff fe12 	bl	18cf4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   190d0:	f102 0408 	add.w	r4, r2, #8
   190d4:	4b1c      	ldr	r3, [pc, #112]	; (19148 <nrfx_gpiote_trigger_enable+0x80>)
   190d6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   190da:	b1e0      	cbz	r0, 19116 <nrfx_gpiote_trigger_enable+0x4e>
   190dc:	f013 0402 	ands.w	r4, r3, #2
   190e0:	d119      	bne.n	19116 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   190e2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   190e4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   190e6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   190ea:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   190ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   190f2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   190f6:	6004      	str	r4, [r0, #0]
   190f8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   190fa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   190fe:	f040 0001 	orr.w	r0, r0, #1
   19102:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   19106:	b129      	cbz	r1, 19114 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   19108:	2201      	movs	r2, #1
   1910a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1910e:	4a0f      	ldr	r2, [pc, #60]	; (1914c <nrfx_gpiote_trigger_enable+0x84>)
   19110:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   19114:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19116:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1911a:	2b04      	cmp	r3, #4
   1911c:	d010      	beq.n	19140 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1911e:	2b05      	cmp	r3, #5
   19120:	d010      	beq.n	19144 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
   19122:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19126:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   1912a:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1912e:	40d9      	lsrs	r1, r3
   19130:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19134:	3102      	adds	r1, #2
}
   19136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1913a:	4610      	mov	r0, r2
   1913c:	f005 bee5 	b.w	1ef0a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   19140:	2103      	movs	r1, #3
   19142:	e7f8      	b.n	19136 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   19144:	2102      	movs	r1, #2
   19146:	e7f6      	b.n	19136 <nrfx_gpiote_trigger_enable+0x6e>
   19148:	2000081c 	.word	0x2000081c
   1914c:	40006000 	.word	0x40006000

00019150 <nrfx_gpiote_trigger_disable>:
{
   19150:	b508      	push	{r3, lr}
   19152:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19154:	f7ff fdce 	bl	18cf4 <pin_in_use_by_te>
   19158:	b1c0      	cbz	r0, 1918c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1915a:	f102 0108 	add.w	r1, r2, #8
   1915e:	4b0e      	ldr	r3, [pc, #56]	; (19198 <nrfx_gpiote_trigger_disable+0x48>)
   19160:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19164:	0799      	lsls	r1, r3, #30
   19166:	d411      	bmi.n	1918c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19168:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1916a:	2201      	movs	r2, #1
   1916c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1916e:	009b      	lsls	r3, r3, #2
   19170:	490a      	ldr	r1, [pc, #40]	; (1919c <nrfx_gpiote_trigger_disable+0x4c>)
   19172:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19176:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1917a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1917e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   19182:	f022 0203 	bic.w	r2, r2, #3
   19186:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1918a:	bd08      	pop	{r3, pc}
   1918c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   19190:	2100      	movs	r1, #0
   19192:	4610      	mov	r0, r2
   19194:	f005 beb9 	b.w	1ef0a <nrf_gpio_cfg_sense_set>
   19198:	2000081c 	.word	0x2000081c
   1919c:	40006000 	.word	0x40006000

000191a0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   191a0:	4b0d      	ldr	r3, [pc, #52]	; (191d8 <nrfx_gpiote_pin_uninit+0x38>)
   191a2:	f100 0208 	add.w	r2, r0, #8
{
   191a6:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   191a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   191ac:	07db      	lsls	r3, r3, #31
{
   191ae:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   191b0:	d50f      	bpl.n	191d2 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   191b2:	f7ff ffcd 	bl	19150 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   191b6:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   191b8:	f004 041f 	and.w	r4, r4, #31
   191bc:	f7ff fdec 	bl	18d98 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   191c0:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   191c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   191c8:	2202      	movs	r2, #2
   191ca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   191ce:	4803      	ldr	r0, [pc, #12]	; (191dc <nrfx_gpiote_pin_uninit+0x3c>)
}
   191d0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   191d2:	4803      	ldr	r0, [pc, #12]	; (191e0 <nrfx_gpiote_pin_uninit+0x40>)
   191d4:	e7fc      	b.n	191d0 <nrfx_gpiote_pin_uninit+0x30>
   191d6:	bf00      	nop
   191d8:	2000081c 	.word	0x2000081c
   191dc:	0bad0000 	.word	0x0bad0000
   191e0:	0bad0004 	.word	0x0bad0004

000191e4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   191e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191e8:	4b4e      	ldr	r3, [pc, #312]	; (19324 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   191ea:	484f      	ldr	r0, [pc, #316]	; (19328 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   191ec:	494f      	ldr	r1, [pc, #316]	; (1932c <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
   191ee:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   191f0:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   191f2:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   191f4:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   191f6:	b136      	cbz	r6, 19206 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   191f8:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   191fc:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   191fe:	bf1e      	ittt	ne
   19200:	601c      	strne	r4, [r3, #0]
   19202:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   19204:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19206:	3304      	adds	r3, #4
   19208:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1920a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1920e:	d1f1      	bne.n	191f4 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19210:	4b45      	ldr	r3, [pc, #276]	; (19328 <nrfx_gpiote_irq_handler+0x144>)
   19212:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   19216:	b1bb      	cbz	r3, 19248 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   19218:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1921c:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   19220:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   19222:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   19226:	af01      	add	r7, sp, #4
   19228:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   1922c:	9c01      	ldr	r4, [sp, #4]
   1922e:	b96c      	cbnz	r4, 1924c <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19230:	4b3d      	ldr	r3, [pc, #244]	; (19328 <nrfx_gpiote_irq_handler+0x144>)
   19232:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   19236:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1923a:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   1923e:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   19240:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
   19244:	2b00      	cmp	r3, #0
   19246:	d1ee      	bne.n	19226 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   19248:	2401      	movs	r4, #1
   1924a:	e066      	b.n	1931a <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
   1924c:	fa94 f4a4 	rbit	r4, r4
   19250:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19254:	4a36      	ldr	r2, [pc, #216]	; (19330 <nrfx_gpiote_irq_handler+0x14c>)
   19256:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1925a:	08e0      	lsrs	r0, r4, #3
   1925c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   19260:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   19264:	fa08 f203 	lsl.w	r2, r8, r3
   19268:	5c3b      	ldrb	r3, [r7, r0]
   1926a:	ea23 0302 	bic.w	r3, r3, r2
   1926e:	543b      	strb	r3, [r7, r0]
   19270:	00a3      	lsls	r3, r4, #2
   19272:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
   19276:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1927a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
   1927e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19280:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   19282:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   19286:	d518      	bpl.n	192ba <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
   19288:	4659      	mov	r1, fp
   1928a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1928c:	fa5f fa82 	uxtb.w	sl, r2
   19290:	f7ff fd3a 	bl	18d08 <call_handler>
   19294:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   19298:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1929c:	459a      	cmp	sl, r3
   1929e:	d107      	bne.n	192b0 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   192a0:	2100      	movs	r1, #0
   192a2:	4620      	mov	r0, r4
   192a4:	f005 fe31 	bl	1ef0a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   192a8:	4651      	mov	r1, sl
   192aa:	4620      	mov	r0, r4
   192ac:	f005 fe2d 	bl	1ef0a <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   192b0:	fa08 f404 	lsl.w	r4, r8, r4
   192b4:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   192b8:	e7b8      	b.n	1922c <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   192ba:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   192bc:	bf0c      	ite	eq
   192be:	2103      	moveq	r1, #3
   192c0:	2102      	movne	r1, #2
   192c2:	4620      	mov	r0, r4
   192c4:	f005 fe21 	bl	1ef0a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   192c8:	f1ba 0f03 	cmp.w	sl, #3
   192cc:	d004      	beq.n	192d8 <nrfx_gpiote_irq_handler+0xf4>
   192ce:	2a02      	cmp	r2, #2
   192d0:	d107      	bne.n	192e2 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   192d2:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   192d6:	d1eb      	bne.n	192b0 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
   192d8:	4659      	mov	r1, fp
   192da:	4620      	mov	r0, r4
   192dc:	f7ff fd14 	bl	18d08 <call_handler>
   192e0:	e7e6      	b.n	192b0 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   192e2:	2a03      	cmp	r2, #3
   192e4:	d1e4      	bne.n	192b0 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   192e6:	f1ba 0f02 	cmp.w	sl, #2
   192ea:	e7f4      	b.n	192d6 <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
   192ec:	fa95 f3a5 	rbit	r3, r5
   192f0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   192f4:	fa04 f203 	lsl.w	r2, r4, r3
   192f8:	009b      	lsls	r3, r3, #2
   192fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   192fe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   19302:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19306:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1930a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1930e:	f3c0 2004 	ubfx	r0, r0, #8, #5
   19312:	f3c1 4101 	ubfx	r1, r1, #16, #2
   19316:	f7ff fcf7 	bl	18d08 <call_handler>
    while (mask)
   1931a:	2d00      	cmp	r5, #0
   1931c:	d1e6      	bne.n	192ec <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1931e:	b003      	add	sp, #12
   19320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19324:	40006100 	.word	0x40006100
   19328:	40006000 	.word	0x40006000
   1932c:	40006120 	.word	0x40006120
   19330:	2000081c 	.word	0x2000081c

00019334 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   19334:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   19336:	4801      	ldr	r0, [pc, #4]	; (1933c <nrfx_ppi_channel_alloc+0x8>)
   19338:	f7ff bbcc 	b.w	18ad4 <nrfx_flag32_alloc>
   1933c:	20000878 	.word	0x20000878

00019340 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   19340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   19344:	f890 8004 	ldrb.w	r8, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   19348:	4c44      	ldr	r4, [pc, #272]	; (1945c <nrfx_pwm_init+0x11c>)
   1934a:	250c      	movs	r5, #12
   1934c:	fb05 f508 	mul.w	r5, r5, r8
   19350:	1966      	adds	r6, r4, r5
{
   19352:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   19354:	7a37      	ldrb	r7, [r6, #8]
   19356:	2f00      	cmp	r7, #0
   19358:	d17d      	bne.n	19456 <nrfx_pwm_init+0x116>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1935a:	f891 c00c 	ldrb.w	ip, [r1, #12]
    p_cb->handler = handler;
   1935e:	5162      	str	r2, [r4, r5]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   19360:	f891 900d 	ldrb.w	r9, [r1, #13]
    p_cb->p_context = p_context;
   19364:	6073      	str	r3, [r6, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   19366:	f886 c00a 	strb.w	ip, [r6, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1936a:	f1bc 0f00 	cmp.w	ip, #0
   1936e:	d032      	beq.n	193d6 <nrfx_pwm_init+0x96>
   19370:	f1b9 0f00 	cmp.w	r9, #0
   19374:	d02f      	beq.n	193d6 <nrfx_pwm_init+0x96>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
   19376:	6800      	ldr	r0, [r0, #0]
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE void nrf_pwm_enable(NRF_PWM_Type * p_reg)
{
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   19378:	2301      	movs	r3, #1
   1937a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
   1937e:	798d      	ldrb	r5, [r1, #6]
   19380:	890b      	ldrh	r3, [r1, #8]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   19382:	794e      	ldrb	r6, [r1, #5]
   19384:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   19388:	f8c0 5504 	str.w	r5, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1938c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   19390:	894b      	ldrh	r3, [r1, #10]
   19392:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   19396:	2300      	movs	r3, #0
   19398:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   1939c:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   193a0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   193a4:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
   193a8:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   193ac:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
   193b0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   193b4:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   193b8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   193bc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   193c0:	2a00      	cmp	r2, #0
   193c2:	d143      	bne.n	1944c <nrfx_pwm_init+0x10c>
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   193c4:	230c      	movs	r3, #12
   193c6:	fb03 4408 	mla	r4, r3, r8, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   193ca:	4825      	ldr	r0, [pc, #148]	; (19460 <nrfx_pwm_init+0x120>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   193cc:	2301      	movs	r3, #1
   193ce:	7223      	strb	r3, [r4, #8]
}
   193d0:	b005      	add	sp, #20
   193d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193d6:	1e4f      	subs	r7, r1, #1
   193d8:	466b      	mov	r3, sp
   193da:	f101 0b03 	add.w	fp, r1, #3
   193de:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
        uint8_t output_pin = p_config->output_pins[i];
   193e2:	f817 6f01 	ldrb.w	r6, [r7, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   193e6:	2eff      	cmp	r6, #255	; 0xff
   193e8:	d02c      	beq.n	19444 <nrfx_pwm_init+0x104>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   193ea:	f026 0580 	bic.w	r5, r6, #128	; 0x80
   193ee:	601d      	str	r5, [r3, #0]
            if (!p_config->skip_gpio_cfg)
   193f0:	f1bc 0f00 	cmp.w	ip, #0
   193f4:	d111      	bne.n	1941a <nrfx_pwm_init+0xda>
    *p_pin = pin_number & 0x1F;
   193f6:	f006 051f 	and.w	r5, r6, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   193fa:	f04f 0a01 	mov.w	sl, #1
   193fe:	fa0a fa05 	lsl.w	sl, sl, r5
    reg->PIN_CNF[pin_number] = cnf;
   19402:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    if (value == 0)
   19406:	0636      	lsls	r6, r6, #24
    reg->PIN_CNF[pin_number] = cnf;
   19408:	f04f 0603 	mov.w	r6, #3
    p_reg->OUTCLR = clr_mask;
   1940c:	bf54      	ite	pl
   1940e:	f8ce a50c 	strpl.w	sl, [lr, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   19412:	f8ce a508 	strmi.w	sl, [lr, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   19416:	f84e 6025 	str.w	r6, [lr, r5, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   1941a:	45bb      	cmp	fp, r7
   1941c:	f103 0304 	add.w	r3, r3, #4
   19420:	d1df      	bne.n	193e2 <nrfx_pwm_init+0xa2>
    if (!p_config->skip_psel_cfg)
   19422:	f1b9 0f00 	cmp.w	r9, #0
   19426:	d1a6      	bne.n	19376 <nrfx_pwm_init+0x36>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   19428:	6803      	ldr	r3, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   1942a:	9d00      	ldr	r5, [sp, #0]
   1942c:	f8c3 5560 	str.w	r5, [r3, #1376]	; 0x560
   19430:	9d01      	ldr	r5, [sp, #4]
   19432:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
   19436:	9d02      	ldr	r5, [sp, #8]
   19438:	f8c3 5568 	str.w	r5, [r3, #1384]	; 0x568
   1943c:	9d03      	ldr	r5, [sp, #12]
   1943e:	f8c3 556c 	str.w	r5, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   19442:	e798      	b.n	19376 <nrfx_pwm_init+0x36>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   19444:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19448:	601d      	str	r5, [r3, #0]
   1944a:	e7e6      	b.n	1941a <nrfx_pwm_init+0xda>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   1944c:	f340 3007 	sbfx	r0, r0, #12, #8
   19450:	f7ec fe76 	bl	6140 <arch_irq_enable>
   19454:	e7b6      	b.n	193c4 <nrfx_pwm_init+0x84>
        return err_code;
   19456:	4803      	ldr	r0, [pc, #12]	; (19464 <nrfx_pwm_init+0x124>)
   19458:	e7ba      	b.n	193d0 <nrfx_pwm_init+0x90>
   1945a:	bf00      	nop
   1945c:	20002be4 	.word	0x20002be4
   19460:	0bad0000 	.word	0x0bad0000
   19464:	0bad0005 	.word	0x0bad0005

00019468 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   19468:	b4f0      	push	{r4, r5, r6, r7}
   1946a:	460d      	mov	r5, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1946c:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   1946e:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   19470:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
   19474:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   19476:	68ae      	ldr	r6, [r5, #8]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   19478:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
{
   1947c:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1947e:	4b18      	ldr	r3, [pc, #96]	; (194e0 <nrfx_pwm_simple_playback+0x78>)
    p_reg->SEQ[seq_id].CNT = length;
   19480:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
   19484:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   19488:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   1948c:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   1948e:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   19492:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   19496:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
   1949a:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   1949e:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   194a2:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
   194a6:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   194aa:	eb03 0252 	add.w	r2, r3, r2, lsr #1
   194ae:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   194b2:	07e2      	lsls	r2, r4, #31
   194b4:	d411      	bmi.n	194da <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   194b6:	f014 0202 	ands.w	r2, r4, #2
   194ba:	d003      	beq.n	194c4 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   194bc:	2b00      	cmp	r3, #0
   194be:	bf14      	ite	ne
   194c0:	2208      	movne	r2, #8
   194c2:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   194c4:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
   194c6:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   194ca:	bf18      	it	ne
   194cc:	230c      	movne	r3, #12
   194ce:	b2e2      	uxtb	r2, r4
   194d0:	bf08      	it	eq
   194d2:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   194d4:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
   194d6:	f005 bd26 	b.w	1ef26 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   194da:	2210      	movs	r2, #16
   194dc:	e7f2      	b.n	194c4 <nrfx_pwm_simple_playback+0x5c>
   194de:	bf00      	nop
   194e0:	20002be4 	.word	0x20002be4

000194e4 <nrfx_pwm_is_stopped>:
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   194e4:	7903      	ldrb	r3, [r0, #4]

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   194e6:	4a08      	ldr	r2, [pc, #32]	; (19508 <nrfx_pwm_is_stopped+0x24>)
   194e8:	210c      	movs	r1, #12
   194ea:	fb01 2203 	mla	r2, r1, r3, r2
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   194ee:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   194f0:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   194f2:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   194f6:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   194f8:	b919      	cbnz	r1, 19502 <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   194fa:	1e98      	subs	r0, r3, #2
   194fc:	bf18      	it	ne
   194fe:	2001      	movne	r0, #1
   19500:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19502:	2001      	movs	r0, #1
   19504:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   19506:	4770      	bx	lr
   19508:	20002be4 	.word	0x20002be4

0001950c <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   1950c:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1950e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   19512:	b087      	sub	sp, #28
   19514:	4604      	mov	r4, r0
   19516:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   19518:	b1f3      	cbz	r3, 19558 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1951a:	2300      	movs	r3, #0
   1951c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   19520:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19524:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   19528:	b9b3      	cbnz	r3, 19558 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   1952a:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1952c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19530:	2302      	movs	r3, #2
   19532:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19534:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   19536:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1953a:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   1953e:	b11b      	cbz	r3, 19548 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   19540:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   19544:	059f      	lsls	r7, r3, #22
   19546:	d402      	bmi.n	1954e <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19548:	2301      	movs	r3, #1
   1954a:	6223      	str	r3, [r4, #32]
   1954c:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   1954e:	2301      	movs	r3, #1
   19550:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   19554:	b007      	add	sp, #28
   19556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19558:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1955c:	2b00      	cmp	r3, #0
   1955e:	d044      	beq.n	195ea <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19560:	2300      	movs	r3, #0
   19562:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   19566:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   1956a:	6a2b      	ldr	r3, [r5, #32]
   1956c:	065e      	lsls	r6, r3, #25
   1956e:	d40a      	bmi.n	19586 <twim_irq_handler+0x7a>
   19570:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   19574:	b93b      	cbnz	r3, 19586 <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   19576:	4629      	mov	r1, r5
   19578:	4620      	mov	r0, r4
   1957a:	f005 fd0d 	bl	1ef98 <xfer_completeness_check>
   1957e:	f080 0001 	eor.w	r0, r0, #1
   19582:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   19586:	6a2b      	ldr	r3, [r5, #32]
   19588:	f013 0c04 	ands.w	ip, r3, #4
   1958c:	d13e      	bne.n	1960c <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
   1958e:	f105 070c 	add.w	r7, r5, #12
   19592:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   19594:	ae01      	add	r6, sp, #4
   19596:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
   19598:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   1959c:	683b      	ldr	r3, [r7, #0]
   1959e:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   195a2:	6033      	str	r3, [r6, #0]
   195a4:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   195a8:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   195ac:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   195b0:	f1be 0f00 	cmp.w	lr, #0
   195b4:	d002      	beq.n	195bc <twim_irq_handler+0xb0>
   195b6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   195ba:	b33b      	cbz	r3, 1960c <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
   195bc:	2300      	movs	r3, #0
   195be:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   195c2:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   195c4:	4b2e      	ldr	r3, [pc, #184]	; (19680 <twim_irq_handler+0x174>)
   195c6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   195ca:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   195ce:	2b00      	cmp	r3, #0
   195d0:	ea4f 3214 	mov.w	r2, r4, lsr #12
   195d4:	db1a      	blt.n	1960c <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   195d6:	f002 011f 	and.w	r1, r2, #31
   195da:	095b      	lsrs	r3, r3, #5
   195dc:	2201      	movs	r2, #1
   195de:	408a      	lsls	r2, r1
   195e0:	3360      	adds	r3, #96	; 0x60
   195e2:	4928      	ldr	r1, [pc, #160]	; (19684 <twim_irq_handler+0x178>)
   195e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   195e8:	e010      	b.n	1960c <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   195ea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   195ee:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   195f2:	7b2b      	ldrb	r3, [r5, #12]
   195f4:	bb23      	cbnz	r3, 19640 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
   195f6:	f105 070c 	add.w	r7, r5, #12
   195fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   195fc:	ae01      	add	r6, sp, #4
   195fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   19600:	683b      	ldr	r3, [r7, #0]
   19602:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   19604:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   19608:	2b00      	cmp	r3, #0
   1960a:	d0d8      	beq.n	195be <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
   1960c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   19610:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   19614:	0798      	lsls	r0, r3, #30
   19616:	d525      	bpl.n	19664 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   19618:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   1961a:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   1961e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   19622:	b90b      	cbnz	r3, 19628 <twim_irq_handler+0x11c>
        p_cb->busy = false;
   19624:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   19628:	6a2b      	ldr	r3, [r5, #32]
   1962a:	075b      	lsls	r3, r3, #29
   1962c:	d503      	bpl.n	19636 <twim_irq_handler+0x12a>
   1962e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   19632:	2b00      	cmp	r3, #0
   19634:	d08e      	beq.n	19554 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   19636:	e9d5 3100 	ldrd	r3, r1, [r5]
   1963a:	4668      	mov	r0, sp
   1963c:	4798      	blx	r3
   1963e:	e789      	b.n	19554 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   19640:	f44f 7300 	mov.w	r3, #512	; 0x200
   19644:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   19648:	f240 2302 	movw	r3, #514	; 0x202
   1964c:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   1964e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   19652:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19656:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   19658:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1965c:	2301      	movs	r3, #1
   1965e:	60a3      	str	r3, [r4, #8]
   19660:	6223      	str	r3, [r4, #32]
            return;
   19662:	e777      	b.n	19554 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   19664:	0759      	lsls	r1, r3, #29
   19666:	d501      	bpl.n	1966c <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   19668:	2302      	movs	r3, #2
   1966a:	e7d6      	b.n	1961a <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1966c:	07da      	lsls	r2, r3, #31
   1966e:	d501      	bpl.n	19674 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   19670:	2303      	movs	r3, #3
   19672:	e7d2      	b.n	1961a <twim_irq_handler+0x10e>
    else if (p_cb->error)
   19674:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   19678:	2b00      	cmp	r3, #0
   1967a:	d0ce      	beq.n	1961a <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   1967c:	2304      	movs	r3, #4
   1967e:	e7cc      	b.n	1961a <twim_irq_handler+0x10e>
   19680:	019c0202 	.word	0x019c0202
   19684:	e000e100 	.word	0xe000e100

00019688 <nrfx_twim_init>:
{
   19688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1968a:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1968c:	4d23      	ldr	r5, [pc, #140]	; (1971c <nrfx_twim_init+0x94>)
   1968e:	f04f 0c34 	mov.w	ip, #52	; 0x34
   19692:	fb0c fc06 	mul.w	ip, ip, r6
   19696:	eb05 040c 	add.w	r4, r5, ip
   1969a:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   1969e:	2f00      	cmp	r7, #0
   196a0:	d13a      	bne.n	19718 <nrfx_twim_init+0x90>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   196a2:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   196a4:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   196a6:	7b4b      	ldrb	r3, [r1, #13]
   196a8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   196ac:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   196ae:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   196b0:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   196b4:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   196b8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    p_cb->handler         = event_handler;
   196bc:	f845 200c 	str.w	r2, [r5, ip]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   196c0:	7bcc      	ldrb	r4, [r1, #15]
   196c2:	b1b3      	cbz	r3, 196f2 <nrfx_twim_init+0x6a>
   196c4:	b92c      	cbnz	r4, 196d2 <nrfx_twim_init+0x4a>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   196c6:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   196ca:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   196ce:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   196d2:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   196d4:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   196d8:	b11a      	cbz	r2, 196e2 <nrfx_twim_init+0x5a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   196da:	f340 3007 	sbfx	r0, r0, #12, #8
   196de:	f7ec fd2f 	bl	6140 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   196e2:	2334      	movs	r3, #52	; 0x34
   196e4:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   196e8:	480d      	ldr	r0, [pc, #52]	; (19720 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   196ea:	2301      	movs	r3, #1
   196ec:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   196f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   196f2:	680b      	ldr	r3, [r1, #0]
   196f4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   196f8:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   196fc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19700:	f240 6c0c 	movw	ip, #1548	; 0x60c
   19704:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   19708:	684b      	ldr	r3, [r1, #4]
   1970a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   1970e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19712:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   19716:	e7d5      	b.n	196c4 <nrfx_twim_init+0x3c>
        return err_code;
   19718:	4802      	ldr	r0, [pc, #8]	; (19724 <nrfx_twim_init+0x9c>)
   1971a:	e7e9      	b.n	196f0 <nrfx_twim_init+0x68>
   1971c:	20002bf0 	.word	0x20002bf0
   19720:	0bad0000 	.word	0x0bad0000
   19724:	0bad0005 	.word	0x0bad0005

00019728 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   19728:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1972a:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1972c:	2106      	movs	r1, #6
   1972e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   19732:	4b04      	ldr	r3, [pc, #16]	; (19744 <nrfx_twim_enable+0x1c>)
   19734:	2134      	movs	r1, #52	; 0x34
   19736:	fb01 3302 	mla	r3, r1, r2, r3
   1973a:	2202      	movs	r2, #2
   1973c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   19740:	4770      	bx	lr
   19742:	bf00      	nop
   19744:	20002bf0 	.word	0x20002bf0

00019748 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19748:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
   1974a:	4b0c      	ldr	r3, [pc, #48]	; (1977c <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1974c:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   1974e:	2034      	movs	r0, #52	; 0x34
   19750:	fb00 3301 	mla	r3, r0, r1, r3
   19754:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   19756:	480a      	ldr	r0, [pc, #40]	; (19780 <nrfx_twim_disable+0x38>)
   19758:	6099      	str	r1, [r3, #8]
   1975a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1975e:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   19762:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   19766:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1976a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1976e:	2201      	movs	r2, #1
   19770:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   19774:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   19778:	4770      	bx	lr
   1977a:	bf00      	nop
   1977c:	20002bf0 	.word	0x20002bf0
   19780:	019c0202 	.word	0x019c0202

00019784 <nrfx_twim_uninit>:
{
   19784:	b570      	push	{r4, r5, r6, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19786:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
   19788:	4d18      	ldr	r5, [pc, #96]	; (197ec <nrfx_twim_uninit+0x68>)
   1978a:	2334      	movs	r3, #52	; 0x34
   1978c:	4373      	muls	r3, r6
{
   1978e:	4604      	mov	r4, r0
    if (p_cb->handler)
   19790:	58eb      	ldr	r3, [r5, r3]
   19792:	b123      	cbz	r3, 1979e <nrfx_twim_uninit+0x1a>
   19794:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   19796:	f340 3007 	sbfx	r0, r0, #12, #8
   1979a:	f7ec fce1 	bl	6160 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   1979e:	4620      	mov	r0, r4
   197a0:	f7ff ffd2 	bl	19748 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   197a4:	2334      	movs	r3, #52	; 0x34
   197a6:	fb03 5306 	mla	r3, r3, r6, r5
   197aa:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   197ae:	b9b2      	cbnz	r2, 197de <nrfx_twim_uninit+0x5a>
   197b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   197b4:	b99b      	cbnz	r3, 197de <nrfx_twim_uninit+0x5a>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   197b6:	6820      	ldr	r0, [r4, #0]
    return p_reg->PSEL.SCL;
   197b8:	f8d0 3508 	ldr.w	r3, [r0, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   197bc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   197c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   197c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   197c8:	2102      	movs	r1, #2
   197ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSEL.SDA;
   197ce:	f8d0 350c 	ldr.w	r3, [r0, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   197d2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   197d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   197da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   197de:	2334      	movs	r3, #52	; 0x34
   197e0:	fb03 5506 	mla	r5, r3, r6, r5
   197e4:	2300      	movs	r3, #0
   197e6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   197ea:	bd70      	pop	{r4, r5, r6, pc}
   197ec:	20002bf0 	.word	0x20002bf0

000197f0 <nrfx_twim_xfer>:
{
   197f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   197f4:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 19ac8 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   197f8:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   197fc:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   197fe:	2334      	movs	r3, #52	; 0x34
   19800:	fb03 c30e 	mla	r3, r3, lr, ip
{
   19804:	4617      	mov	r7, r2
    p_cb->error = false;
   19806:	2200      	movs	r2, #0
   19808:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1980c:	684b      	ldr	r3, [r1, #4]
{
   1980e:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   19810:	b14b      	cbz	r3, 19826 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   19812:	68cb      	ldr	r3, [r1, #12]
   19814:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   19818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1981c:	d003      	beq.n	19826 <nrfx_twim_xfer+0x36>
        return err_code;
   1981e:	4eab      	ldr	r6, [pc, #684]	; (19acc <nrfx_twim_xfer+0x2dc>)
}
   19820:	4630      	mov	r0, r6
   19822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   19826:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   19828:	4ba9      	ldr	r3, [pc, #676]	; (19ad0 <nrfx_twim_xfer+0x2e0>)
   1982a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   1982e:	fb06 c60e 	mla	r6, r6, lr, ip
   19832:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   19836:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   1983a:	b123      	cbz	r3, 19846 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1983c:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   1983e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   19842:	4ea4      	ldr	r6, [pc, #656]	; (19ad4 <nrfx_twim_xfer+0x2e4>)
   19844:	e7ec      	b.n	19820 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   19846:	f017 0f14 	tst.w	r7, #20
   1984a:	bf0c      	ite	eq
   1984c:	2301      	moveq	r3, #1
   1984e:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   19850:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   19854:	46a9      	mov	r9, r5
   19856:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   1985a:	f106 080c 	add.w	r8, r6, #12
   1985e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   19862:	f8d9 3000 	ldr.w	r3, [r9]
   19866:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1986a:	f3c7 1300 	ubfx	r3, r7, #4, #1
   1986e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   19872:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
   19874:	786b      	ldrb	r3, [r5, #1]
   19876:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1987a:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   1987e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19882:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   19886:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1988a:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   1988e:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   19892:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   19896:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1989a:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1989e:	bf18      	it	ne
   198a0:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   198a2:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   198a6:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   198aa:	bf18      	it	ne
   198ac:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   198ae:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   198b2:	782a      	ldrb	r2, [r5, #0]
   198b4:	2a03      	cmp	r2, #3
   198b6:	f200 80b5 	bhi.w	19a24 <nrfx_twim_xfer+0x234>
   198ba:	e8df f002 	tbb	[pc, r2]
   198be:	a084      	.short	0xa084
   198c0:	0269      	.short	0x0269
   198c2:	692b      	ldr	r3, [r5, #16]
   198c4:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   198c8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   198cc:	d1a7      	bne.n	1981e <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   198ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   198d2:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   198d6:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   198d8:	6869      	ldr	r1, [r5, #4]
   198da:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   198de:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   198e2:	2100      	movs	r1, #0
   198e4:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   198e8:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   198ec:	2001      	movs	r0, #1
   198ee:	6220      	str	r0, [r4, #32]
   198f0:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   198f2:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   198f6:	2800      	cmp	r0, #0
   198f8:	d0fb      	beq.n	198f2 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   198fa:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   198fe:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   19902:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19904:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   19908:	2334      	movs	r3, #52	; 0x34
   1990a:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
   1990e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
   19912:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   19916:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   19918:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1991a:	4e6f      	ldr	r6, [pc, #444]	; (19ad8 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1991c:	0739      	lsls	r1, r7, #28
   1991e:	d406      	bmi.n	1992e <nrfx_twim_xfer+0x13e>
   19920:	2a03      	cmp	r2, #3
   19922:	d004      	beq.n	1992e <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19924:	2201      	movs	r2, #1
   19926:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   19928:	686b      	ldr	r3, [r5, #4]
   1992a:	b903      	cbnz	r3, 1992e <nrfx_twim_xfer+0x13e>
   1992c:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   1992e:	2334      	movs	r3, #52	; 0x34
   19930:	fb03 f30e 	mul.w	r3, r3, lr
   19934:	eb0c 0103 	add.w	r1, ip, r3
   19938:	f85c 2003 	ldr.w	r2, [ip, r3]
   1993c:	2a00      	cmp	r2, #0
   1993e:	d174      	bne.n	19a2a <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   19940:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19942:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   19946:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1994a:	2800      	cmp	r0, #0
   1994c:	f040 8088 	bne.w	19a60 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   19950:	3b00      	subs	r3, #0
   19952:	bf18      	it	ne
   19954:	2301      	movne	r3, #1
   19956:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1995a:	2800      	cmp	r0, #0
   1995c:	f000 8086 	beq.w	19a6c <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19960:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19964:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19968:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   1996c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   19970:	b115      	cbz	r5, 19978 <nrfx_twim_xfer+0x188>
   19972:	f410 7f00 	tst.w	r0, #512	; 0x200
   19976:	d104      	bne.n	19982 <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19978:	6221      	str	r1, [r4, #32]
   1997a:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1997c:	2d00      	cmp	r5, #0
   1997e:	d0e0      	beq.n	19942 <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   19980:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   19982:	05c0      	lsls	r0, r0, #23
   19984:	d572      	bpl.n	19a6c <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19986:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   1998a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   1998e:	e7d8      	b.n	19942 <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   19990:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19992:	68e9      	ldr	r1, [r5, #12]
   19994:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19998:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1999c:	692b      	ldr	r3, [r5, #16]
   1999e:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   199a2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   199a6:	f47f af3a 	bne.w	1981e <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   199aa:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   199ac:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   199b0:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   199b4:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   199b8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   199bc:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   199be:	fb03 c30e 	mla	r3, r3, lr, ip
   199c2:	2102      	movs	r1, #2
   199c4:	e012      	b.n	199ec <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   199c6:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   199c8:	68e9      	ldr	r1, [r5, #12]
   199ca:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   199ce:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   199d2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   199d6:	f04f 0334 	mov.w	r3, #52	; 0x34
   199da:	d00b      	beq.n	199f4 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   199dc:	f44f 7180 	mov.w	r1, #256	; 0x100
   199e0:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   199e4:	fb03 c30e 	mla	r3, r3, lr, ip
   199e8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   199ec:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   199ee:	2301      	movs	r3, #1
   199f0:	6223      	str	r3, [r4, #32]
   199f2:	e791      	b.n	19918 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   199f4:	f44f 7100 	mov.w	r1, #512	; 0x200
   199f8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   199fc:	e7df      	b.n	199be <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   199fe:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19a00:	68e9      	ldr	r1, [r5, #12]
   19a02:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19a06:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   19a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19a0e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19a12:	2334      	movs	r3, #52	; 0x34
   19a14:	fb03 c30e 	mla	r3, r3, lr, ip
   19a18:	2102      	movs	r1, #2
   19a1a:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19a1c:	2301      	movs	r3, #1
   19a1e:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   19a20:	2300      	movs	r3, #0
   19a22:	e77a      	b.n	1991a <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   19a24:	4e2d      	ldr	r6, [pc, #180]	; (19adc <nrfx_twim_xfer+0x2ec>)
   19a26:	2308      	movs	r3, #8
   19a28:	e778      	b.n	1991c <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   19a2a:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
   19a2c:	bf44      	itt	mi
   19a2e:	2300      	movmi	r3, #0
   19a30:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   19a32:	067b      	lsls	r3, r7, #25
   19a34:	d406      	bmi.n	19a44 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   19a36:	2334      	movs	r3, #52	; 0x34
   19a38:	fb03 c30e 	mla	r3, r3, lr, ip
   19a3c:	689a      	ldr	r2, [r3, #8]
   19a3e:	f042 0202 	orr.w	r2, r2, #2
   19a42:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   19a44:	2334      	movs	r3, #52	; 0x34
   19a46:	fb03 cc0e 	mla	ip, r3, lr, ip
   19a4a:	f8dc 3008 	ldr.w	r3, [ip, #8]
   19a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   19a52:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19a56:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
   19a5a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   19a5e:	e6df      	b.n	19820 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19a60:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19a64:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   19a68:	2301      	movs	r3, #1
   19a6a:	e774      	b.n	19956 <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   19a6c:	2b00      	cmp	r3, #0
   19a6e:	f43f af68 	beq.w	19942 <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   19a72:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   19a74:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   19a78:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   19a7c:	fb01 c20e 	mla	r2, r1, lr, ip
   19a80:	2000      	movs	r0, #0
   19a82:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   19a86:	b18b      	cbz	r3, 19aac <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   19a88:	4a15      	ldr	r2, [pc, #84]	; (19ae0 <nrfx_twim_xfer+0x2f0>)
   19a8a:	4e16      	ldr	r6, [pc, #88]	; (19ae4 <nrfx_twim_xfer+0x2f4>)
   19a8c:	f013 0f01 	tst.w	r3, #1
   19a90:	bf18      	it	ne
   19a92:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   19a94:	f013 0f02 	tst.w	r3, #2
   19a98:	f102 0201 	add.w	r2, r2, #1
   19a9c:	bf18      	it	ne
   19a9e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   19aa0:	f013 0f04 	tst.w	r3, #4
   19aa4:	4b10      	ldr	r3, [pc, #64]	; (19ae8 <nrfx_twim_xfer+0x2f8>)
   19aa6:	bf18      	it	ne
   19aa8:	461e      	movne	r6, r3
   19aaa:	e6b9      	b.n	19820 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   19aac:	067b      	lsls	r3, r7, #25
   19aae:	f53f aeb7 	bmi.w	19820 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   19ab2:	fb0e c101 	mla	r1, lr, r1, ip
   19ab6:	4620      	mov	r0, r4
   19ab8:	f005 fa6e 	bl	1ef98 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   19abc:	4b09      	ldr	r3, [pc, #36]	; (19ae4 <nrfx_twim_xfer+0x2f4>)
   19abe:	2800      	cmp	r0, #0
   19ac0:	bf08      	it	eq
   19ac2:	461e      	moveq	r6, r3
   19ac4:	e6ac      	b.n	19820 <nrfx_twim_xfer+0x30>
   19ac6:	bf00      	nop
   19ac8:	20002bf0 	.word	0x20002bf0
   19acc:	0bad000a 	.word	0x0bad000a
   19ad0:	019c0202 	.word	0x019c0202
   19ad4:	0bad000b 	.word	0x0bad000b
   19ad8:	0bad0000 	.word	0x0bad0000
   19adc:	0bad0004 	.word	0x0bad0004
   19ae0:	0bae0000 	.word	0x0bae0000
   19ae4:	0bad0001 	.word	0x0bad0001
   19ae8:	0bae0002 	.word	0x0bae0002

00019aec <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   19aec:	4901      	ldr	r1, [pc, #4]	; (19af4 <nrfx_twim_0_irq_handler+0x8>)
   19aee:	4802      	ldr	r0, [pc, #8]	; (19af8 <nrfx_twim_0_irq_handler+0xc>)
   19af0:	f7ff bd0c 	b.w	1950c <twim_irq_handler>
   19af4:	20002bf0 	.word	0x20002bf0
   19af8:	40003000 	.word	0x40003000

00019afc <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   19afc:	4902      	ldr	r1, [pc, #8]	; (19b08 <nrfx_twim_1_irq_handler+0xc>)
   19afe:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   19b02:	f7ff bd03 	b.w	1950c <twim_irq_handler>
   19b06:	bf00      	nop
   19b08:	20002c24 	.word	0x20002c24

00019b0c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   19b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   19b10:	f000 001f 	and.w	r0, r0, #31
   19b14:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19b18:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
   19b1a:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19b1e:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
   19b22:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   19b26:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   19b2a:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19b2e:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
   19b30:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
   19b34:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   19b38:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
   19b3c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   19b40:	2004      	movs	r0, #4
   19b42:	f005 f9d6 	bl	1eef2 <nrfx_busy_wait>
   19b46:	2709      	movs	r7, #9
    return p_reg->IN;
   19b48:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   19b4c:	421c      	tst	r4, r3
   19b4e:	d10d      	bne.n	19b6c <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   19b50:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   19b52:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
   19b56:	f005 f9cc 	bl	1eef2 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   19b5a:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
   19b5c:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   19b60:	2004      	movs	r0, #4
   19b62:	f005 f9c6 	bl	1eef2 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   19b66:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   19b6a:	d1ed      	bne.n	19b48 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
   19b6c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   19b70:	2004      	movs	r0, #4
   19b72:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
   19b76:	f005 f9bc 	bl	1eef2 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   19b7a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   19b7e:	2004      	movs	r0, #4
   19b80:	f005 f9b7 	bl	1eef2 <nrfx_busy_wait>
    return p_reg->IN;
   19b84:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
   19b88:	4803      	ldr	r0, [pc, #12]	; (19b98 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19b8a:	fa21 f606 	lsr.w	r6, r1, r6
   19b8e:	f006 0601 	and.w	r6, r6, #1
   19b92:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   19b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19b98:	0bad0001 	.word	0x0bad0001

00019b9c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   19b9c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   19b9e:	4c14      	ldr	r4, [pc, #80]	; (19bf0 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   19ba0:	4a14      	ldr	r2, [pc, #80]	; (19bf4 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   19ba2:	4915      	ldr	r1, [pc, #84]	; (19bf8 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   19ba4:	2303      	movs	r3, #3
   19ba6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   19ba8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   19baa:	4b14      	ldr	r3, [pc, #80]	; (19bfc <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   19bac:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   19bae:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   19bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   19bb4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   19bb6:	2300      	movs	r3, #0
   19bb8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   19bba:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   19bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   19bbe:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   19bc0:	4a0f      	ldr	r2, [pc, #60]	; (19c00 <_DoInit+0x64>)
   19bc2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   19bc4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   19bc6:	2210      	movs	r2, #16
   19bc8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   19bca:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   19bcc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   19bce:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   19bd0:	f002 f874 	bl	1bcbc <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   19bd4:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   19bd8:	490a      	ldr	r1, [pc, #40]	; (19c04 <_DoInit+0x68>)
   19bda:	4620      	mov	r0, r4
   19bdc:	f002 f86e 	bl	1bcbc <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   19be0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   19be4:	2320      	movs	r3, #32
   19be6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   19be8:	f3bf 8f5f 	dmb	sy
}
   19bec:	bd10      	pop	{r4, pc}
   19bee:	bf00      	nop
   19bf0:	20002c58 	.word	0x20002c58
   19bf4:	00021aef 	.word	0x00021aef
   19bf8:	00021af8 	.word	0x00021af8
   19bfc:	20002df3 	.word	0x20002df3
   19c00:	20002de3 	.word	0x20002de3
   19c04:	00021afc 	.word	0x00021afc

00019c08 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   19c08:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   19c0a:	4b16      	ldr	r3, [pc, #88]	; (19c64 <SEGGER_RTT_WriteNoLock+0x5c>)
   19c0c:	2418      	movs	r4, #24
   19c0e:	fb00 4504 	mla	r5, r0, r4, r4
   19c12:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   19c14:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   19c18:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   19c1a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   19c1c:	2c01      	cmp	r4, #1
   19c1e:	d00e      	beq.n	19c3e <SEGGER_RTT_WriteNoLock+0x36>
   19c20:	2c02      	cmp	r4, #2
   19c22:	d018      	beq.n	19c56 <SEGGER_RTT_WriteNoLock+0x4e>
   19c24:	b9e4      	cbnz	r4, 19c60 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   19c26:	4628      	mov	r0, r5
   19c28:	f005 f9e6 	bl	1eff8 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   19c2c:	4286      	cmp	r6, r0
   19c2e:	d804      	bhi.n	19c3a <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   19c30:	4632      	mov	r2, r6
   19c32:	4628      	mov	r0, r5
   19c34:	f005 f9e9 	bl	1f00a <_WriteNoCheck>
   19c38:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   19c3a:	4620      	mov	r0, r4
   19c3c:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   19c3e:	4628      	mov	r0, r5
   19c40:	f005 f9da 	bl	1eff8 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   19c44:	4286      	cmp	r6, r0
   19c46:	4634      	mov	r4, r6
   19c48:	bf28      	it	cs
   19c4a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   19c4c:	4622      	mov	r2, r4
   19c4e:	4628      	mov	r0, r5
   19c50:	f005 f9db 	bl	1f00a <_WriteNoCheck>
    break;
   19c54:	e7f1      	b.n	19c3a <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   19c56:	4628      	mov	r0, r5
}
   19c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   19c5c:	f005 b9f3 	b.w	1f046 <_WriteBlocking>
  switch (pRing->Flags) {
   19c60:	2400      	movs	r4, #0
  return Status;
   19c62:	e7ea      	b.n	19c3a <SEGGER_RTT_WriteNoLock+0x32>
   19c64:	20002c58 	.word	0x20002c58

00019c68 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19c68:	4b0e      	ldr	r3, [pc, #56]	; (19ca4 <z_sys_init_run_level+0x3c>)
{
   19c6a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19c6c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19c70:	3001      	adds	r0, #1
   19c72:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   19c76:	42a6      	cmp	r6, r4
   19c78:	d800      	bhi.n	19c7c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   19c7a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   19c7c:	e9d4 3500 	ldrd	r3, r5, [r4]
   19c80:	4628      	mov	r0, r5
   19c82:	4798      	blx	r3
		if (dev != NULL) {
   19c84:	b165      	cbz	r5, 19ca0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   19c86:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   19c88:	b130      	cbz	r0, 19c98 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   19c8a:	2800      	cmp	r0, #0
   19c8c:	bfb8      	it	lt
   19c8e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   19c90:	28ff      	cmp	r0, #255	; 0xff
   19c92:	bfa8      	it	ge
   19c94:	20ff      	movge	r0, #255	; 0xff
   19c96:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   19c98:	785a      	ldrb	r2, [r3, #1]
   19c9a:	f042 0201 	orr.w	r2, r2, #1
   19c9e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19ca0:	3408      	adds	r4, #8
   19ca2:	e7e8      	b.n	19c76 <z_sys_init_run_level+0xe>
   19ca4:	00021364 	.word	0x00021364

00019ca8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   19ca8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   19caa:	4605      	mov	r5, r0
   19cac:	b910      	cbnz	r0, 19cb4 <z_impl_device_get_binding+0xc>
		return NULL;
   19cae:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   19cb0:	4620      	mov	r0, r4
   19cb2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   19cb4:	7803      	ldrb	r3, [r0, #0]
   19cb6:	2b00      	cmp	r3, #0
   19cb8:	d0f9      	beq.n	19cae <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   19cba:	4c0e      	ldr	r4, [pc, #56]	; (19cf4 <z_impl_device_get_binding+0x4c>)
   19cbc:	4e0e      	ldr	r6, [pc, #56]	; (19cf8 <z_impl_device_get_binding+0x50>)
   19cbe:	42b4      	cmp	r4, r6
   19cc0:	d108      	bne.n	19cd4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   19cc2:	4c0c      	ldr	r4, [pc, #48]	; (19cf4 <z_impl_device_get_binding+0x4c>)
   19cc4:	42b4      	cmp	r4, r6
   19cc6:	d0f2      	beq.n	19cae <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19cc8:	4620      	mov	r0, r4
   19cca:	f005 f9f0 	bl	1f0ae <z_device_is_ready>
   19cce:	b950      	cbnz	r0, 19ce6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   19cd0:	3418      	adds	r4, #24
   19cd2:	e7f7      	b.n	19cc4 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   19cd4:	4620      	mov	r0, r4
   19cd6:	f005 f9ea 	bl	1f0ae <z_device_is_ready>
   19cda:	b110      	cbz	r0, 19ce2 <z_impl_device_get_binding+0x3a>
   19cdc:	6823      	ldr	r3, [r4, #0]
   19cde:	42ab      	cmp	r3, r5
   19ce0:	d0e6      	beq.n	19cb0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   19ce2:	3418      	adds	r4, #24
   19ce4:	e7eb      	b.n	19cbe <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19ce6:	6821      	ldr	r1, [r4, #0]
   19ce8:	4628      	mov	r0, r5
   19cea:	f002 f801 	bl	1bcf0 <strcmp>
   19cee:	2800      	cmp	r0, #0
   19cf0:	d1ee      	bne.n	19cd0 <z_impl_device_get_binding+0x28>
   19cf2:	e7dd      	b.n	19cb0 <z_impl_device_get_binding+0x8>
   19cf4:	0001fc10 	.word	0x0001fc10
   19cf8:	0001fdd8 	.word	0x0001fdd8

00019cfc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   19cfc:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   19cfe:	2300      	movs	r3, #0
{
   19d00:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   19d02:	2201      	movs	r2, #1
   19d04:	e9cd 2304 	strd	r2, r3, [sp, #16]
   19d08:	220f      	movs	r2, #15
   19d0a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   19d0e:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   19d10:	4c0c      	ldr	r4, [pc, #48]	; (19d44 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   19d12:	4b0d      	ldr	r3, [pc, #52]	; (19d48 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   19d14:	490d      	ldr	r1, [pc, #52]	; (19d4c <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   19d16:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   19d18:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   19d1c:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   19d20:	f44f 75b0 	mov.w	r5, #352	; 0x160
   19d24:	9300      	str	r3, [sp, #0]
   19d26:	fb05 1100 	mla	r1, r5, r0, r1
   19d2a:	4b09      	ldr	r3, [pc, #36]	; (19d50 <init_idle_thread+0x54>)
   19d2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   19d30:	4620      	mov	r0, r4
   19d32:	f000 f909 	bl	19f48 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19d36:	7b63      	ldrb	r3, [r4, #13]
   19d38:	f023 0304 	bic.w	r3, r3, #4
   19d3c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   19d3e:	b007      	add	sp, #28
   19d40:	bd30      	pop	{r4, r5, pc}
   19d42:	bf00      	nop
   19d44:	200015c8 	.word	0x200015c8
   19d48:	20002d00 	.word	0x20002d00
   19d4c:	20004ca0 	.word	0x20004ca0
   19d50:	0001a0bd 	.word	0x0001a0bd

00019d54 <bg_thread_main>:
{
   19d54:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   19d56:	4b0a      	ldr	r3, [pc, #40]	; (19d80 <bg_thread_main+0x2c>)
   19d58:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19d5a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   19d5c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19d5e:	f7ff ff83 	bl	19c68 <z_sys_init_run_level>
	boot_banner();
   19d62:	f001 f921 	bl	1afa8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   19d66:	2003      	movs	r0, #3
   19d68:	f7ff ff7e 	bl	19c68 <z_sys_init_run_level>
	z_init_static_threads();
   19d6c:	f000 f94a 	bl	1a004 <z_init_static_threads>
	main();
   19d70:	f005 fed9 	bl	1fb26 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   19d74:	4a03      	ldr	r2, [pc, #12]	; (19d84 <bg_thread_main+0x30>)
   19d76:	7b13      	ldrb	r3, [r2, #12]
   19d78:	f023 0301 	bic.w	r3, r3, #1
   19d7c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   19d7e:	bd08      	pop	{r3, pc}
   19d80:	200031f3 	.word	0x200031f3
   19d84:	20001648 	.word	0x20001648

00019d88 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   19d88:	4802      	ldr	r0, [pc, #8]	; (19d94 <z_bss_zero+0xc>)
   19d8a:	4a03      	ldr	r2, [pc, #12]	; (19d98 <z_bss_zero+0x10>)
   19d8c:	2100      	movs	r1, #0
   19d8e:	1a12      	subs	r2, r2, r0
   19d90:	f001 bfd6 	b.w	1bd40 <memset>
   19d94:	20000b90 	.word	0x20000b90
   19d98:	200031f4 	.word	0x200031f4

00019d9c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   19d9c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   19d9e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 19e64 <z_cstart+0xc8>
   19da2:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19da4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   19da8:	4d2f      	ldr	r5, [pc, #188]	; (19e68 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   19daa:	4e30      	ldr	r6, [pc, #192]	; (19e6c <z_cstart+0xd0>)
   19dac:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19dae:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 19e70 <z_cstart+0xd4>
   19db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19db6:	2400      	movs	r4, #0
   19db8:	616b      	str	r3, [r5, #20]
   19dba:	23e0      	movs	r3, #224	; 0xe0
   19dbc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19dc0:	77ec      	strb	r4, [r5, #31]
   19dc2:	762c      	strb	r4, [r5, #24]
   19dc4:	766c      	strb	r4, [r5, #25]
   19dc6:	76ac      	strb	r4, [r5, #26]
   19dc8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19dcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19dce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19dd2:	626b      	str	r3, [r5, #36]	; 0x24
   19dd4:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19dd8:	f7ec fbe4 	bl	65a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   19ddc:	f7ec f992 	bl	6104 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19de4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19de6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   19de8:	f7ec fcba 	bl	6760 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   19dec:	f7ec fc22 	bl	6634 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   19df0:	f240 1301 	movw	r3, #257	; 0x101
   19df4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   19df8:	ab06      	add	r3, sp, #24
   19dfa:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   19dfc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   19e00:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   19e02:	f005 f953 	bl	1f0ac <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19e06:	4620      	mov	r0, r4
   19e08:	f7ff ff2e 	bl	19c68 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19e0c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   19e0e:	4d19      	ldr	r5, [pc, #100]	; (19e74 <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19e10:	f7ff ff2a 	bl	19c68 <z_sys_init_run_level>
	z_sched_init();
   19e14:	f000 fdaa 	bl	1a96c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19e18:	4b17      	ldr	r3, [pc, #92]	; (19e78 <z_cstart+0xdc>)
   19e1a:	9305      	str	r3, [sp, #20]
   19e1c:	2301      	movs	r3, #1
   19e1e:	4917      	ldr	r1, [pc, #92]	; (19e7c <z_cstart+0xe0>)
   19e20:	9400      	str	r4, [sp, #0]
   19e22:	e9cd 4303 	strd	r4, r3, [sp, #12]
   19e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19e2a:	464b      	mov	r3, r9
   19e2c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19e30:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   19e32:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19e34:	f000 f888 	bl	19f48 <z_setup_new_thread>
   19e38:	7b6a      	ldrb	r2, [r5, #13]
   19e3a:	4607      	mov	r7, r0
   19e3c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   19e40:	4628      	mov	r0, r5
   19e42:	736a      	strb	r2, [r5, #13]
   19e44:	f005 fc06 	bl	1f654 <z_ready_thread>
		init_idle_thread(i);
   19e48:	4620      	mov	r0, r4
   19e4a:	f7ff ff57 	bl	19cfc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   19e4e:	4b0c      	ldr	r3, [pc, #48]	; (19e80 <z_cstart+0xe4>)
   19e50:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19e52:	464a      	mov	r2, r9
   19e54:	4639      	mov	r1, r7
   19e56:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   19e58:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   19e5a:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   19e5e:	f7ec fa75 	bl	634c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19e62:	bf00      	nop
   19e64:	20005620 	.word	0x20005620
   19e68:	e000ed00 	.word	0xe000ed00
   19e6c:	20002d00 	.word	0x20002d00
   19e70:	00019d55 	.word	0x00019d55
   19e74:	20001648 	.word	0x20001648
   19e78:	00021b03 	.word	0x00021b03
   19e7c:	20004880 	.word	0x20004880
   19e80:	200015c8 	.word	0x200015c8

00019e84 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   19e84:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   19e86:	4c06      	ldr	r4, [pc, #24]	; (19ea0 <statics_init+0x1c>)
   19e88:	4d06      	ldr	r5, [pc, #24]	; (19ea4 <statics_init+0x20>)
   19e8a:	42ac      	cmp	r4, r5
   19e8c:	d301      	bcc.n	19e92 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   19e8e:	2000      	movs	r0, #0
   19e90:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   19e92:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   19e96:	4620      	mov	r0, r4
   19e98:	f005 f93a 	bl	1f110 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   19e9c:	3414      	adds	r4, #20
   19e9e:	e7f4      	b.n	19e8a <statics_init+0x6>
   19ea0:	20000a10 	.word	0x20000a10
   19ea4:	20000a10 	.word	0x20000a10

00019ea8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   19ea8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19eaa:	4b0e      	ldr	r3, [pc, #56]	; (19ee4 <init_mem_slab_module+0x3c>)
   19eac:	4c0e      	ldr	r4, [pc, #56]	; (19ee8 <init_mem_slab_module+0x40>)
   19eae:	42a3      	cmp	r3, r4
   19eb0:	d301      	bcc.n	19eb6 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   19eb2:	2000      	movs	r0, #0
	return rc;
}
   19eb4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   19eb6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   19eba:	ea41 0200 	orr.w	r2, r1, r0
   19ebe:	f012 0203 	ands.w	r2, r2, #3
   19ec2:	d10b      	bne.n	19edc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   19ec4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   19ec6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19ec8:	42aa      	cmp	r2, r5
   19eca:	d101      	bne.n	19ed0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19ecc:	331c      	adds	r3, #28
   19ece:	e7ee      	b.n	19eae <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   19ed0:	695e      	ldr	r6, [r3, #20]
   19ed2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   19ed4:	3201      	adds	r2, #1
		slab->free_list = p;
   19ed6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   19ed8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   19eda:	e7f5      	b.n	19ec8 <init_mem_slab_module+0x20>
	return rc;
   19edc:	f06f 0015 	mvn.w	r0, #21
   19ee0:	e7e8      	b.n	19eb4 <init_mem_slab_module+0xc>
   19ee2:	bf00      	nop
   19ee4:	200009bc 	.word	0x200009bc
   19ee8:	20000a10 	.word	0x20000a10

00019eec <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   19eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19eee:	460c      	mov	r4, r1
	__asm__ volatile(
   19ef0:	f04f 0520 	mov.w	r5, #32
   19ef4:	f3ef 8111 	mrs	r1, BASEPRI
   19ef8:	f385 8812 	msr	BASEPRI_MAX, r5
   19efc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   19f00:	6945      	ldr	r5, [r0, #20]
   19f02:	b15d      	cbz	r5, 19f1c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   19f04:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   19f06:	682b      	ldr	r3, [r5, #0]
   19f08:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   19f0a:	6983      	ldr	r3, [r0, #24]
   19f0c:	3301      	adds	r3, #1
   19f0e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   19f10:	2000      	movs	r0, #0
	__asm__ volatile(
   19f12:	f381 8811 	msr	BASEPRI, r1
   19f16:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   19f1a:	e011      	b.n	19f40 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   19f1c:	ea52 0c03 	orrs.w	ip, r2, r3
   19f20:	d103      	bne.n	19f2a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   19f22:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   19f24:	f06f 000b 	mvn.w	r0, #11
   19f28:	e7f3      	b.n	19f12 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   19f2a:	e9cd 2300 	strd	r2, r3, [sp]
   19f2e:	4602      	mov	r2, r0
   19f30:	3008      	adds	r0, #8
   19f32:	f000 fcb9 	bl	1a8a8 <z_pend_curr>
		if (result == 0) {
   19f36:	b918      	cbnz	r0, 19f40 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   19f38:	4b02      	ldr	r3, [pc, #8]	; (19f44 <k_mem_slab_alloc+0x58>)
   19f3a:	689b      	ldr	r3, [r3, #8]
   19f3c:	695b      	ldr	r3, [r3, #20]
   19f3e:	6023      	str	r3, [r4, #0]
}
   19f40:	b003      	add	sp, #12
   19f42:	bd30      	pop	{r4, r5, pc}
   19f44:	20002d00 	.word	0x20002d00

00019f48 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   19f48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   19f4c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   19f4e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   19f50:	2604      	movs	r6, #4
   19f52:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   19f54:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   19f56:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   19f58:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   19f5c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19f5e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   19f60:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   19f66:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19f68:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   19f6c:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   19f6e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   19f72:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   19f76:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   19f78:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   19f7a:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19f7c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f80:	9202      	str	r2, [sp, #8]
   19f82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19f84:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   19f86:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19f8a:	9200      	str	r2, [sp, #0]
   19f8c:	4642      	mov	r2, r8
{
   19f8e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19f90:	f7ec f9aa 	bl	62e8 <arch_new_thread>
	if (!_current) {
   19f94:	4b04      	ldr	r3, [pc, #16]	; (19fa8 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   19f96:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   19f98:	689b      	ldr	r3, [r3, #8]
   19f9a:	b103      	cbz	r3, 19f9e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   19f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   19f9e:	6763      	str	r3, [r4, #116]	; 0x74
}
   19fa0:	4640      	mov	r0, r8
   19fa2:	b004      	add	sp, #16
   19fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19fa8:	20002d00 	.word	0x20002d00

00019fac <z_impl_k_thread_create>:
{
   19fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   19fae:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19fb0:	2700      	movs	r7, #0
   19fb2:	9705      	str	r7, [sp, #20]
   19fb4:	9f10      	ldr	r7, [sp, #64]	; 0x40
   19fb6:	9704      	str	r7, [sp, #16]
   19fb8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   19fba:	9703      	str	r7, [sp, #12]
   19fbc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   19fbe:	9702      	str	r7, [sp, #8]
{
   19fc0:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19fc4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   19fc6:	9701      	str	r7, [sp, #4]
   19fc8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   19fca:	9700      	str	r7, [sp, #0]
{
   19fcc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19fce:	f7ff ffbb 	bl	19f48 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   19fd2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   19fd6:	bf08      	it	eq
   19fd8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   19fdc:	d005      	beq.n	19fea <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19fde:	ea55 0306 	orrs.w	r3, r5, r6
   19fe2:	d105      	bne.n	19ff0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   19fe4:	4620      	mov	r0, r4
   19fe6:	f000 fc03 	bl	1a7f0 <z_sched_start>
}
   19fea:	4620      	mov	r0, r4
   19fec:	b007      	add	sp, #28
   19fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   19ff0:	4903      	ldr	r1, [pc, #12]	; (1a000 <z_impl_k_thread_create+0x54>)
   19ff2:	4632      	mov	r2, r6
   19ff4:	462b      	mov	r3, r5
   19ff6:	f104 0018 	add.w	r0, r4, #24
   19ffa:	f000 fe43 	bl	1ac84 <z_add_timeout>
   19ffe:	e7f4      	b.n	19fea <z_impl_k_thread_create+0x3e>
   1a000:	0001f675 	.word	0x0001f675

0001a004 <z_init_static_threads>:
{
   1a004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a008:	4c29      	ldr	r4, [pc, #164]	; (1a0b0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1a00a:	4d2a      	ldr	r5, [pc, #168]	; (1a0b4 <z_init_static_threads+0xb0>)
{
   1a00c:	b087      	sub	sp, #28
   1a00e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1a010:	42ae      	cmp	r6, r5
   1a012:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1a016:	d30f      	bcc.n	1a038 <z_init_static_threads+0x34>
	k_sched_lock();
   1a018:	f000 fb06 	bl	1a628 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a01c:	4c24      	ldr	r4, [pc, #144]	; (1a0b0 <z_init_static_threads+0xac>)
   1a01e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1a0b8 <z_init_static_threads+0xb4>
   1a022:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1a026:	f240 37e7 	movw	r7, #999	; 0x3e7
   1a02a:	42ac      	cmp	r4, r5
   1a02c:	d320      	bcc.n	1a070 <z_init_static_threads+0x6c>
}
   1a02e:	b007      	add	sp, #28
   1a030:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1a034:	f000 bc7e 	b.w	1a934 <k_sched_unlock>
		z_setup_new_thread(
   1a038:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a03c:	9305      	str	r3, [sp, #20]
   1a03e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a042:	9304      	str	r3, [sp, #16]
   1a044:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1a048:	9303      	str	r3, [sp, #12]
   1a04a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1a04e:	9302      	str	r3, [sp, #8]
   1a050:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1a054:	9301      	str	r3, [sp, #4]
   1a056:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1a05a:	9300      	str	r3, [sp, #0]
   1a05c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1a060:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1a064:	f7ff ff70 	bl	19f48 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1a068:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1a06c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1a06e:	e7ce      	b.n	1a00e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1a070:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a072:	1c5a      	adds	r2, r3, #1
   1a074:	d00d      	beq.n	1a092 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1a076:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a07a:	2100      	movs	r1, #0
   1a07c:	4638      	mov	r0, r7
   1a07e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a082:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1a086:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a08a:	d104      	bne.n	1a096 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1a08c:	4640      	mov	r0, r8
   1a08e:	f000 fbaf 	bl	1a7f0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a092:	3430      	adds	r4, #48	; 0x30
   1a094:	e7c9      	b.n	1a02a <z_init_static_threads+0x26>
   1a096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a09a:	2300      	movs	r3, #0
   1a09c:	f7e6 fd36 	bl	b0c <__aeabi_uldivmod>
   1a0a0:	4602      	mov	r2, r0
   1a0a2:	460b      	mov	r3, r1
   1a0a4:	f108 0018 	add.w	r0, r8, #24
   1a0a8:	4649      	mov	r1, r9
   1a0aa:	f000 fdeb 	bl	1ac84 <z_add_timeout>
   1a0ae:	e7f0      	b.n	1a092 <z_init_static_threads+0x8e>
   1a0b0:	2000092c 	.word	0x2000092c
   1a0b4:	200009bc 	.word	0x200009bc
   1a0b8:	0001f675 	.word	0x0001f675

0001a0bc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1a0bc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1a0be:	4c0b      	ldr	r4, [pc, #44]	; (1a0ec <idle+0x30>)
	return !z_sys_post_kernel;
   1a0c0:	4d0b      	ldr	r5, [pc, #44]	; (1a0f0 <idle+0x34>)
	__asm__ volatile(
   1a0c2:	f04f 0220 	mov.w	r2, #32
   1a0c6:	f3ef 8311 	mrs	r3, BASEPRI
   1a0ca:	f382 8812 	msr	BASEPRI_MAX, r2
   1a0ce:	f3bf 8f6f 	isb	sy
   1a0d2:	f005 fb76 	bl	1f7c2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1a0d6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1a0d8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1a0da:	b913      	cbnz	r3, 1a0e2 <idle+0x26>
	arch_cpu_idle();
   1a0dc:	f7ec f818 	bl	6110 <arch_cpu_idle>
}
   1a0e0:	e7ef      	b.n	1a0c2 <idle+0x6>
   1a0e2:	f7eb fed9 	bl	5e98 <pm_system_suspend>
   1a0e6:	2800      	cmp	r0, #0
   1a0e8:	d1eb      	bne.n	1a0c2 <idle+0x6>
   1a0ea:	e7f7      	b.n	1a0dc <idle+0x20>
   1a0ec:	20002d00 	.word	0x20002d00
   1a0f0:	200031f3 	.word	0x200031f3

0001a0f4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a0f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a0f6:	4611      	mov	r1, r2
   1a0f8:	f04f 0220 	mov.w	r2, #32
   1a0fc:	f3ef 8511 	mrs	r5, BASEPRI
   1a100:	f382 8812 	msr	BASEPRI_MAX, r2
   1a104:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1a108:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a10a:	b19c      	cbz	r4, 1a134 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a10c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a10e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a110:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a114:	4294      	cmp	r4, r2
	list->head = node;
   1a116:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1a118:	bf08      	it	eq
   1a11a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a11c:	2101      	movs	r1, #1
   1a11e:	4620      	mov	r0, r4
   1a120:	f005 f8fb 	bl	1f31a <z_queue_node_peek>
   1a124:	4604      	mov	r4, r0
	__asm__ volatile(
   1a126:	f385 8811 	msr	BASEPRI, r5
   1a12a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a12e:	4620      	mov	r0, r4
   1a130:	b003      	add	sp, #12
   1a132:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a134:	ea51 0203 	orrs.w	r2, r1, r3
   1a138:	d0f5      	beq.n	1a126 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a13a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a13e:	e9cd 1300 	strd	r1, r3, [sp]
   1a142:	4610      	mov	r0, r2
   1a144:	4629      	mov	r1, r5
   1a146:	f000 fbaf 	bl	1a8a8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a14a:	2800      	cmp	r0, #0
   1a14c:	d1ef      	bne.n	1a12e <z_impl_k_queue_get+0x3a>
   1a14e:	4b02      	ldr	r3, [pc, #8]	; (1a158 <z_impl_k_queue_get+0x64>)
   1a150:	689b      	ldr	r3, [r3, #8]
   1a152:	695c      	ldr	r4, [r3, #20]
   1a154:	e7eb      	b.n	1a12e <z_impl_k_queue_get+0x3a>
   1a156:	bf00      	nop
   1a158:	20002d00 	.word	0x20002d00

0001a15c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1a15c:	b538      	push	{r3, r4, r5, lr}
   1a15e:	4604      	mov	r4, r0
	__asm__ volatile(
   1a160:	f04f 0320 	mov.w	r3, #32
   1a164:	f3ef 8511 	mrs	r5, BASEPRI
   1a168:	f383 8812 	msr	BASEPRI_MAX, r3
   1a16c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1a170:	f005 facc 	bl	1f70c <z_unpend_first_thread>

	if (thread != NULL) {
   1a174:	b148      	cbz	r0, 1a18a <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1a176:	2200      	movs	r2, #0
   1a178:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1a17a:	f005 fa6b 	bl	1f654 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1a17e:	4629      	mov	r1, r5
   1a180:	4808      	ldr	r0, [pc, #32]	; (1a1a4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1a182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1a186:	f000 ba3d 	b.w	1a604 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a18a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a18e:	429a      	cmp	r2, r3
   1a190:	bf18      	it	ne
   1a192:	3301      	addne	r3, #1
   1a194:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a196:	2102      	movs	r1, #2
   1a198:	f104 0010 	add.w	r0, r4, #16
   1a19c:	f005 fcae 	bl	1fafc <z_handle_obj_poll_events>
}
   1a1a0:	e7ed      	b.n	1a17e <z_impl_k_sem_give+0x22>
   1a1a2:	bf00      	nop
   1a1a4:	200031f4 	.word	0x200031f4

0001a1a8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1a1a8:	b513      	push	{r0, r1, r4, lr}
   1a1aa:	f04f 0420 	mov.w	r4, #32
   1a1ae:	f3ef 8111 	mrs	r1, BASEPRI
   1a1b2:	f384 8812 	msr	BASEPRI_MAX, r4
   1a1b6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1a1ba:	6884      	ldr	r4, [r0, #8]
   1a1bc:	b144      	cbz	r4, 1a1d0 <z_impl_k_sem_take+0x28>
		sem->count--;
   1a1be:	3c01      	subs	r4, #1
   1a1c0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1a1c2:	f381 8811 	msr	BASEPRI, r1
   1a1c6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a1ca:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1a1cc:	b002      	add	sp, #8
   1a1ce:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a1d0:	ea52 0403 	orrs.w	r4, r2, r3
   1a1d4:	d106      	bne.n	1a1e4 <z_impl_k_sem_take+0x3c>
   1a1d6:	f381 8811 	msr	BASEPRI, r1
   1a1da:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a1de:	f06f 000f 	mvn.w	r0, #15
   1a1e2:	e7f3      	b.n	1a1cc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a1e4:	e9cd 2300 	strd	r2, r3, [sp]
   1a1e8:	4602      	mov	r2, r0
   1a1ea:	4802      	ldr	r0, [pc, #8]	; (1a1f4 <z_impl_k_sem_take+0x4c>)
   1a1ec:	f000 fb5c 	bl	1a8a8 <z_pend_curr>
	return ret;
   1a1f0:	e7ec      	b.n	1a1cc <z_impl_k_sem_take+0x24>
   1a1f2:	bf00      	nop
   1a1f4:	200031f4 	.word	0x200031f4

0001a1f8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1a1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1a1fa:	4b09      	ldr	r3, [pc, #36]	; (1a220 <k_sys_work_q_init+0x28>)
   1a1fc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1a1fe:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1a200:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1a202:	9300      	str	r3, [sp, #0]
   1a204:	4907      	ldr	r1, [pc, #28]	; (1a224 <k_sys_work_q_init+0x2c>)
   1a206:	4808      	ldr	r0, [pc, #32]	; (1a228 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1a208:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1a20c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a210:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a214:	f000 f914 	bl	1a440 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1a218:	4620      	mov	r0, r4
   1a21a:	b004      	add	sp, #16
   1a21c:	bd10      	pop	{r4, pc}
   1a21e:	bf00      	nop
   1a220:	00021b08 	.word	0x00021b08
   1a224:	20005620 	.word	0x20005620
   1a228:	200016c8 	.word	0x200016c8

0001a22c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1a22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1a230:	4e47      	ldr	r6, [pc, #284]	; (1a350 <work_queue_main+0x124>)
   1a232:	b085      	sub	sp, #20
   1a234:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1a236:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1a23a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   1a23e:	f04f 0320 	mov.w	r3, #32
   1a242:	f3ef 8711 	mrs	r7, BASEPRI
   1a246:	f383 8812 	msr	BASEPRI_MAX, r3
   1a24a:	f3bf 8f6f 	isb	sy
   1a24e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1a252:	b98d      	cbnz	r5, 1a278 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1a254:	2102      	movs	r1, #2
   1a256:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1a25a:	f005 f8d7 	bl	1f40c <flag_test_and_clear>
   1a25e:	2800      	cmp	r0, #0
   1a260:	d135      	bne.n	1a2ce <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1a262:	2300      	movs	r3, #0
   1a264:	e9cd 8900 	strd	r8, r9, [sp]
   1a268:	9302      	str	r3, [sp, #8]
   1a26a:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1a26e:	4639      	mov	r1, r7
   1a270:	4838      	ldr	r0, [pc, #224]	; (1a354 <work_queue_main+0x128>)
   1a272:	f000 fc91 	bl	1ab98 <z_sched_wait>
			continue;
   1a276:	e7e2      	b.n	1a23e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a278:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1a27c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1a27e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a282:	4295      	cmp	r5, r2
   1a284:	d101      	bne.n	1a28a <work_queue_main+0x5e>
	list->tail = node;
   1a286:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1a28a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1a28e:	f043 0302 	orr.w	r3, r3, #2
   1a292:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1a296:	68eb      	ldr	r3, [r5, #12]
   1a298:	f023 0304 	bic.w	r3, r3, #4
   1a29c:	f043 0301 	orr.w	r3, r3, #1
   1a2a0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1a2a2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1a2a4:	f387 8811 	msr	BASEPRI, r7
   1a2a8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1a2ac:	4628      	mov	r0, r5
   1a2ae:	4798      	blx	r3
	__asm__ volatile(
   1a2b0:	f04f 0320 	mov.w	r3, #32
   1a2b4:	f3ef 8b11 	mrs	fp, BASEPRI
   1a2b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2bc:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1a2c0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a2c2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1a2c4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a2c8:	d40b      	bmi.n	1a2e2 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1a2ca:	60ea      	str	r2, [r5, #12]
   1a2cc:	e00e      	b.n	1a2ec <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1a2ce:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1a2d2:	2200      	movs	r2, #0
   1a2d4:	2101      	movs	r1, #1
   1a2d6:	4628      	mov	r0, r5
   1a2d8:	f005 fa40 	bl	1f75c <z_sched_wake>
   1a2dc:	2800      	cmp	r0, #0
   1a2de:	d1f8      	bne.n	1a2d2 <work_queue_main+0xa6>
   1a2e0:	e7bf      	b.n	1a262 <work_queue_main+0x36>
	return list->head;
   1a2e2:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1a2e4:	f023 0303 	bic.w	r3, r3, #3
   1a2e8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a2ea:	b970      	cbnz	r0, 1a30a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1a2ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1a2f0:	f023 0302 	bic.w	r3, r3, #2
   1a2f4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1a2f8:	f38b 8811 	msr	BASEPRI, fp
   1a2fc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1a300:	05d8      	lsls	r0, r3, #23
   1a302:	d49c      	bmi.n	1a23e <work_queue_main+0x12>
	z_impl_k_yield();
   1a304:	f000 fb3e 	bl	1a984 <z_impl_k_yield>
}
   1a308:	e799      	b.n	1a23e <work_queue_main+0x12>
	return node->next;
   1a30a:	2700      	movs	r7, #0
   1a30c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1a310:	463b      	mov	r3, r7
		if (wc->work == work) {
   1a312:	6842      	ldr	r2, [r0, #4]
   1a314:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1a316:	4601      	mov	r1, r0
		if (wc->work == work) {
   1a318:	d10c      	bne.n	1a334 <work_queue_main+0x108>
	return node->next;
   1a31a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a31c:	b997      	cbnz	r7, 1a344 <work_queue_main+0x118>
   1a31e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1a320:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a322:	4282      	cmp	r2, r0
   1a324:	d100      	bne.n	1a328 <work_queue_main+0xfc>
	list->tail = node;
   1a326:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1a328:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1a32c:	f7ff ff16 	bl	1a15c <z_impl_k_sem_give>
}
   1a330:	4639      	mov	r1, r7
   1a332:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a334:	f1ba 0f00 	cmp.w	sl, #0
   1a338:	d0d8      	beq.n	1a2ec <work_queue_main+0xc0>
	return node->next;
   1a33a:	4650      	mov	r0, sl
   1a33c:	460f      	mov	r7, r1
   1a33e:	f8da a000 	ldr.w	sl, [sl]
   1a342:	e7e6      	b.n	1a312 <work_queue_main+0xe6>
	return list->tail;
   1a344:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1a346:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a348:	4290      	cmp	r0, r2
	list->tail = node;
   1a34a:	bf08      	it	eq
   1a34c:	6077      	streq	r7, [r6, #4]
}
   1a34e:	e7eb      	b.n	1a328 <work_queue_main+0xfc>
   1a350:	20002d28 	.word	0x20002d28
   1a354:	200031f4 	.word	0x200031f4

0001a358 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1a358:	68c3      	ldr	r3, [r0, #12]
{
   1a35a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a35c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1a360:	079b      	lsls	r3, r3, #30
{
   1a362:	4605      	mov	r5, r0
   1a364:	460c      	mov	r4, r1
	if (ret) {
   1a366:	d50d      	bpl.n	1a384 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a368:	2201      	movs	r2, #1
   1a36a:	2100      	movs	r1, #0
   1a36c:	f104 0008 	add.w	r0, r4, #8
   1a370:	f005 f83c 	bl	1f3ec <z_impl_k_sem_init>
	parent->next = child;
   1a374:	2300      	movs	r3, #0
   1a376:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a378:	4b05      	ldr	r3, [pc, #20]	; (1a390 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1a37a:	6065      	str	r5, [r4, #4]
   1a37c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1a37e:	b91a      	cbnz	r2, 1a388 <cancel_sync_locked+0x30>
	list->head = node;
   1a380:	e9c3 4400 	strd	r4, r4, [r3]
}
   1a384:	4630      	mov	r0, r6
   1a386:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1a388:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1a38a:	605c      	str	r4, [r3, #4]
}
   1a38c:	e7fa      	b.n	1a384 <cancel_sync_locked+0x2c>
   1a38e:	bf00      	nop
   1a390:	20002d28 	.word	0x20002d28

0001a394 <submit_to_queue_locked>:
{
   1a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a396:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a398:	079a      	lsls	r2, r3, #30
{
   1a39a:	4604      	mov	r4, r0
   1a39c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a39e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1a3a2:	d41f      	bmi.n	1a3e4 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1a3a4:	075f      	lsls	r7, r3, #29
   1a3a6:	d41f      	bmi.n	1a3e8 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1a3a8:	680a      	ldr	r2, [r1, #0]
   1a3aa:	b90a      	cbnz	r2, 1a3b0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1a3ac:	6882      	ldr	r2, [r0, #8]
   1a3ae:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1a3b0:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1a3b2:	bf44      	itt	mi
   1a3b4:	68a3      	ldrmi	r3, [r4, #8]
   1a3b6:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1a3b8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1a3ba:	bf4c      	ite	mi
   1a3bc:	2502      	movmi	r5, #2
		ret = 1;
   1a3be:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1a3c0:	b37f      	cbz	r7, 1a422 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a3c2:	4b1b      	ldr	r3, [pc, #108]	; (1a430 <submit_to_queue_locked+0x9c>)
   1a3c4:	689b      	ldr	r3, [r3, #8]
   1a3c6:	42bb      	cmp	r3, r7
   1a3c8:	d111      	bne.n	1a3ee <submit_to_queue_locked+0x5a>
   1a3ca:	f004 ff30 	bl	1f22e <k_is_in_isr>
   1a3ce:	f080 0001 	eor.w	r0, r0, #1
   1a3d2:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1a3d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a3d8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1a3da:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a3de:	d523      	bpl.n	1a428 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1a3e0:	b13a      	cbz	r2, 1a3f2 <submit_to_queue_locked+0x5e>
   1a3e2:	b940      	cbnz	r0, 1a3f6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1a3e4:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1a3e8:	2300      	movs	r3, #0
   1a3ea:	6033      	str	r3, [r6, #0]
	return ret;
   1a3ec:	e013      	b.n	1a416 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a3ee:	2000      	movs	r0, #0
   1a3f0:	e7f0      	b.n	1a3d4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1a3f2:	071b      	lsls	r3, r3, #28
   1a3f4:	d4f6      	bmi.n	1a3e4 <submit_to_queue_locked+0x50>
	parent->next = child;
   1a3f6:	2300      	movs	r3, #0
   1a3f8:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a3fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1a3fe:	b963      	cbnz	r3, 1a41a <submit_to_queue_locked+0x86>
	list->head = node;
   1a400:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1a404:	4638      	mov	r0, r7
   1a406:	f005 f81a 	bl	1f43e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1a40a:	68e3      	ldr	r3, [r4, #12]
   1a40c:	f043 0304 	orr.w	r3, r3, #4
   1a410:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1a412:	6833      	ldr	r3, [r6, #0]
   1a414:	60a3      	str	r3, [r4, #8]
}
   1a416:	4628      	mov	r0, r5
   1a418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1a41a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a41c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1a420:	e7f0      	b.n	1a404 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1a422:	f06f 0515 	mvn.w	r5, #21
   1a426:	e7df      	b.n	1a3e8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1a428:	f06f 0512 	mvn.w	r5, #18
   1a42c:	e7dc      	b.n	1a3e8 <submit_to_queue_locked+0x54>
   1a42e:	bf00      	nop
   1a430:	20002d00 	.word	0x20002d00

0001a434 <k_work_submit>:
{
   1a434:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1a436:	4801      	ldr	r0, [pc, #4]	; (1a43c <k_work_submit+0x8>)
   1a438:	f005 b858 	b.w	1f4ec <k_work_submit_to_queue>
   1a43c:	200016c8 	.word	0x200016c8

0001a440 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1a440:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a442:	b089      	sub	sp, #36	; 0x24
   1a444:	4604      	mov	r4, r0
	list->head = NULL;
   1a446:	2000      	movs	r0, #0
	list->tail = NULL;
   1a448:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1a44c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1a44e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1a452:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1a456:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1a45a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1a45e:	b31d      	cbz	r5, 1a4a8 <k_work_queue_start+0x68>
   1a460:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1a462:	2800      	cmp	r0, #0
   1a464:	f240 1001 	movw	r0, #257	; 0x101
   1a468:	bf08      	it	eq
   1a46a:	2001      	moveq	r0, #1
	*flagp = flags;
   1a46c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a470:	2000      	movs	r0, #0
   1a472:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1a476:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1a47a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1a47e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1a482:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1a486:	4b09      	ldr	r3, [pc, #36]	; (1a4ac <k_work_queue_start+0x6c>)
   1a488:	9400      	str	r4, [sp, #0]
   1a48a:	4620      	mov	r0, r4
   1a48c:	f7ff fd8e 	bl	19fac <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1a490:	b125      	cbz	r5, 1a49c <k_work_queue_start+0x5c>
   1a492:	6829      	ldr	r1, [r5, #0]
   1a494:	b111      	cbz	r1, 1a49c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1a496:	4620      	mov	r0, r4
   1a498:	f004 fecf 	bl	1f23a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1a49c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1a49e:	b009      	add	sp, #36	; 0x24
   1a4a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1a4a4:	f004 becc 	b.w	1f240 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1a4a8:	2001      	movs	r0, #1
   1a4aa:	e7df      	b.n	1a46c <k_work_queue_start+0x2c>
   1a4ac:	0001a22d 	.word	0x0001a22d

0001a4b0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1a4b0:	b513      	push	{r0, r1, r4, lr}
   1a4b2:	9001      	str	r0, [sp, #4]
   1a4b4:	4608      	mov	r0, r1
	__asm__ volatile(
   1a4b6:	f04f 0120 	mov.w	r1, #32
   1a4ba:	f3ef 8411 	mrs	r4, BASEPRI
   1a4be:	f381 8812 	msr	BASEPRI_MAX, r1
   1a4c2:	f3bf 8f6f 	isb	sy
	return *flagp;
   1a4c6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1a4c8:	f011 0f0e 	tst.w	r1, #14
   1a4cc:	d116      	bne.n	1a4fc <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a4ce:	ea53 0c02 	orrs.w	ip, r3, r2
   1a4d2:	d108      	bne.n	1a4e6 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1a4d4:	a901      	add	r1, sp, #4
   1a4d6:	f7ff ff5d 	bl	1a394 <submit_to_queue_locked>
	__asm__ volatile(
   1a4da:	f384 8811 	msr	BASEPRI, r4
   1a4de:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1a4e2:	b002      	add	sp, #8
   1a4e4:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1a4e6:	f041 0108 	orr.w	r1, r1, #8
   1a4ea:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1a4ec:	9901      	ldr	r1, [sp, #4]
   1a4ee:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a4f0:	3010      	adds	r0, #16
   1a4f2:	4903      	ldr	r1, [pc, #12]	; (1a500 <k_work_schedule_for_queue+0x50>)
   1a4f4:	f000 fbc6 	bl	1ac84 <z_add_timeout>
	return ret;
   1a4f8:	2001      	movs	r0, #1
   1a4fa:	e7ee      	b.n	1a4da <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1a4fc:	2000      	movs	r0, #0
   1a4fe:	e7ec      	b.n	1a4da <k_work_schedule_for_queue+0x2a>
   1a500:	0001f4af 	.word	0x0001f4af

0001a504 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1a504:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1a506:	4801      	ldr	r0, [pc, #4]	; (1a50c <k_work_schedule+0x8>)
   1a508:	f7ff bfd2 	b.w	1a4b0 <k_work_schedule_for_queue>
   1a50c:	200016c8 	.word	0x200016c8

0001a510 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1a510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a512:	460c      	mov	r4, r1
   1a514:	9001      	str	r0, [sp, #4]
   1a516:	4616      	mov	r6, r2
   1a518:	461d      	mov	r5, r3
	__asm__ volatile(
   1a51a:	f04f 0320 	mov.w	r3, #32
   1a51e:	f3ef 8711 	mrs	r7, BASEPRI
   1a522:	f383 8812 	msr	BASEPRI_MAX, r3
   1a526:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1a52a:	4608      	mov	r0, r1
   1a52c:	f004 ff79 	bl	1f422 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a530:	ea55 0306 	orrs.w	r3, r5, r6
   1a534:	d109      	bne.n	1a54a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1a536:	a901      	add	r1, sp, #4
   1a538:	4620      	mov	r0, r4
   1a53a:	f7ff ff2b 	bl	1a394 <submit_to_queue_locked>
	__asm__ volatile(
   1a53e:	f387 8811 	msr	BASEPRI, r7
   1a542:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1a546:	b003      	add	sp, #12
   1a548:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1a54a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a54c:	4906      	ldr	r1, [pc, #24]	; (1a568 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1a54e:	f043 0308 	orr.w	r3, r3, #8
   1a552:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1a554:	9b01      	ldr	r3, [sp, #4]
   1a556:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a558:	f104 0010 	add.w	r0, r4, #16
   1a55c:	4632      	mov	r2, r6
   1a55e:	462b      	mov	r3, r5
   1a560:	f000 fb90 	bl	1ac84 <z_add_timeout>
	return ret;
   1a564:	2001      	movs	r0, #1
   1a566:	e7ea      	b.n	1a53e <k_work_reschedule_for_queue+0x2e>
   1a568:	0001f4af 	.word	0x0001f4af

0001a56c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1a56c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1a56e:	4801      	ldr	r0, [pc, #4]	; (1a574 <k_work_reschedule+0x8>)
   1a570:	f7ff bfce 	b.w	1a510 <k_work_reschedule_for_queue>
   1a574:	200016c8 	.word	0x200016c8

0001a578 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1a578:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1a57a:	4c08      	ldr	r4, [pc, #32]	; (1a59c <z_reset_time_slice+0x24>)
   1a57c:	6823      	ldr	r3, [r4, #0]
   1a57e:	b15b      	cbz	r3, 1a598 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1a580:	f7fe f93e 	bl	18800 <sys_clock_elapsed>
   1a584:	4603      	mov	r3, r0
   1a586:	6820      	ldr	r0, [r4, #0]
   1a588:	4a05      	ldr	r2, [pc, #20]	; (1a5a0 <z_reset_time_slice+0x28>)
   1a58a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1a58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1a590:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1a592:	2100      	movs	r1, #0
   1a594:	f005 b925 	b.w	1f7e2 <z_set_timeout_expiry>
}
   1a598:	bd10      	pop	{r4, pc}
   1a59a:	bf00      	nop
   1a59c:	20002d38 	.word	0x20002d38
   1a5a0:	20002d00 	.word	0x20002d00

0001a5a4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5a6:	4604      	mov	r4, r0
   1a5a8:	460d      	mov	r5, r1
	__asm__ volatile(
   1a5aa:	f04f 0320 	mov.w	r3, #32
   1a5ae:	f3ef 8611 	mrs	r6, BASEPRI
   1a5b2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a5b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1a5ba:	4b0f      	ldr	r3, [pc, #60]	; (1a5f8 <k_sched_time_slice_set+0x54>)
   1a5bc:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a5be:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1a5c2:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a5c6:	6119      	str	r1, [r3, #16]
   1a5c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a5cc:	2300      	movs	r3, #0
   1a5ce:	fbe4 0107 	umlal	r0, r1, r4, r7
   1a5d2:	f7e6 fa9b 	bl	b0c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1a5d6:	2c00      	cmp	r4, #0
   1a5d8:	4b08      	ldr	r3, [pc, #32]	; (1a5fc <k_sched_time_slice_set+0x58>)
   1a5da:	dc09      	bgt.n	1a5f0 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1a5dc:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1a5de:	4b08      	ldr	r3, [pc, #32]	; (1a600 <k_sched_time_slice_set+0x5c>)
   1a5e0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1a5e2:	f7ff ffc9 	bl	1a578 <z_reset_time_slice>
	__asm__ volatile(
   1a5e6:	f386 8811 	msr	BASEPRI, r6
   1a5ea:	f3bf 8f6f 	isb	sy
	}
}
   1a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1a5f0:	2802      	cmp	r0, #2
   1a5f2:	bfb8      	it	lt
   1a5f4:	2002      	movlt	r0, #2
   1a5f6:	e7f1      	b.n	1a5dc <k_sched_time_slice_set+0x38>
   1a5f8:	20002d00 	.word	0x20002d00
   1a5fc:	20002d38 	.word	0x20002d38
   1a600:	20002d34 	.word	0x20002d34

0001a604 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a604:	b949      	cbnz	r1, 1a61a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a606:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1a60a:	b930      	cbnz	r0, 1a61a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1a60c:	4b05      	ldr	r3, [pc, #20]	; (1a624 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1a60e:	69da      	ldr	r2, [r3, #28]
   1a610:	689b      	ldr	r3, [r3, #8]
   1a612:	429a      	cmp	r2, r3
   1a614:	d001      	beq.n	1a61a <z_reschedule+0x16>
	ret = arch_swap(key);
   1a616:	f7eb be13 	b.w	6240 <arch_swap>
   1a61a:	f381 8811 	msr	BASEPRI, r1
   1a61e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1a622:	4770      	bx	lr
   1a624:	20002d00 	.word	0x20002d00

0001a628 <k_sched_lock>:
	__asm__ volatile(
   1a628:	f04f 0320 	mov.w	r3, #32
   1a62c:	f3ef 8111 	mrs	r1, BASEPRI
   1a630:	f383 8812 	msr	BASEPRI_MAX, r3
   1a634:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1a638:	4b04      	ldr	r3, [pc, #16]	; (1a64c <k_sched_lock+0x24>)
   1a63a:	689a      	ldr	r2, [r3, #8]
   1a63c:	7bd3      	ldrb	r3, [r2, #15]
   1a63e:	3b01      	subs	r3, #1
   1a640:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1a642:	f381 8811 	msr	BASEPRI, r1
   1a646:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1a64a:	4770      	bx	lr
   1a64c:	20002d00 	.word	0x20002d00

0001a650 <update_cache>:
{
   1a650:	b538      	push	{r3, r4, r5, lr}
   1a652:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1a654:	480c      	ldr	r0, [pc, #48]	; (1a688 <update_cache+0x38>)
   1a656:	4d0d      	ldr	r5, [pc, #52]	; (1a68c <update_cache+0x3c>)
   1a658:	f004 fff6 	bl	1f648 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1a65c:	4604      	mov	r4, r0
   1a65e:	b900      	cbnz	r0, 1a662 <update_cache+0x12>
   1a660:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1a662:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1a664:	b94a      	cbnz	r2, 1a67a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1a666:	7b5a      	ldrb	r2, [r3, #13]
   1a668:	06d2      	lsls	r2, r2, #27
   1a66a:	d106      	bne.n	1a67a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1a66c:	69a2      	ldr	r2, [r4, #24]
   1a66e:	b922      	cbnz	r2, 1a67a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1a670:	89da      	ldrh	r2, [r3, #14]
   1a672:	2a7f      	cmp	r2, #127	; 0x7f
   1a674:	d901      	bls.n	1a67a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1a676:	61eb      	str	r3, [r5, #28]
}
   1a678:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1a67a:	429c      	cmp	r4, r3
   1a67c:	d001      	beq.n	1a682 <update_cache+0x32>
			z_reset_time_slice();
   1a67e:	f7ff ff7b 	bl	1a578 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1a682:	61ec      	str	r4, [r5, #28]
}
   1a684:	e7f8      	b.n	1a678 <update_cache+0x28>
   1a686:	bf00      	nop
   1a688:	20002d20 	.word	0x20002d20
   1a68c:	20002d00 	.word	0x20002d00

0001a690 <move_thread_to_end_of_prio_q>:
{
   1a690:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1a692:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1a696:	7b43      	ldrb	r3, [r0, #13]
   1a698:	2a00      	cmp	r2, #0
{
   1a69a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1a69c:	da04      	bge.n	1a6a8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a69e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a6a2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1a6a4:	f004 ff8b 	bl	1f5be <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1a6a8:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a6aa:	4a15      	ldr	r2, [pc, #84]	; (1a700 <move_thread_to_end_of_prio_q+0x70>)
   1a6ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a6b0:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1a6b2:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a6b6:	f102 0520 	add.w	r5, r2, #32
   1a6ba:	42ab      	cmp	r3, r5
   1a6bc:	d01b      	beq.n	1a6f6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a6be:	b1d3      	cbz	r3, 1a6f6 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1a6c0:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1a6c4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1a6c8:	4286      	cmp	r6, r0
   1a6ca:	d00f      	beq.n	1a6ec <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1a6cc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a6ce:	2800      	cmp	r0, #0
   1a6d0:	dd0c      	ble.n	1a6ec <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1a6d2:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1a6d4:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1a6d8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1a6da:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1a6dc:	6890      	ldr	r0, [r2, #8]
   1a6de:	1a43      	subs	r3, r0, r1
   1a6e0:	4258      	negs	r0, r3
}
   1a6e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1a6e6:	4158      	adcs	r0, r3
   1a6e8:	f7ff bfb2 	b.w	1a650 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1a6ec:	42a3      	cmp	r3, r4
   1a6ee:	d002      	beq.n	1a6f6 <move_thread_to_end_of_prio_q+0x66>
   1a6f0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a6f2:	2b00      	cmp	r3, #0
   1a6f4:	d1e6      	bne.n	1a6c4 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1a6f6:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1a6fa:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1a6fc:	6251      	str	r1, [r2, #36]	; 0x24
}
   1a6fe:	e7ed      	b.n	1a6dc <move_thread_to_end_of_prio_q+0x4c>
   1a700:	20002d00 	.word	0x20002d00

0001a704 <z_time_slice>:
{
   1a704:	b538      	push	{r3, r4, r5, lr}
   1a706:	4601      	mov	r1, r0
	__asm__ volatile(
   1a708:	f04f 0320 	mov.w	r3, #32
   1a70c:	f3ef 8411 	mrs	r4, BASEPRI
   1a710:	f383 8812 	msr	BASEPRI_MAX, r3
   1a714:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1a718:	4b15      	ldr	r3, [pc, #84]	; (1a770 <z_time_slice+0x6c>)
   1a71a:	4a16      	ldr	r2, [pc, #88]	; (1a774 <z_time_slice+0x70>)
   1a71c:	6898      	ldr	r0, [r3, #8]
   1a71e:	6815      	ldr	r5, [r2, #0]
   1a720:	42a8      	cmp	r0, r5
   1a722:	d106      	bne.n	1a732 <z_time_slice+0x2e>
			z_reset_time_slice();
   1a724:	f7ff ff28 	bl	1a578 <z_reset_time_slice>
	__asm__ volatile(
   1a728:	f384 8811 	msr	BASEPRI, r4
   1a72c:	f3bf 8f6f 	isb	sy
}
   1a730:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1a732:	2500      	movs	r5, #0
   1a734:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1a736:	4a10      	ldr	r2, [pc, #64]	; (1a778 <z_time_slice+0x74>)
   1a738:	6812      	ldr	r2, [r2, #0]
   1a73a:	b1ba      	cbz	r2, 1a76c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1a73c:	89c2      	ldrh	r2, [r0, #14]
   1a73e:	2a7f      	cmp	r2, #127	; 0x7f
   1a740:	d814      	bhi.n	1a76c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1a742:	7b42      	ldrb	r2, [r0, #13]
   1a744:	06d2      	lsls	r2, r2, #27
   1a746:	d111      	bne.n	1a76c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1a748:	4a0c      	ldr	r2, [pc, #48]	; (1a77c <z_time_slice+0x78>)
   1a74a:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1a74e:	6812      	ldr	r2, [r2, #0]
   1a750:	4295      	cmp	r5, r2
   1a752:	db0b      	blt.n	1a76c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1a754:	4a0a      	ldr	r2, [pc, #40]	; (1a780 <z_time_slice+0x7c>)
   1a756:	4290      	cmp	r0, r2
   1a758:	d008      	beq.n	1a76c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1a75a:	691a      	ldr	r2, [r3, #16]
   1a75c:	428a      	cmp	r2, r1
   1a75e:	dc02      	bgt.n	1a766 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1a760:	f7ff ff96 	bl	1a690 <move_thread_to_end_of_prio_q>
   1a764:	e7de      	b.n	1a724 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1a766:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1a768:	611a      	str	r2, [r3, #16]
   1a76a:	e7dd      	b.n	1a728 <z_time_slice+0x24>
   1a76c:	2200      	movs	r2, #0
   1a76e:	e7fb      	b.n	1a768 <z_time_slice+0x64>
   1a770:	20002d00 	.word	0x20002d00
   1a774:	20002d30 	.word	0x20002d30
   1a778:	20002d38 	.word	0x20002d38
   1a77c:	20002d34 	.word	0x20002d34
   1a780:	200015c8 	.word	0x200015c8

0001a784 <ready_thread>:
{
   1a784:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1a786:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1a78a:	7b43      	ldrb	r3, [r0, #13]
   1a78c:	2a00      	cmp	r2, #0
   1a78e:	db2a      	blt.n	1a7e6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a790:	06da      	lsls	r2, r3, #27
   1a792:	d128      	bne.n	1a7e6 <ready_thread+0x62>
   1a794:	6982      	ldr	r2, [r0, #24]
   1a796:	bb32      	cbnz	r2, 1a7e6 <ready_thread+0x62>
	return list->head == list;
   1a798:	4a14      	ldr	r2, [pc, #80]	; (1a7ec <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1a79a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a79e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1a7a0:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a7a4:	f102 0520 	add.w	r5, r2, #32
   1a7a8:	42ab      	cmp	r3, r5
   1a7aa:	d017      	beq.n	1a7dc <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a7ac:	b1b3      	cbz	r3, 1a7dc <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1a7ae:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1a7b2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1a7b6:	428e      	cmp	r6, r1
   1a7b8:	d00b      	beq.n	1a7d2 <ready_thread+0x4e>
		return b2 - b1;
   1a7ba:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a7bc:	2900      	cmp	r1, #0
   1a7be:	dd08      	ble.n	1a7d2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1a7c0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a7c2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1a7c6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1a7c8:	6058      	str	r0, [r3, #4]
}
   1a7ca:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1a7cc:	2000      	movs	r0, #0
   1a7ce:	f7ff bf3f 	b.w	1a650 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1a7d2:	42a3      	cmp	r3, r4
   1a7d4:	d002      	beq.n	1a7dc <ready_thread+0x58>
   1a7d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a7d8:	2b00      	cmp	r3, #0
   1a7da:	d1ea      	bne.n	1a7b2 <ready_thread+0x2e>
	node->prev = tail;
   1a7dc:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1a7e0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1a7e2:	6250      	str	r0, [r2, #36]	; 0x24
}
   1a7e4:	e7f1      	b.n	1a7ca <ready_thread+0x46>
}
   1a7e6:	bc70      	pop	{r4, r5, r6}
   1a7e8:	4770      	bx	lr
   1a7ea:	bf00      	nop
   1a7ec:	20002d00 	.word	0x20002d00

0001a7f0 <z_sched_start>:
{
   1a7f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a7f2:	f04f 0220 	mov.w	r2, #32
   1a7f6:	f3ef 8411 	mrs	r4, BASEPRI
   1a7fa:	f382 8812 	msr	BASEPRI_MAX, r2
   1a7fe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1a802:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1a804:	0751      	lsls	r1, r2, #29
   1a806:	d404      	bmi.n	1a812 <z_sched_start+0x22>
	__asm__ volatile(
   1a808:	f384 8811 	msr	BASEPRI, r4
   1a80c:	f3bf 8f6f 	isb	sy
}
   1a810:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a812:	f022 0204 	bic.w	r2, r2, #4
   1a816:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1a818:	f7ff ffb4 	bl	1a784 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1a81c:	4621      	mov	r1, r4
   1a81e:	4802      	ldr	r0, [pc, #8]	; (1a828 <z_sched_start+0x38>)
}
   1a820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1a824:	f7ff beee 	b.w	1a604 <z_reschedule>
   1a828:	200031f4 	.word	0x200031f4

0001a82c <unready_thread>:
{
   1a82c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1a82e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1a832:	7b43      	ldrb	r3, [r0, #13]
   1a834:	2a00      	cmp	r2, #0
{
   1a836:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1a838:	da04      	bge.n	1a844 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a83e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a840:	f004 febd 	bl	1f5be <sys_dlist_remove>
	update_cache(thread == _current);
   1a844:	4b04      	ldr	r3, [pc, #16]	; (1a858 <unready_thread+0x2c>)
   1a846:	6898      	ldr	r0, [r3, #8]
   1a848:	1a43      	subs	r3, r0, r1
   1a84a:	4258      	negs	r0, r3
   1a84c:	4158      	adcs	r0, r3
}
   1a84e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1a852:	f7ff befd 	b.w	1a650 <update_cache>
   1a856:	bf00      	nop
   1a858:	20002d00 	.word	0x20002d00

0001a85c <pend>:
{
   1a85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a860:	4606      	mov	r6, r0
   1a862:	4615      	mov	r5, r2
   1a864:	461c      	mov	r4, r3
	__asm__ volatile(
   1a866:	f04f 0320 	mov.w	r3, #32
   1a86a:	f3ef 8711 	mrs	r7, BASEPRI
   1a86e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a872:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1a876:	f004 ff1f 	bl	1f6b8 <add_to_waitq_locked>
	__asm__ volatile(
   1a87a:	f387 8811 	msr	BASEPRI, r7
   1a87e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a882:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1a886:	bf08      	it	eq
   1a888:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1a88c:	d008      	beq.n	1a8a0 <pend+0x44>
   1a88e:	462a      	mov	r2, r5
   1a890:	4623      	mov	r3, r4
   1a892:	f106 0018 	add.w	r0, r6, #24
   1a896:	4903      	ldr	r1, [pc, #12]	; (1a8a4 <pend+0x48>)
}
   1a898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a89c:	f000 b9f2 	b.w	1ac84 <z_add_timeout>
   1a8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a8a4:	0001f675 	.word	0x0001f675

0001a8a8 <z_pend_curr>:
{
   1a8a8:	b510      	push	{r4, lr}
	pending_current = _current;
   1a8aa:	4b07      	ldr	r3, [pc, #28]	; (1a8c8 <z_pend_curr+0x20>)
   1a8ac:	6898      	ldr	r0, [r3, #8]
   1a8ae:	4b07      	ldr	r3, [pc, #28]	; (1a8cc <z_pend_curr+0x24>)
{
   1a8b0:	460c      	mov	r4, r1
	pending_current = _current;
   1a8b2:	6018      	str	r0, [r3, #0]
{
   1a8b4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1a8b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a8ba:	f7ff ffcf 	bl	1a85c <pend>
   1a8be:	4620      	mov	r0, r4
}
   1a8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a8c4:	f7eb bcbc 	b.w	6240 <arch_swap>
   1a8c8:	20002d00 	.word	0x20002d00
   1a8cc:	20002d30 	.word	0x20002d30

0001a8d0 <z_impl_k_thread_suspend>:
{
   1a8d0:	b570      	push	{r4, r5, r6, lr}
   1a8d2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1a8d4:	3018      	adds	r0, #24
   1a8d6:	f004 ff5e 	bl	1f796 <z_abort_timeout>
	__asm__ volatile(
   1a8da:	f04f 0320 	mov.w	r3, #32
   1a8de:	f3ef 8611 	mrs	r6, BASEPRI
   1a8e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8e6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1a8ea:	f994 200d 	ldrsb.w	r2, [r4, #13]
   1a8ee:	7b63      	ldrb	r3, [r4, #13]
   1a8f0:	2a00      	cmp	r2, #0
   1a8f2:	da05      	bge.n	1a900 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a8f8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a8fa:	4620      	mov	r0, r4
   1a8fc:	f004 fe5f 	bl	1f5be <sys_dlist_remove>
		update_cache(thread == _current);
   1a900:	4d0b      	ldr	r5, [pc, #44]	; (1a930 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a902:	7b63      	ldrb	r3, [r4, #13]
   1a904:	68a8      	ldr	r0, [r5, #8]
   1a906:	f043 0310 	orr.w	r3, r3, #16
   1a90a:	7363      	strb	r3, [r4, #13]
   1a90c:	1b03      	subs	r3, r0, r4
   1a90e:	4258      	negs	r0, r3
   1a910:	4158      	adcs	r0, r3
   1a912:	f7ff fe9d 	bl	1a650 <update_cache>
	__asm__ volatile(
   1a916:	f386 8811 	msr	BASEPRI, r6
   1a91a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1a91e:	68ab      	ldr	r3, [r5, #8]
   1a920:	42a3      	cmp	r3, r4
   1a922:	d103      	bne.n	1a92c <z_impl_k_thread_suspend+0x5c>
}
   1a924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1a928:	f004 be84 	b.w	1f634 <z_reschedule_unlocked>
}
   1a92c:	bd70      	pop	{r4, r5, r6, pc}
   1a92e:	bf00      	nop
   1a930:	20002d00 	.word	0x20002d00

0001a934 <k_sched_unlock>:
{
   1a934:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a936:	f04f 0320 	mov.w	r3, #32
   1a93a:	f3ef 8411 	mrs	r4, BASEPRI
   1a93e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a942:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1a946:	4b08      	ldr	r3, [pc, #32]	; (1a968 <k_sched_unlock+0x34>)
   1a948:	689a      	ldr	r2, [r3, #8]
   1a94a:	7bd3      	ldrb	r3, [r2, #15]
   1a94c:	3301      	adds	r3, #1
   1a94e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1a950:	2000      	movs	r0, #0
   1a952:	f7ff fe7d 	bl	1a650 <update_cache>
	__asm__ volatile(
   1a956:	f384 8811 	msr	BASEPRI, r4
   1a95a:	f3bf 8f6f 	isb	sy
}
   1a95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1a962:	f004 be67 	b.w	1f634 <z_reschedule_unlocked>
   1a966:	bf00      	nop
   1a968:	20002d00 	.word	0x20002d00

0001a96c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1a96c:	4b04      	ldr	r3, [pc, #16]	; (1a980 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1a96e:	2100      	movs	r1, #0
   1a970:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1a974:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1a978:	4608      	mov	r0, r1
   1a97a:	f7ff be13 	b.w	1a5a4 <k_sched_time_slice_set>
   1a97e:	bf00      	nop
   1a980:	20002d00 	.word	0x20002d00

0001a984 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1a986:	f04f 0320 	mov.w	r3, #32
   1a98a:	f3ef 8511 	mrs	r5, BASEPRI
   1a98e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a992:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1a996:	491a      	ldr	r1, [pc, #104]	; (1aa00 <z_impl_k_yield+0x7c>)
   1a998:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a99a:	7b43      	ldrb	r3, [r0, #13]
   1a99c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a9a0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a9a2:	f004 fe0c 	bl	1f5be <sys_dlist_remove>
	}
	queue_thread(_current);
   1a9a6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1a9a8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1a9aa:	4608      	mov	r0, r1
   1a9ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1a9b0:	735a      	strb	r2, [r3, #13]
   1a9b2:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a9b6:	4282      	cmp	r2, r0
   1a9b8:	d01c      	beq.n	1a9f4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a9ba:	b1da      	cbz	r2, 1a9f4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1a9bc:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   1a9be:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1a9c2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1a9c6:	42a6      	cmp	r6, r4
   1a9c8:	d00f      	beq.n	1a9ea <z_impl_k_yield+0x66>
		return b2 - b1;
   1a9ca:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a9cc:	2c00      	cmp	r4, #0
   1a9ce:	dd0c      	ble.n	1a9ea <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1a9d0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1a9d2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1a9d6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1a9d8:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1a9da:	2001      	movs	r0, #1
   1a9dc:	f7ff fe38 	bl	1a650 <update_cache>
   1a9e0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1a9e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a9e6:	f7eb bc2b 	b.w	6240 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1a9ea:	42ba      	cmp	r2, r7
   1a9ec:	d002      	beq.n	1a9f4 <z_impl_k_yield+0x70>
   1a9ee:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a9f0:	2a00      	cmp	r2, #0
   1a9f2:	d1e6      	bne.n	1a9c2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1a9f4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   1a9f6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1a9fa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a9fc:	624b      	str	r3, [r1, #36]	; 0x24
}
   1a9fe:	e7ec      	b.n	1a9da <z_impl_k_yield+0x56>
   1aa00:	20002d00 	.word	0x20002d00

0001aa04 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1aa04:	ea50 0301 	orrs.w	r3, r0, r1
{
   1aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa0c:	4605      	mov	r5, r0
   1aa0e:	460e      	mov	r6, r1
	if (ticks == 0) {
   1aa10:	d103      	bne.n	1aa1a <z_tick_sleep+0x16>
	z_impl_k_yield();
   1aa12:	f7ff ffb7 	bl	1a984 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1aa16:	2000      	movs	r0, #0
   1aa18:	e033      	b.n	1aa82 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1aa1a:	f06f 0401 	mvn.w	r4, #1
   1aa1e:	1a24      	subs	r4, r4, r0
   1aa20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa24:	eb63 0301 	sbc.w	r3, r3, r1
   1aa28:	2c01      	cmp	r4, #1
   1aa2a:	f173 0300 	sbcs.w	r3, r3, #0
   1aa2e:	da02      	bge.n	1aa36 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1aa30:	f004 fef1 	bl	1f816 <sys_clock_tick_get_32>
   1aa34:	1944      	adds	r4, r0, r5
   1aa36:	f04f 0320 	mov.w	r3, #32
   1aa3a:	f3ef 8811 	mrs	r8, BASEPRI
   1aa3e:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa42:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1aa46:	4f10      	ldr	r7, [pc, #64]	; (1aa88 <z_tick_sleep+0x84>)
   1aa48:	4b10      	ldr	r3, [pc, #64]	; (1aa8c <z_tick_sleep+0x88>)
   1aa4a:	68b8      	ldr	r0, [r7, #8]
   1aa4c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1aa4e:	f7ff feed 	bl	1a82c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1aa52:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1aa54:	490e      	ldr	r1, [pc, #56]	; (1aa90 <z_tick_sleep+0x8c>)
   1aa56:	462a      	mov	r2, r5
   1aa58:	4633      	mov	r3, r6
   1aa5a:	3018      	adds	r0, #24
   1aa5c:	f000 f912 	bl	1ac84 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1aa60:	68ba      	ldr	r2, [r7, #8]
   1aa62:	7b53      	ldrb	r3, [r2, #13]
   1aa64:	f043 0310 	orr.w	r3, r3, #16
   1aa68:	7353      	strb	r3, [r2, #13]
   1aa6a:	4640      	mov	r0, r8
   1aa6c:	f7eb fbe8 	bl	6240 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1aa70:	f004 fed1 	bl	1f816 <sys_clock_tick_get_32>
   1aa74:	1a20      	subs	r0, r4, r0
   1aa76:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1aa7a:	2801      	cmp	r0, #1
   1aa7c:	f173 0300 	sbcs.w	r3, r3, #0
   1aa80:	dbc9      	blt.n	1aa16 <z_tick_sleep+0x12>
}
   1aa82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aa86:	bf00      	nop
   1aa88:	20002d00 	.word	0x20002d00
   1aa8c:	20002d30 	.word	0x20002d30
   1aa90:	0001f675 	.word	0x0001f675

0001aa94 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1aa94:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1aa98:	bf08      	it	eq
   1aa9a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1aa9e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1aaa0:	d106      	bne.n	1aab0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1aaa2:	4b08      	ldr	r3, [pc, #32]	; (1aac4 <z_impl_k_sleep+0x30>)
   1aaa4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1aaa6:	f7ff ff13 	bl	1a8d0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1aaaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1aaae:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1aab0:	f7ff ffa8 	bl	1aa04 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1aab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1aab8:	fb80 0303 	smull	r0, r3, r0, r3
   1aabc:	0bc0      	lsrs	r0, r0, #15
   1aabe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1aac2:	e7f4      	b.n	1aaae <z_impl_k_sleep+0x1a>
   1aac4:	20002d00 	.word	0x20002d00

0001aac8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1aac8:	4b01      	ldr	r3, [pc, #4]	; (1aad0 <z_impl_z_current_get+0x8>)
   1aaca:	6898      	ldr	r0, [r3, #8]
   1aacc:	4770      	bx	lr
   1aace:	bf00      	nop
   1aad0:	20002d00 	.word	0x20002d00

0001aad4 <z_impl_k_is_preempt_thread>:
   1aad4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1aad8:	b93b      	cbnz	r3, 1aaea <z_impl_k_is_preempt_thread+0x16>
   1aada:	4b05      	ldr	r3, [pc, #20]	; (1aaf0 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1aadc:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1aade:	89d8      	ldrh	r0, [r3, #14]
   1aae0:	287f      	cmp	r0, #127	; 0x7f
   1aae2:	bf8c      	ite	hi
   1aae4:	2000      	movhi	r0, #0
   1aae6:	2001      	movls	r0, #1
   1aae8:	4770      	bx	lr
   1aaea:	2000      	movs	r0, #0
}
   1aaec:	4770      	bx	lr
   1aaee:	bf00      	nop
   1aaf0:	20002d00 	.word	0x20002d00

0001aaf4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1aaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aaf8:	4604      	mov	r4, r0
   1aafa:	f04f 0320 	mov.w	r3, #32
   1aafe:	f3ef 8611 	mrs	r6, BASEPRI
   1ab02:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1ab0a:	7b43      	ldrb	r3, [r0, #13]
   1ab0c:	071a      	lsls	r2, r3, #28
   1ab0e:	d505      	bpl.n	1ab1c <z_thread_abort+0x28>
	__asm__ volatile(
   1ab10:	f386 8811 	msr	BASEPRI, r6
   1ab14:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1ab18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ab1c:	f023 0220 	bic.w	r2, r3, #32
   1ab20:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1ab24:	09d2      	lsrs	r2, r2, #7
   1ab26:	d120      	bne.n	1ab6a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ab28:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1ab2a:	68a3      	ldr	r3, [r4, #8]
   1ab2c:	b113      	cbz	r3, 1ab34 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1ab2e:	4620      	mov	r0, r4
   1ab30:	f004 fd4d 	bl	1f5ce <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1ab34:	f104 0018 	add.w	r0, r4, #24
   1ab38:	f004 fe2d 	bl	1f796 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ab3c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1ab40:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1ab44:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab46:	42bd      	cmp	r5, r7
   1ab48:	d000      	beq.n	1ab4c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ab4a:	b9b5      	cbnz	r5, 1ab7a <z_thread_abort+0x86>
		update_cache(1);
   1ab4c:	2001      	movs	r0, #1
   1ab4e:	f7ff fd7f 	bl	1a650 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1ab52:	4b10      	ldr	r3, [pc, #64]	; (1ab94 <z_thread_abort+0xa0>)
   1ab54:	689b      	ldr	r3, [r3, #8]
   1ab56:	42a3      	cmp	r3, r4
   1ab58:	d1da      	bne.n	1ab10 <z_thread_abort+0x1c>
   1ab5a:	f3ef 8305 	mrs	r3, IPSR
   1ab5e:	2b00      	cmp	r3, #0
   1ab60:	d1d6      	bne.n	1ab10 <z_thread_abort+0x1c>
   1ab62:	4630      	mov	r0, r6
   1ab64:	f7eb fb6c 	bl	6240 <arch_swap>
	return ret;
   1ab68:	e7d2      	b.n	1ab10 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ab6a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1ab6e:	f043 0308 	orr.w	r3, r3, #8
   1ab72:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ab74:	f004 fd23 	bl	1f5be <sys_dlist_remove>
}
   1ab78:	e7d7      	b.n	1ab2a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1ab7a:	4628      	mov	r0, r5
   1ab7c:	f004 fd27 	bl	1f5ce <unpend_thread_no_timeout>
   1ab80:	f105 0018 	add.w	r0, r5, #24
   1ab84:	f004 fe07 	bl	1f796 <z_abort_timeout>
   1ab88:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1ab8c:	4628      	mov	r0, r5
   1ab8e:	f7ff fdf9 	bl	1a784 <ready_thread>
   1ab92:	e7d7      	b.n	1ab44 <z_thread_abort+0x50>
   1ab94:	20002d00 	.word	0x20002d00

0001ab98 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1ab98:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1ab9a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1ab9e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1aba0:	e9cd 6700 	strd	r6, r7, [sp]
   1aba4:	f7ff fe80 	bl	1a8a8 <z_pend_curr>

	if (data != NULL) {
   1aba8:	b11c      	cbz	r4, 1abb2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1abaa:	4b03      	ldr	r3, [pc, #12]	; (1abb8 <z_sched_wait+0x20>)
   1abac:	689b      	ldr	r3, [r3, #8]
   1abae:	695b      	ldr	r3, [r3, #20]
   1abb0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1abb2:	b002      	add	sp, #8
   1abb4:	bdd0      	pop	{r4, r6, r7, pc}
   1abb6:	bf00      	nop
   1abb8:	20002d00 	.word	0x20002d00

0001abbc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1abbc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1abbe:	4806      	ldr	r0, [pc, #24]	; (1abd8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1abc0:	4a06      	ldr	r2, [pc, #24]	; (1abdc <z_data_copy+0x20>)
   1abc2:	4907      	ldr	r1, [pc, #28]	; (1abe0 <z_data_copy+0x24>)
   1abc4:	1a12      	subs	r2, r2, r0
   1abc6:	f001 f8b0 	bl	1bd2a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1abca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1abce:	4a05      	ldr	r2, [pc, #20]	; (1abe4 <z_data_copy+0x28>)
   1abd0:	4905      	ldr	r1, [pc, #20]	; (1abe8 <z_data_copy+0x2c>)
   1abd2:	4806      	ldr	r0, [pc, #24]	; (1abec <z_data_copy+0x30>)
   1abd4:	f001 b8a9 	b.w	1bd2a <memcpy>
   1abd8:	20000000 	.word	0x20000000
   1abdc:	20000b90 	.word	0x20000b90
   1abe0:	00021b48 	.word	0x00021b48
   1abe4:	00000000 	.word	0x00000000
   1abe8:	00021b48 	.word	0x00021b48
   1abec:	20000000 	.word	0x20000000

0001abf0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1abf0:	4b03      	ldr	r3, [pc, #12]	; (1ac00 <elapsed+0x10>)
   1abf2:	681b      	ldr	r3, [r3, #0]
   1abf4:	b90b      	cbnz	r3, 1abfa <elapsed+0xa>
   1abf6:	f7fd be03 	b.w	18800 <sys_clock_elapsed>
}
   1abfa:	2000      	movs	r0, #0
   1abfc:	4770      	bx	lr
   1abfe:	bf00      	nop
   1ac00:	20002d3c 	.word	0x20002d3c

0001ac04 <next_timeout>:
	return list->head == list;
   1ac04:	4b10      	ldr	r3, [pc, #64]	; (1ac48 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   1ac06:	b510      	push	{r4, lr}
   1ac08:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ac0a:	429c      	cmp	r4, r3
   1ac0c:	bf08      	it	eq
   1ac0e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1ac10:	f7ff ffee 	bl	1abf0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   1ac14:	b1a4      	cbz	r4, 1ac40 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1ac16:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1ac1a:	1a1b      	subs	r3, r3, r0
   1ac1c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   1ac20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1ac24:	f170 0200 	sbcs.w	r2, r0, #0
   1ac28:	da0a      	bge.n	1ac40 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1ac2a:	2800      	cmp	r0, #0
   1ac2c:	bfac      	ite	ge
   1ac2e:	4618      	movge	r0, r3
   1ac30:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1ac32:	4b06      	ldr	r3, [pc, #24]	; (1ac4c <next_timeout+0x48>)
   1ac34:	691b      	ldr	r3, [r3, #16]
   1ac36:	b113      	cbz	r3, 1ac3e <next_timeout+0x3a>
   1ac38:	4298      	cmp	r0, r3
   1ac3a:	bfa8      	it	ge
   1ac3c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1ac3e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   1ac40:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ac44:	e7f5      	b.n	1ac32 <next_timeout+0x2e>
   1ac46:	bf00      	nop
   1ac48:	2000087c 	.word	0x2000087c
   1ac4c:	20002d00 	.word	0x20002d00

0001ac50 <remove_timeout>:
{
   1ac50:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1ac52:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ac54:	b168      	cbz	r0, 1ac72 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1ac56:	4a0a      	ldr	r2, [pc, #40]	; (1ac80 <remove_timeout+0x30>)
   1ac58:	6852      	ldr	r2, [r2, #4]
   1ac5a:	4290      	cmp	r0, r2
   1ac5c:	d009      	beq.n	1ac72 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1ac5e:	b143      	cbz	r3, 1ac72 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1ac60:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1ac64:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1ac68:	1912      	adds	r2, r2, r4
   1ac6a:	eb41 0105 	adc.w	r1, r1, r5
   1ac6e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1ac72:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1ac74:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ac76:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ac78:	2300      	movs	r3, #0
	node->prev = NULL;
   1ac7a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ac7e:	bd30      	pop	{r4, r5, pc}
   1ac80:	2000087c 	.word	0x2000087c

0001ac84 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ac84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ac88:	bf08      	it	eq
   1ac8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1ac8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac90:	4604      	mov	r4, r0
   1ac92:	461f      	mov	r7, r3
   1ac94:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ac96:	d067      	beq.n	1ad68 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1ac98:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1ac9a:	f04f 0320 	mov.w	r3, #32
   1ac9e:	f3ef 8611 	mrs	r6, BASEPRI
   1aca2:	f383 8812 	msr	BASEPRI_MAX, r3
   1aca6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1acaa:	f06f 0201 	mvn.w	r2, #1
   1acae:	1b53      	subs	r3, r2, r5
   1acb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1acb4:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1acb8:	2b00      	cmp	r3, #0
   1acba:	db1b      	blt.n	1acf4 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1acbc:	4b2b      	ldr	r3, [pc, #172]	; (1ad6c <z_add_timeout+0xe8>)
   1acbe:	e9d3 1300 	ldrd	r1, r3, [r3]
   1acc2:	1a52      	subs	r2, r2, r1
   1acc4:	eb6c 0303 	sbc.w	r3, ip, r3
   1acc8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1acca:	eb63 0307 	sbc.w	r3, r3, r7
   1acce:	2d01      	cmp	r5, #1
   1acd0:	f173 0200 	sbcs.w	r2, r3, #0
   1acd4:	bfbc      	itt	lt
   1acd6:	2501      	movlt	r5, #1
   1acd8:	2300      	movlt	r3, #0
   1acda:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1acde:	4824      	ldr	r0, [pc, #144]	; (1ad70 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1ace0:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ace4:	4283      	cmp	r3, r0
   1ace6:	d118      	bne.n	1ad1a <z_add_timeout+0x96>
	node->prev = tail;
   1ace8:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1acec:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1acf0:	6044      	str	r4, [r0, #4]
}
   1acf2:	e026      	b.n	1ad42 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1acf4:	f7ff ff7c 	bl	1abf0 <elapsed>
   1acf8:	3501      	adds	r5, #1
   1acfa:	f147 0700 	adc.w	r7, r7, #0
   1acfe:	182d      	adds	r5, r5, r0
   1ad00:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1ad04:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1ad08:	e7e9      	b.n	1acde <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1ad0a:	1a52      	subs	r2, r2, r1
   1ad0c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1ad10:	459c      	cmp	ip, r3
   1ad12:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1ad16:	d0e7      	beq.n	1ace8 <z_add_timeout+0x64>
   1ad18:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1ad1a:	2b00      	cmp	r3, #0
   1ad1c:	d0e4      	beq.n	1ace8 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1ad1e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1ad22:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1ad26:	428a      	cmp	r2, r1
   1ad28:	eb75 0e07 	sbcs.w	lr, r5, r7
   1ad2c:	daed      	bge.n	1ad0a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1ad2e:	1a8a      	subs	r2, r1, r2
   1ad30:	eb67 0505 	sbc.w	r5, r7, r5
   1ad34:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1ad38:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ad3a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1ad3e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ad40:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1ad42:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad44:	4283      	cmp	r3, r0
   1ad46:	d00b      	beq.n	1ad60 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1ad48:	429c      	cmp	r4, r3
   1ad4a:	d109      	bne.n	1ad60 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1ad4c:	f7ff ff5a 	bl	1ac04 <next_timeout>

			if (next_time == 0 ||
   1ad50:	b118      	cbz	r0, 1ad5a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1ad52:	4b08      	ldr	r3, [pc, #32]	; (1ad74 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1ad54:	691b      	ldr	r3, [r3, #16]
   1ad56:	4283      	cmp	r3, r0
   1ad58:	d002      	beq.n	1ad60 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1ad5a:	2100      	movs	r1, #0
   1ad5c:	f7fd fd1e 	bl	1879c <sys_clock_set_timeout>
	__asm__ volatile(
   1ad60:	f386 8811 	msr	BASEPRI, r6
   1ad64:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1ad68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ad6a:	bf00      	nop
   1ad6c:	20001768 	.word	0x20001768
   1ad70:	2000087c 	.word	0x2000087c
   1ad74:	20002d00 	.word	0x20002d00

0001ad78 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1ad78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ad7c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1ad7e:	f7ff fcc1 	bl	1a704 <z_time_slice>
	__asm__ volatile(
   1ad82:	f04f 0320 	mov.w	r3, #32
   1ad86:	f3ef 8411 	mrs	r4, BASEPRI
   1ad8a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad8e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1ad92:	4e24      	ldr	r6, [pc, #144]	; (1ae24 <sys_clock_announce+0xac>)
	return list->head == list;
   1ad94:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1ae28 <sys_clock_announce+0xb0>
   1ad98:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1ad9a:	4d24      	ldr	r5, [pc, #144]	; (1ae2c <sys_clock_announce+0xb4>)
   1ad9c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ada0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ada2:	4540      	cmp	r0, r8
		curr_tick += dt;
   1ada4:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1ada8:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1adac:	d00b      	beq.n	1adc6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1adae:	b150      	cbz	r0, 1adc6 <sys_clock_announce+0x4e>
   1adb0:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1adb4:	429a      	cmp	r2, r3
   1adb6:	eb77 090c 	sbcs.w	r9, r7, ip
   1adba:	da16      	bge.n	1adea <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1adbc:	1a9b      	subs	r3, r3, r2
   1adbe:	eb6c 0c07 	sbc.w	ip, ip, r7
   1adc2:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1adc6:	1852      	adds	r2, r2, r1
   1adc8:	eb4e 0707 	adc.w	r7, lr, r7
   1adcc:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1add0:	2500      	movs	r5, #0
   1add2:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1add4:	f7ff ff16 	bl	1ac04 <next_timeout>
   1add8:	4629      	mov	r1, r5
   1adda:	f7fd fcdf 	bl	1879c <sys_clock_set_timeout>
	__asm__ volatile(
   1adde:	f384 8811 	msr	BASEPRI, r4
   1ade2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1ade6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1adea:	1859      	adds	r1, r3, r1
   1adec:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1adf0:	1ad3      	subs	r3, r2, r3
   1adf2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1adf4:	2200      	movs	r2, #0
   1adf6:	2300      	movs	r3, #0
   1adf8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1adfc:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1ae00:	f7ff ff26 	bl	1ac50 <remove_timeout>
   1ae04:	f384 8811 	msr	BASEPRI, r4
   1ae08:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1ae0c:	6883      	ldr	r3, [r0, #8]
   1ae0e:	4798      	blx	r3
	__asm__ volatile(
   1ae10:	f04f 0320 	mov.w	r3, #32
   1ae14:	f3ef 8411 	mrs	r4, BASEPRI
   1ae18:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae1c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1ae20:	e7bc      	b.n	1ad9c <sys_clock_announce+0x24>
   1ae22:	bf00      	nop
   1ae24:	20002d3c 	.word	0x20002d3c
   1ae28:	2000087c 	.word	0x2000087c
   1ae2c:	20001768 	.word	0x20001768

0001ae30 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1ae30:	b510      	push	{r4, lr}
   1ae32:	f04f 0320 	mov.w	r3, #32
   1ae36:	f3ef 8411 	mrs	r4, BASEPRI
   1ae3a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae3e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1ae42:	f7fd fcdd 	bl	18800 <sys_clock_elapsed>
   1ae46:	4a05      	ldr	r2, [pc, #20]	; (1ae5c <sys_clock_tick_get+0x2c>)
   1ae48:	e9d2 3100 	ldrd	r3, r1, [r2]
   1ae4c:	18c0      	adds	r0, r0, r3
   1ae4e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1ae52:	f384 8811 	msr	BASEPRI, r4
   1ae56:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1ae5a:	bd10      	pop	{r4, pc}
   1ae5c:	20001768 	.word	0x20001768

0001ae60 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1ae60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1ae64:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1ae66:	4b29      	ldr	r3, [pc, #164]	; (1af0c <z_impl_k_poll+0xac>)
   1ae68:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1ae6a:	2301      	movs	r3, #1
   1ae6c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1ae70:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1ae74:	ea52 0305 	orrs.w	r3, r2, r5
{
   1ae78:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1ae7a:	bf0c      	ite	eq
   1ae7c:	2301      	moveq	r3, #1
   1ae7e:	2300      	movne	r3, #0
   1ae80:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1ae84:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1ae86:	f004 fd2a 	bl	1f8de <register_events>
   1ae8a:	4681      	mov	r9, r0
	__asm__ volatile(
   1ae8c:	f04f 0320 	mov.w	r3, #32
   1ae90:	f3ef 8a11 	mrs	sl, BASEPRI
   1ae94:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae98:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1ae9c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1aea0:	b964      	cbnz	r4, 1aebc <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1aea2:	4601      	mov	r1, r0
   1aea4:	4652      	mov	r2, sl
   1aea6:	4640      	mov	r0, r8
   1aea8:	f004 fdea 	bl	1fa80 <clear_event_registrations>
	__asm__ volatile(
   1aeac:	f38a 8811 	msr	BASEPRI, sl
   1aeb0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1aeb4:	4620      	mov	r0, r4
   1aeb6:	b002      	add	sp, #8
   1aeb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1aebc:	2300      	movs	r3, #0
   1aebe:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1aec2:	ea56 0305 	orrs.w	r3, r6, r5
   1aec6:	d106      	bne.n	1aed6 <z_impl_k_poll+0x76>
   1aec8:	f38a 8811 	msr	BASEPRI, sl
   1aecc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1aed0:	f06f 040a 	mvn.w	r4, #10
   1aed4:	e7ee      	b.n	1aeb4 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1aed6:	e9cd 6500 	strd	r6, r5, [sp]
   1aeda:	4a0d      	ldr	r2, [pc, #52]	; (1af10 <z_impl_k_poll+0xb0>)
   1aedc:	480d      	ldr	r0, [pc, #52]	; (1af14 <z_impl_k_poll+0xb4>)
   1aede:	4651      	mov	r1, sl
   1aee0:	f7ff fce2 	bl	1a8a8 <z_pend_curr>
   1aee4:	4604      	mov	r4, r0
	__asm__ volatile(
   1aee6:	f04f 0320 	mov.w	r3, #32
   1aeea:	f3ef 8511 	mrs	r5, BASEPRI
   1aeee:	f383 8812 	msr	BASEPRI_MAX, r3
   1aef2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1aef6:	462a      	mov	r2, r5
   1aef8:	4649      	mov	r1, r9
   1aefa:	4640      	mov	r0, r8
   1aefc:	f004 fdc0 	bl	1fa80 <clear_event_registrations>
	__asm__ volatile(
   1af00:	f385 8811 	msr	BASEPRI, r5
   1af04:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1af08:	e7d4      	b.n	1aeb4 <z_impl_k_poll+0x54>
   1af0a:	bf00      	nop
   1af0c:	20002d00 	.word	0x20002d00
   1af10:	20000884 	.word	0x20000884
   1af14:	200031f4 	.word	0x200031f4

0001af18 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1af18:	b538      	push	{r3, r4, r5, lr}
   1af1a:	4603      	mov	r3, r0
	__asm__ volatile(
   1af1c:	f04f 0220 	mov.w	r2, #32
   1af20:	f3ef 8511 	mrs	r5, BASEPRI
   1af24:	f382 8812 	msr	BASEPRI_MAX, r2
   1af28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1af2c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1af2e:	2101      	movs	r1, #1
   1af30:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1af32:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1af34:	4283      	cmp	r3, r0
   1af36:	d106      	bne.n	1af46 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1af38:	f385 8811 	msr	BASEPRI, r5
   1af3c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1af40:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1af42:	4620      	mov	r0, r4
   1af44:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1af46:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1af4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1af4c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1af4e:	2300      	movs	r3, #0
	node->prev = NULL;
   1af50:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1af54:	f004 fd3a 	bl	1f9cc <signal_poll_event>
	z_reschedule(&lock, key);
   1af58:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1af5a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1af5c:	4801      	ldr	r0, [pc, #4]	; (1af64 <z_impl_k_poll_signal_raise+0x4c>)
   1af5e:	f7ff fb51 	bl	1a604 <z_reschedule>
	return rc;
   1af62:	e7ee      	b.n	1af42 <z_impl_k_poll_signal_raise+0x2a>
   1af64:	200031f4 	.word	0x200031f4

0001af68 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1af68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1af6a:	4606      	mov	r6, r0
   1af6c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1af6e:	f004 f95e 	bl	1f22e <k_is_in_isr>
   1af72:	b978      	cbnz	r0, 1af94 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1af74:	4b0b      	ldr	r3, [pc, #44]	; (1afa4 <z_thread_aligned_alloc+0x3c>)
   1af76:	689b      	ldr	r3, [r3, #8]
   1af78:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1af7a:	b17c      	cbz	r4, 1af9c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1af7c:	1d2a      	adds	r2, r5, #4
   1af7e:	d209      	bcs.n	1af94 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1af80:	2000      	movs	r0, #0
   1af82:	2100      	movs	r1, #0
   1af84:	e9cd 0100 	strd	r0, r1, [sp]
   1af88:	f046 0104 	orr.w	r1, r6, #4
   1af8c:	4620      	mov	r0, r4
   1af8e:	f004 f8c7 	bl	1f120 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1af92:	b908      	cbnz	r0, 1af98 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1af94:	2400      	movs	r4, #0
	}

	return ret;
   1af96:	e001      	b.n	1af9c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1af98:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1af9a:	1d04      	adds	r4, r0, #4
}
   1af9c:	4620      	mov	r0, r4
   1af9e:	b002      	add	sp, #8
   1afa0:	bd70      	pop	{r4, r5, r6, pc}
   1afa2:	bf00      	nop
   1afa4:	20002d00 	.word	0x20002d00

0001afa8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1afa8:	4a02      	ldr	r2, [pc, #8]	; (1afb4 <boot_banner+0xc>)
   1afaa:	4903      	ldr	r1, [pc, #12]	; (1afb8 <boot_banner+0x10>)
   1afac:	4803      	ldr	r0, [pc, #12]	; (1afbc <boot_banner+0x14>)
   1afae:	f000 b882 	b.w	1b0b6 <printk>
   1afb2:	bf00      	nop
   1afb4:	00021902 	.word	0x00021902
   1afb8:	00021b11 	.word	0x00021b11
   1afbc:	00021b1f 	.word	0x00021b1f

0001afc0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1afc0:	4770      	bx	lr

0001afc2 <sensor_sample_fetch>:
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   1afc2:	6883      	ldr	r3, [r0, #8]
   1afc4:	2139      	movs	r1, #57	; 0x39
   1afc6:	68db      	ldr	r3, [r3, #12]
   1afc8:	4718      	bx	r3

0001afca <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   1afca:	6883      	ldr	r3, [r0, #8]
   1afcc:	691b      	ldr	r3, [r3, #16]
   1afce:	4718      	bx	r3

0001afd0 <bt_init>:
	bt_enable(NULL);
   1afd0:	2000      	movs	r0, #0
   1afd2:	f7ec bbab 	b.w	772c <bt_enable>

0001afd6 <gpio_pin_configure_dt.constprop.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   1afd6:	b4f0      	push	{r4, r5, r6, r7}
   1afd8:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
   1afda:	6800      	ldr	r0, [r0, #0]
   1afdc:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   1afde:	795b      	ldrb	r3, [r3, #5]
	struct gpio_driver_data *data =
   1afe0:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   1afe2:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1afe4:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1afe6:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   1afe8:	bf54      	ite	pl
   1afea:	f443 53d0 	orrpl.w	r3, r3, #6656	; 0x1a00
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1afee:	f483 53b0 	eormi.w	r3, r3, #5632	; 0x1600
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1aff2:	2501      	movs	r5, #1
   1aff4:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1aff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1affa:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1affc:	bf4c      	ite	mi
   1affe:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1b000:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   1b002:	683b      	ldr	r3, [r7, #0]
   1b004:	6034      	str	r4, [r6, #0]
}
   1b006:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   1b008:	4718      	bx	r3

0001b00a <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1b00a:	4603      	mov	r3, r0
   1b00c:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   1b00e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1b010:	7919      	ldrb	r1, [r3, #4]
   1b012:	2301      	movs	r3, #1
   1b014:	fa03 f101 	lsl.w	r1, r3, r1
   1b018:	6903      	ldr	r3, [r0, #16]
   1b01a:	681b      	ldr	r3, [r3, #0]
   1b01c:	4219      	tst	r1, r3
   1b01e:	d003      	beq.n	1b028 <gpio_pin_set_dt.isra.0+0x1e>
	if (value != 0)	{
   1b020:	b122      	cbz	r2, 1b02c <gpio_pin_set_dt.isra.0+0x22>
	return api->port_clear_bits_raw(port, pins);
   1b022:	6883      	ldr	r3, [r0, #8]
   1b024:	691b      	ldr	r3, [r3, #16]
   1b026:	e003      	b.n	1b030 <gpio_pin_set_dt.isra.0+0x26>
	if (value != 0)	{
   1b028:	2a00      	cmp	r2, #0
   1b02a:	d0fa      	beq.n	1b022 <gpio_pin_set_dt.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
   1b02c:	6883      	ldr	r3, [r0, #8]
   1b02e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1b030:	4718      	bx	r3

0001b032 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1b032:	4603      	mov	r3, r0
   1b034:	b140      	cbz	r0, 1b048 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b036:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b038:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1b03c:	2a02      	cmp	r2, #2
   1b03e:	d006      	beq.n	1b04e <sys_notify_validate+0x1c>
   1b040:	2a03      	cmp	r2, #3
   1b042:	d004      	beq.n	1b04e <sys_notify_validate+0x1c>
   1b044:	2a01      	cmp	r2, #1
   1b046:	d005      	beq.n	1b054 <sys_notify_validate+0x22>
		return -EINVAL;
   1b048:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1b04c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1b04e:	681a      	ldr	r2, [r3, #0]
   1b050:	2a00      	cmp	r2, #0
   1b052:	d0f9      	beq.n	1b048 <sys_notify_validate+0x16>
		notify->result = 0;
   1b054:	2000      	movs	r0, #0
   1b056:	6098      	str	r0, [r3, #8]
   1b058:	4770      	bx	lr

0001b05a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b05a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b05c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1b060:	2a02      	cmp	r2, #2
{
   1b062:	b510      	push	{r4, lr}
   1b064:	4603      	mov	r3, r0
	notify->result = res;
   1b066:	6081      	str	r1, [r0, #8]
	switch (method) {
   1b068:	d00a      	beq.n	1b080 <sys_notify_finalize+0x26>
   1b06a:	2a03      	cmp	r2, #3
   1b06c:	d10b      	bne.n	1b086 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1b06e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1b070:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1b072:	2200      	movs	r2, #0
   1b074:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1b076:	b108      	cbz	r0, 1b07c <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1b078:	f7ff ff4e 	bl	1af18 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1b07c:	4620      	mov	r0, r4
   1b07e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1b080:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1b082:	2400      	movs	r4, #0
		break;
   1b084:	e7f5      	b.n	1b072 <sys_notify_finalize+0x18>
	switch (method) {
   1b086:	2400      	movs	r4, #0
   1b088:	4620      	mov	r0, r4
   1b08a:	e7f2      	b.n	1b072 <sys_notify_finalize+0x18>

0001b08c <arch_printk_char_out>:
}
   1b08c:	2000      	movs	r0, #0
   1b08e:	4770      	bx	lr

0001b090 <str_out>:
{
   1b090:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1b092:	688a      	ldr	r2, [r1, #8]
   1b094:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1b096:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1b098:	b114      	cbz	r4, 1b0a0 <str_out+0x10>
   1b09a:	684b      	ldr	r3, [r1, #4]
   1b09c:	4293      	cmp	r3, r2
   1b09e:	dc01      	bgt.n	1b0a4 <str_out+0x14>
		ctx->count++;
   1b0a0:	608d      	str	r5, [r1, #8]
}
   1b0a2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1b0a4:	3b01      	subs	r3, #1
   1b0a6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1b0a8:	bf08      	it	eq
   1b0aa:	2200      	moveq	r2, #0
   1b0ac:	608d      	str	r5, [r1, #8]
   1b0ae:	bf0c      	ite	eq
   1b0b0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1b0b2:	54a0      	strbne	r0, [r4, r2]
   1b0b4:	e7f5      	b.n	1b0a2 <str_out+0x12>

0001b0b6 <printk>:
{
   1b0b6:	b40f      	push	{r0, r1, r2, r3}
   1b0b8:	b507      	push	{r0, r1, r2, lr}
   1b0ba:	a904      	add	r1, sp, #16
   1b0bc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1b0c0:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1b0c2:	f7e9 fed9 	bl	4e78 <vprintk>
}
   1b0c6:	b003      	add	sp, #12
   1b0c8:	f85d eb04 	ldr.w	lr, [sp], #4
   1b0cc:	b004      	add	sp, #16
   1b0ce:	4770      	bx	lr

0001b0d0 <snprintk>:
{
   1b0d0:	b40c      	push	{r2, r3}
   1b0d2:	b507      	push	{r0, r1, r2, lr}
   1b0d4:	ab04      	add	r3, sp, #16
   1b0d6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1b0da:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1b0dc:	f7e9 feda 	bl	4e94 <vsnprintk>
}
   1b0e0:	b003      	add	sp, #12
   1b0e2:	f85d eb04 	ldr.w	lr, [sp], #4
   1b0e6:	b002      	add	sp, #8
   1b0e8:	4770      	bx	lr

0001b0ea <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b0ea:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1b0ec:	f013 0307 	ands.w	r3, r3, #7
   1b0f0:	d105      	bne.n	1b0fe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1b0f2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1b0f4:	2b00      	cmp	r3, #0
   1b0f6:	bf0c      	ite	eq
   1b0f8:	2000      	moveq	r0, #0
   1b0fa:	2003      	movne	r0, #3
   1b0fc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1b0fe:	2b02      	cmp	r3, #2
   1b100:	d105      	bne.n	1b10e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1b102:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1b104:	2b00      	cmp	r3, #0
   1b106:	bf14      	ite	ne
   1b108:	2000      	movne	r0, #0
   1b10a:	2004      	moveq	r0, #4
   1b10c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1b10e:	2b01      	cmp	r3, #1
   1b110:	d105      	bne.n	1b11e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1b112:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1b114:	2b00      	cmp	r3, #0
   1b116:	bf0c      	ite	eq
   1b118:	2000      	moveq	r0, #0
   1b11a:	2005      	movne	r0, #5
   1b11c:	4770      	bx	lr
	int evt = EVT_NOP;
   1b11e:	2000      	movs	r0, #0
}
   1b120:	4770      	bx	lr

0001b122 <notify_one>:
{
   1b122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b126:	460d      	mov	r5, r1
   1b128:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b12a:	4619      	mov	r1, r3
   1b12c:	1d28      	adds	r0, r5, #4
{
   1b12e:	4690      	mov	r8, r2
   1b130:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b132:	f7ff ff92 	bl	1b05a <sys_notify_finalize>
	if (cb) {
   1b136:	4604      	mov	r4, r0
   1b138:	b138      	cbz	r0, 1b14a <notify_one+0x28>
		cb(mgr, cli, state, res);
   1b13a:	4633      	mov	r3, r6
   1b13c:	4642      	mov	r2, r8
   1b13e:	4629      	mov	r1, r5
   1b140:	4638      	mov	r0, r7
   1b142:	46a4      	mov	ip, r4
}
   1b144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1b148:	4760      	bx	ip
}
   1b14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b14e <transition_complete>:
{
   1b14e:	b410      	push	{r4}
	__asm__ volatile(
   1b150:	f04f 0420 	mov.w	r4, #32
   1b154:	f3ef 8211 	mrs	r2, BASEPRI
   1b158:	f384 8812 	msr	BASEPRI_MAX, r4
   1b15c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1b160:	6141      	str	r1, [r0, #20]
}
   1b162:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1b164:	2101      	movs	r1, #1
   1b166:	f7e9 bea9 	b.w	4ebc <process_event>

0001b16a <validate_args>:
{
   1b16a:	b510      	push	{r4, lr}
   1b16c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1b16e:	b140      	cbz	r0, 1b182 <validate_args+0x18>
   1b170:	b139      	cbz	r1, 1b182 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1b172:	1d08      	adds	r0, r1, #4
   1b174:	f7ff ff5d 	bl	1b032 <sys_notify_validate>
	if ((rv == 0)
   1b178:	b928      	cbnz	r0, 1b186 <validate_args+0x1c>
	    && ((cli->notify.flags
   1b17a:	68a3      	ldr	r3, [r4, #8]
   1b17c:	f033 0303 	bics.w	r3, r3, #3
   1b180:	d001      	beq.n	1b186 <validate_args+0x1c>
		rv = -EINVAL;
   1b182:	f06f 0015 	mvn.w	r0, #21
}
   1b186:	bd10      	pop	{r4, pc}

0001b188 <onoff_manager_init>:
{
   1b188:	b538      	push	{r3, r4, r5, lr}
   1b18a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1b18c:	4605      	mov	r5, r0
   1b18e:	b158      	cbz	r0, 1b1a8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1b190:	b151      	cbz	r1, 1b1a8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1b192:	680b      	ldr	r3, [r1, #0]
   1b194:	b143      	cbz	r3, 1b1a8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1b196:	684b      	ldr	r3, [r1, #4]
   1b198:	b133      	cbz	r3, 1b1a8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b19a:	221c      	movs	r2, #28
   1b19c:	2100      	movs	r1, #0
   1b19e:	f000 fdcf 	bl	1bd40 <memset>
   1b1a2:	612c      	str	r4, [r5, #16]
	return 0;
   1b1a4:	2000      	movs	r0, #0
}
   1b1a6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b1a8:	f06f 0015 	mvn.w	r0, #21
   1b1ac:	e7fb      	b.n	1b1a6 <onoff_manager_init+0x1e>

0001b1ae <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1b1ae:	b570      	push	{r4, r5, r6, lr}
   1b1b0:	4604      	mov	r4, r0
   1b1b2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1b1b4:	f7ff ffd9 	bl	1b16a <validate_args>

	if (rv < 0) {
   1b1b8:	1e05      	subs	r5, r0, #0
   1b1ba:	db31      	blt.n	1b220 <onoff_request+0x72>
   1b1bc:	f04f 0320 	mov.w	r3, #32
   1b1c0:	f3ef 8111 	mrs	r1, BASEPRI
   1b1c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1c8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1b1cc:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b1ce:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1b1d0:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1b1d4:	42ab      	cmp	r3, r5
   1b1d6:	f000 0207 	and.w	r2, r0, #7
   1b1da:	d02e      	beq.n	1b23a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1b1dc:	2a02      	cmp	r2, #2
   1b1de:	d10e      	bne.n	1b1fe <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1b1e0:	3301      	adds	r3, #1
   1b1e2:	8363      	strh	r3, [r4, #26]
	rv = state;
   1b1e4:	4615      	mov	r5, r2
		notify = true;
   1b1e6:	2301      	movs	r3, #1
	__asm__ volatile(
   1b1e8:	f381 8811 	msr	BASEPRI, r1
   1b1ec:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1b1f0:	b1b3      	cbz	r3, 1b220 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1b1f2:	2300      	movs	r3, #0
   1b1f4:	4631      	mov	r1, r6
   1b1f6:	4620      	mov	r0, r4
   1b1f8:	f7ff ff93 	bl	1b122 <notify_one>
   1b1fc:	e010      	b.n	1b220 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1b1fe:	0783      	lsls	r3, r0, #30
   1b200:	d001      	beq.n	1b206 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1b202:	2a06      	cmp	r2, #6
   1b204:	d10e      	bne.n	1b224 <onoff_request+0x76>
	parent->next = child;
   1b206:	2300      	movs	r3, #0
   1b208:	6033      	str	r3, [r6, #0]
	return list->tail;
   1b20a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1b20c:	b993      	cbnz	r3, 1b234 <onoff_request+0x86>
	list->head = node;
   1b20e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1b212:	4615      	mov	r5, r2
   1b214:	b962      	cbnz	r2, 1b230 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1b216:	460a      	mov	r2, r1
   1b218:	4620      	mov	r0, r4
   1b21a:	2102      	movs	r1, #2
   1b21c:	f7e9 fe4e 	bl	4ebc <process_event>
		}
	}

	return rv;
}
   1b220:	4628      	mov	r0, r5
   1b222:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1b224:	2a05      	cmp	r2, #5
   1b226:	bf0c      	ite	eq
   1b228:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1b22c:	f06f 0504 	mvnne.w	r5, #4
   1b230:	2300      	movs	r3, #0
   1b232:	e7d9      	b.n	1b1e8 <onoff_request+0x3a>
	parent->next = child;
   1b234:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1b236:	6066      	str	r6, [r4, #4]
}
   1b238:	e7eb      	b.n	1b212 <onoff_request+0x64>
		rv = -EAGAIN;
   1b23a:	f06f 050a 	mvn.w	r5, #10
   1b23e:	e7f7      	b.n	1b230 <onoff_request+0x82>

0001b240 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1b240:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b242:	f04f 0320 	mov.w	r3, #32
   1b246:	f3ef 8211 	mrs	r2, BASEPRI
   1b24a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b24e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b252:	8b04      	ldrh	r4, [r0, #24]
   1b254:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1b258:	2c02      	cmp	r4, #2
   1b25a:	d00a      	beq.n	1b272 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1b25c:	2c01      	cmp	r4, #1
   1b25e:	bf0c      	ite	eq
   1b260:	f06f 0004 	mvneq.w	r0, #4
   1b264:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1b268:	f382 8811 	msr	BASEPRI, r2
   1b26c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1b270:	e008      	b.n	1b284 <onoff_release+0x44>
	mgr->refs -= 1U;
   1b272:	8b43      	ldrh	r3, [r0, #26]
   1b274:	3b01      	subs	r3, #1
   1b276:	b29b      	uxth	r3, r3
   1b278:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1b27a:	b923      	cbnz	r3, 1b286 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1b27c:	4621      	mov	r1, r4
   1b27e:	f7e9 fe1d 	bl	4ebc <process_event>
	int rv = state;
   1b282:	4620      	mov	r0, r4
}
   1b284:	bd10      	pop	{r4, pc}
	int rv = state;
   1b286:	4620      	mov	r0, r4
   1b288:	e7ee      	b.n	1b268 <onoff_release+0x28>

0001b28a <onoff_sync_lock>:
	__asm__ volatile(
   1b28a:	f04f 0220 	mov.w	r2, #32
   1b28e:	f3ef 8311 	mrs	r3, BASEPRI
   1b292:	f382 8812 	msr	BASEPRI_MAX, r2
   1b296:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
   1b29a:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
   1b29c:	600b      	str	r3, [r1, #0]
}
   1b29e:	4770      	bx	lr

0001b2a0 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   1b2a0:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   1b2a2:	6804      	ldr	r4, [r0, #0]
   1b2a4:	2c00      	cmp	r4, #0
		srv->count = 0;
   1b2a6:	bfbc      	itt	lt
   1b2a8:	2400      	movlt	r4, #0
   1b2aa:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
   1b2ac:	2b00      	cmp	r3, #0
{
   1b2ae:	460d      	mov	r5, r1
   1b2b0:	4611      	mov	r1, r2
   1b2b2:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
   1b2b6:	da0c      	bge.n	1b2d2 <onoff_sync_finalize+0x32>
		srv->count = res;
   1b2b8:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
   1b2ba:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
   1b2bc:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
   1b2be:	f385 8811 	msr	BASEPRI, r5
   1b2c2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
   1b2c6:	b111      	cbz	r1, 1b2ce <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
   1b2c8:	2000      	movs	r0, #0
   1b2ca:	f7ff ff2a 	bl	1b122 <notify_one>
	}

	return rv;
}
   1b2ce:	4620      	mov	r0, r4
   1b2d0:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
   1b2d2:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
   1b2d4:	b11a      	cbz	r2, 1b2de <onoff_sync_finalize+0x3e>
		srv->count += 1;
   1b2d6:	3401      	adds	r4, #1
		srv->count -= 1;
   1b2d8:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
   1b2da:	2202      	movs	r2, #2
   1b2dc:	e7ee      	b.n	1b2bc <onoff_sync_finalize+0x1c>
		srv->count -= 1;
   1b2de:	3c01      	subs	r4, #1
   1b2e0:	e7fa      	b.n	1b2d8 <onoff_sync_finalize+0x38>

0001b2e2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1b2e2:	4604      	mov	r4, r0
   1b2e4:	b508      	push	{r3, lr}
   1b2e6:	4608      	mov	r0, r1
   1b2e8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1b2ea:	461a      	mov	r2, r3
   1b2ec:	47a0      	blx	r4
	return z_impl_z_current_get();
   1b2ee:	f7ff fbeb 	bl	1aac8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1b2f2:	f7eb f98d 	bl	6610 <z_impl_k_thread_abort>

0001b2f6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1b2f6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1b2fa:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1b2fc:	0840      	lsrs	r0, r0, #1
   1b2fe:	4770      	bx	lr

0001b300 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b302:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1b304:	f7ff fff7 	bl	1b2f6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1b308:	fab0 f080 	clz	r0, r0
   1b30c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1b310:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1b314:	00ca      	lsls	r2, r1, #3
   1b316:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1b31a:	1d17      	adds	r7, r2, #4
{
   1b31c:	460c      	mov	r4, r1
   1b31e:	3206      	adds	r2, #6
   1b320:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1b322:	b956      	cbnz	r6, 1b33a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1b324:	2101      	movs	r1, #1
   1b326:	fa01 f000 	lsl.w	r0, r1, r0
   1b32a:	68d9      	ldr	r1, [r3, #12]
   1b32c:	4301      	orrs	r1, r0
   1b32e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1b330:	f8cc 4010 	str.w	r4, [ip, #16]
   1b334:	53dd      	strh	r5, [r3, r7]
   1b336:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1b338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1b33a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1b33c:	3104      	adds	r1, #4
   1b33e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1b340:	53d8      	strh	r0, [r3, r7]
   1b342:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1b346:	529e      	strh	r6, [r3, r2]
   1b348:	80c5      	strh	r5, [r0, #6]
   1b34a:	525d      	strh	r5, [r3, r1]
   1b34c:	e7f4      	b.n	1b338 <free_list_add+0x38>

0001b34e <free_list_remove_bidx>:
{
   1b34e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1b350:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1b354:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1b356:	4299      	cmp	r1, r3
   1b358:	f102 0104 	add.w	r1, r2, #4
   1b35c:	d10a      	bne.n	1b374 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1b35e:	2301      	movs	r3, #1
   1b360:	fa03 f202 	lsl.w	r2, r3, r2
   1b364:	68c3      	ldr	r3, [r0, #12]
   1b366:	ea23 0302 	bic.w	r3, r3, r2
   1b36a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1b36c:	2300      	movs	r3, #0
   1b36e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1b372:	bd10      	pop	{r4, pc}
   1b374:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1b376:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1b37a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1b37e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1b382:	80cb      	strh	r3, [r1, #6]
   1b384:	8082      	strh	r2, [r0, #4]
}
   1b386:	e7f4      	b.n	1b372 <free_list_remove_bidx+0x24>

0001b388 <free_list_remove>:
{
   1b388:	b508      	push	{r3, lr}
   1b38a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1b38c:	f7ff ffb3 	bl	1b2f6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1b390:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1b394:	f1c2 021f 	rsb	r2, r2, #31
   1b398:	4618      	mov	r0, r3
}
   1b39a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1b39e:	f7ff bfd6 	b.w	1b34e <free_list_remove_bidx>

0001b3a2 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1b3a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b3a6:	fab1 f581 	clz	r5, r1
   1b3aa:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1b3ae:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1b3b2:	4603      	mov	r3, r0
	if (b->next) {
   1b3b4:	693a      	ldr	r2, [r7, #16]
{
   1b3b6:	460e      	mov	r6, r1
	if (b->next) {
   1b3b8:	b1c2      	cbz	r2, 1b3ec <alloc_chunk+0x4a>
   1b3ba:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1b3be:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1b3c0:	4618      	mov	r0, r3
   1b3c2:	4621      	mov	r1, r4
   1b3c4:	f7ff ff97 	bl	1b2f6 <chunk_size>
   1b3c8:	42b0      	cmp	r0, r6
   1b3ca:	d306      	bcc.n	1b3da <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   1b3cc:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1b3ce:	4618      	mov	r0, r3
   1b3d0:	f7ff ffbd 	bl	1b34e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1b3d4:	4620      	mov	r0, r4
   1b3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1b3da:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   1b3de:	f1b8 0801 	subs.w	r8, r8, #1
   1b3e2:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1b3e4:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1b3e6:	d001      	beq.n	1b3ec <alloc_chunk+0x4a>
   1b3e8:	4282      	cmp	r2, r0
   1b3ea:	d1e8      	bne.n	1b3be <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1b3ec:	f1c5 0220 	rsb	r2, r5, #32
   1b3f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1b3f4:	4094      	lsls	r4, r2
   1b3f6:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1b3f8:	4014      	ands	r4, r2
   1b3fa:	d0eb      	beq.n	1b3d4 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   1b3fc:	fa94 f2a4 	rbit	r2, r4
   1b400:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1b404:	1d11      	adds	r1, r2, #4
   1b406:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1b40a:	4621      	mov	r1, r4
   1b40c:	e7df      	b.n	1b3ce <alloc_chunk+0x2c>

0001b40e <merge_chunks>:
{
   1b40e:	b538      	push	{r3, r4, r5, lr}
   1b410:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1b412:	f7ff ff70 	bl	1b2f6 <chunk_size>
{
   1b416:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1b418:	4604      	mov	r4, r0
   1b41a:	4611      	mov	r1, r2
   1b41c:	4618      	mov	r0, r3
   1b41e:	f7ff ff6a 	bl	1b2f6 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1b422:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1b426:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b428:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1b42a:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1b42c:	4618      	mov	r0, r3
   1b42e:	f7ff ff62 	bl	1b2f6 <chunk_size>
	void *cmem = &buf[c];
   1b432:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1b434:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1b438:	bd38      	pop	{r3, r4, r5, pc}

0001b43a <split_chunks>:
{
   1b43a:	b538      	push	{r3, r4, r5, lr}
   1b43c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1b43e:	f7ff ff5a 	bl	1b2f6 <chunk_size>
{
   1b442:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1b444:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1b446:	1a51      	subs	r1, r2, r1
   1b448:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1b44c:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b44e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1b450:	8060      	strh	r0, [r4, #2]
   1b452:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b456:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1b458:	8044      	strh	r4, [r0, #2]
   1b45a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1b45e:	4618      	mov	r0, r3
   1b460:	4611      	mov	r1, r2
   1b462:	f7ff ff48 	bl	1b2f6 <chunk_size>
	void *cmem = &buf[c];
   1b466:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1b468:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1b46c:	bd38      	pop	{r3, r4, r5, pc}

0001b46e <free_chunk>:
{
   1b46e:	b538      	push	{r3, r4, r5, lr}
   1b470:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1b472:	f7ff ff40 	bl	1b2f6 <chunk_size>
   1b476:	460c      	mov	r4, r1
   1b478:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1b47a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1b47e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1b480:	07da      	lsls	r2, r3, #31
   1b482:	d40a      	bmi.n	1b49a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1b484:	4628      	mov	r0, r5
   1b486:	f7ff ff7f 	bl	1b388 <free_list_remove>
	return c + chunk_size(h, c);
   1b48a:	4621      	mov	r1, r4
   1b48c:	4628      	mov	r0, r5
   1b48e:	f7ff ff32 	bl	1b2f6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1b492:	1822      	adds	r2, r4, r0
   1b494:	4628      	mov	r0, r5
   1b496:	f7ff ffba 	bl	1b40e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1b49a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1b49e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1b4a0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1b4a4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1b4a6:	07db      	lsls	r3, r3, #31
   1b4a8:	d40c      	bmi.n	1b4c4 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1b4aa:	4628      	mov	r0, r5
   1b4ac:	f7ff ff6c 	bl	1b388 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1b4b0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1b4b4:	4622      	mov	r2, r4
   1b4b6:	1a61      	subs	r1, r4, r1
   1b4b8:	4628      	mov	r0, r5
   1b4ba:	f7ff ffa8 	bl	1b40e <merge_chunks>
   1b4be:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1b4c2:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1b4c4:	4621      	mov	r1, r4
   1b4c6:	4628      	mov	r0, r5
}
   1b4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1b4cc:	f7ff bf18 	b.w	1b300 <free_list_add>

0001b4d0 <sys_heap_free>:
	if (mem == NULL) {
   1b4d0:	b161      	cbz	r1, 1b4ec <sys_heap_free+0x1c>
   1b4d2:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1b4d4:	3904      	subs	r1, #4
   1b4d6:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1b4d8:	f021 0307 	bic.w	r3, r1, #7
   1b4dc:	4403      	add	r3, r0
	free_chunk(h, c);
   1b4de:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1b4e0:	885a      	ldrh	r2, [r3, #2]
   1b4e2:	f022 0201 	bic.w	r2, r2, #1
   1b4e6:	805a      	strh	r2, [r3, #2]
   1b4e8:	f7ff bfc1 	b.w	1b46e <free_chunk>
}
   1b4ec:	4770      	bx	lr

0001b4ee <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1b4ee:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1b4f0:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1b4f2:	b909      	cbnz	r1, 1b4f8 <sys_heap_alloc+0xa>
		return NULL;
   1b4f4:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1b4f6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1b4f8:	68ab      	ldr	r3, [r5, #8]
   1b4fa:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1b4fe:	d9f9      	bls.n	1b4f4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b500:	310b      	adds	r1, #11
   1b502:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1b504:	4621      	mov	r1, r4
   1b506:	4628      	mov	r0, r5
   1b508:	f7ff ff4b 	bl	1b3a2 <alloc_chunk>
	if (c == 0U) {
   1b50c:	4606      	mov	r6, r0
   1b50e:	2800      	cmp	r0, #0
   1b510:	d0f0      	beq.n	1b4f4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1b512:	4601      	mov	r1, r0
   1b514:	4628      	mov	r0, r5
   1b516:	f7ff feee 	bl	1b2f6 <chunk_size>
   1b51a:	42a0      	cmp	r0, r4
   1b51c:	d907      	bls.n	1b52e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1b51e:	1932      	adds	r2, r6, r4
   1b520:	4628      	mov	r0, r5
   1b522:	f7ff ff8a 	bl	1b43a <split_chunks>
		free_list_add(h, c + chunk_sz);
   1b526:	4611      	mov	r1, r2
   1b528:	4628      	mov	r0, r5
   1b52a:	f7ff fee9 	bl	1b300 <free_list_add>
	void *cmem = &buf[c];
   1b52e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1b532:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b534:	8853      	ldrh	r3, [r2, #2]
   1b536:	f043 0301 	orr.w	r3, r3, #1
   1b53a:	8053      	strh	r3, [r2, #2]
   1b53c:	3004      	adds	r0, #4
	return mem;
   1b53e:	e7da      	b.n	1b4f6 <sys_heap_alloc+0x8>

0001b540 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1b540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b544:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1b546:	424a      	negs	r2, r1
   1b548:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1b54c:	ea31 0202 	bics.w	r2, r1, r2
{
   1b550:	4603      	mov	r3, r0
	if (align != rew) {
   1b552:	d00a      	beq.n	1b56a <sys_heap_aligned_alloc+0x2a>
		return false;
   1b554:	2f04      	cmp	r7, #4
   1b556:	463a      	mov	r2, r7
   1b558:	46b9      	mov	r9, r7
   1b55a:	bf28      	it	cs
   1b55c:	2204      	movcs	r2, #4
		align -= rew;
   1b55e:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1b560:	b974      	cbnz	r4, 1b580 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1b562:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1b564:	4628      	mov	r0, r5
   1b566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1b56a:	2904      	cmp	r1, #4
   1b56c:	d804      	bhi.n	1b578 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1b56e:	4621      	mov	r1, r4
}
   1b570:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1b574:	f7ff bfbb 	b.w	1b4ee <sys_heap_alloc>
		rew = 0;
   1b578:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1b57c:	2204      	movs	r2, #4
   1b57e:	e7ef      	b.n	1b560 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1b580:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1b582:	68b3      	ldr	r3, [r6, #8]
   1b584:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1b588:	d9eb      	bls.n	1b562 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b58a:	f104 010b 	add.w	r1, r4, #11
   1b58e:	4439      	add	r1, r7
   1b590:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1b592:	08c9      	lsrs	r1, r1, #3
   1b594:	4630      	mov	r0, r6
   1b596:	f7ff ff04 	bl	1b3a2 <alloc_chunk>
	if (c0 == 0) {
   1b59a:	4680      	mov	r8, r0
   1b59c:	2800      	cmp	r0, #0
   1b59e:	d0e0      	beq.n	1b562 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1b5a0:	f109 0504 	add.w	r5, r9, #4
   1b5a4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1b5a8:	1e7b      	subs	r3, r7, #1
   1b5aa:	4435      	add	r5, r6
   1b5ac:	441d      	add	r5, r3
   1b5ae:	427f      	negs	r7, r7
   1b5b0:	403d      	ands	r5, r7
   1b5b2:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1b5b6:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1b5b8:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1b5ba:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1b5bc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1b5be:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1b5c2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1b5c4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1b5c8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1b5cc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1b5d0:	d208      	bcs.n	1b5e4 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1b5d2:	4601      	mov	r1, r0
   1b5d4:	463a      	mov	r2, r7
   1b5d6:	4630      	mov	r0, r6
   1b5d8:	f7ff ff2f 	bl	1b43a <split_chunks>
		free_list_add(h, c0);
   1b5dc:	4641      	mov	r1, r8
   1b5de:	4630      	mov	r0, r6
   1b5e0:	f7ff fe8e 	bl	1b300 <free_list_add>
	return c + chunk_size(h, c);
   1b5e4:	4639      	mov	r1, r7
   1b5e6:	4630      	mov	r0, r6
   1b5e8:	f7ff fe85 	bl	1b2f6 <chunk_size>
   1b5ec:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1b5ee:	4284      	cmp	r4, r0
   1b5f0:	d207      	bcs.n	1b602 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1b5f2:	4630      	mov	r0, r6
   1b5f4:	4622      	mov	r2, r4
   1b5f6:	f7ff ff20 	bl	1b43a <split_chunks>
		free_list_add(h, c_end);
   1b5fa:	4621      	mov	r1, r4
   1b5fc:	4630      	mov	r0, r6
   1b5fe:	f7ff fe7f 	bl	1b300 <free_list_add>
	void *cmem = &buf[c];
   1b602:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b606:	8873      	ldrh	r3, [r6, #2]
   1b608:	f043 0301 	orr.w	r3, r3, #1
   1b60c:	8073      	strh	r3, [r6, #2]
   1b60e:	e7a9      	b.n	1b564 <sys_heap_aligned_alloc+0x24>

0001b610 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1b610:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1b612:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1b614:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1b616:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1b61a:	f021 0107 	bic.w	r1, r1, #7
{
   1b61e:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1b620:	1acd      	subs	r5, r1, r3
   1b622:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1b624:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1b626:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1b62a:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   1b62e:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b630:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1b632:	2600      	movs	r6, #0
   1b634:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1b636:	f1c0 0020 	rsb	r0, r0, #32
   1b63a:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   1b63e:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   1b640:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1b642:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1b646:	4284      	cmp	r4, r0
   1b648:	d118      	bne.n	1b67c <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b64a:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b64c:	f040 0001 	orr.w	r0, r0, #1
   1b650:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1b652:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1b656:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b658:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1b65a:	801e      	strh	r6, [r3, #0]
   1b65c:	8067      	strh	r7, [r4, #2]
   1b65e:	195c      	adds	r4, r3, r5
   1b660:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1b664:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   1b668:	8066      	strh	r6, [r4, #2]
   1b66a:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b66c:	8850      	ldrh	r0, [r2, #2]
   1b66e:	f040 0001 	orr.w	r0, r0, #1
   1b672:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1b674:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1b676:	4618      	mov	r0, r3
   1b678:	f7ff be42 	b.w	1b300 <free_list_add>
		h->buckets[i].next = 0;
   1b67c:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   1b680:	e7e1      	b.n	1b646 <sys_heap_init+0x36>

0001b682 <_ldiv5>:
	uint32_t v_lo = *v;
   1b682:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1b686:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1b688:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1b68c:	fba2 2403 	umull	r2, r4, r2, r3
   1b690:	18d5      	adds	r5, r2, r3
   1b692:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1b696:	fba1 1303 	umull	r1, r3, r1, r3
   1b69a:	1852      	adds	r2, r2, r1
   1b69c:	eb44 0403 	adc.w	r4, r4, r3
   1b6a0:	1952      	adds	r2, r2, r5
   1b6a2:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1b6a6:	1889      	adds	r1, r1, r2
   1b6a8:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1b6ac:	e9c0 1300 	strd	r1, r3, [r0]
}
   1b6b0:	bd30      	pop	{r4, r5, pc}

0001b6b2 <_get_digit>:
	if (*digit_count > 0) {
   1b6b2:	680a      	ldr	r2, [r1, #0]
   1b6b4:	2a00      	cmp	r2, #0
{
   1b6b6:	b510      	push	{r4, lr}
   1b6b8:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1b6ba:	dd0f      	ble.n	1b6dc <_get_digit+0x2a>
		--*digit_count;
   1b6bc:	3a01      	subs	r2, #1
   1b6be:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   1b6c0:	681a      	ldr	r2, [r3, #0]
   1b6c2:	6844      	ldr	r4, [r0, #4]
   1b6c4:	200a      	movs	r0, #10
   1b6c6:	fba2 1200 	umull	r1, r2, r2, r0
   1b6ca:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1b6ce:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   1b6d0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1b6d4:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1b6d8:	3030      	adds	r0, #48	; 0x30
}
   1b6da:	bd10      	pop	{r4, pc}
		rval = '0';
   1b6dc:	2030      	movs	r0, #48	; 0x30
   1b6de:	e7fc      	b.n	1b6da <_get_digit+0x28>

0001b6e0 <encode_uint>:
{
   1b6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6e4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1b6e6:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1b6e8:	2b6f      	cmp	r3, #111	; 0x6f
{
   1b6ea:	4680      	mov	r8, r0
   1b6ec:	460f      	mov	r7, r1
   1b6ee:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1b6f0:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1b6f4:	d029      	beq.n	1b74a <encode_uint+0x6a>
   1b6f6:	d824      	bhi.n	1b742 <encode_uint+0x62>
		return 16;
   1b6f8:	2b58      	cmp	r3, #88	; 0x58
   1b6fa:	bf14      	ite	ne
   1b6fc:	260a      	movne	r6, #10
   1b6fe:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1b700:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1b704:	4632      	mov	r2, r6
   1b706:	2300      	movs	r3, #0
   1b708:	4640      	mov	r0, r8
   1b70a:	4639      	mov	r1, r7
   1b70c:	f7e5 f9fe 	bl	b0c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b710:	2a09      	cmp	r2, #9
   1b712:	b2d4      	uxtb	r4, r2
   1b714:	d81e      	bhi.n	1b754 <encode_uint+0x74>
   1b716:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1b718:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b71a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1b71c:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b720:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1b724:	d301      	bcc.n	1b72a <encode_uint+0x4a>
   1b726:	45d1      	cmp	r9, sl
   1b728:	d811      	bhi.n	1b74e <encode_uint+0x6e>
	if (conv->flag_hash) {
   1b72a:	782b      	ldrb	r3, [r5, #0]
   1b72c:	069b      	lsls	r3, r3, #26
   1b72e:	d505      	bpl.n	1b73c <encode_uint+0x5c>
		if (radix == 8) {
   1b730:	2e08      	cmp	r6, #8
   1b732:	d115      	bne.n	1b760 <encode_uint+0x80>
			conv->altform_0 = true;
   1b734:	78ab      	ldrb	r3, [r5, #2]
   1b736:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1b73a:	70ab      	strb	r3, [r5, #2]
}
   1b73c:	4648      	mov	r0, r9
   1b73e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1b742:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1b746:	2b70      	cmp	r3, #112	; 0x70
   1b748:	e7d7      	b.n	1b6fa <encode_uint+0x1a>
	switch (specifier) {
   1b74a:	2608      	movs	r6, #8
   1b74c:	e7d8      	b.n	1b700 <encode_uint+0x20>
		value /= radix;
   1b74e:	4680      	mov	r8, r0
   1b750:	460f      	mov	r7, r1
   1b752:	e7d7      	b.n	1b704 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1b754:	f1bb 0f19 	cmp.w	fp, #25
   1b758:	bf94      	ite	ls
   1b75a:	3437      	addls	r4, #55	; 0x37
   1b75c:	3457      	addhi	r4, #87	; 0x57
   1b75e:	e7db      	b.n	1b718 <encode_uint+0x38>
		} else if (radix == 16) {
   1b760:	2e10      	cmp	r6, #16
   1b762:	d1eb      	bne.n	1b73c <encode_uint+0x5c>
			conv->altform_0c = true;
   1b764:	78ab      	ldrb	r3, [r5, #2]
   1b766:	f043 0310 	orr.w	r3, r3, #16
   1b76a:	e7e6      	b.n	1b73a <encode_uint+0x5a>

0001b76c <outs>:
{
   1b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b770:	4607      	mov	r7, r0
   1b772:	4688      	mov	r8, r1
   1b774:	4615      	mov	r5, r2
   1b776:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1b778:	4614      	mov	r4, r2
   1b77a:	42b4      	cmp	r4, r6
   1b77c:	eba4 0005 	sub.w	r0, r4, r5
   1b780:	d302      	bcc.n	1b788 <outs+0x1c>
   1b782:	b93e      	cbnz	r6, 1b794 <outs+0x28>
   1b784:	7823      	ldrb	r3, [r4, #0]
   1b786:	b12b      	cbz	r3, 1b794 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1b788:	f814 0b01 	ldrb.w	r0, [r4], #1
   1b78c:	4641      	mov	r1, r8
   1b78e:	47b8      	blx	r7
		if (rc < 0) {
   1b790:	2800      	cmp	r0, #0
   1b792:	daf2      	bge.n	1b77a <outs+0xe>
}
   1b794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b798 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1b798:	4770      	bx	lr

0001b79a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
   1b79a:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1b79c:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
   1b7a0:	46a4      	mov	ip, r4

  return ret;
}
   1b7a2:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1b7a4:	4760      	bx	ip

0001b7a6 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   1b7a6:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   1b7a8:	6804      	ldr	r4, [r0, #0]
   1b7aa:	6880      	ldr	r0, [r0, #8]
   1b7ac:	46a4      	mov	ip, r4

  return ret;
}
   1b7ae:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   1b7b0:	4760      	bx	ip

0001b7b2 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
   1b7b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b7b4:	2301      	movs	r3, #1
{
   1b7b6:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b7b8:	aa01      	add	r2, sp, #4
   1b7ba:	2120      	movs	r1, #32
{
   1b7bc:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b7be:	f7ff ffec 	bl	1b79a <hts221_read_reg>

  if (ret == 0)
   1b7c2:	b958      	cbnz	r0, 1b7dc <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
   1b7c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b7c8:	f365 0301 	bfi	r3, r5, #0, #2
   1b7cc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b7d0:	aa01      	add	r2, sp, #4
   1b7d2:	2301      	movs	r3, #1
   1b7d4:	2120      	movs	r1, #32
   1b7d6:	4620      	mov	r0, r4
   1b7d8:	f7ff ffe5 	bl	1b7a6 <hts221_write_reg>
  }

  return ret;
}
   1b7dc:	b003      	add	sp, #12
   1b7de:	bd30      	pop	{r4, r5, pc}

0001b7e0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   1b7e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b7e2:	2301      	movs	r3, #1
{
   1b7e4:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b7e6:	aa01      	add	r2, sp, #4
   1b7e8:	2120      	movs	r1, #32
{
   1b7ea:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b7ec:	f7ff ffd5 	bl	1b79a <hts221_read_reg>

  if (ret == 0)
   1b7f0:	b958      	cbnz	r0, 1b80a <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
   1b7f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b7f6:	f365 0382 	bfi	r3, r5, #2, #1
   1b7fa:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b7fe:	aa01      	add	r2, sp, #4
   1b800:	2301      	movs	r3, #1
   1b802:	2120      	movs	r1, #32
   1b804:	4620      	mov	r0, r4
   1b806:	f7ff ffce 	bl	1b7a6 <hts221_write_reg>
  }

  return ret;
}
   1b80a:	b003      	add	sp, #12
   1b80c:	bd30      	pop	{r4, r5, pc}

0001b80e <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   1b80e:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
   1b810:	2301      	movs	r3, #1
   1b812:	210f      	movs	r1, #15
   1b814:	f7ff bfc1 	b.w	1b79a <hts221_read_reg>

0001b818 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
   1b818:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b81a:	2301      	movs	r3, #1
{
   1b81c:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b81e:	aa01      	add	r2, sp, #4
   1b820:	2120      	movs	r1, #32
{
   1b822:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b824:	f7ff ffb9 	bl	1b79a <hts221_read_reg>

  if (ret == 0)
   1b828:	b958      	cbnz	r0, 1b842 <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
   1b82a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b82e:	f365 13c7 	bfi	r3, r5, #7, #1
   1b832:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1b836:	aa01      	add	r2, sp, #4
   1b838:	2301      	movs	r3, #1
   1b83a:	2120      	movs	r1, #32
   1b83c:	4620      	mov	r0, r4
   1b83e:	f7ff ffb2 	bl	1b7a6 <hts221_write_reg>
  }

  return ret;
}
   1b842:	b003      	add	sp, #12
   1b844:	bd30      	pop	{r4, r5, pc}

0001b846 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1b846:	b538      	push	{r3, r4, r5, lr}
   1b848:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1b84a:	42ab      	cmp	r3, r5
{
   1b84c:	4611      	mov	r1, r2
   1b84e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1b850:	d804      	bhi.n	1b85c <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1b852:	461a      	mov	r2, r3
   1b854:	f000 fa69 	bl	1bd2a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1b858:	4620      	mov	r0, r4
   1b85a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1b85c:	2400      	movs	r4, #0
   1b85e:	e7fb      	b.n	1b858 <_copy+0x12>

0001b860 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1b860:	f000 ba6e 	b.w	1bd40 <memset>

0001b864 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1b864:	09c3      	lsrs	r3, r0, #7
   1b866:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b86a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b86e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1b872:	b2c0      	uxtb	r0, r0
   1b874:	4770      	bx	lr

0001b876 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1b876:	78cb      	ldrb	r3, [r1, #3]
   1b878:	7802      	ldrb	r2, [r0, #0]
   1b87a:	4053      	eors	r3, r2
   1b87c:	7003      	strb	r3, [r0, #0]
   1b87e:	884b      	ldrh	r3, [r1, #2]
   1b880:	7842      	ldrb	r2, [r0, #1]
   1b882:	4053      	eors	r3, r2
   1b884:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1b886:	680a      	ldr	r2, [r1, #0]
   1b888:	7883      	ldrb	r3, [r0, #2]
   1b88a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b88e:	7083      	strb	r3, [r0, #2]
   1b890:	680a      	ldr	r2, [r1, #0]
   1b892:	78c3      	ldrb	r3, [r0, #3]
   1b894:	4053      	eors	r3, r2
   1b896:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1b898:	79cb      	ldrb	r3, [r1, #7]
   1b89a:	7902      	ldrb	r2, [r0, #4]
   1b89c:	4053      	eors	r3, r2
   1b89e:	7103      	strb	r3, [r0, #4]
   1b8a0:	88cb      	ldrh	r3, [r1, #6]
   1b8a2:	7942      	ldrb	r2, [r0, #5]
   1b8a4:	4053      	eors	r3, r2
   1b8a6:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1b8a8:	684a      	ldr	r2, [r1, #4]
   1b8aa:	7983      	ldrb	r3, [r0, #6]
   1b8ac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b8b0:	7183      	strb	r3, [r0, #6]
   1b8b2:	684a      	ldr	r2, [r1, #4]
   1b8b4:	79c3      	ldrb	r3, [r0, #7]
   1b8b6:	4053      	eors	r3, r2
   1b8b8:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1b8ba:	7acb      	ldrb	r3, [r1, #11]
   1b8bc:	7a02      	ldrb	r2, [r0, #8]
   1b8be:	4053      	eors	r3, r2
   1b8c0:	7203      	strb	r3, [r0, #8]
   1b8c2:	7a42      	ldrb	r2, [r0, #9]
   1b8c4:	894b      	ldrh	r3, [r1, #10]
   1b8c6:	4053      	eors	r3, r2
   1b8c8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1b8ca:	688a      	ldr	r2, [r1, #8]
   1b8cc:	7a83      	ldrb	r3, [r0, #10]
   1b8ce:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b8d2:	7283      	strb	r3, [r0, #10]
   1b8d4:	688a      	ldr	r2, [r1, #8]
   1b8d6:	7ac3      	ldrb	r3, [r0, #11]
   1b8d8:	4053      	eors	r3, r2
   1b8da:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1b8dc:	7bcb      	ldrb	r3, [r1, #15]
   1b8de:	7b02      	ldrb	r2, [r0, #12]
   1b8e0:	4053      	eors	r3, r2
   1b8e2:	7303      	strb	r3, [r0, #12]
   1b8e4:	89cb      	ldrh	r3, [r1, #14]
   1b8e6:	7b42      	ldrb	r2, [r0, #13]
   1b8e8:	4053      	eors	r3, r2
   1b8ea:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1b8ec:	68ca      	ldr	r2, [r1, #12]
   1b8ee:	7b83      	ldrb	r3, [r0, #14]
   1b8f0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b8f4:	7383      	strb	r3, [r0, #14]
   1b8f6:	68ca      	ldr	r2, [r1, #12]
   1b8f8:	7bc3      	ldrb	r3, [r0, #15]
   1b8fa:	4053      	eors	r3, r2
   1b8fc:	73c3      	strb	r3, [r0, #15]
}
   1b8fe:	4770      	bx	lr

0001b900 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1b900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b902:	7802      	ldrb	r2, [r0, #0]
   1b904:	f88d 2000 	strb.w	r2, [sp]
   1b908:	7942      	ldrb	r2, [r0, #5]
   1b90a:	f88d 2001 	strb.w	r2, [sp, #1]
   1b90e:	7a82      	ldrb	r2, [r0, #10]
   1b910:	f88d 2002 	strb.w	r2, [sp, #2]
   1b914:	7bc2      	ldrb	r2, [r0, #15]
   1b916:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1b91a:	7902      	ldrb	r2, [r0, #4]
   1b91c:	f88d 2004 	strb.w	r2, [sp, #4]
   1b920:	7a42      	ldrb	r2, [r0, #9]
   1b922:	f88d 2005 	strb.w	r2, [sp, #5]
   1b926:	7b82      	ldrb	r2, [r0, #14]
   1b928:	f88d 2006 	strb.w	r2, [sp, #6]
   1b92c:	78c2      	ldrb	r2, [r0, #3]
   1b92e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1b932:	7a02      	ldrb	r2, [r0, #8]
   1b934:	f88d 2008 	strb.w	r2, [sp, #8]
   1b938:	7b42      	ldrb	r2, [r0, #13]
   1b93a:	f88d 2009 	strb.w	r2, [sp, #9]
   1b93e:	7882      	ldrb	r2, [r0, #2]
   1b940:	f88d 200a 	strb.w	r2, [sp, #10]
   1b944:	79c2      	ldrb	r2, [r0, #7]
   1b946:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b94a:	7b02      	ldrb	r2, [r0, #12]
   1b94c:	f88d 200c 	strb.w	r2, [sp, #12]
   1b950:	7842      	ldrb	r2, [r0, #1]
   1b952:	7ac3      	ldrb	r3, [r0, #11]
   1b954:	f88d 200d 	strb.w	r2, [sp, #13]
   1b958:	7982      	ldrb	r2, [r0, #6]
   1b95a:	f88d 200e 	strb.w	r2, [sp, #14]
   1b95e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b962:	2310      	movs	r3, #16
   1b964:	466a      	mov	r2, sp
   1b966:	4619      	mov	r1, r3
   1b968:	f7ff ff6d 	bl	1b846 <_copy>
}
   1b96c:	b005      	add	sp, #20
   1b96e:	f85d fb04 	ldr.w	pc, [sp], #4

0001b972 <mult_row_column>:
{
   1b972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b974:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b976:	7808      	ldrb	r0, [r1, #0]
{
   1b978:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b97a:	f7ff ff73 	bl	1b864 <_double_byte>
   1b97e:	4605      	mov	r5, r0
   1b980:	7860      	ldrb	r0, [r4, #1]
   1b982:	f7ff ff6f 	bl	1b864 <_double_byte>
   1b986:	78a2      	ldrb	r2, [r4, #2]
   1b988:	7863      	ldrb	r3, [r4, #1]
   1b98a:	4053      	eors	r3, r2
   1b98c:	78e2      	ldrb	r2, [r4, #3]
   1b98e:	4053      	eors	r3, r2
   1b990:	405d      	eors	r5, r3
   1b992:	4045      	eors	r5, r0
   1b994:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b996:	7860      	ldrb	r0, [r4, #1]
   1b998:	7827      	ldrb	r7, [r4, #0]
   1b99a:	f7ff ff63 	bl	1b864 <_double_byte>
   1b99e:	4605      	mov	r5, r0
   1b9a0:	78a0      	ldrb	r0, [r4, #2]
   1b9a2:	f7ff ff5f 	bl	1b864 <_double_byte>
   1b9a6:	78a3      	ldrb	r3, [r4, #2]
   1b9a8:	405f      	eors	r7, r3
   1b9aa:	78e3      	ldrb	r3, [r4, #3]
   1b9ac:	405f      	eors	r7, r3
   1b9ae:	407d      	eors	r5, r7
   1b9b0:	4045      	eors	r5, r0
   1b9b2:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b9b4:	78a0      	ldrb	r0, [r4, #2]
   1b9b6:	7865      	ldrb	r5, [r4, #1]
   1b9b8:	7827      	ldrb	r7, [r4, #0]
   1b9ba:	f7ff ff53 	bl	1b864 <_double_byte>
   1b9be:	406f      	eors	r7, r5
   1b9c0:	4605      	mov	r5, r0
   1b9c2:	78e0      	ldrb	r0, [r4, #3]
   1b9c4:	f7ff ff4e 	bl	1b864 <_double_byte>
   1b9c8:	78e3      	ldrb	r3, [r4, #3]
   1b9ca:	405f      	eors	r7, r3
   1b9cc:	407d      	eors	r5, r7
   1b9ce:	4045      	eors	r5, r0
   1b9d0:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1b9d2:	7820      	ldrb	r0, [r4, #0]
   1b9d4:	f7ff ff46 	bl	1b864 <_double_byte>
   1b9d8:	7863      	ldrb	r3, [r4, #1]
   1b9da:	7825      	ldrb	r5, [r4, #0]
   1b9dc:	405d      	eors	r5, r3
   1b9de:	78a3      	ldrb	r3, [r4, #2]
   1b9e0:	405d      	eors	r5, r3
   1b9e2:	4045      	eors	r5, r0
   1b9e4:	78e0      	ldrb	r0, [r4, #3]
   1b9e6:	f7ff ff3d 	bl	1b864 <_double_byte>
   1b9ea:	b2ed      	uxtb	r5, r5
   1b9ec:	4045      	eors	r5, r0
   1b9ee:	70f5      	strb	r5, [r6, #3]
}
   1b9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b9f2 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1b9f2:	b570      	push	{r4, r5, r6, lr}
   1b9f4:	4614      	mov	r4, r2
   1b9f6:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1b9f8:	4605      	mov	r5, r0
   1b9fa:	2800      	cmp	r0, #0
   1b9fc:	d049      	beq.n	1ba92 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1b9fe:	2900      	cmp	r1, #0
   1ba00:	d049      	beq.n	1ba96 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1ba02:	2a00      	cmp	r2, #0
   1ba04:	d049      	beq.n	1ba9a <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1ba06:	2310      	movs	r3, #16
   1ba08:	460a      	mov	r2, r1
   1ba0a:	4668      	mov	r0, sp
   1ba0c:	4619      	mov	r1, r3
   1ba0e:	f7ff ff1a 	bl	1b846 <_copy>
	add_round_key(state, s->words);
   1ba12:	4621      	mov	r1, r4
   1ba14:	4668      	mov	r0, sp
   1ba16:	f7ff ff2e 	bl	1b876 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1ba1a:	3410      	adds	r4, #16
   1ba1c:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1ba20:	4668      	mov	r0, sp
   1ba22:	f7ea fb11 	bl	6048 <sub_bytes>
		shift_rows(state);
   1ba26:	4668      	mov	r0, sp
   1ba28:	f7ff ff6a 	bl	1b900 <shift_rows>
	mult_row_column(t, s);
   1ba2c:	4669      	mov	r1, sp
   1ba2e:	a804      	add	r0, sp, #16
   1ba30:	f7ff ff9f 	bl	1b972 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1ba34:	a901      	add	r1, sp, #4
   1ba36:	a805      	add	r0, sp, #20
   1ba38:	f7ff ff9b 	bl	1b972 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1ba3c:	a902      	add	r1, sp, #8
   1ba3e:	a806      	add	r0, sp, #24
   1ba40:	f7ff ff97 	bl	1b972 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1ba44:	a903      	add	r1, sp, #12
   1ba46:	a807      	add	r0, sp, #28
   1ba48:	f7ff ff93 	bl	1b972 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1ba4c:	2310      	movs	r3, #16
   1ba4e:	4619      	mov	r1, r3
   1ba50:	eb0d 0203 	add.w	r2, sp, r3
   1ba54:	4668      	mov	r0, sp
   1ba56:	f7ff fef6 	bl	1b846 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1ba5a:	4621      	mov	r1, r4
   1ba5c:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1ba5e:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1ba60:	f7ff ff09 	bl	1b876 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1ba64:	42a6      	cmp	r6, r4
   1ba66:	d1db      	bne.n	1ba20 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1ba68:	f7ea faee 	bl	6048 <sub_bytes>
	shift_rows(state);
   1ba6c:	4668      	mov	r0, sp
   1ba6e:	f7ff ff47 	bl	1b900 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1ba72:	4631      	mov	r1, r6
   1ba74:	4668      	mov	r0, sp
   1ba76:	f7ff fefe 	bl	1b876 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1ba7a:	2310      	movs	r3, #16
   1ba7c:	4619      	mov	r1, r3
   1ba7e:	466a      	mov	r2, sp
   1ba80:	4628      	mov	r0, r5
   1ba82:	f7ff fee0 	bl	1b846 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1ba86:	4668      	mov	r0, sp
   1ba88:	2210      	movs	r2, #16
   1ba8a:	2100      	movs	r1, #0
   1ba8c:	f7ff fee8 	bl	1b860 <_set>

	return TC_CRYPTO_SUCCESS;
   1ba90:	2001      	movs	r0, #1
}
   1ba92:	b008      	add	sp, #32
   1ba94:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1ba96:	4608      	mov	r0, r1
   1ba98:	e7fb      	b.n	1ba92 <tc_aes_encrypt+0xa0>
   1ba9a:	4610      	mov	r0, r2
   1ba9c:	e7f9      	b.n	1ba92 <tc_aes_encrypt+0xa0>

0001ba9e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1ba9e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1baa0:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1baa2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1baa4:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1baa8:	2b00      	cmp	r3, #0
   1baaa:	bfb4      	ite	lt
   1baac:	2387      	movlt	r3, #135	; 0x87
   1baae:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1bab0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1bab4:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1bab8:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1baba:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1babe:	d002      	beq.n	1bac6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1bac0:	7813      	ldrb	r3, [r2, #0]
   1bac2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1bac4:	e7f4      	b.n	1bab0 <gf_double+0x12>
	}
}
   1bac6:	bd10      	pop	{r4, pc}

0001bac8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1bac8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1baca:	b120      	cbz	r0, 1bad6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1bacc:	2258      	movs	r2, #88	; 0x58
   1bace:	2100      	movs	r1, #0
   1bad0:	f7ff fec6 	bl	1b860 <_set>
   1bad4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1bad6:	bd08      	pop	{r3, pc}

0001bad8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1bad8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1bada:	4604      	mov	r4, r0
   1badc:	b188      	cbz	r0, 1bb02 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1bade:	2210      	movs	r2, #16
   1bae0:	2100      	movs	r1, #0
   1bae2:	f7ff febd 	bl	1b860 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1bae6:	2210      	movs	r2, #16
   1bae8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1baec:	2100      	movs	r1, #0
   1baee:	f7ff feb7 	bl	1b860 <_set>
	s->leftover_offset = 0;
   1baf2:	2300      	movs	r3, #0
   1baf4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1baf6:	2200      	movs	r2, #0
   1baf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1bafc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1bb00:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1bb02:	bd10      	pop	{r4, pc}

0001bb04 <tc_cmac_setup>:
{
   1bb04:	b570      	push	{r4, r5, r6, lr}
   1bb06:	460d      	mov	r5, r1
   1bb08:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1bb0a:	4604      	mov	r4, r0
   1bb0c:	b310      	cbz	r0, 1bb54 <tc_cmac_setup+0x50>
   1bb0e:	b311      	cbz	r1, 1bb56 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1bb10:	2258      	movs	r2, #88	; 0x58
   1bb12:	2100      	movs	r1, #0
   1bb14:	f7ff fea4 	bl	1b860 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1bb18:	4629      	mov	r1, r5
	s->sched = sched;
   1bb1a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1bb1c:	4630      	mov	r0, r6
   1bb1e:	f7ea fa9f 	bl	6060 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1bb22:	2210      	movs	r2, #16
   1bb24:	2100      	movs	r1, #0
   1bb26:	4620      	mov	r0, r4
   1bb28:	f7ff fe9a 	bl	1b860 <_set>
	gf_double (s->K1, s->iv);
   1bb2c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1bb30:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bb32:	4621      	mov	r1, r4
   1bb34:	4620      	mov	r0, r4
   1bb36:	f7ff ff5c 	bl	1b9f2 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1bb3a:	4621      	mov	r1, r4
   1bb3c:	4628      	mov	r0, r5
   1bb3e:	f7ff ffae 	bl	1ba9e <gf_double>
	gf_double (s->K2, s->K1);
   1bb42:	4629      	mov	r1, r5
   1bb44:	f104 0020 	add.w	r0, r4, #32
   1bb48:	f7ff ffa9 	bl	1ba9e <gf_double>
	tc_cmac_init(s);
   1bb4c:	4620      	mov	r0, r4
   1bb4e:	f7ff ffc3 	bl	1bad8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1bb52:	2001      	movs	r0, #1
}
   1bb54:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1bb56:	4608      	mov	r0, r1
   1bb58:	e7fc      	b.n	1bb54 <tc_cmac_setup+0x50>

0001bb5a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1bb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb5e:	460d      	mov	r5, r1
   1bb60:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1bb62:	4604      	mov	r4, r0
   1bb64:	2800      	cmp	r0, #0
   1bb66:	d061      	beq.n	1bc2c <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1bb68:	b912      	cbnz	r2, 1bb70 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1bb6a:	2001      	movs	r0, #1
}
   1bb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1bb70:	2900      	cmp	r1, #0
   1bb72:	d05b      	beq.n	1bc2c <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1bb74:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1bb78:	ea53 0102 	orrs.w	r1, r3, r2
   1bb7c:	d056      	beq.n	1bc2c <tc_cmac_update+0xd2>
	s->countdown--;
   1bb7e:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1bb80:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1bb84:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1bb88:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1bb8c:	f1b8 0f00 	cmp.w	r8, #0
   1bb90:	d02a      	beq.n	1bbe8 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1bb92:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1bb96:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1bb9a:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1bb9c:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1bb9e:	d208      	bcs.n	1bbb2 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1bba0:	462a      	mov	r2, r5
   1bba2:	4633      	mov	r3, r6
   1bba4:	4631      	mov	r1, r6
   1bba6:	f7ff fe4e 	bl	1b846 <_copy>
			s->leftover_offset += data_length;
   1bbaa:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1bbac:	4432      	add	r2, r6
   1bbae:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1bbb0:	e7db      	b.n	1bb6a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1bbb2:	463b      	mov	r3, r7
   1bbb4:	462a      	mov	r2, r5
   1bbb6:	4639      	mov	r1, r7
   1bbb8:	f7ff fe45 	bl	1b846 <_copy>
		data_length -= remaining_space;
   1bbbc:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1bbbe:	2300      	movs	r3, #0
   1bbc0:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1bbc2:	4446      	add	r6, r8
		data += remaining_space;
   1bbc4:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bbc6:	1e63      	subs	r3, r4, #1
   1bbc8:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1bbcc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bbd0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bbd4:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1bbd6:	ea82 0200 	eor.w	r2, r2, r0
   1bbda:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bbdc:	d1f6      	bne.n	1bbcc <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1bbde:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bbe0:	4621      	mov	r1, r4
   1bbe2:	4620      	mov	r0, r4
   1bbe4:	f7ff ff05 	bl	1b9f2 <tc_aes_encrypt>
   1bbe8:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1bbec:	2e10      	cmp	r6, #16
   1bbee:	d80a      	bhi.n	1bc06 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1bbf0:	2e00      	cmp	r6, #0
   1bbf2:	d0ba      	beq.n	1bb6a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1bbf4:	4633      	mov	r3, r6
   1bbf6:	462a      	mov	r2, r5
   1bbf8:	4631      	mov	r1, r6
   1bbfa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1bbfe:	f7ff fe22 	bl	1b846 <_copy>
		s->leftover_offset = data_length;
   1bc02:	6466      	str	r6, [r4, #68]	; 0x44
   1bc04:	e7b1      	b.n	1bb6a <tc_cmac_update+0x10>
   1bc06:	1e63      	subs	r3, r4, #1
   1bc08:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1bc0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bc0e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc12:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1bc14:	ea82 0200 	eor.w	r2, r2, r0
   1bc18:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc1a:	d1f6      	bne.n	1bc0a <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1bc1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bc1e:	4621      	mov	r1, r4
   1bc20:	4620      	mov	r0, r4
   1bc22:	f7ff fee6 	bl	1b9f2 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1bc26:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1bc28:	3e10      	subs	r6, #16
   1bc2a:	e7df      	b.n	1bbec <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1bc2c:	2000      	movs	r0, #0
   1bc2e:	e79d      	b.n	1bb6c <tc_cmac_update+0x12>

0001bc30 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1bc30:	b570      	push	{r4, r5, r6, lr}
   1bc32:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1bc34:	4605      	mov	r5, r0
   1bc36:	b1e8      	cbz	r0, 1bc74 <tc_cmac_final+0x44>
   1bc38:	b369      	cbz	r1, 1bc96 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1bc3a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1bc3c:	2a10      	cmp	r2, #16
   1bc3e:	d11a      	bne.n	1bc76 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1bc40:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc42:	1e63      	subs	r3, r4, #1
   1bc44:	3901      	subs	r1, #1
   1bc46:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1bc4a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bc4e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1bc52:	4072      	eors	r2, r6
   1bc54:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc58:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1bc5a:	ea82 0206 	eor.w	r2, r2, r6
   1bc5e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1bc60:	d1f3      	bne.n	1bc4a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1bc62:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1bc64:	4621      	mov	r1, r4
   1bc66:	4628      	mov	r0, r5
   1bc68:	f7ff fec3 	bl	1b9f2 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1bc6c:	4620      	mov	r0, r4
   1bc6e:	f7ff ff2b 	bl	1bac8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1bc72:	2001      	movs	r0, #1
}
   1bc74:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1bc76:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1bc7a:	2100      	movs	r1, #0
   1bc7c:	f1c2 0210 	rsb	r2, r2, #16
   1bc80:	4420      	add	r0, r4
   1bc82:	f7ff fded 	bl	1b860 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1bc86:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1bc88:	4423      	add	r3, r4
   1bc8a:	2280      	movs	r2, #128	; 0x80
   1bc8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1bc90:	f104 0120 	add.w	r1, r4, #32
   1bc94:	e7d5      	b.n	1bc42 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1bc96:	4608      	mov	r0, r1
   1bc98:	e7ec      	b.n	1bc74 <tc_cmac_final+0x44>

0001bc9a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1bc9a:	f003 ba1e 	b.w	1f0da <z_fatal_error>

0001bc9e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1bc9e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1bca0:	6800      	ldr	r0, [r0, #0]
   1bca2:	f003 ba1a 	b.w	1f0da <z_fatal_error>

0001bca6 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1bca6:	2100      	movs	r1, #0
   1bca8:	2001      	movs	r0, #1
   1bcaa:	f7ff bff6 	b.w	1bc9a <z_arm_fatal_error>

0001bcae <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1bcae:	b508      	push	{r3, lr}
	handler();
   1bcb0:	f7ea fa9e 	bl	61f0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1bcb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1bcb8:	f7ea bb7e 	b.w	63b8 <z_arm_exc_exit>

0001bcbc <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1bcbc:	3901      	subs	r1, #1
   1bcbe:	4603      	mov	r3, r0
   1bcc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bcc4:	b90a      	cbnz	r2, 1bcca <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1bcc6:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1bcc8:	4770      	bx	lr
		*d = *s;
   1bcca:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1bcce:	e7f7      	b.n	1bcc0 <strcpy+0x4>

0001bcd0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1bcd0:	4603      	mov	r3, r0
	size_t n = 0;
   1bcd2:	2000      	movs	r0, #0

	while (*s != '\0') {
   1bcd4:	5c1a      	ldrb	r2, [r3, r0]
   1bcd6:	b902      	cbnz	r2, 1bcda <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1bcd8:	4770      	bx	lr
		n++;
   1bcda:	3001      	adds	r0, #1
   1bcdc:	e7fa      	b.n	1bcd4 <strlen+0x4>

0001bcde <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1bcde:	4603      	mov	r3, r0
	size_t n = 0;
   1bce0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1bce2:	5c1a      	ldrb	r2, [r3, r0]
   1bce4:	b10a      	cbz	r2, 1bcea <strnlen+0xc>
   1bce6:	4288      	cmp	r0, r1
   1bce8:	d100      	bne.n	1bcec <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1bcea:	4770      	bx	lr
		n++;
   1bcec:	3001      	adds	r0, #1
   1bcee:	e7f8      	b.n	1bce2 <strnlen+0x4>

0001bcf0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1bcf0:	1e43      	subs	r3, r0, #1
   1bcf2:	3901      	subs	r1, #1
   1bcf4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bcf8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1bcfc:	4282      	cmp	r2, r0
   1bcfe:	d101      	bne.n	1bd04 <strcmp+0x14>
   1bd00:	2a00      	cmp	r2, #0
   1bd02:	d1f7      	bne.n	1bcf4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1bd04:	1a10      	subs	r0, r2, r0
   1bd06:	4770      	bx	lr

0001bd08 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1bd08:	b510      	push	{r4, lr}
   1bd0a:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1bd0c:	b15a      	cbz	r2, 1bd26 <memcmp+0x1e>
   1bd0e:	3901      	subs	r1, #1
   1bd10:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1bd12:	f813 0b01 	ldrb.w	r0, [r3], #1
   1bd16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bd1a:	42a3      	cmp	r3, r4
   1bd1c:	d001      	beq.n	1bd22 <memcmp+0x1a>
   1bd1e:	4290      	cmp	r0, r2
   1bd20:	d0f7      	beq.n	1bd12 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1bd22:	1a80      	subs	r0, r0, r2
}
   1bd24:	bd10      	pop	{r4, pc}
		return 0;
   1bd26:	4610      	mov	r0, r2
   1bd28:	e7fc      	b.n	1bd24 <memcmp+0x1c>

0001bd2a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1bd2a:	b510      	push	{r4, lr}
   1bd2c:	1e43      	subs	r3, r0, #1
   1bd2e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1bd30:	4291      	cmp	r1, r2
   1bd32:	d100      	bne.n	1bd36 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1bd34:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1bd36:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bd3a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1bd3e:	e7f7      	b.n	1bd30 <memcpy+0x6>

0001bd40 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1bd40:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1bd42:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1bd44:	4603      	mov	r3, r0
	while (n > 0) {
   1bd46:	4293      	cmp	r3, r2
   1bd48:	d100      	bne.n	1bd4c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1bd4a:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1bd4c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bd50:	e7f9      	b.n	1bd46 <memset+0x6>

0001bd52 <_stdout_hook_default>:
}
   1bd52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bd56:	4770      	bx	lr

0001bd58 <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   1bd58:	f7ea bd38 	b.w	67cc <z_impl_zephyr_fputc>

0001bd5c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1bd5c:	684b      	ldr	r3, [r1, #4]
   1bd5e:	2b01      	cmp	r3, #1
   1bd60:	dd07      	ble.n	1bd72 <sprintf_out+0x16>
		*(p->ptr) = c;
   1bd62:	680b      	ldr	r3, [r1, #0]
   1bd64:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1bd66:	680b      	ldr	r3, [r1, #0]
   1bd68:	3301      	adds	r3, #1
   1bd6a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1bd6c:	684b      	ldr	r3, [r1, #4]
   1bd6e:	3b01      	subs	r3, #1
   1bd70:	604b      	str	r3, [r1, #4]
}
   1bd72:	2000      	movs	r0, #0
   1bd74:	4770      	bx	lr

0001bd76 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1bd76:	b084      	sub	sp, #16
   1bd78:	ab04      	add	r3, sp, #16
   1bd7a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1bd7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1bd82:	2b06      	cmp	r3, #6
   1bd84:	d108      	bne.n	1bd98 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1bd86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bd8a:	2201      	movs	r2, #1
   1bd8c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1bd90:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1bd94:	bf20      	wfe
    while (true)
   1bd96:	e7fd      	b.n	1bd94 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1bd98:	b004      	add	sp, #16
   1bd9a:	4770      	bx	lr

0001bd9c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1bd9c:	b084      	sub	sp, #16
   1bd9e:	ab04      	add	r3, sp, #16
   1bda0:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1bda4:	2300      	movs	r3, #0
   1bda6:	f383 8811 	msr	BASEPRI, r3
   1bdaa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1bdae:	b004      	add	sp, #16
   1bdb0:	4770      	bx	lr

0001bdb2 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1bdb2:	b530      	push	{r4, r5, lr}
   1bdb4:	b085      	sub	sp, #20
   1bdb6:	4604      	mov	r4, r0
   1bdb8:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1bdba:	4668      	mov	r0, sp
   1bdbc:	2203      	movs	r2, #3
   1bdbe:	f7ff ffb4 	bl	1bd2a <memcpy>
	(void)memset(res + 3, 0, 13);
   1bdc2:	220d      	movs	r2, #13
   1bdc4:	2100      	movs	r1, #0
   1bdc6:	f10d 0003 	add.w	r0, sp, #3
   1bdca:	f7ff ffb9 	bl	1bd40 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1bdce:	4620      	mov	r0, r4
   1bdd0:	466a      	mov	r2, sp
   1bdd2:	4669      	mov	r1, sp
   1bdd4:	f7f1 fa60 	bl	d298 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1bdd8:	4604      	mov	r4, r0
   1bdda:	b920      	cbnz	r0, 1bde6 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1bddc:	2203      	movs	r2, #3
   1bdde:	4669      	mov	r1, sp
   1bde0:	4628      	mov	r0, r5
   1bde2:	f7ff ffa2 	bl	1bd2a <memcpy>

	return 0;
}
   1bde6:	4620      	mov	r0, r4
   1bde8:	b005      	add	sp, #20
   1bdea:	bd30      	pop	{r4, r5, pc}

0001bdec <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1bdec:	b513      	push	{r0, r1, r4, lr}
   1bdee:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1bdf0:	aa01      	add	r2, sp, #4
   1bdf2:	3103      	adds	r1, #3
   1bdf4:	f7ff ffdd 	bl	1bdb2 <ah>
	if (err) {
   1bdf8:	b948      	cbnz	r0, 1be0e <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1bdfa:	2203      	movs	r2, #3
   1bdfc:	a901      	add	r1, sp, #4
   1bdfe:	4620      	mov	r0, r4
   1be00:	f7ff ff82 	bl	1bd08 <memcmp>
   1be04:	fab0 f080 	clz	r0, r0
   1be08:	0940      	lsrs	r0, r0, #5
}
   1be0a:	b002      	add	sp, #8
   1be0c:	bd10      	pop	{r4, pc}
		return false;
   1be0e:	2000      	movs	r0, #0
   1be10:	e7fb      	b.n	1be0a <bt_rpa_irk_matches+0x1e>

0001be12 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1be12:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1be14:	1cce      	adds	r6, r1, #3
{
   1be16:	4605      	mov	r5, r0
   1be18:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1be1a:	4630      	mov	r0, r6
   1be1c:	2103      	movs	r1, #3
   1be1e:	f7f1 fa39 	bl	d294 <bt_rand>
	if (err) {
   1be22:	b960      	cbnz	r0, 1be3e <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1be24:	7963      	ldrb	r3, [r4, #5]
   1be26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1be2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1be2e:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1be30:	4622      	mov	r2, r4
   1be32:	4631      	mov	r1, r6
   1be34:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1be36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1be3a:	f7ff bfba 	b.w	1bdb2 <ah>
}
   1be3e:	bd70      	pop	{r4, r5, r6, pc}

0001be40 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1be40:	b510      	push	{r4, lr}
   1be42:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1be44:	7801      	ldrb	r1, [r0, #0]
   1be46:	7822      	ldrb	r2, [r4, #0]
   1be48:	428a      	cmp	r2, r1
{
   1be4a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1be4c:	d00f      	beq.n	1be6e <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1be4e:	4669      	mov	r1, sp
   1be50:	f7ea fd34 	bl	68bc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1be54:	a905      	add	r1, sp, #20
   1be56:	4620      	mov	r0, r4
   1be58:	f7ea fd30 	bl	68bc <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1be5c:	2210      	movs	r2, #16
   1be5e:	f10d 0115 	add.w	r1, sp, #21
   1be62:	f10d 0001 	add.w	r0, sp, #1
   1be66:	f7ff ff4f 	bl	1bd08 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1be6a:	b00a      	add	sp, #40	; 0x28
   1be6c:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1be6e:	2a01      	cmp	r2, #1
   1be70:	d006      	beq.n	1be80 <bt_uuid_cmp+0x40>
   1be72:	2a02      	cmp	r2, #2
   1be74:	d007      	beq.n	1be86 <bt_uuid_cmp+0x46>
   1be76:	b972      	cbnz	r2, 1be96 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1be78:	8840      	ldrh	r0, [r0, #2]
   1be7a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1be7c:	1ac0      	subs	r0, r0, r3
   1be7e:	e7f4      	b.n	1be6a <bt_uuid_cmp+0x2a>
   1be80:	6840      	ldr	r0, [r0, #4]
   1be82:	6863      	ldr	r3, [r4, #4]
   1be84:	e7fa      	b.n	1be7c <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1be86:	2210      	movs	r2, #16
   1be88:	1c61      	adds	r1, r4, #1
   1be8a:	3001      	adds	r0, #1
}
   1be8c:	b00a      	add	sp, #40	; 0x28
   1be8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1be92:	f7ff bf39 	b.w	1bd08 <memcmp>
	switch (u1->type) {
   1be96:	f06f 0015 	mvn.w	r0, #21
   1be9a:	e7e6      	b.n	1be6a <bt_uuid_cmp+0x2a>

0001be9c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1be9c:	2a04      	cmp	r2, #4
{
   1be9e:	b510      	push	{r4, lr}
	switch (data_len) {
   1bea0:	d00a      	beq.n	1beb8 <bt_uuid_create+0x1c>
   1bea2:	2a10      	cmp	r2, #16
   1bea4:	d00d      	beq.n	1bec2 <bt_uuid_create+0x26>
   1bea6:	2a02      	cmp	r2, #2
   1bea8:	f04f 0300 	mov.w	r3, #0
   1beac:	d10f      	bne.n	1bece <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1beae:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1beb0:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1beb2:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1beb4:	2001      	movs	r0, #1
}
   1beb6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1beb8:	2301      	movs	r3, #1
   1beba:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1bebc:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1bebe:	6042      	str	r2, [r0, #4]
		break;
   1bec0:	e7f8      	b.n	1beb4 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1bec2:	2302      	movs	r3, #2
   1bec4:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1bec8:	f7ff ff2f 	bl	1bd2a <memcpy>
		break;
   1becc:	e7f2      	b.n	1beb4 <bt_uuid_create+0x18>
	switch (data_len) {
   1bece:	4618      	mov	r0, r3
   1bed0:	e7f1      	b.n	1beb6 <bt_uuid_create+0x1a>

0001bed2 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1bed2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1bed4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1bed6:	2106      	movs	r1, #6
{
   1bed8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1beda:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1bede:	f7f1 f9d9 	bl	d294 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1bee2:	b918      	cbnz	r0, 1beec <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1bee4:	79a3      	ldrb	r3, [r4, #6]
   1bee6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1beea:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1beec:	bd10      	pop	{r4, pc}

0001beee <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1beee:	280f      	cmp	r0, #15
   1bef0:	d806      	bhi.n	1bf00 <bt_hci_evt_get_flags+0x12>
   1bef2:	280d      	cmp	r0, #13
   1bef4:	d80b      	bhi.n	1bf0e <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1bef6:	2805      	cmp	r0, #5
   1bef8:	bf14      	ite	ne
   1befa:	2002      	movne	r0, #2
   1befc:	2003      	moveq	r0, #3
   1befe:	4770      	bx	lr
	switch (evt) {
   1bf00:	2813      	cmp	r0, #19
   1bf02:	d004      	beq.n	1bf0e <bt_hci_evt_get_flags+0x20>
   1bf04:	281a      	cmp	r0, #26
   1bf06:	bf14      	ite	ne
   1bf08:	2002      	movne	r0, #2
   1bf0a:	2001      	moveq	r0, #1
   1bf0c:	4770      	bx	lr
   1bf0e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1bf10:	4770      	bx	lr

0001bf12 <handle_event>:
{
   1bf12:	b410      	push	{r4}
   1bf14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1bf18:	4604      	mov	r4, r0
   1bf1a:	4608      	mov	r0, r1
		if (handler->event != event) {
   1bf1c:	7811      	ldrb	r1, [r2, #0]
   1bf1e:	42a1      	cmp	r1, r4
   1bf20:	d004      	beq.n	1bf2c <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1bf22:	3208      	adds	r2, #8
   1bf24:	429a      	cmp	r2, r3
   1bf26:	d1f9      	bne.n	1bf1c <handle_event+0xa>
}
   1bf28:	bc10      	pop	{r4}
   1bf2a:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1bf2c:	8981      	ldrh	r1, [r0, #12]
   1bf2e:	7853      	ldrb	r3, [r2, #1]
   1bf30:	4299      	cmp	r1, r3
   1bf32:	d3f9      	bcc.n	1bf28 <handle_event+0x16>
		handler->handler(buf);
   1bf34:	6853      	ldr	r3, [r2, #4]
}
   1bf36:	bc10      	pop	{r4}
		handler->handler(buf);
   1bf38:	4718      	bx	r3

0001bf3a <hci_data_buf_overflow>:
}
   1bf3a:	4770      	bx	lr

0001bf3c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1bf3c:	2207      	movs	r2, #7
   1bf3e:	f7ff bef4 	b.w	1bd2a <memcpy>

0001bf42 <atomic_or>:
{
   1bf42:	4603      	mov	r3, r0
}
   1bf44:	f3bf 8f5b 	dmb	ish
   1bf48:	e853 0f00 	ldrex	r0, [r3]
   1bf4c:	ea40 0201 	orr.w	r2, r0, r1
   1bf50:	e843 2c00 	strex	ip, r2, [r3]
   1bf54:	f1bc 0f00 	cmp.w	ip, #0
   1bf58:	d1f6      	bne.n	1bf48 <atomic_or+0x6>
   1bf5a:	f3bf 8f5b 	dmb	ish
   1bf5e:	4770      	bx	lr

0001bf60 <le_data_len_change>:
{
   1bf60:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1bf62:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1bf64:	8818      	ldrh	r0, [r3, #0]
   1bf66:	f7ec fba7 	bl	86b8 <bt_conn_lookup_handle>
	if (!conn) {
   1bf6a:	b118      	cbz	r0, 1bf74 <le_data_len_change+0x14>
}
   1bf6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1bf70:	f000 bd21 	b.w	1c9b6 <bt_conn_unref>
}
   1bf74:	bd08      	pop	{r3, pc}

0001bf76 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1bf76:	2101      	movs	r1, #1
   1bf78:	3008      	adds	r0, #8
   1bf7a:	f001 bf60 	b.w	1de3e <net_buf_simple_pull_mem>

0001bf7e <le_conn_update_complete>:
{
   1bf7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1bf80:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1bf82:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1bf86:	f7ec fb97 	bl	86b8 <bt_conn_lookup_handle>
	if (!conn) {
   1bf8a:	4604      	mov	r4, r0
   1bf8c:	2800      	cmp	r0, #0
   1bf8e:	d03c      	beq.n	1c00a <le_conn_update_complete+0x8c>
	if (!evt->status) {
   1bf90:	782b      	ldrb	r3, [r5, #0]
   1bf92:	b9cb      	cbnz	r3, 1bfc8 <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1bf94:	792a      	ldrb	r2, [r5, #4]
   1bf96:	78eb      	ldrb	r3, [r5, #3]
   1bf98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bf9c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1bfa0:	79aa      	ldrb	r2, [r5, #6]
   1bfa2:	796b      	ldrb	r3, [r5, #5]
   1bfa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bfa8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1bfac:	79eb      	ldrb	r3, [r5, #7]
   1bfae:	7a2a      	ldrb	r2, [r5, #8]
   1bfb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bfb4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1bfb8:	f7ec fc70 	bl	889c <notify_le_param_updated>
	bt_conn_unref(conn);
   1bfbc:	4620      	mov	r0, r4
}
   1bfbe:	b003      	add	sp, #12
   1bfc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   1bfc4:	f000 bcf7 	b.w	1c9b6 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1bfc8:	2b1a      	cmp	r3, #26
   1bfca:	d1f7      	bne.n	1bfbc <le_conn_update_complete+0x3e>
   1bfcc:	78c3      	ldrb	r3, [r0, #3]
   1bfce:	2b01      	cmp	r3, #1
   1bfd0:	d1f4      	bne.n	1bfbc <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bfd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1bfd6:	3004      	adds	r0, #4
   1bfd8:	f7ff ffb3 	bl	1bf42 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1bfdc:	0543      	lsls	r3, r0, #21
   1bfde:	d4ed      	bmi.n	1bfbc <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   1bfe0:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1bfe4:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   1bfe8:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   1bfec:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   1bff0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   1bff4:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1bff8:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   1bffa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   1bffe:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   1c002:	4620      	mov	r0, r4
   1c004:	f7ec fe50 	bl	8ca8 <bt_l2cap_update_conn_param>
   1c008:	e7d8      	b.n	1bfbc <le_conn_update_complete+0x3e>
}
   1c00a:	b003      	add	sp, #12
   1c00c:	bd30      	pop	{r4, r5, pc}

0001c00e <hci_vendor_event>:
   1c00e:	4770      	bx	lr

0001c010 <hci_num_completed_packets>:
{
   1c010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1c014:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1c016:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1c018:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1c01a:	783b      	ldrb	r3, [r7, #0]
   1c01c:	429d      	cmp	r5, r3
   1c01e:	db01      	blt.n	1c024 <hci_num_completed_packets+0x14>
}
   1c020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1c024:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1c028:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1c02c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1c030:	f7ec fb42 	bl	86b8 <bt_conn_lookup_handle>
		if (!conn) {
   1c034:	4604      	mov	r4, r0
   1c036:	b350      	cbz	r0, 1c08e <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1c038:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1c03c:	b326      	cbz	r6, 1c088 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   1c03e:	f04f 0320 	mov.w	r3, #32
   1c042:	f3ef 8211 	mrs	r2, BASEPRI
   1c046:	f383 8812 	msr	BASEPRI_MAX, r3
   1c04a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1c04e:	69e3      	ldr	r3, [r4, #28]
   1c050:	b16b      	cbz	r3, 1c06e <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1c052:	3b01      	subs	r3, #1
   1c054:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1c056:	f382 8811 	msr	BASEPRI, r2
   1c05a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1c05e:	4620      	mov	r0, r4
   1c060:	f7ec fab4 	bl	85cc <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1c064:	3e01      	subs	r6, #1
   1c066:	f7fe f879 	bl	1a15c <z_impl_k_sem_give>
   1c06a:	b2b6      	uxth	r6, r6
   1c06c:	e7e6      	b.n	1c03c <hci_num_completed_packets+0x2c>
	return list->head;
   1c06e:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1c070:	b12b      	cbz	r3, 1c07e <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c072:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1c074:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1c076:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c078:	428b      	cmp	r3, r1
	list->tail = node;
   1c07a:	bf08      	it	eq
   1c07c:	61a0      	streq	r0, [r4, #24]
   1c07e:	f382 8811 	msr	BASEPRI, r2
   1c082:	f3bf 8f6f 	isb	sy
			if (!node) {
   1c086:	b923      	cbnz	r3, 1c092 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1c088:	4620      	mov	r0, r4
   1c08a:	f000 fc94 	bl	1c9b6 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1c08e:	3501      	adds	r5, #1
   1c090:	e7c3      	b.n	1c01a <hci_num_completed_packets+0xa>
	__asm__ volatile(
   1c092:	f04f 0220 	mov.w	r2, #32
   1c096:	f3ef 8111 	mrs	r1, BASEPRI
   1c09a:	f382 8812 	msr	BASEPRI_MAX, r2
   1c09e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1c0a2:	68da      	ldr	r2, [r3, #12]
   1c0a4:	61e2      	str	r2, [r4, #28]
	return list->tail;
   1c0a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1c0a8:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   1c0ac:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   1c0b0:	b94a      	cbnz	r2, 1c0c6 <hci_num_completed_packets+0xb6>
	list->head = node;
   1c0b2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1c0b6:	f381 8811 	msr	BASEPRI, r1
   1c0ba:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1c0be:	4648      	mov	r0, r9
   1c0c0:	f7fe f9b8 	bl	1a434 <k_work_submit>
   1c0c4:	e7cb      	b.n	1c05e <hci_num_completed_packets+0x4e>
	parent->next = child;
   1c0c6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c0c8:	6263      	str	r3, [r4, #36]	; 0x24
}
   1c0ca:	e7f4      	b.n	1c0b6 <hci_num_completed_packets+0xa6>

0001c0cc <hci_disconn_complete>:
{
   1c0cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1c0ce:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1c0d0:	7835      	ldrb	r5, [r6, #0]
   1c0d2:	bb0d      	cbnz	r5, 1c118 <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   1c0d4:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1c0d8:	f7ec faee 	bl	86b8 <bt_conn_lookup_handle>
	if (!conn) {
   1c0dc:	4604      	mov	r4, r0
   1c0de:	b1d8      	cbz	r0, 1c118 <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   1c0e0:	78f3      	ldrb	r3, [r6, #3]
   1c0e2:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1c0e4:	4629      	mov	r1, r5
   1c0e6:	f7ec faef 	bl	86c8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   1c0ea:	78a3      	ldrb	r3, [r4, #2]
   1c0ec:	2b01      	cmp	r3, #1
   1c0ee:	d004      	beq.n	1c0fa <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   1c0f0:	4620      	mov	r0, r4
}
   1c0f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1c0f6:	f000 bc5e 	b.w	1c9b6 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c0fa:	f3bf 8f5b 	dmb	ish
   1c0fe:	6863      	ldr	r3, [r4, #4]
   1c100:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1c104:	07db      	lsls	r3, r3, #31
   1c106:	d5f3      	bpl.n	1c0f0 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1c108:	4620      	mov	r0, r4
   1c10a:	2102      	movs	r1, #2
   1c10c:	f7ec fadc 	bl	86c8 <bt_conn_set_state>
		bt_le_scan_update(false);
   1c110:	4628      	mov	r0, r5
   1c112:	f7eb fffd 	bl	8110 <bt_le_scan_update>
   1c116:	e7eb      	b.n	1c0f0 <hci_disconn_complete+0x24>
}
   1c118:	bd70      	pop	{r4, r5, r6, pc}

0001c11a <hci_le_read_max_data_len>:
{
   1c11a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c11c:	4606      	mov	r6, r0
   1c11e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1c120:	aa01      	add	r2, sp, #4
   1c122:	2100      	movs	r1, #0
   1c124:	f242 002f 	movw	r0, #8239	; 0x202f
   1c128:	f7ea fd62 	bl	6bf0 <bt_hci_cmd_send_sync>
	if (err) {
   1c12c:	4604      	mov	r4, r0
   1c12e:	b948      	cbnz	r0, 1c144 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1c130:	9801      	ldr	r0, [sp, #4]
   1c132:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1c134:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1c138:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1c13a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1c13e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1c140:	f7fa fe92 	bl	16e68 <net_buf_unref>
}
   1c144:	4620      	mov	r0, r4
   1c146:	b002      	add	sp, #8
   1c148:	bd70      	pop	{r4, r5, r6, pc}

0001c14a <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1c14a:	f7ea bdb3 	b.w	6cb4 <bt_le_create_conn_legacy>

0001c14e <bt_hci_disconnect>:
{
   1c14e:	b570      	push	{r4, r5, r6, lr}
   1c150:	4606      	mov	r6, r0
   1c152:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1c154:	f240 4006 	movw	r0, #1030	; 0x406
   1c158:	2103      	movs	r1, #3
   1c15a:	f7ea fd0f 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
   1c15e:	4604      	mov	r4, r0
   1c160:	b168      	cbz	r0, 1c17e <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1c162:	2103      	movs	r1, #3
   1c164:	3008      	adds	r0, #8
   1c166:	f001 fe43 	bl	1ddf0 <net_buf_simple_add>
	disconn->reason = reason;
   1c16a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1c16c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c16e:	4621      	mov	r1, r4
   1c170:	2200      	movs	r2, #0
}
   1c172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c176:	f240 4006 	movw	r0, #1030	; 0x406
   1c17a:	f7ea bd39 	b.w	6bf0 <bt_hci_cmd_send_sync>
}
   1c17e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c182:	bd70      	pop	{r4, r5, r6, pc}

0001c184 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1c184:	8803      	ldrh	r3, [r0, #0]
   1c186:	8842      	ldrh	r2, [r0, #2]
   1c188:	4293      	cmp	r3, r2
{
   1c18a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1c18c:	d819      	bhi.n	1c1c2 <bt_le_conn_params_valid+0x3e>
   1c18e:	2b05      	cmp	r3, #5
   1c190:	d917      	bls.n	1c1c2 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1c192:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1c196:	d814      	bhi.n	1c1c2 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1c198:	8883      	ldrh	r3, [r0, #4]
   1c19a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1c19e:	d210      	bcs.n	1c1c2 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c1a0:	88c0      	ldrh	r0, [r0, #6]
   1c1a2:	f1a0 010a 	sub.w	r1, r0, #10
   1c1a6:	b289      	uxth	r1, r1
   1c1a8:	f640 4476 	movw	r4, #3190	; 0xc76
   1c1ac:	42a1      	cmp	r1, r4
   1c1ae:	d808      	bhi.n	1c1c2 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1c1b0:	3301      	adds	r3, #1
   1c1b2:	b29b      	uxth	r3, r3
   1c1b4:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c1b6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1c1ba:	bf34      	ite	cc
   1c1bc:	2001      	movcc	r0, #1
   1c1be:	2000      	movcs	r0, #0
}
   1c1c0:	bd10      	pop	{r4, pc}
		return false;
   1c1c2:	2000      	movs	r0, #0
   1c1c4:	e7fc      	b.n	1c1c0 <bt_le_conn_params_valid+0x3c>

0001c1c6 <bt_le_set_data_len>:
{
   1c1c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c1c8:	4607      	mov	r7, r0
   1c1ca:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c1cc:	f242 0022 	movw	r0, #8226	; 0x2022
   1c1d0:	2106      	movs	r1, #6
{
   1c1d2:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c1d4:	f7ea fcd2 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
   1c1d8:	4604      	mov	r4, r0
   1c1da:	b170      	cbz	r0, 1c1fa <bt_le_set_data_len+0x34>
   1c1dc:	2106      	movs	r1, #6
   1c1de:	3008      	adds	r0, #8
   1c1e0:	f001 fe06 	bl	1ddf0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c1e4:	883b      	ldrh	r3, [r7, #0]
   1c1e6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1c1e8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1c1ea:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c1ec:	4621      	mov	r1, r4
   1c1ee:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1c1f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c1f6:	f7ea bdb5 	b.w	6d64 <bt_hci_cmd_send>
}
   1c1fa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c200 <bt_le_set_phy>:
{
   1c200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c204:	4680      	mov	r8, r0
   1c206:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c208:	f242 0032 	movw	r0, #8242	; 0x2032
   1c20c:	2107      	movs	r1, #7
{
   1c20e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1c212:	4616      	mov	r6, r2
   1c214:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c216:	f7ea fcb1 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
   1c21a:	4604      	mov	r4, r0
   1c21c:	b190      	cbz	r0, 1c244 <bt_le_set_phy+0x44>
   1c21e:	2107      	movs	r1, #7
   1c220:	3008      	adds	r0, #8
   1c222:	f001 fde5 	bl	1ddf0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c226:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1c22a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1c22c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1c22e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c230:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1c232:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c236:	4621      	mov	r1, r4
   1c238:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1c23c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c240:	f7ea bd90 	b.w	6d64 <bt_hci_cmd_send>
}
   1c244:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c24c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1c24c:	6880      	ldr	r0, [r0, #8]
   1c24e:	f7ea be0d 	b.w	6e6c <bt_hci_le_enh_conn_complete>

0001c252 <le_legacy_conn_complete>:
{
   1c252:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1c254:	6881      	ldr	r1, [r0, #8]
{
   1c256:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1c258:	780b      	ldrb	r3, [r1, #0]
   1c25a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1c25e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1c262:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1c266:	78cb      	ldrb	r3, [r1, #3]
   1c268:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1c26c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1c270:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1c274:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1c278:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1c27c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1c280:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1c284:	7c4b      	ldrb	r3, [r1, #17]
   1c286:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c28a:	a803      	add	r0, sp, #12
   1c28c:	3104      	adds	r1, #4
   1c28e:	f7ff fe55 	bl	1bf3c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1c292:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1c294:	4669      	mov	r1, sp
   1c296:	2206      	movs	r2, #6
   1c298:	f10d 0013 	add.w	r0, sp, #19
   1c29c:	9400      	str	r4, [sp, #0]
   1c29e:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c2a2:	f7ff fd42 	bl	1bd2a <memcpy>
   1c2a6:	2206      	movs	r2, #6
   1c2a8:	4669      	mov	r1, sp
   1c2aa:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1c2ae:	9400      	str	r4, [sp, #0]
   1c2b0:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c2b4:	f7ff fd39 	bl	1bd2a <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1c2b8:	a802      	add	r0, sp, #8
   1c2ba:	f7ea fdd7 	bl	6e6c <bt_hci_le_enh_conn_complete>
}
   1c2be:	b00a      	add	sp, #40	; 0x28
   1c2c0:	bd10      	pop	{r4, pc}

0001c2c2 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1c2c2:	6883      	ldr	r3, [r0, #8]
{
   1c2c4:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   1c2c6:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1c2ca:	f7ec f9f5 	bl	86b8 <bt_conn_lookup_handle>
	if (!conn) {
   1c2ce:	4604      	mov	r4, r0
   1c2d0:	b1d0      	cbz	r0, 1c308 <le_phy_update_complete+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c2d2:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1c2d6:	3004      	adds	r0, #4
   1c2d8:	e850 3f00 	ldrex	r3, [r0]
   1c2dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   1c2e0:	e840 2100 	strex	r1, r2, [r0]
   1c2e4:	2900      	cmp	r1, #0
   1c2e6:	d1f7      	bne.n	1c2d8 <le_phy_update_complete+0x16>
   1c2e8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1c2ec:	061b      	lsls	r3, r3, #24
   1c2ee:	d506      	bpl.n	1c2fe <le_phy_update_complete+0x3c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c2f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1c2f4:	f7ff fe25 	bl	1bf42 <atomic_or>
		conn_auto_initiate(conn);
   1c2f8:	4620      	mov	r0, r4
   1c2fa:	f7ea fd55 	bl	6da8 <conn_auto_initiate>
	bt_conn_unref(conn);
   1c2fe:	4620      	mov	r0, r4
}
   1c300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1c304:	f000 bb57 	b.w	1c9b6 <bt_conn_unref>
}
   1c308:	bd10      	pop	{r4, pc}

0001c30a <le_remote_feat_complete>:
{
   1c30a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1c30c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1c30e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1c312:	f7ec f9d1 	bl	86b8 <bt_conn_lookup_handle>
	if (!conn) {
   1c316:	4604      	mov	r4, r0
   1c318:	b198      	cbz	r0, 1c342 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   1c31a:	782b      	ldrb	r3, [r5, #0]
   1c31c:	b923      	cbnz	r3, 1c328 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1c31e:	2208      	movs	r2, #8
   1c320:	1ce9      	adds	r1, r5, #3
   1c322:	30ac      	adds	r0, #172	; 0xac
   1c324:	f7ff fd01 	bl	1bd2a <memcpy>
   1c328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1c32c:	1d20      	adds	r0, r4, #4
   1c32e:	f7ff fe08 	bl	1bf42 <atomic_or>
	conn_auto_initiate(conn);
   1c332:	4620      	mov	r0, r4
   1c334:	f7ea fd38 	bl	6da8 <conn_auto_initiate>
	bt_conn_unref(conn);
   1c338:	4620      	mov	r0, r4
}
   1c33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1c33e:	f000 bb3a 	b.w	1c9b6 <bt_conn_unref>
}
   1c342:	bd38      	pop	{r3, r4, r5, pc}

0001c344 <le_conn_param_neg_reply>:
{
   1c344:	b570      	push	{r4, r5, r6, lr}
   1c346:	4606      	mov	r6, r0
   1c348:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1c34a:	f242 0021 	movw	r0, #8225	; 0x2021
   1c34e:	2103      	movs	r1, #3
   1c350:	f7ea fc14 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
   1c354:	4604      	mov	r4, r0
   1c356:	b160      	cbz	r0, 1c372 <le_conn_param_neg_reply+0x2e>
   1c358:	2103      	movs	r1, #3
   1c35a:	3008      	adds	r0, #8
   1c35c:	f001 fd48 	bl	1ddf0 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1c360:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1c362:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1c364:	4621      	mov	r1, r4
   1c366:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1c36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1c36e:	f7ea bcf9 	b.w	6d64 <bt_hci_cmd_send>
}
   1c372:	bd70      	pop	{r4, r5, r6, pc}

0001c374 <le_conn_param_req>:
{
   1c374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1c376:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1c378:	78d9      	ldrb	r1, [r3, #3]
   1c37a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1c37c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1c37e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1c382:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1c386:	7959      	ldrb	r1, [r3, #5]
   1c388:	791a      	ldrb	r2, [r3, #4]
   1c38a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1c38e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1c392:	799a      	ldrb	r2, [r3, #6]
   1c394:	79d9      	ldrb	r1, [r3, #7]
   1c396:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1c39a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1c39e:	7a1a      	ldrb	r2, [r3, #8]
   1c3a0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1c3a2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1c3a4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1c3a8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1c3aa:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1c3ae:	f7ec f983 	bl	86b8 <bt_conn_lookup_handle>
	if (!conn) {
   1c3b2:	4606      	mov	r6, r0
   1c3b4:	b928      	cbnz	r0, 1c3c2 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1c3b6:	2102      	movs	r1, #2
   1c3b8:	4620      	mov	r0, r4
   1c3ba:	f7ff ffc3 	bl	1c344 <le_conn_param_neg_reply>
}
   1c3be:	b003      	add	sp, #12
   1c3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1c3c2:	4669      	mov	r1, sp
   1c3c4:	f7ec fab2 	bl	892c <le_param_req>
   1c3c8:	b938      	cbnz	r0, 1c3da <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1c3ca:	211e      	movs	r1, #30
   1c3cc:	4620      	mov	r0, r4
   1c3ce:	f7ff ffb9 	bl	1c344 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1c3d2:	4630      	mov	r0, r6
   1c3d4:	f000 faef 	bl	1c9b6 <bt_conn_unref>
   1c3d8:	e7f1      	b.n	1c3be <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1c3da:	210e      	movs	r1, #14
   1c3dc:	f242 0020 	movw	r0, #8224	; 0x2020
   1c3e0:	f7ea fbcc 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
   1c3e4:	4605      	mov	r5, r0
   1c3e6:	2800      	cmp	r0, #0
   1c3e8:	d0f3      	beq.n	1c3d2 <le_conn_param_req+0x5e>
   1c3ea:	210e      	movs	r1, #14
   1c3ec:	3008      	adds	r0, #8
   1c3ee:	f001 fcff 	bl	1ddf0 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1c3f2:	220e      	movs	r2, #14
   1c3f4:	4604      	mov	r4, r0
   1c3f6:	2100      	movs	r1, #0
   1c3f8:	f7ff fca2 	bl	1bd40 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1c3fc:	f8bd 3000 	ldrh.w	r3, [sp]
   1c400:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1c402:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1c406:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1c408:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1c40c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1c40e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1c412:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1c414:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1c416:	4629      	mov	r1, r5
   1c418:	f242 0020 	movw	r0, #8224	; 0x2020
   1c41c:	f7ea fca2 	bl	6d64 <bt_hci_cmd_send>
   1c420:	e7d7      	b.n	1c3d2 <le_conn_param_req+0x5e>

0001c422 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1c422:	2000      	movs	r0, #0
   1c424:	4770      	bx	lr

0001c426 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1c426:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1c428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1c42c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1c42e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c432:	2100      	movs	r1, #0
{
   1c434:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1c436:	f7ea faa1 	bl	697c <bt_buf_get_evt>
   1c43a:	2102      	movs	r1, #2
   1c43c:	4604      	mov	r4, r0
   1c43e:	3008      	adds	r0, #8
   1c440:	f001 fcd6 	bl	1ddf0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   1c444:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1c446:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1c448:	4620      	mov	r0, r4
   1c44a:	bd70      	pop	{r4, r5, r6, pc}

0001c44c <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1c44c:	3103      	adds	r1, #3
{
   1c44e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1c450:	b2c9      	uxtb	r1, r1
{
   1c452:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1c454:	200e      	movs	r0, #14
   1c456:	f7ff ffe6 	bl	1c426 <bt_hci_evt_create>
   1c45a:	2103      	movs	r1, #3
   1c45c:	4604      	mov	r4, r0
   1c45e:	3008      	adds	r0, #8
   1c460:	f001 fcc6 	bl	1ddf0 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   1c464:	2301      	movs	r3, #1
   1c466:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1c468:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1c46c:	4620      	mov	r0, r4
   1c46e:	bd38      	pop	{r3, r4, r5, pc}

0001c470 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1c470:	b570      	push	{r4, r5, r6, lr}
   1c472:	4605      	mov	r5, r0
   1c474:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1c476:	200f      	movs	r0, #15
   1c478:	2104      	movs	r1, #4
   1c47a:	f7ff ffd4 	bl	1c426 <bt_hci_evt_create>
   1c47e:	2104      	movs	r1, #4
   1c480:	4604      	mov	r4, r0
   1c482:	3008      	adds	r0, #8
   1c484:	f001 fcb4 	bl	1ddf0 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   1c488:	2201      	movs	r2, #1
	cs->status = status;
   1c48a:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1c48c:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1c48e:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1c490:	4620      	mov	r0, r4
   1c492:	bd70      	pop	{r4, r5, r6, pc}

0001c494 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c494:	f3bf 8f5b 	dmb	ish
   1c498:	6800      	ldr	r0, [r0, #0]
   1c49a:	f3bf 8f5b 	dmb	ish
}
   1c49e:	4770      	bx	lr

0001c4a0 <is_adv_using_rand_addr>:
{
   1c4a0:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1c4a2:	f7eb fc15 	bl	7cd0 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   1c4a6:	b120      	cbz	r0, 1c4b2 <is_adv_using_rand_addr+0x12>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c4a8:	3010      	adds	r0, #16
   1c4aa:	f7ff fff3 	bl	1c494 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c4ae:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1c4b2:	bd08      	pop	{r3, pc}

0001c4b4 <bt_lookup_id_addr>:
}
   1c4b4:	4608      	mov	r0, r1
   1c4b6:	4770      	bx	lr

0001c4b8 <bt_id_set_private_addr>:
{
   1c4b8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1c4ba:	2106      	movs	r1, #6
   1c4bc:	4668      	mov	r0, sp
   1c4be:	f7f0 fee9 	bl	d294 <bt_rand>
	if (err) {
   1c4c2:	b940      	cbnz	r0, 1c4d6 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1c4c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1c4c8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1c4ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c4ce:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1c4d2:	f7eb f997 	bl	7804 <set_random_address>
}
   1c4d6:	b003      	add	sp, #12
   1c4d8:	f85d fb04 	ldr.w	pc, [sp], #4

0001c4dc <bt_id_set_adv_private_addr>:
{
   1c4dc:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1c4de:	2106      	movs	r1, #6
   1c4e0:	4668      	mov	r0, sp
   1c4e2:	f7f0 fed7 	bl	d294 <bt_rand>
	if (err) {
   1c4e6:	b940      	cbnz	r0, 1c4fa <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1c4e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1c4ec:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1c4ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c4f2:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1c4f6:	f7eb f985 	bl	7804 <set_random_address>
}
   1c4fa:	b003      	add	sp, #12
   1c4fc:	f85d fb04 	ldr.w	pc, [sp], #4

0001c500 <bt_id_scan_random_addr_check>:
{
   1c500:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   1c502:	f7eb fbe5 	bl	7cd0 <bt_le_adv_lookup_legacy>
	if (!adv) {
   1c506:	b110      	cbz	r0, 1c50e <bt_id_scan_random_addr_check+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c508:	3010      	adds	r0, #16
   1c50a:	f7ff ffc3 	bl	1c494 <atomic_get>
}
   1c50e:	2001      	movs	r0, #1
   1c510:	bd08      	pop	{r3, pc}

0001c512 <get_adv_channel_map>:
{
   1c512:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1c514:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1c518:	bf0c      	ite	eq
   1c51a:	2007      	moveq	r0, #7
   1c51c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1c51e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1c520:	bf48      	it	mi
   1c522:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1c526:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1c528:	bf48      	it	mi
   1c52a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1c52e:	4770      	bx	lr

0001c530 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c530:	f3bf 8f5b 	dmb	ish
   1c534:	6800      	ldr	r0, [r0, #0]
   1c536:	f3bf 8f5b 	dmb	ish
}
   1c53a:	4770      	bx	lr

0001c53c <atomic_and>:
{
   1c53c:	4603      	mov	r3, r0
}
   1c53e:	f3bf 8f5b 	dmb	ish
   1c542:	e853 0f00 	ldrex	r0, [r3]
   1c546:	ea00 0201 	and.w	r2, r0, r1
   1c54a:	e843 2c00 	strex	ip, r2, [r3]
   1c54e:	f1bc 0f00 	cmp.w	ip, #0
   1c552:	d1f6      	bne.n	1c542 <atomic_and+0x6>
   1c554:	f3bf 8f5b 	dmb	ish
   1c558:	4770      	bx	lr

0001c55a <hci_set_ad>:
{
   1c55a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c55e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1c560:	2120      	movs	r1, #32
{
   1c562:	4682      	mov	sl, r0
   1c564:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1c566:	f7ea fb09 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
   1c56a:	4605      	mov	r5, r0
   1c56c:	2800      	cmp	r0, #0
   1c56e:	d04a      	beq.n	1c606 <hci_set_ad+0xac>
   1c570:	2120      	movs	r1, #32
   1c572:	3008      	adds	r0, #8
   1c574:	f001 fc3c 	bl	1ddf0 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1c578:	2220      	movs	r2, #32
   1c57a:	2100      	movs	r1, #0
   1c57c:	4681      	mov	r9, r0
   1c57e:	f7ff fbdf 	bl	1bd40 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1c582:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   1c586:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1c58a:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1c58c:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1c58e:	f8d4 8000 	ldr.w	r8, [r4]
   1c592:	2300      	movs	r3, #0
   1c594:	6862      	ldr	r2, [r4, #4]
   1c596:	4293      	cmp	r3, r2
   1c598:	d30d      	bcc.n	1c5b6 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1c59a:	9b00      	ldr	r3, [sp, #0]
   1c59c:	3408      	adds	r4, #8
   1c59e:	42a3      	cmp	r3, r4
   1c5a0:	d1f5      	bne.n	1c58e <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1c5a2:	2200      	movs	r2, #0
   1c5a4:	4629      	mov	r1, r5
   1c5a6:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1c5a8:	f889 6000 	strb.w	r6, [r9]
}
   1c5ac:	b003      	add	sp, #12
   1c5ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1c5b2:	f7ea bb1d 	b.w	6bf0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1c5b6:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1c5ba:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1c5be:	1cb0      	adds	r0, r6, #2
   1c5c0:	1811      	adds	r1, r2, r0
   1c5c2:	291f      	cmp	r1, #31
   1c5c4:	d908      	bls.n	1c5d8 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1c5c6:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1c5ca:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1c5ce:	d11f      	bne.n	1c610 <hci_set_ad+0xb6>
   1c5d0:	2a00      	cmp	r2, #0
   1c5d2:	dd1d      	ble.n	1c610 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1c5d4:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1c5d8:	b2d7      	uxtb	r7, r2
   1c5da:	1c79      	adds	r1, r7, #1
   1c5dc:	f80b 1006 	strb.w	r1, [fp, r6]
   1c5e0:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1c5e2:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1c5e4:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1c5e8:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1c5ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1c5f0:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1c5f2:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1c5f4:	f7ff fb99 	bl	1bd2a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1c5f8:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1c5fa:	443e      	add	r6, r7
   1c5fc:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   1c5fe:	3301      	adds	r3, #1
   1c600:	f108 0808 	add.w	r8, r8, #8
   1c604:	e7c6      	b.n	1c594 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1c606:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1c60a:	b003      	add	sp, #12
   1c60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1c610:	4628      	mov	r0, r5
   1c612:	f7fa fc29 	bl	16e68 <net_buf_unref>
		return err;
   1c616:	f06f 0015 	mvn.w	r0, #21
   1c61a:	e7f6      	b.n	1c60a <hci_set_ad+0xb0>

0001c61c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c61c:	2301      	movs	r3, #1
{
   1c61e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c620:	fa03 f101 	lsl.w	r1, r3, r1
{
   1c624:	4604      	mov	r4, r0
	if (val) {
   1c626:	b162      	cbz	r2, 1c642 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c628:	f3bf 8f5b 	dmb	ish
   1c62c:	e854 3f00 	ldrex	r3, [r4]
   1c630:	430b      	orrs	r3, r1
   1c632:	e844 3200 	strex	r2, r3, [r4]
   1c636:	2a00      	cmp	r2, #0
   1c638:	d1f8      	bne.n	1c62c <atomic_set_bit_to+0x10>
   1c63a:	f3bf 8f5b 	dmb	ish
	}
}
   1c63e:	bc10      	pop	{r4}
   1c640:	4770      	bx	lr
   1c642:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c644:	43c9      	mvns	r1, r1
   1c646:	f7ff bf79 	b.w	1c53c <atomic_and>

0001c64a <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1c64a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c64e:	b087      	sub	sp, #28
   1c650:	4605      	mov	r5, r0
   1c652:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1c656:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1c65a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1c65e:	460c      	mov	r4, r1
   1c660:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1c662:	2100      	movs	r1, #0
   1c664:	2210      	movs	r2, #16
   1c666:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1c668:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1c66a:	f7ff fb69 	bl	1bd40 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1c66e:	b186      	cbz	r6, 1c692 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1c670:	f7eb f8aa 	bl	77c8 <bt_get_name>
   1c674:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1c676:	2c00      	cmp	r4, #0
   1c678:	d139      	bne.n	1c6ee <le_adv_update.constprop.0+0xa4>
   1c67a:	2f00      	cmp	r7, #0
   1c67c:	d142      	bne.n	1c704 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   1c67e:	4658      	mov	r0, fp
   1c680:	f7ff fb26 	bl	1bcd0 <strlen>
   1c684:	2309      	movs	r3, #9
   1c686:	f88d 3000 	strb.w	r3, [sp]
   1c68a:	f88d 0001 	strb.w	r0, [sp, #1]
   1c68e:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   1c692:	2e01      	cmp	r6, #1
			d_len = 2;
   1c694:	bf0c      	ite	eq
   1c696:	2202      	moveq	r2, #2
		d_len = 1;
   1c698:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1c69a:	a902      	add	r1, sp, #8
   1c69c:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   1c6a0:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   1c6a4:	bf04      	itt	eq
   1c6a6:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   1c6aa:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1c6ac:	f7ff ff55 	bl	1c55a <hci_set_ad>
		if (err) {
   1c6b0:	4604      	mov	r4, r0
   1c6b2:	b978      	cbnz	r0, 1c6d4 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   1c6b4:	f1ba 0f00 	cmp.w	sl, #0
   1c6b8:	d126      	bne.n	1c708 <le_adv_update.constprop.0+0xbe>
   1c6ba:	3510      	adds	r5, #16
   1c6bc:	f3bf 8f5b 	dmb	ish
   1c6c0:	e855 3f00 	ldrex	r3, [r5]
   1c6c4:	f043 0304 	orr.w	r3, r3, #4
   1c6c8:	e845 3200 	strex	r2, r3, [r5]
   1c6cc:	2a00      	cmp	r2, #0
   1c6ce:	d1f7      	bne.n	1c6c0 <le_adv_update.constprop.0+0x76>
   1c6d0:	f3bf 8f5b 	dmb	ish
}
   1c6d4:	4620      	mov	r0, r4
   1c6d6:	b007      	add	sp, #28
   1c6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1c6dc:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1c6e0:	3a08      	subs	r2, #8
   1c6e2:	2a01      	cmp	r2, #1
   1c6e4:	d925      	bls.n	1c732 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1c6e6:	3301      	adds	r3, #1
   1c6e8:	4598      	cmp	r8, r3
   1c6ea:	d1f7      	bne.n	1c6dc <le_adv_update.constprop.0+0x92>
   1c6ec:	e7c5      	b.n	1c67a <le_adv_update.constprop.0+0x30>
   1c6ee:	2300      	movs	r3, #0
   1c6f0:	e7fa      	b.n	1c6e8 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1c6f2:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1c6f6:	3a08      	subs	r2, #8
   1c6f8:	2a01      	cmp	r2, #1
   1c6fa:	d91a      	bls.n	1c732 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1c6fc:	3301      	adds	r3, #1
   1c6fe:	4599      	cmp	r9, r3
   1c700:	d1f7      	bne.n	1c6f2 <le_adv_update.constprop.0+0xa8>
   1c702:	e7bc      	b.n	1c67e <le_adv_update.constprop.0+0x34>
   1c704:	2300      	movs	r3, #0
   1c706:	e7fa      	b.n	1c6fe <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1c708:	2e02      	cmp	r6, #2
   1c70a:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   1c70e:	bf08      	it	eq
   1c710:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1c712:	a902      	add	r1, sp, #8
			d_len = 2;
   1c714:	bf08      	it	eq
   1c716:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1c718:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   1c71c:	bf08      	it	eq
   1c71e:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1c722:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1c726:	f7ff ff18 	bl	1c55a <hci_set_ad>
		if (err) {
   1c72a:	2800      	cmp	r0, #0
   1c72c:	d0c5      	beq.n	1c6ba <le_adv_update.constprop.0+0x70>
   1c72e:	4604      	mov	r4, r0
   1c730:	e7d0      	b.n	1c6d4 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   1c732:	f06f 0415 	mvn.w	r4, #21
   1c736:	e7cd      	b.n	1c6d4 <le_adv_update.constprop.0+0x8a>

0001c738 <get_adv_name_type>:
{
   1c738:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   1c73a:	f100 0310 	add.w	r3, r0, #16
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c73e:	4618      	mov	r0, r3
   1c740:	f7ff fef6 	bl	1c530 <atomic_get>
   1c744:	05c2      	lsls	r2, r0, #23
   1c746:	d405      	bmi.n	1c754 <get_adv_name_type+0x1c>
   1c748:	4618      	mov	r0, r3
   1c74a:	f7ff fef1 	bl	1c530 <atomic_get>
		return ADV_NAME_TYPE_SD;
   1c74e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
   1c752:	bd08      	pop	{r3, pc}
		return ADV_NAME_TYPE_SD;
   1c754:	2002      	movs	r0, #2
   1c756:	e7fc      	b.n	1c752 <get_adv_name_type+0x1a>

0001c758 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1c758:	6843      	ldr	r3, [r0, #4]
   1c75a:	f013 0008 	ands.w	r0, r3, #8
   1c75e:	d00a      	beq.n	1c776 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1c760:	035a      	lsls	r2, r3, #13
   1c762:	d407      	bmi.n	1c774 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1c764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   1c768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1c76c:	bf0c      	ite	eq
   1c76e:	2001      	moveq	r0, #1
   1c770:	2002      	movne	r0, #2
   1c772:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1c774:	2001      	movs	r0, #1
}
   1c776:	4770      	bx	lr

0001c778 <bt_le_adv_set_enable_legacy>:
{
   1c778:	b570      	push	{r4, r5, r6, lr}
   1c77a:	4606      	mov	r6, r0
   1c77c:	b086      	sub	sp, #24
   1c77e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1c780:	f242 000a 	movw	r0, #8202	; 0x200a
   1c784:	2101      	movs	r1, #1
   1c786:	f7ea f9f9 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
   1c78a:	4604      	mov	r4, r0
   1c78c:	b1b0      	cbz	r0, 1c7bc <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1c78e:	3008      	adds	r0, #8
	if (enable) {
   1c790:	b195      	cbz	r5, 1c7b8 <bt_le_adv_set_enable_legacy+0x40>
   1c792:	2101      	movs	r1, #1
   1c794:	f001 fb3b 	bl	1de0e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1c798:	f106 0210 	add.w	r2, r6, #16
   1c79c:	a903      	add	r1, sp, #12
   1c79e:	4620      	mov	r0, r4
   1c7a0:	9500      	str	r5, [sp, #0]
   1c7a2:	2306      	movs	r3, #6
   1c7a4:	f7ea f9d8 	bl	6b58 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1c7a8:	2200      	movs	r2, #0
   1c7aa:	4621      	mov	r1, r4
   1c7ac:	f242 000a 	movw	r0, #8202	; 0x200a
   1c7b0:	f7ea fa1e 	bl	6bf0 <bt_hci_cmd_send_sync>
}
   1c7b4:	b006      	add	sp, #24
   1c7b6:	bd70      	pop	{r4, r5, r6, pc}
   1c7b8:	4629      	mov	r1, r5
   1c7ba:	e7eb      	b.n	1c794 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1c7bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c7c0:	e7f8      	b.n	1c7b4 <bt_le_adv_set_enable_legacy+0x3c>

0001c7c2 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1c7c2:	3018      	adds	r0, #24
   1c7c4:	f002 bebb 	b.w	1f53e <k_work_cancel_delayable>

0001c7c8 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1c7c8:	f7eb bbe0 	b.w	7f8c <bt_le_adv_stop>

0001c7cc <atomic_and>:
{
   1c7cc:	4603      	mov	r3, r0
}
   1c7ce:	f3bf 8f5b 	dmb	ish
   1c7d2:	e853 0f00 	ldrex	r0, [r3]
   1c7d6:	ea00 0201 	and.w	r2, r0, r1
   1c7da:	e843 2c00 	strex	ip, r2, [r3]
   1c7de:	f1bc 0f00 	cmp.w	ip, #0
   1c7e2:	d1f6      	bne.n	1c7d2 <atomic_and+0x6>
   1c7e4:	f3bf 8f5b 	dmb	ish
   1c7e8:	4770      	bx	lr

0001c7ea <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   1c7ea:	f7eb bc07 	b.w	7ffc <bt_le_scan_set_enable_legacy>

0001c7ee <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c7ee:	f3bf 8f5b 	dmb	ish
   1c7f2:	6800      	ldr	r0, [r0, #0]
   1c7f4:	f3bf 8f5b 	dmb	ish
}
   1c7f8:	4770      	bx	lr

0001c7fa <atomic_dec.isra.0>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c7fa:	f3bf 8f5b 	dmb	ish
   1c7fe:	e850 3f00 	ldrex	r3, [r0]
   1c802:	3b01      	subs	r3, #1
   1c804:	e840 3200 	strex	r2, r3, [r0]
   1c808:	2a00      	cmp	r2, #0
   1c80a:	d1f8      	bne.n	1c7fe <atomic_dec.isra.0+0x4>
   1c80c:	f3bf 8f5b 	dmb	ish
}
   1c810:	4770      	bx	lr

0001c812 <tx_notify>:
{
   1c812:	b570      	push	{r4, r5, r6, lr}
   1c814:	4604      	mov	r4, r0
	__asm__ volatile(
   1c816:	f04f 0220 	mov.w	r2, #32
   1c81a:	f3ef 8311 	mrs	r3, BASEPRI
   1c81e:	f382 8812 	msr	BASEPRI_MAX, r2
   1c822:	f3bf 8f6f 	isb	sy
	return list->head;
   1c826:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1c828:	b920      	cbnz	r0, 1c834 <tx_notify+0x22>
	__asm__ volatile(
   1c82a:	f383 8811 	msr	BASEPRI, r3
   1c82e:	f3bf 8f6f 	isb	sy
}
   1c832:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c834:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1c836:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1c838:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c83a:	4288      	cmp	r0, r1
	list->tail = node;
   1c83c:	bf08      	it	eq
   1c83e:	6262      	streq	r2, [r4, #36]	; 0x24
   1c840:	f383 8811 	msr	BASEPRI, r3
   1c844:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1c848:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1c84c:	f7eb fe08 	bl	8460 <tx_free>
		cb(conn, user_data);
   1c850:	4631      	mov	r1, r6
   1c852:	4620      	mov	r0, r4
   1c854:	47a8      	blx	r5
	while (1) {
   1c856:	e7de      	b.n	1c816 <tx_notify+0x4>

0001c858 <bt_conn_reset_rx_state>:
{
   1c858:	b510      	push	{r4, lr}
   1c85a:	4604      	mov	r4, r0
	if (!conn->rx) {
   1c85c:	6900      	ldr	r0, [r0, #16]
   1c85e:	b118      	cbz	r0, 1c868 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1c860:	f7fa fb02 	bl	16e68 <net_buf_unref>
	conn->rx = NULL;
   1c864:	2300      	movs	r3, #0
   1c866:	6123      	str	r3, [r4, #16]
}
   1c868:	bd10      	pop	{r4, pc}

0001c86a <conn_cleanup>:
{
   1c86a:	b570      	push	{r4, r5, r6, lr}
   1c86c:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1c86e:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1c872:	2200      	movs	r2, #0
   1c874:	2300      	movs	r3, #0
   1c876:	4630      	mov	r0, r6
   1c878:	f001 fa5d 	bl	1dd36 <net_buf_get>
   1c87c:	4605      	mov	r5, r0
   1c87e:	b950      	cbnz	r0, 1c896 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1c880:	4620      	mov	r0, r4
   1c882:	f7ff ffe9 	bl	1c858 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1c886:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1c88a:	2200      	movs	r2, #0
}
   1c88c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1c890:	2300      	movs	r3, #0
   1c892:	f7fd be6b 	b.w	1a56c <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1c896:	6968      	ldr	r0, [r5, #20]
   1c898:	b108      	cbz	r0, 1c89e <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1c89a:	f7eb fde1 	bl	8460 <tx_free>
		net_buf_unref(buf);
   1c89e:	4628      	mov	r0, r5
   1c8a0:	f7fa fae2 	bl	16e68 <net_buf_unref>
   1c8a4:	e7e5      	b.n	1c872 <conn_cleanup+0x8>

0001c8a6 <bt_conn_recv>:
{
   1c8a6:	b570      	push	{r4, r5, r6, lr}
   1c8a8:	4616      	mov	r6, r2
   1c8aa:	4604      	mov	r4, r0
   1c8ac:	460d      	mov	r5, r1
	tx_notify(conn);
   1c8ae:	f7ff ffb0 	bl	1c812 <tx_notify>
	switch (flags) {
   1c8b2:	2e01      	cmp	r6, #1
   1c8b4:	d017      	beq.n	1c8e6 <bt_conn_recv+0x40>
   1c8b6:	2e02      	cmp	r6, #2
   1c8b8:	d117      	bne.n	1c8ea <bt_conn_recv+0x44>
		if (conn->rx) {
   1c8ba:	6923      	ldr	r3, [r4, #16]
   1c8bc:	b113      	cbz	r3, 1c8c4 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1c8be:	4620      	mov	r0, r4
   1c8c0:	f7ff ffca 	bl	1c858 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1c8c4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1c8c6:	6921      	ldr	r1, [r4, #16]
   1c8c8:	898a      	ldrh	r2, [r1, #12]
   1c8ca:	2a01      	cmp	r2, #1
   1c8cc:	d937      	bls.n	1c93e <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1c8ce:	688b      	ldr	r3, [r1, #8]
   1c8d0:	881b      	ldrh	r3, [r3, #0]
   1c8d2:	3304      	adds	r3, #4
   1c8d4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1c8d6:	429a      	cmp	r2, r3
   1c8d8:	d331      	bcc.n	1c93e <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   1c8da:	d928      	bls.n	1c92e <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   1c8dc:	4620      	mov	r0, r4
}
   1c8de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1c8e2:	f7ff bfb9 	b.w	1c858 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1c8e6:	6920      	ldr	r0, [r4, #16]
   1c8e8:	b918      	cbnz	r0, 1c8f2 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   1c8ea:	4620      	mov	r0, r4
   1c8ec:	f7ff ffb4 	bl	1c858 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1c8f0:	e001      	b.n	1c8f6 <bt_conn_recv+0x50>
		if (!buf->len) {
   1c8f2:	89ae      	ldrh	r6, [r5, #12]
   1c8f4:	b926      	cbnz	r6, 1c900 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   1c8f6:	4628      	mov	r0, r5
}
   1c8f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1c8fc:	f7fa bab4 	b.w	16e68 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1c900:	3008      	adds	r0, #8
   1c902:	f001 fab8 	bl	1de76 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1c906:	4286      	cmp	r6, r0
   1c908:	d907      	bls.n	1c91a <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   1c90a:	6921      	ldr	r1, [r4, #16]
   1c90c:	2200      	movs	r2, #0
   1c90e:	4620      	mov	r0, r4
   1c910:	f000 f9b8 	bl	1cc84 <bt_l2cap_recv>
			conn->rx = NULL;
   1c914:	2300      	movs	r3, #0
   1c916:	6123      	str	r3, [r4, #16]
   1c918:	e7ed      	b.n	1c8f6 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c91a:	6920      	ldr	r0, [r4, #16]
   1c91c:	89aa      	ldrh	r2, [r5, #12]
   1c91e:	68a9      	ldr	r1, [r5, #8]
   1c920:	3008      	adds	r0, #8
   1c922:	f001 fa6b 	bl	1ddfc <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1c926:	4628      	mov	r0, r5
   1c928:	f7fa fa9e 	bl	16e68 <net_buf_unref>
		break;
   1c92c:	e7cb      	b.n	1c8c6 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1c92e:	2300      	movs	r3, #0
   1c930:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1c932:	4620      	mov	r0, r4
   1c934:	2201      	movs	r2, #1
}
   1c936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1c93a:	f000 b9a3 	b.w	1cc84 <bt_l2cap_recv>
}
   1c93e:	bd70      	pop	{r4, r5, r6, pc}

0001c940 <bt_conn_ref>:
{
   1c940:	b510      	push	{r4, lr}
   1c942:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   1c944:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1c948:	4610      	mov	r0, r2
   1c94a:	f7ff ff50 	bl	1c7ee <atomic_get>
		if (!old) {
   1c94e:	b180      	cbz	r0, 1c972 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c950:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1c954:	1c41      	adds	r1, r0, #1
   1c956:	e852 4f00 	ldrex	r4, [r2]
   1c95a:	4284      	cmp	r4, r0
   1c95c:	d104      	bne.n	1c968 <bt_conn_ref+0x28>
   1c95e:	e842 1c00 	strex	ip, r1, [r2]
   1c962:	f1bc 0f00 	cmp.w	ip, #0
   1c966:	d1f6      	bne.n	1c956 <bt_conn_ref+0x16>
   1c968:	f3bf 8f5b 	dmb	ish
   1c96c:	d1ec      	bne.n	1c948 <bt_conn_ref+0x8>
}
   1c96e:	4618      	mov	r0, r3
   1c970:	bd10      	pop	{r4, pc}
			return NULL;
   1c972:	4603      	mov	r3, r0
   1c974:	e7fb      	b.n	1c96e <bt_conn_ref+0x2e>

0001c976 <conn_lookup_handle>:
{
   1c976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c97a:	4606      	mov	r6, r0
   1c97c:	460d      	mov	r5, r1
   1c97e:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   1c980:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c982:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1c986:	42ac      	cmp	r4, r5
   1c988:	d102      	bne.n	1c990 <conn_lookup_handle+0x1a>
	return NULL;
   1c98a:	2000      	movs	r0, #0
}
   1c98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c990:	fb08 6004 	mla	r0, r8, r4, r6
   1c994:	f7ff ffd4 	bl	1c940 <bt_conn_ref>
		if (!conn) {
   1c998:	b158      	cbz	r0, 1c9b2 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   1c99a:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1c99c:	2b01      	cmp	r3, #1
   1c99e:	d002      	beq.n	1c9a6 <conn_lookup_handle+0x30>
   1c9a0:	3b07      	subs	r3, #7
   1c9a2:	2b01      	cmp	r3, #1
   1c9a4:	d802      	bhi.n	1c9ac <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   1c9a6:	8803      	ldrh	r3, [r0, #0]
   1c9a8:	42bb      	cmp	r3, r7
   1c9aa:	d0ef      	beq.n	1c98c <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   1c9ac:	30b8      	adds	r0, #184	; 0xb8
   1c9ae:	f7ff ff24 	bl	1c7fa <atomic_dec.isra.0>
	for (i = 0; i < size; i++) {
   1c9b2:	3401      	adds	r4, #1
   1c9b4:	e7e7      	b.n	1c986 <conn_lookup_handle+0x10>

0001c9b6 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1c9b6:	30b8      	adds	r0, #184	; 0xb8
   1c9b8:	f7ff bf1f 	b.w	1c7fa <atomic_dec.isra.0>

0001c9bc <bt_conn_connected>:
{
   1c9bc:	b510      	push	{r4, lr}
   1c9be:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1c9c0:	f7ec f916 	bl	8bf0 <bt_l2cap_connected>
	notify_connected(conn);
   1c9c4:	4620      	mov	r0, r4
}
   1c9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1c9ca:	f7eb bd53 	b.w	8474 <notify_connected>

0001c9ce <bt_conn_get_security>:
}
   1c9ce:	2001      	movs	r0, #1
   1c9d0:	4770      	bx	lr

0001c9d2 <bt_conn_is_peer_addr_le>:
{
   1c9d2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1c9d4:	7a03      	ldrb	r3, [r0, #8]
   1c9d6:	428b      	cmp	r3, r1
{
   1c9d8:	4604      	mov	r4, r0
   1c9da:	4615      	mov	r5, r2
	if (id != conn->id) {
   1c9dc:	d115      	bne.n	1ca0a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1c9de:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c9e2:	2207      	movs	r2, #7
   1c9e4:	4628      	mov	r0, r5
   1c9e6:	f7ff f98f 	bl	1bd08 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1c9ea:	b180      	cbz	r0, 1ca0e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c9ec:	78e3      	ldrb	r3, [r4, #3]
   1c9ee:	2207      	movs	r2, #7
   1c9f0:	b943      	cbnz	r3, 1ca04 <bt_conn_is_peer_addr_le+0x32>
   1c9f2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1c9f6:	4628      	mov	r0, r5
   1c9f8:	f7ff f986 	bl	1bd08 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1c9fc:	fab0 f080 	clz	r0, r0
   1ca00:	0940      	lsrs	r0, r0, #5
}
   1ca02:	bd38      	pop	{r3, r4, r5, pc}
   1ca04:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1ca08:	e7f5      	b.n	1c9f6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1ca0a:	2000      	movs	r0, #0
   1ca0c:	e7f9      	b.n	1ca02 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1ca0e:	2001      	movs	r0, #1
   1ca10:	e7f7      	b.n	1ca02 <bt_conn_is_peer_addr_le+0x30>

0001ca12 <bt_conn_le_conn_update>:
{
   1ca12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca14:	4607      	mov	r7, r0
   1ca16:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ca18:	f242 0013 	movw	r0, #8211	; 0x2013
   1ca1c:	210e      	movs	r1, #14
   1ca1e:	f7ea f8ad 	bl	6b7c <bt_hci_cmd_create>
	if (!buf) {
   1ca22:	4606      	mov	r6, r0
   1ca24:	b1d0      	cbz	r0, 1ca5c <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1ca26:	210e      	movs	r1, #14
   1ca28:	3008      	adds	r0, #8
   1ca2a:	f001 f9e1 	bl	1ddf0 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ca2e:	220e      	movs	r2, #14
   1ca30:	4604      	mov	r4, r0
   1ca32:	2100      	movs	r1, #0
   1ca34:	f7ff f984 	bl	1bd40 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ca38:	883b      	ldrh	r3, [r7, #0]
   1ca3a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ca3c:	882b      	ldrh	r3, [r5, #0]
   1ca3e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ca40:	886b      	ldrh	r3, [r5, #2]
   1ca42:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ca44:	88ab      	ldrh	r3, [r5, #4]
   1ca46:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ca48:	88eb      	ldrh	r3, [r5, #6]
   1ca4a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ca4c:	4631      	mov	r1, r6
   1ca4e:	2200      	movs	r2, #0
}
   1ca50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ca54:	f242 0013 	movw	r0, #8211	; 0x2013
   1ca58:	f7ea b8ca 	b.w	6bf0 <bt_hci_cmd_send_sync>
}
   1ca5c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ca60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ca62 <l2cap_connected>:
}
   1ca62:	4770      	bx	lr

0001ca64 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1ca64:	3010      	adds	r0, #16
   1ca66:	f002 bd6a 	b.w	1f53e <k_work_cancel_delayable>

0001ca6a <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1ca6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca6c:	4607      	mov	r7, r0
   1ca6e:	460e      	mov	r6, r1
   1ca70:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1ca72:	2300      	movs	r3, #0
   1ca74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ca78:	2104      	movs	r1, #4
   1ca7a:	2000      	movs	r0, #0
   1ca7c:	f7eb fefc 	bl	8878 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1ca80:	4604      	mov	r4, r0
   1ca82:	b130      	cbz	r0, 1ca92 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   1ca84:	2104      	movs	r1, #4
   1ca86:	3008      	adds	r0, #8
   1ca88:	f001 f9b2 	bl	1ddf0 <net_buf_simple_add>
	hdr->code = code;
   1ca8c:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1ca8e:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1ca90:	8045      	strh	r5, [r0, #2]
}
   1ca92:	4620      	mov	r0, r4
   1ca94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ca96 <bt_l2cap_chan_remove>:
	return list->head;
   1ca96:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ca98:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ca9a:	b173      	cbz	r3, 1caba <bt_l2cap_chan_remove+0x24>
   1ca9c:	3b08      	subs	r3, #8
   1ca9e:	2500      	movs	r5, #0
	return node->next;
   1caa0:	461a      	mov	r2, r3
		if (chan == ch) {
   1caa2:	4299      	cmp	r1, r3
   1caa4:	f852 4f08 	ldr.w	r4, [r2, #8]!
   1caa8:	d10d      	bne.n	1cac6 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   1caaa:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1caac:	b935      	cbnz	r5, 1cabc <bt_l2cap_chan_remove+0x26>
   1caae:	4291      	cmp	r1, r2
	list->head = node;
   1cab0:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1cab2:	d100      	bne.n	1cab6 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   1cab4:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   1cab6:	2200      	movs	r2, #0
   1cab8:	609a      	str	r2, [r3, #8]
}
   1caba:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1cabc:	4291      	cmp	r1, r2
	parent->next = child;
   1cabe:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1cac0:	bf08      	it	eq
   1cac2:	6545      	streq	r5, [r0, #84]	; 0x54
}
   1cac4:	e7f7      	b.n	1cab6 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1cac6:	2c00      	cmp	r4, #0
   1cac8:	d0f7      	beq.n	1caba <bt_l2cap_chan_remove+0x24>
   1caca:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1cace:	4615      	mov	r5, r2
   1cad0:	e7e6      	b.n	1caa0 <bt_l2cap_chan_remove+0xa>

0001cad2 <bt_l2cap_chan_del>:
{
   1cad2:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1cad4:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1cad8:	4604      	mov	r4, r0
	if (!chan->conn) {
   1cada:	b123      	cbz	r3, 1cae6 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1cadc:	686b      	ldr	r3, [r5, #4]
   1cade:	b103      	cbz	r3, 1cae2 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1cae0:	4798      	blx	r3
	chan->conn = NULL;
   1cae2:	2300      	movs	r3, #0
   1cae4:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1cae6:	68e3      	ldr	r3, [r4, #12]
   1cae8:	b10b      	cbz	r3, 1caee <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1caea:	4620      	mov	r0, r4
   1caec:	4798      	blx	r3
	if (ops->released) {
   1caee:	69eb      	ldr	r3, [r5, #28]
   1caf0:	b11b      	cbz	r3, 1cafa <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1caf2:	4620      	mov	r0, r4
}
   1caf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1caf8:	4718      	bx	r3
}
   1cafa:	bd70      	pop	{r4, r5, r6, pc}

0001cafc <l2cap_rtx_timeout>:
{
   1cafc:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1cafe:	f1a0 0410 	sub.w	r4, r0, #16
   1cb02:	4621      	mov	r1, r4
   1cb04:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1cb08:	f7ff ffc5 	bl	1ca96 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1cb0c:	4620      	mov	r0, r4
}
   1cb0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   1cb12:	f7ff bfde 	b.w	1cad2 <bt_l2cap_chan_del>

0001cb16 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1cb16:	3104      	adds	r1, #4
   1cb18:	f7eb beae 	b.w	8878 <bt_conn_create_pdu_timeout>

0001cb1c <bt_l2cap_send_cb>:
{
   1cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb20:	4614      	mov	r4, r2
   1cb22:	4605      	mov	r5, r0
   1cb24:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1cb26:	f102 0008 	add.w	r0, r2, #8
   1cb2a:	2104      	movs	r1, #4
   1cb2c:	461e      	mov	r6, r3
   1cb2e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1cb32:	f001 f974 	bl	1de1e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1cb36:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1cb38:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1cb3a:	3a04      	subs	r2, #4
   1cb3c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1cb3e:	4643      	mov	r3, r8
   1cb40:	4632      	mov	r2, r6
   1cb42:	4621      	mov	r1, r4
   1cb44:	4628      	mov	r0, r5
}
   1cb46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1cb4a:	f7eb bd43 	b.w	85d4 <bt_conn_send_cb>

0001cb4e <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1cb4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cb50:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1cb52:	2202      	movs	r2, #2
   1cb54:	2001      	movs	r0, #1
   1cb56:	f7ff ff88 	bl	1ca6a <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1cb5a:	4604      	mov	r4, r0
   1cb5c:	b198      	cbz	r0, 1cb86 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1cb5e:	2102      	movs	r1, #2
   1cb60:	3008      	adds	r0, #8
   1cb62:	f001 f945 	bl	1ddf0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1cb66:	2300      	movs	r3, #0
   1cb68:	7003      	strb	r3, [r0, #0]
   1cb6a:	7043      	strb	r3, [r0, #1]
   1cb6c:	4622      	mov	r2, r4
   1cb6e:	9300      	str	r3, [sp, #0]
   1cb70:	2105      	movs	r1, #5
   1cb72:	4628      	mov	r0, r5
   1cb74:	f7ff ffd2 	bl	1cb1c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1cb78:	b128      	cbz	r0, 1cb86 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   1cb7a:	4620      	mov	r0, r4
}
   1cb7c:	b003      	add	sp, #12
   1cb7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1cb82:	f7fa b971 	b.w	16e68 <net_buf_unref>
}
   1cb86:	b003      	add	sp, #12
   1cb88:	bd30      	pop	{r4, r5, pc}

0001cb8a <l2cap_recv>:
{
   1cb8a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1cb8c:	898b      	ldrh	r3, [r1, #12]
   1cb8e:	2b03      	cmp	r3, #3
{
   1cb90:	b085      	sub	sp, #20
   1cb92:	4605      	mov	r5, r0
   1cb94:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1cb96:	d911      	bls.n	1cbbc <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   1cb98:	2104      	movs	r1, #4
   1cb9a:	f104 0008 	add.w	r0, r4, #8
   1cb9e:	f001 f94e 	bl	1de3e <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1cba2:	89a3      	ldrh	r3, [r4, #12]
   1cba4:	8842      	ldrh	r2, [r0, #2]
   1cba6:	429a      	cmp	r2, r3
   1cba8:	d108      	bne.n	1cbbc <l2cap_recv+0x32>
	if (!hdr->ident) {
   1cbaa:	7841      	ldrb	r1, [r0, #1]
   1cbac:	b131      	cbz	r1, 1cbbc <l2cap_recv+0x32>
	switch (hdr->code) {
   1cbae:	7803      	ldrb	r3, [r0, #0]
   1cbb0:	2b12      	cmp	r3, #18
   1cbb2:	d006      	beq.n	1cbc2 <l2cap_recv+0x38>
   1cbb4:	2b13      	cmp	r3, #19
   1cbb6:	d001      	beq.n	1cbbc <l2cap_recv+0x32>
   1cbb8:	2b01      	cmp	r3, #1
   1cbba:	d14b      	bne.n	1cc54 <l2cap_recv+0xca>
}
   1cbbc:	2000      	movs	r0, #0
   1cbbe:	b005      	add	sp, #20
   1cbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   1cbc2:	2a07      	cmp	r2, #7
   1cbc4:	d9fa      	bls.n	1cbbc <l2cap_recv+0x32>
   1cbc6:	682d      	ldr	r5, [r5, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1cbc8:	78ef      	ldrb	r7, [r5, #3]
   1cbca:	b11f      	cbz	r7, 1cbd4 <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1cbcc:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   1cbce:	f7ff ffbe 	bl	1cb4e <l2cap_send_reject.constprop.0>
		break;
   1cbd2:	e7f3      	b.n	1cbbc <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1cbd4:	68a2      	ldr	r2, [r4, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1cbd6:	7850      	ldrb	r0, [r2, #1]
   1cbd8:	7813      	ldrb	r3, [r2, #0]
   1cbda:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1cbde:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1cbe2:	78d0      	ldrb	r0, [r2, #3]
   1cbe4:	7893      	ldrb	r3, [r2, #2]
   1cbe6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1cbea:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1cbee:	7950      	ldrb	r0, [r2, #5]
   1cbf0:	7913      	ldrb	r3, [r2, #4]
   1cbf2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1cbf6:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1cbfa:	7993      	ldrb	r3, [r2, #6]
   1cbfc:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1cbfe:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1cc00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1cc04:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1cc06:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1cc0a:	f7ff ff2e 	bl	1ca6a <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1cc0e:	4604      	mov	r4, r0
   1cc10:	2800      	cmp	r0, #0
   1cc12:	d0d3      	beq.n	1cbbc <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   1cc14:	a902      	add	r1, sp, #8
   1cc16:	4628      	mov	r0, r5
   1cc18:	f7eb fe88 	bl	892c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1cc1c:	2102      	movs	r1, #2
   1cc1e:	4606      	mov	r6, r0
   1cc20:	f104 0008 	add.w	r0, r4, #8
   1cc24:	f001 f8e4 	bl	1ddf0 <net_buf_simple_add>
	if (accepted) {
   1cc28:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1cc2c:	b2db      	uxtb	r3, r3
   1cc2e:	8003      	strh	r3, [r0, #0]
   1cc30:	4622      	mov	r2, r4
   1cc32:	9700      	str	r7, [sp, #0]
   1cc34:	463b      	mov	r3, r7
   1cc36:	2105      	movs	r1, #5
   1cc38:	4628      	mov	r0, r5
   1cc3a:	f7ff ff6f 	bl	1cb1c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1cc3e:	b110      	cbz	r0, 1cc46 <l2cap_recv+0xbc>
		net_buf_unref(buf);
   1cc40:	4620      	mov	r0, r4
   1cc42:	f7fa f911 	bl	16e68 <net_buf_unref>
	if (accepted) {
   1cc46:	2e00      	cmp	r6, #0
   1cc48:	d0b8      	beq.n	1cbbc <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   1cc4a:	a902      	add	r1, sp, #8
   1cc4c:	4628      	mov	r0, r5
   1cc4e:	f7ff fee0 	bl	1ca12 <bt_conn_le_conn_update>
   1cc52:	e7b3      	b.n	1cbbc <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   1cc54:	6828      	ldr	r0, [r5, #0]
   1cc56:	e7ba      	b.n	1cbce <l2cap_recv+0x44>

0001cc58 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1cc58:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1cc5a:	b138      	cbz	r0, 1cc6c <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1cc5c:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   1cc60:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1cc62:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1cc66:	d001      	beq.n	1cc6c <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   1cc68:	6880      	ldr	r0, [r0, #8]
   1cc6a:	e7f6      	b.n	1cc5a <bt_l2cap_le_lookup_tx_cid+0x2>
}
   1cc6c:	4770      	bx	lr

0001cc6e <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1cc6e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1cc70:	b138      	cbz	r0, 1cc82 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1cc72:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   1cc76:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1cc78:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1cc7c:	d001      	beq.n	1cc82 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   1cc7e:	6880      	ldr	r0, [r0, #8]
   1cc80:	e7f6      	b.n	1cc70 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1cc82:	4770      	bx	lr

0001cc84 <bt_l2cap_recv>:
{
   1cc84:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1cc86:	898b      	ldrh	r3, [r1, #12]
   1cc88:	2b03      	cmp	r3, #3
{
   1cc8a:	4605      	mov	r5, r0
   1cc8c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1cc8e:	d804      	bhi.n	1cc9a <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1cc90:	4620      	mov	r0, r4
}
   1cc92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1cc96:	f7fa b8e7 	b.w	16e68 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1cc9a:	2104      	movs	r1, #4
   1cc9c:	f104 0008 	add.w	r0, r4, #8
   1cca0:	f001 f8cd 	bl	1de3e <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1cca4:	8841      	ldrh	r1, [r0, #2]
   1cca6:	4628      	mov	r0, r5
   1cca8:	f7ff ffe1 	bl	1cc6e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ccac:	2800      	cmp	r0, #0
   1ccae:	d0ef      	beq.n	1cc90 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1ccb0:	6843      	ldr	r3, [r0, #4]
   1ccb2:	4621      	mov	r1, r4
   1ccb4:	691b      	ldr	r3, [r3, #16]
   1ccb6:	4798      	blx	r3
   1ccb8:	e7ea      	b.n	1cc90 <bt_l2cap_recv+0xc>

0001ccba <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1ccba:	4770      	bx	lr

0001ccbc <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ccbc:	4603      	mov	r3, r0
	return list->head;
   1ccbe:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ccc0:	b128      	cbz	r0, 1ccce <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ccc2:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1ccc4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ccc6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ccc8:	4288      	cmp	r0, r1
	list->tail = node;
   1ccca:	bf08      	it	eq
   1cccc:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1ccce:	4770      	bx	lr

0001ccd0 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1ccd0:	4603      	mov	r3, r0
	size_t bytes = 0;
   1ccd2:	2000      	movs	r0, #0

	while (buf) {
   1ccd4:	b903      	cbnz	r3, 1ccd8 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1ccd6:	4770      	bx	lr
		bytes += buf->len;
   1ccd8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1ccda:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1ccdc:	4410      	add	r0, r2
		buf = buf->frags;
   1ccde:	e7f9      	b.n	1ccd4 <net_buf_frags_len+0x4>

0001cce0 <att_sent>:
	if (chan->ops->sent) {
   1cce0:	684b      	ldr	r3, [r1, #4]
   1cce2:	695b      	ldr	r3, [r3, #20]
{
   1cce4:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1cce6:	b103      	cbz	r3, 1ccea <att_sent+0xa>
		chan->ops->sent(chan);
   1cce8:	4718      	bx	r3
}
   1ccea:	4770      	bx	lr

0001ccec <attr_read_type_cb>:
{
   1ccec:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1ccee:	68d4      	ldr	r4, [r2, #12]
   1ccf0:	7823      	ldrb	r3, [r4, #0]
   1ccf2:	3102      	adds	r1, #2
   1ccf4:	b913      	cbnz	r3, 1ccfc <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1ccf6:	7021      	strb	r1, [r4, #0]
	return true;
   1ccf8:	2001      	movs	r0, #1
   1ccfa:	e006      	b.n	1cd0a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ccfc:	428b      	cmp	r3, r1
   1ccfe:	d0fb      	beq.n	1ccf8 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1cd00:	8983      	ldrh	r3, [r0, #12]
   1cd02:	3b02      	subs	r3, #2
   1cd04:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1cd06:	2000      	movs	r0, #0
   1cd08:	6110      	str	r0, [r2, #16]
}
   1cd0a:	bd10      	pop	{r4, pc}

0001cd0c <att_prepare_write_req>:
}
   1cd0c:	2006      	movs	r0, #6
   1cd0e:	4770      	bx	lr

0001cd10 <att_op_get_type>:
	switch (op) {
   1cd10:	281e      	cmp	r0, #30
   1cd12:	d816      	bhi.n	1cd42 <att_op_get_type+0x32>
   1cd14:	b308      	cbz	r0, 1cd5a <att_op_get_type+0x4a>
   1cd16:	1e43      	subs	r3, r0, #1
   1cd18:	2b1d      	cmp	r3, #29
   1cd1a:	d81e      	bhi.n	1cd5a <att_op_get_type+0x4a>
   1cd1c:	e8df f003 	tbb	[pc, r3]
   1cd20:	23172317 	.word	0x23172317
   1cd24:	23172317 	.word	0x23172317
   1cd28:	23172317 	.word	0x23172317
   1cd2c:	23172317 	.word	0x23172317
   1cd30:	1d172317 	.word	0x1d172317
   1cd34:	2317231d 	.word	0x2317231d
   1cd38:	1d191d17 	.word	0x1d191d17
   1cd3c:	0f1b      	.short	0x0f1b
   1cd3e:	2004      	movs	r0, #4
   1cd40:	4770      	bx	lr
   1cd42:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1cd46:	2b52      	cmp	r3, #82	; 0x52
   1cd48:	d107      	bne.n	1cd5a <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1cd4a:	2000      	movs	r0, #0
}
   1cd4c:	4770      	bx	lr
		return ATT_RESPONSE;
   1cd4e:	2002      	movs	r0, #2
   1cd50:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1cd52:	2003      	movs	r0, #3
   1cd54:	4770      	bx	lr
		return ATT_INDICATION;
   1cd56:	2005      	movs	r0, #5
   1cd58:	4770      	bx	lr
		return ATT_COMMAND;
   1cd5a:	f010 0f40 	tst.w	r0, #64	; 0x40
   1cd5e:	bf0c      	ite	eq
   1cd60:	2006      	moveq	r0, #6
   1cd62:	2000      	movne	r0, #0
   1cd64:	4770      	bx	lr
		return ATT_REQUEST;
   1cd66:	2001      	movs	r0, #1
   1cd68:	4770      	bx	lr

0001cd6a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1cd6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1cd6c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1cd70:	2300      	movs	r3, #0
   1cd72:	9300      	str	r3, [sp, #0]
   1cd74:	461a      	mov	r2, r3
   1cd76:	f7ec fe5d 	bl	9a34 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1cd7a:	b005      	add	sp, #20
   1cd7c:	f85d fb04 	ldr.w	pc, [sp], #4

0001cd80 <find_type_cb>:
{
   1cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1cd84:	f8d2 9000 	ldr.w	r9, [r2]
{
   1cd88:	b091      	sub	sp, #68	; 0x44
   1cd8a:	4607      	mov	r7, r0
   1cd8c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cd8e:	2500      	movs	r5, #0
   1cd90:	f642 0301 	movw	r3, #10241	; 0x2801
   1cd94:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1cd96:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cd9a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1cd9e:	a90b      	add	r1, sp, #44	; 0x2c
{
   1cda0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cda2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1cda6:	f7ff f84b 	bl	1be40 <bt_uuid_cmp>
   1cdaa:	2800      	cmp	r0, #0
   1cdac:	d079      	beq.n	1cea2 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1cdae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1cdb2:	6838      	ldr	r0, [r7, #0]
   1cdb4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1cdb8:	a90b      	add	r1, sp, #44	; 0x2c
   1cdba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1cdbe:	f7ff f83f 	bl	1be40 <bt_uuid_cmp>
   1cdc2:	b138      	cbz	r0, 1cdd4 <find_type_cb+0x54>
		if (data->group &&
   1cdc4:	68a3      	ldr	r3, [r4, #8]
   1cdc6:	b11b      	cbz	r3, 1cdd0 <find_type_cb+0x50>
   1cdc8:	885a      	ldrh	r2, [r3, #2]
   1cdca:	42b2      	cmp	r2, r6
   1cdcc:	d200      	bcs.n	1cdd0 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1cdce:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1cdd0:	2001      	movs	r0, #1
   1cdd2:	e009      	b.n	1cde8 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1cdd4:	6861      	ldr	r1, [r4, #4]
   1cdd6:	4608      	mov	r0, r1
   1cdd8:	f7ff ff7a 	bl	1ccd0 <net_buf_frags_len>
   1cddc:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1cde0:	1a1b      	subs	r3, r3, r0
   1cde2:	2b03      	cmp	r3, #3
   1cde4:	d803      	bhi.n	1cdee <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1cde6:	2000      	movs	r0, #0
}
   1cde8:	b011      	add	sp, #68	; 0x44
   1cdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1cdee:	4608      	mov	r0, r1
   1cdf0:	f000 ffd0 	bl	1dd94 <net_buf_frag_last>
   1cdf4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1cdf6:	6860      	ldr	r0, [r4, #4]
   1cdf8:	f7ff ff6a 	bl	1ccd0 <net_buf_frags_len>
   1cdfc:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1ce00:	f105 0b08 	add.w	fp, r5, #8
   1ce04:	ebaa 0a00 	sub.w	sl, sl, r0
   1ce08:	4658      	mov	r0, fp
   1ce0a:	f001 f834 	bl	1de76 <net_buf_simple_tailroom>
   1ce0e:	4582      	cmp	sl, r0
   1ce10:	d23f      	bcs.n	1ce92 <find_type_cb+0x112>
   1ce12:	6860      	ldr	r0, [r4, #4]
   1ce14:	f7ff ff5c 	bl	1ccd0 <net_buf_frags_len>
   1ce18:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1ce1c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1ce1e:	b970      	cbnz	r0, 1ce3e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1ce20:	6863      	ldr	r3, [r4, #4]
   1ce22:	7998      	ldrb	r0, [r3, #6]
   1ce24:	f7f9 ff5c 	bl	16ce0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ce28:	2200      	movs	r2, #0
   1ce2a:	2300      	movs	r3, #0
   1ce2c:	f000 ff7e 	bl	1dd2c <net_buf_alloc_fixed>
		if (!frag) {
   1ce30:	4605      	mov	r5, r0
   1ce32:	2800      	cmp	r0, #0
   1ce34:	d0d7      	beq.n	1cde6 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1ce36:	4601      	mov	r1, r0
   1ce38:	6860      	ldr	r0, [r4, #4]
   1ce3a:	f000 ffbc 	bl	1ddb6 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1ce3e:	2300      	movs	r3, #0
   1ce40:	9300      	str	r3, [sp, #0]
   1ce42:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1ce46:	4639      	mov	r1, r7
   1ce48:	2310      	movs	r3, #16
   1ce4a:	aa02      	add	r2, sp, #8
   1ce4c:	4640      	mov	r0, r8
   1ce4e:	47c8      	blx	r9
	if (read < 0) {
   1ce50:	1e07      	subs	r7, r0, #0
   1ce52:	db26      	blt.n	1cea2 <find_type_cb+0x122>
	if (read != data->value_len) {
   1ce54:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1ce56:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1ce58:	42ba      	cmp	r2, r7
   1ce5a:	d01e      	beq.n	1ce9a <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1ce5c:	4601      	mov	r1, r0
   1ce5e:	a80b      	add	r0, sp, #44	; 0x2c
   1ce60:	f7ff f81c 	bl	1be9c <bt_uuid_create>
   1ce64:	b1e8      	cbz	r0, 1cea2 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1ce66:	b2fa      	uxtb	r2, r7
   1ce68:	a902      	add	r1, sp, #8
   1ce6a:	a806      	add	r0, sp, #24
   1ce6c:	f7ff f816 	bl	1be9c <bt_uuid_create>
   1ce70:	b1b8      	cbz	r0, 1cea2 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1ce72:	a906      	add	r1, sp, #24
   1ce74:	a80b      	add	r0, sp, #44	; 0x2c
   1ce76:	f7fe ffe3 	bl	1be40 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1ce7a:	b990      	cbnz	r0, 1cea2 <find_type_cb+0x122>
	data->err = 0x00;
   1ce7c:	2300      	movs	r3, #0
   1ce7e:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1ce80:	2104      	movs	r1, #4
   1ce82:	f105 0008 	add.w	r0, r5, #8
   1ce86:	f000 ffb3 	bl	1ddf0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ce8a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ce8c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ce8e:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1ce90:	e79e      	b.n	1cdd0 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1ce92:	4658      	mov	r0, fp
   1ce94:	f000 ffef 	bl	1de76 <net_buf_simple_tailroom>
   1ce98:	e7c1      	b.n	1ce1e <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1ce9a:	a902      	add	r1, sp, #8
   1ce9c:	f7fe ff34 	bl	1bd08 <memcmp>
   1cea0:	e7eb      	b.n	1ce7a <find_type_cb+0xfa>
	data->group = NULL;
   1cea2:	2300      	movs	r3, #0
   1cea4:	60a3      	str	r3, [r4, #8]
   1cea6:	e793      	b.n	1cdd0 <find_type_cb+0x50>

0001cea8 <find_info_cb>:
{
   1cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ceaa:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1ceac:	6817      	ldr	r7, [r2, #0]
{
   1ceae:	4605      	mov	r5, r0
   1ceb0:	460e      	mov	r6, r1
   1ceb2:	4614      	mov	r4, r2
	if (!data->rsp) {
   1ceb4:	b963      	cbnz	r3, 1ced0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ceb6:	6850      	ldr	r0, [r2, #4]
   1ceb8:	2101      	movs	r1, #1
   1ceba:	3008      	adds	r0, #8
   1cebc:	f000 ff98 	bl	1ddf0 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1cec0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1cec2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1cec4:	781b      	ldrb	r3, [r3, #0]
   1cec6:	2b00      	cmp	r3, #0
   1cec8:	bf0c      	ite	eq
   1ceca:	2301      	moveq	r3, #1
   1cecc:	2302      	movne	r3, #2
   1cece:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ced0:	68a3      	ldr	r3, [r4, #8]
   1ced2:	781b      	ldrb	r3, [r3, #0]
   1ced4:	2b01      	cmp	r3, #1
   1ced6:	d003      	beq.n	1cee0 <find_info_cb+0x38>
   1ced8:	2b02      	cmp	r3, #2
   1ceda:	d019      	beq.n	1cf10 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1cedc:	2000      	movs	r0, #0
   1cede:	e016      	b.n	1cf0e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1cee0:	682b      	ldr	r3, [r5, #0]
   1cee2:	781b      	ldrb	r3, [r3, #0]
   1cee4:	2b00      	cmp	r3, #0
   1cee6:	d1f9      	bne.n	1cedc <find_info_cb+0x34>
   1cee8:	6860      	ldr	r0, [r4, #4]
   1ceea:	2104      	movs	r1, #4
   1ceec:	3008      	adds	r0, #8
   1ceee:	f000 ff7f 	bl	1ddf0 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1cef2:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1cef4:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1cef6:	885b      	ldrh	r3, [r3, #2]
   1cef8:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1cefa:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1cefc:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1cefe:	899b      	ldrh	r3, [r3, #12]
   1cf00:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   1cf04:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1cf06:	2804      	cmp	r0, #4
   1cf08:	bf94      	ite	ls
   1cf0a:	2000      	movls	r0, #0
   1cf0c:	2001      	movhi	r0, #1
}
   1cf0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1cf10:	682b      	ldr	r3, [r5, #0]
   1cf12:	781b      	ldrb	r3, [r3, #0]
   1cf14:	2b02      	cmp	r3, #2
   1cf16:	d1e1      	bne.n	1cedc <find_info_cb+0x34>
   1cf18:	6860      	ldr	r0, [r4, #4]
   1cf1a:	2112      	movs	r1, #18
   1cf1c:	3008      	adds	r0, #8
   1cf1e:	f000 ff67 	bl	1ddf0 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1cf22:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1cf24:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1cf26:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1cf28:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1cf2c:	3101      	adds	r1, #1
   1cf2e:	f7fe fefc 	bl	1bd2a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1cf32:	6863      	ldr	r3, [r4, #4]
   1cf34:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   1cf38:	899b      	ldrh	r3, [r3, #12]
   1cf3a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1cf3c:	2812      	cmp	r0, #18
   1cf3e:	e7e3      	b.n	1cf08 <find_info_cb+0x60>

0001cf40 <att_chan_mtu_updated>:
{
   1cf40:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1cf42:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1cf44:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cf46:	b1e3      	cbz	r3, 1cf82 <att_chan_mtu_updated+0x42>
	return node->next;
   1cf48:	681a      	ldr	r2, [r3, #0]
   1cf4a:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   1cf4e:	b10a      	cbz	r2, 1cf54 <att_chan_mtu_updated+0x14>
   1cf50:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   1cf54:	2300      	movs	r3, #0
   1cf56:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   1cf58:	42a8      	cmp	r0, r5
   1cf5a:	d009      	beq.n	1cf70 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1cf5c:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   1cf60:	42a1      	cmp	r1, r4
   1cf62:	bf38      	it	cc
   1cf64:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1cf66:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   1cf6a:	42a3      	cmp	r3, r4
   1cf6c:	bf38      	it	cc
   1cf6e:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cf70:	b142      	cbz	r2, 1cf84 <att_chan_mtu_updated+0x44>
   1cf72:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   1cf76:	b10c      	cbz	r4, 1cf7c <att_chan_mtu_updated+0x3c>
   1cf78:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1cf7c:	4615      	mov	r5, r2
   1cf7e:	4622      	mov	r2, r4
   1cf80:	e7ea      	b.n	1cf58 <att_chan_mtu_updated+0x18>
   1cf82:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1cf84:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1cf88:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1cf8c:	428c      	cmp	r4, r1
   1cf8e:	d801      	bhi.n	1cf94 <att_chan_mtu_updated+0x54>
   1cf90:	429a      	cmp	r2, r3
   1cf92:	d909      	bls.n	1cfa8 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1cf94:	429a      	cmp	r2, r3
   1cf96:	bf38      	it	cc
   1cf98:	461a      	movcc	r2, r3
   1cf9a:	42a1      	cmp	r1, r4
   1cf9c:	6830      	ldr	r0, [r6, #0]
   1cf9e:	bf38      	it	cc
   1cfa0:	4621      	movcc	r1, r4
}
   1cfa2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1cfa4:	f7ec bfa6 	b.w	9ef4 <bt_gatt_att_max_mtu_changed>
}
   1cfa8:	bc70      	pop	{r4, r5, r6}
   1cfaa:	4770      	bx	lr

0001cfac <attr_read_group_cb>:
	if (!data->rsp->len) {
   1cfac:	68d0      	ldr	r0, [r2, #12]
   1cfae:	7803      	ldrb	r3, [r0, #0]
   1cfb0:	3104      	adds	r1, #4
   1cfb2:	b913      	cbnz	r3, 1cfba <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1cfb4:	7001      	strb	r1, [r0, #0]
	return true;
   1cfb6:	2001      	movs	r0, #1
}
   1cfb8:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1cfba:	428b      	cmp	r3, r1
   1cfbc:	d0fb      	beq.n	1cfb6 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1cfbe:	6891      	ldr	r1, [r2, #8]
   1cfc0:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1cfc2:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1cfc4:	3b04      	subs	r3, #4
   1cfc6:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1cfc8:	6110      	str	r0, [r2, #16]
		return false;
   1cfca:	4770      	bx	lr

0001cfcc <att_get>:
{
   1cfcc:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1cfce:	7a83      	ldrb	r3, [r0, #10]
   1cfd0:	2b07      	cmp	r3, #7
   1cfd2:	d001      	beq.n	1cfd8 <att_get+0xc>
		return NULL;
   1cfd4:	2000      	movs	r0, #0
}
   1cfd6:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1cfd8:	2104      	movs	r1, #4
   1cfda:	f7ff fe48 	bl	1cc6e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1cfde:	2800      	cmp	r0, #0
   1cfe0:	d0f8      	beq.n	1cfd4 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cfe2:	f3bf 8f5b 	dmb	ish
   1cfe6:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1cfea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1cfee:	075b      	lsls	r3, r3, #29
   1cff0:	d4f0      	bmi.n	1cfd4 <att_get+0x8>
	return att_chan->att;
   1cff2:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1cff6:	e7ee      	b.n	1cfd6 <att_get+0xa>

0001cff8 <chan_req_sent>:
	if (chan->req) {
   1cff8:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1cffc:	b133      	cbz	r3, 1d00c <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1cffe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d002:	2300      	movs	r3, #0
   1d004:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1d008:	f7fd bab0 	b.w	1a56c <k_work_reschedule>
}
   1d00c:	4770      	bx	lr

0001d00e <write_cb>:
{
   1d00e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d010:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1d012:	4601      	mov	r1, r0
{
   1d014:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1d016:	222a      	movs	r2, #42	; 0x2a
   1d018:	6820      	ldr	r0, [r4, #0]
   1d01a:	f000 fdd3 	bl	1dbc4 <bt_gatt_check_perm>
   1d01e:	4605      	mov	r5, r0
   1d020:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1d022:	bb20      	cbnz	r0, 1d06e <write_cb+0x60>
	if (!data->req) {
   1d024:	7a23      	ldrb	r3, [r4, #8]
   1d026:	b1ab      	cbz	r3, 1d054 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   1d028:	2b18      	cmp	r3, #24
   1d02a:	bf14      	ite	ne
   1d02c:	2300      	movne	r3, #0
   1d02e:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   1d030:	9301      	str	r3, [sp, #4]
   1d032:	8a63      	ldrh	r3, [r4, #18]
   1d034:	9300      	str	r3, [sp, #0]
   1d036:	68b7      	ldr	r7, [r6, #8]
   1d038:	8a23      	ldrh	r3, [r4, #16]
   1d03a:	68e2      	ldr	r2, [r4, #12]
   1d03c:	6820      	ldr	r0, [r4, #0]
   1d03e:	4631      	mov	r1, r6
   1d040:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1d042:	1e03      	subs	r3, r0, #0
   1d044:	db08      	blt.n	1d058 <write_cb+0x4a>
   1d046:	8a22      	ldrh	r2, [r4, #16]
   1d048:	4293      	cmp	r3, r2
   1d04a:	d10e      	bne.n	1d06a <write_cb+0x5c>
	data->err = 0U;
   1d04c:	2300      	movs	r3, #0
   1d04e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1d050:	2501      	movs	r5, #1
   1d052:	e007      	b.n	1d064 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1d054:	2302      	movs	r3, #2
   1d056:	e7eb      	b.n	1d030 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   1d058:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1d05c:	d305      	bcc.n	1d06a <write_cb+0x5c>
		return -err;
   1d05e:	425b      	negs	r3, r3
   1d060:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1d062:	7523      	strb	r3, [r4, #20]
}
   1d064:	4628      	mov	r0, r5
   1d066:	b003      	add	sp, #12
   1d068:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1d06a:	230e      	movs	r3, #14
   1d06c:	e7f9      	b.n	1d062 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   1d06e:	2500      	movs	r5, #0
   1d070:	e7f8      	b.n	1d064 <write_cb+0x56>

0001d072 <att_chan_read>:
{
   1d072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d076:	4680      	mov	r8, r0
   1d078:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1d07a:	4610      	mov	r0, r2
{
   1d07c:	4699      	mov	r9, r3
   1d07e:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1d080:	f7ff fe26 	bl	1ccd0 <net_buf_frags_len>
   1d084:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   1d088:	4283      	cmp	r3, r0
{
   1d08a:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1d08c:	d97a      	bls.n	1d184 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1d08e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d092:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1d094:	4630      	mov	r0, r6
   1d096:	f000 fe7d 	bl	1dd94 <net_buf_frag_last>
	size_t len, total = 0;
   1d09a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1d09e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1d0a0:	4630      	mov	r0, r6
   1d0a2:	f7ff fe15 	bl	1ccd0 <net_buf_frags_len>
   1d0a6:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1d0aa:	f105 0708 	add.w	r7, r5, #8
   1d0ae:	1a24      	subs	r4, r4, r0
   1d0b0:	4638      	mov	r0, r7
   1d0b2:	f000 fee0 	bl	1de76 <net_buf_simple_tailroom>
   1d0b6:	4284      	cmp	r4, r0
   1d0b8:	d211      	bcs.n	1d0de <att_chan_read+0x6c>
   1d0ba:	4630      	mov	r0, r6
   1d0bc:	f7ff fe08 	bl	1ccd0 <net_buf_frags_len>
   1d0c0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1d0c4:	1a24      	subs	r4, r4, r0
		if (!len) {
   1d0c6:	bb34      	cbnz	r4, 1d116 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1d0c8:	79b0      	ldrb	r0, [r6, #6]
   1d0ca:	f7f9 fe09 	bl	16ce0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1d0ce:	2200      	movs	r2, #0
   1d0d0:	2300      	movs	r3, #0
   1d0d2:	f000 fe2b 	bl	1dd2c <net_buf_alloc_fixed>
			if (!frag) {
   1d0d6:	4605      	mov	r5, r0
   1d0d8:	b930      	cbnz	r0, 1d0e8 <att_chan_read+0x76>
	return total;
   1d0da:	4657      	mov	r7, sl
   1d0dc:	e02c      	b.n	1d138 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1d0de:	4638      	mov	r0, r7
   1d0e0:	f000 fec9 	bl	1de76 <net_buf_simple_tailroom>
   1d0e4:	4604      	mov	r4, r0
   1d0e6:	e7ee      	b.n	1d0c6 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1d0e8:	4601      	mov	r1, r0
   1d0ea:	4630      	mov	r0, r6
   1d0ec:	f000 fe63 	bl	1ddb6 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1d0f0:	4630      	mov	r0, r6
   1d0f2:	f7ff fded 	bl	1ccd0 <net_buf_frags_len>
   1d0f6:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1d0fa:	f105 0708 	add.w	r7, r5, #8
   1d0fe:	1a24      	subs	r4, r4, r0
   1d100:	4638      	mov	r0, r7
   1d102:	f000 feb8 	bl	1de76 <net_buf_simple_tailroom>
   1d106:	4284      	cmp	r4, r0
   1d108:	d21a      	bcs.n	1d140 <att_chan_read+0xce>
   1d10a:	4630      	mov	r0, r6
   1d10c:	f7ff fde0 	bl	1ccd0 <net_buf_frags_len>
   1d110:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1d114:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1d116:	68a9      	ldr	r1, [r5, #8]
   1d118:	89aa      	ldrh	r2, [r5, #12]
   1d11a:	f8db 7004 	ldr.w	r7, [fp, #4]
   1d11e:	9803      	ldr	r0, [sp, #12]
   1d120:	f8cd 9000 	str.w	r9, [sp]
   1d124:	440a      	add	r2, r1
   1d126:	b2a3      	uxth	r3, r4
   1d128:	4659      	mov	r1, fp
   1d12a:	47b8      	blx	r7
		if (read < 0) {
   1d12c:	1e07      	subs	r7, r0, #0
   1d12e:	da0c      	bge.n	1d14a <att_chan_read+0xd8>
				return total;
   1d130:	f1ba 0f00 	cmp.w	sl, #0
   1d134:	bf18      	it	ne
   1d136:	4657      	movne	r7, sl
}
   1d138:	4638      	mov	r0, r7
   1d13a:	b005      	add	sp, #20
   1d13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d140:	4638      	mov	r0, r7
   1d142:	f000 fe98 	bl	1de76 <net_buf_simple_tailroom>
   1d146:	4604      	mov	r4, r0
   1d148:	e7e5      	b.n	1d116 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1d14a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d14c:	b993      	cbnz	r3, 1d174 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1d14e:	4639      	mov	r1, r7
   1d150:	f105 0008 	add.w	r0, r5, #8
   1d154:	f000 fe4c 	bl	1ddf0 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1d158:	4630      	mov	r0, r6
   1d15a:	f7ff fdb9 	bl	1ccd0 <net_buf_frags_len>
   1d15e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   1d162:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1d164:	4283      	cmp	r3, r0
		total += read;
   1d166:	44ba      	add	sl, r7
		offset += read;
   1d168:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1d16c:	d9b5      	bls.n	1d0da <att_chan_read+0x68>
   1d16e:	42a7      	cmp	r7, r4
   1d170:	d096      	beq.n	1d0a0 <att_chan_read+0x2e>
   1d172:	e7b2      	b.n	1d0da <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1d174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1d176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d178:	4639      	mov	r1, r7
   1d17a:	4628      	mov	r0, r5
   1d17c:	4798      	blx	r3
   1d17e:	2800      	cmp	r0, #0
   1d180:	d1e5      	bne.n	1d14e <att_chan_read+0xdc>
   1d182:	e7aa      	b.n	1d0da <att_chan_read+0x68>
		return 0;
   1d184:	2700      	movs	r7, #0
   1d186:	e7d7      	b.n	1d138 <att_chan_read+0xc6>

0001d188 <chan_req_send>:
{
   1d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1d18a:	688f      	ldr	r7, [r1, #8]
{
   1d18c:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1d18e:	4638      	mov	r0, r7
   1d190:	f7ff fd9e 	bl	1ccd0 <net_buf_frags_len>
   1d194:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   1d198:	4283      	cmp	r3, r0
{
   1d19a:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1d19c:	d30d      	bcc.n	1d1ba <chan_req_send+0x32>
	req->buf = NULL;
   1d19e:	2600      	movs	r6, #0
	chan->req = req;
   1d1a0:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1d1a4:	4632      	mov	r2, r6
	req->buf = NULL;
   1d1a6:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1d1a8:	4620      	mov	r0, r4
   1d1aa:	4639      	mov	r1, r7
   1d1ac:	f7eb fe70 	bl	8e90 <chan_send>
	if (err) {
   1d1b0:	b110      	cbz	r0, 1d1b8 <chan_req_send+0x30>
		req->buf = buf;
   1d1b2:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   1d1b4:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   1d1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1d1ba:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1d1be:	e7fb      	b.n	1d1b8 <chan_req_send+0x30>

0001d1c0 <process_queue>:
{
   1d1c0:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1d1c2:	2200      	movs	r2, #0
{
   1d1c4:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1d1c6:	2300      	movs	r3, #0
   1d1c8:	4608      	mov	r0, r1
{
   1d1ca:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1d1cc:	f000 fdb3 	bl	1dd36 <net_buf_get>
	if (buf) {
   1d1d0:	4605      	mov	r5, r0
   1d1d2:	b160      	cbz	r0, 1d1ee <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1d1d4:	4601      	mov	r1, r0
   1d1d6:	2200      	movs	r2, #0
   1d1d8:	4620      	mov	r0, r4
   1d1da:	f7eb fe59 	bl	8e90 <chan_send>
		if (err) {
   1d1de:	4604      	mov	r4, r0
   1d1e0:	b118      	cbz	r0, 1d1ea <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1d1e2:	4629      	mov	r1, r5
   1d1e4:	4630      	mov	r0, r6
   1d1e6:	f002 f8bb 	bl	1f360 <k_queue_prepend>
}
   1d1ea:	4620      	mov	r0, r4
   1d1ec:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1d1ee:	f06f 0401 	mvn.w	r4, #1
   1d1f2:	e7fa      	b.n	1d1ea <process_queue+0x2a>

0001d1f4 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d1f4:	b510      	push	{r4, lr}
	return list->head;
   1d1f6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d1f8:	2200      	movs	r2, #0
   1d1fa:	b153      	cbz	r3, 1d212 <sys_slist_find_and_remove.isra.0+0x1e>
   1d1fc:	428b      	cmp	r3, r1
   1d1fe:	d10e      	bne.n	1d21e <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1d200:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1d202:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d204:	b932      	cbnz	r2, 1d214 <sys_slist_find_and_remove.isra.0+0x20>
   1d206:	42a1      	cmp	r1, r4
	list->head = node;
   1d208:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d20a:	d100      	bne.n	1d20e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1d20c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1d20e:	2300      	movs	r3, #0
   1d210:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d212:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1d214:	42a1      	cmp	r1, r4
	parent->next = child;
   1d216:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1d218:	bf08      	it	eq
   1d21a:	6042      	streq	r2, [r0, #4]
}
   1d21c:	e7f7      	b.n	1d20e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1d21e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d220:	681b      	ldr	r3, [r3, #0]
   1d222:	e7ea      	b.n	1d1fa <sys_slist_find_and_remove.isra.0+0x6>

0001d224 <att_exec_write_req>:
   1d224:	2006      	movs	r0, #6
   1d226:	4770      	bx	lr

0001d228 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d228:	30f0      	adds	r0, #240	; 0xf0
   1d22a:	f3bf 8f5b 	dmb	ish
   1d22e:	e850 3f00 	ldrex	r3, [r0]
   1d232:	f023 0301 	bic.w	r3, r3, #1
   1d236:	e840 3200 	strex	r2, r3, [r0]
   1d23a:	2a00      	cmp	r2, #0
   1d23c:	d1f7      	bne.n	1d22e <chan_rsp_sent+0x6>
   1d23e:	f3bf 8f5b 	dmb	ish
}
   1d242:	4770      	bx	lr

0001d244 <chan_cfm_sent>:
   1d244:	30f0      	adds	r0, #240	; 0xf0
   1d246:	f3bf 8f5b 	dmb	ish
   1d24a:	e850 3f00 	ldrex	r3, [r0]
   1d24e:	f023 0302 	bic.w	r3, r3, #2
   1d252:	e840 3200 	strex	r2, r3, [r0]
   1d256:	2a00      	cmp	r2, #0
   1d258:	d1f7      	bne.n	1d24a <chan_cfm_sent+0x6>
   1d25a:	f3bf 8f5b 	dmb	ish
}
   1d25e:	4770      	bx	lr

0001d260 <read_cb>:
{
   1d260:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1d264:	f8d2 8000 	ldr.w	r8, [r2]
{
   1d268:	4606      	mov	r6, r0
	data->err = 0x00;
   1d26a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1d26c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1d270:	7317      	strb	r7, [r2, #12]
{
   1d272:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1d274:	4631      	mov	r1, r6
   1d276:	2215      	movs	r2, #21
   1d278:	f000 fca4 	bl	1dbc4 <bt_gatt_check_perm>
   1d27c:	4604      	mov	r4, r0
   1d27e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1d280:	b9a0      	cbnz	r0, 1d2ac <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1d282:	e9cd 0000 	strd	r0, r0, [sp]
   1d286:	88ab      	ldrh	r3, [r5, #4]
   1d288:	68aa      	ldr	r2, [r5, #8]
   1d28a:	4631      	mov	r1, r6
   1d28c:	4640      	mov	r0, r8
   1d28e:	f7ff fef0 	bl	1d072 <att_chan_read>
	if (ret < 0) {
   1d292:	1e03      	subs	r3, r0, #0
   1d294:	da0c      	bge.n	1d2b0 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1d296:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1d29a:	bf26      	itte	cs
   1d29c:	425b      	negcs	r3, r3
   1d29e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1d2a0:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1d2a2:	732b      	strb	r3, [r5, #12]
}
   1d2a4:	4620      	mov	r0, r4
   1d2a6:	b002      	add	sp, #8
   1d2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1d2ac:	463c      	mov	r4, r7
   1d2ae:	e7f9      	b.n	1d2a4 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1d2b0:	2401      	movs	r4, #1
   1d2b2:	e7f7      	b.n	1d2a4 <read_cb+0x44>

0001d2b4 <bt_att_sent>:
{
   1d2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1d2b6:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1d2ba:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1d2be:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1d2c0:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1d2c4:	b10b      	cbz	r3, 1d2ca <bt_att_sent+0x16>
		chan->sent(chan);
   1d2c6:	4638      	mov	r0, r7
   1d2c8:	4798      	blx	r3
   1d2ca:	f3bf 8f5b 	dmb	ish
   1d2ce:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1d2d2:	e853 2f00 	ldrex	r2, [r3]
   1d2d6:	f022 0210 	bic.w	r2, r2, #16
   1d2da:	e843 2100 	strex	r1, r2, [r3]
   1d2de:	2900      	cmp	r1, #0
   1d2e0:	d1f7      	bne.n	1d2d2 <bt_att_sent+0x1e>
   1d2e2:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1d2e6:	b30c      	cbz	r4, 1d32c <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1d2e8:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1d2ec:	b98b      	cbnz	r3, 1d312 <bt_att_sent+0x5e>
   1d2ee:	6863      	ldr	r3, [r4, #4]
   1d2f0:	b17b      	cbz	r3, 1d312 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1d2f2:	1d20      	adds	r0, r4, #4
   1d2f4:	f7ff fce2 	bl	1ccbc <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1d2f8:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1d2fa:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1d2fc:	4638      	mov	r0, r7
   1d2fe:	f7ff ff43 	bl	1d188 <chan_req_send>
   1d302:	2800      	cmp	r0, #0
   1d304:	da12      	bge.n	1d32c <bt_att_sent+0x78>
	parent->next = child;
   1d306:	6863      	ldr	r3, [r4, #4]
   1d308:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d30a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1d30c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d30e:	b903      	cbnz	r3, 1d312 <bt_att_sent+0x5e>
	list->tail = node;
   1d310:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1d312:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1d316:	4638      	mov	r0, r7
   1d318:	f7ff ff52 	bl	1d1c0 <process_queue>
	if (!err) {
   1d31c:	b130      	cbz	r0, 1d32c <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1d31e:	f104 010c 	add.w	r1, r4, #12
   1d322:	4638      	mov	r0, r7
}
   1d324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1d328:	f7ff bf4a 	b.w	1d1c0 <process_queue>
}
   1d32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d32e <att_req_send_process>:
{
   1d32e:	b570      	push	{r4, r5, r6, lr}
   1d330:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   1d332:	3004      	adds	r0, #4
   1d334:	f7ff fcc2 	bl	1ccbc <sys_slist_get>
	if (!node) {
   1d338:	4605      	mov	r5, r0
   1d33a:	b1b8      	cbz	r0, 1d36c <att_req_send_process+0x3e>
	return list->head;
   1d33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d33e:	b14b      	cbz	r3, 1d354 <att_req_send_process+0x26>
	return node->next;
   1d340:	681e      	ldr	r6, [r3, #0]
   1d342:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   1d346:	b10e      	cbz	r6, 1d34c <att_req_send_process+0x1e>
   1d348:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   1d34c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1d350:	b13b      	cbz	r3, 1d362 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d352:	b966      	cbnz	r6, 1d36e <att_req_send_process+0x40>
	parent->next = child;
   1d354:	6863      	ldr	r3, [r4, #4]
   1d356:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d358:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1d35a:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d35c:	b933      	cbnz	r3, 1d36c <att_req_send_process+0x3e>
	list->tail = node;
   1d35e:	60a5      	str	r5, [r4, #8]
}
   1d360:	e004      	b.n	1d36c <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   1d362:	4629      	mov	r1, r5
   1d364:	f7ff ff10 	bl	1d188 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1d368:	2800      	cmp	r0, #0
   1d36a:	dbf2      	blt.n	1d352 <att_req_send_process+0x24>
}
   1d36c:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   1d36e:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d372:	b10b      	cbz	r3, 1d378 <att_req_send_process+0x4a>
   1d374:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1d378:	4630      	mov	r0, r6
   1d37a:	461e      	mov	r6, r3
   1d37c:	e7e6      	b.n	1d34c <att_req_send_process+0x1e>

0001d37e <bt_att_status>:
{
   1d37e:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d380:	f3bf 8f5b 	dmb	ish
   1d384:	680b      	ldr	r3, [r1, #0]
   1d386:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1d38a:	07db      	lsls	r3, r3, #31
{
   1d38c:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1d38e:	d519      	bpl.n	1d3c4 <bt_att_status+0x46>
	if (!chan->att) {
   1d390:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1d394:	b1b0      	cbz	r0, 1d3c4 <bt_att_status+0x46>
	if (chan->req) {
   1d396:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1d39a:	b99b      	cbnz	r3, 1d3c4 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1d39c:	3004      	adds	r0, #4
   1d39e:	f7ff fc8d 	bl	1ccbc <sys_slist_get>
	if (!node) {
   1d3a2:	4604      	mov	r4, r0
   1d3a4:	b170      	cbz	r0, 1d3c4 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1d3a6:	4601      	mov	r1, r0
   1d3a8:	f1a5 0008 	sub.w	r0, r5, #8
   1d3ac:	f7ff feec 	bl	1d188 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1d3b0:	2800      	cmp	r0, #0
   1d3b2:	da07      	bge.n	1d3c4 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1d3b4:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1d3b8:	685a      	ldr	r2, [r3, #4]
   1d3ba:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d3bc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1d3be:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d3c0:	b902      	cbnz	r2, 1d3c4 <bt_att_status+0x46>
	list->tail = node;
   1d3c2:	609c      	str	r4, [r3, #8]
}
   1d3c4:	bd38      	pop	{r3, r4, r5, pc}

0001d3c6 <bt_att_chan_create_pdu>:
{
   1d3c6:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d3c8:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1d3cc:	3201      	adds	r2, #1
   1d3ce:	429a      	cmp	r2, r3
{
   1d3d0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d3d2:	d81b      	bhi.n	1d40c <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1d3d4:	4608      	mov	r0, r1
   1d3d6:	f7ff fc9b 	bl	1cd10 <att_op_get_type>
   1d3da:	2802      	cmp	r0, #2
   1d3dc:	d001      	beq.n	1d3e2 <bt_att_chan_create_pdu+0x1c>
   1d3de:	2804      	cmp	r0, #4
   1d3e0:	d10f      	bne.n	1d402 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1d3e2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d3e6:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1d3e8:	2100      	movs	r1, #0
   1d3ea:	4608      	mov	r0, r1
   1d3ec:	f7ff fb93 	bl	1cb16 <bt_l2cap_create_pdu_timeout>
   1d3f0:	4604      	mov	r4, r0
	if (!buf) {
   1d3f2:	b120      	cbz	r0, 1d3fe <bt_att_chan_create_pdu+0x38>
   1d3f4:	2101      	movs	r1, #1
   1d3f6:	3008      	adds	r0, #8
   1d3f8:	f000 fcfa 	bl	1ddf0 <net_buf_simple_add>
	hdr->code = op;
   1d3fc:	7005      	strb	r5, [r0, #0]
}
   1d3fe:	4620      	mov	r0, r4
   1d400:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1d402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d40a:	e7ed      	b.n	1d3e8 <bt_att_chan_create_pdu+0x22>
		return NULL;
   1d40c:	2400      	movs	r4, #0
   1d40e:	e7f6      	b.n	1d3fe <bt_att_chan_create_pdu+0x38>

0001d410 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1d410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d414:	4688      	mov	r8, r1
   1d416:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1d418:	2101      	movs	r1, #1
   1d41a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1d41c:	4605      	mov	r5, r0
   1d41e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1d420:	f7ff ffd1 	bl	1d3c6 <bt_att_chan_create_pdu>
	if (!buf) {
   1d424:	4604      	mov	r4, r0
   1d426:	b170      	cbz	r0, 1d446 <send_err_rsp.part.0+0x36>
   1d428:	2104      	movs	r1, #4
   1d42a:	3008      	adds	r0, #8
   1d42c:	f000 fce0 	bl	1ddf0 <net_buf_simple_add>
	rsp->request = req;
   1d430:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1d434:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1d436:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1d43a:	4621      	mov	r1, r4
   1d43c:	4628      	mov	r0, r5
}
   1d43e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1d442:	f7eb bd83 	b.w	8f4c <bt_att_chan_send_rsp.constprop.0>
}
   1d446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d44a <att_write_req>:
{
   1d44a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d44c:	460c      	mov	r4, r1
   1d44e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1d450:	f101 0008 	add.w	r0, r1, #8
   1d454:	f000 fd03 	bl	1de5e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1d458:	89a2      	ldrh	r2, [r4, #12]
   1d45a:	9201      	str	r2, [sp, #4]
   1d45c:	68a2      	ldr	r2, [r4, #8]
   1d45e:	9200      	str	r2, [sp, #0]
   1d460:	4603      	mov	r3, r0
   1d462:	2213      	movs	r2, #19
   1d464:	2112      	movs	r1, #18
   1d466:	4628      	mov	r0, r5
   1d468:	f7eb fe7c 	bl	9164 <att_write_rsp.constprop.0>
}
   1d46c:	b003      	add	sp, #12
   1d46e:	bd30      	pop	{r4, r5, pc}

0001d470 <att_write_cmd>:
{
   1d470:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d472:	460c      	mov	r4, r1
   1d474:	4605      	mov	r5, r0
   1d476:	f101 0008 	add.w	r0, r1, #8
   1d47a:	f000 fcf0 	bl	1de5e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1d47e:	89a2      	ldrh	r2, [r4, #12]
   1d480:	9201      	str	r2, [sp, #4]
   1d482:	68a2      	ldr	r2, [r4, #8]
   1d484:	9200      	str	r2, [sp, #0]
   1d486:	2200      	movs	r2, #0
   1d488:	4603      	mov	r3, r0
   1d48a:	4611      	mov	r1, r2
   1d48c:	4628      	mov	r0, r5
   1d48e:	f7eb fe69 	bl	9164 <att_write_rsp.constprop.0>
}
   1d492:	b003      	add	sp, #12
   1d494:	bd30      	pop	{r4, r5, pc}

0001d496 <bt_att_create_pdu>:
{
   1d496:	b570      	push	{r4, r5, r6, lr}
   1d498:	460e      	mov	r6, r1
   1d49a:	4615      	mov	r5, r2
	att = att_get(conn);
   1d49c:	f7ff fd96 	bl	1cfcc <att_get>
	if (!att) {
   1d4a0:	b168      	cbz	r0, 1d4be <bt_att_create_pdu+0x28>
	return list->head;
   1d4a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d4a4:	b15b      	cbz	r3, 1d4be <bt_att_create_pdu+0x28>
   1d4a6:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   1d4aa:	681b      	ldr	r3, [r3, #0]
   1d4ac:	b10b      	cbz	r3, 1d4b2 <bt_att_create_pdu+0x1c>
   1d4ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d4b2:	1c6a      	adds	r2, r5, #1
   1d4b4:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1d4b8:	428a      	cmp	r2, r1
   1d4ba:	d902      	bls.n	1d4c2 <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d4bc:	b93b      	cbnz	r3, 1d4ce <bt_att_create_pdu+0x38>
}
   1d4be:	2000      	movs	r0, #0
   1d4c0:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1d4c2:	462a      	mov	r2, r5
   1d4c4:	4631      	mov	r1, r6
}
   1d4c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1d4ca:	f7ff bf7c 	b.w	1d3c6 <bt_att_chan_create_pdu>
   1d4ce:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d4d2:	b10c      	cbz	r4, 1d4d8 <bt_att_create_pdu+0x42>
   1d4d4:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1d4d8:	4618      	mov	r0, r3
   1d4da:	4623      	mov	r3, r4
   1d4dc:	e7ea      	b.n	1d4b4 <bt_att_create_pdu+0x1e>

0001d4de <att_read_blob_req>:
{
   1d4de:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1d4e0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1d4e2:	8813      	ldrh	r3, [r2, #0]
   1d4e4:	8852      	ldrh	r2, [r2, #2]
   1d4e6:	9200      	str	r2, [sp, #0]
   1d4e8:	210c      	movs	r1, #12
   1d4ea:	220d      	movs	r2, #13
   1d4ec:	f7eb ff68 	bl	93c0 <att_read_rsp>
}
   1d4f0:	b003      	add	sp, #12
   1d4f2:	f85d fb04 	ldr.w	pc, [sp], #4

0001d4f6 <att_read_req>:
{
   1d4f6:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1d4f8:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1d4fa:	2200      	movs	r2, #0
   1d4fc:	881b      	ldrh	r3, [r3, #0]
   1d4fe:	9200      	str	r2, [sp, #0]
   1d500:	210a      	movs	r1, #10
   1d502:	220b      	movs	r2, #11
   1d504:	f7eb ff5c 	bl	93c0 <att_read_rsp>
}
   1d508:	b003      	add	sp, #12
   1d50a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d50e <att_mtu_req>:
{
   1d50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1d510:	6803      	ldr	r3, [r0, #0]
{
   1d512:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1d514:	6818      	ldr	r0, [r3, #0]
   1d516:	f3bf 8f5b 	dmb	ish
   1d51a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1d51e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1d522:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1d526:	071b      	lsls	r3, r3, #28
   1d528:	d41d      	bmi.n	1d566 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1d52a:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1d52c:	881b      	ldrh	r3, [r3, #0]
   1d52e:	2b16      	cmp	r3, #22
   1d530:	d91b      	bls.n	1d56a <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1d532:	2202      	movs	r2, #2
   1d534:	2103      	movs	r1, #3
   1d536:	f7ff ffae 	bl	1d496 <bt_att_create_pdu>
	if (!pdu) {
   1d53a:	4606      	mov	r6, r0
   1d53c:	b1b8      	cbz	r0, 1d56e <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   1d53e:	2102      	movs	r1, #2
   1d540:	3008      	adds	r0, #8
   1d542:	f000 fc55 	bl	1ddf0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1d546:	2717      	movs	r7, #23
   1d548:	7007      	strb	r7, [r0, #0]
   1d54a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1d54c:	4631      	mov	r1, r6
   1d54e:	4620      	mov	r0, r4
   1d550:	f7eb fcfc 	bl	8f4c <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   1d554:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1d556:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1d55a:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1d55e:	f7ff fcef 	bl	1cf40 <att_chan_mtu_updated>
	return 0;
   1d562:	4628      	mov	r0, r5
}
   1d564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1d566:	2006      	movs	r0, #6
   1d568:	e7fc      	b.n	1d564 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   1d56a:	2004      	movs	r0, #4
   1d56c:	e7fa      	b.n	1d564 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   1d56e:	200e      	movs	r0, #14
   1d570:	e7f8      	b.n	1d564 <att_mtu_req+0x56>

0001d572 <bt_att_init>:
	bt_gatt_init();
   1d572:	f7ec b9d9 	b.w	9928 <bt_gatt_init>

0001d576 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1d576:	898a      	ldrh	r2, [r1, #12]
   1d578:	6889      	ldr	r1, [r1, #8]
   1d57a:	2300      	movs	r3, #0
   1d57c:	f7ec b89e 	b.w	96bc <att_handle_rsp>

0001d580 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1d580:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   1d584:	f7ec b8cc 	b.w	9720 <bt_att_disconnected>

0001d588 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1d588:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d58c:	4607      	mov	r7, r0
   1d58e:	460d      	mov	r5, r1
   1d590:	4616      	mov	r6, r2
   1d592:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1d594:	f7ff fd1a 	bl	1cfcc <att_get>
	if (!att) {
   1d598:	4604      	mov	r4, r0
   1d59a:	b938      	cbnz	r0, 1d5ac <bt_att_send+0x24>
		net_buf_unref(buf);
   1d59c:	4628      	mov	r0, r5
   1d59e:	f7f9 fc63 	bl	16e68 <net_buf_unref>
		return -ENOTCONN;
   1d5a2:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1d5a6:	b002      	add	sp, #8
   1d5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1d5ac:	b146      	cbz	r6, 1d5c0 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1d5ae:	f8cd 8000 	str.w	r8, [sp]
   1d5b2:	4633      	mov	r3, r6
   1d5b4:	462a      	mov	r2, r5
   1d5b6:	2104      	movs	r1, #4
   1d5b8:	4638      	mov	r0, r7
   1d5ba:	f7ff faaf 	bl	1cb1c <bt_l2cap_send_cb>
   1d5be:	e7f2      	b.n	1d5a6 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1d5c0:	f100 060c 	add.w	r6, r0, #12
   1d5c4:	4629      	mov	r1, r5
   1d5c6:	4630      	mov	r0, r6
   1d5c8:	f000 fbd3 	bl	1dd72 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1d5cc:	2200      	movs	r2, #0
   1d5ce:	2300      	movs	r3, #0
   1d5d0:	4630      	mov	r0, r6
   1d5d2:	f000 fbb0 	bl	1dd36 <net_buf_get>
	if (!buf) {
   1d5d6:	4605      	mov	r5, r0
   1d5d8:	b908      	cbnz	r0, 1d5de <bt_att_send+0x56>
	return 0;
   1d5da:	2000      	movs	r0, #0
   1d5dc:	e7e3      	b.n	1d5a6 <bt_att_send+0x1e>
	return list->head;
   1d5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d5e0:	b1a3      	cbz	r3, 1d60c <bt_att_send+0x84>
	return node->next;
   1d5e2:	681c      	ldr	r4, [r3, #0]
   1d5e4:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   1d5e8:	b10c      	cbz	r4, 1d5ee <bt_att_send+0x66>
   1d5ea:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1d5ee:	2200      	movs	r2, #0
   1d5f0:	4629      	mov	r1, r5
   1d5f2:	f7eb fc4d 	bl	8e90 <chan_send>
		if (err >= 0) {
   1d5f6:	2800      	cmp	r0, #0
   1d5f8:	daef      	bge.n	1d5da <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d5fa:	b13c      	cbz	r4, 1d60c <bt_att_send+0x84>
   1d5fc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1d600:	b10b      	cbz	r3, 1d606 <bt_att_send+0x7e>
   1d602:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1d606:	4620      	mov	r0, r4
   1d608:	461c      	mov	r4, r3
   1d60a:	e7f0      	b.n	1d5ee <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1d60c:	4629      	mov	r1, r5
   1d60e:	4630      	mov	r0, r6
   1d610:	f001 fea6 	bl	1f360 <k_queue_prepend>
   1d614:	e7e1      	b.n	1d5da <bt_att_send+0x52>

0001d616 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1d616:	b510      	push	{r4, lr}
   1d618:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1d61a:	f7ff fcd7 	bl	1cfcc <att_get>
	if (!att) {
   1d61e:	b160      	cbz	r0, 1d63a <bt_att_req_send+0x24>
	parent->next = child;
   1d620:	2300      	movs	r3, #0
   1d622:	6023      	str	r3, [r4, #0]
	return list->tail;
   1d624:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1d626:	b92b      	cbnz	r3, 1d634 <bt_att_req_send+0x1e>
	list->head = node;
   1d628:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1d62c:	f7ff fe7f 	bl	1d32e <att_req_send_process>

	return 0;
   1d630:	2000      	movs	r0, #0
}
   1d632:	bd10      	pop	{r4, pc}
	parent->next = child;
   1d634:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d636:	6084      	str	r4, [r0, #8]
}
   1d638:	e7f8      	b.n	1d62c <bt_att_req_send+0x16>
		return -ENOTCONN;
   1d63a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d63e:	e7f8      	b.n	1d632 <bt_att_req_send+0x1c>

0001d640 <gatt_ccc_changed>:
{
   1d640:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1d642:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1d644:	895a      	ldrh	r2, [r3, #10]
   1d646:	428a      	cmp	r2, r1
   1d648:	d003      	beq.n	1d652 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1d64a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1d64c:	68db      	ldr	r3, [r3, #12]
   1d64e:	b103      	cbz	r3, 1d652 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1d650:	4718      	bx	r3
}
   1d652:	4770      	bx	lr

0001d654 <gatt_indicate_rsp>:
{
   1d654:	b510      	push	{r4, lr}
   1d656:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1d658:	68a3      	ldr	r3, [r4, #8]
{
   1d65a:	460a      	mov	r2, r1
	if (params->func) {
   1d65c:	b10b      	cbz	r3, 1d662 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1d65e:	4621      	mov	r1, r4
   1d660:	4798      	blx	r3
	params->_ref--;
   1d662:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1d664:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1d666:	3b01      	subs	r3, #1
   1d668:	b2db      	uxtb	r3, r3
   1d66a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1d66c:	b122      	cbz	r2, 1d678 <gatt_indicate_rsp+0x24>
   1d66e:	b91b      	cbnz	r3, 1d678 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1d670:	4620      	mov	r0, r4
}
   1d672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1d676:	4710      	bx	r2
}
   1d678:	bd10      	pop	{r4, pc}

0001d67a <match_uuid>:
	data->attr = attr;
   1d67a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1d67c:	8091      	strh	r1, [r2, #4]
}
   1d67e:	2000      	movs	r0, #0
   1d680:	4770      	bx	lr

0001d682 <gen_hash_m>:
{
   1d682:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1d684:	6807      	ldr	r7, [r0, #0]
   1d686:	783d      	ldrb	r5, [r7, #0]
{
   1d688:	b089      	sub	sp, #36	; 0x24
   1d68a:	4606      	mov	r6, r0
   1d68c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1d68e:	b10d      	cbz	r5, 1d694 <gen_hash_m+0x12>
	switch (u16->val) {
   1d690:	2501      	movs	r5, #1
   1d692:	e014      	b.n	1d6be <gen_hash_m+0x3c>
   1d694:	887b      	ldrh	r3, [r7, #2]
   1d696:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1d69a:	d004      	beq.n	1d6a6 <gen_hash_m+0x24>
   1d69c:	d812      	bhi.n	1d6c4 <gen_hash_m+0x42>
   1d69e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1d6a2:	2b03      	cmp	r3, #3
   1d6a4:	d8f4      	bhi.n	1d690 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1d6a6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d6aa:	2202      	movs	r2, #2
   1d6ac:	f10d 010a 	add.w	r1, sp, #10
   1d6b0:	4620      	mov	r0, r4
   1d6b2:	f7fe fa52 	bl	1bb5a <tc_cmac_update>
   1d6b6:	b9e0      	cbnz	r0, 1d6f2 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1d6b8:	f06f 0315 	mvn.w	r3, #21
   1d6bc:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1d6be:	4628      	mov	r0, r5
   1d6c0:	b009      	add	sp, #36	; 0x24
   1d6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1d6c4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1d6c8:	33ff      	adds	r3, #255	; 0xff
   1d6ca:	b29b      	uxth	r3, r3
   1d6cc:	2b04      	cmp	r3, #4
   1d6ce:	d8df      	bhi.n	1d690 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1d6d0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d6d4:	2202      	movs	r2, #2
   1d6d6:	f10d 010a 	add.w	r1, sp, #10
   1d6da:	4620      	mov	r0, r4
   1d6dc:	f7fe fa3d 	bl	1bb5a <tc_cmac_update>
   1d6e0:	2800      	cmp	r0, #0
   1d6e2:	d0e9      	beq.n	1d6b8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1d6e4:	887b      	ldrh	r3, [r7, #2]
   1d6e6:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d6ea:	2202      	movs	r2, #2
   1d6ec:	f10d 010a 	add.w	r1, sp, #10
   1d6f0:	e016      	b.n	1d720 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   1d6f2:	887b      	ldrh	r3, [r7, #2]
   1d6f4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d6f8:	2202      	movs	r2, #2
   1d6fa:	f10d 010a 	add.w	r1, sp, #10
   1d6fe:	4620      	mov	r0, r4
   1d700:	f7fe fa2b 	bl	1bb5a <tc_cmac_update>
   1d704:	2800      	cmp	r0, #0
   1d706:	d0d7      	beq.n	1d6b8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1d708:	2000      	movs	r0, #0
   1d70a:	aa03      	add	r2, sp, #12
   1d70c:	6877      	ldr	r7, [r6, #4]
   1d70e:	9000      	str	r0, [sp, #0]
   1d710:	2313      	movs	r3, #19
   1d712:	4631      	mov	r1, r6
   1d714:	47b8      	blx	r7
		if (len < 0) {
   1d716:	1e02      	subs	r2, r0, #0
   1d718:	da01      	bge.n	1d71e <gen_hash_m+0x9c>
			state->err = len;
   1d71a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1d71c:	e7cf      	b.n	1d6be <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1d71e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1d720:	4620      	mov	r0, r4
   1d722:	f7fe fa1a 	bl	1bb5a <tc_cmac_update>
   1d726:	2800      	cmp	r0, #0
   1d728:	d1b2      	bne.n	1d690 <gen_hash_m+0xe>
   1d72a:	e7c5      	b.n	1d6b8 <gen_hash_m+0x36>

0001d72c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1d72c:	2207      	movs	r2, #7
   1d72e:	f7fe bafc 	b.w	1bd2a <memcpy>

0001d732 <clear_cf_cfg>:
{
   1d732:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d734:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d736:	2500      	movs	r5, #0
   1d738:	4669      	mov	r1, sp
   1d73a:	3001      	adds	r0, #1
   1d73c:	9500      	str	r5, [sp, #0]
   1d73e:	f8cd 5003 	str.w	r5, [sp, #3]
   1d742:	f7ff fff3 	bl	1d72c <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1d746:	f104 0008 	add.w	r0, r4, #8
   1d74a:	2201      	movs	r2, #1
   1d74c:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d74e:	340c      	adds	r4, #12
   1d750:	f7fe faf6 	bl	1bd40 <memset>
   1d754:	f3bf 8f5b 	dmb	ish
   1d758:	e854 3f00 	ldrex	r3, [r4]
   1d75c:	e844 5200 	strex	r2, r5, [r4]
   1d760:	2a00      	cmp	r2, #0
   1d762:	d1f9      	bne.n	1d758 <clear_cf_cfg+0x26>
   1d764:	f3bf 8f5b 	dmb	ish
}
   1d768:	b003      	add	sp, #12
   1d76a:	bd30      	pop	{r4, r5, pc}

0001d76c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d76c:	2301      	movs	r3, #1
   1d76e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d770:	f3bf 8f5b 	dmb	ish
   1d774:	e850 2f00 	ldrex	r2, [r0]
   1d778:	431a      	orrs	r2, r3
   1d77a:	e840 2100 	strex	r1, r2, [r0]
   1d77e:	2900      	cmp	r1, #0
   1d780:	d1f8      	bne.n	1d774 <atomic_set_bit+0x8>
   1d782:	f3bf 8f5b 	dmb	ish
}
   1d786:	4770      	bx	lr

0001d788 <cf_write>:
{
   1d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d78c:	4698      	mov	r8, r3
   1d78e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1d792:	2b01      	cmp	r3, #1
{
   1d794:	4606      	mov	r6, r0
   1d796:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1d798:	d830      	bhi.n	1d7fc <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   1d79a:	4443      	add	r3, r8
   1d79c:	2b01      	cmp	r3, #1
   1d79e:	4645      	mov	r5, r8
   1d7a0:	dc2f      	bgt.n	1d802 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   1d7a2:	f7ec f817 	bl	97d4 <find_cf_cfg>
	if (!cfg) {
   1d7a6:	4604      	mov	r4, r0
   1d7a8:	b918      	cbnz	r0, 1d7b2 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1d7aa:	f7ec f813 	bl	97d4 <find_cf_cfg>
	if (!cfg) {
   1d7ae:	4604      	mov	r4, r0
   1d7b0:	b350      	cbz	r0, 1d808 <cf_write+0x80>
{
   1d7b2:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1d7b4:	f1b8 0f00 	cmp.w	r8, #0
   1d7b8:	d10e      	bne.n	1d7d8 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d7ba:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1d7be:	1c60      	adds	r0, r4, #1
   1d7c0:	f7ff ffb4 	bl	1d72c <bt_addr_le_copy>
	cfg->id = conn->id;
   1d7c4:	4620      	mov	r0, r4
   1d7c6:	7a33      	ldrb	r3, [r6, #8]
   1d7c8:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d7cc:	2100      	movs	r1, #0
   1d7ce:	f7ff ffcd 	bl	1d76c <atomic_set_bit>
}
   1d7d2:	4628      	mov	r0, r5
   1d7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1d7d8:	7a20      	ldrb	r0, [r4, #8]
   1d7da:	fa20 f301 	lsr.w	r3, r0, r1
   1d7de:	07da      	lsls	r2, r3, #31
   1d7e0:	d503      	bpl.n	1d7ea <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1d7e2:	783b      	ldrb	r3, [r7, #0]
   1d7e4:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1d7e6:	07db      	lsls	r3, r3, #31
   1d7e8:	d511      	bpl.n	1d80e <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1d7ea:	3101      	adds	r1, #1
   1d7ec:	2903      	cmp	r1, #3
   1d7ee:	d1e1      	bne.n	1d7b4 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1d7f0:	783b      	ldrb	r3, [r7, #0]
   1d7f2:	f003 0307 	and.w	r3, r3, #7
   1d7f6:	4318      	orrs	r0, r3
   1d7f8:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1d7fa:	e7de      	b.n	1d7ba <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d7fc:	f06f 0506 	mvn.w	r5, #6
   1d800:	e7e7      	b.n	1d7d2 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d802:	f06f 050c 	mvn.w	r5, #12
   1d806:	e7e4      	b.n	1d7d2 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d808:	f06f 0510 	mvn.w	r5, #16
   1d80c:	e7e1      	b.n	1d7d2 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1d80e:	f06f 0512 	mvn.w	r5, #18
   1d812:	e7de      	b.n	1d7d2 <cf_write+0x4a>

0001d814 <read_appearance>:
{
   1d814:	b513      	push	{r0, r1, r4, lr}
   1d816:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d81a:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d81c:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1d81e:	f04f 0200 	mov.w	r2, #0
   1d822:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1d826:	d80d      	bhi.n	1d844 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1d828:	f1c1 0402 	rsb	r4, r1, #2
   1d82c:	429c      	cmp	r4, r3
   1d82e:	bfa8      	it	ge
   1d830:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d832:	f10d 0306 	add.w	r3, sp, #6
   1d836:	4622      	mov	r2, r4
   1d838:	4419      	add	r1, r3
   1d83a:	f7fe fa76 	bl	1bd2a <memcpy>
}
   1d83e:	4620      	mov	r0, r4
   1d840:	b002      	add	sp, #8
   1d842:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d844:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1d848:	e7f9      	b.n	1d83e <read_appearance+0x2a>

0001d84a <read_name>:
{
   1d84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d84e:	4698      	mov	r8, r3
   1d850:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1d854:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1d856:	f7e9 ffb7 	bl	77c8 <bt_get_name>
   1d85a:	4607      	mov	r7, r0
				 strlen(name));
   1d85c:	f7fe fa38 	bl	1bcd0 <strlen>
	if (offset > value_len) {
   1d860:	b283      	uxth	r3, r0
   1d862:	42b3      	cmp	r3, r6
   1d864:	d30c      	bcc.n	1d880 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1d866:	1b9c      	subs	r4, r3, r6
   1d868:	4544      	cmp	r4, r8
   1d86a:	bfa8      	it	ge
   1d86c:	4644      	movge	r4, r8
   1d86e:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d870:	4622      	mov	r2, r4
   1d872:	19b9      	adds	r1, r7, r6
   1d874:	4628      	mov	r0, r5
   1d876:	f7fe fa58 	bl	1bd2a <memcpy>
}
   1d87a:	4620      	mov	r0, r4
   1d87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d880:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1d884:	e7f9      	b.n	1d87a <read_name+0x30>

0001d886 <cf_read>:
{
   1d886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d888:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1d88a:	2300      	movs	r3, #0
{
   1d88c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1d890:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1d894:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1d896:	f7eb ff9d 	bl	97d4 <find_cf_cfg>
	if (cfg) {
   1d89a:	b128      	cbz	r0, 1d8a8 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1d89c:	f100 0108 	add.w	r1, r0, #8
   1d8a0:	2201      	movs	r2, #1
   1d8a2:	a801      	add	r0, sp, #4
   1d8a4:	f7fe fa41 	bl	1bd2a <memcpy>
	if (offset > value_len) {
   1d8a8:	2e01      	cmp	r6, #1
   1d8aa:	d80d      	bhi.n	1d8c8 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1d8ac:	f1c6 0401 	rsb	r4, r6, #1
   1d8b0:	42bc      	cmp	r4, r7
   1d8b2:	bfa8      	it	ge
   1d8b4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d8b6:	ab01      	add	r3, sp, #4
   1d8b8:	4622      	mov	r2, r4
   1d8ba:	1999      	adds	r1, r3, r6
   1d8bc:	4628      	mov	r0, r5
   1d8be:	f7fe fa34 	bl	1bd2a <memcpy>
}
   1d8c2:	4620      	mov	r0, r4
   1d8c4:	b003      	add	sp, #12
   1d8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d8c8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1d8cc:	e7f9      	b.n	1d8c2 <cf_read+0x3c>

0001d8ce <bt_gatt_attr_read_service>:
{
   1d8ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1d8d0:	68c9      	ldr	r1, [r1, #12]
{
   1d8d2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1d8d6:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1d8d8:	780b      	ldrb	r3, [r1, #0]
{
   1d8da:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1d8dc:	b993      	cbnz	r3, 1d904 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d8de:	884b      	ldrh	r3, [r1, #2]
   1d8e0:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1d8e4:	2d02      	cmp	r5, #2
   1d8e6:	d819      	bhi.n	1d91c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d8e8:	f1c5 0202 	rsb	r2, r5, #2
   1d8ec:	4294      	cmp	r4, r2
   1d8ee:	bfa8      	it	ge
   1d8f0:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d8f2:	f10d 0306 	add.w	r3, sp, #6
   1d8f6:	4622      	mov	r2, r4
   1d8f8:	1959      	adds	r1, r3, r5
   1d8fa:	f7fe fa16 	bl	1bd2a <memcpy>
}
   1d8fe:	4620      	mov	r0, r4
   1d900:	b003      	add	sp, #12
   1d902:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1d904:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1d906:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1d90a:	d807      	bhi.n	1d91c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d90c:	f1c5 0210 	rsb	r2, r5, #16
   1d910:	4294      	cmp	r4, r2
   1d912:	bfa8      	it	ge
   1d914:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d916:	4622      	mov	r2, r4
   1d918:	4429      	add	r1, r5
   1d91a:	e7ee      	b.n	1d8fa <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d91c:	f06f 0406 	mvn.w	r4, #6
   1d920:	e7ed      	b.n	1d8fe <bt_gatt_attr_read_service+0x30>

0001d922 <find_ccc_cfg>:
{
   1d922:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d924:	460c      	mov	r4, r1
						    &cfg->peer)) {
   1d926:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1d928:	b148      	cbz	r0, 1d93e <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1d92a:	7809      	ldrb	r1, [r1, #0]
   1d92c:	462a      	mov	r2, r5
   1d92e:	f7ff f850 	bl	1c9d2 <bt_conn_is_peer_addr_le>
	return NULL;
   1d932:	2800      	cmp	r0, #0
   1d934:	bf08      	it	eq
   1d936:	2400      	moveq	r4, #0
}
   1d938:	4620      	mov	r0, r4
   1d93a:	b003      	add	sp, #12
   1d93c:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d93e:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   1d940:	2207      	movs	r2, #7
   1d942:	f8cd 0003 	str.w	r0, [sp, #3]
   1d946:	4669      	mov	r1, sp
   1d948:	4628      	mov	r0, r5
   1d94a:	f7fe f9dd 	bl	1bd08 <memcmp>
	return NULL;
   1d94e:	2800      	cmp	r0, #0
   1d950:	bf18      	it	ne
   1d952:	2400      	movne	r4, #0
   1d954:	e7f0      	b.n	1d938 <find_ccc_cfg+0x16>

0001d956 <bt_gatt_attr_write_ccc>:
{
   1d956:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d95a:	461f      	mov	r7, r3
   1d95c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1d960:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1d964:	4606      	mov	r6, r0
   1d966:	4688      	mov	r8, r1
	if (offset) {
   1d968:	2b00      	cmp	r3, #0
   1d96a:	d141      	bne.n	1d9f0 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   1d96c:	1e7b      	subs	r3, r7, #1
   1d96e:	2b01      	cmp	r3, #1
   1d970:	d841      	bhi.n	1d9f6 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   1d972:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1d974:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1d976:	4649      	mov	r1, r9
   1d978:	bf14      	ite	ne
   1d97a:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   1d97c:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   1d97e:	f7ff ffd0 	bl	1d922 <find_ccc_cfg>
	if (!cfg) {
   1d982:	4604      	mov	r4, r0
   1d984:	b980      	cbnz	r0, 1d9a8 <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   1d986:	b91d      	cbnz	r5, 1d990 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1d988:	4638      	mov	r0, r7
}
   1d98a:	b003      	add	sp, #12
   1d98c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1d990:	4649      	mov	r1, r9
   1d992:	f7ff ffc6 	bl	1d922 <find_ccc_cfg>
		if (!cfg) {
   1d996:	4604      	mov	r4, r0
   1d998:	b380      	cbz	r0, 1d9fc <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d99a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1d99e:	3001      	adds	r0, #1
   1d9a0:	f7ff fec4 	bl	1d72c <bt_addr_le_copy>
		cfg->id = conn->id;
   1d9a4:	7a33      	ldrb	r3, [r6, #8]
   1d9a6:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1d9a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1d9ac:	b9a3      	cbnz	r3, 1d9d8 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   1d9ae:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1d9b2:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1d9b4:	42ab      	cmp	r3, r5
   1d9b6:	d003      	beq.n	1d9c0 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   1d9b8:	4649      	mov	r1, r9
   1d9ba:	4640      	mov	r0, r8
   1d9bc:	f7ff fe40 	bl	1d640 <gatt_ccc_changed>
	if (!value) {
   1d9c0:	2d00      	cmp	r5, #0
   1d9c2:	d1e1      	bne.n	1d988 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d9c4:	4669      	mov	r1, sp
   1d9c6:	1c60      	adds	r0, r4, #1
   1d9c8:	9500      	str	r5, [sp, #0]
   1d9ca:	f8cd 5003 	str.w	r5, [sp, #3]
   1d9ce:	f7ff fead 	bl	1d72c <bt_addr_le_copy>
	cfg->id = 0U;
   1d9d2:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1d9d4:	8125      	strh	r5, [r4, #8]
}
   1d9d6:	e7d7      	b.n	1d988 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1d9d8:	462a      	mov	r2, r5
   1d9da:	4641      	mov	r1, r8
   1d9dc:	4630      	mov	r0, r6
   1d9de:	4798      	blx	r3
		if (write < 0) {
   1d9e0:	2800      	cmp	r0, #0
   1d9e2:	dbd2      	blt.n	1d98a <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1d9e4:	3801      	subs	r0, #1
   1d9e6:	2801      	cmp	r0, #1
   1d9e8:	d9e1      	bls.n	1d9ae <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1d9ea:	f06f 000d 	mvn.w	r0, #13
   1d9ee:	e7cc      	b.n	1d98a <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d9f0:	f06f 0006 	mvn.w	r0, #6
   1d9f4:	e7c9      	b.n	1d98a <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d9f6:	f06f 000c 	mvn.w	r0, #12
   1d9fa:	e7c6      	b.n	1d98a <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d9fc:	f06f 0010 	mvn.w	r0, #16
   1da00:	e7c3      	b.n	1d98a <bt_gatt_attr_write_ccc+0x34>

0001da02 <bt_gatt_attr_read_ccc>:
{
   1da02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1da04:	68c9      	ldr	r1, [r1, #12]
{
   1da06:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1da0a:	4615      	mov	r5, r2
   1da0c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1da0e:	f7ff ff88 	bl	1d922 <find_ccc_cfg>
	if (cfg) {
   1da12:	b100      	cbz	r0, 1da16 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1da14:	8900      	ldrh	r0, [r0, #8]
   1da16:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1da1a:	2e02      	cmp	r6, #2
   1da1c:	d80e      	bhi.n	1da3c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1da1e:	f1c6 0402 	rsb	r4, r6, #2
   1da22:	42bc      	cmp	r4, r7
   1da24:	bfa8      	it	ge
   1da26:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1da28:	f10d 0306 	add.w	r3, sp, #6
   1da2c:	4622      	mov	r2, r4
   1da2e:	1999      	adds	r1, r3, r6
   1da30:	4628      	mov	r0, r5
   1da32:	f7fe f97a 	bl	1bd2a <memcpy>
}
   1da36:	4620      	mov	r0, r4
   1da38:	b003      	add	sp, #12
   1da3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1da3c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1da40:	e7f9      	b.n	1da36 <bt_gatt_attr_read_ccc+0x34>

0001da42 <sc_save>:
{
   1da42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1da46:	4680      	mov	r8, r0
   1da48:	460f      	mov	r7, r1
   1da4a:	4616      	mov	r6, r2
   1da4c:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1da4e:	f7eb fedf 	bl	9810 <find_sc_cfg>
	if (!cfg) {
   1da52:	4604      	mov	r4, r0
   1da54:	b960      	cbnz	r0, 1da70 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1da56:	4669      	mov	r1, sp
   1da58:	9000      	str	r0, [sp, #0]
   1da5a:	f8cd 0003 	str.w	r0, [sp, #3]
   1da5e:	f7eb fed7 	bl	9810 <find_sc_cfg>
		if (!cfg) {
   1da62:	4604      	mov	r4, r0
   1da64:	b178      	cbz	r0, 1da86 <sc_save+0x44>
		cfg->id = id;
   1da66:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1da6a:	4639      	mov	r1, r7
   1da6c:	f7ff fe5e 	bl	1d72c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1da70:	8922      	ldrh	r2, [r4, #8]
   1da72:	8963      	ldrh	r3, [r4, #10]
   1da74:	b91a      	cbnz	r2, 1da7e <sc_save+0x3c>
   1da76:	b923      	cbnz	r3, 1da82 <sc_save+0x40>
		cfg->data.start = start;
   1da78:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1da7a:	8165      	strh	r5, [r4, #10]
   1da7c:	e003      	b.n	1da86 <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   1da7e:	4296      	cmp	r6, r2
   1da80:	d304      	bcc.n	1da8c <sc_save+0x4a>
   1da82:	429d      	cmp	r5, r3
   1da84:	d8f9      	bhi.n	1da7a <sc_save+0x38>
}
   1da86:	b002      	add	sp, #8
   1da88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1da8c:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1da8e:	e7f8      	b.n	1da82 <sc_save+0x40>

0001da90 <sc_clear>:
{
   1da90:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1da92:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1da96:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1da98:	4631      	mov	r1, r6
   1da9a:	7a00      	ldrb	r0, [r0, #8]
   1da9c:	f7fe fcc1 	bl	1c422 <bt_addr_le_is_bonded>
   1daa0:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1daa2:	4631      	mov	r1, r6
   1daa4:	f7eb feb4 	bl	9810 <find_sc_cfg>
	if (!cfg) {
   1daa8:	b128      	cbz	r0, 1dab6 <sc_clear+0x26>
}
   1daaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1daae:	220c      	movs	r2, #12
   1dab0:	2100      	movs	r1, #0
   1dab2:	f7fe b945 	b.w	1bd40 <memset>
}
   1dab6:	bd70      	pop	{r4, r5, r6, pc}

0001dab8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1dab8:	2a02      	cmp	r2, #2
{
   1daba:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1dabc:	d108      	bne.n	1dad0 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1dabe:	2300      	movs	r3, #0
   1dac0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1dac4:	461a      	mov	r2, r3
   1dac6:	7a00      	ldrb	r0, [r0, #8]
   1dac8:	f7ff ffbb 	bl	1da42 <sc_save>
}
   1dacc:	2002      	movs	r0, #2
   1dace:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1dad0:	f7ff ffde 	bl	1da90 <sc_clear>
   1dad4:	e7fa      	b.n	1dacc <sc_ccc_cfg_write+0x14>

0001dad6 <sc_restore_rsp>:
{
   1dad6:	b538      	push	{r3, r4, r5, lr}
   1dad8:	4605      	mov	r5, r0
   1dada:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   1dadc:	f7eb fe7a 	bl	97d4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1dae0:	b130      	cbz	r0, 1daf0 <sc_restore_rsp+0x1a>
   1dae2:	7a03      	ldrb	r3, [r0, #8]
   1dae4:	07db      	lsls	r3, r3, #31
   1dae6:	d503      	bpl.n	1daf0 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1dae8:	2100      	movs	r1, #0
   1daea:	300c      	adds	r0, #12
   1daec:	f7ff fe3e 	bl	1d76c <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1daf0:	b964      	cbnz	r4, 1db0c <sc_restore_rsp+0x36>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1daf2:	7a28      	ldrb	r0, [r5, #8]
   1daf4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1daf8:	f7eb fe8a 	bl	9810 <find_sc_cfg>
		if (sc_cfg) {
   1dafc:	b130      	cbz	r0, 1db0c <sc_restore_rsp+0x36>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1dafe:	4621      	mov	r1, r4
   1db00:	2204      	movs	r2, #4
}
   1db02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1db06:	3008      	adds	r0, #8
   1db08:	f7fe b91a 	b.w	1bd40 <memset>
}
   1db0c:	bd38      	pop	{r3, r4, r5, pc}

0001db0e <bt_gatt_attr_value_handle>:
{
   1db0e:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1db10:	4604      	mov	r4, r0
   1db12:	b910      	cbnz	r0, 1db1a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1db14:	2000      	movs	r0, #0
}
   1db16:	b002      	add	sp, #8
   1db18:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1db1a:	2300      	movs	r3, #0
   1db1c:	f88d 3004 	strb.w	r3, [sp, #4]
   1db20:	6800      	ldr	r0, [r0, #0]
   1db22:	f642 0303 	movw	r3, #10243	; 0x2803
   1db26:	a901      	add	r1, sp, #4
   1db28:	f8ad 3006 	strh.w	r3, [sp, #6]
   1db2c:	f7fe f988 	bl	1be40 <bt_uuid_cmp>
   1db30:	2800      	cmp	r0, #0
   1db32:	d1ef      	bne.n	1db14 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1db34:	68e3      	ldr	r3, [r4, #12]
   1db36:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1db38:	2800      	cmp	r0, #0
   1db3a:	d1ec      	bne.n	1db16 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1db3c:	4620      	mov	r0, r4
   1db3e:	f7eb ff49 	bl	99d4 <bt_gatt_attr_get_handle>
   1db42:	3001      	adds	r0, #1
   1db44:	b280      	uxth	r0, r0
	return handle;
   1db46:	e7e6      	b.n	1db16 <bt_gatt_attr_value_handle+0x8>

0001db48 <bt_gatt_attr_read_chrc>:
{
   1db48:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1db4a:	68cf      	ldr	r7, [r1, #12]
{
   1db4c:	b087      	sub	sp, #28
   1db4e:	4608      	mov	r0, r1
   1db50:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1db52:	79bb      	ldrb	r3, [r7, #6]
   1db54:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1db58:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1db5c:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1db5e:	f7ff ffd6 	bl	1db0e <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1db62:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1db64:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1db68:	780b      	ldrb	r3, [r1, #0]
   1db6a:	b99b      	cbnz	r3, 1db94 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1db6c:	884b      	ldrh	r3, [r1, #2]
   1db6e:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1db72:	2105      	movs	r1, #5
	if (offset > value_len) {
   1db74:	42b1      	cmp	r1, r6
   1db76:	d315      	bcc.n	1dba4 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1db78:	1b89      	subs	r1, r1, r6
   1db7a:	42a1      	cmp	r1, r4
   1db7c:	bfa8      	it	ge
   1db7e:	4621      	movge	r1, r4
   1db80:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1db82:	ab01      	add	r3, sp, #4
   1db84:	4622      	mov	r2, r4
   1db86:	1999      	adds	r1, r3, r6
   1db88:	4628      	mov	r0, r5
   1db8a:	f7fe f8ce 	bl	1bd2a <memcpy>
}
   1db8e:	4620      	mov	r0, r4
   1db90:	b007      	add	sp, #28
   1db92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1db94:	3101      	adds	r1, #1
   1db96:	2210      	movs	r2, #16
   1db98:	f10d 0007 	add.w	r0, sp, #7
   1db9c:	f7fe f8c5 	bl	1bd2a <memcpy>
		value_len += 16U;
   1dba0:	2113      	movs	r1, #19
   1dba2:	e7e7      	b.n	1db74 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1dba4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1dba8:	e7f1      	b.n	1db8e <bt_gatt_attr_read_chrc+0x46>

0001dbaa <bt_gatt_foreach_attr>:
{
   1dbaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1dbac:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1dbb0:	2300      	movs	r3, #0
   1dbb2:	9300      	str	r3, [sp, #0]
   1dbb4:	461a      	mov	r2, r3
   1dbb6:	f7eb ff3d 	bl	9a34 <bt_gatt_foreach_attr_type>
}
   1dbba:	b005      	add	sp, #20
   1dbbc:	f85d fb04 	ldr.w	pc, [sp], #4

0001dbc0 <db_hash_process>:
	db_hash_gen(true);
   1dbc0:	f7eb bf92 	b.w	9ae8 <db_hash_gen.constprop.0>

0001dbc4 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1dbc4:	07d3      	lsls	r3, r2, #31
{
   1dbc6:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1dbc8:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1dbca:	d504      	bpl.n	1dbd6 <bt_gatt_check_perm+0x12>
   1dbcc:	f014 0f15 	tst.w	r4, #21
   1dbd0:	d017      	beq.n	1dc02 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1dbd2:	684b      	ldr	r3, [r1, #4]
   1dbd4:	b1ab      	cbz	r3, 1dc02 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1dbd6:	0793      	lsls	r3, r2, #30
   1dbd8:	d504      	bpl.n	1dbe4 <bt_gatt_check_perm+0x20>
   1dbda:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1dbde:	d012      	beq.n	1dc06 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1dbe0:	688b      	ldr	r3, [r1, #8]
   1dbe2:	b183      	cbz	r3, 1dc06 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1dbe4:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1dbe6:	f014 0f30 	tst.w	r4, #48	; 0x30
   1dbea:	d104      	bne.n	1dbf6 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1dbec:	f014 000c 	ands.w	r0, r4, #12
   1dbf0:	bf18      	it	ne
   1dbf2:	200f      	movne	r0, #15
}
   1dbf4:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1dbf6:	f7fe feea 	bl	1c9ce <bt_conn_get_security>
   1dbfa:	2802      	cmp	r0, #2
   1dbfc:	d8f6      	bhi.n	1dbec <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1dbfe:	2005      	movs	r0, #5
   1dc00:	e7f8      	b.n	1dbf4 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1dc02:	2002      	movs	r0, #2
   1dc04:	e7f6      	b.n	1dbf4 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1dc06:	2003      	movs	r0, #3
   1dc08:	e7f4      	b.n	1dbf4 <bt_gatt_check_perm+0x30>

0001dc0a <gatt_notify>:
{
   1dc0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dc0e:	4614      	mov	r4, r2
   1dc10:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1dc12:	2214      	movs	r2, #20
   1dc14:	6861      	ldr	r1, [r4, #4]
{
   1dc16:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1dc18:	f7ff ffd4 	bl	1dbc4 <bt_gatt_check_perm>
   1dc1c:	bb08      	cbnz	r0, 1dc62 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1dc1e:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1dc20:	211b      	movs	r1, #27
   1dc22:	3202      	adds	r2, #2
   1dc24:	4638      	mov	r0, r7
   1dc26:	f7ff fc36 	bl	1d496 <bt_att_create_pdu>
	if (!buf) {
   1dc2a:	4605      	mov	r5, r0
   1dc2c:	b1e8      	cbz	r0, 1dc6a <gatt_notify+0x60>
   1dc2e:	f100 0908 	add.w	r9, r0, #8
   1dc32:	2102      	movs	r1, #2
   1dc34:	4648      	mov	r0, r9
   1dc36:	f000 f8db 	bl	1ddf0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1dc3a:	4606      	mov	r6, r0
   1dc3c:	89a1      	ldrh	r1, [r4, #12]
   1dc3e:	f826 8b02 	strh.w	r8, [r6], #2
   1dc42:	4648      	mov	r0, r9
   1dc44:	f000 f8d4 	bl	1ddf0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1dc48:	89a2      	ldrh	r2, [r4, #12]
   1dc4a:	68a1      	ldr	r1, [r4, #8]
   1dc4c:	4630      	mov	r0, r6
   1dc4e:	f7fe f86c 	bl	1bd2a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1dc52:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1dc56:	4629      	mov	r1, r5
   1dc58:	4638      	mov	r0, r7
}
   1dc5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1dc5e:	f7ff bc93 	b.w	1d588 <bt_att_send>
		return -EPERM;
   1dc62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1dc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1dc6a:	f06f 000b 	mvn.w	r0, #11
   1dc6e:	e7fa      	b.n	1dc66 <gatt_notify+0x5c>

0001dc70 <bt_gatt_change_aware>:
{
   1dc70:	b510      	push	{r4, lr}
   1dc72:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1dc74:	f7eb fdae 	bl	97d4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1dc78:	4603      	mov	r3, r0
   1dc7a:	b910      	cbnz	r0, 1dc82 <bt_gatt_change_aware+0x12>
		return true;
   1dc7c:	2401      	movs	r4, #1
}
   1dc7e:	4620      	mov	r0, r4
   1dc80:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1dc82:	7a02      	ldrb	r2, [r0, #8]
   1dc84:	07d2      	lsls	r2, r2, #31
   1dc86:	d5f9      	bpl.n	1dc7c <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dc88:	f3bf 8f5b 	dmb	ish
   1dc8c:	68d9      	ldr	r1, [r3, #12]
   1dc8e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1dc92:	f011 0101 	ands.w	r1, r1, #1
   1dc96:	f100 000c 	add.w	r0, r0, #12
   1dc9a:	d1ef      	bne.n	1dc7c <bt_gatt_change_aware+0xc>
	if (!req) {
   1dc9c:	2c00      	cmp	r4, #0
   1dc9e:	d0ee      	beq.n	1dc7e <bt_gatt_change_aware+0xe>
   1dca0:	f3bf 8f5b 	dmb	ish
   1dca4:	68db      	ldr	r3, [r3, #12]
   1dca6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1dcaa:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1dcae:	079b      	lsls	r3, r3, #30
   1dcb0:	d50e      	bpl.n	1dcd0 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dcb2:	f3bf 8f5b 	dmb	ish
   1dcb6:	e850 3f00 	ldrex	r3, [r0]
   1dcba:	f023 0302 	bic.w	r3, r3, #2
   1dcbe:	e840 3200 	strex	r2, r3, [r0]
   1dcc2:	2a00      	cmp	r2, #0
   1dcc4:	d1f7      	bne.n	1dcb6 <bt_gatt_change_aware+0x46>
   1dcc6:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1dcca:	f7ff fd4f 	bl	1d76c <atomic_set_bit>
	return false;
   1dcce:	e7d6      	b.n	1dc7e <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1dcd0:	2101      	movs	r1, #1
   1dcd2:	e7fa      	b.n	1dcca <bt_gatt_change_aware+0x5a>

0001dcd4 <bt_smp_recv>:
{
   1dcd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1dcd6:	2100      	movs	r1, #0
   1dcd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dcdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   1dce0:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1dce2:	4608      	mov	r0, r1
   1dce4:	f7fe ff17 	bl	1cb16 <bt_l2cap_create_pdu_timeout>
   1dce8:	f100 0608 	add.w	r6, r0, #8
   1dcec:	4604      	mov	r4, r0
   1dcee:	2101      	movs	r1, #1
   1dcf0:	4630      	mov	r0, r6
   1dcf2:	f000 f87d 	bl	1ddf0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1dcf6:	2505      	movs	r5, #5
   1dcf8:	7005      	strb	r5, [r0, #0]
   1dcfa:	2101      	movs	r1, #1
   1dcfc:	4630      	mov	r0, r6
   1dcfe:	f000 f877 	bl	1ddf0 <net_buf_simple_add>
   1dd02:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1dd04:	7005      	strb	r5, [r0, #0]
   1dd06:	4622      	mov	r2, r4
   1dd08:	9300      	str	r3, [sp, #0]
   1dd0a:	2106      	movs	r1, #6
   1dd0c:	4638      	mov	r0, r7
   1dd0e:	f7fe ff05 	bl	1cb1c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1dd12:	b110      	cbz	r0, 1dd1a <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1dd14:	4620      	mov	r0, r4
   1dd16:	f7f9 f8a7 	bl	16e68 <net_buf_unref>
}
   1dd1a:	2000      	movs	r0, #0
   1dd1c:	b003      	add	sp, #12
   1dd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dd20 <bt_smp_sign>:
   1dd20:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dd24:	4770      	bx	lr

0001dd26 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1dd26:	2000      	movs	r0, #0
   1dd28:	4770      	bx	lr

0001dd2a <fixed_data_unref>:
}
   1dd2a:	4770      	bx	lr

0001dd2c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1dd2c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1dd2e:	6849      	ldr	r1, [r1, #4]
   1dd30:	6809      	ldr	r1, [r1, #0]
   1dd32:	f7f9 b805 	b.w	16d40 <net_buf_alloc_len>

0001dd36 <net_buf_get>:
{
   1dd36:	b570      	push	{r4, r5, r6, lr}
   1dd38:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1dd3a:	f7fc f9db 	bl	1a0f4 <z_impl_k_queue_get>
	if (!buf) {
   1dd3e:	4605      	mov	r5, r0
   1dd40:	b128      	cbz	r0, 1dd4e <net_buf_get+0x18>
   1dd42:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1dd44:	7963      	ldrb	r3, [r4, #5]
   1dd46:	f013 0301 	ands.w	r3, r3, #1
   1dd4a:	d102      	bne.n	1dd52 <net_buf_get+0x1c>
	frag->frags = NULL;
   1dd4c:	6023      	str	r3, [r4, #0]
}
   1dd4e:	4628      	mov	r0, r5
   1dd50:	bd70      	pop	{r4, r5, r6, pc}
   1dd52:	2300      	movs	r3, #0
   1dd54:	2200      	movs	r2, #0
   1dd56:	4630      	mov	r0, r6
   1dd58:	f7fc f9cc 	bl	1a0f4 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1dd5c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1dd5e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1dd60:	f023 0301 	bic.w	r3, r3, #1
   1dd64:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1dd66:	4604      	mov	r4, r0
   1dd68:	e7ec      	b.n	1dd44 <net_buf_get+0xe>

0001dd6a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1dd6a:	6883      	ldr	r3, [r0, #8]
   1dd6c:	440b      	add	r3, r1
   1dd6e:	6003      	str	r3, [r0, #0]
}
   1dd70:	4770      	bx	lr

0001dd72 <net_buf_put>:
{
   1dd72:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1dd74:	460a      	mov	r2, r1
   1dd76:	6814      	ldr	r4, [r2, #0]
   1dd78:	b914      	cbnz	r4, 1dd80 <net_buf_put+0xe>
}
   1dd7a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1dd7c:	f001 bafa 	b.w	1f374 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1dd80:	7953      	ldrb	r3, [r2, #5]
   1dd82:	f043 0301 	orr.w	r3, r3, #1
   1dd86:	7153      	strb	r3, [r2, #5]
   1dd88:	4622      	mov	r2, r4
   1dd8a:	e7f4      	b.n	1dd76 <net_buf_put+0x4>

0001dd8c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1dd8c:	7902      	ldrb	r2, [r0, #4]
   1dd8e:	3201      	adds	r2, #1
   1dd90:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1dd92:	4770      	bx	lr

0001dd94 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1dd94:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1dd96:	4618      	mov	r0, r3
   1dd98:	681b      	ldr	r3, [r3, #0]
   1dd9a:	2b00      	cmp	r3, #0
   1dd9c:	d1fb      	bne.n	1dd96 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1dd9e:	4770      	bx	lr

0001dda0 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1dda0:	6802      	ldr	r2, [r0, #0]
{
   1dda2:	b510      	push	{r4, lr}
	if (parent->frags) {
   1dda4:	b12a      	cbz	r2, 1ddb2 <net_buf_frag_insert+0x12>
   1dda6:	460b      	mov	r3, r1
	while (buf->frags) {
   1dda8:	461c      	mov	r4, r3
   1ddaa:	681b      	ldr	r3, [r3, #0]
   1ddac:	2b00      	cmp	r3, #0
   1ddae:	d1fb      	bne.n	1dda8 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ddb0:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ddb2:	6001      	str	r1, [r0, #0]
}
   1ddb4:	bd10      	pop	{r4, pc}

0001ddb6 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1ddb6:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1ddb8:	4604      	mov	r4, r0
   1ddba:	b920      	cbnz	r0, 1ddc6 <net_buf_frag_add+0x10>
	buf->ref++;
   1ddbc:	790b      	ldrb	r3, [r1, #4]
   1ddbe:	3301      	adds	r3, #1
   1ddc0:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1ddc2:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1ddc4:	bd10      	pop	{r4, pc}
   1ddc6:	4603      	mov	r3, r0
	while (buf->frags) {
   1ddc8:	4618      	mov	r0, r3
   1ddca:	681b      	ldr	r3, [r3, #0]
   1ddcc:	2b00      	cmp	r3, #0
   1ddce:	d1fb      	bne.n	1ddc8 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1ddd0:	f7ff ffe6 	bl	1dda0 <net_buf_frag_insert>
   1ddd4:	4620      	mov	r0, r4
   1ddd6:	e7f5      	b.n	1ddc4 <net_buf_frag_add+0xe>

0001ddd8 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1ddd8:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   1ddda:	b108      	cbz	r0, 1dde0 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   1dddc:	680b      	ldr	r3, [r1, #0]
   1ddde:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1dde0:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1dde2:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1dde4:	4608      	mov	r0, r1
	frag->frags = NULL;
   1dde6:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1dde8:	f7f9 f83e 	bl	16e68 <net_buf_unref>
#endif

	return next_frag;
}
   1ddec:	4620      	mov	r0, r4
   1ddee:	bd10      	pop	{r4, pc}

0001ddf0 <net_buf_simple_add>:
	return buf->data + buf->len;
   1ddf0:	8883      	ldrh	r3, [r0, #4]
   1ddf2:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1ddf4:	4419      	add	r1, r3
   1ddf6:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1ddf8:	18d0      	adds	r0, r2, r3
   1ddfa:	4770      	bx	lr

0001ddfc <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1ddfc:	b430      	push	{r4, r5}
   1ddfe:	8884      	ldrh	r4, [r0, #4]
   1de00:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1de02:	18a3      	adds	r3, r4, r2
   1de04:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1de06:	1928      	adds	r0, r5, r4
}
   1de08:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1de0a:	f7fd bf8e 	b.w	1bd2a <memcpy>

0001de0e <net_buf_simple_add_u8>:
   1de0e:	8883      	ldrh	r3, [r0, #4]
   1de10:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1de12:	b510      	push	{r4, lr}
	buf->len += len;
   1de14:	1c5c      	adds	r4, r3, #1
   1de16:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1de18:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1de1a:	18d0      	adds	r0, r2, r3
   1de1c:	bd10      	pop	{r4, pc}

0001de1e <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1de1e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1de20:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1de22:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1de24:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1de26:	4411      	add	r1, r2
	buf->data -= len;
   1de28:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1de2a:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1de2c:	4770      	bx	lr

0001de2e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1de2e:	8882      	ldrh	r2, [r0, #4]
   1de30:	1a52      	subs	r2, r2, r1
{
   1de32:	4603      	mov	r3, r0
	buf->len -= len;
   1de34:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1de36:	6800      	ldr	r0, [r0, #0]
   1de38:	4408      	add	r0, r1
   1de3a:	6018      	str	r0, [r3, #0]
}
   1de3c:	4770      	bx	lr

0001de3e <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1de3e:	4603      	mov	r3, r0
	void *data = buf->data;
   1de40:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1de42:	889a      	ldrh	r2, [r3, #4]
   1de44:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1de46:	4401      	add	r1, r0
	buf->len -= len;
   1de48:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1de4a:	6019      	str	r1, [r3, #0]

	return data;
}
   1de4c:	4770      	bx	lr

0001de4e <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1de4e:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1de50:	6803      	ldr	r3, [r0, #0]
   1de52:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1de54:	2101      	movs	r1, #1
   1de56:	f7ff ffea 	bl	1de2e <net_buf_simple_pull>

	return val;
}
   1de5a:	4620      	mov	r0, r4
   1de5c:	bd10      	pop	{r4, pc}

0001de5e <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1de5e:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1de60:	6803      	ldr	r3, [r0, #0]
   1de62:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1de64:	2102      	movs	r1, #2
   1de66:	f7ff ffe2 	bl	1de2e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1de6a:	4620      	mov	r0, r4
   1de6c:	bd10      	pop	{r4, pc}

0001de6e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1de6e:	6802      	ldr	r2, [r0, #0]
   1de70:	6880      	ldr	r0, [r0, #8]
}
   1de72:	1a10      	subs	r0, r2, r0
   1de74:	4770      	bx	lr

0001de76 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1de76:	8883      	ldrh	r3, [r0, #4]
   1de78:	88c2      	ldrh	r2, [r0, #6]
   1de7a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1de7c:	6803      	ldr	r3, [r0, #0]
   1de7e:	6880      	ldr	r0, [r0, #8]
   1de80:	1a18      	subs	r0, r3, r0
}
   1de82:	1a10      	subs	r0, r2, r0
   1de84:	4770      	bx	lr

0001de86 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1de86:	6903      	ldr	r3, [r0, #16]
   1de88:	b2c9      	uxtb	r1, r1
   1de8a:	220c      	movs	r2, #12
   1de8c:	fb01 3302 	mla	r3, r1, r2, r3
   1de90:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1de92:	f000 0007 	and.w	r0, r0, #7
   1de96:	4770      	bx	lr

0001de98 <set_on_state>:
	__asm__ volatile(
   1de98:	f04f 0320 	mov.w	r3, #32
   1de9c:	f3ef 8211 	mrs	r2, BASEPRI
   1dea0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dea4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1dea8:	6803      	ldr	r3, [r0, #0]
   1deaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1deae:	f043 0302 	orr.w	r3, r3, #2
   1deb2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1deb4:	f382 8811 	msr	BASEPRI, r2
   1deb8:	f3bf 8f6f 	isb	sy
}
   1debc:	4770      	bx	lr

0001debe <stop>:
{
   1debe:	4603      	mov	r3, r0
   1dec0:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1dec2:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1dec4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1dec6:	f04f 0420 	mov.w	r4, #32
   1deca:	f3ef 8611 	mrs	r6, BASEPRI
   1dece:	f384 8812 	msr	BASEPRI_MAX, r4
   1ded2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ded6:	250c      	movs	r5, #12
   1ded8:	fb05 0401 	mla	r4, r5, r1, r0
   1dedc:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1dede:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1dee2:	d001      	beq.n	1dee8 <stop+0x2a>
   1dee4:	42a2      	cmp	r2, r4
   1dee6:	d110      	bne.n	1df0a <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1dee8:	fb05 0001 	mla	r0, r5, r1, r0
   1deec:	2201      	movs	r2, #1
   1deee:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1def0:	2000      	movs	r0, #0
	__asm__ volatile(
   1def2:	f386 8811 	msr	BASEPRI, r6
   1def6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1defa:	b928      	cbnz	r0, 1df08 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   1defc:	685b      	ldr	r3, [r3, #4]
   1defe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1df02:	684b      	ldr	r3, [r1, #4]
   1df04:	4798      	blx	r3
	return 0;
   1df06:	2000      	movs	r0, #0
}
   1df08:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1df0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df0e:	e7f0      	b.n	1def2 <stop+0x34>

0001df10 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1df10:	2280      	movs	r2, #128	; 0x80
   1df12:	f7ff bfd4 	b.w	1debe <stop>

0001df16 <async_start>:
{
   1df16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df18:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1df1a:	6904      	ldr	r4, [r0, #16]
{
   1df1c:	4605      	mov	r5, r0
   1df1e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1df20:	f04f 0020 	mov.w	r0, #32
   1df24:	f3ef 8c11 	mrs	ip, BASEPRI
   1df28:	f380 8812 	msr	BASEPRI_MAX, r0
   1df2c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1df30:	260c      	movs	r6, #12
   1df32:	fb06 4601 	mla	r6, r6, r1, r4
   1df36:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1df38:	f000 0e07 	and.w	lr, r0, #7
   1df3c:	f1be 0f01 	cmp.w	lr, #1
   1df40:	d111      	bne.n	1df66 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1df42:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1df44:	2600      	movs	r6, #0
	__asm__ volatile(
   1df46:	f38c 8811 	msr	BASEPRI, ip
   1df4a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1df4e:	b946      	cbnz	r6, 1df62 <async_start+0x4c>
	subdata->cb = cb;
   1df50:	200c      	movs	r0, #12
   1df52:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   1df56:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1df5a:	686b      	ldr	r3, [r5, #4]
   1df5c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1df60:	4798      	blx	r3
}
   1df62:	4630      	mov	r0, r6
   1df64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1df66:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1df6a:	4287      	cmp	r7, r0
   1df6c:	bf14      	ite	ne
   1df6e:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   1df72:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1df76:	e7e6      	b.n	1df46 <async_start+0x30>

0001df78 <api_start>:
{
   1df78:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1df7a:	2480      	movs	r4, #128	; 0x80
   1df7c:	9400      	str	r4, [sp, #0]
   1df7e:	f7ff ffca 	bl	1df16 <async_start>
}
   1df82:	b002      	add	sp, #8
   1df84:	bd10      	pop	{r4, pc}

0001df86 <onoff_started_callback>:
	return &data->mgr[type];
   1df86:	6900      	ldr	r0, [r0, #16]
{
   1df88:	b410      	push	{r4}
	return &data->mgr[type];
   1df8a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1df8c:	241c      	movs	r4, #28
   1df8e:	fb03 0004 	mla	r0, r3, r4, r0
   1df92:	2100      	movs	r1, #0
}
   1df94:	bc10      	pop	{r4}
	notify(mgr, 0);
   1df96:	4710      	bx	r2

0001df98 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1df98:	2000      	movs	r0, #0
   1df9a:	f7fa be3b 	b.w	18c14 <nrfx_clock_stop>

0001df9e <blocking_start_callback>:
{
   1df9e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1dfa0:	f7fc b8dc 	b.w	1a15c <z_impl_k_sem_give>

0001dfa4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dfa4:	6843      	ldr	r3, [r0, #4]
   1dfa6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1dfa8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1dfac:	600b      	str	r3, [r1, #0]
}
   1dfae:	2000      	movs	r0, #0
   1dfb0:	4770      	bx	lr

0001dfb2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dfb2:	6843      	ldr	r3, [r0, #4]
   1dfb4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1dfb6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1dfba:	4042      	eors	r2, r0
   1dfbc:	400a      	ands	r2, r1
   1dfbe:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1dfc0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1dfc4:	2000      	movs	r0, #0
   1dfc6:	4770      	bx	lr

0001dfc8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dfc8:	6843      	ldr	r3, [r0, #4]
   1dfca:	685b      	ldr	r3, [r3, #4]
}
   1dfcc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1dfce:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1dfd2:	4770      	bx	lr

0001dfd4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dfd4:	6843      	ldr	r3, [r0, #4]
   1dfd6:	685b      	ldr	r3, [r3, #4]
}
   1dfd8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1dfda:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1dfde:	4770      	bx	lr

0001dfe0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1dfe0:	6843      	ldr	r3, [r0, #4]
   1dfe2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1dfe4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1dfe8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1dfea:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1dfee:	2000      	movs	r0, #0
   1dff0:	4770      	bx	lr

0001dff2 <gpio_nrfx_manage_callback>:
	return port->data;
   1dff2:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1dff4:	6858      	ldr	r0, [r3, #4]
{
   1dff6:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1dff8:	b158      	cbz	r0, 1e012 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dffa:	2400      	movs	r4, #0
   1dffc:	4281      	cmp	r1, r0
   1dffe:	d112      	bne.n	1e026 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1e000:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1e002:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1e004:	b954      	cbnz	r4, 1e01c <gpio_nrfx_manage_callback+0x2a>
   1e006:	428d      	cmp	r5, r1
	list->head = node;
   1e008:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e00a:	d100      	bne.n	1e00e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1e00c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1e00e:	2000      	movs	r0, #0
   1e010:	6008      	str	r0, [r1, #0]
	if (set) {
   1e012:	b96a      	cbnz	r2, 1e030 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   1e014:	2000      	movs	r0, #0
}
   1e016:	bd30      	pop	{r4, r5, pc}
   1e018:	4628      	mov	r0, r5
   1e01a:	e7ef      	b.n	1dffc <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1e01c:	428d      	cmp	r5, r1
	parent->next = child;
   1e01e:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1e020:	bf08      	it	eq
   1e022:	609c      	streq	r4, [r3, #8]
}
   1e024:	e7f3      	b.n	1e00e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1e026:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e028:	4604      	mov	r4, r0
   1e02a:	2d00      	cmp	r5, #0
   1e02c:	d1f4      	bne.n	1e018 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1e02e:	b13a      	cbz	r2, 1e040 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1e030:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1e032:	685a      	ldr	r2, [r3, #4]
   1e034:	600a      	str	r2, [r1, #0]
	list->head = node;
   1e036:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e038:	2800      	cmp	r0, #0
   1e03a:	d1eb      	bne.n	1e014 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1e03c:	6099      	str	r1, [r3, #8]
}
   1e03e:	e7ea      	b.n	1e016 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1e040:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e044:	e7e7      	b.n	1e016 <gpio_nrfx_manage_callback+0x24>

0001e046 <pin_interrupt_configure>:
{
	int rc = 0;

	if (!IS_ENABLED(CONFIG_GPIO_SX1509B_INTERRUPT)
	    && (mode != GPIO_INT_MODE_DISABLED)) {
		return -ENOTSUP;
   1e046:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
}
   1e04a:	bf14      	ite	ne
   1e04c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   1e050:	2000      	moveq	r0, #0
   1e052:	4770      	bx	lr

0001e054 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   1e054:	f7fc b8a8 	b.w	1a1a8 <z_impl_k_sem_take>

0001e058 <i2c_write>:
{
   1e058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1e05a:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1e05e:	2202      	movs	r2, #2
   1e060:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1e064:	6882      	ldr	r2, [r0, #8]
   1e066:	a901      	add	r1, sp, #4
   1e068:	6894      	ldr	r4, [r2, #8]
   1e06a:	2201      	movs	r2, #1
   1e06c:	47a0      	blx	r4
}
   1e06e:	b004      	add	sp, #16
   1e070:	bd10      	pop	{r4, pc}

0001e072 <i2c_reg_write_word_be>:
{
   1e072:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   1e074:	f88d 2004 	strb.w	r2, [sp, #4]
   1e078:	0a1a      	lsrs	r2, r3, #8
   1e07a:	f88d 2005 	strb.w	r2, [sp, #5]
   1e07e:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
   1e082:	2203      	movs	r2, #3
   1e084:	460b      	mov	r3, r1
   1e086:	a901      	add	r1, sp, #4
   1e088:	f7ff ffe6 	bl	1e058 <i2c_write>
}
   1e08c:	b003      	add	sp, #12
   1e08e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e092 <port_write>:
{
   1e092:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e096:	4605      	mov	r5, r0
   1e098:	4689      	mov	r9, r1
   1e09a:	4614      	mov	r4, r2
   1e09c:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   1e09e:	f001 f8c6 	bl	1f22e <k_is_in_isr>
   1e0a2:	bb08      	cbnz	r0, 1e0e8 <port_write+0x56>
	const struct sx1509b_config *cfg = dev->config;
   1e0a4:	686f      	ldr	r7, [r5, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1e0a6:	692d      	ldr	r5, [r5, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
   1e0a8:	f105 0620 	add.w	r6, r5, #32
   1e0ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e0b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e0b4:	4630      	mov	r0, r6
   1e0b6:	f7ff ffcd 	bl	1e054 <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
   1e0ba:	8b28      	ldrh	r0, [r5, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   1e0bc:	8939      	ldrh	r1, [r7, #8]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   1e0be:	4044      	eors	r4, r0
   1e0c0:	ea04 0409 	and.w	r4, r4, r9
   1e0c4:	ea84 0408 	eor.w	r4, r4, r8
   1e0c8:	4044      	eors	r4, r0
   1e0ca:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   1e0cc:	6868      	ldr	r0, [r5, #4]
   1e0ce:	4623      	mov	r3, r4
   1e0d0:	2210      	movs	r2, #16
   1e0d2:	f7ff ffce 	bl	1e072 <i2c_reg_write_word_be>
	if (rc == 0) {
   1e0d6:	4607      	mov	r7, r0
   1e0d8:	b900      	cbnz	r0, 1e0dc <port_write+0x4a>
		*outp = out;
   1e0da:	832c      	strh	r4, [r5, #24]
	z_impl_k_sem_give(sem);
   1e0dc:	4630      	mov	r0, r6
   1e0de:	f7fc f83d 	bl	1a15c <z_impl_k_sem_give>
}
   1e0e2:	4638      	mov	r0, r7
   1e0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   1e0e8:	f06f 070a 	mvn.w	r7, #10
   1e0ec:	e7f9      	b.n	1e0e2 <port_write+0x50>

0001e0ee <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   1e0ee:	2200      	movs	r2, #0
{
   1e0f0:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   1e0f2:	4611      	mov	r1, r2
   1e0f4:	f7ff bfcd 	b.w	1e092 <port_write>

0001e0f8 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   1e0f8:	2300      	movs	r3, #0
   1e0fa:	461a      	mov	r2, r3
   1e0fc:	f7ff bfc9 	b.w	1e092 <port_write>

0001e100 <port_set_bits>:
{
   1e100:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   1e102:	2300      	movs	r3, #0
   1e104:	f7ff bfc5 	b.w	1e092 <port_write>

0001e108 <port_set_masked>:
	return port_write(dev, mask, value, 0);
   1e108:	2300      	movs	r3, #0
   1e10a:	f7ff bfc2 	b.w	1e092 <port_write>

0001e10e <write_pin_state>:
{
   1e10e:	b530      	push	{r4, r5, lr}
   1e110:	b087      	sub	sp, #28
   1e112:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   1e114:	2100      	movs	r1, #0
   1e116:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   1e11a:	8811      	ldrh	r1, [r2, #0]
   1e11c:	ba49      	rev16	r1, r1
   1e11e:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   1e122:	8851      	ldrh	r1, [r2, #2]
   1e124:	ba49      	rev16	r1, r1
   1e126:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   1e12a:	8891      	ldrh	r1, [r2, #4]
   1e12c:	ba49      	rev16	r1, r1
   1e12e:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   1e132:	88d1      	ldrh	r1, [r2, #6]
   1e134:	ba49      	rev16	r1, r1
   1e136:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   1e13a:	8911      	ldrh	r1, [r2, #8]
   1e13c:	ba49      	rev16	r1, r1
   1e13e:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   1e142:	8951      	ldrh	r1, [r2, #10]
   1e144:	ba49      	rev16	r1, r1
   1e146:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   1e14a:	8991      	ldrh	r1, [r2, #12]
   1e14c:	ba49      	rev16	r1, r1
   1e14e:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   1e152:	89d1      	ldrh	r1, [r2, #14]
   1e154:	8a12      	ldrh	r2, [r2, #16]
{
   1e156:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   1e158:	ba49      	rev16	r1, r1
   1e15a:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   1e15e:	ba51      	rev16	r1, r2
   1e160:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1e164:	6860      	ldr	r0, [r4, #4]
   1e166:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
   1e168:	b163      	cbz	r3, 1e184 <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1e16a:	4613      	mov	r3, r2
   1e16c:	2210      	movs	r2, #16
   1e16e:	f7ff ff80 	bl	1e072 <i2c_reg_write_word_be>
		if (rc == 0) {
   1e172:	b928      	cbnz	r0, 1e180 <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   1e174:	892b      	ldrh	r3, [r5, #8]
   1e176:	6860      	ldr	r0, [r4, #4]
   1e178:	2211      	movs	r2, #17
   1e17a:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   1e17c:	f7ff ff6c 	bl	1e058 <i2c_write>
}
   1e180:	b007      	add	sp, #28
   1e182:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   1e184:	460b      	mov	r3, r1
   1e186:	2213      	movs	r2, #19
   1e188:	a901      	add	r1, sp, #4
   1e18a:	e7f7      	b.n	1e17c <write_pin_state+0x6e>

0001e18c <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   1e18c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct sx1509b_config *cfg = dev->config;
   1e190:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1e192:	6905      	ldr	r5, [r0, #16]
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
   1e194:	6870      	ldr	r0, [r6, #4]
   1e196:	f7fb fd87 	bl	19ca8 <z_impl_device_get_binding>
   1e19a:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
   1e19c:	2800      	cmp	r0, #0
   1e19e:	d061      	beq.n	1e264 <sx1509b_init+0xd8>
	drv_data->irq_state = (struct sx1509b_irq_state) {
		.interrupt_mask = ALL_PINS,
	};
#endif

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1e1a0:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1e1a2:	f04f 087d 	mov.w	r8, #125	; 0x7d
   1e1a6:	2712      	movs	r7, #18
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1e1a8:	2202      	movs	r2, #2
   1e1aa:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
   1e1ac:	f88d 8004 	strb.w	r8, [sp, #4]
   1e1b0:	f88d 7005 	strb.w	r7, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1e1b4:	f7ff ff50 	bl	1e058 <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
   1e1b8:	4604      	mov	r4, r0
   1e1ba:	2800      	cmp	r0, #0
   1e1bc:	d14a      	bne.n	1e254 <sx1509b_init+0xc8>
	uint8_t tx_buf[2] = {reg_addr, value};
   1e1be:	2234      	movs	r2, #52	; 0x34
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1e1c0:	6868      	ldr	r0, [r5, #4]
   1e1c2:	8933      	ldrh	r3, [r6, #8]
   1e1c4:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1e1c8:	a901      	add	r1, sp, #4
   1e1ca:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   1e1cc:	f88d 8004 	strb.w	r8, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1e1d0:	f7ff ff42 	bl	1e058 <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
   1e1d4:	4604      	mov	r4, r0
   1e1d6:	2800      	cmp	r0, #0
   1e1d8:	d13c      	bne.n	1e254 <sx1509b_init+0xc8>
	return z_impl_k_sleep(timeout);
   1e1da:	2100      	movs	r1, #0
   1e1dc:	2063      	movs	r0, #99	; 0x63
   1e1de:	f7fc fc59 	bl	1aa94 <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
   1e1e2:	463a      	mov	r2, r7
   1e1e4:	4621      	mov	r1, r4
   1e1e6:	f105 0008 	add.w	r0, r5, #8
   1e1ea:	f7fd fda9 	bl	1bd40 <memset>
   1e1ee:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
   1e1f2:	221e      	movs	r2, #30
   1e1f4:	832b      	strh	r3, [r5, #24]
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1e1f6:	83ac      	strh	r4, [r5, #28]
   1e1f8:	77ac      	strb	r4, [r5, #30]
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1e1fa:	6868      	ldr	r0, [r5, #4]
   1e1fc:	8933      	ldrh	r3, [r6, #8]
   1e1fe:	f88d 2004 	strb.w	r2, [sp, #4]
   1e202:	2240      	movs	r2, #64	; 0x40
   1e204:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1e208:	a901      	add	r1, sp, #4
   1e20a:	2202      	movs	r2, #2
   1e20c:	f7ff ff24 	bl	1e058 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1e210:	4627      	mov	r7, r4
				SX1509B_REG_CLOCK,
				SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
   1e212:	4604      	mov	r4, r0
   1e214:	b9f0      	cbnz	r0, 1e254 <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1e216:	8b2b      	ldrh	r3, [r5, #24]
   1e218:	8931      	ldrh	r1, [r6, #8]
   1e21a:	6868      	ldr	r0, [r5, #4]
   1e21c:	2210      	movs	r2, #16
   1e21e:	f7ff ff28 	bl	1e072 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DATA,
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
   1e222:	4604      	mov	r4, r0
   1e224:	b9b0      	cbnz	r0, 1e254 <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1e226:	8aeb      	ldrh	r3, [r5, #22]
   1e228:	8931      	ldrh	r1, [r6, #8]
   1e22a:	6868      	ldr	r0, [r5, #4]
   1e22c:	220e      	movs	r2, #14
   1e22e:	f7ff ff20 	bl	1e072 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DIR,
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
   1e232:	4604      	mov	r4, r0
   1e234:	b970      	cbnz	r0, 1e254 <sx1509b_init+0xc8>
	uint8_t tx_buf[3] = { reg_addr, value };
   1e236:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
   1e238:	6868      	ldr	r0, [r5, #4]
   1e23a:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
   1e23c:	f88d 2004 	strb.w	r2, [sp, #4]
   1e240:	2298      	movs	r2, #152	; 0x98
   1e242:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1e246:	a901      	add	r1, sp, #4
   1e248:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
   1e24a:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1e24e:	f7ff ff03 	bl	1e058 <i2c_write>
   1e252:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e254:	f105 0020 	add.w	r0, r5, #32
   1e258:	f7fb ff80 	bl	1a15c <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   1e25c:	4620      	mov	r0, r4
   1e25e:	b002      	add	sp, #8
   1e260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -EINVAL;
   1e264:	f06f 0415 	mvn.w	r4, #21
   1e268:	e7f4      	b.n	1e254 <sx1509b_init+0xc8>

0001e26a <sx1509b_config>:
{
   1e26a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
   1e26e:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1e272:	6904      	ldr	r4, [r0, #16]
{
   1e274:	460d      	mov	r5, r1
   1e276:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   1e278:	f000 ffd9 	bl	1f22e <k_is_in_isr>
   1e27c:	4683      	mov	fp, r0
   1e27e:	2800      	cmp	r0, #0
   1e280:	f040 808c 	bne.w	1e39c <sx1509b_config+0x132>
	if ((flags & GPIO_DS_ALT) != 0) {
   1e284:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
   1e288:	f040 808b 	bne.w	1e3a2 <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
   1e28c:	f104 0920 	add.w	r9, r4, #32
   1e290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e298:	4648      	mov	r0, r9
   1e29a:	f7ff fedb 	bl	1e054 <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
   1e29e:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
   1e2a0:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
   1e2a2:	40ae      	lsls	r6, r5
   1e2a4:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   1e2a6:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
   1e2aa:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   1e2ae:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
   1e2b0:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
   1e2b4:	d44f      	bmi.n	1e356 <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
   1e2b6:	8a63      	ldrh	r3, [r4, #18]
   1e2b8:	ea03 0208 	and.w	r2, r3, r8
   1e2bc:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   1e2be:	07ba      	lsls	r2, r7, #30
   1e2c0:	d45c      	bmi.n	1e37c <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
   1e2c2:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
   1e2c4:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   1e2c6:	bf4c      	ite	mi
   1e2c8:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   1e2ca:	ea08 0303 	andpl.w	r3, r8, r3
   1e2ce:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
   1e2d0:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   1e2d2:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   1e2d4:	bf4c      	ite	mi
   1e2d6:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   1e2d8:	ea08 0303 	andpl.w	r3, r8, r3
   1e2dc:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
   1e2de:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
   1e2e0:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
   1e2e2:	bf4c      	ite	mi
   1e2e4:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
   1e2e8:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   1e2ea:	05bd      	lsls	r5, r7, #22
   1e2ec:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
   1e2ee:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
   1e2f0:	d54e      	bpl.n	1e390 <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
   1e2f2:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1e2f6:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
   1e2f8:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1e2fa:	d544      	bpl.n	1e386 <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
   1e2fc:	8b23      	ldrh	r3, [r4, #24]
   1e2fe:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
   1e302:	8323      	strh	r3, [r4, #24]
			data_first = true;
   1e304:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
   1e308:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
   1e30c:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
   1e30e:	bf4c      	ite	mi
   1e310:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
   1e312:	ea08 0603 	andpl.w	r6, r8, r3
   1e316:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   1e31a:	465b      	mov	r3, fp
   1e31c:	f104 0208 	add.w	r2, r4, #8
   1e320:	4621      	mov	r1, r4
   1e322:	4650      	mov	r0, sl
   1e324:	f7ff fef3 	bl	1e10e <write_pin_state>
	if (rc == 0) {
   1e328:	4605      	mov	r5, r0
   1e32a:	bb00      	cbnz	r0, 1e36e <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   1e32c:	2322      	movs	r3, #34	; 0x22
   1e32e:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   1e332:	7f23      	ldrb	r3, [r4, #28]
   1e334:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   1e338:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
   1e33c:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
   1e33e:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
   1e340:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   1e342:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
   1e346:	eb0d 0102 	add.w	r1, sp, r2
   1e34a:	f8ba 3008 	ldrh.w	r3, [sl, #8]
   1e34e:	f7ff fe83 	bl	1e058 <i2c_write>
   1e352:	4605      	mov	r5, r0
   1e354:	e00b      	b.n	1e36e <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
   1e356:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1e35a:	f8ba 1008 	ldrh.w	r1, [sl, #8]
   1e35e:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
   1e360:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1e362:	2220      	movs	r2, #32
   1e364:	f7ff fe85 	bl	1e072 <i2c_reg_write_word_be>
		if (rc) {
   1e368:	4605      	mov	r5, r0
   1e36a:	2800      	cmp	r0, #0
   1e36c:	d0a3      	beq.n	1e2b6 <sx1509b_config+0x4c>
   1e36e:	4648      	mov	r0, r9
   1e370:	f7fb fef4 	bl	1a15c <z_impl_k_sem_give>
}
   1e374:	4628      	mov	r0, r5
   1e376:	b003      	add	sp, #12
   1e378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   1e37c:	077d      	lsls	r5, r7, #29
   1e37e:	d50a      	bpl.n	1e396 <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
   1e380:	4333      	orrs	r3, r6
   1e382:	8263      	strh	r3, [r4, #18]
   1e384:	e79d      	b.n	1e2c2 <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1e386:	0539      	lsls	r1, r7, #20
   1e388:	d5be      	bpl.n	1e308 <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
   1e38a:	8b23      	ldrh	r3, [r4, #24]
   1e38c:	4333      	orrs	r3, r6
   1e38e:	e7b8      	b.n	1e302 <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
   1e390:	4333      	orrs	r3, r6
   1e392:	82e3      	strh	r3, [r4, #22]
   1e394:	e7b8      	b.n	1e308 <sx1509b_config+0x9e>
			rc = -ENOTSUP;
   1e396:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1e39a:	e7e8      	b.n	1e36e <sx1509b_config+0x104>
		return -EWOULDBLOCK;
   1e39c:	f06f 050a 	mvn.w	r5, #10
   1e3a0:	e7e8      	b.n	1e374 <sx1509b_config+0x10a>
		return -ENOTSUP;
   1e3a2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1e3a6:	e7e5      	b.n	1e374 <sx1509b_config+0x10a>

0001e3a8 <port_get>:
{
   1e3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e3ac:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
   1e3ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1e3b2:	6907      	ldr	r7, [r0, #16]
{
   1e3b4:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
   1e3b6:	f000 ff3a 	bl	1f22e <k_is_in_isr>
   1e3ba:	4604      	mov	r4, r0
   1e3bc:	bb78      	cbnz	r0, 1e41e <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
   1e3be:	f107 0620 	add.w	r6, r7, #32
   1e3c2:	4630      	mov	r0, r6
   1e3c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e3c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e3cc:	f7ff fe42 	bl	1e054 <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
   1e3d0:	f10d 0205 	add.w	r2, sp, #5
   1e3d4:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   1e3d6:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   1e3d8:	6878      	ldr	r0, [r7, #4]
   1e3da:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   1e3dc:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   1e3de:	f10d 0206 	add.w	r2, sp, #6
   1e3e2:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e3e6:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   1e3e8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1e3ec:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1e3ee:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   1e3f0:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   1e3f4:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e3f6:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1e3fa:	6881      	ldr	r1, [r0, #8]
   1e3fc:	688c      	ldr	r4, [r1, #8]
   1e3fe:	a902      	add	r1, sp, #8
   1e400:	47a0      	blx	r4
	if (rc != 0) {
   1e402:	4604      	mov	r4, r0
   1e404:	b920      	cbnz	r0, 1e410 <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
   1e406:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e40a:	ba5b      	rev16	r3, r3
   1e40c:	b29b      	uxth	r3, r3
   1e40e:	602b      	str	r3, [r5, #0]
   1e410:	4630      	mov	r0, r6
   1e412:	f7fb fea3 	bl	1a15c <z_impl_k_sem_give>
}
   1e416:	4620      	mov	r0, r4
   1e418:	b008      	add	sp, #32
   1e41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
   1e41e:	f06f 040a 	mvn.w	r4, #10
   1e422:	e7f8      	b.n	1e416 <port_get+0x6e>

0001e424 <i2c_nrfx_twim_configure>:
{
   1e424:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   1e426:	07cb      	lsls	r3, r1, #31
{
   1e428:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   1e42a:	d41d      	bmi.n	1e468 <i2c_nrfx_twim_configure+0x44>
	switch (I2C_SPEED_GET(i2c_config)) {
   1e42c:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1e430:	2901      	cmp	r1, #1
   1e432:	d016      	beq.n	1e462 <i2c_nrfx_twim_configure+0x3e>
   1e434:	2902      	cmp	r1, #2
   1e436:	d117      	bne.n	1e468 <i2c_nrfx_twim_configure+0x44>
   1e438:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1e43c:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   1e43e:	6baa      	ldr	r2, [r5, #56]	; 0x38
   1e440:	4293      	cmp	r3, r2
   1e442:	d014      	beq.n	1e46e <i2c_nrfx_twim_configure+0x4a>
		dev_data->twim_config.frequency = frequency;
   1e444:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   1e446:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1e44a:	b12b      	cbz	r3, 1e458 <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
   1e44c:	6860      	ldr	r0, [r4, #4]
   1e44e:	f7fb f999 	bl	19784 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   1e452:	2300      	movs	r3, #0
   1e454:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   1e458:	4620      	mov	r0, r4
}
   1e45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   1e45e:	f7f9 b883 	b.w	17568 <init_twim>
		frequency = NRF_TWIM_FREQ_100K;
   1e462:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
   1e466:	e7e9      	b.n	1e43c <i2c_nrfx_twim_configure+0x18>
	switch (I2C_SPEED_GET(i2c_config)) {
   1e468:	f06f 0015 	mvn.w	r0, #21
}
   1e46c:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1e46e:	2000      	movs	r0, #0
   1e470:	e7fc      	b.n	1e46c <i2c_nrfx_twim_configure+0x48>

0001e472 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   1e472:	b510      	push	{r4, lr}
   1e474:	2200      	movs	r2, #0
   1e476:	4604      	mov	r4, r0
   1e478:	2101      	movs	r1, #1
   1e47a:	2003      	movs	r0, #3
   1e47c:	f7e7 fe92 	bl	61a4 <z_arm_irq_priority_set>
   1e480:	4620      	mov	r0, r4
   1e482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e486:	f7f9 b86f 	b.w	17568 <init_twim>

0001e48a <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   1e48a:	b510      	push	{r4, lr}
   1e48c:	2200      	movs	r2, #0
   1e48e:	4604      	mov	r4, r0
   1e490:	2101      	movs	r1, #1
   1e492:	2004      	movs	r0, #4
   1e494:	f7e7 fe86 	bl	61a4 <z_arm_irq_priority_set>
   1e498:	4620      	mov	r0, r4
   1e49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e49e:	f7f9 b863 	b.w	17568 <init_twim>

0001e4a2 <pwm_channel_is_active>:
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   1e4a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	uint16_t pulse_cycle =
   1e4a6:	8880      	ldrh	r0, [r0, #4]
   1e4a8:	f3c0 000e 	ubfx	r0, r0, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   1e4ac:	b120      	cbz	r0, 1e4b8 <pwm_channel_is_active+0x16>
   1e4ae:	898b      	ldrh	r3, [r1, #12]
   1e4b0:	4283      	cmp	r3, r0
   1e4b2:	bf94      	ite	ls
   1e4b4:	2000      	movls	r0, #0
   1e4b6:	2001      	movhi	r0, #1
}
   1e4b8:	4770      	bx	lr

0001e4ba <pwm_nrfx_pin_set>:
{
   1e4ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e4be:	f89d 4020 	ldrb.w	r4, [sp, #32]
	const struct pwm_nrfx_config *config = dev->config;
   1e4c2:	6846      	ldr	r6, [r0, #4]
{
   1e4c4:	460f      	mov	r7, r1
   1e4c6:	4698      	mov	r8, r3
	struct pwm_nrfx_data *data = dev->data;
   1e4c8:	6901      	ldr	r1, [r0, #16]
	if (flags) {
   1e4ca:	bb8c      	cbnz	r4, 1e530 <pwm_nrfx_pin_set+0x76>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1e4cc:	f106 0008 	add.w	r0, r6, #8
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   1e4d0:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e4d4:	2bff      	cmp	r3, #255	; 0xff
   1e4d6:	d003      	beq.n	1e4e0 <pwm_nrfx_pin_set+0x26>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   1e4d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1e4dc:	429f      	cmp	r7, r3
   1e4de:	d02b      	beq.n	1e538 <pwm_nrfx_pin_set+0x7e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1e4e0:	3401      	adds	r4, #1
   1e4e2:	b2e4      	uxtb	r4, r4
   1e4e4:	2c04      	cmp	r4, #4
   1e4e6:	d1f3      	bne.n	1e4d0 <pwm_nrfx_pin_set+0x16>
		return -EINVAL;
   1e4e8:	f06f 0015 	mvn.w	r0, #21
   1e4ec:	e022      	b.n	1e534 <pwm_nrfx_pin_set+0x7a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e4ee:	2500      	movs	r5, #0
   1e4f0:	e033      	b.n	1e55a <pwm_nrfx_pin_set+0xa0>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1e4f2:	3301      	adds	r3, #1
   1e4f4:	2b08      	cmp	r3, #8
		countertop >>= 1;
   1e4f6:	ea4f 0050 	mov.w	r0, r0, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1e4fa:	d14b      	bne.n	1e594 <pwm_nrfx_pin_set+0xda>
   1e4fc:	e7f4      	b.n	1e4e8 <pwm_nrfx_pin_set+0x2e>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1e4fe:	3201      	adds	r2, #1
   1e500:	2a04      	cmp	r2, #4
   1e502:	f040 8081 	bne.w	1e608 <pwm_nrfx_pin_set+0x14e>
			nrfx_pwm_stop(&config->pwm, false);
   1e506:	2100      	movs	r1, #0
   1e508:	4630      	mov	r0, r6
   1e50a:	f000 fd2f 	bl	1ef6c <nrfx_pwm_stop>
   1e50e:	e084      	b.n	1e61a <pwm_nrfx_pin_set+0x160>
		if (was_stopped) {
   1e510:	2d00      	cmp	r5, #0
   1e512:	f000 8082 	beq.w	1e61a <pwm_nrfx_pin_set+0x160>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   1e516:	4630      	mov	r0, r6
   1e518:	f7fa ffe4 	bl	194e4 <nrfx_pwm_is_stopped>
   1e51c:	2800      	cmp	r0, #0
   1e51e:	d0fa      	beq.n	1e516 <pwm_nrfx_pin_set+0x5c>
			nrfx_pwm_simple_playback(&config->pwm,
   1e520:	2302      	movs	r3, #2
   1e522:	2201      	movs	r2, #1
   1e524:	f106 0118 	add.w	r1, r6, #24
   1e528:	4630      	mov	r0, r6
   1e52a:	f7fa ff9d 	bl	19468 <nrfx_pwm_simple_playback>
   1e52e:	e074      	b.n	1e61a <pwm_nrfx_pin_set+0x160>
		return -ENOTSUP;
   1e530:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1e534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e538:	4620      	mov	r0, r4
   1e53a:	f7ff ffb2 	bl	1e4a2 <pwm_channel_is_active>
   1e53e:	4605      	mov	r5, r0
   1e540:	2800      	cmp	r0, #0
   1e542:	d1d4      	bne.n	1e4ee <pwm_nrfx_pin_set+0x34>
   1e544:	b2e8      	uxtb	r0, r5
		if (i != channel && pwm_channel_is_active(i, data)) {
   1e546:	42a0      	cmp	r0, r4
   1e548:	d003      	beq.n	1e552 <pwm_nrfx_pin_set+0x98>
   1e54a:	f7ff ffaa 	bl	1e4a2 <pwm_channel_is_active>
   1e54e:	2800      	cmp	r0, #0
   1e550:	d1cd      	bne.n	1e4ee <pwm_nrfx_pin_set+0x34>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1e552:	3501      	adds	r5, #1
   1e554:	2d04      	cmp	r5, #4
   1e556:	d1f5      	bne.n	1e544 <pwm_nrfx_pin_set+0x8a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   1e558:	2501      	movs	r5, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1e55a:	f896 e00e 	ldrb.w	lr, [r6, #14]
   1e55e:	f1be 0f01 	cmp.w	lr, #1
		period_cycles /= 2;
   1e562:	bf04      	itt	eq
   1e564:	0852      	lsreq	r2, r2, #1
		pulse_cycles /= 2;
   1e566:	ea4f 0858 	moveq.w	r8, r8, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
   1e56a:	b322      	cbz	r2, 1e5b6 <pwm_nrfx_pin_set+0xfc>
   1e56c:	680b      	ldr	r3, [r1, #0]
   1e56e:	4293      	cmp	r3, r2
   1e570:	d021      	beq.n	1e5b6 <pwm_nrfx_pin_set+0xfc>
   1e572:	2300      	movs	r3, #0
				data->current[i]
   1e574:	f101 0c04 	add.w	ip, r1, #4
		if (i != channel) {
   1e578:	b2d8      	uxtb	r0, r3
   1e57a:	42a0      	cmp	r0, r4
   1e57c:	d005      	beq.n	1e58a <pwm_nrfx_pin_set+0xd0>
			uint16_t channel_pulse_cycle =
   1e57e:	f83c 0013 	ldrh.w	r0, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
   1e582:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1e586:	2800      	cmp	r0, #0
   1e588:	d1ae      	bne.n	1e4e8 <pwm_nrfx_pin_set+0x2e>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1e58a:	3301      	adds	r3, #1
   1e58c:	2b04      	cmp	r3, #4
   1e58e:	d1f3      	bne.n	1e578 <pwm_nrfx_pin_set+0xbe>
   1e590:	4610      	mov	r0, r2
   1e592:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   1e594:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1e598:	fa5f fc83 	uxtb.w	ip, r3
   1e59c:	d2a9      	bcs.n	1e4f2 <pwm_nrfx_pin_set+0x38>
			data->prescaler     = prescaler;
   1e59e:	f881 c00e 	strb.w	ip, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
   1e5a2:	f8d6 c000 	ldr.w	ip, [r6]
			data->period_cycles = period_cycles;
   1e5a6:	600a      	str	r2, [r1, #0]
			data->countertop    = (uint16_t)countertop;
   1e5a8:	8188      	strh	r0, [r1, #12]
    p_reg->PRESCALER  = base_clock;
   1e5aa:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1e5ae:	f8cc e504 	str.w	lr, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   1e5b2:	f8cc 0508 	str.w	r0, [ip, #1288]	; 0x508
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   1e5b6:	eb01 0c44 	add.w	ip, r1, r4, lsl #1
		| (pulse_cycles >> data->prescaler));
   1e5ba:	7b88      	ldrb	r0, [r1, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1e5bc:	f8bc 3004 	ldrh.w	r3, [ip, #4]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   1e5c0:	4542      	cmp	r2, r8
   1e5c2:	4691      	mov	r9, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1e5c4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   1e5c8:	bf28      	it	cs
   1e5ca:	46c1      	movcs	r9, r8
		| (pulse_cycles >> data->prescaler));
   1e5cc:	fa29 f000 	lsr.w	r0, r9, r0
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   1e5d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		| (pulse_cycles >> data->prescaler));
   1e5d4:	4303      	orrs	r3, r0
	data->current[channel] = (
   1e5d6:	f8ac 3004 	strh.w	r3, [ip, #4]
	if (!pwm_channel_is_active(channel, data)) {
   1e5da:	4620      	mov	r0, r4
   1e5dc:	f7ff ff61 	bl	1e4a2 <pwm_channel_is_active>
   1e5e0:	2800      	cmp	r0, #0
   1e5e2:	d195      	bne.n	1e510 <pwm_nrfx_pin_set+0x56>
			config->initial_config.output_pins[channel]
   1e5e4:	1933      	adds	r3, r6, r4
   1e5e6:	f007 071f 	and.w	r7, r7, #31
   1e5ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
			&& !channel_inverted_state;
   1e5ee:	f1b9 0f00 	cmp.w	r9, #0
   1e5f2:	d11e      	bne.n	1e632 <pwm_nrfx_pin_set+0x178>
			&& channel_inverted_state;
   1e5f4:	4542      	cmp	r2, r8
   1e5f6:	d812      	bhi.n	1e61e <pwm_nrfx_pin_set+0x164>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1e5f8:	2301      	movs	r3, #1
   1e5fa:	fa03 f707 	lsl.w	r7, r3, r7
    p_reg->OUTCLR = clr_mask;
   1e5fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1e602:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   1e606:	2200      	movs	r2, #0
   1e608:	b2d0      	uxtb	r0, r2
		if (i != channel && pwm_channel_is_active(i, data)) {
   1e60a:	42a0      	cmp	r0, r4
   1e60c:	f43f af77 	beq.w	1e4fe <pwm_nrfx_pin_set+0x44>
   1e610:	f7ff ff47 	bl	1e4a2 <pwm_channel_is_active>
   1e614:	2800      	cmp	r0, #0
   1e616:	f43f af72 	beq.w	1e4fe <pwm_nrfx_pin_set+0x44>
	return 0;
   1e61a:	2000      	movs	r0, #0
   1e61c:	e78a      	b.n	1e534 <pwm_nrfx_pin_set+0x7a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   1e61e:	2b00      	cmp	r3, #0
   1e620:	daea      	bge.n	1e5f8 <pwm_nrfx_pin_set+0x13e>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1e622:	2301      	movs	r3, #1
   1e624:	fa03 f707 	lsl.w	r7, r3, r7
    p_reg->OUTSET = set_mask;
   1e628:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1e62c:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
}
   1e630:	e7e9      	b.n	1e606 <pwm_nrfx_pin_set+0x14c>
			&& channel_inverted_state;
   1e632:	4542      	cmp	r2, r8
   1e634:	d8f5      	bhi.n	1e622 <pwm_nrfx_pin_set+0x168>
   1e636:	2b00      	cmp	r3, #0
   1e638:	dbde      	blt.n	1e5f8 <pwm_nrfx_pin_set+0x13e>
   1e63a:	e7f2      	b.n	1e622 <pwm_nrfx_pin_set+0x168>

0001e63c <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
   1e63c:	b510      	push	{r4, lr}
   1e63e:	b086      	sub	sp, #24
	msg[1].len = num_read;
   1e640:	e9cd 2303 	strd	r2, r3, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
   1e644:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
   1e646:	2101      	movs	r1, #1
   1e648:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e64a:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1e64c:	2100      	movs	r1, #0
   1e64e:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e652:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1e656:	6883      	ldr	r3, [r0, #8]
   1e658:	2202      	movs	r2, #2
   1e65a:	689c      	ldr	r4, [r3, #8]
   1e65c:	4669      	mov	r1, sp
   1e65e:	235a      	movs	r3, #90	; 0x5a
   1e660:	47a0      	blx	r4
}
   1e662:	b006      	add	sp, #24
   1e664:	bd10      	pop	{r4, pc}

0001e666 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1e666:	2301      	movs	r3, #1
   1e668:	fa03 f101 	lsl.w	r1, r3, r1
   1e66c:	6903      	ldr	r3, [r0, #16]
   1e66e:	681b      	ldr	r3, [r3, #0]
   1e670:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1e672:	bf18      	it	ne
   1e674:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1e678:	b112      	cbz	r2, 1e680 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   1e67a:	6883      	ldr	r3, [r0, #8]
   1e67c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1e67e:	4718      	bx	r3
   1e680:	6883      	ldr	r3, [r0, #8]
   1e682:	691b      	ldr	r3, [r3, #16]
   1e684:	e7fb      	b.n	1e67e <gpio_pin_set.isra.0+0x18>

0001e686 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   1e686:	4601      	mov	r1, r0
   1e688:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e68c:	b508      	push	{r3, lr}
   1e68e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e692:	2300      	movs	r3, #0
   1e694:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   1e698:	1449      	asrs	r1, r1, #17
   1e69a:	f7e2 fa37 	bl	b0c <__aeabi_uldivmod>
}
   1e69e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   1e6a2:	f7fc b9f7 	b.w	1aa94 <z_impl_k_sleep>

0001e6a6 <i2c_write.constprop.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
   1e6a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1e6a8:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1e6ac:	2202      	movs	r2, #2
   1e6ae:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1e6b2:	6883      	ldr	r3, [r0, #8]
   1e6b4:	2201      	movs	r2, #1
   1e6b6:	689c      	ldr	r4, [r3, #8]
   1e6b8:	a901      	add	r1, sp, #4
   1e6ba:	235a      	movs	r3, #90	; 0x5a
   1e6bc:	47a0      	blx	r4
}
   1e6be:	b004      	add	sp, #16
   1e6c0:	bd10      	pop	{r4, pc}

0001e6c2 <fetch_status>:
{
   1e6c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e6c4:	2300      	movs	r3, #0
   1e6c6:	f88d 3007 	strb.w	r3, [sp, #7]
	return i2c_write_read(dev, dev_addr,
   1e6ca:	f10d 0205 	add.w	r2, sp, #5
   1e6ce:	2301      	movs	r3, #1
   1e6d0:	f10d 0107 	add.w	r1, sp, #7
   1e6d4:	4605      	mov	r5, r0
   1e6d6:	f7ff ffb1 	bl	1e63c <i2c_write_read.constprop.0>
	if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
   1e6da:	2800      	cmp	r0, #0
   1e6dc:	db10      	blt.n	1e700 <fetch_status+0x3e>
	rv = status;
   1e6de:	f89d 4005 	ldrb.w	r4, [sp, #5]
	if (status & CCS811_STATUS_ERROR) {
   1e6e2:	07e3      	lsls	r3, r4, #31
   1e6e4:	d513      	bpl.n	1e70e <fetch_status+0x4c>
		if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
   1e6e6:	23e0      	movs	r3, #224	; 0xe0
   1e6e8:	f88d 3007 	strb.w	r3, [sp, #7]
   1e6ec:	f10d 0206 	add.w	r2, sp, #6
   1e6f0:	2301      	movs	r3, #1
   1e6f2:	f10d 0107 	add.w	r1, sp, #7
   1e6f6:	4628      	mov	r0, r5
   1e6f8:	f7ff ffa0 	bl	1e63c <i2c_write_read.constprop.0>
   1e6fc:	2800      	cmp	r0, #0
   1e6fe:	da02      	bge.n	1e706 <fetch_status+0x44>
		return -EIO;
   1e700:	f06f 0404 	mvn.w	r4, #4
   1e704:	e003      	b.n	1e70e <fetch_status+0x4c>
		rv |= (error_id << 8);
   1e706:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1e70a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
}
   1e70e:	4620      	mov	r0, r4
   1e710:	b003      	add	sp, #12
   1e712:	bd30      	pop	{r4, r5, pc}

0001e714 <set_wake.isra.0>:
static void set_wake(struct ccs811_data *drv_data, bool enable)
   1e714:	b510      	push	{r4, lr}
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
   1e716:	460a      	mov	r2, r1
static void set_wake(struct ccs811_data *drv_data, bool enable)
   1e718:	460c      	mov	r4, r1
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
   1e71a:	210c      	movs	r1, #12
   1e71c:	f7ff ffa3 	bl	1e666 <gpio_pin_set.isra.0>
	if (enable) {
   1e720:	b124      	cbz	r4, 1e72c <set_wake.isra.0+0x18>
	z_impl_k_busy_wait(usec_to_wait);
   1e722:	2032      	movs	r0, #50	; 0x32
}
   1e724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e728:	f001 b87b 	b.w	1f822 <z_impl_k_busy_wait>
   1e72c:	2014      	movs	r0, #20
   1e72e:	e7f9      	b.n	1e724 <set_wake.isra.0+0x10>

0001e730 <ccs811_sample_fetch>:
{
   1e730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
   1e732:	6905      	ldr	r5, [r0, #16]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   1e734:	2302      	movs	r3, #2
	uint16_t buf[4] = { 0 };
   1e736:	2400      	movs	r4, #0
	set_wake(drv_data, true);
   1e738:	68e8      	ldr	r0, [r5, #12]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   1e73a:	f88d 3007 	strb.w	r3, [sp, #7]
	set_wake(drv_data, true);
   1e73e:	2101      	movs	r1, #1
	uint16_t buf[4] = { 0 };
   1e740:	e9cd 4402 	strd	r4, r4, [sp, #8]
	set_wake(drv_data, true);
   1e744:	f7ff ffe6 	bl	1e714 <set_wake.isra.0>
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1e748:	2308      	movs	r3, #8
   1e74a:	eb0d 0203 	add.w	r2, sp, r3
   1e74e:	f10d 0107 	add.w	r1, sp, #7
   1e752:	6828      	ldr	r0, [r5, #0]
   1e754:	f7ff ff72 	bl	1e63c <i2c_write_read.constprop.0>
	set_wake(drv_data, false);
   1e758:	4621      	mov	r1, r4
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1e75a:	4606      	mov	r6, r0
	set_wake(drv_data, false);
   1e75c:	68e8      	ldr	r0, [r5, #12]
   1e75e:	f7ff ffd9 	bl	1e714 <set_wake.isra.0>
	if (rc < 0) {
   1e762:	42a6      	cmp	r6, r4
   1e764:	db1b      	blt.n	1e79e <ccs811_sample_fetch+0x6e>
	rp->co2 = sys_be16_to_cpu(buf[0]);
   1e766:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	status = sys_le16_to_cpu(buf[2]); /* sic */
   1e76a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	rp->status = status;
   1e76e:	82ea      	strh	r2, [r5, #22]
   1e770:	ba5b      	rev16	r3, r3
   1e772:	b299      	uxth	r1, r3
	rp->co2 = sys_be16_to_cpu(buf[0]);
   1e774:	822b      	strh	r3, [r5, #16]
	rp->voc = sys_be16_to_cpu(buf[1]);
   1e776:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1e77a:	ba5b      	rev16	r3, r3
   1e77c:	826b      	strh	r3, [r5, #18]
	rp->raw = sys_be16_to_cpu(buf[3]);
   1e77e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e782:	ba5b      	rev16	r3, r3
   1e784:	82ab      	strh	r3, [r5, #20]
	if ((drv_data->app_fw_ver <= 0x11)
   1e786:	7e6b      	ldrb	r3, [r5, #25]
   1e788:	2b11      	cmp	r3, #17
   1e78a:	d800      	bhi.n	1e78e <ccs811_sample_fetch+0x5e>
	    && (rp->co2 != 0)) {
   1e78c:	b951      	cbnz	r1, 1e7a4 <ccs811_sample_fetch+0x74>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   1e78e:	f012 0f08 	tst.w	r2, #8
   1e792:	bf14      	ite	ne
   1e794:	2000      	movne	r0, #0
   1e796:	f06f 000a 	mvneq.w	r0, #10
}
   1e79a:	b004      	add	sp, #16
   1e79c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1e79e:	f06f 0004 	mvn.w	r0, #4
   1e7a2:	e7fa      	b.n	1e79a <ccs811_sample_fetch+0x6a>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   1e7a4:	4620      	mov	r0, r4
   1e7a6:	e7f8      	b.n	1e79a <ccs811_sample_fetch+0x6a>

0001e7a8 <ccs811_result>:
	return &drv_data->result;
   1e7a8:	6900      	ldr	r0, [r0, #16]
}
   1e7aa:	3010      	adds	r0, #16
   1e7ac:	4770      	bx	lr

0001e7ae <ccs811_configver_fetch>:
{
   1e7ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
   1e7b0:	6906      	ldr	r6, [r0, #16]
	if (!ptr) {
   1e7b2:	460d      	mov	r5, r1
   1e7b4:	2900      	cmp	r1, #0
   1e7b6:	d037      	beq.n	1e828 <ccs811_configver_fetch+0x7a>
	set_wake(drv_data, true);
   1e7b8:	68f0      	ldr	r0, [r6, #12]
   1e7ba:	2101      	movs	r1, #1
   1e7bc:	f7ff ffaa 	bl	1e714 <set_wake.isra.0>
	cmd = CCS811_REG_HW_VERSION;
   1e7c0:	2321      	movs	r3, #33	; 0x21
   1e7c2:	f88d 3007 	strb.w	r3, [sp, #7]
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1e7c6:	6830      	ldr	r0, [r6, #0]
   1e7c8:	2301      	movs	r3, #1
   1e7ca:	1d2a      	adds	r2, r5, #4
   1e7cc:	f10d 0107 	add.w	r1, sp, #7
   1e7d0:	f7ff ff34 	bl	1e63c <i2c_write_read.constprop.0>
	if (rc == 0) {
   1e7d4:	4604      	mov	r4, r0
   1e7d6:	b9e0      	cbnz	r0, 1e812 <ccs811_configver_fetch+0x64>
		cmd = CCS811_REG_FW_BOOT_VERSION;
   1e7d8:	2323      	movs	r3, #35	; 0x23
   1e7da:	f88d 3007 	strb.w	r3, [sp, #7]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1e7de:	6830      	ldr	r0, [r6, #0]
   1e7e0:	2302      	movs	r3, #2
   1e7e2:	462a      	mov	r2, r5
   1e7e4:	f10d 0107 	add.w	r1, sp, #7
   1e7e8:	f7ff ff28 	bl	1e63c <i2c_write_read.constprop.0>
		ptr->fw_boot_version = sys_be16_to_cpu(ptr->fw_boot_version);
   1e7ec:	882b      	ldrh	r3, [r5, #0]
   1e7ee:	ba5b      	rev16	r3, r3
   1e7f0:	802b      	strh	r3, [r5, #0]
	if (rc == 0) {
   1e7f2:	4604      	mov	r4, r0
   1e7f4:	b968      	cbnz	r0, 1e812 <ccs811_configver_fetch+0x64>
		cmd = CCS811_REG_FW_APP_VERSION;
   1e7f6:	2324      	movs	r3, #36	; 0x24
   1e7f8:	f88d 3007 	strb.w	r3, [sp, #7]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1e7fc:	2302      	movs	r3, #2
   1e7fe:	18ea      	adds	r2, r5, r3
   1e800:	6830      	ldr	r0, [r6, #0]
   1e802:	f10d 0107 	add.w	r1, sp, #7
   1e806:	f7ff ff19 	bl	1e63c <i2c_write_read.constprop.0>
		ptr->fw_app_version = sys_be16_to_cpu(ptr->fw_app_version);
   1e80a:	886b      	ldrh	r3, [r5, #2]
   1e80c:	ba5b      	rev16	r3, r3
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1e80e:	4604      	mov	r4, r0
		ptr->fw_app_version = sys_be16_to_cpu(ptr->fw_app_version);
   1e810:	806b      	strh	r3, [r5, #2]
	set_wake(drv_data, false);
   1e812:	68f0      	ldr	r0, [r6, #12]
   1e814:	2100      	movs	r1, #0
   1e816:	f7ff ff7d 	bl	1e714 <set_wake.isra.0>
	ptr->mode = drv_data->mode & CCS811_MODE_MSK;
   1e81a:	7e33      	ldrb	r3, [r6, #24]
   1e81c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   1e820:	716b      	strb	r3, [r5, #5]
}
   1e822:	4620      	mov	r0, r4
   1e824:	b002      	add	sp, #8
   1e826:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e828:	f06f 0415 	mvn.w	r4, #21
   1e82c:	e7f9      	b.n	1e822 <ccs811_configver_fetch+0x74>

0001e82e <hts221_sample_fetch>:
{
   1e82e:	b513      	push	{r0, r1, r4, lr}
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1e830:	2304      	movs	r3, #4
	struct hts221_data *data = dev->data;
   1e832:	6904      	ldr	r4, [r0, #16]
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1e834:	6840      	ldr	r0, [r0, #4]
   1e836:	eb0d 0203 	add.w	r2, sp, r3
   1e83a:	21a8      	movs	r1, #168	; 0xa8
   1e83c:	f7fc ffad 	bl	1b79a <hts221_read_reg>
	if (status < 0) {
   1e840:	2800      	cmp	r0, #0
   1e842:	db06      	blt.n	1e852 <hts221_sample_fetch+0x24>
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
   1e844:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e848:	8023      	strh	r3, [r4, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
   1e84a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e84e:	8063      	strh	r3, [r4, #2]
	return 0;
   1e850:	2000      	movs	r0, #0
}
   1e852:	b002      	add	sp, #8
   1e854:	bd10      	pop	{r4, pc}

0001e856 <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
   1e856:	b538      	push	{r3, r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
   1e858:	6904      	ldr	r4, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   1e85a:	6863      	ldr	r3, [r4, #4]
   1e85c:	f104 0208 	add.w	r2, r4, #8
   1e860:	681d      	ldr	r5, [r3, #0]
   1e862:	2127      	movs	r1, #39	; 0x27
   1e864:	2307      	movs	r3, #7
   1e866:	47a8      	blx	r5
	if (status < 0) {
   1e868:	2800      	cmp	r0, #0
   1e86a:	db04      	blt.n	1e876 <lis2dh_fetch_xyz.constprop.0+0x20>
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
   1e86c:	7a23      	ldrb	r3, [r4, #8]
		status = 0;
   1e86e:	f013 0f0f 	tst.w	r3, #15
   1e872:	bf18      	it	ne
   1e874:	2000      	movne	r0, #0
}
   1e876:	bd38      	pop	{r3, r4, r5, pc}

0001e878 <lis2dh_sample_fetch>:
	if (chan == SENSOR_CHAN_ALL) {
   1e878:	2939      	cmp	r1, #57	; 0x39
   1e87a:	d101      	bne.n	1e880 <lis2dh_sample_fetch+0x8>
		status = lis2dh_fetch_xyz(dev, chan);
   1e87c:	f7ff bfeb 	b.w	1e856 <lis2dh_fetch_xyz.constprop.0>
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
   1e880:	2903      	cmp	r1, #3
   1e882:	d0fb      	beq.n	1e87c <lis2dh_sample_fetch+0x4>
		status = lis2dh_sample_fetch_temp(dev);
   1e884:	290c      	cmp	r1, #12
}
   1e886:	bf14      	ite	ne
   1e888:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
   1e88c:	f06f 0085 	mvneq.w	r0, #133	; 0x85
   1e890:	4770      	bx	lr

0001e892 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
   1e892:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1e894:	6884      	ldr	r4, [r0, #8]
   1e896:	68a4      	ldr	r4, [r4, #8]
   1e898:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
   1e89a:	bc10      	pop	{r4}
   1e89c:	4760      	bx	ip

0001e89e <lis2dh_i2c_write_data>:
{
   1e89e:	b530      	push	{r4, r5, lr}
   1e8a0:	461d      	mov	r5, r3
   1e8a2:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
   1e8a4:	6903      	ldr	r3, [r0, #16]
{
   1e8a6:	4604      	mov	r4, r0
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
   1e8a8:	f061 017f 	orn	r1, r1, #127	; 0x7f
   1e8ac:	6818      	ldr	r0, [r3, #0]
   1e8ae:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   1e8b2:	f10d 0107 	add.w	r1, sp, #7
   1e8b6:	6863      	ldr	r3, [r4, #4]
   1e8b8:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   1e8ba:	2101      	movs	r1, #1
   1e8bc:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1e8be:	2100      	movs	r1, #0
   1e8c0:	891b      	ldrh	r3, [r3, #8]
   1e8c2:	f88d 1010 	strb.w	r1, [sp, #16]
   1e8c6:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
   1e8ca:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1e8cc:	2202      	movs	r2, #2
   1e8ce:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
   1e8d2:	f7ff ffde 	bl	1e892 <i2c_transfer>
}
   1e8d6:	b009      	add	sp, #36	; 0x24
   1e8d8:	bd30      	pop	{r4, r5, pc}

0001e8da <lis2dh_i2c_read_data>:
{
   1e8da:	b530      	push	{r4, r5, lr}
   1e8dc:	4604      	mov	r4, r0
   1e8de:	b089      	sub	sp, #36	; 0x24
   1e8e0:	461d      	mov	r5, r3
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
   1e8e2:	6903      	ldr	r3, [r0, #16]
   1e8e4:	f061 017f 	orn	r1, r1, #127	; 0x7f
   1e8e8:	6818      	ldr	r0, [r3, #0]
   1e8ea:	6863      	ldr	r3, [r4, #4]
   1e8ec:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1e8f0:	f10d 0107 	add.w	r1, sp, #7
   1e8f4:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1e8f6:	2101      	movs	r1, #1
   1e8f8:	891b      	ldrh	r3, [r3, #8]
   1e8fa:	9103      	str	r1, [sp, #12]
   1e8fc:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   1e900:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e902:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1e904:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e908:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   1e90c:	a902      	add	r1, sp, #8
   1e90e:	2202      	movs	r2, #2
   1e910:	f7ff ffbf 	bl	1e892 <i2c_transfer>
}
   1e914:	b009      	add	sp, #36	; 0x24
   1e916:	bd30      	pop	{r4, r5, pc}

0001e918 <lis2dh_i2c_write_reg>:
{
   1e918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e91a:	4603      	mov	r3, r0
	return i2c_reg_write_byte(data->bus,
   1e91c:	6900      	ldr	r0, [r0, #16]
   1e91e:	685b      	ldr	r3, [r3, #4]
   1e920:	6800      	ldr	r0, [r0, #0]
	uint8_t tx_buf[2] = {reg_addr, value};
   1e922:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   1e926:	2202      	movs	r2, #2
   1e928:	891b      	ldrh	r3, [r3, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1e92a:	f88d 1000 	strb.w	r1, [sp]
	msg.len = num_bytes;
   1e92e:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1e930:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
   1e934:	a901      	add	r1, sp, #4
   1e936:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
   1e938:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
   1e93c:	f7ff ffa9 	bl	1e892 <i2c_transfer>
}
   1e940:	b005      	add	sp, #20
   1e942:	f85d fb04 	ldr.w	pc, [sp], #4

0001e946 <lis2dh_i2c_read_reg>:
{
   1e946:	b510      	push	{r4, lr}
   1e948:	4603      	mov	r3, r0
   1e94a:	b088      	sub	sp, #32
	return i2c_reg_read_byte(data->bus,
   1e94c:	6900      	ldr	r0, [r0, #16]
   1e94e:	685b      	ldr	r3, [r3, #4]
   1e950:	6800      	ldr	r0, [r0, #0]
   1e952:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1e956:	f10d 0107 	add.w	r1, sp, #7
   1e95a:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1e95c:	2101      	movs	r1, #1
   1e95e:	891b      	ldrh	r3, [r3, #8]
   1e960:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
   1e962:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e966:	2207      	movs	r2, #7
   1e968:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   1e96c:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
   1e96e:	2202      	movs	r2, #2
   1e970:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
   1e972:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
   1e976:	f7ff ff8c 	bl	1e892 <i2c_transfer>
}
   1e97a:	b008      	add	sp, #32
   1e97c:	bd10      	pop	{r4, pc}

0001e97e <lis2dh_i2c_update_reg>:
{
   1e97e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e982:	4698      	mov	r8, r3
	return i2c_reg_update_byte(data->bus,
   1e984:	6903      	ldr	r3, [r0, #16]
   1e986:	f8d3 9000 	ldr.w	r9, [r3]
				   cfg->bus_cfg.i2c_slv_addr,
   1e98a:	6843      	ldr	r3, [r0, #4]
{
   1e98c:	b088      	sub	sp, #32
   1e98e:	f893 a008 	ldrb.w	sl, [r3, #8]
   1e992:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1e996:	2300      	movs	r3, #0
	msg[0].len = num_write;
   1e998:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
   1e99a:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1e99e:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   1e9a2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e9a6:	2307      	movs	r3, #7
   1e9a8:	460e      	mov	r6, r1
   1e9aa:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
   1e9ac:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e9ae:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   1e9b2:	2202      	movs	r2, #2
   1e9b4:	4653      	mov	r3, sl
   1e9b6:	a902      	add	r1, sp, #8
   1e9b8:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
   1e9ba:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   1e9bc:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
   1e9be:	f7ff ff68 	bl	1e892 <i2c_transfer>
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
	if (rc != 0) {
   1e9c2:	b9b8      	cbnz	r0, 1e9f4 <lis2dh_i2c_update_reg+0x76>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
   1e9c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1e9c8:	ea23 0104 	bic.w	r1, r3, r4
   1e9cc:	ea04 0408 	and.w	r4, r4, r8
   1e9d0:	430c      	orrs	r4, r1
	if (new_value == old_value) {
   1e9d2:	42a3      	cmp	r3, r4
   1e9d4:	d00e      	beq.n	1e9f4 <lis2dh_i2c_update_reg+0x76>
	msg.len = num_bytes;
   1e9d6:	2302      	movs	r3, #2
   1e9d8:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1e9da:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
   1e9de:	463a      	mov	r2, r7
   1e9e0:	4653      	mov	r3, sl
   1e9e2:	a902      	add	r1, sp, #8
   1e9e4:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
   1e9e6:	f88d 6004 	strb.w	r6, [sp, #4]
   1e9ea:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1e9ee:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
   1e9f0:	f7ff ff4f 	bl	1e892 <i2c_transfer>
}
   1e9f4:	b008      	add	sp, #32
   1e9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e9fa <z_impl_i2c_transfer>:
{
   1e9fa:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1e9fc:	6884      	ldr	r4, [r0, #8]
   1e9fe:	68a4      	ldr	r4, [r4, #8]
   1ea00:	46a4      	mov	ip, r4
}
   1ea02:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1ea04:	4760      	bx	ip

0001ea06 <lps22hb_sample_fetch>:
{
   1ea06:	b530      	push	{r4, r5, lr}
   1ea08:	4603      	mov	r3, r0
   1ea0a:	b08b      	sub	sp, #44	; 0x2c
	struct lps22hb_data *data = dev->data;
   1ea0c:	6905      	ldr	r5, [r0, #16]
	if (i2c_burst_read(data->i2c_master, config->i2c_slave_addr,
   1ea0e:	685b      	ldr	r3, [r3, #4]
   1ea10:	6828      	ldr	r0, [r5, #0]
   1ea12:	889b      	ldrh	r3, [r3, #4]
static inline int i2c_burst_read(const struct device *dev,
   1ea14:	2228      	movs	r2, #40	; 0x28
   1ea16:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1ea1a:	f10d 0207 	add.w	r2, sp, #7
   1ea1e:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
   1ea20:	2201      	movs	r2, #1
   1ea22:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
   1ea24:	aa02      	add	r2, sp, #8
   1ea26:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
   1ea28:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
   1ea2a:	2400      	movs	r4, #0
	msg[1].len = num_read;
   1ea2c:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1ea2e:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1ea30:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1ea34:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
   1ea38:	2202      	movs	r2, #2
   1ea3a:	a904      	add	r1, sp, #16
   1ea3c:	f7ff ffdd 	bl	1e9fa <z_impl_i2c_transfer>
   1ea40:	42a0      	cmp	r0, r4
   1ea42:	db10      	blt.n	1ea66 <lps22hb_sample_fetch+0x60>
				     ((uint32_t)(out[2]) << 16));
   1ea44:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
   1ea48:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
   1ea4c:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
   1ea4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   1ea52:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
   1ea56:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   1ea58:	606b      	str	r3, [r5, #4]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
   1ea5a:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   1ea5e:	812b      	strh	r3, [r5, #8]
	return 0;
   1ea60:	4620      	mov	r0, r4
}
   1ea62:	b00b      	add	sp, #44	; 0x2c
   1ea64:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   1ea66:	f06f 0004 	mvn.w	r0, #4
   1ea6a:	e7fa      	b.n	1ea62 <lps22hb_sample_fetch+0x5c>

0001ea6c <i2c_reg_update_byte.constprop.0>:
static inline int i2c_reg_update_byte(const struct device *dev,
   1ea6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ea70:	b088      	sub	sp, #32
   1ea72:	4698      	mov	r8, r3
	msg[0].flags = I2C_MSG_WRITE;
   1ea74:	2300      	movs	r3, #0
	msg[0].len = num_write;
   1ea76:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
   1ea78:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1ea7c:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   1ea80:	e9cd 3705 	strd	r3, r7, [sp, #20]
   1ea84:	f04f 0910 	mov.w	r9, #16
	msg[0].buf = (uint8_t *)write_buf;
   1ea88:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1ea8a:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
   1ea8c:	4606      	mov	r6, r0
   1ea8e:	4614      	mov	r4, r2
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   1ea90:	468a      	mov	sl, r1
   1ea92:	f88d 9004 	strb.w	r9, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   1ea96:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   1ea98:	9703      	str	r7, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1ea9a:	f88d 301c 	strb.w	r3, [sp, #28]
   1ea9e:	2202      	movs	r2, #2
   1eaa0:	460b      	mov	r3, r1
   1eaa2:	a902      	add	r1, sp, #8
   1eaa4:	f7ff ffa9 	bl	1e9fa <z_impl_i2c_transfer>
	if (rc != 0) {
   1eaa8:	b9b8      	cbnz	r0, 1eada <i2c_reg_update_byte.constprop.0+0x6e>
	new_value = (old_value & ~mask) | (value & mask);
   1eaaa:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1eaae:	ea23 0104 	bic.w	r1, r3, r4
   1eab2:	ea04 0408 	and.w	r4, r4, r8
   1eab6:	430c      	orrs	r4, r1
	if (new_value == old_value) {
   1eab8:	42a3      	cmp	r3, r4
   1eaba:	d00e      	beq.n	1eada <i2c_reg_update_byte.constprop.0+0x6e>
	msg.len = num_bytes;
   1eabc:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   1eabe:	f88d 9004 	strb.w	r9, [sp, #4]
   1eac2:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1eac6:	9502      	str	r5, [sp, #8]
	msg.len = num_bytes;
   1eac8:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1eaca:	f88d 3010 	strb.w	r3, [sp, #16]
   1eace:	4653      	mov	r3, sl
   1ead0:	463a      	mov	r2, r7
   1ead2:	a902      	add	r1, sp, #8
   1ead4:	4630      	mov	r0, r6
   1ead6:	f7ff ff90 	bl	1e9fa <z_impl_i2c_transfer>
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
}
   1eada:	b008      	add	sp, #32
   1eadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001eae0 <lps22hb_init>:
err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
{
   1eae0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct lps22hb_config * const config = dev->config;
	struct lps22hb_data *data = dev->data;

	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
   1eae2:	6843      	ldr	r3, [r0, #4]
	struct lps22hb_data *data = dev->data;
   1eae4:	6905      	ldr	r5, [r0, #16]
{
   1eae6:	4604      	mov	r4, r0
   1eae8:	b089      	sub	sp, #36	; 0x24
	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
   1eaea:	6818      	ldr	r0, [r3, #0]
   1eaec:	f7fb f8dc 	bl	19ca8 <z_impl_device_get_binding>
   1eaf0:	6028      	str	r0, [r5, #0]

	if (!data->i2c_master) {
   1eaf2:	2800      	cmp	r0, #0
   1eaf4:	d037      	beq.n	1eb66 <lps22hb_init+0x86>
	struct lps22hb_data *data = dev->data;
   1eaf6:	6926      	ldr	r6, [r4, #16]
	const struct lps22hb_config *config = dev->config;
   1eaf8:	6867      	ldr	r7, [r4, #4]
	if (i2c_reg_read_byte(data->i2c_master, config->i2c_slave_addr,
   1eafa:	6830      	ldr	r0, [r6, #0]
   1eafc:	88bb      	ldrh	r3, [r7, #4]
   1eafe:	220f      	movs	r2, #15
   1eb00:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1eb04:	f10d 0207 	add.w	r2, sp, #7
   1eb08:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1eb0a:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
   1eb0e:	2201      	movs	r2, #1
	msg[1].len = num_read;
   1eb10:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].len = num_write;
   1eb14:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1eb16:	2500      	movs	r5, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1eb18:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1eb1a:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1eb1e:	f88d 201c 	strb.w	r2, [sp, #28]
   1eb22:	2202      	movs	r2, #2
   1eb24:	a902      	add	r1, sp, #8
   1eb26:	f7ff ff68 	bl	1e9fa <z_impl_i2c_transfer>
   1eb2a:	42a8      	cmp	r0, r5
   1eb2c:	da03      	bge.n	1eb36 <lps22hb_init+0x56>
		return -EINVAL;
	}

	if (lps22hb_init_chip(dev) < 0) {
		LOG_DBG("Failed to initialize chip");
		return -EIO;
   1eb2e:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   1eb32:	b009      	add	sp, #36	; 0x24
   1eb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
   1eb36:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1eb3a:	2bb1      	cmp	r3, #177	; 0xb1
   1eb3c:	d1f7      	bne.n	1eb2e <lps22hb_init+0x4e>
	return i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
   1eb3e:	6861      	ldr	r1, [r4, #4]
   1eb40:	6920      	ldr	r0, [r4, #16]
   1eb42:	7909      	ldrb	r1, [r1, #4]
   1eb44:	6800      	ldr	r0, [r0, #0]
   1eb46:	2330      	movs	r3, #48	; 0x30
   1eb48:	2270      	movs	r2, #112	; 0x70
   1eb4a:	f7ff ff8f 	bl	1ea6c <i2c_reg_update_byte.constprop.0>
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
   1eb4e:	2800      	cmp	r0, #0
   1eb50:	dbed      	blt.n	1eb2e <lps22hb_init+0x4e>
	if (i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
   1eb52:	2302      	movs	r3, #2
   1eb54:	7939      	ldrb	r1, [r7, #4]
   1eb56:	6830      	ldr	r0, [r6, #0]
   1eb58:	461a      	mov	r2, r3
   1eb5a:	f7ff ff87 	bl	1ea6c <i2c_reg_update_byte.constprop.0>
   1eb5e:	2800      	cmp	r0, #0
   1eb60:	dbe5      	blt.n	1eb2e <lps22hb_init+0x4e>
	return 0;
   1eb62:	4628      	mov	r0, r5
   1eb64:	e7e5      	b.n	1eb32 <lps22hb_init+0x52>
		return -EINVAL;
   1eb66:	f06f 0015 	mvn.w	r0, #21
   1eb6a:	e7e2      	b.n	1eb32 <lps22hb_init+0x52>

0001eb6c <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   1eb6c:	b530      	push	{r4, r5, lr}
   1eb6e:	b089      	sub	sp, #36	; 0x24
   1eb70:	4604      	mov	r4, r0
   1eb72:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1eb76:	f10d 0107 	add.w	r1, sp, #7
   1eb7a:	461d      	mov	r5, r3
   1eb7c:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1eb7e:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   1eb80:	e9cd 2505 	strd	r2, r5, [sp, #20]
   1eb84:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1eb86:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1eb88:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
   1eb8a:	6800      	ldr	r0, [r0, #0]
   1eb8c:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1eb8e:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1eb92:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1eb96:	6882      	ldr	r2, [r0, #8]
   1eb98:	a902      	add	r1, sp, #8
   1eb9a:	6894      	ldr	r4, [r2, #8]
   1eb9c:	2202      	movs	r2, #2
   1eb9e:	47a0      	blx	r4
}
   1eba0:	b009      	add	sp, #36	; 0x24
   1eba2:	bd30      	pop	{r4, r5, pc}

0001eba4 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   1eba4:	b530      	push	{r4, r5, lr}
   1eba6:	b089      	sub	sp, #36	; 0x24
   1eba8:	4604      	mov	r4, r0
   1ebaa:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   1ebae:	f10d 0107 	add.w	r1, sp, #7
   1ebb2:	461d      	mov	r5, r3
   1ebb4:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   1ebb6:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   1ebb8:	e9cd 2505 	strd	r2, r5, [sp, #20]
   1ebbc:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1ebbe:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   1ebc0:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   1ebc2:	6800      	ldr	r0, [r0, #0]
   1ebc4:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1ebc6:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1ebca:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1ebce:	6881      	ldr	r1, [r0, #8]
   1ebd0:	688c      	ldr	r4, [r1, #8]
   1ebd2:	a902      	add	r1, sp, #8
   1ebd4:	47a0      	blx	r4
}
   1ebd6:	b009      	add	sp, #36	; 0x24
   1ebd8:	bd30      	pop	{r4, r5, pc}

0001ebda <gpio_pin_set_dt>:
{
   1ebda:	4603      	mov	r3, r0
   1ebdc:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   1ebde:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1ebe0:	7919      	ldrb	r1, [r3, #4]
   1ebe2:	2301      	movs	r3, #1
   1ebe4:	fa03 f101 	lsl.w	r1, r3, r1
   1ebe8:	6903      	ldr	r3, [r0, #16]
   1ebea:	681b      	ldr	r3, [r3, #0]
   1ebec:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1ebee:	bf18      	it	ne
   1ebf0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1ebf4:	b112      	cbz	r2, 1ebfc <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   1ebf6:	6883      	ldr	r3, [r0, #8]
   1ebf8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1ebfa:	4718      	bx	r3
   1ebfc:	6883      	ldr	r3, [r0, #8]
   1ebfe:	691b      	ldr	r3, [r3, #16]
   1ec00:	e7fb      	b.n	1ebfa <gpio_pin_set_dt+0x20>

0001ec02 <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
   1ec02:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
   1ec04:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1ec06:	6845      	ldr	r5, [r0, #4]
{
   1ec08:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
   1ec0a:	a903      	add	r1, sp, #12
   1ec0c:	4620      	mov	r0, r4
   1ec0e:	f7fc fb3c 	bl	1b28a <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1ec12:	7d29      	ldrb	r1, [r5, #20]
   1ec14:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
   1ec18:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1ec1a:	d114      	bne.n	1ec46 <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
   1ec1c:	2801      	cmp	r0, #1
   1ec1e:	d10c      	bne.n	1ec3a <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1ec20:	f105 000c 	add.w	r0, r5, #12
   1ec24:	f7ff ffd9 	bl	1ebda <gpio_pin_set_dt>
   1ec28:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   1ec2a:	2200      	movs	r2, #0
   1ec2c:	9903      	ldr	r1, [sp, #12]
   1ec2e:	9200      	str	r2, [sp, #0]
   1ec30:	4620      	mov	r0, r4
   1ec32:	f7fc fb35 	bl	1b2a0 <onoff_sync_finalize>
}
   1ec36:	b005      	add	sp, #20
   1ec38:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
   1ec3a:	2800      	cmp	r0, #0
   1ec3c:	bf14      	ite	ne
   1ec3e:	4603      	movne	r3, r0
   1ec40:	f06f 0315 	mvneq.w	r3, #21
   1ec44:	e7f1      	b.n	1ec2a <disable_sync+0x28>
		rc = 0;
   1ec46:	2300      	movs	r3, #0
   1ec48:	e7ef      	b.n	1ec2a <disable_sync+0x28>

0001ec4a <enable_sync>:
{
   1ec4a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   1ec4c:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1ec4e:	6846      	ldr	r6, [r0, #4]
{
   1ec50:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
   1ec52:	4628      	mov	r0, r5
   1ec54:	a903      	add	r1, sp, #12
   1ec56:	f7fc fb18 	bl	1b28a <onoff_sync_lock>
	if ((rc == 0)
   1ec5a:	4603      	mov	r3, r0
   1ec5c:	b940      	cbnz	r0, 1ec70 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   1ec5e:	7d32      	ldrb	r2, [r6, #20]
   1ec60:	07d2      	lsls	r2, r2, #31
   1ec62:	d405      	bmi.n	1ec70 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1ec64:	2101      	movs	r1, #1
   1ec66:	f106 000c 	add.w	r0, r6, #12
   1ec6a:	f7ff ffb6 	bl	1ebda <gpio_pin_set_dt>
   1ec6e:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   1ec70:	2201      	movs	r2, #1
   1ec72:	9200      	str	r2, [sp, #0]
   1ec74:	9903      	ldr	r1, [sp, #12]
   1ec76:	4622      	mov	r2, r4
   1ec78:	4628      	mov	r0, r5
   1ec7a:	f7fc fb11 	bl	1b2a0 <onoff_sync_finalize>
}
   1ec7e:	b004      	add	sp, #16
   1ec80:	bd70      	pop	{r4, r5, r6, pc}

0001ec82 <disable_onoff>:
	return onoff_release(&data->mgr);
   1ec82:	6900      	ldr	r0, [r0, #16]
   1ec84:	3004      	adds	r0, #4
   1ec86:	f7fc badb 	b.w	1b240 <onoff_release>

0001ec8a <enable_onoff>:
	return onoff_request(&data->mgr, cli);
   1ec8a:	6900      	ldr	r0, [r0, #16]
   1ec8c:	3004      	adds	r0, #4
   1ec8e:	f7fc ba8e 	b.w	1b1ae <onoff_request>

0001ec92 <common_init.isra.0>:
static int common_init(const struct device *dev)
   1ec92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec94:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->enable.port)) {
   1ec96:	68c0      	ldr	r0, [r0, #12]
   1ec98:	f000 fa09 	bl	1f0ae <z_device_is_ready>
   1ec9c:	b340      	cbz	r0, 1ecf0 <common_init.isra.0+0x5e>
	if (on) {
   1ec9e:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
   1eca0:	7c6b      	ldrb	r3, [r5, #17]
	return gpio_pin_configure(spec->port,
   1eca2:	68e8      	ldr	r0, [r5, #12]
   1eca4:	7c29      	ldrb	r1, [r5, #16]
   1eca6:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
   1ecaa:	bf16      	itet	ne
   1ecac:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		flags = GPIO_OUTPUT_INACTIVE;
   1ecb0:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
   1ecb4:	686c      	ldrne	r4, [r5, #4]
   1ecb6:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   1ecb8:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
   1ecba:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ecbe:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1ecc0:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1ecc2:	bf48      	it	mi
   1ecc4:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ecc8:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1ecca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ecce:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1ecd0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ecd2:	bf4c      	ite	mi
   1ecd4:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ecd6:	43b5      	bicpl	r5, r6
   1ecd8:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1ecda:	f8dc 3000 	ldr.w	r3, [ip]
   1ecde:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
   1ece0:	4605      	mov	r5, r0
   1ece2:	b918      	cbnz	r0, 1ecec <common_init.isra.0+0x5a>
   1ece4:	b114      	cbz	r4, 1ecec <common_init.isra.0+0x5a>
   1ece6:	4620      	mov	r0, r4
   1ece8:	f000 fd9b 	bl	1f822 <z_impl_k_busy_wait>
}
   1ecec:	4628      	mov	r0, r5
   1ecee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   1ecf0:	f06f 0512 	mvn.w	r5, #18
   1ecf4:	e7fa      	b.n	1ecec <common_init.isra.0+0x5a>

0001ecf6 <regulator_fixed_init_sync>:
};

static int regulator_fixed_init_sync(const struct device *dev)
{
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
   1ecf6:	6840      	ldr	r0, [r0, #4]
   1ecf8:	f7ff bfcb 	b.w	1ec92 <common_init.isra.0>

0001ecfc <onoff_worker>:
{
   1ecfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
   1ed00:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
   1ed04:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
   1ed08:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
   1ed0a:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
   1ed0c:	2901      	cmp	r1, #1
{
   1ed0e:	4604      	mov	r4, r0
	struct driver_data_onoff *data
   1ed10:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
   1ed14:	d10f      	bne.n	1ed36 <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1ed16:	f105 000c 	add.w	r0, r5, #12
   1ed1a:	f7ff ff5e 	bl	1ebda <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
   1ed1e:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1ed20:	4603      	mov	r3, r0
	data->notify = NULL;
   1ed22:	2100      	movs	r1, #0
   1ed24:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
   1ed26:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
   1ed2a:	4630      	mov	r0, r6
   1ed2c:	4639      	mov	r1, r7
}
   1ed2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1ed32:	f7f8 bfc7 	b.w	17cc4 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
   1ed36:	2902      	cmp	r1, #2
   1ed38:	d107      	bne.n	1ed4a <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1ed3a:	2100      	movs	r1, #0
   1ed3c:	f105 000c 	add.w	r0, r5, #12
   1ed40:	f7ff ff4b 	bl	1ebda <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
   1ed44:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1ed46:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
   1ed48:	e7eb      	b.n	1ed22 <onoff_worker+0x26>
	int rc = 0;
   1ed4a:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
   1ed4c:	461a      	mov	r2, r3
   1ed4e:	e7e8      	b.n	1ed22 <onoff_worker+0x26>

0001ed50 <stop>:
{
   1ed50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1ed54:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1ed58:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1ed5a:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1ed5c:	6858      	ldr	r0, [r3, #4]
{
   1ed5e:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1ed60:	7d01      	ldrb	r1, [r0, #20]
   1ed62:	f011 0101 	ands.w	r1, r1, #1
   1ed66:	d113      	bne.n	1ed90 <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
   1ed68:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1ed6a:	300c      	adds	r0, #12
   1ed6c:	f7ff ff35 	bl	1ebda <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1ed70:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1ed74:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1ed76:	d10d      	bne.n	1ed94 <stop+0x44>
		data->task = WORK_TASK_DISABLE;
   1ed78:	2302      	movs	r3, #2
   1ed7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1ed7e:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1ed80:	f104 001c 	add.w	r0, r4, #28
   1ed84:	2200      	movs	r2, #0
}
   1ed86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1ed8a:	2300      	movs	r3, #0
   1ed8c:	f7fb bbba 	b.w	1a504 <k_work_schedule>
	int rc = 0;
   1ed90:	2300      	movs	r3, #0
		delay_us = 0;
   1ed92:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
   1ed94:	463a      	mov	r2, r7
   1ed96:	4629      	mov	r1, r5
   1ed98:	4630      	mov	r0, r6
}
   1ed9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1ed9e:	f7f8 bf91 	b.w	17cc4 <finalize_transition>

0001eda2 <start>:
{
   1eda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1eda6:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1edaa:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1edac:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1edae:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1edb0:	7d03      	ldrb	r3, [r0, #20]
   1edb2:	07db      	lsls	r3, r3, #31
{
   1edb4:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1edb6:	d414      	bmi.n	1ede2 <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
   1edb8:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1edba:	2101      	movs	r1, #1
   1edbc:	300c      	adds	r0, #12
   1edbe:	f7ff ff0c 	bl	1ebda <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1edc2:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1edc6:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1edc8:	d10d      	bne.n	1ede6 <start+0x44>
		data->task = WORK_TASK_ENABLE;
   1edca:	2301      	movs	r3, #1
   1edcc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1edd0:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1edd2:	f104 001c 	add.w	r0, r4, #28
   1edd6:	2200      	movs	r2, #0
}
   1edd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1eddc:	2300      	movs	r3, #0
   1edde:	f7fb bb91 	b.w	1a504 <k_work_schedule>
	int rc = 0;
   1ede2:	2300      	movs	r3, #0
		delay_us = 0;
   1ede4:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
   1ede6:	4632      	mov	r2, r6
   1ede8:	4629      	mov	r1, r5
   1edea:	4638      	mov	r0, r7
}
   1edec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1edf0:	f7f8 bf68 	b.w	17cc4 <finalize_transition>

0001edf4 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   1edf4:	6902      	ldr	r2, [r0, #16]
{
   1edf6:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   1edf8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1edfc:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1ee00:	2000      	movs	r0, #0
   1ee02:	4770      	bx	lr

0001ee04 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1ee04:	6843      	ldr	r3, [r0, #4]
   1ee06:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1ee08:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1ee0c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1ee10:	4770      	bx	lr

0001ee12 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1ee12:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1ee14:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1ee16:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ee18:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ee1c:	b148      	cbz	r0, 1ee32 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1ee1e:	7c52      	ldrb	r2, [r2, #17]
   1ee20:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ee22:	2000      	movs	r0, #0
   1ee24:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1ee28:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ee2c:	2201      	movs	r2, #1
   1ee2e:	601a      	str	r2, [r3, #0]
	return 0;
   1ee30:	4770      	bx	lr
		return -1;
   1ee32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1ee36:	4770      	bx	lr

0001ee38 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1ee38:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1ee3a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ee3c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ee40:	b940      	cbnz	r0, 1ee54 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1ee42:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ee44:	079b      	lsls	r3, r3, #30
   1ee46:	d406      	bmi.n	1ee56 <is_tx_ready.isra.0+0x1e>
   1ee48:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1ee4c:	3800      	subs	r0, #0
   1ee4e:	bf18      	it	ne
   1ee50:	2001      	movne	r0, #1
   1ee52:	4770      	bx	lr
   1ee54:	2001      	movs	r0, #1
}
   1ee56:	4770      	bx	lr

0001ee58 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1ee58:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1ee5a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1ee5c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1ee60:	05c9      	lsls	r1, r1, #23
   1ee62:	d518      	bpl.n	1ee96 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ee64:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1ee68:	b1a9      	cbz	r1, 1ee96 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1ee6a:	f04f 0020 	mov.w	r0, #32
   1ee6e:	f3ef 8111 	mrs	r1, BASEPRI
   1ee72:	f380 8812 	msr	BASEPRI_MAX, r0
   1ee76:	f3bf 8f6f 	isb	sy
   1ee7a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1ee7e:	b130      	cbz	r0, 1ee8e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ee80:	2000      	movs	r0, #0
   1ee82:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1ee86:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ee8a:	2001      	movs	r0, #1
   1ee8c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1ee8e:	f381 8811 	msr	BASEPRI, r1
   1ee92:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ee96:	6852      	ldr	r2, [r2, #4]
   1ee98:	06d2      	lsls	r2, r2, #27
   1ee9a:	d515      	bpl.n	1eec8 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1ee9c:	f04f 0120 	mov.w	r1, #32
   1eea0:	f3ef 8211 	mrs	r2, BASEPRI
   1eea4:	f381 8812 	msr	BASEPRI_MAX, r1
   1eea8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1eeac:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1eeb0:	b111      	cbz	r1, 1eeb8 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1eeb2:	2100      	movs	r1, #0
   1eeb4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1eeb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1eebc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1eec0:	f382 8811 	msr	BASEPRI, r2
   1eec4:	f3bf 8f6f 	isb	sy
}
   1eec8:	4770      	bx	lr

0001eeca <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1eeca:	4770      	bx	lr

0001eecc <sys_clock_cycle_get_32>:
{
   1eecc:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1eece:	f7f9 fae9 	bl	184a4 <z_nrf_rtc_timer_read>
}
   1eed2:	bd08      	pop	{r3, pc}

0001eed4 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1eed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eed8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1eedc:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1eede:	bf04      	itt	eq
   1eee0:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   1eee4:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   1eee8:	1f83      	subs	r3, r0, #6
   1eeea:	4258      	negs	r0, r3
   1eeec:	4158      	adcs	r0, r3
   1eeee:	4770      	bx	lr

0001eef0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1eef0:	4700      	bx	r0

0001eef2 <nrfx_busy_wait>:
   1eef2:	f000 bc96 	b.w	1f822 <z_impl_k_busy_wait>

0001eef6 <nrfx_clock_enable>:
{
   1eef6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1eef8:	2000      	movs	r0, #0
   1eefa:	f7e7 f945 	bl	6188 <arch_irq_is_enabled>
   1eefe:	b918      	cbnz	r0, 1ef08 <nrfx_clock_enable+0x12>
}
   1ef00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1ef04:	f7e7 b91c 	b.w	6140 <arch_irq_enable>
   1ef08:	bd08      	pop	{r3, pc}

0001ef0a <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1ef0a:	f000 001f 	and.w	r0, r0, #31
   1ef0e:	0080      	lsls	r0, r0, #2
   1ef10:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ef14:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   1ef18:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ef1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1ef20:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1ef24:	4770      	bx	lr

0001ef26 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   1ef26:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1ef28:	2402      	movs	r4, #2
   1ef2a:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
   1ef2c:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   1ef2e:	6809      	ldr	r1, [r1, #0]
   1ef30:	b171      	cbz	r1, 1ef50 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   1ef32:	f012 0f04 	tst.w	r2, #4
   1ef36:	bf0c      	ite	eq
   1ef38:	2182      	moveq	r1, #130	; 0x82
   1ef3a:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   1ef3c:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   1ef3e:	bf48      	it	mi
   1ef40:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   1ef44:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   1ef46:	bf48      	it	mi
   1ef48:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   1ef4c:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   1ef50:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef52:	f04f 0100 	mov.w	r1, #0
   1ef56:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef5a:	bf58      	it	pl
   1ef5c:	2201      	movpl	r2, #1
   1ef5e:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
   1ef62:	bf56      	itet	pl
   1ef64:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   1ef66:	18c0      	addmi	r0, r0, r3
    return 0;
   1ef68:	4608      	movpl	r0, r1
}
   1ef6a:	bd10      	pop	{r4, pc}

0001ef6c <nrfx_pwm_stop>:
{
   1ef6c:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   1ef6e:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   1ef70:	2200      	movs	r2, #0
   1ef72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef76:	2201      	movs	r2, #1
   1ef78:	605a      	str	r2, [r3, #4]
{
   1ef7a:	4605      	mov	r5, r0
   1ef7c:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   1ef7e:	f7fa fab1 	bl	194e4 <nrfx_pwm_is_stopped>
   1ef82:	b938      	cbnz	r0, 1ef94 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
   1ef84:	4628      	mov	r0, r5
   1ef86:	f7fa faad 	bl	194e4 <nrfx_pwm_is_stopped>
   1ef8a:	b918      	cbnz	r0, 1ef94 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
   1ef8c:	2c00      	cmp	r4, #0
   1ef8e:	d1f9      	bne.n	1ef84 <nrfx_pwm_stop+0x18>
}
   1ef90:	4620      	mov	r0, r4
   1ef92:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   1ef94:	2401      	movs	r4, #1
   1ef96:	e7fb      	b.n	1ef90 <nrfx_pwm_stop+0x24>

0001ef98 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1ef98:	7b0a      	ldrb	r2, [r1, #12]
{
   1ef9a:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   1ef9c:	2a03      	cmp	r2, #3
   1ef9e:	d829      	bhi.n	1eff4 <xfer_completeness_check+0x5c>
   1efa0:	e8df f002 	tbb	[pc, r2]
   1efa4:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1efa8:	688a      	ldr	r2, [r1, #8]
   1efaa:	0350      	lsls	r0, r2, #13
   1efac:	d504      	bpl.n	1efb8 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1efae:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1efb2:	6908      	ldr	r0, [r1, #16]
   1efb4:	4290      	cmp	r0, r2
   1efb6:	d107      	bne.n	1efc8 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1efb8:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1efba:	0352      	lsls	r2, r2, #13
   1efbc:	d41a      	bmi.n	1eff4 <xfer_completeness_check+0x5c>
   1efbe:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1efc2:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1efc4:	4291      	cmp	r1, r2
   1efc6:	d015      	beq.n	1eff4 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1efc8:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1efca:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1efcc:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1efd0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1efd4:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1efd6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1efda:	6908      	ldr	r0, [r1, #16]
   1efdc:	4290      	cmp	r0, r2
   1efde:	d1f3      	bne.n	1efc8 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   1efe0:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1efe4:	e7ed      	b.n	1efc2 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1efe6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1efea:	6909      	ldr	r1, [r1, #16]
   1efec:	e7ea      	b.n	1efc4 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1efee:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1eff2:	e7fa      	b.n	1efea <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1eff4:	2001      	movs	r0, #1
}
   1eff6:	4770      	bx	lr

0001eff8 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1eff8:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1effa:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1effc:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1effe:	bf9c      	itt	ls
   1f000:	6880      	ldrls	r0, [r0, #8]
   1f002:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1f004:	3b01      	subs	r3, #1
   1f006:	1a98      	subs	r0, r3, r2
}
   1f008:	4770      	bx	lr

0001f00a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f00a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1f00e:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f012:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1f014:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f018:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1f01a:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f01c:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1f01e:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1f020:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1f022:	d906      	bls.n	1f032 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1f024:	f7fc fe81 	bl	1bd2a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1f028:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   1f02c:	60ec      	str	r4, [r5, #12]
}
   1f02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1f032:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1f034:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1f038:	f7fc fe77 	bl	1bd2a <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1f03c:	6868      	ldr	r0, [r5, #4]
   1f03e:	4622      	mov	r2, r4
   1f040:	eb07 0108 	add.w	r1, r7, r8
   1f044:	e7ee      	b.n	1f024 <_WriteNoCheck+0x1a>

0001f046 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1f046:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1f04a:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1f04c:	4606      	mov	r6, r0
   1f04e:	4689      	mov	r9, r1
   1f050:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1f052:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1f056:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1f058:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f05a:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1f05c:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1f05e:	bf28      	it	cs
   1f060:	18e4      	addcs	r4, r4, r3
   1f062:	3c01      	subs	r4, #1
   1f064:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1f066:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1f068:	42bc      	cmp	r4, r7
   1f06a:	bf28      	it	cs
   1f06c:	463c      	movcs	r4, r7
   1f06e:	4294      	cmp	r4, r2
   1f070:	bf28      	it	cs
   1f072:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1f074:	4649      	mov	r1, r9
   1f076:	4622      	mov	r2, r4
   1f078:	4428      	add	r0, r5
   1f07a:	f7fc fe56 	bl	1bd2a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1f07e:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1f080:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   1f082:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1f084:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   1f086:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   1f088:	42ab      	cmp	r3, r5
   1f08a:	bf08      	it	eq
   1f08c:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1f08e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   1f092:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1f094:	2f00      	cmp	r7, #0
   1f096:	d1de      	bne.n	1f056 <_WriteBlocking+0x10>
}
   1f098:	4640      	mov	r0, r8
   1f09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f09e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1f09e:	f7fa bd7d 	b.w	19b9c <_DoInit>

0001f0a2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1f0a2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1f0a4:	f7ff fffb 	bl	1f09e <SEGGER_RTT_Init>

	return 0;
}
   1f0a8:	2000      	movs	r0, #0
   1f0aa:	bd08      	pop	{r3, pc}

0001f0ac <z_device_state_init>:
}
   1f0ac:	4770      	bx	lr

0001f0ae <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1f0ae:	b138      	cbz	r0, 1f0c0 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1f0b0:	68c3      	ldr	r3, [r0, #12]
   1f0b2:	8818      	ldrh	r0, [r3, #0]
   1f0b4:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1f0b8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1f0bc:	4258      	negs	r0, r3
   1f0be:	4158      	adcs	r0, r3
}
   1f0c0:	4770      	bx	lr

0001f0c2 <arch_system_halt>:
	__asm__ volatile(
   1f0c2:	f04f 0220 	mov.w	r2, #32
   1f0c6:	f3ef 8311 	mrs	r3, BASEPRI
   1f0ca:	f382 8812 	msr	BASEPRI_MAX, r2
   1f0ce:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   1f0d2:	e7fe      	b.n	1f0d2 <arch_system_halt+0x10>

0001f0d4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1f0d4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   1f0d6:	f7ff fff4 	bl	1f0c2 <arch_system_halt>

0001f0da <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f0dc:	4605      	mov	r5, r0
   1f0de:	460e      	mov	r6, r1
   1f0e0:	f04f 0320 	mov.w	r3, #32
   1f0e4:	f3ef 8711 	mrs	r7, BASEPRI
   1f0e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0ec:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1f0f0:	f7fb fcea 	bl	1aac8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1f0f4:	4631      	mov	r1, r6
   1f0f6:	4604      	mov	r4, r0
   1f0f8:	4628      	mov	r0, r5
   1f0fa:	f7ff ffeb 	bl	1f0d4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f0fe:	f387 8811 	msr	BASEPRI, r7
   1f102:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f106:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1f108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1f10c:	f7e7 ba80 	b.w	6610 <z_impl_k_thread_abort>

0001f110 <k_heap_init>:
{
   1f110:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1f112:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1f116:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1f11a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1f11c:	f7fc ba78 	b.w	1b610 <sys_heap_init>

0001f120 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1f120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f124:	b085      	sub	sp, #20
   1f126:	4606      	mov	r6, r0
   1f128:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f12a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1f12e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f130:	f000 fb7b 	bl	1f82a <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f134:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f138:	4605      	mov	r5, r0
   1f13a:	460f      	mov	r7, r1
	__asm__ volatile(
   1f13c:	f04f 0320 	mov.w	r3, #32
   1f140:	f3ef 8411 	mrs	r4, BASEPRI
   1f144:	f383 8812 	msr	BASEPRI_MAX, r3
   1f148:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f14c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1f150:	464a      	mov	r2, r9
   1f152:	4641      	mov	r1, r8
   1f154:	4630      	mov	r0, r6
   1f156:	f7fc f9f3 	bl	1b540 <sys_heap_aligned_alloc>
   1f15a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1f15c:	f7fb fe68 	bl	1ae30 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1f160:	9b03      	ldr	r3, [sp, #12]
   1f162:	b13b      	cbz	r3, 1f174 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1f164:	f384 8811 	msr	BASEPRI, r4
   1f168:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1f16c:	4618      	mov	r0, r3
   1f16e:	b005      	add	sp, #20
   1f170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1f174:	1a28      	subs	r0, r5, r0
   1f176:	eb67 0101 	sbc.w	r1, r7, r1
   1f17a:	2801      	cmp	r0, #1
   1f17c:	f171 0200 	sbcs.w	r2, r1, #0
   1f180:	dbf0      	blt.n	1f164 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f182:	e9cd 0100 	strd	r0, r1, [sp]
   1f186:	465a      	mov	r2, fp
   1f188:	4621      	mov	r1, r4
   1f18a:	4650      	mov	r0, sl
   1f18c:	f7fb fb8c 	bl	1a8a8 <z_pend_curr>
	__asm__ volatile(
   1f190:	f04f 0320 	mov.w	r3, #32
   1f194:	f3ef 8411 	mrs	r4, BASEPRI
   1f198:	f383 8812 	msr	BASEPRI_MAX, r3
   1f19c:	f3bf 8f6f 	isb	sy
   1f1a0:	e7d6      	b.n	1f150 <k_heap_aligned_alloc+0x30>

0001f1a2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1f1a2:	b538      	push	{r3, r4, r5, lr}
   1f1a4:	4604      	mov	r4, r0
   1f1a6:	f04f 0320 	mov.w	r3, #32
   1f1aa:	f3ef 8511 	mrs	r5, BASEPRI
   1f1ae:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1b2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1f1b6:	f7fc f98b 	bl	1b4d0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1f1ba:	f104 000c 	add.w	r0, r4, #12
   1f1be:	f000 fabd 	bl	1f73c <z_unpend_all>
   1f1c2:	b130      	cbz	r0, 1f1d2 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1f1c4:	4629      	mov	r1, r5
   1f1c6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1f1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1f1ce:	f7fb ba19 	b.w	1a604 <z_reschedule>
	__asm__ volatile(
   1f1d2:	f385 8811 	msr	BASEPRI, r5
   1f1d6:	f3bf 8f6f 	isb	sy
}
   1f1da:	bd38      	pop	{r3, r4, r5, pc}

0001f1dc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f1de:	4604      	mov	r4, r0
   1f1e0:	460d      	mov	r5, r1
	__asm__ volatile(
   1f1e2:	f04f 0320 	mov.w	r3, #32
   1f1e6:	f3ef 8611 	mrs	r6, BASEPRI
   1f1ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f1f2:	6947      	ldr	r7, [r0, #20]
   1f1f4:	b977      	cbnz	r7, 1f214 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f1f6:	f000 fa89 	bl	1f70c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f1fa:	b158      	cbz	r0, 1f214 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f1fc:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f1fe:	6142      	str	r2, [r0, #20]
   1f200:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1f202:	f000 fa27 	bl	1f654 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1f206:	4631      	mov	r1, r6
   1f208:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1f20c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1f210:	f7fb b9f8 	b.w	1a604 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f214:	682b      	ldr	r3, [r5, #0]
   1f216:	6962      	ldr	r2, [r4, #20]
   1f218:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f21a:	682b      	ldr	r3, [r5, #0]
   1f21c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1f21e:	69a3      	ldr	r3, [r4, #24]
   1f220:	3b01      	subs	r3, #1
   1f222:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1f224:	f386 8811 	msr	BASEPRI, r6
   1f228:	f3bf 8f6f 	isb	sy
}
   1f22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f22e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f22e:	f3ef 8005 	mrs	r0, IPSR
}
   1f232:	3800      	subs	r0, #0
   1f234:	bf18      	it	ne
   1f236:	2001      	movne	r0, #1
   1f238:	4770      	bx	lr

0001f23a <z_impl_k_thread_name_set>:
}
   1f23a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1f23e:	4770      	bx	lr

0001f240 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1f240:	f7fb bad6 	b.w	1a7f0 <z_sched_start>

0001f244 <z_pm_save_idle_exit>:
{
   1f244:	b508      	push	{r3, lr}
	pm_system_resume();
   1f246:	f7e6 fde3 	bl	5e10 <pm_system_resume>
}
   1f24a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1f24e:	f7ff be3c 	b.w	1eeca <sys_clock_idle_exit>

0001f252 <queue_insert>:
{
   1f252:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f256:	4699      	mov	r9, r3
   1f258:	4604      	mov	r4, r0
   1f25a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1f25e:	460d      	mov	r5, r1
   1f260:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f262:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1f266:	f04f 0220 	mov.w	r2, #32
   1f26a:	f3ef 8711 	mrs	r7, BASEPRI
   1f26e:	f382 8812 	msr	BASEPRI_MAX, r2
   1f272:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1f276:	b103      	cbz	r3, 1f27a <queue_insert+0x28>
	return list->tail;
   1f278:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1f27a:	4630      	mov	r0, r6
   1f27c:	f000 fa46 	bl	1f70c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1f280:	b158      	cbz	r0, 1f29a <queue_insert+0x48>
   1f282:	2400      	movs	r4, #0
   1f284:	67c4      	str	r4, [r0, #124]	; 0x7c
   1f286:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1f28a:	f000 f9e3 	bl	1f654 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1f28e:	4630      	mov	r0, r6
   1f290:	4639      	mov	r1, r7
   1f292:	f7fb f9b7 	bl	1a604 <z_reschedule>
	return 0;
   1f296:	2000      	movs	r0, #0
   1f298:	e00c      	b.n	1f2b4 <queue_insert+0x62>
	if (alloc) {
   1f29a:	f1b9 0f00 	cmp.w	r9, #0
   1f29e:	d01b      	beq.n	1f2d8 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1f2a0:	2108      	movs	r1, #8
   1f2a2:	f7fb fe61 	bl	1af68 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1f2a6:	b938      	cbnz	r0, 1f2b8 <queue_insert+0x66>
	__asm__ volatile(
   1f2a8:	f387 8811 	msr	BASEPRI, r7
   1f2ac:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1f2b0:	f06f 000b 	mvn.w	r0, #11
}
   1f2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1f2b8:	2301      	movs	r3, #1
		anode->data = data;
   1f2ba:	f8c0 8004 	str.w	r8, [r0, #4]
   1f2be:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f2c0:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f2c2:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1f2c6:	b95d      	cbnz	r5, 1f2e0 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f2c8:	6823      	ldr	r3, [r4, #0]
   1f2ca:	4313      	orrs	r3, r2
   1f2cc:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f2ce:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1f2d0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1f2d2:	b973      	cbnz	r3, 1f2f2 <queue_insert+0xa0>
	list->tail = node;
   1f2d4:	6060      	str	r0, [r4, #4]
}
   1f2d6:	e00c      	b.n	1f2f2 <queue_insert+0xa0>
	node->next_and_flags = flags;
   1f2d8:	f8c8 9000 	str.w	r9, [r8]
}
   1f2dc:	4640      	mov	r0, r8
   1f2de:	e7ef      	b.n	1f2c0 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f2e0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1f2e2:	f033 0303 	bics.w	r3, r3, #3
   1f2e6:	d110      	bne.n	1f30a <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f2e8:	6002      	str	r2, [r0, #0]
	return list->tail;
   1f2ea:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1f2ec:	b93a      	cbnz	r2, 1f2fe <queue_insert+0xac>
	list->head = node;
   1f2ee:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f2f2:	2104      	movs	r1, #4
   1f2f4:	f104 0010 	add.w	r0, r4, #16
   1f2f8:	f000 fc00 	bl	1fafc <z_handle_obj_poll_events>
   1f2fc:	e7c7      	b.n	1f28e <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f2fe:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f300:	f003 0303 	and.w	r3, r3, #3
   1f304:	4303      	orrs	r3, r0
   1f306:	6013      	str	r3, [r2, #0]
   1f308:	e7e4      	b.n	1f2d4 <queue_insert+0x82>
   1f30a:	4313      	orrs	r3, r2
   1f30c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f30e:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f310:	f003 0303 	and.w	r3, r3, #3
   1f314:	4303      	orrs	r3, r0
   1f316:	602b      	str	r3, [r5, #0]
}
   1f318:	e7eb      	b.n	1f2f2 <queue_insert+0xa0>

0001f31a <z_queue_node_peek>:
{
   1f31a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1f31c:	4604      	mov	r4, r0
   1f31e:	b130      	cbz	r0, 1f32e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f320:	6802      	ldr	r2, [r0, #0]
   1f322:	0793      	lsls	r3, r2, #30
   1f324:	d003      	beq.n	1f32e <z_queue_node_peek+0x14>
		ret = anode->data;
   1f326:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1f328:	b109      	cbz	r1, 1f32e <z_queue_node_peek+0x14>
			k_free(anode);
   1f32a:	f000 fbf5 	bl	1fb18 <k_free>
}
   1f32e:	4620      	mov	r0, r4
   1f330:	bd10      	pop	{r4, pc}

0001f332 <z_impl_k_queue_init>:
	list->head = NULL;
   1f332:	2300      	movs	r3, #0
	list->tail = NULL;
   1f334:	e9c0 3300 	strd	r3, r3, [r0]
   1f338:	f100 0308 	add.w	r3, r0, #8
   1f33c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1f340:	f100 0310 	add.w	r3, r0, #16
   1f344:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1f348:	4770      	bx	lr

0001f34a <k_queue_append>:
{
   1f34a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1f34c:	2301      	movs	r3, #1
   1f34e:	9300      	str	r3, [sp, #0]
   1f350:	2300      	movs	r3, #0
{
   1f352:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1f354:	4619      	mov	r1, r3
   1f356:	f7ff ff7c 	bl	1f252 <queue_insert>
}
   1f35a:	b003      	add	sp, #12
   1f35c:	f85d fb04 	ldr.w	pc, [sp], #4

0001f360 <k_queue_prepend>:
{
   1f360:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1f362:	2300      	movs	r3, #0
{
   1f364:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1f366:	9300      	str	r3, [sp, #0]
   1f368:	4619      	mov	r1, r3
   1f36a:	f7ff ff72 	bl	1f252 <queue_insert>
}
   1f36e:	b003      	add	sp, #12
   1f370:	f85d fb04 	ldr.w	pc, [sp], #4

0001f374 <k_queue_append_list>:
{
   1f374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f378:	4605      	mov	r5, r0
   1f37a:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1f37c:	460c      	mov	r4, r1
   1f37e:	b391      	cbz	r1, 1f3e6 <k_queue_append_list+0x72>
   1f380:	b38a      	cbz	r2, 1f3e6 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f382:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1f386:	f04f 0320 	mov.w	r3, #32
   1f38a:	f3ef 8811 	mrs	r8, BASEPRI
   1f38e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f392:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1f396:	4638      	mov	r0, r7
   1f398:	f000 f9b8 	bl	1f70c <z_unpend_first_thread>
   1f39c:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1f3a0:	b920      	cbnz	r0, 1f3ac <k_queue_append_list+0x38>
	return list->tail;
   1f3a2:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f3a4:	b9ca      	cbnz	r2, 1f3da <k_queue_append_list+0x66>
	list->head = node;
   1f3a6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1f3a8:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1f3aa:	e00a      	b.n	1f3c2 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1f3ac:	6144      	str	r4, [r0, #20]
   1f3ae:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1f3b2:	f000 f94f 	bl	1f654 <z_ready_thread>
		head = *(void **)head;
   1f3b6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1f3b8:	4638      	mov	r0, r7
   1f3ba:	f000 f9a7 	bl	1f70c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1f3be:	2c00      	cmp	r4, #0
   1f3c0:	d1ee      	bne.n	1f3a0 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1f3c2:	2104      	movs	r1, #4
   1f3c4:	f105 0010 	add.w	r0, r5, #16
   1f3c8:	f000 fb98 	bl	1fafc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1f3cc:	4638      	mov	r0, r7
   1f3ce:	4641      	mov	r1, r8
   1f3d0:	f7fb f918 	bl	1a604 <z_reschedule>
	return 0;
   1f3d4:	2000      	movs	r0, #0
}
   1f3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1f3da:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1f3dc:	f003 0303 	and.w	r3, r3, #3
   1f3e0:	431c      	orrs	r4, r3
   1f3e2:	6014      	str	r4, [r2, #0]
}
   1f3e4:	e7e0      	b.n	1f3a8 <k_queue_append_list+0x34>
		return -EINVAL;
   1f3e6:	f06f 0015 	mvn.w	r0, #21
   1f3ea:	e7f4      	b.n	1f3d6 <k_queue_append_list+0x62>

0001f3ec <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1f3ec:	b15a      	cbz	r2, 1f406 <z_impl_k_sem_init+0x1a>
   1f3ee:	428a      	cmp	r2, r1
   1f3f0:	d309      	bcc.n	1f406 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1f3f2:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1f3f6:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1f3fa:	e9c0 0000 	strd	r0, r0, [r0]
   1f3fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1f402:	2000      	movs	r0, #0
   1f404:	4770      	bx	lr
		return -EINVAL;
   1f406:	f06f 0015 	mvn.w	r0, #21
}
   1f40a:	4770      	bx	lr

0001f40c <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1f40c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1f40e:	2301      	movs	r3, #1
   1f410:	408b      	lsls	r3, r1
   1f412:	ea22 0303 	bic.w	r3, r2, r3
   1f416:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1f418:	fa22 f001 	lsr.w	r0, r2, r1
}
   1f41c:	f000 0001 	and.w	r0, r0, #1
   1f420:	4770      	bx	lr

0001f422 <unschedule_locked>:
{
   1f422:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f424:	2103      	movs	r1, #3
{
   1f426:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1f428:	300c      	adds	r0, #12
   1f42a:	f7ff ffef 	bl	1f40c <flag_test_and_clear>
   1f42e:	4604      	mov	r4, r0
   1f430:	b118      	cbz	r0, 1f43a <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1f432:	f105 0010 	add.w	r0, r5, #16
   1f436:	f000 f9ae 	bl	1f796 <z_abort_timeout>
}
   1f43a:	4620      	mov	r0, r4
   1f43c:	bd38      	pop	{r3, r4, r5, pc}

0001f43e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1f43e:	b120      	cbz	r0, 1f44a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1f440:	2200      	movs	r2, #0
   1f442:	4611      	mov	r1, r2
   1f444:	3088      	adds	r0, #136	; 0x88
   1f446:	f000 b989 	b.w	1f75c <z_sched_wake>
}
   1f44a:	4770      	bx	lr

0001f44c <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1f44c:	68c3      	ldr	r3, [r0, #12]
{
   1f44e:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f450:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1f454:	079b      	lsls	r3, r3, #30
{
   1f456:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f458:	d416      	bmi.n	1f488 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1f45a:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1f45c:	2102      	movs	r1, #2
   1f45e:	300c      	adds	r0, #12
   1f460:	f7ff ffd4 	bl	1f40c <flag_test_and_clear>
   1f464:	b180      	cbz	r0, 1f488 <cancel_async_locked+0x3c>
	return list->head;
   1f466:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f46a:	b16a      	cbz	r2, 1f488 <cancel_async_locked+0x3c>
   1f46c:	4294      	cmp	r4, r2
   1f46e:	d11b      	bne.n	1f4a8 <cancel_async_locked+0x5c>
	return node->next;
   1f470:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   1f472:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   1f476:	b98d      	cbnz	r5, 1f49c <cancel_async_locked+0x50>
   1f478:	428c      	cmp	r4, r1
	list->head = node;
   1f47a:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1f47e:	d101      	bne.n	1f484 <cancel_async_locked+0x38>
	list->tail = node;
   1f480:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   1f484:	2300      	movs	r3, #0
   1f486:	6023      	str	r3, [r4, #0]
	return *flagp;
   1f488:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1f48a:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1f48e:	bf1e      	ittt	ne
   1f490:	f043 0302 	orrne.w	r3, r3, #2
   1f494:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1f496:	f003 000f 	andne.w	r0, r3, #15
}
   1f49a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   1f49c:	428c      	cmp	r4, r1
	parent->next = child;
   1f49e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   1f4a0:	bf08      	it	eq
   1f4a2:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   1f4a6:	e7ed      	b.n	1f484 <cancel_async_locked+0x38>
	return node->next;
   1f4a8:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f4aa:	6812      	ldr	r2, [r2, #0]
   1f4ac:	e7dd      	b.n	1f46a <cancel_async_locked+0x1e>

0001f4ae <work_timeout>:
{
   1f4ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f4b0:	4604      	mov	r4, r0
   1f4b2:	f04f 0320 	mov.w	r3, #32
   1f4b6:	f3ef 8511 	mrs	r5, BASEPRI
   1f4ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4be:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1f4c2:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1f4c4:	f1a0 0610 	sub.w	r6, r0, #16
   1f4c8:	2103      	movs	r1, #3
   1f4ca:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1f4cc:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1f4ce:	f7ff ff9d 	bl	1f40c <flag_test_and_clear>
   1f4d2:	b128      	cbz	r0, 1f4e0 <work_timeout+0x32>
		queue = dw->queue;
   1f4d4:	69a3      	ldr	r3, [r4, #24]
   1f4d6:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1f4d8:	a901      	add	r1, sp, #4
   1f4da:	4630      	mov	r0, r6
   1f4dc:	f7fa ff5a 	bl	1a394 <submit_to_queue_locked>
	__asm__ volatile(
   1f4e0:	f385 8811 	msr	BASEPRI, r5
   1f4e4:	f3bf 8f6f 	isb	sy
}
   1f4e8:	b002      	add	sp, #8
   1f4ea:	bd70      	pop	{r4, r5, r6, pc}

0001f4ec <k_work_submit_to_queue>:
{
   1f4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f4ee:	9001      	str	r0, [sp, #4]
   1f4f0:	4608      	mov	r0, r1
	__asm__ volatile(
   1f4f2:	f04f 0320 	mov.w	r3, #32
   1f4f6:	f3ef 8511 	mrs	r5, BASEPRI
   1f4fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4fe:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1f502:	a901      	add	r1, sp, #4
   1f504:	f7fa ff46 	bl	1a394 <submit_to_queue_locked>
   1f508:	4604      	mov	r4, r0
	__asm__ volatile(
   1f50a:	f385 8811 	msr	BASEPRI, r5
   1f50e:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1f512:	2800      	cmp	r0, #0
   1f514:	dd04      	ble.n	1f520 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1f516:	f7fb fadd 	bl	1aad4 <z_impl_k_is_preempt_thread>
   1f51a:	b108      	cbz	r0, 1f520 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1f51c:	f7fb fa32 	bl	1a984 <z_impl_k_yield>
}
   1f520:	4620      	mov	r0, r4
   1f522:	b003      	add	sp, #12
   1f524:	bd30      	pop	{r4, r5, pc}

0001f526 <k_work_init_delayable>:
{
   1f526:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1f528:	2230      	movs	r2, #48	; 0x30
{
   1f52a:	4604      	mov	r4, r0
   1f52c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1f52e:	2100      	movs	r1, #0
   1f530:	f7fc fc06 	bl	1bd40 <memset>
   1f534:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f538:	6065      	str	r5, [r4, #4]
   1f53a:	60e3      	str	r3, [r4, #12]
}
   1f53c:	bd38      	pop	{r3, r4, r5, pc}

0001f53e <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1f53e:	b538      	push	{r3, r4, r5, lr}
   1f540:	4604      	mov	r4, r0
	__asm__ volatile(
   1f542:	f04f 0320 	mov.w	r3, #32
   1f546:	f3ef 8511 	mrs	r5, BASEPRI
   1f54a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f54e:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1f552:	f7ff ff66 	bl	1f422 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1f556:	4620      	mov	r0, r4
   1f558:	f7ff ff78 	bl	1f44c <cancel_async_locked>
	__asm__ volatile(
   1f55c:	f385 8811 	msr	BASEPRI, r5
   1f560:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1f564:	bd38      	pop	{r3, r4, r5, pc}

0001f566 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1f566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f568:	4604      	mov	r4, r0
   1f56a:	460d      	mov	r5, r1
	__asm__ volatile(
   1f56c:	f04f 0320 	mov.w	r3, #32
   1f570:	f3ef 8711 	mrs	r7, BASEPRI
   1f574:	f383 8812 	msr	BASEPRI_MAX, r3
   1f578:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   1f57c:	68c3      	ldr	r3, [r0, #12]
   1f57e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1f582:	2b00      	cmp	r3, #0
   1f584:	bf14      	ite	ne
   1f586:	2601      	movne	r6, #1
   1f588:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1f58a:	d009      	beq.n	1f5a0 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   1f58c:	f7ff ff49 	bl	1f422 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1f590:	4620      	mov	r0, r4
   1f592:	f7ff ff5b 	bl	1f44c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1f596:	4629      	mov	r1, r5
   1f598:	4620      	mov	r0, r4
   1f59a:	f7fa fedd 	bl	1a358 <cancel_sync_locked>
   1f59e:	4603      	mov	r3, r0
	__asm__ volatile(
   1f5a0:	f387 8811 	msr	BASEPRI, r7
   1f5a4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1f5a8:	b13b      	cbz	r3, 1f5ba <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   1f5aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f5ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f5b2:	f105 0008 	add.w	r0, r5, #8
   1f5b6:	f7fa fdf7 	bl	1a1a8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1f5ba:	4630      	mov	r0, r6
   1f5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f5be <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1f5be:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f5c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f5c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f5c6:	2300      	movs	r3, #0
	node->prev = NULL;
   1f5c8:	e9c0 3300 	strd	r3, r3, [r0]
}
   1f5cc:	4770      	bx	lr

0001f5ce <unpend_thread_no_timeout>:
{
   1f5ce:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1f5d0:	f7ff fff5 	bl	1f5be <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f5d4:	7b43      	ldrb	r3, [r0, #13]
   1f5d6:	f023 0302 	bic.w	r3, r3, #2
   1f5da:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1f5dc:	2300      	movs	r3, #0
   1f5de:	6083      	str	r3, [r0, #8]
}
   1f5e0:	bd08      	pop	{r3, pc}

0001f5e2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1f5e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1f5e6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1f5ea:	4283      	cmp	r3, r0
		return b2 - b1;
   1f5ec:	bf14      	ite	ne
   1f5ee:	1ac0      	subne	r0, r0, r3
	return 0;
   1f5f0:	2000      	moveq	r0, #0
}
   1f5f2:	4770      	bx	lr

0001f5f4 <z_unpend_thread>:
{
   1f5f4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f5f6:	f04f 0320 	mov.w	r3, #32
   1f5fa:	f3ef 8411 	mrs	r4, BASEPRI
   1f5fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1f602:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1f606:	f7ff ffe2 	bl	1f5ce <unpend_thread_no_timeout>
	__asm__ volatile(
   1f60a:	f384 8811 	msr	BASEPRI, r4
   1f60e:	f3bf 8f6f 	isb	sy
}
   1f612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f616:	3018      	adds	r0, #24
   1f618:	f000 b8bd 	b.w	1f796 <z_abort_timeout>

0001f61c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f61c:	4603      	mov	r3, r0
   1f61e:	b920      	cbnz	r0, 1f62a <z_reschedule_irqlock+0xe>
   1f620:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1f624:	b90a      	cbnz	r2, 1f62a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1f626:	f7e6 be0b 	b.w	6240 <arch_swap>
   1f62a:	f383 8811 	msr	BASEPRI, r3
   1f62e:	f3bf 8f6f 	isb	sy
}
   1f632:	4770      	bx	lr

0001f634 <z_reschedule_unlocked>:
	__asm__ volatile(
   1f634:	f04f 0320 	mov.w	r3, #32
   1f638:	f3ef 8011 	mrs	r0, BASEPRI
   1f63c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f640:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f644:	f7ff bfea 	b.w	1f61c <z_reschedule_irqlock>

0001f648 <z_priq_dumb_best>:
{
   1f648:	4603      	mov	r3, r0
	return list->head == list;
   1f64a:	6800      	ldr	r0, [r0, #0]
}
   1f64c:	4283      	cmp	r3, r0
   1f64e:	bf08      	it	eq
   1f650:	2000      	moveq	r0, #0
   1f652:	4770      	bx	lr

0001f654 <z_ready_thread>:
{
   1f654:	b510      	push	{r4, lr}
   1f656:	f04f 0320 	mov.w	r3, #32
   1f65a:	f3ef 8411 	mrs	r4, BASEPRI
   1f65e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f662:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1f666:	f7fb f88d 	bl	1a784 <ready_thread>
	__asm__ volatile(
   1f66a:	f384 8811 	msr	BASEPRI, r4
   1f66e:	f3bf 8f6f 	isb	sy
}
   1f672:	bd10      	pop	{r4, pc}

0001f674 <z_thread_timeout>:
{
   1f674:	b510      	push	{r4, lr}
   1f676:	4601      	mov	r1, r0
	__asm__ volatile(
   1f678:	f04f 0320 	mov.w	r3, #32
   1f67c:	f3ef 8411 	mrs	r4, BASEPRI
   1f680:	f383 8812 	msr	BASEPRI_MAX, r3
   1f684:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1f688:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1f68c:	f013 0f28 	tst.w	r3, #40	; 0x28
   1f690:	d10d      	bne.n	1f6ae <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1f692:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1f696:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1f698:	b10b      	cbz	r3, 1f69e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1f69a:	f7ff ff98 	bl	1f5ce <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1f69e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1f6a2:	f023 0314 	bic.w	r3, r3, #20
   1f6a6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1f6aa:	f7fb f86b 	bl	1a784 <ready_thread>
	__asm__ volatile(
   1f6ae:	f384 8811 	msr	BASEPRI, r4
   1f6b2:	f3bf 8f6f 	isb	sy
}
   1f6b6:	bd10      	pop	{r4, pc}

0001f6b8 <add_to_waitq_locked>:
{
   1f6b8:	b538      	push	{r3, r4, r5, lr}
   1f6ba:	4604      	mov	r4, r0
   1f6bc:	460d      	mov	r5, r1
	unready_thread(thread);
   1f6be:	f7fb f8b5 	bl	1a82c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1f6c2:	7b63      	ldrb	r3, [r4, #13]
   1f6c4:	f043 0302 	orr.w	r3, r3, #2
   1f6c8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1f6ca:	b195      	cbz	r5, 1f6f2 <add_to_waitq_locked+0x3a>
   1f6cc:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1f6ce:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f6d0:	429d      	cmp	r5, r3
   1f6d2:	d015      	beq.n	1f700 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f6d4:	b1a3      	cbz	r3, 1f700 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   1f6d6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1f6da:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1f6de:	4291      	cmp	r1, r2
   1f6e0:	d008      	beq.n	1f6f4 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   1f6e2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1f6e4:	2a00      	cmp	r2, #0
   1f6e6:	dd05      	ble.n	1f6f4 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1f6e8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f6ea:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1f6ee:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1f6f0:	605c      	str	r4, [r3, #4]
}
   1f6f2:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1f6f4:	686a      	ldr	r2, [r5, #4]
   1f6f6:	4293      	cmp	r3, r2
   1f6f8:	d002      	beq.n	1f700 <add_to_waitq_locked+0x48>
   1f6fa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f6fc:	2b00      	cmp	r3, #0
   1f6fe:	d1ec      	bne.n	1f6da <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   1f700:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1f702:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1f706:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f708:	606c      	str	r4, [r5, #4]
}
   1f70a:	e7f2      	b.n	1f6f2 <add_to_waitq_locked+0x3a>

0001f70c <z_unpend_first_thread>:
{
   1f70c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f70e:	f04f 0320 	mov.w	r3, #32
   1f712:	f3ef 8511 	mrs	r5, BASEPRI
   1f716:	f383 8812 	msr	BASEPRI_MAX, r3
   1f71a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1f71e:	f7ff ff93 	bl	1f648 <z_priq_dumb_best>
		if (thread != NULL) {
   1f722:	4604      	mov	r4, r0
   1f724:	b120      	cbz	r0, 1f730 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1f726:	f7ff ff52 	bl	1f5ce <unpend_thread_no_timeout>
   1f72a:	3018      	adds	r0, #24
   1f72c:	f000 f833 	bl	1f796 <z_abort_timeout>
	__asm__ volatile(
   1f730:	f385 8811 	msr	BASEPRI, r5
   1f734:	f3bf 8f6f 	isb	sy
}
   1f738:	4620      	mov	r0, r4
   1f73a:	bd38      	pop	{r3, r4, r5, pc}

0001f73c <z_unpend_all>:
{
   1f73c:	b538      	push	{r3, r4, r5, lr}
   1f73e:	4605      	mov	r5, r0
	int need_sched = 0;
   1f740:	2000      	movs	r0, #0
	return list->head == list;
   1f742:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f744:	42a5      	cmp	r5, r4
   1f746:	d000      	beq.n	1f74a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1f748:	b904      	cbnz	r4, 1f74c <z_unpend_all+0x10>
}
   1f74a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1f74c:	4620      	mov	r0, r4
   1f74e:	f7ff ff51 	bl	1f5f4 <z_unpend_thread>
		z_ready_thread(thread);
   1f752:	4620      	mov	r0, r4
   1f754:	f7ff ff7e 	bl	1f654 <z_ready_thread>
		need_sched = 1;
   1f758:	2001      	movs	r0, #1
   1f75a:	e7f2      	b.n	1f742 <z_unpend_all+0x6>

0001f75c <z_sched_wake>:
{
   1f75c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1f75e:	f04f 0320 	mov.w	r3, #32
   1f762:	f3ef 8511 	mrs	r5, BASEPRI
   1f766:	f383 8812 	msr	BASEPRI_MAX, r3
   1f76a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1f76e:	f7ff ff6b 	bl	1f648 <z_priq_dumb_best>
		if (thread != NULL) {
   1f772:	4604      	mov	r4, r0
   1f774:	b150      	cbz	r0, 1f78c <z_sched_wake+0x30>
   1f776:	67c1      	str	r1, [r0, #124]	; 0x7c
   1f778:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1f77a:	f7ff ff28 	bl	1f5ce <unpend_thread_no_timeout>
   1f77e:	3018      	adds	r0, #24
   1f780:	f000 f809 	bl	1f796 <z_abort_timeout>
			ready_thread(thread);
   1f784:	4620      	mov	r0, r4
   1f786:	f7fa fffd 	bl	1a784 <ready_thread>
			ret = true;
   1f78a:	2001      	movs	r0, #1
	__asm__ volatile(
   1f78c:	f385 8811 	msr	BASEPRI, r5
   1f790:	f3bf 8f6f 	isb	sy
}
   1f794:	bd38      	pop	{r3, r4, r5, pc}

0001f796 <z_abort_timeout>:
{
   1f796:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f798:	f04f 0220 	mov.w	r2, #32
   1f79c:	f3ef 8411 	mrs	r4, BASEPRI
   1f7a0:	f382 8812 	msr	BASEPRI_MAX, r2
   1f7a4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1f7a8:	6803      	ldr	r3, [r0, #0]
   1f7aa:	b13b      	cbz	r3, 1f7bc <z_abort_timeout+0x26>
			remove_timeout(to);
   1f7ac:	f7fb fa50 	bl	1ac50 <remove_timeout>
			ret = 0;
   1f7b0:	2000      	movs	r0, #0
	__asm__ volatile(
   1f7b2:	f384 8811 	msr	BASEPRI, r4
   1f7b6:	f3bf 8f6f 	isb	sy
}
   1f7ba:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1f7bc:	f06f 0015 	mvn.w	r0, #21
   1f7c0:	e7f7      	b.n	1f7b2 <z_abort_timeout+0x1c>

0001f7c2 <z_get_next_timeout_expiry>:
{
   1f7c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f7c4:	f04f 0320 	mov.w	r3, #32
   1f7c8:	f3ef 8411 	mrs	r4, BASEPRI
   1f7cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1f7d0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1f7d4:	f7fb fa16 	bl	1ac04 <next_timeout>
	__asm__ volatile(
   1f7d8:	f384 8811 	msr	BASEPRI, r4
   1f7dc:	f3bf 8f6f 	isb	sy
}
   1f7e0:	bd10      	pop	{r4, pc}

0001f7e2 <z_set_timeout_expiry>:
{
   1f7e2:	b570      	push	{r4, r5, r6, lr}
   1f7e4:	4604      	mov	r4, r0
   1f7e6:	460d      	mov	r5, r1
	__asm__ volatile(
   1f7e8:	f04f 0320 	mov.w	r3, #32
   1f7ec:	f3ef 8611 	mrs	r6, BASEPRI
   1f7f0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f7f4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1f7f8:	f7fb fa04 	bl	1ac04 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1f7fc:	2801      	cmp	r0, #1
   1f7fe:	dd05      	ble.n	1f80c <z_set_timeout_expiry+0x2a>
   1f800:	42a0      	cmp	r0, r4
   1f802:	db03      	blt.n	1f80c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1f804:	4629      	mov	r1, r5
   1f806:	4620      	mov	r0, r4
   1f808:	f7f8 ffc8 	bl	1879c <sys_clock_set_timeout>
	__asm__ volatile(
   1f80c:	f386 8811 	msr	BASEPRI, r6
   1f810:	f3bf 8f6f 	isb	sy
}
   1f814:	bd70      	pop	{r4, r5, r6, pc}

0001f816 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1f816:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1f818:	f7fb fb0a 	bl	1ae30 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1f81c:	bd08      	pop	{r3, pc}

0001f81e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1f81e:	f7fb bb07 	b.w	1ae30 <sys_clock_tick_get>

0001f822 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1f822:	b108      	cbz	r0, 1f828 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1f824:	f7e7 b81c 	b.w	6860 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1f828:	4770      	bx	lr

0001f82a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f82a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1f82e:	bf08      	it	eq
   1f830:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1f834:	b538      	push	{r3, r4, r5, lr}
   1f836:	4605      	mov	r5, r0
   1f838:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f83a:	d01d      	beq.n	1f878 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f83c:	ea51 0300 	orrs.w	r3, r1, r0
   1f840:	d103      	bne.n	1f84a <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1f842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1f846:	f7fb baf3 	b.w	1ae30 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1f84a:	f06f 0301 	mvn.w	r3, #1
   1f84e:	1a18      	subs	r0, r3, r0
   1f850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f854:	eb63 0101 	sbc.w	r1, r3, r1
   1f858:	2900      	cmp	r1, #0
   1f85a:	da0c      	bge.n	1f876 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1f85c:	f7fb fae8 	bl	1ae30 <sys_clock_tick_get>
   1f860:	2d01      	cmp	r5, #1
   1f862:	4622      	mov	r2, r4
   1f864:	f174 0400 	sbcs.w	r4, r4, #0
   1f868:	462b      	mov	r3, r5
   1f86a:	bfbc      	itt	lt
   1f86c:	2301      	movlt	r3, #1
   1f86e:	2200      	movlt	r2, #0
   1f870:	1818      	adds	r0, r3, r0
   1f872:	eb41 0102 	adc.w	r1, r1, r2
}
   1f876:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1f878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f87c:	4601      	mov	r1, r0
   1f87e:	e7fa      	b.n	1f876 <sys_clock_timeout_end_calc+0x4c>

0001f880 <add_event>:
{
   1f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f882:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1f884:	e9d0 1300 	ldrd	r1, r3, [r0]
   1f888:	4288      	cmp	r0, r1
   1f88a:	4604      	mov	r4, r0
   1f88c:	d00d      	beq.n	1f8aa <add_event+0x2a>
	if ((pending == NULL) ||
   1f88e:	b163      	cbz	r3, 1f8aa <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f890:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f892:	b100      	cbz	r0, 1f896 <add_event+0x16>
   1f894:	3860      	subs	r0, #96	; 0x60
   1f896:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1f89a:	4639      	mov	r1, r7
   1f89c:	f7ff fea1 	bl	1f5e2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1f8a0:	2800      	cmp	r0, #0
   1f8a2:	dc02      	bgt.n	1f8aa <add_event+0x2a>
	return list->head == list;
   1f8a4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f8a6:	42b4      	cmp	r4, r6
   1f8a8:	d109      	bne.n	1f8be <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   1f8aa:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1f8ac:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1f8b0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1f8b2:	6065      	str	r5, [r4, #4]
}
   1f8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1f8b6:	6863      	ldr	r3, [r4, #4]
   1f8b8:	42b3      	cmp	r3, r6
   1f8ba:	d0f6      	beq.n	1f8aa <add_event+0x2a>
   1f8bc:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1f8be:	2e00      	cmp	r6, #0
   1f8c0:	d0f3      	beq.n	1f8aa <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   1f8c2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1f8c4:	b101      	cbz	r1, 1f8c8 <add_event+0x48>
   1f8c6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1f8c8:	4638      	mov	r0, r7
   1f8ca:	f7ff fe8a 	bl	1f5e2 <z_sched_prio_cmp>
   1f8ce:	2800      	cmp	r0, #0
   1f8d0:	ddf1      	ble.n	1f8b6 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   1f8d2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1f8d4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1f8d8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1f8da:	6075      	str	r5, [r6, #4]
			return;
   1f8dc:	e7ea      	b.n	1f8b4 <add_event+0x34>

0001f8de <register_events>:
{
   1f8de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1f8e2:	2500      	movs	r5, #0
{
   1f8e4:	468b      	mov	fp, r1
   1f8e6:	4614      	mov	r4, r2
   1f8e8:	461f      	mov	r7, r3
   1f8ea:	4682      	mov	sl, r0
	int events_registered = 0;
   1f8ec:	462e      	mov	r6, r5
	event->poller = NULL;
   1f8ee:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1f8f0:	455d      	cmp	r5, fp
   1f8f2:	db02      	blt.n	1f8fa <register_events+0x1c>
}
   1f8f4:	4630      	mov	r0, r6
   1f8f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1f8fa:	f04f 0320 	mov.w	r3, #32
   1f8fe:	f3ef 8911 	mrs	r9, BASEPRI
   1f902:	f383 8812 	msr	BASEPRI_MAX, r3
   1f906:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1f90a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1f90e:	f003 031f 	and.w	r3, r3, #31
   1f912:	3b01      	subs	r3, #1
   1f914:	2b07      	cmp	r3, #7
   1f916:	d80f      	bhi.n	1f938 <register_events+0x5a>
   1f918:	e8df f003 	tbb	[pc, r3]
   1f91c:	0a0e041e 	.word	0x0a0e041e
   1f920:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1f924:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f928:	689b      	ldr	r3, [r3, #8]
   1f92a:	b12b      	cbz	r3, 1f938 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1f92c:	2302      	movs	r3, #2
   1f92e:	e020      	b.n	1f972 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1f930:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f934:	681b      	ldr	r3, [r3, #0]
   1f936:	bb8b      	cbnz	r3, 1f99c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1f938:	bb47      	cbnz	r7, 1f98c <register_events+0xae>
   1f93a:	7823      	ldrb	r3, [r4, #0]
   1f93c:	b333      	cbz	r3, 1f98c <register_events+0xae>
	switch (event->type) {
   1f93e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1f942:	f003 031f 	and.w	r3, r3, #31
   1f946:	3b01      	subs	r3, #1
   1f948:	2b07      	cmp	r3, #7
   1f94a:	d830      	bhi.n	1f9ae <register_events+0xd0>
   1f94c:	e8df f003 	tbb	[pc, r3]
   1f950:	282f2833 	.word	0x282f2833
   1f954:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1f958:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f95c:	689b      	ldr	r3, [r3, #8]
   1f95e:	2b00      	cmp	r3, #0
   1f960:	d0ea      	beq.n	1f938 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1f962:	2301      	movs	r3, #1
   1f964:	e005      	b.n	1f972 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1f966:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f96a:	6a1b      	ldr	r3, [r3, #32]
   1f96c:	2b00      	cmp	r3, #0
   1f96e:	d0e3      	beq.n	1f938 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1f970:	2310      	movs	r3, #16
	event->state |= state;
   1f972:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1f976:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1f97a:	f3c2 3145 	ubfx	r1, r2, #13, #6
   1f97e:	430b      	orrs	r3, r1
   1f980:	f363 3252 	bfi	r2, r3, #13, #6
   1f984:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1f988:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1f98c:	f389 8811 	msr	BASEPRI, r9
   1f990:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1f994:	3501      	adds	r5, #1
   1f996:	f10a 0a14 	add.w	sl, sl, #20
   1f99a:	e7a9      	b.n	1f8f0 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1f99c:	2304      	movs	r3, #4
   1f99e:	e7e8      	b.n	1f972 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1f9a0:	f8da 0010 	ldr.w	r0, [sl, #16]
   1f9a4:	4622      	mov	r2, r4
   1f9a6:	4651      	mov	r1, sl
   1f9a8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1f9aa:	f7ff ff69 	bl	1f880 <add_event>
	event->poller = poller;
   1f9ae:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1f9b2:	3601      	adds	r6, #1
   1f9b4:	e7ea      	b.n	1f98c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1f9b6:	f8da 0010 	ldr.w	r0, [sl, #16]
   1f9ba:	4622      	mov	r2, r4
   1f9bc:	4651      	mov	r1, sl
   1f9be:	e7f4      	b.n	1f9aa <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1f9c0:	f8da 0010 	ldr.w	r0, [sl, #16]
   1f9c4:	4622      	mov	r2, r4
   1f9c6:	4651      	mov	r1, sl
   1f9c8:	3024      	adds	r0, #36	; 0x24
   1f9ca:	e7ee      	b.n	1f9aa <register_events+0xcc>

0001f9cc <signal_poll_event>:
{
   1f9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1f9d0:	6884      	ldr	r4, [r0, #8]
{
   1f9d2:	4605      	mov	r5, r0
   1f9d4:	460e      	mov	r6, r1
	if (poller != NULL) {
   1f9d6:	b144      	cbz	r4, 1f9ea <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1f9d8:	7863      	ldrb	r3, [r4, #1]
   1f9da:	2b01      	cmp	r3, #1
   1f9dc:	d136      	bne.n	1fa4c <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   1f9de:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1f9e2:	f013 0302 	ands.w	r3, r3, #2
   1f9e6:	d10a      	bne.n	1f9fe <signal_poll_event+0x32>
		poller->is_polling = false;
   1f9e8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1f9ea:	68eb      	ldr	r3, [r5, #12]
   1f9ec:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1f9f0:	430e      	orrs	r6, r1
	event->poller = NULL;
   1f9f2:	2000      	movs	r0, #0
	event->state |= state;
   1f9f4:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1f9f8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1f9fa:	60eb      	str	r3, [r5, #12]
	return retcode;
   1f9fc:	e00b      	b.n	1fa16 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   1f9fe:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1fa02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1fa06:	bf08      	it	eq
   1fa08:	f112 0f02 	cmneq.w	r2, #2
   1fa0c:	d105      	bne.n	1fa1a <signal_poll_event+0x4e>
		poller->is_polling = false;
   1fa0e:	2300      	movs	r3, #0
   1fa10:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1fa12:	f06f 000a 	mvn.w	r0, #10
}
   1fa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1fa1a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1fa1e:	4640      	mov	r0, r8
   1fa20:	f7ff fde8 	bl	1f5f4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1fa24:	2e08      	cmp	r6, #8
   1fa26:	bf0c      	ite	eq
   1fa28:	f06f 0303 	mvneq.w	r3, #3
   1fa2c:	2300      	movne	r3, #0
   1fa2e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fa30:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1fa34:	06db      	lsls	r3, r3, #27
   1fa36:	d102      	bne.n	1fa3e <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   1fa38:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1fa3c:	b10f      	cbz	r7, 1fa42 <signal_poll_event+0x76>
		poller->is_polling = false;
   1fa3e:	2300      	movs	r3, #0
   1fa40:	e7d2      	b.n	1f9e8 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1fa42:	4640      	mov	r0, r8
   1fa44:	f7ff fe06 	bl	1f654 <z_ready_thread>
		poller->is_polling = false;
   1fa48:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1fa4a:	e7ce      	b.n	1f9ea <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1fa4c:	2b02      	cmp	r3, #2
   1fa4e:	d1f6      	bne.n	1fa3e <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1fa50:	7823      	ldrb	r3, [r4, #0]
   1fa52:	2b00      	cmp	r3, #0
   1fa54:	d0c9      	beq.n	1f9ea <signal_poll_event+0x1e>
   1fa56:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1fa5a:	2f00      	cmp	r7, #0
   1fa5c:	d0f4      	beq.n	1fa48 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1fa5e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1fa62:	f1a4 0914 	sub.w	r9, r4, #20
   1fa66:	f104 0014 	add.w	r0, r4, #20
   1fa6a:	f7ff fe94 	bl	1f796 <z_abort_timeout>
		twork->poll_result = 0;
   1fa6e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1fa72:	4649      	mov	r1, r9
   1fa74:	4638      	mov	r0, r7
   1fa76:	f7ff fd39 	bl	1f4ec <k_work_submit_to_queue>
		poller->is_polling = false;
   1fa7a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1fa7e:	e7b4      	b.n	1f9ea <signal_poll_event+0x1e>

0001fa80 <clear_event_registrations>:
	while (num_events--) {
   1fa80:	2314      	movs	r3, #20
{
   1fa82:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa84:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1fa88:	2400      	movs	r4, #0
   1fa8a:	2601      	movs	r6, #1
	while (num_events--) {
   1fa8c:	b901      	cbnz	r1, 1fa90 <clear_event_registrations+0x10>
}
   1fa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1fa90:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1fa94:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1fa98:	f003 031f 	and.w	r3, r3, #31
   1fa9c:	2b08      	cmp	r3, #8
   1fa9e:	f1a0 0714 	sub.w	r7, r0, #20
   1faa2:	d80d      	bhi.n	1fac0 <clear_event_registrations+0x40>
   1faa4:	fa06 f303 	lsl.w	r3, r6, r3
   1faa8:	f413 7f8b 	tst.w	r3, #278	; 0x116
   1faac:	d008      	beq.n	1fac0 <clear_event_registrations+0x40>
	return node->next != NULL;
   1faae:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1fab2:	b12b      	cbz	r3, 1fac0 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1fab4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1fab8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1faba:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1fabc:	e940 4405 	strd	r4, r4, [r0, #-20]
   1fac0:	f382 8811 	msr	BASEPRI, r2
   1fac4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1fac8:	f04f 0320 	mov.w	r3, #32
   1facc:	f3ef 8211 	mrs	r2, BASEPRI
   1fad0:	f383 8812 	msr	BASEPRI_MAX, r3
   1fad4:	f3bf 8f6f 	isb	sy
   1fad8:	3901      	subs	r1, #1
   1fada:	4638      	mov	r0, r7
   1fadc:	e7d6      	b.n	1fa8c <clear_event_registrations+0xc>

0001fade <k_poll_event_init>:
{
   1fade:	b510      	push	{r4, lr}
	event->type = type;
   1fae0:	04d2      	lsls	r2, r2, #19
   1fae2:	0209      	lsls	r1, r1, #8
   1fae4:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   1fae8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   1faec:	430a      	orrs	r2, r1
   1faee:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1faf0:	2400      	movs	r4, #0
	event->type = type;
   1faf2:	430a      	orrs	r2, r1
	event->obj = obj;
   1faf4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1faf8:	6084      	str	r4, [r0, #8]
}
   1fafa:	bd10      	pop	{r4, pc}

0001fafc <z_handle_obj_poll_events>:
{
   1fafc:	4603      	mov	r3, r0
	return list->head == list;
   1fafe:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1fb00:	4283      	cmp	r3, r0
   1fb02:	d008      	beq.n	1fb16 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1fb04:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1fb08:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1fb0a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fb0c:	2300      	movs	r3, #0
	node->prev = NULL;
   1fb0e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1fb12:	f7ff bf5b 	b.w	1f9cc <signal_poll_event>
}
   1fb16:	4770      	bx	lr

0001fb18 <k_free>:
	if (ptr != NULL) {
   1fb18:	b120      	cbz	r0, 1fb24 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1fb1a:	1f01      	subs	r1, r0, #4
   1fb1c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1fb20:	f7ff bb3f 	b.w	1f1a2 <k_heap_free>
}
   1fb24:	4770      	bx	lr

0001fb26 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   1fb26:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
   1fb28:	4770      	bx	lr
	...

0001fb2c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1fb2c:	f7f8 be8e 	b.w	1884c <SystemInit>
