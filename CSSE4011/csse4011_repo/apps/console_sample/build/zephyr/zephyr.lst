
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	38 21 00 20 5d 27 00 00 f7 8a 00 00 31 27 00 00     8!. ]'......1'..
  10:	31 27 00 00 31 27 00 00 31 27 00 00 00 00 00 00     1'..1'..1'......
	...
  2c:	a5 24 00 00 31 27 00 00 00 00 00 00 5d 24 00 00     .$..1'......]$..
  3c:	31 27 00 00                                         1'..

00000040 <_irq_vector_table>:
  40:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  50:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  60:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  70:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  80:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  90:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  a0:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  b0:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  c0:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  d0:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  e0:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..
  f0:	21 25 00 00 21 25 00 00 21 25 00 00 21 25 00 00     !%..!%..!%..!%..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <__data_size+0xb0>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <__data_size+0x22>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <__data_size+0xa8>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <__data_size+0xac>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <__data_size+0x1e>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <__data_size+0x1e>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <__data_size+0xa0>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <__data_size+0x6a>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <__data_size+0x6a>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <__data_size+0xa4>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <__data_size+0x96>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <__data_size+0x96>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <__data_size+0x6a>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <__data_size+0x96>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <__data_size+0x1e>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <__data_size+0xc0>
     2dc:	b10e      	cbz	r6, 2e2 <__data_size+0xba>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <__data_size+0xe8>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <__data_size+0xce>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <__data_size+0xe4>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <__data_size+0x1ae>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <__data_size+0xd8>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <__data_size+0x1a6>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <__data_size+0x13a>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <__data_size+0x13a>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <__data_size+0x1aa>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <__data_size+0x166>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <__data_size+0x166>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <__data_size+0x180>
     3a2:	d106      	bne.n	3b2 <__data_size+0x18a>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <__data_size+0x18a>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <__data_size+0x1ae>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <__data_size+0xe0>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <__data_size+0x13a>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <__data_size+0x166>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <s_ultrasonic_init>:

const struct device *gpio_dev;
int ret, val;
uint32_t startCycle, stopCycle, deltaCycle, deltaTimeUS;

int s_ultrasonic_init(void) {
     3dc:	b538      	push	{r3, r4, r5, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3de:	4815      	ldr	r0, [pc, #84]	; (434 <CONFIG_FLASH_SIZE+0x34>)
	gpio_dev = device_get_binding("GPIOD");
     3e0:	4d15      	ldr	r5, [pc, #84]	; (438 <CONFIG_FLASH_SIZE+0x38>)
     3e2:	f006 fc93 	bl	6d0c <z_impl_device_get_binding>
     3e6:	6028      	str	r0, [r5, #0]
	if (!gpio_dev) {
     3e8:	b928      	cbnz	r0, 3f6 <s_ultrasonic_init+0x1a>
       // #ifdef _DEBUG_ULTRASONIC
		printk("Cannot init gpio!\n");
     3ea:	4814      	ldr	r0, [pc, #80]	; (43c <CONFIG_FLASH_SIZE+0x3c>)
     3ec:	f007 fe37 	bl	805e <printk>
       // #endif
        return -1;
     3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		printk("Error configuring ECHO\n\r");
       // #endif
        return -3;
	}
    return 0;
}
     3f4:	bd38      	pop	{r3, r4, r5, pc}
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     3f6:	6883      	ldr	r3, [r0, #8]
	ret = gpio_pin_configure(gpio_dev, HCSR04_TRIG_PIN, GPIO_OUTPUT_LOW);
     3f8:	4c11      	ldr	r4, [pc, #68]	; (440 <CONFIG_FLASH_SIZE+0x40>)
     3fa:	681b      	ldr	r3, [r3, #0]
     3fc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
     400:	2121      	movs	r1, #33	; 0x21
     402:	4798      	blx	r3
     404:	6020      	str	r0, [r4, #0]
    if (ret) {
     406:	b128      	cbz	r0, 414 <CONFIG_FLASH_SIZE+0x14>
		printk("Error configuring TRIG\n\r");
     408:	480e      	ldr	r0, [pc, #56]	; (444 <CONFIG_FLASH_SIZE+0x44>)
     40a:	f007 fe28 	bl	805e <printk>
        return -2;
     40e:	f06f 0001 	mvn.w	r0, #1
     412:	e7ef      	b.n	3f4 <s_ultrasonic_init+0x18>
	ret = gpio_pin_configure(gpio_dev, HCSR04_ECHO_PIN, GPIO_INPUT);
     414:	6828      	ldr	r0, [r5, #0]
     416:	6883      	ldr	r3, [r0, #8]
     418:	f44f 7280 	mov.w	r2, #256	; 0x100
     41c:	681b      	ldr	r3, [r3, #0]
     41e:	2122      	movs	r1, #34	; 0x22
     420:	4798      	blx	r3
     422:	6020      	str	r0, [r4, #0]
    if (ret) {
     424:	2800      	cmp	r0, #0
     426:	d0e5      	beq.n	3f4 <s_ultrasonic_init+0x18>
		printk("Error configuring ECHO\n\r");
     428:	4807      	ldr	r0, [pc, #28]	; (448 <CONFIG_FLASH_SIZE+0x48>)
     42a:	f007 fe18 	bl	805e <printk>
        return -3;
     42e:	f06f 0002 	mvn.w	r0, #2
     432:	e7df      	b.n	3f4 <s_ultrasonic_init+0x18>
     434:	0000a29c 	.word	0x0000a29c
     438:	20000688 	.word	0x20000688
     43c:	0000a2a2 	.word	0x0000a2a2
     440:	2000068c 	.word	0x2000068c
     444:	0000a2b5 	.word	0x0000a2b5
     448:	0000a2ce 	.word	0x0000a2ce

0000044c <s_ultrasonic_get_range>:

uint16_t s_ultrasonic_get_range(void) {
     44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    // Send initial 10us pulse
    gpio_pin_set(gpio_dev, HCSR04_TRIG_PIN, true);
     450:	4c23      	ldr	r4, [pc, #140]	; (4e0 <s_ultrasonic_get_range+0x94>)
     452:	2101      	movs	r1, #1
     454:	6820      	ldr	r0, [r4, #0]
     456:	f007 fdda 	bl	800e <gpio_pin_set.constprop.0.isra.0>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     45a:	2100      	movs	r1, #0
     45c:	2001      	movs	r0, #1
     45e:	f007 fb8f 	bl	7b80 <z_impl_k_sleep>
    //delay 10us
    k_sleep(K_NSEC(10000));
    gpio_pin_set(gpio_dev, HCSR04_TRIG_PIN, false);
     462:	6820      	ldr	r0, [r4, #0]

    // Read ECHO pin pulse
    do {
        val = gpio_pin_get(gpio_dev, HCSR04_ECHO_PIN);
     464:	4d1f      	ldr	r5, [pc, #124]	; (4e4 <s_ultrasonic_get_range+0x98>)
    gpio_pin_set(gpio_dev, HCSR04_TRIG_PIN, false);
     466:	2100      	movs	r1, #0
     468:	f007 fdd1 	bl	800e <gpio_pin_set.constprop.0.isra.0>
        val = gpio_pin_get(gpio_dev, HCSR04_ECHO_PIN);
     46c:	6820      	ldr	r0, [r4, #0]
     46e:	f007 fdc6 	bl	7ffe <gpio_pin_get.constprop.0>
     472:	6028      	str	r0, [r5, #0]
    } while (val == 0);
     474:	2800      	cmp	r0, #0
     476:	d0f9      	beq.n	46c <s_ultrasonic_get_range+0x20>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     478:	f008 fef0 	bl	925c <sys_clock_cycle_get_32>
    startCycle = k_cycle_get_32();
     47c:	4e1a      	ldr	r6, [pc, #104]	; (4e8 <s_ultrasonic_get_range+0x9c>)

    // Time the Echo pin pulse
    do {
        val = gpio_pin_get(gpio_dev, HCSR04_ECHO_PIN);
        stopCycle = k_cycle_get_32();
     47e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4ec <s_ultrasonic_get_range+0xa0>
        deltaCycle = stopCycle - startCycle;
     482:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4f0 <s_ultrasonic_get_range+0xa4>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     486:	4f1b      	ldr	r7, [pc, #108]	; (4f4 <s_ultrasonic_get_range+0xa8>)
    startCycle = k_cycle_get_32();
     488:	6030      	str	r0, [r6, #0]
        val = gpio_pin_get(gpio_dev, HCSR04_ECHO_PIN);
     48a:	6820      	ldr	r0, [r4, #0]
     48c:	f007 fdb7 	bl	7ffe <gpio_pin_get.constprop.0>
     490:	6028      	str	r0, [r5, #0]
     492:	f008 fee3 	bl	925c <sys_clock_cycle_get_32>
        deltaCycle = stopCycle - startCycle;
     496:	6833      	ldr	r3, [r6, #0]
        stopCycle = k_cycle_get_32();
     498:	f8c8 0000 	str.w	r0, [r8]
     49c:	2100      	movs	r1, #0
        deltaCycle = stopCycle - startCycle;
     49e:	1ac0      	subs	r0, r0, r3
     4a0:	460a      	mov	r2, r1
     4a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
     4a6:	fbe0 3207 	umlal	r3, r2, r0, r7
     4aa:	0bd9      	lsrs	r1, r3, #15
     4ac:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
        if (k_cyc_to_us_ceil32(deltaCycle)/58 > 450) {
     4b0:	f246 632d 	movw	r3, #26157	; 0x662d
     4b4:	4299      	cmp	r1, r3
        deltaCycle = stopCycle - startCycle;
     4b6:	f8c9 0000 	str.w	r0, [r9]
        if (k_cyc_to_us_ceil32(deltaCycle)/58 > 450) {
     4ba:	d802      	bhi.n	4c2 <s_ultrasonic_get_range+0x76>
            break;
        }
    } while (val == 1);
     4bc:	682b      	ldr	r3, [r5, #0]
     4be:	2b01      	cmp	r3, #1
     4c0:	d0e3      	beq.n	48a <s_ultrasonic_get_range+0x3e>
    
    // Convert clock cycles to time
    deltaTimeUS = k_cyc_to_us_ceil32(deltaCycle);
     4c2:	4d0d      	ldr	r5, [pc, #52]	; (4f8 <s_ultrasonic_get_range+0xac>)
    //#ifdef _DEBUG_ULTRASONIC
        printk("Distance: %d\n\r", deltaTimeUS/58);
     4c4:	480d      	ldr	r0, [pc, #52]	; (4fc <s_ultrasonic_get_range+0xb0>)
    deltaTimeUS = k_cyc_to_us_ceil32(deltaCycle);
     4c6:	6029      	str	r1, [r5, #0]
        printk("Distance: %d\n\r", deltaTimeUS/58);
     4c8:	243a      	movs	r4, #58	; 0x3a
     4ca:	fbb1 f1f4 	udiv	r1, r1, r4
     4ce:	f007 fdc6 	bl	805e <printk>
    //#endif
    return deltaTimeUS/58;
     4d2:	6828      	ldr	r0, [r5, #0]
     4d4:	fbb0 f0f4 	udiv	r0, r0, r4
}
     4d8:	b280      	uxth	r0, r0
     4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     4de:	bf00      	nop
     4e0:	20000688 	.word	0x20000688
     4e4:	20000698 	.word	0x20000698
     4e8:	20000690 	.word	0x20000690
     4ec:	20000694 	.word	0x20000694
     4f0:	20000680 	.word	0x20000680
     4f4:	000f4240 	.word	0x000f4240
     4f8:	20000684 	.word	0x20000684
     4fc:	0000a2e7 	.word	0x0000a2e7

00000500 <ter>:



void ter(void) {
    printk("yea yea yea\n");
     500:	4801      	ldr	r0, [pc, #4]	; (508 <ter+0x8>)
     502:	f007 bdac 	b.w	805e <printk>
     506:	bf00      	nop
     508:	0000a2f6 	.word	0x0000a2f6

0000050c <main>:

}

void main(void)
{
     50c:	b513      	push	{r0, r1, r4, lr}
	// 	}
	// 	k_msleep(SLEEP_TIME_MS);
	// }
	 /* Setup DTR */
    const struct device *console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    uint32_t dtr = 0;
     50e:	2000      	movs	r0, #0
     510:	9001      	str	r0, [sp, #4]

    /* Enable the USB Driver */
    if (usb_enable(NULL))   
     512:	f001 f877 	bl	1604 <usb_enable>
     516:	b9d8      	cbnz	r0, 550 <main+0x44>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     518:	4c0e      	ldr	r4, [pc, #56]	; (554 <main+0x48>)

   /* Wait on DTR - 'Data Terminal Ready'
    * Will wait here until a terminal has been attached to the device
    * This is not necessary, however, can be useful for printing boot info etc..
    */
    while (!dtr) {
     51a:	9b01      	ldr	r3, [sp, #4]
     51c:	b15b      	cbz	r3, 536 <main+0x2a>
        uart_line_ctrl_get(console_dev, UART_LINE_CTRL_DTR, &dtr);
        k_sleep(K_MSEC(100));
    }
    ter();
     51e:	f7ff ffef 	bl	500 <ter>
    s_ultrasonic_init();
     522:	f7ff ff5b 	bl	3dc <s_ultrasonic_init>
    while(1)
    {
       // printk("Hello World\n");
        s_ultrasonic_get_range();
     526:	f7ff ff91 	bl	44c <s_ultrasonic_get_range>
     52a:	2100      	movs	r1, #0
     52c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     530:	f007 fb26 	bl	7b80 <z_impl_k_sleep>
    while(1)
     534:	e7f7      	b.n	526 <main+0x1a>
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
     536:	68a3      	ldr	r3, [r4, #8]
     538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     53a:	b11b      	cbz	r3, 544 <main+0x38>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
     53c:	aa01      	add	r2, sp, #4
     53e:	2104      	movs	r1, #4
     540:	4620      	mov	r0, r4
     542:	4798      	blx	r3
     544:	2100      	movs	r1, #0
     546:	f640 40cd 	movw	r0, #3277	; 0xccd
     54a:	f007 fb19 	bl	7b80 <z_impl_k_sleep>
     54e:	e7e4      	b.n	51a <main+0xe>
        k_sleep(K_MSEC(500));
    }
}
     550:	b002      	add	sp, #8
     552:	bd10      	pop	{r4, pc}
     554:	00009dcc 	.word	0x00009dcc

00000558 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     558:	680b      	ldr	r3, [r1, #0]
     55a:	3301      	adds	r3, #1
     55c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     55e:	4b01      	ldr	r3, [pc, #4]	; (564 <char_out+0xc>)
     560:	681b      	ldr	r3, [r3, #0]
     562:	4718      	bx	r3
     564:	20000000 	.word	0x20000000

00000568 <__printk_hook_install>:
	_char_out = fn;
     568:	4b01      	ldr	r3, [pc, #4]	; (570 <__printk_hook_install+0x8>)
     56a:	6018      	str	r0, [r3, #0]
}
     56c:	4770      	bx	lr
     56e:	bf00      	nop
     570:	20000000 	.word	0x20000000

00000574 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     574:	b507      	push	{r0, r1, r2, lr}
     576:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     578:	2100      	movs	r1, #0
{
     57a:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     57c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     57e:	4803      	ldr	r0, [pc, #12]	; (58c <vprintk+0x18>)
     580:	a901      	add	r1, sp, #4
     582:	f000 f8e5 	bl	750 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     586:	b003      	add	sp, #12
     588:	f85d fb04 	ldr.w	pc, [sp], #4
     58c:	00000559 	.word	0x00000559

00000590 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     594:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     598:	f019 0808 	ands.w	r8, r9, #8
{
     59c:	4604      	mov	r4, r0
     59e:	4693      	mov	fp, r2
	if (processing) {
     5a0:	d00d      	beq.n	5be <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     5a2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5a4:	bf0c      	ite	eq
     5a6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5aa:	f049 0920 	orrne.w	r9, r9, #32
     5ae:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5b2:	f38b 8811 	msr	BASEPRI, fp
     5b6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5be:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     5c2:	2902      	cmp	r1, #2
     5c4:	d107      	bne.n	5d6 <process_event+0x46>
			evt = process_recheck(mgr);
     5c6:	4620      	mov	r0, r4
     5c8:	f007 fd70 	bl	80ac <process_recheck>
		if (evt == EVT_NOP) {
     5cc:	2800      	cmp	r0, #0
     5ce:	d0f0      	beq.n	5b2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     5d0:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d2:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     5d4:	d14e      	bne.n	674 <process_event+0xe4>
			res = mgr->last_res;
     5d6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5d8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     5da:	2f00      	cmp	r7, #0
     5dc:	da15      	bge.n	60a <process_event+0x7a>
		*clients = mgr->clients;
     5de:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     5e4:	e9c4 8800 	strd	r8, r8, [r4]
     5e8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     5ec:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     5ee:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5f0:	8b21      	ldrh	r1, [r4, #24]
     5f2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5f6:	45ca      	cmp	sl, r9
     5f8:	d002      	beq.n	600 <process_event+0x70>
		if (do_monitors
     5fa:	68a3      	ldr	r3, [r4, #8]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d15a      	bne.n	6b6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     600:	b90d      	cbnz	r5, 606 <process_event+0x76>
		    || (transit != NULL)) {
     602:	2e00      	cmp	r6, #0
     604:	d071      	beq.n	6ea <process_event+0x15a>
     606:	2300      	movs	r3, #0
     608:	e056      	b.n	6b8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     60a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     60e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     610:	2a01      	cmp	r2, #1
     612:	d81e      	bhi.n	652 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     614:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     618:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     61a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     61c:	b289      	uxth	r1, r1
     61e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     622:	d10a      	bne.n	63a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     624:	b13d      	cbz	r5, 636 <process_event+0xa6>
     626:	8b63      	ldrh	r3, [r4, #26]
     628:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     62a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     62c:	3301      	adds	r3, #1
     62e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     630:	2a00      	cmp	r2, #0
     632:	d1fa      	bne.n	62a <process_event+0x9a>
     634:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     636:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     63a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     63c:	4620      	mov	r0, r4
     63e:	f007 fd35 	bl	80ac <process_recheck>
     642:	4606      	mov	r6, r0
     644:	2800      	cmp	r0, #0
     646:	d0d3      	beq.n	5f0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     648:	8b23      	ldrh	r3, [r4, #24]
     64a:	f043 0320 	orr.w	r3, r3, #32
     64e:	8323      	strh	r3, [r4, #24]
     650:	e7cd      	b.n	5ee <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     652:	2b04      	cmp	r3, #4
     654:	d10c      	bne.n	670 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     656:	f021 0107 	bic.w	r1, r1, #7
     65a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     65c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     65e:	4620      	mov	r0, r4
     660:	f007 fd24 	bl	80ac <process_recheck>
     664:	4605      	mov	r5, r0
     666:	2800      	cmp	r0, #0
     668:	d0c1      	beq.n	5ee <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     66a:	f041 0120 	orr.w	r1, r1, #32
     66e:	8321      	strh	r1, [r4, #24]
     670:	2500      	movs	r5, #0
     672:	e7bc      	b.n	5ee <process_event+0x5e>
		} else if (evt == EVT_START) {
     674:	2803      	cmp	r0, #3
     676:	d109      	bne.n	68c <process_event+0xfc>
			transit = mgr->transitions->start;
     678:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     67a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     67e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     680:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     684:	8323      	strh	r3, [r4, #24]
}
     686:	2500      	movs	r5, #0
		res = 0;
     688:	462f      	mov	r7, r5
     68a:	e7b1      	b.n	5f0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     68c:	2804      	cmp	r0, #4
     68e:	d106      	bne.n	69e <process_event+0x10e>
			transit = mgr->transitions->stop;
     690:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     692:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     696:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     698:	f043 0304 	orr.w	r3, r3, #4
     69c:	e7f2      	b.n	684 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     69e:	2805      	cmp	r0, #5
     6a0:	d106      	bne.n	6b0 <process_event+0x120>
			transit = mgr->transitions->reset;
     6a2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6a4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     6a8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6aa:	f043 0305 	orr.w	r3, r3, #5
     6ae:	e7e9      	b.n	684 <process_event+0xf4>
     6b0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     6b2:	462e      	mov	r6, r5
     6b4:	e7e8      	b.n	688 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     6b6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6b8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     6bc:	8321      	strh	r1, [r4, #24]
     6be:	f38b 8811 	msr	BASEPRI, fp
     6c2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     6c6:	b9fb      	cbnz	r3, 708 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     6c8:	bb85      	cbnz	r5, 72c <process_event+0x19c>
			if (transit != NULL) {
     6ca:	b116      	cbz	r6, 6d2 <process_event+0x142>
				transit(mgr, transition_complete);
     6cc:	491f      	ldr	r1, [pc, #124]	; (74c <process_event+0x1bc>)
     6ce:	4620      	mov	r0, r4
     6d0:	47b0      	blx	r6
	__asm__ volatile(
     6d2:	f04f 0320 	mov.w	r3, #32
     6d6:	f3ef 8b11 	mrs	fp, BASEPRI
     6da:	f383 8812 	msr	BASEPRI_MAX, r3
     6de:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     6e2:	8b23      	ldrh	r3, [r4, #24]
     6e4:	f023 0308 	bic.w	r3, r3, #8
     6e8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     6ea:	8b23      	ldrh	r3, [r4, #24]
     6ec:	06da      	lsls	r2, r3, #27
     6ee:	d525      	bpl.n	73c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6f0:	f023 0310 	bic.w	r3, r3, #16
     6f4:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     6f6:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     6f8:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     6fc:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     700:	2900      	cmp	r1, #0
     702:	f47f af5e 	bne.w	5c2 <process_event+0x32>
out:
     706:	e754      	b.n	5b2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     708:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     70a:	2900      	cmp	r1, #0
     70c:	d0dc      	beq.n	6c8 <process_event+0x138>
	return node->next;
     70e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     712:	f8d1 b004 	ldr.w	fp, [r1, #4]
     716:	463b      	mov	r3, r7
     718:	4652      	mov	r2, sl
     71a:	4620      	mov	r0, r4
     71c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     71e:	f1b9 0f00 	cmp.w	r9, #0
     722:	d0d1      	beq.n	6c8 <process_event+0x138>
     724:	4649      	mov	r1, r9
     726:	f8d9 9000 	ldr.w	r9, [r9]
     72a:	e7f2      	b.n	712 <process_event+0x182>
     72c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     72e:	463b      	mov	r3, r7
     730:	4652      	mov	r2, sl
     732:	4620      	mov	r0, r4
     734:	682d      	ldr	r5, [r5, #0]
     736:	f007 fcd5 	bl	80e4 <notify_one>
     73a:	e7c5      	b.n	6c8 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     73c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     740:	bf1e      	ittt	ne
     742:	f023 0320 	bicne.w	r3, r3, #32
     746:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     748:	2102      	movne	r1, #2
     74a:	e7d5      	b.n	6f8 <process_event+0x168>
     74c:	00008111 	.word	0x00008111

00000750 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     754:	b091      	sub	sp, #68	; 0x44
     756:	468b      	mov	fp, r1
     758:	9002      	str	r0, [sp, #8]
     75a:	4692      	mov	sl, r2
     75c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     75e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     760:	f89a 0000 	ldrb.w	r0, [sl]
     764:	b908      	cbnz	r0, 76a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     766:	4628      	mov	r0, r5
     768:	e35f      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		if (*fp != '%') {
     76a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     76c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     770:	d007      	beq.n	782 <cbvprintf+0x32>
			OUTC('%');
     772:	9b02      	ldr	r3, [sp, #8]
     774:	4659      	mov	r1, fp
     776:	4798      	blx	r3
     778:	2800      	cmp	r0, #0
     77a:	f2c0 8356 	blt.w	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     77e:	3501      	adds	r5, #1
			break;
     780:	e212      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
		} state = {
     782:	2218      	movs	r2, #24
     784:	2100      	movs	r1, #0
     786:	a80a      	add	r0, sp, #40	; 0x28
     788:	f008 f9e3 	bl	8b52 <memset>
	if (*sp == '%') {
     78c:	f89a 3001 	ldrb.w	r3, [sl, #1]
     790:	2b25      	cmp	r3, #37	; 0x25
     792:	d078      	beq.n	886 <CONFIG_ISR_STACK_SIZE+0x86>
     794:	2200      	movs	r2, #0
     796:	4610      	mov	r0, r2
     798:	4696      	mov	lr, r2
     79a:	4694      	mov	ip, r2
     79c:	4616      	mov	r6, r2
     79e:	4639      	mov	r1, r7
		switch (*sp) {
     7a0:	f817 3b01 	ldrb.w	r3, [r7], #1
     7a4:	2b2b      	cmp	r3, #43	; 0x2b
     7a6:	f000 809d 	beq.w	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     7aa:	f200 8094 	bhi.w	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
     7ae:	2b20      	cmp	r3, #32
     7b0:	f000 809b 	beq.w	8ea <CONFIG_ISR_STACK_SIZE+0xea>
     7b4:	2b23      	cmp	r3, #35	; 0x23
     7b6:	f000 809b 	beq.w	8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
     7ba:	b12e      	cbz	r6, 7c8 <cbvprintf+0x78>
     7bc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     7c0:	f046 0604 	orr.w	r6, r6, #4
     7c4:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     7c8:	f1bc 0f00 	cmp.w	ip, #0
     7cc:	d005      	beq.n	7da <cbvprintf+0x8a>
     7ce:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     7d2:	f046 0608 	orr.w	r6, r6, #8
     7d6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     7da:	f1be 0f00 	cmp.w	lr, #0
     7de:	d005      	beq.n	7ec <cbvprintf+0x9c>
     7e0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     7e4:	f046 0610 	orr.w	r6, r6, #16
     7e8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     7ec:	b128      	cbz	r0, 7fa <cbvprintf+0xaa>
     7ee:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     7f2:	f040 0020 	orr.w	r0, r0, #32
     7f6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     7fa:	b12a      	cbz	r2, 808 <CONFIG_ISR_STACK_SIZE+0x8>
     7fc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     804:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     808:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     80c:	f002 0044 	and.w	r0, r2, #68	; 0x44
     810:	2844      	cmp	r0, #68	; 0x44
     812:	d103      	bne.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
		conv->flag_zero = false;
     814:	f36f 1286 	bfc	r2, #6, #1
     818:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     81c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     820:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     826:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     82a:	d17b      	bne.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
		conv->width_star = true;
     82c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     830:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     834:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     836:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     83a:	781a      	ldrb	r2, [r3, #0]
     83c:	2a2e      	cmp	r2, #46	; 0x2e
     83e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     842:	bf0c      	ite	eq
     844:	2101      	moveq	r1, #1
     846:	2100      	movne	r1, #0
     848:	f361 0241 	bfi	r2, r1, #1, #1
     84c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     850:	d174      	bne.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
	if (*sp == '*') {
     852:	785a      	ldrb	r2, [r3, #1]
     854:	2a2a      	cmp	r2, #42	; 0x2a
     856:	d06a      	beq.n	92e <CONFIG_ISR_STACK_SIZE+0x12e>
	++sp;
     858:	3301      	adds	r3, #1
	size_t val = 0;
     85a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     85c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     85e:	4618      	mov	r0, r3
     860:	f810 2b01 	ldrb.w	r2, [r0], #1
     864:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     868:	2f09      	cmp	r7, #9
     86a:	f240 808e 	bls.w	98a <CONFIG_ISR_STACK_SIZE+0x18a>
	conv->unsupported |= ((conv->prec_value < 0)
     86e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     872:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     874:	f3c2 0040 	ubfx	r0, r2, #1, #1
     878:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     87c:	f361 0241 	bfi	r2, r1, #1, #1
     880:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     884:	e05a      	b.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
		conv->specifier = *sp++;
     886:	f10a 0702 	add.w	r7, sl, #2
     88a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     88e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     892:	07d9      	lsls	r1, r3, #31
     894:	f140 8149 	bpl.w	b2a <CONFIG_ISR_STACK_SIZE+0x32a>
			width = va_arg(ap, int);
     898:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     89c:	f1b9 0f00 	cmp.w	r9, #0
     8a0:	da07      	bge.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
				conv->flag_dash = true;
     8a2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     8a6:	f042 0204 	orr.w	r2, r2, #4
     8aa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     8ae:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     8b2:	075a      	lsls	r2, r3, #29
     8b4:	f140 8142 	bpl.w	b3c <CONFIG_ISR_STACK_SIZE+0x33c>
			int arg = va_arg(ap, int);
     8b8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     8bc:	f1b8 0f00 	cmp.w	r8, #0
     8c0:	f280 8141 	bge.w	b46 <CONFIG_ISR_STACK_SIZE+0x346>
				conv->prec_present = false;
     8c4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8c8:	f36f 0341 	bfc	r3, #1, #1
     8cc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     8d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     8d4:	e137      	b.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
		switch (*sp) {
     8d6:	2b2d      	cmp	r3, #45	; 0x2d
     8d8:	d00c      	beq.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	2b30      	cmp	r3, #48	; 0x30
     8dc:	f47f af6d 	bne.w	7ba <cbvprintf+0x6a>
			conv->flag_zero = true;
     8e0:	2201      	movs	r2, #1
	} while (loop);
     8e2:	e75c      	b.n	79e <cbvprintf+0x4e>
			conv->flag_plus = true;
     8e4:	f04f 0c01 	mov.w	ip, #1
     8e8:	e759      	b.n	79e <cbvprintf+0x4e>
			conv->flag_space = true;
     8ea:	f04f 0e01 	mov.w	lr, #1
     8ee:	e756      	b.n	79e <cbvprintf+0x4e>
			conv->flag_hash = true;
     8f0:	2001      	movs	r0, #1
     8f2:	e754      	b.n	79e <cbvprintf+0x4e>
		switch (*sp) {
     8f4:	2601      	movs	r6, #1
     8f6:	e752      	b.n	79e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     8f8:	fb0c 0202 	mla	r2, ip, r2, r0
     8fc:	3a30      	subs	r2, #48	; 0x30
     8fe:	4633      	mov	r3, r6
     900:	461e      	mov	r6, r3
     902:	f816 0b01 	ldrb.w	r0, [r6], #1
     906:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     90a:	2f09      	cmp	r7, #9
     90c:	d9f4      	bls.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
	if (sp != wp) {
     90e:	4299      	cmp	r1, r3
     910:	d093      	beq.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
		conv->unsupported |= ((conv->width_value < 0)
     912:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     916:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     918:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     91a:	f362 0141 	bfi	r1, r2, #1, #1
     91e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     922:	e78a      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     924:	460b      	mov	r3, r1
	size_t val = 0;
     926:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     928:	f04f 0c0a 	mov.w	ip, #10
     92c:	e7e8      	b.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
		conv->prec_star = true;
     92e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     932:	f042 0204 	orr.w	r2, r2, #4
     936:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     93a:	3302      	adds	r3, #2
	switch (*sp) {
     93c:	461f      	mov	r7, r3
     93e:	f817 2b01 	ldrb.w	r2, [r7], #1
     942:	2a6c      	cmp	r2, #108	; 0x6c
     944:	d041      	beq.n	9ca <CONFIG_ISR_STACK_SIZE+0x1ca>
     946:	d825      	bhi.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
     948:	2a68      	cmp	r2, #104	; 0x68
     94a:	d02b      	beq.n	9a4 <CONFIG_ISR_STACK_SIZE+0x1a4>
     94c:	2a6a      	cmp	r2, #106	; 0x6a
     94e:	d046      	beq.n	9de <CONFIG_ISR_STACK_SIZE+0x1de>
     950:	2a4c      	cmp	r2, #76	; 0x4c
     952:	d04c      	beq.n	9ee <CONFIG_ISR_STACK_SIZE+0x1ee>
     954:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     956:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     95a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     95e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     962:	2a78      	cmp	r2, #120	; 0x78
     964:	f200 80d9 	bhi.w	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
     968:	2a57      	cmp	r2, #87	; 0x57
     96a:	d84d      	bhi.n	a08 <CONFIG_ISR_STACK_SIZE+0x208>
     96c:	2a41      	cmp	r2, #65	; 0x41
     96e:	d003      	beq.n	978 <CONFIG_ISR_STACK_SIZE+0x178>
     970:	3a45      	subs	r2, #69	; 0x45
     972:	2a02      	cmp	r2, #2
     974:	f200 80d1 	bhi.w	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
		conv->specifier_cat = SPECIFIER_FP;
     978:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     97c:	2204      	movs	r2, #4
     97e:	f362 0302 	bfi	r3, r2, #0, #3
     982:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     986:	2301      	movs	r3, #1
			break;
     988:	e09e      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
		val = 10U * val + *sp++ - '0';
     98a:	fb06 2101 	mla	r1, r6, r1, r2
     98e:	3930      	subs	r1, #48	; 0x30
     990:	4603      	mov	r3, r0
     992:	e764      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
	switch (*sp) {
     994:	2a74      	cmp	r2, #116	; 0x74
     996:	d026      	beq.n	9e6 <CONFIG_ISR_STACK_SIZE+0x1e6>
     998:	2a7a      	cmp	r2, #122	; 0x7a
     99a:	d1db      	bne.n	954 <CONFIG_ISR_STACK_SIZE+0x154>
		conv->length_mod = LENGTH_Z;
     99c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     9a0:	2206      	movs	r2, #6
     9a2:	e00d      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		if (*++sp == 'h') {
     9a4:	785a      	ldrb	r2, [r3, #1]
     9a6:	2a68      	cmp	r2, #104	; 0x68
     9a8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9ac:	d106      	bne.n	9bc <CONFIG_ISR_STACK_SIZE+0x1bc>
			conv->length_mod = LENGTH_HH;
     9ae:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     9b0:	f361 02c6 	bfi	r2, r1, #3, #4
     9b4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     9b8:	1c9f      	adds	r7, r3, #2
     9ba:	e7cc      	b.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
			conv->length_mod = LENGTH_H;
     9bc:	4613      	mov	r3, r2
     9be:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     9c0:	f362 03c6 	bfi	r3, r2, #3, #4
     9c4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     9c8:	e7c5      	b.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
		if (*++sp == 'l') {
     9ca:	785a      	ldrb	r2, [r3, #1]
     9cc:	2a6c      	cmp	r2, #108	; 0x6c
     9ce:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9d2:	d101      	bne.n	9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
			conv->length_mod = LENGTH_LL;
     9d4:	2104      	movs	r1, #4
     9d6:	e7eb      	b.n	9b0 <CONFIG_ISR_STACK_SIZE+0x1b0>
			conv->length_mod = LENGTH_L;
     9d8:	4613      	mov	r3, r2
     9da:	2203      	movs	r2, #3
     9dc:	e7f0      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		conv->length_mod = LENGTH_J;
     9de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     9e2:	2205      	movs	r2, #5
     9e4:	e7ec      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		conv->length_mod = LENGTH_T;
     9e6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     9ea:	2207      	movs	r2, #7
     9ec:	e7e8      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		conv->unsupported = true;
     9ee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     9f2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     9f6:	f023 0302 	bic.w	r3, r3, #2
     9fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     9fe:	f043 0302 	orr.w	r3, r3, #2
     a02:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     a06:	e7a6      	b.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
	switch (conv->specifier) {
     a08:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     a0c:	2920      	cmp	r1, #32
     a0e:	f200 8084 	bhi.w	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
     a12:	a001      	add	r0, pc, #4	; (adr r0, a18 <CONFIG_ISR_STACK_SIZE+0x218>)
     a14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     a18:	00000add 	.word	0x00000add
     a1c:	00000b1b 	.word	0x00000b1b
     a20:	00000b1b 	.word	0x00000b1b
     a24:	00000b1b 	.word	0x00000b1b
     a28:	00000b1b 	.word	0x00000b1b
     a2c:	00000b1b 	.word	0x00000b1b
     a30:	00000b1b 	.word	0x00000b1b
     a34:	00000b1b 	.word	0x00000b1b
     a38:	00000b1b 	.word	0x00000b1b
     a3c:	00000979 	.word	0x00000979
     a40:	00000b1b 	.word	0x00000b1b
     a44:	00000add 	.word	0x00000add
     a48:	00000a9d 	.word	0x00000a9d
     a4c:	00000979 	.word	0x00000979
     a50:	00000979 	.word	0x00000979
     a54:	00000979 	.word	0x00000979
     a58:	00000b1b 	.word	0x00000b1b
     a5c:	00000a9d 	.word	0x00000a9d
     a60:	00000b1b 	.word	0x00000b1b
     a64:	00000b1b 	.word	0x00000b1b
     a68:	00000b1b 	.word	0x00000b1b
     a6c:	00000b1b 	.word	0x00000b1b
     a70:	00000ae5 	.word	0x00000ae5
     a74:	00000add 	.word	0x00000add
     a78:	00000b01 	.word	0x00000b01
     a7c:	00000b1b 	.word	0x00000b1b
     a80:	00000b1b 	.word	0x00000b1b
     a84:	00000b01 	.word	0x00000b01
     a88:	00000b1b 	.word	0x00000b1b
     a8c:	00000add 	.word	0x00000add
     a90:	00000b1b 	.word	0x00000b1b
     a94:	00000b1b 	.word	0x00000b1b
     a98:	00000add 	.word	0x00000add
		conv->specifier_cat = SPECIFIER_SINT;
     a9c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     aa0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     aa2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     aa6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     aaa:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     aac:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     ab0:	bf02      	ittt	eq
     ab2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     ab6:	f041 0101 	orreq.w	r1, r1, #1
     aba:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     abe:	2a63      	cmp	r2, #99	; 0x63
     ac0:	d131      	bne.n	b26 <CONFIG_ISR_STACK_SIZE+0x326>
			unsupported = (conv->length_mod != LENGTH_NONE);
     ac2:	3b00      	subs	r3, #0
     ac4:	bf18      	it	ne
     ac6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     ac8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     acc:	f3c2 0140 	ubfx	r1, r2, #1, #1
     ad0:	430b      	orrs	r3, r1
     ad2:	f363 0241 	bfi	r2, r3, #1, #1
     ad6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     ada:	e6d8      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
		conv->specifier_cat = SPECIFIER_UINT;
     adc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     ae0:	2002      	movs	r0, #2
     ae2:	e7de      	b.n	aa2 <CONFIG_ISR_STACK_SIZE+0x2a2>
		conv->specifier_cat = SPECIFIER_PTR;
     ae4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     ae8:	f003 0378 	and.w	r3, r3, #120	; 0x78
     aec:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     af0:	2103      	movs	r1, #3
     af2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     af6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     af8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     afc:	4143      	adcs	r3, r0
     afe:	e7e3      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
		conv->specifier_cat = SPECIFIER_PTR;
     b00:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     b04:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     b06:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     b0a:	f361 0202 	bfi	r2, r1, #0, #3
     b0e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     b12:	bf14      	ite	ne
     b14:	2301      	movne	r3, #1
     b16:	2300      	moveq	r3, #0
     b18:	e7d6      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
		conv->invalid = true;
     b1a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     b1e:	f043 0301 	orr.w	r3, r3, #1
     b22:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     b26:	2300      	movs	r3, #0
     b28:	e7ce      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
		} else if (conv->width_present) {
     b2a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     b2e:	2a00      	cmp	r2, #0
			width = conv->width_value;
     b30:	bfb4      	ite	lt
     b32:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     b36:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     b3a:	e6ba      	b.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
		} else if (conv->prec_present) {
     b3c:	079b      	lsls	r3, r3, #30
     b3e:	f57f aec7 	bpl.w	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
			precision = conv->prec_value;
     b42:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     b46:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     b4a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     b4c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     b50:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     b54:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     b58:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     b5a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     b5e:	d138      	bne.n	bd2 <CONFIG_ISR_STACK_SIZE+0x3d2>
			switch (length_mod) {
     b60:	1ecb      	subs	r3, r1, #3
     b62:	2b04      	cmp	r3, #4
     b64:	d822      	bhi.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
     b66:	e8df f003 	tbb	[pc, r3]
     b6a:	0903      	.short	0x0903
     b6c:	2109      	.short	0x2109
     b6e:	21          	.byte	0x21
     b6f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     b70:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     b74:	17da      	asrs	r2, r3, #31
     b76:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     b7a:	e006      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
					(sint_value_type)va_arg(ap, intmax_t);
     b7c:	3407      	adds	r4, #7
     b7e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     b82:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     b8a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     b8e:	f013 0603 	ands.w	r6, r3, #3
     b92:	d056      	beq.n	c42 <CONFIG_ISR_STACK_SIZE+0x442>
			OUTS(sp, fp);
     b94:	9802      	ldr	r0, [sp, #8]
     b96:	463b      	mov	r3, r7
     b98:	4652      	mov	r2, sl
     b9a:	4659      	mov	r1, fp
     b9c:	f007 fd88 	bl	86b0 <outs>
     ba0:	2800      	cmp	r0, #0
     ba2:	f2c0 8142 	blt.w	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     ba6:	4405      	add	r5, r0
			continue;
     ba8:	46ba      	mov	sl, r7
     baa:	e5d9      	b.n	760 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     bac:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     bb0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     bb2:	ea4f 72e3 	mov.w	r2, r3, asr #31
     bb6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     bba:	d105      	bne.n	bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
				value->uint = (unsigned char)value->uint;
     bbc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     bc0:	930a      	str	r3, [sp, #40]	; 0x28
     bc2:	2300      	movs	r3, #0
     bc4:	930b      	str	r3, [sp, #44]	; 0x2c
     bc6:	e7e0      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
			} else if (length_mod == LENGTH_H) {
     bc8:	2902      	cmp	r1, #2
     bca:	d1de      	bne.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
				value->sint = (short)value->sint;
     bcc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     bd0:	e7d0      	b.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
		} else if (specifier_cat == SPECIFIER_UINT) {
     bd2:	2b02      	cmp	r3, #2
     bd4:	d123      	bne.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
			switch (length_mod) {
     bd6:	1ecb      	subs	r3, r1, #3
     bd8:	2b04      	cmp	r3, #4
     bda:	d813      	bhi.n	c04 <CONFIG_ISR_STACK_SIZE+0x404>
     bdc:	e8df f003 	tbb	[pc, r3]
     be0:	120a0a03 	.word	0x120a0a03
     be4:	12          	.byte	0x12
     be5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     be6:	6822      	ldr	r2, [r4, #0]
     be8:	920a      	str	r2, [sp, #40]	; 0x28
     bea:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     bec:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     bee:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     bf0:	4604      	mov	r4, r0
     bf2:	e7ca      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
					(uint_value_type)va_arg(ap,
     bf4:	1de0      	adds	r0, r4, #7
     bf6:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     bfa:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     bfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     c02:	e7f5      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
					(uint_value_type)va_arg(ap, size_t);
     c04:	f854 3b04 	ldr.w	r3, [r4], #4
     c08:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     c0a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     c0c:	f04f 0300 	mov.w	r3, #0
     c10:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     c12:	d0d3      	beq.n	bbc <CONFIG_ISR_STACK_SIZE+0x3bc>
			} else if (length_mod == LENGTH_H) {
     c14:	2902      	cmp	r1, #2
     c16:	d1b8      	bne.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
				value->uint = (unsigned short)value->uint;
     c18:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     c1c:	e7d0      	b.n	bc0 <CONFIG_ISR_STACK_SIZE+0x3c0>
		} else if (specifier_cat == SPECIFIER_FP) {
     c1e:	2b04      	cmp	r3, #4
     c20:	d109      	bne.n	c36 <CONFIG_ISR_STACK_SIZE+0x436>
					(sint_value_type)va_arg(ap, long long);
     c22:	1de3      	adds	r3, r4, #7
     c24:	f023 0307 	bic.w	r3, r3, #7
     c28:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
     c30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     c34:	e7a9      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     c36:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     c38:	bf04      	itt	eq
     c3a:	f854 3b04 	ldreq.w	r3, [r4], #4
     c3e:	930a      	streq	r3, [sp, #40]	; 0x28
     c40:	e7a3      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
		switch (conv->specifier) {
     c42:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     c46:	2878      	cmp	r0, #120	; 0x78
     c48:	d8ae      	bhi.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
     c4a:	2862      	cmp	r0, #98	; 0x62
     c4c:	d822      	bhi.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     c4e:	2825      	cmp	r0, #37	; 0x25
     c50:	f43f ad8f 	beq.w	772 <cbvprintf+0x22>
     c54:	2858      	cmp	r0, #88	; 0x58
     c56:	d1a7      	bne.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			bps = encode_uint(value->uint, conv, buf, bpe);
     c58:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c5c:	9300      	str	r3, [sp, #0]
     c5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     c62:	ab04      	add	r3, sp, #16
     c64:	aa0c      	add	r2, sp, #48	; 0x30
     c66:	f007 fcdd 	bl	8624 <encode_uint>
     c6a:	4682      	mov	sl, r0
			if (precision >= 0) {
     c6c:	f1b8 0f00 	cmp.w	r8, #0
     c70:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     c74:	db0c      	blt.n	c90 <CONFIG_ISR_STACK_SIZE+0x490>
				conv->flag_zero = false;
     c76:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     c7a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     c7e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     c82:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     c84:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     c88:	d902      	bls.n	c90 <CONFIG_ISR_STACK_SIZE+0x490>
					conv->pad0_value = precision - (int)len;
     c8a:	eba8 0303 	sub.w	r3, r8, r3
     c8e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     c90:	4680      	mov	r8, r0
     c92:	e03d      	b.n	d10 <CONFIG_ISR_STACK_SIZE+0x510>
		switch (conv->specifier) {
     c94:	3863      	subs	r0, #99	; 0x63
     c96:	2815      	cmp	r0, #21
     c98:	d886      	bhi.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
     c9a:	a201      	add	r2, pc, #4	; (adr r2, ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>)
     c9c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     ca0:	00000d21 	.word	0x00000d21
     ca4:	00000d85 	.word	0x00000d85
     ca8:	00000ba9 	.word	0x00000ba9
     cac:	00000ba9 	.word	0x00000ba9
     cb0:	00000ba9 	.word	0x00000ba9
     cb4:	00000ba9 	.word	0x00000ba9
     cb8:	00000d85 	.word	0x00000d85
     cbc:	00000ba9 	.word	0x00000ba9
     cc0:	00000ba9 	.word	0x00000ba9
     cc4:	00000ba9 	.word	0x00000ba9
     cc8:	00000ba9 	.word	0x00000ba9
     ccc:	00000ddf 	.word	0x00000ddf
     cd0:	00000dad 	.word	0x00000dad
     cd4:	00000db1 	.word	0x00000db1
     cd8:	00000ba9 	.word	0x00000ba9
     cdc:	00000ba9 	.word	0x00000ba9
     ce0:	00000cf9 	.word	0x00000cf9
     ce4:	00000ba9 	.word	0x00000ba9
     ce8:	00000dad 	.word	0x00000dad
     cec:	00000ba9 	.word	0x00000ba9
     cf0:	00000ba9 	.word	0x00000ba9
     cf4:	00000dad 	.word	0x00000dad
			if (precision >= 0) {
     cf8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     cfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     d00:	db0a      	blt.n	d18 <CONFIG_ISR_STACK_SIZE+0x518>
				len = strnlen(bps, precision);
     d02:	4641      	mov	r1, r8
     d04:	4650      	mov	r0, sl
     d06:	f007 ff04 	bl	8b12 <strnlen>
			bpe = bps + len;
     d0a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     d0e:	2600      	movs	r6, #0
		if (bps == NULL) {
     d10:	f1ba 0f00 	cmp.w	sl, #0
     d14:	d10c      	bne.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     d16:	e747      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
				len = strlen(bps);
     d18:	4650      	mov	r0, sl
     d1a:	f007 fef3 	bl	8b04 <strlen>
     d1e:	e7f4      	b.n	d0a <CONFIG_ISR_STACK_SIZE+0x50a>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     d22:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     d26:	2600      	movs	r6, #0
			bps = buf;
     d28:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
     d2c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     d30:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     d34:	b106      	cbz	r6, d38 <CONFIG_ISR_STACK_SIZE+0x538>
			nj_len += 1U;
     d36:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     d38:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     d3c:	06d0      	lsls	r0, r2, #27
     d3e:	d568      	bpl.n	e12 <CONFIG_ISR_STACK_SIZE+0x612>
			nj_len += 2U;
     d40:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     d42:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     d44:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     d46:	bf48      	it	mi
     d48:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     d4a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     d4c:	bf48      	it	mi
     d4e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     d50:	f1b9 0f00 	cmp.w	r9, #0
     d54:	dd76      	ble.n	e44 <CONFIG_ISR_STACK_SIZE+0x644>
			if (!conv->flag_dash) {
     d56:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     d5a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     d5e:	f3c2 0380 	ubfx	r3, r2, #2, #1
     d62:	9303      	str	r3, [sp, #12]
     d64:	0753      	lsls	r3, r2, #29
     d66:	d46d      	bmi.n	e44 <CONFIG_ISR_STACK_SIZE+0x644>
				if (conv->flag_zero) {
     d68:	0650      	lsls	r0, r2, #25
     d6a:	d561      	bpl.n	e30 <CONFIG_ISR_STACK_SIZE+0x630>
					if (sign != 0) {
     d6c:	b146      	cbz	r6, d80 <CONFIG_ISR_STACK_SIZE+0x580>
						OUTC(sign);
     d6e:	9b02      	ldr	r3, [sp, #8]
     d70:	4659      	mov	r1, fp
     d72:	4630      	mov	r0, r6
     d74:	4798      	blx	r3
     d76:	2800      	cmp	r0, #0
     d78:	db57      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
						sign = 0;
     d7a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     d7c:	3501      	adds	r5, #1
						sign = 0;
     d7e:	461e      	mov	r6, r3
					pad = '0';
     d80:	2330      	movs	r3, #48	; 0x30
     d82:	e056      	b.n	e32 <CONFIG_ISR_STACK_SIZE+0x632>
			if (conv->flag_plus) {
     d84:	071e      	lsls	r6, r3, #28
     d86:	d40f      	bmi.n	da8 <CONFIG_ISR_STACK_SIZE+0x5a8>
				sign = ' ';
     d88:	f013 0610 	ands.w	r6, r3, #16
     d8c:	bf18      	it	ne
     d8e:	2620      	movne	r6, #32
			sint = value->sint;
     d90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     d94:	2b00      	cmp	r3, #0
     d96:	f6bf af5f 	bge.w	c58 <CONFIG_ISR_STACK_SIZE+0x458>
				value->uint = (uint_value_type)-sint;
     d9a:	4252      	negs	r2, r2
     d9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     da0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     da4:	262d      	movs	r6, #45	; 0x2d
     da6:	e757      	b.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
				sign = '+';
     da8:	262b      	movs	r6, #43	; 0x2b
     daa:	e7f1      	b.n	d90 <CONFIG_ISR_STACK_SIZE+0x590>
		switch (conv->specifier) {
     dac:	2600      	movs	r6, #0
     dae:	e753      	b.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
			if (value->ptr != NULL) {
     db0:	980a      	ldr	r0, [sp, #40]	; 0x28
     db2:	b340      	cbz	r0, e06 <CONFIG_ISR_STACK_SIZE+0x606>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     db4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     db8:	9300      	str	r3, [sp, #0]
     dba:	aa0c      	add	r2, sp, #48	; 0x30
     dbc:	ab04      	add	r3, sp, #16
     dbe:	2100      	movs	r1, #0
     dc0:	f007 fc30 	bl	8624 <encode_uint>
				conv->altform_0c = true;
     dc4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     dc8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     dcc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     dd0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     dd4:	4682      	mov	sl, r0
				conv->altform_0c = true;
     dd6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     dda:	2600      	movs	r6, #0
				goto prec_int_pad0;
     ddc:	e746      	b.n	c6c <CONFIG_ISR_STACK_SIZE+0x46c>
				store_count(conv, value->ptr, count);
     dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     de0:	2907      	cmp	r1, #7
     de2:	f63f aee1 	bhi.w	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
     de6:	e8df f001 	tbb	[pc, r1]
     dea:	040c      	.short	0x040c
     dec:	08080c06 	.word	0x08080c06
     df0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     df2:	701d      	strb	r5, [r3, #0]
		break;
     df4:	e6d8      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
		*(short *)dp = (short)count;
     df6:	801d      	strh	r5, [r3, #0]
		break;
     df8:	e6d6      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
		*(intmax_t *)dp = (intmax_t)count;
     dfa:	17ea      	asrs	r2, r5, #31
     dfc:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     e00:	e6d2      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e02:	601d      	str	r5, [r3, #0]
		break;
     e04:	e6d0      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			bps = "(nil)";
     e06:	f8df a0c8 	ldr.w	sl, [pc, #200]	; ed0 <CONFIG_ISR_STACK_SIZE+0x6d0>
     e0a:	4606      	mov	r6, r0
			bpe = bps + 5;
     e0c:	f10a 0805 	add.w	r8, sl, #5
     e10:	e78e      	b.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
		} else if (conv->altform_0) {
     e12:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     e14:	bf48      	it	mi
     e16:	3301      	addmi	r3, #1
     e18:	e793      	b.n	d42 <CONFIG_ISR_STACK_SIZE+0x542>
					OUTC(pad);
     e1a:	4618      	mov	r0, r3
     e1c:	9303      	str	r3, [sp, #12]
     e1e:	4659      	mov	r1, fp
     e20:	9b02      	ldr	r3, [sp, #8]
     e22:	4798      	blx	r3
     e24:	2800      	cmp	r0, #0
     e26:	9b03      	ldr	r3, [sp, #12]
     e28:	da04      	bge.n	e34 <CONFIG_ISR_STACK_SIZE+0x634>
#undef OUTS
#undef OUTC
}
     e2a:	b011      	add	sp, #68	; 0x44
     e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     e30:	2320      	movs	r3, #32
     e32:	444d      	add	r5, r9
     e34:	464a      	mov	r2, r9
				while (width-- > 0) {
     e36:	2a00      	cmp	r2, #0
     e38:	eba5 0109 	sub.w	r1, r5, r9
     e3c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     e40:	dceb      	bgt.n	e1a <CONFIG_ISR_STACK_SIZE+0x61a>
     e42:	460d      	mov	r5, r1
		if (sign != 0) {
     e44:	b136      	cbz	r6, e54 <CONFIG_ISR_STACK_SIZE+0x654>
			OUTC(sign);
     e46:	9b02      	ldr	r3, [sp, #8]
     e48:	4659      	mov	r1, fp
     e4a:	4630      	mov	r0, r6
     e4c:	4798      	blx	r3
     e4e:	2800      	cmp	r0, #0
     e50:	dbeb      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     e52:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     e54:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     e58:	06d9      	lsls	r1, r3, #27
     e5a:	d401      	bmi.n	e60 <CONFIG_ISR_STACK_SIZE+0x660>
     e5c:	071a      	lsls	r2, r3, #28
     e5e:	d506      	bpl.n	e6e <CONFIG_ISR_STACK_SIZE+0x66e>
				OUTC('0');
     e60:	9b02      	ldr	r3, [sp, #8]
     e62:	4659      	mov	r1, fp
     e64:	2030      	movs	r0, #48	; 0x30
     e66:	4798      	blx	r3
     e68:	2800      	cmp	r0, #0
     e6a:	dbde      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     e6c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     e6e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     e72:	06db      	lsls	r3, r3, #27
     e74:	d507      	bpl.n	e86 <CONFIG_ISR_STACK_SIZE+0x686>
				OUTC(conv->specifier);
     e76:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     e7a:	9b02      	ldr	r3, [sp, #8]
     e7c:	4659      	mov	r1, fp
     e7e:	4798      	blx	r3
     e80:	2800      	cmp	r0, #0
     e82:	dbd2      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     e84:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     e86:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     e88:	442e      	add	r6, r5
     e8a:	1b73      	subs	r3, r6, r5
     e8c:	2b00      	cmp	r3, #0
     e8e:	dc16      	bgt.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
			OUTS(bps, bpe);
     e90:	9802      	ldr	r0, [sp, #8]
     e92:	4643      	mov	r3, r8
     e94:	4652      	mov	r2, sl
     e96:	4659      	mov	r1, fp
     e98:	f007 fc0a 	bl	86b0 <outs>
     e9c:	2800      	cmp	r0, #0
     e9e:	dbc4      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     ea0:	4405      	add	r5, r0
		while (width > 0) {
     ea2:	44a9      	add	r9, r5
     ea4:	eba9 0305 	sub.w	r3, r9, r5
     ea8:	2b00      	cmp	r3, #0
     eaa:	f77f ae7d 	ble.w	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			OUTC(' ');
     eae:	9b02      	ldr	r3, [sp, #8]
     eb0:	4659      	mov	r1, fp
     eb2:	2020      	movs	r0, #32
     eb4:	4798      	blx	r3
     eb6:	2800      	cmp	r0, #0
     eb8:	dbb7      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     eba:	3501      	adds	r5, #1
			--width;
     ebc:	e7f2      	b.n	ea4 <CONFIG_ISR_STACK_SIZE+0x6a4>
				OUTC('0');
     ebe:	9b02      	ldr	r3, [sp, #8]
     ec0:	4659      	mov	r1, fp
     ec2:	2030      	movs	r0, #48	; 0x30
     ec4:	4798      	blx	r3
     ec6:	2800      	cmp	r0, #0
     ec8:	dbaf      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     eca:	3501      	adds	r5, #1
     ecc:	e7dd      	b.n	e8a <CONFIG_ISR_STACK_SIZE+0x68a>
     ece:	bf00      	nop
     ed0:	0000a303 	.word	0x0000a303

00000ed4 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
     ed4:	4b0c      	ldr	r3, [pc, #48]	; (f08 <class_handler+0x34>)
{
     ed6:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
     ed8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
     eda:	4e0c      	ldr	r6, [pc, #48]	; (f0c <class_handler+0x38>)
     edc:	4b0c      	ldr	r3, [pc, #48]	; (f10 <class_handler+0x3c>)
     ede:	42b3      	cmp	r3, r6
     ee0:	d303      	bcc.n	eea <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
     ee2:	f06f 0085 	mvn.w	r0, #133	; 0x85
     ee6:	bcf0      	pop	{r4, r5, r6, r7}
     ee8:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
     eea:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
     eec:	42bd      	cmp	r5, r7
     eee:	d309      	bcc.n	f04 <class_handler+0x30>
		if (iface->class_handler &&
     ef0:	691c      	ldr	r4, [r3, #16]
     ef2:	b13c      	cbz	r4, f04 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
     ef4:	f895 c002 	ldrb.w	ip, [r5, #2]
     ef8:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
     efa:	45ac      	cmp	ip, r5
     efc:	d102      	bne.n	f04 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
     efe:	4623      	mov	r3, r4
}
     f00:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
     f02:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
     f04:	3324      	adds	r3, #36	; 0x24
     f06:	e7ea      	b.n	ede <class_handler+0xa>
     f08:	2000069c 	.word	0x2000069c
     f0c:	20000374 	.word	0x20000374
     f10:	20000350 	.word	0x20000350

00000f14 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
     f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
     f18:	4c13      	ldr	r4, [pc, #76]	; (f68 <custom_handler+0x54>)
     f1a:	f8df 8050 	ldr.w	r8, [pc, #80]	; f6c <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
     f1e:	f8df 9050 	ldr.w	r9, [pc, #80]	; f70 <custom_handler+0x5c>
{
     f22:	4605      	mov	r5, r0
     f24:	460e      	mov	r6, r1
     f26:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
     f28:	4544      	cmp	r4, r8
     f2a:	d303      	bcc.n	f34 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
     f2c:	f06f 0085 	mvn.w	r0, #133	; 0x85
     f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
     f34:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
     f36:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
     f3a:	429a      	cmp	r2, r3
     f3c:	d312      	bcc.n	f64 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
     f3e:	69a3      	ldr	r3, [r4, #24]
     f40:	b183      	cbz	r3, f64 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
     f42:	7890      	ldrb	r0, [r2, #2]
     f44:	7929      	ldrb	r1, [r5, #4]
     f46:	4288      	cmp	r0, r1
     f48:	d105      	bne.n	f56 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
     f4a:	463a      	mov	r2, r7
     f4c:	4631      	mov	r1, r6
     f4e:	4628      	mov	r0, r5
}
     f50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
     f54:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
     f56:	7952      	ldrb	r2, [r2, #5]
     f58:	2a01      	cmp	r2, #1
     f5a:	d103      	bne.n	f64 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
     f5c:	463a      	mov	r2, r7
     f5e:	4631      	mov	r1, r6
     f60:	4628      	mov	r0, r5
     f62:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
     f64:	3424      	adds	r4, #36	; 0x24
     f66:	e7df      	b.n	f28 <custom_handler+0x14>
     f68:	20000350 	.word	0x20000350
     f6c:	20000374 	.word	0x20000374
     f70:	2000069c 	.word	0x2000069c

00000f74 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
     f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
     f78:	4c0b      	ldr	r4, [pc, #44]	; (fa8 <vendor_handler+0x34>)
     f7a:	f8df 8030 	ldr.w	r8, [pc, #48]	; fac <vendor_handler+0x38>
{
     f7e:	4605      	mov	r5, r0
     f80:	460e      	mov	r6, r1
     f82:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
     f84:	4544      	cmp	r4, r8
     f86:	d302      	bcc.n	f8e <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
     f88:	f06f 0085 	mvn.w	r0, #133	; 0x85
     f8c:	e009      	b.n	fa2 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
     f8e:	6963      	ldr	r3, [r4, #20]
     f90:	b90b      	cbnz	r3, f96 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
     f92:	3424      	adds	r4, #36	; 0x24
     f94:	e7f6      	b.n	f84 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
     f96:	463a      	mov	r2, r7
     f98:	4631      	mov	r1, r6
     f9a:	4628      	mov	r0, r5
     f9c:	4798      	blx	r3
     f9e:	2800      	cmp	r0, #0
     fa0:	d1f7      	bne.n	f92 <vendor_handler+0x1e>
}
     fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fa6:	bf00      	nop
     fa8:	20000350 	.word	0x20000350
     fac:	20000374 	.word	0x20000374

00000fb0 <set_endpoint>:
{
     fb0:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
     fb2:	7883      	ldrb	r3, [r0, #2]
     fb4:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
     fb8:	7903      	ldrb	r3, [r0, #4]
     fba:	7942      	ldrb	r2, [r0, #5]
     fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     fc0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
     fc4:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
     fc6:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
     fc8:	f003 0303 	and.w	r3, r3, #3
     fcc:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
     fd0:	f002 f878 	bl	30c4 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
     fd4:	f110 0f78 	cmn.w	r0, #120	; 0x78
     fd8:	d004      	beq.n	fe4 <set_endpoint+0x34>
	} else if (ret) {
     fda:	b118      	cbz	r0, fe4 <set_endpoint+0x34>
		return false;
     fdc:	2000      	movs	r0, #0
}
     fde:	b003      	add	sp, #12
     fe0:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
     fe4:	f89d 0000 	ldrb.w	r0, [sp]
     fe8:	f002 f8f2 	bl	31d0 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
     fec:	f110 0f78 	cmn.w	r0, #120	; 0x78
     ff0:	d001      	beq.n	ff6 <set_endpoint+0x46>
	} else if (ret) {
     ff2:	2800      	cmp	r0, #0
     ff4:	d1f2      	bne.n	fdc <set_endpoint+0x2c>
	usb_dev.configured = true;
     ff6:	4b02      	ldr	r3, [pc, #8]	; (1000 <set_endpoint+0x50>)
     ff8:	2001      	movs	r0, #1
     ffa:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
     ffe:	e7ee      	b.n	fde <set_endpoint+0x2e>
    1000:	2000069c 	.word	0x2000069c

00001004 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    1004:	4802      	ldr	r0, [pc, #8]	; (1010 <usb_reset_alt_setting+0xc>)
    1006:	2208      	movs	r2, #8
    1008:	2100      	movs	r1, #0
    100a:	f007 bda2 	b.w	8b52 <memset>
    100e:	bf00      	nop
    1010:	20000757 	.word	0x20000757

00001014 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    1014:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1016:	4b0b      	ldr	r3, [pc, #44]	; (1044 <is_ep_valid.part.0+0x30>)
    1018:	4c0b      	ldr	r4, [pc, #44]	; (1048 <is_ep_valid.part.0+0x34>)
    101a:	42a3      	cmp	r3, r4
    101c:	d301      	bcc.n	1022 <is_ep_valid.part.0+0xe>
	return false;
    101e:	2000      	movs	r0, #0
}
    1020:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    1022:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1024:	7f1e      	ldrb	r6, [r3, #28]
    1026:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    1028:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    102a:	b2d5      	uxtb	r5, r2
    102c:	42ae      	cmp	r6, r5
    102e:	d801      	bhi.n	1034 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1030:	3324      	adds	r3, #36	; 0x24
    1032:	e7f2      	b.n	101a <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    1034:	3201      	adds	r2, #1
    1036:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    103a:	4285      	cmp	r5, r0
    103c:	d1f5      	bne.n	102a <is_ep_valid.part.0+0x16>
				return true;
    103e:	2001      	movs	r0, #1
    1040:	e7ee      	b.n	1020 <is_ep_valid.part.0+0xc>
    1042:	bf00      	nop
    1044:	20000350 	.word	0x20000350
    1048:	20000374 	.word	0x20000374

0000104c <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
    104c:	4809      	ldr	r0, [pc, #36]	; (1074 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
    104e:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
    1050:	7803      	ldrb	r3, [r0, #0]
    1052:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    1056:	330a      	adds	r3, #10
    1058:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    105c:	b13b      	cbz	r3, 106e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    105e:	f100 0208 	add.w	r2, r0, #8
    1062:	f100 0110 	add.w	r1, r0, #16
    1066:	4798      	blx	r3
    1068:	43c0      	mvns	r0, r0
    106a:	0fc0      	lsrs	r0, r0, #31
}
    106c:	bd08      	pop	{r3, pc}
		return false;
    106e:	4618      	mov	r0, r3
    1070:	e7fc      	b.n	106c <usb_handle_request.constprop.0+0x20>
    1072:	bf00      	nop
    1074:	2000069c 	.word	0x2000069c

00001078 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    1078:	2804      	cmp	r0, #4
{
    107a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    107e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1108 <forward_status_cb+0x90>
    1082:	4604      	mov	r4, r0
    1084:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    1086:	d10e      	bne.n	10a6 <forward_status_cb+0x2e>
		usb_reset_alt_setting();
    1088:	f7ff ffbc 	bl	1004 <usb_reset_alt_setting>
		if (usb_dev.configured) {
    108c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 110c <forward_status_cb+0x94>
    1090:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
    1094:	b15b      	cbz	r3, 10ae <forward_status_cb+0x36>
			usb_cancel_transfers();
    1096:	f000 fdb3 	bl	1c00 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    109a:	2c04      	cmp	r4, #4
    109c:	d001      	beq.n	10a2 <forward_status_cb+0x2a>
    109e:	2c01      	cmp	r4, #1
    10a0:	d105      	bne.n	10ae <forward_status_cb+0x36>
    10a2:	4d1b      	ldr	r5, [pc, #108]	; (1110 <forward_status_cb+0x98>)
    10a4:	e016      	b.n	10d4 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
    10a6:	2805      	cmp	r0, #5
    10a8:	d0f0      	beq.n	108c <forward_status_cb+0x14>
    10aa:	2801      	cmp	r0, #1
    10ac:	d0ee      	beq.n	108c <forward_status_cb+0x14>
    10ae:	4d18      	ldr	r5, [pc, #96]	; (1110 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    10b0:	4545      	cmp	r5, r8
    10b2:	d31e      	bcc.n	10f2 <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
    10b4:	4b15      	ldr	r3, [pc, #84]	; (110c <forward_status_cb+0x94>)
    10b6:	6a1b      	ldr	r3, [r3, #32]
    10b8:	b31b      	cbz	r3, 1102 <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
    10ba:	4631      	mov	r1, r6
    10bc:	4620      	mov	r0, r4
}
    10be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
    10c2:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
    10c4:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    10c8:	2700      	movs	r7, #0
    10ca:	7f2a      	ldrb	r2, [r5, #28]
    10cc:	b2fb      	uxtb	r3, r7
    10ce:	429a      	cmp	r2, r3
    10d0:	d803      	bhi.n	10da <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    10d2:	3524      	adds	r5, #36	; 0x24
    10d4:	4545      	cmp	r5, r8
    10d6:	d3f5      	bcc.n	10c4 <forward_status_cb+0x4c>
    10d8:	e007      	b.n	10ea <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
    10da:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
    10de:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
    10e0:	7918      	ldrb	r0, [r3, #4]
    10e2:	f002 f89f 	bl	3224 <usb_dc_ep_disable>
			if (ret < 0) {
    10e6:	2800      	cmp	r0, #0
    10e8:	daef      	bge.n	10ca <forward_status_cb+0x52>
				usb_dev.configured = false;
    10ea:	2300      	movs	r3, #0
    10ec:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
    10f0:	e7dd      	b.n	10ae <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
    10f2:	68eb      	ldr	r3, [r5, #12]
    10f4:	b11b      	cbz	r3, 10fe <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
    10f6:	4632      	mov	r2, r6
    10f8:	4621      	mov	r1, r4
    10fa:	4628      	mov	r0, r5
    10fc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    10fe:	3524      	adds	r5, #36	; 0x24
    1100:	e7d6      	b.n	10b0 <forward_status_cb+0x38>
}
    1102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1106:	bf00      	nop
    1108:	20000374 	.word	0x20000374
    110c:	2000069c 	.word	0x2000069c
    1110:	20000350 	.word	0x20000350

00001114 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1114:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    1116:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    1118:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    111a:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    111c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    1120:	d007      	beq.n	1132 <usb_halt_endpoint_req.isra.0+0x1e>
    1122:	4620      	mov	r0, r4
    1124:	f7ff ff76 	bl	1014 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    1128:	b188      	cbz	r0, 114e <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
    112a:	4b0f      	ldr	r3, [pc, #60]	; (1168 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    112c:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    1130:	b168      	cbz	r0, 114e <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
    1132:	4e0d      	ldr	r6, [pc, #52]	; (1168 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
    1134:	4620      	mov	r0, r4
		if (halt) {
    1136:	b165      	cbz	r5, 1152 <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
    1138:	f001 ffe6 	bl	3108 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    113c:	69f3      	ldr	r3, [r6, #28]
    113e:	b90b      	cbnz	r3, 1144 <usb_halt_endpoint_req.isra.0+0x30>
		return true;
    1140:	2001      	movs	r0, #1
    1142:	e004      	b.n	114e <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    1144:	2008      	movs	r0, #8
    1146:	f10d 0107 	add.w	r1, sp, #7
    114a:	4798      	blx	r3
		return true;
    114c:	4628      	mov	r0, r5
}
    114e:	b002      	add	sp, #8
    1150:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    1152:	f002 f801 	bl	3158 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    1156:	69f3      	ldr	r3, [r6, #28]
    1158:	2b00      	cmp	r3, #0
    115a:	d0f1      	beq.n	1140 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    115c:	f10d 0107 	add.w	r1, sp, #7
    1160:	2009      	movs	r0, #9
    1162:	4798      	blx	r3
    1164:	e7ec      	b.n	1140 <usb_halt_endpoint_req.isra.0+0x2c>
    1166:	bf00      	nop
    1168:	2000069c 	.word	0x2000069c

0000116c <usb_handle_standard_request>:
{
    116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    1170:	4ea8      	ldr	r6, [pc, #672]	; (1414 <usb_handle_standard_request+0x2a8>)
    1172:	69b3      	ldr	r3, [r6, #24]
{
    1174:	4605      	mov	r5, r0
    1176:	460f      	mov	r7, r1
    1178:	4690      	mov	r8, r2
	if (usb_dev.custom_req_handler &&
    117a:	b963      	cbnz	r3, 1196 <usb_handle_standard_request+0x2a>
	switch (setup->RequestType.recipient) {
    117c:	7828      	ldrb	r0, [r5, #0]
    117e:	f000 001f 	and.w	r0, r0, #31
    1182:	2801      	cmp	r0, #1
    1184:	f000 80a6 	beq.w	12d4 <usb_handle_standard_request+0x168>
    1188:	2802      	cmp	r0, #2
    118a:	f000 810e 	beq.w	13aa <usb_handle_standard_request+0x23e>
    118e:	b138      	cbz	r0, 11a0 <usb_handle_standard_request+0x34>
		switch (setup->bRequest) {
    1190:	f06f 0015 	mvn.w	r0, #21
    1194:	e095      	b.n	12c2 <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    1196:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    1198:	2800      	cmp	r0, #0
    119a:	d1ef      	bne.n	117c <usb_handle_standard_request+0x10>
	int rc = 0;
    119c:	2000      	movs	r0, #0
    119e:	e090      	b.n	12c2 <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
    11a0:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    11a4:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    11a6:	2a00      	cmp	r2, #0
    11a8:	da31      	bge.n	120e <usb_handle_standard_request+0xa2>
		switch (setup->bRequest) {
    11aa:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    11ac:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    11b0:	d010      	beq.n	11d4 <usb_handle_standard_request+0x68>
    11b2:	2b08      	cmp	r3, #8
    11b4:	d025      	beq.n	1202 <usb_handle_standard_request+0x96>
    11b6:	2b00      	cmp	r3, #0
    11b8:	d1ea      	bne.n	1190 <usb_handle_standard_request+0x24>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    11ba:	2101      	movs	r1, #1
	data[1] = 0U;
    11bc:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    11be:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    11c0:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    11c4:	2900      	cmp	r1, #0
    11c6:	bf18      	it	ne
    11c8:	2302      	movne	r3, #2
    11ca:	f043 0301 	orr.w	r3, r3, #1
    11ce:	7013      	strb	r3, [r2, #0]
		*len = 2;
    11d0:	2302      	movs	r3, #2
    11d2:	e01a      	b.n	120a <usb_handle_standard_request+0x9e>
			return usb_get_descriptor(setup, len, data_buf);
    11d4:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    11d6:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    11d8:	1f11      	subs	r1, r2, #4
    11da:	2901      	cmp	r1, #1
    11dc:	d9d8      	bls.n	1190 <usb_handle_standard_request+0x24>
    11de:	2a07      	cmp	r2, #7
    11e0:	d8d6      	bhi.n	1190 <usb_handle_standard_request+0x24>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    11e2:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    11e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    11e6:	781c      	ldrb	r4, [r3, #0]
    11e8:	2c00      	cmp	r4, #0
    11ea:	d0d1      	beq.n	1190 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == type) {
    11ec:	785d      	ldrb	r5, [r3, #1]
    11ee:	4295      	cmp	r5, r2
    11f0:	d103      	bne.n	11fa <usb_handle_standard_request+0x8e>
			if (cur_index == index) {
    11f2:	4281      	cmp	r1, r0
    11f4:	f000 8112 	beq.w	141c <usb_handle_standard_request+0x2b0>
			cur_index++;
    11f8:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    11fa:	4423      	add	r3, r4
    11fc:	e7f3      	b.n	11e6 <usb_handle_standard_request+0x7a>
			*len = p[DESC_bLength];
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	e112      	b.n	1428 <usb_handle_standard_request+0x2bc>
			data[0] = usb_dev.configuration;
    1202:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    1206:	7013      	strb	r3, [r2, #0]
			*len = 1;
    1208:	2301      	movs	r3, #1
		*len = 2;
    120a:	603b      	str	r3, [r7, #0]
		return true;
    120c:	e059      	b.n	12c2 <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
    120e:	3b01      	subs	r3, #1
    1210:	2b08      	cmp	r3, #8
    1212:	d8bd      	bhi.n	1190 <usb_handle_standard_request+0x24>
    1214:	a201      	add	r2, pc, #4	; (adr r2, 121c <usb_handle_standard_request+0xb0>)
    1216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    121a:	bf00      	nop
    121c:	000012b5 	.word	0x000012b5
    1220:	00001191 	.word	0x00001191
    1224:	000012c7 	.word	0x000012c7
    1228:	00001191 	.word	0x00001191
    122c:	00001241 	.word	0x00001241
    1230:	00001191 	.word	0x00001191
    1234:	00001191 	.word	0x00001191
    1238:	00001191 	.word	0x00001191
    123c:	0000124d 	.word	0x0000124d
			return !usb_dc_set_address(setup->wValue);
    1240:	78a8      	ldrb	r0, [r5, #2]
    1242:	f001 ff2d 	bl	30a0 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    1246:	2800      	cmp	r0, #0
    1248:	d0a8      	beq.n	119c <usb_handle_standard_request+0x30>
    124a:	e7a1      	b.n	1190 <usb_handle_standard_request+0x24>
	if (setup->wValue == 0U) {
    124c:	886c      	ldrh	r4, [r5, #2]
    124e:	b144      	cbz	r4, 1262 <usb_handle_standard_request+0xf6>
	uint8_t cur_config = 0xFF;
    1250:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    1254:	6a77      	ldr	r7, [r6, #36]	; 0x24
	bool found = false;
    1256:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    1258:	46c1      	mov	r9, r8
	while (p[DESC_bLength] != 0U) {
    125a:	783c      	ldrb	r4, [r7, #0]
    125c:	b96c      	cbnz	r4, 127a <usb_handle_standard_request+0x10e>
	if (found) {
    125e:	2800      	cmp	r0, #0
    1260:	d096      	beq.n	1190 <usb_handle_standard_request+0x24>
		usb_reset_alt_setting();
    1262:	f7ff fecf 	bl	1004 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    1266:	886b      	ldrh	r3, [r5, #2]
    1268:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    126c:	69f3      	ldr	r3, [r6, #28]
    126e:	2b00      	cmp	r3, #0
    1270:	d094      	beq.n	119c <usb_handle_standard_request+0x30>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    1272:	4969      	ldr	r1, [pc, #420]	; (1418 <usb_handle_standard_request+0x2ac>)
    1274:	2003      	movs	r0, #3
    1276:	4798      	blx	r3
    1278:	e790      	b.n	119c <usb_handle_standard_request+0x30>
		switch (p[DESC_bDescriptorType]) {
    127a:	787b      	ldrb	r3, [r7, #1]
    127c:	2b04      	cmp	r3, #4
    127e:	d00c      	beq.n	129a <usb_handle_standard_request+0x12e>
    1280:	2b05      	cmp	r3, #5
    1282:	d00d      	beq.n	12a0 <usb_handle_standard_request+0x134>
    1284:	2b02      	cmp	r3, #2
    1286:	d105      	bne.n	1294 <usb_handle_standard_request+0x128>
			cur_config = p[CONF_DESC_bConfigurationValue];
    1288:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
    128c:	886a      	ldrh	r2, [r5, #2]
				found = true;
    128e:	4542      	cmp	r2, r8
    1290:	bf08      	it	eq
    1292:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    1294:	783b      	ldrb	r3, [r7, #0]
    1296:	441f      	add	r7, r3
    1298:	e7df      	b.n	125a <usb_handle_standard_request+0xee>
			cur_alt_setting =
    129a:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
    129e:	e7f9      	b.n	1294 <usb_handle_standard_request+0x128>
			if ((cur_config != setup->wValue) ||
    12a0:	886b      	ldrh	r3, [r5, #2]
    12a2:	4543      	cmp	r3, r8
    12a4:	d1f6      	bne.n	1294 <usb_handle_standard_request+0x128>
    12a6:	f1b9 0f00 	cmp.w	r9, #0
    12aa:	d1f3      	bne.n	1294 <usb_handle_standard_request+0x128>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    12ac:	4638      	mov	r0, r7
    12ae:	f7ff fe7f 	bl	fb0 <set_endpoint>
			break;
    12b2:	e7ef      	b.n	1294 <usb_handle_standard_request+0x128>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    12b4:	886b      	ldrh	r3, [r5, #2]
    12b6:	2b01      	cmp	r3, #1
    12b8:	f47f af6a 	bne.w	1190 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = false;
    12bc:	2000      	movs	r0, #0
    12be:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    12c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    12c6:	886b      	ldrh	r3, [r5, #2]
    12c8:	2b01      	cmp	r3, #1
    12ca:	f47f af61 	bne.w	1190 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = true;
    12ce:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    12d2:	e763      	b.n	119c <usb_handle_standard_request+0x30>
	if (!is_device_configured() ||
    12d4:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    12d8:	2b00      	cmp	r3, #0
    12da:	f43f af59 	beq.w	1190 <usb_handle_standard_request+0x24>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    12de:	6a74      	ldr	r4, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    12e0:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    12e4:	7928      	ldrb	r0, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    12e6:	4623      	mov	r3, r4
	while (p[DESC_bLength] != 0U) {
    12e8:	781a      	ldrb	r2, [r3, #0]
    12ea:	2a00      	cmp	r2, #0
    12ec:	f43f af50 	beq.w	1190 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    12f0:	7859      	ldrb	r1, [r3, #1]
    12f2:	2902      	cmp	r1, #2
    12f4:	d104      	bne.n	1300 <usb_handle_standard_request+0x194>
			if (interface < cfg_descr->bNumInterfaces) {
    12f6:	f893 e004 	ldrb.w	lr, [r3, #4]
    12fa:	4586      	cmp	lr, r0
    12fc:	f200 8096 	bhi.w	142c <usb_handle_standard_request+0x2c0>
		p += p[DESC_bLength];
    1300:	4413      	add	r3, r2
    1302:	e7f1      	b.n	12e8 <usb_handle_standard_request+0x17c>
			data[0] = 0U;
    1304:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    1306:	7050      	strb	r0, [r2, #1]
			*len = 2;
    1308:	6039      	str	r1, [r7, #0]
			return true;
    130a:	e7da      	b.n	12c2 <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
    130c:	440c      	add	r4, r1
    130e:	e09b      	b.n	1448 <usb_handle_standard_request+0x2dc>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    1310:	280b      	cmp	r0, #11
    1312:	f47f af3d 	bne.w	1190 <usb_handle_standard_request+0x24>
	bool ret = false;
    1316:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    1318:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    131c:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
    131e:	46b9      	mov	r9, r7
    1320:	e006      	b.n	1330 <usb_handle_standard_request+0x1c4>
		switch (p[DESC_bDescriptorType]) {
    1322:	7863      	ldrb	r3, [r4, #1]
    1324:	2b04      	cmp	r3, #4
    1326:	d00f      	beq.n	1348 <usb_handle_standard_request+0x1dc>
    1328:	2b05      	cmp	r3, #5
    132a:	d022      	beq.n	1372 <usb_handle_standard_request+0x206>
		p += p[DESC_bLength];
    132c:	7823      	ldrb	r3, [r4, #0]
    132e:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    1330:	7823      	ldrb	r3, [r4, #0]
    1332:	2b00      	cmp	r3, #0
    1334:	d1f5      	bne.n	1322 <usb_handle_standard_request+0x1b6>
	if (usb_dev.status_callback) {
    1336:	69f3      	ldr	r3, [r6, #28]
    1338:	b113      	cbz	r3, 1340 <usb_handle_standard_request+0x1d4>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    133a:	4649      	mov	r1, r9
    133c:	2007      	movs	r0, #7
    133e:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    1340:	2f00      	cmp	r7, #0
    1342:	f47f af2b 	bne.w	119c <usb_handle_standard_request+0x30>
    1346:	e723      	b.n	1190 <usb_handle_standard_request+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    1348:	f894 a002 	ldrb.w	sl, [r4, #2]
			if (cur_iface == setup->wIndex &&
    134c:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    134e:	f894 8003 	ldrb.w	r8, [r4, #3]
			if (cur_iface == setup->wIndex &&
    1352:	4592      	cmp	sl, r2
    1354:	4653      	mov	r3, sl
    1356:	d1e9      	bne.n	132c <usb_handle_standard_request+0x1c0>
			    cur_alt_setting == setup->wValue) {
    1358:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
    135a:	4588      	cmp	r8, r1
    135c:	fa1f f288 	uxth.w	r2, r8
    1360:	d1e4      	bne.n	132c <usb_handle_standard_request+0x1c0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1362:	2b07      	cmp	r3, #7
    1364:	d81e      	bhi.n	13a4 <usb_handle_standard_request+0x238>
		usb_dev.alt_setting[iface] = alt_setting;
    1366:	4433      	add	r3, r6
		return true;
    1368:	46a1      	mov	r9, r4
				ret = usb_set_alt_setting(setup->wIndex,
    136a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
    136e:	2701      	movs	r7, #1
    1370:	e7dc      	b.n	132c <usb_handle_standard_request+0x1c0>
			if (cur_iface == setup->wIndex) {
    1372:	88ab      	ldrh	r3, [r5, #4]
    1374:	4553      	cmp	r3, sl
    1376:	d1d9      	bne.n	132c <usb_handle_standard_request+0x1c0>
	if (cur_alt_setting != alt_setting) {
    1378:	78ab      	ldrb	r3, [r5, #2]
    137a:	4543      	cmp	r3, r8
    137c:	d00d      	beq.n	139a <usb_handle_standard_request+0x22e>
		ret = reset_endpoint(ep_desc);
    137e:	78a7      	ldrb	r7, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    1380:	4638      	mov	r0, r7
    1382:	f000 fc1f 	bl	1bc4 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    1386:	4638      	mov	r0, r7
    1388:	f001 ff4c 	bl	3224 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    138c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1390:	d0ed      	beq.n	136e <usb_handle_standard_request+0x202>
	} else if (ret) {
    1392:	fab0 f780 	clz	r7, r0
    1396:	097f      	lsrs	r7, r7, #5
    1398:	e7c8      	b.n	132c <usb_handle_standard_request+0x1c0>
		ret = set_endpoint(ep_desc);
    139a:	4620      	mov	r0, r4
    139c:	f7ff fe08 	bl	fb0 <set_endpoint>
    13a0:	4607      	mov	r7, r0
    13a2:	e7c3      	b.n	132c <usb_handle_standard_request+0x1c0>
    13a4:	46a1      	mov	r9, r4
	return false;
    13a6:	2700      	movs	r7, #0
    13a8:	e7c0      	b.n	132c <usb_handle_standard_request+0x1c0>
	if (usb_reqtype_is_to_host(setup)) {
    13aa:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
    13ae:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    13b0:	2a00      	cmp	r2, #0
    13b2:	da19      	bge.n	13e8 <usb_handle_standard_request+0x27c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    13b4:	2b00      	cmp	r3, #0
    13b6:	f47f aeeb 	bne.w	1190 <usb_handle_standard_request+0x24>
	uint8_t ep = setup->wIndex;
    13ba:	792c      	ldrb	r4, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    13bc:	0663      	lsls	r3, r4, #25
    13be:	d00a      	beq.n	13d6 <usb_handle_standard_request+0x26a>
    13c0:	4620      	mov	r0, r4
    13c2:	f7ff fe27 	bl	1014 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    13c6:	2800      	cmp	r0, #0
    13c8:	f43f aee2 	beq.w	1190 <usb_handle_standard_request+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    13cc:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    13d0:	2b00      	cmp	r3, #0
    13d2:	f43f aedd 	beq.w	1190 <usb_handle_standard_request+0x24>
    13d6:	f8d8 5000 	ldr.w	r5, [r8]
		usb_dc_ep_is_stalled(ep, &data[0]);
    13da:	4620      	mov	r0, r4
    13dc:	4629      	mov	r1, r5
    13de:	f001 fedb 	bl	3198 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    13e2:	2000      	movs	r0, #0
    13e4:	7068      	strb	r0, [r5, #1]
    13e6:	e6f3      	b.n	11d0 <usb_handle_standard_request+0x64>
		switch (setup->bRequest) {
    13e8:	2b01      	cmp	r3, #1
    13ea:	d008      	beq.n	13fe <usb_handle_standard_request+0x292>
    13ec:	2b03      	cmp	r3, #3
    13ee:	f47f aecf 	bne.w	1190 <usb_handle_standard_request+0x24>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    13f2:	886b      	ldrh	r3, [r5, #2]
    13f4:	2b00      	cmp	r3, #0
    13f6:	f47f aecb 	bne.w	1190 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
    13fa:	2101      	movs	r1, #1
    13fc:	e003      	b.n	1406 <usb_handle_standard_request+0x29a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    13fe:	8869      	ldrh	r1, [r5, #2]
    1400:	2900      	cmp	r1, #0
    1402:	f47f aec5 	bne.w	1190 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
    1406:	88a8      	ldrh	r0, [r5, #4]
    1408:	f7ff fe84 	bl	1114 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    140c:	2800      	cmp	r0, #0
    140e:	f47f aec5 	bne.w	119c <usb_handle_standard_request+0x30>
    1412:	e6bd      	b.n	1190 <usb_handle_standard_request+0x24>
    1414:	2000069c 	.word	0x2000069c
    1418:	20000756 	.word	0x20000756
		if (type == USB_DESC_CONFIGURATION) {
    141c:	2a02      	cmp	r2, #2
		*data = p;
    141e:	f8c8 3000 	str.w	r3, [r8]
		if (type == USB_DESC_CONFIGURATION) {
    1422:	f47f aeec 	bne.w	11fe <usb_handle_standard_request+0x92>
			*len = (p[CONF_DESC_wTotalLength]) |
    1426:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    1428:	603b      	str	r3, [r7, #0]
    142a:	e6b7      	b.n	119c <usb_handle_standard_request+0x30>
	if (usb_reqtype_is_to_host(setup)) {
    142c:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
    1430:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    1432:	2b00      	cmp	r3, #0
    1434:	f6bf af6c 	bge.w	1310 <usb_handle_standard_request+0x1a4>
    1438:	f8d8 2000 	ldr.w	r2, [r8]
		switch (setup->bRequest) {
    143c:	2800      	cmp	r0, #0
    143e:	f43f af61 	beq.w	1304 <usb_handle_standard_request+0x198>
    1442:	280a      	cmp	r0, #10
    1444:	f47f aea4 	bne.w	1190 <usb_handle_standard_request+0x24>
	while (p[DESC_bLength] != 0U) {
    1448:	7821      	ldrb	r1, [r4, #0]
    144a:	2900      	cmp	r1, #0
    144c:	f43f aea0 	beq.w	1190 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    1450:	7863      	ldrb	r3, [r4, #1]
    1452:	2b04      	cmp	r3, #4
    1454:	f47f af5a 	bne.w	130c <usb_handle_standard_request+0x1a0>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    1458:	78a3      	ldrb	r3, [r4, #2]
			if (cur_iface == setup->wIndex) {
    145a:	459c      	cmp	ip, r3
    145c:	f47f af56 	bne.w	130c <usb_handle_standard_request+0x1a0>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1460:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    1462:	bf96      	itet	ls
    1464:	199b      	addls	r3, r3, r6
	return 0;
    1466:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    1468:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    146c:	7013      	strb	r3, [r2, #0]
				*len = 1;
    146e:	2301      	movs	r3, #1
    1470:	e7da      	b.n	1428 <usb_handle_standard_request+0x2bc>
    1472:	bf00      	nop

00001474 <usb_data_to_host>:
{
    1474:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    1476:	4c13      	ldr	r4, [pc, #76]	; (14c4 <usb_data_to_host+0x50>)
    1478:	7d23      	ldrb	r3, [r4, #20]
    147a:	b9cb      	cbnz	r3, 14b0 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    147c:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    147e:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    1480:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    1482:	ab01      	add	r3, sp, #4
    1484:	2080      	movs	r0, #128	; 0x80
    1486:	f007 fa0f 	bl	88a8 <usb_write>
		usb_dev.data_buf += chunk;
    148a:	9a01      	ldr	r2, [sp, #4]
    148c:	68a3      	ldr	r3, [r4, #8]
    148e:	4413      	add	r3, r2
    1490:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    1492:	68e3      	ldr	r3, [r4, #12]
    1494:	1a9b      	subs	r3, r3, r2
    1496:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    1498:	b943      	cbnz	r3, 14ac <usb_data_to_host+0x38>
    149a:	b13a      	cbz	r2, 14ac <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    149c:	6923      	ldr	r3, [r4, #16]
    149e:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    14a0:	429a      	cmp	r2, r3
    14a2:	dd03      	ble.n	14ac <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    14a4:	069b      	lsls	r3, r3, #26
    14a6:	d101      	bne.n	14ac <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    14a8:	2301      	movs	r3, #1
    14aa:	7523      	strb	r3, [r4, #20]
}
    14ac:	b002      	add	sp, #8
    14ae:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    14b0:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    14b2:	461a      	mov	r2, r3
    14b4:	4619      	mov	r1, r3
    14b6:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    14b8:	7523      	strb	r3, [r4, #20]
}
    14ba:	b002      	add	sp, #8
    14bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    14c0:	f001 bed6 	b.w	3270 <usb_dc_ep_write>
    14c4:	2000069c 	.word	0x2000069c

000014c8 <usb_handle_control_transfer>:
{
    14c8:	b530      	push	{r4, r5, lr}
    14ca:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    14cc:	2300      	movs	r3, #0
{
    14ce:	4602      	mov	r2, r0
    14d0:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    14d2:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    14d4:	2800      	cmp	r0, #0
    14d6:	d15f      	bne.n	1598 <usb_handle_control_transfer+0xd0>
    14d8:	2900      	cmp	r1, #0
    14da:	d13c      	bne.n	1556 <usb_handle_control_transfer+0x8e>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    14dc:	2208      	movs	r2, #8
    14de:	460b      	mov	r3, r1
    14e0:	eb0d 0102 	add.w	r1, sp, r2
    14e4:	f007 fba3 	bl	8c2e <usb_dc_ep_read>
    14e8:	2800      	cmp	r0, #0
    14ea:	da04      	bge.n	14f6 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    14ec:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    14ee:	f001 fe0b 	bl	3108 <usb_dc_ep_set_stall>
}
    14f2:	b005      	add	sp, #20
    14f4:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    14f6:	4c2d      	ldr	r4, [pc, #180]	; (15ac <usb_handle_control_transfer+0xe4>)
		setup->bRequest = setup_raw.bRequest;
    14f8:	f89d 3009 	ldrb.w	r3, [sp, #9]
		setup->bmRequestType = setup_raw.bmRequestType;
    14fc:	f89d 2008 	ldrb.w	r2, [sp, #8]
		setup->bRequest = setup_raw.bRequest;
    1500:	7063      	strb	r3, [r4, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    1502:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    1506:	8063      	strh	r3, [r4, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    1508:	f8bd 300c 	ldrh.w	r3, [sp, #12]
		setup->bmRequestType = setup_raw.bmRequestType;
    150c:	7022      	strb	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    150e:	80a3      	strh	r3, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    1510:	f104 0138 	add.w	r1, r4, #56	; 0x38
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    1514:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1518:	80e3      	strh	r3, [r4, #6]
		if (usb_reqtype_is_to_device(setup)) {
    151a:	0612      	lsls	r2, r2, #24
		usb_dev.data_buf_residue = 0;
    151c:	e9c4 5503 	strd	r5, r5, [r4, #12]
		usb_dev.data_buf = usb_dev.req_data;
    1520:	60a1      	str	r1, [r4, #8]
		usb_dev.zlp_flag = false;
    1522:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    1524:	d40a      	bmi.n	153c <usb_handle_control_transfer+0x74>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    1526:	2b80      	cmp	r3, #128	; 0x80
    1528:	d904      	bls.n	1534 <usb_handle_control_transfer+0x6c>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    152a:	2080      	movs	r0, #128	; 0x80
    152c:	f001 fdec 	bl	3108 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    1530:	2000      	movs	r0, #0
    1532:	e7dc      	b.n	14ee <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    1534:	b113      	cbz	r3, 153c <usb_handle_control_transfer+0x74>
				usb_dev.data_buf_residue = setup->wLength;
    1536:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    153a:	e7da      	b.n	14f2 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    153c:	f7ff fd86 	bl	104c <usb_handle_request.constprop.0>
    1540:	2800      	cmp	r0, #0
    1542:	d0d3      	beq.n	14ec <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    1544:	88e2      	ldrh	r2, [r4, #6]
    1546:	6923      	ldr	r3, [r4, #16]
    1548:	429a      	cmp	r2, r3
    154a:	bfd4      	ite	le
    154c:	60e2      	strle	r2, [r4, #12]
    154e:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    1550:	f7ff ff90 	bl	1474 <usb_data_to_host>
    1554:	e7cd      	b.n	14f2 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    1556:	4c15      	ldr	r4, [pc, #84]	; (15ac <usb_handle_control_transfer+0xe4>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    1558:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    155c:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    155e:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    1560:	dc04      	bgt.n	156c <usb_handle_control_transfer+0xa4>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    1562:	f007 fb64 	bl	8c2e <usb_dc_ep_read>
    1566:	2800      	cmp	r0, #0
    1568:	dac3      	bge.n	14f2 <usb_handle_control_transfer+0x2a>
    156a:	e7bf      	b.n	14ec <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    156c:	462a      	mov	r2, r5
    156e:	f007 fb5e 	bl	8c2e <usb_dc_ep_read>
    1572:	2800      	cmp	r0, #0
    1574:	dbd9      	blt.n	152a <usb_handle_control_transfer+0x62>
		usb_dev.data_buf += chunk;
    1576:	9901      	ldr	r1, [sp, #4]
    1578:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    157a:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
    157c:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
    157e:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
    1580:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    1582:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    1584:	2b00      	cmp	r3, #0
    1586:	d1b4      	bne.n	14f2 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    1588:	f104 0338 	add.w	r3, r4, #56	; 0x38
    158c:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    158e:	f7ff fd5d 	bl	104c <usb_handle_request.constprop.0>
    1592:	2800      	cmp	r0, #0
    1594:	d1dc      	bne.n	1550 <usb_handle_control_transfer+0x88>
    1596:	e7a9      	b.n	14ec <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    1598:	2880      	cmp	r0, #128	; 0x80
    159a:	d1aa      	bne.n	14f2 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    159c:	4b03      	ldr	r3, [pc, #12]	; (15ac <usb_handle_control_transfer+0xe4>)
    159e:	68da      	ldr	r2, [r3, #12]
    15a0:	2a00      	cmp	r2, #0
    15a2:	d1d5      	bne.n	1550 <usb_handle_control_transfer+0x88>
    15a4:	7d1b      	ldrb	r3, [r3, #20]
    15a6:	2b00      	cmp	r3, #0
    15a8:	d1d2      	bne.n	1550 <usb_handle_control_transfer+0x88>
    15aa:	e7a2      	b.n	14f2 <usb_handle_control_transfer+0x2a>
    15ac:	2000069c 	.word	0x2000069c

000015b0 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    15b0:	4b05      	ldr	r3, [pc, #20]	; (15c8 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    15b2:	4a06      	ldr	r2, [pc, #24]	; (15cc <usb_set_config+0x1c>)
    15b4:	629a      	str	r2, [r3, #40]	; 0x28
    15b6:	4a06      	ldr	r2, [pc, #24]	; (15d0 <usb_set_config+0x20>)
    15b8:	62da      	str	r2, [r3, #44]	; 0x2c
    15ba:	4a06      	ldr	r2, [pc, #24]	; (15d4 <usb_set_config+0x24>)
    15bc:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    15be:	4a06      	ldr	r2, [pc, #24]	; (15d8 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    15c0:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    15c2:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    15c4:	2000      	movs	r0, #0
    15c6:	4770      	bx	lr
    15c8:	2000069c 	.word	0x2000069c
    15cc:	0000116d 	.word	0x0000116d
    15d0:	00000ed5 	.word	0x00000ed5
    15d4:	00000f75 	.word	0x00000f75
    15d8:	00000f15 	.word	0x00000f15

000015dc <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    15dc:	4b08      	ldr	r3, [pc, #32]	; (1600 <usb_device_init+0x24>)
{
    15de:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    15e0:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    15e4:	b934      	cbnz	r4, 15f4 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    15e6:	f000 f9a3 	bl	1930 <usb_get_device_descriptor>
	if (!device_descriptor) {
    15ea:	b130      	cbz	r0, 15fa <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    15ec:	f7ff ffe0 	bl	15b0 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    15f0:	4620      	mov	r0, r4
}
    15f2:	bd10      	pop	{r4, pc}
		return -EALREADY;
    15f4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    15f8:	e7fb      	b.n	15f2 <usb_device_init+0x16>
		return -1;
    15fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    15fe:	e7f8      	b.n	15f2 <usb_device_init+0x16>
    1600:	2000069c 	.word	0x2000069c

00001604 <usb_enable>:
{
    1604:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1608:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    160a:	4d35      	ldr	r5, [pc, #212]	; (16e0 <usb_enable+0xdc>)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    160c:	4835      	ldr	r0, [pc, #212]	; (16e4 <usb_enable+0xe0>)
    160e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1616:	f005 fd89 	bl	712c <z_impl_k_mutex_lock>
    161a:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    161e:	2e00      	cmp	r6, #0
    1620:	d15b      	bne.n	16da <usb_enable+0xd6>
	usb_dev.status_callback = cb;
    1622:	4831      	ldr	r0, [pc, #196]	; (16e8 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
    1624:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    1626:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    1628:	f001 ff38 	bl	349c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    162c:	f001 fcfa 	bl	3024 <usb_dc_attach>
	if (ret < 0) {
    1630:	1e04      	subs	r4, r0, #0
    1632:	db36      	blt.n	16a2 <usb_enable+0x9e>
	ret = usb_transfer_init();
    1634:	f000 fb0c 	bl	1c50 <usb_transfer_init>
	if (ret < 0) {
    1638:	1e04      	subs	r4, r0, #0
    163a:	db32      	blt.n	16a2 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    163c:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    163e:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    1640:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    1644:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    1648:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    164c:	f001 fd3a 	bl	30c4 <usb_dc_ep_configure>
	if (ret < 0) {
    1650:	1e04      	subs	r4, r0, #0
    1652:	db26      	blt.n	16a2 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    1654:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    1656:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    1658:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    165c:	f001 fd32 	bl	30c4 <usb_dc_ep_configure>
	if (ret < 0) {
    1660:	1e04      	subs	r4, r0, #0
    1662:	db1e      	blt.n	16a2 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    1664:	4921      	ldr	r1, [pc, #132]	; (16ec <usb_enable+0xe8>)
    1666:	4630      	mov	r0, r6
    1668:	f001 ff04 	bl	3474 <usb_dc_ep_set_callback>
	if (ret < 0) {
    166c:	1e04      	subs	r4, r0, #0
    166e:	db18      	blt.n	16a2 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    1670:	491e      	ldr	r1, [pc, #120]	; (16ec <usb_enable+0xe8>)
    1672:	4638      	mov	r0, r7
    1674:	f001 fefe 	bl	3474 <usb_dc_ep_set_callback>
	if (ret < 0) {
    1678:	1e04      	subs	r4, r0, #0
    167a:	db12      	blt.n	16a2 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    167c:	4c1c      	ldr	r4, [pc, #112]	; (16f0 <usb_enable+0xec>)
    167e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 16f4 <usb_enable+0xf0>
    1682:	4544      	cmp	r4, r8
    1684:	d314      	bcc.n	16b0 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    1686:	2000      	movs	r0, #0
    1688:	f001 fda2 	bl	31d0 <usb_dc_ep_enable>
	if (ret < 0) {
    168c:	1e04      	subs	r4, r0, #0
    168e:	db08      	blt.n	16a2 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    1690:	2080      	movs	r0, #128	; 0x80
    1692:	f001 fd9d 	bl	31d0 <usb_dc_ep_enable>
	if (ret < 0) {
    1696:	1e04      	subs	r4, r0, #0
    1698:	db03      	blt.n	16a2 <usb_enable+0x9e>
	usb_dev.enabled = true;
    169a:	2301      	movs	r3, #1
    169c:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    16a0:	2400      	movs	r4, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    16a2:	4810      	ldr	r0, [pc, #64]	; (16e4 <usb_enable+0xe0>)
    16a4:	f005 fdba 	bl	721c <z_impl_k_mutex_unlock>
}
    16a8:	4620      	mov	r0, r4
    16aa:	b002      	add	sp, #8
    16ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    16b0:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    16b2:	2600      	movs	r6, #0
    16b4:	7f22      	ldrb	r2, [r4, #28]
    16b6:	b2f3      	uxtb	r3, r6
    16b8:	429a      	cmp	r2, r3
    16ba:	d801      	bhi.n	16c0 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    16bc:	3424      	adds	r4, #36	; 0x24
    16be:	e7e0      	b.n	1682 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    16c0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    16c4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    16c8:	7910      	ldrb	r0, [r2, #4]
    16ca:	f001 fed3 	bl	3474 <usb_dc_ep_set_callback>
    16ce:	3601      	adds	r6, #1
    16d0:	2800      	cmp	r0, #0
    16d2:	d0ef      	beq.n	16b4 <usb_enable+0xb0>
    16d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    16d8:	e7e3      	b.n	16a2 <usb_enable+0x9e>
		ret = -EALREADY;
    16da:	f06f 0477 	mvn.w	r4, #119	; 0x77
    16de:	e7e0      	b.n	16a2 <usb_enable+0x9e>
    16e0:	2000069c 	.word	0x2000069c
    16e4:	20000264 	.word	0x20000264
    16e8:	00001079 	.word	0x00001079
    16ec:	000014c9 	.word	0x000014c9
    16f0:	20000350 	.word	0x20000350
    16f4:	20000374 	.word	0x20000374

000016f8 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    16f8:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    16fa:	4b1f      	ldr	r3, [pc, #124]	; (1778 <usb_update_sn_string_descriptor+0x80>)
{
    16fc:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    16fe:	aa05      	add	r2, sp, #20
    1700:	f103 0510 	add.w	r5, r3, #16
    1704:	6818      	ldr	r0, [r3, #0]
    1706:	6859      	ldr	r1, [r3, #4]
    1708:	4614      	mov	r4, r2
    170a:	c403      	stmia	r4!, {r0, r1}
    170c:	3308      	adds	r3, #8
    170e:	42ab      	cmp	r3, r5
    1710:	4622      	mov	r2, r4
    1712:	d1f7      	bne.n	1704 <usb_update_sn_string_descriptor+0xc>
    1714:	781b      	ldrb	r3, [r3, #0]
    1716:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    1718:	2210      	movs	r2, #16
    171a:	2100      	movs	r1, #0
    171c:	a801      	add	r0, sp, #4
    171e:	f007 fa18 	bl	8b52 <memset>
	memset(sn, 0, sizeof(sn));
    1722:	2212      	movs	r2, #18
    1724:	2100      	movs	r1, #0
    1726:	4815      	ldr	r0, [pc, #84]	; (177c <usb_update_sn_string_descriptor+0x84>)
    1728:	f007 fa13 	bl	8b52 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    172c:	2110      	movs	r1, #16
    172e:	a801      	add	r0, sp, #4
    1730:	f007 fbbb 	bl	8eaa <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    1734:	2800      	cmp	r0, #0
    1736:	dd1b      	ble.n	1770 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    1738:	2808      	cmp	r0, #8
    173a:	bfb8      	it	lt
    173c:	2008      	movlt	r0, #8
    173e:	3808      	subs	r0, #8
    1740:	ab01      	add	r3, sp, #4
    1742:	4a0e      	ldr	r2, [pc, #56]	; (177c <usb_update_sn_string_descriptor+0x84>)
    1744:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    1746:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    1748:	f810 3b01 	ldrb.w	r3, [r0], #1
    174c:	ac0a      	add	r4, sp, #40	; 0x28
    174e:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    1752:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    1756:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    175a:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    175c:	ac0a      	add	r4, sp, #40	; 0x28
    175e:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    1760:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    1762:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    1766:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    1768:	2908      	cmp	r1, #8
    176a:	f102 0202 	add.w	r2, r2, #2
    176e:	d1eb      	bne.n	1748 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    1770:	4802      	ldr	r0, [pc, #8]	; (177c <usb_update_sn_string_descriptor+0x84>)
    1772:	b00b      	add	sp, #44	; 0x2c
    1774:	bd30      	pop	{r4, r5, pc}
    1776:	bf00      	nop
    1778:	0000a309 	.word	0x0000a309
    177c:	200014c8 	.word	0x200014c8

00001780 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    1780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1784:	4604      	mov	r4, r0
    1786:	b085      	sub	sp, #20
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    1788:	2500      	movs	r5, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    178a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    178e:	46a9      	mov	r9, r5
	struct usb_cfg_data *cfg_data = NULL;
    1790:	462e      	mov	r6, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    1792:	46aa      	mov	sl, r5

	while (head->bLength != 0U) {
    1794:	7820      	ldrb	r0, [r4, #0]
    1796:	b920      	cbnz	r0, 17a2 <usb_fix_descriptor+0x22>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    1798:	4b61      	ldr	r3, [pc, #388]	; (1920 <usb_fix_descriptor+0x1a0>)
    179a:	3402      	adds	r4, #2
    179c:	429c      	cmp	r4, r3
    179e:	d01f      	beq.n	17e0 <usb_fix_descriptor+0x60>
    17a0:	e7f2      	b.n	1788 <usb_fix_descriptor+0x8>
		switch (head->bDescriptorType) {
    17a2:	7863      	ldrb	r3, [r4, #1]
    17a4:	2b05      	cmp	r3, #5
    17a6:	d805      	bhi.n	17b4 <usb_fix_descriptor+0x34>
    17a8:	e8df f003 	tbb	[pc, r3]
    17ac:	78030478 	.word	0x78030478
    17b0:	2007      	.short	0x2007
    17b2:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    17b4:	7823      	ldrb	r3, [r4, #0]
    17b6:	441c      	add	r4, r3
    17b8:	e7ec      	b.n	1794 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    17ba:	78e3      	ldrb	r3, [r4, #3]
    17bc:	2b00      	cmp	r3, #0
    17be:	d1f9      	bne.n	17b4 <usb_fix_descriptor+0x34>
			if (if_descr->bInterfaceNumber == 0U) {
    17c0:	78a3      	ldrb	r3, [r4, #2]
    17c2:	b183      	cbz	r3, 17e6 <usb_fix_descriptor+0x66>
			numof_ifaces++;
    17c4:	f109 0901 	add.w	r9, r9, #1
    17c8:	fa5f f989 	uxtb.w	r9, r9
			break;
    17cc:	e7f2      	b.n	17b4 <usb_fix_descriptor+0x34>
		if (cfg_data->interface_descriptor == iface) {
    17ce:	6872      	ldr	r2, [r6, #4]
    17d0:	4294      	cmp	r4, r2
    17d2:	f000 809d 	beq.w	1910 <usb_fix_descriptor+0x190>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    17d6:	3624      	adds	r6, #36	; 0x24
    17d8:	429e      	cmp	r6, r3
    17da:	d3f8      	bcc.n	17ce <usb_fix_descriptor+0x4e>
					return -1;
    17dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    17e0:	b005      	add	sp, #20
    17e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    17e6:	4e4f      	ldr	r6, [pc, #316]	; (1924 <usb_fix_descriptor+0x1a4>)
    17e8:	4b4f      	ldr	r3, [pc, #316]	; (1928 <usb_fix_descriptor+0x1a8>)
    17ea:	e7f5      	b.n	17d8 <usb_fix_descriptor+0x58>
			if (!cfg_data) {
    17ec:	2e00      	cmp	r6, #0
    17ee:	d0f5      	beq.n	17dc <usb_fix_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    17f0:	2300      	movs	r3, #0
    17f2:	2101      	movs	r1, #1
    17f4:	7f32      	ldrb	r2, [r6, #28]
    17f6:	4293      	cmp	r3, r2
    17f8:	d2f0      	bcs.n	17dc <usb_fix_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    17fa:	6a32      	ldr	r2, [r6, #32]
    17fc:	78a7      	ldrb	r7, [r4, #2]
    17fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1802:	7910      	ldrb	r0, [r2, #4]
    1804:	4287      	cmp	r7, r0
    1806:	d001      	beq.n	180c <usb_fix_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    1808:	3301      	adds	r3, #1
    180a:	e7f3      	b.n	17f4 <usb_fix_descriptor+0x74>
    180c:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    180e:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    1810:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    1814:	f000 0003 	and.w	r0, r0, #3
    1818:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    181c:	7920      	ldrb	r0, [r4, #4]
    181e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    1822:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    1826:	f994 0002 	ldrsb.w	r0, [r4, #2]
    182a:	2800      	cmp	r0, #0
    182c:	fa5f f887 	uxtb.w	r8, r7
    1830:	da28      	bge.n	1884 <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    1832:	f107 0010 	add.w	r0, r7, #16
    1836:	fa01 f000 	lsl.w	r0, r1, r0
    183a:	ea10 0f0b 	tst.w	r0, fp
    183e:	d129      	bne.n	1894 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    1840:	f068 007f 	orn	r0, r8, #127	; 0x7f
    1844:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    1848:	a802      	add	r0, sp, #8
    184a:	e9cd 3200 	strd	r3, r2, [sp]
    184e:	f007 f9d6 	bl	8bfe <usb_dc_ep_check_cap>
    1852:	e9dd 3200 	ldrd	r3, r2, [sp]
    1856:	2101      	movs	r1, #1
    1858:	b9e0      	cbnz	r0, 1894 <usb_fix_descriptor+0x114>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    185a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    185e:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    1860:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    1864:	bf1c      	itt	ne
    1866:	f108 0810 	addne.w	r8, r8, #16
    186a:	fa5f f888 	uxtbne.w	r8, r8
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    186e:	7113      	strb	r3, [r2, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    1870:	460b      	mov	r3, r1
					*requested_ep |= (1U << (idx + 16U));
    1872:	bf15      	itete	ne
    1874:	fa01 f808 	lslne.w	r8, r1, r8
					*requested_ep |= (1U << idx);
    1878:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
    187a:	ea4b 0b08 	orrne.w	fp, fp, r8
					*requested_ep |= (1U << idx);
    187e:	ea4b 0b03 	orreq.w	fp, fp, r3
				return 0;
    1882:	e797      	b.n	17b4 <usb_fix_descriptor+0x34>
				if ((*requested_ep & (1U << (idx)))) {
    1884:	fa01 f007 	lsl.w	r0, r1, r7
    1888:	ea10 0f0b 	tst.w	r0, fp
    188c:	d102      	bne.n	1894 <usb_fix_descriptor+0x114>
				ep_cfg.ep_addr = idx;
    188e:	f88d 8008 	strb.w	r8, [sp, #8]
    1892:	e7d9      	b.n	1848 <usb_fix_descriptor+0xc8>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    1894:	3701      	adds	r7, #1
    1896:	2f10      	cmp	r7, #16
    1898:	d1b9      	bne.n	180e <usb_fix_descriptor+0x8e>
    189a:	e7b5      	b.n	1808 <usb_fix_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    189c:	2d03      	cmp	r5, #3
    189e:	d11d      	bne.n	18dc <usb_fix_descriptor+0x15c>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    18a0:	f7ff ff2a 	bl	16f8 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    18a4:	4607      	mov	r7, r0
    18a6:	b168      	cbz	r0, 18c4 <usb_fix_descriptor+0x144>
	runtime_sn_len = strlen(runtime_sn);
    18a8:	f007 f92c 	bl	8b04 <strlen>
	if (!runtime_sn_len) {
    18ac:	4680      	mov	r8, r0
    18ae:	b148      	cbz	r0, 18c4 <usb_fix_descriptor+0x144>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    18b0:	481e      	ldr	r0, [pc, #120]	; (192c <usb_fix_descriptor+0x1ac>)
    18b2:	f007 f927 	bl	8b04 <strlen>
	if (runtime_sn_len != default_sn_len) {
    18b6:	4580      	cmp	r8, r0
    18b8:	d104      	bne.n	18c4 <usb_fix_descriptor+0x144>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    18ba:	4642      	mov	r2, r8
    18bc:	4639      	mov	r1, r7
    18be:	1ca0      	adds	r0, r4, #2
    18c0:	f007 f93c 	bl	8b3c <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    18c4:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    18c6:	f06f 0102 	mvn.w	r1, #2
    18ca:	18e2      	adds	r2, r4, r3
    18cc:	1b09      	subs	r1, r1, r4
    18ce:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    18d2:	42d1      	cmn	r1, r2
    18d4:	d513      	bpl.n	18fe <usb_fix_descriptor+0x17e>
			str_descr_idx += 1U;
    18d6:	3501      	adds	r5, #1
    18d8:	b2ed      	uxtb	r5, r5
			break;
    18da:	e76b      	b.n	17b4 <usb_fix_descriptor+0x34>
			if (str_descr_idx) {
    18dc:	2d00      	cmp	r5, #0
    18de:	d1f1      	bne.n	18c4 <usb_fix_descriptor+0x144>
				if (!cfg_descr) {
    18e0:	f1ba 0f00 	cmp.w	sl, #0
    18e4:	f43f af7a 	beq.w	17dc <usb_fix_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    18e8:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    18ec:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    18f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    18f4:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    18f8:	f88a 9004 	strb.w	r9, [sl, #4]
    18fc:	e7eb      	b.n	18d6 <usb_fix_descriptor+0x156>
		buf[i] = 0U;
    18fe:	f04f 0000 	mov.w	r0, #0
    1902:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    1906:	f813 0901 	ldrb.w	r0, [r3], #-1
    190a:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    190e:	e7e0      	b.n	18d2 <usb_fix_descriptor+0x152>
				if (cfg_data->interface_config) {
    1910:	68b3      	ldr	r3, [r6, #8]
    1912:	2b00      	cmp	r3, #0
    1914:	f43f af56 	beq.w	17c4 <usb_fix_descriptor+0x44>
					cfg_data->interface_config(head,
    1918:	4649      	mov	r1, r9
    191a:	4620      	mov	r0, r4
    191c:	4798      	blx	r3
    191e:	e751      	b.n	17c4 <usb_fix_descriptor+0x44>
    1920:	2000034d 	.word	0x2000034d
    1924:	20000350 	.word	0x20000350
    1928:	20000374 	.word	0x20000374
    192c:	0000a309 	.word	0x0000a309

00001930 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    1930:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    1932:	4804      	ldr	r0, [pc, #16]	; (1944 <usb_get_device_descriptor+0x14>)
    1934:	f7ff ff24 	bl	1780 <usb_fix_descriptor>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
    1938:	2800      	cmp	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    193a:	4802      	ldr	r0, [pc, #8]	; (1944 <usb_get_device_descriptor+0x14>)
    193c:	bf18      	it	ne
    193e:	2000      	movne	r0, #0
    1940:	bd08      	pop	{r3, pc}
    1942:	bf00      	nop
    1944:	20000288 	.word	0x20000288

00001948 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    1948:	b510      	push	{r4, lr}
    194a:	4b09      	ldr	r3, [pc, #36]	; (1970 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    194c:	2100      	movs	r1, #0
    194e:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    1950:	781c      	ldrb	r4, [r3, #0]
    1952:	4284      	cmp	r4, r0
    1954:	d104      	bne.n	1960 <usb_ep_get_transfer+0x18>
    1956:	685c      	ldr	r4, [r3, #4]
    1958:	b114      	cbz	r4, 1960 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    195a:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    195e:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1960:	3101      	adds	r1, #1
    1962:	2904      	cmp	r1, #4
    1964:	f103 0340 	add.w	r3, r3, #64	; 0x40
    1968:	d1f2      	bne.n	1950 <usb_ep_get_transfer+0x8>
	return NULL;
    196a:	2000      	movs	r0, #0
    196c:	e7f7      	b.n	195e <usb_ep_get_transfer+0x16>
    196e:	bf00      	nop
    1970:	20000760 	.word	0x20000760

00001974 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    1974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    1978:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    197c:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    1980:	3310      	adds	r3, #16
{
    1982:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    1984:	d110      	bne.n	19a8 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    1986:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    1988:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    198c:	0799      	lsls	r1, r3, #30
    198e:	d53c      	bpl.n	1a0a <usb_transfer_work+0x96>
		if (!trans->bsize) {
    1990:	bb02      	cbnz	r2, 19d4 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    1992:	f013 0304 	ands.w	r3, r3, #4
    1996:	d104      	bne.n	19a2 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    1998:	461a      	mov	r2, r3
    199a:	4619      	mov	r1, r3
    199c:	4630      	mov	r0, r6
    199e:	f006 ff83 	bl	88a8 <usb_write>
			}
			trans->status = 0;
    19a2:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    19a4:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    19a8:	f854 3c28 	ldr.w	r3, [r4, #-40]
    19ac:	3310      	adds	r3, #16
    19ae:	d00e      	beq.n	19ce <usb_transfer_work+0x5a>
    19b0:	f854 5c18 	ldr.w	r5, [r4, #-24]
    19b4:	b15d      	cbz	r5, 19ce <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    19b6:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    19ba:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    19be:	f007 fef4 	bl	97aa <k_is_in_isr>
    19c2:	2800      	cmp	r0, #0
    19c4:	d04c      	beq.n	1a60 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    19c6:	482e      	ldr	r0, [pc, #184]	; (1a80 <usb_transfer_work+0x10c>)
    19c8:	4621      	mov	r1, r4
    19ca:	f007 ffad 	bl	9928 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
    19ce:	b002      	add	sp, #8
    19d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    19d4:	f850 1c24 	ldr.w	r1, [r0, #-36]
    19d8:	ab01      	add	r3, sp, #4
    19da:	4630      	mov	r0, r6
    19dc:	f006 ff64 	bl	88a8 <usb_write>
		if (ret) {
    19e0:	b110      	cbz	r0, 19e8 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    19e2:	f06f 0315 	mvn.w	r3, #21
    19e6:	e7dd      	b.n	19a4 <usb_transfer_work+0x30>
		trans->buffer += bytes;
    19e8:	9a01      	ldr	r2, [sp, #4]
    19ea:	f854 3c24 	ldr.w	r3, [r4, #-36]
    19ee:	4413      	add	r3, r2
    19f0:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    19f4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    19f8:	1a9b      	subs	r3, r3, r2
    19fa:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    19fe:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    1a02:	4413      	add	r3, r2
    1a04:	f844 3c1c 	str.w	r3, [r4, #-28]
    1a08:	e7ce      	b.n	19a8 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    1a0a:	f850 1c24 	ldr.w	r1, [r0, #-36]
    1a0e:	ab01      	add	r3, sp, #4
    1a10:	4630      	mov	r0, r6
    1a12:	f001 fca5 	bl	3360 <usb_dc_ep_read_wait>
		if (ret) {
    1a16:	2800      	cmp	r0, #0
    1a18:	d1e3      	bne.n	19e2 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    1a1a:	9d01      	ldr	r5, [sp, #4]
    1a1c:	f854 3c24 	ldr.w	r3, [r4, #-36]
    1a20:	442b      	add	r3, r5
    1a22:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    1a26:	f854 3c20 	ldr.w	r3, [r4, #-32]
    1a2a:	1b5b      	subs	r3, r3, r5
    1a2c:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    1a30:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    1a34:	442b      	add	r3, r5
    1a36:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    1a3a:	2d00      	cmp	r5, #0
    1a3c:	d0b1      	beq.n	19a2 <usb_transfer_work+0x2e>
    1a3e:	4630      	mov	r0, r6
    1a40:	f001 fd32 	bl	34a8 <usb_dc_ep_mps>
    1a44:	fbb5 f3f0 	udiv	r3, r5, r0
    1a48:	fb03 5510 	mls	r5, r3, r0, r5
    1a4c:	2d00      	cmp	r5, #0
    1a4e:	d1a8      	bne.n	19a2 <usb_transfer_work+0x2e>
    1a50:	f854 3c20 	ldr.w	r3, [r4, #-32]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d0a4      	beq.n	19a2 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    1a58:	4630      	mov	r0, r6
    1a5a:	f001 fcc9 	bl	33f0 <usb_dc_ep_read_continue>
    1a5e:	e7a3      	b.n	19a8 <usb_transfer_work+0x34>
		trans->cb = NULL;
    1a60:	f844 0c18 	str.w	r0, [r4, #-24]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1a64:	f1a4 0010 	sub.w	r0, r4, #16
    1a68:	f005 fc4e 	bl	7308 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
    1a6c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    1a70:	338c      	adds	r3, #140	; 0x8c
    1a72:	d0ac      	beq.n	19ce <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
    1a74:	4642      	mov	r2, r8
    1a76:	4639      	mov	r1, r7
    1a78:	4630      	mov	r0, r6
    1a7a:	47a8      	blx	r5
    1a7c:	e7a7      	b.n	19ce <usb_transfer_work+0x5a>
    1a7e:	bf00      	nop
    1a80:	20000378 	.word	0x20000378

00001a84 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    1a84:	1e4b      	subs	r3, r1, #1
    1a86:	2b01      	cmp	r3, #1
{
    1a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1a8a:	4606      	mov	r6, r0
    1a8c:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    1a8e:	d80f      	bhi.n	1ab0 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    1a90:	f7ff ff5a 	bl	1948 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    1a94:	4604      	mov	r4, r0
    1a96:	b968      	cbnz	r0, 1ab4 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    1a98:	2d01      	cmp	r5, #1
    1a9a:	d109      	bne.n	1ab0 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    1a9c:	ab01      	add	r3, sp, #4
    1a9e:	2201      	movs	r2, #1
    1aa0:	f10d 0103 	add.w	r1, sp, #3
    1aa4:	4630      	mov	r0, r6
    1aa6:	f001 fc5b 	bl	3360 <usb_dc_ep_read_wait>
			} while (bytes);
    1aaa:	9b01      	ldr	r3, [sp, #4]
    1aac:	2b00      	cmp	r3, #0
    1aae:	d1f5      	bne.n	1a9c <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    1ab0:	b002      	add	sp, #8
    1ab2:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    1ab4:	f007 fe79 	bl	97aa <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1ab8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    1abc:	b108      	cbz	r0, 1ac2 <usb_transfer_ep_callback+0x3e>
    1abe:	2d01      	cmp	r5, #1
    1ac0:	d105      	bne.n	1ace <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    1ac2:	4608      	mov	r0, r1
}
    1ac4:	b002      	add	sp, #8
    1ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    1aca:	f7ff bf53 	b.w	1974 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1ace:	4803      	ldr	r0, [pc, #12]	; (1adc <usb_transfer_ep_callback+0x58>)
}
    1ad0:	b002      	add	sp, #8
    1ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1ad6:	f007 bf27 	b.w	9928 <k_work_submit_to_queue>
    1ada:	bf00      	nop
    1adc:	20000378 	.word	0x20000378

00001ae0 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    1ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ae4:	4606      	mov	r6, r0
    1ae6:	9101      	str	r1, [sp, #4]
    1ae8:	4615      	mov	r5, r2
    1aea:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    1aec:	f006 ff24 	bl	8938 <usb_transfer_is_busy>
    1af0:	4604      	mov	r4, r0
    1af2:	2800      	cmp	r0, #0
    1af4:	d15c      	bne.n	1bb0 <usb_transfer+0xd0>
    1af6:	f04f 0320 	mov.w	r3, #32
    1afa:	f3ef 8a11 	mrs	sl, BASEPRI
    1afe:	f383 8812 	msr	BASEPRI_MAX, r3
    1b02:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1b06:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1bb8 <usb_transfer+0xd8>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    1b0a:	01a7      	lsls	r7, r4, #6
	return z_impl_k_sem_take(sem, timeout);
    1b0c:	2200      	movs	r2, #0
    1b0e:	2300      	movs	r3, #0
    1b10:	4658      	mov	r0, fp
    1b12:	f005 fc19 	bl	7348 <z_impl_k_sem_take>
    1b16:	b968      	cbnz	r0, 1b34 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    1b18:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1bbc <usb_transfer+0xdc>
    1b1c:	eb09 0407 	add.w	r4, r9, r7
    1b20:	6863      	ldr	r3, [r4, #4]
    1b22:	f113 0f10 	cmn.w	r3, #16
    1b26:	d114      	bne.n	1b52 <usb_transfer+0x72>
    1b28:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    1b2a:	4658      	mov	r0, fp
    1b2c:	f005 fbec 	bl	7308 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    1b30:	9b01      	ldr	r3, [sp, #4]
    1b32:	e006      	b.n	1b42 <usb_transfer+0x62>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1b34:	3401      	adds	r4, #1
    1b36:	2c04      	cmp	r4, #4
    1b38:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    1b3c:	d1e5      	bne.n	1b0a <usb_transfer+0x2a>
		ret = -ENOMEM;
    1b3e:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    1b42:	f38a 8811 	msr	BASEPRI, sl
    1b46:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    1b4a:	4618      	mov	r0, r3
    1b4c:	b003      	add	sp, #12
    1b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    1b52:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    1b54:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    1b56:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    1b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1b5c:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    1b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b60:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    1b62:	f06f 030f 	mvn.w	r3, #15
	trans->flags = flags;
    1b66:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    1b6a:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    1b6c:	4630      	mov	r0, r6
	trans->ep = ep;
    1b6e:	f809 6007 	strb.w	r6, [r9, r7]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    1b72:	f001 fc99 	bl	34a8 <usb_dc_ep_mps>
    1b76:	b158      	cbz	r0, 1b90 <usb_transfer+0xb0>
    1b78:	4630      	mov	r0, r6
    1b7a:	f001 fc95 	bl	34a8 <usb_dc_ep_mps>
    1b7e:	fbb5 f2f0 	udiv	r2, r5, r0
    1b82:	fb02 5510 	mls	r5, r2, r0, r5
    1b86:	b11d      	cbz	r5, 1b90 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    1b88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1b8a:	f043 0304 	orr.w	r3, r3, #4
    1b8e:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    1b90:	f018 0f02 	tst.w	r8, #2
    1b94:	d007      	beq.n	1ba6 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1b96:	372c      	adds	r7, #44	; 0x2c
    1b98:	4809      	ldr	r0, [pc, #36]	; (1bc0 <usb_transfer+0xe0>)
    1b9a:	eb09 0107 	add.w	r1, r9, r7
    1b9e:	f007 fec3 	bl	9928 <k_work_submit_to_queue>
	int i, key, ret = 0;
    1ba2:	2300      	movs	r3, #0
    1ba4:	e7cd      	b.n	1b42 <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    1ba6:	4630      	mov	r0, r6
    1ba8:	f001 fc22 	bl	33f0 <usb_dc_ep_read_continue>
    1bac:	4603      	mov	r3, r0
    1bae:	e7c8      	b.n	1b42 <usb_transfer+0x62>
		return -EBUSY;
    1bb0:	f06f 030f 	mvn.w	r3, #15
    1bb4:	e7c9      	b.n	1b4a <usb_transfer+0x6a>
    1bb6:	bf00      	nop
    1bb8:	2000077c 	.word	0x2000077c
    1bbc:	20000760 	.word	0x20000760
    1bc0:	20000378 	.word	0x20000378

00001bc4 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    1bc4:	b510      	push	{r4, lr}
	__asm__ volatile(
    1bc6:	f04f 0320 	mov.w	r3, #32
    1bca:	f3ef 8411 	mrs	r4, BASEPRI
    1bce:	f383 8812 	msr	BASEPRI_MAX, r3
    1bd2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    1bd6:	f7ff feb7 	bl	1948 <usb_ep_get_transfer>
	if (!trans) {
    1bda:	b150      	cbz	r0, 1bf2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    1bdc:	6843      	ldr	r3, [r0, #4]
    1bde:	3310      	adds	r3, #16
    1be0:	d107      	bne.n	1bf2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    1be2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    1be6:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1be8:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    1bec:	4803      	ldr	r0, [pc, #12]	; (1bfc <usb_cancel_transfer+0x38>)
    1bee:	f007 fe9b 	bl	9928 <k_work_submit_to_queue>
	__asm__ volatile(
    1bf2:	f384 8811 	msr	BASEPRI, r4
    1bf6:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    1bfa:	bd10      	pop	{r4, pc}
    1bfc:	20000378 	.word	0x20000378

00001c00 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    1c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c04:	4c10      	ldr	r4, [pc, #64]	; (1c48 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1c06:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1c4c <usb_cancel_transfers+0x4c>
{
    1c0a:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
    1c0c:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
    1c10:	f04f 0320 	mov.w	r3, #32
    1c14:	f3ef 8611 	mrs	r6, BASEPRI
    1c18:	f383 8812 	msr	BASEPRI_MAX, r3
    1c1c:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    1c20:	6863      	ldr	r3, [r4, #4]
    1c22:	3310      	adds	r3, #16
    1c24:	d105      	bne.n	1c32 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1c26:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    1c2a:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
    1c2c:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    1c2e:	f007 fe7b 	bl	9928 <k_work_submit_to_queue>
	__asm__ volatile(
    1c32:	f386 8811 	msr	BASEPRI, r6
    1c36:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1c3a:	3d01      	subs	r5, #1
    1c3c:	f104 0440 	add.w	r4, r4, #64	; 0x40
    1c40:	d1e6      	bne.n	1c10 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    1c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c46:	bf00      	nop
    1c48:	20000760 	.word	0x20000760
    1c4c:	20000378 	.word	0x20000378

00001c50 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    1c50:	b570      	push	{r4, r5, r6, lr}
    1c52:	4c0a      	ldr	r4, [pc, #40]	; (1c7c <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    1c54:	4e0a      	ldr	r6, [pc, #40]	; (1c80 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1c56:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    1c58:	4631      	mov	r1, r6
    1c5a:	4620      	mov	r0, r4
    1c5c:	f007 fe5b 	bl	9916 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    1c60:	2201      	movs	r2, #1
    1c62:	f1a4 0010 	sub.w	r0, r4, #16
    1c66:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    1c68:	3501      	adds	r5, #1
    1c6a:	f007 fe36 	bl	98da <z_impl_k_sem_init>
    1c6e:	2d04      	cmp	r5, #4
    1c70:	f104 0440 	add.w	r4, r4, #64	; 0x40
    1c74:	d1f0      	bne.n	1c58 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    1c76:	2000      	movs	r0, #0
    1c78:	bd70      	pop	{r4, r5, r6, pc}
    1c7a:	bf00      	nop
    1c7c:	2000078c 	.word	0x2000078c
    1c80:	00001975 	.word	0x00001975

00001c84 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    1c84:	b570      	push	{r4, r5, r6, lr}
    1c86:	4604      	mov	r4, r0
    1c88:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    1c8a:	7901      	ldrb	r1, [r0, #4]
    1c8c:	4812      	ldr	r0, [pc, #72]	; (1cd8 <cdc_acm_class_handle_req+0x54>)
{
    1c8e:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    1c90:	f006 fe2e 	bl	88f0 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    1c94:	b1e8      	cbz	r0, 1cd2 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    1c96:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    1c9a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    1c9c:	2a00      	cmp	r2, #0
    1c9e:	db11      	blt.n	1cc4 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    1ca0:	2b20      	cmp	r3, #32
    1ca2:	d004      	beq.n	1cae <cdc_acm_class_handle_req+0x2a>
    1ca4:	2b22      	cmp	r3, #34	; 0x22
    1ca6:	d009      	beq.n	1cbc <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    1ca8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1cac:	e005      	b.n	1cba <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    1cae:	6829      	ldr	r1, [r5, #0]
    1cb0:	2207      	movs	r2, #7
    1cb2:	380c      	subs	r0, #12
    1cb4:	f006 ff42 	bl	8b3c <memcpy>
			return 0;
    1cb8:	2000      	movs	r0, #0
}
    1cba:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    1cbc:	8863      	ldrh	r3, [r4, #2]
    1cbe:	f800 3c05 	strb.w	r3, [r0, #-5]
			return 0;
    1cc2:	e7f9      	b.n	1cb8 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    1cc4:	2b21      	cmp	r3, #33	; 0x21
    1cc6:	d1ef      	bne.n	1ca8 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    1cc8:	380c      	subs	r0, #12
			*len = sizeof(dev_data->line_coding);
    1cca:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    1ccc:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    1cce:	6033      	str	r3, [r6, #0]
    1cd0:	e7f2      	b.n	1cb8 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    1cd2:	f06f 0012 	mvn.w	r0, #18
    1cd6:	e7f0      	b.n	1cba <cdc_acm_class_handle_req+0x36>
    1cd8:	20000860 	.word	0x20000860

00001cdc <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    1cdc:	b508      	push	{r3, lr}
    1cde:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    1ce0:	4803      	ldr	r0, [pc, #12]	; (1cf0 <cdc_acm_int_in+0x14>)
    1ce2:	f006 fe13 	bl	890c <usb_get_dev_data_by_ep>
	if (common == NULL) {
    1ce6:	b110      	cbz	r0, 1cee <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    1ce8:	2301      	movs	r3, #1
    1cea:	f800 3c03 	strb.w	r3, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    1cee:	bd08      	pop	{r3, pc}
    1cf0:	20000860 	.word	0x20000860

00001cf4 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    1cf4:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    1cf6:	2301      	movs	r3, #1
    1cf8:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    1cfc:	680b      	ldr	r3, [r1, #0]
    1cfe:	b133      	cbz	r3, 1d0e <cdc_acm_irq_rx_enable+0x1a>
    1d00:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    1d04:	b11b      	cbz	r3, 1d0e <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    1d06:	4802      	ldr	r0, [pc, #8]	; (1d10 <cdc_acm_irq_rx_enable+0x1c>)
    1d08:	3108      	adds	r1, #8
    1d0a:	f007 be0d 	b.w	9928 <k_work_submit_to_queue>
	}
}
    1d0e:	4770      	bx	lr
    1d10:	20000378 	.word	0x20000378

00001d14 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    1d14:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    1d16:	2301      	movs	r3, #1
    1d18:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    1d1c:	680b      	ldr	r3, [r1, #0]
    1d1e:	b133      	cbz	r3, 1d2e <cdc_acm_irq_tx_enable+0x1a>
    1d20:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    1d24:	b11b      	cbz	r3, 1d2e <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    1d26:	4802      	ldr	r0, [pc, #8]	; (1d30 <cdc_acm_irq_tx_enable+0x1c>)
    1d28:	3108      	adds	r1, #8
    1d2a:	f007 bdfd 	b.w	9928 <k_work_submit_to_queue>
}
    1d2e:	4770      	bx	lr
    1d30:	20000378 	.word	0x20000378

00001d34 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    1d34:	4a0b      	ldr	r2, [pc, #44]	; (1d64 <cdc_acm_reset_port+0x30>)
{
    1d36:	4603      	mov	r3, r0
	dev_data->configured = false;
    1d38:	2100      	movs	r1, #0
    1d3a:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	dev_data->tx_ready = false;
    1d3e:	8501      	strh	r1, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    1d40:	6810      	ldr	r0, [r2, #0]
    1d42:	6758      	str	r0, [r3, #116]	; 0x74
    1d44:	8890      	ldrh	r0, [r2, #4]
    1d46:	7992      	ldrb	r2, [r2, #6]
    1d48:	f8a3 0078 	strh.w	r0, [r3, #120]	; 0x78
    1d4c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    1d50:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    1d54:	f883 107b 	strb.w	r1, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    1d58:	2240      	movs	r2, #64	; 0x40
    1d5a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    1d5e:	f006 bef8 	b.w	8b52 <memset>
    1d62:	bf00      	nop
    1d64:	0000a000 	.word	0x0000a000

00001d68 <cdc_acm_fifo_fill>:
{
    1d68:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    1d6a:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    1d6c:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
    1d70:	b170      	cbz	r0, 1d90 <cdc_acm_fifo_fill+0x28>
    1d72:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
    1d76:	b963      	cbnz	r3, 1d92 <cdc_acm_fifo_fill+0x2a>
	dev_data->tx_ready = false;
    1d78:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    1d7c:	6f28      	ldr	r0, [r5, #112]	; 0x70
    1d7e:	f006 fd0a 	bl	8796 <ring_buf_put>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    1d82:	f105 0118 	add.w	r1, r5, #24
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    1d86:	4604      	mov	r4, r0
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    1d88:	4803      	ldr	r0, [pc, #12]	; (1d98 <cdc_acm_fifo_fill+0x30>)
    1d8a:	f007 fdcd 	bl	9928 <k_work_submit_to_queue>
	return wrote;
    1d8e:	4620      	mov	r0, r4
}
    1d90:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    1d92:	2000      	movs	r0, #0
    1d94:	e7fc      	b.n	1d90 <cdc_acm_fifo_fill+0x28>
    1d96:	bf00      	nop
    1d98:	20000378 	.word	0x20000378

00001d9c <cdc_acm_read_cb>:
{
    1d9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1d9e:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    1da0:	f102 062c 	add.w	r6, r2, #44	; 0x2c
	if (size <= 0) {
    1da4:	1e0a      	subs	r2, r1, #0
{
    1da6:	4605      	mov	r5, r0
	if (size <= 0) {
    1da8:	dd10      	ble.n	1dcc <cdc_acm_read_cb+0x30>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    1daa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    1dac:	4631      	mov	r1, r6
    1dae:	f006 fcf2 	bl	8796 <ring_buf_put>
	dev_data->rx_ready = true;
    1db2:	2301      	movs	r3, #1
    1db4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    1db8:	6823      	ldr	r3, [r4, #0]
    1dba:	b13b      	cbz	r3, 1dcc <cdc_acm_read_cb+0x30>
    1dbc:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    1dc0:	b123      	cbz	r3, 1dcc <cdc_acm_read_cb+0x30>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    1dc2:	4808      	ldr	r0, [pc, #32]	; (1de4 <cdc_acm_read_cb+0x48>)
    1dc4:	f104 0108 	add.w	r1, r4, #8
    1dc8:	f007 fdae 	bl	9928 <k_work_submit_to_queue>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    1dcc:	4b06      	ldr	r3, [pc, #24]	; (1de8 <cdc_acm_read_cb+0x4c>)
    1dce:	9300      	str	r3, [sp, #0]
    1dd0:	9401      	str	r4, [sp, #4]
    1dd2:	2301      	movs	r3, #1
    1dd4:	2240      	movs	r2, #64	; 0x40
    1dd6:	4631      	mov	r1, r6
    1dd8:	4628      	mov	r0, r5
    1dda:	f7ff fe81 	bl	1ae0 <usb_transfer>
}
    1dde:	b002      	add	sp, #8
    1de0:	bd70      	pop	{r4, r5, r6, pc}
    1de2:	bf00      	nop
    1de4:	20000378 	.word	0x20000378
    1de8:	00001d9d 	.word	0x00001d9d

00001dec <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    1dec:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    1dee:	6904      	ldr	r4, [r0, #16]
{
    1df0:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    1df4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    1df8:	b18b      	cbz	r3, 1e1e <cdc_acm_poll_out+0x32>
    1dfa:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    1dfe:	b973      	cbnz	r3, 1e1e <cdc_acm_poll_out+0x32>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    1e00:	f10d 0107 	add.w	r1, sp, #7
    1e04:	6f20      	ldr	r0, [r4, #112]	; 0x70
	dev_data->tx_ready = false;
    1e06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    1e0a:	2201      	movs	r2, #1
    1e0c:	f006 fcc3 	bl	8796 <ring_buf_put>
    1e10:	4601      	mov	r1, r0
    1e12:	b130      	cbz	r0, 1e22 <cdc_acm_poll_out+0x36>
			LOG_ERR("Failed to drain buffer");
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    1e14:	480a      	ldr	r0, [pc, #40]	; (1e40 <cdc_acm_poll_out+0x54>)
    1e16:	f104 0118 	add.w	r1, r4, #24
    1e1a:	f007 fd85 	bl	9928 <k_work_submit_to_queue>
}
    1e1e:	b002      	add	sp, #8
    1e20:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    1e22:	6f20      	ldr	r0, [r4, #112]	; 0x70
    1e24:	2201      	movs	r2, #1
    1e26:	f006 fd1e 	bl	8866 <ring_buf_get>
    1e2a:	2800      	cmp	r0, #0
    1e2c:	d0f7      	beq.n	1e1e <cdc_acm_poll_out+0x32>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    1e2e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    1e30:	2201      	movs	r2, #1
    1e32:	f10d 0107 	add.w	r1, sp, #7
    1e36:	f006 fcae 	bl	8796 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    1e3a:	2800      	cmp	r0, #0
    1e3c:	d1ea      	bne.n	1e14 <cdc_acm_poll_out+0x28>
    1e3e:	e7ee      	b.n	1e1e <cdc_acm_poll_out+0x32>
    1e40:	20000378 	.word	0x20000378

00001e44 <cdc_acm_write_cb>:
	dev_data->tx_ready = true;
    1e44:	2301      	movs	r3, #1
    1e46:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    1e4a:	6813      	ldr	r3, [r2, #0]
{
    1e4c:	b510      	push	{r4, lr}
    1e4e:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    1e50:	b13b      	cbz	r3, 1e62 <cdc_acm_write_cb+0x1e>
    1e52:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    1e56:	b123      	cbz	r3, 1e62 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    1e58:	4808      	ldr	r0, [pc, #32]	; (1e7c <cdc_acm_write_cb+0x38>)
    1e5a:	f102 0108 	add.w	r1, r2, #8
    1e5e:	f007 fd63 	bl	9928 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    1e62:	6f20      	ldr	r0, [r4, #112]	; 0x70
    1e64:	f006 fc3d 	bl	86e2 <ring_buf_is_empty>
    1e68:	b930      	cbnz	r0, 1e78 <cdc_acm_write_cb+0x34>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    1e6a:	f104 0118 	add.w	r1, r4, #24
    1e6e:	4803      	ldr	r0, [pc, #12]	; (1e7c <cdc_acm_write_cb+0x38>)
}
    1e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    1e74:	f007 bd58 	b.w	9928 <k_work_submit_to_queue>
}
    1e78:	bd10      	pop	{r4, pc}
    1e7a:	bf00      	nop
    1e7c:	20000378 	.word	0x20000378

00001e80 <tx_work_handler>:
{
    1e80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    1e82:	6e83      	ldr	r3, [r0, #104]	; 0x68
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    1e84:	685b      	ldr	r3, [r3, #4]
    1e86:	6a1b      	ldr	r3, [r3, #32]
    1e88:	7d1e      	ldrb	r6, [r3, #20]
{
    1e8a:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    1e8c:	4630      	mov	r0, r6
    1e8e:	f006 fd53 	bl	8938 <usb_transfer_is_busy>
    1e92:	b9d0      	cbnz	r0, 1eca <tx_work_handler+0x4a>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    1e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
    1e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1e9a:	a903      	add	r1, sp, #12
    1e9c:	f006 fc9a 	bl	87d4 <ring_buf_get_claim>
	if (!len) {
    1ea0:	4604      	mov	r4, r0
    1ea2:	b190      	cbz	r0, 1eca <tx_work_handler+0x4a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    1ea4:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    1ea6:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    1eaa:	bf08      	it	eq
    1eac:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    1eb0:	9301      	str	r3, [sp, #4]
    1eb2:	4b07      	ldr	r3, [pc, #28]	; (1ed0 <tx_work_handler+0x50>)
    1eb4:	9903      	ldr	r1, [sp, #12]
    1eb6:	9300      	str	r3, [sp, #0]
    1eb8:	4622      	mov	r2, r4
    1eba:	2302      	movs	r3, #2
    1ebc:	4630      	mov	r0, r6
    1ebe:	f7ff fe0f 	bl	1ae0 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    1ec2:	6da8      	ldr	r0, [r5, #88]	; 0x58
    1ec4:	4621      	mov	r1, r4
    1ec6:	f006 fcb0 	bl	882a <ring_buf_get_finish>
}
    1eca:	b004      	add	sp, #16
    1ecc:	bd70      	pop	{r4, r5, r6, pc}
    1ece:	bf00      	nop
    1ed0:	00001e45 	.word	0x00001e45

00001ed4 <cdc_acm_dev_status_cb>:
{
    1ed4:	b538      	push	{r3, r4, r5, lr}
    1ed6:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    1ed8:	4601      	mov	r1, r0
    1eda:	4824      	ldr	r0, [pc, #144]	; (1f6c <cdc_acm_dev_status_cb+0x98>)
    1edc:	f006 fcfc 	bl	88d8 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    1ee0:	4604      	mov	r4, r0
    1ee2:	b380      	cbz	r0, 1f46 <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    1ee4:	4602      	mov	r2, r0
	switch (status) {
    1ee6:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    1ee8:	f852 3980 	ldr.w	r3, [r2], #-128
    1eec:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    1eee:	2905      	cmp	r1, #5
    1ef0:	d829      	bhi.n	1f46 <cdc_acm_dev_status_cb+0x72>
    1ef2:	e8df f001 	tbb	[pc, r1]
    1ef6:	2820      	.short	0x2820
    1ef8:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    1efc:	f814 1c02 	ldrb.w	r1, [r4, #-2]
    1f00:	b931      	cbnz	r1, 1f10 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    1f02:	6a1b      	ldr	r3, [r3, #32]
    1f04:	7b18      	ldrb	r0, [r3, #12]
    1f06:	f7ff ff49 	bl	1d9c <cdc_acm_read_cb>
			dev_data->configured = true;
    1f0a:	2301      	movs	r3, #1
    1f0c:	f804 3c02 	strb.w	r3, [r4, #-2]
		if (!dev_data->tx_ready) {
    1f10:	f814 3c58 	ldrb.w	r3, [r4, #-88]
    1f14:	b9bb      	cbnz	r3, 1f46 <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    1f16:	2301      	movs	r3, #1
    1f18:	f804 3c58 	strb.w	r3, [r4, #-88]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    1f1c:	f854 3c80 	ldr.w	r3, [r4, #-128]
    1f20:	b18b      	cbz	r3, 1f46 <cdc_acm_dev_status_cb+0x72>
    1f22:	f814 3c56 	ldrb.w	r3, [r4, #-86]
    1f26:	b173      	cbz	r3, 1f46 <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    1f28:	f1a4 0178 	sub.w	r1, r4, #120	; 0x78
    1f2c:	4810      	ldr	r0, [pc, #64]	; (1f70 <cdc_acm_dev_status_cb+0x9c>)
}
    1f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    1f32:	f007 bcf9 	b.w	9928 <k_work_submit_to_queue>
}
    1f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    1f3a:	4610      	mov	r0, r2
    1f3c:	f7ff befa 	b.w	1d34 <cdc_acm_reset_port>
		dev_data->suspended = true;
    1f40:	2301      	movs	r3, #1
    1f42:	f804 3c01 	strb.w	r3, [r4, #-1]
}
    1f46:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    1f48:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    1f4c:	2900      	cmp	r1, #0
    1f4e:	d0fa      	beq.n	1f46 <cdc_acm_dev_status_cb+0x72>
			if (dev_data->configured) {
    1f50:	f814 0c02 	ldrb.w	r0, [r4, #-2]
			dev_data->suspended = false;
    1f54:	2100      	movs	r1, #0
    1f56:	f804 1c01 	strb.w	r1, [r4, #-1]
			if (dev_data->configured) {
    1f5a:	2800      	cmp	r0, #0
    1f5c:	d0f3      	beq.n	1f46 <cdc_acm_dev_status_cb+0x72>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    1f5e:	6a1b      	ldr	r3, [r3, #32]
    1f60:	7b18      	ldrb	r0, [r3, #12]
}
    1f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    1f66:	f7ff bf19 	b.w	1d9c <cdc_acm_read_cb>
    1f6a:	bf00      	nop
    1f6c:	20000860 	.word	0x20000860
    1f70:	20000378 	.word	0x20000378

00001f74 <cdc_acm_init>:
{
    1f74:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    1f76:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    1f78:	2300      	movs	r3, #0
    1f7a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    1f7e:	4b0c      	ldr	r3, [pc, #48]	; (1fb0 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    1f80:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    1f84:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    1f86:	f104 0284 	add.w	r2, r4, #132	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1f8a:	b969      	cbnz	r1, 1fa8 <cdc_acm_init+0x34>
	list->head = node;
    1f8c:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    1f90:	f104 0008 	add.w	r0, r4, #8
    1f94:	4907      	ldr	r1, [pc, #28]	; (1fb4 <cdc_acm_init+0x40>)
    1f96:	f007 fcbe 	bl	9916 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    1f9a:	f104 0018 	add.w	r0, r4, #24
    1f9e:	4906      	ldr	r1, [pc, #24]	; (1fb8 <cdc_acm_init+0x44>)
    1fa0:	f007 fcb9 	bl	9916 <k_work_init>
}
    1fa4:	2000      	movs	r0, #0
    1fa6:	bd10      	pop	{r4, pc}
	parent->next = child;
    1fa8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    1faa:	605a      	str	r2, [r3, #4]
}
    1fac:	e7f0      	b.n	1f90 <cdc_acm_init+0x1c>
    1fae:	bf00      	nop
    1fb0:	20000860 	.word	0x20000860
    1fb4:	00008963 	.word	0x00008963
    1fb8:	00001e81 	.word	0x00001e81

00001fbc <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    1fbc:	b530      	push	{r4, r5, lr}
    1fbe:	b085      	sub	sp, #20
	notification.bmRequestType = 0xA1;
    1fc0:	23a1      	movs	r3, #161	; 0xa1
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    1fc2:	6905      	ldr	r5, [r0, #16]
	notification.bmRequestType = 0xA1;
    1fc4:	f88d 3004 	strb.w	r3, [sp, #4]
	notification.bNotificationType = 0x20;
    1fc8:	2320      	movs	r3, #32
	struct usb_cfg_data * const cfg = (void *)dev->config;
    1fca:	6842      	ldr	r2, [r0, #4]
	notification.bNotificationType = 0x20;
    1fcc:	f88d 3005 	strb.w	r3, [sp, #5]
	notification.wValue = 0U;
    1fd0:	2300      	movs	r3, #0
	dev_data->notification_sent = 0U;
    1fd2:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    1fd6:	2002      	movs	r0, #2
    1fd8:	f8ad 000a 	strh.w	r0, [sp, #10]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    1fdc:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    1fde:	f8ad 100c 	strh.w	r1, [sp, #12]
	notification.wIndex = 0U;
    1fe2:	f8ad 3008 	strh.w	r3, [sp, #8]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    1fe6:	7900      	ldrb	r0, [r0, #4]
	notification.wValue = 0U;
    1fe8:	f8ad 3006 	strh.w	r3, [sp, #6]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    1fec:	220a      	movs	r2, #10
    1fee:	a901      	add	r1, sp, #4
    1ff0:	f006 fc5a 	bl	88a8 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    1ff4:	4c05      	ldr	r4, [pc, #20]	; (200c <cdc_acm_send_notification.isra.0+0x50>)
    1ff6:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    1ffa:	b923      	cbnz	r3, 2006 <cdc_acm_send_notification.isra.0+0x4a>
	z_impl_k_busy_wait(usec_to_wait);
    1ffc:	2001      	movs	r0, #1
    1ffe:	f007 fdd7 	bl	9bb0 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    2002:	3c01      	subs	r4, #1
    2004:	d1f7      	bne.n	1ff6 <cdc_acm_send_notification.isra.0+0x3a>
}
    2006:	b005      	add	sp, #20
    2008:	bd30      	pop	{r4, r5, pc}
    200a:	bf00      	nop
    200c:	000186a1 	.word	0x000186a1

00002010 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    2010:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    2012:	4d09      	ldr	r5, [pc, #36]	; (2038 <z_usb_work_q_init+0x28>)
    2014:	4909      	ldr	r1, [pc, #36]	; (203c <z_usb_work_q_init+0x2c>)
    2016:	2400      	movs	r4, #0
    2018:	9400      	str	r4, [sp, #0]
    201a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	4628      	mov	r0, r5
    2024:	f005 fa9e 	bl	7564 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    2028:	4905      	ldr	r1, [pc, #20]	; (2040 <z_usb_work_q_init+0x30>)
    202a:	4628      	mov	r0, r5
    202c:	f007 fbc3 	bl	97b6 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    2030:	4620      	mov	r0, r4
    2032:	b003      	add	sp, #12
    2034:	bd30      	pop	{r4, r5, pc}
    2036:	bf00      	nop
    2038:	20000378 	.word	0x20000378
    203c:	20001538 	.word	0x20001538
    2040:	0000a324 	.word	0x0000a324

00002044 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2048:	4605      	mov	r5, r0
	__asm__ volatile(
    204a:	f04f 0320 	mov.w	r3, #32
    204e:	f3ef 8611 	mrs	r6, BASEPRI
    2052:	f383 8812 	msr	BASEPRI_MAX, r3
    2056:	f3bf 8f6f 	isb	sy
	return list->head;
    205a:	4b0e      	ldr	r3, [pc, #56]	; (2094 <pm_state_notify+0x50>)
    205c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    205e:	b19c      	cbz	r4, 2088 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2060:	4f0d      	ldr	r7, [pc, #52]	; (2098 <pm_state_notify+0x54>)
    2062:	f8df 8038 	ldr.w	r8, [pc, #56]	; 209c <pm_state_notify+0x58>
    2066:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    206a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    206e:	2d00      	cmp	r5, #0
    2070:	bf08      	it	eq
    2072:	4613      	moveq	r3, r2
		if (callback) {
    2074:	b12b      	cbz	r3, 2082 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2076:	f898 2014 	ldrb.w	r2, [r8, #20]
    207a:	fb09 f202 	mul.w	r2, r9, r2
    207e:	5cb8      	ldrb	r0, [r7, r2]
    2080:	4798      	blx	r3
	return node->next;
    2082:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2084:	2c00      	cmp	r4, #0
    2086:	d1f0      	bne.n	206a <pm_state_notify+0x26>
	__asm__ volatile(
    2088:	f386 8811 	msr	BASEPRI, r6
    208c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2094:	20000868 	.word	0x20000868
    2098:	20000870 	.word	0x20000870
    209c:	20001488 	.word	0x20001488

000020a0 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    20a0:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    20a2:	2301      	movs	r3, #1
    20a4:	f000 001f 	and.w	r0, r0, #31
    20a8:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    20ac:	4b07      	ldr	r3, [pc, #28]	; (20cc <atomic_clear_bit.constprop.0+0x2c>)
    20ae:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    20b2:	43c0      	mvns	r0, r0
    20b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    20b8:	e853 2f00 	ldrex	r2, [r3]
    20bc:	4002      	ands	r2, r0
    20be:	e843 2100 	strex	r1, r2, [r3]
    20c2:	2900      	cmp	r1, #0
    20c4:	d1f8      	bne.n	20b8 <atomic_clear_bit.constprop.0+0x18>
    20c6:	f3bf 8f5b 	dmb	ish
}
    20ca:	4770      	bx	lr
    20cc:	2000087c 	.word	0x2000087c

000020d0 <pm_system_resume>:

void pm_system_resume(void)
{
    20d0:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    20d2:	4b1d      	ldr	r3, [pc, #116]	; (2148 <pm_system_resume+0x78>)
    20d4:	7d1c      	ldrb	r4, [r3, #20]
    20d6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    20da:	f004 031f 	and.w	r3, r4, #31
    20de:	2201      	movs	r2, #1
    20e0:	409a      	lsls	r2, r3
    20e2:	4b1a      	ldr	r3, [pc, #104]	; (214c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    20e4:	0961      	lsrs	r1, r4, #5
{
    20e6:	b085      	sub	sp, #20
    20e8:	43d0      	mvns	r0, r2
    20ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    20ee:	e853 1f00 	ldrex	r1, [r3]
    20f2:	ea01 0500 	and.w	r5, r1, r0
    20f6:	e843 5c00 	strex	ip, r5, [r3]
    20fa:	f1bc 0f00 	cmp.w	ip, #0
    20fe:	d1f6      	bne.n	20ee <pm_system_resume+0x1e>
    2100:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2104:	4211      	tst	r1, r2
    2106:	d017      	beq.n	2138 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    2108:	4d11      	ldr	r5, [pc, #68]	; (2150 <pm_system_resume+0x80>)
    210a:	220c      	movs	r2, #12
    210c:	fb02 5204 	mla	r2, r2, r4, r5
    2110:	ca07      	ldmia	r2, {r0, r1, r2}
    2112:	ab01      	add	r3, sp, #4
    2114:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    2118:	4a0e      	ldr	r2, [pc, #56]	; (2154 <pm_system_resume+0x84>)
    211a:	b17a      	cbz	r2, 213c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    211c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2120:	f006 fd36 	bl	8b90 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2124:	2000      	movs	r0, #0
    2126:	f7ff ff8d 	bl	2044 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    212a:	230c      	movs	r3, #12
    212c:	435c      	muls	r4, r3
    212e:	192a      	adds	r2, r5, r4
    2130:	2300      	movs	r3, #0
    2132:	512b      	str	r3, [r5, r4]
    2134:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2138:	b005      	add	sp, #20
    213a:	bd30      	pop	{r4, r5, pc}
    213c:	f382 8811 	msr	BASEPRI, r2
    2140:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2144:	e7ee      	b.n	2124 <pm_system_resume+0x54>
    2146:	bf00      	nop
    2148:	20001488 	.word	0x20001488
    214c:	20000880 	.word	0x20000880
    2150:	20000870 	.word	0x20000870
    2154:	00008b91 	.word	0x00008b91

00002158 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    215c:	4b35      	ldr	r3, [pc, #212]	; (2234 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    215e:	4a36      	ldr	r2, [pc, #216]	; (2238 <pm_system_suspend+0xe0>)
    2160:	7d1c      	ldrb	r4, [r3, #20]
    2162:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2166:	0963      	lsrs	r3, r4, #5
    2168:	ea4f 0983 	mov.w	r9, r3, lsl #2
    216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2170:	4d32      	ldr	r5, [pc, #200]	; (223c <pm_system_suspend+0xe4>)
    2172:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2176:	f004 081f 	and.w	r8, r4, #31
    217a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    217e:	f013 0f01 	tst.w	r3, #1
{
    2182:	b085      	sub	sp, #20
    2184:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2186:	d10a      	bne.n	219e <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    2188:	4601      	mov	r1, r0
    218a:	4620      	mov	r0, r4
    218c:	f000 f876 	bl	227c <pm_policy_next_state>
		if (info != NULL) {
    2190:	b128      	cbz	r0, 219e <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    2192:	c807      	ldmia	r0, {r0, r1, r2}
    2194:	230c      	movs	r3, #12
    2196:	fb03 5304 	mla	r3, r3, r4, r5
    219a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    219e:	230c      	movs	r3, #12
    21a0:	4363      	muls	r3, r4
    21a2:	18ea      	adds	r2, r5, r3
    21a4:	5cee      	ldrb	r6, [r5, r3]
    21a6:	b936      	cbnz	r6, 21b6 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    21a8:	4620      	mov	r0, r4
    21aa:	f7ff ff79 	bl	20a0 <atomic_clear_bit.constprop.0>
		ret = false;
    21ae:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    21b0:	b005      	add	sp, #20
    21b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    21b6:	1c7b      	adds	r3, r7, #1
    21b8:	d00f      	beq.n	21da <pm_system_suspend+0x82>
    21ba:	f8d2 c008 	ldr.w	ip, [r2, #8]
    21be:	4820      	ldr	r0, [pc, #128]	; (2240 <pm_system_suspend+0xe8>)
    21c0:	4a20      	ldr	r2, [pc, #128]	; (2244 <pm_system_suspend+0xec>)
    21c2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    21c6:	2100      	movs	r1, #0
    21c8:	2300      	movs	r3, #0
    21ca:	fbec 0106 	umlal	r0, r1, ip, r6
    21ce:	f7fd ff97 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    21d2:	2101      	movs	r1, #1
    21d4:	1a38      	subs	r0, r7, r0
    21d6:	f007 fccd 	bl	9b74 <z_set_timeout_expiry>
	k_sched_lock();
    21da:	f005 fa53 	bl	7684 <k_sched_lock>
	pm_state_notify(true);
    21de:	2001      	movs	r0, #1
    21e0:	f7ff ff30 	bl	2044 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    21e4:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    21e8:	2301      	movs	r3, #1
    21ea:	fa03 f808 	lsl.w	r8, r3, r8
    21ee:	4b16      	ldr	r3, [pc, #88]	; (2248 <pm_system_suspend+0xf0>)
    21f0:	4499      	add	r9, r3
    21f2:	e859 3f00 	ldrex	r3, [r9]
    21f6:	ea43 0308 	orr.w	r3, r3, r8
    21fa:	e849 3200 	strex	r2, r3, [r9]
    21fe:	2a00      	cmp	r2, #0
    2200:	d1f7      	bne.n	21f2 <pm_system_suspend+0x9a>
    2202:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    2206:	230c      	movs	r3, #12
    2208:	fb03 5504 	mla	r5, r3, r4, r5
    220c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    2210:	ab01      	add	r3, sp, #4
    2212:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2216:	4a0d      	ldr	r2, [pc, #52]	; (224c <pm_system_suspend+0xf4>)
    2218:	b11a      	cbz	r2, 2222 <pm_system_suspend+0xca>
		pm_power_state_set(info);
    221a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    221e:	f006 fca4 	bl	8b6a <pm_power_state_set>
	pm_system_resume();
    2222:	f7ff ff55 	bl	20d0 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    2226:	4620      	mov	r0, r4
    2228:	f7ff ff3a 	bl	20a0 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    222c:	f005 fbf8 	bl	7a20 <k_sched_unlock>
	bool ret = true;
    2230:	2001      	movs	r0, #1
    2232:	e7bd      	b.n	21b0 <pm_system_suspend+0x58>
    2234:	20001488 	.word	0x20001488
    2238:	2000087c 	.word	0x2000087c
    223c:	20000870 	.word	0x20000870
    2240:	000f423f 	.word	0x000f423f
    2244:	000f4240 	.word	0x000f4240
    2248:	20000880 	.word	0x20000880
    224c:	00008b6b 	.word	0x00008b6b

00002250 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2250:	4b05      	ldr	r3, [pc, #20]	; (2268 <pm_constraint_get+0x18>)
    2252:	f3bf 8f5b 	dmb	ish
    2256:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    225a:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    225e:	fab0 f080 	clz	r0, r0
    2262:	0940      	lsrs	r0, r0, #5
    2264:	4770      	bx	lr
    2266:	bf00      	nop
    2268:	20000884 	.word	0x20000884

0000226c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    226c:	b908      	cbnz	r0, 2272 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    226e:	4b02      	ldr	r3, [pc, #8]	; (2278 <pm_state_cpu_get_all+0xc>)
    2270:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2272:	2000      	movs	r0, #0
    2274:	4770      	bx	lr
    2276:	bf00      	nop
    2278:	0000a06c 	.word	0x0000a06c

0000227c <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2280:	b085      	sub	sp, #20
    2282:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2284:	a903      	add	r1, sp, #12
    2286:	f7ff fff1 	bl	226c <pm_state_cpu_get_all>
    228a:	f8df a074 	ldr.w	sl, [pc, #116]	; 2300 <pm_policy_next_state+0x84>
    228e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2304 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2292:	1e44      	subs	r4, r0, #1
    2294:	b224      	sxth	r4, r4
    2296:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    229a:	f04f 0900 	mov.w	r9, #0
    229e:	1c63      	adds	r3, r4, #1
    22a0:	d104      	bne.n	22ac <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    22a2:	2500      	movs	r5, #0
}
    22a4:	4628      	mov	r0, r5
    22a6:	b005      	add	sp, #20
    22a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    22ac:	9a03      	ldr	r2, [sp, #12]
    22ae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    22b2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    22b6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    22ba:	f7ff ffc9 	bl	2250 <pm_constraint_get>
    22be:	b1e0      	cbz	r0, 22fa <pm_policy_next_state+0x7e>
    22c0:	6868      	ldr	r0, [r5, #4]
    22c2:	f04f 0b00 	mov.w	fp, #0
    22c6:	46d4      	mov	ip, sl
    22c8:	4659      	mov	r1, fp
    22ca:	fbe0 c107 	umlal	ip, r1, r0, r7
    22ce:	4642      	mov	r2, r8
    22d0:	464b      	mov	r3, r9
    22d2:	4660      	mov	r0, ip
    22d4:	f7fd ff14 	bl	100 <__aeabi_uldivmod>
    22d8:	9001      	str	r0, [sp, #4]
    22da:	68a8      	ldr	r0, [r5, #8]
    22dc:	46d4      	mov	ip, sl
    22de:	4659      	mov	r1, fp
    22e0:	fbe0 c107 	umlal	ip, r1, r0, r7
    22e4:	4642      	mov	r2, r8
    22e6:	464b      	mov	r3, r9
    22e8:	4660      	mov	r0, ip
    22ea:	f7fd ff09 	bl	100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    22ee:	1c72      	adds	r2, r6, #1
    22f0:	d0d8      	beq.n	22a4 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    22f2:	9b01      	ldr	r3, [sp, #4]
    22f4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    22f6:	42b0      	cmp	r0, r6
    22f8:	d9d4      	bls.n	22a4 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    22fa:	3c01      	subs	r4, #1
    22fc:	b224      	sxth	r4, r4
    22fe:	e7ce      	b.n	229e <pm_policy_next_state+0x22>
    2300:	000f423f 	.word	0x000f423f
    2304:	000f4240 	.word	0x000f4240

00002308 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2308:	4901      	ldr	r1, [pc, #4]	; (2310 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    230a:	2210      	movs	r2, #16
	str	r2, [r1]
    230c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    230e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2310:	e000ed10 	.word	0xe000ed10

00002314 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2314:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2316:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2318:	f380 8811 	msr	BASEPRI, r0
	isb
    231c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2320:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2324:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2326:	b662      	cpsie	i
	isb
    2328:	f3bf 8f6f 	isb	sy

	bx	lr
    232c:	4770      	bx	lr
    232e:	bf00      	nop

00002330 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2330:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2332:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2334:	f381 8811 	msr	BASEPRI, r1

	wfe
    2338:	bf20      	wfe

	msr	BASEPRI, r0
    233a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    233e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2340:	4770      	bx	lr
    2342:	bf00      	nop

00002344 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2344:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2346:	2b00      	cmp	r3, #0
    2348:	db08      	blt.n	235c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    234a:	2201      	movs	r2, #1
    234c:	f000 001f 	and.w	r0, r0, #31
    2350:	fa02 f000 	lsl.w	r0, r2, r0
    2354:	095b      	lsrs	r3, r3, #5
    2356:	4a02      	ldr	r2, [pc, #8]	; (2360 <arch_irq_enable+0x1c>)
    2358:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    235c:	4770      	bx	lr
    235e:	bf00      	nop
    2360:	e000e100 	.word	0xe000e100

00002364 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2364:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2366:	2b00      	cmp	r3, #0
    2368:	db0d      	blt.n	2386 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    236a:	2201      	movs	r2, #1
    236c:	095b      	lsrs	r3, r3, #5
    236e:	f000 001f 	and.w	r0, r0, #31
    2372:	fa02 f000 	lsl.w	r0, r2, r0
    2376:	3320      	adds	r3, #32
    2378:	4a03      	ldr	r2, [pc, #12]	; (2388 <arch_irq_disable+0x24>)
    237a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    237e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2382:	f3bf 8f6f 	isb	sy
}
    2386:	4770      	bx	lr
    2388:	e000e100 	.word	0xe000e100

0000238c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    238c:	4b05      	ldr	r3, [pc, #20]	; (23a4 <arch_irq_is_enabled+0x18>)
    238e:	0942      	lsrs	r2, r0, #5
    2390:	f000 001f 	and.w	r0, r0, #31
    2394:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2398:	2301      	movs	r3, #1
    239a:	fa03 f000 	lsl.w	r0, r3, r0
}
    239e:	4010      	ands	r0, r2
    23a0:	4770      	bx	lr
    23a2:	bf00      	nop
    23a4:	e000e100 	.word	0xe000e100

000023a8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    23a8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    23aa:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23ac:	bfa8      	it	ge
    23ae:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    23b2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23b6:	bfb8      	it	lt
    23b8:	4b06      	ldrlt	r3, [pc, #24]	; (23d4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23ba:	ea4f 1141 	mov.w	r1, r1, lsl #5
    23be:	bfac      	ite	ge
    23c0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23c4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23c8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23ca:	bfb4      	ite	lt
    23cc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23ce:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    23d2:	4770      	bx	lr
    23d4:	e000ed14 	.word	0xe000ed14

000023d8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    23d8:	bf30      	wfi
    b z_SysNmiOnReset
    23da:	f7ff bffd 	b.w	23d8 <z_SysNmiOnReset>
    23de:	bf00      	nop

000023e0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    23e0:	4a0f      	ldr	r2, [pc, #60]	; (2420 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    23e2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    23e4:	4b0f      	ldr	r3, [pc, #60]	; (2424 <z_arm_prep_c+0x44>)
    23e6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    23ea:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    23ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23f0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    23f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    23f8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    23fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2400:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2404:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2408:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    240c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2410:	f004 fcea 	bl	6de8 <z_bss_zero>
	z_data_copy();
    2414:	f005 fc48 	bl	7ca8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2418:	f000 f994 	bl	2744 <z_arm_interrupt_init>
	z_cstart();
    241c:	f004 fcee 	bl	6dfc <z_cstart>
    2420:	00000000 	.word	0x00000000
    2424:	e000ed00 	.word	0xe000ed00

00002428 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2428:	4a09      	ldr	r2, [pc, #36]	; (2450 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    242a:	490a      	ldr	r1, [pc, #40]	; (2454 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    242c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    242e:	6809      	ldr	r1, [r1, #0]
    2430:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2432:	4909      	ldr	r1, [pc, #36]	; (2458 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2434:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2436:	684b      	ldr	r3, [r1, #4]
    2438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    243c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    243e:	2300      	movs	r3, #0
    2440:	f383 8811 	msr	BASEPRI, r3
    2444:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2448:	6893      	ldr	r3, [r2, #8]
}
    244a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    244c:	4770      	bx	lr
    244e:	bf00      	nop
    2450:	20001488 	.word	0x20001488
    2454:	0000a274 	.word	0x0000a274
    2458:	e000ed00 	.word	0xe000ed00

0000245c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    245c:	490f      	ldr	r1, [pc, #60]	; (249c <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    245e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2460:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2464:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2466:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    246a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    246e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2470:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2474:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2478:	4f09      	ldr	r7, [pc, #36]	; (24a0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    247a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    247e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2480:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2482:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2484:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2486:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2488:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    248a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    248e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2492:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2496:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    249a:	4770      	bx	lr
    ldr r1, =_kernel
    249c:	20001488 	.word	0x20001488
    ldr v4, =_SCS_ICSR
    24a0:	e000ed04 	.word	0xe000ed04

000024a4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    24a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    24a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    24aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    24ae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    24b2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    24b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    24b8:	2902      	cmp	r1, #2
    beq _oops
    24ba:	d0ff      	beq.n	24bc <_oops>

000024bc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    24bc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    24be:	f006 fb12 	bl	8ae6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    24c2:	bd01      	pop	{r0, pc}

000024c4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    24c4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    24c8:	9b00      	ldr	r3, [sp, #0]
    24ca:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    24ce:	490a      	ldr	r1, [pc, #40]	; (24f8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    24d0:	9b01      	ldr	r3, [sp, #4]
    24d2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    24d6:	9b02      	ldr	r3, [sp, #8]
    24d8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    24dc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    24e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    24e4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    24e8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    24ec:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    24ee:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    24f0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    24f2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    24f4:	4770      	bx	lr
    24f6:	bf00      	nop
    24f8:	00008285 	.word	0x00008285

000024fc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    24fc:	4b07      	ldr	r3, [pc, #28]	; (251c <arch_switch_to_main_thread+0x20>)
    24fe:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2500:	4610      	mov	r0, r2
    2502:	f381 8809 	msr	PSP, r1
    2506:	2100      	movs	r1, #0
    2508:	b663      	cpsie	if
    250a:	f381 8811 	msr	BASEPRI, r1
    250e:	f3bf 8f6f 	isb	sy
    2512:	2200      	movs	r2, #0
    2514:	2300      	movs	r3, #0
    2516:	f005 feb5 	bl	8284 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    251a:	bf00      	nop
    251c:	20001488 	.word	0x20001488

00002520 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2520:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2522:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2524:	4a0b      	ldr	r2, [pc, #44]	; (2554 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2526:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2528:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    252a:	bf1e      	ittt	ne
	movne	r1, #0
    252c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    252e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2530:	f007 f946 	blne	97c0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2534:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2536:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    253a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    253e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2542:	4905      	ldr	r1, [pc, #20]	; (2558 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2544:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2546:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2548:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    254a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    254e:	4903      	ldr	r1, [pc, #12]	; (255c <_isr_wrapper+0x3c>)
	bx r1
    2550:	4708      	bx	r1
    2552:	0000      	.short	0x0000
	ldr r2, =_kernel
    2554:	20001488 	.word	0x20001488
	ldr r1, =_sw_isr_table
    2558:	00009e44 	.word	0x00009e44
	ldr r1, =z_arm_int_exit
    255c:	00002561 	.word	0x00002561

00002560 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2560:	4b04      	ldr	r3, [pc, #16]	; (2574 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2562:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2564:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2566:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2568:	d003      	beq.n	2572 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    256a:	4903      	ldr	r1, [pc, #12]	; (2578 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    256c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2570:	600a      	str	r2, [r1, #0]

00002572 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2572:	4770      	bx	lr
	ldr r3, =_kernel
    2574:	20001488 	.word	0x20001488
	ldr r1, =_SCS_ICSR
    2578:	e000ed04 	.word	0xe000ed04

0000257c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    257c:	4b0d      	ldr	r3, [pc, #52]	; (25b4 <bus_fault.constprop.0+0x38>)
    257e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2584:	0592      	lsls	r2, r2, #22
    2586:	d508      	bpl.n	259a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2588:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    258a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    258c:	0412      	lsls	r2, r2, #16
    258e:	d504      	bpl.n	259a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2590:	b118      	cbz	r0, 259a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2598:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    259a:	4b06      	ldr	r3, [pc, #24]	; (25b4 <bus_fault.constprop.0+0x38>)
    259c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    259e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25a0:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    25a2:	bf58      	it	pl
    25a4:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    25a8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25aa:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    25ae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    25b0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    25b2:	4770      	bx	lr
    25b4:	e000ed00 	.word	0xe000ed00

000025b8 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    25b8:	4b0e      	ldr	r3, [pc, #56]	; (25f4 <mem_manage_fault.constprop.0+0x3c>)
    25ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    25bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    25be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25c0:	0792      	lsls	r2, r2, #30
    25c2:	d508      	bpl.n	25d6 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    25c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    25c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25c8:	0612      	lsls	r2, r2, #24
    25ca:	d504      	bpl.n	25d6 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    25cc:	b118      	cbz	r0, 25d6 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    25ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    25d4:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    25d6:	4b07      	ldr	r3, [pc, #28]	; (25f4 <mem_manage_fault.constprop.0+0x3c>)
    25d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    25da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    25dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25de:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    25e0:	bf58      	it	pl
    25e2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    25e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    25e6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    25e8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    25ec:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    25ee:	7008      	strb	r0, [r1, #0]
}
    25f0:	4770      	bx	lr
    25f2:	bf00      	nop
    25f4:	e000ed00 	.word	0xe000ed00

000025f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    25f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    25fa:	4b48      	ldr	r3, [pc, #288]	; (271c <z_arm_fault+0x124>)
    25fc:	685b      	ldr	r3, [r3, #4]
{
    25fe:	b08a      	sub	sp, #40	; 0x28
    2600:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2602:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2606:	2500      	movs	r5, #0
    2608:	f385 8811 	msr	BASEPRI, r5
    260c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2610:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    2614:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    2618:	d111      	bne.n	263e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    261a:	f002 010c 	and.w	r1, r2, #12
    261e:	2908      	cmp	r1, #8
    2620:	d00d      	beq.n	263e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2622:	0711      	lsls	r1, r2, #28
    2624:	d401      	bmi.n	262a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    2626:	4606      	mov	r6, r0
			*nested_exc = true;
    2628:	2501      	movs	r5, #1
	*recoverable = false;
    262a:	2200      	movs	r2, #0
	switch (fault) {
    262c:	3b03      	subs	r3, #3
	*recoverable = false;
    262e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    2632:	2b03      	cmp	r3, #3
    2634:	d86a      	bhi.n	270c <z_arm_fault+0x114>
    2636:	e8df f003 	tbb	[pc, r3]
    263a:	5404      	.short	0x5404
    263c:	5c58      	.short	0x5c58
		return NULL;
    263e:	462e      	mov	r6, r5
    2640:	e7f3      	b.n	262a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2642:	4b36      	ldr	r3, [pc, #216]	; (271c <z_arm_fault+0x124>)
    2644:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2646:	f014 0402 	ands.w	r4, r4, #2
    264a:	d15f      	bne.n	270c <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    264c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    264e:	2a00      	cmp	r2, #0
    2650:	db14      	blt.n	267c <z_arm_fault+0x84>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2654:	0052      	lsls	r2, r2, #1
    2656:	d511      	bpl.n	267c <z_arm_fault+0x84>
	uint16_t fault_insn = *(ret_addr - 1);
    2658:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    265a:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    265e:	f64d 7202 	movw	r2, #57090	; 0xdf02
    2662:	4291      	cmp	r1, r2
    2664:	d009      	beq.n	267a <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
    2666:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    266a:	b302      	cbz	r2, 26ae <z_arm_fault+0xb6>
			reason = mem_manage_fault(esf, 1, recoverable);
    266c:	f10d 0107 	add.w	r1, sp, #7
    2670:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2672:	f7ff ffa1 	bl	25b8 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
    2676:	4604      	mov	r4, r0
		break;
    2678:	e000      	b.n	267c <z_arm_fault+0x84>
			reason = esf->basic.r0;
    267a:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    267c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2680:	b99b      	cbnz	r3, 26aa <z_arm_fault+0xb2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2682:	2220      	movs	r2, #32
    2684:	4631      	mov	r1, r6
    2686:	a802      	add	r0, sp, #8
    2688:	f006 fa58 	bl	8b3c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    268c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    268e:	2d00      	cmp	r5, #0
    2690:	d03e      	beq.n	2710 <z_arm_fault+0x118>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2692:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2696:	b922      	cbnz	r2, 26a2 <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2698:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    269c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    26a0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    26a2:	a902      	add	r1, sp, #8
    26a4:	4620      	mov	r0, r4
    26a6:	f006 fa1c 	bl	8ae2 <z_arm_fatal_error>
}
    26aa:	b00a      	add	sp, #40	; 0x28
    26ac:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    26ae:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    26b2:	b12a      	cbz	r2, 26c0 <z_arm_fault+0xc8>
			reason = bus_fault(esf, 1, recoverable);
    26b4:	f10d 0107 	add.w	r1, sp, #7
    26b8:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    26ba:	f7ff ff5f 	bl	257c <bus_fault.constprop.0>
    26be:	e7da      	b.n	2676 <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
    26c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    26c2:	b292      	uxth	r2, r2
    26c4:	2a00      	cmp	r2, #0
    26c6:	d0d9      	beq.n	267c <z_arm_fault+0x84>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    26c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    26ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    26cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    26ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    26d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    26d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    26d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    26d6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    26da:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    26de:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    26e0:	e7cc      	b.n	267c <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    26e2:	f10d 0107 	add.w	r1, sp, #7
    26e6:	2000      	movs	r0, #0
    26e8:	e7c3      	b.n	2672 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    26ea:	f10d 0107 	add.w	r1, sp, #7
    26ee:	2000      	movs	r0, #0
    26f0:	e7e3      	b.n	26ba <z_arm_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    26f2:	4b0a      	ldr	r3, [pc, #40]	; (271c <z_arm_fault+0x124>)
    26f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    26f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    26f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    26fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    26fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    26fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2702:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2706:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    270a:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    270c:	2400      	movs	r4, #0
    270e:	e7b5      	b.n	267c <z_arm_fault+0x84>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2710:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2714:	f023 0301 	bic.w	r3, r3, #1
    2718:	e7c2      	b.n	26a0 <z_arm_fault+0xa8>
    271a:	bf00      	nop
    271c:	e000ed00 	.word	0xe000ed00

00002720 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2720:	4a02      	ldr	r2, [pc, #8]	; (272c <z_arm_fault_init+0xc>)
    2722:	6953      	ldr	r3, [r2, #20]
    2724:	f043 0310 	orr.w	r3, r3, #16
    2728:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    272a:	4770      	bx	lr
    272c:	e000ed00 	.word	0xe000ed00

00002730 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2730:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2734:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2738:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    273a:	4672      	mov	r2, lr
	bl z_arm_fault
    273c:	f7ff ff5c 	bl	25f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2740:	bd01      	pop	{r0, pc}
    2742:	bf00      	nop

00002744 <z_arm_interrupt_init>:
    2744:	4804      	ldr	r0, [pc, #16]	; (2758 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2746:	2300      	movs	r3, #0
    2748:	2120      	movs	r1, #32
    274a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    274c:	3301      	adds	r3, #1
    274e:	2b30      	cmp	r3, #48	; 0x30
    2750:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2754:	d1f9      	bne.n	274a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2756:	4770      	bx	lr
    2758:	e000e100 	.word	0xe000e100

0000275c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    275c:	f007 fac4 	bl	9ce8 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2760:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2762:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2766:	4808      	ldr	r0, [pc, #32]	; (2788 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2768:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    276c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    276e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2772:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2776:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2778:	4308      	orrs	r0, r1
    msr CONTROL, r0
    277a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    277e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2782:	f7ff fe2d 	bl	23e0 <z_arm_prep_c>
    2786:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2788:	20002278 	.word	0x20002278

0000278c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    278c:	4b06      	ldr	r3, [pc, #24]	; (27a8 <z_impl_k_thread_abort+0x1c>)
    278e:	689b      	ldr	r3, [r3, #8]
    2790:	4283      	cmp	r3, r0
    2792:	d107      	bne.n	27a4 <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2794:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2798:	b123      	cbz	r3, 27a4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    279a:	4a04      	ldr	r2, [pc, #16]	; (27ac <z_impl_k_thread_abort+0x20>)
    279c:	6853      	ldr	r3, [r2, #4]
    279e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    27a2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    27a4:	f005 ba1c 	b.w	7be0 <z_thread_abort>
    27a8:	20001488 	.word	0x20001488
    27ac:	e000ed00 	.word	0xe000ed00

000027b0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    27b0:	4b02      	ldr	r3, [pc, #8]	; (27bc <z_arm_configure_static_mpu_regions+0xc>)
    27b2:	4a03      	ldr	r2, [pc, #12]	; (27c0 <z_arm_configure_static_mpu_regions+0x10>)
    27b4:	4803      	ldr	r0, [pc, #12]	; (27c4 <z_arm_configure_static_mpu_regions+0x14>)
    27b6:	2101      	movs	r1, #1
    27b8:	f000 b85e 	b.w	2878 <arm_core_mpu_configure_static_mpu_regions>
    27bc:	20040000 	.word	0x20040000
    27c0:	20000000 	.word	0x20000000
    27c4:	0000a06c 	.word	0x0000a06c

000027c8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    27c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    27ca:	4f1f      	ldr	r7, [pc, #124]	; (2848 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    27cc:	2600      	movs	r6, #0
    27ce:	428e      	cmp	r6, r1
    27d0:	db01      	blt.n	27d6 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    27d2:	4610      	mov	r0, r2
    27d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    27d6:	6844      	ldr	r4, [r0, #4]
    27d8:	b39c      	cbz	r4, 2842 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    27da:	b153      	cbz	r3, 27f2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    27dc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    27e0:	ea14 0f0c 	tst.w	r4, ip
    27e4:	d118      	bne.n	2818 <mpu_configure_regions+0x50>
		&&
    27e6:	2c1f      	cmp	r4, #31
    27e8:	d916      	bls.n	2818 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    27ea:	6805      	ldr	r5, [r0, #0]
		&&
    27ec:	ea1c 0f05 	tst.w	ip, r5
    27f0:	d112      	bne.n	2818 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    27f2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    27f4:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    27f6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    27fa:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    27fc:	d90f      	bls.n	281e <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    27fe:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2802:	d80e      	bhi.n	2822 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2804:	3c01      	subs	r4, #1
    2806:	fab4 f484 	clz	r4, r4
    280a:	f1c4 041f 	rsb	r4, r4, #31
    280e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2810:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2812:	ea4c 0404 	orr.w	r4, ip, r4
    2816:	d906      	bls.n	2826 <mpu_configure_regions+0x5e>
			return -EINVAL;
    2818:	f06f 0215 	mvn.w	r2, #21
    281c:	e7d9      	b.n	27d2 <mpu_configure_regions+0xa>
		return REGION_32B;
    281e:	2408      	movs	r4, #8
    2820:	e7f6      	b.n	2810 <mpu_configure_regions+0x48>
		return REGION_4G;
    2822:	243e      	movs	r4, #62	; 0x3e
    2824:	e7f4      	b.n	2810 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2826:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    282a:	4315      	orrs	r5, r2
    282c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2830:	f044 0401 	orr.w	r4, r4, #1
    2834:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2838:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    283c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    283e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2842:	3601      	adds	r6, #1
    2844:	300c      	adds	r0, #12
    2846:	e7c2      	b.n	27ce <mpu_configure_regions+0x6>
    2848:	e000ed00 	.word	0xe000ed00

0000284c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    284c:	4b04      	ldr	r3, [pc, #16]	; (2860 <arm_core_mpu_enable+0x14>)
    284e:	2205      	movs	r2, #5
    2850:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2858:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    285c:	4770      	bx	lr
    285e:	bf00      	nop
    2860:	e000ed00 	.word	0xe000ed00

00002864 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2864:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2868:	4b02      	ldr	r3, [pc, #8]	; (2874 <arm_core_mpu_disable+0x10>)
    286a:	2200      	movs	r2, #0
    286c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2870:	4770      	bx	lr
    2872:	bf00      	nop
    2874:	e000ed00 	.word	0xe000ed00

00002878 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2878:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    287a:	4c03      	ldr	r4, [pc, #12]	; (2888 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    287c:	2301      	movs	r3, #1
    287e:	7822      	ldrb	r2, [r4, #0]
    2880:	f7ff ffa2 	bl	27c8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2884:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2886:	bd10      	pop	{r4, pc}
    2888:	200014da 	.word	0x200014da

0000288c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    288c:	4914      	ldr	r1, [pc, #80]	; (28e0 <z_arm_mpu_init+0x54>)
    288e:	6808      	ldr	r0, [r1, #0]
    2890:	2808      	cmp	r0, #8
{
    2892:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2894:	d821      	bhi.n	28da <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2896:	f7ff ffe5 	bl	2864 <arm_core_mpu_disable>
    289a:	4c12      	ldr	r4, [pc, #72]	; (28e4 <z_arm_mpu_init+0x58>)
    289c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    289e:	2200      	movs	r2, #0
    28a0:	4290      	cmp	r0, r2
    28a2:	f101 010c 	add.w	r1, r1, #12
    28a6:	d105      	bne.n	28b4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    28a8:	4b0f      	ldr	r3, [pc, #60]	; (28e8 <z_arm_mpu_init+0x5c>)
    28aa:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    28ac:	f7ff ffce 	bl	284c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    28b0:	2000      	movs	r0, #0
}
    28b2:	bd10      	pop	{r4, pc}
    28b4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28b8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    28bc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    28c0:	4313      	orrs	r3, r2
    28c2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28c6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
    28ce:	f043 0301 	orr.w	r3, r3, #1
    28d2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    28d6:	3201      	adds	r2, #1
    28d8:	e7e2      	b.n	28a0 <z_arm_mpu_init+0x14>
		return -1;
    28da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    28de:	e7e8      	b.n	28b2 <z_arm_mpu_init+0x26>
    28e0:	0000a078 	.word	0x0000a078
    28e4:	e000ed00 	.word	0xe000ed00
    28e8:	200014da 	.word	0x200014da

000028ec <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    28ec:	4b01      	ldr	r3, [pc, #4]	; (28f4 <__stdout_hook_install+0x8>)
    28ee:	6018      	str	r0, [r3, #0]
}
    28f0:	4770      	bx	lr
    28f2:	bf00      	nop
    28f4:	200000dc 	.word	0x200000dc

000028f8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    28f8:	f04f 0320 	mov.w	r3, #32
    28fc:	f3ef 8211 	mrs	r2, BASEPRI
    2900:	f383 8812 	msr	BASEPRI_MAX, r3
    2904:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2908:	4906      	ldr	r1, [pc, #24]	; (2924 <nordicsemi_nrf52_init+0x2c>)
    290a:	2301      	movs	r3, #1
    290c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2910:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2914:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2918:	f382 8811 	msr	BASEPRI, r2
    291c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2920:	2000      	movs	r0, #0
    2922:	4770      	bx	lr
    2924:	4001e000 	.word	0x4001e000

00002928 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2928:	b120      	cbz	r0, 2934 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    292a:	4b03      	ldr	r3, [pc, #12]	; (2938 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    292c:	0180      	lsls	r0, r0, #6
    292e:	f043 0301 	orr.w	r3, r3, #1
    2932:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2934:	4770      	bx	lr
    2936:	bf00      	nop
    2938:	0000a010 	.word	0x0000a010

0000293c <board_particle_argon_init>:
			      ? GPIO_OUTPUT_INACTIVE
			      : GPIO_OUTPUT_ACTIVE));
}

static int board_particle_argon_init(const struct device *dev)
{
    293c:	b538      	push	{r3, r4, r5, lr}
    293e:	480c      	ldr	r0, [pc, #48]	; (2970 <board_particle_argon_init+0x34>)
    2940:	f004 f9e4 	bl	6d0c <z_impl_device_get_binding>
	if (!ufl_gpio_dev) {
    2944:	4605      	mov	r5, r0
    2946:	b180      	cbz	r0, 296a <board_particle_argon_init+0x2e>
    2948:	4809      	ldr	r0, [pc, #36]	; (2970 <board_particle_argon_init+0x34>)
    294a:	f004 f9df 	bl	6d0c <z_impl_device_get_binding>
	if (!pcb_gpio_dev) {
    294e:	4604      	mov	r4, r0
    2950:	b158      	cbz	r0, 296a <board_particle_argon_init+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    2952:	f241 6201 	movw	r2, #5633	; 0x1601
    2956:	2119      	movs	r1, #25
    2958:	4628      	mov	r0, r5
    295a:	f006 f924 	bl	8ba6 <z_impl_gpio_pin_configure.isra.0>
    295e:	f641 2201 	movw	r2, #6657	; 0x1a01
    2962:	2102      	movs	r1, #2
    2964:	4620      	mov	r0, r4
    2966:	f006 f91e 	bl	8ba6 <z_impl_gpio_pin_configure.isra.0>
	 * antenna.
	 */
	external_antenna(false);

	return 0;
}
    296a:	2000      	movs	r0, #0
    296c:	bd38      	pop	{r3, r4, r5, pc}
    296e:	bf00      	nop
    2970:	0000a33c 	.word	0x0000a33c

00002974 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    2974:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    2978:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    297a:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    297c:	d004      	beq.n	2988 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    297e:	f010 0f78 	tst.w	r0, #120	; 0x78
    2982:	d001      	beq.n	2988 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    2984:	2000      	movs	r0, #0
    2986:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    2988:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    298a:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    298e:	f000 0008 	and.w	r0, r0, #8
    2992:	da05      	bge.n	29a0 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    2994:	b958      	cbnz	r0, 29ae <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    2996:	4808      	ldr	r0, [pc, #32]	; (29b8 <endpoint_ctx+0x44>)
    2998:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    299c:	304c      	adds	r0, #76	; 0x4c
    299e:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    29a0:	b938      	cbnz	r0, 29b2 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    29a2:	4805      	ldr	r0, [pc, #20]	; (29b8 <endpoint_ctx+0x44>)
    29a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    29a8:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    29ac:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    29ae:	4803      	ldr	r0, [pc, #12]	; (29bc <endpoint_ctx+0x48>)
    29b0:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    29b2:	4803      	ldr	r0, [pc, #12]	; (29c0 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    29b4:	4770      	bx	lr
    29b6:	bf00      	nop
    29b8:	20000ea0 	.word	0x20000ea0
    29bc:	20000fec 	.word	0x20000fec
    29c0:	2000110c 	.word	0x2000110c

000029c4 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    29c4:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    29c6:	4801      	ldr	r0, [pc, #4]	; (29cc <usbd_evt_put+0x8>)
    29c8:	f006 bf7c 	b.w	98c4 <k_queue_append>
    29cc:	20000278 	.word	0x20000278

000029d0 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    29d0:	4901      	ldr	r1, [pc, #4]	; (29d8 <usbd_work_schedule+0x8>)
    29d2:	4802      	ldr	r0, [pc, #8]	; (29dc <usbd_work_schedule+0xc>)
    29d4:	f006 bfa8 	b.w	9928 <k_work_submit_to_queue>
    29d8:	20000ec8 	.word	0x20000ec8
    29dc:	20000418 	.word	0x20000418

000029e0 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    29e0:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    29e2:	480b      	ldr	r0, [pc, #44]	; (2a10 <usb_init+0x30>)
    29e4:	f002 fb8e 	bl	5104 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    29e8:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    29ea:	480a      	ldr	r0, [pc, #40]	; (2a14 <usb_init+0x34>)
    29ec:	f002 fbd0 	bl	5190 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    29f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    29f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    29f8:	4907      	ldr	r1, [pc, #28]	; (2a18 <usb_init+0x38>)
    29fa:	4808      	ldr	r0, [pc, #32]	; (2a1c <usb_init+0x3c>)
    29fc:	9400      	str	r4, [sp, #0]
    29fe:	f004 fdb1 	bl	7564 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    2a02:	4907      	ldr	r1, [pc, #28]	; (2a20 <usb_init+0x40>)
    2a04:	4807      	ldr	r0, [pc, #28]	; (2a24 <usb_init+0x44>)
    2a06:	f006 ff86 	bl	9916 <k_work_init>

	return 0;
}
    2a0a:	4620      	mov	r0, r4
    2a0c:	b002      	add	sp, #8
    2a0e:	bd10      	pop	{r4, pc}
    2a10:	0000a346 	.word	0x0000a346
    2a14:	0000a098 	.word	0x0000a098
    2a18:	20001938 	.word	0x20001938
    2a1c:	20000418 	.word	0x20000418
    2a20:	00002d3d 	.word	0x00002d3d
    2a24:	20000ec8 	.word	0x20000ec8

00002a28 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    2a28:	4802      	ldr	r0, [pc, #8]	; (2a34 <usbd_evt_get+0xc>)
    2a2a:	2200      	movs	r2, #0
    2a2c:	2300      	movs	r3, #0
    2a2e:	f004 bc37 	b.w	72a0 <z_impl_k_queue_get>
    2a32:	bf00      	nop
    2a34:	20000278 	.word	0x20000278

00002a38 <usbd_evt_flush>:
{
    2a38:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    2a3a:	4c05      	ldr	r4, [pc, #20]	; (2a50 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    2a3c:	f7ff fff4 	bl	2a28 <usbd_evt_get>
		if (ev) {
    2a40:	b120      	cbz	r0, 2a4c <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    2a42:	1d01      	adds	r1, r0, #4
    2a44:	4620      	mov	r0, r4
    2a46:	f006 fe87 	bl	9758 <k_mem_slab_free>
	} while (ev != NULL);
    2a4a:	e7f7      	b.n	2a3c <usbd_evt_flush+0x4>
}
    2a4c:	bd10      	pop	{r4, pc}
    2a4e:	bf00      	nop
    2a50:	20000248 	.word	0x20000248

00002a54 <usbd_evt_alloc>:
{
    2a54:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
    2a56:	2300      	movs	r3, #0
    2a58:	480e      	ldr	r0, [pc, #56]	; (2a94 <usbd_evt_alloc+0x40>)
    2a5a:	2200      	movs	r2, #0
    2a5c:	a901      	add	r1, sp, #4
    2a5e:	f004 fa63 	bl	6f28 <k_mem_slab_alloc>
    2a62:	b190      	cbz	r0, 2a8a <usbd_evt_alloc+0x36>
		usbd_evt_flush();
    2a64:	f7ff ffe8 	bl	2a38 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    2a68:	480a      	ldr	r0, [pc, #40]	; (2a94 <usbd_evt_alloc+0x40>)
    2a6a:	2200      	movs	r2, #0
    2a6c:	2300      	movs	r3, #0
    2a6e:	a901      	add	r1, sp, #4
    2a70:	f004 fa5a 	bl	6f28 <k_mem_slab_alloc>
    2a74:	b938      	cbnz	r0, 2a86 <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
    2a76:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
    2a78:	2304      	movs	r3, #4
		ev->block = block;
    2a7a:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    2a7c:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    2a7e:	f7ff ffa1 	bl	29c4 <usbd_evt_put>
		usbd_work_schedule();
    2a82:	f7ff ffa5 	bl	29d0 <usbd_work_schedule>
		return NULL;
    2a86:	2000      	movs	r0, #0
    2a88:	e001      	b.n	2a8e <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
    2a8a:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    2a8c:	6040      	str	r0, [r0, #4]
}
    2a8e:	b003      	add	sp, #12
    2a90:	f85d fb04 	ldr.w	pc, [sp], #4
    2a94:	20000248 	.word	0x20000248

00002a98 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
    2a98:	7881      	ldrb	r1, [r0, #2]
{
    2a9a:	b570      	push	{r4, r5, r6, lr}
    2a9c:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    2a9e:	4608      	mov	r0, r1
    2aa0:	f7ff ff68 	bl	2974 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    2aa4:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    2aa6:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    2aa8:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    2aaa:	d512      	bpl.n	2ad2 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    2aac:	2d00      	cmp	r5, #0
    2aae:	d143      	bne.n	2b38 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    2ab0:	f7ff ffd0 	bl	2a54 <usbd_evt_alloc>
			if (!ev) {
    2ab4:	4603      	mov	r3, r0
    2ab6:	2800      	cmp	r0, #0
    2ab8:	d03e      	beq.n	2b38 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
    2aba:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    2abc:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    2abe:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    2ac0:	2203      	movs	r2, #3
    2ac2:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    2ac4:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
    2ac6:	f7ff ff7d 	bl	29c4 <usbd_evt_put>
}
    2aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
    2ace:	f7ff bf7f 	b.w	29d0 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    2ad2:	b14d      	cbz	r5, 2ae8 <usbd_event_transfer_data+0x50>
    2ad4:	2d01      	cmp	r5, #1
    2ad6:	d12f      	bne.n	2b38 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    2ad8:	f7ff ffbc 	bl	2a54 <usbd_evt_alloc>
			if (!ev) {
    2adc:	4603      	mov	r3, r0
    2ade:	b358      	cbz	r0, 2b38 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    2ae0:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    2ae2:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    2ae4:	7305      	strb	r5, [r0, #12]
    2ae6:	e7ed      	b.n	2ac4 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    2ae8:	f7ff ffb4 	bl	2a54 <usbd_evt_alloc>
			if (!ev) {
    2aec:	b320      	cbz	r0, 2b38 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    2aee:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    2af0:	4b12      	ldr	r3, [pc, #72]	; (2b3c <usbd_event_transfer_data+0xa4>)
    2af2:	f012 0f80 	tst.w	r2, #128	; 0x80
    2af6:	f002 0108 	and.w	r1, r2, #8
    2afa:	d011      	beq.n	2b20 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    2afc:	b141      	cbz	r1, 2b10 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    2afe:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    2b02:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    2b04:	2301      	movs	r3, #1
    2b06:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    2b08:	2302      	movs	r3, #2
    2b0a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    2b0c:	6084      	str	r4, [r0, #8]
    2b0e:	e7da      	b.n	2ac6 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    2b10:	f002 020f 	and.w	r2, r2, #15
    2b14:	2114      	movs	r1, #20
    2b16:	fb01 3302 	mla	r3, r1, r2, r3
    2b1a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    2b1e:	e7f0      	b.n	2b02 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    2b20:	b111      	cbz	r1, 2b28 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    2b22:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    2b26:	e7ec      	b.n	2b02 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    2b28:	f002 020f 	and.w	r2, r2, #15
    2b2c:	2114      	movs	r1, #20
    2b2e:	fb01 3302 	mla	r3, r1, r2, r3
    2b32:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    2b36:	e7e4      	b.n	2b02 <usbd_event_transfer_data+0x6a>
}
    2b38:	bd70      	pop	{r4, r5, r6, pc}
    2b3a:	bf00      	nop
    2b3c:	40027000 	.word	0x40027000

00002b40 <usb_dc_power_event_handler>:
	switch (event) {
    2b40:	2802      	cmp	r0, #2
{
    2b42:	b510      	push	{r4, lr}
    2b44:	d811      	bhi.n	2b6a <usb_dc_power_event_handler+0x2a>
    2b46:	4b09      	ldr	r3, [pc, #36]	; (2b6c <usb_dc_power_event_handler+0x2c>)
    2b48:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    2b4a:	f7ff ff83 	bl	2a54 <usbd_evt_alloc>
	if (!ev) {
    2b4e:	b160      	cbz	r0, 2b6a <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
    2b50:	2200      	movs	r2, #0
    2b52:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    2b54:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    2b56:	f7ff ff35 	bl	29c4 <usbd_evt_put>
	if (usbd_ctx.attached) {
    2b5a:	4b05      	ldr	r3, [pc, #20]	; (2b70 <usb_dc_power_event_handler+0x30>)
    2b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    2b60:	b11b      	cbz	r3, 2b6a <usb_dc_power_event_handler+0x2a>
}
    2b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    2b66:	f7ff bf33 	b.w	29d0 <usbd_work_schedule>
}
    2b6a:	bd10      	pop	{r4, pc}
    2b6c:	0000a343 	.word	0x0000a343
    2b70:	20000ea0 	.word	0x20000ea0

00002b74 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    2b74:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2b76:	490f      	ldr	r1, [pc, #60]	; (2bb4 <hfxo_stop.constprop.0.isra.0+0x40>)
    2b78:	f3bf 8f5b 	dmb	ish
    2b7c:	f101 0320 	add.w	r3, r1, #32
    2b80:	2200      	movs	r2, #0
    2b82:	e853 0f00 	ldrex	r0, [r3]
    2b86:	2801      	cmp	r0, #1
    2b88:	d103      	bne.n	2b92 <hfxo_stop.constprop.0.isra.0+0x1e>
    2b8a:	e843 2400 	strex	r4, r2, [r3]
    2b8e:	2c00      	cmp	r4, #0
    2b90:	d1f7      	bne.n	2b82 <hfxo_stop.constprop.0.isra.0+0xe>
    2b92:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    2b96:	d10b      	bne.n	2bb0 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    2b98:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    2b9a:	310c      	adds	r1, #12
    2b9c:	4620      	mov	r0, r4
    2b9e:	f005 fb55 	bl	824c <onoff_cancel>

	if (rv == -EALREADY) {
    2ba2:	3078      	adds	r0, #120	; 0x78
    2ba4:	d104      	bne.n	2bb0 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
    2ba6:	4620      	mov	r0, r4
}
    2ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2bac:	f005 bb29 	b.w	8202 <onoff_release>
    2bb0:	bd10      	pop	{r4, pc}
    2bb2:	bf00      	nop
    2bb4:	20000ea0 	.word	0x20000ea0

00002bb8 <usbd_event_handler>:
{
    2bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bba:	4606      	mov	r6, r0
    2bbc:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    2bbe:	2214      	movs	r2, #20
    2bc0:	2100      	movs	r1, #0
    2bc2:	a803      	add	r0, sp, #12
    2bc4:	f005 ffc5 	bl	8b52 <memset>
	switch (p_event->type) {
    2bc8:	7833      	ldrb	r3, [r6, #0]
    2bca:	3b01      	subs	r3, #1
    2bcc:	2b05      	cmp	r3, #5
    2bce:	d821      	bhi.n	2c14 <usbd_event_handler+0x5c>
    2bd0:	e8df f003 	tbb	[pc, r3]
    2bd4:	1414037a 	.word	0x1414037a
    2bd8:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    2bda:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    2bdc:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    2be0:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    2be2:	f7ff ff37 	bl	2a54 <usbd_evt_alloc>
		if (!ev) {
    2be6:	4603      	mov	r3, r0
    2be8:	b1a0      	cbz	r0, 2c14 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    2bea:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    2bec:	f100 0208 	add.w	r2, r0, #8
    2bf0:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    2bf4:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    2bf8:	4618      	mov	r0, r3
    2bfa:	e01d      	b.n	2c38 <usbd_event_handler+0x80>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    2bfc:	2304      	movs	r3, #4
    2bfe:	e7ed      	b.n	2bdc <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    2c00:	78b1      	ldrb	r1, [r6, #2]
    2c02:	4608      	mov	r0, r1
    2c04:	f7ff feb6 	bl	2974 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    2c08:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    2c0a:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    2c0c:	b123      	cbz	r3, 2c18 <usbd_event_handler+0x60>
    2c0e:	3b01      	subs	r3, #1
    2c10:	2b02      	cmp	r3, #2
    2c12:	d943      	bls.n	2c9c <usbd_event_handler+0xe4>
}
    2c14:	b009      	add	sp, #36	; 0x24
    2c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    2c18:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    2c1a:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    2c1c:	d513      	bpl.n	2c46 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    2c1e:	2d00      	cmp	r5, #0
    2c20:	d1f8      	bne.n	2c14 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    2c22:	f7ff ff17 	bl	2a54 <usbd_evt_alloc>
			if (!ev) {
    2c26:	4603      	mov	r3, r0
    2c28:	2800      	cmp	r0, #0
    2c2a:	d0f3      	beq.n	2c14 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    2c2c:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    2c2e:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    2c30:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    2c32:	2203      	movs	r2, #3
    2c34:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    2c36:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    2c38:	f7ff fec4 	bl	29c4 <usbd_evt_put>
}
    2c3c:	b009      	add	sp, #36	; 0x24
    2c3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    2c42:	f7ff bec5 	b.w	29d0 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    2c46:	b155      	cbz	r5, 2c5e <usbd_event_handler+0xa6>
    2c48:	2d01      	cmp	r5, #1
    2c4a:	d1e3      	bne.n	2c14 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    2c4c:	f7ff ff02 	bl	2a54 <usbd_evt_alloc>
			if (!ev) {
    2c50:	4603      	mov	r3, r0
    2c52:	2800      	cmp	r0, #0
    2c54:	d0de      	beq.n	2c14 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    2c56:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    2c58:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    2c5a:	7305      	strb	r5, [r0, #12]
    2c5c:	e7eb      	b.n	2c36 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    2c5e:	f7ff fef9 	bl	2a54 <usbd_evt_alloc>
			if (!ev) {
    2c62:	4607      	mov	r7, r0
    2c64:	2800      	cmp	r0, #0
    2c66:	d0d5      	beq.n	2c14 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    2c68:	2301      	movs	r3, #1
    2c6a:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    2c6c:	2302      	movs	r3, #2
    2c6e:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    2c70:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    2c72:	f104 010c 	add.w	r1, r4, #12
    2c76:	78b0      	ldrb	r0, [r6, #2]
    2c78:	f006 fd01 	bl	967e <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    2c7c:	4a13      	ldr	r2, [pc, #76]	; (2ccc <usbd_event_handler+0x114>)
    2c7e:	68e1      	ldr	r1, [r4, #12]
    2c80:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    2c84:	428b      	cmp	r3, r1
    2c86:	d906      	bls.n	2c96 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    2c88:	1a5b      	subs	r3, r3, r1
    2c8a:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    2c8e:	f003 fd2d 	bl	66ec <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    2c92:	4638      	mov	r0, r7
    2c94:	e7d0      	b.n	2c38 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    2c96:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    2c9a:	e7fa      	b.n	2c92 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    2c9c:	4630      	mov	r0, r6
}
    2c9e:	b009      	add	sp, #36	; 0x24
    2ca0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    2ca4:	f7ff bef8 	b.w	2a98 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    2ca8:	a801      	add	r0, sp, #4
    2caa:	f003 fcf9 	bl	66a0 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    2cae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2cb2:	2b05      	cmp	r3, #5
    2cb4:	d104      	bne.n	2cc0 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    2cb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2cba:	f013 0f60 	tst.w	r3, #96	; 0x60
    2cbe:	d0a9      	beq.n	2c14 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    2cc0:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <usbd_event_handler+0x118>)
    2cc2:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    2cc4:	2401      	movs	r4, #1
    2cc6:	e78c      	b.n	2be2 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    2cc8:	2402      	movs	r4, #2
    2cca:	e78a      	b.n	2be2 <usbd_event_handler+0x2a>
    2ccc:	20000ea0 	.word	0x20000ea0
    2cd0:	2000100c 	.word	0x2000100c

00002cd4 <eps_ctx_init>:
{
    2cd4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    2cd6:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    2cd8:	f064 007f 	orn	r0, r4, #127	; 0x7f
    2cdc:	b2c0      	uxtb	r0, r0
    2cde:	f7ff fe49 	bl	2974 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    2ce2:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    2ce4:	f005 ff74 	bl	8bd0 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    2ce8:	2c08      	cmp	r4, #8
    2cea:	d1f5      	bne.n	2cd8 <eps_ctx_init+0x4>
    2cec:	4d0f      	ldr	r5, [pc, #60]	; (2d2c <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    2cee:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    2cf0:	b2e0      	uxtb	r0, r4
    2cf2:	f7ff fe3f 	bl	2974 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    2cf6:	6903      	ldr	r3, [r0, #16]
    2cf8:	b903      	cbnz	r3, 2cfc <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    2cfa:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    2cfc:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    2cfe:	f005 ff67 	bl	8bd0 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    2d02:	2c08      	cmp	r4, #8
    2d04:	f105 0540 	add.w	r5, r5, #64	; 0x40
    2d08:	d1f2      	bne.n	2cf0 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    2d0a:	4c09      	ldr	r4, [pc, #36]	; (2d30 <eps_ctx_init+0x5c>)
    2d0c:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    2d10:	f005 ff5e 	bl	8bd0 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    2d14:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    2d18:	b913      	cbnz	r3, 2d20 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    2d1a:	4b06      	ldr	r3, [pc, #24]	; (2d34 <eps_ctx_init+0x60>)
    2d1c:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    2d20:	4805      	ldr	r0, [pc, #20]	; (2d38 <eps_ctx_init+0x64>)
    2d22:	f005 ff55 	bl	8bd0 <ep_ctx_reset>
}
    2d26:	2000      	movs	r0, #0
    2d28:	bd38      	pop	{r3, r4, r5, pc}
    2d2a:	bf00      	nop
    2d2c:	20000ca0 	.word	0x20000ca0
    2d30:	20000ea0 	.word	0x20000ea0
    2d34:	200008a0 	.word	0x200008a0
    2d38:	2000110c 	.word	0x2000110c

00002d3c <usbd_work_handler>:
{
    2d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    2d40:	4ca8      	ldr	r4, [pc, #672]	; (2fe4 <usbd_work_handler+0x2a8>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    2d42:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 2fe8 <usbd_work_handler+0x2ac>
{
    2d46:	b085      	sub	sp, #20
    2d48:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    2d4a:	f7ff fe6d 	bl	2a28 <usbd_evt_get>
    2d4e:	b910      	cbnz	r0, 2d56 <usbd_work_handler+0x1a>
}
    2d50:	b005      	add	sp, #20
    2d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    2d56:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    2d5a:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    2d5c:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    2d60:	b93b      	cbnz	r3, 2d72 <usbd_work_handler+0x36>
    2d62:	2a00      	cmp	r2, #0
    2d64:	f000 8086 	beq.w	2e74 <usbd_work_handler+0x138>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    2d68:	4649      	mov	r1, r9
    2d6a:	4640      	mov	r0, r8
    2d6c:	f006 fcf4 	bl	9758 <k_mem_slab_free>
}
    2d70:	e7eb      	b.n	2d4a <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    2d72:	2a04      	cmp	r2, #4
    2d74:	d8f8      	bhi.n	2d68 <usbd_work_handler+0x2c>
    2d76:	e8df f012 	tbh	[pc, r2, lsl #1]
    2d7a:	007d      	.short	0x007d
    2d7c:	01030005 	.word	0x01030005
    2d80:	01430119 	.word	0x01430119
	switch (ep_evt->evt_type) {
    2d84:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    2d86:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    2d88:	2b03      	cmp	r3, #3
    2d8a:	d8ed      	bhi.n	2d68 <usbd_work_handler+0x2c>
    2d8c:	e8df f003 	tbb	[pc, r3]
    2d90:	5f5a3d02 	.word	0x5f5a3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    2d94:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    2d96:	2208      	movs	r2, #8
    2d98:	2100      	movs	r1, #0
    2d9a:	4630      	mov	r0, r6
    2d9c:	f005 fed9 	bl	8b52 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    2da0:	4b92      	ldr	r3, [pc, #584]	; (2fec <usbd_work_handler+0x2b0>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    2da2:	4893      	ldr	r0, [pc, #588]	; (2ff0 <usbd_work_handler+0x2b4>)
    2da4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    2da8:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    2daa:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    2dae:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    2db0:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    2db4:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    2db8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    2dbc:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    2dbe:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    2dc2:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    2dc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    2dca:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    2dcc:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    2dd0:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    2dd4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    2dd8:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    2dda:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    2ddc:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    2dde:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    2de0:	f005 feac 	bl	8b3c <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    2de4:	682b      	ldr	r3, [r5, #0]
    2de6:	7a68      	ldrb	r0, [r5, #9]
    2de8:	2100      	movs	r1, #0
    2dea:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    2dec:	f996 3000 	ldrsb.w	r3, [r6]
    2df0:	2b00      	cmp	r3, #0
    2df2:	db06      	blt.n	2e02 <usbd_work_handler+0xc6>
    2df4:	88f3      	ldrh	r3, [r6, #6]
    2df6:	b123      	cbz	r3, 2e02 <usbd_work_handler+0xc6>
		ctx->ctrl_read_len = usbd_setup->wLength;
    2df8:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    2dfc:	f003 fc76 	bl	66ec <nrfx_usbd_setup_data_clear>
    2e00:	e7b2      	b.n	2d68 <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
    2e02:	2300      	movs	r3, #0
    2e04:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    2e08:	e7ae      	b.n	2d68 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
    2e0a:	7f6b      	ldrb	r3, [r5, #29]
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d0ab      	beq.n	2d68 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
    2e10:	7f2b      	ldrb	r3, [r5, #28]
    2e12:	2b00      	cmp	r3, #0
    2e14:	d0a8      	beq.n	2d68 <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
    2e16:	2600      	movs	r6, #0
    2e18:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    2e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e1e:	4875      	ldr	r0, [pc, #468]	; (2ff4 <usbd_work_handler+0x2b8>)
	ep_ctx->read_complete = false;
    2e20:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    2e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e26:	f005 fee6 	bl	8bf6 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    2e2a:	696b      	ldr	r3, [r5, #20]
    2e2c:	9301      	str	r3, [sp, #4]
    2e2e:	686b      	ldr	r3, [r5, #4]
    2e30:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    2e34:	a901      	add	r1, sp, #4
    2e36:	7a68      	ldrb	r0, [r5, #9]
    2e38:	f003 fa62 	bl	6300 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    2e3c:	486d      	ldr	r0, [pc, #436]	; (2ff4 <usbd_work_handler+0x2b8>)
    2e3e:	f005 fedc 	bl	8bfa <k_mutex_unlock.isra.0>
    2e42:	e791      	b.n	2d68 <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    2e44:	682b      	ldr	r3, [r5, #0]
    2e46:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    2e48:	7a68      	ldrb	r0, [r5, #9]
    2e4a:	4798      	blx	r3
		break;
    2e4c:	e78c      	b.n	2d68 <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    2e4e:	7aab      	ldrb	r3, [r5, #10]
    2e50:	b96b      	cbnz	r3, 2e6e <usbd_work_handler+0x132>
    2e52:	7feb      	ldrb	r3, [r5, #31]
    2e54:	b95b      	cbnz	r3, 2e6e <usbd_work_handler+0x132>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    2e56:	4867      	ldr	r0, [pc, #412]	; (2ff4 <usbd_work_handler+0x2b8>)
    2e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e60:	f005 fec9 	bl	8bf6 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    2e64:	f003 fc72 	bl	674c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    2e68:	4862      	ldr	r0, [pc, #392]	; (2ff4 <usbd_work_handler+0x2b8>)
    2e6a:	f005 fec6 	bl	8bfa <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    2e6e:	682b      	ldr	r3, [r5, #0]
    2e70:	2102      	movs	r1, #2
    2e72:	e7e9      	b.n	2e48 <usbd_work_handler+0x10c>
	switch (pwr_evt->state) {
    2e74:	7a02      	ldrb	r2, [r0, #8]
    2e76:	2a04      	cmp	r2, #4
    2e78:	f63f af76 	bhi.w	2d68 <usbd_work_handler+0x2c>
    2e7c:	e8df f002 	tbb	[pc, r2]
    2e80:	6925035b 	.word	0x6925035b
    2e84:	75          	.byte	0x75
    2e85:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    2e86:	f003 f9eb 	bl	6260 <nrfx_usbd_is_enabled>
    2e8a:	4605      	mov	r5, r0
    2e8c:	2800      	cmp	r0, #0
    2e8e:	f47f af6b 	bne.w	2d68 <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
    2e92:	f003 f929 	bl	60e8 <nrfx_usbd_enable>
    2e96:	f3bf 8f5b 	dmb	ish
    2e9a:	4957      	ldr	r1, [pc, #348]	; (2ff8 <usbd_work_handler+0x2bc>)
    2e9c:	2301      	movs	r3, #1
    2e9e:	e851 2f00 	ldrex	r2, [r1]
    2ea2:	2a00      	cmp	r2, #0
    2ea4:	d103      	bne.n	2eae <usbd_work_handler+0x172>
    2ea6:	e841 3000 	strex	r0, r3, [r1]
    2eaa:	2800      	cmp	r0, #0
    2eac:	d1f7      	bne.n	2e9e <usbd_work_handler+0x162>
    2eae:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    2eb2:	f47f af59 	bne.w	2d68 <usbd_work_handler+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2eb6:	f841 5c10 	str.w	r5, [r1, #-16]
    2eba:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    2ebe:	69e0      	ldr	r0, [r4, #28]
    2ec0:	6163      	str	r3, [r4, #20]
    2ec2:	3914      	subs	r1, #20
    2ec4:	f005 f954 	bl	8170 <onoff_request>
    2ec8:	e74e      	b.n	2d68 <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
    2eca:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    2ecc:	f065 007f 	orn	r0, r5, #127	; 0x7f
    2ed0:	b2c0      	uxtb	r0, r0
    2ed2:	f7ff fd4f 	bl	2974 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    2ed6:	7a03      	ldrb	r3, [r0, #8]
    2ed8:	b113      	cbz	r3, 2ee0 <usbd_work_handler+0x1a4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    2eda:	7a40      	ldrb	r0, [r0, #9]
    2edc:	f003 fe22 	bl	6b24 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    2ee0:	3501      	adds	r5, #1
    2ee2:	2d08      	cmp	r5, #8
    2ee4:	d1f2      	bne.n	2ecc <usbd_work_handler+0x190>
		if (ep_ctx->cfg.en) {
    2ee6:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    2eea:	b11b      	cbz	r3, 2ef4 <usbd_work_handler+0x1b8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    2eec:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    2ef0:	f003 fe18 	bl	6b24 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    2ef4:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    2ef6:	b2e8      	uxtb	r0, r5
    2ef8:	f7ff fd3c 	bl	2974 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    2efc:	7a03      	ldrb	r3, [r0, #8]
    2efe:	b113      	cbz	r3, 2f06 <usbd_work_handler+0x1ca>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    2f00:	7a40      	ldrb	r0, [r0, #9]
    2f02:	f003 fe0f 	bl	6b24 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    2f06:	3501      	adds	r5, #1
    2f08:	2d08      	cmp	r5, #8
    2f0a:	d1f4      	bne.n	2ef6 <usbd_work_handler+0x1ba>
		if (ep_ctx->cfg.en) {
    2f0c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    2f10:	b11b      	cbz	r3, 2f1a <usbd_work_handler+0x1de>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    2f12:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    2f16:	f003 fe05 	bl	6b24 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    2f1a:	2001      	movs	r0, #1
    2f1c:	f003 f982 	bl	6224 <nrfx_usbd_start>
		ctx->ready = true;
    2f20:	2301      	movs	r3, #1
    2f22:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    2f26:	6823      	ldr	r3, [r4, #0]
    2f28:	2b00      	cmp	r3, #0
    2f2a:	f43f af1d 	beq.w	2d68 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    2f2e:	2100      	movs	r1, #0
    2f30:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    2f32:	4798      	blx	r3
    2f34:	e718      	b.n	2d68 <usbd_work_handler+0x2c>
		ctx->ready = false;
    2f36:	2500      	movs	r5, #0
    2f38:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    2f3c:	f003 fd7e 	bl	6a3c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    2f40:	f7ff fe18 	bl	2b74 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    2f44:	6823      	ldr	r3, [r4, #0]
    2f46:	2b00      	cmp	r3, #0
    2f48:	f43f af0e 	beq.w	2d68 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    2f4c:	4629      	mov	r1, r5
    2f4e:	2004      	movs	r0, #4
    2f50:	e7ef      	b.n	2f32 <usbd_work_handler+0x1f6>
		if (dev_ready()) {
    2f52:	2b00      	cmp	r3, #0
    2f54:	f43f af08 	beq.w	2d68 <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
    2f58:	f003 fd88 	bl	6a6c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    2f5c:	6823      	ldr	r3, [r4, #0]
    2f5e:	2b00      	cmp	r3, #0
    2f60:	f43f af02 	beq.w	2d68 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    2f64:	2100      	movs	r1, #0
    2f66:	2005      	movs	r0, #5
    2f68:	e7e3      	b.n	2f32 <usbd_work_handler+0x1f6>
		if (ctx->status_cb && dev_ready()) {
    2f6a:	6822      	ldr	r2, [r4, #0]
    2f6c:	2a00      	cmp	r2, #0
    2f6e:	f43f aefb 	beq.w	2d68 <usbd_work_handler+0x2c>
    2f72:	2b00      	cmp	r3, #0
    2f74:	f43f aef8 	beq.w	2d68 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
    2f78:	2100      	movs	r1, #0
    2f7a:	2006      	movs	r0, #6
    2f7c:	4790      	blx	r2
    2f7e:	e6f3      	b.n	2d68 <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    2f80:	f107 0510 	add.w	r5, r7, #16
    2f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f8c:	4628      	mov	r0, r5
    2f8e:	f005 fe32 	bl	8bf6 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    2f92:	f7ff fe9f 	bl	2cd4 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    2f96:	4628      	mov	r0, r5
    2f98:	f005 fe2f 	bl	8bfa <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    2f9c:	f857 3c28 	ldr.w	r3, [r7, #-40]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	f43f aee1 	beq.w	2d68 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
    2fa6:	2100      	movs	r1, #0
    2fa8:	2001      	movs	r0, #1
    2faa:	e7c2      	b.n	2f32 <usbd_work_handler+0x1f6>
	if (ep_ctx->cfg.en) {
    2fac:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    2fb0:	b17b      	cbz	r3, 2fd2 <usbd_work_handler+0x296>
		ep_ctx->read_pending = true;
    2fb2:	2501      	movs	r5, #1
    2fb4:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    2fb8:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    2fbc:	f7ff fd4a 	bl	2a54 <usbd_evt_alloc>
		if (!ev) {
    2fc0:	b138      	cbz	r0, 2fd2 <usbd_work_handler+0x296>
		ev->evt.ep_evt.ep = ep_ctx;
    2fc2:	4a0e      	ldr	r2, [pc, #56]	; (2ffc <usbd_work_handler+0x2c0>)
		ev->evt_type = USBD_EVT_EP;
    2fc4:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    2fc6:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    2fc8:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    2fca:	f7ff fcfb 	bl	29c4 <usbd_evt_put>
		usbd_work_schedule();
    2fce:	f7ff fcff 	bl	29d0 <usbd_work_schedule>
			if (ctx->status_cb) {
    2fd2:	f857 3c28 	ldr.w	r3, [r7, #-40]
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	f43f aec6 	beq.w	2d68 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
    2fdc:	2100      	movs	r1, #0
    2fde:	200a      	movs	r0, #10
    2fe0:	e7a7      	b.n	2f32 <usbd_work_handler+0x1f6>
    2fe2:	bf00      	nop
    2fe4:	20000ea0 	.word	0x20000ea0
    2fe8:	20000248 	.word	0x20000248
    2fec:	40027000 	.word	0x40027000
    2ff0:	20000ea4 	.word	0x20000ea4
    2ff4:	20000ed8 	.word	0x20000ed8
    2ff8:	20000ec0 	.word	0x20000ec0
    2ffc:	2000110c 	.word	0x2000110c
	nrfx_power_usbevt_disable();
    3000:	f006 f9d1 	bl	93a6 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    3004:	f003 fd1a 	bl	6a3c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    3008:	f003 f864 	bl	60d4 <nrfx_usbd_uninit>
	usbd_evt_flush();
    300c:	f7ff fd14 	bl	2a38 <usbd_evt_flush>
	ret = eps_ctx_init();
    3010:	f7ff fe60 	bl	2cd4 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    3014:	f006 f9c0 	bl	9398 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    3018:	4801      	ldr	r0, [pc, #4]	; (3020 <usbd_work_handler+0x2e4>)
    301a:	f003 f92b 	bl	6274 <nrfx_usbd_init>
}
    301e:	e6a3      	b.n	2d68 <usbd_work_handler+0x2c>
    3020:	00002bb9 	.word	0x00002bb9

00003024 <usb_dc_attach>:
{
    3024:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    3026:	4d1a      	ldr	r5, [pc, #104]	; (3090 <usb_dc_attach+0x6c>)
    3028:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    302c:	bb5c      	cbnz	r4, 3086 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
    302e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    3032:	f006 fbd4 	bl	97de <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    3036:	4620      	mov	r0, r4
    3038:	f000 fb3c 	bl	36b4 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    303c:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
    303e:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3040:	2101      	movs	r1, #1
    3042:	2027      	movs	r0, #39	; 0x27
    3044:	f7ff f9b0 	bl	23a8 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    3048:	4812      	ldr	r0, [pc, #72]	; (3094 <usb_dc_attach+0x70>)
    304a:	f003 f913 	bl	6274 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    304e:	4b12      	ldr	r3, [pc, #72]	; (3098 <usb_dc_attach+0x74>)
    3050:	4298      	cmp	r0, r3
    3052:	d11a      	bne.n	308a <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
    3054:	f006 f9a0 	bl	9398 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    3058:	f7ff fe3c 	bl	2cd4 <eps_ctx_init>
	if (ret == 0) {
    305c:	4604      	mov	r4, r0
    305e:	b910      	cbnz	r0, 3066 <usb_dc_attach+0x42>
		ctx->attached = true;
    3060:	2301      	movs	r3, #1
    3062:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    3066:	4b0d      	ldr	r3, [pc, #52]	; (309c <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	b10b      	cbz	r3, 3070 <usb_dc_attach+0x4c>
		usbd_work_schedule();
    306c:	f7ff fcb0 	bl	29d0 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    3070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3074:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    3078:	07db      	lsls	r3, r3, #31
    307a:	d502      	bpl.n	3082 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    307c:	2000      	movs	r0, #0
    307e:	f7ff fd5f 	bl	2b40 <usb_dc_power_event_handler>
}
    3082:	4620      	mov	r0, r4
    3084:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    3086:	2400      	movs	r4, #0
    3088:	e7fb      	b.n	3082 <usb_dc_attach+0x5e>
		return -EIO;
    308a:	f06f 0404 	mvn.w	r4, #4
    308e:	e7f8      	b.n	3082 <usb_dc_attach+0x5e>
    3090:	20000ea0 	.word	0x20000ea0
    3094:	00002bb9 	.word	0x00002bb9
    3098:	0bad0000 	.word	0x0bad0000
    309c:	20000278 	.word	0x20000278

000030a0 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    30a0:	4b07      	ldr	r3, [pc, #28]	; (30c0 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    30a2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    30a6:	b13a      	cbz	r2, 30b8 <usb_dc_set_address+0x18>
    30a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    30ac:	2b00      	cmp	r3, #0
    30ae:	bf0c      	ite	eq
    30b0:	f06f 0012 	mvneq.w	r0, #18
    30b4:	2000      	movne	r0, #0
    30b6:	4770      	bx	lr
		return -ENODEV;
    30b8:	f06f 0012 	mvn.w	r0, #18
}
    30bc:	4770      	bx	lr
    30be:	bf00      	nop
    30c0:	20000ea0 	.word	0x20000ea0

000030c4 <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
    30c4:	4b0f      	ldr	r3, [pc, #60]	; (3104 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
    30c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    30ca:	b510      	push	{r4, lr}
    30cc:	4601      	mov	r1, r0
	if (!dev_attached()) {
    30ce:	b1b3      	cbz	r3, 30fe <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    30d0:	7804      	ldrb	r4, [r0, #0]
    30d2:	4620      	mov	r0, r4
    30d4:	f7ff fc4e 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    30d8:	b910      	cbnz	r0, 30e0 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    30da:	f06f 0015 	mvn.w	r0, #21
}
    30de:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    30e0:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    30e2:	790b      	ldrb	r3, [r1, #4]
    30e4:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    30e6:	8849      	ldrh	r1, [r1, #2]
    30e8:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    30ea:	0723      	lsls	r3, r4, #28
    30ec:	d402      	bmi.n	30f4 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    30ee:	1e4b      	subs	r3, r1, #1
    30f0:	420b      	tst	r3, r1
    30f2:	d1f2      	bne.n	30da <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    30f4:	4620      	mov	r0, r4
    30f6:	f006 fabd 	bl	9674 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    30fa:	2000      	movs	r0, #0
    30fc:	e7ef      	b.n	30de <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    30fe:	f06f 0012 	mvn.w	r0, #18
    3102:	e7ec      	b.n	30de <usb_dc_ep_configure+0x1a>
    3104:	20000ea0 	.word	0x20000ea0

00003108 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
    3108:	4b12      	ldr	r3, [pc, #72]	; (3154 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
    310a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    310e:	b510      	push	{r4, lr}
    3110:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    3112:	b1ca      	cbz	r2, 3148 <usb_dc_ep_set_stall+0x40>
    3114:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    3118:	b1b3      	cbz	r3, 3148 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    311a:	f7ff fc2b 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    311e:	4604      	mov	r4, r0
    3120:	b1a8      	cbz	r0, 314e <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    3122:	7a83      	ldrb	r3, [r0, #10]
    3124:	2b01      	cmp	r3, #1
    3126:	d012      	beq.n	314e <usb_dc_ep_set_stall+0x46>
    3128:	d907      	bls.n	313a <usb_dc_ep_set_stall+0x32>
    312a:	3b02      	subs	r3, #2
    312c:	2b01      	cmp	r3, #1
    312e:	d907      	bls.n	3140 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    3130:	6963      	ldr	r3, [r4, #20]
    3132:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    3134:	2000      	movs	r0, #0
    3136:	60e0      	str	r0, [r4, #12]
}
    3138:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    313a:	f003 fb0f 	bl	675c <nrfx_usbd_setup_stall>
		break;
    313e:	e7f7      	b.n	3130 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    3140:	4608      	mov	r0, r1
    3142:	f003 fa7f 	bl	6644 <nrfx_usbd_ep_stall>
		break;
    3146:	e7f3      	b.n	3130 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    3148:	f06f 0012 	mvn.w	r0, #18
    314c:	e7f4      	b.n	3138 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    314e:	f06f 0015 	mvn.w	r0, #21
    3152:	e7f1      	b.n	3138 <usb_dc_ep_set_stall+0x30>
    3154:	20000ea0 	.word	0x20000ea0

00003158 <usb_dc_ep_clear_stall>:
{
    3158:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    315a:	4b0e      	ldr	r3, [pc, #56]	; (3194 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    315c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    3160:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    3162:	b182      	cbz	r2, 3186 <usb_dc_ep_clear_stall+0x2e>
    3164:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    3168:	b16b      	cbz	r3, 3186 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    316a:	f7ff fc03 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    316e:	b168      	cbz	r0, 318c <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    3170:	f015 0408 	ands.w	r4, r5, #8
    3174:	d10a      	bne.n	318c <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    3176:	4628      	mov	r0, r5
    3178:	f003 fa86 	bl	6688 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    317c:	4628      	mov	r0, r5
    317e:	f003 fd23 	bl	6bc8 <nrfx_usbd_ep_stall_clear>
	return 0;
    3182:	4620      	mov	r0, r4
}
    3184:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3186:	f06f 0012 	mvn.w	r0, #18
    318a:	e7fb      	b.n	3184 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    318c:	f06f 0015 	mvn.w	r0, #21
    3190:	e7f8      	b.n	3184 <usb_dc_ep_clear_stall+0x2c>
    3192:	bf00      	nop
    3194:	20000ea0 	.word	0x20000ea0

00003198 <usb_dc_ep_is_stalled>:
{
    3198:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    319a:	4b0c      	ldr	r3, [pc, #48]	; (31cc <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    319c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    31a0:	4605      	mov	r5, r0
    31a2:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    31a4:	b162      	cbz	r2, 31c0 <usb_dc_ep_is_stalled+0x28>
    31a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    31aa:	b14b      	cbz	r3, 31c0 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    31ac:	f7ff fbe2 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    31b0:	b148      	cbz	r0, 31c6 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    31b2:	b141      	cbz	r1, 31c6 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    31b4:	4628      	mov	r0, r5
    31b6:	f003 fa4d 	bl	6654 <nrfx_usbd_ep_stall_check>
    31ba:	7020      	strb	r0, [r4, #0]
	return 0;
    31bc:	2000      	movs	r0, #0
}
    31be:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    31c0:	f06f 0012 	mvn.w	r0, #18
    31c4:	e7fb      	b.n	31be <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    31c6:	f06f 0015 	mvn.w	r0, #21
    31ca:	e7f8      	b.n	31be <usb_dc_ep_is_stalled+0x26>
    31cc:	20000ea0 	.word	0x20000ea0

000031d0 <usb_dc_ep_enable>:
{
    31d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    31d2:	4f13      	ldr	r7, [pc, #76]	; (3220 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    31d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
    31d8:	4604      	mov	r4, r0
	if (!dev_attached()) {
    31da:	b1bb      	cbz	r3, 320c <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    31dc:	f7ff fbca 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    31e0:	4605      	mov	r5, r0
    31e2:	b1b0      	cbz	r0, 3212 <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    31e4:	0723      	lsls	r3, r4, #28
    31e6:	d405      	bmi.n	31f4 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    31e8:	4620      	mov	r0, r4
    31ea:	f003 fa4d 	bl	6688 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    31ee:	4620      	mov	r0, r4
    31f0:	f003 fcea 	bl	6bc8 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    31f4:	7a2e      	ldrb	r6, [r5, #8]
    31f6:	b97e      	cbnz	r6, 3218 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    31f8:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    31fc:	2301      	movs	r3, #1
    31fe:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    3200:	b118      	cbz	r0, 320a <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    3202:	4620      	mov	r0, r4
    3204:	f003 fc8e 	bl	6b24 <nrfx_usbd_ep_enable>
	return 0;
    3208:	4630      	mov	r0, r6
}
    320a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    320c:	f06f 0012 	mvn.w	r0, #18
    3210:	e7fb      	b.n	320a <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    3212:	f06f 0015 	mvn.w	r0, #21
    3216:	e7f8      	b.n	320a <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    3218:	f06f 0077 	mvn.w	r0, #119	; 0x77
    321c:	e7f5      	b.n	320a <usb_dc_ep_enable+0x3a>
    321e:	bf00      	nop
    3220:	20000ea0 	.word	0x20000ea0

00003224 <usb_dc_ep_disable>:
{
    3224:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    3226:	4b11      	ldr	r3, [pc, #68]	; (326c <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    3228:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    322c:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    322e:	b19a      	cbz	r2, 3258 <usb_dc_ep_disable+0x34>
    3230:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    3234:	b183      	cbz	r3, 3258 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    3236:	f7ff fb9d 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    323a:	4605      	mov	r5, r0
    323c:	b178      	cbz	r0, 325e <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    323e:	7a03      	ldrb	r3, [r0, #8]
    3240:	b183      	cbz	r3, 3264 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    3242:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
    3244:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    3246:	f003 fc41 	bl	6acc <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    324a:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    324c:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    324e:	f005 fcbf 	bl	8bd0 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    3252:	722c      	strb	r4, [r5, #8]
	return 0;
    3254:	4620      	mov	r0, r4
}
    3256:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3258:	f06f 0012 	mvn.w	r0, #18
    325c:	e7fb      	b.n	3256 <usb_dc_ep_disable+0x32>
		return -EINVAL;
    325e:	f06f 0015 	mvn.w	r0, #21
    3262:	e7f8      	b.n	3256 <usb_dc_ep_disable+0x32>
		return -EALREADY;
    3264:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3268:	e7f5      	b.n	3256 <usb_dc_ep_disable+0x32>
    326a:	bf00      	nop
    326c:	20000ea0 	.word	0x20000ea0

00003270 <usb_dc_ep_write>:
{
    3270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    3274:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3354 <usb_dc_ep_write+0xe4>
{
    3278:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    327a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    327e:	b085      	sub	sp, #20
    3280:	4607      	mov	r7, r0
    3282:	4689      	mov	r9, r1
    3284:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
    3286:	2b00      	cmp	r3, #0
    3288:	d05d      	beq.n	3346 <usb_dc_ep_write+0xd6>
    328a:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    328e:	2b00      	cmp	r3, #0
    3290:	d059      	beq.n	3346 <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    3292:	0603      	lsls	r3, r0, #24
    3294:	d55a      	bpl.n	334c <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
    3296:	f7ff fb6d 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    329a:	4605      	mov	r5, r0
    329c:	2800      	cmp	r0, #0
    329e:	d055      	beq.n	334c <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
    32a0:	7a03      	ldrb	r3, [r0, #8]
    32a2:	2b00      	cmp	r3, #0
    32a4:	d052      	beq.n	334c <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    32a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    32aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    32ae:	f108 0038 	add.w	r0, r8, #56	; 0x38
    32b2:	f005 fca0 	bl	8bf6 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    32b6:	7fab      	ldrb	r3, [r5, #30]
    32b8:	b14b      	cbz	r3, 32ce <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    32ba:	f108 0038 	add.w	r0, r8, #56	; 0x38
    32be:	f005 fc9c 	bl	8bfa <k_mutex_unlock.isra.0>
		return -EAGAIN;
    32c2:	f06f 040a 	mvn.w	r4, #10
}
    32c6:	4620      	mov	r0, r4
    32c8:	b005      	add	sp, #20
    32ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    32ce:	b916      	cbnz	r6, 32d6 <usb_dc_ep_write+0x66>
    32d0:	7feb      	ldrb	r3, [r5, #31]
    32d2:	b103      	cbz	r3, 32d6 <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
    32d4:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    32d6:	7aab      	ldrb	r3, [r5, #10]
    32d8:	b9bb      	cbnz	r3, 330a <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    32da:	b15e      	cbz	r6, 32f4 <usb_dc_ep_write+0x84>
    32dc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    32e0:	42b3      	cmp	r3, r6
    32e2:	d907      	bls.n	32f4 <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    32e4:	686a      	ldr	r2, [r5, #4]
    32e6:	fbb6 f3f2 	udiv	r3, r6, r2
    32ea:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    32ee:	b90b      	cbnz	r3, 32f4 <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
    32f0:	2301      	movs	r3, #1
    32f2:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    32f4:	f003 fa3a 	bl	676c <nrfx_usbd_last_setup_dir_get>
    32f8:	42b8      	cmp	r0, r7
    32fa:	d006      	beq.n	330a <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
    32fc:	f003 fa26 	bl	674c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    3300:	4815      	ldr	r0, [pc, #84]	; (3358 <usb_dc_ep_write+0xe8>)
    3302:	f005 fc7a 	bl	8bfa <k_mutex_unlock.isra.0>
		return 0;
    3306:	2400      	movs	r4, #0
    3308:	e7dd      	b.n	32c6 <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
    330a:	2301      	movs	r3, #1
    330c:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    330e:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    3312:	a901      	add	r1, sp, #4
    3314:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    3316:	e9cd 9601 	strd	r9, r6, [sp, #4]
    331a:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    331e:	f002 ffef 	bl	6300 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    3322:	4b0e      	ldr	r3, [pc, #56]	; (335c <usb_dc_ep_write+0xec>)
    3324:	4298      	cmp	r0, r3
    3326:	d007      	beq.n	3338 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
    3328:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
    332c:	b10c      	cbz	r4, 3332 <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
    332e:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
    3332:	f06f 0404 	mvn.w	r4, #4
    3336:	e002      	b.n	333e <usb_dc_ep_write+0xce>
		if (ret_bytes) {
    3338:	b10c      	cbz	r4, 333e <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
    333a:	6026      	str	r6, [r4, #0]
	int result = 0;
    333c:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
    333e:	4806      	ldr	r0, [pc, #24]	; (3358 <usb_dc_ep_write+0xe8>)
    3340:	f005 fc5b 	bl	8bfa <k_mutex_unlock.isra.0>
	return result;
    3344:	e7bf      	b.n	32c6 <usb_dc_ep_write+0x56>
		return -ENODEV;
    3346:	f06f 0412 	mvn.w	r4, #18
    334a:	e7bc      	b.n	32c6 <usb_dc_ep_write+0x56>
		return -EINVAL;
    334c:	f06f 0415 	mvn.w	r4, #21
    3350:	e7b9      	b.n	32c6 <usb_dc_ep_write+0x56>
    3352:	bf00      	nop
    3354:	20000ea0 	.word	0x20000ea0
    3358:	20000ed8 	.word	0x20000ed8
    335c:	0bad0000 	.word	0x0bad0000

00003360 <usb_dc_ep_read_wait>:
{
    3360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3364:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    3366:	4b20      	ldr	r3, [pc, #128]	; (33e8 <usb_dc_ep_read_wait+0x88>)
{
    3368:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    336a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    336e:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    3370:	2a00      	cmp	r2, #0
    3372:	d033      	beq.n	33dc <usb_dc_ep_read_wait+0x7c>
    3374:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    3378:	b383      	cbz	r3, 33dc <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    337a:	0603      	lsls	r3, r0, #24
    337c:	d431      	bmi.n	33e2 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    337e:	b901      	cbnz	r1, 3382 <usb_dc_ep_read_wait+0x22>
    3380:	bb7f      	cbnz	r7, 33e2 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    3382:	f7ff faf7 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    3386:	4604      	mov	r4, r0
    3388:	b358      	cbz	r0, 33e2 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    338a:	7a03      	ldrb	r3, [r0, #8]
    338c:	b34b      	cbz	r3, 33e2 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    338e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3392:	4816      	ldr	r0, [pc, #88]	; (33ec <usb_dc_ep_read_wait+0x8c>)
    3394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3398:	f005 fc2d 	bl	8bf6 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    339c:	68e3      	ldr	r3, [r4, #12]
    339e:	429f      	cmp	r7, r3
    33a0:	46b8      	mov	r8, r7
    33a2:	bf28      	it	cs
    33a4:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    33a6:	b946      	cbnz	r6, 33ba <usb_dc_ep_read_wait+0x5a>
    33a8:	b93f      	cbnz	r7, 33ba <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    33aa:	b105      	cbz	r5, 33ae <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    33ac:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    33ae:	480f      	ldr	r0, [pc, #60]	; (33ec <usb_dc_ep_read_wait+0x8c>)
    33b0:	f005 fc23 	bl	8bfa <k_mutex_unlock.isra.0>
		return 0;
    33b4:	2000      	movs	r0, #0
}
    33b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    33ba:	69a1      	ldr	r1, [r4, #24]
    33bc:	4642      	mov	r2, r8
    33be:	4630      	mov	r0, r6
    33c0:	f005 fbbc 	bl	8b3c <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    33c4:	69a3      	ldr	r3, [r4, #24]
    33c6:	4443      	add	r3, r8
    33c8:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    33ca:	68e3      	ldr	r3, [r4, #12]
    33cc:	eba3 0308 	sub.w	r3, r3, r8
    33d0:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    33d2:	2d00      	cmp	r5, #0
    33d4:	d0eb      	beq.n	33ae <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    33d6:	f8c5 8000 	str.w	r8, [r5]
    33da:	e7e8      	b.n	33ae <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    33dc:	f06f 0012 	mvn.w	r0, #18
    33e0:	e7e9      	b.n	33b6 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    33e2:	f06f 0015 	mvn.w	r0, #21
    33e6:	e7e6      	b.n	33b6 <usb_dc_ep_read_wait+0x56>
    33e8:	20000ea0 	.word	0x20000ea0
    33ec:	20000ed8 	.word	0x20000ed8

000033f0 <usb_dc_ep_read_continue>:
{
    33f0:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    33f2:	4d1e      	ldr	r5, [pc, #120]	; (346c <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
    33f4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
    33f8:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    33fa:	b382      	cbz	r2, 345e <usb_dc_ep_read_continue+0x6e>
    33fc:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    3400:	b36a      	cbz	r2, 345e <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3402:	061b      	lsls	r3, r3, #24
    3404:	d42e      	bmi.n	3464 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    3406:	f7ff fab5 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    340a:	4604      	mov	r4, r0
    340c:	b350      	cbz	r0, 3464 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    340e:	7a03      	ldrb	r3, [r0, #8]
    3410:	b343      	cbz	r3, 3464 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    341a:	f105 0038 	add.w	r0, r5, #56	; 0x38
    341e:	f005 fbea 	bl	8bf6 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    3422:	68e3      	ldr	r3, [r4, #12]
    3424:	b9b3      	cbnz	r3, 3454 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    3426:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    3428:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    342a:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    342c:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    342e:	7f63      	ldrb	r3, [r4, #29]
    3430:	b183      	cbz	r3, 3454 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    3432:	f7ff fb0f 	bl	2a54 <usbd_evt_alloc>
			if (!ev) {
    3436:	b930      	cbnz	r0, 3446 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    3438:	f105 0038 	add.w	r0, r5, #56	; 0x38
    343c:	f005 fbdd 	bl	8bfa <k_mutex_unlock.isra.0>
				return -ENOMEM;
    3440:	f06f 000b 	mvn.w	r0, #11
}
    3444:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    3446:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    3448:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    344a:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    344c:	f7ff faba 	bl	29c4 <usbd_evt_put>
			usbd_work_schedule();
    3450:	f7ff fabe 	bl	29d0 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    3454:	4806      	ldr	r0, [pc, #24]	; (3470 <usb_dc_ep_read_continue+0x80>)
    3456:	f005 fbd0 	bl	8bfa <k_mutex_unlock.isra.0>
	return 0;
    345a:	2000      	movs	r0, #0
    345c:	e7f2      	b.n	3444 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    345e:	f06f 0012 	mvn.w	r0, #18
    3462:	e7ef      	b.n	3444 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    3464:	f06f 0015 	mvn.w	r0, #21
    3468:	e7ec      	b.n	3444 <usb_dc_ep_read_continue+0x54>
    346a:	bf00      	nop
    346c:	20000ea0 	.word	0x20000ea0
    3470:	20000ed8 	.word	0x20000ed8

00003474 <usb_dc_ep_set_callback>:
{
    3474:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    3476:	4b08      	ldr	r3, [pc, #32]	; (3498 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    3478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    347c:	b12b      	cbz	r3, 348a <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
    347e:	f7ff fa79 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    3482:	b128      	cbz	r0, 3490 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
    3484:	6001      	str	r1, [r0, #0]
	return 0;
    3486:	2000      	movs	r0, #0
}
    3488:	bd08      	pop	{r3, pc}
		return -ENODEV;
    348a:	f06f 0012 	mvn.w	r0, #18
    348e:	e7fb      	b.n	3488 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
    3490:	f06f 0015 	mvn.w	r0, #21
    3494:	e7f8      	b.n	3488 <usb_dc_ep_set_callback+0x14>
    3496:	bf00      	nop
    3498:	20000ea0 	.word	0x20000ea0

0000349c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    349c:	4b01      	ldr	r3, [pc, #4]	; (34a4 <usb_dc_set_status_callback+0x8>)
    349e:	6018      	str	r0, [r3, #0]
}
    34a0:	4770      	bx	lr
    34a2:	bf00      	nop
    34a4:	20000ea0 	.word	0x20000ea0

000034a8 <usb_dc_ep_mps>:
{
    34a8:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    34aa:	4b07      	ldr	r3, [pc, #28]	; (34c8 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    34ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    34b0:	b123      	cbz	r3, 34bc <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    34b2:	f7ff fa5f 	bl	2974 <endpoint_ctx>
	if (!ep_ctx) {
    34b6:	b120      	cbz	r0, 34c2 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    34b8:	6840      	ldr	r0, [r0, #4]
}
    34ba:	bd08      	pop	{r3, pc}
		return -ENODEV;
    34bc:	f06f 0012 	mvn.w	r0, #18
    34c0:	e7fb      	b.n	34ba <usb_dc_ep_mps+0x12>
		return -EINVAL;
    34c2:	f06f 0015 	mvn.w	r0, #21
    34c6:	e7f8      	b.n	34ba <usb_dc_ep_mps+0x12>
    34c8:	20000ea0 	.word	0x20000ea0

000034cc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    34cc:	4b08      	ldr	r3, [pc, #32]	; (34f0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    34ce:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    34d0:	1ac3      	subs	r3, r0, r3
{
    34d2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    34d4:	4907      	ldr	r1, [pc, #28]	; (34f4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    34d6:	109b      	asrs	r3, r3, #2
{
    34d8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    34da:	4359      	muls	r1, r3
    34dc:	4806      	ldr	r0, [pc, #24]	; (34f8 <onoff_stop+0x2c>)
    34de:	2240      	movs	r2, #64	; 0x40
    34e0:	f005 fbd0 	bl	8c84 <stop>
	notify(mgr, res);
    34e4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    34e6:	4601      	mov	r1, r0
	notify(mgr, res);
    34e8:	4620      	mov	r0, r4
}
    34ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    34ee:	4718      	bx	r3
    34f0:	20001140 	.word	0x20001140
    34f4:	b6db6db7 	.word	0xb6db6db7
    34f8:	00009d84 	.word	0x00009d84

000034fc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    34fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    34fe:	4c0c      	ldr	r4, [pc, #48]	; (3530 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3500:	4a0c      	ldr	r2, [pc, #48]	; (3534 <onoff_start+0x38>)
    3502:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    3504:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3506:	9300      	str	r3, [sp, #0]
{
    3508:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    350a:	460b      	mov	r3, r1
    350c:	490a      	ldr	r1, [pc, #40]	; (3538 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    350e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3510:	4361      	muls	r1, r4
{
    3512:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3514:	4809      	ldr	r0, [pc, #36]	; (353c <onoff_start+0x40>)
    3516:	f005 fbe1 	bl	8cdc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    351a:	1e01      	subs	r1, r0, #0
    351c:	da05      	bge.n	352a <onoff_start+0x2e>
		notify(mgr, err);
    351e:	4630      	mov	r0, r6
    3520:	462b      	mov	r3, r5
	}
}
    3522:	b002      	add	sp, #8
    3524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    3528:	4718      	bx	r3
}
    352a:	b002      	add	sp, #8
    352c:	bd70      	pop	{r4, r5, r6, pc}
    352e:	bf00      	nop
    3530:	20001140 	.word	0x20001140
    3534:	00008d4d 	.word	0x00008d4d
    3538:	b6db6db7 	.word	0xb6db6db7
    353c:	00009d84 	.word	0x00009d84

00003540 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3540:	2200      	movs	r2, #0
{
    3542:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3544:	2101      	movs	r1, #1
{
    3546:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3548:	4610      	mov	r0, r2
    354a:	f7fe ff2d 	bl	23a8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    354e:	2000      	movs	r0, #0
    3550:	f7fe fef8 	bl	2344 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3554:	480f      	ldr	r0, [pc, #60]	; (3594 <clk_init+0x54>)
    3556:	f001 f9e7 	bl	4928 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    355a:	4b0f      	ldr	r3, [pc, #60]	; (3598 <clk_init+0x58>)
    355c:	4298      	cmp	r0, r3
    355e:	d115      	bne.n	358c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3560:	f001 f9f2 	bl	4948 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    3564:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3566:	490d      	ldr	r1, [pc, #52]	; (359c <clk_init+0x5c>)
    3568:	4630      	mov	r0, r6
    356a:	f004 fdee 	bl	814a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    356e:	2800      	cmp	r0, #0
    3570:	db0b      	blt.n	358a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    3572:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3574:	4909      	ldr	r1, [pc, #36]	; (359c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3576:	2501      	movs	r5, #1
    3578:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    357a:	f104 001c 	add.w	r0, r4, #28
    357e:	f004 fde4 	bl	814a <onoff_manager_init>
		if (err < 0) {
    3582:	2800      	cmp	r0, #0
    3584:	db01      	blt.n	358a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3586:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    3588:	2000      	movs	r0, #0
}
    358a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    358c:	f06f 0004 	mvn.w	r0, #4
    3590:	e7fb      	b.n	358a <clk_init+0x4a>
    3592:	bf00      	nop
    3594:	000035d5 	.word	0x000035d5
    3598:	0bad0000 	.word	0x0bad0000
    359c:	0000a0c4 	.word	0x0000a0c4

000035a0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    35a0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    35a2:	230c      	movs	r3, #12
    35a4:	4809      	ldr	r0, [pc, #36]	; (35cc <clkstarted_handle.constprop.0+0x2c>)
    35a6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    35a8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    35aa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    35ac:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    35b0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    35b2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    35b4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    35b6:	4418      	add	r0, r3
    35b8:	f005 fb51 	bl	8c5e <set_on_state>
	if (callback) {
    35bc:	b12d      	cbz	r5, 35ca <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    35be:	4632      	mov	r2, r6
    35c0:	462b      	mov	r3, r5
    35c2:	4803      	ldr	r0, [pc, #12]	; (35d0 <clkstarted_handle.constprop.0+0x30>)
}
    35c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    35c8:	4718      	bx	r3
}
    35ca:	bd70      	pop	{r4, r5, r6, pc}
    35cc:	20001140 	.word	0x20001140
    35d0:	00009d84 	.word	0x00009d84

000035d4 <clock_event_handler>:
	switch (event) {
    35d4:	b110      	cbz	r0, 35dc <clock_event_handler+0x8>
    35d6:	2801      	cmp	r0, #1
    35d8:	d004      	beq.n	35e4 <clock_event_handler+0x10>
    35da:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    35dc:	4b03      	ldr	r3, [pc, #12]	; (35ec <clock_event_handler+0x18>)
    35de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35e0:	075b      	lsls	r3, r3, #29
    35e2:	d101      	bne.n	35e8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    35e4:	f7ff bfdc 	b.w	35a0 <clkstarted_handle.constprop.0>
}
    35e8:	4770      	bx	lr
    35ea:	bf00      	nop
    35ec:	20001140 	.word	0x20001140

000035f0 <generic_hfclk_start>:
{
    35f0:	b508      	push	{r3, lr}
	__asm__ volatile(
    35f2:	f04f 0320 	mov.w	r3, #32
    35f6:	f3ef 8111 	mrs	r1, BASEPRI
    35fa:	f383 8812 	msr	BASEPRI_MAX, r3
    35fe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3602:	4a12      	ldr	r2, [pc, #72]	; (364c <generic_hfclk_start+0x5c>)
    3604:	6813      	ldr	r3, [r2, #0]
    3606:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    360a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    360e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3610:	d00c      	beq.n	362c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3612:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3616:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    361a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    361e:	f013 0301 	ands.w	r3, r3, #1
    3622:	d003      	beq.n	362c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3624:	480a      	ldr	r0, [pc, #40]	; (3650 <generic_hfclk_start+0x60>)
    3626:	f005 fb1a 	bl	8c5e <set_on_state>
			already_started = true;
    362a:	2301      	movs	r3, #1
	__asm__ volatile(
    362c:	f381 8811 	msr	BASEPRI, r1
    3630:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3634:	b123      	cbz	r3, 3640 <generic_hfclk_start+0x50>
}
    3636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    363a:	2000      	movs	r0, #0
    363c:	f7ff bfb0 	b.w	35a0 <clkstarted_handle.constprop.0>
}
    3640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3644:	2001      	movs	r0, #1
    3646:	f005 be19 	b.w	927c <nrfx_clock_start>
    364a:	bf00      	nop
    364c:	20001190 	.word	0x20001190
    3650:	20001180 	.word	0x20001180

00003654 <api_blocking_start>:
{
    3654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3656:	2200      	movs	r2, #0
    3658:	2301      	movs	r3, #1
    365a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    365e:	4a09      	ldr	r2, [pc, #36]	; (3684 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3660:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3664:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3666:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    366a:	f005 fb68 	bl	8d3e <api_start>
	if (err < 0) {
    366e:	2800      	cmp	r0, #0
    3670:	db05      	blt.n	367e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    3672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3676:	2300      	movs	r3, #0
    3678:	4668      	mov	r0, sp
    367a:	f003 fe65 	bl	7348 <z_impl_k_sem_take>
}
    367e:	b005      	add	sp, #20
    3680:	f85d fb04 	ldr.w	pc, [sp], #4
    3684:	00008d6b 	.word	0x00008d6b

00003688 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3688:	4b09      	ldr	r3, [pc, #36]	; (36b0 <generic_hfclk_stop+0x28>)
    368a:	f3bf 8f5b 	dmb	ish
    368e:	e853 2f00 	ldrex	r2, [r3]
    3692:	f022 0102 	bic.w	r1, r2, #2
    3696:	e843 1000 	strex	r0, r1, [r3]
    369a:	2800      	cmp	r0, #0
    369c:	d1f7      	bne.n	368e <generic_hfclk_stop+0x6>
    369e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    36a2:	07d3      	lsls	r3, r2, #31
    36a4:	d402      	bmi.n	36ac <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    36a6:	2001      	movs	r0, #1
    36a8:	f001 b95c 	b.w	4964 <nrfx_clock_stop>
}
    36ac:	4770      	bx	lr
    36ae:	bf00      	nop
    36b0:	20001190 	.word	0x20001190

000036b4 <z_nrf_clock_control_get_onoff>:
}
    36b4:	4a02      	ldr	r2, [pc, #8]	; (36c0 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    36b6:	b2c3      	uxtb	r3, r0
}
    36b8:	201c      	movs	r0, #28
    36ba:	fb03 2000 	mla	r0, r3, r0, r2
    36be:	4770      	bx	lr
    36c0:	20001140 	.word	0x20001140

000036c4 <z_nrf_clock_control_lf_on>:
{
    36c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    36c8:	4939      	ldr	r1, [pc, #228]	; (37b0 <z_nrf_clock_control_lf_on+0xec>)
    36ca:	f3bf 8f5b 	dmb	ish
    36ce:	4607      	mov	r7, r0
    36d0:	2201      	movs	r2, #1
    36d2:	e851 3f00 	ldrex	r3, [r1]
    36d6:	e841 2000 	strex	r0, r2, [r1]
    36da:	2800      	cmp	r0, #0
    36dc:	d1f9      	bne.n	36d2 <z_nrf_clock_control_lf_on+0xe>
    36de:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    36e2:	b933      	cbnz	r3, 36f2 <z_nrf_clock_control_lf_on+0x2e>
    36e4:	4933      	ldr	r1, [pc, #204]	; (37b4 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    36e6:	4834      	ldr	r0, [pc, #208]	; (37b8 <z_nrf_clock_control_lf_on+0xf4>)
    36e8:	604b      	str	r3, [r1, #4]
    36ea:	60cb      	str	r3, [r1, #12]
    36ec:	608a      	str	r2, [r1, #8]
    36ee:	f004 fd3f 	bl	8170 <onoff_request>
	switch (start_mode) {
    36f2:	1e7b      	subs	r3, r7, #1
    36f4:	2b01      	cmp	r3, #1
    36f6:	d82f      	bhi.n	3758 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    36f8:	2f01      	cmp	r7, #1
    36fa:	d107      	bne.n	370c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    36fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3700:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3704:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3708:	2b01      	cmp	r3, #1
    370a:	d025      	beq.n	3758 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    370c:	f006 f84d 	bl	97aa <k_is_in_isr>
    3710:	4604      	mov	r4, r0
    3712:	b918      	cbnz	r0, 371c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    3714:	4b29      	ldr	r3, [pc, #164]	; (37bc <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    3716:	781b      	ldrb	r3, [r3, #0]
    3718:	2b00      	cmp	r3, #0
    371a:	d141      	bne.n	37a0 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    371c:	f04f 0320 	mov.w	r3, #32
    3720:	f3ef 8611 	mrs	r6, BASEPRI
    3724:	f383 8812 	msr	BASEPRI_MAX, r3
    3728:	f3bf 8f6f 	isb	sy
    372c:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    372e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 37c0 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3732:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3736:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    373a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    373e:	03d2      	lsls	r2, r2, #15
    3740:	d50c      	bpl.n	375c <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3742:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3746:	2b01      	cmp	r3, #1
    3748:	d001      	beq.n	374e <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    374a:	2f01      	cmp	r7, #1
    374c:	d106      	bne.n	375c <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    374e:	b30c      	cbz	r4, 3794 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    3750:	f386 8811 	msr	BASEPRI, r6
    3754:	f3bf 8f6f 	isb	sy
}
    3758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    375c:	b1ac      	cbz	r4, 378a <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    375e:	4630      	mov	r0, r6
    3760:	f7fe fde6 	bl	2330 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3764:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3768:	2b00      	cmp	r3, #0
    376a:	d1e4      	bne.n	3736 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    376c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3770:	2a00      	cmp	r2, #0
    3772:	d0e0      	beq.n	3736 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3774:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3778:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    377c:	2301      	movs	r3, #1
    377e:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    3782:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3786:	60ab      	str	r3, [r5, #8]
}
    3788:	e7d5      	b.n	3736 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    378a:	2100      	movs	r1, #0
    378c:	2021      	movs	r0, #33	; 0x21
    378e:	f004 f9f7 	bl	7b80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3792:	e7e7      	b.n	3764 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    3794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3798:	2202      	movs	r2, #2
    379a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    379e:	e7db      	b.n	3758 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    37a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37a4:	2202      	movs	r2, #2
    37a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    37aa:	4606      	mov	r6, r0
}
    37ac:	e7bf      	b.n	372e <z_nrf_clock_control_lf_on+0x6a>
    37ae:	bf00      	nop
    37b0:	20001194 	.word	0x20001194
    37b4:	20001130 	.word	0x20001130
    37b8:	2000115c 	.word	0x2000115c
    37bc:	20001531 	.word	0x20001531
    37c0:	e000e100 	.word	0xe000e100

000037c4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    37c4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    37c6:	4b08      	ldr	r3, [pc, #32]	; (37e8 <uart_console_init+0x24>)
    37c8:	4808      	ldr	r0, [pc, #32]	; (37ec <uart_console_init+0x28>)
    37ca:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    37cc:	f005 ff93 	bl	96f6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    37d0:	b138      	cbz	r0, 37e2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    37d2:	4807      	ldr	r0, [pc, #28]	; (37f0 <uart_console_init+0x2c>)
    37d4:	f7ff f88a 	bl	28ec <__stdout_hook_install>
	__printk_hook_install(console_out);
    37d8:	4805      	ldr	r0, [pc, #20]	; (37f0 <uart_console_init+0x2c>)
    37da:	f7fc fec5 	bl	568 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    37de:	2000      	movs	r0, #0
}
    37e0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    37e2:	f06f 0012 	mvn.w	r0, #18
    37e6:	e7fb      	b.n	37e0 <uart_console_init+0x1c>
    37e8:	20001198 	.word	0x20001198
    37ec:	00009dcc 	.word	0x00009dcc
    37f0:	000037f5 	.word	0x000037f5

000037f4 <console_out>:
	if ('\n' == c) {
    37f4:	280a      	cmp	r0, #10
{
    37f6:	b538      	push	{r3, r4, r5, lr}
    37f8:	4d07      	ldr	r5, [pc, #28]	; (3818 <console_out+0x24>)
    37fa:	4604      	mov	r4, r0
	if ('\n' == c) {
    37fc:	d104      	bne.n	3808 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    37fe:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    3800:	6883      	ldr	r3, [r0, #8]
    3802:	210d      	movs	r1, #13
    3804:	685b      	ldr	r3, [r3, #4]
    3806:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3808:	6828      	ldr	r0, [r5, #0]
    380a:	6883      	ldr	r3, [r0, #8]
    380c:	b2e1      	uxtb	r1, r4
    380e:	685b      	ldr	r3, [r3, #4]
    3810:	4798      	blx	r3
}
    3812:	4620      	mov	r0, r4
    3814:	bd38      	pop	{r3, r4, r5, pc}
    3816:	bf00      	nop
    3818:	20001198 	.word	0x20001198

0000381c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    381c:	b530      	push	{r4, r5, lr}
	return port->config;
    381e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3820:	7b04      	ldrb	r4, [r0, #12]
    3822:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3826:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    382a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    382e:	b085      	sub	sp, #20
    3830:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    3834:	d104      	bne.n	3840 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    3836:	4628      	mov	r0, r5
    3838:	f001 fb42 	bl	4ec0 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    383c:	2000      	movs	r0, #0
    383e:	e032      	b.n	38a6 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3840:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3844:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3848:	d12f      	bne.n	38aa <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    384a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    384e:	bf0c      	ite	eq
    3850:	2304      	moveq	r3, #4
    3852:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3854:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3858:	6883      	ldr	r3, [r0, #8]
    385a:	fa23 f101 	lsr.w	r1, r3, r1
    385e:	07c9      	lsls	r1, r1, #31
    3860:	d42f      	bmi.n	38c2 <gpio_nrfx_pin_interrupt_configure+0xa6>
    3862:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3866:	d12c      	bne.n	38c2 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    3868:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    386a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    386c:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    3870:	4a1c      	ldr	r2, [pc, #112]	; (38e4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3872:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    3876:	bf18      	it	ne
    3878:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3880:	07db      	lsls	r3, r3, #31
    3882:	d41e      	bmi.n	38c2 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3884:	f10d 0407 	add.w	r4, sp, #7
    3888:	4621      	mov	r1, r4
    388a:	4628      	mov	r0, r5
    388c:	f001 fa7c 	bl	4d88 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3890:	4b15      	ldr	r3, [pc, #84]	; (38e8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    3892:	4298      	cmp	r0, r3
    3894:	d114      	bne.n	38c0 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    3896:	4620      	mov	r0, r4
    3898:	f001 fac4 	bl	4e24 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    389c:	4b13      	ldr	r3, [pc, #76]	; (38ec <gpio_nrfx_pin_interrupt_configure+0xd0>)
    389e:	4298      	cmp	r0, r3
    38a0:	d00e      	beq.n	38c0 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    38a2:	f06f 000b 	mvn.w	r0, #11
}
    38a6:	b005      	add	sp, #20
    38a8:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    38aa:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    38ae:	d005      	beq.n	38bc <gpio_nrfx_pin_interrupt_configure+0xa0>
    38b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    38b4:	bf0c      	ite	eq
    38b6:	2302      	moveq	r3, #2
    38b8:	2301      	movne	r3, #1
    38ba:	e7cb      	b.n	3854 <gpio_nrfx_pin_interrupt_configure+0x38>
    38bc:	2303      	movs	r3, #3
    38be:	e7c9      	b.n	3854 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    38c0:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    38c2:	2300      	movs	r3, #0
    38c4:	4619      	mov	r1, r3
    38c6:	aa02      	add	r2, sp, #8
    38c8:	4628      	mov	r0, r5
    38ca:	f001 f937 	bl	4b3c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    38ce:	4b07      	ldr	r3, [pc, #28]	; (38ec <gpio_nrfx_pin_interrupt_configure+0xd0>)
    38d0:	4298      	cmp	r0, r3
    38d2:	d104      	bne.n	38de <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    38d4:	2101      	movs	r1, #1
    38d6:	4628      	mov	r0, r5
    38d8:	f001 faaa 	bl	4e30 <nrfx_gpiote_trigger_enable>
    38dc:	e7ae      	b.n	383c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    38de:	f06f 0004 	mvn.w	r0, #4
    38e2:	e7e0      	b.n	38a6 <gpio_nrfx_pin_interrupt_configure+0x8a>
    38e4:	50000300 	.word	0x50000300
    38e8:	0bad0004 	.word	0x0bad0004
    38ec:	0bad0000 	.word	0x0bad0000

000038f0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    38f0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    38f2:	f001 fa87 	bl	4e04 <nrfx_gpiote_is_init>
    38f6:	4604      	mov	r4, r0
    38f8:	b968      	cbnz	r0, 3916 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    38fa:	f001 fa5b 	bl	4db4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    38fe:	4b08      	ldr	r3, [pc, #32]	; (3920 <gpio_nrfx_init+0x30>)
    3900:	4298      	cmp	r0, r3
    3902:	d10a      	bne.n	391a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3904:	4807      	ldr	r0, [pc, #28]	; (3924 <gpio_nrfx_init+0x34>)
    3906:	4621      	mov	r1, r4
    3908:	f001 fa38 	bl	4d7c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    390c:	4622      	mov	r2, r4
    390e:	2105      	movs	r1, #5
    3910:	2006      	movs	r0, #6
    3912:	f7fe fd49 	bl	23a8 <z_arm_irq_priority_set>
		return 0;
    3916:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3918:	bd10      	pop	{r4, pc}
		return -EIO;
    391a:	f06f 0004 	mvn.w	r0, #4
    391e:	e7fb      	b.n	3918 <gpio_nrfx_init+0x28>
    3920:	0bad0000 	.word	0x0bad0000
    3924:	00003929 	.word	0x00003929

00003928 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3928:	0942      	lsrs	r2, r0, #5
{
    392a:	b570      	push	{r4, r5, r6, lr}
    392c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    392e:	d002      	beq.n	3936 <nrfx_gpio_handler+0xe>
    3930:	2a01      	cmp	r2, #1
    3932:	d015      	beq.n	3960 <nrfx_gpio_handler+0x38>
}
    3934:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3936:	4e0b      	ldr	r6, [pc, #44]	; (3964 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    3938:	6932      	ldr	r2, [r6, #16]
    393a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    393c:	2900      	cmp	r1, #0
    393e:	d0f9      	beq.n	3934 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    3940:	f003 031f 	and.w	r3, r3, #31
    3944:	2501      	movs	r5, #1
    3946:	680c      	ldr	r4, [r1, #0]
    3948:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    394a:	688a      	ldr	r2, [r1, #8]
    394c:	402a      	ands	r2, r5
    394e:	d002      	beq.n	3956 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3950:	684b      	ldr	r3, [r1, #4]
    3952:	4630      	mov	r0, r6
    3954:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3956:	2c00      	cmp	r4, #0
    3958:	d0ec      	beq.n	3934 <nrfx_gpio_handler+0xc>
    395a:	4621      	mov	r1, r4
    395c:	6824      	ldr	r4, [r4, #0]
    395e:	e7f4      	b.n	394a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3960:	4e01      	ldr	r6, [pc, #4]	; (3968 <nrfx_gpio_handler+0x40>)
    3962:	e7e9      	b.n	3938 <nrfx_gpio_handler+0x10>
    3964:	00009d9c 	.word	0x00009d9c
    3968:	00009db4 	.word	0x00009db4

0000396c <gpio_nrfx_pin_configure>:
{
    396c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    3970:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3972:	7b3b      	ldrb	r3, [r7, #12]
    3974:	f001 051f 	and.w	r5, r1, #31
{
    3978:	b085      	sub	sp, #20
    397a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    397c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3980:	4614      	mov	r4, r2
    3982:	b9ca      	cbnz	r2, 39b8 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3984:	a902      	add	r1, sp, #8
    3986:	4628      	mov	r0, r5
    3988:	f001 f9fe 	bl	4d88 <nrfx_gpiote_channel_get>
    398c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    398e:	4628      	mov	r0, r5
    3990:	f001 fabe 	bl	4f10 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3994:	4b48      	ldr	r3, [pc, #288]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3996:	4298      	cmp	r0, r3
    3998:	d004      	beq.n	39a4 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    399a:	f06f 0004 	mvn.w	r0, #4
}
    399e:	b005      	add	sp, #20
    39a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    39a4:	4284      	cmp	r4, r0
    39a6:	d105      	bne.n	39b4 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    39a8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    39ac:	f001 fa34 	bl	4e18 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    39b0:	42a0      	cmp	r0, r4
    39b2:	d1f2      	bne.n	399a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    39b4:	2000      	movs	r0, #0
    39b6:	e7f2      	b.n	399e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    39b8:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    39bc:	f10d 0103 	add.w	r1, sp, #3
    39c0:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    39c2:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    39c6:	f001 f9df 	bl	4d88 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    39ca:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    39cc:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    39ce:	aa02      	add	r2, sp, #8
    39d0:	4649      	mov	r1, r9
    39d2:	4628      	mov	r0, r5
    39d4:	f001 f8b2 	bl	4b3c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    39d8:	4b37      	ldr	r3, [pc, #220]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    39da:	4298      	cmp	r0, r3
    39dc:	d002      	beq.n	39e4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    39de:	f06f 0015 	mvn.w	r0, #21
    39e2:	e7dc      	b.n	399e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    39e4:	4580      	cmp	r8, r0
    39e6:	d103      	bne.n	39f0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    39e8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    39ec:	f001 fa14 	bl	4e18 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    39f0:	05a3      	lsls	r3, r4, #22
    39f2:	d54e      	bpl.n	3a92 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    39f4:	4b31      	ldr	r3, [pc, #196]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    39f6:	4a32      	ldr	r2, [pc, #200]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    39f8:	4023      	ands	r3, r4
    39fa:	4293      	cmp	r3, r2
    39fc:	d03a      	beq.n	3a74 <gpio_nrfx_pin_configure+0x108>
    39fe:	d80c      	bhi.n	3a1a <gpio_nrfx_pin_configure+0xae>
    3a00:	2b06      	cmp	r3, #6
    3a02:	d014      	beq.n	3a2e <gpio_nrfx_pin_configure+0xc2>
    3a04:	d804      	bhi.n	3a10 <gpio_nrfx_pin_configure+0xa4>
    3a06:	b193      	cbz	r3, 3a2e <gpio_nrfx_pin_configure+0xc2>
    3a08:	2b02      	cmp	r3, #2
    3a0a:	d1e8      	bne.n	39de <gpio_nrfx_pin_configure+0x72>
    3a0c:	2304      	movs	r3, #4
    3a0e:	e00e      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
    3a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3a14:	d1e3      	bne.n	39de <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3a16:	2301      	movs	r3, #1
    3a18:	e009      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3a1a:	4a2a      	ldr	r2, [pc, #168]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a1c:	4293      	cmp	r3, r2
    3a1e:	d02b      	beq.n	3a78 <gpio_nrfx_pin_configure+0x10c>
    3a20:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3a24:	d02a      	beq.n	3a7c <gpio_nrfx_pin_configure+0x110>
    3a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3a2a:	d1d8      	bne.n	39de <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3a2c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3a2e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3a32:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3a36:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3a3a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3a3c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3a40:	bf54      	ite	pl
    3a42:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3a46:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3a48:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    3a4a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3a4e:	d517      	bpl.n	3a80 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	2101      	movs	r1, #1
    3a54:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3a58:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3a5c:	2200      	movs	r2, #0
    3a5e:	a901      	add	r1, sp, #4
    3a60:	4628      	mov	r0, r5
    3a62:	f001 f919 	bl	4c98 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3a66:	4b14      	ldr	r3, [pc, #80]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a68:	4298      	cmp	r0, r3
    3a6a:	bf14      	ite	ne
    3a6c:	f06f 0015 	mvnne.w	r0, #21
    3a70:	2000      	moveq	r0, #0
    3a72:	e794      	b.n	399e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3a74:	2307      	movs	r3, #7
    3a76:	e7da      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3a78:	2305      	movs	r3, #5
    3a7a:	e7d8      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    3a7c:	2303      	movs	r3, #3
    3a7e:	e7d6      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3a80:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3a82:	bf41      	itttt	mi
    3a84:	687b      	ldrmi	r3, [r7, #4]
    3a86:	2101      	movmi	r1, #1
    3a88:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3a8c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3a90:	e7e4      	b.n	3a5c <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3a92:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3a94:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3a98:	bf54      	ite	pl
    3a9a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3a9e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3aa0:	461a      	mov	r2, r3
    3aa2:	a901      	add	r1, sp, #4
    3aa4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3aa6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3aaa:	f001 f847 	bl	4b3c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3aae:	4b02      	ldr	r3, [pc, #8]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3ab0:	4298      	cmp	r0, r3
    3ab2:	f43f af7f 	beq.w	39b4 <gpio_nrfx_pin_configure+0x48>
    3ab6:	e792      	b.n	39de <gpio_nrfx_pin_configure+0x72>
    3ab8:	0bad0000 	.word	0x0bad0000
    3abc:	00f00006 	.word	0x00f00006
    3ac0:	00100006 	.word	0x00100006
    3ac4:	00400002 	.word	0x00400002

00003ac8 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    3ac8:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
    3aca:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    3acc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    3ad0:	f003 f898 	bl	6c04 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twi_bus_recover(config->config.scl,
					      config->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    3ad4:	4b03      	ldr	r3, [pc, #12]	; (3ae4 <i2c_nrfx_twi_recover_bus+0x1c>)
    3ad6:	4298      	cmp	r0, r3
}
    3ad8:	bf14      	ite	ne
    3ada:	f06f 000f 	mvnne.w	r0, #15
    3ade:	2000      	moveq	r0, #0
    3ae0:	bd08      	pop	{r3, pc}
    3ae2:	bf00      	nop
    3ae4:	0bad0000 	.word	0x0bad0000

00003ae8 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    3ae8:	b510      	push	{r4, lr}
    3aea:	4604      	mov	r4, r0
    3aec:	2200      	movs	r2, #0
    3aee:	2101      	movs	r1, #1
    3af0:	2003      	movs	r0, #3
    3af2:	f7fe fc59 	bl	23a8 <z_arm_irq_priority_set>
	const struct i2c_nrfx_twi_config *config = dev->config;
    3af6:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    3af8:	6923      	ldr	r3, [r4, #16]
    3afa:	4a06      	ldr	r2, [pc, #24]	; (3b14 <twi_0_init+0x2c>)
    3afc:	f100 0108 	add.w	r1, r0, #8
    3b00:	f001 fc86 	bl	5410 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    3b04:	4b04      	ldr	r3, [pc, #16]	; (3b18 <twi_0_init+0x30>)
		return -EBUSY;
    3b06:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
    3b08:	bf14      	ite	ne
    3b0a:	f06f 000f 	mvnne.w	r0, #15
    3b0e:	2000      	moveq	r0, #0
    3b10:	bd10      	pop	{r4, pc}
    3b12:	bf00      	nop
    3b14:	00003b1d 	.word	0x00003b1d
    3b18:	0bad0000 	.word	0x0bad0000

00003b1c <event_handler>:
	switch (p_event->type) {
    3b1c:	7803      	ldrb	r3, [r0, #0]
    3b1e:	2b01      	cmp	r3, #1
    3b20:	d008      	beq.n	3b34 <event_handler+0x18>
    3b22:	2b02      	cmp	r3, #2
    3b24:	d008      	beq.n	3b38 <event_handler+0x1c>
    3b26:	b94b      	cbnz	r3, 3b3c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    3b28:	4b05      	ldr	r3, [pc, #20]	; (3b40 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    3b2a:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    3b2c:	f101 0010 	add.w	r0, r1, #16
    3b30:	f003 bbea 	b.w	7308 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3b34:	4b03      	ldr	r3, [pc, #12]	; (3b44 <event_handler+0x28>)
    3b36:	e7f8      	b.n	3b2a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3b38:	4b03      	ldr	r3, [pc, #12]	; (3b48 <event_handler+0x2c>)
    3b3a:	e7f6      	b.n	3b2a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    3b3c:	4b03      	ldr	r3, [pc, #12]	; (3b4c <event_handler+0x30>)
    3b3e:	e7f4      	b.n	3b2a <event_handler+0xe>
    3b40:	0bad0000 	.word	0x0bad0000
    3b44:	0bae0001 	.word	0x0bae0001
    3b48:	0bae0002 	.word	0x0bae0002
    3b4c:	0bad0001 	.word	0x0bad0001

00003b50 <i2c_nrfx_twi_transfer>:
{
    3b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b54:	460c      	mov	r4, r1
    3b56:	b089      	sub	sp, #36	; 0x24
    3b58:	4617      	mov	r7, r2
    3b5a:	4699      	mov	r9, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
    3b5c:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    3b5e:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    3b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b68:	4630      	mov	r0, r6
    3b6a:	f003 fbed 	bl	7348 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    3b6e:	f106 0a10 	add.w	sl, r6, #16
    3b72:	2200      	movs	r2, #0
    3b74:	2300      	movs	r3, #0
    3b76:	4650      	mov	r0, sl
    3b78:	f003 fbe6 	bl	7348 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    3b7c:	4628      	mov	r0, r5
    3b7e:	f001 fca5 	bl	54cc <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    3b82:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 3c40 <i2c_nrfx_twi_transfer+0xf0>
	for (size_t i = 0; i < num_msgs; i++) {
    3b86:	f04f 0800 	mov.w	r8, #0
    3b8a:	45b8      	cmp	r8, r7
    3b8c:	d301      	bcc.n	3b92 <i2c_nrfx_twi_transfer+0x42>
    3b8e:	2400      	movs	r4, #0
    3b90:	e02b      	b.n	3bea <i2c_nrfx_twi_transfer+0x9a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    3b92:	7a23      	ldrb	r3, [r4, #8]
    3b94:	9301      	str	r3, [sp, #4]
    3b96:	f013 0108 	ands.w	r1, r3, #8
    3b9a:	d14b      	bne.n	3c34 <i2c_nrfx_twi_transfer+0xe4>
		nrfx_twi_xfer_desc_t cur_xfer = {
    3b9c:	2214      	movs	r2, #20
    3b9e:	a803      	add	r0, sp, #12
    3ba0:	9100      	str	r1, [sp, #0]
    3ba2:	f004 ffd6 	bl	8b52 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    3ba6:	9b01      	ldr	r3, [sp, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    3ba8:	6860      	ldr	r0, [r4, #4]
    3baa:	9004      	str	r0, [sp, #16]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    3bac:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    3bb0:	6820      	ldr	r0, [r4, #0]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    3bb2:	9900      	ldr	r1, [sp, #0]
		nrfx_twi_xfer_desc_t cur_xfer = {
    3bb4:	f88d 200c 	strb.w	r2, [sp, #12]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    3bb8:	f013 0f02 	tst.w	r3, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    3bbc:	f88d 900d 	strb.w	r9, [sp, #13]
    3bc0:	9006      	str	r0, [sp, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    3bc2:	d11c      	bne.n	3bfe <i2c_nrfx_twi_transfer+0xae>
			if ((i < (num_msgs - 1)) &&
    3bc4:	1e7b      	subs	r3, r7, #1
    3bc6:	4543      	cmp	r3, r8
    3bc8:	d902      	bls.n	3bd0 <i2c_nrfx_twi_transfer+0x80>
    3bca:	7d23      	ldrb	r3, [r4, #20]
    3bcc:	075b      	lsls	r3, r3, #29
    3bce:	d518      	bpl.n	3c02 <i2c_nrfx_twi_transfer+0xb2>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    3bd0:	bb82      	cbnz	r2, 3c34 <i2c_nrfx_twi_transfer+0xe4>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    3bd2:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    3bd4:	a903      	add	r1, sp, #12
    3bd6:	4628      	mov	r0, r5
    3bd8:	f001 fca6 	bl	5528 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    3bdc:	4558      	cmp	r0, fp
    3bde:	d012      	beq.n	3c06 <i2c_nrfx_twi_transfer+0xb6>
			if (res == NRFX_ERROR_BUSY) {
    3be0:	4b18      	ldr	r3, [pc, #96]	; (3c44 <i2c_nrfx_twi_transfer+0xf4>)
    3be2:	4298      	cmp	r0, r3
    3be4:	d029      	beq.n	3c3a <i2c_nrfx_twi_transfer+0xea>
			ret = -EIO;
    3be6:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    3bea:	4628      	mov	r0, r5
    3bec:	f001 fc7e 	bl	54ec <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    3bf0:	4630      	mov	r0, r6
    3bf2:	f003 fb89 	bl	7308 <z_impl_k_sem_give>
}
    3bf6:	4620      	mov	r0, r4
    3bf8:	b009      	add	sp, #36	; 0x24
    3bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    3bfe:	460a      	mov	r2, r1
    3c00:	e7e8      	b.n	3bd4 <i2c_nrfx_twi_transfer+0x84>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    3c02:	2240      	movs	r2, #64	; 0x40
    3c04:	e7e6      	b.n	3bd4 <i2c_nrfx_twi_transfer+0x84>
	return z_impl_k_sem_take(sem, timeout);
    3c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3c0a:	2300      	movs	r3, #0
    3c0c:	4650      	mov	r0, sl
    3c0e:	f003 fb9b 	bl	7348 <z_impl_k_sem_take>
		if (ret != 0) {
    3c12:	b138      	cbz	r0, 3c24 <i2c_nrfx_twi_transfer+0xd4>
			nrfx_twi_disable(&config->twi);
    3c14:	4628      	mov	r0, r5
    3c16:	f001 fc69 	bl	54ec <nrfx_twi_disable>
    3c1a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    3c1e:	f002 fff1 	bl	6c04 <nrfx_twi_twim_bus_recover>
    3c22:	e7e0      	b.n	3be6 <i2c_nrfx_twi_transfer+0x96>
		res = data->res;
    3c24:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    3c26:	455b      	cmp	r3, fp
    3c28:	f104 040c 	add.w	r4, r4, #12
    3c2c:	d1db      	bne.n	3be6 <i2c_nrfx_twi_transfer+0x96>
	for (size_t i = 0; i < num_msgs; i++) {
    3c2e:	f108 0801 	add.w	r8, r8, #1
    3c32:	e7aa      	b.n	3b8a <i2c_nrfx_twi_transfer+0x3a>
			ret = -ENOTSUP;
    3c34:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3c38:	e7d7      	b.n	3bea <i2c_nrfx_twi_transfer+0x9a>
				ret = -EBUSY;
    3c3a:	f06f 040f 	mvn.w	r4, #15
    3c3e:	e7d4      	b.n	3bea <i2c_nrfx_twi_transfer+0x9a>
    3c40:	0bad0000 	.word	0x0bad0000
    3c44:	0bad000b 	.word	0x0bad000b

00003c48 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    3c48:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    3c4a:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    3c4c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
    3c50:	f002 ffd8 	bl	6c04 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    3c54:	4b03      	ldr	r3, [pc, #12]	; (3c64 <i2c_nrfx_twim_recover_bus+0x1c>)
    3c56:	4298      	cmp	r0, r3
}
    3c58:	bf14      	ite	ne
    3c5a:	f06f 000f 	mvnne.w	r0, #15
    3c5e:	2000      	moveq	r0, #0
    3c60:	bd08      	pop	{r3, pc}
    3c62:	bf00      	nop
    3c64:	0bad0000 	.word	0x0bad0000

00003c68 <init_twim>:
{
    3c68:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    3c6a:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
    3c6c:	4a08      	ldr	r2, [pc, #32]	; (3c90 <init_twim+0x28>)
    3c6e:	6840      	ldr	r0, [r0, #4]
    3c70:	4623      	mov	r3, r4
    3c72:	f104 0120 	add.w	r1, r4, #32
    3c76:	f001 fd23 	bl	56c0 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    3c7a:	4b06      	ldr	r3, [pc, #24]	; (3c94 <init_twim+0x2c>)
    3c7c:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
    3c7e:	bf03      	ittte	eq
    3c80:	2301      	moveq	r3, #1
    3c82:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
	return 0;
    3c86:	2000      	moveq	r0, #0
		return -EIO;
    3c88:	f06f 0004 	mvnne.w	r0, #4
}
    3c8c:	bd10      	pop	{r4, pc}
    3c8e:	bf00      	nop
    3c90:	00003c99 	.word	0x00003c99
    3c94:	0bad0000 	.word	0x0bad0000

00003c98 <event_handler>:
	switch (p_event->type) {
    3c98:	7803      	ldrb	r3, [r0, #0]
    3c9a:	2b01      	cmp	r3, #1
    3c9c:	d008      	beq.n	3cb0 <event_handler+0x18>
    3c9e:	2b02      	cmp	r3, #2
    3ca0:	d008      	beq.n	3cb4 <event_handler+0x1c>
    3ca2:	b94b      	cbnz	r3, 3cb8 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    3ca4:	4b05      	ldr	r3, [pc, #20]	; (3cbc <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    3ca6:	634b      	str	r3, [r1, #52]	; 0x34
	z_impl_k_sem_give(sem);
    3ca8:	f101 0010 	add.w	r0, r1, #16
    3cac:	f003 bb2c 	b.w	7308 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3cb0:	4b03      	ldr	r3, [pc, #12]	; (3cc0 <event_handler+0x28>)
    3cb2:	e7f8      	b.n	3ca6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3cb4:	4b03      	ldr	r3, [pc, #12]	; (3cc4 <event_handler+0x2c>)
    3cb6:	e7f6      	b.n	3ca6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    3cb8:	4b03      	ldr	r3, [pc, #12]	; (3cc8 <event_handler+0x30>)
    3cba:	e7f4      	b.n	3ca6 <event_handler+0xe>
    3cbc:	0bad0000 	.word	0x0bad0000
    3cc0:	0bae0001 	.word	0x0bae0001
    3cc4:	0bae0002 	.word	0x0bae0002
    3cc8:	0bad0001 	.word	0x0bad0001

00003ccc <i2c_nrfx_twim_transfer>:
{
    3ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    3cd0:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    3cd2:	6906      	ldr	r6, [r0, #16]
{
    3cd4:	b089      	sub	sp, #36	; 0x24
    3cd6:	4698      	mov	r8, r3
    3cd8:	4605      	mov	r5, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    3cda:	893b      	ldrh	r3, [r7, #8]
    3cdc:	9300      	str	r3, [sp, #0]
{
    3cde:	460c      	mov	r4, r1
    3ce0:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    3ce2:	2100      	movs	r1, #0
    3ce4:	2214      	movs	r2, #20
    3ce6:	a803      	add	r0, sp, #12
	uint8_t *msg_buf = dev_data->msg_buf;
    3ce8:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
    3cec:	f004 ff31 	bl	8b52 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    3cf0:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
	nrfx_twim_xfer_desc_t cur_xfer = {
    3cf4:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    3cf8:	b1bb      	cbz	r3, 3d2a <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
    3cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d02:	4630      	mov	r0, r6
    3d04:	f003 fb20 	bl	7348 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    3d08:	f106 0a10 	add.w	sl, r6, #16
    3d0c:	2200      	movs	r2, #0
    3d0e:	2300      	movs	r3, #0
    3d10:	4650      	mov	r0, sl
    3d12:	f003 fb19 	bl	7348 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    3d16:	4638      	mov	r0, r7
    3d18:	f001 fd34 	bl	5784 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    3d1c:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
    3d20:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    3d22:	45d8      	cmp	r8, fp
    3d24:	d309      	bcc.n	3d3a <i2c_nrfx_twim_transfer+0x6e>
    3d26:	2400      	movs	r4, #0
    3d28:	e051      	b.n	3dce <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    3d2a:	4628      	mov	r0, r5
    3d2c:	f7ff ff9c 	bl	3c68 <init_twim>
    3d30:	2800      	cmp	r0, #0
    3d32:	dae2      	bge.n	3cfa <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
    3d34:	f06f 0404 	mvn.w	r4, #4
    3d38:	e04f      	b.n	3dda <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    3d3a:	7a21      	ldrb	r1, [r4, #8]
    3d3c:	070a      	lsls	r2, r1, #28
    3d3e:	f100 808f 	bmi.w	3e60 <i2c_nrfx_twim_transfer+0x194>
		bool concat_next = ((i + 1) < num_msgs)
    3d42:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    3d46:	45d8      	cmp	r8, fp
    3d48:	6862      	ldr	r2, [r4, #4]
    3d4a:	d20a      	bcs.n	3d62 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    3d4c:	078b      	lsls	r3, r1, #30
    3d4e:	d408      	bmi.n	3d62 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    3d50:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    3d52:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    3d56:	f000 0001 	and.w	r0, r0, #1
    3d5a:	f003 0304 	and.w	r3, r3, #4
    3d5e:	4303      	orrs	r3, r0
    3d60:	d016      	beq.n	3d90 <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
    3d62:	b1bd      	cbz	r5, 3d94 <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
    3d64:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    3d66:	f8dd c000 	ldr.w	ip, [sp]
    3d6a:	18a8      	adds	r0, r5, r2
    3d6c:	4560      	cmp	r0, ip
    3d6e:	d87a      	bhi.n	3e66 <i2c_nrfx_twim_transfer+0x19a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    3d70:	07c8      	lsls	r0, r1, #31
    3d72:	d406      	bmi.n	3d82 <i2c_nrfx_twim_transfer+0xb6>
				memcpy(msg_buf + msg_buf_used,
    3d74:	6821      	ldr	r1, [r4, #0]
    3d76:	9301      	str	r3, [sp, #4]
    3d78:	eb09 0005 	add.w	r0, r9, r5
    3d7c:	f004 fede 	bl	8b3c <memcpy>
    3d80:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
    3d82:	6862      	ldr	r2, [r4, #4]
    3d84:	4415      	add	r5, r2
    3d86:	b2ad      	uxth	r5, r5
		if (concat_next) {
    3d88:	2b00      	cmp	r3, #0
    3d8a:	d037      	beq.n	3dfc <i2c_nrfx_twim_transfer+0x130>
    3d8c:	340c      	adds	r4, #12
    3d8e:	e7c8      	b.n	3d22 <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
    3d90:	2301      	movs	r3, #1
    3d92:	e7e8      	b.n	3d66 <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    3d94:	07c9      	lsls	r1, r1, #31
    3d96:	d524      	bpl.n	3de2 <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
    3d98:	6823      	ldr	r3, [r4, #0]
    3d9a:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
    3d9c:	6863      	ldr	r3, [r4, #4]
    3d9e:	9304      	str	r3, [sp, #16]
    3da0:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    3da2:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    3da4:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    3da8:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    3dac:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    3db0:	a903      	add	r1, sp, #12
    3db2:	bf0c      	ite	eq
    3db4:	2220      	moveq	r2, #32
    3db6:	2200      	movne	r2, #0
    3db8:	4638      	mov	r0, r7
    3dba:	f001 fd55 	bl	5868 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    3dbe:	4b2e      	ldr	r3, [pc, #184]	; (3e78 <i2c_nrfx_twim_transfer+0x1ac>)
    3dc0:	4298      	cmp	r0, r3
    3dc2:	d021      	beq.n	3e08 <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
    3dc4:	330b      	adds	r3, #11
    3dc6:	4298      	cmp	r0, r3
    3dc8:	d053      	beq.n	3e72 <i2c_nrfx_twim_transfer+0x1a6>
			ret = -EIO;
    3dca:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
    3dce:	4638      	mov	r0, r7
    3dd0:	f001 fce8 	bl	57a4 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    3dd4:	4630      	mov	r0, r6
    3dd6:	f003 fa97 	bl	7308 <z_impl_k_sem_give>
}
    3dda:	4620      	mov	r0, r4
    3ddc:	b009      	add	sp, #36	; 0x24
    3dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
    3de2:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3de4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    3de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3dec:	d0d4      	beq.n	3d98 <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    3dee:	897b      	ldrh	r3, [r7, #10]
    3df0:	4293      	cmp	r3, r2
    3df2:	d33b      	bcc.n	3e6c <i2c_nrfx_twim_transfer+0x1a0>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    3df4:	4648      	mov	r0, r9
    3df6:	f004 fea1 	bl	8b3c <memcpy>
			msg_buf_used = msgs[i].len;
    3dfa:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    3dfc:	2d00      	cmp	r5, #0
    3dfe:	d0cb      	beq.n	3d98 <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
    3e00:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
    3e04:	9504      	str	r5, [sp, #16]
    3e06:	e7cc      	b.n	3da2 <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
    3e08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3e0c:	2300      	movs	r3, #0
    3e0e:	4650      	mov	r0, sl
    3e10:	f003 fa9a 	bl	7348 <z_impl_k_sem_take>
		if (ret != 0) {
    3e14:	b138      	cbz	r0, 3e26 <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
    3e16:	4638      	mov	r0, r7
    3e18:	f001 fcc4 	bl	57a4 <nrfx_twim_disable>
    3e1c:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
    3e20:	f002 fef0 	bl	6c04 <nrfx_twi_twim_bus_recover>
    3e24:	e7d1      	b.n	3dca <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
    3e26:	6b73      	ldr	r3, [r6, #52]	; 0x34
		if (res != NRFX_SUCCESS) {
    3e28:	4a13      	ldr	r2, [pc, #76]	; (3e78 <i2c_nrfx_twim_transfer+0x1ac>)
    3e2a:	4293      	cmp	r3, r2
    3e2c:	d1cd      	bne.n	3dca <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
    3e2e:	7a23      	ldrb	r3, [r4, #8]
    3e30:	07db      	lsls	r3, r3, #31
    3e32:	d401      	bmi.n	3e38 <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
    3e34:	2500      	movs	r5, #0
    3e36:	e7a9      	b.n	3d8c <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
    3e38:	9b06      	ldr	r3, [sp, #24]
    3e3a:	4599      	cmp	r9, r3
    3e3c:	d1fa      	bne.n	3e34 <i2c_nrfx_twim_transfer+0x168>
    3e3e:	4623      	mov	r3, r4
    3e40:	e008      	b.n	3e54 <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
    3e42:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    3e44:	68d8      	ldr	r0, [r3, #12]
    3e46:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
    3e48:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    3e4a:	fa19 f181 	uxtah	r1, r9, r1
    3e4e:	f004 fe75 	bl	8b3c <memcpy>
				j--;
    3e52:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
    3e54:	685a      	ldr	r2, [r3, #4]
    3e56:	4295      	cmp	r5, r2
    3e58:	f1a3 030c 	sub.w	r3, r3, #12
    3e5c:	d2f1      	bcs.n	3e42 <i2c_nrfx_twim_transfer+0x176>
    3e5e:	e7e9      	b.n	3e34 <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
    3e60:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3e64:	e7b3      	b.n	3dce <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
    3e66:	f06f 041b 	mvn.w	r4, #27
    3e6a:	e7b0      	b.n	3dce <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
    3e6c:	f06f 0415 	mvn.w	r4, #21
    3e70:	e7ad      	b.n	3dce <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
    3e72:	f06f 040f 	mvn.w	r4, #15
    3e76:	e7aa      	b.n	3dce <i2c_nrfx_twim_transfer+0x102>
    3e78:	0bad0000 	.word	0x0bad0000

00003e7c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3e7c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    3e7e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3e82:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    3e84:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3e86:	6002      	str	r2, [r0, #0]
}
    3e88:	4802      	ldr	r0, [pc, #8]	; (3e94 <nrf_gpio_pin_port_decode+0x18>)
    3e8a:	bf18      	it	ne
    3e8c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3e90:	4770      	bx	lr
    3e92:	bf00      	nop
    3e94:	50000300 	.word	0x50000300

00003e98 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3e98:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3e9a:	794b      	ldrb	r3, [r1, #5]
    3e9c:	2b01      	cmp	r3, #1
    3e9e:	d026      	beq.n	3eee <uarte_nrfx_configure+0x56>
    3ea0:	2b03      	cmp	r3, #3
    3ea2:	d121      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3ea4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3ea6:	798b      	ldrb	r3, [r1, #6]
    3ea8:	2b03      	cmp	r3, #3
    3eaa:	d11d      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3eac:	79cc      	ldrb	r4, [r1, #7]
    3eae:	b10c      	cbz	r4, 3eb4 <uarte_nrfx_configure+0x1c>
    3eb0:	2c01      	cmp	r4, #1
    3eb2:	d119      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3eb4:	790a      	ldrb	r2, [r1, #4]
    3eb6:	b112      	cbz	r2, 3ebe <uarte_nrfx_configure+0x26>
    3eb8:	2a02      	cmp	r2, #2
    3eba:	d115      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3ebc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3ebe:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3ec0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3ec2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3ec6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3ec8:	d065      	beq.n	3f96 <uarte_nrfx_configure+0xfe>
    3eca:	d82d      	bhi.n	3f28 <uarte_nrfx_configure+0x90>
    3ecc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3ed0:	d064      	beq.n	3f9c <uarte_nrfx_configure+0x104>
    3ed2:	d816      	bhi.n	3f02 <uarte_nrfx_configure+0x6a>
    3ed4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3ed8:	d062      	beq.n	3fa0 <uarte_nrfx_configure+0x108>
    3eda:	d80a      	bhi.n	3ef2 <uarte_nrfx_configure+0x5a>
    3edc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3ee0:	d061      	beq.n	3fa6 <uarte_nrfx_configure+0x10e>
    3ee2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3ee6:	d061      	beq.n	3fac <uarte_nrfx_configure+0x114>
    3ee8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3eec:	e052      	b.n	3f94 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3eee:	2600      	movs	r6, #0
    3ef0:	e7d9      	b.n	3ea6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3ef2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3ef6:	d05c      	beq.n	3fb2 <uarte_nrfx_configure+0x11a>
    3ef8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3efc:	d1f4      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3efe:	4b37      	ldr	r3, [pc, #220]	; (3fdc <uarte_nrfx_configure+0x144>)
    3f00:	e03c      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f02:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3f06:	d057      	beq.n	3fb8 <uarte_nrfx_configure+0x120>
    3f08:	d807      	bhi.n	3f1a <uarte_nrfx_configure+0x82>
    3f0a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3f0e:	d055      	beq.n	3fbc <uarte_nrfx_configure+0x124>
    3f10:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3f14:	d1e8      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3f16:	4b32      	ldr	r3, [pc, #200]	; (3fe0 <uarte_nrfx_configure+0x148>)
    3f18:	e030      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f1a:	f647 2712 	movw	r7, #31250	; 0x7a12
    3f1e:	42bb      	cmp	r3, r7
    3f20:	d1e2      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3f22:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3f26:	e029      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f28:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3f2c:	d048      	beq.n	3fc0 <uarte_nrfx_configure+0x128>
    3f2e:	d813      	bhi.n	3f58 <uarte_nrfx_configure+0xc0>
    3f30:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3f34:	d047      	beq.n	3fc6 <uarte_nrfx_configure+0x12e>
    3f36:	d809      	bhi.n	3f4c <uarte_nrfx_configure+0xb4>
    3f38:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3f3c:	42bb      	cmp	r3, r7
    3f3e:	d044      	beq.n	3fca <uarte_nrfx_configure+0x132>
    3f40:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3f44:	d1d0      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3f46:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3f4a:	e017      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f4c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3f50:	d1ca      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3f52:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3f56:	e011      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f58:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3f5c:	d038      	beq.n	3fd0 <uarte_nrfx_configure+0x138>
    3f5e:	d808      	bhi.n	3f72 <uarte_nrfx_configure+0xda>
    3f60:	4f20      	ldr	r7, [pc, #128]	; (3fe4 <uarte_nrfx_configure+0x14c>)
    3f62:	42bb      	cmp	r3, r7
    3f64:	d037      	beq.n	3fd6 <uarte_nrfx_configure+0x13e>
    3f66:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3f6a:	d1bd      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3f6c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3f70:	e004      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f72:	4f1d      	ldr	r7, [pc, #116]	; (3fe8 <uarte_nrfx_configure+0x150>)
    3f74:	42bb      	cmp	r3, r7
    3f76:	d1b7      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3f7c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3f7e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3f82:	1d03      	adds	r3, r0, #4
    3f84:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3f86:	4334      	orrs	r4, r6
    3f88:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3f8a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3f8e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3f92:	2000      	movs	r0, #0
}
    3f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3f96:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3f9a:	e7ef      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3f9c:	4b13      	ldr	r3, [pc, #76]	; (3fec <uarte_nrfx_configure+0x154>)
    3f9e:	e7ed      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3fa0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3fa4:	e7ea      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3fa6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3faa:	e7e7      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3fac:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3fb0:	e7e4      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3fb2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3fb6:	e7e1      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3fb8:	4b0d      	ldr	r3, [pc, #52]	; (3ff0 <uarte_nrfx_configure+0x158>)
    3fba:	e7df      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3fbc:	4b0d      	ldr	r3, [pc, #52]	; (3ff4 <uarte_nrfx_configure+0x15c>)
    3fbe:	e7dd      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3fc0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3fc4:	e7da      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3fc6:	4b0c      	ldr	r3, [pc, #48]	; (3ff8 <uarte_nrfx_configure+0x160>)
    3fc8:	e7d8      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3fca:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3fce:	e7d5      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3fd0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3fd4:	e7d2      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3fd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3fda:	e7cf      	b.n	3f7c <uarte_nrfx_configure+0xe4>
    3fdc:	0013b000 	.word	0x0013b000
    3fe0:	004ea000 	.word	0x004ea000
    3fe4:	0003d090 	.word	0x0003d090
    3fe8:	000f4240 	.word	0x000f4240
    3fec:	00275000 	.word	0x00275000
    3ff0:	0075c000 	.word	0x0075c000
    3ff4:	003af000 	.word	0x003af000
    3ff8:	013a9000 	.word	0x013a9000

00003ffc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    3ffe:	6906      	ldr	r6, [r0, #16]
{
    4000:	4605      	mov	r5, r0
    4002:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4004:	f005 fbd1 	bl	97aa <k_is_in_isr>
    4008:	b910      	cbnz	r0, 4010 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    400a:	4b20      	ldr	r3, [pc, #128]	; (408c <CONFIG_USB_DEVICE_PID+0x7b>)
	int key;

	if (isr_mode) {
    400c:	781b      	ldrb	r3, [r3, #0]
    400e:	b983      	cbnz	r3, 4032 <CONFIG_USB_DEVICE_PID+0x21>
	__asm__ volatile(
    4010:	f04f 0320 	mov.w	r3, #32
    4014:	f3ef 8411 	mrs	r4, BASEPRI
    4018:	f383 8812 	msr	BASEPRI_MAX, r3
    401c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    4020:	6868      	ldr	r0, [r5, #4]
    4022:	f005 f84f 	bl	90c4 <is_tx_ready.isra.0>
    4026:	bb28      	cbnz	r0, 4074 <CONFIG_USB_DEVICE_PID+0x63>
	__asm__ volatile(
    4028:	f384 8811 	msr	BASEPRI, r4
    402c:	f3bf 8f6f 	isb	sy
}
    4030:	e7ee      	b.n	4010 <uarte_nrfx_poll_out+0x14>
{
    4032:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    4034:	6868      	ldr	r0, [r5, #4]
    4036:	f005 f845 	bl	90c4 <is_tx_ready.isra.0>
    403a:	b970      	cbnz	r0, 405a <CONFIG_USB_DEVICE_PID+0x49>
    403c:	2001      	movs	r0, #1
    403e:	f005 f91b 	bl	9278 <nrfx_busy_wait>
    4042:	3c01      	subs	r4, #1
    4044:	d1f6      	bne.n	4034 <CONFIG_USB_DEVICE_PID+0x23>
	return z_impl_k_sleep(timeout);
    4046:	2100      	movs	r1, #0
    4048:	2021      	movs	r0, #33	; 0x21
    404a:	f003 fd99 	bl	7b80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    404e:	e7f0      	b.n	4032 <CONFIG_USB_DEVICE_PID+0x21>
	__asm__ volatile(
    4050:	f384 8811 	msr	BASEPRI, r4
    4054:	f3bf 8f6f 	isb	sy
}
    4058:	e7f5      	b.n	4046 <CONFIG_USB_DEVICE_PID+0x35>
	__asm__ volatile(
    405a:	f04f 0320 	mov.w	r3, #32
    405e:	f3ef 8411 	mrs	r4, BASEPRI
    4062:	f383 8812 	msr	BASEPRI_MAX, r3
    4066:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    406a:	6868      	ldr	r0, [r5, #4]
    406c:	f005 f82a 	bl	90c4 <is_tx_ready.isra.0>
    4070:	2800      	cmp	r0, #0
    4072:	d0ed      	beq.n	4050 <CONFIG_USB_DEVICE_PID+0x3f>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    4074:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    4076:	2201      	movs	r2, #1
	data->char_out = c;
    4078:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    407c:	6868      	ldr	r0, [r5, #4]
    407e:	f005 f806 	bl	908e <tx_start.isra.0>
	__asm__ volatile(
    4082:	f384 8811 	msr	BASEPRI, r4
    4086:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    408a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    408c:	20001531 	.word	0x20001531

00004090 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    4090:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
    4094:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    4098:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    409a:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    409e:	2300      	movs	r3, #0
    40a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    40a4:	6030      	str	r0, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    40a6:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    40a8:	68eb      	ldr	r3, [r5, #12]
    40aa:	1c5a      	adds	r2, r3, #1
static int uarte_instance_init(const struct device *dev,
    40ac:	4607      	mov	r7, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    40ae:	d013      	beq.n	40d8 <uarte_instance_init.constprop.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40b0:	a801      	add	r0, sp, #4
    40b2:	9301      	str	r3, [sp, #4]
    40b4:	f7ff fee2 	bl	3e7c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    40b8:	9a01      	ldr	r2, [sp, #4]
    40ba:	2301      	movs	r3, #1
    40bc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    40be:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    40c2:	68eb      	ldr	r3, [r5, #12]
    40c4:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40c6:	a801      	add	r0, sp, #4
    40c8:	f7ff fed8 	bl	3e7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    40cc:	9b01      	ldr	r3, [sp, #4]
    40ce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    40d2:	2203      	movs	r2, #3
    40d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    40d8:	6928      	ldr	r0, [r5, #16]
    40da:	1c43      	adds	r3, r0, #1
    40dc:	d006      	beq.n	40ec <uarte_instance_init.constprop.0+0x5c>
			nrf_gpio_cfg_input(cfg->rx_pin,
    40de:	7f2b      	ldrb	r3, [r5, #28]
    40e0:	2b00      	cmp	r3, #0
    40e2:	bf14      	ite	ne
    40e4:	2103      	movne	r1, #3
    40e6:	2100      	moveq	r1, #0
    40e8:	f004 ffc3 	bl	9072 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    40ec:	696b      	ldr	r3, [r5, #20]
    40ee:	1c5a      	adds	r2, r3, #1
    40f0:	d013      	beq.n	411a <uarte_instance_init.constprop.0+0x8a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40f2:	a801      	add	r0, sp, #4
    40f4:	9301      	str	r3, [sp, #4]
    40f6:	f7ff fec1 	bl	3e7c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    40fa:	9a01      	ldr	r2, [sp, #4]
    40fc:	2301      	movs	r3, #1
    40fe:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    4100:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    4104:	696b      	ldr	r3, [r5, #20]
    4106:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4108:	a801      	add	r0, sp, #4
    410a:	f7ff feb7 	bl	3e7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    410e:	9b01      	ldr	r3, [sp, #4]
    4110:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4114:	2203      	movs	r2, #3
    4116:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    411a:	69a8      	ldr	r0, [r5, #24]
    411c:	1c43      	adds	r3, r0, #1
    411e:	d006      	beq.n	412e <uarte_instance_init.constprop.0+0x9e>
			nrf_gpio_cfg_input(cfg->cts_pin,
    4120:	7f6b      	ldrb	r3, [r5, #29]
    4122:	2b00      	cmp	r3, #0
    4124:	bf14      	ite	ne
    4126:	2103      	movne	r1, #3
    4128:	2100      	moveq	r1, #0
    412a:	f004 ffa2 	bl	9072 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    412e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    4132:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    4134:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    4138:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    413c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    4140:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
    4142:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    4146:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    414a:	1d31      	adds	r1, r6, #4
    414c:	f7ff fea4 	bl	3e98 <uarte_nrfx_configure>
	if (err) {
    4150:	4605      	mov	r5, r0
    4152:	2800      	cmp	r0, #0
    4154:	d146      	bne.n	41e4 <uarte_instance_init.constprop.0+0x154>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4156:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    415a:	0799      	lsls	r1, r3, #30
    415c:	d519      	bpl.n	4192 <uarte_instance_init.constprop.0+0x102>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    415e:	f106 0016 	add.w	r0, r6, #22
    4162:	f001 f86f 	bl	5244 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4166:	4b23      	ldr	r3, [pc, #140]	; (41f4 <uarte_instance_init.constprop.0+0x164>)
    4168:	4298      	cmp	r0, r3
    416a:	d13f      	bne.n	41ec <uarte_instance_init.constprop.0+0x15c>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    416c:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    416e:	00c3      	lsls	r3, r0, #3
    4170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4174:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    4178:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    417c:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4180:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4184:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    4188:	4a1b      	ldr	r2, [pc, #108]	; (41f8 <uarte_instance_init.constprop.0+0x168>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    418a:	2301      	movs	r3, #1
    418c:	4083      	lsls	r3, r0
    418e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4192:	2308      	movs	r3, #8
    4194:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    4198:	f898 3008 	ldrb.w	r3, [r8, #8]
    419c:	b95b      	cbnz	r3, 41b6 <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    419e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    41a2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    41a6:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    41aa:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    41ae:	2301      	movs	r3, #1
    41b0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41b4:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    41b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    41ba:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    41bc:	bf5c      	itt	pl
    41be:	f44f 7280 	movpl.w	r2, #256	; 0x100
    41c2:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    41c6:	06db      	lsls	r3, r3, #27
    41c8:	bf44      	itt	mi
    41ca:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    41ce:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    41d2:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    41d4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    41d6:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    41da:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41de:	2301      	movs	r3, #1
    41e0:	60a3      	str	r3, [r4, #8]
    41e2:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    41e4:	4628      	mov	r0, r5
    41e6:	b002      	add	sp, #8
    41e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    41ec:	f06f 0504 	mvn.w	r5, #4
    41f0:	e7f8      	b.n	41e4 <uarte_instance_init.constprop.0+0x154>
    41f2:	bf00      	nop
    41f4:	0bad0000 	.word	0x0bad0000
    41f8:	4001f000 	.word	0x4001f000

000041fc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    41fc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    41fe:	2301      	movs	r3, #1
    4200:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4202:	4a11      	ldr	r2, [pc, #68]	; (4248 <compare_int_lock+0x4c>)
    4204:	f3bf 8f5b 	dmb	ish
    4208:	43dc      	mvns	r4, r3
    420a:	e852 1f00 	ldrex	r1, [r2]
    420e:	ea01 0c04 	and.w	ip, r1, r4
    4212:	e842 ce00 	strex	lr, ip, [r2]
    4216:	f1be 0f00 	cmp.w	lr, #0
    421a:	d1f6      	bne.n	420a <compare_int_lock+0xe>
    421c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4220:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4224:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4228:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    422c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4230:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    4234:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4238:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    423c:	420b      	tst	r3, r1
}
    423e:	bf14      	ite	ne
    4240:	2001      	movne	r0, #1
    4242:	2000      	moveq	r0, #0
    4244:	bd10      	pop	{r4, pc}
    4246:	bf00      	nop
    4248:	200011b8 	.word	0x200011b8

0000424c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    424c:	4919      	ldr	r1, [pc, #100]	; (42b4 <sys_clock_timeout_handler+0x68>)
{
    424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4250:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4252:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4256:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4258:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    425c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4260:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4262:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4266:	d222      	bcs.n	42ae <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4268:	4b13      	ldr	r3, [pc, #76]	; (42b8 <sys_clock_timeout_handler+0x6c>)
    426a:	681b      	ldr	r3, [r3, #0]
    426c:	0a1a      	lsrs	r2, r3, #8
    426e:	061b      	lsls	r3, r3, #24
    4270:	195e      	adds	r6, r3, r5
    4272:	4b12      	ldr	r3, [pc, #72]	; (42bc <sys_clock_timeout_handler+0x70>)
    4274:	f142 0700 	adc.w	r7, r2, #0
    4278:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    427c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    427e:	f003 fdf1 	bl	7e64 <sys_clock_announce>
    return p_reg->CC[ch];
    4282:	00a3      	lsls	r3, r4, #2
    4284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4288:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    428c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    4290:	42aa      	cmp	r2, r5
    4292:	d10b      	bne.n	42ac <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    4294:	b91e      	cbnz	r6, 429e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    4296:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    429a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    429e:	4b08      	ldr	r3, [pc, #32]	; (42c0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    42a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    42a4:	fa00 f404 	lsl.w	r4, r0, r4
    42a8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    42ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    42ae:	2600      	movs	r6, #0
    42b0:	e7e5      	b.n	427e <sys_clock_timeout_handler+0x32>
    42b2:	bf00      	nop
    42b4:	200004d0 	.word	0x200004d0
    42b8:	200011bc 	.word	0x200011bc
    42bc:	200004b8 	.word	0x200004b8
    42c0:	40011000 	.word	0x40011000

000042c4 <compare_int_unlock>:
	if (key) {
    42c4:	b319      	cbz	r1, 430e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    42c6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    42ca:	2301      	movs	r3, #1
    42cc:	4a10      	ldr	r2, [pc, #64]	; (4310 <compare_int_unlock+0x4c>)
    42ce:	4083      	lsls	r3, r0
    42d0:	e852 1f00 	ldrex	r1, [r2]
    42d4:	4319      	orrs	r1, r3
    42d6:	e842 1c00 	strex	ip, r1, [r2]
    42da:	f1bc 0f00 	cmp.w	ip, #0
    42de:	d1f7      	bne.n	42d0 <compare_int_unlock+0xc>
    42e0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    42e4:	4a0b      	ldr	r2, [pc, #44]	; (4314 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    42e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    42ea:	4083      	lsls	r3, r0
    42ec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    42f0:	4b09      	ldr	r3, [pc, #36]	; (4318 <compare_int_unlock+0x54>)
    42f2:	f3bf 8f5b 	dmb	ish
    42f6:	681b      	ldr	r3, [r3, #0]
    42f8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    42fc:	fa23 f000 	lsr.w	r0, r3, r0
    4300:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4302:	bf42      	ittt	mi
    4304:	4b05      	ldrmi	r3, [pc, #20]	; (431c <compare_int_unlock+0x58>)
    4306:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    430a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    430e:	4770      	bx	lr
    4310:	200011b8 	.word	0x200011b8
    4314:	40011000 	.word	0x40011000
    4318:	200011b4 	.word	0x200011b4
    431c:	e000e100 	.word	0xe000e100

00004320 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4320:	4b0d      	ldr	r3, [pc, #52]	; (4358 <z_nrf_rtc_timer_read+0x38>)
    4322:	6818      	ldr	r0, [r3, #0]
    4324:	0a01      	lsrs	r1, r0, #8
    4326:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4328:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    432c:	4b0b      	ldr	r3, [pc, #44]	; (435c <z_nrf_rtc_timer_read+0x3c>)
    432e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4332:	1818      	adds	r0, r3, r0
    4334:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    433c:	d20a      	bcs.n	4354 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    433e:	4b08      	ldr	r3, [pc, #32]	; (4360 <z_nrf_rtc_timer_read+0x40>)
    4340:	e9d3 2300 	ldrd	r2, r3, [r3]
    4344:	4290      	cmp	r0, r2
    4346:	eb71 0303 	sbcs.w	r3, r1, r3
    434a:	d203      	bcs.n	4354 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    434c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4350:	f141 0100 	adc.w	r1, r1, #0
}
    4354:	4770      	bx	lr
    4356:	bf00      	nop
    4358:	200011bc 	.word	0x200011bc
    435c:	40011000 	.word	0x40011000
    4360:	200004b8 	.word	0x200004b8

00004364 <compare_set>:
{
    4364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4368:	b085      	sub	sp, #20
    436a:	4616      	mov	r6, r2
    436c:	4698      	mov	r8, r3
    436e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4370:	f7ff ff44 	bl	41fc <compare_int_lock>
    4374:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4376:	f7ff ffd3 	bl	4320 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    437a:	42b0      	cmp	r0, r6
    437c:	eb71 0308 	sbcs.w	r3, r1, r8
    4380:	d278      	bcs.n	4474 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    4382:	4b46      	ldr	r3, [pc, #280]	; (449c <compare_set+0x138>)
    4384:	1a30      	subs	r0, r6, r0
    4386:	eb68 0101 	sbc.w	r1, r8, r1
    438a:	4298      	cmp	r0, r3
    438c:	f171 0300 	sbcs.w	r3, r1, #0
    4390:	f080 8081 	bcs.w	4496 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    4394:	4b42      	ldr	r3, [pc, #264]	; (44a0 <compare_set+0x13c>)
    4396:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    439a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    439e:	45d8      	cmp	r8, fp
    43a0:	bf08      	it	eq
    43a2:	4556      	cmpeq	r6, sl
    43a4:	d051      	beq.n	444a <compare_set+0xe6>
    43a6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    43aa:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    43ae:	f105 0750 	add.w	r7, r5, #80	; 0x50
    43b2:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    43b6:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    43b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    43bc:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    43c0:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    43c2:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    43c6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    43ca:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    43cc:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    43d0:	4b34      	ldr	r3, [pc, #208]	; (44a4 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    43d2:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    43d6:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    43d8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    43dc:	1a40      	subs	r0, r0, r1
    43de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    43e2:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    43e6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    43e8:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    43ec:	d107      	bne.n	43fe <compare_set+0x9a>
    43ee:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    43f2:	2013      	movs	r0, #19
    43f4:	f005 fbdc 	bl	9bb0 <z_impl_k_busy_wait>
    43f8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    43fc:	4b29      	ldr	r3, [pc, #164]	; (44a4 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    43fe:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    4402:	eba4 000c 	sub.w	r0, r4, ip
    4406:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    440a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    440e:	bf88      	it	hi
    4410:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4412:	2000      	movs	r0, #0
    4414:	6038      	str	r0, [r7, #0]
    4416:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    4418:	9801      	ldr	r0, [sp, #4]
    441a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    441e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4422:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4426:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    442a:	4281      	cmp	r1, r0
    442c:	d006      	beq.n	443c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    442e:	1a20      	subs	r0, r4, r0
    4430:	3802      	subs	r0, #2
    4432:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4436:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    443a:	d819      	bhi.n	4470 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    443c:	1aa4      	subs	r4, r4, r2
    443e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    4442:	eb14 0a06 	adds.w	sl, r4, r6
    4446:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    444a:	4915      	ldr	r1, [pc, #84]	; (44a0 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    444c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    444e:	012b      	lsls	r3, r5, #4
    4450:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    4454:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    4458:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    445a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    445c:	6053      	str	r3, [r2, #4]
	return ret;
    445e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    4460:	4628      	mov	r0, r5
    4462:	9900      	ldr	r1, [sp, #0]
    4464:	f7ff ff2e 	bl	42c4 <compare_int_unlock>
}
    4468:	4620      	mov	r0, r4
    446a:	b005      	add	sp, #20
    446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4470:	4620      	mov	r0, r4
    4472:	e7b1      	b.n	43d8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    4474:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4476:	4a0c      	ldr	r2, [pc, #48]	; (44a8 <compare_set+0x144>)
    4478:	f3bf 8f5b 	dmb	ish
    447c:	40ab      	lsls	r3, r5
    447e:	e852 1f00 	ldrex	r1, [r2]
    4482:	4319      	orrs	r1, r3
    4484:	e842 1000 	strex	r0, r1, [r2]
    4488:	2800      	cmp	r0, #0
    448a:	d1f8      	bne.n	447e <compare_set+0x11a>
    448c:	f3bf 8f5b 	dmb	ish
    4490:	46b2      	mov	sl, r6
    4492:	46c3      	mov	fp, r8
    4494:	e7d9      	b.n	444a <compare_set+0xe6>
			return -EINVAL;
    4496:	f06f 0415 	mvn.w	r4, #21
    449a:	e7e1      	b.n	4460 <compare_set+0xfc>
    449c:	01000001 	.word	0x01000001
    44a0:	200004c0 	.word	0x200004c0
    44a4:	40011000 	.word	0x40011000
    44a8:	200011b4 	.word	0x200011b4

000044ac <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    44ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    44ae:	4b19      	ldr	r3, [pc, #100]	; (4514 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    44b0:	4d19      	ldr	r5, [pc, #100]	; (4518 <sys_clock_driver_init+0x6c>)
    44b2:	2400      	movs	r4, #0
    44b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    44b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    44bc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    44c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    44c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    44c8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    44cc:	4b13      	ldr	r3, [pc, #76]	; (451c <sys_clock_driver_init+0x70>)
    44ce:	2602      	movs	r6, #2
    44d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    44d4:	2101      	movs	r1, #1
    44d6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    44da:	2011      	movs	r0, #17
    44dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    44e0:	4622      	mov	r2, r4
    44e2:	f7fd ff61 	bl	23a8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    44e6:	2011      	movs	r0, #17
    44e8:	f7fd ff2c 	bl	2344 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    44ec:	4a0c      	ldr	r2, [pc, #48]	; (4520 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    44ee:	2301      	movs	r3, #1
    44f0:	60ab      	str	r3, [r5, #8]
    44f2:	602b      	str	r3, [r5, #0]
    44f4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    44f6:	4b0b      	ldr	r3, [pc, #44]	; (4524 <sys_clock_driver_init+0x78>)
    44f8:	4a0b      	ldr	r2, [pc, #44]	; (4528 <sys_clock_driver_init+0x7c>)
    44fa:	9300      	str	r3, [sp, #0]
    44fc:	9401      	str	r4, [sp, #4]
    44fe:	2300      	movs	r3, #0
    4500:	4620      	mov	r0, r4
    4502:	f7ff ff2f 	bl	4364 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4506:	4630      	mov	r0, r6
    4508:	f7ff f8dc 	bl	36c4 <z_nrf_clock_control_lf_on>

	return 0;
}
    450c:	4620      	mov	r0, r4
    450e:	b002      	add	sp, #8
    4510:	bd70      	pop	{r4, r5, r6, pc}
    4512:	bf00      	nop
    4514:	200004c0 	.word	0x200004c0
    4518:	40011000 	.word	0x40011000
    451c:	e000e100 	.word	0xe000e100
    4520:	200011b8 	.word	0x200011b8
    4524:	0000424d 	.word	0x0000424d
    4528:	007fffff 	.word	0x007fffff

0000452c <rtc_nrf_isr>:
{
    452c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4530:	4c35      	ldr	r4, [pc, #212]	; (4608 <rtc_nrf_isr+0xdc>)
    4532:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4536:	079a      	lsls	r2, r3, #30
    4538:	d50b      	bpl.n	4552 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    453a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    453e:	b143      	cbz	r3, 4552 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    4540:	4a32      	ldr	r2, [pc, #200]	; (460c <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4542:	2300      	movs	r3, #0
    4544:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4548:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    454c:	6813      	ldr	r3, [r2, #0]
    454e:	3301      	adds	r3, #1
    4550:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4552:	f04f 0320 	mov.w	r3, #32
    4556:	f3ef 8211 	mrs	r2, BASEPRI
    455a:	f383 8812 	msr	BASEPRI_MAX, r3
    455e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    4562:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4566:	03db      	lsls	r3, r3, #15
    4568:	d512      	bpl.n	4590 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    456a:	f3bf 8f5b 	dmb	ish
    456e:	4b28      	ldr	r3, [pc, #160]	; (4610 <rtc_nrf_isr+0xe4>)
    4570:	e853 1f00 	ldrex	r1, [r3]
    4574:	f021 0001 	bic.w	r0, r1, #1
    4578:	e843 0600 	strex	r6, r0, [r3]
    457c:	2e00      	cmp	r6, #0
    457e:	d1f7      	bne.n	4570 <rtc_nrf_isr+0x44>
    4580:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4584:	2900      	cmp	r1, #0
    4586:	d136      	bne.n	45f6 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4588:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    458c:	2b00      	cmp	r3, #0
    458e:	d132      	bne.n	45f6 <rtc_nrf_isr+0xca>
{
    4590:	2300      	movs	r3, #0
	__asm__ volatile(
    4592:	f382 8811 	msr	BASEPRI, r2
    4596:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    459a:	b34b      	cbz	r3, 45f0 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    459c:	f7ff fec0 	bl	4320 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    45a0:	f04f 0320 	mov.w	r3, #32
    45a4:	f3ef 8c11 	mrs	ip, BASEPRI
    45a8:	f383 8812 	msr	BASEPRI_MAX, r3
    45ac:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    45b0:	4b18      	ldr	r3, [pc, #96]	; (4614 <rtc_nrf_isr+0xe8>)
    45b2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    45b6:	42b0      	cmp	r0, r6
    45b8:	eb71 0207 	sbcs.w	r2, r1, r7
    45bc:	f04f 0200 	mov.w	r2, #0
    45c0:	d320      	bcc.n	4604 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    45c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    45c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    45ca:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    45ce:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    45d2:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    45d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    45d8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    45dc:	f38c 8811 	msr	BASEPRI, ip
    45e0:	f3bf 8f6f 	isb	sy
		if (handler) {
    45e4:	b121      	cbz	r1, 45f0 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    45e6:	9500      	str	r5, [sp, #0]
    45e8:	4632      	mov	r2, r6
    45ea:	463b      	mov	r3, r7
    45ec:	2000      	movs	r0, #0
    45ee:	4788      	blx	r1
}
    45f0:	b003      	add	sp, #12
    45f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    45f6:	2300      	movs	r3, #0
    45f8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    45fc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4600:	2301      	movs	r3, #1
}
    4602:	e7c6      	b.n	4592 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4604:	4611      	mov	r1, r2
    4606:	e7e9      	b.n	45dc <rtc_nrf_isr+0xb0>
    4608:	40011000 	.word	0x40011000
    460c:	200011bc 	.word	0x200011bc
    4610:	200011b4 	.word	0x200011b4
    4614:	200004c0 	.word	0x200004c0

00004618 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4618:	1c43      	adds	r3, r0, #1
{
    461a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    461c:	d021      	beq.n	4662 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    461e:	2801      	cmp	r0, #1
    4620:	dd21      	ble.n	4666 <sys_clock_set_timeout+0x4e>
    4622:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4626:	da20      	bge.n	466a <sys_clock_set_timeout+0x52>
    4628:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    462a:	f7ff fe79 	bl	4320 <z_nrf_rtc_timer_read>
    462e:	4b10      	ldr	r3, [pc, #64]	; (4670 <sys_clock_set_timeout+0x58>)
    4630:	e9d3 1300 	ldrd	r1, r3, [r3]
    4634:	1a40      	subs	r0, r0, r1
		ticks = 0;
    4636:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    463a:	bf28      	it	cs
    463c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    463e:	3001      	adds	r0, #1
    4640:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    4642:	480c      	ldr	r0, [pc, #48]	; (4674 <sys_clock_set_timeout+0x5c>)
    4644:	4282      	cmp	r2, r0
    4646:	bf28      	it	cs
    4648:	4602      	movcs	r2, r0
    464a:	1852      	adds	r2, r2, r1
    464c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4650:	4909      	ldr	r1, [pc, #36]	; (4678 <sys_clock_set_timeout+0x60>)
    4652:	9001      	str	r0, [sp, #4]
    4654:	9100      	str	r1, [sp, #0]
    4656:	f143 0300 	adc.w	r3, r3, #0
    465a:	f7ff fe83 	bl	4364 <compare_set>
}
    465e:	b002      	add	sp, #8
    4660:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4662:	4804      	ldr	r0, [pc, #16]	; (4674 <sys_clock_set_timeout+0x5c>)
    4664:	e7e0      	b.n	4628 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4666:	2400      	movs	r4, #0
    4668:	e7df      	b.n	462a <sys_clock_set_timeout+0x12>
    466a:	4c02      	ldr	r4, [pc, #8]	; (4674 <sys_clock_set_timeout+0x5c>)
    466c:	e7dd      	b.n	462a <sys_clock_set_timeout+0x12>
    466e:	bf00      	nop
    4670:	200004d0 	.word	0x200004d0
    4674:	007fffff 	.word	0x007fffff
    4678:	0000424d 	.word	0x0000424d

0000467c <sys_clock_elapsed>:
{
    467c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    467e:	f7ff fe4f 	bl	4320 <z_nrf_rtc_timer_read>
    4682:	4b02      	ldr	r3, [pc, #8]	; (468c <sys_clock_elapsed+0x10>)
    4684:	681b      	ldr	r3, [r3, #0]
}
    4686:	1ac0      	subs	r0, r0, r3
    4688:	bd08      	pop	{r3, pc}
    468a:	bf00      	nop
    468c:	200004d0 	.word	0x200004d0

00004690 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4694:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4698:	2a08      	cmp	r2, #8
    469a:	d106      	bne.n	46aa <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    469c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    46a0:	2b05      	cmp	r3, #5
    46a2:	d802      	bhi.n	46aa <nrf52_errata_103+0x1a>
    46a4:	4a02      	ldr	r2, [pc, #8]	; (46b0 <nrf52_errata_103+0x20>)
    46a6:	5cd0      	ldrb	r0, [r2, r3]
    46a8:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    46aa:	2000      	movs	r0, #0
    #endif
}
    46ac:	4770      	bx	lr
    46ae:	bf00      	nop
    46b0:	0000a374 	.word	0x0000a374

000046b4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    46b4:	4a02      	ldr	r2, [pc, #8]	; (46c0 <nvmc_wait+0xc>)
    46b6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    46ba:	2b00      	cmp	r3, #0
    46bc:	d0fb      	beq.n	46b6 <nvmc_wait+0x2>
}
    46be:	4770      	bx	lr
    46c0:	4001e000 	.word	0x4001e000

000046c4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    46c4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    46c6:	f004 fdcd 	bl	9264 <nrf52_errata_136>
    46ca:	b140      	cbz	r0, 46de <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    46cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46d0:	2200      	movs	r2, #0
    46d2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    46d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    46da:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    46de:	f004 fdc1 	bl	9264 <nrf52_errata_136>
    46e2:	2800      	cmp	r0, #0
    46e4:	d046      	beq.n	4774 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    46e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    46ea:	4b60      	ldr	r3, [pc, #384]	; (486c <SystemInit+0x1a8>)
    46ec:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    46f0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    46f4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    46f8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    46fc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4700:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4704:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4708:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    470c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4710:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4714:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4718:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    471c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4720:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4724:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4728:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    472c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4730:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4734:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4738:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    473c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4740:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4744:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4748:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    474c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4750:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4754:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4758:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    475c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4760:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4764:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4768:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    476c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4770:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4774:	f7ff ff8c 	bl	4690 <nrf52_errata_103>
    4778:	b118      	cbz	r0, 4782 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    477a:	4b3d      	ldr	r3, [pc, #244]	; (4870 <SystemInit+0x1ac>)
    477c:	4a3d      	ldr	r2, [pc, #244]	; (4874 <SystemInit+0x1b0>)
    477e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4782:	f7ff ff85 	bl	4690 <nrf52_errata_103>
    4786:	b118      	cbz	r0, 4790 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4788:	4b3b      	ldr	r3, [pc, #236]	; (4878 <SystemInit+0x1b4>)
    478a:	22fb      	movs	r2, #251	; 0xfb
    478c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4790:	f7ff ff7e 	bl	4690 <nrf52_errata_103>
    4794:	b170      	cbz	r0, 47b4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4796:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    479a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    479e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    47a2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    47a6:	f022 020f 	bic.w	r2, r2, #15
    47aa:	f003 030f 	and.w	r3, r3, #15
    47ae:	4313      	orrs	r3, r2
    47b0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    47b4:	f7ff ff6c 	bl	4690 <nrf52_errata_103>
    47b8:	b120      	cbz	r0, 47c4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    47ba:	4b30      	ldr	r3, [pc, #192]	; (487c <SystemInit+0x1b8>)
    47bc:	f44f 7200 	mov.w	r2, #512	; 0x200
    47c0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    47c4:	f004 fd4e 	bl	9264 <nrf52_errata_136>
    47c8:	b148      	cbz	r0, 47de <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    47ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    47d2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    47d4:	bf44      	itt	mi
    47d6:	f06f 0201 	mvnmi.w	r2, #1
    47da:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    47de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    47e2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    47e6:	2a08      	cmp	r2, #8
    47e8:	d10e      	bne.n	4808 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    47ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    47ee:	2b05      	cmp	r3, #5
    47f0:	d802      	bhi.n	47f8 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    47f2:	4a23      	ldr	r2, [pc, #140]	; (4880 <SystemInit+0x1bc>)
    47f4:	5cd3      	ldrb	r3, [r2, r3]
    47f6:	b13b      	cbz	r3, 4808 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    47f8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    47fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4804:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4808:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    480c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4810:	2a00      	cmp	r2, #0
    4812:	db03      	blt.n	481c <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4814:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4818:	2b00      	cmp	r3, #0
    481a:	da22      	bge.n	4862 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    481c:	4919      	ldr	r1, [pc, #100]	; (4884 <SystemInit+0x1c0>)
    481e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4820:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4824:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4828:	2412      	movs	r4, #18
    nvmc_wait();
    482a:	f7ff ff43 	bl	46b4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    482e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4832:	f7ff ff3f 	bl	46b4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4836:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    483a:	f7ff ff3b 	bl	46b4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    483e:	2300      	movs	r3, #0
    4840:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4844:	f7ff ff36 	bl	46b4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4848:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    484c:	490e      	ldr	r1, [pc, #56]	; (4888 <SystemInit+0x1c4>)
    484e:	4b0f      	ldr	r3, [pc, #60]	; (488c <SystemInit+0x1c8>)
    4850:	68ca      	ldr	r2, [r1, #12]
    4852:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4856:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4858:	60cb      	str	r3, [r1, #12]
    485a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    485e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4860:	e7fd      	b.n	485e <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4862:	4b0b      	ldr	r3, [pc, #44]	; (4890 <SystemInit+0x1cc>)
    4864:	4a0b      	ldr	r2, [pc, #44]	; (4894 <SystemInit+0x1d0>)
    4866:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4868:	bd10      	pop	{r4, pc}
    486a:	bf00      	nop
    486c:	4000c000 	.word	0x4000c000
    4870:	40005000 	.word	0x40005000
    4874:	00038148 	.word	0x00038148
    4878:	4000f000 	.word	0x4000f000
    487c:	40029000 	.word	0x40029000
    4880:	0000a36e 	.word	0x0000a36e
    4884:	4001e000 	.word	0x4001e000
    4888:	e000ed00 	.word	0xe000ed00
    488c:	05fa0004 	.word	0x05fa0004
    4890:	2000019c 	.word	0x2000019c
    4894:	03d09000 	.word	0x03d09000

00004898 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4898:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    489a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    489c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    489e:	fab2 f382 	clz	r3, r2
    48a2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    48a6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    48a8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    48aa:	d014      	beq.n	48d6 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    48ac:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    48b0:	fa05 f303 	lsl.w	r3, r5, r3
    48b4:	ea22 0303 	bic.w	r3, r2, r3
    48b8:	e850 6f00 	ldrex	r6, [r0]
    48bc:	4296      	cmp	r6, r2
    48be:	d104      	bne.n	48ca <nrfx_flag32_alloc+0x32>
    48c0:	e840 3c00 	strex	ip, r3, [r0]
    48c4:	f1bc 0f00 	cmp.w	ip, #0
    48c8:	d1f6      	bne.n	48b8 <nrfx_flag32_alloc+0x20>
    48ca:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    48ce:	d1e5      	bne.n	489c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    48d0:	4802      	ldr	r0, [pc, #8]	; (48dc <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    48d2:	700c      	strb	r4, [r1, #0]
}
    48d4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    48d6:	4802      	ldr	r0, [pc, #8]	; (48e0 <nrfx_flag32_alloc+0x48>)
    48d8:	e7fc      	b.n	48d4 <nrfx_flag32_alloc+0x3c>
    48da:	bf00      	nop
    48dc:	0bad0000 	.word	0x0bad0000
    48e0:	0bad0002 	.word	0x0bad0002

000048e4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    48e4:	6803      	ldr	r3, [r0, #0]
    48e6:	40cb      	lsrs	r3, r1
    48e8:	07db      	lsls	r3, r3, #31
{
    48ea:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    48ec:	d415      	bmi.n	491a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    48ee:	2301      	movs	r3, #1
    48f0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    48f4:	6803      	ldr	r3, [r0, #0]
    48f6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    48fa:	ea41 0203 	orr.w	r2, r1, r3
    48fe:	e850 4f00 	ldrex	r4, [r0]
    4902:	429c      	cmp	r4, r3
    4904:	d104      	bne.n	4910 <nrfx_flag32_free+0x2c>
    4906:	e840 2c00 	strex	ip, r2, [r0]
    490a:	f1bc 0f00 	cmp.w	ip, #0
    490e:	d1f6      	bne.n	48fe <nrfx_flag32_free+0x1a>
    4910:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4914:	d1ee      	bne.n	48f4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4916:	4802      	ldr	r0, [pc, #8]	; (4920 <nrfx_flag32_free+0x3c>)
}
    4918:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    491a:	4802      	ldr	r0, [pc, #8]	; (4924 <nrfx_flag32_free+0x40>)
    491c:	e7fc      	b.n	4918 <nrfx_flag32_free+0x34>
    491e:	bf00      	nop
    4920:	0bad0000 	.word	0x0bad0000
    4924:	0bad0004 	.word	0x0bad0004

00004928 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4928:	4b04      	ldr	r3, [pc, #16]	; (493c <nrfx_clock_init+0x14>)
    492a:	791a      	ldrb	r2, [r3, #4]
    492c:	b922      	cbnz	r2, 4938 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    492e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4930:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4932:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4934:	4802      	ldr	r0, [pc, #8]	; (4940 <nrfx_clock_init+0x18>)
    4936:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4938:	4802      	ldr	r0, [pc, #8]	; (4944 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    493a:	4770      	bx	lr
    493c:	200011c0 	.word	0x200011c0
    4940:	0bad0000 	.word	0x0bad0000
    4944:	0bad000c 	.word	0x0bad000c

00004948 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    4948:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    494a:	2000      	movs	r0, #0
    494c:	f7fd fd1e 	bl	238c <arch_irq_is_enabled>
    4950:	b908      	cbnz	r0, 4956 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4952:	f7fd fcf7 	bl	2344 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    4956:	4b02      	ldr	r3, [pc, #8]	; (4960 <nrfx_clock_enable+0x18>)
    4958:	2201      	movs	r2, #1
    495a:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    495c:	bd08      	pop	{r3, pc}
    495e:	bf00      	nop
    4960:	2000152b 	.word	0x2000152b

00004964 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4964:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4966:	b110      	cbz	r0, 496e <nrfx_clock_stop+0xa>
    4968:	2801      	cmp	r0, #1
    496a:	d017      	beq.n	499c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    496c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    496e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4972:	2302      	movs	r3, #2
    4974:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4978:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    497c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4980:	2301      	movs	r3, #1
    4982:	60e3      	str	r3, [r4, #12]
    4984:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4988:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    498c:	03db      	lsls	r3, r3, #15
    498e:	d5ed      	bpl.n	496c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4990:	2001      	movs	r0, #1
    4992:	f004 fc71 	bl	9278 <nrfx_busy_wait>
    4996:	3d01      	subs	r5, #1
    4998:	d1f6      	bne.n	4988 <nrfx_clock_stop+0x24>
    499a:	e7e7      	b.n	496c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    499c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49a0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    49a2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49a6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    49aa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49ae:	6060      	str	r0, [r4, #4]
    49b0:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    49b4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    49b8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    49bc:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    49be:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    49c2:	d505      	bpl.n	49d0 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    49c4:	b123      	cbz	r3, 49d0 <nrfx_clock_stop+0x6c>
    49c6:	2001      	movs	r0, #1
    49c8:	f004 fc56 	bl	9278 <nrfx_busy_wait>
    49cc:	3d01      	subs	r5, #1
    49ce:	d1f1      	bne.n	49b4 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    49d0:	4b01      	ldr	r3, [pc, #4]	; (49d8 <nrfx_clock_stop+0x74>)
    49d2:	2200      	movs	r2, #0
    49d4:	715a      	strb	r2, [r3, #5]
    49d6:	e7c9      	b.n	496c <nrfx_clock_stop+0x8>
    49d8:	200011c0 	.word	0x200011c0

000049dc <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    49e0:	b510      	push	{r4, lr}
    49e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    49e6:	b16a      	cbz	r2, 4a04 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49e8:	2200      	movs	r2, #0
    49ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    49ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    49f2:	2201      	movs	r2, #1
    49f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    49f8:	4b11      	ldr	r3, [pc, #68]	; (4a40 <nrfx_clock_irq_handler+0x64>)
    49fa:	7958      	ldrb	r0, [r3, #5]
    49fc:	b910      	cbnz	r0, 4a04 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    49fe:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4a00:	681b      	ldr	r3, [r3, #0]
    4a02:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a08:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4a0c:	b172      	cbz	r2, 4a2c <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a0e:	2200      	movs	r2, #0
    4a10:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4a14:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a18:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a1c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4a20:	0792      	lsls	r2, r2, #30
    4a22:	d104      	bne.n	4a2e <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a24:	2201      	movs	r2, #1
    4a26:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a2a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4a2c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4a2e:	2202      	movs	r2, #2
    4a30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a34:	4b02      	ldr	r3, [pc, #8]	; (4a40 <nrfx_clock_irq_handler+0x64>)
}
    4a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a3a:	681b      	ldr	r3, [r3, #0]
    4a3c:	2001      	movs	r0, #1
    4a3e:	4718      	bx	r3
    4a40:	200011c0 	.word	0x200011c0

00004a44 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4a44:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4a46:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4a4a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    4a4c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4a4e:	6002      	str	r2, [r0, #0]
}
    4a50:	4802      	ldr	r0, [pc, #8]	; (4a5c <nrf_gpio_pin_port_decode+0x18>)
    4a52:	bf18      	it	ne
    4a54:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4a58:	4770      	bx	lr
    4a5a:	bf00      	nop
    4a5c:	50000300 	.word	0x50000300

00004a60 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4a60:	4b03      	ldr	r3, [pc, #12]	; (4a70 <pin_in_use_by_te+0x10>)
    4a62:	3008      	adds	r0, #8
    4a64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4a68:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4a6c:	4770      	bx	lr
    4a6e:	bf00      	nop
    4a70:	200001a0 	.word	0x200001a0

00004a74 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4a74:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a76:	f100 0308 	add.w	r3, r0, #8
    4a7a:	4c0c      	ldr	r4, [pc, #48]	; (4aac <call_handler+0x38>)
    4a7c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4a80:	05da      	lsls	r2, r3, #23
{
    4a82:	4605      	mov	r5, r0
    4a84:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a86:	d507      	bpl.n	4a98 <call_handler+0x24>
    4a88:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4a8c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4a90:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4a94:	6852      	ldr	r2, [r2, #4]
    4a96:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4a98:	68a3      	ldr	r3, [r4, #8]
    4a9a:	b12b      	cbz	r3, 4aa8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a9c:	68e2      	ldr	r2, [r4, #12]
    4a9e:	4631      	mov	r1, r6
    4aa0:	4628      	mov	r0, r5
    }
}
    4aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4aa6:	4718      	bx	r3
}
    4aa8:	bd70      	pop	{r4, r5, r6, pc}
    4aaa:	bf00      	nop
    4aac:	200001a0 	.word	0x200001a0

00004ab0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ab0:	4a12      	ldr	r2, [pc, #72]	; (4afc <release_handler+0x4c>)
    4ab2:	3008      	adds	r0, #8
{
    4ab4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ab6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4aba:	05d9      	lsls	r1, r3, #23
    4abc:	d51b      	bpl.n	4af6 <release_handler+0x46>
    4abe:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4ac2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4ac6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4aca:	f102 0410 	add.w	r4, r2, #16
    4ace:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4ad0:	f834 3b02 	ldrh.w	r3, [r4], #2
    4ad4:	f413 7f80 	tst.w	r3, #256	; 0x100
    4ad8:	d003      	beq.n	4ae2 <release_handler+0x32>
    4ada:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4ade:	4299      	cmp	r1, r3
    4ae0:	d009      	beq.n	4af6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4ae2:	3001      	adds	r0, #1
    4ae4:	2830      	cmp	r0, #48	; 0x30
    4ae6:	d1f3      	bne.n	4ad0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4ae8:	2300      	movs	r3, #0
    4aea:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4aee:	4804      	ldr	r0, [pc, #16]	; (4b00 <release_handler+0x50>)
}
    4af0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4af2:	f7ff bef7 	b.w	48e4 <nrfx_flag32_free>
}
    4af6:	bc10      	pop	{r4}
    4af8:	4770      	bx	lr
    4afa:	bf00      	nop
    4afc:	200001a0 	.word	0x200001a0
    4b00:	20000214 	.word	0x20000214

00004b04 <pin_handler_trigger_uninit>:
{
    4b04:	b538      	push	{r3, r4, r5, lr}
    4b06:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4b08:	f7ff ffaa 	bl	4a60 <pin_in_use_by_te>
    4b0c:	4c09      	ldr	r4, [pc, #36]	; (4b34 <pin_handler_trigger_uninit+0x30>)
    4b0e:	f102 0508 	add.w	r5, r2, #8
    4b12:	b140      	cbz	r0, 4b26 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4b14:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4b18:	4907      	ldr	r1, [pc, #28]	; (4b38 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4b1a:	0b5b      	lsrs	r3, r3, #13
    4b1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4b20:	2000      	movs	r0, #0
    4b22:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4b26:	4610      	mov	r0, r2
    4b28:	f7ff ffc2 	bl	4ab0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b2c:	2300      	movs	r3, #0
    4b2e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4b32:	bd38      	pop	{r3, r4, r5, pc}
    4b34:	200001a0 	.word	0x200001a0
    4b38:	40006000 	.word	0x40006000

00004b3c <nrfx_gpiote_input_configure>:
{
    4b3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4b40:	4604      	mov	r4, r0
    4b42:	4617      	mov	r7, r2
    4b44:	461d      	mov	r5, r3
    if (p_input_config)
    4b46:	b321      	cbz	r1, 4b92 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b48:	4e4e      	ldr	r6, [pc, #312]	; (4c84 <nrfx_gpiote_input_configure+0x148>)
    4b4a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4b4e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    4b52:	079b      	lsls	r3, r3, #30
    4b54:	d506      	bpl.n	4b64 <nrfx_gpiote_input_configure+0x28>
    4b56:	f7ff ff83 	bl	4a60 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    4b5a:	b118      	cbz	r0, 4b64 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    4b5c:	484a      	ldr	r0, [pc, #296]	; (4c88 <nrfx_gpiote_input_configure+0x14c>)
}
    4b5e:	b004      	add	sp, #16
    4b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4b64:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b66:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4b6a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4b6e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b72:	f10d 020f 	add.w	r2, sp, #15
    4b76:	460b      	mov	r3, r1
    4b78:	4620      	mov	r0, r4
    4b7a:	f10d 010e 	add.w	r1, sp, #14
    4b7e:	f004 fba9 	bl	92d4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4b82:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    4b86:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4b8a:	f043 0301 	orr.w	r3, r3, #1
    4b8e:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    4b92:	b197      	cbz	r7, 4bba <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b94:	4b3b      	ldr	r3, [pc, #236]	; (4c84 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4b96:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4b98:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b9a:	f104 0008 	add.w	r0, r4, #8
    4b9e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4ba2:	078f      	lsls	r7, r1, #30
    4ba4:	d50c      	bpl.n	4bc0 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    4ba6:	2a00      	cmp	r2, #0
    4ba8:	d1d8      	bne.n	4b5c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4baa:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4bae:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4bb2:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    4bb6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    4bba:	bbcd      	cbnz	r5, 4c30 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    4bbc:	4833      	ldr	r0, [pc, #204]	; (4c8c <nrfx_gpiote_input_configure+0x150>)
    4bbe:	e7ce      	b.n	4b5e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4bc0:	f021 0120 	bic.w	r1, r1, #32
    4bc4:	04c9      	lsls	r1, r1, #19
    4bc6:	0cc9      	lsrs	r1, r1, #19
    4bc8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    4bcc:	2a00      	cmp	r2, #0
    4bce:	d0ec      	beq.n	4baa <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    4bd0:	2e03      	cmp	r6, #3
    4bd2:	d8c3      	bhi.n	4b5c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4bd4:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4bd6:	b92e      	cbnz	r6, 4be4 <nrfx_gpiote_input_configure+0xa8>
    4bd8:	4a2d      	ldr	r2, [pc, #180]	; (4c90 <nrfx_gpiote_input_configure+0x154>)
    4bda:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    4bde:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4be2:	e7e2      	b.n	4baa <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4be4:	00ba      	lsls	r2, r7, #2
    4be6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4bea:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4bee:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4bf2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4bf6:	f02c 0c03 	bic.w	ip, ip, #3
    4bfa:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4bfe:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4c02:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4c06:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4c0a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c0e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4c12:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4c16:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    4c1a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4c1e:	ea4c 0c0e 	orr.w	ip, ip, lr
    4c22:	f041 0120 	orr.w	r1, r1, #32
    4c26:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4c2a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4c2e:	e7bc      	b.n	4baa <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4c30:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4c34:	4620      	mov	r0, r4
    4c36:	f7ff ff3b 	bl	4ab0 <release_handler>
    if (!handler)
    4c3a:	2e00      	cmp	r6, #0
    4c3c:	d0be      	beq.n	4bbc <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c3e:	4d11      	ldr	r5, [pc, #68]	; (4c84 <nrfx_gpiote_input_configure+0x148>)
    4c40:	682b      	ldr	r3, [r5, #0]
    4c42:	429e      	cmp	r6, r3
    4c44:	d104      	bne.n	4c50 <nrfx_gpiote_input_configure+0x114>
    4c46:	686b      	ldr	r3, [r5, #4]
    4c48:	429f      	cmp	r7, r3
    4c4a:	d101      	bne.n	4c50 <nrfx_gpiote_input_configure+0x114>
    4c4c:	2200      	movs	r2, #0
    4c4e:	e00a      	b.n	4c66 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4c50:	4810      	ldr	r0, [pc, #64]	; (4c94 <nrfx_gpiote_input_configure+0x158>)
    4c52:	f10d 010f 	add.w	r1, sp, #15
    4c56:	f7ff fe1f 	bl	4898 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4c5a:	4b0c      	ldr	r3, [pc, #48]	; (4c8c <nrfx_gpiote_input_configure+0x150>)
    4c5c:	4298      	cmp	r0, r3
    4c5e:	f47f af7e 	bne.w	4b5e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    4c62:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4c66:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4c6a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c6e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4c70:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c72:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4c76:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4c7e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4c82:	e79b      	b.n	4bbc <nrfx_gpiote_input_configure+0x80>
    4c84:	200001a0 	.word	0x200001a0
    4c88:	0bad0004 	.word	0x0bad0004
    4c8c:	0bad0000 	.word	0x0bad0000
    4c90:	40006000 	.word	0x40006000
    4c94:	20000214 	.word	0x20000214

00004c98 <nrfx_gpiote_output_configure>:
{
    4c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c9a:	4604      	mov	r4, r0
    4c9c:	b085      	sub	sp, #20
    4c9e:	4615      	mov	r5, r2
    if (p_config)
    4ca0:	b319      	cbz	r1, 4cea <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4ca2:	4e33      	ldr	r6, [pc, #204]	; (4d70 <nrfx_gpiote_output_configure+0xd8>)
    4ca4:	f100 0708 	add.w	r7, r0, #8
    4ca8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4cac:	0793      	lsls	r3, r2, #30
    4cae:	d403      	bmi.n	4cb8 <nrfx_gpiote_output_configure+0x20>
    4cb0:	f7ff fed6 	bl	4a60 <pin_in_use_by_te>
    4cb4:	2800      	cmp	r0, #0
    4cb6:	d158      	bne.n	4d6a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4cb8:	f012 0f1c 	tst.w	r2, #28
    4cbc:	d002      	beq.n	4cc4 <nrfx_gpiote_output_configure+0x2c>
    4cbe:	784b      	ldrb	r3, [r1, #1]
    4cc0:	2b01      	cmp	r3, #1
    4cc2:	d052      	beq.n	4d6a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4cc4:	2301      	movs	r3, #1
    4cc6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4cca:	2300      	movs	r3, #0
    4ccc:	e9cd 1300 	strd	r1, r3, [sp]
    4cd0:	1c4a      	adds	r2, r1, #1
    4cd2:	1c8b      	adds	r3, r1, #2
    4cd4:	4620      	mov	r0, r4
    4cd6:	f10d 010f 	add.w	r1, sp, #15
    4cda:	f004 fafb 	bl	92d4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4cde:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4ce2:	f043 0303 	orr.w	r3, r3, #3
    4ce6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4cea:	b915      	cbnz	r5, 4cf2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4cec:	4821      	ldr	r0, [pc, #132]	; (4d74 <nrfx_gpiote_output_configure+0xdc>)
}
    4cee:	b005      	add	sp, #20
    4cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cf2:	4e1f      	ldr	r6, [pc, #124]	; (4d70 <nrfx_gpiote_output_configure+0xd8>)
    4cf4:	f104 0708 	add.w	r7, r4, #8
    4cf8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4cfc:	0783      	lsls	r3, r0, #30
    4cfe:	d534      	bpl.n	4d6a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    4d00:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4d04:	4661      	mov	r1, ip
    4d06:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4d08:	f020 0020 	bic.w	r0, r0, #32
    4d0c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4d10:	04c0      	lsls	r0, r0, #19
    4d12:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4d16:	0cc0      	lsrs	r0, r0, #19
    4d18:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4d1c:	2300      	movs	r3, #0
    4d1e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4d22:	786a      	ldrb	r2, [r5, #1]
    4d24:	2a00      	cmp	r2, #0
    4d26:	d0e1      	beq.n	4cec <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4d28:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4d2c:	78ad      	ldrb	r5, [r5, #2]
    4d2e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4d32:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4d36:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d3a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4d3e:	0223      	lsls	r3, r4, #8
    4d40:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d44:	0412      	lsls	r2, r2, #16
    4d46:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d4a:	ea43 030e 	orr.w	r3, r3, lr
    4d4e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4d50:	052a      	lsls	r2, r5, #20
    4d52:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4d56:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d5a:	4313      	orrs	r3, r2
    4d5c:	f040 0020 	orr.w	r0, r0, #32
    4d60:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4d64:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d68:	e7c0      	b.n	4cec <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    4d6a:	4803      	ldr	r0, [pc, #12]	; (4d78 <nrfx_gpiote_output_configure+0xe0>)
    4d6c:	e7bf      	b.n	4cee <nrfx_gpiote_output_configure+0x56>
    4d6e:	bf00      	nop
    4d70:	200001a0 	.word	0x200001a0
    4d74:	0bad0000 	.word	0x0bad0000
    4d78:	0bad0004 	.word	0x0bad0004

00004d7c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4d7c:	4b01      	ldr	r3, [pc, #4]	; (4d84 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4d7e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4d82:	4770      	bx	lr
    4d84:	200001a0 	.word	0x200001a0

00004d88 <nrfx_gpiote_channel_get>:
{
    4d88:	b508      	push	{r3, lr}
    4d8a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4d8c:	f7ff fe68 	bl	4a60 <pin_in_use_by_te>
    4d90:	b138      	cbz	r0, 4da2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d92:	4b05      	ldr	r3, [pc, #20]	; (4da8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4d94:	4805      	ldr	r0, [pc, #20]	; (4dac <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d96:	3208      	adds	r2, #8
    4d98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4d9c:	0b5b      	lsrs	r3, r3, #13
    4d9e:	700b      	strb	r3, [r1, #0]
}
    4da0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4da2:	4803      	ldr	r0, [pc, #12]	; (4db0 <nrfx_gpiote_channel_get+0x28>)
    4da4:	e7fc      	b.n	4da0 <nrfx_gpiote_channel_get+0x18>
    4da6:	bf00      	nop
    4da8:	200001a0 	.word	0x200001a0
    4dac:	0bad0000 	.word	0x0bad0000
    4db0:	0bad0004 	.word	0x0bad0004

00004db4 <nrfx_gpiote_init>:
{
    4db4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4db6:	4c0f      	ldr	r4, [pc, #60]	; (4df4 <nrfx_gpiote_init+0x40>)
    4db8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4dbc:	b9bd      	cbnz	r5, 4dee <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4dbe:	2260      	movs	r2, #96	; 0x60
    4dc0:	4629      	mov	r1, r5
    4dc2:	f104 0010 	add.w	r0, r4, #16
    4dc6:	f003 fec4 	bl	8b52 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4dca:	2006      	movs	r0, #6
    4dcc:	f7fd faba 	bl	2344 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4dd0:	4b09      	ldr	r3, [pc, #36]	; (4df8 <nrfx_gpiote_init+0x44>)
    return err_code;
    4dd2:	480a      	ldr	r0, [pc, #40]	; (4dfc <nrfx_gpiote_init+0x48>)
    4dd4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4dd8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4ddc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4de0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4de4:	2301      	movs	r3, #1
    4de6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4dea:	6763      	str	r3, [r4, #116]	; 0x74
}
    4dec:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4dee:	4804      	ldr	r0, [pc, #16]	; (4e00 <nrfx_gpiote_init+0x4c>)
    4df0:	e7fc      	b.n	4dec <nrfx_gpiote_init+0x38>
    4df2:	bf00      	nop
    4df4:	200001a0 	.word	0x200001a0
    4df8:	40006000 	.word	0x40006000
    4dfc:	0bad0000 	.word	0x0bad0000
    4e00:	0bad0005 	.word	0x0bad0005

00004e04 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4e04:	4b03      	ldr	r3, [pc, #12]	; (4e14 <nrfx_gpiote_is_init+0x10>)
    4e06:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4e0a:	3800      	subs	r0, #0
    4e0c:	bf18      	it	ne
    4e0e:	2001      	movne	r0, #1
    4e10:	4770      	bx	lr
    4e12:	bf00      	nop
    4e14:	200001a0 	.word	0x200001a0

00004e18 <nrfx_gpiote_channel_free>:
{
    4e18:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4e1a:	4801      	ldr	r0, [pc, #4]	; (4e20 <nrfx_gpiote_channel_free+0x8>)
    4e1c:	f7ff bd62 	b.w	48e4 <nrfx_flag32_free>
    4e20:	20000210 	.word	0x20000210

00004e24 <nrfx_gpiote_channel_alloc>:
{
    4e24:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4e26:	4801      	ldr	r0, [pc, #4]	; (4e2c <nrfx_gpiote_channel_alloc+0x8>)
    4e28:	f7ff bd36 	b.w	4898 <nrfx_flag32_alloc>
    4e2c:	20000210 	.word	0x20000210

00004e30 <nrfx_gpiote_trigger_enable>:
{
    4e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4e32:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e34:	f7ff fe14 	bl	4a60 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e38:	f104 0208 	add.w	r2, r4, #8
    4e3c:	4b1e      	ldr	r3, [pc, #120]	; (4eb8 <nrfx_gpiote_trigger_enable+0x88>)
    4e3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e42:	b1e8      	cbz	r0, 4e80 <nrfx_gpiote_trigger_enable+0x50>
    4e44:	f013 0502 	ands.w	r5, r3, #2
    4e48:	d11a      	bne.n	4e80 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e4a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4e4c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4e4e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4e52:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4e56:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4e5a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e5e:	6005      	str	r5, [r0, #0]
    4e60:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4e62:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4e66:	f040 0001 	orr.w	r0, r0, #1
    4e6a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4e6e:	b129      	cbz	r1, 4e7c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4e70:	2201      	movs	r2, #1
    4e72:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4e76:	4a11      	ldr	r2, [pc, #68]	; (4ebc <nrfx_gpiote_trigger_enable+0x8c>)
    4e78:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4e7c:	b003      	add	sp, #12
    4e7e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e80:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4e84:	2b04      	cmp	r3, #4
    4e86:	d012      	beq.n	4eae <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4e88:	2b05      	cmp	r3, #5
    4e8a:	d012      	beq.n	4eb2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4e8c:	a801      	add	r0, sp, #4
    4e8e:	9401      	str	r4, [sp, #4]
    4e90:	f7ff fdd8 	bl	4a44 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e94:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4e96:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e9a:	40d9      	lsrs	r1, r3
    4e9c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4ea0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4ea2:	4620      	mov	r0, r4
}
    4ea4:	b003      	add	sp, #12
    4ea6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4eaa:	f004 ba5a 	b.w	9362 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4eae:	2103      	movs	r1, #3
    4eb0:	e7f7      	b.n	4ea2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4eb2:	2102      	movs	r1, #2
    4eb4:	e7f5      	b.n	4ea2 <nrfx_gpiote_trigger_enable+0x72>
    4eb6:	bf00      	nop
    4eb8:	200001a0 	.word	0x200001a0
    4ebc:	40006000 	.word	0x40006000

00004ec0 <nrfx_gpiote_trigger_disable>:
{
    4ec0:	b508      	push	{r3, lr}
    4ec2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ec4:	f7ff fdcc 	bl	4a60 <pin_in_use_by_te>
    4ec8:	b1c0      	cbz	r0, 4efc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4eca:	f102 0108 	add.w	r1, r2, #8
    4ece:	4b0e      	ldr	r3, [pc, #56]	; (4f08 <nrfx_gpiote_trigger_disable+0x48>)
    4ed0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ed4:	0799      	lsls	r1, r3, #30
    4ed6:	d411      	bmi.n	4efc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4ed8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4eda:	2201      	movs	r2, #1
    4edc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4ede:	009b      	lsls	r3, r3, #2
    4ee0:	490a      	ldr	r1, [pc, #40]	; (4f0c <nrfx_gpiote_trigger_disable+0x4c>)
    4ee2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4ee6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4eea:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4eee:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4ef2:	f022 0203 	bic.w	r2, r2, #3
    4ef6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4efa:	bd08      	pop	{r3, pc}
    4efc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f00:	2100      	movs	r1, #0
    4f02:	4610      	mov	r0, r2
    4f04:	f004 ba2d 	b.w	9362 <nrf_gpio_cfg_sense_set>
    4f08:	200001a0 	.word	0x200001a0
    4f0c:	40006000 	.word	0x40006000

00004f10 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4f10:	4b0e      	ldr	r3, [pc, #56]	; (4f4c <nrfx_gpiote_pin_uninit+0x3c>)
    4f12:	f100 0208 	add.w	r2, r0, #8
{
    4f16:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4f18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4f1c:	07db      	lsls	r3, r3, #31
{
    4f1e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4f20:	d511      	bpl.n	4f46 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4f22:	f7ff ffcd 	bl	4ec0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4f26:	4620      	mov	r0, r4
    4f28:	f7ff fdec 	bl	4b04 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f2c:	a801      	add	r0, sp, #4
    4f2e:	9401      	str	r4, [sp, #4]
    4f30:	f7ff fd88 	bl	4a44 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4f34:	9b01      	ldr	r3, [sp, #4]
    4f36:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4f3a:	2202      	movs	r2, #2
    4f3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4f40:	4803      	ldr	r0, [pc, #12]	; (4f50 <nrfx_gpiote_pin_uninit+0x40>)
}
    4f42:	b002      	add	sp, #8
    4f44:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f46:	4803      	ldr	r0, [pc, #12]	; (4f54 <nrfx_gpiote_pin_uninit+0x44>)
    4f48:	e7fb      	b.n	4f42 <nrfx_gpiote_pin_uninit+0x32>
    4f4a:	bf00      	nop
    4f4c:	200001a0 	.word	0x200001a0
    4f50:	0bad0000 	.word	0x0bad0000
    4f54:	0bad0004 	.word	0x0bad0004

00004f58 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f5c:	4b64      	ldr	r3, [pc, #400]	; (50f0 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    4f5e:	4865      	ldr	r0, [pc, #404]	; (50f4 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f60:	4965      	ldr	r1, [pc, #404]	; (50f8 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    4f62:	2600      	movs	r6, #0
{
    4f64:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4f66:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f68:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f6a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4f6c:	b135      	cbz	r5, 4f7c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4f6e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4f72:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f74:	bf1e      	ittt	ne
    4f76:	601c      	strne	r4, [r3, #0]
    4f78:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4f7a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f7c:	3304      	adds	r3, #4
    4f7e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4f80:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f84:	d1f1      	bne.n	4f6a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f86:	f8df 816c 	ldr.w	r8, [pc, #364]	; 50f4 <nrfx_gpiote_irq_handler+0x19c>
    4f8a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4f8e:	2b00      	cmp	r3, #0
    4f90:	f000 8091 	beq.w	50b6 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    4f94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4f98:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4f9c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4f9e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4fa2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    4fa6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4fa8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4fac:	2700      	movs	r7, #0
            while (latch[i])
    4fae:	f10d 0910 	add.w	r9, sp, #16
    4fb2:	017b      	lsls	r3, r7, #5
    4fb4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4fb6:	f04f 0a01 	mov.w	sl, #1
    4fba:	e049      	b.n	5050 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    4fbc:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fbe:	4a4f      	ldr	r2, [pc, #316]	; (50fc <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4fc0:	fa94 f4a4 	rbit	r4, r4
    4fc4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4fc8:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fca:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4fce:	08e0      	lsrs	r0, r4, #3
    4fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4fd4:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    4fd6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4fda:	fa0a fc02 	lsl.w	ip, sl, r2
    4fde:	f819 2000 	ldrb.w	r2, [r9, r0]
    4fe2:	ea22 020c 	bic.w	r2, r2, ip
    4fe6:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4fea:	a803      	add	r0, sp, #12
    4fec:	f3c3 0582 	ubfx	r5, r3, #2, #3
    4ff0:	0899      	lsrs	r1, r3, #2
    4ff2:	f7ff fd27 	bl	4a44 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4ff6:	9a03      	ldr	r2, [sp, #12]
    4ff8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    4ffc:	074b      	lsls	r3, r1, #29
    4ffe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5002:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5004:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    5008:	d529      	bpl.n	505e <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    500a:	4620      	mov	r0, r4
    500c:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    500e:	b2d5      	uxtb	r5, r2
    5010:	f7ff fd30 	bl	4a74 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5014:	a803      	add	r0, sp, #12
    5016:	9403      	str	r4, [sp, #12]
    5018:	f7ff fd14 	bl	4a44 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    501c:	9b03      	ldr	r3, [sp, #12]
    501e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5022:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5026:	f3c3 4301 	ubfx	r3, r3, #16, #2
    502a:	429d      	cmp	r5, r3
    502c:	d107      	bne.n	503e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    502e:	2100      	movs	r1, #0
    5030:	4620      	mov	r0, r4
    5032:	f004 f996 	bl	9362 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5036:	4629      	mov	r1, r5
    5038:	4620      	mov	r0, r4
    503a:	f004 f992 	bl	9362 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    503e:	a803      	add	r0, sp, #12
    5040:	9403      	str	r4, [sp, #12]
    5042:	f7ff fcff 	bl	4a44 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5046:	9b03      	ldr	r3, [sp, #12]
    5048:	fa0a f303 	lsl.w	r3, sl, r3
    504c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    5050:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    5054:	2c00      	cmp	r4, #0
    5056:	d1b1      	bne.n	4fbc <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5058:	b9cf      	cbnz	r7, 508e <nrfx_gpiote_irq_handler+0x136>
    505a:	2701      	movs	r7, #1
    505c:	e7a9      	b.n	4fb2 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    505e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5060:	bf0c      	ite	eq
    5062:	2103      	moveq	r1, #3
    5064:	2102      	movne	r1, #2
    5066:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5068:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    506a:	f004 f97a 	bl	9362 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    506e:	2d03      	cmp	r5, #3
    5070:	d004      	beq.n	507c <nrfx_gpiote_irq_handler+0x124>
    5072:	9a01      	ldr	r2, [sp, #4]
    5074:	2a02      	cmp	r2, #2
    5076:	d106      	bne.n	5086 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5078:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    507a:	d1e0      	bne.n	503e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    507c:	4659      	mov	r1, fp
    507e:	4620      	mov	r0, r4
    5080:	f7ff fcf8 	bl	4a74 <call_handler>
    5084:	e7db      	b.n	503e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5086:	2a03      	cmp	r2, #3
    5088:	d1d9      	bne.n	503e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    508a:	2d02      	cmp	r5, #2
    508c:	e7f5      	b.n	507a <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    508e:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    5092:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    5096:	491a      	ldr	r1, [pc, #104]	; (5100 <nrfx_gpiote_irq_handler+0x1a8>)
    5098:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    509c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    50a0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    50a2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    50a6:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    50aa:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    50ac:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    50b0:	4313      	orrs	r3, r2
    50b2:	f47f af7b 	bne.w	4fac <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    50b6:	2401      	movs	r4, #1
    while (mask)
    50b8:	b916      	cbnz	r6, 50c0 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    50ba:	b007      	add	sp, #28
    50bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    50c0:	fa96 f3a6 	rbit	r3, r6
    50c4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    50c8:	fa04 f203 	lsl.w	r2, r4, r3
    50cc:	009b      	lsls	r3, r3, #2
    50ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    50d2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    50d6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    50da:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    50de:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    50e2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    50e6:	f3c1 4101 	ubfx	r1, r1, #16, #2
    50ea:	f7ff fcc3 	bl	4a74 <call_handler>
    50ee:	e7e3      	b.n	50b8 <nrfx_gpiote_irq_handler+0x160>
    50f0:	40006100 	.word	0x40006100
    50f4:	40006000 	.word	0x40006000
    50f8:	40006120 	.word	0x40006120
    50fc:	200001a0 	.word	0x200001a0
    5100:	50000300 	.word	0x50000300

00005104 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    5104:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    5106:	4c18      	ldr	r4, [pc, #96]	; (5168 <nrfx_power_init+0x64>)
    5108:	7823      	ldrb	r3, [r4, #0]
    510a:	bb53      	cbnz	r3, 5162 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    510c:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    510e:	0791      	lsls	r1, r2, #30
    5110:	f3c2 0340 	ubfx	r3, r2, #1, #1
    5114:	d511      	bpl.n	513a <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5116:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    511a:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
    511e:	2908      	cmp	r1, #8
    5120:	d11d      	bne.n	515e <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5122:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    5126:	2b05      	cmp	r3, #5
    5128:	d819      	bhi.n	515e <nrfx_power_init+0x5a>
    512a:	4910      	ldr	r1, [pc, #64]	; (516c <nrfx_power_init+0x68>)
    512c:	5cc9      	ldrb	r1, [r1, r3]
    512e:	2301      	movs	r3, #1
    5130:	b119      	cbz	r1, 513a <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    5132:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5136:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    513a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    513e:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    5142:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5146:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5148:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
    514c:	f7fd f91e 	bl	238c <arch_irq_is_enabled>
    5150:	b908      	cbnz	r0, 5156 <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5152:	f7fd f8f7 	bl	2344 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    5156:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    5158:	4805      	ldr	r0, [pc, #20]	; (5170 <nrfx_power_init+0x6c>)
    m_initialized = true;
    515a:	7023      	strb	r3, [r4, #0]
}
    515c:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    515e:	2301      	movs	r3, #1
    5160:	e7eb      	b.n	513a <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    5162:	4804      	ldr	r0, [pc, #16]	; (5174 <nrfx_power_init+0x70>)
    5164:	e7fa      	b.n	515c <nrfx_power_init+0x58>
    5166:	bf00      	nop
    5168:	2000152c 	.word	0x2000152c
    516c:	0000a37a 	.word	0x0000a37a
    5170:	0bad0000 	.word	0x0bad0000
    5174:	0bad000c 	.word	0x0bad000c

00005178 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    5178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    517c:	f44f 7260 	mov.w	r2, #896	; 0x380
    5180:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    5184:	4b01      	ldr	r3, [pc, #4]	; (518c <nrfx_power_usbevt_uninit+0x14>)
    5186:	2200      	movs	r2, #0
    5188:	601a      	str	r2, [r3, #0]
}
    518a:	4770      	bx	lr
    518c:	200011d0 	.word	0x200011d0

00005190 <nrfx_power_usbevt_init>:
{
    5190:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    5192:	f7ff fff1 	bl	5178 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    5196:	6803      	ldr	r3, [r0, #0]
    5198:	b10b      	cbz	r3, 519e <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    519a:	4a01      	ldr	r2, [pc, #4]	; (51a0 <nrfx_power_usbevt_init+0x10>)
    519c:	6013      	str	r3, [r2, #0]
}
    519e:	bd08      	pop	{r3, pc}
    51a0:	200011d0 	.word	0x200011d0

000051a4 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    51a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    51a8:	b510      	push	{r4, lr}
    51aa:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    51ae:	0762      	lsls	r2, r4, #29
    51b0:	d507      	bpl.n	51c2 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    51b2:	f44f 7084 	mov.w	r0, #264	; 0x108
    51b6:	f004 f8e3 	bl	9380 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    51ba:	b110      	cbz	r0, 51c2 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    51bc:	4b1e      	ldr	r3, [pc, #120]	; (5238 <nrfx_power_irq_handler+0x94>)
    51be:	681b      	ldr	r3, [r3, #0]
    51c0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    51c2:	06a3      	lsls	r3, r4, #26
    51c4:	d508      	bpl.n	51d8 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    51c6:	f44f 708a 	mov.w	r0, #276	; 0x114
    51ca:	f004 f8d9 	bl	9380 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    51ce:	b118      	cbz	r0, 51d8 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    51d0:	4b1a      	ldr	r3, [pc, #104]	; (523c <nrfx_power_irq_handler+0x98>)
    51d2:	2000      	movs	r0, #0
    51d4:	681b      	ldr	r3, [r3, #0]
    51d6:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    51d8:	0660      	lsls	r0, r4, #25
    51da:	d508      	bpl.n	51ee <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    51dc:	f44f 708c 	mov.w	r0, #280	; 0x118
    51e0:	f004 f8ce 	bl	9380 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    51e4:	b118      	cbz	r0, 51ee <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    51e6:	4b15      	ldr	r3, [pc, #84]	; (523c <nrfx_power_irq_handler+0x98>)
    51e8:	2001      	movs	r0, #1
    51ea:	681b      	ldr	r3, [r3, #0]
    51ec:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    51ee:	0621      	lsls	r1, r4, #24
    51f0:	d508      	bpl.n	5204 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    51f2:	f44f 708e 	mov.w	r0, #284	; 0x11c
    51f6:	f004 f8c3 	bl	9380 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    51fa:	b118      	cbz	r0, 5204 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    51fc:	4b10      	ldr	r3, [pc, #64]	; (5240 <nrfx_power_irq_handler+0x9c>)
    51fe:	2000      	movs	r0, #0
    5200:	681b      	ldr	r3, [r3, #0]
    5202:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    5204:	05e2      	lsls	r2, r4, #23
    5206:	d508      	bpl.n	521a <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    5208:	f44f 7090 	mov.w	r0, #288	; 0x120
    520c:	f004 f8b8 	bl	9380 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    5210:	b118      	cbz	r0, 521a <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    5212:	4b0b      	ldr	r3, [pc, #44]	; (5240 <nrfx_power_irq_handler+0x9c>)
    5214:	2001      	movs	r0, #1
    5216:	681b      	ldr	r3, [r3, #0]
    5218:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    521a:	05a3      	lsls	r3, r4, #22
    521c:	d50a      	bpl.n	5234 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    521e:	f44f 7092 	mov.w	r0, #292	; 0x124
    5222:	f004 f8ad 	bl	9380 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    5226:	b128      	cbz	r0, 5234 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    5228:	4b05      	ldr	r3, [pc, #20]	; (5240 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    522a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    522e:	681b      	ldr	r3, [r3, #0]
    5230:	2002      	movs	r0, #2
    5232:	4718      	bx	r3
}
    5234:	bd10      	pop	{r4, pc}
    5236:	bf00      	nop
    5238:	200011c8 	.word	0x200011c8
    523c:	200011cc 	.word	0x200011cc
    5240:	200011d0 	.word	0x200011d0

00005244 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5244:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5246:	4801      	ldr	r0, [pc, #4]	; (524c <nrfx_ppi_channel_alloc+0x8>)
    5248:	f7ff bb26 	b.w	4898 <nrfx_flag32_alloc>
    524c:	2000021c 	.word	0x2000021c

00005250 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    5250:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    5252:	4b30      	ldr	r3, [pc, #192]	; (5314 <twi_tx_start_transfer+0xc4>)
    5254:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5256:	2300      	movs	r3, #0
    5258:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    525c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    5260:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    5264:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    5268:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    526c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    5270:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    5274:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    5278:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    527c:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    527e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5282:	2301      	movs	r3, #1
    5284:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    5286:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
    528a:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    528c:	429a      	cmp	r2, r3
    528e:	bf18      	it	ne
    5290:	6083      	strne	r3, [r0, #8]
{
    5292:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    5294:	f004 f895 	bl	93c2 <twi_send_byte>

    if (p_cb->handler)
    5298:	682b      	ldr	r3, [r5, #0]
    529a:	b183      	cbz	r3, 52be <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    529c:	f240 2386 	movw	r3, #646	; 0x286
    52a0:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    52a2:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    52a4:	481c      	ldr	r0, [pc, #112]	; (5318 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    52a6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    52aa:	b003      	add	sp, #12
    52ac:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    52ae:	4629      	mov	r1, r5
    52b0:	4620      	mov	r0, r4
    52b2:	f004 f8a3 	bl	93fc <twi_transfer>
        while ((hw_timeout > 0) &&
    52b6:	b128      	cbz	r0, 52c4 <twi_tx_start_transfer+0x74>
            hw_timeout--;
    52b8:	9b01      	ldr	r3, [sp, #4]
    52ba:	3b01      	subs	r3, #1
    52bc:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    52be:	9b01      	ldr	r3, [sp, #4]
    52c0:	2b00      	cmp	r3, #0
    52c2:	dcf4      	bgt.n	52ae <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
    52c4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    52c8:	b95b      	cbnz	r3, 52e2 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    52ca:	4813      	ldr	r0, [pc, #76]	; (5318 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    52cc:	9b01      	ldr	r3, [sp, #4]
    52ce:	2b00      	cmp	r3, #0
    52d0:	dceb      	bgt.n	52aa <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    52d2:	2300      	movs	r3, #0
    52d4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    52d8:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    52da:	4810      	ldr	r0, [pc, #64]	; (531c <twi_tx_start_transfer+0xcc>)
    52dc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    52e0:	e7e3      	b.n	52aa <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
    52e2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    52e6:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    52ea:	b18b      	cbz	r3, 5310 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    52ec:	4a0c      	ldr	r2, [pc, #48]	; (5320 <twi_tx_start_transfer+0xd0>)
    52ee:	480b      	ldr	r0, [pc, #44]	; (531c <twi_tx_start_transfer+0xcc>)
    52f0:	f013 0f01 	tst.w	r3, #1
    52f4:	bf18      	it	ne
    52f6:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    52f8:	f013 0f02 	tst.w	r3, #2
    52fc:	f102 0201 	add.w	r2, r2, #1
    5300:	bf18      	it	ne
    5302:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    5304:	f013 0f04 	tst.w	r3, #4
    5308:	4b06      	ldr	r3, [pc, #24]	; (5324 <twi_tx_start_transfer+0xd4>)
    530a:	bf18      	it	ne
    530c:	4618      	movne	r0, r3
    530e:	e7dd      	b.n	52cc <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
    5310:	4802      	ldr	r0, [pc, #8]	; (531c <twi_tx_start_transfer+0xcc>)
    5312:	e7db      	b.n	52cc <twi_tx_start_transfer+0x7c>
    5314:	000186a0 	.word	0x000186a0
    5318:	0bad0000 	.word	0x0bad0000
    531c:	0bad0001 	.word	0x0bad0001
    5320:	0bae0000 	.word	0x0bae0000
    5324:	0bae0002 	.word	0x0bae0002

00005328 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    5328:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    532a:	4b34      	ldr	r3, [pc, #208]	; (53fc <twi_rx_start_transfer+0xd4>)
    532c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    532e:	2300      	movs	r3, #0
    5330:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    5334:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    5338:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    533c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    5340:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    5344:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    5348:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    534c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    5350:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    5352:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5356:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5358:	2b01      	cmp	r3, #1
{
    535a:	4604      	mov	r4, r0
    535c:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    535e:	d117      	bne.n	5390 <twi_rx_start_transfer+0x68>
    5360:	6a0b      	ldr	r3, [r1, #32]
    5362:	065b      	lsls	r3, r3, #25
    5364:	d414      	bmi.n	5390 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
    5366:	2302      	movs	r3, #2
    5368:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    536c:	2301      	movs	r3, #1
    536e:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    5370:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    5374:	2a02      	cmp	r2, #2
    5376:	bf18      	it	ne
    5378:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    537a:	682b      	ldr	r3, [r5, #0]
    537c:	b193      	cbz	r3, 53a4 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    537e:	f240 2386 	movw	r3, #646	; 0x286
    5382:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    5384:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    5386:	481e      	ldr	r0, [pc, #120]	; (5400 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    5388:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    538c:	b003      	add	sp, #12
    538e:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    5390:	2301      	movs	r3, #1
    5392:	e7e9      	b.n	5368 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    5394:	4629      	mov	r1, r5
    5396:	4620      	mov	r0, r4
    5398:	f004 f830 	bl	93fc <twi_transfer>
        while ((hw_timeout > 0) &&
    539c:	b128      	cbz	r0, 53aa <twi_rx_start_transfer+0x82>
               hw_timeout--;
    539e:	9b01      	ldr	r3, [sp, #4]
    53a0:	3b01      	subs	r3, #1
    53a2:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    53a4:	9b01      	ldr	r3, [sp, #4]
    53a6:	2b00      	cmp	r3, #0
    53a8:	dcf4      	bgt.n	5394 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    53aa:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    53ae:	b95b      	cbnz	r3, 53c8 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    53b0:	4813      	ldr	r0, [pc, #76]	; (5400 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    53b2:	9b01      	ldr	r3, [sp, #4]
    53b4:	2b00      	cmp	r3, #0
    53b6:	dce9      	bgt.n	538c <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    53b8:	2300      	movs	r3, #0
    53ba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    53be:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    53c0:	4810      	ldr	r0, [pc, #64]	; (5404 <twi_rx_start_transfer+0xdc>)
    53c2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    53c6:	e7e1      	b.n	538c <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    53c8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    53cc:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    53d0:	b18b      	cbz	r3, 53f6 <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    53d2:	4a0d      	ldr	r2, [pc, #52]	; (5408 <twi_rx_start_transfer+0xe0>)
    53d4:	480b      	ldr	r0, [pc, #44]	; (5404 <twi_rx_start_transfer+0xdc>)
    53d6:	f013 0f01 	tst.w	r3, #1
    53da:	bf18      	it	ne
    53dc:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    53de:	f013 0f02 	tst.w	r3, #2
    53e2:	f102 0201 	add.w	r2, r2, #1
    53e6:	bf18      	it	ne
    53e8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    53ea:	f013 0f04 	tst.w	r3, #4
    53ee:	4b07      	ldr	r3, [pc, #28]	; (540c <twi_rx_start_transfer+0xe4>)
    53f0:	bf18      	it	ne
    53f2:	4618      	movne	r0, r3
    53f4:	e7dd      	b.n	53b2 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
    53f6:	4803      	ldr	r0, [pc, #12]	; (5404 <twi_rx_start_transfer+0xdc>)
    53f8:	e7db      	b.n	53b2 <twi_rx_start_transfer+0x8a>
    53fa:	bf00      	nop
    53fc:	000186a0 	.word	0x000186a0
    5400:	0bad0000 	.word	0x0bad0000
    5404:	0bad0001 	.word	0x0bad0001
    5408:	0bae0000 	.word	0x0bae0000
    540c:	0bae0002 	.word	0x0bae0002

00005410 <nrfx_twi_init>:
{
    5410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5412:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5414:	4d29      	ldr	r5, [pc, #164]	; (54bc <nrfx_twi_init+0xac>)
    5416:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    541a:	fb0c fc07 	mul.w	ip, ip, r7
    541e:	eb05 040c 	add.w	r4, r5, ip
    5422:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    5426:	2e00      	cmp	r6, #0
    5428:	d146      	bne.n	54b8 <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    542a:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    542c:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    542e:	7b4b      	ldrb	r3, [r1, #13]
    5430:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    5434:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    5436:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
    5438:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    543c:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    5440:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    5444:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    5448:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    544c:	b9e3      	cbnz	r3, 5488 <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
    544e:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
    5450:	4b1b      	ldr	r3, [pc, #108]	; (54c0 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
    5452:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    5456:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    5458:	2c01      	cmp	r4, #1
    545a:	bf18      	it	ne
    545c:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5460:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 1: return NRF_P1;
    5464:	bf08      	it	eq
    5466:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
    5468:	f240 6c0c 	movw	ip, #1548	; 0x60c
    546c:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    5470:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    5472:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    5476:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    5478:	2c01      	cmp	r4, #1
    547a:	bf18      	it	ne
    547c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5480:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    5484:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    5488:	7bcb      	ldrb	r3, [r1, #15]
    548a:	b92b      	cbnz	r3, 5498 <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    548c:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    5490:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    5494:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    5498:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    549a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    549e:	b11a      	cbz	r2, 54a8 <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    54a0:	f340 3007 	sbfx	r0, r0, #12, #8
    54a4:	f7fc ff4e 	bl	2344 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    54a8:	233c      	movs	r3, #60	; 0x3c
    54aa:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    54ae:	4805      	ldr	r0, [pc, #20]	; (54c4 <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    54b0:	2301      	movs	r3, #1
    54b2:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    54b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    54b8:	4803      	ldr	r0, [pc, #12]	; (54c8 <nrfx_twi_init+0xb8>)
    54ba:	e7fc      	b.n	54b6 <nrfx_twi_init+0xa6>
    54bc:	200011d4 	.word	0x200011d4
    54c0:	50000300 	.word	0x50000300
    54c4:	0bad0000 	.word	0x0bad0000
    54c8:	0bad0005 	.word	0x0bad0005

000054cc <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    54cc:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    54ce:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    54d0:	2105      	movs	r1, #5
    54d2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    54d6:	4b04      	ldr	r3, [pc, #16]	; (54e8 <nrfx_twi_enable+0x1c>)
    54d8:	213c      	movs	r1, #60	; 0x3c
    54da:	fb01 3302 	mla	r3, r1, r2, r3
    54de:	2202      	movs	r2, #2
    54e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    54e4:	4770      	bx	lr
    54e6:	bf00      	nop
    54e8:	200011d4 	.word	0x200011d4

000054ec <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    54ec:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    54ee:	4b0c      	ldr	r3, [pc, #48]	; (5520 <nrfx_twi_disable+0x34>)
{
    54f0:	b510      	push	{r4, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    54f2:	7904      	ldrb	r4, [r0, #4]
    54f4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    54f8:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    54fc:	4b09      	ldr	r3, [pc, #36]	; (5524 <nrfx_twi_disable+0x38>)
    54fe:	f021 0103 	bic.w	r1, r1, #3
    5502:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    5506:	2100      	movs	r1, #0
    5508:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    550c:	223c      	movs	r2, #60	; 0x3c
    550e:	fb02 3304 	mla	r3, r2, r4, r3
    5512:	2201      	movs	r2, #1
    5514:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
    5518:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
    551c:	bd10      	pop	{r4, pc}
    551e:	bf00      	nop
    5520:	00044286 	.word	0x00044286
    5524:	200011d4 	.word	0x200011d4

00005528 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    5528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    552c:	4f31      	ldr	r7, [pc, #196]	; (55f4 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    552e:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    5530:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    5534:	233c      	movs	r3, #60	; 0x3c
    5536:	fb03 7304 	mla	r3, r3, r4, r7
{
    553a:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    553c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    5540:	2b01      	cmp	r3, #1
{
    5542:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    5544:	d104      	bne.n	5550 <nrfx_twi_xfer+0x28>
    5546:	780b      	ldrb	r3, [r1, #0]
    5548:	2b01      	cmp	r3, #1
    554a:	d106      	bne.n	555a <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    554c:	482a      	ldr	r0, [pc, #168]	; (55f8 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    554e:	e011      	b.n	5574 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    5550:	2b02      	cmp	r3, #2
    5552:	d102      	bne.n	555a <nrfx_twi_xfer+0x32>
    5554:	780b      	ldrb	r3, [r1, #0]
    5556:	2b01      	cmp	r3, #1
    5558:	d1f8      	bne.n	554c <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    555a:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    555c:	4b27      	ldr	r3, [pc, #156]	; (55fc <nrfx_twi_xfer+0xd4>)
    555e:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    5562:	fb06 7604 	mla	r6, r6, r4, r7
    5566:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    556a:	b12b      	cbz	r3, 5578 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    556c:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    556e:	4824      	ldr	r0, [pc, #144]	; (5600 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    5570:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    5574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    5578:	f08c 0304 	eor.w	r3, ip, #4
    557c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    5580:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    5584:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    5588:	46a8      	mov	r8, r5
    558a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    558e:	f106 0e0c 	add.w	lr, r6, #12
    5592:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5596:	f8d8 3000 	ldr.w	r3, [r8]
    559a:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    559e:	686b      	ldr	r3, [r5, #4]
    55a0:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    55a2:	68eb      	ldr	r3, [r5, #12]
    55a4:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    55a6:	786b      	ldrb	r3, [r5, #1]
    55a8:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    55ac:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    55ae:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    55b2:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    55b4:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    55b8:	d017      	beq.n	55ea <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    55ba:	b99b      	cbnz	r3, 55e4 <nrfx_twi_xfer+0xbc>
    55bc:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    55c0:	233c      	movs	r3, #60	; 0x3c
    55c2:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    55c6:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    55c8:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    55cc:	4648      	mov	r0, r9
    55ce:	f7ff fe3f 	bl	5250 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    55d2:	233c      	movs	r3, #60	; 0x3c
    55d4:	435c      	muls	r4, r3
    55d6:	193a      	adds	r2, r7, r4
    55d8:	593b      	ldr	r3, [r7, r4]
    55da:	2b00      	cmp	r3, #0
    55dc:	d1ca      	bne.n	5574 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    55de:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    55e2:	e7c7      	b.n	5574 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    55e4:	f04f 0c01 	mov.w	ip, #1
    55e8:	e7ea      	b.n	55c0 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    55ea:	4651      	mov	r1, sl
    55ec:	4648      	mov	r0, r9
    55ee:	f7ff fe9b 	bl	5328 <twi_rx_start_transfer>
    55f2:	e7ee      	b.n	55d2 <nrfx_twi_xfer+0xaa>
    55f4:	200011d4 	.word	0x200011d4
    55f8:	0bad0005 	.word	0x0bad0005
    55fc:	00044286 	.word	0x00044286
    5600:	0bad000b 	.word	0x0bad000b

00005604 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    5604:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    5606:	4c2b      	ldr	r4, [pc, #172]	; (56b4 <nrfx_twi_0_irq_handler+0xb0>)
    5608:	482b      	ldr	r0, [pc, #172]	; (56b8 <nrfx_twi_0_irq_handler+0xb4>)
{
    560a:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    560c:	4621      	mov	r1, r4
    560e:	f003 fef5 	bl	93fc <twi_transfer>
    5612:	2800      	cmp	r0, #0
    5614:	d140      	bne.n	5698 <nrfx_twi_0_irq_handler+0x94>
    if (!p_cb->error &&
    5616:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    561a:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
    561e:	b9ff      	cbnz	r7, 5660 <nrfx_twi_0_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    5620:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    5622:	1e9a      	subs	r2, r3, #2
    5624:	2a01      	cmp	r2, #1
    5626:	d81b      	bhi.n	5660 <nrfx_twi_0_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    5628:	6a61      	ldr	r1, [r4, #36]	; 0x24
    562a:	69a2      	ldr	r2, [r4, #24]
    562c:	4291      	cmp	r1, r2
    562e:	d117      	bne.n	5660 <nrfx_twi_0_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    5630:	69e2      	ldr	r2, [r4, #28]
    5632:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    5634:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    5638:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    563a:	481f      	ldr	r0, [pc, #124]	; (56b8 <nrfx_twi_0_irq_handler+0xb4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    563c:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    563e:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    5640:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    5644:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    5648:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    564a:	d104      	bne.n	5656 <nrfx_twi_0_irq_handler+0x52>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    564c:	b007      	add	sp, #28
    564e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    5652:	f7ff bdfd 	b.w	5250 <twi_tx_start_transfer>
}
    5656:	b007      	add	sp, #28
    5658:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    565c:	f7ff be64 	b.w	5328 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    5660:	4e16      	ldr	r6, [pc, #88]	; (56bc <nrfx_twi_0_irq_handler+0xb8>)
    5662:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5664:	ad01      	add	r5, sp, #4
    5666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5668:	6833      	ldr	r3, [r6, #0]
    566a:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    566c:	b1ff      	cbz	r7, 56ae <nrfx_twi_0_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
    566e:	4a12      	ldr	r2, [pc, #72]	; (56b8 <nrfx_twi_0_irq_handler+0xb4>)
    5670:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    5674:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    5678:	0799      	lsls	r1, r3, #30
    567a:	d50f      	bpl.n	569c <nrfx_twi_0_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    567c:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    567e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    5682:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    5684:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
    5688:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    568c:	d000      	beq.n	5690 <nrfx_twi_0_irq_handler+0x8c>
    568e:	b11f      	cbz	r7, 5698 <nrfx_twi_0_irq_handler+0x94>
            p_cb->handler(&event, p_cb->p_context);
    5690:	e9d4 3100 	ldrd	r3, r1, [r4]
    5694:	4668      	mov	r0, sp
    5696:	4798      	blx	r3
}
    5698:	b007      	add	sp, #28
    569a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    569c:	075a      	lsls	r2, r3, #29
    569e:	d501      	bpl.n	56a4 <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    56a0:	2302      	movs	r3, #2
    56a2:	e7ec      	b.n	567e <nrfx_twi_0_irq_handler+0x7a>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    56a4:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
    56a6:	bf4c      	ite	mi
    56a8:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    56aa:	2304      	movpl	r3, #4
    56ac:	e7e7      	b.n	567e <nrfx_twi_0_irq_handler+0x7a>
            event.type = NRFX_TWI_EVT_DONE;
    56ae:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
    56b2:	e7e6      	b.n	5682 <nrfx_twi_0_irq_handler+0x7e>
    56b4:	200011d4 	.word	0x200011d4
    56b8:	40003000 	.word	0x40003000
    56bc:	200011e0 	.word	0x200011e0

000056c0 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    56c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    56c4:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    56c6:	4d2b      	ldr	r5, [pc, #172]	; (5774 <nrfx_twim_init+0xb4>)
    56c8:	f04f 0c34 	mov.w	ip, #52	; 0x34
    56cc:	fb0c fc06 	mul.w	ip, ip, r6
    56d0:	eb05 040c 	add.w	r4, r5, ip
    56d4:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    56d8:	2f00      	cmp	r7, #0
    56da:	d149      	bne.n	5770 <nrfx_twim_init+0xb0>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    56dc:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    56de:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    56e0:	7b4b      	ldrb	r3, [r1, #13]
    56e2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    56e6:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->handler         = event_handler;
    56e8:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->int_mask        = 0;
    56ec:	60a7      	str	r7, [r4, #8]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    56ee:	f891 c00f 	ldrb.w	ip, [r1, #15]
    p_cb->repeated        = false;
    56f2:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    56f6:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    56fa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    56fe:	b1cb      	cbz	r3, 5734 <nrfx_twim_init+0x74>
    5700:	f1bc 0f00 	cmp.w	ip, #0
    5704:	d105      	bne.n	5712 <nrfx_twim_init+0x52>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    5706:	e9d1 4300 	ldrd	r4, r3, [r1]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    570a:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    570e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    5712:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    5714:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
    5718:	b11a      	cbz	r2, 5722 <nrfx_twim_init+0x62>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    571a:	f340 3007 	sbfx	r0, r0, #12, #8
    571e:	f7fc fe11 	bl	2344 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5722:	2334      	movs	r3, #52	; 0x34
    5724:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5728:	4813      	ldr	r0, [pc, #76]	; (5778 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    572a:	2301      	movs	r3, #1
    572c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    5730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    5734:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
    5736:	4b11      	ldr	r3, [pc, #68]	; (577c <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
    5738:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    573c:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    573e:	2c01      	cmp	r4, #1
    5740:	bf18      	it	ne
    5742:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5746:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 1: return NRF_P1;
    574a:	bf08      	it	eq
    574c:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    574e:	f240 6e0c 	movw	lr, #1548	; 0x60c
    5752:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    5756:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    5758:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    575c:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    575e:	2c01      	cmp	r4, #1
    5760:	bf18      	it	ne
    5762:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5766:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
    576a:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    576e:	e7c7      	b.n	5700 <nrfx_twim_init+0x40>
        return err_code;
    5770:	4803      	ldr	r0, [pc, #12]	; (5780 <nrfx_twim_init+0xc0>)
    5772:	e7dd      	b.n	5730 <nrfx_twim_init+0x70>
    5774:	20001210 	.word	0x20001210
    5778:	0bad0000 	.word	0x0bad0000
    577c:	50000300 	.word	0x50000300
    5780:	0bad0005 	.word	0x0bad0005

00005784 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    5784:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    5786:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    5788:	2106      	movs	r1, #6
    578a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    578e:	4b04      	ldr	r3, [pc, #16]	; (57a0 <nrfx_twim_enable+0x1c>)
    5790:	2134      	movs	r1, #52	; 0x34
    5792:	fb01 3302 	mla	r3, r1, r2, r3
    5796:	2202      	movs	r2, #2
    5798:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    579c:	4770      	bx	lr
    579e:	bf00      	nop
    57a0:	20001210 	.word	0x20001210

000057a4 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    57a4:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    57a6:	4b0c      	ldr	r3, [pc, #48]	; (57d8 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    57a8:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    57aa:	2034      	movs	r0, #52	; 0x34
    57ac:	fb00 3301 	mla	r3, r0, r1, r3
    57b0:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    57b2:	480a      	ldr	r0, [pc, #40]	; (57dc <nrfx_twim_disable+0x38>)
    57b4:	6099      	str	r1, [r3, #8]
    57b6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    57ba:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    57be:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    57c2:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    57c6:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    57ca:	2201      	movs	r2, #1
    57cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    57d0:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    57d4:	4770      	bx	lr
    57d6:	bf00      	nop
    57d8:	20001210 	.word	0x20001210
    57dc:	019c0202 	.word	0x019c0202

000057e0 <nrfx_twim_uninit>:
{
    57e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    57e2:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
    57e4:	4d1e      	ldr	r5, [pc, #120]	; (5860 <nrfx_twim_uninit+0x80>)
    57e6:	2334      	movs	r3, #52	; 0x34
    57e8:	4373      	muls	r3, r6
{
    57ea:	4604      	mov	r4, r0
    if (p_cb->handler)
    57ec:	58eb      	ldr	r3, [r5, r3]
    57ee:	b123      	cbz	r3, 57fa <nrfx_twim_uninit+0x1a>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    57f0:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
    57f2:	f340 3007 	sbfx	r0, r0, #12, #8
    57f6:	f7fc fdb5 	bl	2364 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
    57fa:	4620      	mov	r0, r4
    57fc:	f7ff ffd2 	bl	57a4 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
    5800:	2334      	movs	r3, #52	; 0x34
    5802:	fb03 5306 	mla	r3, r3, r6, r5
    5806:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    580a:	bb0a      	cbnz	r2, 5850 <nrfx_twim_uninit+0x70>
    580c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    5810:	b9f3      	cbnz	r3, 5850 <nrfx_twim_uninit+0x70>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
    5812:	6824      	ldr	r4, [r4, #0]
        case 1: return NRF_P1;
    5814:	4b13      	ldr	r3, [pc, #76]	; (5864 <nrfx_twim_uninit+0x84>)
    return p_reg->PSEL.SCL;
    5816:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    581a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    581e:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
    5820:	2a01      	cmp	r2, #1
    5822:	bf18      	it	ne
    5824:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5828:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    582c:	bf08      	it	eq
    582e:	461f      	moveq	r7, r3
    reg->PIN_CNF[pin_number] = cnf;
    5830:	2002      	movs	r0, #2
    5832:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
    return p_reg->PSEL.SDA;
    5836:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    583a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    583e:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
    5840:	2a01      	cmp	r2, #1
    5842:	bf18      	it	ne
    5844:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    5848:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    584c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    5850:	2334      	movs	r3, #52	; 0x34
    5852:	fb03 5506 	mla	r5, r3, r6, r5
    5856:	2300      	movs	r3, #0
    5858:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    585e:	bf00      	nop
    5860:	20001210 	.word	0x20001210
    5864:	50000300 	.word	0x50000300

00005868 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    5868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    586c:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 5b40 <nrfx_twim_xfer+0x2d8>
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    5870:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    5874:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    5876:	2334      	movs	r3, #52	; 0x34
    5878:	fb03 c30e 	mla	r3, r3, lr, ip
{
    587c:	4617      	mov	r7, r2
    p_cb->error = false;
    587e:	2200      	movs	r2, #0
    5880:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    5884:	684b      	ldr	r3, [r1, #4]
{
    5886:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    5888:	b14b      	cbz	r3, 589e <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    588a:	68cb      	ldr	r3, [r1, #12]
    588c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    5890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5894:	d003      	beq.n	589e <nrfx_twim_xfer+0x36>
        return err_code;
    5896:	4eab      	ldr	r6, [pc, #684]	; (5b44 <nrfx_twim_xfer+0x2dc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5898:	4630      	mov	r0, r6
    589a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    589e:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    58a0:	4ba9      	ldr	r3, [pc, #676]	; (5b48 <nrfx_twim_xfer+0x2e0>)
    58a2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    58a6:	fb06 c60e 	mla	r6, r6, lr, ip
    58aa:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    58ae:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    58b2:	b123      	cbz	r3, 58be <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    58b4:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    58b6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    58ba:	4ea4      	ldr	r6, [pc, #656]	; (5b4c <nrfx_twim_xfer+0x2e4>)
    58bc:	e7ec      	b.n	5898 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    58be:	f017 0f14 	tst.w	r7, #20
    58c2:	bf0c      	ite	eq
    58c4:	2301      	moveq	r3, #1
    58c6:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    58c8:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    58cc:	46a9      	mov	r9, r5
    58ce:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    58d2:	f106 080c 	add.w	r8, r6, #12
    58d6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    58da:	f8d9 3000 	ldr.w	r3, [r9]
    58de:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    58e2:	f3c7 1300 	ubfx	r3, r7, #4, #1
    58e6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    58ea:	6237      	str	r7, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    58ec:	786b      	ldrb	r3, [r5, #1]
    58ee:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58f2:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    58f6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    58fa:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    58fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    5902:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    5906:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    590a:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    590e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    5912:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    5916:	bf18      	it	ne
    5918:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    591a:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    591e:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    5922:	bf18      	it	ne
    5924:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    5926:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    592a:	782a      	ldrb	r2, [r5, #0]
    592c:	2a03      	cmp	r2, #3
    592e:	f200 80b5 	bhi.w	5a9c <nrfx_twim_xfer+0x234>
    5932:	e8df f002 	tbb	[pc, r2]
    5936:	a084      	.short	0xa084
    5938:	0269      	.short	0x0269
    593a:	692b      	ldr	r3, [r5, #16]
    593c:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    5940:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    5944:	d1a7      	bne.n	5896 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    5946:	f44f 7180 	mov.w	r1, #256	; 0x100
    594a:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    594e:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    5950:	6869      	ldr	r1, [r5, #4]
    5952:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5956:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    595a:	2100      	movs	r1, #0
    595c:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    5960:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5964:	2001      	movs	r0, #1
    5966:	6220      	str	r0, [r4, #32]
    5968:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    596a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    596e:	2800      	cmp	r0, #0
    5970:	d0fb      	beq.n	596a <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5972:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    5976:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    597a:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    597c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    5980:	2334      	movs	r3, #52	; 0x34
    5982:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
    5986:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    598a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    598e:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    5990:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    5992:	4e6f      	ldr	r6, [pc, #444]	; (5b50 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    5994:	0739      	lsls	r1, r7, #28
    5996:	d406      	bmi.n	59a6 <nrfx_twim_xfer+0x13e>
    5998:	2a03      	cmp	r2, #3
    599a:	d004      	beq.n	59a6 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    599c:	2201      	movs	r2, #1
    599e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    59a0:	686b      	ldr	r3, [r5, #4]
    59a2:	b903      	cbnz	r3, 59a6 <nrfx_twim_xfer+0x13e>
    59a4:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    59a6:	2334      	movs	r3, #52	; 0x34
    59a8:	fb03 f30e 	mul.w	r3, r3, lr
    59ac:	eb0c 0103 	add.w	r1, ip, r3
    59b0:	f85c 2003 	ldr.w	r2, [ip, r3]
    59b4:	2a00      	cmp	r2, #0
    59b6:	d174      	bne.n	5aa2 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
    59b8:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59ba:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    59be:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    59c2:	2800      	cmp	r0, #0
    59c4:	f040 8088 	bne.w	5ad8 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    59c8:	3b00      	subs	r3, #0
    59ca:	bf18      	it	ne
    59cc:	2301      	movne	r3, #1
    59ce:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    59d2:	2800      	cmp	r0, #0
    59d4:	f000 8086 	beq.w	5ae4 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59d8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    59dc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59e0:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    59e4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    59e8:	b115      	cbz	r5, 59f0 <nrfx_twim_xfer+0x188>
    59ea:	f410 7f00 	tst.w	r0, #512	; 0x200
    59ee:	d104      	bne.n	59fa <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    59f0:	6221      	str	r1, [r4, #32]
    59f2:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    59f4:	2d00      	cmp	r5, #0
    59f6:	d0e0      	beq.n	59ba <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
    59f8:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    59fa:	05c0      	lsls	r0, r0, #23
    59fc:	d572      	bpl.n	5ae4 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59fe:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    5a02:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    5a06:	e7d8      	b.n	59ba <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    5a08:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5a0a:	68e9      	ldr	r1, [r5, #12]
    5a0c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5a10:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    5a14:	692b      	ldr	r3, [r5, #16]
    5a16:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    5a1a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    5a1e:	f47f af3a 	bne.w	5896 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    5a22:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5a24:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    5a28:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    5a2c:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    5a30:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    5a34:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    5a36:	fb03 c30e 	mla	r3, r3, lr, ip
    5a3a:	2102      	movs	r1, #2
    5a3c:	e012      	b.n	5a64 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    5a3e:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5a40:	68e9      	ldr	r1, [r5, #12]
    5a42:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    5a46:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    5a4a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    5a4e:	f04f 0334 	mov.w	r3, #52	; 0x34
    5a52:	d00b      	beq.n	5a6c <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
    5a54:	f44f 7180 	mov.w	r1, #256	; 0x100
    5a58:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    5a5c:	fb03 c30e 	mla	r3, r3, lr, ip
    5a60:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    5a64:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a66:	2301      	movs	r3, #1
    5a68:	6223      	str	r3, [r4, #32]
    5a6a:	e791      	b.n	5990 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
    5a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
    5a70:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    5a74:	e7df      	b.n	5a36 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    5a76:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5a78:	68e9      	ldr	r1, [r5, #12]
    5a7a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5a7e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    5a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    5a86:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    5a8a:	2334      	movs	r3, #52	; 0x34
    5a8c:	fb03 c30e 	mla	r3, r3, lr, ip
    5a90:	2102      	movs	r1, #2
    5a92:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a94:	2301      	movs	r3, #1
    5a96:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    5a98:	2300      	movs	r3, #0
    5a9a:	e77a      	b.n	5992 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
    5a9c:	4e2d      	ldr	r6, [pc, #180]	; (5b54 <nrfx_twim_xfer+0x2ec>)
    5a9e:	2308      	movs	r3, #8
    5aa0:	e778      	b.n	5994 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    5aa2:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
    5aa4:	bf44      	itt	mi
    5aa6:	2300      	movmi	r3, #0
    5aa8:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    5aaa:	067b      	lsls	r3, r7, #25
    5aac:	d406      	bmi.n	5abc <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    5aae:	2334      	movs	r3, #52	; 0x34
    5ab0:	fb03 c30e 	mla	r3, r3, lr, ip
    5ab4:	689a      	ldr	r2, [r3, #8]
    5ab6:	f042 0202 	orr.w	r2, r2, #2
    5aba:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    5abc:	2334      	movs	r3, #52	; 0x34
    5abe:	fb03 cc0e 	mla	ip, r3, lr, ip
    5ac2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    5ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5aca:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    5ace:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
    5ad2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5ad6:	e6df      	b.n	5898 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ad8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    5adc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    5ae0:	2301      	movs	r3, #1
    5ae2:	e774      	b.n	59ce <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	f43f af68 	beq.w	59ba <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
    5aea:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    5aec:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    5af0:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    5af4:	fb01 c20e 	mla	r2, r1, lr, ip
    5af8:	2000      	movs	r0, #0
    5afa:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    5afe:	b18b      	cbz	r3, 5b24 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    5b00:	4a15      	ldr	r2, [pc, #84]	; (5b58 <nrfx_twim_xfer+0x2f0>)
    5b02:	4e16      	ldr	r6, [pc, #88]	; (5b5c <nrfx_twim_xfer+0x2f4>)
    5b04:	f013 0f01 	tst.w	r3, #1
    5b08:	bf18      	it	ne
    5b0a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    5b0c:	f013 0f02 	tst.w	r3, #2
    5b10:	f102 0201 	add.w	r2, r2, #1
    5b14:	bf18      	it	ne
    5b16:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    5b18:	f013 0f04 	tst.w	r3, #4
    5b1c:	4b10      	ldr	r3, [pc, #64]	; (5b60 <nrfx_twim_xfer+0x2f8>)
    5b1e:	bf18      	it	ne
    5b20:	461e      	movne	r6, r3
    5b22:	e6b9      	b.n	5898 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    5b24:	067b      	lsls	r3, r7, #25
    5b26:	f53f aeb7 	bmi.w	5898 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    5b2a:	fb0e c101 	mla	r1, lr, r1, ip
    5b2e:	4620      	mov	r0, r4
    5b30:	f003 fcf0 	bl	9514 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    5b34:	4b09      	ldr	r3, [pc, #36]	; (5b5c <nrfx_twim_xfer+0x2f4>)
    5b36:	2800      	cmp	r0, #0
    5b38:	bf08      	it	eq
    5b3a:	461e      	moveq	r6, r3
    5b3c:	e6ac      	b.n	5898 <nrfx_twim_xfer+0x30>
    5b3e:	bf00      	nop
    5b40:	20001210 	.word	0x20001210
    5b44:	0bad000a 	.word	0x0bad000a
    5b48:	019c0202 	.word	0x019c0202
    5b4c:	0bad000b 	.word	0x0bad000b
    5b50:	0bad0000 	.word	0x0bad0000
    5b54:	0bad0004 	.word	0x0bad0004
    5b58:	0bae0000 	.word	0x0bae0000
    5b5c:	0bad0001 	.word	0x0bad0001
    5b60:	0bae0002 	.word	0x0bae0002

00005b64 <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    5b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5b6a:	4c5c      	ldr	r4, [pc, #368]	; (5cdc <nrfx_twim_1_irq_handler+0x178>)
    5b6c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    5b70:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    5b72:	b302      	cbz	r2, 5bb6 <nrfx_twim_1_irq_handler+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b74:	2200      	movs	r2, #0
    5b76:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    5b7a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b7e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    5b82:	b9c2      	cbnz	r2, 5bb6 <nrfx_twim_1_irq_handler+0x52>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    5b84:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    5b86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    5b8a:	2202      	movs	r2, #2
    5b8c:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    5b8e:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
    5b90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b94:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    5b98:	b11a      	cbz	r2, 5ba2 <nrfx_twim_1_irq_handler+0x3e>
    return p_reg->SHORTS;
    5b9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    5b9e:	059f      	lsls	r7, r3, #22
    5ba0:	d404      	bmi.n	5bac <nrfx_twim_1_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ba2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5ba6:	2201      	movs	r2, #1
    5ba8:	621a      	str	r2, [r3, #32]
    5baa:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    5bac:	2301      	movs	r3, #1
    5bae:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
}
    5bb2:	b007      	add	sp, #28
    5bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bb6:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    5bba:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	d055      	beq.n	5c6e <nrfx_twim_1_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bc2:	2300      	movs	r3, #0
    5bc4:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    5bc8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    5bcc:	6a23      	ldr	r3, [r4, #32]
    5bce:	065e      	lsls	r6, r3, #25
    5bd0:	d40a      	bmi.n	5be8 <nrfx_twim_1_irq_handler+0x84>
    5bd2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    5bd6:	b93b      	cbnz	r3, 5be8 <nrfx_twim_1_irq_handler+0x84>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    5bd8:	4940      	ldr	r1, [pc, #256]	; (5cdc <nrfx_twim_1_irq_handler+0x178>)
    5bda:	4628      	mov	r0, r5
    5bdc:	f003 fc9a 	bl	9514 <xfer_completeness_check>
    5be0:	f080 0001 	eor.w	r0, r0, #1
    5be4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    5be8:	6a23      	ldr	r3, [r4, #32]
    5bea:	f013 0704 	ands.w	r7, r3, #4
    5bee:	d122      	bne.n	5c36 <nrfx_twim_1_irq_handler+0xd2>
            event.xfer_desc = p_cb->xfer_desc;
    5bf0:	4e3b      	ldr	r6, [pc, #236]	; (5ce0 <nrfx_twim_1_irq_handler+0x17c>)
            if (!p_cb->repeated || p_cb->error)
    5bf2:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    5bf6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5bf8:	ad01      	add	r5, sp, #4
    5bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5bfc:	6833      	ldr	r3, [r6, #0]
    5bfe:	602b      	str	r3, [r5, #0]
    5c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5c04:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    5c08:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    5c0c:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    5c10:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    5c14:	f1bc 0f00 	cmp.w	ip, #0
    5c18:	d002      	beq.n	5c20 <nrfx_twim_1_irq_handler+0xbc>
    5c1a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    5c1e:	b152      	cbz	r2, 5c36 <nrfx_twim_1_irq_handler+0xd2>
    p_reg->SHORTS = mask;
    5c20:	2200      	movs	r2, #0
    5c22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    5c26:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    5c28:	4a2e      	ldr	r2, [pc, #184]	; (5ce4 <nrfx_twim_1_irq_handler+0x180>)
    5c2a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c2e:	4b2e      	ldr	r3, [pc, #184]	; (5ce8 <nrfx_twim_1_irq_handler+0x184>)
    5c30:	2210      	movs	r2, #16
    5c32:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    5c36:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    5c3a:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    5c3e:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    5c42:	0798      	lsls	r0, r3, #30
    5c44:	d53c      	bpl.n	5cc0 <nrfx_twim_1_irq_handler+0x15c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    5c46:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    5c48:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    5c4c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    5c50:	b90b      	cbnz	r3, 5c56 <nrfx_twim_1_irq_handler+0xf2>
        p_cb->busy = false;
    5c52:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    5c56:	6a23      	ldr	r3, [r4, #32]
    5c58:	075b      	lsls	r3, r3, #29
    5c5a:	d503      	bpl.n	5c64 <nrfx_twim_1_irq_handler+0x100>
    5c5c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    5c60:	2b00      	cmp	r3, #0
    5c62:	d0a6      	beq.n	5bb2 <nrfx_twim_1_irq_handler+0x4e>
        p_cb->handler(&event, p_cb->p_context);
    5c64:	e9d4 3100 	ldrd	r3, r1, [r4]
    5c68:	4668      	mov	r0, sp
    5c6a:	4798      	blx	r3
}
    5c6c:	e7a1      	b.n	5bb2 <nrfx_twim_1_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c6e:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    5c72:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    5c76:	7b23      	ldrb	r3, [r4, #12]
    5c78:	b983      	cbnz	r3, 5c9c <nrfx_twim_1_irq_handler+0x138>
            event.xfer_desc = p_cb->xfer_desc;
    5c7a:	4f19      	ldr	r7, [pc, #100]	; (5ce0 <nrfx_twim_1_irq_handler+0x17c>)
    5c7c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5c7e:	ae01      	add	r6, sp, #4
    5c80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5c82:	683b      	ldr	r3, [r7, #0]
    5c84:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    5c86:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	d1d3      	bne.n	5c36 <nrfx_twim_1_irq_handler+0xd2>
    p_reg->SHORTS = mask;
    5c8e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    5c92:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    5c94:	4b13      	ldr	r3, [pc, #76]	; (5ce4 <nrfx_twim_1_irq_handler+0x180>)
    5c96:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    5c9a:	e7c8      	b.n	5c2e <nrfx_twim_1_irq_handler+0xca>
    p_reg->SHORTS = mask;
    5c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
    5ca0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    5ca4:	f240 2302 	movw	r3, #514	; 0x202
    5ca8:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    5caa:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    5cae:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    5cb2:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    5cb4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cb8:	2301      	movs	r3, #1
    5cba:	60ab      	str	r3, [r5, #8]
    5cbc:	622b      	str	r3, [r5, #32]
            return;
    5cbe:	e778      	b.n	5bb2 <nrfx_twim_1_irq_handler+0x4e>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    5cc0:	0759      	lsls	r1, r3, #29
    5cc2:	d501      	bpl.n	5cc8 <nrfx_twim_1_irq_handler+0x164>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    5cc4:	2302      	movs	r3, #2
    5cc6:	e7bf      	b.n	5c48 <nrfx_twim_1_irq_handler+0xe4>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    5cc8:	07da      	lsls	r2, r3, #31
    5cca:	d501      	bpl.n	5cd0 <nrfx_twim_1_irq_handler+0x16c>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    5ccc:	2303      	movs	r3, #3
    5cce:	e7bb      	b.n	5c48 <nrfx_twim_1_irq_handler+0xe4>
    else if (p_cb->error)
    5cd0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    5cd4:	2b00      	cmp	r3, #0
    5cd6:	d0b7      	beq.n	5c48 <nrfx_twim_1_irq_handler+0xe4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    5cd8:	2304      	movs	r3, #4
    5cda:	e7b5      	b.n	5c48 <nrfx_twim_1_irq_handler+0xe4>
    5cdc:	20001210 	.word	0x20001210
    5ce0:	2000121c 	.word	0x2000121c
    5ce4:	019c0202 	.word	0x019c0202
    5ce8:	e000e100 	.word	0xe000e100

00005cec <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5cec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5cf0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5cf4:	2a08      	cmp	r2, #8
    5cf6:	d106      	bne.n	5d06 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5cf8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    5cfc:	2b05      	cmp	r3, #5
    5cfe:	d804      	bhi.n	5d0a <nrf52_errata_187+0x1e>
    5d00:	4a03      	ldr	r2, [pc, #12]	; (5d10 <nrf52_errata_187+0x24>)
    5d02:	5cd0      	ldrb	r0, [r2, r3]
    5d04:	4770      	bx	lr
        return false;
    5d06:	2000      	movs	r0, #0
    5d08:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5d0a:	2001      	movs	r0, #1
}
    5d0c:	4770      	bx	lr
    5d0e:	bf00      	nop
    5d10:	0000a380 	.word	0x0000a380

00005d14 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    5d14:	4b05      	ldr	r3, [pc, #20]	; (5d2c <ep_state_access+0x18>)
    5d16:	f010 0f80 	tst.w	r0, #128	; 0x80
    5d1a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    5d1e:	bf08      	it	eq
    5d20:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    5d22:	f000 000f 	and.w	r0, r0, #15
}
    5d26:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    5d2a:	4770      	bx	lr
    5d2c:	200013b4 	.word	0x200013b4

00005d30 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
    5d30:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    5d32:	f003 fc1f 	bl	9574 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    5d36:	b118      	cbz	r0, 5d40 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    5d38:	4b03      	ldr	r3, [pc, #12]	; (5d48 <usbd_dma_pending_clear+0x18>)
    5d3a:	2200      	movs	r2, #0
    5d3c:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
    5d40:	4b02      	ldr	r3, [pc, #8]	; (5d4c <usbd_dma_pending_clear+0x1c>)
    5d42:	2200      	movs	r2, #0
    5d44:	701a      	strb	r2, [r3, #0]
}
    5d46:	bd08      	pop	{r3, pc}
    5d48:	40027000 	.word	0x40027000
    5d4c:	2000152e 	.word	0x2000152e

00005d50 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    5d50:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    5d52:	4a09      	ldr	r2, [pc, #36]	; (5d78 <ev_usbreset_handler+0x28>)
    5d54:	2300      	movs	r3, #0
    5d56:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    5d58:	4a08      	ldr	r2, [pc, #32]	; (5d7c <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    5d5a:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    5d5e:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    5d60:	f88d 3007 	strb.w	r3, [sp, #7]
    5d64:	2301      	movs	r3, #1
    5d66:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    5d6a:	4b05      	ldr	r3, [pc, #20]	; (5d80 <ev_usbreset_handler+0x30>)
    5d6c:	a801      	add	r0, sp, #4
    5d6e:	681b      	ldr	r3, [r3, #0]
    5d70:	4798      	blx	r3
}
    5d72:	b003      	add	sp, #12
    5d74:	f85d fb04 	ldr.w	pc, [sp], #4
    5d78:	2000152d 	.word	0x2000152d
    5d7c:	20001530 	.word	0x20001530
    5d80:	20001444 	.word	0x20001444

00005d84 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    5d84:	4b21      	ldr	r3, [pc, #132]	; (5e0c <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    5d86:	b513      	push	{r0, r1, r4, lr}
    5d88:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    5d8c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    5d90:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    5d92:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5d96:	d50e      	bpl.n	5db6 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    5d98:	4b1d      	ldr	r3, [pc, #116]	; (5e10 <ev_usbevent_handler+0x8c>)
    5d9a:	2201      	movs	r2, #1
    5d9c:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    5d9e:	2300      	movs	r3, #0
    5da0:	f8ad 3005 	strh.w	r3, [sp, #5]
    5da4:	f88d 3007 	strb.w	r3, [sp, #7]
    5da8:	2302      	movs	r3, #2
    5daa:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    5dae:	4b19      	ldr	r3, [pc, #100]	; (5e14 <ev_usbevent_handler+0x90>)
    5db0:	a801      	add	r0, sp, #4
    5db2:	681b      	ldr	r3, [r3, #0]
    5db4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    5db6:	05a2      	lsls	r2, r4, #22
    5db8:	d50d      	bpl.n	5dd6 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    5dba:	4a15      	ldr	r2, [pc, #84]	; (5e10 <ev_usbevent_handler+0x8c>)
    5dbc:	2300      	movs	r3, #0
    5dbe:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    5dc0:	f8ad 3005 	strh.w	r3, [sp, #5]
    5dc4:	f88d 3007 	strb.w	r3, [sp, #7]
    5dc8:	2303      	movs	r3, #3
    5dca:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    5dce:	4b11      	ldr	r3, [pc, #68]	; (5e14 <ev_usbevent_handler+0x90>)
    5dd0:	a801      	add	r0, sp, #4
    5dd2:	681b      	ldr	r3, [r3, #0]
    5dd4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    5dd6:	0563      	lsls	r3, r4, #21
    5dd8:	d515      	bpl.n	5e06 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    5dda:	4a0d      	ldr	r2, [pc, #52]	; (5e10 <ev_usbevent_handler+0x8c>)
    5ddc:	7813      	ldrb	r3, [r2, #0]
    5dde:	b193      	cbz	r3, 5e06 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    5de0:	2300      	movs	r3, #0
    5de2:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    5de4:	4a09      	ldr	r2, [pc, #36]	; (5e0c <ev_usbevent_handler+0x88>)
    5de6:	2101      	movs	r1, #1
    5de8:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    5dec:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    5dee:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    5df0:	f8ad 3005 	strh.w	r3, [sp, #5]
    5df4:	f88d 3007 	strb.w	r3, [sp, #7]
    5df8:	2304      	movs	r3, #4
    5dfa:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    5dfe:	4b05      	ldr	r3, [pc, #20]	; (5e14 <ev_usbevent_handler+0x90>)
    5e00:	a801      	add	r0, sp, #4
    5e02:	681b      	ldr	r3, [r3, #0]
    5e04:	4798      	blx	r3
        }
    }
}
    5e06:	b002      	add	sp, #8
    5e08:	bd10      	pop	{r4, pc}
    5e0a:	bf00      	nop
    5e0c:	40027000 	.word	0x40027000
    5e10:	2000152d 	.word	0x2000152d
    5e14:	20001444 	.word	0x20001444

00005e18 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    5e18:	f04f 0320 	mov.w	r3, #32
    5e1c:	f3ef 8011 	mrs	r0, BASEPRI
    5e20:	f383 8812 	msr	BASEPRI_MAX, r3
    5e24:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    5e28:	4b0a      	ldr	r3, [pc, #40]	; (5e54 <usbd_errata_187_211_begin+0x3c>)
    5e2a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    5e2e:	2203      	movs	r2, #3
    5e30:	b961      	cbnz	r1, 5e4c <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5e32:	f249 3175 	movw	r1, #37749	; 0x9375
    5e36:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    5e3a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5e3e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    5e42:	f380 8811 	msr	BASEPRI, r0
    5e46:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    5e4a:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    5e4c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    5e50:	e7f7      	b.n	5e42 <usbd_errata_187_211_begin+0x2a>
    5e52:	bf00      	nop
    5e54:	4006e000 	.word	0x4006e000

00005e58 <usbd_errata_187_211_end>:
	__asm__ volatile(
    5e58:	f04f 0320 	mov.w	r3, #32
    5e5c:	f3ef 8011 	mrs	r0, BASEPRI
    5e60:	f383 8812 	msr	BASEPRI_MAX, r3
    5e64:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    5e68:	4b0a      	ldr	r3, [pc, #40]	; (5e94 <usbd_errata_187_211_end+0x3c>)
    5e6a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    5e6e:	b961      	cbnz	r1, 5e8a <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5e70:	f249 3275 	movw	r2, #37749	; 0x9375
    5e74:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    5e78:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    5e7c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    5e80:	f380 8811 	msr	BASEPRI, r0
    5e84:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    5e88:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    5e8a:	2200      	movs	r2, #0
    5e8c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    5e90:	e7f6      	b.n	5e80 <usbd_errata_187_211_end+0x28>
    5e92:	bf00      	nop
    5e94:	4006e000 	.word	0x4006e000

00005e98 <nrfx_usbd_feeder_flash>:
{
    5e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    5e9a:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    5e9c:	4f0b      	ldr	r7, [pc, #44]	; (5ecc <nrfx_usbd_feeder_flash+0x34>)
    5e9e:	4295      	cmp	r5, r2
    5ea0:	bf28      	it	cs
    5ea2:	4615      	movcs	r5, r2
{
    5ea4:	460c      	mov	r4, r1
    5ea6:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    5ea8:	462a      	mov	r2, r5
    5eaa:	6809      	ldr	r1, [r1, #0]
    5eac:	4638      	mov	r0, r7
    5eae:	f002 fe45 	bl	8b3c <memcpy>
    p_transfer->size -= tx_size;
    5eb2:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    5eb4:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    5eb6:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    5eb8:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    5ebc:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    5ebe:	6060      	str	r0, [r4, #4]
}
    5ec0:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    5ec2:	6022      	str	r2, [r4, #0]
}
    5ec4:	bf18      	it	ne
    5ec6:	2001      	movne	r0, #1
    5ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5eca:	bf00      	nop
    5ecc:	20001448 	.word	0x20001448

00005ed0 <nrfx_usbd_feeder_flash_zlp>:
{
    5ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    5ed2:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    5ed4:	4294      	cmp	r4, r2
    5ed6:	bf28      	it	cs
    5ed8:	4614      	movcs	r4, r2
{
    5eda:	4606      	mov	r6, r0
    5edc:	460d      	mov	r5, r1
    if (tx_size != 0)
    5ede:	b18c      	cbz	r4, 5f04 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    5ee0:	4f09      	ldr	r7, [pc, #36]	; (5f08 <nrfx_usbd_feeder_flash_zlp+0x38>)
    5ee2:	6809      	ldr	r1, [r1, #0]
    5ee4:	4622      	mov	r2, r4
    5ee6:	4638      	mov	r0, r7
    5ee8:	f002 fe28 	bl	8b3c <memcpy>
        p_next->p_data.tx = p_buffer;
    5eec:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    5eee:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    5ef0:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    5ef2:	1b1b      	subs	r3, r3, r4
    5ef4:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    5ef6:	682b      	ldr	r3, [r5, #0]
}
    5ef8:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    5efa:	4423      	add	r3, r4
    5efc:	602b      	str	r3, [r5, #0]
}
    5efe:	bf18      	it	ne
    5f00:	2001      	movne	r0, #1
    5f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    5f04:	6004      	str	r4, [r0, #0]
    5f06:	e7f2      	b.n	5eee <nrfx_usbd_feeder_flash_zlp+0x1e>
    5f08:	20001448 	.word	0x20001448

00005f0c <ev_sof_handler>:
{
    5f0c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    5f0e:	2300      	movs	r3, #0
    5f10:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    5f14:	4b0b      	ldr	r3, [pc, #44]	; (5f44 <ev_sof_handler+0x38>)
    5f16:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    5f1a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    5f1e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    5f22:	4a09      	ldr	r2, [pc, #36]	; (5f48 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    5f24:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    5f26:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    5f28:	bf0c      	ite	eq
    5f2a:	f44f 7180 	moveq.w	r1, #256	; 0x100
    5f2e:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    5f32:	430b      	orrs	r3, r1
    5f34:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    5f36:	4b05      	ldr	r3, [pc, #20]	; (5f4c <ev_sof_handler+0x40>)
    5f38:	a801      	add	r0, sp, #4
    5f3a:	681b      	ldr	r3, [r3, #0]
    5f3c:	4798      	blx	r3
}
    5f3e:	b003      	add	sp, #12
    5f40:	f85d fb04 	ldr.w	pc, [sp], #4
    5f44:	40027000 	.word	0x40027000
    5f48:	20001320 	.word	0x20001320
    5f4c:	20001444 	.word	0x20001444

00005f50 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5f50:	4b06      	ldr	r3, [pc, #24]	; (5f6c <atomic_and.constprop.0.isra.0+0x1c>)
    5f52:	f3bf 8f5b 	dmb	ish
    5f56:	e853 2f00 	ldrex	r2, [r3]
    5f5a:	4002      	ands	r2, r0
    5f5c:	e843 2100 	strex	r1, r2, [r3]
    5f60:	2900      	cmp	r1, #0
    5f62:	d1f8      	bne.n	5f56 <atomic_and.constprop.0.isra.0+0x6>
    5f64:	f3bf 8f5b 	dmb	ish
}
    5f68:	4770      	bx	lr
    5f6a:	bf00      	nop
    5f6c:	200012b0 	.word	0x200012b0

00005f70 <nrf_usbd_ep0in_dma_handler>:
{
    5f70:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    5f72:	f7ff fedd 	bl	5d30 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    5f76:	4b08      	ldr	r3, [pc, #32]	; (5f98 <nrf_usbd_ep0in_dma_handler+0x28>)
    5f78:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    5f7c:	2a03      	cmp	r2, #3
    5f7e:	d105      	bne.n	5f8c <nrf_usbd_ep0in_dma_handler+0x1c>
}
    5f80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    5f84:	f06f 0001 	mvn.w	r0, #1
    5f88:	f7ff bfe2 	b.w	5f50 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    5f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    5f90:	2b00      	cmp	r3, #0
    5f92:	d0f5      	beq.n	5f80 <nrf_usbd_ep0in_dma_handler+0x10>
}
    5f94:	bd08      	pop	{r3, pc}
    5f96:	bf00      	nop
    5f98:	20001324 	.word	0x20001324

00005f9c <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    5f9c:	2201      	movs	r2, #1
{
    5f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    5fa0:	fa02 f501 	lsl.w	r5, r2, r1
    5fa4:	491c      	ldr	r1, [pc, #112]	; (6018 <usbd_ep_data_handler+0x7c>)
    5fa6:	4e1d      	ldr	r6, [pc, #116]	; (601c <usbd_ep_data_handler+0x80>)
    5fa8:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    5faa:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    5fae:	ea43 0305 	orr.w	r3, r3, r5
{
    5fb2:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    5fb4:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    5fb6:	d024      	beq.n	6002 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    5fb8:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    5fbc:	4b18      	ldr	r3, [pc, #96]	; (6020 <usbd_ep_data_handler+0x84>)
    5fbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    5fc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5fc6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    5fca:	681a      	ldr	r2, [r3, #0]
    if (ret)
    5fcc:	b132      	cbz	r2, 5fdc <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    5fce:	2200      	movs	r2, #0
    5fd0:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    5fd2:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    5fd4:	681b      	ldr	r3, [r3, #0]
    5fd6:	d011      	beq.n	5ffc <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    5fd8:	f003 fb1c 	bl	9614 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    5fdc:	6831      	ldr	r1, [r6, #0]
    5fde:	4029      	ands	r1, r5
    5fe0:	d10a      	bne.n	5ff8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    5fe2:	2306      	movs	r3, #6
    5fe4:	f88d 3004 	strb.w	r3, [sp, #4]
    5fe8:	f88d 4006 	strb.w	r4, [sp, #6]
    5fec:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    5ff0:	4b0c      	ldr	r3, [pc, #48]	; (6024 <usbd_ep_data_handler+0x88>)
    5ff2:	a801      	add	r0, sp, #4
    5ff4:	681b      	ldr	r3, [r3, #0]
    5ff6:	4798      	blx	r3
}
    5ff8:	b002      	add	sp, #8
    5ffa:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    5ffc:	f7ff ffb8 	bl	5f70 <nrf_usbd_ep0in_dma_handler>
    6000:	e7ec      	b.n	5fdc <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6002:	6833      	ldr	r3, [r6, #0]
    6004:	421d      	tst	r5, r3
    6006:	d1f7      	bne.n	5ff8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    6008:	2306      	movs	r3, #6
    600a:	f88d 3004 	strb.w	r3, [sp, #4]
    600e:	f88d 0006 	strb.w	r0, [sp, #6]
    6012:	f88d 2007 	strb.w	r2, [sp, #7]
    6016:	e7eb      	b.n	5ff0 <usbd_ep_data_handler+0x54>
    6018:	20001320 	.word	0x20001320
    601c:	200012b0 	.word	0x200012b0
    6020:	0000a278 	.word	0x0000a278
    6024:	20001444 	.word	0x20001444

00006028 <ev_setup_data_handler>:
{
    6028:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    602a:	4b05      	ldr	r3, [pc, #20]	; (6040 <ev_setup_data_handler+0x18>)
    602c:	781a      	ldrb	r2, [r3, #0]
    602e:	4610      	mov	r0, r2
    6030:	f003 fae6 	bl	9600 <ep2bit>
}
    6034:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    6038:	4601      	mov	r1, r0
    603a:	4610      	mov	r0, r2
    603c:	f7ff bfae 	b.w	5f9c <usbd_ep_data_handler>
    6040:	20001530 	.word	0x20001530

00006044 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6044:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6046:	f7ff fe73 	bl	5d30 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    604a:	4b0c      	ldr	r3, [pc, #48]	; (607c <ev_dma_epout8_handler+0x38>)
    604c:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    6050:	2a03      	cmp	r2, #3
    6052:	d010      	beq.n	6076 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    6054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    6058:	b96b      	cbnz	r3, 6076 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    605a:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    605e:	f7ff ff77 	bl	5f50 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6062:	2306      	movs	r3, #6
    6064:	f88d 3004 	strb.w	r3, [sp, #4]
    6068:	2308      	movs	r3, #8
    606a:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    606e:	4b04      	ldr	r3, [pc, #16]	; (6080 <ev_dma_epout8_handler+0x3c>)
    6070:	a801      	add	r0, sp, #4
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6076:	b003      	add	sp, #12
    6078:	f85d fb04 	ldr.w	pc, [sp], #4
    607c:	20001324 	.word	0x20001324
    6080:	20001444 	.word	0x20001444

00006084 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6084:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6086:	f7ff fe53 	bl	5d30 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    608a:	4b10      	ldr	r3, [pc, #64]	; (60cc <ev_dma_epin8_handler+0x48>)
    608c:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    6090:	2a03      	cmp	r2, #3
    6092:	d106      	bne.n	60a2 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6094:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6098:	b003      	add	sp, #12
    609a:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    609e:	f7ff bf57 	b.w	5f50 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    60a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    60a6:	b96b      	cbnz	r3, 60c4 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    60a8:	f46f 7080 	mvn.w	r0, #256	; 0x100
    60ac:	f7ff ff50 	bl	5f50 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    60b0:	2306      	movs	r3, #6
    60b2:	f88d 3004 	strb.w	r3, [sp, #4]
    60b6:	2388      	movs	r3, #136	; 0x88
    60b8:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    60bc:	4b04      	ldr	r3, [pc, #16]	; (60d0 <ev_dma_epin8_handler+0x4c>)
    60be:	a801      	add	r0, sp, #4
    60c0:	681b      	ldr	r3, [r3, #0]
    60c2:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    60c4:	b003      	add	sp, #12
    60c6:	f85d fb04 	ldr.w	pc, [sp], #4
    60ca:	bf00      	nop
    60cc:	20001324 	.word	0x20001324
    60d0:	20001444 	.word	0x20001444

000060d4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    60d4:	4a02      	ldr	r2, [pc, #8]	; (60e0 <nrfx_usbd_uninit+0xc>)
    60d6:	2300      	movs	r3, #0
    60d8:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    60da:	4a02      	ldr	r2, [pc, #8]	; (60e4 <nrfx_usbd_uninit+0x10>)
    60dc:	7013      	strb	r3, [r2, #0]
    return;
}
    60de:	4770      	bx	lr
    60e0:	20001444 	.word	0x20001444
    60e4:	2000152f 	.word	0x2000152f

000060e8 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    60e8:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    60ea:	4b48      	ldr	r3, [pc, #288]	; (620c <nrfx_usbd_enable+0x124>)
    60ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    60f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    60f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    60f8:	f7ff fdf8 	bl	5cec <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    60fc:	b108      	cbz	r0, 6102 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    60fe:	f7ff fe8b 	bl	5e18 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    6102:	f003 fa37 	bl	9574 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    6106:	b1c8      	cbz	r0, 613c <nrfx_usbd_enable+0x54>
	__asm__ volatile(
    6108:	f04f 0320 	mov.w	r3, #32
    610c:	f3ef 8011 	mrs	r0, BASEPRI
    6110:	f383 8812 	msr	BASEPRI_MAX, r3
    6114:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6118:	4b3d      	ldr	r3, [pc, #244]	; (6210 <nrfx_usbd_enable+0x128>)
    611a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    611e:	22c0      	movs	r2, #192	; 0xc0
    6120:	2900      	cmp	r1, #0
    6122:	d16a      	bne.n	61fa <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6124:	f249 3175 	movw	r1, #37749	; 0x9375
    6128:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    612c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6130:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6134:	f380 8811 	msr	BASEPRI, r0
    6138:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    613c:	4b33      	ldr	r3, [pc, #204]	; (620c <nrfx_usbd_enable+0x124>)
    613e:	2201      	movs	r2, #1
    6140:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    6144:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    6148:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    614c:	0512      	lsls	r2, r2, #20
    614e:	d5fb      	bpl.n	6148 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
    6150:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6154:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6158:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    615c:	f003 fa0a 	bl	9574 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
    6160:	b1c0      	cbz	r0, 6194 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
    6162:	f04f 0320 	mov.w	r3, #32
    6166:	f3ef 8011 	mrs	r0, BASEPRI
    616a:	f383 8812 	msr	BASEPRI_MAX, r3
    616e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6172:	4b27      	ldr	r3, [pc, #156]	; (6210 <nrfx_usbd_enable+0x128>)
    6174:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6178:	2900      	cmp	r1, #0
    617a:	d141      	bne.n	6200 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    617c:	f249 3275 	movw	r2, #37749	; 0x9375
    6180:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6184:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6188:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    618c:	f380 8811 	msr	BASEPRI, r0
    6190:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6194:	f7ff fdaa 	bl	5cec <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6198:	b130      	cbz	r0, 61a8 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
    619a:	f7ff fe5d 	bl	5e58 <usbd_errata_187_211_end>
    619e:	f7ff fda5 	bl	5cec <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    61a2:	b108      	cbz	r0, 61a8 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
    61a4:	f7ff fe38 	bl	5e18 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    61a8:	f003 f9e4 	bl	9574 <nrf52_errata_166>
    61ac:	4b17      	ldr	r3, [pc, #92]	; (620c <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
    61ae:	b150      	cbz	r0, 61c6 <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    61b0:	f240 72e3 	movw	r2, #2019	; 0x7e3
    61b4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    61b8:	2240      	movs	r2, #64	; 0x40
    61ba:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    61be:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    61c2:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    61c6:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    61c8:	2280      	movs	r2, #128	; 0x80
    61ca:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    61ce:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    61d2:	4b10      	ldr	r3, [pc, #64]	; (6214 <nrfx_usbd_enable+0x12c>)
    61d4:	f240 12ff 	movw	r2, #511	; 0x1ff
    61d8:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    61da:	4b0f      	ldr	r3, [pc, #60]	; (6218 <nrfx_usbd_enable+0x130>)
    61dc:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    61de:	f7ff fda7 	bl	5d30 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    61e2:	4b0e      	ldr	r3, [pc, #56]	; (621c <nrfx_usbd_enable+0x134>)
    61e4:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    61e6:	4b0e      	ldr	r3, [pc, #56]	; (6220 <nrfx_usbd_enable+0x138>)
    61e8:	2202      	movs	r2, #2
    61ea:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    61ec:	f7ff fd7e 	bl	5cec <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    61f0:	b150      	cbz	r0, 6208 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    61f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    61f6:	f7ff be2f 	b.w	5e58 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    61fa:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    61fe:	e799      	b.n	6134 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6200:	2200      	movs	r2, #0
    6202:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    6206:	e7c1      	b.n	618c <nrfx_usbd_enable+0xa4>
}
    6208:	bd08      	pop	{r3, pc}
    620a:	bf00      	nop
    620c:	40027000 	.word	0x40027000
    6210:	4006e000 	.word	0x4006e000
    6214:	20001320 	.word	0x20001320
    6218:	200012b0 	.word	0x200012b0
    621c:	20001530 	.word	0x20001530
    6220:	2000152f 	.word	0x2000152f

00006224 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    6224:	4b0a      	ldr	r3, [pc, #40]	; (6250 <nrfx_usbd_start+0x2c>)
    6226:	2200      	movs	r2, #0
{
    6228:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    622a:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    622c:	4a09      	ldr	r2, [pc, #36]	; (6254 <nrfx_usbd_start+0x30>)
    622e:	4b0a      	ldr	r3, [pc, #40]	; (6258 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    6230:	4c0a      	ldr	r4, [pc, #40]	; (625c <nrfx_usbd_start+0x38>)
    6232:	2800      	cmp	r0, #0
    6234:	bf18      	it	ne
    6236:	4613      	movne	r3, r2
    6238:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    623c:	2027      	movs	r0, #39	; 0x27
    623e:	f7fc f881 	bl	2344 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    6242:	2301      	movs	r3, #1
    6244:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    6248:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    624c:	bd10      	pop	{r4, pc}
    624e:	bf00      	nop
    6250:	2000152d 	.word	0x2000152d
    6254:	01e01407 	.word	0x01e01407
    6258:	01c01407 	.word	0x01c01407
    625c:	40027000 	.word	0x40027000

00006260 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    6260:	4b03      	ldr	r3, [pc, #12]	; (6270 <nrfx_usbd_is_enabled+0x10>)
    6262:	7818      	ldrb	r0, [r3, #0]
}
    6264:	2801      	cmp	r0, #1
    6266:	bf94      	ite	ls
    6268:	2000      	movls	r0, #0
    626a:	2001      	movhi	r0, #1
    626c:	4770      	bx	lr
    626e:	bf00      	nop
    6270:	2000152f 	.word	0x2000152f

00006274 <nrfx_usbd_init>:
{
    6274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    6278:	4b1d      	ldr	r3, [pc, #116]	; (62f0 <nrfx_usbd_init+0x7c>)
    627a:	781c      	ldrb	r4, [r3, #0]
    627c:	2c00      	cmp	r4, #0
    627e:	d135      	bne.n	62ec <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    6280:	4a1c      	ldr	r2, [pc, #112]	; (62f4 <nrfx_usbd_init+0x80>)
    6282:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    6284:	2201      	movs	r2, #1
    6286:	701a      	strb	r2, [r3, #0]
    6288:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    628a:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    628e:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6290:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6294:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6298:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    629a:	bf14      	ite	ne
    629c:	4641      	movne	r1, r8
    629e:	2140      	moveq	r1, #64	; 0x40
    62a0:	4630      	mov	r0, r6
    62a2:	f003 f9e7 	bl	9674 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    62a6:	4630      	mov	r0, r6
    62a8:	f7ff fd34 	bl	5d14 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    62ac:	3501      	adds	r5, #1
    62ae:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    62b0:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    62b2:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    62b4:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    62b6:	d1eb      	bne.n	6290 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    62b8:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    62ba:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    62bc:	f240 16ff 	movw	r6, #511	; 0x1ff
    62c0:	4620      	mov	r0, r4
    62c2:	f003 f9d7 	bl	9674 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    62c6:	4620      	mov	r0, r4
    62c8:	f7ff fd24 	bl	5d14 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    62cc:	3401      	adds	r4, #1
    62ce:	b2e4      	uxtb	r4, r4
    62d0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    62d2:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    62d4:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    62d6:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    62d8:	d102      	bne.n	62e0 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    62da:	4807      	ldr	r0, [pc, #28]	; (62f8 <nrfx_usbd_init+0x84>)
}
    62dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    62e0:	f014 0f08 	tst.w	r4, #8
    62e4:	bf14      	ite	ne
    62e6:	4631      	movne	r1, r6
    62e8:	2140      	moveq	r1, #64	; 0x40
    62ea:	e7e9      	b.n	62c0 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    62ec:	4803      	ldr	r0, [pc, #12]	; (62fc <nrfx_usbd_init+0x88>)
    62ee:	e7f5      	b.n	62dc <nrfx_usbd_init+0x68>
    62f0:	2000152f 	.word	0x2000152f
    62f4:	20001444 	.word	0x20001444
    62f8:	0bad0000 	.word	0x0bad0000
    62fc:	0bad0005 	.word	0x0bad0005

00006300 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    6300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6304:	4605      	mov	r5, r0
	__asm__ volatile(
    6306:	f04f 0320 	mov.w	r3, #32
    630a:	f3ef 8811 	mrs	r8, BASEPRI
    630e:	f383 8812 	msr	BASEPRI_MAX, r3
    6312:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    6316:	f010 040f 	ands.w	r4, r0, #15
    631a:	d103      	bne.n	6324 <nrfx_usbd_ep_transfer+0x24>
    631c:	4b27      	ldr	r3, [pc, #156]	; (63bc <nrfx_usbd_ep_transfer+0xbc>)
    631e:	781b      	ldrb	r3, [r3, #0]
    6320:	4283      	cmp	r3, r0
    6322:	d146      	bne.n	63b2 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6324:	4b26      	ldr	r3, [pc, #152]	; (63c0 <nrfx_usbd_ep_transfer+0xc0>)
    6326:	4f27      	ldr	r7, [pc, #156]	; (63c4 <nrfx_usbd_ep_transfer+0xc4>)
    6328:	681a      	ldr	r2, [r3, #0]
    632a:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    632c:	4628      	mov	r0, r5
    632e:	f003 f967 	bl	9600 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6332:	43d2      	mvns	r2, r2
    6334:	b292      	uxth	r2, r2
    6336:	f04f 0901 	mov.w	r9, #1
    633a:	4332      	orrs	r2, r6
    633c:	fa09 f900 	lsl.w	r9, r9, r0
    6340:	ea12 0f09 	tst.w	r2, r9
    6344:	d137      	bne.n	63b6 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    6346:	4628      	mov	r0, r5
    6348:	f7ff fce4 	bl	5d14 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    634c:	220c      	movs	r2, #12
    634e:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    6350:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    6352:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    6354:	d529      	bpl.n	63aa <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6356:	4a1c      	ldr	r2, [pc, #112]	; (63c8 <nrfx_usbd_ep_transfer+0xc8>)
    6358:	6808      	ldr	r0, [r1, #0]
    635a:	4414      	add	r4, r2
    635c:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6360:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    6362:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6366:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    636a:	d119      	bne.n	63a0 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    636c:	b9b2      	cbnz	r2, 639c <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    636e:	4a17      	ldr	r2, [pc, #92]	; (63cc <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    6370:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    6372:	c907      	ldmia	r1, {r0, r1, r2}
    6374:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    6378:	2200      	movs	r2, #0
    637a:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    637c:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    637e:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6380:	4b13      	ldr	r3, [pc, #76]	; (63d0 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    6382:	4814      	ldr	r0, [pc, #80]	; (63d4 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    6384:	ea46 0609 	orr.w	r6, r6, r9
    6388:	2280      	movs	r2, #128	; 0x80
    638a:	603e      	str	r6, [r7, #0]
    638c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    6390:	f388 8811 	msr	BASEPRI, r8
    6394:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    6398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    639c:	4a0e      	ldr	r2, [pc, #56]	; (63d8 <nrfx_usbd_ep_transfer+0xd8>)
    639e:	e7e7      	b.n	6370 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    63a0:	b90a      	cbnz	r2, 63a6 <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    63a2:	4a0e      	ldr	r2, [pc, #56]	; (63dc <nrfx_usbd_ep_transfer+0xdc>)
    63a4:	e7e4      	b.n	6370 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    63a6:	4a0e      	ldr	r2, [pc, #56]	; (63e0 <nrfx_usbd_ep_transfer+0xe0>)
    63a8:	e7e2      	b.n	6370 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    63aa:	4a0e      	ldr	r2, [pc, #56]	; (63e4 <nrfx_usbd_ep_transfer+0xe4>)
    63ac:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    63ae:	4a0e      	ldr	r2, [pc, #56]	; (63e8 <nrfx_usbd_ep_transfer+0xe8>)
    63b0:	e7de      	b.n	6370 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    63b2:	480e      	ldr	r0, [pc, #56]	; (63ec <nrfx_usbd_ep_transfer+0xec>)
    63b4:	e7ec      	b.n	6390 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
    63b6:	480e      	ldr	r0, [pc, #56]	; (63f0 <nrfx_usbd_ep_transfer+0xf0>)
    63b8:	e7ea      	b.n	6390 <nrfx_usbd_ep_transfer+0x90>
    63ba:	bf00      	nop
    63bc:	20001530 	.word	0x20001530
    63c0:	20001320 	.word	0x20001320
    63c4:	200012b0 	.word	0x200012b0
    63c8:	200012b4 	.word	0x200012b4
    63cc:	000095b5 	.word	0x000095b5
    63d0:	e000e100 	.word	0xe000e100
    63d4:	0bad0000 	.word	0x0bad0000
    63d8:	000095d7 	.word	0x000095d7
    63dc:	00005e99 	.word	0x00005e99
    63e0:	00005ed1 	.word	0x00005ed1
    63e4:	20001244 	.word	0x20001244
    63e8:	00009587 	.word	0x00009587
    63ec:	0bad000a 	.word	0x0bad000a
    63f0:	0bad000b 	.word	0x0bad000b

000063f4 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    63f4:	f010 0f08 	tst.w	r0, #8
    63f8:	4b07      	ldr	r3, [pc, #28]	; (6418 <nrfx_usbd_epout_size_get+0x24>)
    63fa:	d006      	beq.n	640a <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    63fc:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    6400:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6404:	bf18      	it	ne
    6406:	2000      	movne	r0, #0
    6408:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    640a:	f000 000f 	and.w	r0, r0, #15
    640e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    6412:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    6416:	4770      	bx	lr
    6418:	40027000 	.word	0x40027000

0000641c <usbd_dmareq_process>:
{
    641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    6420:	f8df 815c 	ldr.w	r8, [pc, #348]	; 6580 <usbd_dmareq_process+0x164>
    6424:	f898 3000 	ldrb.w	r3, [r8]
{
    6428:	b085      	sub	sp, #20
    if (!m_dma_pending)
    642a:	2b00      	cmp	r3, #0
    642c:	d16b      	bne.n	6506 <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    642e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 6584 <usbd_dmareq_process+0x168>
    6432:	4e55      	ldr	r6, [pc, #340]	; (6588 <usbd_dmareq_process+0x16c>)
    6434:	f8d9 1000 	ldr.w	r1, [r9]
    6438:	6833      	ldr	r3, [r6, #0]
    643a:	4019      	ands	r1, r3
    643c:	d063      	beq.n	6506 <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    643e:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    6442:	bf14      	ite	ne
    6444:	fa93 f1a3 	rbitne	r1, r3
    6448:	fa91 f1a1 	rbiteq	r1, r1
    644c:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6450:	290f      	cmp	r1, #15
    6452:	bf8a      	itet	hi
    6454:	f1a1 0410 	subhi.w	r4, r1, #16
    6458:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    645c:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    645e:	4620      	mov	r0, r4
    6460:	f7ff fc58 	bl	5d14 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6464:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    6468:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    646c:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    6470:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6474:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6476:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    647a:	da47      	bge.n	650c <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
    647c:	6803      	ldr	r3, [r0, #0]
    647e:	8982      	ldrh	r2, [r0, #12]
    6480:	6841      	ldr	r1, [r0, #4]
    6482:	a802      	add	r0, sp, #8
    6484:	4798      	blx	r3
                if (!continue_transfer)
    6486:	b900      	cbnz	r0, 648a <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    6488:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    648a:	f003 f873 	bl	9574 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
    648e:	b118      	cbz	r0, 6498 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    6490:	4b3e      	ldr	r3, [pc, #248]	; (658c <usbd_dmareq_process+0x170>)
    6492:	2282      	movs	r2, #130	; 0x82
    6494:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    6498:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    649a:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    649c:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    649e:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    64a2:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    64a4:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    64a8:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    64aa:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    64ae:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    64b0:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    64b2:	f004 0008 	and.w	r0, r4, #8
    64b6:	9902      	ldr	r1, [sp, #8]
    64b8:	4b34      	ldr	r3, [pc, #208]	; (658c <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    64ba:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    64be:	da4f      	bge.n	6560 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
    64c0:	2800      	cmp	r0, #0
    64c2:	d045      	beq.n	6550 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
    64c4:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    64c8:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    64cc:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    64ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    64d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    64d6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    64da:	2201      	movs	r2, #1
    64dc:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    64de:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    64e0:	4a2b      	ldr	r2, [pc, #172]	; (6590 <usbd_dmareq_process+0x174>)
    64e2:	4b2c      	ldr	r3, [pc, #176]	; (6594 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    64e4:	4929      	ldr	r1, [pc, #164]	; (658c <usbd_dmareq_process+0x170>)
    64e6:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    64ea:	bf38      	it	cc
    64ec:	4613      	movcc	r3, r2
    64ee:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    64f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    64f6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    64fa:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    64fc:	b91a      	cbnz	r2, 6506 <usbd_dmareq_process+0xea>
    64fe:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    6502:	2a00      	cmp	r2, #0
    6504:	d0f9      	beq.n	64fa <usbd_dmareq_process+0xde>
}
    6506:	b005      	add	sp, #20
    6508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    650c:	4620      	mov	r0, r4
    650e:	f7ff ff71 	bl	63f4 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    6512:	89aa      	ldrh	r2, [r5, #12]
    6514:	6869      	ldr	r1, [r5, #4]
    6516:	f8d5 c000 	ldr.w	ip, [r5]
    651a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    651c:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    651e:	a802      	add	r0, sp, #8
    6520:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    6522:	9a02      	ldr	r2, [sp, #8]
    6524:	2a00      	cmp	r2, #0
    6526:	d0ae      	beq.n	6486 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    6528:	9a03      	ldr	r2, [sp, #12]
    652a:	4297      	cmp	r7, r2
    652c:	d9ab      	bls.n	6486 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    652e:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6530:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    6532:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6534:	f7ff fd0c 	bl	5f50 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6538:	2306      	movs	r3, #6
    653a:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    653e:	4b16      	ldr	r3, [pc, #88]	; (6598 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6540:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    6544:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6546:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    654a:	a801      	add	r0, sp, #4
    654c:	4798      	blx	r3
                    continue;
    654e:	e771      	b.n	6434 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    6550:	2014      	movs	r0, #20
    6552:	fb00 3304 	mla	r3, r0, r4, r3
    6556:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    655a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    655e:	e7b5      	b.n	64cc <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
    6560:	b128      	cbz	r0, 656e <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
    6562:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    6566:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    656a:	2328      	movs	r3, #40	; 0x28
    656c:	e7af      	b.n	64ce <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
    656e:	2014      	movs	r0, #20
    6570:	fb00 3304 	mla	r3, r0, r4, r3
    6574:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    6578:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    657c:	e7f5      	b.n	656a <usbd_dmareq_process+0x14e>
    657e:	bf00      	nop
    6580:	2000152e 	.word	0x2000152e
    6584:	200012b0 	.word	0x200012b0
    6588:	20001320 	.word	0x20001320
    658c:	40027000 	.word	0x40027000
    6590:	0000a28a 	.word	0x0000a28a
    6594:	0000a278 	.word	0x0000a278
    6598:	20001444 	.word	0x20001444

0000659c <ev_epdata_handler>:
{
    659c:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    659e:	4b0f      	ldr	r3, [pc, #60]	; (65dc <ev_epdata_handler+0x40>)
    65a0:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    65a4:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    65a8:	2501      	movs	r5, #1
    while (dataepstatus)
    65aa:	b91c      	cbnz	r4, 65b4 <ev_epdata_handler+0x18>
}
    65ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    65b0:	f7ff bf34 	b.w	641c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    65b4:	fa94 f3a4 	rbit	r3, r4
    65b8:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    65bc:	2b0f      	cmp	r3, #15
    65be:	bfc8      	it	gt
    65c0:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    65c4:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    65c6:	bfd4      	ite	le
    65c8:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    65cc:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    65ce:	fa05 f303 	lsl.w	r3, r5, r3
    65d2:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    65d6:	f7ff fce1 	bl	5f9c <usbd_ep_data_handler>
    65da:	e7e6      	b.n	65aa <ev_epdata_handler+0xe>
    65dc:	40027000 	.word	0x40027000

000065e0 <nrf_usbd_epout_dma_handler>:
{
    65e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    65e2:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
    65e4:	f7ff fba4 	bl	5d30 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    65e8:	4620      	mov	r0, r4
    65ea:	f7ff fb93 	bl	5d14 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    65ee:	7b83      	ldrb	r3, [r0, #14]
    65f0:	2b03      	cmp	r3, #3
    65f2:	d10d      	bne.n	6610 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    65f4:	4620      	mov	r0, r4
    65f6:	f003 f803 	bl	9600 <ep2bit>
    65fa:	2301      	movs	r3, #1
    65fc:	fa03 f000 	lsl.w	r0, r3, r0
    6600:	43c0      	mvns	r0, r0
    6602:	f7ff fca5 	bl	5f50 <atomic_and.constprop.0.isra.0>
}
    6606:	b003      	add	sp, #12
    6608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    660c:	f7ff bf06 	b.w	641c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    6610:	6805      	ldr	r5, [r0, #0]
    6612:	2d00      	cmp	r5, #0
    6614:	d1f7      	bne.n	6606 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6616:	4620      	mov	r0, r4
    6618:	f002 fff2 	bl	9600 <ep2bit>
    661c:	2301      	movs	r3, #1
    661e:	fa03 f000 	lsl.w	r0, r3, r0
    6622:	43c0      	mvns	r0, r0
    6624:	f7ff fc94 	bl	5f50 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6628:	2306      	movs	r3, #6
    662a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    662e:	4b04      	ldr	r3, [pc, #16]	; (6640 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6630:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    6634:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6636:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    663a:	a801      	add	r0, sp, #4
    663c:	4798      	blx	r3
    663e:	e7e2      	b.n	6606 <nrf_usbd_epout_dma_handler+0x26>
    6640:	20001444 	.word	0x20001444

00006644 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    6644:	4b02      	ldr	r3, [pc, #8]	; (6650 <nrfx_usbd_ep_stall+0xc>)
    6646:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    664a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    664e:	4770      	bx	lr
    6650:	40027000 	.word	0x40027000

00006654 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    6654:	0702      	lsls	r2, r0, #28
    6656:	d413      	bmi.n	6680 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    6658:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    665c:	f010 0f80 	tst.w	r0, #128	; 0x80
    6660:	4a08      	ldr	r2, [pc, #32]	; (6684 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    6662:	bf0b      	itete	eq
    6664:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    6668:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    666c:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    6670:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    6674:	bf08      	it	eq
    6676:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    6678:	1e43      	subs	r3, r0, #1
    667a:	4258      	negs	r0, r3
    667c:	4158      	adcs	r0, r3
    667e:	4770      	bx	lr
        return false;
    6680:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    6682:	4770      	bx	lr
    6684:	40027000 	.word	0x40027000

00006688 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    6688:	4b04      	ldr	r3, [pc, #16]	; (669c <nrfx_usbd_ep_dtoggle_clear+0x14>)
    668a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    668e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6692:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    6696:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    669a:	4770      	bx	lr
    669c:	40027000 	.word	0x40027000

000066a0 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    66a0:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    66a2:	2208      	movs	r2, #8
    66a4:	2100      	movs	r1, #0
{
    66a6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    66a8:	f002 fa53 	bl	8b52 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    66ac:	4b0e      	ldr	r3, [pc, #56]	; (66e8 <nrfx_usbd_setup_get+0x48>)
    66ae:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    66b2:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    66b4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    66b8:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    66ba:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    66be:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    66c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    66c6:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    66c8:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    66cc:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    66d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    66d4:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    66d6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    66da:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    66de:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    66e2:	80e3      	strh	r3, [r4, #6]
}
    66e4:	bd10      	pop	{r4, pc}
    66e6:	bf00      	nop
    66e8:	40027000 	.word	0x40027000

000066ec <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    66ec:	4b02      	ldr	r3, [pc, #8]	; (66f8 <nrfx_usbd_setup_data_clear+0xc>)
    66ee:	2201      	movs	r2, #1
    66f0:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    66f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    66f4:	4770      	bx	lr
    66f6:	bf00      	nop
    66f8:	40027000 	.word	0x40027000

000066fc <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    66fc:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    66fe:	f7ff fb17 	bl	5d30 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6702:	4b10      	ldr	r3, [pc, #64]	; (6744 <ev_dma_epout0_handler+0x48>)
    6704:	7b9a      	ldrb	r2, [r3, #14]
    6706:	2a03      	cmp	r2, #3
    6708:	d106      	bne.n	6718 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    670a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    670e:	b002      	add	sp, #8
    6710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6714:	f7ff bc1c 	b.w	5f50 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    6718:	681c      	ldr	r4, [r3, #0]
    671a:	b974      	cbnz	r4, 673a <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    671c:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    6720:	f7ff fc16 	bl	5f50 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6724:	2306      	movs	r3, #6
    6726:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    672a:	4b07      	ldr	r3, [pc, #28]	; (6748 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    672c:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    6730:	681b      	ldr	r3, [r3, #0]
    6732:	a801      	add	r0, sp, #4
    6734:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    6736:	b002      	add	sp, #8
    6738:	bd10      	pop	{r4, pc}
    673a:	b002      	add	sp, #8
    673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    6740:	f7ff bfd4 	b.w	66ec <nrfx_usbd_setup_data_clear>
    6744:	20001324 	.word	0x20001324
    6748:	20001444 	.word	0x20001444

0000674c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    674c:	4b02      	ldr	r3, [pc, #8]	; (6758 <nrfx_usbd_setup_clear+0xc>)
    674e:	2201      	movs	r2, #1
    6750:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6752:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    6754:	4770      	bx	lr
    6756:	bf00      	nop
    6758:	40027000 	.word	0x40027000

0000675c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    675c:	4b02      	ldr	r3, [pc, #8]	; (6768 <nrfx_usbd_setup_stall+0xc>)
    675e:	2201      	movs	r2, #1
    6760:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6762:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    6764:	4770      	bx	lr
    6766:	bf00      	nop
    6768:	40027000 	.word	0x40027000

0000676c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    676c:	4b01      	ldr	r3, [pc, #4]	; (6774 <nrfx_usbd_last_setup_dir_get+0x8>)
    676e:	7818      	ldrb	r0, [r3, #0]
    6770:	4770      	bx	lr
    6772:	bf00      	nop
    6774:	20001530 	.word	0x20001530

00006778 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    6778:	b510      	push	{r4, lr}
    677a:	4602      	mov	r2, r0
	__asm__ volatile(
    677c:	f04f 0320 	mov.w	r3, #32
    6780:	f3ef 8411 	mrs	r4, BASEPRI
    6784:	f383 8812 	msr	BASEPRI_MAX, r3
    6788:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    678c:	f002 ff38 	bl	9600 <ep2bit>
    6790:	490d      	ldr	r1, [pc, #52]	; (67c8 <nrfx_usbd_transfer_out_drop+0x50>)
    6792:	2301      	movs	r3, #1
    6794:	fa03 f000 	lsl.w	r0, r3, r0
    6798:	680b      	ldr	r3, [r1, #0]
    679a:	ea23 0300 	bic.w	r3, r3, r0
    679e:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    67a0:	f012 0108 	ands.w	r1, r2, #8
    67a4:	d10a      	bne.n	67bc <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    67a6:	f002 030f 	and.w	r3, r2, #15
    67aa:	009b      	lsls	r3, r3, #2
    67ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    67b0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    67b4:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    67b8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    67bc:	f384 8811 	msr	BASEPRI, r4
    67c0:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    67c4:	bd10      	pop	{r4, pc}
    67c6:	bf00      	nop
    67c8:	20001320 	.word	0x20001320

000067cc <usbd_ep_abort>:
{
    67cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67ce:	4601      	mov	r1, r0
	__asm__ volatile(
    67d0:	f04f 0320 	mov.w	r3, #32
    67d4:	f3ef 8511 	mrs	r5, BASEPRI
    67d8:	f383 8812 	msr	BASEPRI_MAX, r3
    67dc:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    67e0:	f7ff fa98 	bl	5d14 <ep_state_access>
    67e4:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    67e6:	4608      	mov	r0, r1
    67e8:	f002 ff0a 	bl	9600 <ep2bit>
    67ec:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    67ee:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    67f2:	fa02 f200 	lsl.w	r2, r2, r0
    67f6:	482e      	ldr	r0, [pc, #184]	; (68b0 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    67f8:	d118      	bne.n	682c <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    67fa:	6803      	ldr	r3, [r0, #0]
    67fc:	ea32 0403 	bics.w	r4, r2, r3
    6800:	d00a      	beq.n	6818 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    6802:	4608      	mov	r0, r1
    6804:	f7ff ffb8 	bl	6778 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    6808:	2303      	movs	r3, #3
    680a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    680c:	f385 8811 	msr	BASEPRI, r5
    6810:	f3bf 8f6f 	isb	sy
}
    6814:	b003      	add	sp, #12
    6816:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    6818:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    681c:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    681e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    6820:	4b24      	ldr	r3, [pc, #144]	; (68b4 <usbd_ep_abort+0xe8>)
    6822:	6818      	ldr	r0, [r3, #0]
    6824:	ea20 0002 	bic.w	r0, r0, r2
    6828:	6018      	str	r0, [r3, #0]
    682a:	e7ed      	b.n	6808 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    682c:	070b      	lsls	r3, r1, #28
    682e:	d415      	bmi.n	685c <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    6830:	2980      	cmp	r1, #128	; 0x80
    6832:	4b21      	ldr	r3, [pc, #132]	; (68b8 <usbd_ep_abort+0xec>)
    6834:	d02f      	beq.n	6896 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    6836:	f001 040f 	and.w	r4, r1, #15
    683a:	f204 34da 	addw	r4, r4, #986	; 0x3da
    683e:	0064      	lsls	r4, r4, #1
    6840:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    6844:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    6848:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    684c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    684e:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    6852:	433c      	orrs	r4, r7
    6854:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    6858:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    685c:	4f15      	ldr	r7, [pc, #84]	; (68b4 <usbd_ep_abort+0xe8>)
    685e:	6804      	ldr	r4, [r0, #0]
    6860:	683b      	ldr	r3, [r7, #0]
    6862:	ea64 0c03 	orn	ip, r4, r3
    6866:	ea1c 0f02 	tst.w	ip, r2
    686a:	d0cf      	beq.n	680c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    686c:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    686e:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    6872:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    6874:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    6876:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    6878:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    687a:	2303      	movs	r3, #3
    687c:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    687e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    6882:	4b0e      	ldr	r3, [pc, #56]	; (68bc <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    6884:	f88d 1006 	strb.w	r1, [sp, #6]
    6888:	2206      	movs	r2, #6
            m_event_handler(&evt);
    688a:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    688c:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    6890:	a801      	add	r0, sp, #4
    6892:	4798      	blx	r3
    6894:	e7ba      	b.n	680c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    6896:	f240 74b4 	movw	r4, #1972	; 0x7b4
    689a:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    689e:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    68a2:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    68a6:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    68a8:	f044 0404 	orr.w	r4, r4, #4
    68ac:	e7d1      	b.n	6852 <usbd_ep_abort+0x86>
    68ae:	bf00      	nop
    68b0:	200012b0 	.word	0x200012b0
    68b4:	20001320 	.word	0x20001320
    68b8:	40027000 	.word	0x40027000
    68bc:	20001444 	.word	0x20001444

000068c0 <ev_setup_handler>:
{
    68c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    68c2:	4b17      	ldr	r3, [pc, #92]	; (6920 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    68c4:	4c17      	ldr	r4, [pc, #92]	; (6924 <ev_setup_handler+0x64>)
    68c6:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    68ca:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    68cc:	4e16      	ldr	r6, [pc, #88]	; (6928 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    68ce:	43da      	mvns	r2, r3
    68d0:	4b16      	ldr	r3, [pc, #88]	; (692c <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    68d2:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    68d4:	681b      	ldr	r3, [r3, #0]
    68d6:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    68d8:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    68da:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    68dc:	f002 fe90 	bl	9600 <ep2bit>
    68e0:	2301      	movs	r3, #1
    68e2:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    68e4:	4213      	tst	r3, r2
    68e6:	d002      	beq.n	68ee <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    68e8:	4608      	mov	r0, r1
    68ea:	f7ff ff6f 	bl	67cc <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    68ee:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    68f2:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    68f6:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    68f8:	f7ff fb2a 	bl	5f50 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    68fc:	6823      	ldr	r3, [r4, #0]
    68fe:	f043 0301 	orr.w	r3, r3, #1
    6902:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    6904:	2300      	movs	r3, #0
    6906:	f8ad 3005 	strh.w	r3, [sp, #5]
    690a:	f88d 3007 	strb.w	r3, [sp, #7]
    690e:	2305      	movs	r3, #5
    6910:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    6914:	4b06      	ldr	r3, [pc, #24]	; (6930 <ev_setup_handler+0x70>)
    6916:	a801      	add	r0, sp, #4
    6918:	681b      	ldr	r3, [r3, #0]
    691a:	4798      	blx	r3
}
    691c:	b002      	add	sp, #8
    691e:	bd70      	pop	{r4, r5, r6, pc}
    6920:	40027000 	.word	0x40027000
    6924:	20001320 	.word	0x20001320
    6928:	20001530 	.word	0x20001530
    692c:	200012b0 	.word	0x200012b0
    6930:	20001444 	.word	0x20001444

00006934 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    6934:	4b1b      	ldr	r3, [pc, #108]	; (69a4 <nrfx_usbd_irq_handler+0x70>)
    6936:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    693a:	2300      	movs	r3, #0
{
    693c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
    6940:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    6942:	461d      	mov	r5, r3
    while (to_process)
    6944:	b970      	cbnz	r0, 6964 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    6946:	4f18      	ldr	r7, [pc, #96]	; (69a8 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    6948:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    694c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    6950:	f04f 0801 	mov.w	r8, #1
    while (active)
    6954:	b9bc      	cbnz	r4, 6986 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    6956:	f7ff fd61 	bl	641c <usbd_dmareq_process>
    if (setup_active)
    695a:	b306      	cbz	r6, 699e <nrfx_usbd_irq_handler+0x6a>
}
    695c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    6960:	f7ff bfae 	b.w	68c0 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    6964:	fa90 f2a0 	rbit	r2, r0
    6968:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    696c:	490f      	ldr	r1, [pc, #60]	; (69ac <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    696e:	0096      	lsls	r6, r2, #2
    6970:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    6972:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6976:	680e      	ldr	r6, [r1, #0]
    if (ret)
    6978:	b116      	cbz	r6, 6980 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    697a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    697c:	6809      	ldr	r1, [r1, #0]
    697e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    6980:	ea20 0002 	bic.w	r0, r0, r2
    6984:	e7de      	b.n	6944 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    6986:	fa94 f5a4 	rbit	r5, r4
    698a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    698e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    6992:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    6996:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    6998:	ea24 0405 	bic.w	r4, r4, r5
    699c:	e7da      	b.n	6954 <nrfx_usbd_irq_handler+0x20>
}
    699e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69a2:	bf00      	nop
    69a4:	40027000 	.word	0x40027000
    69a8:	0000a1fc 	.word	0x0000a1fc
    69ac:	40027100 	.word	0x40027100

000069b0 <usbd_ep_abort_all>:
{
    69b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    69b2:	4e11      	ldr	r6, [pc, #68]	; (69f8 <usbd_ep_abort_all+0x48>)
    69b4:	4b11      	ldr	r3, [pc, #68]	; (69fc <usbd_ep_abort_all+0x4c>)
    69b6:	6834      	ldr	r4, [r6, #0]
    69b8:	681b      	ldr	r3, [r3, #0]
    69ba:	0c24      	lsrs	r4, r4, #16
    69bc:	0424      	lsls	r4, r4, #16
    69be:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    69c0:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    69c2:	b91c      	cbnz	r4, 69cc <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    69c4:	f240 13ff 	movw	r3, #511	; 0x1ff
    69c8:	6033      	str	r3, [r6, #0]
}
    69ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    69cc:	fa94 f5a4 	rbit	r5, r4
    69d0:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    69d4:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    69d6:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    69d8:	bfc6      	itte	gt
    69da:	f1a5 0010 	subgt.w	r0, r5, #16
    69de:	b2c0      	uxtbgt	r0, r0
    69e0:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    69e4:	0703      	lsls	r3, r0, #28
    69e6:	d401      	bmi.n	69ec <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    69e8:	f7ff fef0 	bl	67cc <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    69ec:	fa07 f505 	lsl.w	r5, r7, r5
    69f0:	ea24 0405 	bic.w	r4, r4, r5
    69f4:	e7e5      	b.n	69c2 <usbd_ep_abort_all+0x12>
    69f6:	bf00      	nop
    69f8:	20001320 	.word	0x20001320
    69fc:	200012b0 	.word	0x200012b0

00006a00 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a00:	4b0c      	ldr	r3, [pc, #48]	; (6a34 <nrfx_usbd_stop+0x34>)
    6a02:	2280      	movs	r2, #128	; 0x80
{
    6a04:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    6a06:	2027      	movs	r0, #39	; 0x27
    6a08:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    6a0c:	f7fb fcbe 	bl	238c <arch_irq_is_enabled>
    6a10:	b170      	cbz	r0, 6a30 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    6a12:	4c09      	ldr	r4, [pc, #36]	; (6a38 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    6a14:	f7ff ffcc 	bl	69b0 <usbd_ep_abort_all>
    6a18:	2300      	movs	r3, #0
    6a1a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    6a1e:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    6a20:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    6a24:	f7fb fc9e 	bl	2364 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    6a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a2c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    6a30:	bd10      	pop	{r4, pc}
    6a32:	bf00      	nop
    6a34:	e000e100 	.word	0xe000e100
    6a38:	40027000 	.word	0x40027000

00006a3c <nrfx_usbd_disable>:
{
    6a3c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    6a3e:	f7ff ffdf 	bl	6a00 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    6a42:	4b08      	ldr	r3, [pc, #32]	; (6a64 <nrfx_usbd_disable+0x28>)
    6a44:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    6a48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    6a4c:	2200      	movs	r2, #0
    6a4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    6a52:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    6a56:	f7ff f96b 	bl	5d30 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    6a5a:	4b03      	ldr	r3, [pc, #12]	; (6a68 <nrfx_usbd_disable+0x2c>)
    6a5c:	2201      	movs	r2, #1
    6a5e:	701a      	strb	r2, [r3, #0]
}
    6a60:	bd08      	pop	{r3, pc}
    6a62:	bf00      	nop
    6a64:	40027000 	.word	0x40027000
    6a68:	2000152f 	.word	0x2000152f

00006a6c <nrfx_usbd_suspend>:
{
    6a6c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6a6e:	f04f 0320 	mov.w	r3, #32
    6a72:	f3ef 8511 	mrs	r5, BASEPRI
    6a76:	f383 8812 	msr	BASEPRI_MAX, r3
    6a7a:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    6a7e:	4b11      	ldr	r3, [pc, #68]	; (6ac4 <nrfx_usbd_suspend+0x58>)
    6a80:	781b      	ldrb	r3, [r3, #0]
    6a82:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    6a86:	b933      	cbnz	r3, 6a96 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    6a88:	2400      	movs	r4, #0
	__asm__ volatile(
    6a8a:	f385 8811 	msr	BASEPRI, r5
    6a8e:	f3bf 8f6f 	isb	sy
}
    6a92:	4620      	mov	r0, r4
    6a94:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    6a96:	f7ff ff8b 	bl	69b0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    6a9a:	4b0b      	ldr	r3, [pc, #44]	; (6ac8 <nrfx_usbd_suspend+0x5c>)
    6a9c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    6aa0:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    6aa4:	d1f0      	bne.n	6a88 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    6aa6:	2101      	movs	r1, #1
    6aa8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    6aac:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    6ab0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    6ab4:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    6ab6:	bf42      	ittt	mi
    6ab8:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    6abc:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    6ac0:	4614      	movmi	r4, r2
}
    6ac2:	e7e2      	b.n	6a8a <nrfx_usbd_suspend+0x1e>
    6ac4:	2000152d 	.word	0x2000152d
    6ac8:	40027000 	.word	0x40027000

00006acc <nrfx_usbd_ep_disable>:
{
    6acc:	b510      	push	{r4, lr}
    6ace:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    6ad0:	f7ff fe7c 	bl	67cc <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6ad4:	4a10      	ldr	r2, [pc, #64]	; (6b18 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    6ad6:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6ada:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    6ade:	f04f 0301 	mov.w	r3, #1
    6ae2:	bf14      	ite	ne
    6ae4:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    6ae8:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    6aec:	fa03 f300 	lsl.w	r3, r3, r0
    6af0:	ea6f 0303 	mvn.w	r3, r3
    6af4:	bf15      	itete	ne
    6af6:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    6af8:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    6afa:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    6afe:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    6b02:	bf14      	ite	ne
    6b04:	4b05      	ldrne	r3, [pc, #20]	; (6b1c <nrfx_usbd_ep_disable+0x50>)
    6b06:	4b06      	ldreq	r3, [pc, #24]	; (6b20 <nrfx_usbd_ep_disable+0x54>)
    6b08:	5c1a      	ldrb	r2, [r3, r0]
    6b0a:	2301      	movs	r3, #1
    6b0c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    6b0e:	4a02      	ldr	r2, [pc, #8]	; (6b18 <nrfx_usbd_ep_disable+0x4c>)
    6b10:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    6b14:	bd10      	pop	{r4, pc}
    6b16:	bf00      	nop
    6b18:	40027000 	.word	0x40027000
    6b1c:	0000a386 	.word	0x0000a386
    6b20:	0000a38f 	.word	0x0000a38f

00006b24 <nrfx_usbd_ep_enable>:
{
    6b24:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    6b26:	b243      	sxtb	r3, r0
    6b28:	2b00      	cmp	r3, #0
    6b2a:	4b23      	ldr	r3, [pc, #140]	; (6bb8 <nrfx_usbd_ep_enable+0x94>)
    6b2c:	4a23      	ldr	r2, [pc, #140]	; (6bbc <nrfx_usbd_ep_enable+0x98>)
    6b2e:	bfa8      	it	ge
    6b30:	461a      	movge	r2, r3
    6b32:	f000 030f 	and.w	r3, r0, #15
    6b36:	f04f 0401 	mov.w	r4, #1
    6b3a:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    6b3c:	4a20      	ldr	r2, [pc, #128]	; (6bc0 <nrfx_usbd_ep_enable+0x9c>)
    6b3e:	fa04 f101 	lsl.w	r1, r4, r1
{
    6b42:	4605      	mov	r5, r0
    6b44:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    6b48:	da0c      	bge.n	6b64 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    6b4a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    6b4e:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    6b50:	07c8      	lsls	r0, r1, #31
    6b52:	d406      	bmi.n	6b62 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    6b54:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6b58:	fa04 f303 	lsl.w	r3, r4, r3
    6b5c:	4303      	orrs	r3, r0
    6b5e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    6b62:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    6b64:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    6b68:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    6b6a:	07c9      	lsls	r1, r1, #31
    6b6c:	d4f9      	bmi.n	6b62 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    6b6e:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    6b72:	fa04 f103 	lsl.w	r1, r4, r3
    6b76:	4331      	orrs	r1, r6
    6b78:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d0f0      	beq.n	6b62 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    6b80:	0703      	lsls	r3, r0, #28
    6b82:	d4ee      	bmi.n	6b62 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    6b84:	f04f 0320 	mov.w	r3, #32
    6b88:	f3ef 8611 	mrs	r6, BASEPRI
    6b8c:	f383 8812 	msr	BASEPRI_MAX, r3
    6b90:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    6b94:	f7ff fdf0 	bl	6778 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    6b98:	4628      	mov	r0, r5
    6b9a:	f002 fd31 	bl	9600 <ep2bit>
    6b9e:	4a09      	ldr	r2, [pc, #36]	; (6bc4 <nrfx_usbd_ep_enable+0xa0>)
    6ba0:	6813      	ldr	r3, [r2, #0]
    6ba2:	fa04 f000 	lsl.w	r0, r4, r0
    6ba6:	ea23 0000 	bic.w	r0, r3, r0
    6baa:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    6bac:	f386 8811 	msr	BASEPRI, r6
    6bb0:	f3bf 8f6f 	isb	sy
}
    6bb4:	e7d5      	b.n	6b62 <nrfx_usbd_ep_enable+0x3e>
    6bb6:	bf00      	nop
    6bb8:	0000a38f 	.word	0x0000a38f
    6bbc:	0000a386 	.word	0x0000a386
    6bc0:	40027000 	.word	0x40027000
    6bc4:	200012b0 	.word	0x200012b0

00006bc8 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    6bc8:	0603      	lsls	r3, r0, #24
{
    6bca:	b510      	push	{r4, lr}
    6bcc:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    6bce:	d405      	bmi.n	6bdc <nrfx_usbd_ep_stall_clear+0x14>
    6bd0:	f7ff fd40 	bl	6654 <nrfx_usbd_ep_stall_check>
    6bd4:	b110      	cbz	r0, 6bdc <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    6bd6:	4620      	mov	r0, r4
    6bd8:	f7ff fdce 	bl	6778 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    6bdc:	4b01      	ldr	r3, [pc, #4]	; (6be4 <nrfx_usbd_ep_stall_clear+0x1c>)
    6bde:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    6be2:	bd10      	pop	{r4, pc}
    6be4:	40027000 	.word	0x40027000

00006be8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6be8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6bea:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6bee:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    6bf0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    6bf2:	6002      	str	r2, [r0, #0]
}
    6bf4:	4802      	ldr	r0, [pc, #8]	; (6c00 <nrf_gpio_pin_port_decode+0x18>)
    6bf6:	bf18      	it	ne
    6bf8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    6bfc:	4770      	bx	lr
    6bfe:	bf00      	nop
    6c00:	50000300 	.word	0x50000300

00006c04 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    6c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c06:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    6c08:	f002 fd67 	bl	96da <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    6c0c:	4608      	mov	r0, r1
    6c0e:	f002 fd64 	bl	96da <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c12:	a801      	add	r0, sp, #4
    6c14:	9601      	str	r6, [sp, #4]
    6c16:	f7ff ffe7 	bl	6be8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6c1a:	9b01      	ldr	r3, [sp, #4]
    6c1c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    6c20:	460c      	mov	r4, r1
    6c22:	f240 610d 	movw	r1, #1549	; 0x60d
    6c26:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c2a:	a801      	add	r0, sp, #4
    6c2c:	9401      	str	r4, [sp, #4]
    6c2e:	f7ff ffdb 	bl	6be8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6c32:	9b01      	ldr	r3, [sp, #4]
    6c34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    6c38:	2509      	movs	r5, #9
    6c3a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    6c3e:	2004      	movs	r0, #4
    6c40:	f002 fb1a 	bl	9278 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6c44:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c46:	a801      	add	r0, sp, #4
    6c48:	9401      	str	r4, [sp, #4]
    6c4a:	f7ff ffcd 	bl	6be8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6c4e:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    6c50:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6c54:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    6c56:	07db      	lsls	r3, r3, #31
    6c58:	d415      	bmi.n	6c86 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c5a:	a801      	add	r0, sp, #4
    6c5c:	9601      	str	r6, [sp, #4]
    6c5e:	f7ff ffc3 	bl	6be8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6c62:	9b01      	ldr	r3, [sp, #4]
    6c64:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    6c68:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    6c6c:	2004      	movs	r0, #4
    6c6e:	f002 fb03 	bl	9278 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    6c72:	4630      	mov	r0, r6
    6c74:	f002 fd31 	bl	96da <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    6c78:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    6c7a:	2004      	movs	r0, #4
    6c7c:	f002 fafc 	bl	9278 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    6c80:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    6c84:	d1df      	bne.n	6c46 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c86:	a801      	add	r0, sp, #4
    6c88:	9401      	str	r4, [sp, #4]
    6c8a:	f7ff ffad 	bl	6be8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6c8e:	9a01      	ldr	r2, [sp, #4]
    6c90:	2301      	movs	r3, #1
    6c92:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    6c94:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    6c98:	2004      	movs	r0, #4
    6c9a:	f002 faed 	bl	9278 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    6c9e:	4620      	mov	r0, r4
    6ca0:	f002 fd1b 	bl	96da <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    6ca4:	2004      	movs	r0, #4
    6ca6:	f002 fae7 	bl	9278 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6caa:	a801      	add	r0, sp, #4
    6cac:	9401      	str	r4, [sp, #4]
    6cae:	f7ff ff9b 	bl	6be8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6cb2:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    6cb4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    6cb8:	4803      	ldr	r0, [pc, #12]	; (6cc8 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6cba:	40d3      	lsrs	r3, r2
    6cbc:	f003 0301 	and.w	r3, r3, #1
    6cc0:	1ac0      	subs	r0, r0, r3
    6cc2:	b003      	add	sp, #12
    6cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cc6:	bf00      	nop
    6cc8:	0bad0001 	.word	0x0bad0001

00006ccc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6ccc:	4b0e      	ldr	r3, [pc, #56]	; (6d08 <z_sys_init_run_level+0x3c>)
{
    6cce:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6cd0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    6cd4:	3001      	adds	r0, #1
    6cd6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    6cda:	42a6      	cmp	r6, r4
    6cdc:	d800      	bhi.n	6ce0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    6cde:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    6ce0:	e9d4 3500 	ldrd	r3, r5, [r4]
    6ce4:	4628      	mov	r0, r5
    6ce6:	4798      	blx	r3
		if (dev != NULL) {
    6ce8:	b165      	cbz	r5, 6d04 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    6cea:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    6cec:	b130      	cbz	r0, 6cfc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    6cee:	2800      	cmp	r0, #0
    6cf0:	bfb8      	it	lt
    6cf2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    6cf4:	28ff      	cmp	r0, #255	; 0xff
    6cf6:	bfa8      	it	ge
    6cf8:	20ff      	movge	r0, #255	; 0xff
    6cfa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    6cfc:	785a      	ldrb	r2, [r3, #1]
    6cfe:	f042 0201 	orr.w	r2, r2, #1
    6d02:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6d04:	3408      	adds	r4, #8
    6d06:	e7e8      	b.n	6cda <z_sys_init_run_level+0xe>
    6d08:	0000a260 	.word	0x0000a260

00006d0c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    6d0c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    6d0e:	4605      	mov	r5, r0
    6d10:	b910      	cbnz	r0, 6d18 <z_impl_device_get_binding+0xc>
		return NULL;
    6d12:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    6d14:	4620      	mov	r0, r4
    6d16:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    6d18:	7803      	ldrb	r3, [r0, #0]
    6d1a:	2b00      	cmp	r3, #0
    6d1c:	d0f9      	beq.n	6d12 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    6d1e:	4c0e      	ldr	r4, [pc, #56]	; (6d58 <z_impl_device_get_binding+0x4c>)
    6d20:	4e0e      	ldr	r6, [pc, #56]	; (6d5c <z_impl_device_get_binding+0x50>)
    6d22:	42b4      	cmp	r4, r6
    6d24:	d108      	bne.n	6d38 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    6d26:	4c0c      	ldr	r4, [pc, #48]	; (6d58 <z_impl_device_get_binding+0x4c>)
    6d28:	42b4      	cmp	r4, r6
    6d2a:	d0f2      	beq.n	6d12 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6d2c:	4620      	mov	r0, r4
    6d2e:	f002 fce2 	bl	96f6 <z_device_is_ready>
    6d32:	b950      	cbnz	r0, 6d4a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    6d34:	3418      	adds	r4, #24
    6d36:	e7f7      	b.n	6d28 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    6d38:	4620      	mov	r0, r4
    6d3a:	f002 fcdc 	bl	96f6 <z_device_is_ready>
    6d3e:	b110      	cbz	r0, 6d46 <z_impl_device_get_binding+0x3a>
    6d40:	6823      	ldr	r3, [r4, #0]
    6d42:	42ab      	cmp	r3, r5
    6d44:	d0e6      	beq.n	6d14 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    6d46:	3418      	adds	r4, #24
    6d48:	e7eb      	b.n	6d22 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6d4a:	6821      	ldr	r1, [r4, #0]
    6d4c:	4628      	mov	r0, r5
    6d4e:	f001 fee9 	bl	8b24 <strcmp>
    6d52:	2800      	cmp	r0, #0
    6d54:	d1ee      	bne.n	6d34 <z_impl_device_get_binding+0x28>
    6d56:	e7dd      	b.n	6d14 <z_impl_device_get_binding+0x8>
    6d58:	00009d84 	.word	0x00009d84
    6d5c:	00009e44 	.word	0x00009e44

00006d60 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    6d60:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    6d62:	2300      	movs	r3, #0
{
    6d64:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    6d66:	2201      	movs	r2, #1
    6d68:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6d6c:	220f      	movs	r2, #15
    6d6e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    6d72:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    6d74:	4c0b      	ldr	r4, [pc, #44]	; (6da4 <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6d76:	4b0c      	ldr	r3, [pc, #48]	; (6da8 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
    6d78:	490c      	ldr	r1, [pc, #48]	; (6dac <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6d7a:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    6d7c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6d80:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    6d84:	f44f 72a0 	mov.w	r2, #320	; 0x140
    6d88:	9300      	str	r3, [sp, #0]
    6d8a:	fb02 1100 	mla	r1, r2, r0, r1
    6d8e:	4b08      	ldr	r3, [pc, #32]	; (6db0 <init_idle_thread+0x50>)
    6d90:	4620      	mov	r0, r4
    6d92:	f000 f8f7 	bl	6f84 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6d96:	7b63      	ldrb	r3, [r4, #13]
    6d98:	f023 0304 	bic.w	r3, r3, #4
    6d9c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    6d9e:	b006      	add	sp, #24
    6da0:	bd10      	pop	{r4, pc}
    6da2:	bf00      	nop
    6da4:	200004d8 	.word	0x200004d8
    6da8:	20001488 	.word	0x20001488
    6dac:	20002138 	.word	0x20002138
    6db0:	000070f5 	.word	0x000070f5

00006db4 <bg_thread_main>:
{
    6db4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    6db6:	4b0a      	ldr	r3, [pc, #40]	; (6de0 <bg_thread_main+0x2c>)
    6db8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6dba:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    6dbc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6dbe:	f7ff ff85 	bl	6ccc <z_sys_init_run_level>
	boot_banner();
    6dc2:	f001 f8e3 	bl	7f8c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    6dc6:	2003      	movs	r0, #3
    6dc8:	f7ff ff80 	bl	6ccc <z_sys_init_run_level>
	z_init_static_threads();
    6dcc:	f000 f936 	bl	703c <z_init_static_threads>
	main();
    6dd0:	f7f9 fb9c 	bl	50c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6dd4:	4a03      	ldr	r2, [pc, #12]	; (6de4 <bg_thread_main+0x30>)
    6dd6:	7b13      	ldrb	r3, [r2, #12]
    6dd8:	f023 0301 	bic.w	r3, r3, #1
    6ddc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6dde:	bd08      	pop	{r3, pc}
    6de0:	20001531 	.word	0x20001531
    6de4:	20000558 	.word	0x20000558

00006de8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    6de8:	4802      	ldr	r0, [pc, #8]	; (6df4 <z_bss_zero+0xc>)
    6dea:	4a03      	ldr	r2, [pc, #12]	; (6df8 <z_bss_zero+0x10>)
    6dec:	2100      	movs	r1, #0
    6dee:	1a12      	subs	r2, r2, r0
    6df0:	f001 beaf 	b.w	8b52 <memset>
    6df4:	20000378 	.word	0x20000378
    6df8:	20001534 	.word	0x20001534

00006dfc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6dfc:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6dfe:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6ec4 <z_cstart+0xc8>
    6e02:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6e04:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    6e08:	4d2f      	ldr	r5, [pc, #188]	; (6ec8 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    6e0a:	4e30      	ldr	r6, [pc, #192]	; (6ecc <z_cstart+0xd0>)
    6e0c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6e0e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 6ed0 <z_cstart+0xd4>
    6e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6e16:	2400      	movs	r4, #0
    6e18:	616b      	str	r3, [r5, #20]
    6e1a:	23e0      	movs	r3, #224	; 0xe0
    6e1c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    6e20:	77ec      	strb	r4, [r5, #31]
    6e22:	762c      	strb	r4, [r5, #24]
    6e24:	766c      	strb	r4, [r5, #25]
    6e26:	76ac      	strb	r4, [r5, #26]
    6e28:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6e2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6e2e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6e32:	626b      	str	r3, [r5, #36]	; 0x24
    6e34:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    6e38:	f7fb fc72 	bl	2720 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6e3c:	f7fb fa64 	bl	2308 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e44:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6e46:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6e48:	f7fb fd20 	bl	288c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6e4c:	f7fb fcb0 	bl	27b0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6e50:	f240 1301 	movw	r3, #257	; 0x101
    6e54:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    6e58:	ab06      	add	r3, sp, #24
    6e5a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    6e5c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    6e60:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6e62:	f002 fc47 	bl	96f4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6e66:	4620      	mov	r0, r4
    6e68:	f7ff ff30 	bl	6ccc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6e6c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    6e6e:	4d19      	ldr	r5, [pc, #100]	; (6ed4 <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6e70:	f7ff ff2c 	bl	6ccc <z_sys_init_run_level>
	z_sched_init();
    6e74:	f000 fdf0 	bl	7a58 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6e78:	4b17      	ldr	r3, [pc, #92]	; (6ed8 <z_cstart+0xdc>)
    6e7a:	9305      	str	r3, [sp, #20]
    6e7c:	2301      	movs	r3, #1
    6e7e:	4917      	ldr	r1, [pc, #92]	; (6edc <z_cstart+0xe0>)
    6e80:	9400      	str	r4, [sp, #0]
    6e82:	e9cd 4303 	strd	r4, r3, [sp, #12]
    6e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6e8a:	464b      	mov	r3, r9
    6e8c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6e90:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    6e92:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6e94:	f000 f876 	bl	6f84 <z_setup_new_thread>
    6e98:	7b6a      	ldrb	r2, [r5, #13]
    6e9a:	4607      	mov	r7, r0
    6e9c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    6ea0:	4628      	mov	r0, r5
    6ea2:	736a      	strb	r2, [r5, #13]
    6ea4:	f002 fd9f 	bl	99e6 <z_ready_thread>
		init_idle_thread(i);
    6ea8:	4620      	mov	r0, r4
    6eaa:	f7ff ff59 	bl	6d60 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    6eae:	4b0c      	ldr	r3, [pc, #48]	; (6ee0 <z_cstart+0xe4>)
    6eb0:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6eb2:	464a      	mov	r2, r9
    6eb4:	4639      	mov	r1, r7
    6eb6:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    6eb8:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    6eba:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6ebe:	f7fb fb1d 	bl	24fc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6ec2:	bf00      	nop
    6ec4:	20002a78 	.word	0x20002a78
    6ec8:	e000ed00 	.word	0xe000ed00
    6ecc:	20001488 	.word	0x20001488
    6ed0:	00006db5 	.word	0x00006db5
    6ed4:	20000558 	.word	0x20000558
    6ed8:	0000a398 	.word	0x0000a398
    6edc:	20001d38 	.word	0x20001d38
    6ee0:	200004d8 	.word	0x200004d8

00006ee4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    6ee4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6ee6:	4b0e      	ldr	r3, [pc, #56]	; (6f20 <init_mem_slab_module+0x3c>)
    6ee8:	4c0e      	ldr	r4, [pc, #56]	; (6f24 <init_mem_slab_module+0x40>)
    6eea:	42a3      	cmp	r3, r4
    6eec:	d301      	bcc.n	6ef2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    6eee:	2000      	movs	r0, #0
	return rc;
}
    6ef0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6ef2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    6ef6:	ea41 0200 	orr.w	r2, r1, r0
    6efa:	f012 0203 	ands.w	r2, r2, #3
    6efe:	d10b      	bne.n	6f18 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    6f00:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    6f02:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6f04:	42aa      	cmp	r2, r5
    6f06:	d101      	bne.n	6f0c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6f08:	331c      	adds	r3, #28
    6f0a:	e7ee      	b.n	6eea <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    6f0c:	695e      	ldr	r6, [r3, #20]
    6f0e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6f10:	3201      	adds	r2, #1
		slab->free_list = p;
    6f12:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    6f14:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    6f16:	e7f5      	b.n	6f04 <init_mem_slab_module+0x20>
	return rc;
    6f18:	f06f 0015 	mvn.w	r0, #21
    6f1c:	e7e8      	b.n	6ef0 <init_mem_slab_module+0xc>
    6f1e:	bf00      	nop
    6f20:	20000248 	.word	0x20000248
    6f24:	20000264 	.word	0x20000264

00006f28 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6f2a:	460c      	mov	r4, r1
	__asm__ volatile(
    6f2c:	f04f 0520 	mov.w	r5, #32
    6f30:	f3ef 8111 	mrs	r1, BASEPRI
    6f34:	f385 8812 	msr	BASEPRI_MAX, r5
    6f38:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6f3c:	6945      	ldr	r5, [r0, #20]
    6f3e:	b15d      	cbz	r5, 6f58 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    6f40:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    6f42:	682b      	ldr	r3, [r5, #0]
    6f44:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    6f46:	6983      	ldr	r3, [r0, #24]
    6f48:	3301      	adds	r3, #1
    6f4a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6f4c:	2000      	movs	r0, #0
	__asm__ volatile(
    6f4e:	f381 8811 	msr	BASEPRI, r1
    6f52:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    6f56:	e011      	b.n	6f7c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    6f58:	ea52 0c03 	orrs.w	ip, r2, r3
    6f5c:	d103      	bne.n	6f66 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    6f5e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    6f60:	f06f 000b 	mvn.w	r0, #11
    6f64:	e7f3      	b.n	6f4e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    6f66:	e9cd 2300 	strd	r2, r3, [sp]
    6f6a:	4602      	mov	r2, r0
    6f6c:	3008      	adds	r0, #8
    6f6e:	f000 fcc9 	bl	7904 <z_pend_curr>
		if (result == 0) {
    6f72:	b918      	cbnz	r0, 6f7c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    6f74:	4b02      	ldr	r3, [pc, #8]	; (6f80 <k_mem_slab_alloc+0x58>)
    6f76:	689b      	ldr	r3, [r3, #8]
    6f78:	695b      	ldr	r3, [r3, #20]
    6f7a:	6023      	str	r3, [r4, #0]
}
    6f7c:	b003      	add	sp, #12
    6f7e:	bd30      	pop	{r4, r5, pc}
    6f80:	20001488 	.word	0x20001488

00006f84 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6f84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6f88:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    6f8a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6f8c:	2604      	movs	r6, #4
    6f8e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    6f90:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    6f92:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6f94:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6f98:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    6f9a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    6fa0:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6fa2:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    6fa6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    6faa:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    6fae:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    6fb0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    6fb2:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6fb4:	9202      	str	r2, [sp, #8]
    6fb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6fb8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    6fba:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6fbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6fc0:	9200      	str	r2, [sp, #0]
    6fc2:	4642      	mov	r2, r8
{
    6fc4:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6fc6:	f7fb fa7d 	bl	24c4 <arch_new_thread>
	if (!_current) {
    6fca:	4b05      	ldr	r3, [pc, #20]	; (6fe0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    6fcc:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    6fce:	689b      	ldr	r3, [r3, #8]
    6fd0:	b103      	cbz	r3, 6fd4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    6fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    6fd4:	6723      	str	r3, [r4, #112]	; 0x70
}
    6fd6:	4640      	mov	r0, r8
    6fd8:	b004      	add	sp, #16
    6fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fde:	bf00      	nop
    6fe0:	20001488 	.word	0x20001488

00006fe4 <z_impl_k_thread_create>:
{
    6fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fe6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6fe8:	2700      	movs	r7, #0
    6fea:	9705      	str	r7, [sp, #20]
    6fec:	9f10      	ldr	r7, [sp, #64]	; 0x40
    6fee:	9704      	str	r7, [sp, #16]
    6ff0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    6ff2:	9703      	str	r7, [sp, #12]
    6ff4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    6ff6:	9702      	str	r7, [sp, #8]
{
    6ff8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6ffc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6ffe:	9701      	str	r7, [sp, #4]
    7000:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7002:	9700      	str	r7, [sp, #0]
{
    7004:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7006:	f7ff ffbd 	bl	6f84 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    700a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    700e:	bf08      	it	eq
    7010:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7014:	d005      	beq.n	7022 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7016:	ea55 0306 	orrs.w	r3, r5, r6
    701a:	d105      	bne.n	7028 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    701c:	4620      	mov	r0, r4
    701e:	f000 fc15 	bl	784c <z_sched_start>
}
    7022:	4620      	mov	r0, r4
    7024:	b007      	add	sp, #28
    7026:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7028:	4903      	ldr	r1, [pc, #12]	; (7038 <z_impl_k_thread_create+0x54>)
    702a:	4632      	mov	r2, r6
    702c:	462b      	mov	r3, r5
    702e:	f104 0018 	add.w	r0, r4, #24
    7032:	f000 fe9d 	bl	7d70 <z_add_timeout>
    7036:	e7f4      	b.n	7022 <z_impl_k_thread_create+0x3e>
    7038:	00009a07 	.word	0x00009a07

0000703c <z_init_static_threads>:
{
    703c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7040:	4c29      	ldr	r4, [pc, #164]	; (70e8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    7042:	4d2a      	ldr	r5, [pc, #168]	; (70ec <z_init_static_threads+0xb0>)
{
    7044:	b087      	sub	sp, #28
    7046:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    7048:	42ae      	cmp	r6, r5
    704a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    704e:	d30f      	bcc.n	7070 <z_init_static_threads+0x34>
	k_sched_lock();
    7050:	f000 fb18 	bl	7684 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7054:	4c24      	ldr	r4, [pc, #144]	; (70e8 <z_init_static_threads+0xac>)
    7056:	f8df 9098 	ldr.w	r9, [pc, #152]	; 70f0 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    705a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    705e:	f240 37e7 	movw	r7, #999	; 0x3e7
    7062:	42ac      	cmp	r4, r5
    7064:	d320      	bcc.n	70a8 <z_init_static_threads+0x6c>
}
    7066:	b007      	add	sp, #28
    7068:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    706c:	f000 bcd8 	b.w	7a20 <k_sched_unlock>
		z_setup_new_thread(
    7070:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7074:	9305      	str	r3, [sp, #20]
    7076:	f854 3c10 	ldr.w	r3, [r4, #-16]
    707a:	9304      	str	r3, [sp, #16]
    707c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7080:	9303      	str	r3, [sp, #12]
    7082:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7086:	9302      	str	r3, [sp, #8]
    7088:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    708c:	9301      	str	r3, [sp, #4]
    708e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7092:	9300      	str	r3, [sp, #0]
    7094:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    7098:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    709c:	f7ff ff72 	bl	6f84 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    70a0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    70a4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    70a6:	e7ce      	b.n	7046 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    70a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    70aa:	1c5a      	adds	r2, r3, #1
    70ac:	d00d      	beq.n	70ca <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    70ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    70b2:	2100      	movs	r1, #0
    70b4:	4638      	mov	r0, r7
    70b6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    70ba:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    70be:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    70c2:	d104      	bne.n	70ce <z_init_static_threads+0x92>
	z_sched_start(thread);
    70c4:	4640      	mov	r0, r8
    70c6:	f000 fbc1 	bl	784c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    70ca:	3430      	adds	r4, #48	; 0x30
    70cc:	e7c9      	b.n	7062 <z_init_static_threads+0x26>
    70ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    70d2:	2300      	movs	r3, #0
    70d4:	f7f9 f814 	bl	100 <__aeabi_uldivmod>
    70d8:	4602      	mov	r2, r0
    70da:	460b      	mov	r3, r1
    70dc:	f108 0018 	add.w	r0, r8, #24
    70e0:	4649      	mov	r1, r9
    70e2:	f000 fe45 	bl	7d70 <z_add_timeout>
    70e6:	e7f0      	b.n	70ca <z_init_static_threads+0x8e>
    70e8:	20000248 	.word	0x20000248
    70ec:	20000248 	.word	0x20000248
    70f0:	00009a07 	.word	0x00009a07

000070f4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    70f4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    70f6:	4c0b      	ldr	r4, [pc, #44]	; (7124 <idle+0x30>)
	return !z_sys_post_kernel;
    70f8:	4d0b      	ldr	r5, [pc, #44]	; (7128 <idle+0x34>)
	__asm__ volatile(
    70fa:	f04f 0220 	mov.w	r2, #32
    70fe:	f3ef 8311 	mrs	r3, BASEPRI
    7102:	f382 8812 	msr	BASEPRI_MAX, r2
    7106:	f3bf 8f6f 	isb	sy
    710a:	f002 fd23 	bl	9b54 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    710e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7110:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7112:	b913      	cbnz	r3, 711a <idle+0x26>
	arch_cpu_idle();
    7114:	f7fb f8fe 	bl	2314 <arch_cpu_idle>
}
    7118:	e7ef      	b.n	70fa <idle+0x6>
    711a:	f7fb f81d 	bl	2158 <pm_system_suspend>
    711e:	2800      	cmp	r0, #0
    7120:	d1eb      	bne.n	70fa <idle+0x6>
    7122:	e7f7      	b.n	7114 <idle+0x20>
    7124:	20001488 	.word	0x20001488
    7128:	20001531 	.word	0x20001531

0000712c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    712c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7130:	4604      	mov	r4, r0
    7132:	4617      	mov	r7, r2
    7134:	461e      	mov	r6, r3
    7136:	f04f 0320 	mov.w	r3, #32
    713a:	f3ef 8811 	mrs	r8, BASEPRI
    713e:	f383 8812 	msr	BASEPRI_MAX, r3
    7142:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7146:	68c3      	ldr	r3, [r0, #12]
    7148:	4a32      	ldr	r2, [pc, #200]	; (7214 <z_impl_k_mutex_lock+0xe8>)
    714a:	b16b      	cbz	r3, 7168 <z_impl_k_mutex_lock+0x3c>
    714c:	6880      	ldr	r0, [r0, #8]
    714e:	6891      	ldr	r1, [r2, #8]
    7150:	4288      	cmp	r0, r1
    7152:	d019      	beq.n	7188 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7154:	ea57 0306 	orrs.w	r3, r7, r6
    7158:	d118      	bne.n	718c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    715a:	f388 8811 	msr	BASEPRI, r8
    715e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7162:	f06f 000f 	mvn.w	r0, #15
    7166:	e00c      	b.n	7182 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    7168:	6891      	ldr	r1, [r2, #8]
    716a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    716e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7170:	3301      	adds	r3, #1
    7172:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7174:	6893      	ldr	r3, [r2, #8]
    7176:	60a3      	str	r3, [r4, #8]
    7178:	f388 8811 	msr	BASEPRI, r8
    717c:	f3bf 8f6f 	isb	sy
		return 0;
    7180:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7182:	b002      	add	sp, #8
    7184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7188:	6921      	ldr	r1, [r4, #16]
    718a:	e7f0      	b.n	716e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    718c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7190:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    7194:	4299      	cmp	r1, r3
    7196:	bfa8      	it	ge
    7198:	4619      	movge	r1, r3
    719a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    719e:	4291      	cmp	r1, r2
    71a0:	bfb8      	it	lt
    71a2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    71a4:	428b      	cmp	r3, r1
    71a6:	dd2e      	ble.n	7206 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    71a8:	f002 fb11 	bl	97ce <adjust_owner_prio.isra.0>
    71ac:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    71ae:	e9cd 7600 	strd	r7, r6, [sp]
    71b2:	4819      	ldr	r0, [pc, #100]	; (7218 <z_impl_k_mutex_lock+0xec>)
    71b4:	4622      	mov	r2, r4
    71b6:	4641      	mov	r1, r8
    71b8:	f000 fba4 	bl	7904 <z_pend_curr>
	if (got_mutex == 0) {
    71bc:	2800      	cmp	r0, #0
    71be:	d0e0      	beq.n	7182 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    71c0:	f04f 0320 	mov.w	r3, #32
    71c4:	f3ef 8611 	mrs	r6, BASEPRI
    71c8:	f383 8812 	msr	BASEPRI_MAX, r3
    71cc:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    71d0:	6823      	ldr	r3, [r4, #0]
    71d2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    71d4:	429c      	cmp	r4, r3
    71d6:	d00a      	beq.n	71ee <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    71d8:	b14b      	cbz	r3, 71ee <z_impl_k_mutex_lock+0xc2>
    71da:	f993 300e 	ldrsb.w	r3, [r3, #14]
    71de:	4299      	cmp	r1, r3
    71e0:	bfa8      	it	ge
    71e2:	4619      	movge	r1, r3
    71e4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    71e8:	4299      	cmp	r1, r3
    71ea:	bfb8      	it	lt
    71ec:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    71ee:	68a0      	ldr	r0, [r4, #8]
    71f0:	f002 faed 	bl	97ce <adjust_owner_prio.isra.0>
    71f4:	b900      	cbnz	r0, 71f8 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    71f6:	b145      	cbz	r5, 720a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    71f8:	4807      	ldr	r0, [pc, #28]	; (7218 <z_impl_k_mutex_lock+0xec>)
    71fa:	4631      	mov	r1, r6
    71fc:	f000 fa30 	bl	7660 <z_reschedule>
	return -EAGAIN;
    7200:	f06f 000a 	mvn.w	r0, #10
    7204:	e7bd      	b.n	7182 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    7206:	2500      	movs	r5, #0
    7208:	e7d1      	b.n	71ae <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    720a:	f386 8811 	msr	BASEPRI, r6
    720e:	f3bf 8f6f 	isb	sy
    7212:	e7f5      	b.n	7200 <z_impl_k_mutex_lock+0xd4>
    7214:	20001488 	.word	0x20001488
    7218:	20001532 	.word	0x20001532

0000721c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    721c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    721e:	6883      	ldr	r3, [r0, #8]
{
    7220:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    7222:	2b00      	cmp	r3, #0
    7224:	d032      	beq.n	728c <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7226:	4a1c      	ldr	r2, [pc, #112]	; (7298 <z_impl_k_mutex_unlock+0x7c>)
    7228:	6892      	ldr	r2, [r2, #8]
    722a:	4293      	cmp	r3, r2
    722c:	d131      	bne.n	7292 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    722e:	7bda      	ldrb	r2, [r3, #15]
    7230:	3a01      	subs	r2, #1
    7232:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7234:	68c3      	ldr	r3, [r0, #12]
    7236:	2b01      	cmp	r3, #1
    7238:	d905      	bls.n	7246 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    723a:	3b01      	subs	r3, #1
    723c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    723e:	f000 fbef 	bl	7a20 <k_sched_unlock>

	return 0;
    7242:	2000      	movs	r0, #0
}
    7244:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7246:	f04f 0320 	mov.w	r3, #32
    724a:	f3ef 8511 	mrs	r5, BASEPRI
    724e:	f383 8812 	msr	BASEPRI_MAX, r3
    7252:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7256:	6901      	ldr	r1, [r0, #16]
    7258:	6880      	ldr	r0, [r0, #8]
    725a:	f002 fab8 	bl	97ce <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    725e:	4620      	mov	r0, r4
    7260:	f002 fc1d 	bl	9a9e <z_unpend_first_thread>
	mutex->owner = new_owner;
    7264:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7266:	b158      	cbz	r0, 7280 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    7268:	f990 200e 	ldrsb.w	r2, [r0, #14]
    726c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    726e:	2200      	movs	r2, #0
    7270:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    7272:	f002 fbb8 	bl	99e6 <z_ready_thread>
		z_reschedule(&lock, key);
    7276:	4809      	ldr	r0, [pc, #36]	; (729c <z_impl_k_mutex_unlock+0x80>)
    7278:	4629      	mov	r1, r5
    727a:	f000 f9f1 	bl	7660 <z_reschedule>
    727e:	e7de      	b.n	723e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    7280:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7282:	f385 8811 	msr	BASEPRI, r5
    7286:	f3bf 8f6f 	isb	sy
    728a:	e7d8      	b.n	723e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    728c:	f06f 0015 	mvn.w	r0, #21
    7290:	e7d8      	b.n	7244 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    7292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7296:	e7d5      	b.n	7244 <z_impl_k_mutex_unlock+0x28>
    7298:	20001488 	.word	0x20001488
    729c:	20001532 	.word	0x20001532

000072a0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    72a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    72a2:	4611      	mov	r1, r2
	__asm__ volatile(
    72a4:	f04f 0220 	mov.w	r2, #32
    72a8:	f3ef 8511 	mrs	r5, BASEPRI
    72ac:	f382 8812 	msr	BASEPRI_MAX, r2
    72b0:	f3bf 8f6f 	isb	sy
    72b4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    72b6:	b19c      	cbz	r4, 72e0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    72b8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    72ba:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    72bc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    72c0:	4294      	cmp	r4, r2
	list->head = node;
    72c2:	6003      	str	r3, [r0, #0]
	list->tail = node;
    72c4:	bf08      	it	eq
    72c6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    72c8:	2101      	movs	r1, #1
    72ca:	4620      	mov	r0, r4
    72cc:	f002 faee 	bl	98ac <z_queue_node_peek>
    72d0:	4604      	mov	r4, r0
	__asm__ volatile(
    72d2:	f385 8811 	msr	BASEPRI, r5
    72d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    72da:	4620      	mov	r0, r4
    72dc:	b003      	add	sp, #12
    72de:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    72e0:	ea51 0203 	orrs.w	r2, r1, r3
    72e4:	d0f5      	beq.n	72d2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    72e6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    72ea:	e9cd 1300 	strd	r1, r3, [sp]
    72ee:	4610      	mov	r0, r2
    72f0:	4629      	mov	r1, r5
    72f2:	f000 fb07 	bl	7904 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    72f6:	2800      	cmp	r0, #0
    72f8:	d1ef      	bne.n	72da <z_impl_k_queue_get+0x3a>
    72fa:	4b02      	ldr	r3, [pc, #8]	; (7304 <z_impl_k_queue_get+0x64>)
    72fc:	689b      	ldr	r3, [r3, #8]
    72fe:	695c      	ldr	r4, [r3, #20]
    7300:	e7eb      	b.n	72da <z_impl_k_queue_get+0x3a>
    7302:	bf00      	nop
    7304:	20001488 	.word	0x20001488

00007308 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7308:	b538      	push	{r3, r4, r5, lr}
    730a:	4604      	mov	r4, r0
	__asm__ volatile(
    730c:	f04f 0320 	mov.w	r3, #32
    7310:	f3ef 8511 	mrs	r5, BASEPRI
    7314:	f383 8812 	msr	BASEPRI_MAX, r3
    7318:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    731c:	f002 fbbf 	bl	9a9e <z_unpend_first_thread>

	if (thread != NULL) {
    7320:	b148      	cbz	r0, 7336 <z_impl_k_sem_give+0x2e>
    7322:	2200      	movs	r2, #0
    7324:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7326:	f002 fb5e 	bl	99e6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    732a:	4629      	mov	r1, r5
    732c:	4805      	ldr	r0, [pc, #20]	; (7344 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    732e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7332:	f000 b995 	b.w	7660 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7336:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    733a:	429a      	cmp	r2, r3
    733c:	bf18      	it	ne
    733e:	3301      	addne	r3, #1
    7340:	60a3      	str	r3, [r4, #8]
}
    7342:	e7f2      	b.n	732a <z_impl_k_sem_give+0x22>
    7344:	20001532 	.word	0x20001532

00007348 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7348:	b513      	push	{r0, r1, r4, lr}
    734a:	f04f 0420 	mov.w	r4, #32
    734e:	f3ef 8111 	mrs	r1, BASEPRI
    7352:	f384 8812 	msr	BASEPRI_MAX, r4
    7356:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    735a:	6884      	ldr	r4, [r0, #8]
    735c:	b144      	cbz	r4, 7370 <z_impl_k_sem_take+0x28>
		sem->count--;
    735e:	3c01      	subs	r4, #1
    7360:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    7362:	f381 8811 	msr	BASEPRI, r1
    7366:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    736a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    736c:	b002      	add	sp, #8
    736e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7370:	ea52 0403 	orrs.w	r4, r2, r3
    7374:	d106      	bne.n	7384 <z_impl_k_sem_take+0x3c>
    7376:	f381 8811 	msr	BASEPRI, r1
    737a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    737e:	f06f 000f 	mvn.w	r0, #15
    7382:	e7f3      	b.n	736c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7384:	e9cd 2300 	strd	r2, r3, [sp]
    7388:	4602      	mov	r2, r0
    738a:	4802      	ldr	r0, [pc, #8]	; (7394 <z_impl_k_sem_take+0x4c>)
    738c:	f000 faba 	bl	7904 <z_pend_curr>
	return ret;
    7390:	e7ec      	b.n	736c <z_impl_k_sem_take+0x24>
    7392:	bf00      	nop
    7394:	20001532 	.word	0x20001532

00007398 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    7398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    739c:	4e47      	ldr	r6, [pc, #284]	; (74bc <work_queue_main+0x124>)
    739e:	b085      	sub	sp, #20
    73a0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    73a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    73a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    73aa:	f04f 0320 	mov.w	r3, #32
    73ae:	f3ef 8711 	mrs	r7, BASEPRI
    73b2:	f383 8812 	msr	BASEPRI_MAX, r3
    73b6:	f3bf 8f6f 	isb	sy
    73ba:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    73be:	b98d      	cbnz	r5, 73e4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    73c0:	2102      	movs	r1, #2
    73c2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    73c6:	f002 fa94 	bl	98f2 <flag_test_and_clear>
    73ca:	2800      	cmp	r0, #0
    73cc:	d135      	bne.n	743a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    73ce:	2300      	movs	r3, #0
    73d0:	e9cd 8900 	strd	r8, r9, [sp]
    73d4:	9302      	str	r3, [sp, #8]
    73d6:	f104 0288 	add.w	r2, r4, #136	; 0x88
    73da:	4639      	mov	r1, r7
    73dc:	4838      	ldr	r0, [pc, #224]	; (74c0 <work_queue_main+0x128>)
    73de:	f000 fc51 	bl	7c84 <z_sched_wait>
			continue;
    73e2:	e7e2      	b.n	73aa <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    73e4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    73e8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    73ea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    73ee:	4295      	cmp	r5, r2
    73f0:	d101      	bne.n	73f6 <work_queue_main+0x5e>
	list->tail = node;
    73f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    73f6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    73fa:	f043 0302 	orr.w	r3, r3, #2
    73fe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    7402:	68eb      	ldr	r3, [r5, #12]
    7404:	f023 0304 	bic.w	r3, r3, #4
    7408:	f043 0301 	orr.w	r3, r3, #1
    740c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    740e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    7410:	f387 8811 	msr	BASEPRI, r7
    7414:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    7418:	4628      	mov	r0, r5
    741a:	4798      	blx	r3
	__asm__ volatile(
    741c:	f04f 0320 	mov.w	r3, #32
    7420:	f3ef 8b11 	mrs	fp, BASEPRI
    7424:	f383 8812 	msr	BASEPRI_MAX, r3
    7428:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    742c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    742e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    7430:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7434:	d40b      	bmi.n	744e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    7436:	60ea      	str	r2, [r5, #12]
    7438:	e00e      	b.n	7458 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    743a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    743e:	2200      	movs	r2, #0
    7440:	2101      	movs	r1, #1
    7442:	4628      	mov	r0, r5
    7444:	f002 fb53 	bl	9aee <z_sched_wake>
    7448:	2800      	cmp	r0, #0
    744a:	d1f8      	bne.n	743e <work_queue_main+0xa6>
    744c:	e7bf      	b.n	73ce <work_queue_main+0x36>
	return list->head;
    744e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    7450:	f023 0303 	bic.w	r3, r3, #3
    7454:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7456:	b970      	cbnz	r0, 7476 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    7458:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    745c:	f023 0302 	bic.w	r3, r3, #2
    7460:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    7464:	f38b 8811 	msr	BASEPRI, fp
    7468:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    746c:	05d8      	lsls	r0, r3, #23
    746e:	d49c      	bmi.n	73aa <work_queue_main+0x12>
	z_impl_k_yield();
    7470:	f000 fafe 	bl	7a70 <z_impl_k_yield>
}
    7474:	e799      	b.n	73aa <work_queue_main+0x12>
	return node->next;
    7476:	2700      	movs	r7, #0
    7478:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    747c:	463b      	mov	r3, r7
		if (wc->work == work) {
    747e:	6842      	ldr	r2, [r0, #4]
    7480:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    7482:	4601      	mov	r1, r0
		if (wc->work == work) {
    7484:	d10c      	bne.n	74a0 <work_queue_main+0x108>
	return node->next;
    7486:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    7488:	b997      	cbnz	r7, 74b0 <work_queue_main+0x118>
    748a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    748c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    748e:	4282      	cmp	r2, r0
    7490:	d100      	bne.n	7494 <work_queue_main+0xfc>
	list->tail = node;
    7492:	6071      	str	r1, [r6, #4]
	parent->next = child;
    7494:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    7498:	f7ff ff36 	bl	7308 <z_impl_k_sem_give>
}
    749c:	4639      	mov	r1, r7
    749e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    74a0:	f1ba 0f00 	cmp.w	sl, #0
    74a4:	d0d8      	beq.n	7458 <work_queue_main+0xc0>
	return node->next;
    74a6:	4650      	mov	r0, sl
    74a8:	460f      	mov	r7, r1
    74aa:	f8da a000 	ldr.w	sl, [sl]
    74ae:	e7e6      	b.n	747e <work_queue_main+0xe6>
	return list->tail;
    74b0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    74b2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    74b4:	4290      	cmp	r0, r2
	list->tail = node;
    74b6:	bf08      	it	eq
    74b8:	6077      	streq	r7, [r6, #4]
}
    74ba:	e7eb      	b.n	7494 <work_queue_main+0xfc>
    74bc:	200014b0 	.word	0x200014b0
    74c0:	20001532 	.word	0x20001532

000074c4 <submit_to_queue_locked>:
{
    74c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    74c6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    74c8:	079a      	lsls	r2, r3, #30
{
    74ca:	4604      	mov	r4, r0
    74cc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    74ce:	f3c3 0540 	ubfx	r5, r3, #1, #1
    74d2:	d41f      	bmi.n	7514 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    74d4:	075f      	lsls	r7, r3, #29
    74d6:	d41f      	bmi.n	7518 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    74d8:	680a      	ldr	r2, [r1, #0]
    74da:	b90a      	cbnz	r2, 74e0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    74dc:	6882      	ldr	r2, [r0, #8]
    74de:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    74e0:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    74e2:	bf44      	itt	mi
    74e4:	68a3      	ldrmi	r3, [r4, #8]
    74e6:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    74e8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    74ea:	bf4c      	ite	mi
    74ec:	2502      	movmi	r5, #2
		ret = 1;
    74ee:	2501      	movpl	r5, #1
	if (queue == NULL) {
    74f0:	b37f      	cbz	r7, 7552 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    74f2:	4b1b      	ldr	r3, [pc, #108]	; (7560 <submit_to_queue_locked+0x9c>)
    74f4:	689b      	ldr	r3, [r3, #8]
    74f6:	42bb      	cmp	r3, r7
    74f8:	d111      	bne.n	751e <submit_to_queue_locked+0x5a>
    74fa:	f002 f956 	bl	97aa <k_is_in_isr>
    74fe:	f080 0001 	eor.w	r0, r0, #1
    7502:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    7504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7508:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    750a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    750e:	d523      	bpl.n	7558 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    7510:	b13a      	cbz	r2, 7522 <submit_to_queue_locked+0x5e>
    7512:	b940      	cbnz	r0, 7526 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    7514:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    7518:	2300      	movs	r3, #0
    751a:	6033      	str	r3, [r6, #0]
	return ret;
    751c:	e013      	b.n	7546 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    751e:	2000      	movs	r0, #0
    7520:	e7f0      	b.n	7504 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    7522:	071b      	lsls	r3, r3, #28
    7524:	d4f6      	bmi.n	7514 <submit_to_queue_locked+0x50>
	parent->next = child;
    7526:	2300      	movs	r3, #0
    7528:	6023      	str	r3, [r4, #0]
	return list->tail;
    752a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    752e:	b963      	cbnz	r3, 754a <submit_to_queue_locked+0x86>
	list->head = node;
    7530:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    7534:	4638      	mov	r0, r7
    7536:	f002 f9e7 	bl	9908 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    753a:	68e3      	ldr	r3, [r4, #12]
    753c:	f043 0304 	orr.w	r3, r3, #4
    7540:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    7542:	6833      	ldr	r3, [r6, #0]
    7544:	60a3      	str	r3, [r4, #8]
}
    7546:	4628      	mov	r0, r5
    7548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    754a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    754c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    7550:	e7f0      	b.n	7534 <submit_to_queue_locked+0x70>
		return -EINVAL;
    7552:	f06f 0515 	mvn.w	r5, #21
    7556:	e7df      	b.n	7518 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    7558:	f06f 0512 	mvn.w	r5, #18
    755c:	e7dc      	b.n	7518 <submit_to_queue_locked+0x54>
    755e:	bf00      	nop
    7560:	20001488 	.word	0x20001488

00007564 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    7564:	b5f0      	push	{r4, r5, r6, r7, lr}
    7566:	b089      	sub	sp, #36	; 0x24
    7568:	4604      	mov	r4, r0
	list->head = NULL;
    756a:	2000      	movs	r0, #0
	list->tail = NULL;
    756c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    7570:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7572:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    7576:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    757a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    757e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    7582:	b31d      	cbz	r5, 75cc <k_work_queue_start+0x68>
    7584:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    7586:	2800      	cmp	r0, #0
    7588:	f240 1001 	movw	r0, #257	; 0x101
    758c:	bf08      	it	eq
    758e:	2001      	moveq	r0, #1
	*flagp = flags;
    7590:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7594:	2000      	movs	r0, #0
    7596:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    759a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    759e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    75a2:	e9cd 0001 	strd	r0, r0, [sp, #4]
    75a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    75aa:	4b09      	ldr	r3, [pc, #36]	; (75d0 <k_work_queue_start+0x6c>)
    75ac:	9400      	str	r4, [sp, #0]
    75ae:	4620      	mov	r0, r4
    75b0:	f7ff fd18 	bl	6fe4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    75b4:	b125      	cbz	r5, 75c0 <k_work_queue_start+0x5c>
    75b6:	6829      	ldr	r1, [r5, #0]
    75b8:	b111      	cbz	r1, 75c0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    75ba:	4620      	mov	r0, r4
    75bc:	f002 f8fb 	bl	97b6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    75c0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    75c2:	b009      	add	sp, #36	; 0x24
    75c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    75c8:	f002 b8f8 	b.w	97bc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    75cc:	2001      	movs	r0, #1
    75ce:	e7df      	b.n	7590 <k_work_queue_start+0x2c>
    75d0:	00007399 	.word	0x00007399

000075d4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    75d4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    75d6:	4c08      	ldr	r4, [pc, #32]	; (75f8 <z_reset_time_slice+0x24>)
    75d8:	6823      	ldr	r3, [r4, #0]
    75da:	b15b      	cbz	r3, 75f4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    75dc:	f7fd f84e 	bl	467c <sys_clock_elapsed>
    75e0:	4603      	mov	r3, r0
    75e2:	6820      	ldr	r0, [r4, #0]
    75e4:	4a05      	ldr	r2, [pc, #20]	; (75fc <z_reset_time_slice+0x28>)
    75e6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    75e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    75ec:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    75ee:	2100      	movs	r1, #0
    75f0:	f002 bac0 	b.w	9b74 <z_set_timeout_expiry>
}
    75f4:	bd10      	pop	{r4, pc}
    75f6:	bf00      	nop
    75f8:	200014c0 	.word	0x200014c0
    75fc:	20001488 	.word	0x20001488

00007600 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    7600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7602:	4604      	mov	r4, r0
    7604:	460d      	mov	r5, r1
	__asm__ volatile(
    7606:	f04f 0320 	mov.w	r3, #32
    760a:	f3ef 8611 	mrs	r6, BASEPRI
    760e:	f383 8812 	msr	BASEPRI_MAX, r3
    7612:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    7616:	4b0f      	ldr	r3, [pc, #60]	; (7654 <k_sched_time_slice_set+0x54>)
    7618:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    761a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    761e:	f240 30e7 	movw	r0, #999	; 0x3e7
    7622:	6119      	str	r1, [r3, #16]
    7624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7628:	2300      	movs	r3, #0
    762a:	fbe4 0107 	umlal	r0, r1, r4, r7
    762e:	f7f8 fd67 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7632:	2c00      	cmp	r4, #0
    7634:	4b08      	ldr	r3, [pc, #32]	; (7658 <k_sched_time_slice_set+0x58>)
    7636:	dc09      	bgt.n	764c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    7638:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    763a:	4b08      	ldr	r3, [pc, #32]	; (765c <k_sched_time_slice_set+0x5c>)
    763c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    763e:	f7ff ffc9 	bl	75d4 <z_reset_time_slice>
	__asm__ volatile(
    7642:	f386 8811 	msr	BASEPRI, r6
    7646:	f3bf 8f6f 	isb	sy
	}
}
    764a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    764c:	2802      	cmp	r0, #2
    764e:	bfb8      	it	lt
    7650:	2002      	movlt	r0, #2
    7652:	e7f1      	b.n	7638 <k_sched_time_slice_set+0x38>
    7654:	20001488 	.word	0x20001488
    7658:	200014c0 	.word	0x200014c0
    765c:	200014bc 	.word	0x200014bc

00007660 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7660:	b949      	cbnz	r1, 7676 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7662:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    7666:	b930      	cbnz	r0, 7676 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    7668:	4b05      	ldr	r3, [pc, #20]	; (7680 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    766a:	69da      	ldr	r2, [r3, #28]
    766c:	689b      	ldr	r3, [r3, #8]
    766e:	429a      	cmp	r2, r3
    7670:	d001      	beq.n	7676 <z_reschedule+0x16>
	ret = arch_swap(key);
    7672:	f7fa bed9 	b.w	2428 <arch_swap>
    7676:	f381 8811 	msr	BASEPRI, r1
    767a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    767e:	4770      	bx	lr
    7680:	20001488 	.word	0x20001488

00007684 <k_sched_lock>:
	__asm__ volatile(
    7684:	f04f 0320 	mov.w	r3, #32
    7688:	f3ef 8111 	mrs	r1, BASEPRI
    768c:	f383 8812 	msr	BASEPRI_MAX, r3
    7690:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    7694:	4b04      	ldr	r3, [pc, #16]	; (76a8 <k_sched_lock+0x24>)
    7696:	689a      	ldr	r2, [r3, #8]
    7698:	7bd3      	ldrb	r3, [r2, #15]
    769a:	3b01      	subs	r3, #1
    769c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    769e:	f381 8811 	msr	BASEPRI, r1
    76a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    76a6:	4770      	bx	lr
    76a8:	20001488 	.word	0x20001488

000076ac <update_cache>:
{
    76ac:	b538      	push	{r3, r4, r5, lr}
    76ae:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    76b0:	480c      	ldr	r0, [pc, #48]	; (76e4 <update_cache+0x38>)
    76b2:	4d0d      	ldr	r5, [pc, #52]	; (76e8 <update_cache+0x3c>)
    76b4:	f002 f991 	bl	99da <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    76b8:	4604      	mov	r4, r0
    76ba:	b900      	cbnz	r0, 76be <update_cache+0x12>
    76bc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    76be:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    76c0:	b94a      	cbnz	r2, 76d6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    76c2:	7b5a      	ldrb	r2, [r3, #13]
    76c4:	06d2      	lsls	r2, r2, #27
    76c6:	d106      	bne.n	76d6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    76c8:	69a2      	ldr	r2, [r4, #24]
    76ca:	b922      	cbnz	r2, 76d6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    76cc:	89da      	ldrh	r2, [r3, #14]
    76ce:	2a7f      	cmp	r2, #127	; 0x7f
    76d0:	d901      	bls.n	76d6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    76d2:	61eb      	str	r3, [r5, #28]
}
    76d4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    76d6:	429c      	cmp	r4, r3
    76d8:	d001      	beq.n	76de <update_cache+0x32>
			z_reset_time_slice();
    76da:	f7ff ff7b 	bl	75d4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    76de:	61ec      	str	r4, [r5, #28]
}
    76e0:	e7f8      	b.n	76d4 <update_cache+0x28>
    76e2:	bf00      	nop
    76e4:	200014a8 	.word	0x200014a8
    76e8:	20001488 	.word	0x20001488

000076ec <move_thread_to_end_of_prio_q>:
{
    76ec:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    76ee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    76f2:	7b43      	ldrb	r3, [r0, #13]
    76f4:	2a00      	cmp	r2, #0
{
    76f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    76f8:	da04      	bge.n	7704 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    76fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    76fe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    7700:	f002 f92f 	bl	9962 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7704:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    7706:	4a15      	ldr	r2, [pc, #84]	; (775c <move_thread_to_end_of_prio_q+0x70>)
    7708:	f063 037f 	orn	r3, r3, #127	; 0x7f
    770c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    770e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7712:	f102 0520 	add.w	r5, r2, #32
    7716:	42ab      	cmp	r3, r5
    7718:	d01b      	beq.n	7752 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    771a:	b1d3      	cbz	r3, 7752 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    771c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    7720:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    7724:	4286      	cmp	r6, r0
    7726:	d00f      	beq.n	7748 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    7728:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    772a:	2800      	cmp	r0, #0
    772c:	dd0c      	ble.n	7748 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    772e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    7730:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    7734:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    7736:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    7738:	6890      	ldr	r0, [r2, #8]
    773a:	1a43      	subs	r3, r0, r1
    773c:	4258      	negs	r0, r3
}
    773e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    7742:	4158      	adcs	r0, r3
    7744:	f7ff bfb2 	b.w	76ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7748:	42a3      	cmp	r3, r4
    774a:	d002      	beq.n	7752 <move_thread_to_end_of_prio_q+0x66>
    774c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    774e:	2b00      	cmp	r3, #0
    7750:	d1e6      	bne.n	7720 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    7752:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    7756:	6021      	str	r1, [r4, #0]
	list->tail = node;
    7758:	6251      	str	r1, [r2, #36]	; 0x24
}
    775a:	e7ed      	b.n	7738 <move_thread_to_end_of_prio_q+0x4c>
    775c:	20001488 	.word	0x20001488

00007760 <z_time_slice>:
{
    7760:	b538      	push	{r3, r4, r5, lr}
    7762:	4601      	mov	r1, r0
	__asm__ volatile(
    7764:	f04f 0320 	mov.w	r3, #32
    7768:	f3ef 8411 	mrs	r4, BASEPRI
    776c:	f383 8812 	msr	BASEPRI_MAX, r3
    7770:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    7774:	4b15      	ldr	r3, [pc, #84]	; (77cc <z_time_slice+0x6c>)
    7776:	4a16      	ldr	r2, [pc, #88]	; (77d0 <z_time_slice+0x70>)
    7778:	6898      	ldr	r0, [r3, #8]
    777a:	6815      	ldr	r5, [r2, #0]
    777c:	42a8      	cmp	r0, r5
    777e:	d106      	bne.n	778e <z_time_slice+0x2e>
			z_reset_time_slice();
    7780:	f7ff ff28 	bl	75d4 <z_reset_time_slice>
	__asm__ volatile(
    7784:	f384 8811 	msr	BASEPRI, r4
    7788:	f3bf 8f6f 	isb	sy
}
    778c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    778e:	2500      	movs	r5, #0
    7790:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    7792:	4a10      	ldr	r2, [pc, #64]	; (77d4 <z_time_slice+0x74>)
    7794:	6812      	ldr	r2, [r2, #0]
    7796:	b1ba      	cbz	r2, 77c8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    7798:	89c2      	ldrh	r2, [r0, #14]
    779a:	2a7f      	cmp	r2, #127	; 0x7f
    779c:	d814      	bhi.n	77c8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    779e:	7b42      	ldrb	r2, [r0, #13]
    77a0:	06d2      	lsls	r2, r2, #27
    77a2:	d111      	bne.n	77c8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    77a4:	4a0c      	ldr	r2, [pc, #48]	; (77d8 <z_time_slice+0x78>)
    77a6:	f990 500e 	ldrsb.w	r5, [r0, #14]
    77aa:	6812      	ldr	r2, [r2, #0]
    77ac:	4295      	cmp	r5, r2
    77ae:	db0b      	blt.n	77c8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    77b0:	4a0a      	ldr	r2, [pc, #40]	; (77dc <z_time_slice+0x7c>)
    77b2:	4290      	cmp	r0, r2
    77b4:	d008      	beq.n	77c8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    77b6:	691a      	ldr	r2, [r3, #16]
    77b8:	428a      	cmp	r2, r1
    77ba:	dc02      	bgt.n	77c2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    77bc:	f7ff ff96 	bl	76ec <move_thread_to_end_of_prio_q>
    77c0:	e7de      	b.n	7780 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    77c2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    77c4:	611a      	str	r2, [r3, #16]
    77c6:	e7dd      	b.n	7784 <z_time_slice+0x24>
    77c8:	2200      	movs	r2, #0
    77ca:	e7fb      	b.n	77c4 <z_time_slice+0x64>
    77cc:	20001488 	.word	0x20001488
    77d0:	200014b8 	.word	0x200014b8
    77d4:	200014c0 	.word	0x200014c0
    77d8:	200014bc 	.word	0x200014bc
    77dc:	200004d8 	.word	0x200004d8

000077e0 <ready_thread>:
{
    77e0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    77e2:	f990 200d 	ldrsb.w	r2, [r0, #13]
    77e6:	7b43      	ldrb	r3, [r0, #13]
    77e8:	2a00      	cmp	r2, #0
    77ea:	db2a      	blt.n	7842 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    77ec:	06da      	lsls	r2, r3, #27
    77ee:	d128      	bne.n	7842 <ready_thread+0x62>
    77f0:	6982      	ldr	r2, [r0, #24]
    77f2:	bb32      	cbnz	r2, 7842 <ready_thread+0x62>
	return list->head == list;
    77f4:	4a14      	ldr	r2, [pc, #80]	; (7848 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    77f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    77fa:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    77fc:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7800:	f102 0520 	add.w	r5, r2, #32
    7804:	42ab      	cmp	r3, r5
    7806:	d017      	beq.n	7838 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7808:	b1b3      	cbz	r3, 7838 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    780a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    780e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    7812:	428e      	cmp	r6, r1
    7814:	d00b      	beq.n	782e <ready_thread+0x4e>
		return b2 - b1;
    7816:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7818:	2900      	cmp	r1, #0
    781a:	dd08      	ble.n	782e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    781c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    781e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    7822:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    7824:	6058      	str	r0, [r3, #4]
}
    7826:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    7828:	2000      	movs	r0, #0
    782a:	f7ff bf3f 	b.w	76ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
    782e:	42a3      	cmp	r3, r4
    7830:	d002      	beq.n	7838 <ready_thread+0x58>
    7832:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7834:	2b00      	cmp	r3, #0
    7836:	d1ea      	bne.n	780e <ready_thread+0x2e>
	node->prev = tail;
    7838:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    783c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    783e:	6250      	str	r0, [r2, #36]	; 0x24
}
    7840:	e7f1      	b.n	7826 <ready_thread+0x46>
}
    7842:	bc70      	pop	{r4, r5, r6}
    7844:	4770      	bx	lr
    7846:	bf00      	nop
    7848:	20001488 	.word	0x20001488

0000784c <z_sched_start>:
{
    784c:	b510      	push	{r4, lr}
	__asm__ volatile(
    784e:	f04f 0220 	mov.w	r2, #32
    7852:	f3ef 8411 	mrs	r4, BASEPRI
    7856:	f382 8812 	msr	BASEPRI_MAX, r2
    785a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    785e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    7860:	0751      	lsls	r1, r2, #29
    7862:	d404      	bmi.n	786e <z_sched_start+0x22>
	__asm__ volatile(
    7864:	f384 8811 	msr	BASEPRI, r4
    7868:	f3bf 8f6f 	isb	sy
}
    786c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    786e:	f022 0204 	bic.w	r2, r2, #4
    7872:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    7874:	f7ff ffb4 	bl	77e0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7878:	4621      	mov	r1, r4
    787a:	4802      	ldr	r0, [pc, #8]	; (7884 <z_sched_start+0x38>)
}
    787c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    7880:	f7ff beee 	b.w	7660 <z_reschedule>
    7884:	20001532 	.word	0x20001532

00007888 <unready_thread>:
{
    7888:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    788a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    788e:	7b43      	ldrb	r3, [r0, #13]
    7890:	2a00      	cmp	r2, #0
{
    7892:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    7894:	da04      	bge.n	78a0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    789a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    789c:	f002 f861 	bl	9962 <sys_dlist_remove>
	update_cache(thread == _current);
    78a0:	4b04      	ldr	r3, [pc, #16]	; (78b4 <unready_thread+0x2c>)
    78a2:	6898      	ldr	r0, [r3, #8]
    78a4:	1a43      	subs	r3, r0, r1
    78a6:	4258      	negs	r0, r3
    78a8:	4158      	adcs	r0, r3
}
    78aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    78ae:	f7ff befd 	b.w	76ac <update_cache>
    78b2:	bf00      	nop
    78b4:	20001488 	.word	0x20001488

000078b8 <pend>:
{
    78b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78bc:	4606      	mov	r6, r0
    78be:	4615      	mov	r5, r2
    78c0:	461c      	mov	r4, r3
	__asm__ volatile(
    78c2:	f04f 0320 	mov.w	r3, #32
    78c6:	f3ef 8711 	mrs	r7, BASEPRI
    78ca:	f383 8812 	msr	BASEPRI_MAX, r3
    78ce:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    78d2:	f002 f8ba 	bl	9a4a <add_to_waitq_locked>
	__asm__ volatile(
    78d6:	f387 8811 	msr	BASEPRI, r7
    78da:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    78de:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    78e2:	bf08      	it	eq
    78e4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    78e8:	d008      	beq.n	78fc <pend+0x44>
    78ea:	462a      	mov	r2, r5
    78ec:	4623      	mov	r3, r4
    78ee:	f106 0018 	add.w	r0, r6, #24
    78f2:	4903      	ldr	r1, [pc, #12]	; (7900 <pend+0x48>)
}
    78f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    78f8:	f000 ba3a 	b.w	7d70 <z_add_timeout>
    78fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7900:	00009a07 	.word	0x00009a07

00007904 <z_pend_curr>:
{
    7904:	b510      	push	{r4, lr}
	pending_current = _current;
    7906:	4b07      	ldr	r3, [pc, #28]	; (7924 <z_pend_curr+0x20>)
    7908:	6898      	ldr	r0, [r3, #8]
    790a:	4b07      	ldr	r3, [pc, #28]	; (7928 <z_pend_curr+0x24>)
{
    790c:	460c      	mov	r4, r1
	pending_current = _current;
    790e:	6018      	str	r0, [r3, #0]
{
    7910:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    7912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7916:	f7ff ffcf 	bl	78b8 <pend>
    791a:	4620      	mov	r0, r4
}
    791c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7920:	f7fa bd82 	b.w	2428 <arch_swap>
    7924:	20001488 	.word	0x20001488
    7928:	200014b8 	.word	0x200014b8

0000792c <z_set_prio>:
{
    792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    792e:	4604      	mov	r4, r0
	__asm__ volatile(
    7930:	f04f 0320 	mov.w	r3, #32
    7934:	f3ef 8611 	mrs	r6, BASEPRI
    7938:	f383 8812 	msr	BASEPRI_MAX, r3
    793c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    7940:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7942:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    7944:	b249      	sxtb	r1, r1
    7946:	d133      	bne.n	79b0 <z_set_prio+0x84>
		if (need_sched) {
    7948:	6982      	ldr	r2, [r0, #24]
    794a:	bb8a      	cbnz	r2, 79b0 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    794c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7950:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7952:	f002 f806 	bl	9962 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7956:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    7958:	4a17      	ldr	r2, [pc, #92]	; (79b8 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    795a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    795c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7960:	7343      	strb	r3, [r0, #13]
    7962:	4610      	mov	r0, r2
    7964:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7968:	4283      	cmp	r3, r0
    796a:	d01b      	beq.n	79a4 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    796c:	b1d3      	cbz	r3, 79a4 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    796e:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    7970:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    7974:	42a9      	cmp	r1, r5
    7976:	d010      	beq.n	799a <z_set_prio+0x6e>
		return b2 - b1;
    7978:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    797a:	2d00      	cmp	r5, #0
    797c:	dd0d      	ble.n	799a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    797e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7980:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7984:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7986:	605c      	str	r4, [r3, #4]
			update_cache(1);
    7988:	2001      	movs	r0, #1
    798a:	f7ff fe8f 	bl	76ac <update_cache>
    798e:	2001      	movs	r0, #1
	__asm__ volatile(
    7990:	f386 8811 	msr	BASEPRI, r6
    7994:	f3bf 8f6f 	isb	sy
}
    7998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    799a:	42bb      	cmp	r3, r7
    799c:	d002      	beq.n	79a4 <z_set_prio+0x78>
    799e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    79a0:	2b00      	cmp	r3, #0
    79a2:	d1e5      	bne.n	7970 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    79a4:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    79a6:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    79aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
    79ac:	6254      	str	r4, [r2, #36]	; 0x24
}
    79ae:	e7eb      	b.n	7988 <z_set_prio+0x5c>
			thread->base.prio = prio;
    79b0:	73a1      	strb	r1, [r4, #14]
    79b2:	2000      	movs	r0, #0
    79b4:	e7ec      	b.n	7990 <z_set_prio+0x64>
    79b6:	bf00      	nop
    79b8:	20001488 	.word	0x20001488

000079bc <z_impl_k_thread_suspend>:
{
    79bc:	b570      	push	{r4, r5, r6, lr}
    79be:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    79c0:	3018      	adds	r0, #24
    79c2:	f002 f8b1 	bl	9b28 <z_abort_timeout>
	__asm__ volatile(
    79c6:	f04f 0320 	mov.w	r3, #32
    79ca:	f3ef 8611 	mrs	r6, BASEPRI
    79ce:	f383 8812 	msr	BASEPRI_MAX, r3
    79d2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    79d6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    79da:	7b63      	ldrb	r3, [r4, #13]
    79dc:	2a00      	cmp	r2, #0
    79de:	da05      	bge.n	79ec <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    79e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    79e4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    79e6:	4620      	mov	r0, r4
    79e8:	f001 ffbb 	bl	9962 <sys_dlist_remove>
		update_cache(thread == _current);
    79ec:	4d0b      	ldr	r5, [pc, #44]	; (7a1c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    79ee:	7b63      	ldrb	r3, [r4, #13]
    79f0:	68a8      	ldr	r0, [r5, #8]
    79f2:	f043 0310 	orr.w	r3, r3, #16
    79f6:	7363      	strb	r3, [r4, #13]
    79f8:	1b03      	subs	r3, r0, r4
    79fa:	4258      	negs	r0, r3
    79fc:	4158      	adcs	r0, r3
    79fe:	f7ff fe55 	bl	76ac <update_cache>
	__asm__ volatile(
    7a02:	f386 8811 	msr	BASEPRI, r6
    7a06:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    7a0a:	68ab      	ldr	r3, [r5, #8]
    7a0c:	42a3      	cmp	r3, r4
    7a0e:	d103      	bne.n	7a18 <z_impl_k_thread_suspend+0x5c>
}
    7a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    7a14:	f001 bfd7 	b.w	99c6 <z_reschedule_unlocked>
}
    7a18:	bd70      	pop	{r4, r5, r6, pc}
    7a1a:	bf00      	nop
    7a1c:	20001488 	.word	0x20001488

00007a20 <k_sched_unlock>:
{
    7a20:	b510      	push	{r4, lr}
	__asm__ volatile(
    7a22:	f04f 0320 	mov.w	r3, #32
    7a26:	f3ef 8411 	mrs	r4, BASEPRI
    7a2a:	f383 8812 	msr	BASEPRI_MAX, r3
    7a2e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    7a32:	4b08      	ldr	r3, [pc, #32]	; (7a54 <k_sched_unlock+0x34>)
    7a34:	689a      	ldr	r2, [r3, #8]
    7a36:	7bd3      	ldrb	r3, [r2, #15]
    7a38:	3301      	adds	r3, #1
    7a3a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7a3c:	2000      	movs	r0, #0
    7a3e:	f7ff fe35 	bl	76ac <update_cache>
	__asm__ volatile(
    7a42:	f384 8811 	msr	BASEPRI, r4
    7a46:	f3bf 8f6f 	isb	sy
}
    7a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    7a4e:	f001 bfba 	b.w	99c6 <z_reschedule_unlocked>
    7a52:	bf00      	nop
    7a54:	20001488 	.word	0x20001488

00007a58 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7a58:	4b04      	ldr	r3, [pc, #16]	; (7a6c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7a5a:	2100      	movs	r1, #0
    7a5c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7a60:	e9c3 2208 	strd	r2, r2, [r3, #32]
    7a64:	4608      	mov	r0, r1
    7a66:	f7ff bdcb 	b.w	7600 <k_sched_time_slice_set>
    7a6a:	bf00      	nop
    7a6c:	20001488 	.word	0x20001488

00007a70 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    7a72:	f04f 0320 	mov.w	r3, #32
    7a76:	f3ef 8511 	mrs	r5, BASEPRI
    7a7a:	f383 8812 	msr	BASEPRI_MAX, r3
    7a7e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    7a82:	491a      	ldr	r1, [pc, #104]	; (7aec <z_impl_k_yield+0x7c>)
    7a84:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7a86:	7b43      	ldrb	r3, [r0, #13]
    7a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a8c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7a8e:	f001 ff68 	bl	9962 <sys_dlist_remove>
	}
	queue_thread(_current);
    7a92:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7a94:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    7a96:	4608      	mov	r0, r1
    7a98:	f062 027f 	orn	r2, r2, #127	; 0x7f
    7a9c:	735a      	strb	r2, [r3, #13]
    7a9e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7aa2:	4282      	cmp	r2, r0
    7aa4:	d01c      	beq.n	7ae0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7aa6:	b1da      	cbz	r2, 7ae0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    7aa8:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    7aaa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    7aae:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    7ab2:	42a6      	cmp	r6, r4
    7ab4:	d00f      	beq.n	7ad6 <z_impl_k_yield+0x66>
		return b2 - b1;
    7ab6:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7ab8:	2c00      	cmp	r4, #0
    7aba:	dd0c      	ble.n	7ad6 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    7abc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    7abe:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    7ac2:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    7ac4:	6053      	str	r3, [r2, #4]
	update_cache(1);
    7ac6:	2001      	movs	r0, #1
    7ac8:	f7ff fdf0 	bl	76ac <update_cache>
    7acc:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    7ace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7ad2:	f7fa bca9 	b.w	2428 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7ad6:	42ba      	cmp	r2, r7
    7ad8:	d002      	beq.n	7ae0 <z_impl_k_yield+0x70>
    7ada:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7adc:	2a00      	cmp	r2, #0
    7ade:	d1e6      	bne.n	7aae <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    7ae0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    7ae2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    7ae6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7ae8:	624b      	str	r3, [r1, #36]	; 0x24
}
    7aea:	e7ec      	b.n	7ac6 <z_impl_k_yield+0x56>
    7aec:	20001488 	.word	0x20001488

00007af0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7af0:	ea50 0301 	orrs.w	r3, r0, r1
{
    7af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7af8:	4605      	mov	r5, r0
    7afa:	460e      	mov	r6, r1
	if (ticks == 0) {
    7afc:	d103      	bne.n	7b06 <z_tick_sleep+0x16>
	z_impl_k_yield();
    7afe:	f7ff ffb7 	bl	7a70 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    7b02:	2000      	movs	r0, #0
    7b04:	e033      	b.n	7b6e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    7b06:	f06f 0401 	mvn.w	r4, #1
    7b0a:	1a24      	subs	r4, r4, r0
    7b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b10:	eb63 0301 	sbc.w	r3, r3, r1
    7b14:	2c01      	cmp	r4, #1
    7b16:	f173 0300 	sbcs.w	r3, r3, #0
    7b1a:	da02      	bge.n	7b22 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7b1c:	f002 f844 	bl	9ba8 <sys_clock_tick_get_32>
    7b20:	1944      	adds	r4, r0, r5
    7b22:	f04f 0320 	mov.w	r3, #32
    7b26:	f3ef 8811 	mrs	r8, BASEPRI
    7b2a:	f383 8812 	msr	BASEPRI_MAX, r3
    7b2e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    7b32:	4f10      	ldr	r7, [pc, #64]	; (7b74 <z_tick_sleep+0x84>)
    7b34:	4b10      	ldr	r3, [pc, #64]	; (7b78 <z_tick_sleep+0x88>)
    7b36:	68b8      	ldr	r0, [r7, #8]
    7b38:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7b3a:	f7ff fea5 	bl	7888 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7b3e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7b40:	490e      	ldr	r1, [pc, #56]	; (7b7c <z_tick_sleep+0x8c>)
    7b42:	462a      	mov	r2, r5
    7b44:	4633      	mov	r3, r6
    7b46:	3018      	adds	r0, #24
    7b48:	f000 f912 	bl	7d70 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7b4c:	68ba      	ldr	r2, [r7, #8]
    7b4e:	7b53      	ldrb	r3, [r2, #13]
    7b50:	f043 0310 	orr.w	r3, r3, #16
    7b54:	7353      	strb	r3, [r2, #13]
    7b56:	4640      	mov	r0, r8
    7b58:	f7fa fc66 	bl	2428 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7b5c:	f002 f824 	bl	9ba8 <sys_clock_tick_get_32>
    7b60:	1a20      	subs	r0, r4, r0
    7b62:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    7b66:	2801      	cmp	r0, #1
    7b68:	f173 0300 	sbcs.w	r3, r3, #0
    7b6c:	dbc9      	blt.n	7b02 <z_tick_sleep+0x12>
}
    7b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b72:	bf00      	nop
    7b74:	20001488 	.word	0x20001488
    7b78:	200014b8 	.word	0x200014b8
    7b7c:	00009a07 	.word	0x00009a07

00007b80 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7b80:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    7b84:	bf08      	it	eq
    7b86:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    7b8a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7b8c:	d106      	bne.n	7b9c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    7b8e:	4b08      	ldr	r3, [pc, #32]	; (7bb0 <z_impl_k_sleep+0x30>)
    7b90:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7b92:	f7ff ff13 	bl	79bc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    7b9a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    7b9c:	f7ff ffa8 	bl	7af0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    7ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7ba4:	fb80 0303 	smull	r0, r3, r0, r3
    7ba8:	0bc0      	lsrs	r0, r0, #15
    7baa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    7bae:	e7f4      	b.n	7b9a <z_impl_k_sleep+0x1a>
    7bb0:	20001488 	.word	0x20001488

00007bb4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7bb4:	4b01      	ldr	r3, [pc, #4]	; (7bbc <z_impl_z_current_get+0x8>)
    7bb6:	6898      	ldr	r0, [r3, #8]
    7bb8:	4770      	bx	lr
    7bba:	bf00      	nop
    7bbc:	20001488 	.word	0x20001488

00007bc0 <z_impl_k_is_preempt_thread>:
    7bc0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    7bc4:	b93b      	cbnz	r3, 7bd6 <z_impl_k_is_preempt_thread+0x16>
    7bc6:	4b05      	ldr	r3, [pc, #20]	; (7bdc <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    7bc8:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
    7bca:	89d8      	ldrh	r0, [r3, #14]
    7bcc:	287f      	cmp	r0, #127	; 0x7f
    7bce:	bf8c      	ite	hi
    7bd0:	2000      	movhi	r0, #0
    7bd2:	2001      	movls	r0, #1
    7bd4:	4770      	bx	lr
    7bd6:	2000      	movs	r0, #0
}
    7bd8:	4770      	bx	lr
    7bda:	bf00      	nop
    7bdc:	20001488 	.word	0x20001488

00007be0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    7be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7be4:	4604      	mov	r4, r0
    7be6:	f04f 0320 	mov.w	r3, #32
    7bea:	f3ef 8611 	mrs	r6, BASEPRI
    7bee:	f383 8812 	msr	BASEPRI_MAX, r3
    7bf2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7bf6:	7b43      	ldrb	r3, [r0, #13]
    7bf8:	071a      	lsls	r2, r3, #28
    7bfa:	d505      	bpl.n	7c08 <z_thread_abort+0x28>
	__asm__ volatile(
    7bfc:	f386 8811 	msr	BASEPRI, r6
    7c00:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7c08:	f023 0220 	bic.w	r2, r3, #32
    7c0c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    7c10:	09d2      	lsrs	r2, r2, #7
    7c12:	d120      	bne.n	7c56 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7c14:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    7c16:	68a3      	ldr	r3, [r4, #8]
    7c18:	b113      	cbz	r3, 7c20 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    7c1a:	4620      	mov	r0, r4
    7c1c:	f001 fea9 	bl	9972 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    7c20:	f104 0018 	add.w	r0, r4, #24
    7c24:	f001 ff80 	bl	9b28 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    7c28:	f104 0758 	add.w	r7, r4, #88	; 0x58
    7c2c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    7c30:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7c32:	42bd      	cmp	r5, r7
    7c34:	d000      	beq.n	7c38 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7c36:	b9b5      	cbnz	r5, 7c66 <z_thread_abort+0x86>
		update_cache(1);
    7c38:	2001      	movs	r0, #1
    7c3a:	f7ff fd37 	bl	76ac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    7c3e:	4b10      	ldr	r3, [pc, #64]	; (7c80 <z_thread_abort+0xa0>)
    7c40:	689b      	ldr	r3, [r3, #8]
    7c42:	42a3      	cmp	r3, r4
    7c44:	d1da      	bne.n	7bfc <z_thread_abort+0x1c>
    7c46:	f3ef 8305 	mrs	r3, IPSR
    7c4a:	2b00      	cmp	r3, #0
    7c4c:	d1d6      	bne.n	7bfc <z_thread_abort+0x1c>
    7c4e:	4630      	mov	r0, r6
    7c50:	f7fa fbea 	bl	2428 <arch_swap>
	return ret;
    7c54:	e7d2      	b.n	7bfc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7c56:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    7c5a:	f043 0308 	orr.w	r3, r3, #8
    7c5e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7c60:	f001 fe7f 	bl	9962 <sys_dlist_remove>
}
    7c64:	e7d7      	b.n	7c16 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    7c66:	4628      	mov	r0, r5
    7c68:	f001 fe83 	bl	9972 <unpend_thread_no_timeout>
    7c6c:	f105 0018 	add.w	r0, r5, #24
    7c70:	f001 ff5a 	bl	9b28 <z_abort_timeout>
    7c74:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    7c78:	4628      	mov	r0, r5
    7c7a:	f7ff fdb1 	bl	77e0 <ready_thread>
    7c7e:	e7d7      	b.n	7c30 <z_thread_abort+0x50>
    7c80:	20001488 	.word	0x20001488

00007c84 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    7c84:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    7c86:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    7c8a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    7c8c:	e9cd 6700 	strd	r6, r7, [sp]
    7c90:	f7ff fe38 	bl	7904 <z_pend_curr>

	if (data != NULL) {
    7c94:	b11c      	cbz	r4, 7c9e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    7c96:	4b03      	ldr	r3, [pc, #12]	; (7ca4 <z_sched_wait+0x20>)
    7c98:	689b      	ldr	r3, [r3, #8]
    7c9a:	695b      	ldr	r3, [r3, #20]
    7c9c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    7c9e:	b002      	add	sp, #8
    7ca0:	bdd0      	pop	{r4, r6, r7, pc}
    7ca2:	bf00      	nop
    7ca4:	20001488 	.word	0x20001488

00007ca8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    7ca8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    7caa:	4806      	ldr	r0, [pc, #24]	; (7cc4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    7cac:	4a06      	ldr	r2, [pc, #24]	; (7cc8 <z_data_copy+0x20>)
    7cae:	4907      	ldr	r1, [pc, #28]	; (7ccc <z_data_copy+0x24>)
    7cb0:	1a12      	subs	r2, r2, r0
    7cb2:	f000 ff43 	bl	8b3c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7cba:	4a05      	ldr	r2, [pc, #20]	; (7cd0 <z_data_copy+0x28>)
    7cbc:	4905      	ldr	r1, [pc, #20]	; (7cd4 <z_data_copy+0x2c>)
    7cbe:	4806      	ldr	r0, [pc, #24]	; (7cd8 <z_data_copy+0x30>)
    7cc0:	f000 bf3c 	b.w	8b3c <memcpy>
    7cc4:	20000000 	.word	0x20000000
    7cc8:	20000374 	.word	0x20000374
    7ccc:	0000a3dc 	.word	0x0000a3dc
    7cd0:	00000000 	.word	0x00000000
    7cd4:	0000a3dc 	.word	0x0000a3dc
    7cd8:	20000000 	.word	0x20000000

00007cdc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7cdc:	4b03      	ldr	r3, [pc, #12]	; (7cec <elapsed+0x10>)
    7cde:	681b      	ldr	r3, [r3, #0]
    7ce0:	b90b      	cbnz	r3, 7ce6 <elapsed+0xa>
    7ce2:	f7fc bccb 	b.w	467c <sys_clock_elapsed>
}
    7ce6:	2000      	movs	r0, #0
    7ce8:	4770      	bx	lr
    7cea:	bf00      	nop
    7cec:	200014c4 	.word	0x200014c4

00007cf0 <next_timeout>:
	return list->head == list;
    7cf0:	4b10      	ldr	r3, [pc, #64]	; (7d34 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    7cf2:	b510      	push	{r4, lr}
    7cf4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cf6:	429c      	cmp	r4, r3
    7cf8:	bf08      	it	eq
    7cfa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7cfc:	f7ff ffee 	bl	7cdc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    7d00:	b1a4      	cbz	r4, 7d2c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    7d02:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    7d06:	1a1b      	subs	r3, r3, r0
    7d08:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    7d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7d10:	f170 0200 	sbcs.w	r2, r0, #0
    7d14:	da0a      	bge.n	7d2c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    7d16:	2800      	cmp	r0, #0
    7d18:	bfac      	ite	ge
    7d1a:	4618      	movge	r0, r3
    7d1c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7d1e:	4b06      	ldr	r3, [pc, #24]	; (7d38 <next_timeout+0x48>)
    7d20:	691b      	ldr	r3, [r3, #16]
    7d22:	b113      	cbz	r3, 7d2a <next_timeout+0x3a>
    7d24:	4298      	cmp	r0, r3
    7d26:	bfa8      	it	ge
    7d28:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7d2a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    7d2c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7d30:	e7f5      	b.n	7d1e <next_timeout+0x2e>
    7d32:	bf00      	nop
    7d34:	20000220 	.word	0x20000220
    7d38:	20001488 	.word	0x20001488

00007d3c <remove_timeout>:
{
    7d3c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    7d3e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7d40:	b168      	cbz	r0, 7d5e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    7d42:	4a0a      	ldr	r2, [pc, #40]	; (7d6c <remove_timeout+0x30>)
    7d44:	6852      	ldr	r2, [r2, #4]
    7d46:	4290      	cmp	r0, r2
    7d48:	d009      	beq.n	7d5e <remove_timeout+0x22>
	if (next(t) != NULL) {
    7d4a:	b143      	cbz	r3, 7d5e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7d4c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    7d50:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7d54:	1912      	adds	r2, r2, r4
    7d56:	eb41 0105 	adc.w	r1, r1, r5
    7d5a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    7d5e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    7d60:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7d62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7d64:	2300      	movs	r3, #0
	node->prev = NULL;
    7d66:	e9c0 3300 	strd	r3, r3, [r0]
}
    7d6a:	bd30      	pop	{r4, r5, pc}
    7d6c:	20000220 	.word	0x20000220

00007d70 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7d74:	bf08      	it	eq
    7d76:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    7d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d7c:	4604      	mov	r4, r0
    7d7e:	461f      	mov	r7, r3
    7d80:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7d82:	d067      	beq.n	7e54 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    7d84:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    7d86:	f04f 0320 	mov.w	r3, #32
    7d8a:	f3ef 8611 	mrs	r6, BASEPRI
    7d8e:	f383 8812 	msr	BASEPRI_MAX, r3
    7d92:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7d96:	f06f 0201 	mvn.w	r2, #1
    7d9a:	1b53      	subs	r3, r2, r5
    7d9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    7da0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7da4:	2b00      	cmp	r3, #0
    7da6:	db1b      	blt.n	7de0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7da8:	4b2b      	ldr	r3, [pc, #172]	; (7e58 <z_add_timeout+0xe8>)
    7daa:	e9d3 1300 	ldrd	r1, r3, [r3]
    7dae:	1a52      	subs	r2, r2, r1
    7db0:	eb6c 0303 	sbc.w	r3, ip, r3
    7db4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    7db6:	eb63 0307 	sbc.w	r3, r3, r7
    7dba:	2d01      	cmp	r5, #1
    7dbc:	f173 0200 	sbcs.w	r2, r3, #0
    7dc0:	bfbc      	itt	lt
    7dc2:	2501      	movlt	r5, #1
    7dc4:	2300      	movlt	r3, #0
    7dc6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    7dca:	4824      	ldr	r0, [pc, #144]	; (7e5c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    7dcc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7dd0:	4283      	cmp	r3, r0
    7dd2:	d118      	bne.n	7e06 <z_add_timeout+0x96>
	node->prev = tail;
    7dd4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    7dd8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    7ddc:	6044      	str	r4, [r0, #4]
}
    7dde:	e026      	b.n	7e2e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7de0:	f7ff ff7c 	bl	7cdc <elapsed>
    7de4:	3501      	adds	r5, #1
    7de6:	f147 0700 	adc.w	r7, r7, #0
    7dea:	182d      	adds	r5, r5, r0
    7dec:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    7df0:	e9c4 5704 	strd	r5, r7, [r4, #16]
    7df4:	e7e9      	b.n	7dca <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    7df6:	1a52      	subs	r2, r2, r1
    7df8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    7dfc:	459c      	cmp	ip, r3
    7dfe:	e9c4 2504 	strd	r2, r5, [r4, #16]
    7e02:	d0e7      	beq.n	7dd4 <z_add_timeout+0x64>
    7e04:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    7e06:	2b00      	cmp	r3, #0
    7e08:	d0e4      	beq.n	7dd4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    7e0a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    7e0e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    7e12:	428a      	cmp	r2, r1
    7e14:	eb75 0e07 	sbcs.w	lr, r5, r7
    7e18:	daed      	bge.n	7df6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    7e1a:	1a8a      	subs	r2, r1, r2
    7e1c:	eb67 0505 	sbc.w	r5, r7, r5
    7e20:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    7e24:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7e26:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7e2a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7e2c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    7e2e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e30:	4283      	cmp	r3, r0
    7e32:	d00b      	beq.n	7e4c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7e34:	429c      	cmp	r4, r3
    7e36:	d109      	bne.n	7e4c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7e38:	f7ff ff5a 	bl	7cf0 <next_timeout>

			if (next_time == 0 ||
    7e3c:	b118      	cbz	r0, 7e46 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    7e3e:	4b08      	ldr	r3, [pc, #32]	; (7e60 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    7e40:	691b      	ldr	r3, [r3, #16]
    7e42:	4283      	cmp	r3, r0
    7e44:	d002      	beq.n	7e4c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    7e46:	2100      	movs	r1, #0
    7e48:	f7fc fbe6 	bl	4618 <sys_clock_set_timeout>
	__asm__ volatile(
    7e4c:	f386 8811 	msr	BASEPRI, r6
    7e50:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e56:	bf00      	nop
    7e58:	200005d8 	.word	0x200005d8
    7e5c:	20000220 	.word	0x20000220
    7e60:	20001488 	.word	0x20001488

00007e64 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    7e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e68:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7e6a:	f7ff fc79 	bl	7760 <z_time_slice>
	__asm__ volatile(
    7e6e:	f04f 0320 	mov.w	r3, #32
    7e72:	f3ef 8411 	mrs	r4, BASEPRI
    7e76:	f383 8812 	msr	BASEPRI_MAX, r3
    7e7a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7e7e:	4e24      	ldr	r6, [pc, #144]	; (7f10 <sys_clock_announce+0xac>)
	return list->head == list;
    7e80:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7f14 <sys_clock_announce+0xb0>
    7e84:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    7e86:	4d24      	ldr	r5, [pc, #144]	; (7f18 <sys_clock_announce+0xb4>)
    7e88:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7e8c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e8e:	4540      	cmp	r0, r8
		curr_tick += dt;
    7e90:	e9d5 1e00 	ldrd	r1, lr, [r5]
    7e94:	ea4f 77e2 	mov.w	r7, r2, asr #31
    7e98:	d00b      	beq.n	7eb2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7e9a:	b150      	cbz	r0, 7eb2 <sys_clock_announce+0x4e>
    7e9c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    7ea0:	429a      	cmp	r2, r3
    7ea2:	eb77 090c 	sbcs.w	r9, r7, ip
    7ea6:	da16      	bge.n	7ed6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7ea8:	1a9b      	subs	r3, r3, r2
    7eaa:	eb6c 0c07 	sbc.w	ip, ip, r7
    7eae:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    7eb2:	1852      	adds	r2, r2, r1
    7eb4:	eb4e 0707 	adc.w	r7, lr, r7
    7eb8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    7ebc:	2500      	movs	r5, #0
    7ebe:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7ec0:	f7ff ff16 	bl	7cf0 <next_timeout>
    7ec4:	4629      	mov	r1, r5
    7ec6:	f7fc fba7 	bl	4618 <sys_clock_set_timeout>
	__asm__ volatile(
    7eca:	f384 8811 	msr	BASEPRI, r4
    7ece:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    7ed6:	1859      	adds	r1, r3, r1
    7ed8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    7edc:	1ad3      	subs	r3, r2, r3
    7ede:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    7ee0:	2200      	movs	r2, #0
    7ee2:	2300      	movs	r3, #0
    7ee4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    7ee8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    7eec:	f7ff ff26 	bl	7d3c <remove_timeout>
    7ef0:	f384 8811 	msr	BASEPRI, r4
    7ef4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7ef8:	6883      	ldr	r3, [r0, #8]
    7efa:	4798      	blx	r3
	__asm__ volatile(
    7efc:	f04f 0320 	mov.w	r3, #32
    7f00:	f3ef 8411 	mrs	r4, BASEPRI
    7f04:	f383 8812 	msr	BASEPRI_MAX, r3
    7f08:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    7f0c:	e7bc      	b.n	7e88 <sys_clock_announce+0x24>
    7f0e:	bf00      	nop
    7f10:	200014c4 	.word	0x200014c4
    7f14:	20000220 	.word	0x20000220
    7f18:	200005d8 	.word	0x200005d8

00007f1c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    7f1c:	b510      	push	{r4, lr}
    7f1e:	f04f 0320 	mov.w	r3, #32
    7f22:	f3ef 8411 	mrs	r4, BASEPRI
    7f26:	f383 8812 	msr	BASEPRI_MAX, r3
    7f2a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    7f2e:	f7fc fba5 	bl	467c <sys_clock_elapsed>
    7f32:	4a05      	ldr	r2, [pc, #20]	; (7f48 <sys_clock_tick_get+0x2c>)
    7f34:	e9d2 3100 	ldrd	r3, r1, [r2]
    7f38:	18c0      	adds	r0, r0, r3
    7f3a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    7f3e:	f384 8811 	msr	BASEPRI, r4
    7f42:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    7f46:	bd10      	pop	{r4, pc}
    7f48:	200005d8 	.word	0x200005d8

00007f4c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    7f4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7f4e:	4606      	mov	r6, r0
    7f50:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    7f52:	f001 fc2a 	bl	97aa <k_is_in_isr>
    7f56:	b978      	cbnz	r0, 7f78 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    7f58:	4b0b      	ldr	r3, [pc, #44]	; (7f88 <z_thread_aligned_alloc+0x3c>)
    7f5a:	689b      	ldr	r3, [r3, #8]
    7f5c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    7f5e:	b17c      	cbz	r4, 7f80 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    7f60:	1d2a      	adds	r2, r5, #4
    7f62:	d209      	bcs.n	7f78 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    7f64:	2000      	movs	r0, #0
    7f66:	2100      	movs	r1, #0
    7f68:	e9cd 0100 	strd	r0, r1, [sp]
    7f6c:	f046 0104 	orr.w	r1, r6, #4
    7f70:	4620      	mov	r0, r4
    7f72:	f001 fe5b 	bl	9c2c <k_heap_aligned_alloc>
	if (mem == NULL) {
    7f76:	b908      	cbnz	r0, 7f7c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    7f78:	2400      	movs	r4, #0
	}

	return ret;
    7f7a:	e001      	b.n	7f80 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    7f7c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    7f7e:	1d04      	adds	r4, r0, #4
}
    7f80:	4620      	mov	r0, r4
    7f82:	b002      	add	sp, #8
    7f84:	bd70      	pop	{r4, r5, r6, pc}
    7f86:	bf00      	nop
    7f88:	20001488 	.word	0x20001488

00007f8c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    7f8c:	4a02      	ldr	r2, [pc, #8]	; (7f98 <boot_banner+0xc>)
    7f8e:	4903      	ldr	r1, [pc, #12]	; (7f9c <boot_banner+0x10>)
    7f90:	4803      	ldr	r0, [pc, #12]	; (7fa0 <boot_banner+0x14>)
    7f92:	f000 b864 	b.w	805e <printk>
    7f96:	bf00      	nop
    7f98:	0000a2b4 	.word	0x0000a2b4
    7f9c:	0000a39d 	.word	0x0000a39d
    7fa0:	0000a3ab 	.word	0x0000a3ab

00007fa4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    7fa4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    7fa6:	4c06      	ldr	r4, [pc, #24]	; (7fc0 <statics_init+0x1c>)
    7fa8:	4d06      	ldr	r5, [pc, #24]	; (7fc4 <statics_init+0x20>)
    7faa:	42ac      	cmp	r4, r5
    7fac:	d301      	bcc.n	7fb2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    7fae:	2000      	movs	r0, #0
    7fb0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    7fb2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    7fb6:	4620      	mov	r0, r4
    7fb8:	f001 fe30 	bl	9c1c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    7fbc:	3414      	adds	r4, #20
    7fbe:	e7f4      	b.n	7faa <statics_init+0x6>
    7fc0:	20000264 	.word	0x20000264
    7fc4:	20000264 	.word	0x20000264

00007fc8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    7fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    7fca:	4b09      	ldr	r3, [pc, #36]	; (7ff0 <k_sys_work_q_init+0x28>)
    7fcc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    7fce:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    7fd0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    7fd2:	9300      	str	r3, [sp, #0]
    7fd4:	4907      	ldr	r1, [pc, #28]	; (7ff4 <k_sys_work_q_init+0x2c>)
    7fd6:	4808      	ldr	r0, [pc, #32]	; (7ff8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    7fd8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    7fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7fe4:	f7ff fabe 	bl	7564 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    7fe8:	4620      	mov	r0, r4
    7fea:	b004      	add	sp, #16
    7fec:	bd10      	pop	{r4, pc}
    7fee:	bf00      	nop
    7ff0:	0000a3d2 	.word	0x0000a3d2
    7ff4:	20002a78 	.word	0x20002a78
    7ff8:	200005e0 	.word	0x200005e0

00007ffc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7ffc:	4770      	bx	lr

00007ffe <gpio_pin_get.constprop.0>:
 * @retval 1 If pin logical value is 1 / active.
 * @retval 0 If pin logical value is 0 / inactive.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_get(const struct device *port, gpio_pin_t pin)
    7ffe:	b507      	push	{r0, r1, r2, lr}
	return api->port_get_raw(port, value);
    8000:	6883      	ldr	r3, [r0, #8]
    8002:	a901      	add	r1, sp, #4
    8004:	685b      	ldr	r3, [r3, #4]
    8006:	4798      	blx	r3
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
	}

	return ret;
}
    8008:	b003      	add	sp, #12
    800a:	f85d fb04 	ldr.w	pc, [sp], #4

0000800e <gpio_pin_set.constprop.0.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
    800e:	b119      	cbz	r1, 8018 <gpio_pin_set.constprop.0.isra.0+0xa>
	return api->port_set_bits_raw(port, pins);
    8010:	6883      	ldr	r3, [r0, #8]
    8012:	68db      	ldr	r3, [r3, #12]
    8014:	2100      	movs	r1, #0
	return api->port_clear_bits_raw(port, pins);
    8016:	4718      	bx	r3
    8018:	6883      	ldr	r3, [r0, #8]
    801a:	691b      	ldr	r3, [r3, #16]
    801c:	e7fb      	b.n	8016 <gpio_pin_set.constprop.0.isra.0+0x8>

0000801e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    801e:	4603      	mov	r3, r0
    8020:	b158      	cbz	r0, 803a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8022:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8024:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    8028:	2a01      	cmp	r2, #1
    802a:	d003      	beq.n	8034 <sys_notify_validate+0x16>
    802c:	2a03      	cmp	r2, #3
    802e:	d104      	bne.n	803a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    8030:	6802      	ldr	r2, [r0, #0]
    8032:	b112      	cbz	r2, 803a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    8034:	2000      	movs	r0, #0
    8036:	6098      	str	r0, [r3, #8]
    8038:	4770      	bx	lr
		return -EINVAL;
    803a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    803e:	4770      	bx	lr

00008040 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8040:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    8042:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    8044:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    8048:	2a03      	cmp	r2, #3
    804a:	f04f 0200 	mov.w	r2, #0
{
    804e:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    8050:	bf0c      	ite	eq
    8052:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    8054:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8056:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    8058:	4770      	bx	lr

0000805a <arch_printk_char_out>:
}
    805a:	2000      	movs	r0, #0
    805c:	4770      	bx	lr

0000805e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    805e:	b40f      	push	{r0, r1, r2, r3}
    8060:	b507      	push	{r0, r1, r2, lr}
    8062:	a904      	add	r1, sp, #16
    8064:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8068:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    806a:	f7f8 fa83 	bl	574 <vprintk>

	va_end(ap);
}
    806e:	b003      	add	sp, #12
    8070:	f85d eb04 	ldr.w	lr, [sp], #4
    8074:	b004      	add	sp, #16
    8076:	4770      	bx	lr

00008078 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8078:	b510      	push	{r4, lr}
    807a:	4603      	mov	r3, r0
	return list->head;
    807c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    807e:	2200      	movs	r2, #0
    8080:	b158      	cbz	r0, 809a <sys_slist_find_and_remove+0x22>
    8082:	4288      	cmp	r0, r1
    8084:	d10f      	bne.n	80a6 <sys_slist_find_and_remove+0x2e>
	return node->next;
    8086:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    8088:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    808a:	b93a      	cbnz	r2, 809c <sys_slist_find_and_remove+0x24>
    808c:	42a1      	cmp	r1, r4
	list->head = node;
    808e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    8090:	d100      	bne.n	8094 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    8092:	6058      	str	r0, [r3, #4]
	parent->next = child;
    8094:	2300      	movs	r3, #0
    8096:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8098:	2001      	movs	r0, #1
    809a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    809c:	42a1      	cmp	r1, r4
	parent->next = child;
    809e:	6010      	str	r0, [r2, #0]
	list->tail = node;
    80a0:	bf08      	it	eq
    80a2:	605a      	streq	r2, [r3, #4]
}
    80a4:	e7f6      	b.n	8094 <sys_slist_find_and_remove+0x1c>
	return node->next;
    80a6:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    80a8:	6800      	ldr	r0, [r0, #0]
    80aa:	e7e9      	b.n	8080 <sys_slist_find_and_remove+0x8>

000080ac <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    80ac:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    80ae:	f013 0307 	ands.w	r3, r3, #7
    80b2:	d105      	bne.n	80c0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    80b4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    80b6:	2b00      	cmp	r3, #0
    80b8:	bf0c      	ite	eq
    80ba:	2000      	moveq	r0, #0
    80bc:	2003      	movne	r0, #3
    80be:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    80c0:	2b02      	cmp	r3, #2
    80c2:	d105      	bne.n	80d0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    80c4:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    80c6:	2b00      	cmp	r3, #0
    80c8:	bf14      	ite	ne
    80ca:	2000      	movne	r0, #0
    80cc:	2004      	moveq	r0, #4
    80ce:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    80d0:	2b01      	cmp	r3, #1
    80d2:	d105      	bne.n	80e0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    80d4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    80d6:	2b00      	cmp	r3, #0
    80d8:	bf0c      	ite	eq
    80da:	2000      	moveq	r0, #0
    80dc:	2005      	movne	r0, #5
    80de:	4770      	bx	lr
	int evt = EVT_NOP;
    80e0:	2000      	movs	r0, #0
}
    80e2:	4770      	bx	lr

000080e4 <notify_one>:
{
    80e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80e8:	460d      	mov	r5, r1
    80ea:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    80ec:	4619      	mov	r1, r3
    80ee:	1d28      	adds	r0, r5, #4
{
    80f0:	4690      	mov	r8, r2
    80f2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    80f4:	f7ff ffa4 	bl	8040 <sys_notify_finalize>
	if (cb) {
    80f8:	4604      	mov	r4, r0
    80fa:	b138      	cbz	r0, 810c <notify_one+0x28>
		cb(mgr, cli, state, res);
    80fc:	4633      	mov	r3, r6
    80fe:	4642      	mov	r2, r8
    8100:	4629      	mov	r1, r5
    8102:	4638      	mov	r0, r7
    8104:	46a4      	mov	ip, r4
}
    8106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    810a:	4760      	bx	ip
}
    810c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008110 <transition_complete>:
{
    8110:	b410      	push	{r4}
	__asm__ volatile(
    8112:	f04f 0420 	mov.w	r4, #32
    8116:	f3ef 8211 	mrs	r2, BASEPRI
    811a:	f384 8812 	msr	BASEPRI_MAX, r4
    811e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    8122:	6141      	str	r1, [r0, #20]
}
    8124:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    8126:	2101      	movs	r1, #1
    8128:	f7f8 ba32 	b.w	590 <process_event>

0000812c <validate_args>:
{
    812c:	b510      	push	{r4, lr}
    812e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8130:	b140      	cbz	r0, 8144 <validate_args+0x18>
    8132:	b139      	cbz	r1, 8144 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8134:	1d08      	adds	r0, r1, #4
    8136:	f7ff ff72 	bl	801e <sys_notify_validate>
	if ((rv == 0)
    813a:	b928      	cbnz	r0, 8148 <validate_args+0x1c>
	    && ((cli->notify.flags
    813c:	68a3      	ldr	r3, [r4, #8]
    813e:	f033 0303 	bics.w	r3, r3, #3
    8142:	d001      	beq.n	8148 <validate_args+0x1c>
		rv = -EINVAL;
    8144:	f06f 0015 	mvn.w	r0, #21
}
    8148:	bd10      	pop	{r4, pc}

0000814a <onoff_manager_init>:
{
    814a:	b538      	push	{r3, r4, r5, lr}
    814c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    814e:	4605      	mov	r5, r0
    8150:	b158      	cbz	r0, 816a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8152:	b151      	cbz	r1, 816a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8154:	680b      	ldr	r3, [r1, #0]
    8156:	b143      	cbz	r3, 816a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8158:	684b      	ldr	r3, [r1, #4]
    815a:	b133      	cbz	r3, 816a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    815c:	221c      	movs	r2, #28
    815e:	2100      	movs	r1, #0
    8160:	f000 fcf7 	bl	8b52 <memset>
    8164:	612c      	str	r4, [r5, #16]
	return 0;
    8166:	2000      	movs	r0, #0
}
    8168:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    816a:	f06f 0015 	mvn.w	r0, #21
    816e:	e7fb      	b.n	8168 <onoff_manager_init+0x1e>

00008170 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    8170:	b570      	push	{r4, r5, r6, lr}
    8172:	4604      	mov	r4, r0
    8174:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    8176:	f7ff ffd9 	bl	812c <validate_args>

	if (rv < 0) {
    817a:	1e05      	subs	r5, r0, #0
    817c:	db31      	blt.n	81e2 <onoff_request+0x72>
    817e:	f04f 0320 	mov.w	r3, #32
    8182:	f3ef 8111 	mrs	r1, BASEPRI
    8186:	f383 8812 	msr	BASEPRI_MAX, r3
    818a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    818e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8190:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    8192:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8196:	42ab      	cmp	r3, r5
    8198:	f000 0207 	and.w	r2, r0, #7
    819c:	d02e      	beq.n	81fc <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    819e:	2a02      	cmp	r2, #2
    81a0:	d10e      	bne.n	81c0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    81a2:	3301      	adds	r3, #1
    81a4:	8363      	strh	r3, [r4, #26]
	rv = state;
    81a6:	4615      	mov	r5, r2
		notify = true;
    81a8:	2301      	movs	r3, #1
	__asm__ volatile(
    81aa:	f381 8811 	msr	BASEPRI, r1
    81ae:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    81b2:	b1b3      	cbz	r3, 81e2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    81b4:	2300      	movs	r3, #0
    81b6:	4631      	mov	r1, r6
    81b8:	4620      	mov	r0, r4
    81ba:	f7ff ff93 	bl	80e4 <notify_one>
    81be:	e010      	b.n	81e2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    81c0:	0783      	lsls	r3, r0, #30
    81c2:	d001      	beq.n	81c8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    81c4:	2a06      	cmp	r2, #6
    81c6:	d10e      	bne.n	81e6 <onoff_request+0x76>
	parent->next = child;
    81c8:	2300      	movs	r3, #0
    81ca:	6033      	str	r3, [r6, #0]
	return list->tail;
    81cc:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    81ce:	b993      	cbnz	r3, 81f6 <onoff_request+0x86>
	list->head = node;
    81d0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    81d4:	4615      	mov	r5, r2
    81d6:	b962      	cbnz	r2, 81f2 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    81d8:	460a      	mov	r2, r1
    81da:	4620      	mov	r0, r4
    81dc:	2102      	movs	r1, #2
    81de:	f7f8 f9d7 	bl	590 <process_event>
		}
	}

	return rv;
}
    81e2:	4628      	mov	r0, r5
    81e4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    81e6:	2a05      	cmp	r2, #5
    81e8:	bf0c      	ite	eq
    81ea:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    81ee:	f06f 0504 	mvnne.w	r5, #4
    81f2:	2300      	movs	r3, #0
    81f4:	e7d9      	b.n	81aa <onoff_request+0x3a>
	parent->next = child;
    81f6:	601e      	str	r6, [r3, #0]
	list->tail = node;
    81f8:	6066      	str	r6, [r4, #4]
}
    81fa:	e7eb      	b.n	81d4 <onoff_request+0x64>
		rv = -EAGAIN;
    81fc:	f06f 050a 	mvn.w	r5, #10
    8200:	e7f7      	b.n	81f2 <onoff_request+0x82>

00008202 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    8202:	b510      	push	{r4, lr}
	__asm__ volatile(
    8204:	f04f 0320 	mov.w	r3, #32
    8208:	f3ef 8211 	mrs	r2, BASEPRI
    820c:	f383 8812 	msr	BASEPRI_MAX, r3
    8210:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8214:	8b04      	ldrh	r4, [r0, #24]
    8216:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    821a:	2c02      	cmp	r4, #2
    821c:	d00a      	beq.n	8234 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    821e:	2c01      	cmp	r4, #1
    8220:	bf0c      	ite	eq
    8222:	f06f 0004 	mvneq.w	r0, #4
    8226:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    822a:	f382 8811 	msr	BASEPRI, r2
    822e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    8232:	e008      	b.n	8246 <onoff_release+0x44>
	mgr->refs -= 1U;
    8234:	8b43      	ldrh	r3, [r0, #26]
    8236:	3b01      	subs	r3, #1
    8238:	b29b      	uxth	r3, r3
    823a:	8343      	strh	r3, [r0, #26]
	if (stop) {
    823c:	b923      	cbnz	r3, 8248 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    823e:	4621      	mov	r1, r4
    8240:	f7f8 f9a6 	bl	590 <process_event>
	int rv = state;
    8244:	4620      	mov	r0, r4
}
    8246:	bd10      	pop	{r4, pc}
	int rv = state;
    8248:	4620      	mov	r0, r4
    824a:	e7ee      	b.n	822a <onoff_release+0x28>

0000824c <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    824c:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    824e:	b1b0      	cbz	r0, 827e <onoff_cancel+0x32>
    8250:	b1a9      	cbz	r1, 827e <onoff_cancel+0x32>
	__asm__ volatile(
    8252:	f04f 0220 	mov.w	r2, #32
    8256:	f3ef 8511 	mrs	r5, BASEPRI
    825a:	f382 8812 	msr	BASEPRI_MAX, r2
    825e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8262:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    8264:	f7ff ff08 	bl	8078 <sys_slist_find_and_remove>
    8268:	b130      	cbz	r0, 8278 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    826a:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    826e:	f385 8811 	msr	BASEPRI, r5
    8272:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    8276:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    8278:	f06f 0077 	mvn.w	r0, #119	; 0x77
    827c:	e7f7      	b.n	826e <onoff_cancel+0x22>
		return -EINVAL;
    827e:	f06f 0015 	mvn.w	r0, #21
    8282:	e7f8      	b.n	8276 <onoff_cancel+0x2a>

00008284 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8284:	4604      	mov	r4, r0
    8286:	b508      	push	{r3, lr}
    8288:	4608      	mov	r0, r1
    828a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    828c:	461a      	mov	r2, r3
    828e:	47a0      	blx	r4
	return z_impl_z_current_get();
    8290:	f7ff fc90 	bl	7bb4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8294:	f7fa fa7a 	bl	278c <z_impl_k_thread_abort>

00008298 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    8298:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    829c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    829e:	0840      	lsrs	r0, r0, #1
    82a0:	4770      	bx	lr

000082a2 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    82a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82a4:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    82a6:	f7ff fff7 	bl	8298 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    82aa:	fab0 f080 	clz	r0, r0
    82ae:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    82b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    82b6:	00ca      	lsls	r2, r1, #3
    82b8:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    82bc:	1d17      	adds	r7, r2, #4
{
    82be:	460c      	mov	r4, r1
    82c0:	3206      	adds	r2, #6
    82c2:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    82c4:	b956      	cbnz	r6, 82dc <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    82c6:	2101      	movs	r1, #1
    82c8:	fa01 f000 	lsl.w	r0, r1, r0
    82cc:	68d9      	ldr	r1, [r3, #12]
    82ce:	4301      	orrs	r1, r0
    82d0:	60d9      	str	r1, [r3, #12]
		b->next = c;
    82d2:	f8cc 4010 	str.w	r4, [ip, #16]
    82d6:	53dd      	strh	r5, [r3, r7]
    82d8:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    82da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    82dc:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    82de:	3104      	adds	r1, #4
    82e0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    82e2:	53d8      	strh	r0, [r3, r7]
    82e4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    82e8:	529e      	strh	r6, [r3, r2]
    82ea:	80c5      	strh	r5, [r0, #6]
    82ec:	525d      	strh	r5, [r3, r1]
    82ee:	e7f4      	b.n	82da <free_list_add+0x38>

000082f0 <free_list_remove_bidx>:
{
    82f0:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    82f2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    82f6:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    82f8:	4299      	cmp	r1, r3
    82fa:	f102 0104 	add.w	r1, r2, #4
    82fe:	d10a      	bne.n	8316 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    8300:	2301      	movs	r3, #1
    8302:	fa03 f202 	lsl.w	r2, r3, r2
    8306:	68c3      	ldr	r3, [r0, #12]
    8308:	ea23 0302 	bic.w	r3, r3, r2
    830c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    830e:	2300      	movs	r3, #0
    8310:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    8314:	bd10      	pop	{r4, pc}
    8316:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    8318:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    831c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    8320:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    8324:	80cb      	strh	r3, [r1, #6]
    8326:	8082      	strh	r2, [r0, #4]
}
    8328:	e7f4      	b.n	8314 <free_list_remove_bidx+0x24>

0000832a <free_list_remove>:
{
    832a:	b508      	push	{r3, lr}
    832c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    832e:	f7ff ffb3 	bl	8298 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    8332:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    8336:	f1c2 021f 	rsb	r2, r2, #31
    833a:	4618      	mov	r0, r3
}
    833c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    8340:	f7ff bfd6 	b.w	82f0 <free_list_remove_bidx>

00008344 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    8344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8348:	fab1 f581 	clz	r5, r1
    834c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    8350:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    8354:	4603      	mov	r3, r0
	if (b->next) {
    8356:	693a      	ldr	r2, [r7, #16]
{
    8358:	460e      	mov	r6, r1
	if (b->next) {
    835a:	b1c2      	cbz	r2, 838e <alloc_chunk+0x4a>
    835c:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    8360:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    8362:	4618      	mov	r0, r3
    8364:	4621      	mov	r1, r4
    8366:	f7ff ff97 	bl	8298 <chunk_size>
    836a:	42b0      	cmp	r0, r6
    836c:	d306      	bcc.n	837c <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    836e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    8370:	4618      	mov	r0, r3
    8372:	f7ff ffbd 	bl	82f0 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    8376:	4620      	mov	r0, r4
    8378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    837c:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
    8380:	f1b8 0801 	subs.w	r8, r8, #1
    8384:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
    8386:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    8388:	d001      	beq.n	838e <alloc_chunk+0x4a>
    838a:	4282      	cmp	r2, r0
    838c:	d1e8      	bne.n	8360 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    838e:	f1c5 0220 	rsb	r2, r5, #32
    8392:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    8396:	4094      	lsls	r4, r2
    8398:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    839a:	4014      	ands	r4, r2
    839c:	d0eb      	beq.n	8376 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    839e:	fa94 f2a4 	rbit	r2, r4
    83a2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    83a6:	1d11      	adds	r1, r2, #4
    83a8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    83ac:	4621      	mov	r1, r4
    83ae:	e7df      	b.n	8370 <alloc_chunk+0x2c>

000083b0 <merge_chunks>:
{
    83b0:	b538      	push	{r3, r4, r5, lr}
    83b2:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    83b4:	f7ff ff70 	bl	8298 <chunk_size>
{
    83b8:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    83ba:	4604      	mov	r4, r0
    83bc:	4611      	mov	r1, r2
    83be:	4618      	mov	r0, r3
    83c0:	f7ff ff6a 	bl	8298 <chunk_size>
		((uint16_t *)cmem)[f] = val;
    83c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    83c8:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    83ca:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    83cc:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    83ce:	4618      	mov	r0, r3
    83d0:	f7ff ff62 	bl	8298 <chunk_size>
	void *cmem = &buf[c];
    83d4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    83d6:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    83da:	bd38      	pop	{r3, r4, r5, pc}

000083dc <split_chunks>:
{
    83dc:	b538      	push	{r3, r4, r5, lr}
    83de:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    83e0:	f7ff ff5a 	bl	8298 <chunk_size>
{
    83e4:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    83e6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    83e8:	1a51      	subs	r1, r2, r1
    83ea:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    83ee:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    83f0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    83f2:	8060      	strh	r0, [r4, #2]
    83f4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    83f8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    83fa:	8044      	strh	r4, [r0, #2]
    83fc:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    8400:	4618      	mov	r0, r3
    8402:	4611      	mov	r1, r2
    8404:	f7ff ff48 	bl	8298 <chunk_size>
	void *cmem = &buf[c];
    8408:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    840a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    840e:	bd38      	pop	{r3, r4, r5, pc}

00008410 <free_chunk>:
{
    8410:	b538      	push	{r3, r4, r5, lr}
    8412:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    8414:	f7ff ff40 	bl	8298 <chunk_size>
    8418:	460c      	mov	r4, r1
    841a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    841c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8420:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    8422:	07da      	lsls	r2, r3, #31
    8424:	d40a      	bmi.n	843c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    8426:	4628      	mov	r0, r5
    8428:	f7ff ff7f 	bl	832a <free_list_remove>
	return c + chunk_size(h, c);
    842c:	4621      	mov	r1, r4
    842e:	4628      	mov	r0, r5
    8430:	f7ff ff32 	bl	8298 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    8434:	1822      	adds	r2, r4, r0
    8436:	4628      	mov	r0, r5
    8438:	f7ff ffba 	bl	83b0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    843c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8440:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    8442:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8446:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    8448:	07db      	lsls	r3, r3, #31
    844a:	d40c      	bmi.n	8466 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    844c:	4628      	mov	r0, r5
    844e:	f7ff ff6c 	bl	832a <free_list_remove>
		return ((uint16_t *)cmem)[f];
    8452:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    8456:	4622      	mov	r2, r4
    8458:	1a61      	subs	r1, r4, r1
    845a:	4628      	mov	r0, r5
    845c:	f7ff ffa8 	bl	83b0 <merge_chunks>
    8460:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8464:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    8466:	4621      	mov	r1, r4
    8468:	4628      	mov	r0, r5
}
    846a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    846e:	f7ff bf18 	b.w	82a2 <free_list_add>

00008472 <sys_heap_free>:
	if (mem == NULL) {
    8472:	b161      	cbz	r1, 848e <sys_heap_free+0x1c>
    8474:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8476:	3904      	subs	r1, #4
    8478:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    847a:	f021 0307 	bic.w	r3, r1, #7
    847e:	4403      	add	r3, r0
	free_chunk(h, c);
    8480:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    8482:	885a      	ldrh	r2, [r3, #2]
    8484:	f022 0201 	bic.w	r2, r2, #1
    8488:	805a      	strh	r2, [r3, #2]
    848a:	f7ff bfc1 	b.w	8410 <free_chunk>
}
    848e:	4770      	bx	lr

00008490 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    8490:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    8492:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    8494:	b909      	cbnz	r1, 849a <sys_heap_alloc+0xa>
		return NULL;
    8496:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    8498:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    849a:	68ab      	ldr	r3, [r5, #8]
    849c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    84a0:	d9f9      	bls.n	8496 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    84a2:	310b      	adds	r1, #11
    84a4:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    84a6:	4621      	mov	r1, r4
    84a8:	4628      	mov	r0, r5
    84aa:	f7ff ff4b 	bl	8344 <alloc_chunk>
	if (c == 0U) {
    84ae:	4606      	mov	r6, r0
    84b0:	2800      	cmp	r0, #0
    84b2:	d0f0      	beq.n	8496 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    84b4:	4601      	mov	r1, r0
    84b6:	4628      	mov	r0, r5
    84b8:	f7ff feee 	bl	8298 <chunk_size>
    84bc:	42a0      	cmp	r0, r4
    84be:	d907      	bls.n	84d0 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    84c0:	1932      	adds	r2, r6, r4
    84c2:	4628      	mov	r0, r5
    84c4:	f7ff ff8a 	bl	83dc <split_chunks>
		free_list_add(h, c + chunk_sz);
    84c8:	4611      	mov	r1, r2
    84ca:	4628      	mov	r0, r5
    84cc:	f7ff fee9 	bl	82a2 <free_list_add>
	void *cmem = &buf[c];
    84d0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    84d4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    84d6:	8853      	ldrh	r3, [r2, #2]
    84d8:	f043 0301 	orr.w	r3, r3, #1
    84dc:	8053      	strh	r3, [r2, #2]
    84de:	3004      	adds	r0, #4
	return mem;
    84e0:	e7da      	b.n	8498 <sys_heap_alloc+0x8>

000084e2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    84e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    84e6:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    84e8:	424a      	negs	r2, r1
    84ea:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    84ee:	ea31 0202 	bics.w	r2, r1, r2
{
    84f2:	4603      	mov	r3, r0
	if (align != rew) {
    84f4:	d00a      	beq.n	850c <sys_heap_aligned_alloc+0x2a>
		return false;
    84f6:	2f04      	cmp	r7, #4
    84f8:	463a      	mov	r2, r7
    84fa:	46b9      	mov	r9, r7
    84fc:	bf28      	it	cs
    84fe:	2204      	movcs	r2, #4
		align -= rew;
    8500:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    8502:	b974      	cbnz	r4, 8522 <sys_heap_aligned_alloc+0x40>
		return NULL;
    8504:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    8506:	4628      	mov	r0, r5
    8508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    850c:	2904      	cmp	r1, #4
    850e:	d804      	bhi.n	851a <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    8510:	4621      	mov	r1, r4
}
    8512:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    8516:	f7ff bfbb 	b.w	8490 <sys_heap_alloc>
		rew = 0;
    851a:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    851e:	2204      	movs	r2, #4
    8520:	e7ef      	b.n	8502 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    8522:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    8524:	68b3      	ldr	r3, [r6, #8]
    8526:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    852a:	d9eb      	bls.n	8504 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    852c:	f104 010b 	add.w	r1, r4, #11
    8530:	4439      	add	r1, r7
    8532:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    8534:	08c9      	lsrs	r1, r1, #3
    8536:	4630      	mov	r0, r6
    8538:	f7ff ff04 	bl	8344 <alloc_chunk>
	if (c0 == 0) {
    853c:	4680      	mov	r8, r0
    853e:	2800      	cmp	r0, #0
    8540:	d0e0      	beq.n	8504 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    8542:	f109 0504 	add.w	r5, r9, #4
    8546:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    854a:	1e7b      	subs	r3, r7, #1
    854c:	4435      	add	r5, r6
    854e:	441d      	add	r5, r3
    8550:	427f      	negs	r7, r7
    8552:	403d      	ands	r5, r7
    8554:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8558:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    855a:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    855c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    855e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8560:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    8564:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    8566:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    856a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    856e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    8572:	d208      	bcs.n	8586 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    8574:	4601      	mov	r1, r0
    8576:	463a      	mov	r2, r7
    8578:	4630      	mov	r0, r6
    857a:	f7ff ff2f 	bl	83dc <split_chunks>
		free_list_add(h, c0);
    857e:	4641      	mov	r1, r8
    8580:	4630      	mov	r0, r6
    8582:	f7ff fe8e 	bl	82a2 <free_list_add>
	return c + chunk_size(h, c);
    8586:	4639      	mov	r1, r7
    8588:	4630      	mov	r0, r6
    858a:	f7ff fe85 	bl	8298 <chunk_size>
    858e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    8590:	4284      	cmp	r4, r0
    8592:	d207      	bcs.n	85a4 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    8594:	4630      	mov	r0, r6
    8596:	4622      	mov	r2, r4
    8598:	f7ff ff20 	bl	83dc <split_chunks>
		free_list_add(h, c_end);
    859c:	4621      	mov	r1, r4
    859e:	4630      	mov	r0, r6
    85a0:	f7ff fe7f 	bl	82a2 <free_list_add>
	void *cmem = &buf[c];
    85a4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    85a8:	8873      	ldrh	r3, [r6, #2]
    85aa:	f043 0301 	orr.w	r3, r3, #1
    85ae:	8073      	strh	r3, [r6, #2]
    85b0:	e7a9      	b.n	8506 <sys_heap_aligned_alloc+0x24>

000085b2 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    85b2:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    85b4:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    85b6:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    85b8:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    85bc:	f021 0107 	bic.w	r1, r1, #7
{
    85c0:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    85c2:	1acd      	subs	r5, r1, r3
    85c4:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    85c6:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    85c8:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    85cc:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    85d0:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    85d2:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    85d4:	2600      	movs	r6, #0
    85d6:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    85d8:	f1c0 0020 	rsb	r0, r0, #32
    85dc:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    85e0:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    85e2:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    85e4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    85e8:	4284      	cmp	r4, r0
    85ea:	d118      	bne.n	861e <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    85ec:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    85ee:	f040 0001 	orr.w	r0, r0, #1
    85f2:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    85f4:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    85f8:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    85fa:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    85fc:	801e      	strh	r6, [r3, #0]
    85fe:	8067      	strh	r7, [r4, #2]
    8600:	195c      	adds	r4, r3, r5
    8602:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    8606:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    860a:	8066      	strh	r6, [r4, #2]
    860c:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    860e:	8850      	ldrh	r0, [r2, #2]
    8610:	f040 0001 	orr.w	r0, r0, #1
    8614:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    8616:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    8618:	4618      	mov	r0, r3
    861a:	f7ff be42 	b.w	82a2 <free_list_add>
		h->buckets[i].next = 0;
    861e:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    8622:	e7e1      	b.n	85e8 <sys_heap_init+0x36>

00008624 <encode_uint>:
{
    8624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8628:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    862a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    862c:	2b6f      	cmp	r3, #111	; 0x6f
{
    862e:	4680      	mov	r8, r0
    8630:	460f      	mov	r7, r1
    8632:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8634:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    8638:	d029      	beq.n	868e <encode_uint+0x6a>
    863a:	d824      	bhi.n	8686 <encode_uint+0x62>
		return 16;
    863c:	2b58      	cmp	r3, #88	; 0x58
    863e:	bf14      	ite	ne
    8640:	260a      	movne	r6, #10
    8642:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    8644:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    8648:	4632      	mov	r2, r6
    864a:	2300      	movs	r3, #0
    864c:	4640      	mov	r0, r8
    864e:	4639      	mov	r1, r7
    8650:	f7f7 fd56 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8654:	2a09      	cmp	r2, #9
    8656:	b2d4      	uxtb	r4, r2
    8658:	d81e      	bhi.n	8698 <encode_uint+0x74>
    865a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    865c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    865e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8660:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8664:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    8668:	d301      	bcc.n	866e <encode_uint+0x4a>
    866a:	45d1      	cmp	r9, sl
    866c:	d811      	bhi.n	8692 <encode_uint+0x6e>
	if (conv->flag_hash) {
    866e:	782b      	ldrb	r3, [r5, #0]
    8670:	069b      	lsls	r3, r3, #26
    8672:	d505      	bpl.n	8680 <encode_uint+0x5c>
		if (radix == 8) {
    8674:	2e08      	cmp	r6, #8
    8676:	d115      	bne.n	86a4 <encode_uint+0x80>
			conv->altform_0 = true;
    8678:	78ab      	ldrb	r3, [r5, #2]
    867a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    867e:	70ab      	strb	r3, [r5, #2]
}
    8680:	4648      	mov	r0, r9
    8682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8686:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    868a:	2b70      	cmp	r3, #112	; 0x70
    868c:	e7d7      	b.n	863e <encode_uint+0x1a>
	switch (specifier) {
    868e:	2608      	movs	r6, #8
    8690:	e7d8      	b.n	8644 <encode_uint+0x20>
		value /= radix;
    8692:	4680      	mov	r8, r0
    8694:	460f      	mov	r7, r1
    8696:	e7d7      	b.n	8648 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8698:	f1bb 0f19 	cmp.w	fp, #25
    869c:	bf94      	ite	ls
    869e:	3437      	addls	r4, #55	; 0x37
    86a0:	3457      	addhi	r4, #87	; 0x57
    86a2:	e7db      	b.n	865c <encode_uint+0x38>
		} else if (radix == 16) {
    86a4:	2e10      	cmp	r6, #16
    86a6:	d1eb      	bne.n	8680 <encode_uint+0x5c>
			conv->altform_0c = true;
    86a8:	78ab      	ldrb	r3, [r5, #2]
    86aa:	f043 0310 	orr.w	r3, r3, #16
    86ae:	e7e6      	b.n	867e <encode_uint+0x5a>

000086b0 <outs>:
{
    86b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86b4:	4607      	mov	r7, r0
    86b6:	4688      	mov	r8, r1
    86b8:	4615      	mov	r5, r2
    86ba:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    86bc:	4614      	mov	r4, r2
    86be:	42b4      	cmp	r4, r6
    86c0:	eba4 0005 	sub.w	r0, r4, r5
    86c4:	d302      	bcc.n	86cc <outs+0x1c>
    86c6:	b93e      	cbnz	r6, 86d8 <outs+0x28>
    86c8:	7823      	ldrb	r3, [r4, #0]
    86ca:	b12b      	cbz	r3, 86d8 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    86cc:	f814 0b01 	ldrb.w	r0, [r4], #1
    86d0:	4641      	mov	r1, r8
    86d2:	47b8      	blx	r7
		if (rc < 0) {
    86d4:	2800      	cmp	r0, #0
    86d6:	daf2      	bge.n	86be <outs+0xe>
}
    86d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000086dc <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
    86dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    86e0:	4770      	bx	lr

000086e2 <ring_buf_is_empty>:
	 */
	return buf_size * (threshold / buf_size - 1);
}

int ring_buf_is_empty(struct ring_buf *buf)
{
    86e2:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
	uint32_t head = buf->head;
    86e4:	e9d0 5400 	ldrd	r5, r4, [r0]

	if (tail < head) {
    86e8:	42ac      	cmp	r4, r5
    86ea:	d207      	bcs.n	86fc <ring_buf_is_empty+0x1a>
		tail += get_rewind_value(buf->size,
    86ec:	6906      	ldr	r6, [r0, #16]
    86ee:	f7ff fff5 	bl	86dc <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    86f2:	fbb0 f0f6 	udiv	r0, r0, r6
    86f6:	3801      	subs	r0, #1
		tail += get_rewind_value(buf->size,
    86f8:	fb06 4400 	mla	r4, r6, r0, r4
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    86fc:	1b63      	subs	r3, r4, r5
    86fe:	4258      	negs	r0, r3
    8700:	4158      	adcs	r0, r3
    8702:	bd70      	pop	{r4, r5, r6, pc}

00008704 <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    8704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t space, trail_size, allocated, tmp_trail_mod;
	uint32_t head = buf->head;
    8708:	6804      	ldr	r4, [r0, #0]
	uint32_t tmp_tail = buf->misc.byte_mode.tmp_tail;
    870a:	f8d0 9008 	ldr.w	r9, [r0, #8]

	if (buf->misc.byte_mode.tmp_tail < head) {
    870e:	454c      	cmp	r4, r9
{
    8710:	4605      	mov	r5, r0
    8712:	460e      	mov	r6, r1
    8714:	4690      	mov	r8, r2
	if (buf->misc.byte_mode.tmp_tail < head) {
    8716:	d907      	bls.n	8728 <ring_buf_put_claim+0x24>
		/* Head is already rewinded but tail is not */
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    8718:	6907      	ldr	r7, [r0, #16]
    871a:	f7ff ffdf 	bl	86dc <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    871e:	fbb0 f0f7 	udiv	r0, r0, r7
    8722:	3801      	subs	r0, #1
		tmp_tail += get_rewind_value(buf->size, ring_buf_get_rewind_threshold());
    8724:	fb07 9900 	mla	r9, r7, r0, r9
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    8728:	69ab      	ldr	r3, [r5, #24]
	}

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    872a:	68a9      	ldr	r1, [r5, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    872c:	692f      	ldr	r7, [r5, #16]
    872e:	b18b      	cbz	r3, 8754 <ring_buf_put_claim+0x50>
    8730:	400b      	ands	r3, r1
	space = (head + buf->size) - tmp_tail;
    8732:	443c      	add	r4, r7
    8734:	eba4 0009 	sub.w	r0, r4, r9
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
    8738:	4540      	cmp	r0, r8
    873a:	bf28      	it	cs
    873c:	4640      	movcs	r0, r8
	trail_size = buf->size - tmp_trail_mod;
    873e:	1aff      	subs	r7, r7, r3

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
    8740:	696a      	ldr	r2, [r5, #20]
	allocated = MIN(trail_size, size);
    8742:	42b8      	cmp	r0, r7
    8744:	bf28      	it	cs
    8746:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
    8748:	4413      	add	r3, r2

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    874a:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
    874c:	6033      	str	r3, [r6, #0]
	buf->misc.byte_mode.tmp_tail =
    874e:	60a9      	str	r1, [r5, #8]

	return allocated;
}
    8750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    8754:	fbb1 f3f7 	udiv	r3, r1, r7
    8758:	fb07 1313 	mls	r3, r7, r3, r1
    875c:	e7e9      	b.n	8732 <ring_buf_put_claim+0x2e>

0000875e <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    875e:	b570      	push	{r4, r5, r6, lr}
    8760:	4605      	mov	r5, r0
    8762:	460c      	mov	r4, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    8764:	f7ff ffba 	bl	86dc <ring_buf_get_rewind_threshold>

	if ((buf->tail + size) > (buf->head + buf->size)) {
    8768:	686e      	ldr	r6, [r5, #4]
    876a:	692a      	ldr	r2, [r5, #16]
    876c:	682b      	ldr	r3, [r5, #0]
    876e:	1931      	adds	r1, r6, r4
    8770:	4413      	add	r3, r2
    8772:	4299      	cmp	r1, r3
    8774:	d80c      	bhi.n	8790 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    8776:	4286      	cmp	r6, r0
	return buf_size * (threshold / buf_size - 1);
    8778:	bf83      	ittte	hi
    877a:	fbb0 f3f2 	udivhi	r3, r0, r2
    877e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    8782:	4353      	mulhi	r3, r2
		rew = get_rewind_value(buf->size, threshold);
	} else {
		rew = 0;
    8784:	2300      	movls	r3, #0
	}

	buf->tail += (size - rew);
    8786:	1acb      	subs	r3, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
    8788:	e9c5 3301 	strd	r3, r3, [r5, #4]

	return 0;
    878c:	2000      	movs	r0, #0
}
    878e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    8790:	f06f 0015 	mvn.w	r0, #21
    8794:	e7fb      	b.n	878e <ring_buf_put_finish+0x30>

00008796 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    8796:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    879a:	4680      	mov	r8, r0
    879c:	460e      	mov	r6, r1
    879e:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    87a0:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    87a2:	462a      	mov	r2, r5
    87a4:	a901      	add	r1, sp, #4
    87a6:	4640      	mov	r0, r8
    87a8:	f7ff ffac 	bl	8704 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    87ac:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    87ae:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    87b0:	4602      	mov	r2, r0
    87b2:	9801      	ldr	r0, [sp, #4]
    87b4:	f000 f9c2 	bl	8b3c <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    87b8:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    87ba:	4427      	add	r7, r4
		data += partial_size;
    87bc:	4426      	add	r6, r4
	} while (size && partial_size);
    87be:	d001      	beq.n	87c4 <ring_buf_put+0x2e>
    87c0:	2c00      	cmp	r4, #0
    87c2:	d1ee      	bne.n	87a2 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    87c4:	4639      	mov	r1, r7
    87c6:	4640      	mov	r0, r8
    87c8:	f7ff ffc9 	bl	875e <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    87cc:	4638      	mov	r0, r7
    87ce:	b002      	add	sp, #8
    87d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000087d4 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    87d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    87d8:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
    87da:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
    87dc:	42b3      	cmp	r3, r6
{
    87de:	4604      	mov	r4, r0
    87e0:	460f      	mov	r7, r1
    87e2:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
    87e4:	d907      	bls.n	87f6 <ring_buf_get_claim+0x22>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
    87e6:	6905      	ldr	r5, [r0, #16]
    87e8:	f7ff ff78 	bl	86dc <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    87ec:	fbb0 f1f5 	udiv	r1, r0, r5
    87f0:	3901      	subs	r1, #1
		tail += get_rewind_value(buf->size,
    87f2:	fb05 6601 	mla	r6, r5, r1, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    87f6:	69a5      	ldr	r5, [r4, #24]
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    87f8:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    87fa:	6923      	ldr	r3, [r4, #16]
    87fc:	b185      	cbz	r5, 8820 <ring_buf_get_claim+0x4c>
    87fe:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
    8800:	1a70      	subs	r0, r6, r1
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    8802:	4540      	cmp	r0, r8
    8804:	bf28      	it	cs
    8806:	4640      	movcs	r0, r8
    8808:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
    880a:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    880c:	42b0      	cmp	r0, r6

	*data = &buf->buf.buf8[tmp_head_mod];
    880e:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
    8810:	bf28      	it	cs
    8812:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
    8814:	442b      	add	r3, r5
	buf->misc.byte_mode.tmp_head += granted_size;
    8816:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
    8818:	603b      	str	r3, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    881a:	60e1      	str	r1, [r4, #12]

	return granted_size;
}
    881c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    8820:	fbb1 f5f3 	udiv	r5, r1, r3
    8824:	fb03 1515 	mls	r5, r3, r5, r1
    8828:	e7ea      	b.n	8800 <ring_buf_get_claim+0x2c>

0000882a <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    882a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
    882c:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    882e:	68c3      	ldr	r3, [r0, #12]
    8830:	42b3      	cmp	r3, r6
{
    8832:	4605      	mov	r5, r0
    8834:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
    8836:	d914      	bls.n	8862 <ring_buf_get_finish+0x38>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
    8838:	6907      	ldr	r7, [r0, #16]
    883a:	f7ff ff4f 	bl	86dc <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size - 1);
    883e:	fbb0 f1f7 	udiv	r1, r0, r7
    8842:	3901      	subs	r1, #1
    8844:	fb07 f301 	mul.w	r3, r7, r1
				       ring_buf_get_rewind_threshold());
		tail += rew;
    8848:	441e      	add	r6, r3
	} else {
		rew = 0;
	}

	if ((buf->head + size) > tail) {
    884a:	6829      	ldr	r1, [r5, #0]
    884c:	4421      	add	r1, r4
    884e:	42b1      	cmp	r1, r6
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    8850:	bf9f      	itttt	ls
    8852:	1ac9      	subls	r1, r1, r3
    8854:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    8856:	60e9      	strls	r1, [r5, #12]

	return 0;
    8858:	2000      	movls	r0, #0
		return -EINVAL;
    885a:	bf88      	it	hi
    885c:	f06f 0015 	mvnhi.w	r0, #21
}
    8860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
    8862:	2300      	movs	r3, #0
    8864:	e7f1      	b.n	884a <ring_buf_get_finish+0x20>

00008866 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    8866:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    886a:	4680      	mov	r8, r0
    886c:	460d      	mov	r5, r1
    886e:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    8870:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    8872:	4632      	mov	r2, r6
    8874:	a901      	add	r1, sp, #4
    8876:	4640      	mov	r0, r8
    8878:	f7ff ffac 	bl	87d4 <ring_buf_get_claim>
    887c:	4604      	mov	r4, r0
		if (data) {
    887e:	b12d      	cbz	r5, 888c <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    8880:	4602      	mov	r2, r0
    8882:	9901      	ldr	r1, [sp, #4]
    8884:	4628      	mov	r0, r5
    8886:	f000 f959 	bl	8b3c <memcpy>
			data += partial_size;
    888a:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    888c:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    888e:	4427      	add	r7, r4
	} while (size && partial_size);
    8890:	d001      	beq.n	8896 <ring_buf_get+0x30>
    8892:	2c00      	cmp	r4, #0
    8894:	d1ed      	bne.n	8872 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    8896:	4639      	mov	r1, r7
    8898:	4640      	mov	r0, r8
    889a:	f7ff ffc6 	bl	882a <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    889e:	4638      	mov	r0, r7
    88a0:	b002      	add	sp, #8
    88a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000088a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    88a6:	4770      	bx	lr

000088a8 <usb_write>:
{
    88a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88ac:	4606      	mov	r6, r0
    88ae:	460f      	mov	r7, r1
    88b0:	4690      	mov	r8, r2
    88b2:	4699      	mov	r9, r3
    88b4:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    88b6:	464b      	mov	r3, r9
    88b8:	4642      	mov	r2, r8
    88ba:	4639      	mov	r1, r7
    88bc:	4630      	mov	r0, r6
    88be:	f7fa fcd7 	bl	3270 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    88c2:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    88c6:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    88c8:	d103      	bne.n	88d2 <usb_write+0x2a>
	z_impl_k_yield();
    88ca:	f7ff f8d1 	bl	7a70 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    88ce:	3d01      	subs	r5, #1
    88d0:	d1f1      	bne.n	88b6 <usb_write+0xe>
}
    88d2:	4620      	mov	r0, r4
    88d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000088d8 <usb_get_dev_data_by_cfg>:
	return list->head;
    88d8:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    88da:	b140      	cbz	r0, 88ee <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    88dc:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    88e0:	685b      	ldr	r3, [r3, #4]
    88e2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    88e4:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    88e8:	d001      	beq.n	88ee <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    88ea:	6840      	ldr	r0, [r0, #4]
    88ec:	e7f5      	b.n	88da <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    88ee:	4770      	bx	lr

000088f0 <usb_get_dev_data_by_iface>:
	return list->head;
    88f0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    88f2:	b150      	cbz	r0, 890a <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    88f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    88f8:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    88fa:	685b      	ldr	r3, [r3, #4]
    88fc:	789b      	ldrb	r3, [r3, #2]
    88fe:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    8900:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    8904:	d001      	beq.n	890a <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    8906:	6840      	ldr	r0, [r0, #4]
    8908:	e7f3      	b.n	88f2 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    890a:	4770      	bx	lr

0000890c <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    890c:	b530      	push	{r4, r5, lr}
	return list->head;
    890e:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    8910:	b188      	cbz	r0, 8936 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    8912:	f850 3c04 	ldr.w	r3, [r0, #-4]
    8916:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    8918:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    891a:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    891c:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    891e:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    8920:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    8922:	b2dc      	uxtb	r4, r3
    8924:	42a5      	cmp	r5, r4
    8926:	d801      	bhi.n	892c <usb_get_dev_data_by_ep+0x20>
	return node->next;
    8928:	6840      	ldr	r0, [r0, #4]
    892a:	e7f1      	b.n	8910 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    892c:	3301      	adds	r3, #1
    892e:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    8932:	428c      	cmp	r4, r1
    8934:	d1f5      	bne.n	8922 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    8936:	bd30      	pop	{r4, r5, pc}

00008938 <usb_transfer_is_busy>:
{
    8938:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    893a:	f7f9 f805 	bl	1948 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    893e:	b128      	cbz	r0, 894c <usb_transfer_is_busy+0x14>
    8940:	6840      	ldr	r0, [r0, #4]
    8942:	f110 0f10 	cmn.w	r0, #16
    8946:	bf14      	ite	ne
    8948:	2000      	movne	r0, #0
    894a:	2001      	moveq	r0, #1
}
    894c:	bd08      	pop	{r3, pc}

0000894e <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    894e:	1c4b      	adds	r3, r1, #1
    8950:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    8952:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    8954:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    8956:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    895a:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    895c:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    8960:	4770      	bx	lr

00008962 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    8962:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    8966:	6f80      	ldr	r0, [r0, #120]	; 0x78
    8968:	4718      	bx	r3

0000896a <cdc_acm_irq_tx_disable>:
	dev_data->tx_irq_ena = false;
    896a:	6903      	ldr	r3, [r0, #16]
    896c:	2200      	movs	r2, #0
    896e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    8972:	4770      	bx	lr

00008974 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    8974:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    8976:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
    897a:	b108      	cbz	r0, 8980 <cdc_acm_irq_tx_ready+0xc>
		return 1;
    897c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    8980:	4770      	bx	lr

00008982 <cdc_acm_irq_rx_disable>:
	dev_data->rx_irq_ena = false;
    8982:	6903      	ldr	r3, [r0, #16]
    8984:	2200      	movs	r2, #0
    8986:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    898a:	4770      	bx	lr

0000898c <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    898c:	6903      	ldr	r3, [r0, #16]
}
    898e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    8992:	4770      	bx	lr

00008994 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    8994:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    8996:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    899a:	b112      	cbz	r2, 89a2 <cdc_acm_irq_is_pending+0xe>
    899c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    89a0:	b92a      	cbnz	r2, 89ae <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    89a2:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    89a6:	b118      	cbz	r0, 89b0 <cdc_acm_irq_is_pending+0x1c>
		return 0;
    89a8:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
    89ac:	4770      	bx	lr
		return 1;
    89ae:	2001      	movs	r0, #1
}
    89b0:	4770      	bx	lr

000089b2 <cdc_acm_irq_update>:
}
    89b2:	2001      	movs	r0, #1
    89b4:	4770      	bx	lr

000089b6 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    89b6:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    89b8:	e9c3 1200 	strd	r1, r2, [r3]
}
    89bc:	4770      	bx	lr

000089be <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    89be:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    89c0:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    89c2:	d007      	beq.n	89d4 <cdc_acm_line_ctrl_get+0x16>
    89c4:	2904      	cmp	r1, #4
    89c6:	d00a      	beq.n	89de <cdc_acm_line_ctrl_get+0x20>
    89c8:	2901      	cmp	r1, #1
    89ca:	d10d      	bne.n	89e8 <cdc_acm_line_ctrl_get+0x2a>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    89cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		*val = (dev_data->line_state &
    89ce:	6013      	str	r3, [r2, #0]
		return 0;
    89d0:	2000      	movs	r0, #0
    89d2:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    89d4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    89d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
    89dc:	e7f7      	b.n	89ce <cdc_acm_line_ctrl_get+0x10>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    89de:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
    89e2:	f003 0301 	and.w	r3, r3, #1
    89e6:	e7f2      	b.n	89ce <cdc_acm_line_ctrl_get+0x10>
	switch (ctrl) {
    89e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    89ec:	4770      	bx	lr

000089ee <cdc_acm_fifo_read>:
{
    89ee:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    89f0:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    89f2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    89f4:	f7ff ff37 	bl	8866 <ring_buf_get>
    89f8:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    89fa:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    89fc:	f7ff fe71 	bl	86e2 <ring_buf_is_empty>
    8a00:	b110      	cbz	r0, 8a08 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    8a02:	2300      	movs	r3, #0
    8a04:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    8a08:	4620      	mov	r0, r4
    8a0a:	bd38      	pop	{r3, r4, r5, pc}

00008a0c <cdc_acm_poll_in>:
{
    8a0c:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    8a0e:	2201      	movs	r2, #1
    8a10:	f7ff ffed 	bl	89ee <cdc_acm_fifo_read>
}
    8a14:	3801      	subs	r0, #1
    8a16:	bf18      	it	ne
    8a18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    8a1c:	bd08      	pop	{r3, pc}

00008a1e <cdc_acm_line_ctrl_set>:
	switch (ctrl) {
    8a1e:	2940      	cmp	r1, #64	; 0x40
{
    8a20:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    8a22:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    8a24:	d042      	beq.n	8aac <cdc_acm_line_ctrl_set+0x8e>
    8a26:	d813      	bhi.n	8a50 <cdc_acm_line_ctrl_set+0x32>
    8a28:	2910      	cmp	r1, #16
    8a2a:	d032      	beq.n	8a92 <cdc_acm_line_ctrl_set+0x74>
    8a2c:	d806      	bhi.n	8a3c <cdc_acm_line_ctrl_set+0x1e>
    8a2e:	2901      	cmp	r1, #1
    8a30:	d01e      	beq.n	8a70 <cdc_acm_line_ctrl_set+0x52>
    8a32:	2908      	cmp	r1, #8
    8a34:	d01f      	beq.n	8a76 <cdc_acm_line_ctrl_set+0x58>
    8a36:	f06f 0012 	mvn.w	r0, #18
}
    8a3a:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    8a3c:	2920      	cmp	r1, #32
    8a3e:	d1fa      	bne.n	8a36 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    8a40:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    8a44:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    8a48:	b342      	cbz	r2, 8a9c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    8a4a:	f041 0104 	orr.w	r1, r1, #4
    8a4e:	e025      	b.n	8a9c <cdc_acm_line_ctrl_set+0x7e>
	switch (ctrl) {
    8a50:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    8a54:	d033      	beq.n	8abe <cdc_acm_line_ctrl_set+0xa0>
    8a56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8a5a:	d039      	beq.n	8ad0 <cdc_acm_line_ctrl_set+0xb2>
    8a5c:	2980      	cmp	r1, #128	; 0x80
    8a5e:	d1ea      	bne.n	8a36 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    8a60:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    8a64:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    8a68:	b1c2      	cbz	r2, 8a9c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    8a6a:	f041 0110 	orr.w	r1, r1, #16
    8a6e:	e015      	b.n	8a9c <cdc_acm_line_ctrl_set+0x7e>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    8a70:	675a      	str	r2, [r3, #116]	; 0x74
		return 0;
    8a72:	2000      	movs	r0, #0
    8a74:	e7e1      	b.n	8a3a <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    8a76:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    8a7a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    8a7e:	b92a      	cbnz	r2, 8a8c <cdc_acm_line_ctrl_set+0x6e>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    8a80:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    8a84:	2101      	movs	r1, #1
		cdc_acm_send_notification(dev, dev_data->serial_state);
    8a86:	f7f9 fa99 	bl	1fbc <cdc_acm_send_notification.isra.0>
    8a8a:	e7f2      	b.n	8a72 <cdc_acm_line_ctrl_set+0x54>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    8a8c:	f041 0101 	orr.w	r1, r1, #1
    8a90:	e7f6      	b.n	8a80 <cdc_acm_line_ctrl_set+0x62>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    8a92:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    8a96:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    8a9a:	b922      	cbnz	r2, 8aa6 <cdc_acm_line_ctrl_set+0x88>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    8a9c:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    8aa0:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    8aa4:	e7ef      	b.n	8a86 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    8aa6:	f041 0102 	orr.w	r1, r1, #2
    8aaa:	e7f7      	b.n	8a9c <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    8aac:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    8ab0:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    8ab4:	2a00      	cmp	r2, #0
    8ab6:	d0f1      	beq.n	8a9c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    8ab8:	f041 0108 	orr.w	r1, r1, #8
    8abc:	e7ee      	b.n	8a9c <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    8abe:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    8ac2:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    8ac6:	2a00      	cmp	r2, #0
    8ac8:	d0e8      	beq.n	8a9c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    8aca:	f041 0120 	orr.w	r1, r1, #32
    8ace:	e7e5      	b.n	8a9c <cdc_acm_line_ctrl_set+0x7e>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    8ad0:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
    8ad4:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    8ad8:	2a00      	cmp	r2, #0
    8ada:	d0df      	beq.n	8a9c <cdc_acm_line_ctrl_set+0x7e>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    8adc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8ae0:	e7dc      	b.n	8a9c <cdc_acm_line_ctrl_set+0x7e>

00008ae2 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    8ae2:	f000 be1e 	b.w	9722 <z_fatal_error>

00008ae6 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8ae6:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    8ae8:	6800      	ldr	r0, [r0, #0]
    8aea:	f000 be1a 	b.w	9722 <z_fatal_error>

00008aee <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8aee:	2100      	movs	r1, #0
    8af0:	2001      	movs	r0, #1
    8af2:	f7ff bff6 	b.w	8ae2 <z_arm_fatal_error>

00008af6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    8af6:	b508      	push	{r3, lr}
	handler();
    8af8:	f7f9 fc6e 	bl	23d8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8afc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    8b00:	f7f9 bd2e 	b.w	2560 <z_arm_exc_exit>

00008b04 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8b04:	4603      	mov	r3, r0
	size_t n = 0;
    8b06:	2000      	movs	r0, #0

	while (*s != '\0') {
    8b08:	5c1a      	ldrb	r2, [r3, r0]
    8b0a:	b902      	cbnz	r2, 8b0e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    8b0c:	4770      	bx	lr
		n++;
    8b0e:	3001      	adds	r0, #1
    8b10:	e7fa      	b.n	8b08 <strlen+0x4>

00008b12 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8b12:	4603      	mov	r3, r0
	size_t n = 0;
    8b14:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8b16:	5c1a      	ldrb	r2, [r3, r0]
    8b18:	b10a      	cbz	r2, 8b1e <strnlen+0xc>
    8b1a:	4288      	cmp	r0, r1
    8b1c:	d100      	bne.n	8b20 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8b1e:	4770      	bx	lr
		n++;
    8b20:	3001      	adds	r0, #1
    8b22:	e7f8      	b.n	8b16 <strnlen+0x4>

00008b24 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    8b24:	1e43      	subs	r3, r0, #1
    8b26:	3901      	subs	r1, #1
    8b28:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8b2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8b30:	4282      	cmp	r2, r0
    8b32:	d101      	bne.n	8b38 <strcmp+0x14>
    8b34:	2a00      	cmp	r2, #0
    8b36:	d1f7      	bne.n	8b28 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8b38:	1a10      	subs	r0, r2, r0
    8b3a:	4770      	bx	lr

00008b3c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8b3c:	b510      	push	{r4, lr}
    8b3e:	1e43      	subs	r3, r0, #1
    8b40:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8b42:	4291      	cmp	r1, r2
    8b44:	d100      	bne.n	8b48 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8b46:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8b48:	f811 4b01 	ldrb.w	r4, [r1], #1
    8b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8b50:	e7f7      	b.n	8b42 <memcpy+0x6>

00008b52 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8b52:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8b54:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    8b56:	4603      	mov	r3, r0
	while (n > 0) {
    8b58:	4293      	cmp	r3, r2
    8b5a:	d100      	bne.n	8b5e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8b5c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8b5e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8b62:	e7f9      	b.n	8b58 <memset+0x6>

00008b64 <_stdout_hook_default>:
}
    8b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8b68:	4770      	bx	lr

00008b6a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    8b6a:	b084      	sub	sp, #16
    8b6c:	ab04      	add	r3, sp, #16
    8b6e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    8b72:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8b76:	2b06      	cmp	r3, #6
    8b78:	d108      	bne.n	8b8c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b7e:	2201      	movs	r2, #1
    8b80:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8b84:	f3bf 8f4f 	dsb	sy
        __WFE();
    8b88:	bf20      	wfe
    while (true)
    8b8a:	e7fd      	b.n	8b88 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    8b8c:	b004      	add	sp, #16
    8b8e:	4770      	bx	lr

00008b90 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    8b90:	b084      	sub	sp, #16
    8b92:	ab04      	add	r3, sp, #16
    8b94:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8b98:	2300      	movs	r3, #0
    8b9a:	f383 8811 	msr	BASEPRI, r3
    8b9e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8ba2:	b004      	add	sp, #16
    8ba4:	4770      	bx	lr

00008ba6 <z_impl_gpio_pin_configure.isra.0>:
static inline int z_impl_gpio_pin_configure(const struct device *port,
    8ba6:	b4f0      	push	{r4, r5, r6, r7}
    8ba8:	4613      	mov	r3, r2
	struct gpio_driver_data *data =
    8baa:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
    8bac:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8bae:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    8bb0:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    8bb2:	bf48      	it	mi
    8bb4:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8bb8:	2501      	movs	r5, #1
    8bba:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    8bbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    8bc0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8bc2:	bf4c      	ite	mi
    8bc4:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    8bc6:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
    8bc8:	683b      	ldr	r3, [r7, #0]
    8bca:	6034      	str	r4, [r6, #0]
}
    8bcc:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    8bce:	4718      	bx	r3

00008bd0 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    8bd0:	6903      	ldr	r3, [r0, #16]
{
    8bd2:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    8bd4:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    8bd8:	2300      	movs	r3, #0
    8bda:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    8bdc:	7f83      	ldrb	r3, [r0, #30]
{
    8bde:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    8be0:	b113      	cbz	r3, 8be8 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    8be2:	7a40      	ldrb	r0, [r0, #9]
    8be4:	f000 fd77 	bl	96d6 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    8be8:	2301      	movs	r3, #1
    8bea:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    8bec:	2300      	movs	r3, #0
    8bee:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    8bf0:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    8bf2:	77a3      	strb	r3, [r4, #30]
}
    8bf4:	bd10      	pop	{r4, pc}

00008bf6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    8bf6:	f7fe ba99 	b.w	712c <z_impl_k_mutex_lock>

00008bfa <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    8bfa:	f7fe bb0f 	b.w	721c <z_impl_k_mutex_unlock>

00008bfe <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    8bfe:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    8c00:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    8c02:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    8c06:	b921      	cbnz	r1, 8c12 <usb_dc_ep_check_cap+0x14>
    8c08:	1e10      	subs	r0, r2, #0
    8c0a:	bf18      	it	ne
    8c0c:	2001      	movne	r0, #1
    8c0e:	4240      	negs	r0, r0
    8c10:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    8c12:	2a08      	cmp	r2, #8
    8c14:	d806      	bhi.n	8c24 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    8c16:	2901      	cmp	r1, #1
    8c18:	d107      	bne.n	8c2a <usb_dc_ep_check_cap+0x2c>
    8c1a:	f083 0008 	eor.w	r0, r3, #8
    8c1e:	f340 00c0 	sbfx	r0, r0, #3, #1
    8c22:	4770      	bx	lr
		return -1;
    8c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8c28:	4770      	bx	lr
	return 0;
    8c2a:	2000      	movs	r0, #0
}
    8c2c:	4770      	bx	lr

00008c2e <usb_dc_ep_read>:
{
    8c2e:	b570      	push	{r4, r5, r6, lr}
    8c30:	4604      	mov	r4, r0
    8c32:	460e      	mov	r6, r1
    8c34:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    8c36:	f7fa fb93 	bl	3360 <usb_dc_ep_read_wait>
	if (ret) {
    8c3a:	b930      	cbnz	r0, 8c4a <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    8c3c:	b906      	cbnz	r6, 8c40 <usb_dc_ep_read+0x12>
    8c3e:	b125      	cbz	r5, 8c4a <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    8c40:	4620      	mov	r0, r4
}
    8c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    8c46:	f7fa bbd3 	b.w	33f0 <usb_dc_ep_read_continue>
}
    8c4a:	bd70      	pop	{r4, r5, r6, pc}

00008c4c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    8c4c:	6903      	ldr	r3, [r0, #16]
    8c4e:	b2c9      	uxtb	r1, r1
    8c50:	220c      	movs	r2, #12
    8c52:	fb01 3302 	mla	r3, r1, r2, r3
    8c56:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    8c58:	f000 0007 	and.w	r0, r0, #7
    8c5c:	4770      	bx	lr

00008c5e <set_on_state>:
	__asm__ volatile(
    8c5e:	f04f 0320 	mov.w	r3, #32
    8c62:	f3ef 8211 	mrs	r2, BASEPRI
    8c66:	f383 8812 	msr	BASEPRI_MAX, r3
    8c6a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8c6e:	6803      	ldr	r3, [r0, #0]
    8c70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8c74:	f043 0302 	orr.w	r3, r3, #2
    8c78:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8c7a:	f382 8811 	msr	BASEPRI, r2
    8c7e:	f3bf 8f6f 	isb	sy
}
    8c82:	4770      	bx	lr

00008c84 <stop>:
{
    8c84:	4603      	mov	r3, r0
    8c86:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    8c88:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    8c8a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    8c8c:	f04f 0420 	mov.w	r4, #32
    8c90:	f3ef 8611 	mrs	r6, BASEPRI
    8c94:	f384 8812 	msr	BASEPRI_MAX, r4
    8c98:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8c9c:	250c      	movs	r5, #12
    8c9e:	fb05 0401 	mla	r4, r5, r1, r0
    8ca2:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    8ca4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    8ca8:	d001      	beq.n	8cae <stop+0x2a>
    8caa:	42a2      	cmp	r2, r4
    8cac:	d110      	bne.n	8cd0 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    8cae:	fb05 0001 	mla	r0, r5, r1, r0
    8cb2:	2201      	movs	r2, #1
    8cb4:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    8cb6:	2000      	movs	r0, #0
	__asm__ volatile(
    8cb8:	f386 8811 	msr	BASEPRI, r6
    8cbc:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    8cc0:	b928      	cbnz	r0, 8cce <stop+0x4a>
	get_sub_config(dev, type)->stop();
    8cc2:	685b      	ldr	r3, [r3, #4]
    8cc4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    8cc8:	684b      	ldr	r3, [r1, #4]
    8cca:	4798      	blx	r3
	return 0;
    8ccc:	2000      	movs	r0, #0
}
    8cce:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    8cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8cd4:	e7f0      	b.n	8cb8 <stop+0x34>

00008cd6 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8cd6:	2280      	movs	r2, #128	; 0x80
    8cd8:	f7ff bfd4 	b.w	8c84 <stop>

00008cdc <async_start>:
{
    8cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cde:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    8ce0:	6904      	ldr	r4, [r0, #16]
{
    8ce2:	4605      	mov	r5, r0
    8ce4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    8ce6:	f04f 0020 	mov.w	r0, #32
    8cea:	f3ef 8c11 	mrs	ip, BASEPRI
    8cee:	f380 8812 	msr	BASEPRI_MAX, r0
    8cf2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8cf6:	260c      	movs	r6, #12
    8cf8:	fb06 4601 	mla	r6, r6, r1, r4
    8cfc:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8cfe:	f000 0e07 	and.w	lr, r0, #7
    8d02:	f1be 0f01 	cmp.w	lr, #1
    8d06:	d111      	bne.n	8d2c <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8d08:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    8d0a:	2600      	movs	r6, #0
	__asm__ volatile(
    8d0c:	f38c 8811 	msr	BASEPRI, ip
    8d10:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    8d14:	b946      	cbnz	r6, 8d28 <async_start+0x4c>
	subdata->cb = cb;
    8d16:	200c      	movs	r0, #12
    8d18:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    8d1c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    8d20:	686b      	ldr	r3, [r5, #4]
    8d22:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    8d26:	4798      	blx	r3
}
    8d28:	4630      	mov	r0, r6
    8d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8d2c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    8d30:	4287      	cmp	r7, r0
    8d32:	bf14      	ite	ne
    8d34:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    8d38:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    8d3c:	e7e6      	b.n	8d0c <async_start+0x30>

00008d3e <api_start>:
{
    8d3e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    8d40:	2480      	movs	r4, #128	; 0x80
    8d42:	9400      	str	r4, [sp, #0]
    8d44:	f7ff ffca 	bl	8cdc <async_start>
}
    8d48:	b002      	add	sp, #8
    8d4a:	bd10      	pop	{r4, pc}

00008d4c <onoff_started_callback>:
	return &data->mgr[type];
    8d4c:	6900      	ldr	r0, [r0, #16]
{
    8d4e:	b410      	push	{r4}
	return &data->mgr[type];
    8d50:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8d52:	241c      	movs	r4, #28
    8d54:	fb03 0004 	mla	r0, r3, r4, r0
    8d58:	2100      	movs	r1, #0
}
    8d5a:	bc10      	pop	{r4}
	notify(mgr, 0);
    8d5c:	4710      	bx	r2

00008d5e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8d5e:	2000      	movs	r0, #0
    8d60:	f000 ba8c 	b.w	927c <nrfx_clock_start>

00008d64 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8d64:	2000      	movs	r0, #0
    8d66:	f7fb bdfd 	b.w	4964 <nrfx_clock_stop>

00008d6a <blocking_start_callback>:
{
    8d6a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8d6c:	f7fe bacc 	b.w	7308 <z_impl_k_sem_give>

00008d70 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8d70:	6843      	ldr	r3, [r0, #4]
    8d72:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8d74:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8d78:	600b      	str	r3, [r1, #0]
}
    8d7a:	2000      	movs	r0, #0
    8d7c:	4770      	bx	lr

00008d7e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8d7e:	6843      	ldr	r3, [r0, #4]
    8d80:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    8d82:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8d86:	4042      	eors	r2, r0
    8d88:	400a      	ands	r2, r1
    8d8a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8d8c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8d90:	2000      	movs	r0, #0
    8d92:	4770      	bx	lr

00008d94 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8d94:	6843      	ldr	r3, [r0, #4]
    8d96:	685b      	ldr	r3, [r3, #4]
}
    8d98:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    8d9a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    8d9e:	4770      	bx	lr

00008da0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8da0:	6843      	ldr	r3, [r0, #4]
    8da2:	685b      	ldr	r3, [r3, #4]
}
    8da4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    8da6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    8daa:	4770      	bx	lr

00008dac <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8dac:	6843      	ldr	r3, [r0, #4]
    8dae:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8db0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    8db4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    8db6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    8dba:	2000      	movs	r0, #0
    8dbc:	4770      	bx	lr

00008dbe <gpio_nrfx_manage_callback>:
	return port->data;
    8dbe:	6903      	ldr	r3, [r0, #16]
	return list->head;
    8dc0:	6858      	ldr	r0, [r3, #4]
{
    8dc2:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    8dc4:	b158      	cbz	r0, 8dde <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8dc6:	2400      	movs	r4, #0
    8dc8:	4281      	cmp	r1, r0
    8dca:	d112      	bne.n	8df2 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    8dcc:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    8dce:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    8dd0:	b954      	cbnz	r4, 8de8 <gpio_nrfx_manage_callback+0x2a>
    8dd2:	428d      	cmp	r5, r1
	list->head = node;
    8dd4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    8dd6:	d100      	bne.n	8dda <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    8dd8:	6098      	str	r0, [r3, #8]
	parent->next = child;
    8dda:	2000      	movs	r0, #0
    8ddc:	6008      	str	r0, [r1, #0]
	if (set) {
    8dde:	b96a      	cbnz	r2, 8dfc <gpio_nrfx_manage_callback+0x3e>
	return 0;
    8de0:	2000      	movs	r0, #0
}
    8de2:	bd30      	pop	{r4, r5, pc}
    8de4:	4628      	mov	r0, r5
    8de6:	e7ef      	b.n	8dc8 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    8de8:	428d      	cmp	r5, r1
	parent->next = child;
    8dea:	6020      	str	r0, [r4, #0]
	list->tail = node;
    8dec:	bf08      	it	eq
    8dee:	609c      	streq	r4, [r3, #8]
}
    8df0:	e7f3      	b.n	8dda <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    8df2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8df4:	4604      	mov	r4, r0
    8df6:	2d00      	cmp	r5, #0
    8df8:	d1f4      	bne.n	8de4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    8dfa:	b13a      	cbz	r2, 8e0c <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    8dfc:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    8dfe:	685a      	ldr	r2, [r3, #4]
    8e00:	600a      	str	r2, [r1, #0]
	list->head = node;
    8e02:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    8e04:	2800      	cmp	r0, #0
    8e06:	d1eb      	bne.n	8de0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    8e08:	6099      	str	r1, [r3, #8]
}
    8e0a:	e7ea      	b.n	8de2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    8e0c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    8e10:	e7e7      	b.n	8de2 <gpio_nrfx_manage_callback+0x24>

00008e12 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    8e12:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    8e14:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    8e16:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    8e18:	d405      	bmi.n	8e26 <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    8e1a:	f3c1 0242 	ubfx	r2, r1, #1, #3
    8e1e:	2a01      	cmp	r2, #1
    8e20:	d004      	beq.n	8e2c <i2c_nrfx_twi_configure+0x1a>
    8e22:	2a02      	cmp	r2, #2
    8e24:	d00a      	beq.n	8e3c <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
    8e26:	f06f 0015 	mvn.w	r0, #21
}
    8e2a:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    8e2c:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    8e2e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    8e32:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    8e36:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    8e38:	2000      	movs	r0, #0
    8e3a:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    8e3c:	681b      	ldr	r3, [r3, #0]
    8e3e:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    8e42:	e7f6      	b.n	8e32 <i2c_nrfx_twi_configure+0x20>

00008e44 <i2c_nrfx_twim_configure>:
{
    8e44:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
    8e46:	07cb      	lsls	r3, r1, #31
{
    8e48:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
    8e4a:	d41d      	bmi.n	8e88 <i2c_nrfx_twim_configure+0x44>
	switch (I2C_SPEED_GET(i2c_config)) {
    8e4c:	f3c1 0142 	ubfx	r1, r1, #1, #3
    8e50:	2901      	cmp	r1, #1
    8e52:	d016      	beq.n	8e82 <i2c_nrfx_twim_configure+0x3e>
    8e54:	2902      	cmp	r1, #2
    8e56:	d117      	bne.n	8e88 <i2c_nrfx_twim_configure+0x44>
    8e58:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    8e5c:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
    8e5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    8e60:	4293      	cmp	r3, r2
    8e62:	d014      	beq.n	8e8e <i2c_nrfx_twim_configure+0x4a>
		dev_data->twim_config.frequency = frequency;
    8e64:	62ab      	str	r3, [r5, #40]	; 0x28
	if (dev_data->twim_initialized) {
    8e66:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    8e6a:	b12b      	cbz	r3, 8e78 <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
    8e6c:	6860      	ldr	r0, [r4, #4]
    8e6e:	f7fc fcb7 	bl	57e0 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
    8e72:	2300      	movs	r3, #0
    8e74:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
		return init_twim(dev);
    8e78:	4620      	mov	r0, r4
}
    8e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
    8e7e:	f7fa bef3 	b.w	3c68 <init_twim>
		frequency = NRF_TWIM_FREQ_100K;
    8e82:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
    8e86:	e7e9      	b.n	8e5c <i2c_nrfx_twim_configure+0x18>
	switch (I2C_SPEED_GET(i2c_config)) {
    8e88:	f06f 0015 	mvn.w	r0, #21
}
    8e8c:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    8e8e:	2000      	movs	r0, #0
    8e90:	e7fc      	b.n	8e8c <i2c_nrfx_twim_configure+0x48>

00008e92 <twim_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    8e92:	b510      	push	{r4, lr}
    8e94:	2200      	movs	r2, #0
    8e96:	4604      	mov	r4, r0
    8e98:	2101      	movs	r1, #1
    8e9a:	2004      	movs	r0, #4
    8e9c:	f7f9 fa84 	bl	23a8 <z_arm_irq_priority_set>
    8ea0:	4620      	mov	r0, r4
    8ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8ea6:	f7fa bedf 	b.w	3c68 <init_twim>

00008eaa <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    8eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    8eac:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    8eb0:	2908      	cmp	r1, #8
    8eb2:	6e66      	ldr	r6, [r4, #100]	; 0x64
    8eb4:	6e65      	ldr	r5, [r4, #100]	; 0x64
    8eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8eb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    8eba:	ea4f 2515 	mov.w	r5, r5, lsr #8
    8ebe:	ea4f 6303 	mov.w	r3, r3, lsl #24
    8ec2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    8ec6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    8eca:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8ece:	ea43 0305 	orr.w	r3, r3, r5
    8ed2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    8ed6:	ea43 0302 	orr.w	r3, r3, r2
    8eda:	9300      	str	r3, [sp, #0]
    8edc:	6e26      	ldr	r6, [r4, #96]	; 0x60
    8ede:	6e25      	ldr	r5, [r4, #96]	; 0x60
    8ee0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8ee2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    8ee4:	ea4f 2415 	mov.w	r4, r5, lsr #8
    8ee8:	ea4f 6303 	mov.w	r3, r3, lsl #24
    8eec:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
    8ef0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
    8ef4:	ea43 0304 	orr.w	r3, r3, r4
    8ef8:	ea4f 2402 	mov.w	r4, r2, lsl #8
    8efc:	bf28      	it	cs
    8efe:	2108      	movcs	r1, #8
    8f00:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    8f04:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    8f06:	460a      	mov	r2, r1
    8f08:	460c      	mov	r4, r1
    8f0a:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    8f0c:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    8f0e:	f7ff fe15 	bl	8b3c <memcpy>

	return length;
}
    8f12:	4620      	mov	r0, r4
    8f14:	b002      	add	sp, #8
    8f16:	bd70      	pop	{r4, r5, r6, pc}

00008f18 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    8f18:	6902      	ldr	r2, [r0, #16]
{
    8f1a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    8f1c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8f20:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8f24:	2000      	movs	r0, #0
    8f26:	4770      	bx	lr

00008f28 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    8f28:	6843      	ldr	r3, [r0, #4]
    8f2a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8f2c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8f30:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8f34:	4770      	bx	lr

00008f36 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8f36:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    8f38:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    8f3a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f3c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8f40:	b148      	cbz	r0, 8f56 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    8f42:	7d52      	ldrb	r2, [r2, #21]
    8f44:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f46:	2000      	movs	r0, #0
    8f48:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8f4c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8f50:	2201      	movs	r2, #1
    8f52:	601a      	str	r2, [r3, #0]
	return 0;
    8f54:	4770      	bx	lr
		return -1;
    8f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8f5a:	4770      	bx	lr

00008f5c <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8f5c:	2a00      	cmp	r2, #0
{
    8f5e:	b510      	push	{r4, lr}
    8f60:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8f62:	dd0f      	ble.n	8f84 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    8f64:	6843      	ldr	r3, [r0, #4]
    8f66:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8f68:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8f6c:	b148      	cbz	r0, 8f82 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
    8f6e:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f70:	2000      	movs	r0, #0
    8f72:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8f76:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    8f7a:	7d52      	ldrb	r2, [r2, #21]
    8f7c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8f7e:	2001      	movs	r0, #1
    8f80:	6018      	str	r0, [r3, #0]
}
    8f82:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    8f84:	2000      	movs	r0, #0
    8f86:	e7fc      	b.n	8f82 <uarte_nrfx_fifo_read+0x26>

00008f88 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    8f88:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    8f8a:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    8f8c:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    8f8e:	f04f 0020 	mov.w	r0, #32
    8f92:	f3ef 8311 	mrs	r3, BASEPRI
    8f96:	f380 8812 	msr	BASEPRI_MAX, r0
    8f9a:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    8f9e:	68c9      	ldr	r1, [r1, #12]
    8fa0:	2000      	movs	r0, #0
    8fa2:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    8fa4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8fa8:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    8fac:	f383 8811 	msr	BASEPRI, r3
    8fb0:	f3bf 8f6f 	isb	sy
}
    8fb4:	4770      	bx	lr

00008fb6 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    8fb6:	6903      	ldr	r3, [r0, #16]
    8fb8:	68db      	ldr	r3, [r3, #12]
    8fba:	2201      	movs	r2, #1
    8fbc:	739a      	strb	r2, [r3, #14]
}
    8fbe:	4770      	bx	lr

00008fc0 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    8fc0:	6903      	ldr	r3, [r0, #16]
    8fc2:	68db      	ldr	r3, [r3, #12]
    8fc4:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8fc6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    8fca:	b962      	cbnz	r2, 8fe6 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    8fcc:	6842      	ldr	r2, [r0, #4]
    8fce:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8fd0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    8fd4:	b140      	cbz	r0, 8fe8 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    8fd6:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    8fda:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    8fde:	d003      	beq.n	8fe8 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    8fe0:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8fe2:	2001      	movs	r0, #1
    8fe4:	4770      	bx	lr
    8fe6:	2000      	movs	r0, #0
}
    8fe8:	4770      	bx	lr

00008fea <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    8fea:	6843      	ldr	r3, [r0, #4]
    8fec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8fee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    8ff2:	3800      	subs	r0, #0
    8ff4:	bf18      	it	ne
    8ff6:	2001      	movne	r0, #1
    8ff8:	4770      	bx	lr

00008ffa <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    8ffa:	6843      	ldr	r3, [r0, #4]
    8ffc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    8ffe:	2210      	movs	r2, #16
    9000:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9004:	4770      	bx	lr

00009006 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    9006:	6843      	ldr	r3, [r0, #4]
    9008:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    900a:	2210      	movs	r2, #16
    900c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9010:	4770      	bx	lr

00009012 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    9012:	6843      	ldr	r3, [r0, #4]
    9014:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9016:	f44f 7200 	mov.w	r2, #512	; 0x200
    901a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    901e:	4770      	bx	lr

00009020 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    9020:	6843      	ldr	r3, [r0, #4]
    9022:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    9024:	f44f 7200 	mov.w	r2, #512	; 0x200
    9028:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    902c:	4770      	bx	lr

0000902e <uarte_nrfx_irq_update>:
}
    902e:	2001      	movs	r0, #1
    9030:	4770      	bx	lr

00009032 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    9032:	6903      	ldr	r3, [r0, #16]
    9034:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    9036:	e9c3 1200 	strd	r1, r2, [r3]
}
    903a:	4770      	bx	lr

0000903c <uarte_nrfx_irq_is_pending>:
{
    903c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    903e:	6843      	ldr	r3, [r0, #4]
    9040:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    9042:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    9046:	025b      	lsls	r3, r3, #9
{
    9048:	4604      	mov	r4, r0
		||
    904a:	d405      	bmi.n	9058 <uarte_nrfx_irq_is_pending+0x1c>
    904c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    9050:	f010 0010 	ands.w	r0, r0, #16
    9054:	d106      	bne.n	9064 <uarte_nrfx_irq_is_pending+0x28>
}
    9056:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    9058:	f7ff ffb2 	bl	8fc0 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    905c:	2800      	cmp	r0, #0
    905e:	d0f5      	beq.n	904c <uarte_nrfx_irq_is_pending+0x10>
		||
    9060:	2001      	movs	r0, #1
    9062:	e7f8      	b.n	9056 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    9064:	4620      	mov	r0, r4
    9066:	f7ff ffc0 	bl	8fea <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    906a:	3800      	subs	r0, #0
    906c:	bf18      	it	ne
    906e:	2001      	movne	r0, #1
    9070:	e7f1      	b.n	9056 <uarte_nrfx_irq_is_pending+0x1a>

00009072 <nrf_gpio_cfg_input>:
{
    9072:	b507      	push	{r0, r1, r2, lr}
    9074:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9076:	a801      	add	r0, sp, #4
    9078:	f7fa ff00 	bl	3e7c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    907c:	9b01      	ldr	r3, [sp, #4]
    907e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9082:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    9084:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    9088:	b003      	add	sp, #12
    908a:	f85d fb04 	ldr.w	pc, [sp], #4

0000908e <tx_start.isra.0>:
	return config->uarte_regs;
    908e:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9090:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9094:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9098:	2200      	movs	r2, #0
    909a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    909e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    90a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    90a6:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    90aa:	6842      	ldr	r2, [r0, #4]
    90ac:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    90ae:	bf41      	itttt	mi
    90b0:	2208      	movmi	r2, #8
    90b2:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    90b6:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    90ba:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    90be:	2201      	movs	r2, #1
    90c0:	609a      	str	r2, [r3, #8]
}
    90c2:	4770      	bx	lr

000090c4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    90c4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    90c6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    90c8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    90cc:	b940      	cbnz	r0, 90e0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    90ce:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    90d0:	079b      	lsls	r3, r3, #30
    90d2:	d406      	bmi.n	90e2 <is_tx_ready.isra.0+0x1e>
    90d4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    90d8:	3800      	subs	r0, #0
    90da:	bf18      	it	ne
    90dc:	2001      	movne	r0, #1
    90de:	4770      	bx	lr
    90e0:	2001      	movs	r0, #1
}
    90e2:	4770      	bx	lr

000090e4 <uarte_nrfx_fifo_fill>:
{
    90e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    90e6:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    90e8:	68f3      	ldr	r3, [r6, #12]
    90ea:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    90ec:	f3bf 8f5b 	dmb	ish
    90f0:	4294      	cmp	r4, r2
    90f2:	bfa8      	it	ge
    90f4:	4614      	movge	r4, r2
{
    90f6:	4605      	mov	r5, r0
    90f8:	3310      	adds	r3, #16
    90fa:	2201      	movs	r2, #1
    90fc:	e853 0f00 	ldrex	r0, [r3]
    9100:	2800      	cmp	r0, #0
    9102:	d103      	bne.n	910c <uarte_nrfx_fifo_fill+0x28>
    9104:	e843 2700 	strex	r7, r2, [r3]
    9108:	2f00      	cmp	r7, #0
    910a:	d1f7      	bne.n	90fc <uarte_nrfx_fifo_fill+0x18>
    910c:	f3bf 8f5b 	dmb	ish
    9110:	bf0c      	ite	eq
    9112:	4613      	moveq	r3, r2
    9114:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    9116:	d01d      	beq.n	9154 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    9118:	461c      	mov	r4, r3
}
    911a:	4620      	mov	r0, r4
    911c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    911e:	68f2      	ldr	r2, [r6, #12]
    9120:	5cc8      	ldrb	r0, [r1, r3]
    9122:	6892      	ldr	r2, [r2, #8]
    9124:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    9126:	3301      	adds	r3, #1
    9128:	42a3      	cmp	r3, r4
    912a:	dbf8      	blt.n	911e <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    912c:	f04f 0320 	mov.w	r3, #32
    9130:	f3ef 8711 	mrs	r7, BASEPRI
    9134:	f383 8812 	msr	BASEPRI_MAX, r3
    9138:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    913c:	6868      	ldr	r0, [r5, #4]
    913e:	f7ff ffc1 	bl	90c4 <is_tx_ready.isra.0>
    9142:	68f3      	ldr	r3, [r6, #12]
    9144:	b940      	cbnz	r0, 9158 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    9146:	6118      	str	r0, [r3, #16]
		len = 0;
    9148:	4604      	mov	r4, r0
	__asm__ volatile(
    914a:	f387 8811 	msr	BASEPRI, r7
    914e:	f3bf 8f6f 	isb	sy
	return len;
    9152:	e7e2      	b.n	911a <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    9154:	2300      	movs	r3, #0
    9156:	e7e7      	b.n	9128 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    9158:	6899      	ldr	r1, [r3, #8]
    915a:	6868      	ldr	r0, [r5, #4]
    915c:	4622      	mov	r2, r4
    915e:	f7ff ff96 	bl	908e <tx_start.isra.0>
    9162:	e7f2      	b.n	914a <uarte_nrfx_fifo_fill+0x66>

00009164 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    9164:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    9166:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    9168:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    916c:	05c9      	lsls	r1, r1, #23
{
    916e:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9170:	d518      	bpl.n	91a4 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9172:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9176:	b1a9      	cbz	r1, 91a4 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    9178:	f04f 0420 	mov.w	r4, #32
    917c:	f3ef 8111 	mrs	r1, BASEPRI
    9180:	f384 8812 	msr	BASEPRI_MAX, r4
    9184:	f3bf 8f6f 	isb	sy
    9188:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    918c:	b134      	cbz	r4, 919c <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    918e:	2400      	movs	r4, #0
    9190:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    9194:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9198:	2401      	movs	r4, #1
    919a:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    919c:	f381 8811 	msr	BASEPRI, r1
    91a0:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    91a4:	6852      	ldr	r2, [r2, #4]
    91a6:	06d2      	lsls	r2, r2, #27
    91a8:	d51a      	bpl.n	91e0 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    91aa:	f04f 0220 	mov.w	r2, #32
    91ae:	f3ef 8111 	mrs	r1, BASEPRI
    91b2:	f382 8812 	msr	BASEPRI_MAX, r2
    91b6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    91ba:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    91be:	b112      	cbz	r2, 91c6 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    91c0:	2200      	movs	r2, #0
    91c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    91c6:	6902      	ldr	r2, [r0, #16]
    91c8:	68d2      	ldr	r2, [r2, #12]
    91ca:	b10a      	cbz	r2, 91d0 <uarte_nrfx_isr_int+0x6c>
    91cc:	6912      	ldr	r2, [r2, #16]
    91ce:	b91a      	cbnz	r2, 91d8 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    91d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    91d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    91d8:	f381 8811 	msr	BASEPRI, r1
    91dc:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    91e0:	6902      	ldr	r2, [r0, #16]
    91e2:	68d2      	ldr	r2, [r2, #12]
    91e4:	b15a      	cbz	r2, 91fe <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    91e6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    91ea:	b151      	cbz	r1, 9202 <uarte_nrfx_isr_int+0x9e>
		if (data->int_driven->disable_tx_irq) {
    91ec:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    91ee:	2100      	movs	r1, #0
    91f0:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    91f2:	b134      	cbz	r4, 9202 <uarte_nrfx_isr_int+0x9e>
    p_reg->INTENCLR = mask;
    91f4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    91f8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    91fc:	7391      	strb	r1, [r2, #14]
}
    91fe:	bc10      	pop	{r4}
    9200:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9202:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    9206:	b121      	cbz	r1, 9212 <uarte_nrfx_isr_int+0xae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9208:	2100      	movs	r1, #0
    920a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    920e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    9212:	6813      	ldr	r3, [r2, #0]
    9214:	2b00      	cmp	r3, #0
    9216:	d0f2      	beq.n	91fe <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    9218:	6851      	ldr	r1, [r2, #4]
}
    921a:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    921c:	4718      	bx	r3

0000921e <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    921e:	b510      	push	{r4, lr}
    9220:	2200      	movs	r2, #0
    9222:	4604      	mov	r4, r0
    9224:	2101      	movs	r1, #1
    9226:	2028      	movs	r0, #40	; 0x28
    9228:	f7f9 f8be 	bl	23a8 <z_arm_irq_priority_set>
    922c:	2028      	movs	r0, #40	; 0x28
    922e:	f7f9 f889 	bl	2344 <arch_irq_enable>
    9232:	4620      	mov	r0, r4
    9234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9238:	f7fa bf2a 	b.w	4090 <uarte_instance_init.constprop.0>

0000923c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    923c:	b510      	push	{r4, lr}
    923e:	2200      	movs	r2, #0
    9240:	4604      	mov	r4, r0
    9242:	2101      	movs	r1, #1
    9244:	2002      	movs	r0, #2
    9246:	f7f9 f8af 	bl	23a8 <z_arm_irq_priority_set>
    924a:	2002      	movs	r0, #2
    924c:	f7f9 f87a 	bl	2344 <arch_irq_enable>
    9250:	4620      	mov	r0, r4
    9252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9256:	f7fa bf1b 	b.w	4090 <uarte_instance_init.constprop.0>

0000925a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    925a:	4770      	bx	lr

0000925c <sys_clock_cycle_get_32>:
{
    925c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    925e:	f7fb f85f 	bl	4320 <z_nrf_rtc_timer_read>
}
    9262:	bd08      	pop	{r3, pc}

00009264 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9268:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    926c:	f1a0 0308 	sub.w	r3, r0, #8
    9270:	4258      	negs	r0, r3
    9272:	4158      	adcs	r0, r3
    9274:	4770      	bx	lr

00009276 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9276:	4700      	bx	r0

00009278 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9278:	f000 bc9a 	b.w	9bb0 <z_impl_k_busy_wait>

0000927c <nrfx_clock_start>:
    switch (domain)
    927c:	b110      	cbz	r0, 9284 <nrfx_clock_start+0x8>
    927e:	2801      	cmp	r0, #1
    9280:	d01d      	beq.n	92be <nrfx_clock_start+0x42>
    9282:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9288:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    928c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    9290:	03c9      	lsls	r1, r1, #15
    9292:	d512      	bpl.n	92ba <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9294:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    9298:	2a01      	cmp	r2, #1
    929a:	d10e      	bne.n	92ba <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    929c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    92a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    92a4:	2200      	movs	r2, #0
    92a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    92aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    92ae:	2202      	movs	r2, #2
    92b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    92b4:	2201      	movs	r2, #1
    92b6:	609a      	str	r2, [r3, #8]
}
    92b8:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    92ba:	2200      	movs	r2, #0
    92bc:	e7ee      	b.n	929c <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    92be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    92c2:	2200      	movs	r2, #0
    92c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    92c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    92cc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    92d0:	6018      	str	r0, [r3, #0]
}
    92d2:	4770      	bx	lr

000092d4 <nrf_gpio_reconfigure>:
{
    92d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    92d6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    92d8:	a801      	add	r0, sp, #4
{
    92da:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    92de:	4617      	mov	r7, r2
    92e0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    92e2:	f7fb fbaf 	bl	4a44 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    92e6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    92e8:	2f00      	cmp	r7, #0
    92ea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    92ee:	bf14      	ite	ne
    92f0:	2302      	movne	r3, #2
    92f2:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    92f4:	2900      	cmp	r1, #0
    92f6:	bf18      	it	ne
    92f8:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    92fc:	2d00      	cmp	r5, #0
    92fe:	bf14      	ite	ne
    9300:	f04f 0c0c 	movne.w	ip, #12
    9304:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9308:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    930a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    930e:	bf14      	ite	ne
    9310:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    9314:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9318:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    931a:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    931e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9322:	bf14      	ite	ne
    9324:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    9328:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    932c:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    9330:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9334:	b101      	cbz	r1, 9338 <nrf_gpio_reconfigure+0x64>
    9336:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9338:	b10f      	cbz	r7, 933e <nrf_gpio_reconfigure+0x6a>
    933a:	783f      	ldrb	r7, [r7, #0]
    933c:	007f      	lsls	r7, r7, #1
    933e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9340:	b10d      	cbz	r5, 9346 <nrf_gpio_reconfigure+0x72>
    9342:	782d      	ldrb	r5, [r5, #0]
    9344:	00ad      	lsls	r5, r5, #2
    9346:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9348:	b10c      	cbz	r4, 934e <nrf_gpio_reconfigure+0x7a>
    934a:	7822      	ldrb	r2, [r4, #0]
    934c:	0214      	lsls	r4, r2, #8
    934e:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9350:	b10e      	cbz	r6, 9356 <nrf_gpio_reconfigure+0x82>
    9352:	7836      	ldrb	r6, [r6, #0]
    9354:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9356:	432c      	orrs	r4, r5
    9358:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    935a:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    935e:	b003      	add	sp, #12
    9360:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009362 <nrf_gpio_cfg_sense_set>:
{
    9362:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9364:	f10d 030f 	add.w	r3, sp, #15
    9368:	9301      	str	r3, [sp, #4]
    936a:	2300      	movs	r3, #0
{
    936c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9370:	9300      	str	r3, [sp, #0]
    9372:	461a      	mov	r2, r3
    9374:	4619      	mov	r1, r3
    9376:	f7ff ffad 	bl	92d4 <nrf_gpio_reconfigure>
}
    937a:	b005      	add	sp, #20
    937c:	f85d fb04 	ldr.w	pc, [sp], #4

00009380 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9380:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    9384:	681a      	ldr	r2, [r3, #0]
    9386:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9388:	bf1f      	itttt	ne
    938a:	2200      	movne	r2, #0
    938c:	601a      	strne	r2, [r3, #0]
    938e:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9390:	2001      	movne	r0, #1
    9392:	bf08      	it	eq
    9394:	2000      	moveq	r0, #0
}
    9396:	4770      	bx	lr

00009398 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    9398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    939c:	f44f 7260 	mov.w	r2, #896	; 0x380
    93a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    93a4:	4770      	bx	lr

000093a6 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    93a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    93aa:	f44f 7260 	mov.w	r2, #896	; 0x380
    93ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    93b2:	4770      	bx	lr

000093b4 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    93b4:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    93b6:	f7fb fef5 	bl	51a4 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    93ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    93be:	f7fb bb0d 	b.w	49dc <nrfx_clock_irq_handler>

000093c2 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    93c2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
    93c4:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    93c6:	6b48      	ldr	r0, [r1, #52]	; 0x34
    93c8:	4298      	cmp	r0, r3
{
    93ca:	b510      	push	{r4, lr}
    93cc:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
    93d0:	d205      	bcs.n	93de <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    93d2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
    93d4:	5c09      	ldrb	r1, [r1, r0]
    93d6:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
    93da:	4618      	mov	r0, r3
}
    93dc:	e004      	b.n	93e8 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
    93de:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    93e2:	b110      	cbz	r0, 93ea <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    93e4:	61d3      	str	r3, [r2, #28]
            return false;
    93e6:	2000      	movs	r0, #0
}
    93e8:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    93ea:	6a0c      	ldr	r4, [r1, #32]
    93ec:	0664      	lsls	r4, r4, #25
    93ee:	d503      	bpl.n	93f8 <twi_send_byte+0x36>
    93f0:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    93f2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    93f6:	e7f7      	b.n	93e8 <twi_send_byte+0x26>
    93f8:	6153      	str	r3, [r2, #20]
    93fa:	e7ee      	b.n	93da <twi_send_byte+0x18>

000093fc <twi_transfer>:
{
    93fc:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    93fe:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
    9402:	4604      	mov	r4, r0
    9404:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    9406:	b12e      	cbz	r6, 9414 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9408:	2300      	movs	r3, #0
    940a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    940e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    9412:	2601      	movs	r6, #1
    if (p_cb->error)
    9414:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    9418:	b320      	cbz	r0, 9464 <twi_transfer+0x68>
    941a:	2300      	movs	r3, #0
    941c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    9420:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    9424:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    9428:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    942c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    9430:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
    9434:	2e00      	cmp	r6, #0
    9436:	d068      	beq.n	950a <twi_transfer+0x10e>
        if (!p_cb->error)
    9438:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    943c:	2300      	movs	r3, #0
    943e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    9442:	bb88      	cbnz	r0, 94a8 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    9444:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9446:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    9448:	429a      	cmp	r2, r3
        return false;
    944a:	bf1c      	itt	ne
    944c:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    944e:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    9450:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    9454:	bf1c      	itt	ne
    9456:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    945a:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
    945e:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
    9462:	e022      	b.n	94aa <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9464:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    9468:	b142      	cbz	r2, 947c <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    946a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    946e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9472:	2301      	movs	r3, #1
    9474:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    9476:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    947a:	e7db      	b.n	9434 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    947c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    9480:	b1a3      	cbz	r3, 94ac <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9482:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    9486:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    948a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    948c:	3301      	adds	r3, #1
    948e:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9490:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    9494:	b113      	cbz	r3, 949c <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9496:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    949a:	e7e8      	b.n	946e <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
    949c:	4629      	mov	r1, r5
    949e:	4620      	mov	r0, r4
    94a0:	f7ff ff8f 	bl	93c2 <twi_send_byte>
    94a4:	2800      	cmp	r0, #0
    94a6:	d1c5      	bne.n	9434 <twi_transfer+0x38>
                    return false;
    94a8:	2000      	movs	r0, #0
}
    94aa:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    94ac:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    94b0:	2a00      	cmp	r2, #0
    94b2:	d0bf      	beq.n	9434 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    94b4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    94b8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    94bc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    94c0:	b112      	cbz	r2, 94c8 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    94c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    94c6:	e7d2      	b.n	946e <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    94c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    94ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    94cc:	4293      	cmp	r3, r2
    94ce:	d2b1      	bcs.n	9434 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    94d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    94d2:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
    94d6:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
    94d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    94da:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    94dc:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    94de:	1e51      	subs	r1, r2, #1
    94e0:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
    94e2:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    94e4:	d108      	bne.n	94f8 <twi_transfer+0xfc>
    94e6:	6a29      	ldr	r1, [r5, #32]
    94e8:	0649      	lsls	r1, r1, #25
    94ea:	d410      	bmi.n	950e <twi_transfer+0x112>
    p_reg->SHORTS = mask;
    94ec:	2302      	movs	r3, #2
    94ee:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    94f2:	2301      	movs	r3, #1
    94f4:	6223      	str	r3, [r4, #32]
    94f6:	e79d      	b.n	9434 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    94f8:	4293      	cmp	r3, r2
    94fa:	d1fa      	bne.n	94f2 <twi_transfer+0xf6>
    94fc:	6a2b      	ldr	r3, [r5, #32]
    94fe:	065b      	lsls	r3, r3, #25
    9500:	d598      	bpl.n	9434 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    9502:	2302      	movs	r3, #2
    9504:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    9508:	e7cf      	b.n	94aa <twi_transfer+0xae>
    return true;
    950a:	2001      	movs	r0, #1
    950c:	e7cd      	b.n	94aa <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    950e:	4293      	cmp	r3, r2
    9510:	d1ef      	bne.n	94f2 <twi_transfer+0xf6>
    9512:	e7f6      	b.n	9502 <twi_transfer+0x106>

00009514 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    9514:	7b0a      	ldrb	r2, [r1, #12]
{
    9516:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    9518:	2a03      	cmp	r2, #3
    951a:	d829      	bhi.n	9570 <xfer_completeness_check+0x5c>
    951c:	e8df f002 	tbb	[pc, r2]
    9520:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    9524:	688a      	ldr	r2, [r1, #8]
    9526:	0350      	lsls	r0, r2, #13
    9528:	d504      	bpl.n	9534 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    952a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    952e:	6908      	ldr	r0, [r1, #16]
    9530:	4290      	cmp	r0, r2
    9532:	d107      	bne.n	9544 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    9534:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    9536:	0352      	lsls	r2, r2, #13
    9538:	d41a      	bmi.n	9570 <xfer_completeness_check+0x5c>
    953a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    953e:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    9540:	4291      	cmp	r1, r2
    9542:	d015      	beq.n	9570 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    9544:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    9546:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    9548:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    954c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    9550:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    9552:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    9556:	6908      	ldr	r0, [r1, #16]
    9558:	4290      	cmp	r0, r2
    955a:	d1f3      	bne.n	9544 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    955c:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    9560:	e7ed      	b.n	953e <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    9562:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    9566:	6909      	ldr	r1, [r1, #16]
    9568:	e7ea      	b.n	9540 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    956a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    956e:	e7fa      	b.n	9566 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    9570:	2001      	movs	r0, #1
}
    9572:	4770      	bx	lr

00009574 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9574:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9578:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    957c:	f1a0 0308 	sub.w	r3, r0, #8
    9580:	4258      	negs	r0, r3
    9582:	4158      	adcs	r0, r3
    9584:	4770      	bx	lr

00009586 <nrfx_usbd_consumer>:
{
    9586:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    9588:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    958a:	680d      	ldr	r5, [r1, #0]
    958c:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    958e:	bf97      	itett	ls
    9590:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    9594:	2100      	movhi	r1, #0
        size -= data_size;
    9596:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    9598:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    959a:	bf8e      	itee	hi
    959c:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    95a0:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    95a2:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    95a4:	429a      	cmp	r2, r3
    95a6:	d103      	bne.n	95b0 <nrfx_usbd_consumer+0x2a>
    95a8:	1e20      	subs	r0, r4, #0
    95aa:	bf18      	it	ne
    95ac:	2001      	movne	r0, #1
}
    95ae:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    95b0:	2000      	movs	r0, #0
    95b2:	e7fc      	b.n	95ae <nrfx_usbd_consumer+0x28>

000095b4 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    95b4:	684b      	ldr	r3, [r1, #4]
{
    95b6:	b510      	push	{r4, lr}
    95b8:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    95ba:	680c      	ldr	r4, [r1, #0]
    95bc:	bf28      	it	cs
    95be:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    95c0:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    95c4:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    95c6:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    95c8:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    95ca:	441a      	add	r2, r3
}
    95cc:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    95ce:	600a      	str	r2, [r1, #0]
}
    95d0:	bf18      	it	ne
    95d2:	2001      	movne	r0, #1
    95d4:	bd10      	pop	{r4, pc}

000095d6 <nrfx_usbd_feeder_ram_zlp>:
{
    95d6:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    95d8:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    95da:	680b      	ldr	r3, [r1, #0]
    95dc:	42a2      	cmp	r2, r4
    95de:	bf28      	it	cs
    95e0:	4622      	movcs	r2, r4
    95e2:	2a00      	cmp	r2, #0
    95e4:	bf14      	ite	ne
    95e6:	461d      	movne	r5, r3
    95e8:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    95ea:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    95ee:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    95f2:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    95f4:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    95f6:	600a      	str	r2, [r1, #0]
}
    95f8:	bf14      	ite	ne
    95fa:	2001      	movne	r0, #1
    95fc:	2000      	moveq	r0, #0
    95fe:	bd30      	pop	{r4, r5, pc}

00009600 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    9600:	f010 0f80 	tst.w	r0, #128	; 0x80
    9604:	bf14      	ite	ne
    9606:	2300      	movne	r3, #0
    9608:	2310      	moveq	r3, #16
    960a:	f000 000f 	and.w	r0, r0, #15
}
    960e:	4418      	add	r0, r3
    9610:	4770      	bx	lr

00009612 <ev_started_handler>:
}
    9612:	4770      	bx	lr

00009614 <nrf_usbd_epin_dma_handler>:
{
    9614:	b508      	push	{r3, lr}
    9616:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
    9618:	f7fc fb8a 	bl	5d30 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
    961c:	4608      	mov	r0, r1
    961e:	f7fc fb79 	bl	5d14 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9622:	7b83      	ldrb	r3, [r0, #14]
    9624:	2b03      	cmp	r3, #3
    9626:	d10a      	bne.n	963e <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9628:	4608      	mov	r0, r1
    962a:	f7ff ffe9 	bl	9600 <ep2bit>
    962e:	2301      	movs	r3, #1
    9630:	fa03 f000 	lsl.w	r0, r3, r0
    9634:	43c0      	mvns	r0, r0
}
    9636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    963a:	f7fc bc89 	b.w	5f50 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    963e:	6803      	ldr	r3, [r0, #0]
    9640:	2b00      	cmp	r3, #0
    9642:	d0f1      	beq.n	9628 <nrf_usbd_epin_dma_handler+0x14>
}
    9644:	bd08      	pop	{r3, pc}

00009646 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    9646:	2087      	movs	r0, #135	; 0x87
    9648:	f7ff bfe4 	b.w	9614 <nrf_usbd_epin_dma_handler>

0000964c <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    964c:	2086      	movs	r0, #134	; 0x86
    964e:	f7ff bfe1 	b.w	9614 <nrf_usbd_epin_dma_handler>

00009652 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    9652:	2085      	movs	r0, #133	; 0x85
    9654:	f7ff bfde 	b.w	9614 <nrf_usbd_epin_dma_handler>

00009658 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    9658:	2084      	movs	r0, #132	; 0x84
    965a:	f7ff bfdb 	b.w	9614 <nrf_usbd_epin_dma_handler>

0000965e <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    965e:	2083      	movs	r0, #131	; 0x83
    9660:	f7ff bfd8 	b.w	9614 <nrf_usbd_epin_dma_handler>

00009664 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    9664:	2082      	movs	r0, #130	; 0x82
    9666:	f7ff bfd5 	b.w	9614 <nrf_usbd_epin_dma_handler>

0000966a <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    966a:	2081      	movs	r0, #129	; 0x81
    966c:	f7ff bfd2 	b.w	9614 <nrf_usbd_epin_dma_handler>

00009670 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    9670:	f7fc bc7e 	b.w	5f70 <nrf_usbd_ep0in_dma_handler>

00009674 <nrfx_usbd_ep_max_packet_size_set>:
{
    9674:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9676:	f7fc fb4d 	bl	5d14 <ep_state_access>
    p_state->max_packet_size = size;
    967a:	8181      	strh	r1, [r0, #12]
}
    967c:	bd08      	pop	{r3, pc}

0000967e <nrfx_usbd_ep_status_get>:
{
    967e:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    9680:	f7fc fb48 	bl	5d14 <ep_state_access>
	__asm__ volatile(
    9684:	f04f 0220 	mov.w	r2, #32
    9688:	f3ef 8311 	mrs	r3, BASEPRI
    968c:	f382 8812 	msr	BASEPRI_MAX, r2
    9690:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    9694:	6882      	ldr	r2, [r0, #8]
    9696:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    9698:	6802      	ldr	r2, [r0, #0]
    969a:	b92a      	cbnz	r2, 96a8 <nrfx_usbd_ep_status_get+0x2a>
    969c:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    969e:	f383 8811 	msr	BASEPRI, r3
    96a2:	f3bf 8f6f 	isb	sy
}
    96a6:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    96a8:	2004      	movs	r0, #4
    96aa:	e7f8      	b.n	969e <nrfx_usbd_ep_status_get+0x20>

000096ac <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    96ac:	2007      	movs	r0, #7
    96ae:	f7fc bf97 	b.w	65e0 <nrf_usbd_epout_dma_handler>

000096b2 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    96b2:	2006      	movs	r0, #6
    96b4:	f7fc bf94 	b.w	65e0 <nrf_usbd_epout_dma_handler>

000096b8 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    96b8:	2005      	movs	r0, #5
    96ba:	f7fc bf91 	b.w	65e0 <nrf_usbd_epout_dma_handler>

000096be <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    96be:	2004      	movs	r0, #4
    96c0:	f7fc bf8e 	b.w	65e0 <nrf_usbd_epout_dma_handler>

000096c4 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    96c4:	2003      	movs	r0, #3
    96c6:	f7fc bf8b 	b.w	65e0 <nrf_usbd_epout_dma_handler>

000096ca <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    96ca:	2002      	movs	r0, #2
    96cc:	f7fc bf88 	b.w	65e0 <nrf_usbd_epout_dma_handler>

000096d0 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    96d0:	2001      	movs	r0, #1
    96d2:	f7fc bf85 	b.w	65e0 <nrf_usbd_epout_dma_handler>

000096d6 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    96d6:	f7fd b879 	b.w	67cc <usbd_ep_abort>

000096da <nrf_gpio_pin_set>:
{
    96da:	b507      	push	{r0, r1, r2, lr}
    96dc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    96de:	a801      	add	r0, sp, #4
    96e0:	f7fd fa82 	bl	6be8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    96e4:	9a01      	ldr	r2, [sp, #4]
    96e6:	2301      	movs	r3, #1
    96e8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    96ea:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    96ee:	b003      	add	sp, #12
    96f0:	f85d fb04 	ldr.w	pc, [sp], #4

000096f4 <z_device_state_init>:
}
    96f4:	4770      	bx	lr

000096f6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    96f6:	b138      	cbz	r0, 9708 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    96f8:	68c3      	ldr	r3, [r0, #12]
    96fa:	8818      	ldrh	r0, [r3, #0]
    96fc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9700:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    9704:	4258      	negs	r0, r3
    9706:	4158      	adcs	r0, r3
}
    9708:	4770      	bx	lr

0000970a <arch_system_halt>:
	__asm__ volatile(
    970a:	f04f 0220 	mov.w	r2, #32
    970e:	f3ef 8311 	mrs	r3, BASEPRI
    9712:	f382 8812 	msr	BASEPRI_MAX, r2
    9716:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    971a:	e7fe      	b.n	971a <arch_system_halt+0x10>

0000971c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    971c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    971e:	f7ff fff4 	bl	970a <arch_system_halt>

00009722 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9724:	4605      	mov	r5, r0
    9726:	460e      	mov	r6, r1
    9728:	f04f 0320 	mov.w	r3, #32
    972c:	f3ef 8711 	mrs	r7, BASEPRI
    9730:	f383 8812 	msr	BASEPRI_MAX, r3
    9734:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    9738:	f7fe fa3c 	bl	7bb4 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    973c:	4631      	mov	r1, r6
    973e:	4604      	mov	r4, r0
    9740:	4628      	mov	r0, r5
    9742:	f7ff ffeb 	bl	971c <k_sys_fatal_error_handler>
	__asm__ volatile(
    9746:	f387 8811 	msr	BASEPRI, r7
    974a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    974e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    9750:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9754:	f7f9 b81a 	b.w	278c <z_impl_k_thread_abort>

00009758 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    9758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    975a:	4604      	mov	r4, r0
    975c:	460d      	mov	r5, r1
	__asm__ volatile(
    975e:	f04f 0320 	mov.w	r3, #32
    9762:	f3ef 8611 	mrs	r6, BASEPRI
    9766:	f383 8812 	msr	BASEPRI_MAX, r3
    976a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    976e:	6947      	ldr	r7, [r0, #20]
    9770:	b977      	cbnz	r7, 9790 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    9772:	f000 f994 	bl	9a9e <z_unpend_first_thread>

		if (pending_thread != NULL) {
    9776:	b158      	cbz	r0, 9790 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    9778:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    977a:	6142      	str	r2, [r0, #20]
    977c:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    977e:	f000 f932 	bl	99e6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    9782:	4631      	mov	r1, r6
    9784:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    9788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    978c:	f7fd bf68 	b.w	7660 <z_reschedule>
	**(char ***) mem = slab->free_list;
    9790:	682b      	ldr	r3, [r5, #0]
    9792:	6962      	ldr	r2, [r4, #20]
    9794:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    9796:	682b      	ldr	r3, [r5, #0]
    9798:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    979a:	69a3      	ldr	r3, [r4, #24]
    979c:	3b01      	subs	r3, #1
    979e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    97a0:	f386 8811 	msr	BASEPRI, r6
    97a4:	f3bf 8f6f 	isb	sy
}
    97a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000097aa <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    97aa:	f3ef 8005 	mrs	r0, IPSR
}
    97ae:	3800      	subs	r0, #0
    97b0:	bf18      	it	ne
    97b2:	2001      	movne	r0, #1
    97b4:	4770      	bx	lr

000097b6 <z_impl_k_thread_name_set>:
}
    97b6:	f06f 0057 	mvn.w	r0, #87	; 0x57
    97ba:	4770      	bx	lr

000097bc <z_impl_k_thread_start>:
	z_sched_start(thread);
    97bc:	f7fe b846 	b.w	784c <z_sched_start>

000097c0 <z_pm_save_idle_exit>:
{
    97c0:	b508      	push	{r3, lr}
	pm_system_resume();
    97c2:	f7f8 fc85 	bl	20d0 <pm_system_resume>
}
    97c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    97ca:	f7ff bd46 	b.w	925a <sys_clock_idle_exit>

000097ce <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    97ce:	f990 300e 	ldrsb.w	r3, [r0, #14]
    97d2:	428b      	cmp	r3, r1
    97d4:	d001      	beq.n	97da <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    97d6:	f7fe b8a9 	b.w	792c <z_set_prio>
}
    97da:	2000      	movs	r0, #0
    97dc:	4770      	bx	lr

000097de <z_impl_k_mutex_init>:
{
    97de:	4603      	mov	r3, r0
	mutex->owner = NULL;
    97e0:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    97e2:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    97e6:	e9c3 3300 	strd	r3, r3, [r3]
}
    97ea:	4770      	bx	lr

000097ec <queue_insert>:
{
    97ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97f0:	4699      	mov	r9, r3
    97f2:	4604      	mov	r4, r0
    97f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    97f8:	460d      	mov	r5, r1
    97fa:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    97fc:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
    9800:	f04f 0220 	mov.w	r2, #32
    9804:	f3ef 8611 	mrs	r6, BASEPRI
    9808:	f382 8812 	msr	BASEPRI_MAX, r2
    980c:	f3bf 8f6f 	isb	sy
	if (is_append) {
    9810:	b103      	cbz	r3, 9814 <queue_insert+0x28>
	return list->tail;
    9812:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    9814:	4638      	mov	r0, r7
    9816:	f000 f942 	bl	9a9e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    981a:	b158      	cbz	r0, 9834 <queue_insert+0x48>
    981c:	2400      	movs	r4, #0
    981e:	6784      	str	r4, [r0, #120]	; 0x78
    9820:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    9824:	f000 f8df 	bl	99e6 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    9828:	4638      	mov	r0, r7
    982a:	4631      	mov	r1, r6
    982c:	f7fd ff18 	bl	7660 <z_reschedule>
	return 0;
    9830:	2000      	movs	r0, #0
    9832:	e00c      	b.n	984e <queue_insert+0x62>
	if (alloc) {
    9834:	f1b9 0f00 	cmp.w	r9, #0
    9838:	d01c      	beq.n	9874 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    983a:	2108      	movs	r1, #8
    983c:	f7fe fb86 	bl	7f4c <z_thread_aligned_alloc>
		if (anode == NULL) {
    9840:	b938      	cbnz	r0, 9852 <queue_insert+0x66>
	__asm__ volatile(
    9842:	f386 8811 	msr	BASEPRI, r6
    9846:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    984a:	f06f 000b 	mvn.w	r0, #11
}
    984e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    9852:	2301      	movs	r3, #1
		anode->data = data;
    9854:	f8c0 8004 	str.w	r8, [r0, #4]
    9858:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    985a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    985c:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    9860:	b965      	cbnz	r5, 987c <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    9862:	6823      	ldr	r3, [r4, #0]
    9864:	4313      	orrs	r3, r2
    9866:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    9868:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    986a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    986c:	2b00      	cmp	r3, #0
    986e:	d1db      	bne.n	9828 <queue_insert+0x3c>
	list->tail = node;
    9870:	6060      	str	r0, [r4, #4]
}
    9872:	e7d9      	b.n	9828 <queue_insert+0x3c>
	node->next_and_flags = flags;
    9874:	f8c8 9000 	str.w	r9, [r8]
}
    9878:	4640      	mov	r0, r8
    987a:	e7ee      	b.n	985a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    987c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    987e:	f033 0303 	bics.w	r3, r3, #3
    9882:	d10b      	bne.n	989c <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
    9884:	6002      	str	r2, [r0, #0]
	return list->tail;
    9886:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    9888:	b912      	cbnz	r2, 9890 <queue_insert+0xa4>
	list->head = node;
    988a:	e9c4 0000 	strd	r0, r0, [r4]
}
    988e:	e7cb      	b.n	9828 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9890:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    9892:	f003 0303 	and.w	r3, r3, #3
    9896:	4303      	orrs	r3, r0
    9898:	6013      	str	r3, [r2, #0]
    989a:	e7e9      	b.n	9870 <queue_insert+0x84>
    989c:	4313      	orrs	r3, r2
    989e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    98a0:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    98a2:	f003 0303 	and.w	r3, r3, #3
    98a6:	4318      	orrs	r0, r3
    98a8:	6028      	str	r0, [r5, #0]
}
    98aa:	e7bd      	b.n	9828 <queue_insert+0x3c>

000098ac <z_queue_node_peek>:
{
    98ac:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    98ae:	4604      	mov	r4, r0
    98b0:	b130      	cbz	r0, 98c0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    98b2:	6802      	ldr	r2, [r0, #0]
    98b4:	0793      	lsls	r3, r2, #30
    98b6:	d003      	beq.n	98c0 <z_queue_node_peek+0x14>
		ret = anode->data;
    98b8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    98ba:	b109      	cbz	r1, 98c0 <z_queue_node_peek+0x14>
			k_free(anode);
    98bc:	f000 f9a7 	bl	9c0e <k_free>
}
    98c0:	4620      	mov	r0, r4
    98c2:	bd10      	pop	{r4, pc}

000098c4 <k_queue_append>:
{
    98c4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    98c6:	2301      	movs	r3, #1
    98c8:	9300      	str	r3, [sp, #0]
    98ca:	2300      	movs	r3, #0
{
    98cc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    98ce:	4619      	mov	r1, r3
    98d0:	f7ff ff8c 	bl	97ec <queue_insert>
}
    98d4:	b003      	add	sp, #12
    98d6:	f85d fb04 	ldr.w	pc, [sp], #4

000098da <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    98da:	b13a      	cbz	r2, 98ec <z_impl_k_sem_init+0x12>
    98dc:	428a      	cmp	r2, r1
    98de:	d305      	bcc.n	98ec <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    98e0:	e9c0 1202 	strd	r1, r2, [r0, #8]
    98e4:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    98e8:	2000      	movs	r0, #0
    98ea:	4770      	bx	lr
		return -EINVAL;
    98ec:	f06f 0015 	mvn.w	r0, #21
}
    98f0:	4770      	bx	lr

000098f2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    98f2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    98f4:	2301      	movs	r3, #1
    98f6:	408b      	lsls	r3, r1
    98f8:	ea22 0303 	bic.w	r3, r2, r3
    98fc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    98fe:	fa22 f001 	lsr.w	r0, r2, r1
}
    9902:	f000 0001 	and.w	r0, r0, #1
    9906:	4770      	bx	lr

00009908 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    9908:	b120      	cbz	r0, 9914 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    990a:	2200      	movs	r2, #0
    990c:	4611      	mov	r1, r2
    990e:	3088      	adds	r0, #136	; 0x88
    9910:	f000 b8ed 	b.w	9aee <z_sched_wake>
}
    9914:	4770      	bx	lr

00009916 <k_work_init>:
{
    9916:	b538      	push	{r3, r4, r5, lr}
    9918:	4604      	mov	r4, r0
    991a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    991c:	2210      	movs	r2, #16
    991e:	2100      	movs	r1, #0
    9920:	f7ff f917 	bl	8b52 <memset>
    9924:	6065      	str	r5, [r4, #4]
}
    9926:	bd38      	pop	{r3, r4, r5, pc}

00009928 <k_work_submit_to_queue>:
{
    9928:	b537      	push	{r0, r1, r2, r4, r5, lr}
    992a:	9001      	str	r0, [sp, #4]
    992c:	4608      	mov	r0, r1
	__asm__ volatile(
    992e:	f04f 0320 	mov.w	r3, #32
    9932:	f3ef 8511 	mrs	r5, BASEPRI
    9936:	f383 8812 	msr	BASEPRI_MAX, r3
    993a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    993e:	a901      	add	r1, sp, #4
    9940:	f7fd fdc0 	bl	74c4 <submit_to_queue_locked>
    9944:	4604      	mov	r4, r0
	__asm__ volatile(
    9946:	f385 8811 	msr	BASEPRI, r5
    994a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    994e:	2800      	cmp	r0, #0
    9950:	dd04      	ble.n	995c <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
    9952:	f7fe f935 	bl	7bc0 <z_impl_k_is_preempt_thread>
    9956:	b108      	cbz	r0, 995c <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
    9958:	f7fe f88a 	bl	7a70 <z_impl_k_yield>
}
    995c:	4620      	mov	r0, r4
    995e:	b003      	add	sp, #12
    9960:	bd30      	pop	{r4, r5, pc}

00009962 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    9962:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    9966:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9968:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    996a:	2300      	movs	r3, #0
	node->prev = NULL;
    996c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    9970:	4770      	bx	lr

00009972 <unpend_thread_no_timeout>:
{
    9972:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    9974:	f7ff fff5 	bl	9962 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9978:	7b43      	ldrb	r3, [r0, #13]
    997a:	f023 0302 	bic.w	r3, r3, #2
    997e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    9980:	2300      	movs	r3, #0
    9982:	6083      	str	r3, [r0, #8]
}
    9984:	bd08      	pop	{r3, pc}

00009986 <z_unpend_thread>:
{
    9986:	b510      	push	{r4, lr}
	__asm__ volatile(
    9988:	f04f 0320 	mov.w	r3, #32
    998c:	f3ef 8411 	mrs	r4, BASEPRI
    9990:	f383 8812 	msr	BASEPRI_MAX, r3
    9994:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    9998:	f7ff ffeb 	bl	9972 <unpend_thread_no_timeout>
	__asm__ volatile(
    999c:	f384 8811 	msr	BASEPRI, r4
    99a0:	f3bf 8f6f 	isb	sy
}
    99a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    99a8:	3018      	adds	r0, #24
    99aa:	f000 b8bd 	b.w	9b28 <z_abort_timeout>

000099ae <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    99ae:	4603      	mov	r3, r0
    99b0:	b920      	cbnz	r0, 99bc <z_reschedule_irqlock+0xe>
    99b2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    99b6:	b90a      	cbnz	r2, 99bc <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    99b8:	f7f8 bd36 	b.w	2428 <arch_swap>
    99bc:	f383 8811 	msr	BASEPRI, r3
    99c0:	f3bf 8f6f 	isb	sy
}
    99c4:	4770      	bx	lr

000099c6 <z_reschedule_unlocked>:
	__asm__ volatile(
    99c6:	f04f 0320 	mov.w	r3, #32
    99ca:	f3ef 8011 	mrs	r0, BASEPRI
    99ce:	f383 8812 	msr	BASEPRI_MAX, r3
    99d2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    99d6:	f7ff bfea 	b.w	99ae <z_reschedule_irqlock>

000099da <z_priq_dumb_best>:
{
    99da:	4603      	mov	r3, r0
	return list->head == list;
    99dc:	6800      	ldr	r0, [r0, #0]
}
    99de:	4283      	cmp	r3, r0
    99e0:	bf08      	it	eq
    99e2:	2000      	moveq	r0, #0
    99e4:	4770      	bx	lr

000099e6 <z_ready_thread>:
{
    99e6:	b510      	push	{r4, lr}
    99e8:	f04f 0320 	mov.w	r3, #32
    99ec:	f3ef 8411 	mrs	r4, BASEPRI
    99f0:	f383 8812 	msr	BASEPRI_MAX, r3
    99f4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    99f8:	f7fd fef2 	bl	77e0 <ready_thread>
	__asm__ volatile(
    99fc:	f384 8811 	msr	BASEPRI, r4
    9a00:	f3bf 8f6f 	isb	sy
}
    9a04:	bd10      	pop	{r4, pc}

00009a06 <z_thread_timeout>:
{
    9a06:	b510      	push	{r4, lr}
    9a08:	4601      	mov	r1, r0
	__asm__ volatile(
    9a0a:	f04f 0320 	mov.w	r3, #32
    9a0e:	f3ef 8411 	mrs	r4, BASEPRI
    9a12:	f383 8812 	msr	BASEPRI_MAX, r3
    9a16:	f3bf 8f6f 	isb	sy
		if (!killed) {
    9a1a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    9a1e:	f013 0f28 	tst.w	r3, #40	; 0x28
    9a22:	d10d      	bne.n	9a40 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    9a24:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    9a28:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    9a2a:	b10b      	cbz	r3, 9a30 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    9a2c:	f7ff ffa1 	bl	9972 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    9a30:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    9a34:	f023 0314 	bic.w	r3, r3, #20
    9a38:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    9a3c:	f7fd fed0 	bl	77e0 <ready_thread>
	__asm__ volatile(
    9a40:	f384 8811 	msr	BASEPRI, r4
    9a44:	f3bf 8f6f 	isb	sy
}
    9a48:	bd10      	pop	{r4, pc}

00009a4a <add_to_waitq_locked>:
{
    9a4a:	b538      	push	{r3, r4, r5, lr}
    9a4c:	4604      	mov	r4, r0
    9a4e:	460d      	mov	r5, r1
	unready_thread(thread);
    9a50:	f7fd ff1a 	bl	7888 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    9a54:	7b63      	ldrb	r3, [r4, #13]
    9a56:	f043 0302 	orr.w	r3, r3, #2
    9a5a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    9a5c:	b195      	cbz	r5, 9a84 <add_to_waitq_locked+0x3a>
    9a5e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    9a60:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a62:	429d      	cmp	r5, r3
    9a64:	d015      	beq.n	9a92 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a66:	b1a3      	cbz	r3, 9a92 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    9a68:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    9a6c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    9a70:	4291      	cmp	r1, r2
    9a72:	d008      	beq.n	9a86 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    9a74:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    9a76:	2a00      	cmp	r2, #0
    9a78:	dd05      	ble.n	9a86 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    9a7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9a7c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9a80:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9a82:	605c      	str	r4, [r3, #4]
}
    9a84:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    9a86:	686a      	ldr	r2, [r5, #4]
    9a88:	4293      	cmp	r3, r2
    9a8a:	d002      	beq.n	9a92 <add_to_waitq_locked+0x48>
    9a8c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a8e:	2b00      	cmp	r3, #0
    9a90:	d1ec      	bne.n	9a6c <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    9a92:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    9a94:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    9a98:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9a9a:	606c      	str	r4, [r5, #4]
}
    9a9c:	e7f2      	b.n	9a84 <add_to_waitq_locked+0x3a>

00009a9e <z_unpend_first_thread>:
{
    9a9e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9aa0:	f04f 0320 	mov.w	r3, #32
    9aa4:	f3ef 8511 	mrs	r5, BASEPRI
    9aa8:	f383 8812 	msr	BASEPRI_MAX, r3
    9aac:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    9ab0:	f7ff ff93 	bl	99da <z_priq_dumb_best>
		if (thread != NULL) {
    9ab4:	4604      	mov	r4, r0
    9ab6:	b120      	cbz	r0, 9ac2 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    9ab8:	f7ff ff5b 	bl	9972 <unpend_thread_no_timeout>
    9abc:	3018      	adds	r0, #24
    9abe:	f000 f833 	bl	9b28 <z_abort_timeout>
	__asm__ volatile(
    9ac2:	f385 8811 	msr	BASEPRI, r5
    9ac6:	f3bf 8f6f 	isb	sy
}
    9aca:	4620      	mov	r0, r4
    9acc:	bd38      	pop	{r3, r4, r5, pc}

00009ace <z_unpend_all>:
{
    9ace:	b538      	push	{r3, r4, r5, lr}
    9ad0:	4605      	mov	r5, r0
	int need_sched = 0;
    9ad2:	2000      	movs	r0, #0
	return list->head == list;
    9ad4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9ad6:	42a5      	cmp	r5, r4
    9ad8:	d000      	beq.n	9adc <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9ada:	b904      	cbnz	r4, 9ade <z_unpend_all+0x10>
}
    9adc:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    9ade:	4620      	mov	r0, r4
    9ae0:	f7ff ff51 	bl	9986 <z_unpend_thread>
		z_ready_thread(thread);
    9ae4:	4620      	mov	r0, r4
    9ae6:	f7ff ff7e 	bl	99e6 <z_ready_thread>
		need_sched = 1;
    9aea:	2001      	movs	r0, #1
    9aec:	e7f2      	b.n	9ad4 <z_unpend_all+0x6>

00009aee <z_sched_wake>:
{
    9aee:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9af0:	f04f 0320 	mov.w	r3, #32
    9af4:	f3ef 8511 	mrs	r5, BASEPRI
    9af8:	f383 8812 	msr	BASEPRI_MAX, r3
    9afc:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    9b00:	f7ff ff6b 	bl	99da <z_priq_dumb_best>
		if (thread != NULL) {
    9b04:	4604      	mov	r4, r0
    9b06:	b150      	cbz	r0, 9b1e <z_sched_wake+0x30>
    9b08:	6781      	str	r1, [r0, #120]	; 0x78
	thread->base.swap_data = data;
    9b0a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    9b0c:	f7ff ff31 	bl	9972 <unpend_thread_no_timeout>
    9b10:	3018      	adds	r0, #24
    9b12:	f000 f809 	bl	9b28 <z_abort_timeout>
			ready_thread(thread);
    9b16:	4620      	mov	r0, r4
    9b18:	f7fd fe62 	bl	77e0 <ready_thread>
			ret = true;
    9b1c:	2001      	movs	r0, #1
	__asm__ volatile(
    9b1e:	f385 8811 	msr	BASEPRI, r5
    9b22:	f3bf 8f6f 	isb	sy
}
    9b26:	bd38      	pop	{r3, r4, r5, pc}

00009b28 <z_abort_timeout>:
{
    9b28:	b510      	push	{r4, lr}
	__asm__ volatile(
    9b2a:	f04f 0220 	mov.w	r2, #32
    9b2e:	f3ef 8411 	mrs	r4, BASEPRI
    9b32:	f382 8812 	msr	BASEPRI_MAX, r2
    9b36:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    9b3a:	6803      	ldr	r3, [r0, #0]
    9b3c:	b13b      	cbz	r3, 9b4e <z_abort_timeout+0x26>
			remove_timeout(to);
    9b3e:	f7fe f8fd 	bl	7d3c <remove_timeout>
			ret = 0;
    9b42:	2000      	movs	r0, #0
	__asm__ volatile(
    9b44:	f384 8811 	msr	BASEPRI, r4
    9b48:	f3bf 8f6f 	isb	sy
}
    9b4c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    9b4e:	f06f 0015 	mvn.w	r0, #21
    9b52:	e7f7      	b.n	9b44 <z_abort_timeout+0x1c>

00009b54 <z_get_next_timeout_expiry>:
{
    9b54:	b510      	push	{r4, lr}
	__asm__ volatile(
    9b56:	f04f 0320 	mov.w	r3, #32
    9b5a:	f3ef 8411 	mrs	r4, BASEPRI
    9b5e:	f383 8812 	msr	BASEPRI_MAX, r3
    9b62:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    9b66:	f7fe f8c3 	bl	7cf0 <next_timeout>
	__asm__ volatile(
    9b6a:	f384 8811 	msr	BASEPRI, r4
    9b6e:	f3bf 8f6f 	isb	sy
}
    9b72:	bd10      	pop	{r4, pc}

00009b74 <z_set_timeout_expiry>:
{
    9b74:	b570      	push	{r4, r5, r6, lr}
    9b76:	4604      	mov	r4, r0
    9b78:	460d      	mov	r5, r1
	__asm__ volatile(
    9b7a:	f04f 0320 	mov.w	r3, #32
    9b7e:	f3ef 8611 	mrs	r6, BASEPRI
    9b82:	f383 8812 	msr	BASEPRI_MAX, r3
    9b86:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    9b8a:	f7fe f8b1 	bl	7cf0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    9b8e:	2801      	cmp	r0, #1
    9b90:	dd05      	ble.n	9b9e <z_set_timeout_expiry+0x2a>
    9b92:	42a0      	cmp	r0, r4
    9b94:	db03      	blt.n	9b9e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9b96:	4629      	mov	r1, r5
    9b98:	4620      	mov	r0, r4
    9b9a:	f7fa fd3d 	bl	4618 <sys_clock_set_timeout>
	__asm__ volatile(
    9b9e:	f386 8811 	msr	BASEPRI, r6
    9ba2:	f3bf 8f6f 	isb	sy
}
    9ba6:	bd70      	pop	{r4, r5, r6, pc}

00009ba8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    9ba8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9baa:	f7fe f9b7 	bl	7f1c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9bae:	bd08      	pop	{r3, pc}

00009bb0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9bb0:	b108      	cbz	r0, 9bb6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9bb2:	f7f8 beb9 	b.w	2928 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    9bb6:	4770      	bx	lr

00009bb8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9bb8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    9bbc:	bf08      	it	eq
    9bbe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    9bc2:	b538      	push	{r3, r4, r5, lr}
    9bc4:	4605      	mov	r5, r0
    9bc6:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9bc8:	d01d      	beq.n	9c06 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9bca:	ea51 0300 	orrs.w	r3, r1, r0
    9bce:	d103      	bne.n	9bd8 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    9bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    9bd4:	f7fe b9a2 	b.w	7f1c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    9bd8:	f06f 0301 	mvn.w	r3, #1
    9bdc:	1a18      	subs	r0, r3, r0
    9bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9be2:	eb63 0101 	sbc.w	r1, r3, r1
    9be6:	2900      	cmp	r1, #0
    9be8:	da0c      	bge.n	9c04 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    9bea:	f7fe f997 	bl	7f1c <sys_clock_tick_get>
    9bee:	2d01      	cmp	r5, #1
    9bf0:	4622      	mov	r2, r4
    9bf2:	f174 0400 	sbcs.w	r4, r4, #0
    9bf6:	462b      	mov	r3, r5
    9bf8:	bfbc      	itt	lt
    9bfa:	2301      	movlt	r3, #1
    9bfc:	2200      	movlt	r2, #0
    9bfe:	1818      	adds	r0, r3, r0
    9c00:	eb41 0102 	adc.w	r1, r1, r2
}
    9c04:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    9c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9c0a:	4601      	mov	r1, r0
    9c0c:	e7fa      	b.n	9c04 <sys_clock_timeout_end_calc+0x4c>

00009c0e <k_free>:
	if (ptr != NULL) {
    9c0e:	b120      	cbz	r0, 9c1a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    9c10:	1f01      	subs	r1, r0, #4
    9c12:	f850 0c04 	ldr.w	r0, [r0, #-4]
    9c16:	f000 b84a 	b.w	9cae <k_heap_free>
}
    9c1a:	4770      	bx	lr

00009c1c <k_heap_init>:
{
    9c1c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    9c1e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    9c22:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    9c26:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    9c28:	f7fe bcc3 	b.w	85b2 <sys_heap_init>

00009c2c <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    9c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c30:	b085      	sub	sp, #20
    9c32:	4606      	mov	r6, r0
    9c34:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9c36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    9c3a:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9c3c:	f7ff ffbc 	bl	9bb8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    9c40:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9c44:	4605      	mov	r5, r0
    9c46:	460f      	mov	r7, r1
	__asm__ volatile(
    9c48:	f04f 0320 	mov.w	r3, #32
    9c4c:	f3ef 8411 	mrs	r4, BASEPRI
    9c50:	f383 8812 	msr	BASEPRI_MAX, r3
    9c54:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    9c58:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    9c5c:	464a      	mov	r2, r9
    9c5e:	4641      	mov	r1, r8
    9c60:	4630      	mov	r0, r6
    9c62:	f7fe fc3e 	bl	84e2 <sys_heap_aligned_alloc>
    9c66:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    9c68:	f7fe f958 	bl	7f1c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    9c6c:	9b03      	ldr	r3, [sp, #12]
    9c6e:	b13b      	cbz	r3, 9c80 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    9c70:	f384 8811 	msr	BASEPRI, r4
    9c74:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    9c78:	4618      	mov	r0, r3
    9c7a:	b005      	add	sp, #20
    9c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    9c80:	1a28      	subs	r0, r5, r0
    9c82:	eb67 0101 	sbc.w	r1, r7, r1
    9c86:	2801      	cmp	r0, #1
    9c88:	f171 0200 	sbcs.w	r2, r1, #0
    9c8c:	dbf0      	blt.n	9c70 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    9c8e:	e9cd 0100 	strd	r0, r1, [sp]
    9c92:	465a      	mov	r2, fp
    9c94:	4621      	mov	r1, r4
    9c96:	4650      	mov	r0, sl
    9c98:	f7fd fe34 	bl	7904 <z_pend_curr>
	__asm__ volatile(
    9c9c:	f04f 0320 	mov.w	r3, #32
    9ca0:	f3ef 8411 	mrs	r4, BASEPRI
    9ca4:	f383 8812 	msr	BASEPRI_MAX, r3
    9ca8:	f3bf 8f6f 	isb	sy
    9cac:	e7d6      	b.n	9c5c <k_heap_aligned_alloc+0x30>

00009cae <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    9cae:	b538      	push	{r3, r4, r5, lr}
    9cb0:	4604      	mov	r4, r0
    9cb2:	f04f 0320 	mov.w	r3, #32
    9cb6:	f3ef 8511 	mrs	r5, BASEPRI
    9cba:	f383 8812 	msr	BASEPRI_MAX, r3
    9cbe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    9cc2:	f7fe fbd6 	bl	8472 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    9cc6:	f104 000c 	add.w	r0, r4, #12
    9cca:	f7ff ff00 	bl	9ace <z_unpend_all>
    9cce:	b130      	cbz	r0, 9cde <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    9cd0:	4629      	mov	r1, r5
    9cd2:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    9cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    9cda:	f7fd bcc1 	b.w	7660 <z_reschedule>
	__asm__ volatile(
    9cde:	f385 8811 	msr	BASEPRI, r5
    9ce2:	f3bf 8f6f 	isb	sy
}
    9ce6:	bd38      	pop	{r3, r4, r5, pc}

00009ce8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9ce8:	f7fa bcec 	b.w	46c4 <SystemInit>
