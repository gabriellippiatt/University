
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	c0 0e 00 20 59 16 00 00 b5 51 00 00 2d 16 00 00     ... Y....Q..-...
  10:	2d 16 00 00 2d 16 00 00 2d 16 00 00 00 00 00 00     -...-...-.......
	...
  2c:	41 13 00 00 2d 16 00 00 00 00 00 00 ed 12 00 00     A...-...........
  3c:	2d 16 00 00                                         -...

00000040 <_irq_vector_table>:
  40:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  50:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  60:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  70:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  80:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  90:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  a0:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  b0:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  c0:	f1 13 00 00 f1 13 00 00 f1 13 00 00 f1 13 00 00     ................
  d0:	f1 13 00 00 f1 13 00 00 f1 13 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	4607      	mov	r7, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e09      	ldr	r6, [sp, #36]	; 0x24
     11c:	4615      	mov	r5, r2
     11e:	463c      	mov	r4, r7
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80c6 	bne.w	2b4 <CONFIG_FLASH_SIZE+0xb4>
     128:	4282      	cmp	r2, r0
     12a:	fab2 f782 	clz	r7, r2
     12e:	d946      	bls.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     130:	b14f      	cbz	r7, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c7 0e20 	rsb	lr, r7, #32
     136:	fa24 fe0e 	lsr.w	lr, r4, lr
     13a:	fa00 f307 	lsl.w	r3, r0, r7
     13e:	40bd      	lsls	r5, r7
     140:	ea4e 0c03 	orr.w	ip, lr, r3
     144:	40bc      	lsls	r4, r7
     146:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14a:	fa1f fe85 	uxth.w	lr, r5
     14e:	fbbc f9f8 	udiv	r9, ip, r8
     152:	0c22      	lsrs	r2, r4, #16
     154:	fb08 c319 	mls	r3, r8, r9, ip
     158:	fb09 fa0e 	mul.w	sl, r9, lr
     15c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     160:	459a      	cmp	sl, r3
     162:	d928      	bls.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     164:	18eb      	adds	r3, r5, r3
     166:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     16a:	d204      	bcs.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     16c:	459a      	cmp	sl, r3
     16e:	d902      	bls.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     170:	f1a9 0002 	sub.w	r0, r9, #2
     174:	442b      	add	r3, r5
     176:	eba3 030a 	sub.w	r3, r3, sl
     17a:	b2a4      	uxth	r4, r4
     17c:	fbb3 f2f8 	udiv	r2, r3, r8
     180:	fb08 3312 	mls	r3, r8, r2, r3
     184:	fb02 fe0e 	mul.w	lr, r2, lr
     188:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18c:	45a6      	cmp	lr, r4
     18e:	d914      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     190:	192c      	adds	r4, r5, r4
     192:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     196:	d203      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     198:	45a6      	cmp	lr, r4
     19a:	d901      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19c:	1e93      	subs	r3, r2, #2
     19e:	442c      	add	r4, r5
     1a0:	eba4 040e 	sub.w	r4, r4, lr
     1a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     1aa:	40fc      	lsrs	r4, r7
     1ac:	2300      	movs	r3, #0
     1ae:	6034      	str	r4, [r6, #0]
     1b0:	6073      	str	r3, [r6, #4]
     1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1b6:	4648      	mov	r0, r9
     1b8:	e7dd      	b.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     1ba:	4613      	mov	r3, r2
     1bc:	e7f0      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1be:	b902      	cbnz	r2, 1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     1c0:	deff      	udf	#255	; 0xff
     1c2:	bb87      	cbnz	r7, 226 <CONFIG_FLASH_SIZE+0x26>
     1c4:	1a83      	subs	r3, r0, r2
     1c6:	2101      	movs	r1, #1
     1c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1cc:	b2aa      	uxth	r2, r5
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c20      	lsrs	r0, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	fb0c f802 	mul.w	r8, ip, r2
     1dc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e0:	4598      	cmp	r8, r3
     1e2:	d963      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     1e4:	18eb      	adds	r3, r5, r3
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1ea:	d204      	bcs.n	1f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x89>
     1ec:	4598      	cmp	r8, r3
     1ee:	d902      	bls.n	1f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x89>
     1f0:	f1ac 0002 	sub.w	r0, ip, #2
     1f4:	442b      	add	r3, r5
     1f6:	eba3 0308 	sub.w	r3, r3, r8
     1fa:	b2a4      	uxth	r4, r4
     1fc:	fbb3 fcfe 	udiv	ip, r3, lr
     200:	fb0e 331c 	mls	r3, lr, ip, r3
     204:	fb0c f202 	mul.w	r2, ip, r2
     208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     20c:	42a2      	cmp	r2, r4
     20e:	d94f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     210:	192c      	adds	r4, r5, r4
     212:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     216:	d204      	bcs.n	222 <CONFIG_FLASH_SIZE+0x22>
     218:	42a2      	cmp	r2, r4
     21a:	d902      	bls.n	222 <CONFIG_FLASH_SIZE+0x22>
     21c:	f1ac 0302 	sub.w	r3, ip, #2
     220:	442c      	add	r4, r5
     222:	1aa4      	subs	r4, r4, r2
     224:	e7be      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     226:	f1c7 0c20 	rsb	ip, r7, #32
     22a:	fa20 f80c 	lsr.w	r8, r0, ip
     22e:	fa00 f307 	lsl.w	r3, r0, r7
     232:	fa24 fc0c 	lsr.w	ip, r4, ip
     236:	40bd      	lsls	r5, r7
     238:	ea4c 0203 	orr.w	r2, ip, r3
     23c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     240:	b2ab      	uxth	r3, r5
     242:	fbb8 fcfe 	udiv	ip, r8, lr
     246:	0c11      	lsrs	r1, r2, #16
     248:	fb0e 801c 	mls	r0, lr, ip, r8
     24c:	fb0c f903 	mul.w	r9, ip, r3
     250:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     254:	4581      	cmp	r9, r0
     256:	fa04 f407 	lsl.w	r4, r4, r7
     25a:	d923      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
     25c:	1828      	adds	r0, r5, r0
     25e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     262:	d204      	bcs.n	26e <CONFIG_FLASH_SIZE+0x6e>
     264:	4581      	cmp	r9, r0
     266:	d902      	bls.n	26e <CONFIG_FLASH_SIZE+0x6e>
     268:	f1ac 0102 	sub.w	r1, ip, #2
     26c:	4428      	add	r0, r5
     26e:	eba0 0009 	sub.w	r0, r0, r9
     272:	b292      	uxth	r2, r2
     274:	fbb0 fcfe 	udiv	ip, r0, lr
     278:	fb0e 001c 	mls	r0, lr, ip, r0
     27c:	fb0c f803 	mul.w	r8, ip, r3
     280:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     284:	4598      	cmp	r8, r3
     286:	d90f      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     288:	18eb      	adds	r3, r5, r3
     28a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     28e:	d204      	bcs.n	29a <CONFIG_FLASH_SIZE+0x9a>
     290:	4598      	cmp	r8, r3
     292:	d902      	bls.n	29a <CONFIG_FLASH_SIZE+0x9a>
     294:	f1ac 0202 	sub.w	r2, ip, #2
     298:	442b      	add	r3, r5
     29a:	eba3 0308 	sub.w	r3, r3, r8
     29e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a2:	e791      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     2a4:	4661      	mov	r1, ip
     2a6:	e7e2      	b.n	26e <CONFIG_FLASH_SIZE+0x6e>
     2a8:	4662      	mov	r2, ip
     2aa:	e7f6      	b.n	29a <CONFIG_FLASH_SIZE+0x9a>
     2ac:	4660      	mov	r0, ip
     2ae:	e7a2      	b.n	1f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x89>
     2b0:	4663      	mov	r3, ip
     2b2:	e7b6      	b.n	222 <CONFIG_FLASH_SIZE+0x22>
     2b4:	4283      	cmp	r3, r0
     2b6:	d905      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     2b8:	b10e      	cbz	r6, 2be <CONFIG_FLASH_SIZE+0xbe>
     2ba:	e9c6 7000 	strd	r7, r0, [r6]
     2be:	2100      	movs	r1, #0
     2c0:	4608      	mov	r0, r1
     2c2:	e776      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     2c4:	fab3 f183 	clz	r1, r3
     2c8:	b981      	cbnz	r1, 2ec <CONFIG_FLASH_SIZE+0xec>
     2ca:	4283      	cmp	r3, r0
     2cc:	d301      	bcc.n	2d2 <CONFIG_FLASH_SIZE+0xd2>
     2ce:	42ba      	cmp	r2, r7
     2d0:	d80a      	bhi.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2d2:	1abc      	subs	r4, r7, r2
     2d4:	eb60 0303 	sbc.w	r3, r0, r3
     2d8:	2001      	movs	r0, #1
     2da:	469c      	mov	ip, r3
     2dc:	2e00      	cmp	r6, #0
     2de:	d068      	beq.n	3b2 <CONFIG_FLASH_SIZE+0x1b2>
     2e0:	e9c6 4c00 	strd	r4, ip, [r6]
     2e4:	2100      	movs	r1, #0
     2e6:	e764      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     2e8:	4608      	mov	r0, r1
     2ea:	e7f7      	b.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     2ec:	f1c1 0c20 	rsb	ip, r1, #32
     2f0:	408b      	lsls	r3, r1
     2f2:	fa22 f40c 	lsr.w	r4, r2, ip
     2f6:	431c      	orrs	r4, r3
     2f8:	fa02 f501 	lsl.w	r5, r2, r1
     2fc:	fa00 f301 	lsl.w	r3, r0, r1
     300:	fa27 f20c 	lsr.w	r2, r7, ip
     304:	fa20 fb0c 	lsr.w	fp, r0, ip
     308:	ea4f 4914 	mov.w	r9, r4, lsr #16
     30c:	4313      	orrs	r3, r2
     30e:	fbbb f8f9 	udiv	r8, fp, r9
     312:	fa1f fe84 	uxth.w	lr, r4
     316:	fb09 bb18 	mls	fp, r9, r8, fp
     31a:	0c1a      	lsrs	r2, r3, #16
     31c:	fb08 fa0e 	mul.w	sl, r8, lr
     320:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     324:	4592      	cmp	sl, r2
     326:	fa07 f701 	lsl.w	r7, r7, r1
     32a:	d93e      	bls.n	3aa <CONFIG_FLASH_SIZE+0x1aa>
     32c:	18a2      	adds	r2, r4, r2
     32e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     332:	d204      	bcs.n	33e <CONFIG_FLASH_SIZE+0x13e>
     334:	4592      	cmp	sl, r2
     336:	d902      	bls.n	33e <CONFIG_FLASH_SIZE+0x13e>
     338:	f1a8 0002 	sub.w	r0, r8, #2
     33c:	4422      	add	r2, r4
     33e:	eba2 020a 	sub.w	r2, r2, sl
     342:	b29b      	uxth	r3, r3
     344:	fbb2 f8f9 	udiv	r8, r2, r9
     348:	fb09 2218 	mls	r2, r9, r8, r2
     34c:	fb08 fe0e 	mul.w	lr, r8, lr
     350:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     354:	4596      	cmp	lr, r2
     356:	d92a      	bls.n	3ae <CONFIG_FLASH_SIZE+0x1ae>
     358:	18a2      	adds	r2, r4, r2
     35a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     35e:	d204      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     360:	4596      	cmp	lr, r2
     362:	d902      	bls.n	36a <CONFIG_FLASH_SIZE+0x16a>
     364:	f1a8 0302 	sub.w	r3, r8, #2
     368:	4422      	add	r2, r4
     36a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     36e:	fba0 9305 	umull	r9, r3, r0, r5
     372:	eba2 020e 	sub.w	r2, r2, lr
     376:	429a      	cmp	r2, r3
     378:	46ce      	mov	lr, r9
     37a:	4698      	mov	r8, r3
     37c:	d302      	bcc.n	384 <CONFIG_FLASH_SIZE+0x184>
     37e:	d106      	bne.n	38e <CONFIG_FLASH_SIZE+0x18e>
     380:	454f      	cmp	r7, r9
     382:	d204      	bcs.n	38e <CONFIG_FLASH_SIZE+0x18e>
     384:	ebb9 0e05 	subs.w	lr, r9, r5
     388:	eb63 0804 	sbc.w	r8, r3, r4
     38c:	3801      	subs	r0, #1
     38e:	b186      	cbz	r6, 3b2 <CONFIG_FLASH_SIZE+0x1b2>
     390:	ebb7 030e 	subs.w	r3, r7, lr
     394:	eb62 0708 	sbc.w	r7, r2, r8
     398:	fa07 fc0c 	lsl.w	ip, r7, ip
     39c:	40cb      	lsrs	r3, r1
     39e:	ea4c 0303 	orr.w	r3, ip, r3
     3a2:	40cf      	lsrs	r7, r1
     3a4:	e9c6 3700 	strd	r3, r7, [r6]
     3a8:	e79c      	b.n	2e4 <CONFIG_FLASH_SIZE+0xe4>
     3aa:	4640      	mov	r0, r8
     3ac:	e7c7      	b.n	33e <CONFIG_FLASH_SIZE+0x13e>
     3ae:	4643      	mov	r3, r8
     3b0:	e7db      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3b2:	4631      	mov	r1, r6
     3b4:	e6fd      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
	...

000003b8 <main>:
		k_msleep(1000);
	}
}

void main(void)
{
     3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     3bc:	b08e      	sub	sp, #56	; 0x38
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3be:	4857      	ldr	r0, [pc, #348]	; (51c <CONFIG_MAIN_STACK_SIZE+0x11c>)
     3c0:	f003 fd76 	bl	3eb0 <z_impl_device_get_binding>
	const struct device *dev = device_get_binding(DT_LABEL(DT_INST(0, ams_ccs811)));
	struct ccs811_configver_type cfgver;
	int rc;

	if (!dev) {
     3c4:	4604      	mov	r4, r0
     3c6:	b928      	cbnz	r0, 3d4 <main+0x1c>
		printk("Failed to get device binding");
     3c8:	4855      	ldr	r0, [pc, #340]	; (520 <CONFIG_MAIN_STACK_SIZE+0x120>)
	printk("Trigger installation got: %d\n", rc);
#endif /* CONFIG_CCS811_TRIGGER */
	if (rc == 0) {
		do_main(dev);
	}
}
     3ca:	b00e      	add	sp, #56	; 0x38
     3cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printk("Failed to get device binding");
     3d0:	f004 bd76 	b.w	4ec0 <printk>
	printk("device is %p, name is %s\n", dev, dev->name);
     3d4:	4601      	mov	r1, r0
     3d6:	6802      	ldr	r2, [r0, #0]
     3d8:	4852      	ldr	r0, [pc, #328]	; (524 <CONFIG_MAIN_STACK_SIZE+0x124>)
     3da:	f004 fd71 	bl	4ec0 <printk>
	rc = ccs811_configver_fetch(dev, &cfgver);
     3de:	a904      	add	r1, sp, #16
     3e0:	4620      	mov	r0, r4
     3e2:	f005 fb1d 	bl	5a20 <ccs811_configver_fetch>
	if (rc == 0) {
     3e6:	bb68      	cbnz	r0, 444 <CONFIG_MAIN_STACK_SIZE+0x44>
		printk("HW %02x; FW Boot %04x App %04x ; mode %02x\n",
     3e8:	f89d 3015 	ldrb.w	r3, [sp, #21]
     3ec:	9300      	str	r3, [sp, #0]
     3ee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
     3f2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
     3f6:	f89d 1014 	ldrb.w	r1, [sp, #20]
     3fa:	484b      	ldr	r0, [pc, #300]	; (528 <CONFIG_MAIN_STACK_SIZE+0x128>)
		app_fw_2 = (cfgver.fw_app_version >> 8) > 0x11;
     3fc:	4f4b      	ldr	r7, [pc, #300]	; (52c <CONFIG_MAIN_STACK_SIZE+0x12c>)
			printk("Timed fetch got stale data\n");
     3fe:	f8df 9130 	ldr.w	r9, [pc, #304]	; 530 <CONFIG_MAIN_STACK_SIZE+0x130>
	snprintf(buf, sizeof(buf), "%u:%02u:%02u.%03u",
     402:	f8df a130 	ldr.w	sl, [pc, #304]	; 534 <CONFIG_MAIN_STACK_SIZE+0x134>
     406:	f8df 8130 	ldr.w	r8, [pc, #304]	; 538 <CONFIG_MAIN_STACK_SIZE+0x138>
		printk("HW %02x; FW Boot %04x App %04x ; mode %02x\n",
     40a:	f004 fd59 	bl	4ec0 <printk>
		app_fw_2 = (cfgver.fw_app_version >> 8) > 0x11;
     40e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
     412:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
     416:	bf34      	ite	cc
     418:	2300      	movcc	r3, #0
     41a:	2301      	movcs	r3, #1
     41c:	703b      	strb	r3, [r7, #0]
	rc = ccs811_baseline_fetch(dev);
     41e:	4620      	mov	r0, r4
     420:	f005 fb3e 	bl	5aa0 <ccs811_baseline_fetch>
	if (rc >= 0) {
     424:	1e05      	subs	r5, r0, #0
     426:	db06      	blt.n	436 <CONFIG_MAIN_STACK_SIZE+0x36>
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     428:	68a3      	ldr	r3, [r4, #8]
     42a:	2139      	movs	r1, #57	; 0x39
     42c:	68db      	ldr	r3, [r3, #12]
     42e:	4620      	mov	r0, r4
     430:	4798      	blx	r3
	if (rc == 0) {
     432:	b150      	cbz	r0, 44a <CONFIG_MAIN_STACK_SIZE+0x4a>
     434:	4605      	mov	r5, r0
		} else if (-EAGAIN == rc) {
     436:	f115 0f0b 	cmn.w	r5, #11
     43a:	d065      	beq.n	508 <CONFIG_MAIN_STACK_SIZE+0x108>
			printk("Timed fetch failed: %d\n", rc);
     43c:	483f      	ldr	r0, [pc, #252]	; (53c <CONFIG_MAIN_STACK_SIZE+0x13c>)
     43e:	4629      	mov	r1, r5
     440:	f004 fd3e 	bl	4ec0 <printk>
}
     444:	b00e      	add	sp, #56	; 0x38
     446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct ccs811_result_type *rp = ccs811_result(dev);
     44a:	4620      	mov	r0, r4
     44c:	f005 fae5 	bl	5a1a <ccs811_result>
		sensor_channel_get(dev, SENSOR_CHAN_CO2, &co2);
     450:	aa06      	add	r2, sp, #24
		const struct ccs811_result_type *rp = ccs811_result(dev);
     452:	4606      	mov	r6, r0
		sensor_channel_get(dev, SENSOR_CHAN_CO2, &co2);
     454:	211b      	movs	r1, #27
     456:	4620      	mov	r0, r4
     458:	f004 fd0f 	bl	4e7a <sensor_channel_get.isra.0>
		sensor_channel_get(dev, SENSOR_CHAN_VOC, &tvoc);
     45c:	aa08      	add	r2, sp, #32
     45e:	4620      	mov	r0, r4
     460:	211c      	movs	r1, #28
     462:	f004 fd0a 	bl	4e7a <sensor_channel_get.isra.0>
		sensor_channel_get(dev, SENSOR_CHAN_VOLTAGE, &voltage);
     466:	aa0a      	add	r2, sp, #40	; 0x28
     468:	4620      	mov	r0, r4
     46a:	211e      	movs	r1, #30
     46c:	f004 fd05 	bl	4e7a <sensor_channel_get.isra.0>
		sensor_channel_get(dev, SENSOR_CHAN_CURRENT, &current);
     470:	aa0c      	add	r2, sp, #48	; 0x30
     472:	211f      	movs	r1, #31
     474:	4620      	mov	r0, r4
     476:	f004 fd00 	bl	4e7a <sensor_channel_get.isra.0>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     47a:	f005 fede 	bl	623a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     47e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
     482:	fba0 020c 	umull	r0, r2, r0, ip
     486:	fb0c 2101 	mla	r1, ip, r1, r2
     48a:	0bc2      	lsrs	r2, r0, #15
	now /= 60U;
     48c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
     490:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
	now /= MSEC_PER_SEC;
     494:	fbb2 f0fc 	udiv	r0, r2, ip
	unsigned int ms = now % MSEC_PER_SEC;
     498:	fb0c 2210 	mls	r2, ip, r0, r2
	now /= 60U;
     49c:	fbb0 f1fe 	udiv	r1, r0, lr
	s = now % 60U;
     4a0:	fb0e 0011 	mls	r0, lr, r1, r0
	now /= 60U;
     4a4:	fbb1 f3fe 	udiv	r3, r1, lr
	min = now % 60U;
     4a8:	fb0e 1113 	mls	r1, lr, r3, r1
	snprintf(buf, sizeof(buf), "%u:%02u:%02u.%03u",
     4ac:	9202      	str	r2, [sp, #8]
     4ae:	9001      	str	r0, [sp, #4]
     4b0:	9100      	str	r1, [sp, #0]
     4b2:	4652      	mov	r2, sl
     4b4:	2110      	movs	r1, #16
     4b6:	4640      	mov	r0, r8
     4b8:	f001 f9c4 	bl	1844 <snprintf>
		printk("\n[%s]: CCS811: %u ppm eCO2; %u ppb eTVOC\n",
     4bc:	9b08      	ldr	r3, [sp, #32]
     4be:	9a06      	ldr	r2, [sp, #24]
     4c0:	481f      	ldr	r0, [pc, #124]	; (540 <CONFIG_MAIN_STACK_SIZE+0x140>)
     4c2:	4641      	mov	r1, r8
     4c4:	f004 fcfc 	bl	4ec0 <printk>
		printk("Voltage: %d.%06dV; Current: %d.%06dA\n", voltage.val1,
     4c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     4ca:	990a      	ldr	r1, [sp, #40]	; 0x28
     4cc:	481d      	ldr	r0, [pc, #116]	; (544 <CONFIG_MAIN_STACK_SIZE+0x144>)
     4ce:	9300      	str	r3, [sp, #0]
     4d0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
     4d4:	f004 fcf4 	bl	4ec0 <printk>
		printk("BASELINE %04x\n", baseline);
     4d8:	481b      	ldr	r0, [pc, #108]	; (548 <CONFIG_MAIN_STACK_SIZE+0x148>)
     4da:	4629      	mov	r1, r5
     4dc:	f004 fcf0 	bl	4ec0 <printk>
		if (app_fw_2 && !(rp->status & CCS811_STATUS_DATA_READY)) {
     4e0:	783b      	ldrb	r3, [r7, #0]
     4e2:	b12b      	cbz	r3, 4f0 <CONFIG_MAIN_STACK_SIZE+0xf0>
     4e4:	79b3      	ldrb	r3, [r6, #6]
     4e6:	071a      	lsls	r2, r3, #28
     4e8:	d402      	bmi.n	4f0 <CONFIG_MAIN_STACK_SIZE+0xf0>
			printk("STALE DATA\n");
     4ea:	4818      	ldr	r0, [pc, #96]	; (54c <CONFIG_MAIN_STACK_SIZE+0x14c>)
     4ec:	f004 fce8 	bl	4ec0 <printk>
		if (rp->status & CCS811_STATUS_ERROR) {
     4f0:	79b3      	ldrb	r3, [r6, #6]
     4f2:	07db      	lsls	r3, r3, #31
     4f4:	d503      	bpl.n	4fe <CONFIG_MAIN_STACK_SIZE+0xfe>
			printk("ERROR: %02x\n", rp->error);
     4f6:	79f1      	ldrb	r1, [r6, #7]
     4f8:	4815      	ldr	r0, [pc, #84]	; (550 <CONFIG_MAIN_STACK_SIZE+0x150>)
     4fa:	f004 fce1 	bl	4ec0 <printk>
			printk("Timed fetch got %d\n", rc);
     4fe:	4815      	ldr	r0, [pc, #84]	; (554 <CONFIG_MAIN_STACK_SIZE+0x154>)
     500:	2100      	movs	r1, #0
     502:	f004 fcdd 	bl	4ec0 <printk>
     506:	e002      	b.n	50e <CONFIG_MAIN_STACK_SIZE+0x10e>
			printk("Timed fetch got stale data\n");
     508:	4648      	mov	r0, r9
     50a:	f004 fcd9 	bl	4ec0 <printk>
	return z_impl_k_sleep(timeout);
     50e:	2100      	movs	r1, #0
     510:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     514:	f004 fab4 	bl	4a80 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     518:	e781      	b.n	41e <CONFIG_MAIN_STACK_SIZE+0x1e>
     51a:	bf00      	nop
     51c:	00006800 	.word	0x00006800
     520:	00006807 	.word	0x00006807
     524:	00006824 	.word	0x00006824
     528:	0000683e 	.word	0x0000683e
     52c:	20000678 	.word	0x20000678
     530:	000068f4 	.word	0x000068f4
     534:	0000686a 	.word	0x0000686a
     538:	20000679 	.word	0x20000679
     53c:	00006910 	.word	0x00006910
     540:	0000687c 	.word	0x0000687c
     544:	000068a6 	.word	0x000068a6
     548:	000068cc 	.word	0x000068cc
     54c:	000068db 	.word	0x000068db
     550:	000068e7 	.word	0x000068e7
     554:	00006928 	.word	0x00006928

00000558 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     558:	680b      	ldr	r3, [r1, #0]
     55a:	3301      	adds	r3, #1
     55c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     55e:	4b01      	ldr	r3, [pc, #4]	; (564 <char_out+0xc>)
     560:	681b      	ldr	r3, [r3, #0]
     562:	4718      	bx	r3
     564:	20000000 	.word	0x20000000

00000568 <__printk_hook_install>:
	_char_out = fn;
     568:	4b01      	ldr	r3, [pc, #4]	; (570 <__printk_hook_install+0x8>)
     56a:	6018      	str	r0, [r3, #0]
}
     56c:	4770      	bx	lr
     56e:	bf00      	nop
     570:	20000000 	.word	0x20000000

00000574 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     574:	b507      	push	{r0, r1, r2, lr}
     576:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     578:	2100      	movs	r1, #0
{
     57a:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     57c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     57e:	4803      	ldr	r0, [pc, #12]	; (58c <vprintk+0x18>)
     580:	a901      	add	r1, sp, #4
     582:	f000 f8e5 	bl	750 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     586:	b003      	add	sp, #12
     588:	f85d fb04 	ldr.w	pc, [sp], #4
     58c:	00000559 	.word	0x00000559

00000590 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     594:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     598:	f019 0808 	ands.w	r8, r9, #8
{
     59c:	4604      	mov	r4, r0
     59e:	4693      	mov	fp, r2
	if (processing) {
     5a0:	d00d      	beq.n	5be <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     5a2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5a4:	bf0c      	ite	eq
     5a6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5aa:	f049 0920 	orrne.w	r9, r9, #32
     5ae:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5b2:	f38b 8811 	msr	BASEPRI, fp
     5b6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5be:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     5c2:	2902      	cmp	r1, #2
     5c4:	d107      	bne.n	5d6 <process_event+0x46>
			evt = process_recheck(mgr);
     5c6:	4620      	mov	r0, r4
     5c8:	f004 fc87 	bl	4eda <process_recheck>
		if (evt == EVT_NOP) {
     5cc:	2800      	cmp	r0, #0
     5ce:	d0f0      	beq.n	5b2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     5d0:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d2:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     5d4:	d14e      	bne.n	674 <process_event+0xe4>
			res = mgr->last_res;
     5d6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5d8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     5da:	2f00      	cmp	r7, #0
     5dc:	da15      	bge.n	60a <process_event+0x7a>
		*clients = mgr->clients;
     5de:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     5e4:	e9c4 8800 	strd	r8, r8, [r4]
     5e8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     5ec:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     5ee:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5f0:	8b21      	ldrh	r1, [r4, #24]
     5f2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5f6:	45ca      	cmp	sl, r9
     5f8:	d002      	beq.n	600 <process_event+0x70>
		if (do_monitors
     5fa:	68a3      	ldr	r3, [r4, #8]
     5fc:	2b00      	cmp	r3, #0
     5fe:	d15a      	bne.n	6b6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     600:	b90d      	cbnz	r5, 606 <process_event+0x76>
		    || (transit != NULL)) {
     602:	2e00      	cmp	r6, #0
     604:	d071      	beq.n	6ea <process_event+0x15a>
     606:	2300      	movs	r3, #0
     608:	e056      	b.n	6b8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     60a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     60e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     610:	2a01      	cmp	r2, #1
     612:	d81e      	bhi.n	652 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     614:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     618:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     61a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     61c:	b289      	uxth	r1, r1
     61e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     622:	d10a      	bne.n	63a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     624:	b13d      	cbz	r5, 636 <process_event+0xa6>
     626:	8b63      	ldrh	r3, [r4, #26]
     628:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     62a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     62c:	3301      	adds	r3, #1
     62e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     630:	2a00      	cmp	r2, #0
     632:	d1fa      	bne.n	62a <process_event+0x9a>
     634:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     636:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     63a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     63c:	4620      	mov	r0, r4
     63e:	f004 fc4c 	bl	4eda <process_recheck>
     642:	4606      	mov	r6, r0
     644:	2800      	cmp	r0, #0
     646:	d0d3      	beq.n	5f0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     648:	8b23      	ldrh	r3, [r4, #24]
     64a:	f043 0320 	orr.w	r3, r3, #32
     64e:	8323      	strh	r3, [r4, #24]
     650:	e7cd      	b.n	5ee <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     652:	2b04      	cmp	r3, #4
     654:	d10c      	bne.n	670 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     656:	f021 0107 	bic.w	r1, r1, #7
     65a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     65c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     65e:	4620      	mov	r0, r4
     660:	f004 fc3b 	bl	4eda <process_recheck>
     664:	4605      	mov	r5, r0
     666:	2800      	cmp	r0, #0
     668:	d0c1      	beq.n	5ee <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     66a:	f041 0120 	orr.w	r1, r1, #32
     66e:	8321      	strh	r1, [r4, #24]
     670:	2500      	movs	r5, #0
     672:	e7bc      	b.n	5ee <process_event+0x5e>
		} else if (evt == EVT_START) {
     674:	2803      	cmp	r0, #3
     676:	d109      	bne.n	68c <process_event+0xfc>
			transit = mgr->transitions->start;
     678:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     67a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     67e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     680:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     684:	8323      	strh	r3, [r4, #24]
}
     686:	2500      	movs	r5, #0
		res = 0;
     688:	462f      	mov	r7, r5
     68a:	e7b1      	b.n	5f0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     68c:	2804      	cmp	r0, #4
     68e:	d106      	bne.n	69e <process_event+0x10e>
			transit = mgr->transitions->stop;
     690:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     692:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     696:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     698:	f043 0304 	orr.w	r3, r3, #4
     69c:	e7f2      	b.n	684 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     69e:	2805      	cmp	r0, #5
     6a0:	d106      	bne.n	6b0 <process_event+0x120>
			transit = mgr->transitions->reset;
     6a2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6a4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     6a8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6aa:	f043 0305 	orr.w	r3, r3, #5
     6ae:	e7e9      	b.n	684 <process_event+0xf4>
     6b0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     6b2:	462e      	mov	r6, r5
     6b4:	e7e8      	b.n	688 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     6b6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6b8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     6bc:	8321      	strh	r1, [r4, #24]
     6be:	f38b 8811 	msr	BASEPRI, fp
     6c2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     6c6:	b9fb      	cbnz	r3, 708 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     6c8:	bb85      	cbnz	r5, 72c <process_event+0x19c>
			if (transit != NULL) {
     6ca:	b116      	cbz	r6, 6d2 <process_event+0x142>
				transit(mgr, transition_complete);
     6cc:	491f      	ldr	r1, [pc, #124]	; (74c <process_event+0x1bc>)
     6ce:	4620      	mov	r0, r4
     6d0:	47b0      	blx	r6
	__asm__ volatile(
     6d2:	f04f 0320 	mov.w	r3, #32
     6d6:	f3ef 8b11 	mrs	fp, BASEPRI
     6da:	f383 8812 	msr	BASEPRI_MAX, r3
     6de:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     6e2:	8b23      	ldrh	r3, [r4, #24]
     6e4:	f023 0308 	bic.w	r3, r3, #8
     6e8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     6ea:	8b23      	ldrh	r3, [r4, #24]
     6ec:	06da      	lsls	r2, r3, #27
     6ee:	d525      	bpl.n	73c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6f0:	f023 0310 	bic.w	r3, r3, #16
     6f4:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     6f6:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     6f8:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     6fc:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     700:	2900      	cmp	r1, #0
     702:	f47f af5e 	bne.w	5c2 <process_event+0x32>
out:
     706:	e754      	b.n	5b2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     708:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     70a:	2900      	cmp	r1, #0
     70c:	d0dc      	beq.n	6c8 <process_event+0x138>
	return node->next;
     70e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     712:	f8d1 b004 	ldr.w	fp, [r1, #4]
     716:	463b      	mov	r3, r7
     718:	4652      	mov	r2, sl
     71a:	4620      	mov	r0, r4
     71c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     71e:	f1b9 0f00 	cmp.w	r9, #0
     722:	d0d1      	beq.n	6c8 <process_event+0x138>
     724:	4649      	mov	r1, r9
     726:	f8d9 9000 	ldr.w	r9, [r9]
     72a:	e7f2      	b.n	712 <process_event+0x182>
     72c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     72e:	463b      	mov	r3, r7
     730:	4652      	mov	r2, sl
     732:	4620      	mov	r0, r4
     734:	682d      	ldr	r5, [r5, #0]
     736:	f004 fbec 	bl	4f12 <notify_one>
     73a:	e7c5      	b.n	6c8 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     73c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     740:	bf1e      	ittt	ne
     742:	f023 0320 	bicne.w	r3, r3, #32
     746:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     748:	2102      	movne	r1, #2
     74a:	e7d5      	b.n	6f8 <process_event+0x168>
     74c:	00004f3f 	.word	0x00004f3f

00000750 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     754:	b091      	sub	sp, #68	; 0x44
     756:	468b      	mov	fp, r1
     758:	9002      	str	r0, [sp, #8]
     75a:	4692      	mov	sl, r2
     75c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     75e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     760:	f89a 0000 	ldrb.w	r0, [sl]
     764:	b908      	cbnz	r0, 76a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     766:	4628      	mov	r0, r5
     768:	e35f      	b.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
		if (*fp != '%') {
     76a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     76c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     770:	d007      	beq.n	782 <cbvprintf+0x32>
			OUTC('%');
     772:	9b02      	ldr	r3, [sp, #8]
     774:	4659      	mov	r1, fp
     776:	4798      	blx	r3
     778:	2800      	cmp	r0, #0
     77a:	f2c0 8356 	blt.w	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     77e:	3501      	adds	r5, #1
			break;
     780:	e212      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
		} state = {
     782:	2218      	movs	r2, #24
     784:	2100      	movs	r1, #0
     786:	a80a      	add	r0, sp, #40	; 0x28
     788:	f004 fd4c 	bl	5224 <memset>
	if (*sp == '%') {
     78c:	f89a 3001 	ldrb.w	r3, [sl, #1]
     790:	2b25      	cmp	r3, #37	; 0x25
     792:	d078      	beq.n	886 <CONFIG_ISR_STACK_SIZE+0x86>
     794:	2200      	movs	r2, #0
     796:	4610      	mov	r0, r2
     798:	4696      	mov	lr, r2
     79a:	4694      	mov	ip, r2
     79c:	4616      	mov	r6, r2
     79e:	4639      	mov	r1, r7
		switch (*sp) {
     7a0:	f817 3b01 	ldrb.w	r3, [r7], #1
     7a4:	2b2b      	cmp	r3, #43	; 0x2b
     7a6:	f000 809d 	beq.w	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     7aa:	f200 8094 	bhi.w	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
     7ae:	2b20      	cmp	r3, #32
     7b0:	f000 809b 	beq.w	8ea <CONFIG_ISR_STACK_SIZE+0xea>
     7b4:	2b23      	cmp	r3, #35	; 0x23
     7b6:	f000 809b 	beq.w	8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
     7ba:	b12e      	cbz	r6, 7c8 <cbvprintf+0x78>
     7bc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     7c0:	f046 0604 	orr.w	r6, r6, #4
     7c4:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     7c8:	f1bc 0f00 	cmp.w	ip, #0
     7cc:	d005      	beq.n	7da <cbvprintf+0x8a>
     7ce:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     7d2:	f046 0608 	orr.w	r6, r6, #8
     7d6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     7da:	f1be 0f00 	cmp.w	lr, #0
     7de:	d005      	beq.n	7ec <cbvprintf+0x9c>
     7e0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     7e4:	f046 0610 	orr.w	r6, r6, #16
     7e8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     7ec:	b128      	cbz	r0, 7fa <cbvprintf+0xaa>
     7ee:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     7f2:	f040 0020 	orr.w	r0, r0, #32
     7f6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     7fa:	b12a      	cbz	r2, 808 <CONFIG_ISR_STACK_SIZE+0x8>
     7fc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     804:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     808:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     80c:	f002 0044 	and.w	r0, r2, #68	; 0x44
     810:	2844      	cmp	r0, #68	; 0x44
     812:	d103      	bne.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
		conv->flag_zero = false;
     814:	f36f 1286 	bfc	r2, #6, #1
     818:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     81c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     820:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     826:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     82a:	d17b      	bne.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
		conv->width_star = true;
     82c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     830:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     834:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     836:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     83a:	781a      	ldrb	r2, [r3, #0]
     83c:	2a2e      	cmp	r2, #46	; 0x2e
     83e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     842:	bf0c      	ite	eq
     844:	2101      	moveq	r1, #1
     846:	2100      	movne	r1, #0
     848:	f361 0241 	bfi	r2, r1, #1, #1
     84c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     850:	d174      	bne.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
	if (*sp == '*') {
     852:	785a      	ldrb	r2, [r3, #1]
     854:	2a2a      	cmp	r2, #42	; 0x2a
     856:	d06a      	beq.n	92e <CONFIG_ISR_STACK_SIZE+0x12e>
	++sp;
     858:	3301      	adds	r3, #1
	size_t val = 0;
     85a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     85c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     85e:	4618      	mov	r0, r3
     860:	f810 2b01 	ldrb.w	r2, [r0], #1
     864:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     868:	2f09      	cmp	r7, #9
     86a:	f240 808e 	bls.w	98a <CONFIG_ISR_STACK_SIZE+0x18a>
	conv->unsupported |= ((conv->prec_value < 0)
     86e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     872:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     874:	f3c2 0040 	ubfx	r0, r2, #1, #1
     878:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     87c:	f361 0241 	bfi	r2, r1, #1, #1
     880:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     884:	e05a      	b.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
		conv->specifier = *sp++;
     886:	f10a 0702 	add.w	r7, sl, #2
     88a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     88e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     892:	07d9      	lsls	r1, r3, #31
     894:	f140 8149 	bpl.w	b2a <CONFIG_ISR_STACK_SIZE+0x32a>
			width = va_arg(ap, int);
     898:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     89c:	f1b9 0f00 	cmp.w	r9, #0
     8a0:	da07      	bge.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
				conv->flag_dash = true;
     8a2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     8a6:	f042 0204 	orr.w	r2, r2, #4
     8aa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     8ae:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     8b2:	075a      	lsls	r2, r3, #29
     8b4:	f140 8142 	bpl.w	b3c <CONFIG_ISR_STACK_SIZE+0x33c>
			int arg = va_arg(ap, int);
     8b8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     8bc:	f1b8 0f00 	cmp.w	r8, #0
     8c0:	f280 8141 	bge.w	b46 <CONFIG_ISR_STACK_SIZE+0x346>
				conv->prec_present = false;
     8c4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8c8:	f36f 0341 	bfc	r3, #1, #1
     8cc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     8d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     8d4:	e137      	b.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
		switch (*sp) {
     8d6:	2b2d      	cmp	r3, #45	; 0x2d
     8d8:	d00c      	beq.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	2b30      	cmp	r3, #48	; 0x30
     8dc:	f47f af6d 	bne.w	7ba <cbvprintf+0x6a>
			conv->flag_zero = true;
     8e0:	2201      	movs	r2, #1
	} while (loop);
     8e2:	e75c      	b.n	79e <cbvprintf+0x4e>
			conv->flag_plus = true;
     8e4:	f04f 0c01 	mov.w	ip, #1
     8e8:	e759      	b.n	79e <cbvprintf+0x4e>
			conv->flag_space = true;
     8ea:	f04f 0e01 	mov.w	lr, #1
     8ee:	e756      	b.n	79e <cbvprintf+0x4e>
			conv->flag_hash = true;
     8f0:	2001      	movs	r0, #1
     8f2:	e754      	b.n	79e <cbvprintf+0x4e>
		switch (*sp) {
     8f4:	2601      	movs	r6, #1
     8f6:	e752      	b.n	79e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     8f8:	fb0c 0202 	mla	r2, ip, r2, r0
     8fc:	3a30      	subs	r2, #48	; 0x30
     8fe:	4633      	mov	r3, r6
     900:	461e      	mov	r6, r3
     902:	f816 0b01 	ldrb.w	r0, [r6], #1
     906:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     90a:	2f09      	cmp	r7, #9
     90c:	d9f4      	bls.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
	if (sp != wp) {
     90e:	4299      	cmp	r1, r3
     910:	d093      	beq.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
		conv->unsupported |= ((conv->width_value < 0)
     912:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     916:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     918:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     91a:	f362 0141 	bfi	r1, r2, #1, #1
     91e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     922:	e78a      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     924:	460b      	mov	r3, r1
	size_t val = 0;
     926:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     928:	f04f 0c0a 	mov.w	ip, #10
     92c:	e7e8      	b.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
		conv->prec_star = true;
     92e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     932:	f042 0204 	orr.w	r2, r2, #4
     936:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     93a:	3302      	adds	r3, #2
	switch (*sp) {
     93c:	461f      	mov	r7, r3
     93e:	f817 2b01 	ldrb.w	r2, [r7], #1
     942:	2a6c      	cmp	r2, #108	; 0x6c
     944:	d041      	beq.n	9ca <CONFIG_ISR_STACK_SIZE+0x1ca>
     946:	d825      	bhi.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
     948:	2a68      	cmp	r2, #104	; 0x68
     94a:	d02b      	beq.n	9a4 <CONFIG_ISR_STACK_SIZE+0x1a4>
     94c:	2a6a      	cmp	r2, #106	; 0x6a
     94e:	d046      	beq.n	9de <CONFIG_ISR_STACK_SIZE+0x1de>
     950:	2a4c      	cmp	r2, #76	; 0x4c
     952:	d04c      	beq.n	9ee <CONFIG_ISR_STACK_SIZE+0x1ee>
     954:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     956:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     95a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     95e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     962:	2a78      	cmp	r2, #120	; 0x78
     964:	f200 80d9 	bhi.w	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
     968:	2a57      	cmp	r2, #87	; 0x57
     96a:	d84d      	bhi.n	a08 <CONFIG_ISR_STACK_SIZE+0x208>
     96c:	2a41      	cmp	r2, #65	; 0x41
     96e:	d003      	beq.n	978 <CONFIG_ISR_STACK_SIZE+0x178>
     970:	3a45      	subs	r2, #69	; 0x45
     972:	2a02      	cmp	r2, #2
     974:	f200 80d1 	bhi.w	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
		conv->specifier_cat = SPECIFIER_FP;
     978:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     97c:	2204      	movs	r2, #4
     97e:	f362 0302 	bfi	r3, r2, #0, #3
     982:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     986:	2301      	movs	r3, #1
			break;
     988:	e09e      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
		val = 10U * val + *sp++ - '0';
     98a:	fb06 2101 	mla	r1, r6, r1, r2
     98e:	3930      	subs	r1, #48	; 0x30
     990:	4603      	mov	r3, r0
     992:	e764      	b.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
	switch (*sp) {
     994:	2a74      	cmp	r2, #116	; 0x74
     996:	d026      	beq.n	9e6 <CONFIG_ISR_STACK_SIZE+0x1e6>
     998:	2a7a      	cmp	r2, #122	; 0x7a
     99a:	d1db      	bne.n	954 <CONFIG_ISR_STACK_SIZE+0x154>
		conv->length_mod = LENGTH_Z;
     99c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     9a0:	2206      	movs	r2, #6
     9a2:	e00d      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		if (*++sp == 'h') {
     9a4:	785a      	ldrb	r2, [r3, #1]
     9a6:	2a68      	cmp	r2, #104	; 0x68
     9a8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9ac:	d106      	bne.n	9bc <CONFIG_ISR_STACK_SIZE+0x1bc>
			conv->length_mod = LENGTH_HH;
     9ae:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     9b0:	f361 02c6 	bfi	r2, r1, #3, #4
     9b4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     9b8:	1c9f      	adds	r7, r3, #2
     9ba:	e7cc      	b.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
			conv->length_mod = LENGTH_H;
     9bc:	4613      	mov	r3, r2
     9be:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     9c0:	f362 03c6 	bfi	r3, r2, #3, #4
     9c4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     9c8:	e7c5      	b.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
		if (*++sp == 'l') {
     9ca:	785a      	ldrb	r2, [r3, #1]
     9cc:	2a6c      	cmp	r2, #108	; 0x6c
     9ce:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9d2:	d101      	bne.n	9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
			conv->length_mod = LENGTH_LL;
     9d4:	2104      	movs	r1, #4
     9d6:	e7eb      	b.n	9b0 <CONFIG_ISR_STACK_SIZE+0x1b0>
			conv->length_mod = LENGTH_L;
     9d8:	4613      	mov	r3, r2
     9da:	2203      	movs	r2, #3
     9dc:	e7f0      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		conv->length_mod = LENGTH_J;
     9de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     9e2:	2205      	movs	r2, #5
     9e4:	e7ec      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		conv->length_mod = LENGTH_T;
     9e6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     9ea:	2207      	movs	r2, #7
     9ec:	e7e8      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		conv->unsupported = true;
     9ee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     9f2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     9f6:	f023 0302 	bic.w	r3, r3, #2
     9fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     9fe:	f043 0302 	orr.w	r3, r3, #2
     a02:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     a06:	e7a6      	b.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
	switch (conv->specifier) {
     a08:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     a0c:	2920      	cmp	r1, #32
     a0e:	f200 8084 	bhi.w	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
     a12:	a001      	add	r0, pc, #4	; (adr r0, a18 <CONFIG_ISR_STACK_SIZE+0x218>)
     a14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     a18:	00000add 	.word	0x00000add
     a1c:	00000b1b 	.word	0x00000b1b
     a20:	00000b1b 	.word	0x00000b1b
     a24:	00000b1b 	.word	0x00000b1b
     a28:	00000b1b 	.word	0x00000b1b
     a2c:	00000b1b 	.word	0x00000b1b
     a30:	00000b1b 	.word	0x00000b1b
     a34:	00000b1b 	.word	0x00000b1b
     a38:	00000b1b 	.word	0x00000b1b
     a3c:	00000979 	.word	0x00000979
     a40:	00000b1b 	.word	0x00000b1b
     a44:	00000add 	.word	0x00000add
     a48:	00000a9d 	.word	0x00000a9d
     a4c:	00000979 	.word	0x00000979
     a50:	00000979 	.word	0x00000979
     a54:	00000979 	.word	0x00000979
     a58:	00000b1b 	.word	0x00000b1b
     a5c:	00000a9d 	.word	0x00000a9d
     a60:	00000b1b 	.word	0x00000b1b
     a64:	00000b1b 	.word	0x00000b1b
     a68:	00000b1b 	.word	0x00000b1b
     a6c:	00000b1b 	.word	0x00000b1b
     a70:	00000ae5 	.word	0x00000ae5
     a74:	00000add 	.word	0x00000add
     a78:	00000b01 	.word	0x00000b01
     a7c:	00000b1b 	.word	0x00000b1b
     a80:	00000b1b 	.word	0x00000b1b
     a84:	00000b01 	.word	0x00000b01
     a88:	00000b1b 	.word	0x00000b1b
     a8c:	00000add 	.word	0x00000add
     a90:	00000b1b 	.word	0x00000b1b
     a94:	00000b1b 	.word	0x00000b1b
     a98:	00000add 	.word	0x00000add
		conv->specifier_cat = SPECIFIER_SINT;
     a9c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     aa0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     aa2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     aa6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     aaa:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     aac:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     ab0:	bf02      	ittt	eq
     ab2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     ab6:	f041 0101 	orreq.w	r1, r1, #1
     aba:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     abe:	2a63      	cmp	r2, #99	; 0x63
     ac0:	d131      	bne.n	b26 <CONFIG_ISR_STACK_SIZE+0x326>
			unsupported = (conv->length_mod != LENGTH_NONE);
     ac2:	3b00      	subs	r3, #0
     ac4:	bf18      	it	ne
     ac6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     ac8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     acc:	f3c2 0140 	ubfx	r1, r2, #1, #1
     ad0:	430b      	orrs	r3, r1
     ad2:	f363 0241 	bfi	r2, r3, #1, #1
     ad6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     ada:	e6d8      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
		conv->specifier_cat = SPECIFIER_UINT;
     adc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     ae0:	2002      	movs	r0, #2
     ae2:	e7de      	b.n	aa2 <CONFIG_ISR_STACK_SIZE+0x2a2>
		conv->specifier_cat = SPECIFIER_PTR;
     ae4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     ae8:	f003 0378 	and.w	r3, r3, #120	; 0x78
     aec:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     af0:	2103      	movs	r1, #3
     af2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     af6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     af8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     afc:	4143      	adcs	r3, r0
     afe:	e7e3      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
		conv->specifier_cat = SPECIFIER_PTR;
     b00:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     b04:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     b06:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     b0a:	f361 0202 	bfi	r2, r1, #0, #3
     b0e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     b12:	bf14      	ite	ne
     b14:	2301      	movne	r3, #1
     b16:	2300      	moveq	r3, #0
     b18:	e7d6      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
		conv->invalid = true;
     b1a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     b1e:	f043 0301 	orr.w	r3, r3, #1
     b22:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     b26:	2300      	movs	r3, #0
     b28:	e7ce      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
		} else if (conv->width_present) {
     b2a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     b2e:	2a00      	cmp	r2, #0
			width = conv->width_value;
     b30:	bfb4      	ite	lt
     b32:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     b36:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     b3a:	e6ba      	b.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
		} else if (conv->prec_present) {
     b3c:	079b      	lsls	r3, r3, #30
     b3e:	f57f aec7 	bpl.w	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
			precision = conv->prec_value;
     b42:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     b46:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     b4a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     b4c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     b50:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     b54:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     b58:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     b5a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     b5e:	d138      	bne.n	bd2 <CONFIG_ISR_STACK_SIZE+0x3d2>
			switch (length_mod) {
     b60:	1ecb      	subs	r3, r1, #3
     b62:	2b04      	cmp	r3, #4
     b64:	d822      	bhi.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
     b66:	e8df f003 	tbb	[pc, r3]
     b6a:	0903      	.short	0x0903
     b6c:	2109      	.short	0x2109
     b6e:	21          	.byte	0x21
     b6f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     b70:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     b74:	17da      	asrs	r2, r3, #31
     b76:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     b7a:	e006      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
					(sint_value_type)va_arg(ap, intmax_t);
     b7c:	3407      	adds	r4, #7
     b7e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     b82:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b86:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     b8a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     b8e:	f013 0603 	ands.w	r6, r3, #3
     b92:	d056      	beq.n	c42 <CONFIG_ISR_STACK_SIZE+0x442>
			OUTS(sp, fp);
     b94:	9802      	ldr	r0, [sp, #8]
     b96:	463b      	mov	r3, r7
     b98:	4652      	mov	r2, sl
     b9a:	4659      	mov	r1, fp
     b9c:	f004 fae9 	bl	5172 <outs>
     ba0:	2800      	cmp	r0, #0
     ba2:	f2c0 8142 	blt.w	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     ba6:	4405      	add	r5, r0
			continue;
     ba8:	46ba      	mov	sl, r7
     baa:	e5d9      	b.n	760 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     bac:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     bb0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     bb2:	ea4f 72e3 	mov.w	r2, r3, asr #31
     bb6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     bba:	d105      	bne.n	bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
				value->uint = (unsigned char)value->uint;
     bbc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     bc0:	930a      	str	r3, [sp, #40]	; 0x28
     bc2:	2300      	movs	r3, #0
     bc4:	930b      	str	r3, [sp, #44]	; 0x2c
     bc6:	e7e0      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
			} else if (length_mod == LENGTH_H) {
     bc8:	2902      	cmp	r1, #2
     bca:	d1de      	bne.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
				value->sint = (short)value->sint;
     bcc:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     bd0:	e7d0      	b.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
		} else if (specifier_cat == SPECIFIER_UINT) {
     bd2:	2b02      	cmp	r3, #2
     bd4:	d123      	bne.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
			switch (length_mod) {
     bd6:	1ecb      	subs	r3, r1, #3
     bd8:	2b04      	cmp	r3, #4
     bda:	d813      	bhi.n	c04 <CONFIG_ISR_STACK_SIZE+0x404>
     bdc:	e8df f003 	tbb	[pc, r3]
     be0:	120a0a03 	.word	0x120a0a03
     be4:	12          	.byte	0x12
     be5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     be6:	6822      	ldr	r2, [r4, #0]
     be8:	920a      	str	r2, [sp, #40]	; 0x28
     bea:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     bec:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     bee:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     bf0:	4604      	mov	r4, r0
     bf2:	e7ca      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
					(uint_value_type)va_arg(ap,
     bf4:	1de0      	adds	r0, r4, #7
     bf6:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     bfa:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     bfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     c02:	e7f5      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
					(uint_value_type)va_arg(ap, size_t);
     c04:	f854 3b04 	ldr.w	r3, [r4], #4
     c08:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     c0a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     c0c:	f04f 0300 	mov.w	r3, #0
     c10:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     c12:	d0d3      	beq.n	bbc <CONFIG_ISR_STACK_SIZE+0x3bc>
			} else if (length_mod == LENGTH_H) {
     c14:	2902      	cmp	r1, #2
     c16:	d1b8      	bne.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
				value->uint = (unsigned short)value->uint;
     c18:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     c1c:	e7d0      	b.n	bc0 <CONFIG_ISR_STACK_SIZE+0x3c0>
		} else if (specifier_cat == SPECIFIER_FP) {
     c1e:	2b04      	cmp	r3, #4
     c20:	d109      	bne.n	c36 <CONFIG_ISR_STACK_SIZE+0x436>
					(sint_value_type)va_arg(ap, long long);
     c22:	1de3      	adds	r3, r4, #7
     c24:	f023 0307 	bic.w	r3, r3, #7
     c28:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
     c30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     c34:	e7a9      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     c36:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     c38:	bf04      	itt	eq
     c3a:	f854 3b04 	ldreq.w	r3, [r4], #4
     c3e:	930a      	streq	r3, [sp, #40]	; 0x28
     c40:	e7a3      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>
		switch (conv->specifier) {
     c42:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     c46:	2878      	cmp	r0, #120	; 0x78
     c48:	d8ae      	bhi.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
     c4a:	2862      	cmp	r0, #98	; 0x62
     c4c:	d822      	bhi.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     c4e:	2825      	cmp	r0, #37	; 0x25
     c50:	f43f ad8f 	beq.w	772 <cbvprintf+0x22>
     c54:	2858      	cmp	r0, #88	; 0x58
     c56:	d1a7      	bne.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			bps = encode_uint(value->uint, conv, buf, bpe);
     c58:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c5c:	9300      	str	r3, [sp, #0]
     c5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     c62:	ab04      	add	r3, sp, #16
     c64:	aa0c      	add	r2, sp, #48	; 0x30
     c66:	f004 fa3e 	bl	50e6 <encode_uint>
     c6a:	4682      	mov	sl, r0
			if (precision >= 0) {
     c6c:	f1b8 0f00 	cmp.w	r8, #0
     c70:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     c74:	db0c      	blt.n	c90 <CONFIG_ISR_STACK_SIZE+0x490>
				conv->flag_zero = false;
     c76:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     c7a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     c7e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     c82:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     c84:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     c88:	d902      	bls.n	c90 <CONFIG_ISR_STACK_SIZE+0x490>
					conv->pad0_value = precision - (int)len;
     c8a:	eba8 0303 	sub.w	r3, r8, r3
     c8e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     c90:	4680      	mov	r8, r0
     c92:	e03d      	b.n	d10 <CONFIG_ISR_STACK_SIZE+0x510>
		switch (conv->specifier) {
     c94:	3863      	subs	r0, #99	; 0x63
     c96:	2815      	cmp	r0, #21
     c98:	d886      	bhi.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
     c9a:	a201      	add	r2, pc, #4	; (adr r2, ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>)
     c9c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     ca0:	00000d21 	.word	0x00000d21
     ca4:	00000d85 	.word	0x00000d85
     ca8:	00000ba9 	.word	0x00000ba9
     cac:	00000ba9 	.word	0x00000ba9
     cb0:	00000ba9 	.word	0x00000ba9
     cb4:	00000ba9 	.word	0x00000ba9
     cb8:	00000d85 	.word	0x00000d85
     cbc:	00000ba9 	.word	0x00000ba9
     cc0:	00000ba9 	.word	0x00000ba9
     cc4:	00000ba9 	.word	0x00000ba9
     cc8:	00000ba9 	.word	0x00000ba9
     ccc:	00000ddf 	.word	0x00000ddf
     cd0:	00000dad 	.word	0x00000dad
     cd4:	00000db1 	.word	0x00000db1
     cd8:	00000ba9 	.word	0x00000ba9
     cdc:	00000ba9 	.word	0x00000ba9
     ce0:	00000cf9 	.word	0x00000cf9
     ce4:	00000ba9 	.word	0x00000ba9
     ce8:	00000dad 	.word	0x00000dad
     cec:	00000ba9 	.word	0x00000ba9
     cf0:	00000ba9 	.word	0x00000ba9
     cf4:	00000dad 	.word	0x00000dad
			if (precision >= 0) {
     cf8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     cfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     d00:	db0a      	blt.n	d18 <CONFIG_ISR_STACK_SIZE+0x518>
				len = strnlen(bps, precision);
     d02:	4641      	mov	r1, r8
     d04:	4650      	mov	r0, sl
     d06:	f004 fa6d 	bl	51e4 <strnlen>
			bpe = bps + len;
     d0a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     d0e:	2600      	movs	r6, #0
		if (bps == NULL) {
     d10:	f1ba 0f00 	cmp.w	sl, #0
     d14:	d10c      	bne.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     d16:	e747      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
				len = strlen(bps);
     d18:	4650      	mov	r0, sl
     d1a:	f004 fa5c 	bl	51d6 <strlen>
     d1e:	e7f4      	b.n	d0a <CONFIG_ISR_STACK_SIZE+0x50a>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     d22:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     d26:	2600      	movs	r6, #0
			bps = buf;
     d28:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
     d2c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     d30:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     d34:	b106      	cbz	r6, d38 <CONFIG_ISR_STACK_SIZE+0x538>
			nj_len += 1U;
     d36:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     d38:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     d3c:	06d0      	lsls	r0, r2, #27
     d3e:	d568      	bpl.n	e12 <CONFIG_ISR_STACK_SIZE+0x612>
			nj_len += 2U;
     d40:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     d42:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     d44:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     d46:	bf48      	it	mi
     d48:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     d4a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     d4c:	bf48      	it	mi
     d4e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     d50:	f1b9 0f00 	cmp.w	r9, #0
     d54:	dd76      	ble.n	e44 <CONFIG_ISR_STACK_SIZE+0x644>
			if (!conv->flag_dash) {
     d56:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     d5a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     d5e:	f3c2 0380 	ubfx	r3, r2, #2, #1
     d62:	9303      	str	r3, [sp, #12]
     d64:	0753      	lsls	r3, r2, #29
     d66:	d46d      	bmi.n	e44 <CONFIG_ISR_STACK_SIZE+0x644>
				if (conv->flag_zero) {
     d68:	0650      	lsls	r0, r2, #25
     d6a:	d561      	bpl.n	e30 <CONFIG_ISR_STACK_SIZE+0x630>
					if (sign != 0) {
     d6c:	b146      	cbz	r6, d80 <CONFIG_ISR_STACK_SIZE+0x580>
						OUTC(sign);
     d6e:	9b02      	ldr	r3, [sp, #8]
     d70:	4659      	mov	r1, fp
     d72:	4630      	mov	r0, r6
     d74:	4798      	blx	r3
     d76:	2800      	cmp	r0, #0
     d78:	db57      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
						sign = 0;
     d7a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     d7c:	3501      	adds	r5, #1
						sign = 0;
     d7e:	461e      	mov	r6, r3
					pad = '0';
     d80:	2330      	movs	r3, #48	; 0x30
     d82:	e056      	b.n	e32 <CONFIG_ISR_STACK_SIZE+0x632>
			if (conv->flag_plus) {
     d84:	071e      	lsls	r6, r3, #28
     d86:	d40f      	bmi.n	da8 <CONFIG_ISR_STACK_SIZE+0x5a8>
				sign = ' ';
     d88:	f013 0610 	ands.w	r6, r3, #16
     d8c:	bf18      	it	ne
     d8e:	2620      	movne	r6, #32
			sint = value->sint;
     d90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     d94:	2b00      	cmp	r3, #0
     d96:	f6bf af5f 	bge.w	c58 <CONFIG_ISR_STACK_SIZE+0x458>
				value->uint = (uint_value_type)-sint;
     d9a:	4252      	negs	r2, r2
     d9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     da0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     da4:	262d      	movs	r6, #45	; 0x2d
     da6:	e757      	b.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
				sign = '+';
     da8:	262b      	movs	r6, #43	; 0x2b
     daa:	e7f1      	b.n	d90 <CONFIG_ISR_STACK_SIZE+0x590>
		switch (conv->specifier) {
     dac:	2600      	movs	r6, #0
     dae:	e753      	b.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
			if (value->ptr != NULL) {
     db0:	980a      	ldr	r0, [sp, #40]	; 0x28
     db2:	b340      	cbz	r0, e06 <CONFIG_ISR_STACK_SIZE+0x606>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     db4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     db8:	9300      	str	r3, [sp, #0]
     dba:	aa0c      	add	r2, sp, #48	; 0x30
     dbc:	ab04      	add	r3, sp, #16
     dbe:	2100      	movs	r1, #0
     dc0:	f004 f991 	bl	50e6 <encode_uint>
				conv->altform_0c = true;
     dc4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     dc8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     dcc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     dd0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     dd4:	4682      	mov	sl, r0
				conv->altform_0c = true;
     dd6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     dda:	2600      	movs	r6, #0
				goto prec_int_pad0;
     ddc:	e746      	b.n	c6c <CONFIG_ISR_STACK_SIZE+0x46c>
				store_count(conv, value->ptr, count);
     dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     de0:	2907      	cmp	r1, #7
     de2:	f63f aee1 	bhi.w	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
     de6:	e8df f001 	tbb	[pc, r1]
     dea:	040c      	.short	0x040c
     dec:	08080c06 	.word	0x08080c06
     df0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     df2:	701d      	strb	r5, [r3, #0]
		break;
     df4:	e6d8      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
		*(short *)dp = (short)count;
     df6:	801d      	strh	r5, [r3, #0]
		break;
     df8:	e6d6      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
		*(intmax_t *)dp = (intmax_t)count;
     dfa:	17ea      	asrs	r2, r5, #31
     dfc:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     e00:	e6d2      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e02:	601d      	str	r5, [r3, #0]
		break;
     e04:	e6d0      	b.n	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			bps = "(nil)";
     e06:	f8df a0c8 	ldr.w	sl, [pc, #200]	; ed0 <CONFIG_ISR_STACK_SIZE+0x6d0>
     e0a:	4606      	mov	r6, r0
			bpe = bps + 5;
     e0c:	f10a 0805 	add.w	r8, sl, #5
     e10:	e78e      	b.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
		} else if (conv->altform_0) {
     e12:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     e14:	bf48      	it	mi
     e16:	3301      	addmi	r3, #1
     e18:	e793      	b.n	d42 <CONFIG_ISR_STACK_SIZE+0x542>
					OUTC(pad);
     e1a:	4618      	mov	r0, r3
     e1c:	9303      	str	r3, [sp, #12]
     e1e:	4659      	mov	r1, fp
     e20:	9b02      	ldr	r3, [sp, #8]
     e22:	4798      	blx	r3
     e24:	2800      	cmp	r0, #0
     e26:	9b03      	ldr	r3, [sp, #12]
     e28:	da04      	bge.n	e34 <CONFIG_ISR_STACK_SIZE+0x634>
#undef OUTS
#undef OUTC
}
     e2a:	b011      	add	sp, #68	; 0x44
     e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     e30:	2320      	movs	r3, #32
     e32:	444d      	add	r5, r9
     e34:	464a      	mov	r2, r9
				while (width-- > 0) {
     e36:	2a00      	cmp	r2, #0
     e38:	eba5 0109 	sub.w	r1, r5, r9
     e3c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     e40:	dceb      	bgt.n	e1a <CONFIG_ISR_STACK_SIZE+0x61a>
     e42:	460d      	mov	r5, r1
		if (sign != 0) {
     e44:	b136      	cbz	r6, e54 <CONFIG_ISR_STACK_SIZE+0x654>
			OUTC(sign);
     e46:	9b02      	ldr	r3, [sp, #8]
     e48:	4659      	mov	r1, fp
     e4a:	4630      	mov	r0, r6
     e4c:	4798      	blx	r3
     e4e:	2800      	cmp	r0, #0
     e50:	dbeb      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     e52:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     e54:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     e58:	06d9      	lsls	r1, r3, #27
     e5a:	d401      	bmi.n	e60 <CONFIG_ISR_STACK_SIZE+0x660>
     e5c:	071a      	lsls	r2, r3, #28
     e5e:	d506      	bpl.n	e6e <CONFIG_ISR_STACK_SIZE+0x66e>
				OUTC('0');
     e60:	9b02      	ldr	r3, [sp, #8]
     e62:	4659      	mov	r1, fp
     e64:	2030      	movs	r0, #48	; 0x30
     e66:	4798      	blx	r3
     e68:	2800      	cmp	r0, #0
     e6a:	dbde      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     e6c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     e6e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     e72:	06db      	lsls	r3, r3, #27
     e74:	d507      	bpl.n	e86 <CONFIG_ISR_STACK_SIZE+0x686>
				OUTC(conv->specifier);
     e76:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     e7a:	9b02      	ldr	r3, [sp, #8]
     e7c:	4659      	mov	r1, fp
     e7e:	4798      	blx	r3
     e80:	2800      	cmp	r0, #0
     e82:	dbd2      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     e84:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     e86:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     e88:	442e      	add	r6, r5
     e8a:	1b73      	subs	r3, r6, r5
     e8c:	2b00      	cmp	r3, #0
     e8e:	dc16      	bgt.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
			OUTS(bps, bpe);
     e90:	9802      	ldr	r0, [sp, #8]
     e92:	4643      	mov	r3, r8
     e94:	4652      	mov	r2, sl
     e96:	4659      	mov	r1, fp
     e98:	f004 f96b 	bl	5172 <outs>
     e9c:	2800      	cmp	r0, #0
     e9e:	dbc4      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     ea0:	4405      	add	r5, r0
		while (width > 0) {
     ea2:	44a9      	add	r9, r5
     ea4:	eba9 0305 	sub.w	r3, r9, r5
     ea8:	2b00      	cmp	r3, #0
     eaa:	f77f ae7d 	ble.w	ba8 <CONFIG_ISR_STACK_SIZE+0x3a8>
			OUTC(' ');
     eae:	9b02      	ldr	r3, [sp, #8]
     eb0:	4659      	mov	r1, fp
     eb2:	2020      	movs	r0, #32
     eb4:	4798      	blx	r3
     eb6:	2800      	cmp	r0, #0
     eb8:	dbb7      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     eba:	3501      	adds	r5, #1
			--width;
     ebc:	e7f2      	b.n	ea4 <CONFIG_ISR_STACK_SIZE+0x6a4>
				OUTC('0');
     ebe:	9b02      	ldr	r3, [sp, #8]
     ec0:	4659      	mov	r1, fp
     ec2:	2030      	movs	r0, #48	; 0x30
     ec4:	4798      	blx	r3
     ec6:	2800      	cmp	r0, #0
     ec8:	dbaf      	blt.n	e2a <CONFIG_ISR_STACK_SIZE+0x62a>
     eca:	3501      	adds	r5, #1
     ecc:	e7dd      	b.n	e8a <CONFIG_ISR_STACK_SIZE+0x68a>
     ece:	bf00      	nop
     ed0:	0000693c 	.word	0x0000693c

00000ed4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ed8:	4605      	mov	r5, r0
     eda:	f04f 0320 	mov.w	r3, #32
     ede:	f3ef 8611 	mrs	r6, BASEPRI
     ee2:	f383 8812 	msr	BASEPRI_MAX, r3
     ee6:	f3bf 8f6f 	isb	sy
	return list->head;
     eea:	4b0e      	ldr	r3, [pc, #56]	; (f24 <pm_state_notify+0x50>)
     eec:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     eee:	b19c      	cbz	r4, f18 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     ef0:	4f0d      	ldr	r7, [pc, #52]	; (f28 <pm_state_notify+0x54>)
     ef2:	f8df 8038 	ldr.w	r8, [pc, #56]	; f2c <pm_state_notify+0x58>
     ef6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
     efa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     efe:	2d00      	cmp	r5, #0
     f00:	bf08      	it	eq
     f02:	4613      	moveq	r3, r2
		if (callback) {
     f04:	b12b      	cbz	r3, f12 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f06:	f898 2014 	ldrb.w	r2, [r8, #20]
     f0a:	fb09 f202 	mul.w	r2, r9, r2
     f0e:	5cb8      	ldrb	r0, [r7, r2]
     f10:	4798      	blx	r3
	return node->next;
     f12:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f14:	2c00      	cmp	r4, #0
     f16:	d1f0      	bne.n	efa <pm_state_notify+0x26>
	__asm__ volatile(
     f18:	f386 8811 	msr	BASEPRI, r6
     f1c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f24:	20000438 	.word	0x20000438
     f28:	20000440 	.word	0x20000440
     f2c:	20000638 	.word	0x20000638

00000f30 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     f30:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
     f32:	2301      	movs	r3, #1
     f34:	f000 001f 	and.w	r0, r0, #31
     f38:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     f3c:	4b07      	ldr	r3, [pc, #28]	; (f5c <atomic_clear_bit.constprop.0+0x2c>)
     f3e:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     f42:	43c0      	mvns	r0, r0
     f44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f48:	e853 2f00 	ldrex	r2, [r3]
     f4c:	4002      	ands	r2, r0
     f4e:	e843 2100 	strex	r1, r2, [r3]
     f52:	2900      	cmp	r1, #0
     f54:	d1f8      	bne.n	f48 <atomic_clear_bit.constprop.0+0x18>
     f56:	f3bf 8f5b 	dmb	ish
}
     f5a:	4770      	bx	lr
     f5c:	2000044c 	.word	0x2000044c

00000f60 <pm_system_resume>:

void pm_system_resume(void)
{
     f60:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
     f62:	4b1d      	ldr	r3, [pc, #116]	; (fd8 <pm_system_resume+0x78>)
     f64:	7d1c      	ldrb	r4, [r3, #20]
     f66:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
     f6a:	f004 031f 	and.w	r3, r4, #31
     f6e:	2201      	movs	r2, #1
     f70:	409a      	lsls	r2, r3
     f72:	4b1a      	ldr	r3, [pc, #104]	; (fdc <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     f74:	0961      	lsrs	r1, r4, #5
{
     f76:	b085      	sub	sp, #20
     f78:	43d0      	mvns	r0, r2
     f7a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     f7e:	e853 1f00 	ldrex	r1, [r3]
     f82:	ea01 0500 	and.w	r5, r1, r0
     f86:	e843 5c00 	strex	ip, r5, [r3]
     f8a:	f1bc 0f00 	cmp.w	ip, #0
     f8e:	d1f6      	bne.n	f7e <pm_system_resume+0x1e>
     f90:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     f94:	4211      	tst	r1, r2
     f96:	d017      	beq.n	fc8 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
     f98:	4d11      	ldr	r5, [pc, #68]	; (fe0 <pm_system_resume+0x80>)
     f9a:	220c      	movs	r2, #12
     f9c:	fb02 5204 	mla	r2, r2, r4, r5
     fa0:	ca07      	ldmia	r2, {r0, r1, r2}
     fa2:	ab01      	add	r3, sp, #4
     fa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
     fa8:	4a0e      	ldr	r2, [pc, #56]	; (fe4 <pm_system_resume+0x84>)
     faa:	b17a      	cbz	r2, fcc <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
     fac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     fb0:	f004 f964 	bl	527c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     fb4:	2000      	movs	r0, #0
     fb6:	f7ff ff8d 	bl	ed4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     fba:	230c      	movs	r3, #12
     fbc:	435c      	muls	r4, r3
     fbe:	192a      	adds	r2, r5, r4
     fc0:	2300      	movs	r3, #0
     fc2:	512b      	str	r3, [r5, r4]
     fc4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     fc8:	b005      	add	sp, #20
     fca:	bd30      	pop	{r4, r5, pc}
     fcc:	f382 8811 	msr	BASEPRI, r2
     fd0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     fd4:	e7ee      	b.n	fb4 <pm_system_resume+0x54>
     fd6:	bf00      	nop
     fd8:	20000638 	.word	0x20000638
     fdc:	20000450 	.word	0x20000450
     fe0:	20000440 	.word	0x20000440
     fe4:	0000527d 	.word	0x0000527d

00000fe8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
     fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
     fec:	4b35      	ldr	r3, [pc, #212]	; (10c4 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     fee:	4a36      	ldr	r2, [pc, #216]	; (10c8 <pm_system_suspend+0xe0>)
     ff0:	7d1c      	ldrb	r4, [r3, #20]
     ff2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
     ff6:	0963      	lsrs	r3, r4, #5
     ff8:	ea4f 0983 	mov.w	r9, r3, lsl #2
     ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1000:	4d32      	ldr	r5, [pc, #200]	; (10cc <pm_system_suspend+0xe4>)
    1002:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1006:	f004 081f 	and.w	r8, r4, #31
    100a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    100e:	f013 0f01 	tst.w	r3, #1
{
    1012:	b085      	sub	sp, #20
    1014:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1016:	d10a      	bne.n	102e <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1018:	4601      	mov	r1, r0
    101a:	4620      	mov	r0, r4
    101c:	f000 f876 	bl	110c <pm_policy_next_state>
		if (info != NULL) {
    1020:	b128      	cbz	r0, 102e <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    1022:	c807      	ldmia	r0, {r0, r1, r2}
    1024:	230c      	movs	r3, #12
    1026:	fb03 5304 	mla	r3, r3, r4, r5
    102a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    102e:	230c      	movs	r3, #12
    1030:	4363      	muls	r3, r4
    1032:	18ea      	adds	r2, r5, r3
    1034:	5cee      	ldrb	r6, [r5, r3]
    1036:	b936      	cbnz	r6, 1046 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1038:	4620      	mov	r0, r4
    103a:	f7ff ff79 	bl	f30 <atomic_clear_bit.constprop.0>
		ret = false;
    103e:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1040:	b005      	add	sp, #20
    1042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    1046:	1c7b      	adds	r3, r7, #1
    1048:	d00f      	beq.n	106a <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
    104a:	f8d2 c008 	ldr.w	ip, [r2, #8]
    104e:	4820      	ldr	r0, [pc, #128]	; (10d0 <pm_system_suspend+0xe8>)
    1050:	4a20      	ldr	r2, [pc, #128]	; (10d4 <pm_system_suspend+0xec>)
    1052:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    1056:	2100      	movs	r1, #0
    1058:	2300      	movs	r3, #0
    105a:	fbec 0106 	umlal	r0, r1, ip, r6
    105e:	f7ff f83d 	bl	dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1062:	2101      	movs	r1, #1
    1064:	1a38      	subs	r0, r7, r0
    1066:	f005 f8ca 	bl	61fe <z_set_timeout_expiry>
	k_sched_lock();
    106a:	f003 fad3 	bl	4614 <k_sched_lock>
	pm_state_notify(true);
    106e:	2001      	movs	r0, #1
    1070:	f7ff ff30 	bl	ed4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1074:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1078:	2301      	movs	r3, #1
    107a:	fa03 f808 	lsl.w	r8, r3, r8
    107e:	4b16      	ldr	r3, [pc, #88]	; (10d8 <pm_system_suspend+0xf0>)
    1080:	4499      	add	r9, r3
    1082:	e859 3f00 	ldrex	r3, [r9]
    1086:	ea43 0308 	orr.w	r3, r3, r8
    108a:	e849 3200 	strex	r2, r3, [r9]
    108e:	2a00      	cmp	r2, #0
    1090:	d1f7      	bne.n	1082 <pm_system_suspend+0x9a>
    1092:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    1096:	230c      	movs	r3, #12
    1098:	fb03 5504 	mla	r5, r3, r4, r5
    109c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    10a0:	ab01      	add	r3, sp, #4
    10a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    10a6:	4a0d      	ldr	r2, [pc, #52]	; (10dc <pm_system_suspend+0xf4>)
    10a8:	b11a      	cbz	r2, 10b2 <pm_system_suspend+0xca>
		pm_power_state_set(info);
    10aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    10ae:	f004 f8d2 	bl	5256 <pm_power_state_set>
	pm_system_resume();
    10b2:	f7ff ff55 	bl	f60 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    10b6:	4620      	mov	r0, r4
    10b8:	f7ff ff3a 	bl	f30 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    10bc:	f003 fc30 	bl	4920 <k_sched_unlock>
	bool ret = true;
    10c0:	2001      	movs	r0, #1
    10c2:	e7bd      	b.n	1040 <pm_system_suspend+0x58>
    10c4:	20000638 	.word	0x20000638
    10c8:	2000044c 	.word	0x2000044c
    10cc:	20000440 	.word	0x20000440
    10d0:	000f423f 	.word	0x000f423f
    10d4:	000f4240 	.word	0x000f4240
    10d8:	20000450 	.word	0x20000450
    10dc:	00005257 	.word	0x00005257

000010e0 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    10e0:	4b05      	ldr	r3, [pc, #20]	; (10f8 <pm_constraint_get+0x18>)
    10e2:	f3bf 8f5b 	dmb	ish
    10e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    10ea:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    10ee:	fab0 f080 	clz	r0, r0
    10f2:	0940      	lsrs	r0, r0, #5
    10f4:	4770      	bx	lr
    10f6:	bf00      	nop
    10f8:	20000454 	.word	0x20000454

000010fc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    10fc:	b908      	cbnz	r0, 1102 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    10fe:	4b02      	ldr	r3, [pc, #8]	; (1108 <pm_state_cpu_get_all+0xc>)
    1100:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1102:	2000      	movs	r0, #0
    1104:	4770      	bx	lr
    1106:	bf00      	nop
    1108:	00006608 	.word	0x00006608

0000110c <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1110:	b085      	sub	sp, #20
    1112:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1114:	a903      	add	r1, sp, #12
    1116:	f7ff fff1 	bl	10fc <pm_state_cpu_get_all>
    111a:	f8df a074 	ldr.w	sl, [pc, #116]	; 1190 <pm_policy_next_state+0x84>
    111e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1194 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1122:	1e44      	subs	r4, r0, #1
    1124:	b224      	sxth	r4, r4
    1126:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    112a:	f04f 0900 	mov.w	r9, #0
    112e:	1c63      	adds	r3, r4, #1
    1130:	d104      	bne.n	113c <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    1132:	2500      	movs	r5, #0
}
    1134:	4628      	mov	r0, r5
    1136:	b005      	add	sp, #20
    1138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    113c:	9a03      	ldr	r2, [sp, #12]
    113e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1142:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    1146:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    114a:	f7ff ffc9 	bl	10e0 <pm_constraint_get>
    114e:	b1e0      	cbz	r0, 118a <pm_policy_next_state+0x7e>
    1150:	6868      	ldr	r0, [r5, #4]
    1152:	f04f 0b00 	mov.w	fp, #0
    1156:	46d4      	mov	ip, sl
    1158:	4659      	mov	r1, fp
    115a:	fbe0 c107 	umlal	ip, r1, r0, r7
    115e:	4642      	mov	r2, r8
    1160:	464b      	mov	r3, r9
    1162:	4660      	mov	r0, ip
    1164:	f7fe ffba 	bl	dc <__aeabi_uldivmod>
    1168:	9001      	str	r0, [sp, #4]
    116a:	68a8      	ldr	r0, [r5, #8]
    116c:	46d4      	mov	ip, sl
    116e:	4659      	mov	r1, fp
    1170:	fbe0 c107 	umlal	ip, r1, r0, r7
    1174:	4642      	mov	r2, r8
    1176:	464b      	mov	r3, r9
    1178:	4660      	mov	r0, ip
    117a:	f7fe ffaf 	bl	dc <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    117e:	1c72      	adds	r2, r6, #1
    1180:	d0d8      	beq.n	1134 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    1182:	9b01      	ldr	r3, [sp, #4]
    1184:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1186:	42b0      	cmp	r0, r6
    1188:	d9d4      	bls.n	1134 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    118a:	3c01      	subs	r4, #1
    118c:	b224      	sxth	r4, r4
    118e:	e7ce      	b.n	112e <pm_policy_next_state+0x22>
    1190:	000f423f 	.word	0x000f423f
    1194:	000f4240 	.word	0x000f4240

00001198 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1198:	4901      	ldr	r1, [pc, #4]	; (11a0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    119a:	2210      	movs	r2, #16
	str	r2, [r1]
    119c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    119e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    11a0:	e000ed10 	.word	0xe000ed10

000011a4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    11a4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    11a6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    11a8:	f380 8811 	msr	BASEPRI, r0
	isb
    11ac:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    11b0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    11b4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    11b6:	b662      	cpsie	i
	isb
    11b8:	f3bf 8f6f 	isb	sy

	bx	lr
    11bc:	4770      	bx	lr
    11be:	bf00      	nop

000011c0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    11c0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    11c2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    11c4:	f381 8811 	msr	BASEPRI, r1

	wfe
    11c8:	bf20      	wfe

	msr	BASEPRI, r0
    11ca:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    11ce:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    11d0:	4770      	bx	lr
    11d2:	bf00      	nop

000011d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    11d4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    11d6:	2b00      	cmp	r3, #0
    11d8:	db08      	blt.n	11ec <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11da:	2201      	movs	r2, #1
    11dc:	f000 001f 	and.w	r0, r0, #31
    11e0:	fa02 f000 	lsl.w	r0, r2, r0
    11e4:	095b      	lsrs	r3, r3, #5
    11e6:	4a02      	ldr	r2, [pc, #8]	; (11f0 <arch_irq_enable+0x1c>)
    11e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    11ec:	4770      	bx	lr
    11ee:	bf00      	nop
    11f0:	e000e100 	.word	0xe000e100

000011f4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    11f4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    11f6:	2b00      	cmp	r3, #0
    11f8:	db0d      	blt.n	1216 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11fa:	2201      	movs	r2, #1
    11fc:	095b      	lsrs	r3, r3, #5
    11fe:	f000 001f 	and.w	r0, r0, #31
    1202:	fa02 f000 	lsl.w	r0, r2, r0
    1206:	3320      	adds	r3, #32
    1208:	4a03      	ldr	r2, [pc, #12]	; (1218 <arch_irq_disable+0x24>)
    120a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    120e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1212:	f3bf 8f6f 	isb	sy
}
    1216:	4770      	bx	lr
    1218:	e000e100 	.word	0xe000e100

0000121c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    121c:	4b05      	ldr	r3, [pc, #20]	; (1234 <arch_irq_is_enabled+0x18>)
    121e:	0942      	lsrs	r2, r0, #5
    1220:	f000 001f 	and.w	r0, r0, #31
    1224:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1228:	2301      	movs	r3, #1
    122a:	fa03 f000 	lsl.w	r0, r3, r0
}
    122e:	4010      	ands	r0, r2
    1230:	4770      	bx	lr
    1232:	bf00      	nop
    1234:	e000e100 	.word	0xe000e100

00001238 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1238:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    123a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    123c:	bfa8      	it	ge
    123e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1242:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1246:	bfb8      	it	lt
    1248:	4b06      	ldrlt	r3, [pc, #24]	; (1264 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    124a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    124e:	bfac      	ite	ge
    1250:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1254:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1258:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    125a:	bfb4      	ite	lt
    125c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    125e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1262:	4770      	bx	lr
    1264:	e000ed14 	.word	0xe000ed14

00001268 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1268:	bf30      	wfi
    b z_SysNmiOnReset
    126a:	f7ff bffd 	b.w	1268 <z_SysNmiOnReset>
    126e:	bf00      	nop

00001270 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1270:	4a0f      	ldr	r2, [pc, #60]	; (12b0 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1272:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1274:	4b0f      	ldr	r3, [pc, #60]	; (12b4 <z_arm_prep_c+0x44>)
    1276:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    127a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    127c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1280:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1284:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1288:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    128c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1290:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1294:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1298:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    129c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    12a0:	f002 fe76 	bl	3f90 <z_bss_zero>
	z_data_copy();
    12a4:	f003 fc70 	bl	4b88 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    12a8:	f000 f9ca 	bl	1640 <z_arm_interrupt_init>
	z_cstart();
    12ac:	f002 fe7a 	bl	3fa4 <z_cstart>
    12b0:	00000000 	.word	0x00000000
    12b4:	e000ed00 	.word	0xe000ed00

000012b8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    12b8:	4a09      	ldr	r2, [pc, #36]	; (12e0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    12ba:	490a      	ldr	r1, [pc, #40]	; (12e4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    12bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    12be:	6809      	ldr	r1, [r1, #0]
    12c0:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    12c2:	4909      	ldr	r1, [pc, #36]	; (12e8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    12c4:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    12c6:	684b      	ldr	r3, [r1, #4]
    12c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    12cc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    12ce:	2300      	movs	r3, #0
    12d0:	f383 8811 	msr	BASEPRI, r3
    12d4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    12d8:	6893      	ldr	r3, [r2, #8]
}
    12da:	6f98      	ldr	r0, [r3, #120]	; 0x78
    12dc:	4770      	bx	lr
    12de:	bf00      	nop
    12e0:	20000638 	.word	0x20000638
    12e4:	000067fc 	.word	0x000067fc
    12e8:	e000ed00 	.word	0xe000ed00

000012ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    12ec:	4912      	ldr	r1, [pc, #72]	; (1338 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    12ee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    12f0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    12f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    12f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    12fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    12fe:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1300:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1304:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1308:	4f0c      	ldr	r7, [pc, #48]	; (133c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    130a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    130e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1310:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1312:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1314:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1316:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1318:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    131a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    131e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1320:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1322:	f000 f9cf 	bl	16c4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1326:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    132a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    132e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1332:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1336:	4770      	bx	lr
    ldr r1, =_kernel
    1338:	20000638 	.word	0x20000638
    ldr v4, =_SCS_ICSR
    133c:	e000ed04 	.word	0xe000ed04

00001340 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1340:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1344:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1346:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    134a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    134e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1350:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1354:	2902      	cmp	r1, #2
    beq _oops
    1356:	d0ff      	beq.n	1358 <_oops>

00001358 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1358:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    135a:	f003 ff23 	bl	51a4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    135e:	bd01      	pop	{r0, pc}

00001360 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1360:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1364:	9b00      	ldr	r3, [sp, #0]
    1366:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    136a:	490a      	ldr	r1, [pc, #40]	; (1394 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    136c:	9b01      	ldr	r3, [sp, #4]
    136e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1372:	9b02      	ldr	r3, [sp, #8]
    1374:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1378:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    137c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1380:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1384:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1388:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    138a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    138c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    138e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1390:	4770      	bx	lr
    1392:	bf00      	nop
    1394:	000050d3 	.word	0x000050d3

00001398 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1398:	4a09      	ldr	r2, [pc, #36]	; (13c0 <z_check_thread_stack_fail+0x28>)
{
    139a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    139c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    139e:	b170      	cbz	r0, 13be <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    13a0:	f113 0f16 	cmn.w	r3, #22
    13a4:	6e40      	ldr	r0, [r0, #100]	; 0x64
    13a6:	d005      	beq.n	13b4 <z_check_thread_stack_fail+0x1c>
    13a8:	f1a0 0220 	sub.w	r2, r0, #32
    13ac:	429a      	cmp	r2, r3
    13ae:	d805      	bhi.n	13bc <z_check_thread_stack_fail+0x24>
    13b0:	4283      	cmp	r3, r0
    13b2:	d203      	bcs.n	13bc <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    13b4:	4281      	cmp	r1, r0
    13b6:	bf28      	it	cs
    13b8:	2000      	movcs	r0, #0
    13ba:	4770      	bx	lr
    13bc:	2000      	movs	r0, #0
}
    13be:	4770      	bx	lr
    13c0:	20000638 	.word	0x20000638

000013c4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    13c4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    13c6:	4b09      	ldr	r3, [pc, #36]	; (13ec <arch_switch_to_main_thread+0x28>)
    13c8:	6098      	str	r0, [r3, #8]
{
    13ca:	460d      	mov	r5, r1
    13cc:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    13ce:	f000 f979 	bl	16c4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    13d2:	4620      	mov	r0, r4
    13d4:	f385 8809 	msr	PSP, r5
    13d8:	2100      	movs	r1, #0
    13da:	b663      	cpsie	if
    13dc:	f381 8811 	msr	BASEPRI, r1
    13e0:	f3bf 8f6f 	isb	sy
    13e4:	2200      	movs	r2, #0
    13e6:	2300      	movs	r3, #0
    13e8:	f003 fe73 	bl	50d2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    13ec:	20000638 	.word	0x20000638

000013f0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    13f0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    13f2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    13f4:	4a0b      	ldr	r2, [pc, #44]	; (1424 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    13f6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    13f8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    13fa:	bf1e      	ittt	ne
	movne	r1, #0
    13fc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    13fe:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1400:	f004 fdd4 	blne	5fac <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1404:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1406:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    140a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    140e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1412:	4905      	ldr	r1, [pc, #20]	; (1428 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1414:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1416:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1418:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    141a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    141e:	4903      	ldr	r1, [pc, #12]	; (142c <_isr_wrapper+0x3c>)
	bx r1
    1420:	4708      	bx	r1
    1422:	0000      	.short	0x0000
	ldr r2, =_kernel
    1424:	20000638 	.word	0x20000638
	ldr r1, =_sw_isr_table
    1428:	0000643c 	.word	0x0000643c
	ldr r1, =z_arm_int_exit
    142c:	00001431 	.word	0x00001431

00001430 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1430:	4b04      	ldr	r3, [pc, #16]	; (1444 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1432:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1434:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1436:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1438:	d003      	beq.n	1442 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    143a:	4903      	ldr	r1, [pc, #12]	; (1448 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    143c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1440:	600a      	str	r2, [r1, #0]

00001442 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1442:	4770      	bx	lr
	ldr r3, =_kernel
    1444:	20000638 	.word	0x20000638
	ldr r1, =_SCS_ICSR
    1448:	e000ed04 	.word	0xe000ed04

0000144c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    144c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    144e:	4b19      	ldr	r3, [pc, #100]	; (14b4 <mem_manage_fault+0x68>)
{
    1450:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1458:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    145a:	0790      	lsls	r0, r2, #30
    145c:	d519      	bpl.n	1492 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    145e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1462:	0612      	lsls	r2, r2, #24
    1464:	d515      	bpl.n	1492 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1466:	b119      	cbz	r1, 1470 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    146a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    146e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1476:	06d1      	lsls	r1, r2, #27
    1478:	d40e      	bmi.n	1498 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    147c:	079a      	lsls	r2, r3, #30
    147e:	d40b      	bmi.n	1498 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1480:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1482:	4a0c      	ldr	r2, [pc, #48]	; (14b4 <mem_manage_fault+0x68>)
    1484:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1486:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    148a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    148c:	2300      	movs	r3, #0
    148e:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1490:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    1492:	f06f 0015 	mvn.w	r0, #21
    1496:	e7eb      	b.n	1470 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1498:	4b06      	ldr	r3, [pc, #24]	; (14b4 <mem_manage_fault+0x68>)
    149a:	685b      	ldr	r3, [r3, #4]
    149c:	051b      	lsls	r3, r3, #20
    149e:	d5ef      	bpl.n	1480 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    14a0:	4629      	mov	r1, r5
    14a2:	f7ff ff79 	bl	1398 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    14a6:	2800      	cmp	r0, #0
    14a8:	d0ea      	beq.n	1480 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    14aa:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    14ae:	2002      	movs	r0, #2
    14b0:	e7e7      	b.n	1482 <mem_manage_fault+0x36>
    14b2:	bf00      	nop
    14b4:	e000ed00 	.word	0xe000ed00

000014b8 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    14b8:	4b0d      	ldr	r3, [pc, #52]	; (14f0 <bus_fault.constprop.0+0x38>)
    14ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    14bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    14be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14c0:	0592      	lsls	r2, r2, #22
    14c2:	d508      	bpl.n	14d6 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    14c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    14c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14c8:	0412      	lsls	r2, r2, #16
    14ca:	d504      	bpl.n	14d6 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    14cc:	b118      	cbz	r0, 14d6 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    14ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    14d4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    14d6:	4b06      	ldr	r3, [pc, #24]	; (14f0 <bus_fault.constprop.0+0x38>)
    14d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    14da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14dc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    14de:	bf58      	it	pl
    14e0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    14e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    14e4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    14e6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    14ea:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    14ec:	7008      	strb	r0, [r1, #0]

	return reason;
}
    14ee:	4770      	bx	lr
    14f0:	e000ed00 	.word	0xe000ed00

000014f4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    14f4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    14f6:	4b48      	ldr	r3, [pc, #288]	; (1618 <z_arm_fault+0x124>)
    14f8:	685b      	ldr	r3, [r3, #4]
{
    14fa:	b08a      	sub	sp, #40	; 0x28
    14fc:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    14fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1502:	2600      	movs	r6, #0
    1504:	f386 8811 	msr	BASEPRI, r6
    1508:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    150c:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1510:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1514:	d111      	bne.n	153a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1516:	f002 010c 	and.w	r1, r2, #12
    151a:	2908      	cmp	r1, #8
    151c:	d00d      	beq.n	153a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    151e:	0711      	lsls	r1, r2, #28
    1520:	d401      	bmi.n	1526 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1522:	4605      	mov	r5, r0
			*nested_exc = true;
    1524:	2601      	movs	r6, #1
	*recoverable = false;
    1526:	2200      	movs	r2, #0
	switch (fault) {
    1528:	3b03      	subs	r3, #3
	*recoverable = false;
    152a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    152e:	2b03      	cmp	r3, #3
    1530:	d86b      	bhi.n	160a <z_arm_fault+0x116>
    1532:	e8df f003 	tbb	[pc, r3]
    1536:	5504      	.short	0x5504
    1538:	5d59      	.short	0x5d59
		return NULL;
    153a:	4635      	mov	r5, r6
    153c:	e7f3      	b.n	1526 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    153e:	4b36      	ldr	r3, [pc, #216]	; (1618 <z_arm_fault+0x124>)
    1540:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1542:	f014 0402 	ands.w	r4, r4, #2
    1546:	d160      	bne.n	160a <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    154a:	2a00      	cmp	r2, #0
    154c:	db15      	blt.n	157a <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1550:	0052      	lsls	r2, r2, #1
    1552:	d512      	bpl.n	157a <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    1554:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1556:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    155a:	f64d 7202 	movw	r2, #57090	; 0xdf02
    155e:	4291      	cmp	r1, r2
    1560:	d00a      	beq.n	1578 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    1562:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    1566:	b30a      	cbz	r2, 15ac <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1568:	f10d 0207 	add.w	r2, sp, #7
    156c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    156e:	4628      	mov	r0, r5
    1570:	f7ff ff6c 	bl	144c <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    1574:	4604      	mov	r4, r0
		break;
    1576:	e000      	b.n	157a <z_arm_fault+0x86>
			reason = esf->basic.r0;
    1578:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    157a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    157e:	b99b      	cbnz	r3, 15a8 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1580:	2220      	movs	r2, #32
    1582:	4629      	mov	r1, r5
    1584:	a802      	add	r0, sp, #8
    1586:	f003 fe42 	bl	520e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    158a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    158c:	2e00      	cmp	r6, #0
    158e:	d03e      	beq.n	160e <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1590:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1594:	b922      	cbnz	r2, 15a0 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1596:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    159a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    159e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    15a0:	a902      	add	r1, sp, #8
    15a2:	4620      	mov	r0, r4
    15a4:	f003 fdfc 	bl	51a0 <z_arm_fatal_error>
}
    15a8:	b00a      	add	sp, #40	; 0x28
    15aa:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    15ac:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    15b0:	b12a      	cbz	r2, 15be <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    15b2:	f10d 0107 	add.w	r1, sp, #7
    15b6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    15b8:	f7ff ff7e 	bl	14b8 <bus_fault.constprop.0>
    15bc:	e7da      	b.n	1574 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    15be:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    15c0:	b292      	uxth	r2, r2
    15c2:	2a00      	cmp	r2, #0
    15c4:	d0d9      	beq.n	157a <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    15c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    15ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    15cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    15ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    15d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    15d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15d4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    15d8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    15dc:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    15de:	e7cc      	b.n	157a <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    15e0:	f10d 0207 	add.w	r2, sp, #7
    15e4:	2100      	movs	r1, #0
    15e6:	e7c2      	b.n	156e <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    15e8:	f10d 0107 	add.w	r1, sp, #7
    15ec:	2000      	movs	r0, #0
    15ee:	e7e3      	b.n	15b8 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15f0:	4b09      	ldr	r3, [pc, #36]	; (1618 <z_arm_fault+0x124>)
    15f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    15f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    15f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    15f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    15fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    15fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    15fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1600:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1604:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1608:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    160a:	2400      	movs	r4, #0
    160c:	e7b5      	b.n	157a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    160e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1612:	f023 0301 	bic.w	r3, r3, #1
    1616:	e7c2      	b.n	159e <z_arm_fault+0xaa>
    1618:	e000ed00 	.word	0xe000ed00

0000161c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    161c:	4a02      	ldr	r2, [pc, #8]	; (1628 <z_arm_fault_init+0xc>)
    161e:	6953      	ldr	r3, [r2, #20]
    1620:	f043 0310 	orr.w	r3, r3, #16
    1624:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1626:	4770      	bx	lr
    1628:	e000ed00 	.word	0xe000ed00

0000162c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    162c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1630:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1634:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1636:	4672      	mov	r2, lr
	bl z_arm_fault
    1638:	f7ff ff5c 	bl	14f4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    163c:	bd01      	pop	{r0, pc}
    163e:	bf00      	nop

00001640 <z_arm_interrupt_init>:
    1640:	4804      	ldr	r0, [pc, #16]	; (1654 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1642:	2300      	movs	r3, #0
    1644:	2120      	movs	r1, #32
    1646:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1648:	3301      	adds	r3, #1
    164a:	2b27      	cmp	r3, #39	; 0x27
    164c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1650:	d1f9      	bne.n	1646 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1652:	4770      	bx	lr
    1654:	e000e100 	.word	0xe000e100

00001658 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1658:	f004 fdf6 	bl	6248 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    165c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    165e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1662:	4808      	ldr	r0, [pc, #32]	; (1684 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1664:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1668:	1840      	adds	r0, r0, r1
    msr PSP, r0
    166a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    166e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1672:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1674:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1676:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    167a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    167e:	f7ff fdf7 	bl	1270 <z_arm_prep_c>
    1682:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    1684:	20001040 	.word	0x20001040

00001688 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1688:	4b06      	ldr	r3, [pc, #24]	; (16a4 <z_impl_k_thread_abort+0x1c>)
    168a:	689b      	ldr	r3, [r3, #8]
    168c:	4283      	cmp	r3, r0
    168e:	d107      	bne.n	16a0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1690:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1694:	b123      	cbz	r3, 16a0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1696:	4a04      	ldr	r2, [pc, #16]	; (16a8 <z_impl_k_thread_abort+0x20>)
    1698:	6853      	ldr	r3, [r2, #4]
    169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    169e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    16a0:	f003 ba0e 	b.w	4ac0 <z_thread_abort>
    16a4:	20000638 	.word	0x20000638
    16a8:	e000ed00 	.word	0xe000ed00

000016ac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    16ac:	4b02      	ldr	r3, [pc, #8]	; (16b8 <z_arm_configure_static_mpu_regions+0xc>)
    16ae:	4a03      	ldr	r2, [pc, #12]	; (16bc <z_arm_configure_static_mpu_regions+0x10>)
    16b0:	4803      	ldr	r0, [pc, #12]	; (16c0 <z_arm_configure_static_mpu_regions+0x14>)
    16b2:	2101      	movs	r1, #1
    16b4:	f000 b86e 	b.w	1794 <arm_core_mpu_configure_static_mpu_regions>
    16b8:	20010000 	.word	0x20010000
    16bc:	20000000 	.word	0x20000000
    16c0:	00006608 	.word	0x00006608

000016c4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    16c4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    16c6:	4b05      	ldr	r3, [pc, #20]	; (16dc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    16c8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    16ca:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    16cc:	4a04      	ldr	r2, [pc, #16]	; (16e0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    16ce:	2120      	movs	r1, #32
    16d0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    16d4:	4618      	mov	r0, r3
    16d6:	2101      	movs	r1, #1
    16d8:	f000 b866 	b.w	17a8 <arm_core_mpu_configure_dynamic_mpu_regions>
    16dc:	20000470 	.word	0x20000470
    16e0:	150b0000 	.word	0x150b0000

000016e4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    16e4:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    16e6:	4f1f      	ldr	r7, [pc, #124]	; (1764 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    16e8:	2600      	movs	r6, #0
    16ea:	428e      	cmp	r6, r1
    16ec:	db01      	blt.n	16f2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    16ee:	4610      	mov	r0, r2
    16f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    16f2:	6844      	ldr	r4, [r0, #4]
    16f4:	b39c      	cbz	r4, 175e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    16f6:	b153      	cbz	r3, 170e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    16f8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    16fc:	ea14 0f0c 	tst.w	r4, ip
    1700:	d118      	bne.n	1734 <mpu_configure_regions+0x50>
		&&
    1702:	2c1f      	cmp	r4, #31
    1704:	d916      	bls.n	1734 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1706:	6805      	ldr	r5, [r0, #0]
		&&
    1708:	ea1c 0f05 	tst.w	ip, r5
    170c:	d112      	bne.n	1734 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    170e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1710:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1712:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1716:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    1718:	d90f      	bls.n	173a <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    171a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    171e:	d80e      	bhi.n	173e <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1720:	3c01      	subs	r4, #1
    1722:	fab4 f484 	clz	r4, r4
    1726:	f1c4 041f 	rsb	r4, r4, #31
    172a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    172c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    172e:	ea4c 0404 	orr.w	r4, ip, r4
    1732:	d906      	bls.n	1742 <mpu_configure_regions+0x5e>
			return -EINVAL;
    1734:	f06f 0215 	mvn.w	r2, #21
    1738:	e7d9      	b.n	16ee <mpu_configure_regions+0xa>
		return REGION_32B;
    173a:	2408      	movs	r4, #8
    173c:	e7f6      	b.n	172c <mpu_configure_regions+0x48>
		return REGION_4G;
    173e:	243e      	movs	r4, #62	; 0x3e
    1740:	e7f4      	b.n	172c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1742:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1746:	4315      	orrs	r5, r2
    1748:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    174c:	f044 0401 	orr.w	r4, r4, #1
    1750:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1754:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    1758:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    175a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    175e:	3601      	adds	r6, #1
    1760:	300c      	adds	r0, #12
    1762:	e7c2      	b.n	16ea <mpu_configure_regions+0x6>
    1764:	e000ed00 	.word	0xe000ed00

00001768 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1768:	4b04      	ldr	r3, [pc, #16]	; (177c <arm_core_mpu_enable+0x14>)
    176a:	2205      	movs	r2, #5
    176c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1770:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1774:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1778:	4770      	bx	lr
    177a:	bf00      	nop
    177c:	e000ed00 	.word	0xe000ed00

00001780 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1780:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1784:	4b02      	ldr	r3, [pc, #8]	; (1790 <arm_core_mpu_disable+0x10>)
    1786:	2200      	movs	r2, #0
    1788:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    178c:	4770      	bx	lr
    178e:	bf00      	nop
    1790:	e000ed00 	.word	0xe000ed00

00001794 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1794:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1796:	4c03      	ldr	r4, [pc, #12]	; (17a4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1798:	2301      	movs	r3, #1
    179a:	7822      	ldrb	r2, [r4, #0]
    179c:	f7ff ffa2 	bl	16e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    17a0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    17a2:	bd10      	pop	{r4, pc}
    17a4:	20000689 	.word	0x20000689

000017a8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    17a8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    17aa:	4a09      	ldr	r2, [pc, #36]	; (17d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    17ac:	2300      	movs	r3, #0
    17ae:	7812      	ldrb	r2, [r2, #0]
    17b0:	f7ff ff98 	bl	16e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    17b4:	f110 0f16 	cmn.w	r0, #22
    17b8:	d002      	beq.n	17c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    17ba:	4a06      	ldr	r2, [pc, #24]	; (17d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    17bc:	2807      	cmp	r0, #7
    17be:	dd00      	ble.n	17c2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    17c0:	bd08      	pop	{r3, pc}
    17c2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    17c6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    17ca:	3001      	adds	r0, #1
    17cc:	e7f6      	b.n	17bc <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    17ce:	bf00      	nop
    17d0:	20000689 	.word	0x20000689
    17d4:	e000ed00 	.word	0xe000ed00

000017d8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    17d8:	4914      	ldr	r1, [pc, #80]	; (182c <z_arm_mpu_init+0x54>)
    17da:	6808      	ldr	r0, [r1, #0]
    17dc:	2808      	cmp	r0, #8
{
    17de:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    17e0:	d821      	bhi.n	1826 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    17e2:	f7ff ffcd 	bl	1780 <arm_core_mpu_disable>
    17e6:	4c12      	ldr	r4, [pc, #72]	; (1830 <z_arm_mpu_init+0x58>)
    17e8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    17ea:	2200      	movs	r2, #0
    17ec:	4290      	cmp	r0, r2
    17ee:	f101 010c 	add.w	r1, r1, #12
    17f2:	d105      	bne.n	1800 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    17f4:	4b0f      	ldr	r3, [pc, #60]	; (1834 <z_arm_mpu_init+0x5c>)
    17f6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    17f8:	f7ff ffb6 	bl	1768 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    17fc:	2000      	movs	r0, #0
}
    17fe:	bd10      	pop	{r4, pc}
    1800:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1804:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1808:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    180c:	4313      	orrs	r3, r2
    180e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1812:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1816:	f851 3c04 	ldr.w	r3, [r1, #-4]
    181a:	f043 0301 	orr.w	r3, r3, #1
    181e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1822:	3201      	adds	r2, #1
    1824:	e7e2      	b.n	17ec <z_arm_mpu_init+0x14>
		return -1;
    1826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    182a:	e7e8      	b.n	17fe <z_arm_mpu_init+0x26>
    182c:	00006614 	.word	0x00006614
    1830:	e000ed00 	.word	0xe000ed00
    1834:	20000689 	.word	0x20000689

00001838 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1838:	4b01      	ldr	r3, [pc, #4]	; (1840 <__stdout_hook_install+0x8>)
    183a:	6018      	str	r0, [r3, #0]
}
    183c:	4770      	bx	lr
    183e:	bf00      	nop
    1840:	20000004 	.word	0x20000004

00001844 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    1844:	b40c      	push	{r2, r3}
    1846:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    1848:	b909      	cbnz	r1, 184e <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    184a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
    184e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    1852:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    1854:	9a06      	ldr	r2, [sp, #24]
    1856:	4806      	ldr	r0, [pc, #24]	; (1870 <snprintf+0x2c>)
	va_start(vargs, format);
    1858:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    185a:	a902      	add	r1, sp, #8
    185c:	f7fe ff78 	bl	750 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    1860:	9b02      	ldr	r3, [sp, #8]
    1862:	2200      	movs	r2, #0
    1864:	701a      	strb	r2, [r3, #0]
	return r;
}
    1866:	b005      	add	sp, #20
    1868:	f85d eb04 	ldr.w	lr, [sp], #4
    186c:	b002      	add	sp, #8
    186e:	4770      	bx	lr
    1870:	0000523d 	.word	0x0000523d

00001874 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1874:	f04f 0220 	mov.w	r2, #32
    1878:	f3ef 8311 	mrs	r3, BASEPRI
    187c:	f382 8812 	msr	BASEPRI_MAX, r2
    1880:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1884:	4a04      	ldr	r2, [pc, #16]	; (1898 <nordicsemi_nrf52_init+0x24>)
    1886:	2101      	movs	r1, #1
    1888:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    188c:	f383 8811 	msr	BASEPRI, r3
    1890:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1894:	2000      	movs	r0, #0
    1896:	4770      	bx	lr
    1898:	4001e000 	.word	0x4001e000

0000189c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    189c:	b120      	cbz	r0, 18a8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    189e:	4b03      	ldr	r3, [pc, #12]	; (18ac <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    18a0:	0180      	lsls	r0, r0, #6
    18a2:	f043 0301 	orr.w	r3, r3, #1
    18a6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    18a8:	4770      	bx	lr
    18aa:	bf00      	nop
    18ac:	00006600 	.word	0x00006600

000018b0 <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    18b0:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    18b2:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    18b4:	6820      	ldr	r0, [r4, #0]
    18b6:	f002 fafb 	bl	3eb0 <z_impl_device_get_binding>
	if (!gpio) {
    18ba:	b930      	cbnz	r0, 18ca <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    18bc:	480d      	ldr	r0, [pc, #52]	; (18f4 <pwr_ctrl_init+0x44>)
    18be:	6821      	ldr	r1, [r4, #0]
    18c0:	f003 fafe 	bl	4ec0 <printk>
		return -ENODEV;
    18c4:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    18c8:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    18ca:	6861      	ldr	r1, [r4, #4]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    18cc:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    18ce:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    18d0:	b2c9      	uxtb	r1, r1
    18d2:	2301      	movs	r3, #1
    18d4:	fa03 f201 	lsl.w	r2, r3, r1
    18d8:	6823      	ldr	r3, [r4, #0]
    18da:	ea23 0302 	bic.w	r3, r3, r2
    18de:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
    18e0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    18e4:	682b      	ldr	r3, [r5, #0]
    18e6:	4798      	blx	r3
    18e8:	2021      	movs	r0, #33	; 0x21
    18ea:	2100      	movs	r1, #0
    18ec:	f003 f8c8 	bl	4a80 <z_impl_k_sleep>
	return 0;
    18f0:	2000      	movs	r0, #0
    18f2:	e7e9      	b.n	18c8 <pwr_ctrl_init+0x18>
    18f4:	00006951 	.word	0x00006951

000018f8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    18f8:	4b08      	ldr	r3, [pc, #32]	; (191c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    18fa:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    18fc:	1ac3      	subs	r3, r0, r3
{
    18fe:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1900:	4907      	ldr	r1, [pc, #28]	; (1920 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1902:	109b      	asrs	r3, r3, #2
{
    1904:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1906:	4359      	muls	r1, r3
    1908:	4806      	ldr	r0, [pc, #24]	; (1924 <onoff_stop+0x2c>)
    190a:	2240      	movs	r2, #64	; 0x40
    190c:	f003 fcdd 	bl	52ca <stop>
	notify(mgr, res);
    1910:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1912:	4601      	mov	r1, r0
	notify(mgr, res);
    1914:	4620      	mov	r0, r4
}
    1916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    191a:	4718      	bx	r3
    191c:	2000048c 	.word	0x2000048c
    1920:	b6db6db7 	.word	0xb6db6db7
    1924:	000062ec 	.word	0x000062ec

00001928 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1928:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    192a:	4c0c      	ldr	r4, [pc, #48]	; (195c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    192c:	4a0c      	ldr	r2, [pc, #48]	; (1960 <onoff_start+0x38>)
    192e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1930:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1932:	9300      	str	r3, [sp, #0]
{
    1934:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1936:	460b      	mov	r3, r1
    1938:	490a      	ldr	r1, [pc, #40]	; (1964 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    193a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    193c:	4361      	muls	r1, r4
{
    193e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1940:	4809      	ldr	r0, [pc, #36]	; (1968 <onoff_start+0x40>)
    1942:	f003 fcee 	bl	5322 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1946:	1e01      	subs	r1, r0, #0
    1948:	da05      	bge.n	1956 <onoff_start+0x2e>
		notify(mgr, err);
    194a:	4630      	mov	r0, r6
    194c:	462b      	mov	r3, r5
	}
}
    194e:	b002      	add	sp, #8
    1950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1954:	4718      	bx	r3
}
    1956:	b002      	add	sp, #8
    1958:	bd70      	pop	{r4, r5, r6, pc}
    195a:	bf00      	nop
    195c:	2000048c 	.word	0x2000048c
    1960:	00005393 	.word	0x00005393
    1964:	b6db6db7 	.word	0xb6db6db7
    1968:	000062ec 	.word	0x000062ec

0000196c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    196c:	2200      	movs	r2, #0
{
    196e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1970:	2101      	movs	r1, #1
{
    1972:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1974:	4610      	mov	r0, r2
    1976:	f7ff fc5f 	bl	1238 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    197a:	2000      	movs	r0, #0
    197c:	f7ff fc2a 	bl	11d4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1980:	480f      	ldr	r0, [pc, #60]	; (19c0 <clk_init+0x54>)
    1982:	f001 fad9 	bl	2f38 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1986:	4b0f      	ldr	r3, [pc, #60]	; (19c4 <clk_init+0x58>)
    1988:	4298      	cmp	r0, r3
    198a:	d115      	bne.n	19b8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    198c:	f004 fa2f 	bl	5dee <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1990:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1992:	490d      	ldr	r1, [pc, #52]	; (19c8 <clk_init+0x5c>)
    1994:	4630      	mov	r0, r6
    1996:	f003 faef 	bl	4f78 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    199a:	2800      	cmp	r0, #0
    199c:	db0b      	blt.n	19b6 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    199e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    19a0:	4909      	ldr	r1, [pc, #36]	; (19c8 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    19a2:	2501      	movs	r5, #1
    19a4:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    19a6:	f104 001c 	add.w	r0, r4, #28
    19aa:	f003 fae5 	bl	4f78 <onoff_manager_init>
		if (err < 0) {
    19ae:	2800      	cmp	r0, #0
    19b0:	db01      	blt.n	19b6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    19b2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    19b4:	2000      	movs	r0, #0
}
    19b6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    19b8:	f06f 0004 	mvn.w	r0, #4
    19bc:	e7fb      	b.n	19b6 <clk_init+0x4a>
    19be:	bf00      	nop
    19c0:	00001a01 	.word	0x00001a01
    19c4:	0bad0000 	.word	0x0bad0000
    19c8:	0000666c 	.word	0x0000666c

000019cc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    19cc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    19ce:	230c      	movs	r3, #12
    19d0:	4809      	ldr	r0, [pc, #36]	; (19f8 <clkstarted_handle.constprop.0+0x2c>)
    19d2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    19d4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    19d6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    19d8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    19dc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    19de:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    19e0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    19e2:	4418      	add	r0, r3
    19e4:	f003 fc5e 	bl	52a4 <set_on_state>
	if (callback) {
    19e8:	b12d      	cbz	r5, 19f6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    19ea:	4632      	mov	r2, r6
    19ec:	462b      	mov	r3, r5
    19ee:	4803      	ldr	r0, [pc, #12]	; (19fc <clkstarted_handle.constprop.0+0x30>)
}
    19f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    19f4:	4718      	bx	r3
}
    19f6:	bd70      	pop	{r4, r5, r6, pc}
    19f8:	2000048c 	.word	0x2000048c
    19fc:	000062ec 	.word	0x000062ec

00001a00 <clock_event_handler>:
	switch (event) {
    1a00:	b110      	cbz	r0, 1a08 <clock_event_handler+0x8>
    1a02:	2801      	cmp	r0, #1
    1a04:	d004      	beq.n	1a10 <clock_event_handler+0x10>
    1a06:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1a08:	4b03      	ldr	r3, [pc, #12]	; (1a18 <clock_event_handler+0x18>)
    1a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a0c:	075b      	lsls	r3, r3, #29
    1a0e:	d101      	bne.n	1a14 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1a10:	f7ff bfdc 	b.w	19cc <clkstarted_handle.constprop.0>
}
    1a14:	4770      	bx	lr
    1a16:	bf00      	nop
    1a18:	2000048c 	.word	0x2000048c

00001a1c <generic_hfclk_start>:
{
    1a1c:	b508      	push	{r3, lr}
	__asm__ volatile(
    1a1e:	f04f 0320 	mov.w	r3, #32
    1a22:	f3ef 8111 	mrs	r1, BASEPRI
    1a26:	f383 8812 	msr	BASEPRI_MAX, r3
    1a2a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1a2e:	4a12      	ldr	r2, [pc, #72]	; (1a78 <generic_hfclk_start+0x5c>)
    1a30:	6813      	ldr	r3, [r2, #0]
    1a32:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1a36:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1a3a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1a3c:	d00c      	beq.n	1a58 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1a42:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1a46:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1a4a:	f013 0301 	ands.w	r3, r3, #1
    1a4e:	d003      	beq.n	1a58 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1a50:	480a      	ldr	r0, [pc, #40]	; (1a7c <generic_hfclk_start+0x60>)
    1a52:	f003 fc27 	bl	52a4 <set_on_state>
			already_started = true;
    1a56:	2301      	movs	r3, #1
	__asm__ volatile(
    1a58:	f381 8811 	msr	BASEPRI, r1
    1a5c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1a60:	b123      	cbz	r3, 1a6c <generic_hfclk_start+0x50>
}
    1a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1a66:	2000      	movs	r0, #0
    1a68:	f7ff bfb0 	b.w	19cc <clkstarted_handle.constprop.0>
}
    1a6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1a70:	2001      	movs	r0, #1
    1a72:	f001 ba71 	b.w	2f58 <nrfx_clock_start>
    1a76:	bf00      	nop
    1a78:	200004dc 	.word	0x200004dc
    1a7c:	200004cc 	.word	0x200004cc

00001a80 <api_blocking_start>:
{
    1a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1a82:	2200      	movs	r2, #0
    1a84:	2301      	movs	r3, #1
    1a86:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1a8a:	4a09      	ldr	r2, [pc, #36]	; (1ab0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1a8c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1a90:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1a92:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1a96:	f003 fc75 	bl	5384 <api_start>
	if (err < 0) {
    1a9a:	2800      	cmp	r0, #0
    1a9c:	db05      	blt.n	1aaa <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1aa2:	2300      	movs	r3, #0
    1aa4:	4668      	mov	r0, sp
    1aa6:	f002 fbe7 	bl	4278 <z_impl_k_sem_take>
}
    1aaa:	b005      	add	sp, #20
    1aac:	f85d fb04 	ldr.w	pc, [sp], #4
    1ab0:	000053ab 	.word	0x000053ab

00001ab4 <lfclk_start>:
{
    1ab4:	b510      	push	{r4, lr}
	if (!once) {
    1ab6:	4c07      	ldr	r4, [pc, #28]	; (1ad4 <lfclk_start+0x20>)
    1ab8:	7823      	ldrb	r3, [r4, #0]
    1aba:	b92b      	cbnz	r3, 1ac8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    1abc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1ac0:	f004 fbbd 	bl	623e <z_impl_k_busy_wait>
		once = true;
    1ac4:	2301      	movs	r3, #1
    1ac6:	7023      	strb	r3, [r4, #0]
}
    1ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    1acc:	2000      	movs	r0, #0
    1ace:	f001 ba43 	b.w	2f58 <nrfx_clock_start>
    1ad2:	bf00      	nop
    1ad4:	2000068a 	.word	0x2000068a

00001ad8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1ad8:	4b09      	ldr	r3, [pc, #36]	; (1b00 <generic_hfclk_stop+0x28>)
    1ada:	f3bf 8f5b 	dmb	ish
    1ade:	e853 2f00 	ldrex	r2, [r3]
    1ae2:	f022 0102 	bic.w	r1, r2, #2
    1ae6:	e843 1000 	strex	r0, r1, [r3]
    1aea:	2800      	cmp	r0, #0
    1aec:	d1f7      	bne.n	1ade <generic_hfclk_stop+0x6>
    1aee:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1af2:	07d3      	lsls	r3, r2, #31
    1af4:	d402      	bmi.n	1afc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1af6:	2001      	movs	r0, #1
    1af8:	f001 ba76 	b.w	2fe8 <nrfx_clock_stop>
}
    1afc:	4770      	bx	lr
    1afe:	bf00      	nop
    1b00:	200004dc 	.word	0x200004dc

00001b04 <z_nrf_clock_control_lf_on>:
{
    1b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1b08:	4939      	ldr	r1, [pc, #228]	; (1bf0 <z_nrf_clock_control_lf_on+0xec>)
    1b0a:	f3bf 8f5b 	dmb	ish
    1b0e:	4607      	mov	r7, r0
    1b10:	2201      	movs	r2, #1
    1b12:	e851 3f00 	ldrex	r3, [r1]
    1b16:	e841 2000 	strex	r0, r2, [r1]
    1b1a:	2800      	cmp	r0, #0
    1b1c:	d1f9      	bne.n	1b12 <z_nrf_clock_control_lf_on+0xe>
    1b1e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1b22:	b933      	cbnz	r3, 1b32 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1b24:	4933      	ldr	r1, [pc, #204]	; (1bf4 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    1b26:	4834      	ldr	r0, [pc, #208]	; (1bf8 <z_nrf_clock_control_lf_on+0xf4>)
    1b28:	604b      	str	r3, [r1, #4]
    1b2a:	60cb      	str	r3, [r1, #12]
    1b2c:	608a      	str	r2, [r1, #8]
    1b2e:	f003 fa36 	bl	4f9e <onoff_request>
	switch (start_mode) {
    1b32:	1e7b      	subs	r3, r7, #1
    1b34:	2b01      	cmp	r3, #1
    1b36:	d82f      	bhi.n	1b98 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1b38:	2f01      	cmp	r7, #1
    1b3a:	d107      	bne.n	1b4c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b40:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1b44:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1b48:	2b01      	cmp	r3, #1
    1b4a:	d025      	beq.n	1b98 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1b4c:	f004 fa23 	bl	5f96 <k_is_in_isr>
    1b50:	4604      	mov	r4, r0
    1b52:	b918      	cbnz	r0, 1b5c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1b54:	4b29      	ldr	r3, [pc, #164]	; (1bfc <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    1b56:	781b      	ldrb	r3, [r3, #0]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d141      	bne.n	1be0 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    1b5c:	f04f 0320 	mov.w	r3, #32
    1b60:	f3ef 8611 	mrs	r6, BASEPRI
    1b64:	f383 8812 	msr	BASEPRI_MAX, r3
    1b68:	f3bf 8f6f 	isb	sy
    1b6c:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b6e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1c00 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1b72:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    1b76:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1b7a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    1b7e:	03d2      	lsls	r2, r2, #15
    1b80:	d50c      	bpl.n	1b9c <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1b82:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1b86:	2b01      	cmp	r3, #1
    1b88:	d001      	beq.n	1b8e <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1b8a:	2f01      	cmp	r7, #1
    1b8c:	d106      	bne.n	1b9c <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    1b8e:	b30c      	cbz	r4, 1bd4 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    1b90:	f386 8811 	msr	BASEPRI, r6
    1b94:	f3bf 8f6f 	isb	sy
}
    1b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1b9c:	b1ac      	cbz	r4, 1bca <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1b9e:	4630      	mov	r0, r6
    1ba0:	f7ff fb0e 	bl	11c0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1ba4:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d1e4      	bne.n	1b76 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1bac:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1bb0:	2a00      	cmp	r2, #0
    1bb2:	d0e0      	beq.n	1b76 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1bb4:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1bb8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1bbc:	2301      	movs	r3, #1
    1bbe:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    1bc2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1bc6:	60ab      	str	r3, [r5, #8]
}
    1bc8:	e7d5      	b.n	1b76 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    1bca:	2100      	movs	r1, #0
    1bcc:	2021      	movs	r0, #33	; 0x21
    1bce:	f002 ff57 	bl	4a80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1bd2:	e7e7      	b.n	1ba4 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    1bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bd8:	2202      	movs	r2, #2
    1bda:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1bde:	e7db      	b.n	1b98 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    1be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1be4:	2202      	movs	r2, #2
    1be6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1bea:	4606      	mov	r6, r0
}
    1bec:	e7bf      	b.n	1b6e <z_nrf_clock_control_lf_on+0x6a>
    1bee:	bf00      	nop
    1bf0:	200004e0 	.word	0x200004e0
    1bf4:	2000047c 	.word	0x2000047c
    1bf8:	200004a8 	.word	0x200004a8
    1bfc:	20000abc 	.word	0x20000abc
    1c00:	e000e100 	.word	0xe000e100

00001c04 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    1c04:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    1c06:	4c04      	ldr	r4, [pc, #16]	; (1c18 <rtt_console_init+0x14>)
    1c08:	4620      	mov	r0, r4
    1c0a:	f7fe fcad 	bl	568 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    1c0e:	4620      	mov	r0, r4
    1c10:	f7ff fe12 	bl	1838 <__stdout_hook_install>

	return 0;
}
    1c14:	2000      	movs	r0, #0
    1c16:	bd10      	pop	{r4, pc}
    1c18:	00001c1d 	.word	0x00001c1d

00001c1c <rtt_console_out>:
{
    1c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c1e:	4e14      	ldr	r6, [pc, #80]	; (1c70 <rtt_console_out+0x54>)
	char c = (char)character;
    1c20:	f88d 0007 	strb.w	r0, [sp, #7]
{
    1c24:	4604      	mov	r4, r0
	char c = (char)character;
    1c26:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    1c28:	f3ef 8711 	mrs	r7, BASEPRI
    1c2c:	f04f 0120 	mov.w	r1, #32
    1c30:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    1c34:	2201      	movs	r2, #1
    1c36:	f10d 0107 	add.w	r1, sp, #7
    1c3a:	2000      	movs	r0, #0
    1c3c:	f002 f8e8 	bl	3e10 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    1c40:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    1c44:	b120      	cbz	r0, 1c50 <rtt_console_out+0x34>
			host_present = true;
    1c46:	2301      	movs	r3, #1
    1c48:	7033      	strb	r3, [r6, #0]
}
    1c4a:	4620      	mov	r0, r4
    1c4c:	b003      	add	sp, #12
    1c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    1c50:	7833      	ldrb	r3, [r6, #0]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d0f9      	beq.n	1c4a <rtt_console_out+0x2e>
			if (max_cnt) {
    1c56:	3d01      	subs	r5, #1
    1c58:	d008      	beq.n	1c6c <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    1c5a:	f004 f99c 	bl	5f96 <k_is_in_isr>
    1c5e:	2800      	cmp	r0, #0
    1c60:	d1e2      	bne.n	1c28 <rtt_console_out+0xc>
    1c62:	2100      	movs	r1, #0
    1c64:	2042      	movs	r0, #66	; 0x42
    1c66:	f002 ff0b 	bl	4a80 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    1c6a:	e7dd      	b.n	1c28 <rtt_console_out+0xc>
				host_present = false;
    1c6c:	7035      	strb	r5, [r6, #0]
    1c6e:	e7ec      	b.n	1c4a <rtt_console_out+0x2e>
    1c70:	2000068b 	.word	0x2000068b

00001c74 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1c74:	b530      	push	{r4, r5, lr}
	return port->config;
    1c76:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c78:	7b04      	ldrb	r4, [r0, #12]
    1c7a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1c7e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c82:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    1c86:	b085      	sub	sp, #20
    1c88:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    1c8c:	d104      	bne.n	1c98 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    1c8e:	4628      	mov	r0, r5
    1c90:	f001 fc48 	bl	3524 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    1c94:	2000      	movs	r0, #0
    1c96:	e02e      	b.n	1cf6 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    1c98:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c9c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1ca0:	d12b      	bne.n	1cfa <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    1ca6:	bf0c      	ite	eq
    1ca8:	2304      	moveq	r3, #4
    1caa:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    1cac:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1cb0:	6883      	ldr	r3, [r0, #8]
    1cb2:	fa23 f101 	lsr.w	r1, r3, r1
    1cb6:	07c9      	lsls	r1, r1, #31
    1cb8:	d42b      	bmi.n	1d12 <gpio_nrfx_pin_interrupt_configure+0x9e>
    1cba:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1cbe:	d128      	bne.n	1d12 <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1cc0:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1cc4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1cc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1cd0:	07db      	lsls	r3, r3, #31
    1cd2:	d41e      	bmi.n	1d12 <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1cd4:	f10d 0407 	add.w	r4, sp, #7
    1cd8:	4621      	mov	r1, r4
    1cda:	4628      	mov	r0, r5
    1cdc:	f001 fb8a 	bl	33f4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1ce0:	4b14      	ldr	r3, [pc, #80]	; (1d34 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1ce2:	4298      	cmp	r0, r3
    1ce4:	d114      	bne.n	1d10 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    1ce6:	4620      	mov	r0, r4
    1ce8:	f001 fbd2 	bl	3490 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1cec:	4b12      	ldr	r3, [pc, #72]	; (1d38 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1cee:	4298      	cmp	r0, r3
    1cf0:	d00e      	beq.n	1d10 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    1cf2:	f06f 000b 	mvn.w	r0, #11
}
    1cf6:	b005      	add	sp, #20
    1cf8:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1cfa:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1cfe:	d005      	beq.n	1d0c <gpio_nrfx_pin_interrupt_configure+0x98>
    1d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    1d04:	bf0c      	ite	eq
    1d06:	2302      	moveq	r3, #2
    1d08:	2301      	movne	r3, #1
    1d0a:	e7cf      	b.n	1cac <gpio_nrfx_pin_interrupt_configure+0x38>
    1d0c:	2303      	movs	r3, #3
    1d0e:	e7cd      	b.n	1cac <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    1d10:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1d12:	2300      	movs	r3, #0
    1d14:	4619      	mov	r1, r3
    1d16:	aa02      	add	r2, sp, #8
    1d18:	4628      	mov	r0, r5
    1d1a:	f001 fa43 	bl	31a4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1d1e:	4b06      	ldr	r3, [pc, #24]	; (1d38 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1d20:	4298      	cmp	r0, r3
    1d22:	d104      	bne.n	1d2e <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1d24:	2101      	movs	r1, #1
    1d26:	4628      	mov	r0, r5
    1d28:	f001 fbb8 	bl	349c <nrfx_gpiote_trigger_enable>
    1d2c:	e7b2      	b.n	1c94 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    1d2e:	f06f 0004 	mvn.w	r0, #4
    1d32:	e7e0      	b.n	1cf6 <gpio_nrfx_pin_interrupt_configure+0x82>
    1d34:	0bad0004 	.word	0x0bad0004
    1d38:	0bad0000 	.word	0x0bad0000

00001d3c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1d3c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1d3e:	f001 fb97 	bl	3470 <nrfx_gpiote_is_init>
    1d42:	4604      	mov	r4, r0
    1d44:	b968      	cbnz	r0, 1d62 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    1d46:	f001 fb6b 	bl	3420 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1d4a:	4b08      	ldr	r3, [pc, #32]	; (1d6c <gpio_nrfx_init+0x30>)
    1d4c:	4298      	cmp	r0, r3
    1d4e:	d10a      	bne.n	1d66 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1d50:	4807      	ldr	r0, [pc, #28]	; (1d70 <gpio_nrfx_init+0x34>)
    1d52:	4621      	mov	r1, r4
    1d54:	f001 fb48 	bl	33e8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1d58:	4622      	mov	r2, r4
    1d5a:	2105      	movs	r1, #5
    1d5c:	2006      	movs	r0, #6
    1d5e:	f7ff fa6b 	bl	1238 <z_arm_irq_priority_set>
		return 0;
    1d62:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1d64:	bd10      	pop	{r4, pc}
		return -EIO;
    1d66:	f06f 0004 	mvn.w	r0, #4
    1d6a:	e7fb      	b.n	1d64 <gpio_nrfx_init+0x28>
    1d6c:	0bad0000 	.word	0x0bad0000
    1d70:	00001d75 	.word	0x00001d75

00001d74 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1d74:	0943      	lsrs	r3, r0, #5
{
    1d76:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1d78:	d110      	bne.n	1d9c <nrfx_gpio_handler+0x28>
	return list->head;
    1d7a:	4b09      	ldr	r3, [pc, #36]	; (1da0 <nrfx_gpio_handler+0x2c>)
    1d7c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d7e:	b169      	cbz	r1, 1d9c <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    1d80:	2501      	movs	r5, #1
	return node->next;
    1d82:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1d84:	4e07      	ldr	r6, [pc, #28]	; (1da4 <nrfx_gpio_handler+0x30>)
    1d86:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    1d88:	688a      	ldr	r2, [r1, #8]
    1d8a:	402a      	ands	r2, r5
    1d8c:	d002      	beq.n	1d94 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    1d8e:	684b      	ldr	r3, [r1, #4]
    1d90:	4630      	mov	r0, r6
    1d92:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d94:	b114      	cbz	r4, 1d9c <nrfx_gpio_handler+0x28>
    1d96:	4621      	mov	r1, r4
    1d98:	6824      	ldr	r4, [r4, #0]
    1d9a:	e7f5      	b.n	1d88 <nrfx_gpio_handler+0x14>
}
    1d9c:	bd70      	pop	{r4, r5, r6, pc}
    1d9e:	bf00      	nop
    1da0:	200004e4 	.word	0x200004e4
    1da4:	00006304 	.word	0x00006304

00001da8 <gpio_nrfx_pin_configure>:
{
    1da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    1dac:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1dae:	7b3b      	ldrb	r3, [r7, #12]
    1db0:	f001 051f 	and.w	r5, r1, #31
{
    1db4:	b085      	sub	sp, #20
    1db6:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1db8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    1dbc:	4614      	mov	r4, r2
    1dbe:	b9ca      	cbnz	r2, 1df4 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    1dc0:	a902      	add	r1, sp, #8
    1dc2:	4628      	mov	r0, r5
    1dc4:	f001 fb16 	bl	33f4 <nrfx_gpiote_channel_get>
    1dc8:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    1dca:	4628      	mov	r0, r5
    1dcc:	f001 fbd2 	bl	3574 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    1dd0:	4b48      	ldr	r3, [pc, #288]	; (1ef4 <gpio_nrfx_pin_configure+0x14c>)
    1dd2:	4298      	cmp	r0, r3
    1dd4:	d004      	beq.n	1de0 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    1dd6:	f06f 0004 	mvn.w	r0, #4
}
    1dda:	b005      	add	sp, #20
    1ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    1de0:	4284      	cmp	r4, r0
    1de2:	d105      	bne.n	1df0 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    1de4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1de8:	f001 fb4c 	bl	3484 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    1dec:	42a0      	cmp	r0, r4
    1dee:	d1f2      	bne.n	1dd6 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1df0:	2000      	movs	r0, #0
    1df2:	e7f2      	b.n	1dda <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1df4:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    1df8:	f10d 0103 	add.w	r1, sp, #3
    1dfc:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    1dfe:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    1e02:	f001 faf7 	bl	33f4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1e06:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    1e08:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1e0a:	aa02      	add	r2, sp, #8
    1e0c:	4649      	mov	r1, r9
    1e0e:	4628      	mov	r0, r5
    1e10:	f001 f9c8 	bl	31a4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1e14:	4b37      	ldr	r3, [pc, #220]	; (1ef4 <gpio_nrfx_pin_configure+0x14c>)
    1e16:	4298      	cmp	r0, r3
    1e18:	d002      	beq.n	1e20 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1e1a:	f06f 0015 	mvn.w	r0, #21
    1e1e:	e7dc      	b.n	1dda <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    1e20:	4580      	cmp	r8, r0
    1e22:	d103      	bne.n	1e2c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    1e24:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1e28:	f001 fb2c 	bl	3484 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    1e2c:	05a3      	lsls	r3, r4, #22
    1e2e:	d54e      	bpl.n	1ece <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1e30:	4b31      	ldr	r3, [pc, #196]	; (1ef8 <gpio_nrfx_pin_configure+0x150>)
    1e32:	4a32      	ldr	r2, [pc, #200]	; (1efc <gpio_nrfx_pin_configure+0x154>)
    1e34:	4023      	ands	r3, r4
    1e36:	4293      	cmp	r3, r2
    1e38:	d03a      	beq.n	1eb0 <gpio_nrfx_pin_configure+0x108>
    1e3a:	d80c      	bhi.n	1e56 <gpio_nrfx_pin_configure+0xae>
    1e3c:	2b06      	cmp	r3, #6
    1e3e:	d014      	beq.n	1e6a <gpio_nrfx_pin_configure+0xc2>
    1e40:	d804      	bhi.n	1e4c <gpio_nrfx_pin_configure+0xa4>
    1e42:	b193      	cbz	r3, 1e6a <gpio_nrfx_pin_configure+0xc2>
    1e44:	2b02      	cmp	r3, #2
    1e46:	d1e8      	bne.n	1e1a <gpio_nrfx_pin_configure+0x72>
    1e48:	2304      	movs	r3, #4
    1e4a:	e00e      	b.n	1e6a <gpio_nrfx_pin_configure+0xc2>
    1e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1e50:	d1e3      	bne.n	1e1a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    1e52:	2301      	movs	r3, #1
    1e54:	e009      	b.n	1e6a <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1e56:	4a2a      	ldr	r2, [pc, #168]	; (1f00 <gpio_nrfx_pin_configure+0x158>)
    1e58:	4293      	cmp	r3, r2
    1e5a:	d02b      	beq.n	1eb4 <gpio_nrfx_pin_configure+0x10c>
    1e5c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1e60:	d02a      	beq.n	1eb8 <gpio_nrfx_pin_configure+0x110>
    1e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1e66:	d1d8      	bne.n	1e1a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    1e68:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    1e6a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1e6e:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    1e72:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    1e76:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    1e78:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    1e7c:	bf54      	ite	pl
    1e7e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1e82:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1e84:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    1e86:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1e8a:	d517      	bpl.n	1ebc <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	2101      	movs	r1, #1
    1e90:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    1e94:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1e98:	2200      	movs	r2, #0
    1e9a:	a901      	add	r1, sp, #4
    1e9c:	4628      	mov	r0, r5
    1e9e:	f001 fa2b 	bl	32f8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1ea2:	4b14      	ldr	r3, [pc, #80]	; (1ef4 <gpio_nrfx_pin_configure+0x14c>)
    1ea4:	4298      	cmp	r0, r3
    1ea6:	bf14      	ite	ne
    1ea8:	f06f 0015 	mvnne.w	r0, #21
    1eac:	2000      	moveq	r0, #0
    1eae:	e794      	b.n	1dda <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    1eb0:	2307      	movs	r3, #7
    1eb2:	e7da      	b.n	1e6a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    1eb4:	2305      	movs	r3, #5
    1eb6:	e7d8      	b.n	1e6a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    1eb8:	2303      	movs	r3, #3
    1eba:	e7d6      	b.n	1e6a <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1ebc:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1ebe:	bf41      	itttt	mi
    1ec0:	687b      	ldrmi	r3, [r7, #4]
    1ec2:	2101      	movmi	r1, #1
    1ec4:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    1ec8:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    1ecc:	e7e4      	b.n	1e98 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    1ece:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1ed0:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    1ed4:	bf54      	ite	pl
    1ed6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    1eda:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1edc:	461a      	mov	r2, r3
    1ede:	a901      	add	r1, sp, #4
    1ee0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    1ee2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1ee6:	f001 f95d 	bl	31a4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1eea:	4b02      	ldr	r3, [pc, #8]	; (1ef4 <gpio_nrfx_pin_configure+0x14c>)
    1eec:	4298      	cmp	r0, r3
    1eee:	f43f af7f 	beq.w	1df0 <gpio_nrfx_pin_configure+0x48>
    1ef2:	e792      	b.n	1e1a <gpio_nrfx_pin_configure+0x72>
    1ef4:	0bad0000 	.word	0x0bad0000
    1ef8:	00f00006 	.word	0x00f00006
    1efc:	00100006 	.word	0x00100006
    1f00:	00400002 	.word	0x00400002

00001f04 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
    1f04:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    1f06:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    1f08:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
    1f0c:	f001 ff02 	bl	3d14 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    1f10:	4b03      	ldr	r3, [pc, #12]	; (1f20 <i2c_nrfx_twim_recover_bus+0x1c>)
    1f12:	4298      	cmp	r0, r3
}
    1f14:	bf14      	ite	ne
    1f16:	f06f 000f 	mvnne.w	r0, #15
    1f1a:	2000      	moveq	r0, #0
    1f1c:	bd08      	pop	{r3, pc}
    1f1e:	bf00      	nop
    1f20:	0bad0000 	.word	0x0bad0000

00001f24 <init_twim>:
{
    1f24:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    1f26:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
    1f28:	4a08      	ldr	r2, [pc, #32]	; (1f4c <init_twim+0x28>)
    1f2a:	6840      	ldr	r0, [r0, #4]
    1f2c:	4623      	mov	r3, r4
    1f2e:	f104 0120 	add.w	r1, r4, #32
    1f32:	f001 fcad 	bl	3890 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    1f36:	4b06      	ldr	r3, [pc, #24]	; (1f50 <init_twim+0x2c>)
    1f38:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
    1f3a:	bf03      	ittte	eq
    1f3c:	2301      	moveq	r3, #1
    1f3e:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
	return 0;
    1f42:	2000      	moveq	r0, #0
		return -EIO;
    1f44:	f06f 0004 	mvnne.w	r0, #4
}
    1f48:	bd10      	pop	{r4, pc}
    1f4a:	bf00      	nop
    1f4c:	00001f55 	.word	0x00001f55
    1f50:	0bad0000 	.word	0x0bad0000

00001f54 <event_handler>:
	switch (p_event->type) {
    1f54:	7803      	ldrb	r3, [r0, #0]
    1f56:	2b01      	cmp	r3, #1
    1f58:	d008      	beq.n	1f6c <event_handler+0x18>
    1f5a:	2b02      	cmp	r3, #2
    1f5c:	d008      	beq.n	1f70 <event_handler+0x1c>
    1f5e:	b94b      	cbnz	r3, 1f74 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    1f60:	4b05      	ldr	r3, [pc, #20]	; (1f78 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    1f62:	634b      	str	r3, [r1, #52]	; 0x34
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1f64:	f101 0010 	add.w	r0, r1, #16
    1f68:	f002 b966 	b.w	4238 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    1f6c:	4b03      	ldr	r3, [pc, #12]	; (1f7c <event_handler+0x28>)
    1f6e:	e7f8      	b.n	1f62 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    1f70:	4b03      	ldr	r3, [pc, #12]	; (1f80 <event_handler+0x2c>)
    1f72:	e7f6      	b.n	1f62 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    1f74:	4b03      	ldr	r3, [pc, #12]	; (1f84 <event_handler+0x30>)
    1f76:	e7f4      	b.n	1f62 <event_handler+0xe>
    1f78:	0bad0000 	.word	0x0bad0000
    1f7c:	0bae0001 	.word	0x0bae0001
    1f80:	0bae0002 	.word	0x0bae0002
    1f84:	0bad0001 	.word	0x0bad0001

00001f88 <i2c_nrfx_twim_transfer>:
{
    1f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    1f8c:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    1f8e:	6906      	ldr	r6, [r0, #16]
{
    1f90:	b089      	sub	sp, #36	; 0x24
    1f92:	4698      	mov	r8, r3
    1f94:	4605      	mov	r5, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    1f96:	893b      	ldrh	r3, [r7, #8]
    1f98:	9300      	str	r3, [sp, #0]
{
    1f9a:	460c      	mov	r4, r1
    1f9c:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    1f9e:	2100      	movs	r1, #0
    1fa0:	2214      	movs	r2, #20
    1fa2:	a803      	add	r0, sp, #12
	uint8_t *msg_buf = dev_data->msg_buf;
    1fa4:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
    1fa8:	f003 f93c 	bl	5224 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    1fac:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
	nrfx_twim_xfer_desc_t cur_xfer = {
    1fb0:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    1fb4:	b1bb      	cbz	r3, 1fe6 <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
    1fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fbe:	4630      	mov	r0, r6
    1fc0:	f002 f95a 	bl	4278 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    1fc4:	f106 0a10 	add.w	sl, r6, #16
    1fc8:	2200      	movs	r2, #0
    1fca:	2300      	movs	r3, #0
    1fcc:	4650      	mov	r0, sl
    1fce:	f002 f953 	bl	4278 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
    1fd2:	4638      	mov	r0, r7
    1fd4:	f001 fcac 	bl	3930 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    1fd8:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
    1fdc:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    1fde:	45d8      	cmp	r8, fp
    1fe0:	d309      	bcc.n	1ff6 <i2c_nrfx_twim_transfer+0x6e>
    1fe2:	2400      	movs	r4, #0
    1fe4:	e051      	b.n	208a <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
    1fe6:	4628      	mov	r0, r5
    1fe8:	f7ff ff9c 	bl	1f24 <init_twim>
    1fec:	2800      	cmp	r0, #0
    1fee:	dae2      	bge.n	1fb6 <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
    1ff0:	f06f 0404 	mvn.w	r4, #4
    1ff4:	e04f      	b.n	2096 <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    1ff6:	7a21      	ldrb	r1, [r4, #8]
    1ff8:	070a      	lsls	r2, r1, #28
    1ffa:	f100 808f 	bmi.w	211c <i2c_nrfx_twim_transfer+0x194>
		bool concat_next = ((i + 1) < num_msgs)
    1ffe:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    2002:	45d8      	cmp	r8, fp
    2004:	6862      	ldr	r2, [r4, #4]
    2006:	d20a      	bcs.n	201e <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    2008:	078b      	lsls	r3, r1, #30
    200a:	d408      	bmi.n	201e <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    200c:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    200e:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    2012:	f000 0001 	and.w	r0, r0, #1
    2016:	f003 0304 	and.w	r3, r3, #4
    201a:	4303      	orrs	r3, r0
    201c:	d016      	beq.n	204c <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
    201e:	b1bd      	cbz	r5, 2050 <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
    2020:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    2022:	f8dd c000 	ldr.w	ip, [sp]
    2026:	18a8      	adds	r0, r5, r2
    2028:	4560      	cmp	r0, ip
    202a:	d87a      	bhi.n	2122 <i2c_nrfx_twim_transfer+0x19a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    202c:	07c8      	lsls	r0, r1, #31
    202e:	d406      	bmi.n	203e <i2c_nrfx_twim_transfer+0xb6>
				memcpy(msg_buf + msg_buf_used,
    2030:	6821      	ldr	r1, [r4, #0]
    2032:	9301      	str	r3, [sp, #4]
    2034:	eb09 0005 	add.w	r0, r9, r5
    2038:	f003 f8e9 	bl	520e <memcpy>
    203c:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
    203e:	6862      	ldr	r2, [r4, #4]
    2040:	4415      	add	r5, r2
    2042:	b2ad      	uxth	r5, r5
		if (concat_next) {
    2044:	2b00      	cmp	r3, #0
    2046:	d037      	beq.n	20b8 <i2c_nrfx_twim_transfer+0x130>
    2048:	340c      	adds	r4, #12
    204a:	e7c8      	b.n	1fde <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
    204c:	2301      	movs	r3, #1
    204e:	e7e8      	b.n	2022 <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    2050:	07c9      	lsls	r1, r1, #31
    2052:	d524      	bpl.n	209e <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
    2054:	6823      	ldr	r3, [r4, #0]
    2056:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
    2058:	6863      	ldr	r3, [r4, #4]
    205a:	9304      	str	r3, [sp, #16]
    205c:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    205e:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    2060:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    2064:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    2068:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    206c:	a903      	add	r1, sp, #12
    206e:	bf0c      	ite	eq
    2070:	2220      	moveq	r2, #32
    2072:	2200      	movne	r2, #0
    2074:	4638      	mov	r0, r7
    2076:	f001 fcbf 	bl	39f8 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    207a:	4b2e      	ldr	r3, [pc, #184]	; (2134 <i2c_nrfx_twim_transfer+0x1ac>)
    207c:	4298      	cmp	r0, r3
    207e:	d021      	beq.n	20c4 <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
    2080:	330b      	adds	r3, #11
    2082:	4298      	cmp	r0, r3
    2084:	d053      	beq.n	212e <i2c_nrfx_twim_transfer+0x1a6>
			ret = -EIO;
    2086:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
    208a:	4638      	mov	r0, r7
    208c:	f001 fc60 	bl	3950 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
    2090:	4630      	mov	r0, r6
    2092:	f002 f8d1 	bl	4238 <z_impl_k_sem_give>
}
    2096:	4620      	mov	r0, r4
    2098:	b009      	add	sp, #36	; 0x24
    209a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
    209e:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    20a0:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    20a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    20a8:	d0d4      	beq.n	2054 <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    20aa:	897b      	ldrh	r3, [r7, #10]
    20ac:	4293      	cmp	r3, r2
    20ae:	d33b      	bcc.n	2128 <i2c_nrfx_twim_transfer+0x1a0>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    20b0:	4648      	mov	r0, r9
    20b2:	f003 f8ac 	bl	520e <memcpy>
			msg_buf_used = msgs[i].len;
    20b6:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
    20b8:	2d00      	cmp	r5, #0
    20ba:	d0cb      	beq.n	2054 <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
    20bc:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
    20c0:	9504      	str	r5, [sp, #16]
    20c2:	e7cc      	b.n	205e <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
    20c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    20c8:	2300      	movs	r3, #0
    20ca:	4650      	mov	r0, sl
    20cc:	f002 f8d4 	bl	4278 <z_impl_k_sem_take>
		if (ret != 0) {
    20d0:	b138      	cbz	r0, 20e2 <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
    20d2:	4638      	mov	r0, r7
    20d4:	f001 fc3c 	bl	3950 <nrfx_twim_disable>
    20d8:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
    20dc:	f001 fe1a 	bl	3d14 <nrfx_twi_twim_bus_recover>
    20e0:	e7d1      	b.n	2086 <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
    20e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
		if (res != NRFX_SUCCESS) {
    20e4:	4a13      	ldr	r2, [pc, #76]	; (2134 <i2c_nrfx_twim_transfer+0x1ac>)
    20e6:	4293      	cmp	r3, r2
    20e8:	d1cd      	bne.n	2086 <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
    20ea:	7a23      	ldrb	r3, [r4, #8]
    20ec:	07db      	lsls	r3, r3, #31
    20ee:	d401      	bmi.n	20f4 <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
    20f0:	2500      	movs	r5, #0
    20f2:	e7a9      	b.n	2048 <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
    20f4:	9b06      	ldr	r3, [sp, #24]
    20f6:	4599      	cmp	r9, r3
    20f8:	d1fa      	bne.n	20f0 <i2c_nrfx_twim_transfer+0x168>
    20fa:	4623      	mov	r3, r4
    20fc:	e008      	b.n	2110 <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
    20fe:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    2100:	68d8      	ldr	r0, [r3, #12]
    2102:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
    2104:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    2106:	fa19 f181 	uxtah	r1, r9, r1
    210a:	f003 f880 	bl	520e <memcpy>
				j--;
    210e:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
    2110:	685a      	ldr	r2, [r3, #4]
    2112:	4295      	cmp	r5, r2
    2114:	f1a3 030c 	sub.w	r3, r3, #12
    2118:	d2f1      	bcs.n	20fe <i2c_nrfx_twim_transfer+0x176>
    211a:	e7e9      	b.n	20f0 <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
    211c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2120:	e7b3      	b.n	208a <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
    2122:	f06f 041b 	mvn.w	r4, #27
    2126:	e7b0      	b.n	208a <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
    2128:	f06f 0415 	mvn.w	r4, #21
    212c:	e7ad      	b.n	208a <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
    212e:	f06f 040f 	mvn.w	r4, #15
    2132:	e7aa      	b.n	208a <i2c_nrfx_twim_transfer+0x102>
    2134:	0bad0000 	.word	0x0bad0000

00002138 <ccs811_channel_get>:
{
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_result_type *rp = &drv_data->result;
	uint32_t uval;

	switch (chan) {
    2138:	391b      	subs	r1, #27
	struct ccs811_data *drv_data = dev->data;
    213a:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
    213c:	2904      	cmp	r1, #4
    213e:	d820      	bhi.n	2182 <ccs811_channel_get+0x4a>
    2140:	e8df f001 	tbb	[pc, r1]
    2144:	0a1f0803 	.word	0x0a1f0803
    2148:	19          	.byte	0x19
    2149:	00          	.byte	0x00
	case SENSOR_CHAN_CO2:
		val->val1 = rp->co2;
    214a:	8a1b      	ldrh	r3, [r3, #16]
		val->val2 = 0;

		break;
	case SENSOR_CHAN_VOC:
		val->val1 = rp->voc;
    214c:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
    214e:	2000      	movs	r0, #0
    2150:	6050      	str	r0, [r2, #4]

		break;
    2152:	4770      	bx	lr
		val->val1 = rp->voc;
    2154:	8a5b      	ldrh	r3, [r3, #18]
    2156:	e7f9      	b.n	214c <ccs811_channel_get+0x14>
	case SENSOR_CHAN_VOLTAGE:
		/*
		 * Raw ADC readings are contained in least significant 10 bits
		 */
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
    2158:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
    215a:	480b      	ldr	r0, [pc, #44]	; (2188 <ccs811_channel_get+0x50>)
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
    215c:	f240 614c 	movw	r1, #1612	; 0x64c
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
    2160:	f3c3 0309 	ubfx	r3, r3, #0, #10
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
    2164:	434b      	muls	r3, r1
		val->val1 = uval / 1000000U;
    2166:	fbb3 f1f0 	udiv	r1, r3, r0
		val->val2 = uval % 1000000;
    216a:	fb00 3311 	mls	r3, r0, r1, r3
		val->val1 = uval / 1000000U;
    216e:	6011      	str	r1, [r2, #0]
		val->val2 = uval % 1000000;
    2170:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
    2172:	2000      	movs	r0, #0
		break;
    2174:	4770      	bx	lr
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
    2176:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
    2178:	2000      	movs	r0, #0
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
    217a:	0a9b      	lsrs	r3, r3, #10
		val->val2 = uval % 1000000;
    217c:	e9c2 0300 	strd	r0, r3, [r2]
		break;
    2180:	4770      	bx	lr
	switch (chan) {
    2182:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2186:	4770      	bx	lr
    2188:	000f4240 	.word	0x000f4240

0000218c <ccs811_init>:
}

#endif /* CONFIG_CCS811_TRIGGER */

static int ccs811_init(const struct device *dev)
{
    218c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct ccs811_data *drv_data = dev->data;
    218e:	6904      	ldr	r4, [r0, #16]
	int status;
	uint16_t fw_ver;
	uint8_t cmd;
	uint8_t hw_id;

	*drv_data = (struct ccs811_data){ 0 };
    2190:	221c      	movs	r2, #28
    2192:	2100      	movs	r1, #0
    2194:	4620      	mov	r0, r4
    2196:	f003 f845 	bl	5224 <memset>
    219a:	485a      	ldr	r0, [pc, #360]	; (2304 <ccs811_init+0x178>)
    219c:	f001 fe88 	bl	3eb0 <z_impl_device_get_binding>
	drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
    21a0:	6020      	str	r0, [r4, #0]
	if (drv_data->i2c == NULL) {
    21a2:	b920      	cbnz	r0, 21ae <ccs811_init+0x22>
		LOG_ERR("Failed to get pointer to %s device!",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
    21a4:	f06f 0515 	mvn.w	r5, #21
#endif

out:
	set_wake(drv_data, false);
	return ret;
}
    21a8:	4628      	mov	r0, r5
    21aa:	b003      	add	sp, #12
    21ac:	bd30      	pop	{r4, r5, pc}
    21ae:	4856      	ldr	r0, [pc, #344]	; (2308 <ccs811_init+0x17c>)
    21b0:	f001 fe7e 	bl	3eb0 <z_impl_device_get_binding>
	drv_data->wake_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, wake_gpios));
    21b4:	60e0      	str	r0, [r4, #12]
	if (drv_data->wake_gpio == NULL) {
    21b6:	2800      	cmp	r0, #0
    21b8:	d0f4      	beq.n	21a4 <ccs811_init+0x18>
	struct gpio_driver_data *data =
    21ba:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    21bc:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    21be:	6813      	ldr	r3, [r2, #0]
    21c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    21c4:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    21c6:	680b      	ldr	r3, [r1, #0]
    21c8:	f640 2201 	movw	r2, #2561	; 0xa01
    21cc:	210c      	movs	r1, #12
    21ce:	4798      	blx	r3
	set_wake(drv_data, true);
    21d0:	68e0      	ldr	r0, [r4, #12]
    21d2:	2101      	movs	r1, #1
    21d4:	f003 fbd7 	bl	5986 <set_wake.isra.0>
	k_msleep(1);
    21d8:	2001      	movs	r0, #1
    21da:	f003 fb8d 	bl	58f8 <k_msleep.isra.0>
    21de:	484a      	ldr	r0, [pc, #296]	; (2308 <ccs811_init+0x17c>)
    21e0:	f001 fe66 	bl	3eb0 <z_impl_device_get_binding>
	drv_data->reset_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, reset_gpios));
    21e4:	60a0      	str	r0, [r4, #8]
	if (drv_data->reset_gpio == NULL) {
    21e6:	2800      	cmp	r0, #0
    21e8:	d0dc      	beq.n	21a4 <ccs811_init+0x18>
	struct gpio_driver_data *data =
    21ea:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    21ec:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    21ee:	6813      	ldr	r3, [r2, #0]
    21f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    21f4:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    21f6:	680b      	ldr	r3, [r1, #0]
    21f8:	f240 6201 	movw	r2, #1537	; 0x601
    21fc:	210b      	movs	r1, #11
    21fe:	4798      	blx	r3
	k_msleep(1);
    2200:	2001      	movs	r0, #1
    2202:	f003 fb79 	bl	58f8 <k_msleep.isra.0>
    2206:	4841      	ldr	r0, [pc, #260]	; (230c <ccs811_init+0x180>)
    2208:	f001 fe52 	bl	3eb0 <z_impl_device_get_binding>
	drv_data->irq_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, irq_gpios));
    220c:	6060      	str	r0, [r4, #4]
	if (drv_data->irq_gpio == NULL) {
    220e:	2800      	cmp	r0, #0
    2210:	d0c8      	beq.n	21a4 <ccs811_init+0x18>
	k_msleep(20);            /* t_START assuming recent power-on */
    2212:	2014      	movs	r0, #20
    2214:	f003 fb70 	bl	58f8 <k_msleep.isra.0>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 1);
    2218:	68a0      	ldr	r0, [r4, #8]
    221a:	2201      	movs	r2, #1
    221c:	210b      	movs	r1, #11
    221e:	f003 fb5b 	bl	58d8 <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
    2222:	200f      	movs	r0, #15
    2224:	f004 f80b 	bl	623e <z_impl_k_busy_wait>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 0);
    2228:	2200      	movs	r2, #0
    222a:	210b      	movs	r1, #11
    222c:	68a0      	ldr	r0, [r4, #8]
    222e:	f003 fb53 	bl	58d8 <gpio_pin_set.isra.0>
	k_msleep(2);             /* t_START after reset */
    2232:	2002      	movs	r0, #2
    2234:	f003 fb60 	bl	58f8 <k_msleep.isra.0>
	ret = switch_to_app_mode(drv_data->i2c);
    2238:	6825      	ldr	r5, [r4, #0]
	status = fetch_status(i2c);
    223a:	4628      	mov	r0, r5
    223c:	f003 fb7a 	bl	5934 <fetch_status>
	if (status < 0) {
    2240:	2800      	cmp	r0, #0
    2242:	da06      	bge.n	2252 <ccs811_init+0xc6>
		ret = -EIO;
    2244:	f06f 0504 	mvn.w	r5, #4
	set_wake(drv_data, false);
    2248:	68e0      	ldr	r0, [r4, #12]
    224a:	2100      	movs	r1, #0
    224c:	f003 fb9b 	bl	5986 <set_wake.isra.0>
	return ret;
    2250:	e7aa      	b.n	21a8 <ccs811_init+0x1c>
	if (!(status & CCS811_STATUS_APP_VALID)) {
    2252:	06c1      	lsls	r1, r0, #27
    2254:	d516      	bpl.n	2284 <ccs811_init+0xf8>
	if (status & CCS811_STATUS_FW_MODE) {
    2256:	0602      	lsls	r2, r0, #24
    2258:	d417      	bmi.n	228a <ccs811_init+0xfe>
	buf = CCS811_REG_APP_START;
    225a:	23f4      	movs	r3, #244	; 0xf4
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
    225c:	2201      	movs	r2, #1
    225e:	f10d 0106 	add.w	r1, sp, #6
    2262:	4628      	mov	r0, r5
	buf = CCS811_REG_APP_START;
    2264:	f88d 3006 	strb.w	r3, [sp, #6]
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
    2268:	f003 fb56 	bl	5918 <i2c_write.constprop.0>
    226c:	2800      	cmp	r0, #0
    226e:	dbe9      	blt.n	2244 <ccs811_init+0xb8>
	k_msleep(1);             /* t_APP_START */
    2270:	2001      	movs	r0, #1
    2272:	f003 fb41 	bl	58f8 <k_msleep.isra.0>
	status = fetch_status(i2c);
    2276:	4628      	mov	r0, r5
    2278:	f003 fb5c 	bl	5934 <fetch_status>
	if (status < 0) {
    227c:	2800      	cmp	r0, #0
    227e:	dbe1      	blt.n	2244 <ccs811_init+0xb8>
	if (!(status & CCS811_STATUS_FW_MODE)) {
    2280:	0603      	lsls	r3, r0, #24
    2282:	d402      	bmi.n	228a <ccs811_init+0xfe>
		ret = -EINVAL;
    2284:	f06f 0515 	mvn.w	r5, #21
    2288:	e7de      	b.n	2248 <ccs811_init+0xbc>
	if (i2c_reg_read_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
    228a:	2320      	movs	r3, #32
    228c:	6820      	ldr	r0, [r4, #0]
    228e:	f88d 3006 	strb.w	r3, [sp, #6]
 */
static inline int i2c_reg_read_byte(const struct device *dev,
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
    2292:	f10d 0203 	add.w	r2, sp, #3
    2296:	2301      	movs	r3, #1
    2298:	f10d 0106 	add.w	r1, sp, #6
    229c:	f003 fb07 	bl	58ae <i2c_write_read.constprop.0>
    22a0:	2800      	cmp	r0, #0
    22a2:	dbcf      	blt.n	2244 <ccs811_init+0xb8>
	if (hw_id != CCS881_HW_ID) {
    22a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    22a8:	2b81      	cmp	r3, #129	; 0x81
    22aa:	d1eb      	bne.n	2284 <ccs811_init+0xf8>
	cmd = CCS811_REG_FW_APP_VERSION;
    22ac:	2324      	movs	r3, #36	; 0x24
    22ae:	f88d 3002 	strb.w	r3, [sp, #2]
	if (i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    22b2:	2302      	movs	r3, #2
    22b4:	6820      	ldr	r0, [r4, #0]
    22b6:	f10d 0206 	add.w	r2, sp, #6
    22ba:	eb0d 0103 	add.w	r1, sp, r3
    22be:	f003 faf6 	bl	58ae <i2c_write_read.constprop.0>
    22c2:	2800      	cmp	r0, #0
    22c4:	dbbe      	blt.n	2244 <ccs811_init+0xb8>
	fw_ver = sys_be16_to_cpu(fw_ver);
    22c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
    22ca:	6820      	ldr	r0, [r4, #0]
    22cc:	ba5b      	rev16	r3, r3
	fw_ver = sys_be16_to_cpu(fw_ver);
    22ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	drv_data->app_fw_ver = fw_ver >> 8U;
    22d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    22d6:	7663      	strb	r3, [r4, #25]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    22d8:	2510      	movs	r5, #16
    22da:	2301      	movs	r3, #1

	return i2c_write(dev, tx_buf, 2, dev_addr);
    22dc:	2202      	movs	r2, #2
    22de:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
    22e0:	f88d 3004 	strb.w	r3, [sp, #4]
    22e4:	f88d 5005 	strb.w	r5, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    22e8:	f003 fb16 	bl	5918 <i2c_write.constprop.0>
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
    22ec:	2800      	cmp	r0, #0
    22ee:	dba9      	blt.n	2244 <ccs811_init+0xb8>
	status = fetch_status(drv_data->i2c);
    22f0:	6820      	ldr	r0, [r4, #0]
	drv_data->mode = meas_mode;
    22f2:	7625      	strb	r5, [r4, #24]
	status = fetch_status(drv_data->i2c);
    22f4:	f003 fb1e 	bl	5934 <fetch_status>
	if (status < 0) {
    22f8:	2800      	cmp	r0, #0
    22fa:	dba3      	blt.n	2244 <ccs811_init+0xb8>
	if (status & CCS811_STATUS_ERROR) {
    22fc:	f010 0501 	ands.w	r5, r0, #1
    2300:	d0a2      	beq.n	2248 <ccs811_init+0xbc>
    2302:	e7bf      	b.n	2284 <ccs811_init+0xf8>
    2304:	00006982 	.word	0x00006982
    2308:	0000696d 	.word	0x0000696d
    230c:	00006975 	.word	0x00006975

00002310 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
    2310:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
    2312:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
    2314:	4908      	ldr	r1, [pc, #32]	; (2338 <regulator_fixed_init_onoff+0x28>)
{
    2316:	4604      	mov	r4, r0
	data->dev = dev;
    2318:	4628      	mov	r0, r5
    231a:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
    231e:	f002 fe2b 	bl	4f78 <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
    2322:	4906      	ldr	r1, [pc, #24]	; (233c <regulator_fixed_init_onoff+0x2c>)
    2324:	f105 0020 	add.w	r0, r5, #32
    2328:	f003 fe78 	bl	601c <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
    232c:	6860      	ldr	r0, [r4, #4]
    232e:	f003 fc30 	bl	5b92 <common_init.isra.0>
	}

	LOG_INF("%s onoff: %d", dev->name, rc);

	return rc;
}
    2332:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    2336:	bd38      	pop	{r3, r4, r5, pc}
    2338:	000067a8 	.word	0x000067a8
    233c:	00005bfd 	.word	0x00005bfd

00002340 <finalize_transition>:
{
    2340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
    2344:	1e1c      	subs	r4, r3, #0
{
    2346:	4605      	mov	r5, r0
    2348:	460f      	mov	r7, r1
    234a:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
    234c:	db10      	blt.n	2370 <finalize_transition+0x30>
    234e:	b17a      	cbz	r2, 2370 <finalize_transition+0x30>
    2350:	ea4f 4952 	mov.w	r9, r2, lsr #17
    2354:	03d6      	lsls	r6, r2, #15
    2356:	2300      	movs	r3, #0
    2358:	4a14      	ldr	r2, [pc, #80]	; (23ac <finalize_transition+0x6c>)
    235a:	4630      	mov	r0, r6
    235c:	4649      	mov	r1, r9
    235e:	f7fd febd 	bl	dc <__aeabi_uldivmod>
		    || k_is_pre_kernel()
    2362:	b110      	cbz	r0, 236a <finalize_transition+0x2a>
	return !z_sys_post_kernel;
    2364:	4b12      	ldr	r3, [pc, #72]	; (23b0 <finalize_transition+0x70>)
    2366:	781b      	ldrb	r3, [r3, #0]
    2368:	b943      	cbnz	r3, 237c <finalize_transition+0x3c>
    236a:	4640      	mov	r0, r8
    236c:	f003 ff67 	bl	623e <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
    2370:	4621      	mov	r1, r4
    2372:	1d28      	adds	r0, r5, #4
    2374:	463b      	mov	r3, r7
}
    2376:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
    237a:	4718      	bx	r3
			return ((t * to_hz + off) / from_hz);
    237c:	480d      	ldr	r0, [pc, #52]	; (23b4 <finalize_transition+0x74>)
    237e:	4a0b      	ldr	r2, [pc, #44]	; (23ac <finalize_transition+0x6c>)
			data->notify = notify;
    2380:	652f      	str	r7, [r5, #80]	; 0x50
    2382:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
    2384:	f04f 0303 	mov.w	r3, #3
    2388:	f149 0100 	adc.w	r1, r9, #0
    238c:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
    2390:	2300      	movs	r3, #0
    2392:	f7fd fea3 	bl	dc <__aeabi_uldivmod>
    2396:	4602      	mov	r2, r0
    2398:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
    239a:	f105 0020 	add.w	r0, r5, #32
    239e:	f002 f8db 	bl	4558 <k_work_schedule>
			if (rc >= 0) {
    23a2:	1e04      	subs	r4, r0, #0
    23a4:	dbe4      	blt.n	2370 <finalize_transition+0x30>
}
    23a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    23aa:	bf00      	nop
    23ac:	000f4240 	.word	0x000f4240
    23b0:	20000abc 	.word	0x20000abc
    23b4:	000f423f 	.word	0x000f423f

000023b8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    23b8:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    23ba:	794b      	ldrb	r3, [r1, #5]
    23bc:	2b01      	cmp	r3, #1
    23be:	d120      	bne.n	2402 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    23c0:	798b      	ldrb	r3, [r1, #6]
    23c2:	2b03      	cmp	r3, #3
    23c4:	d11d      	bne.n	2402 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    23c6:	79cc      	ldrb	r4, [r1, #7]
    23c8:	b10c      	cbz	r4, 23ce <uarte_nrfx_configure+0x16>
    23ca:	2c01      	cmp	r4, #1
    23cc:	d119      	bne.n	2402 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    23ce:	790a      	ldrb	r2, [r1, #4]
    23d0:	b112      	cbz	r2, 23d8 <uarte_nrfx_configure+0x20>
    23d2:	2a02      	cmp	r2, #2
    23d4:	d115      	bne.n	2402 <uarte_nrfx_configure+0x4a>
    23d6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    23d8:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    23da:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    23dc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    23e0:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    23e2:	d062      	beq.n	24aa <uarte_nrfx_configure+0xf2>
    23e4:	d82b      	bhi.n	243e <uarte_nrfx_configure+0x86>
    23e6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    23ea:	d061      	beq.n	24b0 <uarte_nrfx_configure+0xf8>
    23ec:	d814      	bhi.n	2418 <uarte_nrfx_configure+0x60>
    23ee:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    23f2:	d05f      	beq.n	24b4 <uarte_nrfx_configure+0xfc>
    23f4:	d808      	bhi.n	2408 <uarte_nrfx_configure+0x50>
    23f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    23fa:	d05e      	beq.n	24ba <uarte_nrfx_configure+0x102>
    23fc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2400:	d05e      	beq.n	24c0 <uarte_nrfx_configure+0x108>
    2402:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2406:	e04f      	b.n	24a8 <uarte_nrfx_configure+0xf0>
    2408:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    240c:	d05b      	beq.n	24c6 <uarte_nrfx_configure+0x10e>
    240e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2412:	d1f6      	bne.n	2402 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2414:	4b36      	ldr	r3, [pc, #216]	; (24f0 <uarte_nrfx_configure+0x138>)
    2416:	e03c      	b.n	2492 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2418:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    241c:	d056      	beq.n	24cc <uarte_nrfx_configure+0x114>
    241e:	d807      	bhi.n	2430 <uarte_nrfx_configure+0x78>
    2420:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2424:	d054      	beq.n	24d0 <uarte_nrfx_configure+0x118>
    2426:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    242a:	d1ea      	bne.n	2402 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    242c:	4b31      	ldr	r3, [pc, #196]	; (24f4 <uarte_nrfx_configure+0x13c>)
    242e:	e030      	b.n	2492 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2430:	f647 2612 	movw	r6, #31250	; 0x7a12
    2434:	42b3      	cmp	r3, r6
    2436:	d1e4      	bne.n	2402 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2438:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    243c:	e029      	b.n	2492 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    243e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2442:	d047      	beq.n	24d4 <uarte_nrfx_configure+0x11c>
    2444:	d813      	bhi.n	246e <uarte_nrfx_configure+0xb6>
    2446:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    244a:	d046      	beq.n	24da <uarte_nrfx_configure+0x122>
    244c:	d809      	bhi.n	2462 <uarte_nrfx_configure+0xaa>
    244e:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    2452:	42b3      	cmp	r3, r6
    2454:	d043      	beq.n	24de <uarte_nrfx_configure+0x126>
    2456:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    245a:	d1d2      	bne.n	2402 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    245c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2460:	e017      	b.n	2492 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2462:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2466:	d1cc      	bne.n	2402 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2468:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    246c:	e011      	b.n	2492 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    246e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2472:	d037      	beq.n	24e4 <uarte_nrfx_configure+0x12c>
    2474:	d808      	bhi.n	2488 <uarte_nrfx_configure+0xd0>
    2476:	4e20      	ldr	r6, [pc, #128]	; (24f8 <uarte_nrfx_configure+0x140>)
    2478:	42b3      	cmp	r3, r6
    247a:	d036      	beq.n	24ea <uarte_nrfx_configure+0x132>
    247c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2480:	d1bf      	bne.n	2402 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2482:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2486:	e004      	b.n	2492 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2488:	4e1c      	ldr	r6, [pc, #112]	; (24fc <uarte_nrfx_configure+0x144>)
    248a:	42b3      	cmp	r3, r6
    248c:	d1b9      	bne.n	2402 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    248e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2492:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2494:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    2498:	1d03      	adds	r3, r0, #4
    249a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    249c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    249e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    24a2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    24a6:	2000      	movs	r0, #0
}
    24a8:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    24aa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    24ae:	e7f0      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    24b0:	4b13      	ldr	r3, [pc, #76]	; (2500 <uarte_nrfx_configure+0x148>)
    24b2:	e7ee      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    24b4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    24b8:	e7eb      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    24ba:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    24be:	e7e8      	b.n	2492 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    24c0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    24c4:	e7e5      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    24c6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    24ca:	e7e2      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    24cc:	4b0d      	ldr	r3, [pc, #52]	; (2504 <uarte_nrfx_configure+0x14c>)
    24ce:	e7e0      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    24d0:	4b0d      	ldr	r3, [pc, #52]	; (2508 <uarte_nrfx_configure+0x150>)
    24d2:	e7de      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    24d4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    24d8:	e7db      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    24da:	4b0c      	ldr	r3, [pc, #48]	; (250c <uarte_nrfx_configure+0x154>)
    24dc:	e7d9      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    24de:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    24e2:	e7d6      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    24e4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    24e8:	e7d3      	b.n	2492 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    24ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    24ee:	e7d0      	b.n	2492 <uarte_nrfx_configure+0xda>
    24f0:	0013b000 	.word	0x0013b000
    24f4:	004ea000 	.word	0x004ea000
    24f8:	0003d090 	.word	0x0003d090
    24fc:	000f4240 	.word	0x000f4240
    2500:	00275000 	.word	0x00275000
    2504:	0075c000 	.word	0x0075c000
    2508:	003af000 	.word	0x003af000
    250c:	013a9000 	.word	0x013a9000

00002510 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    2512:	6906      	ldr	r6, [r0, #16]
{
    2514:	4605      	mov	r5, r0
    2516:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2518:	f003 fd3d 	bl	5f96 <k_is_in_isr>
    251c:	b910      	cbnz	r0, 2524 <uarte_nrfx_poll_out+0x14>
    251e:	4b2c      	ldr	r3, [pc, #176]	; (25d0 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    2520:	781b      	ldrb	r3, [r3, #0]
    2522:	b983      	cbnz	r3, 2546 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2524:	f04f 0320 	mov.w	r3, #32
    2528:	f3ef 8411 	mrs	r4, BASEPRI
    252c:	f383 8812 	msr	BASEPRI_MAX, r3
    2530:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2534:	6868      	ldr	r0, [r5, #4]
    2536:	f003 fbff 	bl	5d38 <is_tx_ready.isra.0>
    253a:	bb28      	cbnz	r0, 2588 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    253c:	f384 8811 	msr	BASEPRI, r4
    2540:	f3bf 8f6f 	isb	sy
}
    2544:	e7ee      	b.n	2524 <uarte_nrfx_poll_out+0x14>
{
    2546:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2548:	6868      	ldr	r0, [r5, #4]
    254a:	f003 fbf5 	bl	5d38 <is_tx_ready.isra.0>
    254e:	b970      	cbnz	r0, 256e <uarte_nrfx_poll_out+0x5e>
    2550:	2001      	movs	r0, #1
    2552:	f003 fc4a 	bl	5dea <nrfx_busy_wait>
    2556:	3c01      	subs	r4, #1
    2558:	d1f6      	bne.n	2548 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    255a:	2100      	movs	r1, #0
    255c:	2021      	movs	r0, #33	; 0x21
    255e:	f002 fa8f 	bl	4a80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2562:	e7f0      	b.n	2546 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2564:	f384 8811 	msr	BASEPRI, r4
    2568:	f3bf 8f6f 	isb	sy
}
    256c:	e7f5      	b.n	255a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    256e:	f04f 0320 	mov.w	r3, #32
    2572:	f3ef 8411 	mrs	r4, BASEPRI
    2576:	f383 8812 	msr	BASEPRI_MAX, r3
    257a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    257e:	6868      	ldr	r0, [r5, #4]
    2580:	f003 fbda 	bl	5d38 <is_tx_ready.isra.0>
    2584:	2800      	cmp	r0, #0
    2586:	d0ed      	beq.n	2564 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2588:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    258c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    258e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2590:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2592:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2596:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    259a:	2200      	movs	r2, #0
    259c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    25a0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    25a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    25a8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    25ac:	684a      	ldr	r2, [r1, #4]
    25ae:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    25b0:	bf41      	itttt	mi
    25b2:	2208      	movmi	r2, #8
    25b4:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    25b8:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    25bc:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25c0:	2201      	movs	r2, #1
    25c2:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    25c4:	f384 8811 	msr	BASEPRI, r4
    25c8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    25cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25ce:	bf00      	nop
    25d0:	20000abc 	.word	0x20000abc

000025d4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    25d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    25d8:	2101      	movs	r1, #1
    25da:	4606      	mov	r6, r0
    25dc:	2200      	movs	r2, #0
    25de:	2002      	movs	r0, #2
    25e0:	f7fe fe2a 	bl	1238 <z_arm_irq_priority_set>
    25e4:	2002      	movs	r0, #2
    25e6:	f7fe fdf5 	bl	11d4 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    25ea:	6877      	ldr	r7, [r6, #4]
	struct uarte_nrfx_data *data = dev->data;
    25ec:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
    25ee:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    25f0:	2300      	movs	r3, #0
    25f2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    25f6:	602e      	str	r6, [r5, #0]
	uarte_nrfx_pins_configure(dev, false);
    25f8:	6873      	ldr	r3, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    25fa:	68d8      	ldr	r0, [r3, #12]
    25fc:	1c41      	adds	r1, r0, #1
    25fe:	d00c      	beq.n	261a <uarte_0_init+0x46>
    *p_pin = pin_number & 0x1F;
    2600:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
    2604:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2608:	2101      	movs	r1, #1
    260a:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
    260c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    2610:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    2614:	2103      	movs	r1, #3
    2616:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    261a:	6919      	ldr	r1, [r3, #16]
    261c:	1c4a      	adds	r2, r1, #1
    261e:	d010      	beq.n	2642 <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    2620:	7f1a      	ldrb	r2, [r3, #28]
    2622:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
    2624:	f001 021f 	and.w	r2, r1, #31
    2628:	bf14      	ite	ne
    262a:	f04f 0c03 	movne.w	ip, #3
    262e:	f04f 0c00 	moveq.w	ip, #0
    reg->PIN_CNF[pin_number] = cnf;
    2632:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    2636:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    263a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    263e:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2642:	f8d3 c014 	ldr.w	ip, [r3, #20]
    2646:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    264a:	d00f      	beq.n	266c <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
    264c:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
    2650:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2654:	f04f 0e01 	mov.w	lr, #1
    2658:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
    265c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    2660:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    2664:	f04f 0e03 	mov.w	lr, #3
    2668:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    266c:	f8d3 e018 	ldr.w	lr, [r3, #24]
    2670:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    2674:	d010      	beq.n	2698 <uarte_0_init+0xc4>
			nrf_gpio_cfg_input(cfg->cts_pin,
    2676:	7f5a      	ldrb	r2, [r3, #29]
    2678:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
    267a:	f00e 021f 	and.w	r2, lr, #31
    267e:	bf14      	ite	ne
    2680:	f04f 0803 	movne.w	r8, #3
    2684:	f04f 0800 	moveq.w	r8, #0
    reg->PIN_CNF[pin_number] = cnf;
    2688:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    268c:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2690:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2694:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    2698:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
    269a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    269e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &data->uart_config);
    26a2:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
    26a4:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
    26a8:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
    26aa:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
    26ae:	f7ff fe83 	bl	23b8 <uarte_nrfx_configure>
	if (err) {
    26b2:	4606      	mov	r6, r0
    26b4:	2800      	cmp	r0, #0
    26b6:	d143      	bne.n	2740 <uarte_0_init+0x16c>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    26b8:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    26ba:	0799      	lsls	r1, r3, #30
    26bc:	d519      	bpl.n	26f2 <uarte_0_init+0x11e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    26be:	f105 0012 	add.w	r0, r5, #18
    26c2:	f001 f821 	bl	3708 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    26c6:	4b21      	ldr	r3, [pc, #132]	; (274c <uarte_0_init+0x178>)
    26c8:	4298      	cmp	r0, r3
    26ca:	d13c      	bne.n	2746 <uarte_0_init+0x172>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    26cc:	7ca8      	ldrb	r0, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    26ce:	00c3      	lsls	r3, r0, #3
    26d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    26d4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    26d8:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    26dc:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    26e0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    26e4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    26e8:	4a19      	ldr	r2, [pc, #100]	; (2750 <uarte_0_init+0x17c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    26ea:	2301      	movs	r3, #1
    26ec:	4083      	lsls	r3, r0
    26ee:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    26f2:	2308      	movs	r3, #8
    26f4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    26f8:	7a3b      	ldrb	r3, [r7, #8]
    26fa:	b95b      	cbnz	r3, 2714 <uarte_0_init+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26fc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2700:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2704:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2708:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    270c:	2301      	movs	r3, #1
    270e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2712:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2718:	bf5c      	itt	pl
    271a:	f44f 7280 	movpl.w	r2, #256	; 0x100
    271e:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2722:	06db      	lsls	r3, r3, #27
    2724:	bf44      	itt	mi
    2726:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    272a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    272e:	3510      	adds	r5, #16
    p_reg->TXD.MAXCNT = length;
    2730:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2732:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2736:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    273a:	2301      	movs	r3, #1
    273c:	60a3      	str	r3, [r4, #8]
    273e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2740:	4630      	mov	r0, r6
    2742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2746:	f06f 0604 	mvn.w	r6, #4
UART_NRF_UARTE_DEVICE(0);
    274a:	e7f9      	b.n	2740 <uarte_0_init+0x16c>
    274c:	0bad0000 	.word	0x0bad0000
    2750:	4001f000 	.word	0x4001f000

00002754 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2754:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2756:	2301      	movs	r3, #1
    2758:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    275a:	4a11      	ldr	r2, [pc, #68]	; (27a0 <compare_int_lock+0x4c>)
    275c:	f3bf 8f5b 	dmb	ish
    2760:	43dc      	mvns	r4, r3
    2762:	e852 1f00 	ldrex	r1, [r2]
    2766:	ea01 0c04 	and.w	ip, r1, r4
    276a:	e842 ce00 	strex	lr, ip, [r2]
    276e:	f1be 0f00 	cmp.w	lr, #0
    2772:	d1f6      	bne.n	2762 <compare_int_lock+0xe>
    2774:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2778:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    277c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2780:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2784:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2788:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    278c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2790:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2794:	420b      	tst	r3, r1
}
    2796:	bf14      	ite	ne
    2798:	2001      	movne	r0, #1
    279a:	2000      	moveq	r0, #0
    279c:	bd10      	pop	{r4, pc}
    279e:	bf00      	nop
    27a0:	20000518 	.word	0x20000518

000027a4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    27a4:	4919      	ldr	r1, [pc, #100]	; (280c <sys_clock_timeout_handler+0x68>)
{
    27a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27a8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    27aa:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    27ae:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    27b0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    27b4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    27b8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    27ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    27be:	d222      	bcs.n	2806 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    27c0:	4b13      	ldr	r3, [pc, #76]	; (2810 <sys_clock_timeout_handler+0x6c>)
    27c2:	681b      	ldr	r3, [r3, #0]
    27c4:	0a1a      	lsrs	r2, r3, #8
    27c6:	061b      	lsls	r3, r3, #24
    27c8:	195e      	adds	r6, r3, r5
    27ca:	4b12      	ldr	r3, [pc, #72]	; (2814 <sys_clock_timeout_handler+0x70>)
    27cc:	f142 0700 	adc.w	r7, r2, #0
    27d0:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    27d4:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    27d6:	f002 fab5 	bl	4d44 <sys_clock_announce>
    return p_reg->CC[ch];
    27da:	00a3      	lsls	r3, r4, #2
    27dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    27e0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    27e4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    27e8:	42aa      	cmp	r2, r5
    27ea:	d10b      	bne.n	2804 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    27ec:	b91e      	cbnz	r6, 27f6 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    27ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    27f2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    27f6:	4b08      	ldr	r3, [pc, #32]	; (2818 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    27f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    27fc:	fa00 f404 	lsl.w	r4, r0, r4
    2800:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2806:	2600      	movs	r6, #0
    2808:	e7e5      	b.n	27d6 <sys_clock_timeout_handler+0x32>
    280a:	bf00      	nop
    280c:	20000288 	.word	0x20000288
    2810:	2000051c 	.word	0x2000051c
    2814:	20000270 	.word	0x20000270
    2818:	40011000 	.word	0x40011000

0000281c <compare_int_unlock>:
	if (key) {
    281c:	b319      	cbz	r1, 2866 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    281e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    2822:	2301      	movs	r3, #1
    2824:	4a10      	ldr	r2, [pc, #64]	; (2868 <compare_int_unlock+0x4c>)
    2826:	4083      	lsls	r3, r0
    2828:	e852 1f00 	ldrex	r1, [r2]
    282c:	4319      	orrs	r1, r3
    282e:	e842 1c00 	strex	ip, r1, [r2]
    2832:	f1bc 0f00 	cmp.w	ip, #0
    2836:	d1f7      	bne.n	2828 <compare_int_unlock+0xc>
    2838:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    283c:	4a0b      	ldr	r2, [pc, #44]	; (286c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    283e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2842:	4083      	lsls	r3, r0
    2844:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2848:	4b09      	ldr	r3, [pc, #36]	; (2870 <compare_int_unlock+0x54>)
    284a:	f3bf 8f5b 	dmb	ish
    284e:	681b      	ldr	r3, [r3, #0]
    2850:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2854:	fa23 f000 	lsr.w	r0, r3, r0
    2858:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    285a:	bf42      	ittt	mi
    285c:	4b05      	ldrmi	r3, [pc, #20]	; (2874 <compare_int_unlock+0x58>)
    285e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    2862:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2866:	4770      	bx	lr
    2868:	20000518 	.word	0x20000518
    286c:	40011000 	.word	0x40011000
    2870:	20000514 	.word	0x20000514
    2874:	e000e100 	.word	0xe000e100

00002878 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2878:	4b0d      	ldr	r3, [pc, #52]	; (28b0 <z_nrf_rtc_timer_read+0x38>)
    287a:	6818      	ldr	r0, [r3, #0]
    287c:	0a01      	lsrs	r1, r0, #8
    287e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2880:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2884:	4b0b      	ldr	r3, [pc, #44]	; (28b4 <z_nrf_rtc_timer_read+0x3c>)
    2886:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    288a:	1818      	adds	r0, r3, r0
    288c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2894:	d20a      	bcs.n	28ac <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2896:	4b08      	ldr	r3, [pc, #32]	; (28b8 <z_nrf_rtc_timer_read+0x40>)
    2898:	e9d3 2300 	ldrd	r2, r3, [r3]
    289c:	4290      	cmp	r0, r2
    289e:	eb71 0303 	sbcs.w	r3, r1, r3
    28a2:	d203      	bcs.n	28ac <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    28a4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    28a8:	f141 0100 	adc.w	r1, r1, #0
}
    28ac:	4770      	bx	lr
    28ae:	bf00      	nop
    28b0:	2000051c 	.word	0x2000051c
    28b4:	40011000 	.word	0x40011000
    28b8:	20000270 	.word	0x20000270

000028bc <compare_set>:
{
    28bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28c0:	b085      	sub	sp, #20
    28c2:	4616      	mov	r6, r2
    28c4:	4698      	mov	r8, r3
    28c6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    28c8:	f7ff ff44 	bl	2754 <compare_int_lock>
    28cc:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    28ce:	f7ff ffd3 	bl	2878 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    28d2:	42b0      	cmp	r0, r6
    28d4:	eb71 0308 	sbcs.w	r3, r1, r8
    28d8:	d278      	bcs.n	29cc <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    28da:	4b46      	ldr	r3, [pc, #280]	; (29f4 <compare_set+0x138>)
    28dc:	1a30      	subs	r0, r6, r0
    28de:	eb68 0101 	sbc.w	r1, r8, r1
    28e2:	4298      	cmp	r0, r3
    28e4:	f171 0300 	sbcs.w	r3, r1, #0
    28e8:	f080 8081 	bcs.w	29ee <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    28ec:	4b42      	ldr	r3, [pc, #264]	; (29f8 <compare_set+0x13c>)
    28ee:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    28f2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    28f6:	45d8      	cmp	r8, fp
    28f8:	bf08      	it	eq
    28fa:	4556      	cmpeq	r6, sl
    28fc:	d051      	beq.n	29a2 <compare_set+0xe6>
    28fe:	ea4f 0985 	mov.w	r9, r5, lsl #2
    2902:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2906:	f105 0750 	add.w	r7, r5, #80	; 0x50
    290a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    290e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2910:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2914:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2918:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    291a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    291e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2922:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    2924:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2928:	4b34      	ldr	r3, [pc, #208]	; (29fc <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    292a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    292e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    2930:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2934:	1a40      	subs	r0, r0, r1
    2936:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    293a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    293e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    2940:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    2944:	d107      	bne.n	2956 <compare_set+0x9a>
    2946:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    294a:	2013      	movs	r0, #19
    294c:	f003 fc77 	bl	623e <z_impl_k_busy_wait>
    2950:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2954:	4b29      	ldr	r3, [pc, #164]	; (29fc <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    2956:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    295a:	eba4 000c 	sub.w	r0, r4, ip
    295e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    2962:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2966:	bf88      	it	hi
    2968:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    296a:	2000      	movs	r0, #0
    296c:	6038      	str	r0, [r7, #0]
    296e:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    2970:	9801      	ldr	r0, [sp, #4]
    2972:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2976:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    297a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    297e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    2982:	4281      	cmp	r1, r0
    2984:	d006      	beq.n	2994 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    2986:	1a20      	subs	r0, r4, r0
    2988:	3802      	subs	r0, #2
    298a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    298e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2992:	d819      	bhi.n	29c8 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    2994:	1aa4      	subs	r4, r4, r2
    2996:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    299a:	eb14 0a06 	adds.w	sl, r4, r6
    299e:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    29a2:	4915      	ldr	r1, [pc, #84]	; (29f8 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    29a4:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    29a6:	012b      	lsls	r3, r5, #4
    29a8:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    29ac:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    29b0:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    29b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    29b4:	6053      	str	r3, [r2, #4]
	return ret;
    29b6:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    29b8:	4628      	mov	r0, r5
    29ba:	9900      	ldr	r1, [sp, #0]
    29bc:	f7ff ff2e 	bl	281c <compare_int_unlock>
}
    29c0:	4620      	mov	r0, r4
    29c2:	b005      	add	sp, #20
    29c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29c8:	4620      	mov	r0, r4
    29ca:	e7b1      	b.n	2930 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    29cc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    29ce:	4a0c      	ldr	r2, [pc, #48]	; (2a00 <compare_set+0x144>)
    29d0:	f3bf 8f5b 	dmb	ish
    29d4:	40ab      	lsls	r3, r5
    29d6:	e852 1f00 	ldrex	r1, [r2]
    29da:	4319      	orrs	r1, r3
    29dc:	e842 1000 	strex	r0, r1, [r2]
    29e0:	2800      	cmp	r0, #0
    29e2:	d1f8      	bne.n	29d6 <compare_set+0x11a>
    29e4:	f3bf 8f5b 	dmb	ish
    29e8:	46b2      	mov	sl, r6
    29ea:	46c3      	mov	fp, r8
    29ec:	e7d9      	b.n	29a2 <compare_set+0xe6>
			return -EINVAL;
    29ee:	f06f 0415 	mvn.w	r4, #21
    29f2:	e7e1      	b.n	29b8 <compare_set+0xfc>
    29f4:	01000001 	.word	0x01000001
    29f8:	20000278 	.word	0x20000278
    29fc:	40011000 	.word	0x40011000
    2a00:	20000514 	.word	0x20000514

00002a04 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2a06:	4b19      	ldr	r3, [pc, #100]	; (2a6c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    2a08:	4d19      	ldr	r5, [pc, #100]	; (2a70 <sys_clock_driver_init+0x6c>)
    2a0a:	2400      	movs	r4, #0
    2a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2a14:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2a18:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a20:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a24:	4b13      	ldr	r3, [pc, #76]	; (2a74 <sys_clock_driver_init+0x70>)
    2a26:	2602      	movs	r6, #2
    2a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2a2c:	2101      	movs	r1, #1
    2a2e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    2a32:	2011      	movs	r0, #17
    2a34:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2a38:	4622      	mov	r2, r4
    2a3a:	f7fe fbfd 	bl	1238 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2a3e:	2011      	movs	r0, #17
    2a40:	f7fe fbc8 	bl	11d4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2a44:	4a0c      	ldr	r2, [pc, #48]	; (2a78 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2a46:	2301      	movs	r3, #1
    2a48:	60ab      	str	r3, [r5, #8]
    2a4a:	602b      	str	r3, [r5, #0]
    2a4c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2a4e:	4b0b      	ldr	r3, [pc, #44]	; (2a7c <sys_clock_driver_init+0x78>)
    2a50:	4a0b      	ldr	r2, [pc, #44]	; (2a80 <sys_clock_driver_init+0x7c>)
    2a52:	9300      	str	r3, [sp, #0]
    2a54:	9401      	str	r4, [sp, #4]
    2a56:	2300      	movs	r3, #0
    2a58:	4620      	mov	r0, r4
    2a5a:	f7ff ff2f 	bl	28bc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2a5e:	4630      	mov	r0, r6
    2a60:	f7ff f850 	bl	1b04 <z_nrf_clock_control_lf_on>

	return 0;
}
    2a64:	4620      	mov	r0, r4
    2a66:	b002      	add	sp, #8
    2a68:	bd70      	pop	{r4, r5, r6, pc}
    2a6a:	bf00      	nop
    2a6c:	20000278 	.word	0x20000278
    2a70:	40011000 	.word	0x40011000
    2a74:	e000e100 	.word	0xe000e100
    2a78:	20000518 	.word	0x20000518
    2a7c:	000027a5 	.word	0x000027a5
    2a80:	007fffff 	.word	0x007fffff

00002a84 <rtc_nrf_isr>:
{
    2a84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2a88:	4c35      	ldr	r4, [pc, #212]	; (2b60 <rtc_nrf_isr+0xdc>)
    2a8a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2a8e:	079a      	lsls	r2, r3, #30
    2a90:	d50b      	bpl.n	2aaa <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a92:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2a96:	b143      	cbz	r3, 2aaa <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2a98:	4a32      	ldr	r2, [pc, #200]	; (2b64 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2a9a:	2300      	movs	r3, #0
    2a9c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2aa0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2aa4:	6813      	ldr	r3, [r2, #0]
    2aa6:	3301      	adds	r3, #1
    2aa8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2aaa:	f04f 0320 	mov.w	r3, #32
    2aae:	f3ef 8211 	mrs	r2, BASEPRI
    2ab2:	f383 8812 	msr	BASEPRI_MAX, r3
    2ab6:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    2aba:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2abe:	03db      	lsls	r3, r3, #15
    2ac0:	d512      	bpl.n	2ae8 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2ac2:	f3bf 8f5b 	dmb	ish
    2ac6:	4b28      	ldr	r3, [pc, #160]	; (2b68 <rtc_nrf_isr+0xe4>)
    2ac8:	e853 1f00 	ldrex	r1, [r3]
    2acc:	f021 0001 	bic.w	r0, r1, #1
    2ad0:	e843 0600 	strex	r6, r0, [r3]
    2ad4:	2e00      	cmp	r6, #0
    2ad6:	d1f7      	bne.n	2ac8 <rtc_nrf_isr+0x44>
    2ad8:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2adc:	2900      	cmp	r1, #0
    2ade:	d136      	bne.n	2b4e <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ae0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d132      	bne.n	2b4e <rtc_nrf_isr+0xca>
{
    2ae8:	2300      	movs	r3, #0
	__asm__ volatile(
    2aea:	f382 8811 	msr	BASEPRI, r2
    2aee:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    2af2:	b34b      	cbz	r3, 2b48 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    2af4:	f7ff fec0 	bl	2878 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2af8:	f04f 0320 	mov.w	r3, #32
    2afc:	f3ef 8c11 	mrs	ip, BASEPRI
    2b00:	f383 8812 	msr	BASEPRI_MAX, r3
    2b04:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2b08:	4b18      	ldr	r3, [pc, #96]	; (2b6c <rtc_nrf_isr+0xe8>)
    2b0a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2b0e:	42b0      	cmp	r0, r6
    2b10:	eb71 0207 	sbcs.w	r2, r1, r7
    2b14:	f04f 0200 	mov.w	r2, #0
    2b18:	d320      	bcc.n	2b5c <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b1a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2b1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    2b22:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2b26:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    2b2a:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b30:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    2b34:	f38c 8811 	msr	BASEPRI, ip
    2b38:	f3bf 8f6f 	isb	sy
		if (handler) {
    2b3c:	b121      	cbz	r1, 2b48 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    2b3e:	9500      	str	r5, [sp, #0]
    2b40:	4632      	mov	r2, r6
    2b42:	463b      	mov	r3, r7
    2b44:	2000      	movs	r0, #0
    2b46:	4788      	blx	r1
}
    2b48:	b003      	add	sp, #12
    2b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b4e:	2300      	movs	r3, #0
    2b50:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    2b54:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2b58:	2301      	movs	r3, #1
}
    2b5a:	e7c6      	b.n	2aea <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2b5c:	4611      	mov	r1, r2
    2b5e:	e7e9      	b.n	2b34 <rtc_nrf_isr+0xb0>
    2b60:	40011000 	.word	0x40011000
    2b64:	2000051c 	.word	0x2000051c
    2b68:	20000514 	.word	0x20000514
    2b6c:	20000278 	.word	0x20000278

00002b70 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2b70:	1c43      	adds	r3, r0, #1
{
    2b72:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2b74:	d021      	beq.n	2bba <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2b76:	2801      	cmp	r0, #1
    2b78:	dd21      	ble.n	2bbe <sys_clock_set_timeout+0x4e>
    2b7a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2b7e:	da20      	bge.n	2bc2 <sys_clock_set_timeout+0x52>
    2b80:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2b82:	f7ff fe79 	bl	2878 <z_nrf_rtc_timer_read>
    2b86:	4b10      	ldr	r3, [pc, #64]	; (2bc8 <sys_clock_set_timeout+0x58>)
    2b88:	e9d3 1300 	ldrd	r1, r3, [r3]
    2b8c:	1a40      	subs	r0, r0, r1
		ticks = 0;
    2b8e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2b92:	bf28      	it	cs
    2b94:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2b96:	3001      	adds	r0, #1
    2b98:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    2b9a:	480c      	ldr	r0, [pc, #48]	; (2bcc <sys_clock_set_timeout+0x5c>)
    2b9c:	4282      	cmp	r2, r0
    2b9e:	bf28      	it	cs
    2ba0:	4602      	movcs	r2, r0
    2ba2:	1852      	adds	r2, r2, r1
    2ba4:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2ba8:	4909      	ldr	r1, [pc, #36]	; (2bd0 <sys_clock_set_timeout+0x60>)
    2baa:	9001      	str	r0, [sp, #4]
    2bac:	9100      	str	r1, [sp, #0]
    2bae:	f143 0300 	adc.w	r3, r3, #0
    2bb2:	f7ff fe83 	bl	28bc <compare_set>
}
    2bb6:	b002      	add	sp, #8
    2bb8:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2bba:	4804      	ldr	r0, [pc, #16]	; (2bcc <sys_clock_set_timeout+0x5c>)
    2bbc:	e7e0      	b.n	2b80 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2bbe:	2400      	movs	r4, #0
    2bc0:	e7df      	b.n	2b82 <sys_clock_set_timeout+0x12>
    2bc2:	4c02      	ldr	r4, [pc, #8]	; (2bcc <sys_clock_set_timeout+0x5c>)
    2bc4:	e7dd      	b.n	2b82 <sys_clock_set_timeout+0x12>
    2bc6:	bf00      	nop
    2bc8:	20000288 	.word	0x20000288
    2bcc:	007fffff 	.word	0x007fffff
    2bd0:	000027a5 	.word	0x000027a5

00002bd4 <sys_clock_elapsed>:
{
    2bd4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2bd6:	f7ff fe4f 	bl	2878 <z_nrf_rtc_timer_read>
    2bda:	4b02      	ldr	r3, [pc, #8]	; (2be4 <sys_clock_elapsed+0x10>)
    2bdc:	681b      	ldr	r3, [r3, #0]
}
    2bde:	1ac0      	subs	r0, r0, r3
    2be0:	bd08      	pop	{r3, pc}
    2be2:	bf00      	nop
    2be4:	20000288 	.word	0x20000288

00002be8 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2be8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    2bec:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2bf0:	2a06      	cmp	r2, #6
    2bf2:	d109      	bne.n	2c08 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2bf4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    2bf8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2bfc:	3b03      	subs	r3, #3
    2bfe:	2b04      	cmp	r3, #4
    2c00:	d802      	bhi.n	2c08 <nrf52_errata_16+0x20>
    2c02:	4a02      	ldr	r2, [pc, #8]	; (2c0c <nrf52_errata_16+0x24>)
    2c04:	5cd0      	ldrb	r0, [r2, r3]
    2c06:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2c08:	2000      	movs	r0, #0
    #endif
}
    2c0a:	4770      	bx	lr
    2c0c:	000069e5 	.word	0x000069e5

00002c10 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2c10:	4a02      	ldr	r2, [pc, #8]	; (2c1c <nvmc_wait+0xc>)
    2c12:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2c16:	2b00      	cmp	r3, #0
    2c18:	d0fb      	beq.n	2c12 <nvmc_wait+0x2>
}
    2c1a:	4770      	bx	lr
    2c1c:	4001e000 	.word	0x4001e000

00002c20 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2c20:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    2c22:	f003 f8d3 	bl	5dcc <nrf52_errata_108>
    2c26:	b140      	cbz	r0, 2c3a <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2c28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2c2c:	4a90      	ldr	r2, [pc, #576]	; (2e70 <SystemInit+0x250>)
    2c2e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    2c32:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2c36:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2c3a:	f7ff ffd5 	bl	2be8 <nrf52_errata_16>
    2c3e:	b110      	cbz	r0, 2c46 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    2c40:	4b8c      	ldr	r3, [pc, #560]	; (2e74 <SystemInit+0x254>)
    2c42:	4a8d      	ldr	r2, [pc, #564]	; (2e78 <SystemInit+0x258>)
    2c44:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2c46:	f003 f8c1 	bl	5dcc <nrf52_errata_108>
    2c4a:	b148      	cbz	r0, 2c60 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2c4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c54:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    2c58:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2c5c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    2c60:	f7ff ffc2 	bl	2be8 <nrf52_errata_16>
    2c64:	b130      	cbz	r0, 2c74 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2c66:	4a85      	ldr	r2, [pc, #532]	; (2e7c <SystemInit+0x25c>)
    2c68:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    2c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2c70:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2c74:	f003 f8aa 	bl	5dcc <nrf52_errata_108>
    2c78:	b140      	cbz	r0, 2c8c <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    2c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c7e:	2200      	movs	r2, #0
    2c80:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2c84:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2c88:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2c8c:	f7ff ffac 	bl	2be8 <nrf52_errata_16>
    2c90:	b120      	cbz	r0, 2c9c <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    2c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c96:	2203      	movs	r2, #3
    2c98:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2c9c:	f7ff ffa4 	bl	2be8 <nrf52_errata_16>
    2ca0:	b160      	cbz	r0, 2cbc <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    2ca2:	4b77      	ldr	r3, [pc, #476]	; (2e80 <SystemInit+0x260>)
    2ca4:	2205      	movs	r2, #5
    2ca6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    2caa:	2201      	movs	r2, #1
    2cac:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    2cb0:	2200      	movs	r2, #0
    2cb2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2cb6:	223f      	movs	r2, #63	; 0x3f
    2cb8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2cc0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2cc4:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2cc6:	bf09      	itett	eq
    2cc8:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    2ccc:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2cd0:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2cd4:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    2cd8:	bf08      	it	eq
    2cda:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2cde:	2a06      	cmp	r2, #6
    2ce0:	d14d      	bne.n	2d7e <SystemInit+0x15e>
            {
                switch(var2)
    2ce2:	3b03      	subs	r3, #3
    2ce4:	2b04      	cmp	r3, #4
    2ce6:	d803      	bhi.n	2cf0 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2ce8:	4a66      	ldr	r2, [pc, #408]	; (2e84 <SystemInit+0x264>)
    2cea:	5cd3      	ldrb	r3, [r2, r3]
    2cec:	2b00      	cmp	r3, #0
    2cee:	d046      	beq.n	2d7e <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2cf4:	4b64      	ldr	r3, [pc, #400]	; (2e88 <SystemInit+0x268>)
    2cf6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2cfa:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2cfe:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2d02:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2d06:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2d0a:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2d0e:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2d12:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2d16:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2d1a:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2d1e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2d22:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2d26:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2d2a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2d2e:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2d32:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2d36:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2d3a:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2d3e:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2d42:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2d46:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2d4a:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2d4e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2d52:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2d56:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2d5a:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2d5e:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2d62:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2d66:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2d6a:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2d6e:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2d72:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2d76:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2d7a:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    2d7e:	f003 f825 	bl	5dcc <nrf52_errata_108>
    2d82:	b148      	cbz	r0, 2d98 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2d84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d8c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2d90:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2d94:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2d98:	f003 f818 	bl	5dcc <nrf52_errata_108>
    2d9c:	b148      	cbz	r0, 2db2 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2da2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2da6:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2da8:	bf44      	itt	mi
    2daa:	f06f 0201 	mvnmi.w	r2, #1
    2dae:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2db2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2db6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2dba:	2a06      	cmp	r2, #6
    2dbc:	d126      	bne.n	2e0c <SystemInit+0x1ec>
            {
                switch(var2)
    2dbe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2dc2:	3b03      	subs	r3, #3
    2dc4:	2b04      	cmp	r3, #4
    2dc6:	d802      	bhi.n	2dce <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    2dc8:	4a30      	ldr	r2, [pc, #192]	; (2e8c <SystemInit+0x26c>)
    2dca:	5cd3      	ldrb	r3, [r2, r3]
    2dcc:	b163      	cbz	r3, 2de8 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    2dce:	4a30      	ldr	r2, [pc, #192]	; (2e90 <SystemInit+0x270>)
    2dd0:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    2dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2dd8:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2de0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2de4:	2b06      	cmp	r3, #6
    2de6:	d111      	bne.n	2e0c <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2de8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2dec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2df0:	3b03      	subs	r3, #3
    2df2:	2b04      	cmp	r3, #4
    2df4:	d802      	bhi.n	2dfc <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2df6:	4a27      	ldr	r2, [pc, #156]	; (2e94 <SystemInit+0x274>)
    2df8:	5cd3      	ldrb	r3, [r2, r3]
    2dfa:	b13b      	cbz	r3, 2e0c <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2dfc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2e00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e08:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2e0c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2e10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2e14:	2a00      	cmp	r2, #0
    2e16:	db03      	blt.n	2e20 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2e18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	da22      	bge.n	2e66 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2e20:	491d      	ldr	r1, [pc, #116]	; (2e98 <SystemInit+0x278>)
    2e22:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2e24:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2e28:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2e2c:	2415      	movs	r4, #21
    nvmc_wait();
    2e2e:	f7ff feef 	bl	2c10 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2e32:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2e36:	f7ff feeb 	bl	2c10 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2e3a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2e3e:	f7ff fee7 	bl	2c10 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2e42:	2300      	movs	r3, #0
    2e44:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2e48:	f7ff fee2 	bl	2c10 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2e4c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e50:	490a      	ldr	r1, [pc, #40]	; (2e7c <SystemInit+0x25c>)
    2e52:	4b12      	ldr	r3, [pc, #72]	; (2e9c <SystemInit+0x27c>)
    2e54:	68ca      	ldr	r2, [r1, #12]
    2e56:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e5a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e5c:	60cb      	str	r3, [r1, #12]
    2e5e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2e62:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2e64:	e7fd      	b.n	2e62 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2e66:	4b0e      	ldr	r3, [pc, #56]	; (2ea0 <SystemInit+0x280>)
    2e68:	4a0e      	ldr	r2, [pc, #56]	; (2ea4 <SystemInit+0x284>)
    2e6a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2e6c:	bd10      	pop	{r4, pc}
    2e6e:	bf00      	nop
    2e70:	40013000 	.word	0x40013000
    2e74:	4007c000 	.word	0x4007c000
    2e78:	baadf00d 	.word	0xbaadf00d
    2e7c:	e000ed00 	.word	0xe000ed00
    2e80:	40005000 	.word	0x40005000
    2e84:	000069d6 	.word	0x000069d6
    2e88:	4000c000 	.word	0x4000c000
    2e8c:	000069db 	.word	0x000069db
    2e90:	40001000 	.word	0x40001000
    2e94:	000069e0 	.word	0x000069e0
    2e98:	4001e000 	.word	0x4001e000
    2e9c:	05fa0004 	.word	0x05fa0004
    2ea0:	200000c4 	.word	0x200000c4
    2ea4:	03d09000 	.word	0x03d09000

00002ea8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2ea8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2eaa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2eac:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2eae:	fab2 f382 	clz	r3, r2
    2eb2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    2eb6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    2eb8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    2eba:	d014      	beq.n	2ee6 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2ebc:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2ec0:	fa05 f303 	lsl.w	r3, r5, r3
    2ec4:	ea22 0303 	bic.w	r3, r2, r3
    2ec8:	e850 6f00 	ldrex	r6, [r0]
    2ecc:	4296      	cmp	r6, r2
    2ece:	d104      	bne.n	2eda <nrfx_flag32_alloc+0x32>
    2ed0:	e840 3c00 	strex	ip, r3, [r0]
    2ed4:	f1bc 0f00 	cmp.w	ip, #0
    2ed8:	d1f6      	bne.n	2ec8 <nrfx_flag32_alloc+0x20>
    2eda:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2ede:	d1e5      	bne.n	2eac <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    2ee0:	4802      	ldr	r0, [pc, #8]	; (2eec <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    2ee2:	700c      	strb	r4, [r1, #0]
}
    2ee4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    2ee6:	4802      	ldr	r0, [pc, #8]	; (2ef0 <nrfx_flag32_alloc+0x48>)
    2ee8:	e7fc      	b.n	2ee4 <nrfx_flag32_alloc+0x3c>
    2eea:	bf00      	nop
    2eec:	0bad0000 	.word	0x0bad0000
    2ef0:	0bad0002 	.word	0x0bad0002

00002ef4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2ef4:	6803      	ldr	r3, [r0, #0]
    2ef6:	40cb      	lsrs	r3, r1
    2ef8:	07db      	lsls	r3, r3, #31
{
    2efa:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    2efc:	d415      	bmi.n	2f2a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2efe:	2301      	movs	r3, #1
    2f00:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    2f04:	6803      	ldr	r3, [r0, #0]
    2f06:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2f0a:	ea41 0203 	orr.w	r2, r1, r3
    2f0e:	e850 4f00 	ldrex	r4, [r0]
    2f12:	429c      	cmp	r4, r3
    2f14:	d104      	bne.n	2f20 <nrfx_flag32_free+0x2c>
    2f16:	e840 2c00 	strex	ip, r2, [r0]
    2f1a:	f1bc 0f00 	cmp.w	ip, #0
    2f1e:	d1f6      	bne.n	2f0e <nrfx_flag32_free+0x1a>
    2f20:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2f24:	d1ee      	bne.n	2f04 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    2f26:	4802      	ldr	r0, [pc, #8]	; (2f30 <nrfx_flag32_free+0x3c>)
}
    2f28:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2f2a:	4802      	ldr	r0, [pc, #8]	; (2f34 <nrfx_flag32_free+0x40>)
    2f2c:	e7fc      	b.n	2f28 <nrfx_flag32_free+0x34>
    2f2e:	bf00      	nop
    2f30:	0bad0000 	.word	0x0bad0000
    2f34:	0bad0004 	.word	0x0bad0004

00002f38 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2f38:	4b04      	ldr	r3, [pc, #16]	; (2f4c <nrfx_clock_init+0x14>)
    2f3a:	791a      	ldrb	r2, [r3, #4]
    2f3c:	b922      	cbnz	r2, 2f48 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2f3e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2f40:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2f42:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2f44:	4802      	ldr	r0, [pc, #8]	; (2f50 <nrfx_clock_init+0x18>)
    2f46:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2f48:	4802      	ldr	r0, [pc, #8]	; (2f54 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2f4a:	4770      	bx	lr
    2f4c:	20000520 	.word	0x20000520
    2f50:	0bad0000 	.word	0x0bad0000
    2f54:	0bad000c 	.word	0x0bad000c

00002f58 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    2f58:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2f5a:	b110      	cbz	r0, 2f62 <nrfx_clock_start+0xa>
    2f5c:	2801      	cmp	r0, #1
    2f5e:	d034      	beq.n	2fca <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    2f60:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f66:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2f6a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    2f6e:	03c9      	lsls	r1, r1, #15
    2f70:	d529      	bpl.n	2fc6 <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2f72:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    2f76:	2a01      	cmp	r2, #1
    2f78:	d125      	bne.n	2fc6 <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2f7a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f82:	2200      	movs	r2, #0
    2f84:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2f88:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    2f8c:	2202      	movs	r2, #2
    2f8e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    2f92:	4a13      	ldr	r2, [pc, #76]	; (2fe0 <nrfx_clock_start+0x88>)
    2f94:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    2f98:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    2f9c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    2fa0:	4b10      	ldr	r3, [pc, #64]	; (2fe4 <nrfx_clock_start+0x8c>)
    2fa2:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    2fa4:	f044 0101 	orr.w	r1, r4, #1
    2fa8:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    2faa:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    2fac:	6859      	ldr	r1, [r3, #4]
    2fae:	1b49      	subs	r1, r1, r5
    2fb0:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    2fb4:	d3fa      	bcc.n	2fac <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
    2fb6:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    2fbc:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    2fc0:	2201      	movs	r2, #1
    2fc2:	609a      	str	r2, [r3, #8]
}
    2fc4:	e7cc      	b.n	2f60 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2fc6:	2200      	movs	r2, #0
    2fc8:	e7d7      	b.n	2f7a <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fce:	2200      	movs	r2, #0
    2fd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2fd4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    2fd8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fdc:	6018      	str	r0, [r3, #0]
}
    2fde:	e7bf      	b.n	2f60 <nrfx_clock_start+0x8>
    2fe0:	e000ed00 	.word	0xe000ed00
    2fe4:	e0001000 	.word	0xe0001000

00002fe8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2fe8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2fea:	b110      	cbz	r0, 2ff2 <nrfx_clock_stop+0xa>
    2fec:	2801      	cmp	r0, #1
    2fee:	d017      	beq.n	3020 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2ff0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    2ff2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2ff6:	2302      	movs	r3, #2
    2ff8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ffc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    3000:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3004:	2301      	movs	r3, #1
    3006:	60e3      	str	r3, [r4, #12]
    3008:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    300c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    3010:	03db      	lsls	r3, r3, #15
    3012:	d5ed      	bpl.n	2ff0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3014:	2001      	movs	r0, #1
    3016:	f002 fee8 	bl	5dea <nrfx_busy_wait>
    301a:	3d01      	subs	r5, #1
    301c:	d1f6      	bne.n	300c <nrfx_clock_stop+0x24>
    301e:	e7e7      	b.n	2ff0 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    3020:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3024:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    3026:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    302a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    302e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3032:	6060      	str	r0, [r4, #4]
    3034:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3038:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    303c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    3040:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3042:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3046:	d505      	bpl.n	3054 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3048:	b123      	cbz	r3, 3054 <nrfx_clock_stop+0x6c>
    304a:	2001      	movs	r0, #1
    304c:	f002 fecd 	bl	5dea <nrfx_busy_wait>
    3050:	3d01      	subs	r5, #1
    3052:	d1f1      	bne.n	3038 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    3054:	4b01      	ldr	r3, [pc, #4]	; (305c <nrfx_clock_stop+0x74>)
    3056:	2200      	movs	r2, #0
    3058:	715a      	strb	r2, [r3, #5]
    305a:	e7c9      	b.n	2ff0 <nrfx_clock_stop+0x8>
    305c:	20000520 	.word	0x20000520

00003060 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3064:	b510      	push	{r4, lr}
    3066:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    306a:	b16a      	cbz	r2, 3088 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    306c:	2200      	movs	r2, #0
    306e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3072:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3076:	2201      	movs	r2, #1
    3078:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    307c:	4b11      	ldr	r3, [pc, #68]	; (30c4 <nrfx_power_clock_irq_handler+0x64>)
    307e:	7958      	ldrb	r0, [r3, #5]
    3080:	b910      	cbnz	r0, 3088 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    3082:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3084:	681b      	ldr	r3, [r3, #0]
    3086:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    308c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3090:	b172      	cbz	r2, 30b0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3092:	2200      	movs	r2, #0
    3094:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3098:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    309c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    30a0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    30a4:	0792      	lsls	r2, r2, #30
    30a6:	d104      	bne.n	30b2 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    30a8:	2201      	movs	r2, #1
    30aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30ae:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    30b0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    30b2:	2202      	movs	r2, #2
    30b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    30b8:	4b02      	ldr	r3, [pc, #8]	; (30c4 <nrfx_power_clock_irq_handler+0x64>)
}
    30ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    30be:	681b      	ldr	r3, [r3, #0]
    30c0:	2001      	movs	r0, #1
    30c2:	4718      	bx	r3
    30c4:	20000520 	.word	0x20000520

000030c8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    30c8:	4b03      	ldr	r3, [pc, #12]	; (30d8 <pin_in_use_by_te+0x10>)
    30ca:	3008      	adds	r0, #8
    30cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    30d0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    30d4:	4770      	bx	lr
    30d6:	bf00      	nop
    30d8:	200000c8 	.word	0x200000c8

000030dc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    30dc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30de:	f100 0308 	add.w	r3, r0, #8
    30e2:	4c0c      	ldr	r4, [pc, #48]	; (3114 <call_handler+0x38>)
    30e4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    30e8:	05da      	lsls	r2, r3, #23
{
    30ea:	4605      	mov	r5, r0
    30ec:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30ee:	d507      	bpl.n	3100 <call_handler+0x24>
    30f0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    30f4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    30f8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    30fc:	6852      	ldr	r2, [r2, #4]
    30fe:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3100:	68a3      	ldr	r3, [r4, #8]
    3102:	b12b      	cbz	r3, 3110 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3104:	68e2      	ldr	r2, [r4, #12]
    3106:	4631      	mov	r1, r6
    3108:	4628      	mov	r0, r5
    }
}
    310a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    310e:	4718      	bx	r3
}
    3110:	bd70      	pop	{r4, r5, r6, pc}
    3112:	bf00      	nop
    3114:	200000c8 	.word	0x200000c8

00003118 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3118:	4a12      	ldr	r2, [pc, #72]	; (3164 <release_handler+0x4c>)
    311a:	3008      	adds	r0, #8
{
    311c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    311e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3122:	05d9      	lsls	r1, r3, #23
    3124:	d51b      	bpl.n	315e <release_handler+0x46>
    3126:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    312a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    312e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3132:	f102 0410 	add.w	r4, r2, #16
    3136:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3138:	f834 3b02 	ldrh.w	r3, [r4], #2
    313c:	f413 7f80 	tst.w	r3, #256	; 0x100
    3140:	d003      	beq.n	314a <release_handler+0x32>
    3142:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3146:	4299      	cmp	r1, r3
    3148:	d009      	beq.n	315e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    314a:	3001      	adds	r0, #1
    314c:	2820      	cmp	r0, #32
    314e:	d1f3      	bne.n	3138 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3150:	2300      	movs	r3, #0
    3152:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3156:	4804      	ldr	r0, [pc, #16]	; (3168 <release_handler+0x50>)
}
    3158:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    315a:	f7ff becb 	b.w	2ef4 <nrfx_flag32_free>
}
    315e:	bc10      	pop	{r4}
    3160:	4770      	bx	lr
    3162:	bf00      	nop
    3164:	200000c8 	.word	0x200000c8
    3168:	2000011c 	.word	0x2000011c

0000316c <pin_handler_trigger_uninit>:
{
    316c:	b538      	push	{r3, r4, r5, lr}
    316e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3170:	f7ff ffaa 	bl	30c8 <pin_in_use_by_te>
    3174:	4c09      	ldr	r4, [pc, #36]	; (319c <pin_handler_trigger_uninit+0x30>)
    3176:	f102 0508 	add.w	r5, r2, #8
    317a:	b140      	cbz	r0, 318e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    317c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3180:	4907      	ldr	r1, [pc, #28]	; (31a0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3182:	0b5b      	lsrs	r3, r3, #13
    3184:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3188:	2000      	movs	r0, #0
    318a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    318e:	4610      	mov	r0, r2
    3190:	f7ff ffc2 	bl	3118 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3194:	2300      	movs	r3, #0
    3196:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    319a:	bd38      	pop	{r3, r4, r5, pc}
    319c:	200000c8 	.word	0x200000c8
    31a0:	40006000 	.word	0x40006000

000031a4 <nrfx_gpiote_input_configure>:
{
    31a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    31a8:	4604      	mov	r4, r0
    31aa:	461e      	mov	r6, r3
    if (p_input_config)
    31ac:	b309      	cbz	r1, 31f2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    31ae:	4f4d      	ldr	r7, [pc, #308]	; (32e4 <nrfx_gpiote_input_configure+0x140>)
    31b0:	f100 0808 	add.w	r8, r0, #8
    31b4:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    31b8:	07ab      	lsls	r3, r5, #30
    31ba:	d506      	bpl.n	31ca <nrfx_gpiote_input_configure+0x26>
    31bc:	f7ff ff84 	bl	30c8 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    31c0:	b118      	cbz	r0, 31ca <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    31c2:	4849      	ldr	r0, [pc, #292]	; (32e8 <nrfx_gpiote_input_configure+0x144>)
}
    31c4:	b002      	add	sp, #8
    31c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    31ca:	f004 001f 	and.w	r0, r4, #31
    31ce:	0080      	lsls	r0, r0, #2
    31d0:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    31d4:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    31d6:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    31da:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    31de:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    31e2:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    31e6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    31ea:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    31ee:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    31f2:	b192      	cbz	r2, 321a <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    31f4:	4b3b      	ldr	r3, [pc, #236]	; (32e4 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    31f6:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    31f8:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    31fa:	f104 0008 	add.w	r0, r4, #8
    31fe:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    3202:	078f      	lsls	r7, r1, #30
    3204:	d50c      	bpl.n	3220 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    3206:	2a00      	cmp	r2, #0
    3208:	d1db      	bne.n	31c2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    320a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    320e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3212:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    3216:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    321a:	bbce      	cbnz	r6, 3290 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    321c:	4833      	ldr	r0, [pc, #204]	; (32ec <nrfx_gpiote_input_configure+0x148>)
    321e:	e7d1      	b.n	31c4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3220:	f021 0120 	bic.w	r1, r1, #32
    3224:	04c9      	lsls	r1, r1, #19
    3226:	0cc9      	lsrs	r1, r1, #19
    3228:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    322c:	2a00      	cmp	r2, #0
    322e:	d0ec      	beq.n	320a <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    3230:	2d03      	cmp	r5, #3
    3232:	d8c6      	bhi.n	31c2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3234:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3236:	b92d      	cbnz	r5, 3244 <nrfx_gpiote_input_configure+0xa0>
    3238:	4a2d      	ldr	r2, [pc, #180]	; (32f0 <nrfx_gpiote_input_configure+0x14c>)
    323a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    323e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3242:	e7e2      	b.n	320a <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3244:	00ba      	lsls	r2, r7, #2
    3246:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    324a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    324e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3252:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3256:	f02c 0c03 	bic.w	ip, ip, #3
    325a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    325e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3262:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    3266:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    326a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    326e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3272:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3276:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    327a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    327e:	ea4c 0c0e 	orr.w	ip, ip, lr
    3282:	f041 0120 	orr.w	r1, r1, #32
    3286:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    328a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    328e:	e7bc      	b.n	320a <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3290:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    3294:	4620      	mov	r0, r4
    3296:	f7ff ff3f 	bl	3118 <release_handler>
    if (!handler)
    329a:	2f00      	cmp	r7, #0
    329c:	d0be      	beq.n	321c <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    329e:	4d11      	ldr	r5, [pc, #68]	; (32e4 <nrfx_gpiote_input_configure+0x140>)
    32a0:	682b      	ldr	r3, [r5, #0]
    32a2:	429f      	cmp	r7, r3
    32a4:	d104      	bne.n	32b0 <nrfx_gpiote_input_configure+0x10c>
    32a6:	686b      	ldr	r3, [r5, #4]
    32a8:	429e      	cmp	r6, r3
    32aa:	d101      	bne.n	32b0 <nrfx_gpiote_input_configure+0x10c>
    32ac:	2200      	movs	r2, #0
    32ae:	e009      	b.n	32c4 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    32b0:	4810      	ldr	r0, [pc, #64]	; (32f4 <nrfx_gpiote_input_configure+0x150>)
    32b2:	f10d 0107 	add.w	r1, sp, #7
    32b6:	f7ff fdf7 	bl	2ea8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    32ba:	4b0c      	ldr	r3, [pc, #48]	; (32ec <nrfx_gpiote_input_configure+0x148>)
    32bc:	4298      	cmp	r0, r3
    32be:	d181      	bne.n	31c4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    32c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    32c4:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    32c8:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    32cc:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    32ce:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    32d0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    32d4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    32d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    32dc:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    32e0:	e79c      	b.n	321c <nrfx_gpiote_input_configure+0x78>
    32e2:	bf00      	nop
    32e4:	200000c8 	.word	0x200000c8
    32e8:	0bad0004 	.word	0x0bad0004
    32ec:	0bad0000 	.word	0x0bad0000
    32f0:	40006000 	.word	0x40006000
    32f4:	2000011c 	.word	0x2000011c

000032f8 <nrfx_gpiote_output_configure>:
{
    32f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32fa:	4604      	mov	r4, r0
    if (p_config)
    32fc:	b371      	cbz	r1, 335c <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    32fe:	4e37      	ldr	r6, [pc, #220]	; (33dc <nrfx_gpiote_output_configure+0xe4>)
    3300:	f100 0708 	add.w	r7, r0, #8
    3304:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3308:	07ab      	lsls	r3, r5, #30
    330a:	d404      	bmi.n	3316 <nrfx_gpiote_output_configure+0x1e>
    330c:	f7ff fedc 	bl	30c8 <pin_in_use_by_te>
    3310:	b108      	cbz	r0, 3316 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    3312:	4833      	ldr	r0, [pc, #204]	; (33e0 <nrfx_gpiote_output_configure+0xe8>)
}
    3314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3316:	f015 0f1c 	tst.w	r5, #28
    331a:	784b      	ldrb	r3, [r1, #1]
    331c:	d001      	beq.n	3322 <nrfx_gpiote_output_configure+0x2a>
    331e:	2b01      	cmp	r3, #1
    3320:	d0f7      	beq.n	3312 <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    3322:	f004 001f 	and.w	r0, r4, #31
    3326:	0080      	lsls	r0, r0, #2
    3328:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    332c:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3330:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3334:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3336:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    3338:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    333c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    3340:	f02c 0c07 	bic.w	ip, ip, #7
    3344:	ea43 030c 	orr.w	r3, r3, ip
    3348:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    334c:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3350:	f043 0301 	orr.w	r3, r3, #1
    3354:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    3358:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    335c:	b90a      	cbnz	r2, 3362 <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    335e:	4821      	ldr	r0, [pc, #132]	; (33e4 <nrfx_gpiote_output_configure+0xec>)
    3360:	e7d8      	b.n	3314 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3362:	4e1e      	ldr	r6, [pc, #120]	; (33dc <nrfx_gpiote_output_configure+0xe4>)
    3364:	f104 0708 	add.w	r7, r4, #8
    3368:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    336c:	0783      	lsls	r3, r0, #30
    336e:	d5d0      	bpl.n	3312 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    3370:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    3374:	4661      	mov	r1, ip
    3376:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3378:	f020 0020 	bic.w	r0, r0, #32
    337c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3380:	04c0      	lsls	r0, r0, #19
    3382:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3386:	0cc0      	lsrs	r0, r0, #19
    3388:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    338c:	2300      	movs	r3, #0
    338e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3392:	7855      	ldrb	r5, [r2, #1]
    3394:	2d00      	cmp	r5, #0
    3396:	d0e2      	beq.n	335e <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3398:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    339c:	7892      	ldrb	r2, [r2, #2]
    339e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    33a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    33a6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    33aa:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    33ae:	0223      	lsls	r3, r4, #8
    33b0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    33b4:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    33b6:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    33ba:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    33be:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    33c0:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    33c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    33c6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    33ca:	4313      	orrs	r3, r2
    33cc:	f040 0020 	orr.w	r0, r0, #32
    33d0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    33d4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    33d8:	e7c1      	b.n	335e <nrfx_gpiote_output_configure+0x66>
    33da:	bf00      	nop
    33dc:	200000c8 	.word	0x200000c8
    33e0:	0bad0004 	.word	0x0bad0004
    33e4:	0bad0000 	.word	0x0bad0000

000033e8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    33e8:	4b01      	ldr	r3, [pc, #4]	; (33f0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    33ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    33ee:	4770      	bx	lr
    33f0:	200000c8 	.word	0x200000c8

000033f4 <nrfx_gpiote_channel_get>:
{
    33f4:	b508      	push	{r3, lr}
    33f6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    33f8:	f7ff fe66 	bl	30c8 <pin_in_use_by_te>
    33fc:	b138      	cbz	r0, 340e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    33fe:	4b05      	ldr	r3, [pc, #20]	; (3414 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    3400:	4805      	ldr	r0, [pc, #20]	; (3418 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3402:	3208      	adds	r2, #8
    3404:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3408:	0b5b      	lsrs	r3, r3, #13
    340a:	700b      	strb	r3, [r1, #0]
}
    340c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    340e:	4803      	ldr	r0, [pc, #12]	; (341c <nrfx_gpiote_channel_get+0x28>)
    3410:	e7fc      	b.n	340c <nrfx_gpiote_channel_get+0x18>
    3412:	bf00      	nop
    3414:	200000c8 	.word	0x200000c8
    3418:	0bad0000 	.word	0x0bad0000
    341c:	0bad0004 	.word	0x0bad0004

00003420 <nrfx_gpiote_init>:
{
    3420:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3422:	4c0f      	ldr	r4, [pc, #60]	; (3460 <nrfx_gpiote_init+0x40>)
    3424:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    3428:	b9bd      	cbnz	r5, 345a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    342a:	2240      	movs	r2, #64	; 0x40
    342c:	4629      	mov	r1, r5
    342e:	f104 0010 	add.w	r0, r4, #16
    3432:	f001 fef7 	bl	5224 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3436:	2006      	movs	r0, #6
    3438:	f7fd fecc 	bl	11d4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    343c:	4b09      	ldr	r3, [pc, #36]	; (3464 <nrfx_gpiote_init+0x44>)
    return err_code;
    343e:	480a      	ldr	r0, [pc, #40]	; (3468 <nrfx_gpiote_init+0x48>)
    3440:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3444:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3448:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    344c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3450:	2301      	movs	r3, #1
    3452:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3456:	6563      	str	r3, [r4, #84]	; 0x54
}
    3458:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    345a:	4804      	ldr	r0, [pc, #16]	; (346c <nrfx_gpiote_init+0x4c>)
    345c:	e7fc      	b.n	3458 <nrfx_gpiote_init+0x38>
    345e:	bf00      	nop
    3460:	200000c8 	.word	0x200000c8
    3464:	40006000 	.word	0x40006000
    3468:	0bad0000 	.word	0x0bad0000
    346c:	0bad0005 	.word	0x0bad0005

00003470 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3470:	4b03      	ldr	r3, [pc, #12]	; (3480 <nrfx_gpiote_is_init+0x10>)
    3472:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    3476:	3800      	subs	r0, #0
    3478:	bf18      	it	ne
    347a:	2001      	movne	r0, #1
    347c:	4770      	bx	lr
    347e:	bf00      	nop
    3480:	200000c8 	.word	0x200000c8

00003484 <nrfx_gpiote_channel_free>:
{
    3484:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3486:	4801      	ldr	r0, [pc, #4]	; (348c <nrfx_gpiote_channel_free+0x8>)
    3488:	f7ff bd34 	b.w	2ef4 <nrfx_flag32_free>
    348c:	20000118 	.word	0x20000118

00003490 <nrfx_gpiote_channel_alloc>:
{
    3490:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3492:	4801      	ldr	r0, [pc, #4]	; (3498 <nrfx_gpiote_channel_alloc+0x8>)
    3494:	f7ff bd08 	b.w	2ea8 <nrfx_flag32_alloc>
    3498:	20000118 	.word	0x20000118

0000349c <nrfx_gpiote_trigger_enable>:
{
    349c:	b510      	push	{r4, lr}
    349e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    34a0:	f7ff fe12 	bl	30c8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    34a4:	f102 0408 	add.w	r4, r2, #8
    34a8:	4b1c      	ldr	r3, [pc, #112]	; (351c <nrfx_gpiote_trigger_enable+0x80>)
    34aa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    34ae:	b1e0      	cbz	r0, 34ea <nrfx_gpiote_trigger_enable+0x4e>
    34b0:	f013 0402 	ands.w	r4, r3, #2
    34b4:	d119      	bne.n	34ea <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    34b6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    34b8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    34ba:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    34be:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    34c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    34c6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    34ca:	6004      	str	r4, [r0, #0]
    34cc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    34ce:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    34d2:	f040 0001 	orr.w	r0, r0, #1
    34d6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    34da:	b129      	cbz	r1, 34e8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    34dc:	2201      	movs	r2, #1
    34de:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    34e2:	4a0f      	ldr	r2, [pc, #60]	; (3520 <nrfx_gpiote_trigger_enable+0x84>)
    34e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    34e8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    34ea:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    34ee:	2b04      	cmp	r3, #4
    34f0:	d010      	beq.n	3514 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    34f2:	2b05      	cmp	r3, #5
    34f4:	d010      	beq.n	3518 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    34f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    34fa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    34fe:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3502:	40d9      	lsrs	r1, r3
    3504:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3508:	3102      	adds	r1, #2
}
    350a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    350e:	4610      	mov	r0, r2
    3510:	f002 bc77 	b.w	5e02 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3514:	2103      	movs	r1, #3
    3516:	e7f8      	b.n	350a <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3518:	2102      	movs	r1, #2
    351a:	e7f6      	b.n	350a <nrfx_gpiote_trigger_enable+0x6e>
    351c:	200000c8 	.word	0x200000c8
    3520:	40006000 	.word	0x40006000

00003524 <nrfx_gpiote_trigger_disable>:
{
    3524:	b508      	push	{r3, lr}
    3526:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3528:	f7ff fdce 	bl	30c8 <pin_in_use_by_te>
    352c:	b1c0      	cbz	r0, 3560 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    352e:	f102 0108 	add.w	r1, r2, #8
    3532:	4b0e      	ldr	r3, [pc, #56]	; (356c <nrfx_gpiote_trigger_disable+0x48>)
    3534:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3538:	0799      	lsls	r1, r3, #30
    353a:	d411      	bmi.n	3560 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    353c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    353e:	2201      	movs	r2, #1
    3540:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3542:	009b      	lsls	r3, r3, #2
    3544:	490a      	ldr	r1, [pc, #40]	; (3570 <nrfx_gpiote_trigger_disable+0x4c>)
    3546:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    354a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    354e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3552:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3556:	f022 0203 	bic.w	r2, r2, #3
    355a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    355e:	bd08      	pop	{r3, pc}
    3560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3564:	2100      	movs	r1, #0
    3566:	4610      	mov	r0, r2
    3568:	f002 bc4b 	b.w	5e02 <nrf_gpio_cfg_sense_set>
    356c:	200000c8 	.word	0x200000c8
    3570:	40006000 	.word	0x40006000

00003574 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3574:	4b0d      	ldr	r3, [pc, #52]	; (35ac <nrfx_gpiote_pin_uninit+0x38>)
    3576:	f100 0208 	add.w	r2, r0, #8
{
    357a:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    357c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3580:	07db      	lsls	r3, r3, #31
{
    3582:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3584:	d50f      	bpl.n	35a6 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    3586:	f7ff ffcd 	bl	3524 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    358a:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    358c:	f004 041f 	and.w	r4, r4, #31
    3590:	f7ff fdec 	bl	316c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    3594:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    3598:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    359c:	2202      	movs	r2, #2
    359e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    35a2:	4803      	ldr	r0, [pc, #12]	; (35b0 <nrfx_gpiote_pin_uninit+0x3c>)
}
    35a4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    35a6:	4803      	ldr	r0, [pc, #12]	; (35b4 <nrfx_gpiote_pin_uninit+0x40>)
    35a8:	e7fc      	b.n	35a4 <nrfx_gpiote_pin_uninit+0x30>
    35aa:	bf00      	nop
    35ac:	200000c8 	.word	0x200000c8
    35b0:	0bad0000 	.word	0x0bad0000
    35b4:	0bad0004 	.word	0x0bad0004

000035b8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    35b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35bc:	4b4e      	ldr	r3, [pc, #312]	; (36f8 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    35be:	484f      	ldr	r0, [pc, #316]	; (36fc <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35c0:	494f      	ldr	r1, [pc, #316]	; (3700 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    35c2:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    35c4:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35c6:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35c8:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    35ca:	b136      	cbz	r6, 35da <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    35cc:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    35d0:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35d2:	bf1e      	ittt	ne
    35d4:	601c      	strne	r4, [r3, #0]
    35d6:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    35d8:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35da:	3304      	adds	r3, #4
    35dc:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    35de:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35e2:	d1f1      	bne.n	35c8 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35e4:	4b45      	ldr	r3, [pc, #276]	; (36fc <nrfx_gpiote_irq_handler+0x144>)
    35e6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    35ea:	b1bb      	cbz	r3, 361c <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    35ec:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    35f0:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    35f4:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    35f6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    35fa:	af01      	add	r7, sp, #4
    35fc:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    3600:	9c01      	ldr	r4, [sp, #4]
    3602:	b96c      	cbnz	r4, 3620 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3604:	4b3d      	ldr	r3, [pc, #244]	; (36fc <nrfx_gpiote_irq_handler+0x144>)
    3606:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    360a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    360e:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3612:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    3614:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    3618:	2b00      	cmp	r3, #0
    361a:	d1ee      	bne.n	35fa <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    361c:	2401      	movs	r4, #1
    361e:	e066      	b.n	36ee <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    3620:	fa94 f4a4 	rbit	r4, r4
    3624:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3628:	4a36      	ldr	r2, [pc, #216]	; (3704 <nrfx_gpiote_irq_handler+0x14c>)
    362a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    362e:	08e0      	lsrs	r0, r4, #3
    3630:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    3634:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3638:	fa08 f203 	lsl.w	r2, r8, r3
    363c:	5c3b      	ldrb	r3, [r7, r0]
    363e:	ea23 0302 	bic.w	r3, r3, r2
    3642:	543b      	strb	r3, [r7, r0]
    3644:	00a3      	lsls	r3, r4, #2
    3646:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    364a:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    364e:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    3652:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3654:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3656:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    365a:	d518      	bpl.n	368e <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    365c:	4659      	mov	r1, fp
    365e:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3660:	fa5f fa82 	uxtb.w	sl, r2
    3664:	f7ff fd3a 	bl	30dc <call_handler>
    3668:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    366c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3670:	459a      	cmp	sl, r3
    3672:	d107      	bne.n	3684 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3674:	2100      	movs	r1, #0
    3676:	4620      	mov	r0, r4
    3678:	f002 fbc3 	bl	5e02 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    367c:	4651      	mov	r1, sl
    367e:	4620      	mov	r0, r4
    3680:	f002 fbbf 	bl	5e02 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    3684:	fa08 f404 	lsl.w	r4, r8, r4
    3688:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    368c:	e7b8      	b.n	3600 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    368e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3690:	bf0c      	ite	eq
    3692:	2103      	moveq	r1, #3
    3694:	2102      	movne	r1, #2
    3696:	4620      	mov	r0, r4
    3698:	f002 fbb3 	bl	5e02 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    369c:	f1ba 0f03 	cmp.w	sl, #3
    36a0:	d004      	beq.n	36ac <nrfx_gpiote_irq_handler+0xf4>
    36a2:	2a02      	cmp	r2, #2
    36a4:	d107      	bne.n	36b6 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    36a6:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    36aa:	d1eb      	bne.n	3684 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    36ac:	4659      	mov	r1, fp
    36ae:	4620      	mov	r0, r4
    36b0:	f7ff fd14 	bl	30dc <call_handler>
    36b4:	e7e6      	b.n	3684 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    36b6:	2a03      	cmp	r2, #3
    36b8:	d1e4      	bne.n	3684 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    36ba:	f1ba 0f02 	cmp.w	sl, #2
    36be:	e7f4      	b.n	36aa <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    36c0:	fa95 f3a5 	rbit	r3, r5
    36c4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    36c8:	fa04 f203 	lsl.w	r2, r4, r3
    36cc:	009b      	lsls	r3, r3, #2
    36ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    36d2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    36d6:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    36da:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    36de:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    36e2:	f3c0 2004 	ubfx	r0, r0, #8, #5
    36e6:	f3c1 4101 	ubfx	r1, r1, #16, #2
    36ea:	f7ff fcf7 	bl	30dc <call_handler>
    while (mask)
    36ee:	2d00      	cmp	r5, #0
    36f0:	d1e6      	bne.n	36c0 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    36f2:	b003      	add	sp, #12
    36f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36f8:	40006100 	.word	0x40006100
    36fc:	40006000 	.word	0x40006000
    3700:	40006120 	.word	0x40006120
    3704:	200000c8 	.word	0x200000c8

00003708 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3708:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    370a:	4801      	ldr	r0, [pc, #4]	; (3710 <nrfx_ppi_channel_alloc+0x8>)
    370c:	f7ff bbcc 	b.w	2ea8 <nrfx_flag32_alloc>
    3710:	20000124 	.word	0x20000124

00003714 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
    3714:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3716:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    371a:	b087      	sub	sp, #28
    371c:	4604      	mov	r4, r0
    371e:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    3720:	b1f3      	cbz	r3, 3760 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3722:	2300      	movs	r3, #0
    3724:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    3728:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    372c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3730:	b9b3      	cbnz	r3, 3760 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    3732:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3734:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3738:	2302      	movs	r3, #2
    373a:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    373c:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
    373e:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3742:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    3746:	b11b      	cbz	r3, 3750 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    3748:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    374c:	059f      	lsls	r7, r3, #22
    374e:	d402      	bmi.n	3756 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3750:	2301      	movs	r3, #1
    3752:	6223      	str	r3, [r4, #32]
    3754:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
    3756:	2301      	movs	r3, #1
    3758:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
    375c:	b007      	add	sp, #28
    375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3760:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3764:	2b00      	cmp	r3, #0
    3766:	d044      	beq.n	37f2 <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3768:	2300      	movs	r3, #0
    376a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    376e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    3772:	6a2b      	ldr	r3, [r5, #32]
    3774:	065e      	lsls	r6, r3, #25
    3776:	d40a      	bmi.n	378e <twim_irq_handler+0x7a>
    3778:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    377c:	b93b      	cbnz	r3, 378e <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    377e:	4629      	mov	r1, r5
    3780:	4620      	mov	r0, r4
    3782:	f002 fb4c 	bl	5e1e <xfer_completeness_check>
    3786:	f080 0001 	eor.w	r0, r0, #1
    378a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    378e:	6a2b      	ldr	r3, [r5, #32]
    3790:	f013 0c04 	ands.w	ip, r3, #4
    3794:	d13e      	bne.n	3814 <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
    3796:	f105 070c 	add.w	r7, r5, #12
    379a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    379c:	ae01      	add	r6, sp, #4
    379e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
    37a0:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    37a4:	683b      	ldr	r3, [r7, #0]
    37a6:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
    37aa:	6033      	str	r3, [r6, #0]
    37ac:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    37b0:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
    37b4:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    37b8:	f1be 0f00 	cmp.w	lr, #0
    37bc:	d002      	beq.n	37c4 <twim_irq_handler+0xb0>
    37be:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    37c2:	b33b      	cbz	r3, 3814 <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
    37c4:	2300      	movs	r3, #0
    37c6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
    37ca:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    37cc:	4b2e      	ldr	r3, [pc, #184]	; (3888 <twim_irq_handler+0x174>)
    37ce:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    37d2:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
    37d6:	2b00      	cmp	r3, #0
    37d8:	ea4f 3214 	mov.w	r2, r4, lsr #12
    37dc:	db1a      	blt.n	3814 <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    37de:	f002 011f 	and.w	r1, r2, #31
    37e2:	095b      	lsrs	r3, r3, #5
    37e4:	2201      	movs	r2, #1
    37e6:	408a      	lsls	r2, r1
    37e8:	3360      	adds	r3, #96	; 0x60
    37ea:	4928      	ldr	r1, [pc, #160]	; (388c <twim_irq_handler+0x178>)
    37ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    37f0:	e010      	b.n	3814 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37f2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    37f6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    37fa:	7b2b      	ldrb	r3, [r5, #12]
    37fc:	bb23      	cbnz	r3, 3848 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
    37fe:	f105 070c 	add.w	r7, r5, #12
    3802:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3804:	ae01      	add	r6, sp, #4
    3806:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3808:	683b      	ldr	r3, [r7, #0]
    380a:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    380c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3810:	2b00      	cmp	r3, #0
    3812:	d0d8      	beq.n	37c6 <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
    3814:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3818:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    381c:	0798      	lsls	r0, r3, #30
    381e:	d525      	bpl.n	386c <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    3820:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    3822:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    3826:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    382a:	b90b      	cbnz	r3, 3830 <twim_irq_handler+0x11c>
        p_cb->busy = false;
    382c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    3830:	6a2b      	ldr	r3, [r5, #32]
    3832:	075b      	lsls	r3, r3, #29
    3834:	d503      	bpl.n	383e <twim_irq_handler+0x12a>
    3836:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    383a:	2b00      	cmp	r3, #0
    383c:	d08e      	beq.n	375c <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
    383e:	e9d5 3100 	ldrd	r3, r1, [r5]
    3842:	4668      	mov	r0, sp
    3844:	4798      	blx	r3
    3846:	e789      	b.n	375c <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
    3848:	f44f 7300 	mov.w	r3, #512	; 0x200
    384c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    3850:	f240 2302 	movw	r3, #514	; 0x202
    3854:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
    3856:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    385a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    385e:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    3860:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3864:	2301      	movs	r3, #1
    3866:	60a3      	str	r3, [r4, #8]
    3868:	6223      	str	r3, [r4, #32]
            return;
    386a:	e777      	b.n	375c <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    386c:	0759      	lsls	r1, r3, #29
    386e:	d501      	bpl.n	3874 <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    3870:	2302      	movs	r3, #2
    3872:	e7d6      	b.n	3822 <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    3874:	07da      	lsls	r2, r3, #31
    3876:	d501      	bpl.n	387c <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    3878:	2303      	movs	r3, #3
    387a:	e7d2      	b.n	3822 <twim_irq_handler+0x10e>
    else if (p_cb->error)
    387c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    3880:	2b00      	cmp	r3, #0
    3882:	d0ce      	beq.n	3822 <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    3884:	2304      	movs	r3, #4
    3886:	e7cc      	b.n	3822 <twim_irq_handler+0x10e>
    3888:	019c0202 	.word	0x019c0202
    388c:	e000e100 	.word	0xe000e100

00003890 <nrfx_twim_init>:
{
    3890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3892:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3894:	4d23      	ldr	r5, [pc, #140]	; (3924 <nrfx_twim_init+0x94>)
    3896:	f04f 0c34 	mov.w	ip, #52	; 0x34
    389a:	fb0c fc06 	mul.w	ip, ip, r6
    389e:	eb05 040c 	add.w	r4, r5, ip
    38a2:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    38a6:	2f00      	cmp	r7, #0
    38a8:	d13a      	bne.n	3920 <nrfx_twim_init+0x90>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    38aa:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    38ac:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    38ae:	7b4b      	ldrb	r3, [r1, #13]
    38b0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    38b4:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    38b6:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
    38b8:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    38bc:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    38c0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    p_cb->handler         = event_handler;
    38c4:	f845 200c 	str.w	r2, [r5, ip]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    38c8:	7bcc      	ldrb	r4, [r1, #15]
    38ca:	b1b3      	cbz	r3, 38fa <nrfx_twim_init+0x6a>
    38cc:	b92c      	cbnz	r4, 38da <nrfx_twim_init+0x4a>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    38ce:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    38d2:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    38d6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    38da:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    38dc:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    38e0:	b11a      	cbz	r2, 38ea <nrfx_twim_init+0x5a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    38e2:	f340 3007 	sbfx	r0, r0, #12, #8
    38e6:	f7fd fc75 	bl	11d4 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    38ea:	2334      	movs	r3, #52	; 0x34
    38ec:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
    38f0:	480d      	ldr	r0, [pc, #52]	; (3928 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    38f2:	2301      	movs	r3, #1
    38f4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    38f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    38fa:	680b      	ldr	r3, [r1, #0]
    38fc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    3900:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    3904:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3908:	f240 6c0c 	movw	ip, #1548	; 0x60c
    390c:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    3910:	684b      	ldr	r3, [r1, #4]
    3912:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    3916:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    391a:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    391e:	e7d5      	b.n	38cc <nrfx_twim_init+0x3c>
        return err_code;
    3920:	4802      	ldr	r0, [pc, #8]	; (392c <nrfx_twim_init+0x9c>)
    3922:	e7e9      	b.n	38f8 <nrfx_twim_init+0x68>
    3924:	20000528 	.word	0x20000528
    3928:	0bad0000 	.word	0x0bad0000
    392c:	0bad0005 	.word	0x0bad0005

00003930 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
    3930:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3932:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    3934:	2106      	movs	r1, #6
    3936:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    393a:	4b04      	ldr	r3, [pc, #16]	; (394c <nrfx_twim_enable+0x1c>)
    393c:	2134      	movs	r1, #52	; 0x34
    393e:	fb01 3302 	mla	r3, r1, r2, r3
    3942:	2202      	movs	r2, #2
    3944:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
    3948:	4770      	bx	lr
    394a:	bf00      	nop
    394c:	20000528 	.word	0x20000528

00003950 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3950:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
    3952:	4b0c      	ldr	r3, [pc, #48]	; (3984 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    3954:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    3956:	2034      	movs	r0, #52	; 0x34
    3958:	fb00 3301 	mla	r3, r0, r1, r3
    395c:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    395e:	480a      	ldr	r0, [pc, #40]	; (3988 <nrfx_twim_disable+0x38>)
    3960:	6099      	str	r1, [r3, #8]
    3962:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    3966:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    396a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    396e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    3972:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3976:	2201      	movs	r2, #1
    3978:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    397c:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
    3980:	4770      	bx	lr
    3982:	bf00      	nop
    3984:	20000528 	.word	0x20000528
    3988:	019c0202 	.word	0x019c0202

0000398c <nrfx_twim_uninit>:
{
    398c:	b570      	push	{r4, r5, r6, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    398e:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
    3990:	4d18      	ldr	r5, [pc, #96]	; (39f4 <nrfx_twim_uninit+0x68>)
    3992:	2334      	movs	r3, #52	; 0x34
    3994:	4373      	muls	r3, r6
{
    3996:	4604      	mov	r4, r0
    if (p_cb->handler)
    3998:	58eb      	ldr	r3, [r5, r3]
    399a:	b123      	cbz	r3, 39a6 <nrfx_twim_uninit+0x1a>
    399c:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
    399e:	f340 3007 	sbfx	r0, r0, #12, #8
    39a2:	f7fd fc27 	bl	11f4 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
    39a6:	4620      	mov	r0, r4
    39a8:	f7ff ffd2 	bl	3950 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
    39ac:	2334      	movs	r3, #52	; 0x34
    39ae:	fb03 5306 	mla	r3, r3, r6, r5
    39b2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    39b6:	b9b2      	cbnz	r2, 39e6 <nrfx_twim_uninit+0x5a>
    39b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    39bc:	b99b      	cbnz	r3, 39e6 <nrfx_twim_uninit+0x5a>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
    39be:	6820      	ldr	r0, [r4, #0]
    return p_reg->PSEL.SCL;
    39c0:	f8d0 3508 	ldr.w	r3, [r0, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    39c4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    39c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    39cc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    39d0:	2102      	movs	r1, #2
    39d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSEL.SDA;
    39d6:	f8d0 350c 	ldr.w	r3, [r0, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    39da:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    39de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    39e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    39e6:	2334      	movs	r3, #52	; 0x34
    39e8:	fb03 5506 	mla	r5, r3, r6, r5
    39ec:	2300      	movs	r3, #0
    39ee:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    39f2:	bd70      	pop	{r4, r5, r6, pc}
    39f4:	20000528 	.word	0x20000528

000039f8 <nrfx_twim_xfer>:
{
    39f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    39fc:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 3cd0 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3a00:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    3a04:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    3a06:	2334      	movs	r3, #52	; 0x34
    3a08:	fb03 c30e 	mla	r3, r3, lr, ip
{
    3a0c:	4617      	mov	r7, r2
    p_cb->error = false;
    3a0e:	2200      	movs	r2, #0
    3a10:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    3a14:	684b      	ldr	r3, [r1, #4]
{
    3a16:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    3a18:	b14b      	cbz	r3, 3a2e <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3a1a:	68cb      	ldr	r3, [r1, #12]
    3a1c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    3a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3a24:	d003      	beq.n	3a2e <nrfx_twim_xfer+0x36>
        return err_code;
    3a26:	4eab      	ldr	r6, [pc, #684]	; (3cd4 <nrfx_twim_xfer+0x2dc>)
}
    3a28:	4630      	mov	r0, r6
    3a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    3a2e:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    3a30:	4ba9      	ldr	r3, [pc, #676]	; (3cd8 <nrfx_twim_xfer+0x2e0>)
    3a32:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    3a36:	fb06 c60e 	mla	r6, r6, lr, ip
    3a3a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    3a3e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    3a42:	b123      	cbz	r3, 3a4e <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3a44:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    3a46:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    3a4a:	4ea4      	ldr	r6, [pc, #656]	; (3cdc <nrfx_twim_xfer+0x2e4>)
    3a4c:	e7ec      	b.n	3a28 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    3a4e:	f017 0f14 	tst.w	r7, #20
    3a52:	bf0c      	ite	eq
    3a54:	2301      	moveq	r3, #1
    3a56:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    3a58:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    3a5c:	46a9      	mov	r9, r5
    3a5e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    3a62:	f106 080c 	add.w	r8, r6, #12
    3a66:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    3a6a:	f8d9 3000 	ldr.w	r3, [r9]
    3a6e:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    3a72:	f3c7 1300 	ubfx	r3, r7, #4, #1
    3a76:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    3a7a:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
    3a7c:	786b      	ldrb	r3, [r5, #1]
    3a7e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a82:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    3a86:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3a8a:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    3a8e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    3a92:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    3a96:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    3a9a:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    3a9e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    3aa2:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    3aa6:	bf18      	it	ne
    3aa8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    3aaa:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    3aae:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    3ab2:	bf18      	it	ne
    3ab4:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    3ab6:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    3aba:	782a      	ldrb	r2, [r5, #0]
    3abc:	2a03      	cmp	r2, #3
    3abe:	f200 80b5 	bhi.w	3c2c <nrfx_twim_xfer+0x234>
    3ac2:	e8df f002 	tbb	[pc, r2]
    3ac6:	a084      	.short	0xa084
    3ac8:	0269      	.short	0x0269
    3aca:	692b      	ldr	r3, [r5, #16]
    3acc:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    3ad0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    3ad4:	d1a7      	bne.n	3a26 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    3ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
    3ada:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3ade:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3ae0:	6869      	ldr	r1, [r5, #4]
    3ae2:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3ae6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3aea:	2100      	movs	r1, #0
    3aec:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    3af0:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3af4:	2001      	movs	r0, #1
    3af6:	6220      	str	r0, [r4, #32]
    3af8:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3afa:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    3afe:	2800      	cmp	r0, #0
    3b00:	d0fb      	beq.n	3afa <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b02:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
    3b06:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    3b0a:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3b0c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3b10:	2334      	movs	r3, #52	; 0x34
    3b12:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
    3b16:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    3b1a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    3b1e:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    3b20:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    3b22:	4e6f      	ldr	r6, [pc, #444]	; (3ce0 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    3b24:	0739      	lsls	r1, r7, #28
    3b26:	d406      	bmi.n	3b36 <nrfx_twim_xfer+0x13e>
    3b28:	2a03      	cmp	r2, #3
    3b2a:	d004      	beq.n	3b36 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b2c:	2201      	movs	r2, #1
    3b2e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    3b30:	686b      	ldr	r3, [r5, #4]
    3b32:	b903      	cbnz	r3, 3b36 <nrfx_twim_xfer+0x13e>
    3b34:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    3b36:	2334      	movs	r3, #52	; 0x34
    3b38:	fb03 f30e 	mul.w	r3, r3, lr
    3b3c:	eb0c 0103 	add.w	r1, ip, r3
    3b40:	f85c 2003 	ldr.w	r2, [ip, r3]
    3b44:	2a00      	cmp	r2, #0
    3b46:	d174      	bne.n	3c32 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
    3b48:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b4a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    3b4e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    3b52:	2800      	cmp	r0, #0
    3b54:	f040 8088 	bne.w	3c68 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    3b58:	3b00      	subs	r3, #0
    3b5a:	bf18      	it	ne
    3b5c:	2301      	movne	r3, #1
    3b5e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    3b62:	2800      	cmp	r0, #0
    3b64:	f000 8086 	beq.w	3c74 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b68:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    3b6c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b70:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    3b74:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    3b78:	b115      	cbz	r5, 3b80 <nrfx_twim_xfer+0x188>
    3b7a:	f410 7f00 	tst.w	r0, #512	; 0x200
    3b7e:	d104      	bne.n	3b8a <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b80:	6221      	str	r1, [r4, #32]
    3b82:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    3b84:	2d00      	cmp	r5, #0
    3b86:	d0e0      	beq.n	3b4a <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
    3b88:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    3b8a:	05c0      	lsls	r0, r0, #23
    3b8c:	d572      	bpl.n	3c74 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b8e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    3b92:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
    3b96:	e7d8      	b.n	3b4a <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3b98:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3b9a:	68e9      	ldr	r1, [r5, #12]
    3b9c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3ba0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    3ba4:	692b      	ldr	r3, [r5, #16]
    3ba6:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    3baa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    3bae:	f47f af3a 	bne.w	3a26 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    3bb2:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3bb4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    3bb8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    3bbc:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    3bc0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3bc4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3bc6:	fb03 c30e 	mla	r3, r3, lr, ip
    3bca:	2102      	movs	r1, #2
    3bcc:	e012      	b.n	3bf4 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3bce:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3bd0:	68e9      	ldr	r1, [r5, #12]
    3bd2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    3bd6:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    3bda:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    3bde:	f04f 0334 	mov.w	r3, #52	; 0x34
    3be2:	d00b      	beq.n	3bfc <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
    3be4:	f44f 7180 	mov.w	r1, #256	; 0x100
    3be8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    3bec:	fb03 c30e 	mla	r3, r3, lr, ip
    3bf0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3bf4:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bf6:	2301      	movs	r3, #1
    3bf8:	6223      	str	r3, [r4, #32]
    3bfa:	e791      	b.n	3b20 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
    3bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
    3c00:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    3c04:	e7df      	b.n	3bc6 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    3c06:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3c08:	68e9      	ldr	r1, [r5, #12]
    3c0a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3c0e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    3c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3c16:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    3c1a:	2334      	movs	r3, #52	; 0x34
    3c1c:	fb03 c30e 	mla	r3, r3, lr, ip
    3c20:	2102      	movs	r1, #2
    3c22:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c24:	2301      	movs	r3, #1
    3c26:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    3c28:	2300      	movs	r3, #0
    3c2a:	e77a      	b.n	3b22 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
    3c2c:	4e2d      	ldr	r6, [pc, #180]	; (3ce4 <nrfx_twim_xfer+0x2ec>)
    3c2e:	2308      	movs	r3, #8
    3c30:	e778      	b.n	3b24 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    3c32:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
    3c34:	bf44      	itt	mi
    3c36:	2300      	movmi	r3, #0
    3c38:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    3c3a:	067b      	lsls	r3, r7, #25
    3c3c:	d406      	bmi.n	3c4c <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    3c3e:	2334      	movs	r3, #52	; 0x34
    3c40:	fb03 c30e 	mla	r3, r3, lr, ip
    3c44:	689a      	ldr	r2, [r3, #8]
    3c46:	f042 0202 	orr.w	r2, r2, #2
    3c4a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    3c4c:	2334      	movs	r3, #52	; 0x34
    3c4e:	fb03 cc0e 	mla	ip, r3, lr, ip
    3c52:	f8dc 3008 	ldr.w	r3, [ip, #8]
    3c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3c5a:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    3c5e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
    3c62:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    3c66:	e6df      	b.n	3a28 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c68:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    3c6c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
    3c70:	2301      	movs	r3, #1
    3c72:	e774      	b.n	3b5e <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
    3c74:	2b00      	cmp	r3, #0
    3c76:	f43f af68 	beq.w	3b4a <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
    3c7a:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    3c7c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3c80:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    3c84:	fb01 c20e 	mla	r2, r1, lr, ip
    3c88:	2000      	movs	r0, #0
    3c8a:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    3c8e:	b18b      	cbz	r3, 3cb4 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3c90:	4a15      	ldr	r2, [pc, #84]	; (3ce8 <nrfx_twim_xfer+0x2f0>)
    3c92:	4e16      	ldr	r6, [pc, #88]	; (3cec <nrfx_twim_xfer+0x2f4>)
    3c94:	f013 0f01 	tst.w	r3, #1
    3c98:	bf18      	it	ne
    3c9a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3c9c:	f013 0f02 	tst.w	r3, #2
    3ca0:	f102 0201 	add.w	r2, r2, #1
    3ca4:	bf18      	it	ne
    3ca6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3ca8:	f013 0f04 	tst.w	r3, #4
    3cac:	4b10      	ldr	r3, [pc, #64]	; (3cf0 <nrfx_twim_xfer+0x2f8>)
    3cae:	bf18      	it	ne
    3cb0:	461e      	movne	r6, r3
    3cb2:	e6b9      	b.n	3a28 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    3cb4:	067b      	lsls	r3, r7, #25
    3cb6:	f53f aeb7 	bmi.w	3a28 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    3cba:	fb0e c101 	mla	r1, lr, r1, ip
    3cbe:	4620      	mov	r0, r4
    3cc0:	f002 f8ad 	bl	5e1e <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    3cc4:	4b09      	ldr	r3, [pc, #36]	; (3cec <nrfx_twim_xfer+0x2f4>)
    3cc6:	2800      	cmp	r0, #0
    3cc8:	bf08      	it	eq
    3cca:	461e      	moveq	r6, r3
    3ccc:	e6ac      	b.n	3a28 <nrfx_twim_xfer+0x30>
    3cce:	bf00      	nop
    3cd0:	20000528 	.word	0x20000528
    3cd4:	0bad000a 	.word	0x0bad000a
    3cd8:	019c0202 	.word	0x019c0202
    3cdc:	0bad000b 	.word	0x0bad000b
    3ce0:	0bad0000 	.word	0x0bad0000
    3ce4:	0bad0004 	.word	0x0bad0004
    3ce8:	0bae0000 	.word	0x0bae0000
    3cec:	0bad0001 	.word	0x0bad0001
    3cf0:	0bae0002 	.word	0x0bae0002

00003cf4 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
    3cf4:	4901      	ldr	r1, [pc, #4]	; (3cfc <nrfx_twim_0_irq_handler+0x8>)
    3cf6:	4802      	ldr	r0, [pc, #8]	; (3d00 <nrfx_twim_0_irq_handler+0xc>)
    3cf8:	f7ff bd0c 	b.w	3714 <twim_irq_handler>
    3cfc:	20000528 	.word	0x20000528
    3d00:	40003000 	.word	0x40003000

00003d04 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
    3d04:	4902      	ldr	r1, [pc, #8]	; (3d10 <nrfx_twim_1_irq_handler+0xc>)
    3d06:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    3d0a:	f7ff bd03 	b.w	3714 <twim_irq_handler>
    3d0e:	bf00      	nop
    3d10:	2000055c 	.word	0x2000055c

00003d14 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    3d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
    3d18:	f000 001f 	and.w	r0, r0, #31
    3d1c:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3d20:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
    3d22:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3d26:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
    3d2a:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    3d2e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    3d32:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3d36:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
    3d38:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
    3d3c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    3d40:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
    3d44:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    3d48:	2004      	movs	r0, #4
    3d4a:	f002 f84e 	bl	5dea <nrfx_busy_wait>
    3d4e:	2709      	movs	r7, #9
    return p_reg->IN;
    3d50:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    3d54:	421c      	tst	r4, r3
    3d56:	d10d      	bne.n	3d74 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    3d58:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
    3d5a:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
    3d5e:	f002 f844 	bl	5dea <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    3d62:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
    3d64:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    3d68:	2004      	movs	r0, #4
    3d6a:	f002 f83e 	bl	5dea <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    3d6e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    3d72:	d1ed      	bne.n	3d50 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
    3d74:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    3d78:	2004      	movs	r0, #4
    3d7a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    3d7e:	f002 f834 	bl	5dea <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    3d82:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    3d86:	2004      	movs	r0, #4
    3d88:	f002 f82f 	bl	5dea <nrfx_busy_wait>
    return p_reg->IN;
    3d8c:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
    3d90:	4803      	ldr	r0, [pc, #12]	; (3da0 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3d92:	fa21 f606 	lsr.w	r6, r1, r6
    3d96:	f006 0601 	and.w	r6, r6, #1
    3d9a:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    3d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3da0:	0bad0001 	.word	0x0bad0001

00003da4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3da4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3da6:	4c14      	ldr	r4, [pc, #80]	; (3df8 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3da8:	4a14      	ldr	r2, [pc, #80]	; (3dfc <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    3daa:	4915      	ldr	r1, [pc, #84]	; (3e00 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3dac:	2303      	movs	r3, #3
    3dae:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3db0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3db2:	4b14      	ldr	r3, [pc, #80]	; (3e04 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    3db4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3db6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3dbc:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    3dbe:	2300      	movs	r3, #0
    3dc0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3dc2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    3dc6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3dc8:	4a0f      	ldr	r2, [pc, #60]	; (3e08 <_DoInit+0x64>)
    3dca:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    3dcc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    3dce:	2210      	movs	r2, #16
    3dd0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    3dd2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3dd4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3dd6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    3dd8:	f001 f9f3 	bl	51c2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3ddc:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3de0:	490a      	ldr	r1, [pc, #40]	; (3e0c <_DoInit+0x68>)
    3de2:	4620      	mov	r0, r4
    3de4:	f001 f9ed 	bl	51c2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3de8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3dec:	2320      	movs	r3, #32
    3dee:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3df0:	f3bf 8f5f 	dmb	sy
}
    3df4:	bd10      	pop	{r4, pc}
    3df6:	bf00      	nop
    3df8:	20000590 	.word	0x20000590
    3dfc:	000069ea 	.word	0x000069ea
    3e00:	000069f3 	.word	0x000069f3
    3e04:	200006bc 	.word	0x200006bc
    3e08:	200006ac 	.word	0x200006ac
    3e0c:	000069f7 	.word	0x000069f7

00003e10 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3e10:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    3e12:	4b16      	ldr	r3, [pc, #88]	; (3e6c <SEGGER_RTT_WriteNoLock+0x5c>)
    3e14:	2418      	movs	r4, #24
    3e16:	fb00 4504 	mla	r5, r0, r4, r4
    3e1a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    3e1c:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3e20:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    3e22:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3e24:	2c01      	cmp	r4, #1
    3e26:	d00e      	beq.n	3e46 <SEGGER_RTT_WriteNoLock+0x36>
    3e28:	2c02      	cmp	r4, #2
    3e2a:	d018      	beq.n	3e5e <SEGGER_RTT_WriteNoLock+0x4e>
    3e2c:	b9e4      	cbnz	r4, 3e68 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    3e2e:	4628      	mov	r0, r5
    3e30:	f002 f825 	bl	5e7e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    3e34:	4286      	cmp	r6, r0
    3e36:	d804      	bhi.n	3e42 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    3e38:	4632      	mov	r2, r6
    3e3a:	4628      	mov	r0, r5
    3e3c:	f002 f828 	bl	5e90 <_WriteNoCheck>
    3e40:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    3e42:	4620      	mov	r0, r4
    3e44:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    3e46:	4628      	mov	r0, r5
    3e48:	f002 f819 	bl	5e7e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    3e4c:	4286      	cmp	r6, r0
    3e4e:	4634      	mov	r4, r6
    3e50:	bf28      	it	cs
    3e52:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    3e54:	4622      	mov	r2, r4
    3e56:	4628      	mov	r0, r5
    3e58:	f002 f81a 	bl	5e90 <_WriteNoCheck>
    break;
    3e5c:	e7f1      	b.n	3e42 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    3e5e:	4628      	mov	r0, r5
}
    3e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    3e64:	f002 b832 	b.w	5ecc <_WriteBlocking>
  switch (pRing->Flags) {
    3e68:	2400      	movs	r4, #0
  return Status;
    3e6a:	e7ea      	b.n	3e42 <SEGGER_RTT_WriteNoLock+0x32>
    3e6c:	20000590 	.word	0x20000590

00003e70 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3e70:	4b0e      	ldr	r3, [pc, #56]	; (3eac <z_sys_init_run_level+0x3c>)
{
    3e72:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3e74:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3e78:	3001      	adds	r0, #1
    3e7a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3e7e:	42a6      	cmp	r6, r4
    3e80:	d800      	bhi.n	3e84 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3e82:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3e84:	e9d4 3500 	ldrd	r3, r5, [r4]
    3e88:	4628      	mov	r0, r5
    3e8a:	4798      	blx	r3
		if (dev != NULL) {
    3e8c:	b165      	cbz	r5, 3ea8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    3e8e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    3e90:	b130      	cbz	r0, 3ea0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3e92:	2800      	cmp	r0, #0
    3e94:	bfb8      	it	lt
    3e96:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3e98:	28ff      	cmp	r0, #255	; 0xff
    3e9a:	bfa8      	it	ge
    3e9c:	20ff      	movge	r0, #255	; 0xff
    3e9e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3ea0:	785a      	ldrb	r2, [r3, #1]
    3ea2:	f042 0201 	orr.w	r2, r2, #1
    3ea6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3ea8:	3408      	adds	r4, #8
    3eaa:	e7e8      	b.n	3e7e <z_sys_init_run_level+0xe>
    3eac:	000067e8 	.word	0x000067e8

00003eb0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    3eb0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    3eb2:	4605      	mov	r5, r0
    3eb4:	b910      	cbnz	r0, 3ebc <z_impl_device_get_binding+0xc>
		return NULL;
    3eb6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    3eb8:	4620      	mov	r0, r4
    3eba:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    3ebc:	7803      	ldrb	r3, [r0, #0]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d0f9      	beq.n	3eb6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    3ec2:	4c0e      	ldr	r4, [pc, #56]	; (3efc <z_impl_device_get_binding+0x4c>)
    3ec4:	4e0e      	ldr	r6, [pc, #56]	; (3f00 <z_impl_device_get_binding+0x50>)
    3ec6:	42b4      	cmp	r4, r6
    3ec8:	d108      	bne.n	3edc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    3eca:	4c0c      	ldr	r4, [pc, #48]	; (3efc <z_impl_device_get_binding+0x4c>)
    3ecc:	42b4      	cmp	r4, r6
    3ece:	d0f2      	beq.n	3eb6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3ed0:	4620      	mov	r0, r4
    3ed2:	f002 f82f 	bl	5f34 <z_device_is_ready>
    3ed6:	b950      	cbnz	r0, 3eee <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    3ed8:	3418      	adds	r4, #24
    3eda:	e7f7      	b.n	3ecc <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    3edc:	4620      	mov	r0, r4
    3ede:	f002 f829 	bl	5f34 <z_device_is_ready>
    3ee2:	b110      	cbz	r0, 3eea <z_impl_device_get_binding+0x3a>
    3ee4:	6823      	ldr	r3, [r4, #0]
    3ee6:	42ab      	cmp	r3, r5
    3ee8:	d0e6      	beq.n	3eb8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    3eea:	3418      	adds	r4, #24
    3eec:	e7eb      	b.n	3ec6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3eee:	6821      	ldr	r1, [r4, #0]
    3ef0:	4628      	mov	r0, r5
    3ef2:	f001 f980 	bl	51f6 <strcmp>
    3ef6:	2800      	cmp	r0, #0
    3ef8:	d1ee      	bne.n	3ed8 <z_impl_device_get_binding+0x28>
    3efa:	e7dd      	b.n	3eb8 <z_impl_device_get_binding+0x8>
    3efc:	000062ec 	.word	0x000062ec
    3f00:	0000643c 	.word	0x0000643c

00003f04 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3f04:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    3f06:	2300      	movs	r3, #0
{
    3f08:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    3f0a:	2201      	movs	r2, #1
    3f0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3f10:	220f      	movs	r2, #15
    3f12:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3f16:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
    3f18:	4c0c      	ldr	r4, [pc, #48]	; (3f4c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3f1a:	4b0d      	ldr	r3, [pc, #52]	; (3f50 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    3f1c:	490d      	ldr	r1, [pc, #52]	; (3f54 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3f1e:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
    3f20:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3f24:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
    3f28:	f44f 75b0 	mov.w	r5, #352	; 0x160
    3f2c:	9300      	str	r3, [sp, #0]
    3f2e:	fb05 1100 	mla	r1, r5, r0, r1
    3f32:	4b09      	ldr	r3, [pc, #36]	; (3f58 <init_idle_thread+0x54>)
    3f34:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3f38:	4620      	mov	r0, r4
    3f3a:	f000 f8a7 	bl	408c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3f3e:	7b63      	ldrb	r3, [r4, #13]
    3f40:	f023 0304 	bic.w	r3, r3, #4
    3f44:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3f46:	b007      	add	sp, #28
    3f48:	bd30      	pop	{r4, r5, pc}
    3f4a:	bf00      	nop
    3f4c:	20000290 	.word	0x20000290
    3f50:	20000638 	.word	0x20000638
    3f54:	20000ee0 	.word	0x20000ee0
    3f58:	00004201 	.word	0x00004201

00003f5c <bg_thread_main>:
{
    3f5c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3f5e:	4b0a      	ldr	r3, [pc, #40]	; (3f88 <bg_thread_main+0x2c>)
    3f60:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3f62:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3f64:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3f66:	f7ff ff83 	bl	3e70 <z_sys_init_run_level>
	boot_banner();
    3f6a:	f000 ff5f 	bl	4e2c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3f6e:	2003      	movs	r0, #3
    3f70:	f7ff ff7e 	bl	3e70 <z_sys_init_run_level>
	z_init_static_threads();
    3f74:	f000 f8e8 	bl	4148 <z_init_static_threads>
	main();
    3f78:	f7fc fa1e 	bl	3b8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3f7c:	4a03      	ldr	r2, [pc, #12]	; (3f8c <bg_thread_main+0x30>)
    3f7e:	7b13      	ldrb	r3, [r2, #12]
    3f80:	f023 0301 	bic.w	r3, r3, #1
    3f84:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3f86:	bd08      	pop	{r3, pc}
    3f88:	20000abc 	.word	0x20000abc
    3f8c:	20000310 	.word	0x20000310

00003f90 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3f90:	4802      	ldr	r0, [pc, #8]	; (3f9c <z_bss_zero+0xc>)
    3f92:	4a03      	ldr	r2, [pc, #12]	; (3fa0 <z_bss_zero+0x10>)
    3f94:	2100      	movs	r1, #0
    3f96:	1a12      	subs	r2, r2, r0
    3f98:	f001 b944 	b.w	5224 <memset>
    3f9c:	20000168 	.word	0x20000168
    3fa0:	20000ac0 	.word	0x20000ac0

00003fa4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3fa4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3fa6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 406c <z_cstart+0xc8>
    3faa:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3fac:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3fb0:	4d2f      	ldr	r5, [pc, #188]	; (4070 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    3fb2:	4e30      	ldr	r6, [pc, #192]	; (4074 <z_cstart+0xd0>)
    3fb4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3fb6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4078 <z_cstart+0xd4>
    3fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3fbe:	2400      	movs	r4, #0
    3fc0:	616b      	str	r3, [r5, #20]
    3fc2:	23e0      	movs	r3, #224	; 0xe0
    3fc4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3fc8:	77ec      	strb	r4, [r5, #31]
    3fca:	762c      	strb	r4, [r5, #24]
    3fcc:	766c      	strb	r4, [r5, #25]
    3fce:	76ac      	strb	r4, [r5, #26]
    3fd0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3fd4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3fd6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3fda:	626b      	str	r3, [r5, #36]	; 0x24
    3fdc:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3fe0:	f7fd fb1c 	bl	161c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3fe4:	f7fd f8d8 	bl	1198 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3fec:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3fee:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3ff0:	f7fd fbf2 	bl	17d8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3ff4:	f7fd fb5a 	bl	16ac <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3ff8:	f240 1301 	movw	r3, #257	; 0x101
    3ffc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4000:	ab06      	add	r3, sp, #24
    4002:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4004:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4008:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    400a:	f001 ff92 	bl	5f32 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    400e:	4620      	mov	r0, r4
    4010:	f7ff ff2e 	bl	3e70 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4014:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4016:	4d19      	ldr	r5, [pc, #100]	; (407c <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4018:	f7ff ff2a 	bl	3e70 <z_sys_init_run_level>
	z_sched_init();
    401c:	f000 fc9c 	bl	4958 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4020:	4b17      	ldr	r3, [pc, #92]	; (4080 <z_cstart+0xdc>)
    4022:	9305      	str	r3, [sp, #20]
    4024:	2301      	movs	r3, #1
    4026:	4917      	ldr	r1, [pc, #92]	; (4084 <z_cstart+0xe0>)
    4028:	9400      	str	r4, [sp, #0]
    402a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    402e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4032:	464b      	mov	r3, r9
    4034:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4038:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    403a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    403c:	f000 f826 	bl	408c <z_setup_new_thread>
    4040:	7b6a      	ldrb	r2, [r5, #13]
    4042:	4607      	mov	r7, r0
    4044:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4048:	4628      	mov	r0, r5
    404a:	736a      	strb	r2, [r5, #13]
    404c:	f002 f820 	bl	6090 <z_ready_thread>
		init_idle_thread(i);
    4050:	4620      	mov	r0, r4
    4052:	f7ff ff57 	bl	3f04 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4056:	4b0c      	ldr	r3, [pc, #48]	; (4088 <z_cstart+0xe4>)
    4058:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    405a:	464a      	mov	r2, r9
    405c:	4639      	mov	r1, r7
    405e:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    4060:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    4062:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4066:	f7fd f9ad 	bl	13c4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    406a:	bf00      	nop
    406c:	20001860 	.word	0x20001860
    4070:	e000ed00 	.word	0xe000ed00
    4074:	20000638 	.word	0x20000638
    4078:	00003f5d 	.word	0x00003f5d
    407c:	20000310 	.word	0x20000310
    4080:	000069fe 	.word	0x000069fe
    4084:	20000ac0 	.word	0x20000ac0
    4088:	20000290 	.word	0x20000290

0000408c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    408c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4090:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4092:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4094:	2604      	movs	r6, #4
    4096:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4098:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    409a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    409c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    40a0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    40a2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    40a4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    40a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    40aa:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    40ac:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    40b0:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    40b2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    40b6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    40ba:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    40bc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    40be:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    40c0:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    40c4:	9202      	str	r2, [sp, #8]
    40c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    40c8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    40ca:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    40cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    40ce:	9200      	str	r2, [sp, #0]
    40d0:	4642      	mov	r2, r8
{
    40d2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    40d4:	f7fd f944 	bl	1360 <arch_new_thread>
	if (!_current) {
    40d8:	4b04      	ldr	r3, [pc, #16]	; (40ec <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    40da:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    40dc:	689b      	ldr	r3, [r3, #8]
    40de:	b103      	cbz	r3, 40e2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    40e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    40e2:	6723      	str	r3, [r4, #112]	; 0x70
}
    40e4:	4640      	mov	r0, r8
    40e6:	b004      	add	sp, #16
    40e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40ec:	20000638 	.word	0x20000638

000040f0 <z_impl_k_thread_create>:
{
    40f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40f2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    40f4:	2700      	movs	r7, #0
    40f6:	9705      	str	r7, [sp, #20]
    40f8:	9f10      	ldr	r7, [sp, #64]	; 0x40
    40fa:	9704      	str	r7, [sp, #16]
    40fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    40fe:	9703      	str	r7, [sp, #12]
    4100:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4102:	9702      	str	r7, [sp, #8]
{
    4104:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4108:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    410a:	9701      	str	r7, [sp, #4]
    410c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    410e:	9700      	str	r7, [sp, #0]
{
    4110:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4112:	f7ff ffbb 	bl	408c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4116:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    411a:	bf08      	it	eq
    411c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    4120:	d005      	beq.n	412e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4122:	ea55 0306 	orrs.w	r3, r5, r6
    4126:	d105      	bne.n	4134 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    4128:	4620      	mov	r0, r4
    412a:	f000 fb57 	bl	47dc <z_sched_start>
}
    412e:	4620      	mov	r0, r4
    4130:	b007      	add	sp, #28
    4132:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4134:	4903      	ldr	r1, [pc, #12]	; (4144 <z_impl_k_thread_create+0x54>)
    4136:	4632      	mov	r2, r6
    4138:	462b      	mov	r3, r5
    413a:	f104 0018 	add.w	r0, r4, #24
    413e:	f000 fd87 	bl	4c50 <z_add_timeout>
    4142:	e7f4      	b.n	412e <z_impl_k_thread_create+0x3e>
    4144:	000060b1 	.word	0x000060b1

00004148 <z_init_static_threads>:
{
    4148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    414c:	4c29      	ldr	r4, [pc, #164]	; (41f4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    414e:	4d2a      	ldr	r5, [pc, #168]	; (41f8 <z_init_static_threads+0xb0>)
{
    4150:	b087      	sub	sp, #28
    4152:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4154:	42ae      	cmp	r6, r5
    4156:	f104 0430 	add.w	r4, r4, #48	; 0x30
    415a:	d30f      	bcc.n	417c <z_init_static_threads+0x34>
	k_sched_lock();
    415c:	f000 fa5a 	bl	4614 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4160:	4c24      	ldr	r4, [pc, #144]	; (41f4 <z_init_static_threads+0xac>)
    4162:	f8df 9098 	ldr.w	r9, [pc, #152]	; 41fc <z_init_static_threads+0xb4>
    4166:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    416a:	f240 37e7 	movw	r7, #999	; 0x3e7
    416e:	42ac      	cmp	r4, r5
    4170:	d320      	bcc.n	41b4 <z_init_static_threads+0x6c>
}
    4172:	b007      	add	sp, #28
    4174:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4178:	f000 bbd2 	b.w	4920 <k_sched_unlock>
		z_setup_new_thread(
    417c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4180:	9305      	str	r3, [sp, #20]
    4182:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4186:	9304      	str	r3, [sp, #16]
    4188:	f854 3c14 	ldr.w	r3, [r4, #-20]
    418c:	9303      	str	r3, [sp, #12]
    418e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4192:	9302      	str	r3, [sp, #8]
    4194:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4198:	9301      	str	r3, [sp, #4]
    419a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    419e:	9300      	str	r3, [sp, #0]
    41a0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    41a4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    41a8:	f7ff ff70 	bl	408c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    41ac:	f854 3c30 	ldr.w	r3, [r4, #-48]
    41b0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    41b2:	e7ce      	b.n	4152 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    41b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    41b6:	1c5a      	adds	r2, r3, #1
    41b8:	d00d      	beq.n	41d6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    41ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    41be:	2100      	movs	r1, #0
    41c0:	4638      	mov	r0, r7
    41c2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    41c6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    41ca:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    41ce:	d104      	bne.n	41da <z_init_static_threads+0x92>
	z_sched_start(thread);
    41d0:	4640      	mov	r0, r8
    41d2:	f000 fb03 	bl	47dc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    41d6:	3430      	adds	r4, #48	; 0x30
    41d8:	e7c9      	b.n	416e <z_init_static_threads+0x26>
    41da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41de:	2300      	movs	r3, #0
    41e0:	f7fb ff7c 	bl	dc <__aeabi_uldivmod>
    41e4:	4602      	mov	r2, r0
    41e6:	460b      	mov	r3, r1
    41e8:	f108 0018 	add.w	r0, r8, #24
    41ec:	4649      	mov	r1, r9
    41ee:	f000 fd2f 	bl	4c50 <z_add_timeout>
    41f2:	e7f0      	b.n	41d6 <z_init_static_threads+0x8e>
    41f4:	20000168 	.word	0x20000168
    41f8:	20000168 	.word	0x20000168
    41fc:	000060b1 	.word	0x000060b1

00004200 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4200:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4202:	4c0b      	ldr	r4, [pc, #44]	; (4230 <idle+0x30>)
	return !z_sys_post_kernel;
    4204:	4d0b      	ldr	r5, [pc, #44]	; (4234 <idle+0x34>)
	__asm__ volatile(
    4206:	f04f 0220 	mov.w	r2, #32
    420a:	f3ef 8311 	mrs	r3, BASEPRI
    420e:	f382 8812 	msr	BASEPRI_MAX, r2
    4212:	f3bf 8f6f 	isb	sy
    4216:	f001 ffe2 	bl	61de <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    421a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    421c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    421e:	b913      	cbnz	r3, 4226 <idle+0x26>
	arch_cpu_idle();
    4220:	f7fc ffc0 	bl	11a4 <arch_cpu_idle>
}
    4224:	e7ef      	b.n	4206 <idle+0x6>
    4226:	f7fc fedf 	bl	fe8 <pm_system_suspend>
    422a:	2800      	cmp	r0, #0
    422c:	d1eb      	bne.n	4206 <idle+0x6>
    422e:	e7f7      	b.n	4220 <idle+0x20>
    4230:	20000638 	.word	0x20000638
    4234:	20000abc 	.word	0x20000abc

00004238 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4238:	b538      	push	{r3, r4, r5, lr}
    423a:	4604      	mov	r4, r0
    423c:	f04f 0320 	mov.w	r3, #32
    4240:	f3ef 8511 	mrs	r5, BASEPRI
    4244:	f383 8812 	msr	BASEPRI_MAX, r3
    4248:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    424c:	f001 ff7c 	bl	6148 <z_unpend_first_thread>

	if (thread != NULL) {
    4250:	b148      	cbz	r0, 4266 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4252:	2200      	movs	r2, #0
    4254:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4256:	f001 ff1b 	bl	6090 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    425a:	4629      	mov	r1, r5
    425c:	4805      	ldr	r0, [pc, #20]	; (4274 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    425e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4262:	f000 b9c5 	b.w	45f0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4266:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    426a:	429a      	cmp	r2, r3
    426c:	bf18      	it	ne
    426e:	3301      	addne	r3, #1
    4270:	60a3      	str	r3, [r4, #8]
}
    4272:	e7f2      	b.n	425a <z_impl_k_sem_give+0x22>
    4274:	20000abd 	.word	0x20000abd

00004278 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4278:	b513      	push	{r0, r1, r4, lr}
    427a:	f04f 0420 	mov.w	r4, #32
    427e:	f3ef 8111 	mrs	r1, BASEPRI
    4282:	f384 8812 	msr	BASEPRI_MAX, r4
    4286:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    428a:	6884      	ldr	r4, [r0, #8]
    428c:	b144      	cbz	r4, 42a0 <z_impl_k_sem_take+0x28>
		sem->count--;
    428e:	3c01      	subs	r4, #1
    4290:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4292:	f381 8811 	msr	BASEPRI, r1
    4296:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    429a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    429c:	b002      	add	sp, #8
    429e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    42a0:	ea52 0403 	orrs.w	r4, r2, r3
    42a4:	d106      	bne.n	42b4 <z_impl_k_sem_take+0x3c>
    42a6:	f381 8811 	msr	BASEPRI, r1
    42aa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    42ae:	f06f 000f 	mvn.w	r0, #15
    42b2:	e7f3      	b.n	429c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    42b4:	e9cd 2300 	strd	r2, r3, [sp]
    42b8:	4602      	mov	r2, r0
    42ba:	4802      	ldr	r0, [pc, #8]	; (42c4 <z_impl_k_sem_take+0x4c>)
    42bc:	f000 faea 	bl	4894 <z_pend_curr>
	return ret;
    42c0:	e7ec      	b.n	429c <z_impl_k_sem_take+0x24>
    42c2:	bf00      	nop
    42c4:	20000abd 	.word	0x20000abd

000042c8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    42c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    42cc:	4e47      	ldr	r6, [pc, #284]	; (43ec <work_queue_main+0x124>)
    42ce:	b085      	sub	sp, #20
    42d0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    42d2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    42d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    42da:	f04f 0320 	mov.w	r3, #32
    42de:	f3ef 8711 	mrs	r7, BASEPRI
    42e2:	f383 8812 	msr	BASEPRI_MAX, r3
    42e6:	f3bf 8f6f 	isb	sy
    42ea:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    42ee:	b98d      	cbnz	r5, 4314 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    42f0:	2102      	movs	r1, #2
    42f2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    42f6:	f001 fe60 	bl	5fba <flag_test_and_clear>
    42fa:	2800      	cmp	r0, #0
    42fc:	d135      	bne.n	436a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    42fe:	2300      	movs	r3, #0
    4300:	e9cd 8900 	strd	r8, r9, [sp]
    4304:	9302      	str	r3, [sp, #8]
    4306:	f104 0288 	add.w	r2, r4, #136	; 0x88
    430a:	4639      	mov	r1, r7
    430c:	4838      	ldr	r0, [pc, #224]	; (43f0 <work_queue_main+0x128>)
    430e:	f000 fc29 	bl	4b64 <z_sched_wait>
			continue;
    4312:	e7e2      	b.n	42da <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4314:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    4318:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    431a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    431e:	4295      	cmp	r5, r2
    4320:	d101      	bne.n	4326 <work_queue_main+0x5e>
	list->tail = node;
    4322:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    4326:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    432a:	f043 0302 	orr.w	r3, r3, #2
    432e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    4332:	68eb      	ldr	r3, [r5, #12]
    4334:	f023 0304 	bic.w	r3, r3, #4
    4338:	f043 0301 	orr.w	r3, r3, #1
    433c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    433e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    4340:	f387 8811 	msr	BASEPRI, r7
    4344:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    4348:	4628      	mov	r0, r5
    434a:	4798      	blx	r3
	__asm__ volatile(
    434c:	f04f 0320 	mov.w	r3, #32
    4350:	f3ef 8b11 	mrs	fp, BASEPRI
    4354:	f383 8812 	msr	BASEPRI_MAX, r3
    4358:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    435c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    435e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    4360:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    4364:	d40b      	bmi.n	437e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    4366:	60ea      	str	r2, [r5, #12]
    4368:	e00e      	b.n	4388 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    436a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    436e:	2200      	movs	r2, #0
    4370:	2101      	movs	r1, #1
    4372:	4628      	mov	r0, r5
    4374:	f001 ff00 	bl	6178 <z_sched_wake>
    4378:	2800      	cmp	r0, #0
    437a:	d1f8      	bne.n	436e <work_queue_main+0xa6>
    437c:	e7bf      	b.n	42fe <work_queue_main+0x36>
	return list->head;
    437e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    4380:	f023 0303 	bic.w	r3, r3, #3
    4384:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    4386:	b970      	cbnz	r0, 43a6 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    4388:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    438c:	f023 0302 	bic.w	r3, r3, #2
    4390:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    4394:	f38b 8811 	msr	BASEPRI, fp
    4398:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    439c:	05d8      	lsls	r0, r3, #23
    439e:	d49c      	bmi.n	42da <work_queue_main+0x12>
	z_impl_k_yield();
    43a0:	f000 fae6 	bl	4970 <z_impl_k_yield>
}
    43a4:	e799      	b.n	42da <work_queue_main+0x12>
	return node->next;
    43a6:	2700      	movs	r7, #0
    43a8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    43ac:	463b      	mov	r3, r7
		if (wc->work == work) {
    43ae:	6842      	ldr	r2, [r0, #4]
    43b0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    43b2:	4601      	mov	r1, r0
		if (wc->work == work) {
    43b4:	d10c      	bne.n	43d0 <work_queue_main+0x108>
	return node->next;
    43b6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    43b8:	b997      	cbnz	r7, 43e0 <work_queue_main+0x118>
    43ba:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    43bc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    43be:	4282      	cmp	r2, r0
    43c0:	d100      	bne.n	43c4 <work_queue_main+0xfc>
	list->tail = node;
    43c2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    43c4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    43c8:	f7ff ff36 	bl	4238 <z_impl_k_sem_give>
}
    43cc:	4639      	mov	r1, r7
    43ce:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    43d0:	f1ba 0f00 	cmp.w	sl, #0
    43d4:	d0d8      	beq.n	4388 <work_queue_main+0xc0>
	return node->next;
    43d6:	4650      	mov	r0, sl
    43d8:	460f      	mov	r7, r1
    43da:	f8da a000 	ldr.w	sl, [sl]
    43de:	e7e6      	b.n	43ae <work_queue_main+0xe6>
	return list->tail;
    43e0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    43e2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    43e4:	4290      	cmp	r0, r2
	list->tail = node;
    43e6:	bf08      	it	eq
    43e8:	6077      	streq	r7, [r6, #4]
}
    43ea:	e7eb      	b.n	43c4 <work_queue_main+0xfc>
    43ec:	20000660 	.word	0x20000660
    43f0:	20000abd 	.word	0x20000abd

000043f4 <submit_to_queue_locked>:
{
    43f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    43f6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    43f8:	079a      	lsls	r2, r3, #30
{
    43fa:	4604      	mov	r4, r0
    43fc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    43fe:	f3c3 0540 	ubfx	r5, r3, #1, #1
    4402:	d41f      	bmi.n	4444 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    4404:	075f      	lsls	r7, r3, #29
    4406:	d41f      	bmi.n	4448 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    4408:	680a      	ldr	r2, [r1, #0]
    440a:	b90a      	cbnz	r2, 4410 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    440c:	6882      	ldr	r2, [r0, #8]
    440e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    4410:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    4412:	bf44      	itt	mi
    4414:	68a3      	ldrmi	r3, [r4, #8]
    4416:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    4418:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    441a:	bf4c      	ite	mi
    441c:	2502      	movmi	r5, #2
		ret = 1;
    441e:	2501      	movpl	r5, #1
	if (queue == NULL) {
    4420:	b37f      	cbz	r7, 4482 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    4422:	4b1b      	ldr	r3, [pc, #108]	; (4490 <submit_to_queue_locked+0x9c>)
    4424:	689b      	ldr	r3, [r3, #8]
    4426:	42bb      	cmp	r3, r7
    4428:	d111      	bne.n	444e <submit_to_queue_locked+0x5a>
    442a:	f001 fdb4 	bl	5f96 <k_is_in_isr>
    442e:	f080 0001 	eor.w	r0, r0, #1
    4432:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    4434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    4438:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    443a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    443e:	d523      	bpl.n	4488 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    4440:	b13a      	cbz	r2, 4452 <submit_to_queue_locked+0x5e>
    4442:	b940      	cbnz	r0, 4456 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    4444:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    4448:	2300      	movs	r3, #0
    444a:	6033      	str	r3, [r6, #0]
	return ret;
    444c:	e013      	b.n	4476 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    444e:	2000      	movs	r0, #0
    4450:	e7f0      	b.n	4434 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    4452:	071b      	lsls	r3, r3, #28
    4454:	d4f6      	bmi.n	4444 <submit_to_queue_locked+0x50>
	parent->next = child;
    4456:	2300      	movs	r3, #0
    4458:	6023      	str	r3, [r4, #0]
	return list->tail;
    445a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    445e:	b963      	cbnz	r3, 447a <submit_to_queue_locked+0x86>
	list->head = node;
    4460:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    4464:	4638      	mov	r0, r7
    4466:	f001 fdb3 	bl	5fd0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    446a:	68e3      	ldr	r3, [r4, #12]
    446c:	f043 0304 	orr.w	r3, r3, #4
    4470:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    4472:	6833      	ldr	r3, [r6, #0]
    4474:	60a3      	str	r3, [r4, #8]
}
    4476:	4628      	mov	r0, r5
    4478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    447a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    447c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    4480:	e7f0      	b.n	4464 <submit_to_queue_locked+0x70>
		return -EINVAL;
    4482:	f06f 0515 	mvn.w	r5, #21
    4486:	e7df      	b.n	4448 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    4488:	f06f 0512 	mvn.w	r5, #18
    448c:	e7dc      	b.n	4448 <submit_to_queue_locked+0x54>
    448e:	bf00      	nop
    4490:	20000638 	.word	0x20000638

00004494 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    4494:	b5f0      	push	{r4, r5, r6, r7, lr}
    4496:	b089      	sub	sp, #36	; 0x24
    4498:	4604      	mov	r4, r0
	list->head = NULL;
    449a:	2000      	movs	r0, #0
	list->tail = NULL;
    449c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    44a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    44a2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    44a6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    44aa:	f104 0090 	add.w	r0, r4, #144	; 0x90
    44ae:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    44b2:	b31d      	cbz	r5, 44fc <k_work_queue_start+0x68>
    44b4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    44b6:	2800      	cmp	r0, #0
    44b8:	f240 1001 	movw	r0, #257	; 0x101
    44bc:	bf08      	it	eq
    44be:	2001      	moveq	r0, #1
	*flagp = flags;
    44c0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    44c4:	2000      	movs	r0, #0
    44c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    44ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    44ce:	e9cd 3003 	strd	r3, r0, [sp, #12]
    44d2:	e9cd 0001 	strd	r0, r0, [sp, #4]
    44d6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    44da:	4b09      	ldr	r3, [pc, #36]	; (4500 <k_work_queue_start+0x6c>)
    44dc:	9400      	str	r4, [sp, #0]
    44de:	4620      	mov	r0, r4
    44e0:	f7ff fe06 	bl	40f0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    44e4:	b125      	cbz	r5, 44f0 <k_work_queue_start+0x5c>
    44e6:	6829      	ldr	r1, [r5, #0]
    44e8:	b111      	cbz	r1, 44f0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    44ea:	4620      	mov	r0, r4
    44ec:	f001 fd59 	bl	5fa2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    44f0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    44f2:	b009      	add	sp, #36	; 0x24
    44f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    44f8:	f001 bd56 	b.w	5fa8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    44fc:	2001      	movs	r0, #1
    44fe:	e7df      	b.n	44c0 <k_work_queue_start+0x2c>
    4500:	000042c9 	.word	0x000042c9

00004504 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    4504:	b513      	push	{r0, r1, r4, lr}
    4506:	9001      	str	r0, [sp, #4]
    4508:	4608      	mov	r0, r1
	__asm__ volatile(
    450a:	f04f 0120 	mov.w	r1, #32
    450e:	f3ef 8411 	mrs	r4, BASEPRI
    4512:	f381 8812 	msr	BASEPRI_MAX, r1
    4516:	f3bf 8f6f 	isb	sy
	return *flagp;
    451a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    451c:	f011 0f0e 	tst.w	r1, #14
    4520:	d116      	bne.n	4550 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4522:	ea53 0c02 	orrs.w	ip, r3, r2
    4526:	d108      	bne.n	453a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    4528:	a901      	add	r1, sp, #4
    452a:	f7ff ff63 	bl	43f4 <submit_to_queue_locked>
	__asm__ volatile(
    452e:	f384 8811 	msr	BASEPRI, r4
    4532:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    4536:	b002      	add	sp, #8
    4538:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    453a:	f041 0108 	orr.w	r1, r1, #8
    453e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    4540:	9901      	ldr	r1, [sp, #4]
    4542:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    4544:	3010      	adds	r0, #16
    4546:	4903      	ldr	r1, [pc, #12]	; (4554 <k_work_schedule_for_queue+0x50>)
    4548:	f000 fb82 	bl	4c50 <z_add_timeout>
	return ret;
    454c:	2001      	movs	r0, #1
    454e:	e7ee      	b.n	452e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    4550:	2000      	movs	r0, #0
    4552:	e7ec      	b.n	452e <k_work_schedule_for_queue+0x2a>
    4554:	00005fdf 	.word	0x00005fdf

00004558 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    4558:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    455a:	4801      	ldr	r0, [pc, #4]	; (4560 <k_work_schedule+0x8>)
    455c:	f7ff bfd2 	b.w	4504 <k_work_schedule_for_queue>
    4560:	20000398 	.word	0x20000398

00004564 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4564:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    4566:	4c08      	ldr	r4, [pc, #32]	; (4588 <z_reset_time_slice+0x24>)
    4568:	6823      	ldr	r3, [r4, #0]
    456a:	b15b      	cbz	r3, 4584 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    456c:	f7fe fb32 	bl	2bd4 <sys_clock_elapsed>
    4570:	4603      	mov	r3, r0
    4572:	6820      	ldr	r0, [r4, #0]
    4574:	4a05      	ldr	r2, [pc, #20]	; (458c <z_reset_time_slice+0x28>)
    4576:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    4578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    457c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    457e:	2100      	movs	r1, #0
    4580:	f001 be3d 	b.w	61fe <z_set_timeout_expiry>
}
    4584:	bd10      	pop	{r4, pc}
    4586:	bf00      	nop
    4588:	20000670 	.word	0x20000670
    458c:	20000638 	.word	0x20000638

00004590 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4592:	4604      	mov	r4, r0
    4594:	460d      	mov	r5, r1
	__asm__ volatile(
    4596:	f04f 0320 	mov.w	r3, #32
    459a:	f3ef 8611 	mrs	r6, BASEPRI
    459e:	f383 8812 	msr	BASEPRI_MAX, r3
    45a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    45a6:	4b0f      	ldr	r3, [pc, #60]	; (45e4 <k_sched_time_slice_set+0x54>)
    45a8:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    45aa:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    45ae:	f240 30e7 	movw	r0, #999	; 0x3e7
    45b2:	6119      	str	r1, [r3, #16]
    45b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    45b8:	2300      	movs	r3, #0
    45ba:	fbe4 0107 	umlal	r0, r1, r4, r7
    45be:	f7fb fd8d 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    45c2:	2c00      	cmp	r4, #0
    45c4:	4b08      	ldr	r3, [pc, #32]	; (45e8 <k_sched_time_slice_set+0x58>)
    45c6:	dc09      	bgt.n	45dc <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    45c8:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    45ca:	4b08      	ldr	r3, [pc, #32]	; (45ec <k_sched_time_slice_set+0x5c>)
    45cc:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    45ce:	f7ff ffc9 	bl	4564 <z_reset_time_slice>
	__asm__ volatile(
    45d2:	f386 8811 	msr	BASEPRI, r6
    45d6:	f3bf 8f6f 	isb	sy
	}
}
    45da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    45dc:	2802      	cmp	r0, #2
    45de:	bfb8      	it	lt
    45e0:	2002      	movlt	r0, #2
    45e2:	e7f1      	b.n	45c8 <k_sched_time_slice_set+0x38>
    45e4:	20000638 	.word	0x20000638
    45e8:	20000670 	.word	0x20000670
    45ec:	2000066c 	.word	0x2000066c

000045f0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    45f0:	b949      	cbnz	r1, 4606 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    45f2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    45f6:	b930      	cbnz	r0, 4606 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    45f8:	4b05      	ldr	r3, [pc, #20]	; (4610 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    45fa:	69da      	ldr	r2, [r3, #28]
    45fc:	689b      	ldr	r3, [r3, #8]
    45fe:	429a      	cmp	r2, r3
    4600:	d001      	beq.n	4606 <z_reschedule+0x16>
	ret = arch_swap(key);
    4602:	f7fc be59 	b.w	12b8 <arch_swap>
    4606:	f381 8811 	msr	BASEPRI, r1
    460a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    460e:	4770      	bx	lr
    4610:	20000638 	.word	0x20000638

00004614 <k_sched_lock>:
	__asm__ volatile(
    4614:	f04f 0320 	mov.w	r3, #32
    4618:	f3ef 8111 	mrs	r1, BASEPRI
    461c:	f383 8812 	msr	BASEPRI_MAX, r3
    4620:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    4624:	4b04      	ldr	r3, [pc, #16]	; (4638 <k_sched_lock+0x24>)
    4626:	689a      	ldr	r2, [r3, #8]
    4628:	7bd3      	ldrb	r3, [r2, #15]
    462a:	3b01      	subs	r3, #1
    462c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    462e:	f381 8811 	msr	BASEPRI, r1
    4632:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4636:	4770      	bx	lr
    4638:	20000638 	.word	0x20000638

0000463c <update_cache>:
{
    463c:	b538      	push	{r3, r4, r5, lr}
    463e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    4640:	480c      	ldr	r0, [pc, #48]	; (4674 <update_cache+0x38>)
    4642:	4d0d      	ldr	r5, [pc, #52]	; (4678 <update_cache+0x3c>)
    4644:	f001 fd1e 	bl	6084 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4648:	4604      	mov	r4, r0
    464a:	b900      	cbnz	r0, 464e <update_cache+0x12>
    464c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    464e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    4650:	b94a      	cbnz	r2, 4666 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    4652:	7b5a      	ldrb	r2, [r3, #13]
    4654:	06d2      	lsls	r2, r2, #27
    4656:	d106      	bne.n	4666 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4658:	69a2      	ldr	r2, [r4, #24]
    465a:	b922      	cbnz	r2, 4666 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    465c:	89da      	ldrh	r2, [r3, #14]
    465e:	2a7f      	cmp	r2, #127	; 0x7f
    4660:	d901      	bls.n	4666 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    4662:	61eb      	str	r3, [r5, #28]
}
    4664:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4666:	429c      	cmp	r4, r3
    4668:	d001      	beq.n	466e <update_cache+0x32>
			z_reset_time_slice();
    466a:	f7ff ff7b 	bl	4564 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    466e:	61ec      	str	r4, [r5, #28]
}
    4670:	e7f8      	b.n	4664 <update_cache+0x28>
    4672:	bf00      	nop
    4674:	20000658 	.word	0x20000658
    4678:	20000638 	.word	0x20000638

0000467c <move_thread_to_end_of_prio_q>:
{
    467c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    467e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4682:	7b43      	ldrb	r3, [r0, #13]
    4684:	2a00      	cmp	r2, #0
{
    4686:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4688:	da04      	bge.n	4694 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    468a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    468e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4690:	f001 fcd0 	bl	6034 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4694:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4696:	4a15      	ldr	r2, [pc, #84]	; (46ec <move_thread_to_end_of_prio_q+0x70>)
    4698:	f063 037f 	orn	r3, r3, #127	; 0x7f
    469c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    469e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46a2:	f102 0520 	add.w	r5, r2, #32
    46a6:	42ab      	cmp	r3, r5
    46a8:	d01b      	beq.n	46e2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    46aa:	b1d3      	cbz	r3, 46e2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    46ac:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    46b0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    46b4:	4286      	cmp	r6, r0
    46b6:	d00f      	beq.n	46d8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    46b8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    46ba:	2800      	cmp	r0, #0
    46bc:	dd0c      	ble.n	46d8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    46be:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    46c0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    46c4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    46c6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    46c8:	6890      	ldr	r0, [r2, #8]
    46ca:	1a43      	subs	r3, r0, r1
    46cc:	4258      	negs	r0, r3
}
    46ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    46d2:	4158      	adcs	r0, r3
    46d4:	f7ff bfb2 	b.w	463c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    46d8:	42a3      	cmp	r3, r4
    46da:	d002      	beq.n	46e2 <move_thread_to_end_of_prio_q+0x66>
    46dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    46de:	2b00      	cmp	r3, #0
    46e0:	d1e6      	bne.n	46b0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    46e2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    46e6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    46e8:	6251      	str	r1, [r2, #36]	; 0x24
}
    46ea:	e7ed      	b.n	46c8 <move_thread_to_end_of_prio_q+0x4c>
    46ec:	20000638 	.word	0x20000638

000046f0 <z_time_slice>:
{
    46f0:	b538      	push	{r3, r4, r5, lr}
    46f2:	4601      	mov	r1, r0
	__asm__ volatile(
    46f4:	f04f 0320 	mov.w	r3, #32
    46f8:	f3ef 8411 	mrs	r4, BASEPRI
    46fc:	f383 8812 	msr	BASEPRI_MAX, r3
    4700:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4704:	4b15      	ldr	r3, [pc, #84]	; (475c <z_time_slice+0x6c>)
    4706:	4a16      	ldr	r2, [pc, #88]	; (4760 <z_time_slice+0x70>)
    4708:	6898      	ldr	r0, [r3, #8]
    470a:	6815      	ldr	r5, [r2, #0]
    470c:	42a8      	cmp	r0, r5
    470e:	d106      	bne.n	471e <z_time_slice+0x2e>
			z_reset_time_slice();
    4710:	f7ff ff28 	bl	4564 <z_reset_time_slice>
	__asm__ volatile(
    4714:	f384 8811 	msr	BASEPRI, r4
    4718:	f3bf 8f6f 	isb	sy
}
    471c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    471e:	2500      	movs	r5, #0
    4720:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4722:	4a10      	ldr	r2, [pc, #64]	; (4764 <z_time_slice+0x74>)
    4724:	6812      	ldr	r2, [r2, #0]
    4726:	b1ba      	cbz	r2, 4758 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    4728:	89c2      	ldrh	r2, [r0, #14]
    472a:	2a7f      	cmp	r2, #127	; 0x7f
    472c:	d814      	bhi.n	4758 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    472e:	7b42      	ldrb	r2, [r0, #13]
    4730:	06d2      	lsls	r2, r2, #27
    4732:	d111      	bne.n	4758 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4734:	4a0c      	ldr	r2, [pc, #48]	; (4768 <z_time_slice+0x78>)
    4736:	f990 500e 	ldrsb.w	r5, [r0, #14]
    473a:	6812      	ldr	r2, [r2, #0]
    473c:	4295      	cmp	r5, r2
    473e:	db0b      	blt.n	4758 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    4740:	4a0a      	ldr	r2, [pc, #40]	; (476c <z_time_slice+0x7c>)
    4742:	4290      	cmp	r0, r2
    4744:	d008      	beq.n	4758 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    4746:	691a      	ldr	r2, [r3, #16]
    4748:	428a      	cmp	r2, r1
    474a:	dc02      	bgt.n	4752 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    474c:	f7ff ff96 	bl	467c <move_thread_to_end_of_prio_q>
    4750:	e7de      	b.n	4710 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    4752:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    4754:	611a      	str	r2, [r3, #16]
    4756:	e7dd      	b.n	4714 <z_time_slice+0x24>
    4758:	2200      	movs	r2, #0
    475a:	e7fb      	b.n	4754 <z_time_slice+0x64>
    475c:	20000638 	.word	0x20000638
    4760:	20000668 	.word	0x20000668
    4764:	20000670 	.word	0x20000670
    4768:	2000066c 	.word	0x2000066c
    476c:	20000290 	.word	0x20000290

00004770 <ready_thread>:
{
    4770:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4772:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4776:	7b43      	ldrb	r3, [r0, #13]
    4778:	2a00      	cmp	r2, #0
    477a:	db2a      	blt.n	47d2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    477c:	06da      	lsls	r2, r3, #27
    477e:	d128      	bne.n	47d2 <ready_thread+0x62>
    4780:	6982      	ldr	r2, [r0, #24]
    4782:	bb32      	cbnz	r2, 47d2 <ready_thread+0x62>
	return list->head == list;
    4784:	4a14      	ldr	r2, [pc, #80]	; (47d8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4786:	f063 037f 	orn	r3, r3, #127	; 0x7f
    478a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    478c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4790:	f102 0520 	add.w	r5, r2, #32
    4794:	42ab      	cmp	r3, r5
    4796:	d017      	beq.n	47c8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4798:	b1b3      	cbz	r3, 47c8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    479a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    479e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    47a2:	428e      	cmp	r6, r1
    47a4:	d00b      	beq.n	47be <ready_thread+0x4e>
		return b2 - b1;
    47a6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    47a8:	2900      	cmp	r1, #0
    47aa:	dd08      	ble.n	47be <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    47ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    47ae:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    47b2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    47b4:	6058      	str	r0, [r3, #4]
}
    47b6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    47b8:	2000      	movs	r0, #0
    47ba:	f7ff bf3f 	b.w	463c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    47be:	42a3      	cmp	r3, r4
    47c0:	d002      	beq.n	47c8 <ready_thread+0x58>
    47c2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    47c4:	2b00      	cmp	r3, #0
    47c6:	d1ea      	bne.n	479e <ready_thread+0x2e>
	node->prev = tail;
    47c8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    47cc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    47ce:	6250      	str	r0, [r2, #36]	; 0x24
}
    47d0:	e7f1      	b.n	47b6 <ready_thread+0x46>
}
    47d2:	bc70      	pop	{r4, r5, r6}
    47d4:	4770      	bx	lr
    47d6:	bf00      	nop
    47d8:	20000638 	.word	0x20000638

000047dc <z_sched_start>:
{
    47dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    47de:	f04f 0220 	mov.w	r2, #32
    47e2:	f3ef 8411 	mrs	r4, BASEPRI
    47e6:	f382 8812 	msr	BASEPRI_MAX, r2
    47ea:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    47ee:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    47f0:	0751      	lsls	r1, r2, #29
    47f2:	d404      	bmi.n	47fe <z_sched_start+0x22>
	__asm__ volatile(
    47f4:	f384 8811 	msr	BASEPRI, r4
    47f8:	f3bf 8f6f 	isb	sy
}
    47fc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    47fe:	f022 0204 	bic.w	r2, r2, #4
    4802:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4804:	f7ff ffb4 	bl	4770 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4808:	4621      	mov	r1, r4
    480a:	4802      	ldr	r0, [pc, #8]	; (4814 <z_sched_start+0x38>)
}
    480c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4810:	f7ff beee 	b.w	45f0 <z_reschedule>
    4814:	20000abd 	.word	0x20000abd

00004818 <unready_thread>:
{
    4818:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    481a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    481e:	7b43      	ldrb	r3, [r0, #13]
    4820:	2a00      	cmp	r2, #0
{
    4822:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4824:	da04      	bge.n	4830 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    482a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    482c:	f001 fc02 	bl	6034 <sys_dlist_remove>
	update_cache(thread == _current);
    4830:	4b04      	ldr	r3, [pc, #16]	; (4844 <unready_thread+0x2c>)
    4832:	6898      	ldr	r0, [r3, #8]
    4834:	1a43      	subs	r3, r0, r1
    4836:	4258      	negs	r0, r3
    4838:	4158      	adcs	r0, r3
}
    483a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    483e:	f7ff befd 	b.w	463c <update_cache>
    4842:	bf00      	nop
    4844:	20000638 	.word	0x20000638

00004848 <pend>:
{
    4848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    484c:	4606      	mov	r6, r0
    484e:	4615      	mov	r5, r2
    4850:	461c      	mov	r4, r3
	__asm__ volatile(
    4852:	f04f 0320 	mov.w	r3, #32
    4856:	f3ef 8711 	mrs	r7, BASEPRI
    485a:	f383 8812 	msr	BASEPRI_MAX, r3
    485e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4862:	f001 fc47 	bl	60f4 <add_to_waitq_locked>
	__asm__ volatile(
    4866:	f387 8811 	msr	BASEPRI, r7
    486a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    486e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    4872:	bf08      	it	eq
    4874:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    4878:	d008      	beq.n	488c <pend+0x44>
    487a:	462a      	mov	r2, r5
    487c:	4623      	mov	r3, r4
    487e:	f106 0018 	add.w	r0, r6, #24
    4882:	4903      	ldr	r1, [pc, #12]	; (4890 <pend+0x48>)
}
    4884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4888:	f000 b9e2 	b.w	4c50 <z_add_timeout>
    488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4890:	000060b1 	.word	0x000060b1

00004894 <z_pend_curr>:
{
    4894:	b510      	push	{r4, lr}
	pending_current = _current;
    4896:	4b07      	ldr	r3, [pc, #28]	; (48b4 <z_pend_curr+0x20>)
    4898:	6898      	ldr	r0, [r3, #8]
    489a:	4b07      	ldr	r3, [pc, #28]	; (48b8 <z_pend_curr+0x24>)
{
    489c:	460c      	mov	r4, r1
	pending_current = _current;
    489e:	6018      	str	r0, [r3, #0]
{
    48a0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    48a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    48a6:	f7ff ffcf 	bl	4848 <pend>
    48aa:	4620      	mov	r0, r4
}
    48ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48b0:	f7fc bd02 	b.w	12b8 <arch_swap>
    48b4:	20000638 	.word	0x20000638
    48b8:	20000668 	.word	0x20000668

000048bc <z_impl_k_thread_suspend>:
{
    48bc:	b570      	push	{r4, r5, r6, lr}
    48be:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    48c0:	3018      	adds	r0, #24
    48c2:	f001 fc76 	bl	61b2 <z_abort_timeout>
	__asm__ volatile(
    48c6:	f04f 0320 	mov.w	r3, #32
    48ca:	f3ef 8611 	mrs	r6, BASEPRI
    48ce:	f383 8812 	msr	BASEPRI_MAX, r3
    48d2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    48d6:	f994 200d 	ldrsb.w	r2, [r4, #13]
    48da:	7b63      	ldrb	r3, [r4, #13]
    48dc:	2a00      	cmp	r2, #0
    48de:	da05      	bge.n	48ec <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    48e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    48e4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    48e6:	4620      	mov	r0, r4
    48e8:	f001 fba4 	bl	6034 <sys_dlist_remove>
		update_cache(thread == _current);
    48ec:	4d0b      	ldr	r5, [pc, #44]	; (491c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    48ee:	7b63      	ldrb	r3, [r4, #13]
    48f0:	68a8      	ldr	r0, [r5, #8]
    48f2:	f043 0310 	orr.w	r3, r3, #16
    48f6:	7363      	strb	r3, [r4, #13]
    48f8:	1b03      	subs	r3, r0, r4
    48fa:	4258      	negs	r0, r3
    48fc:	4158      	adcs	r0, r3
    48fe:	f7ff fe9d 	bl	463c <update_cache>
	__asm__ volatile(
    4902:	f386 8811 	msr	BASEPRI, r6
    4906:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    490a:	68ab      	ldr	r3, [r5, #8]
    490c:	42a3      	cmp	r3, r4
    490e:	d103      	bne.n	4918 <z_impl_k_thread_suspend+0x5c>
}
    4910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4914:	f001 bbac 	b.w	6070 <z_reschedule_unlocked>
}
    4918:	bd70      	pop	{r4, r5, r6, pc}
    491a:	bf00      	nop
    491c:	20000638 	.word	0x20000638

00004920 <k_sched_unlock>:
{
    4920:	b510      	push	{r4, lr}
	__asm__ volatile(
    4922:	f04f 0320 	mov.w	r3, #32
    4926:	f3ef 8411 	mrs	r4, BASEPRI
    492a:	f383 8812 	msr	BASEPRI_MAX, r3
    492e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4932:	4b08      	ldr	r3, [pc, #32]	; (4954 <k_sched_unlock+0x34>)
    4934:	689a      	ldr	r2, [r3, #8]
    4936:	7bd3      	ldrb	r3, [r2, #15]
    4938:	3301      	adds	r3, #1
    493a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    493c:	2000      	movs	r0, #0
    493e:	f7ff fe7d 	bl	463c <update_cache>
	__asm__ volatile(
    4942:	f384 8811 	msr	BASEPRI, r4
    4946:	f3bf 8f6f 	isb	sy
}
    494a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    494e:	f001 bb8f 	b.w	6070 <z_reschedule_unlocked>
    4952:	bf00      	nop
    4954:	20000638 	.word	0x20000638

00004958 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4958:	4b04      	ldr	r3, [pc, #16]	; (496c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    495a:	2100      	movs	r1, #0
    495c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4960:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4964:	4608      	mov	r0, r1
    4966:	f7ff be13 	b.w	4590 <k_sched_time_slice_set>
    496a:	bf00      	nop
    496c:	20000638 	.word	0x20000638

00004970 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4972:	f04f 0320 	mov.w	r3, #32
    4976:	f3ef 8511 	mrs	r5, BASEPRI
    497a:	f383 8812 	msr	BASEPRI_MAX, r3
    497e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4982:	491a      	ldr	r1, [pc, #104]	; (49ec <z_impl_k_yield+0x7c>)
    4984:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4986:	7b43      	ldrb	r3, [r0, #13]
    4988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    498c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    498e:	f001 fb51 	bl	6034 <sys_dlist_remove>
	}
	queue_thread(_current);
    4992:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4994:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    4996:	4608      	mov	r0, r1
    4998:	f062 027f 	orn	r2, r2, #127	; 0x7f
    499c:	735a      	strb	r2, [r3, #13]
    499e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49a2:	4282      	cmp	r2, r0
    49a4:	d01c      	beq.n	49e0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49a6:	b1da      	cbz	r2, 49e0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    49a8:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    49aa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    49ae:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    49b2:	42a6      	cmp	r6, r4
    49b4:	d00f      	beq.n	49d6 <z_impl_k_yield+0x66>
		return b2 - b1;
    49b6:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    49b8:	2c00      	cmp	r4, #0
    49ba:	dd0c      	ble.n	49d6 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    49bc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    49be:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    49c2:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    49c4:	6053      	str	r3, [r2, #4]
	update_cache(1);
    49c6:	2001      	movs	r0, #1
    49c8:	f7ff fe38 	bl	463c <update_cache>
    49cc:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    49ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    49d2:	f7fc bc71 	b.w	12b8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    49d6:	42ba      	cmp	r2, r7
    49d8:	d002      	beq.n	49e0 <z_impl_k_yield+0x70>
    49da:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49dc:	2a00      	cmp	r2, #0
    49de:	d1e6      	bne.n	49ae <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    49e0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    49e2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    49e6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    49e8:	624b      	str	r3, [r1, #36]	; 0x24
}
    49ea:	e7ec      	b.n	49c6 <z_impl_k_yield+0x56>
    49ec:	20000638 	.word	0x20000638

000049f0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    49f0:	ea50 0301 	orrs.w	r3, r0, r1
{
    49f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49f8:	4605      	mov	r5, r0
    49fa:	460e      	mov	r6, r1
	if (ticks == 0) {
    49fc:	d103      	bne.n	4a06 <z_tick_sleep+0x16>
	z_impl_k_yield();
    49fe:	f7ff ffb7 	bl	4970 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    4a02:	2000      	movs	r0, #0
    4a04:	e033      	b.n	4a6e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    4a06:	f06f 0401 	mvn.w	r4, #1
    4a0a:	1a24      	subs	r4, r4, r0
    4a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a10:	eb63 0301 	sbc.w	r3, r3, r1
    4a14:	2c01      	cmp	r4, #1
    4a16:	f173 0300 	sbcs.w	r3, r3, #0
    4a1a:	da02      	bge.n	4a22 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4a1c:	f001 fc09 	bl	6232 <sys_clock_tick_get_32>
    4a20:	1944      	adds	r4, r0, r5
    4a22:	f04f 0320 	mov.w	r3, #32
    4a26:	f3ef 8811 	mrs	r8, BASEPRI
    4a2a:	f383 8812 	msr	BASEPRI_MAX, r3
    4a2e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4a32:	4f10      	ldr	r7, [pc, #64]	; (4a74 <z_tick_sleep+0x84>)
    4a34:	4b10      	ldr	r3, [pc, #64]	; (4a78 <z_tick_sleep+0x88>)
    4a36:	68b8      	ldr	r0, [r7, #8]
    4a38:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4a3a:	f7ff feed 	bl	4818 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4a3e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4a40:	490e      	ldr	r1, [pc, #56]	; (4a7c <z_tick_sleep+0x8c>)
    4a42:	462a      	mov	r2, r5
    4a44:	4633      	mov	r3, r6
    4a46:	3018      	adds	r0, #24
    4a48:	f000 f902 	bl	4c50 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4a4c:	68ba      	ldr	r2, [r7, #8]
    4a4e:	7b53      	ldrb	r3, [r2, #13]
    4a50:	f043 0310 	orr.w	r3, r3, #16
    4a54:	7353      	strb	r3, [r2, #13]
    4a56:	4640      	mov	r0, r8
    4a58:	f7fc fc2e 	bl	12b8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4a5c:	f001 fbe9 	bl	6232 <sys_clock_tick_get_32>
    4a60:	1a20      	subs	r0, r4, r0
    4a62:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4a66:	2801      	cmp	r0, #1
    4a68:	f173 0300 	sbcs.w	r3, r3, #0
    4a6c:	dbc9      	blt.n	4a02 <z_tick_sleep+0x12>
}
    4a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a72:	bf00      	nop
    4a74:	20000638 	.word	0x20000638
    4a78:	20000668 	.word	0x20000668
    4a7c:	000060b1 	.word	0x000060b1

00004a80 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4a80:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4a84:	bf08      	it	eq
    4a86:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4a8a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4a8c:	d106      	bne.n	4a9c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4a8e:	4b08      	ldr	r3, [pc, #32]	; (4ab0 <z_impl_k_sleep+0x30>)
    4a90:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4a92:	f7ff ff13 	bl	48bc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4a9a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4a9c:	f7ff ffa8 	bl	49f0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4aa4:	fb80 0303 	smull	r0, r3, r0, r3
    4aa8:	0bc0      	lsrs	r0, r0, #15
    4aaa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4aae:	e7f4      	b.n	4a9a <z_impl_k_sleep+0x1a>
    4ab0:	20000638 	.word	0x20000638

00004ab4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4ab4:	4b01      	ldr	r3, [pc, #4]	; (4abc <z_impl_z_current_get+0x8>)
    4ab6:	6898      	ldr	r0, [r3, #8]
    4ab8:	4770      	bx	lr
    4aba:	bf00      	nop
    4abc:	20000638 	.word	0x20000638

00004ac0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ac4:	4604      	mov	r4, r0
    4ac6:	f04f 0320 	mov.w	r3, #32
    4aca:	f3ef 8611 	mrs	r6, BASEPRI
    4ace:	f383 8812 	msr	BASEPRI_MAX, r3
    4ad2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4ad6:	7b43      	ldrb	r3, [r0, #13]
    4ad8:	071a      	lsls	r2, r3, #28
    4ada:	d505      	bpl.n	4ae8 <z_thread_abort+0x28>
	__asm__ volatile(
    4adc:	f386 8811 	msr	BASEPRI, r6
    4ae0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4ae8:	f023 0220 	bic.w	r2, r3, #32
    4aec:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4af0:	09d2      	lsrs	r2, r2, #7
    4af2:	d120      	bne.n	4b36 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4af4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4af6:	68a3      	ldr	r3, [r4, #8]
    4af8:	b113      	cbz	r3, 4b00 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    4afa:	4620      	mov	r0, r4
    4afc:	f001 faa2 	bl	6044 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4b00:	f104 0018 	add.w	r0, r4, #24
    4b04:	f001 fb55 	bl	61b2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4b08:	f104 0758 	add.w	r7, r4, #88	; 0x58
    4b0c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    4b10:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b12:	42bd      	cmp	r5, r7
    4b14:	d000      	beq.n	4b18 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4b16:	b9b5      	cbnz	r5, 4b46 <z_thread_abort+0x86>
		update_cache(1);
    4b18:	2001      	movs	r0, #1
    4b1a:	f7ff fd8f 	bl	463c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4b1e:	4b10      	ldr	r3, [pc, #64]	; (4b60 <z_thread_abort+0xa0>)
    4b20:	689b      	ldr	r3, [r3, #8]
    4b22:	42a3      	cmp	r3, r4
    4b24:	d1da      	bne.n	4adc <z_thread_abort+0x1c>
    4b26:	f3ef 8305 	mrs	r3, IPSR
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	d1d6      	bne.n	4adc <z_thread_abort+0x1c>
    4b2e:	4630      	mov	r0, r6
    4b30:	f7fc fbc2 	bl	12b8 <arch_swap>
	return ret;
    4b34:	e7d2      	b.n	4adc <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b36:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4b3a:	f043 0308 	orr.w	r3, r3, #8
    4b3e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4b40:	f001 fa78 	bl	6034 <sys_dlist_remove>
}
    4b44:	e7d7      	b.n	4af6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    4b46:	4628      	mov	r0, r5
    4b48:	f001 fa7c 	bl	6044 <unpend_thread_no_timeout>
    4b4c:	f105 0018 	add.w	r0, r5, #24
    4b50:	f001 fb2f 	bl	61b2 <z_abort_timeout>
    4b54:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    4b58:	4628      	mov	r0, r5
    4b5a:	f7ff fe09 	bl	4770 <ready_thread>
    4b5e:	e7d7      	b.n	4b10 <z_thread_abort+0x50>
    4b60:	20000638 	.word	0x20000638

00004b64 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    4b64:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4b66:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    4b6a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4b6c:	e9cd 6700 	strd	r6, r7, [sp]
    4b70:	f7ff fe90 	bl	4894 <z_pend_curr>

	if (data != NULL) {
    4b74:	b11c      	cbz	r4, 4b7e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    4b76:	4b03      	ldr	r3, [pc, #12]	; (4b84 <z_sched_wait+0x20>)
    4b78:	689b      	ldr	r3, [r3, #8]
    4b7a:	695b      	ldr	r3, [r3, #20]
    4b7c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    4b7e:	b002      	add	sp, #8
    4b80:	bdd0      	pop	{r4, r6, r7, pc}
    4b82:	bf00      	nop
    4b84:	20000638 	.word	0x20000638

00004b88 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4b88:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    4b8a:	4806      	ldr	r0, [pc, #24]	; (4ba4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    4b8c:	4a06      	ldr	r2, [pc, #24]	; (4ba8 <z_data_copy+0x20>)
    4b8e:	4907      	ldr	r1, [pc, #28]	; (4bac <z_data_copy+0x24>)
    4b90:	1a12      	subs	r2, r2, r0
    4b92:	f000 fb3c 	bl	520e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4b9a:	4a05      	ldr	r2, [pc, #20]	; (4bb0 <z_data_copy+0x28>)
    4b9c:	4905      	ldr	r1, [pc, #20]	; (4bb4 <z_data_copy+0x2c>)
    4b9e:	4806      	ldr	r0, [pc, #24]	; (4bb8 <z_data_copy+0x30>)
    4ba0:	f000 bb35 	b.w	520e <memcpy>
    4ba4:	20000000 	.word	0x20000000
    4ba8:	20000168 	.word	0x20000168
    4bac:	00006a44 	.word	0x00006a44
    4bb0:	00000000 	.word	0x00000000
    4bb4:	00006a44 	.word	0x00006a44
    4bb8:	20000000 	.word	0x20000000

00004bbc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4bbc:	4b03      	ldr	r3, [pc, #12]	; (4bcc <elapsed+0x10>)
    4bbe:	681b      	ldr	r3, [r3, #0]
    4bc0:	b90b      	cbnz	r3, 4bc6 <elapsed+0xa>
    4bc2:	f7fe b807 	b.w	2bd4 <sys_clock_elapsed>
}
    4bc6:	2000      	movs	r0, #0
    4bc8:	4770      	bx	lr
    4bca:	bf00      	nop
    4bcc:	20000674 	.word	0x20000674

00004bd0 <next_timeout>:
	return list->head == list;
    4bd0:	4b10      	ldr	r3, [pc, #64]	; (4c14 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    4bd2:	b510      	push	{r4, lr}
    4bd4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bd6:	429c      	cmp	r4, r3
    4bd8:	bf08      	it	eq
    4bda:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4bdc:	f7ff ffee 	bl	4bbc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4be0:	b1a4      	cbz	r4, 4c0c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4be2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    4be6:	1a1b      	subs	r3, r3, r0
    4be8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    4bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4bf0:	f170 0200 	sbcs.w	r2, r0, #0
    4bf4:	da0a      	bge.n	4c0c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4bf6:	2800      	cmp	r0, #0
    4bf8:	bfac      	ite	ge
    4bfa:	4618      	movge	r0, r3
    4bfc:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4bfe:	4b06      	ldr	r3, [pc, #24]	; (4c18 <next_timeout+0x48>)
    4c00:	691b      	ldr	r3, [r3, #16]
    4c02:	b113      	cbz	r3, 4c0a <next_timeout+0x3a>
    4c04:	4298      	cmp	r0, r3
    4c06:	bfa8      	it	ge
    4c08:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4c0a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    4c0c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4c10:	e7f5      	b.n	4bfe <next_timeout+0x2e>
    4c12:	bf00      	nop
    4c14:	20000128 	.word	0x20000128
    4c18:	20000638 	.word	0x20000638

00004c1c <remove_timeout>:
{
    4c1c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    4c1e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4c20:	b168      	cbz	r0, 4c3e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4c22:	4a0a      	ldr	r2, [pc, #40]	; (4c4c <remove_timeout+0x30>)
    4c24:	6852      	ldr	r2, [r2, #4]
    4c26:	4290      	cmp	r0, r2
    4c28:	d009      	beq.n	4c3e <remove_timeout+0x22>
	if (next(t) != NULL) {
    4c2a:	b143      	cbz	r3, 4c3e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4c2c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4c30:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4c34:	1912      	adds	r2, r2, r4
    4c36:	eb41 0105 	adc.w	r1, r1, r5
    4c3a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    4c3e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    4c40:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4c42:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4c44:	2300      	movs	r3, #0
	node->prev = NULL;
    4c46:	e9c0 3300 	strd	r3, r3, [r0]
}
    4c4a:	bd30      	pop	{r4, r5, pc}
    4c4c:	20000128 	.word	0x20000128

00004c50 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4c54:	bf08      	it	eq
    4c56:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    4c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c5c:	4604      	mov	r4, r0
    4c5e:	461f      	mov	r7, r3
    4c60:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c62:	d067      	beq.n	4d34 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4c64:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    4c66:	f04f 0320 	mov.w	r3, #32
    4c6a:	f3ef 8611 	mrs	r6, BASEPRI
    4c6e:	f383 8812 	msr	BASEPRI_MAX, r3
    4c72:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4c76:	f06f 0201 	mvn.w	r2, #1
    4c7a:	1b53      	subs	r3, r2, r5
    4c7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4c80:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4c84:	2b00      	cmp	r3, #0
    4c86:	db1b      	blt.n	4cc0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4c88:	4b2b      	ldr	r3, [pc, #172]	; (4d38 <z_add_timeout+0xe8>)
    4c8a:	e9d3 1300 	ldrd	r1, r3, [r3]
    4c8e:	1a52      	subs	r2, r2, r1
    4c90:	eb6c 0303 	sbc.w	r3, ip, r3
    4c94:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    4c96:	eb63 0307 	sbc.w	r3, r3, r7
    4c9a:	2d01      	cmp	r5, #1
    4c9c:	f173 0200 	sbcs.w	r2, r3, #0
    4ca0:	bfbc      	itt	lt
    4ca2:	2501      	movlt	r5, #1
    4ca4:	2300      	movlt	r3, #0
    4ca6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    4caa:	4824      	ldr	r0, [pc, #144]	; (4d3c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    4cac:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4cb0:	4283      	cmp	r3, r0
    4cb2:	d118      	bne.n	4ce6 <z_add_timeout+0x96>
	node->prev = tail;
    4cb4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    4cb8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    4cbc:	6044      	str	r4, [r0, #4]
}
    4cbe:	e026      	b.n	4d0e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4cc0:	f7ff ff7c 	bl	4bbc <elapsed>
    4cc4:	3501      	adds	r5, #1
    4cc6:	f147 0700 	adc.w	r7, r7, #0
    4cca:	182d      	adds	r5, r5, r0
    4ccc:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    4cd0:	e9c4 5704 	strd	r5, r7, [r4, #16]
    4cd4:	e7e9      	b.n	4caa <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    4cd6:	1a52      	subs	r2, r2, r1
    4cd8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    4cdc:	459c      	cmp	ip, r3
    4cde:	e9c4 2504 	strd	r2, r5, [r4, #16]
    4ce2:	d0e7      	beq.n	4cb4 <z_add_timeout+0x64>
    4ce4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d0e4      	beq.n	4cb4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    4cea:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    4cee:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    4cf2:	428a      	cmp	r2, r1
    4cf4:	eb75 0e07 	sbcs.w	lr, r5, r7
    4cf8:	daed      	bge.n	4cd6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    4cfa:	1a8a      	subs	r2, r1, r2
    4cfc:	eb67 0505 	sbc.w	r5, r7, r5
    4d00:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    4d04:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4d06:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4d0a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4d0c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    4d0e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d10:	4283      	cmp	r3, r0
    4d12:	d00b      	beq.n	4d2c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4d14:	429c      	cmp	r4, r3
    4d16:	d109      	bne.n	4d2c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4d18:	f7ff ff5a 	bl	4bd0 <next_timeout>

			if (next_time == 0 ||
    4d1c:	b118      	cbz	r0, 4d26 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    4d1e:	4b08      	ldr	r3, [pc, #32]	; (4d40 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    4d20:	691b      	ldr	r3, [r3, #16]
    4d22:	4283      	cmp	r3, r0
    4d24:	d002      	beq.n	4d2c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    4d26:	2100      	movs	r1, #0
    4d28:	f7fd ff22 	bl	2b70 <sys_clock_set_timeout>
	__asm__ volatile(
    4d2c:	f386 8811 	msr	BASEPRI, r6
    4d30:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d36:	bf00      	nop
    4d38:	20000390 	.word	0x20000390
    4d3c:	20000128 	.word	0x20000128
    4d40:	20000638 	.word	0x20000638

00004d44 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d48:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4d4a:	f7ff fcd1 	bl	46f0 <z_time_slice>
	__asm__ volatile(
    4d4e:	f04f 0320 	mov.w	r3, #32
    4d52:	f3ef 8411 	mrs	r4, BASEPRI
    4d56:	f383 8812 	msr	BASEPRI_MAX, r3
    4d5a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4d5e:	4e24      	ldr	r6, [pc, #144]	; (4df0 <sys_clock_announce+0xac>)
	return list->head == list;
    4d60:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4df4 <sys_clock_announce+0xb0>
    4d64:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4d66:	4d24      	ldr	r5, [pc, #144]	; (4df8 <sys_clock_announce+0xb4>)
    4d68:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4d6c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d6e:	4540      	cmp	r0, r8
		curr_tick += dt;
    4d70:	e9d5 1e00 	ldrd	r1, lr, [r5]
    4d74:	ea4f 77e2 	mov.w	r7, r2, asr #31
    4d78:	d00b      	beq.n	4d92 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4d7a:	b150      	cbz	r0, 4d92 <sys_clock_announce+0x4e>
    4d7c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    4d80:	429a      	cmp	r2, r3
    4d82:	eb77 090c 	sbcs.w	r9, r7, ip
    4d86:	da16      	bge.n	4db6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4d88:	1a9b      	subs	r3, r3, r2
    4d8a:	eb6c 0c07 	sbc.w	ip, ip, r7
    4d8e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    4d92:	1852      	adds	r2, r2, r1
    4d94:	eb4e 0707 	adc.w	r7, lr, r7
    4d98:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    4d9c:	2500      	movs	r5, #0
    4d9e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4da0:	f7ff ff16 	bl	4bd0 <next_timeout>
    4da4:	4629      	mov	r1, r5
    4da6:	f7fd fee3 	bl	2b70 <sys_clock_set_timeout>
	__asm__ volatile(
    4daa:	f384 8811 	msr	BASEPRI, r4
    4dae:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4db6:	1859      	adds	r1, r3, r1
    4db8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    4dbc:	1ad3      	subs	r3, r2, r3
    4dbe:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    4dc0:	2200      	movs	r2, #0
    4dc2:	2300      	movs	r3, #0
    4dc4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    4dc8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    4dcc:	f7ff ff26 	bl	4c1c <remove_timeout>
    4dd0:	f384 8811 	msr	BASEPRI, r4
    4dd4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4dd8:	6883      	ldr	r3, [r0, #8]
    4dda:	4798      	blx	r3
	__asm__ volatile(
    4ddc:	f04f 0320 	mov.w	r3, #32
    4de0:	f3ef 8411 	mrs	r4, BASEPRI
    4de4:	f383 8812 	msr	BASEPRI_MAX, r3
    4de8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4dec:	e7bc      	b.n	4d68 <sys_clock_announce+0x24>
    4dee:	bf00      	nop
    4df0:	20000674 	.word	0x20000674
    4df4:	20000128 	.word	0x20000128
    4df8:	20000390 	.word	0x20000390

00004dfc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4dfc:	b510      	push	{r4, lr}
    4dfe:	f04f 0320 	mov.w	r3, #32
    4e02:	f3ef 8411 	mrs	r4, BASEPRI
    4e06:	f383 8812 	msr	BASEPRI_MAX, r3
    4e0a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    4e0e:	f7fd fee1 	bl	2bd4 <sys_clock_elapsed>
    4e12:	4a05      	ldr	r2, [pc, #20]	; (4e28 <sys_clock_tick_get+0x2c>)
    4e14:	e9d2 3100 	ldrd	r3, r1, [r2]
    4e18:	18c0      	adds	r0, r0, r3
    4e1a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    4e1e:	f384 8811 	msr	BASEPRI, r4
    4e22:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4e26:	bd10      	pop	{r4, pc}
    4e28:	20000390 	.word	0x20000390

00004e2c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4e2c:	4a02      	ldr	r2, [pc, #8]	; (4e38 <boot_banner+0xc>)
    4e2e:	4903      	ldr	r1, [pc, #12]	; (4e3c <boot_banner+0x10>)
    4e30:	4803      	ldr	r0, [pc, #12]	; (4e40 <boot_banner+0x14>)
    4e32:	f000 b845 	b.w	4ec0 <printk>
    4e36:	bf00      	nop
    4e38:	0000696c 	.word	0x0000696c
    4e3c:	00006a03 	.word	0x00006a03
    4e40:	00006a11 	.word	0x00006a11

00004e44 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    4e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    4e46:	4b09      	ldr	r3, [pc, #36]	; (4e6c <k_sys_work_q_init+0x28>)
    4e48:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    4e4a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    4e4c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    4e4e:	9300      	str	r3, [sp, #0]
    4e50:	4907      	ldr	r1, [pc, #28]	; (4e70 <k_sys_work_q_init+0x2c>)
    4e52:	4808      	ldr	r0, [pc, #32]	; (4e74 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    4e54:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    4e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4e60:	f7ff fb18 	bl	4494 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    4e64:	4620      	mov	r0, r4
    4e66:	b004      	add	sp, #16
    4e68:	bd10      	pop	{r4, pc}
    4e6a:	bf00      	nop
    4e6c:	00006a38 	.word	0x00006a38
    4e70:	20001860 	.word	0x20001860
    4e74:	20000398 	.word	0x20000398

00004e78 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    4e78:	4770      	bx	lr

00004e7a <sensor_channel_get.isra.0>:
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    4e7a:	6883      	ldr	r3, [r0, #8]
    4e7c:	691b      	ldr	r3, [r3, #16]
    4e7e:	4718      	bx	r3

00004e80 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4e80:	4603      	mov	r3, r0
    4e82:	b158      	cbz	r0, 4e9c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4e84:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4e86:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4e8a:	2a01      	cmp	r2, #1
    4e8c:	d003      	beq.n	4e96 <sys_notify_validate+0x16>
    4e8e:	2a03      	cmp	r2, #3
    4e90:	d104      	bne.n	4e9c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4e92:	6802      	ldr	r2, [r0, #0]
    4e94:	b112      	cbz	r2, 4e9c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4e96:	2000      	movs	r0, #0
    4e98:	6098      	str	r0, [r3, #8]
    4e9a:	4770      	bx	lr
		return -EINVAL;
    4e9c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4ea0:	4770      	bx	lr

00004ea2 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4ea2:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4ea4:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    4ea6:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    4eaa:	2a03      	cmp	r2, #3
    4eac:	f04f 0200 	mov.w	r2, #0
{
    4eb0:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4eb2:	bf0c      	ite	eq
    4eb4:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    4eb6:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4eb8:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4eba:	4770      	bx	lr

00004ebc <arch_printk_char_out>:
}
    4ebc:	2000      	movs	r0, #0
    4ebe:	4770      	bx	lr

00004ec0 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4ec0:	b40f      	push	{r0, r1, r2, r3}
    4ec2:	b507      	push	{r0, r1, r2, lr}
    4ec4:	a904      	add	r1, sp, #16
    4ec6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4eca:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4ecc:	f7fb fb52 	bl	574 <vprintk>

	va_end(ap);
}
    4ed0:	b003      	add	sp, #12
    4ed2:	f85d eb04 	ldr.w	lr, [sp], #4
    4ed6:	b004      	add	sp, #16
    4ed8:	4770      	bx	lr

00004eda <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4eda:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4edc:	f013 0307 	ands.w	r3, r3, #7
    4ee0:	d105      	bne.n	4eee <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4ee2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	bf0c      	ite	eq
    4ee8:	2000      	moveq	r0, #0
    4eea:	2003      	movne	r0, #3
    4eec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4eee:	2b02      	cmp	r3, #2
    4ef0:	d105      	bne.n	4efe <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4ef2:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	bf14      	ite	ne
    4ef8:	2000      	movne	r0, #0
    4efa:	2004      	moveq	r0, #4
    4efc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    4efe:	2b01      	cmp	r3, #1
    4f00:	d105      	bne.n	4f0e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4f02:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4f04:	2b00      	cmp	r3, #0
    4f06:	bf0c      	ite	eq
    4f08:	2000      	moveq	r0, #0
    4f0a:	2005      	movne	r0, #5
    4f0c:	4770      	bx	lr
	int evt = EVT_NOP;
    4f0e:	2000      	movs	r0, #0
}
    4f10:	4770      	bx	lr

00004f12 <notify_one>:
{
    4f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f16:	460d      	mov	r5, r1
    4f18:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4f1a:	4619      	mov	r1, r3
    4f1c:	1d28      	adds	r0, r5, #4
{
    4f1e:	4690      	mov	r8, r2
    4f20:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4f22:	f7ff ffbe 	bl	4ea2 <sys_notify_finalize>
	if (cb) {
    4f26:	4604      	mov	r4, r0
    4f28:	b138      	cbz	r0, 4f3a <notify_one+0x28>
		cb(mgr, cli, state, res);
    4f2a:	4633      	mov	r3, r6
    4f2c:	4642      	mov	r2, r8
    4f2e:	4629      	mov	r1, r5
    4f30:	4638      	mov	r0, r7
    4f32:	46a4      	mov	ip, r4
}
    4f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4f38:	4760      	bx	ip
}
    4f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004f3e <transition_complete>:
{
    4f3e:	b410      	push	{r4}
	__asm__ volatile(
    4f40:	f04f 0420 	mov.w	r4, #32
    4f44:	f3ef 8211 	mrs	r2, BASEPRI
    4f48:	f384 8812 	msr	BASEPRI_MAX, r4
    4f4c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4f50:	6141      	str	r1, [r0, #20]
}
    4f52:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4f54:	2101      	movs	r1, #1
    4f56:	f7fb bb1b 	b.w	590 <process_event>

00004f5a <validate_args>:
{
    4f5a:	b510      	push	{r4, lr}
    4f5c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4f5e:	b140      	cbz	r0, 4f72 <validate_args+0x18>
    4f60:	b139      	cbz	r1, 4f72 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4f62:	1d08      	adds	r0, r1, #4
    4f64:	f7ff ff8c 	bl	4e80 <sys_notify_validate>
	if ((rv == 0)
    4f68:	b928      	cbnz	r0, 4f76 <validate_args+0x1c>
	    && ((cli->notify.flags
    4f6a:	68a3      	ldr	r3, [r4, #8]
    4f6c:	f033 0303 	bics.w	r3, r3, #3
    4f70:	d001      	beq.n	4f76 <validate_args+0x1c>
		rv = -EINVAL;
    4f72:	f06f 0015 	mvn.w	r0, #21
}
    4f76:	bd10      	pop	{r4, pc}

00004f78 <onoff_manager_init>:
{
    4f78:	b538      	push	{r3, r4, r5, lr}
    4f7a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4f7c:	4605      	mov	r5, r0
    4f7e:	b158      	cbz	r0, 4f98 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4f80:	b151      	cbz	r1, 4f98 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4f82:	680b      	ldr	r3, [r1, #0]
    4f84:	b143      	cbz	r3, 4f98 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4f86:	684b      	ldr	r3, [r1, #4]
    4f88:	b133      	cbz	r3, 4f98 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4f8a:	221c      	movs	r2, #28
    4f8c:	2100      	movs	r1, #0
    4f8e:	f000 f949 	bl	5224 <memset>
    4f92:	612c      	str	r4, [r5, #16]
	return 0;
    4f94:	2000      	movs	r0, #0
}
    4f96:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4f98:	f06f 0015 	mvn.w	r0, #21
    4f9c:	e7fb      	b.n	4f96 <onoff_manager_init+0x1e>

00004f9e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4f9e:	b570      	push	{r4, r5, r6, lr}
    4fa0:	4604      	mov	r4, r0
    4fa2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4fa4:	f7ff ffd9 	bl	4f5a <validate_args>

	if (rv < 0) {
    4fa8:	1e05      	subs	r5, r0, #0
    4faa:	db31      	blt.n	5010 <onoff_request+0x72>
    4fac:	f04f 0320 	mov.w	r3, #32
    4fb0:	f3ef 8111 	mrs	r1, BASEPRI
    4fb4:	f383 8812 	msr	BASEPRI_MAX, r3
    4fb8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4fbc:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4fbe:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    4fc0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    4fc4:	42ab      	cmp	r3, r5
    4fc6:	f000 0207 	and.w	r2, r0, #7
    4fca:	d02e      	beq.n	502a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    4fcc:	2a02      	cmp	r2, #2
    4fce:	d10e      	bne.n	4fee <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    4fd0:	3301      	adds	r3, #1
    4fd2:	8363      	strh	r3, [r4, #26]
	rv = state;
    4fd4:	4615      	mov	r5, r2
		notify = true;
    4fd6:	2301      	movs	r3, #1
	__asm__ volatile(
    4fd8:	f381 8811 	msr	BASEPRI, r1
    4fdc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4fe0:	b1b3      	cbz	r3, 5010 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    4fe2:	2300      	movs	r3, #0
    4fe4:	4631      	mov	r1, r6
    4fe6:	4620      	mov	r0, r4
    4fe8:	f7ff ff93 	bl	4f12 <notify_one>
    4fec:	e010      	b.n	5010 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    4fee:	0783      	lsls	r3, r0, #30
    4ff0:	d001      	beq.n	4ff6 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    4ff2:	2a06      	cmp	r2, #6
    4ff4:	d10e      	bne.n	5014 <onoff_request+0x76>
	parent->next = child;
    4ff6:	2300      	movs	r3, #0
    4ff8:	6033      	str	r3, [r6, #0]
	return list->tail;
    4ffa:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    4ffc:	b993      	cbnz	r3, 5024 <onoff_request+0x86>
	list->head = node;
    4ffe:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5002:	4615      	mov	r5, r2
    5004:	b962      	cbnz	r2, 5020 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    5006:	460a      	mov	r2, r1
    5008:	4620      	mov	r0, r4
    500a:	2102      	movs	r1, #2
    500c:	f7fb fac0 	bl	590 <process_event>
		}
	}

	return rv;
}
    5010:	4628      	mov	r0, r5
    5012:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    5014:	2a05      	cmp	r2, #5
    5016:	bf0c      	ite	eq
    5018:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    501c:	f06f 0504 	mvnne.w	r5, #4
    5020:	2300      	movs	r3, #0
    5022:	e7d9      	b.n	4fd8 <onoff_request+0x3a>
	parent->next = child;
    5024:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5026:	6066      	str	r6, [r4, #4]
}
    5028:	e7eb      	b.n	5002 <onoff_request+0x64>
		rv = -EAGAIN;
    502a:	f06f 050a 	mvn.w	r5, #10
    502e:	e7f7      	b.n	5020 <onoff_request+0x82>

00005030 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    5030:	b510      	push	{r4, lr}
	__asm__ volatile(
    5032:	f04f 0320 	mov.w	r3, #32
    5036:	f3ef 8211 	mrs	r2, BASEPRI
    503a:	f383 8812 	msr	BASEPRI_MAX, r3
    503e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5042:	8b04      	ldrh	r4, [r0, #24]
    5044:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    5048:	2c02      	cmp	r4, #2
    504a:	d00a      	beq.n	5062 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    504c:	2c01      	cmp	r4, #1
    504e:	bf0c      	ite	eq
    5050:	f06f 0004 	mvneq.w	r0, #4
    5054:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    5058:	f382 8811 	msr	BASEPRI, r2
    505c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    5060:	e008      	b.n	5074 <onoff_release+0x44>
	mgr->refs -= 1U;
    5062:	8b43      	ldrh	r3, [r0, #26]
    5064:	3b01      	subs	r3, #1
    5066:	b29b      	uxth	r3, r3
    5068:	8343      	strh	r3, [r0, #26]
	if (stop) {
    506a:	b923      	cbnz	r3, 5076 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    506c:	4621      	mov	r1, r4
    506e:	f7fb fa8f 	bl	590 <process_event>
	int rv = state;
    5072:	4620      	mov	r0, r4
}
    5074:	bd10      	pop	{r4, pc}
	int rv = state;
    5076:	4620      	mov	r0, r4
    5078:	e7ee      	b.n	5058 <onoff_release+0x28>

0000507a <onoff_sync_lock>:
	__asm__ volatile(
    507a:	f04f 0220 	mov.w	r2, #32
    507e:	f3ef 8311 	mrs	r3, BASEPRI
    5082:	f382 8812 	msr	BASEPRI_MAX, r2
    5086:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
    508a:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
    508c:	600b      	str	r3, [r1, #0]
}
    508e:	4770      	bx	lr

00005090 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    5090:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    5092:	6804      	ldr	r4, [r0, #0]
    5094:	2c00      	cmp	r4, #0
		srv->count = 0;
    5096:	bfbc      	itt	lt
    5098:	2400      	movlt	r4, #0
    509a:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
    509c:	2b00      	cmp	r3, #0
{
    509e:	460d      	mov	r5, r1
    50a0:	4611      	mov	r1, r2
    50a2:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
    50a6:	da0c      	bge.n	50c2 <onoff_sync_finalize+0x32>
		srv->count = res;
    50a8:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
    50aa:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
    50ac:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
    50ae:	f385 8811 	msr	BASEPRI, r5
    50b2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    50b6:	b111      	cbz	r1, 50be <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    50b8:	2000      	movs	r0, #0
    50ba:	f7ff ff2a 	bl	4f12 <notify_one>
	}

	return rv;
}
    50be:	4620      	mov	r0, r4
    50c0:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
    50c2:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
    50c4:	b11a      	cbz	r2, 50ce <onoff_sync_finalize+0x3e>
		srv->count += 1;
    50c6:	3401      	adds	r4, #1
		srv->count -= 1;
    50c8:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
    50ca:	2202      	movs	r2, #2
    50cc:	e7ee      	b.n	50ac <onoff_sync_finalize+0x1c>
		srv->count -= 1;
    50ce:	3c01      	subs	r4, #1
    50d0:	e7fa      	b.n	50c8 <onoff_sync_finalize+0x38>

000050d2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    50d2:	4604      	mov	r4, r0
    50d4:	b508      	push	{r3, lr}
    50d6:	4608      	mov	r0, r1
    50d8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    50da:	461a      	mov	r2, r3
    50dc:	47a0      	blx	r4
	return z_impl_z_current_get();
    50de:	f7ff fce9 	bl	4ab4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    50e2:	f7fc fad1 	bl	1688 <z_impl_k_thread_abort>

000050e6 <encode_uint>:
{
    50e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50ea:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    50ec:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    50ee:	2b6f      	cmp	r3, #111	; 0x6f
{
    50f0:	4680      	mov	r8, r0
    50f2:	460f      	mov	r7, r1
    50f4:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    50f6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    50fa:	d029      	beq.n	5150 <encode_uint+0x6a>
    50fc:	d824      	bhi.n	5148 <encode_uint+0x62>
		return 16;
    50fe:	2b58      	cmp	r3, #88	; 0x58
    5100:	bf14      	ite	ne
    5102:	260a      	movne	r6, #10
    5104:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    5106:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    510a:	4632      	mov	r2, r6
    510c:	2300      	movs	r3, #0
    510e:	4640      	mov	r0, r8
    5110:	4639      	mov	r1, r7
    5112:	f7fa ffe3 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5116:	2a09      	cmp	r2, #9
    5118:	b2d4      	uxtb	r4, r2
    511a:	d81e      	bhi.n	515a <encode_uint+0x74>
    511c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    511e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5120:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    5122:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5126:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    512a:	d301      	bcc.n	5130 <encode_uint+0x4a>
    512c:	45d1      	cmp	r9, sl
    512e:	d811      	bhi.n	5154 <encode_uint+0x6e>
	if (conv->flag_hash) {
    5130:	782b      	ldrb	r3, [r5, #0]
    5132:	069b      	lsls	r3, r3, #26
    5134:	d505      	bpl.n	5142 <encode_uint+0x5c>
		if (radix == 8) {
    5136:	2e08      	cmp	r6, #8
    5138:	d115      	bne.n	5166 <encode_uint+0x80>
			conv->altform_0 = true;
    513a:	78ab      	ldrb	r3, [r5, #2]
    513c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5140:	70ab      	strb	r3, [r5, #2]
}
    5142:	4648      	mov	r0, r9
    5144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    5148:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    514c:	2b70      	cmp	r3, #112	; 0x70
    514e:	e7d7      	b.n	5100 <encode_uint+0x1a>
	switch (specifier) {
    5150:	2608      	movs	r6, #8
    5152:	e7d8      	b.n	5106 <encode_uint+0x20>
		value /= radix;
    5154:	4680      	mov	r8, r0
    5156:	460f      	mov	r7, r1
    5158:	e7d7      	b.n	510a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    515a:	f1bb 0f19 	cmp.w	fp, #25
    515e:	bf94      	ite	ls
    5160:	3437      	addls	r4, #55	; 0x37
    5162:	3457      	addhi	r4, #87	; 0x57
    5164:	e7db      	b.n	511e <encode_uint+0x38>
		} else if (radix == 16) {
    5166:	2e10      	cmp	r6, #16
    5168:	d1eb      	bne.n	5142 <encode_uint+0x5c>
			conv->altform_0c = true;
    516a:	78ab      	ldrb	r3, [r5, #2]
    516c:	f043 0310 	orr.w	r3, r3, #16
    5170:	e7e6      	b.n	5140 <encode_uint+0x5a>

00005172 <outs>:
{
    5172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5176:	4607      	mov	r7, r0
    5178:	4688      	mov	r8, r1
    517a:	4615      	mov	r5, r2
    517c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    517e:	4614      	mov	r4, r2
    5180:	42b4      	cmp	r4, r6
    5182:	eba4 0005 	sub.w	r0, r4, r5
    5186:	d302      	bcc.n	518e <outs+0x1c>
    5188:	b93e      	cbnz	r6, 519a <outs+0x28>
    518a:	7823      	ldrb	r3, [r4, #0]
    518c:	b12b      	cbz	r3, 519a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    518e:	f814 0b01 	ldrb.w	r0, [r4], #1
    5192:	4641      	mov	r1, r8
    5194:	47b8      	blx	r7
		if (rc < 0) {
    5196:	2800      	cmp	r0, #0
    5198:	daf2      	bge.n	5180 <outs+0xe>
}
    519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000519e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    519e:	4770      	bx	lr

000051a0 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    51a0:	f000 bede 	b.w	5f60 <z_fatal_error>

000051a4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    51a4:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    51a6:	6800      	ldr	r0, [r0, #0]
    51a8:	f000 beda 	b.w	5f60 <z_fatal_error>

000051ac <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    51ac:	2100      	movs	r1, #0
    51ae:	2001      	movs	r0, #1
    51b0:	f7ff bff6 	b.w	51a0 <z_arm_fatal_error>

000051b4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    51b4:	b508      	push	{r3, lr}
	handler();
    51b6:	f7fc f857 	bl	1268 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    51ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    51be:	f7fc b937 	b.w	1430 <z_arm_exc_exit>

000051c2 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    51c2:	3901      	subs	r1, #1
    51c4:	4603      	mov	r3, r0
    51c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    51ca:	b90a      	cbnz	r2, 51d0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    51cc:	701a      	strb	r2, [r3, #0]

	return dest;
}
    51ce:	4770      	bx	lr
		*d = *s;
    51d0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    51d4:	e7f7      	b.n	51c6 <strcpy+0x4>

000051d6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    51d6:	4603      	mov	r3, r0
	size_t n = 0;
    51d8:	2000      	movs	r0, #0

	while (*s != '\0') {
    51da:	5c1a      	ldrb	r2, [r3, r0]
    51dc:	b902      	cbnz	r2, 51e0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    51de:	4770      	bx	lr
		n++;
    51e0:	3001      	adds	r0, #1
    51e2:	e7fa      	b.n	51da <strlen+0x4>

000051e4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    51e4:	4603      	mov	r3, r0
	size_t n = 0;
    51e6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    51e8:	5c1a      	ldrb	r2, [r3, r0]
    51ea:	b10a      	cbz	r2, 51f0 <strnlen+0xc>
    51ec:	4288      	cmp	r0, r1
    51ee:	d100      	bne.n	51f2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    51f0:	4770      	bx	lr
		n++;
    51f2:	3001      	adds	r0, #1
    51f4:	e7f8      	b.n	51e8 <strnlen+0x4>

000051f6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    51f6:	1e43      	subs	r3, r0, #1
    51f8:	3901      	subs	r1, #1
    51fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    51fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    5202:	4282      	cmp	r2, r0
    5204:	d101      	bne.n	520a <strcmp+0x14>
    5206:	2a00      	cmp	r2, #0
    5208:	d1f7      	bne.n	51fa <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    520a:	1a10      	subs	r0, r2, r0
    520c:	4770      	bx	lr

0000520e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    520e:	b510      	push	{r4, lr}
    5210:	1e43      	subs	r3, r0, #1
    5212:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5214:	4291      	cmp	r1, r2
    5216:	d100      	bne.n	521a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5218:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    521a:	f811 4b01 	ldrb.w	r4, [r1], #1
    521e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5222:	e7f7      	b.n	5214 <memcpy+0x6>

00005224 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5224:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5226:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    5228:	4603      	mov	r3, r0
	while (n > 0) {
    522a:	4293      	cmp	r3, r2
    522c:	d100      	bne.n	5230 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    522e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5230:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5234:	e7f9      	b.n	522a <memset+0x6>

00005236 <_stdout_hook_default>:
}
    5236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    523a:	4770      	bx	lr

0000523c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    523c:	684b      	ldr	r3, [r1, #4]
    523e:	2b01      	cmp	r3, #1
    5240:	dd07      	ble.n	5252 <sprintf_out+0x16>
		*(p->ptr) = c;
    5242:	680b      	ldr	r3, [r1, #0]
    5244:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    5246:	680b      	ldr	r3, [r1, #0]
    5248:	3301      	adds	r3, #1
    524a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    524c:	684b      	ldr	r3, [r1, #4]
    524e:	3b01      	subs	r3, #1
    5250:	604b      	str	r3, [r1, #4]
}
    5252:	2000      	movs	r0, #0
    5254:	4770      	bx	lr

00005256 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    5256:	b084      	sub	sp, #16
    5258:	ab04      	add	r3, sp, #16
    525a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    525e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5262:	2b06      	cmp	r3, #6
    5264:	d108      	bne.n	5278 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    526a:	2201      	movs	r2, #1
    526c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5270:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    5274:	bf20      	wfe
    while (true)
    5276:	e7fd      	b.n	5274 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    5278:	b004      	add	sp, #16
    527a:	4770      	bx	lr

0000527c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    527c:	b084      	sub	sp, #16
    527e:	ab04      	add	r3, sp, #16
    5280:	e903 0007 	stmdb	r3, {r0, r1, r2}
    5284:	2300      	movs	r3, #0
    5286:	f383 8811 	msr	BASEPRI, r3
    528a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    528e:	b004      	add	sp, #16
    5290:	4770      	bx	lr

00005292 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5292:	6903      	ldr	r3, [r0, #16]
    5294:	b2c9      	uxtb	r1, r1
    5296:	220c      	movs	r2, #12
    5298:	fb01 3302 	mla	r3, r1, r2, r3
    529c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    529e:	f000 0007 	and.w	r0, r0, #7
    52a2:	4770      	bx	lr

000052a4 <set_on_state>:
	__asm__ volatile(
    52a4:	f04f 0320 	mov.w	r3, #32
    52a8:	f3ef 8211 	mrs	r2, BASEPRI
    52ac:	f383 8812 	msr	BASEPRI_MAX, r3
    52b0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    52b4:	6803      	ldr	r3, [r0, #0]
    52b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    52ba:	f043 0302 	orr.w	r3, r3, #2
    52be:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    52c0:	f382 8811 	msr	BASEPRI, r2
    52c4:	f3bf 8f6f 	isb	sy
}
    52c8:	4770      	bx	lr

000052ca <stop>:
{
    52ca:	4603      	mov	r3, r0
    52cc:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    52ce:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    52d0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    52d2:	f04f 0420 	mov.w	r4, #32
    52d6:	f3ef 8611 	mrs	r6, BASEPRI
    52da:	f384 8812 	msr	BASEPRI_MAX, r4
    52de:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    52e2:	250c      	movs	r5, #12
    52e4:	fb05 0401 	mla	r4, r5, r1, r0
    52e8:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    52ea:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    52ee:	d001      	beq.n	52f4 <stop+0x2a>
    52f0:	42a2      	cmp	r2, r4
    52f2:	d110      	bne.n	5316 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    52f4:	fb05 0001 	mla	r0, r5, r1, r0
    52f8:	2201      	movs	r2, #1
    52fa:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    52fc:	2000      	movs	r0, #0
	__asm__ volatile(
    52fe:	f386 8811 	msr	BASEPRI, r6
    5302:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5306:	b928      	cbnz	r0, 5314 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    5308:	685b      	ldr	r3, [r3, #4]
    530a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    530e:	684b      	ldr	r3, [r1, #4]
    5310:	4798      	blx	r3
	return 0;
    5312:	2000      	movs	r0, #0
}
    5314:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    5316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    531a:	e7f0      	b.n	52fe <stop+0x34>

0000531c <api_stop>:
	return stop(dev, subsys, CTX_API);
    531c:	2280      	movs	r2, #128	; 0x80
    531e:	f7ff bfd4 	b.w	52ca <stop>

00005322 <async_start>:
{
    5322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5324:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    5326:	6904      	ldr	r4, [r0, #16]
{
    5328:	4605      	mov	r5, r0
    532a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    532c:	f04f 0020 	mov.w	r0, #32
    5330:	f3ef 8c11 	mrs	ip, BASEPRI
    5334:	f380 8812 	msr	BASEPRI_MAX, r0
    5338:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    533c:	260c      	movs	r6, #12
    533e:	fb06 4601 	mla	r6, r6, r1, r4
    5342:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5344:	f000 0e07 	and.w	lr, r0, #7
    5348:	f1be 0f01 	cmp.w	lr, #1
    534c:	d111      	bne.n	5372 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    534e:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    5350:	2600      	movs	r6, #0
	__asm__ volatile(
    5352:	f38c 8811 	msr	BASEPRI, ip
    5356:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    535a:	b946      	cbnz	r6, 536e <async_start+0x4c>
	subdata->cb = cb;
    535c:	200c      	movs	r0, #12
    535e:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    5362:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5366:	686b      	ldr	r3, [r5, #4]
    5368:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    536c:	4798      	blx	r3
}
    536e:	4630      	mov	r0, r6
    5370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5372:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    5376:	4287      	cmp	r7, r0
    5378:	bf14      	ite	ne
    537a:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    537e:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    5382:	e7e6      	b.n	5352 <async_start+0x30>

00005384 <api_start>:
{
    5384:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5386:	2480      	movs	r4, #128	; 0x80
    5388:	9400      	str	r4, [sp, #0]
    538a:	f7ff ffca 	bl	5322 <async_start>
}
    538e:	b002      	add	sp, #8
    5390:	bd10      	pop	{r4, pc}

00005392 <onoff_started_callback>:
	return &data->mgr[type];
    5392:	6900      	ldr	r0, [r0, #16]
{
    5394:	b410      	push	{r4}
	return &data->mgr[type];
    5396:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5398:	241c      	movs	r4, #28
    539a:	fb03 0004 	mla	r0, r3, r4, r0
    539e:	2100      	movs	r1, #0
}
    53a0:	bc10      	pop	{r4}
	notify(mgr, 0);
    53a2:	4710      	bx	r2

000053a4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    53a4:	2000      	movs	r0, #0
    53a6:	f7fd be1f 	b.w	2fe8 <nrfx_clock_stop>

000053aa <blocking_start_callback>:
{
    53aa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    53ac:	f7fe bf44 	b.w	4238 <z_impl_k_sem_give>

000053b0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    53b0:	6843      	ldr	r3, [r0, #4]
    53b2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    53b4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    53b8:	600b      	str	r3, [r1, #0]
}
    53ba:	2000      	movs	r0, #0
    53bc:	4770      	bx	lr

000053be <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    53be:	6843      	ldr	r3, [r0, #4]
    53c0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    53c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    53c6:	4042      	eors	r2, r0
    53c8:	400a      	ands	r2, r1
    53ca:	4042      	eors	r2, r0
    p_reg->OUT = value;
    53cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    53d0:	2000      	movs	r0, #0
    53d2:	4770      	bx	lr

000053d4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    53d4:	6843      	ldr	r3, [r0, #4]
    53d6:	685b      	ldr	r3, [r3, #4]
}
    53d8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    53da:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    53de:	4770      	bx	lr

000053e0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    53e0:	6843      	ldr	r3, [r0, #4]
    53e2:	685b      	ldr	r3, [r3, #4]
}
    53e4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    53e6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    53ea:	4770      	bx	lr

000053ec <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    53ec:	6843      	ldr	r3, [r0, #4]
    53ee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    53f0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    53f4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    53f6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    53fa:	2000      	movs	r0, #0
    53fc:	4770      	bx	lr

000053fe <gpio_nrfx_manage_callback>:
	return port->data;
    53fe:	6903      	ldr	r3, [r0, #16]
	return list->head;
    5400:	6858      	ldr	r0, [r3, #4]
{
    5402:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    5404:	b158      	cbz	r0, 541e <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5406:	2400      	movs	r4, #0
    5408:	4281      	cmp	r1, r0
    540a:	d112      	bne.n	5432 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    540c:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    540e:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    5410:	b954      	cbnz	r4, 5428 <gpio_nrfx_manage_callback+0x2a>
    5412:	428d      	cmp	r5, r1
	list->head = node;
    5414:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5416:	d100      	bne.n	541a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    5418:	6098      	str	r0, [r3, #8]
	parent->next = child;
    541a:	2000      	movs	r0, #0
    541c:	6008      	str	r0, [r1, #0]
	if (set) {
    541e:	b96a      	cbnz	r2, 543c <gpio_nrfx_manage_callback+0x3e>
	return 0;
    5420:	2000      	movs	r0, #0
}
    5422:	bd30      	pop	{r4, r5, pc}
    5424:	4628      	mov	r0, r5
    5426:	e7ef      	b.n	5408 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    5428:	428d      	cmp	r5, r1
	parent->next = child;
    542a:	6020      	str	r0, [r4, #0]
	list->tail = node;
    542c:	bf08      	it	eq
    542e:	609c      	streq	r4, [r3, #8]
}
    5430:	e7f3      	b.n	541a <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    5432:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5434:	4604      	mov	r4, r0
    5436:	2d00      	cmp	r5, #0
    5438:	d1f4      	bne.n	5424 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    543a:	b13a      	cbz	r2, 544c <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    543c:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    543e:	685a      	ldr	r2, [r3, #4]
    5440:	600a      	str	r2, [r1, #0]
	list->head = node;
    5442:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5444:	2800      	cmp	r0, #0
    5446:	d1eb      	bne.n	5420 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    5448:	6099      	str	r1, [r3, #8]
}
    544a:	e7ea      	b.n	5422 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    544c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5450:	e7e7      	b.n	5422 <gpio_nrfx_manage_callback+0x24>

00005452 <pin_interrupt_configure>:
{
	int rc = 0;

	if (!IS_ENABLED(CONFIG_GPIO_SX1509B_INTERRUPT)
	    && (mode != GPIO_INT_MODE_DISABLED)) {
		return -ENOTSUP;
    5452:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
}
    5456:	bf14      	ite	ne
    5458:	f06f 0085 	mvnne.w	r0, #133	; 0x85
    545c:	2000      	moveq	r0, #0
    545e:	4770      	bx	lr

00005460 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
    5460:	f7fe bf0a 	b.w	4278 <z_impl_k_sem_take>

00005464 <i2c_write>:
{
    5464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
    5466:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    546a:	2202      	movs	r2, #2
    546c:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    5470:	6882      	ldr	r2, [r0, #8]
    5472:	a901      	add	r1, sp, #4
    5474:	6894      	ldr	r4, [r2, #8]
    5476:	2201      	movs	r2, #1
    5478:	47a0      	blx	r4
}
    547a:	b004      	add	sp, #16
    547c:	bd10      	pop	{r4, pc}

0000547e <i2c_reg_write_word_be>:
{
    547e:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
    5480:	f88d 2004 	strb.w	r2, [sp, #4]
    5484:	0a1a      	lsrs	r2, r3, #8
    5486:	f88d 2005 	strb.w	r2, [sp, #5]
    548a:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
    548e:	2203      	movs	r2, #3
    5490:	460b      	mov	r3, r1
    5492:	a901      	add	r1, sp, #4
    5494:	f7ff ffe6 	bl	5464 <i2c_write>
}
    5498:	b003      	add	sp, #12
    549a:	f85d fb04 	ldr.w	pc, [sp], #4

0000549e <port_write>:
{
    549e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    54a2:	4605      	mov	r5, r0
    54a4:	4689      	mov	r9, r1
    54a6:	4614      	mov	r4, r2
    54a8:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
    54aa:	f000 fd74 	bl	5f96 <k_is_in_isr>
    54ae:	bb08      	cbnz	r0, 54f4 <port_write+0x56>
	const struct sx1509b_config *cfg = dev->config;
    54b0:	686f      	ldr	r7, [r5, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    54b2:	692d      	ldr	r5, [r5, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
    54b4:	f105 0620 	add.w	r6, r5, #32
    54b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    54bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    54c0:	4630      	mov	r0, r6
    54c2:	f7ff ffcd 	bl	5460 <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
    54c6:	8b28      	ldrh	r0, [r5, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    54c8:	8939      	ldrh	r1, [r7, #8]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
    54ca:	4044      	eors	r4, r0
    54cc:	ea04 0409 	and.w	r4, r4, r9
    54d0:	ea84 0408 	eor.w	r4, r4, r8
    54d4:	4044      	eors	r4, r0
    54d6:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
    54d8:	6868      	ldr	r0, [r5, #4]
    54da:	4623      	mov	r3, r4
    54dc:	2210      	movs	r2, #16
    54de:	f7ff ffce 	bl	547e <i2c_reg_write_word_be>
	if (rc == 0) {
    54e2:	4607      	mov	r7, r0
    54e4:	b900      	cbnz	r0, 54e8 <port_write+0x4a>
		*outp = out;
    54e6:	832c      	strh	r4, [r5, #24]
	z_impl_k_sem_give(sem);
    54e8:	4630      	mov	r0, r6
    54ea:	f7fe fea5 	bl	4238 <z_impl_k_sem_give>
}
    54ee:	4638      	mov	r0, r7
    54f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
    54f4:	f06f 070a 	mvn.w	r7, #10
    54f8:	e7f9      	b.n	54ee <port_write+0x50>

000054fa <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
    54fa:	2200      	movs	r2, #0
{
    54fc:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
    54fe:	4611      	mov	r1, r2
    5500:	f7ff bfcd 	b.w	549e <port_write>

00005504 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
    5504:	2300      	movs	r3, #0
    5506:	461a      	mov	r2, r3
    5508:	f7ff bfc9 	b.w	549e <port_write>

0000550c <port_set_bits>:
{
    550c:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
    550e:	2300      	movs	r3, #0
    5510:	f7ff bfc5 	b.w	549e <port_write>

00005514 <port_set_masked>:
	return port_write(dev, mask, value, 0);
    5514:	2300      	movs	r3, #0
    5516:	f7ff bfc2 	b.w	549e <port_write>

0000551a <write_pin_state>:
{
    551a:	b530      	push	{r4, r5, lr}
    551c:	b087      	sub	sp, #28
    551e:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
    5520:	2100      	movs	r1, #0
    5522:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
    5526:	8811      	ldrh	r1, [r2, #0]
    5528:	ba49      	rev16	r1, r1
    552a:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
    552e:	8851      	ldrh	r1, [r2, #2]
    5530:	ba49      	rev16	r1, r1
    5532:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
    5536:	8891      	ldrh	r1, [r2, #4]
    5538:	ba49      	rev16	r1, r1
    553a:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
    553e:	88d1      	ldrh	r1, [r2, #6]
    5540:	ba49      	rev16	r1, r1
    5542:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
    5546:	8911      	ldrh	r1, [r2, #8]
    5548:	ba49      	rev16	r1, r1
    554a:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
    554e:	8951      	ldrh	r1, [r2, #10]
    5550:	ba49      	rev16	r1, r1
    5552:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
    5556:	8991      	ldrh	r1, [r2, #12]
    5558:	ba49      	rev16	r1, r1
    555a:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    555e:	89d1      	ldrh	r1, [r2, #14]
    5560:	8a12      	ldrh	r2, [r2, #16]
{
    5562:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
    5564:	ba49      	rev16	r1, r1
    5566:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
    556a:	ba51      	rev16	r1, r2
    556c:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5570:	6860      	ldr	r0, [r4, #4]
    5572:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
    5574:	b163      	cbz	r3, 5590 <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5576:	4613      	mov	r3, r2
    5578:	2210      	movs	r2, #16
    557a:	f7ff ff80 	bl	547e <i2c_reg_write_word_be>
		if (rc == 0) {
    557e:	b928      	cbnz	r0, 558c <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    5580:	892b      	ldrh	r3, [r5, #8]
    5582:	6860      	ldr	r0, [r4, #4]
    5584:	2211      	movs	r2, #17
    5586:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    5588:	f7ff ff6c 	bl	5464 <i2c_write>
}
    558c:	b007      	add	sp, #28
    558e:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
    5590:	460b      	mov	r3, r1
    5592:	2213      	movs	r2, #19
    5594:	a901      	add	r1, sp, #4
    5596:	e7f7      	b.n	5588 <write_pin_state+0x6e>

00005598 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
    5598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct sx1509b_config *cfg = dev->config;
    559c:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    559e:	6905      	ldr	r5, [r0, #16]
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
    55a0:	6870      	ldr	r0, [r6, #4]
    55a2:	f7fe fc85 	bl	3eb0 <z_impl_device_get_binding>
    55a6:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
    55a8:	2800      	cmp	r0, #0
    55aa:	d061      	beq.n	5670 <sx1509b_init+0xd8>
	drv_data->irq_state = (struct sx1509b_irq_state) {
		.interrupt_mask = ALL_PINS,
	};
#endif

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    55ac:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
    55ae:	f04f 087d 	mov.w	r8, #125	; 0x7d
    55b2:	2712      	movs	r7, #18
	return i2c_write(dev, tx_buf, 2, dev_addr);
    55b4:	2202      	movs	r2, #2
    55b6:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
    55b8:	f88d 8004 	strb.w	r8, [sp, #4]
    55bc:	f88d 7005 	strb.w	r7, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    55c0:	f7ff ff50 	bl	5464 <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
    55c4:	4604      	mov	r4, r0
    55c6:	2800      	cmp	r0, #0
    55c8:	d14a      	bne.n	5660 <sx1509b_init+0xc8>
	uint8_t tx_buf[2] = {reg_addr, value};
    55ca:	2234      	movs	r2, #52	; 0x34
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    55cc:	6868      	ldr	r0, [r5, #4]
    55ce:	8933      	ldrh	r3, [r6, #8]
    55d0:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    55d4:	a901      	add	r1, sp, #4
    55d6:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    55d8:	f88d 8004 	strb.w	r8, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    55dc:	f7ff ff42 	bl	5464 <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
    55e0:	4604      	mov	r4, r0
    55e2:	2800      	cmp	r0, #0
    55e4:	d13c      	bne.n	5660 <sx1509b_init+0xc8>
	return z_impl_k_sleep(timeout);
    55e6:	2100      	movs	r1, #0
    55e8:	2063      	movs	r0, #99	; 0x63
    55ea:	f7ff fa49 	bl	4a80 <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
    55ee:	463a      	mov	r2, r7
    55f0:	4621      	mov	r1, r4
    55f2:	f105 0008 	add.w	r0, r5, #8
    55f6:	f7ff fe15 	bl	5224 <memset>
    55fa:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
    55fe:	221e      	movs	r2, #30
    5600:	832b      	strh	r3, [r5, #24]
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    5602:	83ac      	strh	r4, [r5, #28]
    5604:	77ac      	strb	r4, [r5, #30]
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
    5606:	6868      	ldr	r0, [r5, #4]
    5608:	8933      	ldrh	r3, [r6, #8]
    560a:	f88d 2004 	strb.w	r2, [sp, #4]
    560e:	2240      	movs	r2, #64	; 0x40
    5610:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5614:	a901      	add	r1, sp, #4
    5616:	2202      	movs	r2, #2
    5618:	f7ff ff24 	bl	5464 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
    561c:	4627      	mov	r7, r4
				SX1509B_REG_CLOCK,
				SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
    561e:	4604      	mov	r4, r0
    5620:	b9f0      	cbnz	r0, 5660 <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5622:	8b2b      	ldrh	r3, [r5, #24]
    5624:	8931      	ldrh	r1, [r6, #8]
    5626:	6868      	ldr	r0, [r5, #4]
    5628:	2210      	movs	r2, #16
    562a:	f7ff ff28 	bl	547e <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DATA,
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
    562e:	4604      	mov	r4, r0
    5630:	b9b0      	cbnz	r0, 5660 <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5632:	8aeb      	ldrh	r3, [r5, #22]
    5634:	8931      	ldrh	r1, [r6, #8]
    5636:	6868      	ldr	r0, [r5, #4]
    5638:	220e      	movs	r2, #14
    563a:	f7ff ff20 	bl	547e <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DIR,
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
    563e:	4604      	mov	r4, r0
    5640:	b970      	cbnz	r0, 5660 <sx1509b_init+0xc8>
	uint8_t tx_buf[3] = { reg_addr, value };
    5642:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
    5644:	6868      	ldr	r0, [r5, #4]
    5646:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
    5648:	f88d 2004 	strb.w	r2, [sp, #4]
    564c:	2298      	movs	r2, #152	; 0x98
    564e:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    5652:	a901      	add	r1, sp, #4
    5654:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
    5656:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write(dev, tx_buf, 2, dev_addr);
    565a:	f7ff ff03 	bl	5464 <i2c_write>
    565e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    5660:	f105 0020 	add.w	r0, r5, #32
    5664:	f7fe fde8 	bl	4238 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
    5668:	4620      	mov	r0, r4
    566a:	b002      	add	sp, #8
    566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -EINVAL;
    5670:	f06f 0415 	mvn.w	r4, #21
    5674:	e7f4      	b.n	5660 <sx1509b_init+0xc8>

00005676 <sx1509b_config>:
{
    5676:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
    567a:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    567e:	6904      	ldr	r4, [r0, #16]
{
    5680:	460d      	mov	r5, r1
    5682:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
    5684:	f000 fc87 	bl	5f96 <k_is_in_isr>
    5688:	4683      	mov	fp, r0
    568a:	2800      	cmp	r0, #0
    568c:	f040 808c 	bne.w	57a8 <sx1509b_config+0x132>
	if ((flags & GPIO_DS_ALT) != 0) {
    5690:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
    5694:	f040 808b 	bne.w	57ae <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
    5698:	f104 0920 	add.w	r9, r4, #32
    569c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    56a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    56a4:	4648      	mov	r0, r9
    56a6:	f7ff fedb 	bl	5460 <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
    56aa:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
    56ac:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
    56ae:	40ae      	lsls	r6, r5
    56b0:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    56b2:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
    56b6:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
    56ba:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
    56bc:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
    56c0:	d44f      	bmi.n	5762 <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
    56c2:	8a63      	ldrh	r3, [r4, #18]
    56c4:	ea03 0208 	and.w	r2, r3, r8
    56c8:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
    56ca:	07ba      	lsls	r2, r7, #30
    56cc:	d45c      	bmi.n	5788 <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
    56ce:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
    56d0:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
    56d2:	bf4c      	ite	mi
    56d4:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
    56d6:	ea08 0303 	andpl.w	r3, r8, r3
    56da:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
    56dc:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
    56de:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
    56e0:	bf4c      	ite	mi
    56e2:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
    56e4:	ea08 0303 	andpl.w	r3, r8, r3
    56e8:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
    56ea:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
    56ec:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
    56ee:	bf4c      	ite	mi
    56f0:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
    56f4:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
    56f6:	05bd      	lsls	r5, r7, #22
    56f8:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
    56fa:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
    56fc:	d54e      	bpl.n	579c <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
    56fe:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    5702:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
    5704:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    5706:	d544      	bpl.n	5792 <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
    5708:	8b23      	ldrh	r3, [r4, #24]
    570a:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
    570e:	8323      	strh	r3, [r4, #24]
			data_first = true;
    5710:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
    5714:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
    5718:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
    571a:	bf4c      	ite	mi
    571c:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
    571e:	ea08 0603 	andpl.w	r6, r8, r3
    5722:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
    5726:	465b      	mov	r3, fp
    5728:	f104 0208 	add.w	r2, r4, #8
    572c:	4621      	mov	r1, r4
    572e:	4650      	mov	r0, sl
    5730:	f7ff fef3 	bl	551a <write_pin_state>
	if (rc == 0) {
    5734:	4605      	mov	r5, r0
    5736:	bb00      	cbnz	r0, 577a <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
    5738:	2322      	movs	r3, #34	; 0x22
    573a:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
    573e:	7f23      	ldrb	r3, [r4, #28]
    5740:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
    5744:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
    5748:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
    574a:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
    574c:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
    574e:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
    5752:	eb0d 0102 	add.w	r1, sp, r2
    5756:	f8ba 3008 	ldrh.w	r3, [sl, #8]
    575a:	f7ff fe83 	bl	5464 <i2c_write>
    575e:	4605      	mov	r5, r0
    5760:	e00b      	b.n	577a <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
    5762:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    5766:	f8ba 1008 	ldrh.w	r1, [sl, #8]
    576a:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
    576c:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
    576e:	2220      	movs	r2, #32
    5770:	f7ff fe85 	bl	547e <i2c_reg_write_word_be>
		if (rc) {
    5774:	4605      	mov	r5, r0
    5776:	2800      	cmp	r0, #0
    5778:	d0a3      	beq.n	56c2 <sx1509b_config+0x4c>
    577a:	4648      	mov	r0, r9
    577c:	f7fe fd5c 	bl	4238 <z_impl_k_sem_give>
}
    5780:	4628      	mov	r0, r5
    5782:	b003      	add	sp, #12
    5784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
    5788:	077d      	lsls	r5, r7, #29
    578a:	d50a      	bpl.n	57a2 <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
    578c:	4333      	orrs	r3, r6
    578e:	8263      	strh	r3, [r4, #18]
    5790:	e79d      	b.n	56ce <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    5792:	0539      	lsls	r1, r7, #20
    5794:	d5be      	bpl.n	5714 <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
    5796:	8b23      	ldrh	r3, [r4, #24]
    5798:	4333      	orrs	r3, r6
    579a:	e7b8      	b.n	570e <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
    579c:	4333      	orrs	r3, r6
    579e:	82e3      	strh	r3, [r4, #22]
    57a0:	e7b8      	b.n	5714 <sx1509b_config+0x9e>
			rc = -ENOTSUP;
    57a2:	f06f 0585 	mvn.w	r5, #133	; 0x85
    57a6:	e7e8      	b.n	577a <sx1509b_config+0x104>
		return -EWOULDBLOCK;
    57a8:	f06f 050a 	mvn.w	r5, #10
    57ac:	e7e8      	b.n	5780 <sx1509b_config+0x10a>
		return -ENOTSUP;
    57ae:	f06f 0585 	mvn.w	r5, #133	; 0x85
    57b2:	e7e5      	b.n	5780 <sx1509b_config+0x10a>

000057b4 <port_get>:
{
    57b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57b8:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
    57ba:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
    57be:	6907      	ldr	r7, [r0, #16]
{
    57c0:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
    57c2:	f000 fbe8 	bl	5f96 <k_is_in_isr>
    57c6:	4604      	mov	r4, r0
    57c8:	bb78      	cbnz	r0, 582a <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
    57ca:	f107 0620 	add.w	r6, r7, #32
    57ce:	4630      	mov	r0, r6
    57d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    57d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    57d8:	f7ff fe42 	bl	5460 <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
    57dc:	f10d 0205 	add.w	r2, sp, #5
    57e0:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    57e2:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    57e4:	6878      	ldr	r0, [r7, #4]
    57e6:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
    57e8:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
    57ea:	f10d 0206 	add.w	r2, sp, #6
    57ee:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    57f2:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
    57f4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
    57f8:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
    57fa:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    57fc:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
    5800:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    5802:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    5806:	6881      	ldr	r1, [r0, #8]
    5808:	688c      	ldr	r4, [r1, #8]
    580a:	a902      	add	r1, sp, #8
    580c:	47a0      	blx	r4
	if (rc != 0) {
    580e:	4604      	mov	r4, r0
    5810:	b920      	cbnz	r0, 581c <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
    5812:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5816:	ba5b      	rev16	r3, r3
    5818:	b29b      	uxth	r3, r3
    581a:	602b      	str	r3, [r5, #0]
    581c:	4630      	mov	r0, r6
    581e:	f7fe fd0b 	bl	4238 <z_impl_k_sem_give>
}
    5822:	4620      	mov	r0, r4
    5824:	b008      	add	sp, #32
    5826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
    582a:	f06f 040a 	mvn.w	r4, #10
    582e:	e7f8      	b.n	5822 <port_get+0x6e>

00005830 <i2c_nrfx_twim_configure>:
{
    5830:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
    5832:	07cb      	lsls	r3, r1, #31
{
    5834:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
    5836:	d41d      	bmi.n	5874 <i2c_nrfx_twim_configure+0x44>
	switch (I2C_SPEED_GET(i2c_config)) {
    5838:	f3c1 0142 	ubfx	r1, r1, #1, #3
    583c:	2901      	cmp	r1, #1
    583e:	d016      	beq.n	586e <i2c_nrfx_twim_configure+0x3e>
    5840:	2902      	cmp	r1, #2
    5842:	d117      	bne.n	5874 <i2c_nrfx_twim_configure+0x44>
    5844:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    5848:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
    584a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    584c:	4293      	cmp	r3, r2
    584e:	d014      	beq.n	587a <i2c_nrfx_twim_configure+0x4a>
		dev_data->twim_config.frequency = frequency;
    5850:	62ab      	str	r3, [r5, #40]	; 0x28
	if (dev_data->twim_initialized) {
    5852:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    5856:	b12b      	cbz	r3, 5864 <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
    5858:	6860      	ldr	r0, [r4, #4]
    585a:	f7fe f897 	bl	398c <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
    585e:	2300      	movs	r3, #0
    5860:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
		return init_twim(dev);
    5864:	4620      	mov	r0, r4
}
    5866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
    586a:	f7fc bb5b 	b.w	1f24 <init_twim>
		frequency = NRF_TWIM_FREQ_100K;
    586e:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
    5872:	e7e9      	b.n	5848 <i2c_nrfx_twim_configure+0x18>
	switch (I2C_SPEED_GET(i2c_config)) {
    5874:	f06f 0015 	mvn.w	r0, #21
}
    5878:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    587a:	2000      	movs	r0, #0
    587c:	e7fc      	b.n	5878 <i2c_nrfx_twim_configure+0x48>

0000587e <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    587e:	b510      	push	{r4, lr}
    5880:	2200      	movs	r2, #0
    5882:	4604      	mov	r4, r0
    5884:	2101      	movs	r1, #1
    5886:	2003      	movs	r0, #3
    5888:	f7fb fcd6 	bl	1238 <z_arm_irq_priority_set>
    588c:	4620      	mov	r0, r4
    588e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5892:	f7fc bb47 	b.w	1f24 <init_twim>

00005896 <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
    5896:	b510      	push	{r4, lr}
    5898:	2200      	movs	r2, #0
    589a:	4604      	mov	r4, r0
    589c:	2101      	movs	r1, #1
    589e:	2004      	movs	r0, #4
    58a0:	f7fb fcca 	bl	1238 <z_arm_irq_priority_set>
    58a4:	4620      	mov	r0, r4
    58a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    58aa:	f7fc bb3b 	b.w	1f24 <init_twim>

000058ae <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
    58ae:	b510      	push	{r4, lr}
    58b0:	b086      	sub	sp, #24
	msg[1].len = num_read;
    58b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
    58b6:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
    58b8:	2101      	movs	r1, #1
    58ba:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    58bc:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    58be:	2100      	movs	r1, #0
    58c0:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    58c4:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    58c8:	6883      	ldr	r3, [r0, #8]
    58ca:	2202      	movs	r2, #2
    58cc:	689c      	ldr	r4, [r3, #8]
    58ce:	4669      	mov	r1, sp
    58d0:	235a      	movs	r3, #90	; 0x5a
    58d2:	47a0      	blx	r4
}
    58d4:	b006      	add	sp, #24
    58d6:	bd10      	pop	{r4, pc}

000058d8 <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    58d8:	2301      	movs	r3, #1
    58da:	fa03 f101 	lsl.w	r1, r3, r1
    58de:	6903      	ldr	r3, [r0, #16]
    58e0:	681b      	ldr	r3, [r3, #0]
    58e2:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    58e4:	bf18      	it	ne
    58e6:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    58ea:	b112      	cbz	r2, 58f2 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
    58ec:	6883      	ldr	r3, [r0, #8]
    58ee:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    58f0:	4718      	bx	r3
    58f2:	6883      	ldr	r3, [r0, #8]
    58f4:	691b      	ldr	r3, [r3, #16]
    58f6:	e7fb      	b.n	58f0 <gpio_pin_set.isra.0+0x18>

000058f8 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    58f8:	4601      	mov	r1, r0
    58fa:	f240 30e7 	movw	r0, #999	; 0x3e7
    58fe:	b508      	push	{r3, lr}
    5900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5904:	2300      	movs	r3, #0
    5906:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    590a:	1449      	asrs	r1, r1, #17
    590c:	f7fa fbe6 	bl	dc <__aeabi_uldivmod>
}
    5910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    5914:	f7ff b8b4 	b.w	4a80 <z_impl_k_sleep>

00005918 <i2c_write.constprop.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
    5918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
    591a:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    591e:	2202      	movs	r2, #2
    5920:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    5924:	6883      	ldr	r3, [r0, #8]
    5926:	2201      	movs	r2, #1
    5928:	689c      	ldr	r4, [r3, #8]
    592a:	a901      	add	r1, sp, #4
    592c:	235a      	movs	r3, #90	; 0x5a
    592e:	47a0      	blx	r4
}
    5930:	b004      	add	sp, #16
    5932:	bd10      	pop	{r4, pc}

00005934 <fetch_status>:
{
    5934:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5936:	2300      	movs	r3, #0
    5938:	f88d 3007 	strb.w	r3, [sp, #7]
	return i2c_write_read(dev, dev_addr,
    593c:	f10d 0205 	add.w	r2, sp, #5
    5940:	2301      	movs	r3, #1
    5942:	f10d 0107 	add.w	r1, sp, #7
    5946:	4605      	mov	r5, r0
    5948:	f7ff ffb1 	bl	58ae <i2c_write_read.constprop.0>
	if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
    594c:	2800      	cmp	r0, #0
    594e:	db10      	blt.n	5972 <fetch_status+0x3e>
	rv = status;
    5950:	f89d 4005 	ldrb.w	r4, [sp, #5]
	if (status & CCS811_STATUS_ERROR) {
    5954:	07e3      	lsls	r3, r4, #31
    5956:	d513      	bpl.n	5980 <fetch_status+0x4c>
		if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
    5958:	23e0      	movs	r3, #224	; 0xe0
    595a:	f88d 3007 	strb.w	r3, [sp, #7]
    595e:	f10d 0206 	add.w	r2, sp, #6
    5962:	2301      	movs	r3, #1
    5964:	f10d 0107 	add.w	r1, sp, #7
    5968:	4628      	mov	r0, r5
    596a:	f7ff ffa0 	bl	58ae <i2c_write_read.constprop.0>
    596e:	2800      	cmp	r0, #0
    5970:	da02      	bge.n	5978 <fetch_status+0x44>
		return -EIO;
    5972:	f06f 0404 	mvn.w	r4, #4
    5976:	e003      	b.n	5980 <fetch_status+0x4c>
		rv |= (error_id << 8);
    5978:	f89d 3006 	ldrb.w	r3, [sp, #6]
    597c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
}
    5980:	4620      	mov	r0, r4
    5982:	b003      	add	sp, #12
    5984:	bd30      	pop	{r4, r5, pc}

00005986 <set_wake.isra.0>:
static void set_wake(struct ccs811_data *drv_data, bool enable)
    5986:	b510      	push	{r4, lr}
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
    5988:	460a      	mov	r2, r1
static void set_wake(struct ccs811_data *drv_data, bool enable)
    598a:	460c      	mov	r4, r1
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
    598c:	210c      	movs	r1, #12
    598e:	f7ff ffa3 	bl	58d8 <gpio_pin_set.isra.0>
	if (enable) {
    5992:	b124      	cbz	r4, 599e <set_wake.isra.0+0x18>
	z_impl_k_busy_wait(usec_to_wait);
    5994:	2032      	movs	r0, #50	; 0x32
}
    5996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    599a:	f000 bc50 	b.w	623e <z_impl_k_busy_wait>
    599e:	2014      	movs	r0, #20
    59a0:	e7f9      	b.n	5996 <set_wake.isra.0+0x10>

000059a2 <ccs811_sample_fetch>:
{
    59a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
    59a4:	6905      	ldr	r5, [r0, #16]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
    59a6:	2302      	movs	r3, #2
	uint16_t buf[4] = { 0 };
    59a8:	2400      	movs	r4, #0
	set_wake(drv_data, true);
    59aa:	68e8      	ldr	r0, [r5, #12]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
    59ac:	f88d 3007 	strb.w	r3, [sp, #7]
	set_wake(drv_data, true);
    59b0:	2101      	movs	r1, #1
	uint16_t buf[4] = { 0 };
    59b2:	e9cd 4402 	strd	r4, r4, [sp, #8]
	set_wake(drv_data, true);
    59b6:	f7ff ffe6 	bl	5986 <set_wake.isra.0>
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    59ba:	2308      	movs	r3, #8
    59bc:	eb0d 0203 	add.w	r2, sp, r3
    59c0:	f10d 0107 	add.w	r1, sp, #7
    59c4:	6828      	ldr	r0, [r5, #0]
    59c6:	f7ff ff72 	bl	58ae <i2c_write_read.constprop.0>
	set_wake(drv_data, false);
    59ca:	4621      	mov	r1, r4
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    59cc:	4606      	mov	r6, r0
	set_wake(drv_data, false);
    59ce:	68e8      	ldr	r0, [r5, #12]
    59d0:	f7ff ffd9 	bl	5986 <set_wake.isra.0>
	if (rc < 0) {
    59d4:	42a6      	cmp	r6, r4
    59d6:	db1b      	blt.n	5a10 <ccs811_sample_fetch+0x6e>
	rp->co2 = sys_be16_to_cpu(buf[0]);
    59d8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	status = sys_le16_to_cpu(buf[2]); /* sic */
    59dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	rp->status = status;
    59e0:	82ea      	strh	r2, [r5, #22]
    59e2:	ba5b      	rev16	r3, r3
    59e4:	b299      	uxth	r1, r3
	rp->co2 = sys_be16_to_cpu(buf[0]);
    59e6:	822b      	strh	r3, [r5, #16]
	rp->voc = sys_be16_to_cpu(buf[1]);
    59e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    59ec:	ba5b      	rev16	r3, r3
    59ee:	826b      	strh	r3, [r5, #18]
	rp->raw = sys_be16_to_cpu(buf[3]);
    59f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    59f4:	ba5b      	rev16	r3, r3
    59f6:	82ab      	strh	r3, [r5, #20]
	if ((drv_data->app_fw_ver <= 0x11)
    59f8:	7e6b      	ldrb	r3, [r5, #25]
    59fa:	2b11      	cmp	r3, #17
    59fc:	d800      	bhi.n	5a00 <ccs811_sample_fetch+0x5e>
	    && (rp->co2 != 0)) {
    59fe:	b951      	cbnz	r1, 5a16 <ccs811_sample_fetch+0x74>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
    5a00:	f012 0f08 	tst.w	r2, #8
    5a04:	bf14      	ite	ne
    5a06:	2000      	movne	r0, #0
    5a08:	f06f 000a 	mvneq.w	r0, #10
}
    5a0c:	b004      	add	sp, #16
    5a0e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5a10:	f06f 0004 	mvn.w	r0, #4
    5a14:	e7fa      	b.n	5a0c <ccs811_sample_fetch+0x6a>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
    5a16:	4620      	mov	r0, r4
    5a18:	e7f8      	b.n	5a0c <ccs811_sample_fetch+0x6a>

00005a1a <ccs811_result>:
	return &drv_data->result;
    5a1a:	6900      	ldr	r0, [r0, #16]
}
    5a1c:	3010      	adds	r0, #16
    5a1e:	4770      	bx	lr

00005a20 <ccs811_configver_fetch>:
{
    5a20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
    5a22:	6906      	ldr	r6, [r0, #16]
	if (!ptr) {
    5a24:	460d      	mov	r5, r1
    5a26:	2900      	cmp	r1, #0
    5a28:	d037      	beq.n	5a9a <ccs811_configver_fetch+0x7a>
	set_wake(drv_data, true);
    5a2a:	68f0      	ldr	r0, [r6, #12]
    5a2c:	2101      	movs	r1, #1
    5a2e:	f7ff ffaa 	bl	5986 <set_wake.isra.0>
	cmd = CCS811_REG_HW_VERSION;
    5a32:	2321      	movs	r3, #33	; 0x21
    5a34:	f88d 3007 	strb.w	r3, [sp, #7]
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    5a38:	6830      	ldr	r0, [r6, #0]
    5a3a:	2301      	movs	r3, #1
    5a3c:	1d2a      	adds	r2, r5, #4
    5a3e:	f10d 0107 	add.w	r1, sp, #7
    5a42:	f7ff ff34 	bl	58ae <i2c_write_read.constprop.0>
	if (rc == 0) {
    5a46:	4604      	mov	r4, r0
    5a48:	b9e0      	cbnz	r0, 5a84 <ccs811_configver_fetch+0x64>
		cmd = CCS811_REG_FW_BOOT_VERSION;
    5a4a:	2323      	movs	r3, #35	; 0x23
    5a4c:	f88d 3007 	strb.w	r3, [sp, #7]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    5a50:	6830      	ldr	r0, [r6, #0]
    5a52:	2302      	movs	r3, #2
    5a54:	462a      	mov	r2, r5
    5a56:	f10d 0107 	add.w	r1, sp, #7
    5a5a:	f7ff ff28 	bl	58ae <i2c_write_read.constprop.0>
		ptr->fw_boot_version = sys_be16_to_cpu(ptr->fw_boot_version);
    5a5e:	882b      	ldrh	r3, [r5, #0]
    5a60:	ba5b      	rev16	r3, r3
    5a62:	802b      	strh	r3, [r5, #0]
	if (rc == 0) {
    5a64:	4604      	mov	r4, r0
    5a66:	b968      	cbnz	r0, 5a84 <ccs811_configver_fetch+0x64>
		cmd = CCS811_REG_FW_APP_VERSION;
    5a68:	2324      	movs	r3, #36	; 0x24
    5a6a:	f88d 3007 	strb.w	r3, [sp, #7]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    5a6e:	2302      	movs	r3, #2
    5a70:	18ea      	adds	r2, r5, r3
    5a72:	6830      	ldr	r0, [r6, #0]
    5a74:	f10d 0107 	add.w	r1, sp, #7
    5a78:	f7ff ff19 	bl	58ae <i2c_write_read.constprop.0>
		ptr->fw_app_version = sys_be16_to_cpu(ptr->fw_app_version);
    5a7c:	886b      	ldrh	r3, [r5, #2]
    5a7e:	ba5b      	rev16	r3, r3
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    5a80:	4604      	mov	r4, r0
		ptr->fw_app_version = sys_be16_to_cpu(ptr->fw_app_version);
    5a82:	806b      	strh	r3, [r5, #2]
	set_wake(drv_data, false);
    5a84:	68f0      	ldr	r0, [r6, #12]
    5a86:	2100      	movs	r1, #0
    5a88:	f7ff ff7d 	bl	5986 <set_wake.isra.0>
	ptr->mode = drv_data->mode & CCS811_MODE_MSK;
    5a8c:	7e33      	ldrb	r3, [r6, #24]
    5a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    5a92:	716b      	strb	r3, [r5, #5]
}
    5a94:	4620      	mov	r0, r4
    5a96:	b002      	add	sp, #8
    5a98:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    5a9a:	f06f 0415 	mvn.w	r4, #21
    5a9e:	e7f9      	b.n	5a94 <ccs811_configver_fetch+0x74>

00005aa0 <ccs811_baseline_fetch>:
{
    5aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct ccs811_data *drv_data = dev->data;
    5aa2:	6905      	ldr	r5, [r0, #16]
	const uint8_t cmd = CCS811_REG_BASELINE;
    5aa4:	2311      	movs	r3, #17
	set_wake(drv_data, true);
    5aa6:	68e8      	ldr	r0, [r5, #12]
	const uint8_t cmd = CCS811_REG_BASELINE;
    5aa8:	f88d 3005 	strb.w	r3, [sp, #5]
	set_wake(drv_data, true);
    5aac:	2101      	movs	r1, #1
    5aae:	f7ff ff6a 	bl	5986 <set_wake.isra.0>
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    5ab2:	2302      	movs	r3, #2
    5ab4:	f10d 0206 	add.w	r2, sp, #6
    5ab8:	f10d 0105 	add.w	r1, sp, #5
    5abc:	6828      	ldr	r0, [r5, #0]
    5abe:	f7ff fef6 	bl	58ae <i2c_write_read.constprop.0>
	set_wake(drv_data, false);
    5ac2:	2100      	movs	r1, #0
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
    5ac4:	4604      	mov	r4, r0
	set_wake(drv_data, false);
    5ac6:	68e8      	ldr	r0, [r5, #12]
    5ac8:	f7ff ff5d 	bl	5986 <set_wake.isra.0>
	if (rc <= 0) {
    5acc:	2c00      	cmp	r4, #0
		rc = baseline;
    5ace:	bfd8      	it	le
    5ad0:	f8bd 4006 	ldrhle.w	r4, [sp, #6]
}
    5ad4:	4620      	mov	r0, r4
    5ad6:	b003      	add	sp, #12
    5ad8:	bd30      	pop	{r4, r5, pc}

00005ada <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
    5ada:	4603      	mov	r3, r0
    5adc:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    5ade:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5ae0:	7919      	ldrb	r1, [r3, #4]
    5ae2:	2301      	movs	r3, #1
    5ae4:	fa03 f101 	lsl.w	r1, r3, r1
    5ae8:	6903      	ldr	r3, [r0, #16]
    5aea:	681b      	ldr	r3, [r3, #0]
    5aec:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    5aee:	bf18      	it	ne
    5af0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    5af4:	b112      	cbz	r2, 5afc <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    5af6:	6883      	ldr	r3, [r0, #8]
    5af8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    5afa:	4718      	bx	r3
    5afc:	6883      	ldr	r3, [r0, #8]
    5afe:	691b      	ldr	r3, [r3, #16]
    5b00:	e7fb      	b.n	5afa <gpio_pin_set_dt+0x20>

00005b02 <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
    5b02:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
    5b04:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
    5b06:	6845      	ldr	r5, [r0, #4]
{
    5b08:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
    5b0a:	a903      	add	r1, sp, #12
    5b0c:	4620      	mov	r0, r4
    5b0e:	f7ff fab4 	bl	507a <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5b12:	7d29      	ldrb	r1, [r5, #20]
    5b14:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
    5b18:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5b1a:	d114      	bne.n	5b46 <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
    5b1c:	2801      	cmp	r0, #1
    5b1e:	d10c      	bne.n	5b3a <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    5b20:	f105 000c 	add.w	r0, r5, #12
    5b24:	f7ff ffd9 	bl	5ada <gpio_pin_set_dt>
    5b28:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    5b2a:	2200      	movs	r2, #0
    5b2c:	9903      	ldr	r1, [sp, #12]
    5b2e:	9200      	str	r2, [sp, #0]
    5b30:	4620      	mov	r0, r4
    5b32:	f7ff faad 	bl	5090 <onoff_sync_finalize>
}
    5b36:	b005      	add	sp, #20
    5b38:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
    5b3a:	2800      	cmp	r0, #0
    5b3c:	bf14      	ite	ne
    5b3e:	4603      	movne	r3, r0
    5b40:	f06f 0315 	mvneq.w	r3, #21
    5b44:	e7f1      	b.n	5b2a <disable_sync+0x28>
		rc = 0;
    5b46:	2300      	movs	r3, #0
    5b48:	e7ef      	b.n	5b2a <disable_sync+0x28>

00005b4a <enable_sync>:
{
    5b4a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    5b4c:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
    5b4e:	6846      	ldr	r6, [r0, #4]
{
    5b50:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
    5b52:	4628      	mov	r0, r5
    5b54:	a903      	add	r1, sp, #12
    5b56:	f7ff fa90 	bl	507a <onoff_sync_lock>
	if ((rc == 0)
    5b5a:	4603      	mov	r3, r0
    5b5c:	b940      	cbnz	r0, 5b70 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    5b5e:	7d32      	ldrb	r2, [r6, #20]
    5b60:	07d2      	lsls	r2, r2, #31
    5b62:	d405      	bmi.n	5b70 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    5b64:	2101      	movs	r1, #1
    5b66:	f106 000c 	add.w	r0, r6, #12
    5b6a:	f7ff ffb6 	bl	5ada <gpio_pin_set_dt>
    5b6e:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    5b70:	2201      	movs	r2, #1
    5b72:	9200      	str	r2, [sp, #0]
    5b74:	9903      	ldr	r1, [sp, #12]
    5b76:	4622      	mov	r2, r4
    5b78:	4628      	mov	r0, r5
    5b7a:	f7ff fa89 	bl	5090 <onoff_sync_finalize>
}
    5b7e:	b004      	add	sp, #16
    5b80:	bd70      	pop	{r4, r5, r6, pc}

00005b82 <disable_onoff>:
	return onoff_release(&data->mgr);
    5b82:	6900      	ldr	r0, [r0, #16]
    5b84:	3004      	adds	r0, #4
    5b86:	f7ff ba53 	b.w	5030 <onoff_release>

00005b8a <enable_onoff>:
	return onoff_request(&data->mgr, cli);
    5b8a:	6900      	ldr	r0, [r0, #16]
    5b8c:	3004      	adds	r0, #4
    5b8e:	f7ff ba06 	b.w	4f9e <onoff_request>

00005b92 <common_init.isra.0>:
static int common_init(const struct device *dev)
    5b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b94:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->enable.port)) {
    5b96:	68c0      	ldr	r0, [r0, #12]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    5b98:	f000 f9cc 	bl	5f34 <z_device_is_ready>
    5b9c:	b340      	cbz	r0, 5bf0 <common_init.isra.0+0x5e>
	if (on) {
    5b9e:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
    5ba0:	7c6b      	ldrb	r3, [r5, #17]
	return gpio_pin_configure(spec->port,
    5ba2:	68e8      	ldr	r0, [r5, #12]
    5ba4:	7c29      	ldrb	r1, [r5, #16]
    5ba6:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
    5baa:	bf16      	itet	ne
    5bac:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		flags = GPIO_OUTPUT_INACTIVE;
    5bb0:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
    5bb4:	686c      	ldrne	r4, [r5, #4]
    5bb6:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
    5bb8:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
    5bba:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5bbe:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5bc0:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5bc2:	bf48      	it	mi
    5bc4:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5bc8:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5bce:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5bd0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5bd2:	bf4c      	ite	mi
    5bd4:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5bd6:	43b5      	bicpl	r5, r6
    5bd8:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
    5bda:	f8dc 3000 	ldr.w	r3, [ip]
    5bde:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
    5be0:	4605      	mov	r5, r0
    5be2:	b918      	cbnz	r0, 5bec <common_init.isra.0+0x5a>
    5be4:	b114      	cbz	r4, 5bec <common_init.isra.0+0x5a>
    5be6:	4620      	mov	r0, r4
    5be8:	f000 fb29 	bl	623e <z_impl_k_busy_wait>
}
    5bec:	4628      	mov	r0, r5
    5bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    5bf0:	f06f 0512 	mvn.w	r5, #18
    5bf4:	e7fa      	b.n	5bec <common_init.isra.0+0x5a>

00005bf6 <regulator_fixed_init_sync>:
};

static int regulator_fixed_init_sync(const struct device *dev)
{
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
    5bf6:	6840      	ldr	r0, [r0, #4]
    5bf8:	f7ff bfcb 	b.w	5b92 <common_init.isra.0>

00005bfc <onoff_worker>:
{
    5bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
    5c00:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
    5c04:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
    5c08:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
    5c0a:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
    5c0c:	2901      	cmp	r1, #1
{
    5c0e:	4604      	mov	r4, r0
	struct driver_data_onoff *data
    5c10:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
    5c14:	d10f      	bne.n	5c36 <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    5c16:	f105 000c 	add.w	r0, r5, #12
    5c1a:	f7ff ff5e 	bl	5ada <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
    5c1e:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
    5c20:	4603      	mov	r3, r0
	data->notify = NULL;
    5c22:	2100      	movs	r1, #0
    5c24:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
    5c26:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
    5c2a:	4630      	mov	r0, r6
    5c2c:	4639      	mov	r1, r7
}
    5c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    5c32:	f7fc bb85 	b.w	2340 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
    5c36:	2902      	cmp	r1, #2
    5c38:	d107      	bne.n	5c4a <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    5c3a:	2100      	movs	r1, #0
    5c3c:	f105 000c 	add.w	r0, r5, #12
    5c40:	f7ff ff4b 	bl	5ada <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
    5c44:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
    5c46:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
    5c48:	e7eb      	b.n	5c22 <onoff_worker+0x26>
	int rc = 0;
    5c4a:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
    5c4c:	461a      	mov	r2, r3
    5c4e:	e7e8      	b.n	5c22 <onoff_worker+0x26>

00005c50 <stop>:
{
    5c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    5c54:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    5c58:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    5c5a:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
    5c5c:	6858      	ldr	r0, [r3, #4]
{
    5c5e:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5c60:	7d01      	ldrb	r1, [r0, #20]
    5c62:	f011 0101 	ands.w	r1, r1, #1
    5c66:	d113      	bne.n	5c90 <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
    5c68:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
    5c6a:	300c      	adds	r0, #12
    5c6c:	f7ff ff35 	bl	5ada <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    5c70:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
    5c74:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    5c76:	d10d      	bne.n	5c94 <stop+0x44>
		data->task = WORK_TASK_DISABLE;
    5c78:	2302      	movs	r3, #2
    5c7a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    5c7e:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    5c80:	f104 001c 	add.w	r0, r4, #28
    5c84:	2200      	movs	r2, #0
}
    5c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    5c8a:	2300      	movs	r3, #0
    5c8c:	f7fe bc64 	b.w	4558 <k_work_schedule>
	int rc = 0;
    5c90:	2300      	movs	r3, #0
		delay_us = 0;
    5c92:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
    5c94:	463a      	mov	r2, r7
    5c96:	4629      	mov	r1, r5
    5c98:	4630      	mov	r0, r6
}
    5c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    5c9e:	f7fc bb4f 	b.w	2340 <finalize_transition>

00005ca2 <start>:
{
    5ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
    5ca6:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
    5caa:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
    5cac:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
    5cae:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5cb0:	7d03      	ldrb	r3, [r0, #20]
    5cb2:	07db      	lsls	r3, r3, #31
{
    5cb4:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    5cb6:	d414      	bmi.n	5ce2 <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
    5cb8:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
    5cba:	2101      	movs	r1, #1
    5cbc:	300c      	adds	r0, #12
    5cbe:	f7ff ff0c 	bl	5ada <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
    5cc2:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
    5cc6:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
    5cc8:	d10d      	bne.n	5ce6 <start+0x44>
		data->task = WORK_TASK_ENABLE;
    5cca:	2301      	movs	r3, #1
    5ccc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
    5cd0:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
    5cd2:	f104 001c 	add.w	r0, r4, #28
    5cd6:	2200      	movs	r2, #0
}
    5cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
    5cdc:	2300      	movs	r3, #0
    5cde:	f7fe bc3b 	b.w	4558 <k_work_schedule>
	int rc = 0;
    5ce2:	2300      	movs	r3, #0
		delay_us = 0;
    5ce4:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
    5ce6:	4632      	mov	r2, r6
    5ce8:	4629      	mov	r1, r5
    5cea:	4638      	mov	r0, r7
}
    5cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
    5cf0:	f7fc bb26 	b.w	2340 <finalize_transition>

00005cf4 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    5cf4:	6902      	ldr	r2, [r0, #16]
{
    5cf6:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    5cf8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5cfc:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5d00:	2000      	movs	r0, #0
    5d02:	4770      	bx	lr

00005d04 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5d04:	6843      	ldr	r3, [r0, #4]
    5d06:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5d08:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5d0c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5d10:	4770      	bx	lr

00005d12 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5d12:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    5d14:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    5d16:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d18:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5d1c:	b148      	cbz	r0, 5d32 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5d1e:	7c52      	ldrb	r2, [r2, #17]
    5d20:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d22:	2000      	movs	r0, #0
    5d24:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5d28:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d2c:	2201      	movs	r2, #1
    5d2e:	601a      	str	r2, [r3, #0]
	return 0;
    5d30:	4770      	bx	lr
		return -1;
    5d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5d36:	4770      	bx	lr

00005d38 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    5d38:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    5d3a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d3c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5d40:	b940      	cbnz	r0, 5d54 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5d42:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5d44:	079b      	lsls	r3, r3, #30
    5d46:	d406      	bmi.n	5d56 <is_tx_ready.isra.0+0x1e>
    5d48:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    5d4c:	3800      	subs	r0, #0
    5d4e:	bf18      	it	ne
    5d50:	2001      	movne	r0, #1
    5d52:	4770      	bx	lr
    5d54:	2001      	movs	r0, #1
}
    5d56:	4770      	bx	lr

00005d58 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    5d58:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5d5a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5d5c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5d60:	05c9      	lsls	r1, r1, #23
    5d62:	d518      	bpl.n	5d96 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d64:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    5d68:	b1a9      	cbz	r1, 5d96 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5d6a:	f04f 0020 	mov.w	r0, #32
    5d6e:	f3ef 8111 	mrs	r1, BASEPRI
    5d72:	f380 8812 	msr	BASEPRI_MAX, r0
    5d76:	f3bf 8f6f 	isb	sy
    5d7a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5d7e:	b130      	cbz	r0, 5d8e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d80:	2000      	movs	r0, #0
    5d82:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    5d86:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d8a:	2001      	movs	r0, #1
    5d8c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    5d8e:	f381 8811 	msr	BASEPRI, r1
    5d92:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5d96:	6852      	ldr	r2, [r2, #4]
    5d98:	06d2      	lsls	r2, r2, #27
    5d9a:	d515      	bpl.n	5dc8 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    5d9c:	f04f 0120 	mov.w	r1, #32
    5da0:	f3ef 8211 	mrs	r2, BASEPRI
    5da4:	f381 8812 	msr	BASEPRI_MAX, r1
    5da8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5dac:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5db0:	b111      	cbz	r1, 5db8 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5db2:	2100      	movs	r1, #0
    5db4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5db8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5dbc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    5dc0:	f382 8811 	msr	BASEPRI, r2
    5dc4:	f3bf 8f6f 	isb	sy
}
    5dc8:	4770      	bx	lr

00005dca <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5dca:	4770      	bx	lr

00005dcc <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    5dcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5dd0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    5dd4:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    5dd6:	bf04      	itt	eq
    5dd8:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    5ddc:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    5de0:	1f83      	subs	r3, r0, #6
    5de2:	4258      	negs	r0, r3
    5de4:	4158      	adcs	r0, r3
    5de6:	4770      	bx	lr

00005de8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    5de8:	4700      	bx	r0

00005dea <nrfx_busy_wait>:
    5dea:	f000 ba28 	b.w	623e <z_impl_k_busy_wait>

00005dee <nrfx_clock_enable>:
{
    5dee:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5df0:	2000      	movs	r0, #0
    5df2:	f7fb fa13 	bl	121c <arch_irq_is_enabled>
    5df6:	b918      	cbnz	r0, 5e00 <nrfx_clock_enable+0x12>
}
    5df8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5dfc:	f7fb b9ea 	b.w	11d4 <arch_irq_enable>
    5e00:	bd08      	pop	{r3, pc}

00005e02 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    5e02:	f000 001f 	and.w	r0, r0, #31
    5e06:	0080      	lsls	r0, r0, #2
    5e08:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5e0c:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    5e10:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5e18:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    5e1c:	4770      	bx	lr

00005e1e <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    5e1e:	7b0a      	ldrb	r2, [r1, #12]
{
    5e20:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    5e22:	2a03      	cmp	r2, #3
    5e24:	d829      	bhi.n	5e7a <xfer_completeness_check+0x5c>
    5e26:	e8df f002 	tbb	[pc, r2]
    5e2a:	2521      	.short	0x2521
    5e2c:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    5e2e:	688a      	ldr	r2, [r1, #8]
    5e30:	0350      	lsls	r0, r2, #13
    5e32:	d504      	bpl.n	5e3e <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    5e34:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    5e38:	6908      	ldr	r0, [r1, #16]
    5e3a:	4290      	cmp	r0, r2
    5e3c:	d107      	bne.n	5e4e <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    5e3e:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    5e40:	0352      	lsls	r2, r2, #13
    5e42:	d41a      	bmi.n	5e7a <xfer_completeness_check+0x5c>
    5e44:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    5e48:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    5e4a:	4291      	cmp	r1, r2
    5e4c:	d015      	beq.n	5e7a <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    5e4e:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    5e50:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    5e52:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    5e56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5e5a:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    5e5c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    5e60:	6908      	ldr	r0, [r1, #16]
    5e62:	4290      	cmp	r0, r2
    5e64:	d1f3      	bne.n	5e4e <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    5e66:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    5e6a:	e7ed      	b.n	5e48 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    5e6c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    5e70:	6909      	ldr	r1, [r1, #16]
    5e72:	e7ea      	b.n	5e4a <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    5e74:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    5e78:	e7fa      	b.n	5e70 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    5e7a:	2001      	movs	r0, #1
}
    5e7c:	4770      	bx	lr

00005e7e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    5e7e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    5e80:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    5e82:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    5e84:	bf9c      	itt	ls
    5e86:	6880      	ldrls	r0, [r0, #8]
    5e88:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    5e8a:	3b01      	subs	r3, #1
    5e8c:	1a98      	subs	r0, r3, r2
}
    5e8e:	4770      	bx	lr

00005e90 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    5e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    5e94:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    5e98:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    5e9a:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5e9e:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    5ea0:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5ea2:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    5ea4:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    5ea6:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    5ea8:	d906      	bls.n	5eb8 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    5eaa:	f7ff f9b0 	bl	520e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    5eae:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    5eb2:	60ec      	str	r4, [r5, #12]
}
    5eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    5eb8:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    5eba:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    5ebe:	f7ff f9a6 	bl	520e <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    5ec2:	6868      	ldr	r0, [r5, #4]
    5ec4:	4622      	mov	r2, r4
    5ec6:	eb07 0108 	add.w	r1, r7, r8
    5eca:	e7ee      	b.n	5eaa <_WriteNoCheck+0x1a>

00005ecc <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    5ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    5ed0:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    5ed2:	4606      	mov	r6, r0
    5ed4:	4689      	mov	r9, r1
    5ed6:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    5ed8:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    5edc:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    5ede:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5ee0:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    5ee2:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    5ee4:	bf28      	it	cs
    5ee6:	18e4      	addcs	r4, r4, r3
    5ee8:	3c01      	subs	r4, #1
    5eea:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    5eec:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    5eee:	42bc      	cmp	r4, r7
    5ef0:	bf28      	it	cs
    5ef2:	463c      	movcs	r4, r7
    5ef4:	4294      	cmp	r4, r2
    5ef6:	bf28      	it	cs
    5ef8:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    5efa:	4649      	mov	r1, r9
    5efc:	4622      	mov	r2, r4
    5efe:	4428      	add	r0, r5
    5f00:	f7ff f985 	bl	520e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    5f04:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    5f06:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
    5f08:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    5f0a:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    5f0c:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
    5f0e:	42ab      	cmp	r3, r5
    5f10:	bf08      	it	eq
    5f12:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    5f14:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    5f18:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    5f1a:	2f00      	cmp	r7, #0
    5f1c:	d1de      	bne.n	5edc <_WriteBlocking+0x10>
}
    5f1e:	4640      	mov	r0, r8
    5f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005f24 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    5f24:	f7fd bf3e 	b.w	3da4 <_DoInit>

00005f28 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    5f28:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    5f2a:	f7ff fffb 	bl	5f24 <SEGGER_RTT_Init>

	return 0;
}
    5f2e:	2000      	movs	r0, #0
    5f30:	bd08      	pop	{r3, pc}

00005f32 <z_device_state_init>:
}
    5f32:	4770      	bx	lr

00005f34 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5f34:	b138      	cbz	r0, 5f46 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5f36:	68c3      	ldr	r3, [r0, #12]
    5f38:	8818      	ldrh	r0, [r3, #0]
    5f3a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    5f3e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    5f42:	4258      	negs	r0, r3
    5f44:	4158      	adcs	r0, r3
}
    5f46:	4770      	bx	lr

00005f48 <arch_system_halt>:
	__asm__ volatile(
    5f48:	f04f 0220 	mov.w	r2, #32
    5f4c:	f3ef 8311 	mrs	r3, BASEPRI
    5f50:	f382 8812 	msr	BASEPRI_MAX, r2
    5f54:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    5f58:	e7fe      	b.n	5f58 <arch_system_halt+0x10>

00005f5a <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    5f5a:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    5f5c:	f7ff fff4 	bl	5f48 <arch_system_halt>

00005f60 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f62:	4605      	mov	r5, r0
    5f64:	460e      	mov	r6, r1
    5f66:	f04f 0320 	mov.w	r3, #32
    5f6a:	f3ef 8711 	mrs	r7, BASEPRI
    5f6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5f72:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5f76:	f7fe fd9d 	bl	4ab4 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5f7a:	4631      	mov	r1, r6
    5f7c:	4604      	mov	r4, r0
    5f7e:	4628      	mov	r0, r5
    5f80:	f7ff ffeb 	bl	5f5a <k_sys_fatal_error_handler>
	__asm__ volatile(
    5f84:	f387 8811 	msr	BASEPRI, r7
    5f88:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5f8c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5f92:	f7fb bb79 	b.w	1688 <z_impl_k_thread_abort>

00005f96 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5f96:	f3ef 8005 	mrs	r0, IPSR
}
    5f9a:	3800      	subs	r0, #0
    5f9c:	bf18      	it	ne
    5f9e:	2001      	movne	r0, #1
    5fa0:	4770      	bx	lr

00005fa2 <z_impl_k_thread_name_set>:
}
    5fa2:	f06f 0057 	mvn.w	r0, #87	; 0x57
    5fa6:	4770      	bx	lr

00005fa8 <z_impl_k_thread_start>:
	z_sched_start(thread);
    5fa8:	f7fe bc18 	b.w	47dc <z_sched_start>

00005fac <z_pm_save_idle_exit>:
{
    5fac:	b508      	push	{r3, lr}
	pm_system_resume();
    5fae:	f7fa ffd7 	bl	f60 <pm_system_resume>
}
    5fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    5fb6:	f7ff bf08 	b.w	5dca <sys_clock_idle_exit>

00005fba <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    5fba:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    5fbc:	2301      	movs	r3, #1
    5fbe:	408b      	lsls	r3, r1
    5fc0:	ea22 0303 	bic.w	r3, r2, r3
    5fc4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    5fc6:	fa22 f001 	lsr.w	r0, r2, r1
}
    5fca:	f000 0001 	and.w	r0, r0, #1
    5fce:	4770      	bx	lr

00005fd0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    5fd0:	b120      	cbz	r0, 5fdc <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    5fd2:	2200      	movs	r2, #0
    5fd4:	4611      	mov	r1, r2
    5fd6:	3088      	adds	r0, #136	; 0x88
    5fd8:	f000 b8ce 	b.w	6178 <z_sched_wake>
}
    5fdc:	4770      	bx	lr

00005fde <work_timeout>:
{
    5fde:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5fe0:	4604      	mov	r4, r0
	__asm__ volatile(
    5fe2:	f04f 0320 	mov.w	r3, #32
    5fe6:	f3ef 8511 	mrs	r5, BASEPRI
    5fea:	f383 8812 	msr	BASEPRI_MAX, r3
    5fee:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    5ff2:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    5ff4:	f1a0 0610 	sub.w	r6, r0, #16
    5ff8:	2103      	movs	r1, #3
    5ffa:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    5ffc:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    5ffe:	f7ff ffdc 	bl	5fba <flag_test_and_clear>
    6002:	b128      	cbz	r0, 6010 <work_timeout+0x32>
		queue = dw->queue;
    6004:	69a3      	ldr	r3, [r4, #24]
    6006:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    6008:	a901      	add	r1, sp, #4
    600a:	4630      	mov	r0, r6
    600c:	f7fe f9f2 	bl	43f4 <submit_to_queue_locked>
	__asm__ volatile(
    6010:	f385 8811 	msr	BASEPRI, r5
    6014:	f3bf 8f6f 	isb	sy
}
    6018:	b002      	add	sp, #8
    601a:	bd70      	pop	{r4, r5, r6, pc}

0000601c <k_work_init_delayable>:
{
    601c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    601e:	2230      	movs	r2, #48	; 0x30
{
    6020:	4604      	mov	r4, r0
    6022:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    6024:	2100      	movs	r1, #0
    6026:	f7ff f8fd 	bl	5224 <memset>
    602a:	f44f 7380 	mov.w	r3, #256	; 0x100
    602e:	6065      	str	r5, [r4, #4]
    6030:	60e3      	str	r3, [r4, #12]
}
    6032:	bd38      	pop	{r3, r4, r5, pc}

00006034 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    6034:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6038:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    603a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    603c:	2300      	movs	r3, #0
	node->prev = NULL;
    603e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6042:	4770      	bx	lr

00006044 <unpend_thread_no_timeout>:
{
    6044:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6046:	f7ff fff5 	bl	6034 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    604a:	7b43      	ldrb	r3, [r0, #13]
    604c:	f023 0302 	bic.w	r3, r3, #2
    6050:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    6052:	2300      	movs	r3, #0
    6054:	6083      	str	r3, [r0, #8]
}
    6056:	bd08      	pop	{r3, pc}

00006058 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6058:	4603      	mov	r3, r0
    605a:	b920      	cbnz	r0, 6066 <z_reschedule_irqlock+0xe>
    605c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    6060:	b90a      	cbnz	r2, 6066 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    6062:	f7fb b929 	b.w	12b8 <arch_swap>
    6066:	f383 8811 	msr	BASEPRI, r3
    606a:	f3bf 8f6f 	isb	sy
}
    606e:	4770      	bx	lr

00006070 <z_reschedule_unlocked>:
	__asm__ volatile(
    6070:	f04f 0320 	mov.w	r3, #32
    6074:	f3ef 8011 	mrs	r0, BASEPRI
    6078:	f383 8812 	msr	BASEPRI_MAX, r3
    607c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6080:	f7ff bfea 	b.w	6058 <z_reschedule_irqlock>

00006084 <z_priq_dumb_best>:
{
    6084:	4603      	mov	r3, r0
	return list->head == list;
    6086:	6800      	ldr	r0, [r0, #0]
}
    6088:	4283      	cmp	r3, r0
    608a:	bf08      	it	eq
    608c:	2000      	moveq	r0, #0
    608e:	4770      	bx	lr

00006090 <z_ready_thread>:
{
    6090:	b510      	push	{r4, lr}
    6092:	f04f 0320 	mov.w	r3, #32
    6096:	f3ef 8411 	mrs	r4, BASEPRI
    609a:	f383 8812 	msr	BASEPRI_MAX, r3
    609e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    60a2:	f7fe fb65 	bl	4770 <ready_thread>
	__asm__ volatile(
    60a6:	f384 8811 	msr	BASEPRI, r4
    60aa:	f3bf 8f6f 	isb	sy
}
    60ae:	bd10      	pop	{r4, pc}

000060b0 <z_thread_timeout>:
{
    60b0:	b510      	push	{r4, lr}
    60b2:	4601      	mov	r1, r0
	__asm__ volatile(
    60b4:	f04f 0320 	mov.w	r3, #32
    60b8:	f3ef 8411 	mrs	r4, BASEPRI
    60bc:	f383 8812 	msr	BASEPRI_MAX, r3
    60c0:	f3bf 8f6f 	isb	sy
		if (!killed) {
    60c4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    60c8:	f013 0f28 	tst.w	r3, #40	; 0x28
    60cc:	d10d      	bne.n	60ea <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    60ce:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    60d2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    60d4:	b10b      	cbz	r3, 60da <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    60d6:	f7ff ffb5 	bl	6044 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    60da:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    60de:	f023 0314 	bic.w	r3, r3, #20
    60e2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    60e6:	f7fe fb43 	bl	4770 <ready_thread>
	__asm__ volatile(
    60ea:	f384 8811 	msr	BASEPRI, r4
    60ee:	f3bf 8f6f 	isb	sy
}
    60f2:	bd10      	pop	{r4, pc}

000060f4 <add_to_waitq_locked>:
{
    60f4:	b538      	push	{r3, r4, r5, lr}
    60f6:	4604      	mov	r4, r0
    60f8:	460d      	mov	r5, r1
	unready_thread(thread);
    60fa:	f7fe fb8d 	bl	4818 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    60fe:	7b63      	ldrb	r3, [r4, #13]
    6100:	f043 0302 	orr.w	r3, r3, #2
    6104:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6106:	b195      	cbz	r5, 612e <add_to_waitq_locked+0x3a>
    6108:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    610a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    610c:	429d      	cmp	r5, r3
    610e:	d015      	beq.n	613c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6110:	b1a3      	cbz	r3, 613c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    6112:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6116:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    611a:	4291      	cmp	r1, r2
    611c:	d008      	beq.n	6130 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    611e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6120:	2a00      	cmp	r2, #0
    6122:	dd05      	ble.n	6130 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    6124:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6126:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    612a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    612c:	605c      	str	r4, [r3, #4]
}
    612e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6130:	686a      	ldr	r2, [r5, #4]
    6132:	4293      	cmp	r3, r2
    6134:	d002      	beq.n	613c <add_to_waitq_locked+0x48>
    6136:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6138:	2b00      	cmp	r3, #0
    613a:	d1ec      	bne.n	6116 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    613c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    613e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6142:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6144:	606c      	str	r4, [r5, #4]
}
    6146:	e7f2      	b.n	612e <add_to_waitq_locked+0x3a>

00006148 <z_unpend_first_thread>:
{
    6148:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    614a:	f04f 0320 	mov.w	r3, #32
    614e:	f3ef 8511 	mrs	r5, BASEPRI
    6152:	f383 8812 	msr	BASEPRI_MAX, r3
    6156:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    615a:	f7ff ff93 	bl	6084 <z_priq_dumb_best>
		if (thread != NULL) {
    615e:	4604      	mov	r4, r0
    6160:	b120      	cbz	r0, 616c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    6162:	f7ff ff6f 	bl	6044 <unpend_thread_no_timeout>
    6166:	3018      	adds	r0, #24
    6168:	f000 f823 	bl	61b2 <z_abort_timeout>
	__asm__ volatile(
    616c:	f385 8811 	msr	BASEPRI, r5
    6170:	f3bf 8f6f 	isb	sy
}
    6174:	4620      	mov	r0, r4
    6176:	bd38      	pop	{r3, r4, r5, pc}

00006178 <z_sched_wake>:
{
    6178:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    617a:	f04f 0320 	mov.w	r3, #32
    617e:	f3ef 8511 	mrs	r5, BASEPRI
    6182:	f383 8812 	msr	BASEPRI_MAX, r3
    6186:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    618a:	f7ff ff7b 	bl	6084 <z_priq_dumb_best>
		if (thread != NULL) {
    618e:	4604      	mov	r4, r0
    6190:	b150      	cbz	r0, 61a8 <z_sched_wake+0x30>
    6192:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6194:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    6196:	f7ff ff55 	bl	6044 <unpend_thread_no_timeout>
    619a:	3018      	adds	r0, #24
    619c:	f000 f809 	bl	61b2 <z_abort_timeout>
			ready_thread(thread);
    61a0:	4620      	mov	r0, r4
    61a2:	f7fe fae5 	bl	4770 <ready_thread>
			ret = true;
    61a6:	2001      	movs	r0, #1
	__asm__ volatile(
    61a8:	f385 8811 	msr	BASEPRI, r5
    61ac:	f3bf 8f6f 	isb	sy
}
    61b0:	bd38      	pop	{r3, r4, r5, pc}

000061b2 <z_abort_timeout>:
{
    61b2:	b510      	push	{r4, lr}
	__asm__ volatile(
    61b4:	f04f 0220 	mov.w	r2, #32
    61b8:	f3ef 8411 	mrs	r4, BASEPRI
    61bc:	f382 8812 	msr	BASEPRI_MAX, r2
    61c0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    61c4:	6803      	ldr	r3, [r0, #0]
    61c6:	b13b      	cbz	r3, 61d8 <z_abort_timeout+0x26>
			remove_timeout(to);
    61c8:	f7fe fd28 	bl	4c1c <remove_timeout>
			ret = 0;
    61cc:	2000      	movs	r0, #0
	__asm__ volatile(
    61ce:	f384 8811 	msr	BASEPRI, r4
    61d2:	f3bf 8f6f 	isb	sy
}
    61d6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    61d8:	f06f 0015 	mvn.w	r0, #21
    61dc:	e7f7      	b.n	61ce <z_abort_timeout+0x1c>

000061de <z_get_next_timeout_expiry>:
{
    61de:	b510      	push	{r4, lr}
	__asm__ volatile(
    61e0:	f04f 0320 	mov.w	r3, #32
    61e4:	f3ef 8411 	mrs	r4, BASEPRI
    61e8:	f383 8812 	msr	BASEPRI_MAX, r3
    61ec:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    61f0:	f7fe fcee 	bl	4bd0 <next_timeout>
	__asm__ volatile(
    61f4:	f384 8811 	msr	BASEPRI, r4
    61f8:	f3bf 8f6f 	isb	sy
}
    61fc:	bd10      	pop	{r4, pc}

000061fe <z_set_timeout_expiry>:
{
    61fe:	b570      	push	{r4, r5, r6, lr}
    6200:	4604      	mov	r4, r0
    6202:	460d      	mov	r5, r1
	__asm__ volatile(
    6204:	f04f 0320 	mov.w	r3, #32
    6208:	f3ef 8611 	mrs	r6, BASEPRI
    620c:	f383 8812 	msr	BASEPRI_MAX, r3
    6210:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    6214:	f7fe fcdc 	bl	4bd0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6218:	2801      	cmp	r0, #1
    621a:	dd05      	ble.n	6228 <z_set_timeout_expiry+0x2a>
    621c:	42a0      	cmp	r0, r4
    621e:	db03      	blt.n	6228 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6220:	4629      	mov	r1, r5
    6222:	4620      	mov	r0, r4
    6224:	f7fc fca4 	bl	2b70 <sys_clock_set_timeout>
	__asm__ volatile(
    6228:	f386 8811 	msr	BASEPRI, r6
    622c:	f3bf 8f6f 	isb	sy
}
    6230:	bd70      	pop	{r4, r5, r6, pc}

00006232 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6232:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6234:	f7fe fde2 	bl	4dfc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6238:	bd08      	pop	{r3, pc}

0000623a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    623a:	f7fe bddf 	b.w	4dfc <sys_clock_tick_get>

0000623e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    623e:	b108      	cbz	r0, 6244 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6240:	f7fb bb2c 	b.w	189c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6244:	4770      	bx	lr
	...

00006248 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6248:	f7fc bcea 	b.w	2c20 <SystemInit>
